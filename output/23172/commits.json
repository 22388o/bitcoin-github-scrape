[
  {
    "sha": "fafff132cf4e5c2950d28f63cb4320236d1a5495",
    "node_id": "C_kwDOABII59oAKGZhZmZmMTMyY2Y0ZTVjMjk1MGQyOGY2M2NiNDMyMDIzNmQxYTU0OTU",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-04T12:25:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-04T12:55:10Z"
      },
      "message": "doc: Extract FundTxDoc\n\nFor the fields: conf_target, estimate_mode, replaceable, and solving_data.",
      "tree": {
        "sha": "9b81b8a3e2ed96f58849adef5831ffe057ac68c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b81b8a3e2ed96f58849adef5831ffe057ac68c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafff132cf4e5c2950d28f63cb4320236d1a5495",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi5AQwAxO3gNZjUgLW7gJyTIrtkQhGBSD1ZGWtl/fXg7d9QoYmvWqLIhttUdyZj\n522T85ce5qOs/BbCGHcqj03aFtkcgTUWzkUjEKMmSIbeb5Sno/2Db48M0TL8LbhM\nIhO+C/ijSVU/0pn2ex+O57gEzogUgYZjD3kChk4PRvsWYuhgtCehXG03eiNOCFCs\nKYlgZLPuGxsWR/lUm5gufk4Fqxa5IwAZnbDgEd7pZwBZ0o8hVlAB6uNTzkFMQNG+\nJDiwPDxYbxwjp8F769vvFzlqdijiWzgeBngBHCV3cbDOnXtRueDacnmba3XimVG3\nhWmE8gvBmR2pLs4LGlmxzeqWJfVwqh98ANZ1aqLsbnl3SiRaGgHJ/9K9QwfKV4Xk\nT8fm6r/UvvLPjwTEcndpwlAjdTQNmFBF4CF4nU/0fiUbzUN4zGcUZ2Aq7Qxwh9TU\nQqS1vdWb9ixUJFvsk63lGXxRDE/QKRyf0/ZN8Acywxy0H1S7EsGuiisFaPmFPPmY\n+yjOPcXm\n=PcEg\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b81b8a3e2ed96f58849adef5831ffe057ac68c2\nparent c6f710ec985518ccff6dd69426625f2ed0d102f8\nauthor MarcoFalke <falke.marco@gmail.com> 1633350323 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1633352110 +0200\n\ndoc: Extract FundTxDoc\n\nFor the fields: conf_target, estimate_mode, replaceable, and solving_data.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafff132cf4e5c2950d28f63cb4320236d1a5495",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafff132cf4e5c2950d28f63cb4320236d1a5495",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafff132cf4e5c2950d28f63cb4320236d1a5495/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6f710ec985518ccff6dd69426625f2ed0d102f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6f710ec985518ccff6dd69426625f2ed0d102f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6f710ec985518ccff6dd69426625f2ed0d102f8"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 34,
      "deletions": 75
    },
    "files": [
      {
        "sha": "500ac55f2b47e4894189801b58b4937766edc206",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 75,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafff132cf4e5c2950d28f63cb4320236d1a5495/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafff132cf4e5c2950d28f63cb4320236d1a5495/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fafff132cf4e5c2950d28f63cb4320236d1a5495",
        "patch": "@@ -3177,6 +3177,34 @@ static RPCHelpMan listunspent()\n     };\n }\n \n+// Only includes key documentation where the key is snake_case in all RPC methods. MixedCase keys can be added later.\n+static std::vector<RPCArg> FundTxDoc()\n+{\n+    return {\n+        {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+        {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+        {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n+            \"Allows this transaction to be replaced by a transaction with higher fees\"},\n+        {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n+            \"Used for fee estimation during coin selection.\",\n+         {\n+             {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n+             {\n+                 {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n+             }},\n+             {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n+             {\n+                 {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n+             }},\n+             {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n+             {\n+                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n+             }},\n+         }},\n+    };\n+}\n+\n void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl, bool override_min_fee)\n {\n     // Make sure the results are valid at least up to the most recent block\n@@ -3394,6 +3422,7 @@ static RPCHelpMan fundrawtransaction()\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                        Cat<std::vector<RPCArg>>(\n                         {\n                             {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n@@ -3416,32 +3445,8 @@ static RPCHelpMan fundrawtransaction()\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n-                                                          \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-                            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                            {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n-                                \"Used for fee estimation during coin selection.\",\n-                                {\n-                                    {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n-                                        {\n-                                            {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n-                                        },\n-                                    },\n-                                    {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n-                                        {\n-                                            {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n-                                        },\n-                                    },\n-                                    {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n-                                        {\n-                                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n-                                        },\n-                                    }\n-                                }\n-                            },\n                         },\n+                        FundTxDoc()),\n                         \"options\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                         \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n@@ -4250,6 +4255,7 @@ static RPCHelpMan send()\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n             {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n                 {\n                     {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n                     {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n@@ -4259,9 +4265,6 @@ static RPCHelpMan send()\n                     {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n                     {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n                     {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n@@ -4284,29 +4287,8 @@ static RPCHelpMan send()\n                             {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n-                                                  \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                    {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n-                        \"Used for fee estimation during coin selection.\",\n-                        {\n-                            {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n-                                {\n-                                    {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n-                                },\n-                            },\n-                            {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n-                                {\n-                                    {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n-                                },\n-                            },\n-                            {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n-                                {\n-                                    {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n-                                },\n-                            }\n-                        }\n-                    },\n                 },\n+                FundTxDoc()),\n                 \"options\"},\n         },\n         RPCResult{\n@@ -4627,6 +4609,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                     },\n                     {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        Cat<std::vector<RPCArg>>(\n                         {\n                             {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n                             {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n@@ -4647,32 +4630,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n                                     {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125 replaceable.\\n\"\n-                                                          \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-                            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                            {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n-                                \"Used for fee estimation during coin selection.\",\n-                                {\n-                                    {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n-                                        {\n-                                            {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n-                                        },\n-                                    },\n-                                    {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n-                                        {\n-                                            {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n-                                        },\n-                                    },\n-                                    {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n-                                        {\n-                                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n-                                        },\n-                                    }\n-                                }\n-                            },\n                         },\n+                        FundTxDoc()),\n                         \"options\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n                 },"
      }
    ]
  }
]