[
  {
    "sha": "f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODA4YzIzMmRmMDVmNjlmMGNlZjFmYjZlOGE4ZDFkMDQxNGE5MjJj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-27T15:58:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-12T14:20:48Z"
      },
      "message": "util: Use locale independent ToString(\u2026) instead of locale dependent strprintf(\u2026) for low-level string formatting",
      "tree": {
        "sha": "cc6be43feb359df5a9eac411755ac4ceeb929316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc6be43feb359df5a9eac411755ac4ceeb929316"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e45fb7e0d276ce13447a08e5270930bef3c56dd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e45fb7e0d276ce13447a08e5270930bef3c56dd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e45fb7e0d276ce13447a08e5270930bef3c56dd1"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 20,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c78c49301f9ff20981d24a778a789aa8c7d2b8cc",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -12,8 +12,9 @@\n #include <serialize.h>\n #include <streams.h>\n #include <univalue.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n@@ -99,7 +100,7 @@ std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDeco\n         }\n         if (0 <= opcode && opcode <= OP_PUSHDATA4) {\n             if (vch.size() <= static_cast<std::vector<unsigned char>::size_type>(4)) {\n-                str += strprintf(\"%d\", CScriptNum(vch, false).getint());\n+                str += ToString(CScriptNum(vch, false).getint());\n             } else {\n                 // the IsUnspendable check makes sure not to try to decode OP_RETURN data that may match the format of a signature\n                 if (fAttemptSighashDecode && !script.IsUnspendable()) {"
      },
      {
        "sha": "3dda248796b036580f071df76b7e40738bfc8a6c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -14,13 +14,14 @@\n #include <clientversion.h>\n #include <consensus/consensus.h>\n #include <crypto/sha256.h>\n-#include <netbase.h>\n #include <net_permissions.h>\n+#include <netbase.h>\n #include <protocol.h>\n #include <random.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/translation.h>\n \n #ifdef WIN32\n@@ -1471,7 +1472,7 @@ static CThreadInterrupt g_upnp_interrupt;\n static std::thread g_upnp_thread;\n static void ThreadMapPort()\n {\n-    std::string port = strprintf(\"%u\", GetListenPort());\n+    std::string port = ToString(GetListenPort());\n     const char * multicastif = nullptr;\n     const char * minissdpdpath = nullptr;\n     struct UPNPDev * devlist = nullptr;"
      },
      {
        "sha": "eebac7b606cf0d3ff3b230727e779bf9cfa1eaa4",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -4,10 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <netaddress.h>\n+\n #include <hash.h>\n-#include <util/strencodings.h>\n-#include <util/asmap.h>\n #include <tinyformat.h>\n+#include <util/asmap.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n@@ -735,7 +737,7 @@ std::vector<unsigned char> CService::GetKey() const\n \n std::string CService::ToStringPort() const\n {\n-    return strprintf(\"%u\", port);\n+    return ::ToString(port);\n }\n \n std::string CService::ToStringIPPort() const\n@@ -865,7 +867,7 @@ std::string CSubNet::ToString() const\n     /* Format output */\n     std::string strNetmask;\n     if (valid_cidr) {\n-        strNetmask = strprintf(\"%u\", cidr);\n+        strNetmask = ::ToString(cidr);\n     } else {\n         if (network.IsIPv4())\n             strNetmask = strprintf(\"%u.%u.%u.%u\", netmask[12], netmask[13], netmask[14], netmask[15]);"
      },
      {
        "sha": "ba44ba844b703113df512f370e446b5d958a360d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -797,7 +797,7 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n     if (proxy.randomize_credentials) {\n         ProxyCredentials random_auth;\n         static std::atomic_int counter(0);\n-        random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n+        random_auth.username = random_auth.password = ToString(counter++);\n         if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket)) {\n             return false;\n         }"
      },
      {
        "sha": "728e30b628e3e2b797effa913be2ea6796f65850",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -8,12 +8,12 @@\n #include <pubkey.h>\n #include <script/script.h>\n #include <script/standard.h>\n-\n #include <span.h>\n #include <util/bip32.h>\n #include <util/spanparsing.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n #include <util/vector.h>\n \n #include <memory>\n@@ -678,7 +678,7 @@ class MultisigDescriptor final : public DescriptorImpl\n     const int m_threshold;\n     const bool m_sorted;\n protected:\n-    std::string ToStringExtra() const override { return strprintf(\"%i\", m_threshold); }\n+    std::string ToStringExtra() const override { return ::ToString(m_threshold); }\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider&) const override {\n         if (m_sorted) {\n             std::vector<CPubKey> sorted_keys(keys);"
      },
      {
        "sha": "90e9235b3da0b7ce7ca7fcdb4829499eeabcd015",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -42,6 +42,7 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n #include <validationinterface.h>\n@@ -714,7 +715,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n         return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-too-many-sigops\",\n-                strprintf(\"%d\", nSigOpsCost));\n+                             ToString(nSigOpsCost));\n \n     // No transactions are allowed below minRelayTxFee except from disconnected\n     // blocks"
      },
      {
        "sha": "c6a6a7e8d414258e7c227e53371a4d77264090ce",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -4222,7 +4222,7 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n         \"\\nUpgrade the wallet. Upgrades to the latest version if no version number is specified\\n\"\n         \"New keys may be generated and a new wallet backup will need to be made.\",\n         {\n-            {\"version\", RPCArg::Type::NUM, /* default */ strprintf(\"%d\", FEATURE_LATEST), \"The version number to upgrade to. Default is the latest wallet version\"}\n+            {\"version\", RPCArg::Type::NUM, /* default */ ToString(FEATURE_LATEST), \"The version number to upgrade to. Default is the latest wallet version\"}\n         },\n         RPCResults{},\n         RPCExamples{"
      },
      {
        "sha": "d433c0fbc5104390e6c6c97fa47d5658a43aada4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f808c232df05f69f0cef1fb6e8a8d1d0414a922c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f808c232df05f69f0cef1fb6e8a8d1d0414a922c",
        "patch": "@@ -402,7 +402,7 @@ class CWalletTx\n         mapValueCopy[\"fromaccount\"] = \"\";\n         WriteOrderPos(nOrderPos, mapValueCopy);\n         if (nTimeSmart) {\n-            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+            mapValueCopy[\"timesmart\"] = ToString(nTimeSmart);\n         }\n \n         std::vector<char> dummy_vector1; //!< Used to be vMerkleBranch"
      }
    ]
  }
]