[
  {
    "sha": "7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWE2YThhZWZiYjIwMTNlZjNkYzg3ZWNiZGY1ZDk0N2Q0YjQxM2Fm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:41:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:00:09Z"
      },
      "message": "Add ParseRange function to parse args of the form int/[int,int]",
      "tree": {
        "sha": "f0eec090a9f4d18a90e5508a24e1df53bca3e1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0eec090a9f4d18a90e5508a24e1df53bca3e1de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29c24b05fb71a5577af9f58298493c1f2d489069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c24b05fb71a5577af9f58298493c1f2d489069",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c24b05fb71a5577af9f58298493c1f2d489069"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7fb139f93c05fc5176a034954ad165508d51a8ec",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "patch": "@@ -523,3 +523,17 @@ std::string RPCArg::ToString(const bool oneline) const\n     }\n     assert(false);\n }\n+\n+std::pair<int64_t, int64_t> ParseRange(const UniValue& value)\n+{\n+    if (value.isNum()) {\n+        return {0, value.get_int64()};\n+    }\n+    if (value.isArray() && value.size() == 2 && value[0].isNum() && value[1].isNum()) {\n+        int64_t low = value[0].get_int64();\n+        int64_t high = value[1].get_int64();\n+        if (low > high) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range specified as [begin,end] must not have begin after end\");\n+        return {low, high};\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified as end or as [begin,end]\");\n+}"
      },
      {
        "sha": "f11998bafaa3b4c6166d2bcebf8bc1e1ecb29d72",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "patch": "@@ -38,6 +38,9 @@ unsigned int ParseConfirmTarget(const UniValue& value);\n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");\n \n+//! Parse a JSON range specified as int64, or [int64, int64]\n+std::pair<int64_t, int64_t> ParseRange(const UniValue& value);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      }
    ]
  },
  {
    "sha": "6b9f45e81bfe7472493b6df66133c929780ef2fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjlmNDVlODFiZmU3NDcyNDkzYjZkZjY2MTMzYzkyOTc4MGVmMmZi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:45:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:00:13Z"
      },
      "message": "Support ranges arguments in RPC help",
      "tree": {
        "sha": "65fbf15c855f34860d2f7e653210b0a0da4c4074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65fbf15c855f34860d2f7e653210b0a0da4c4074"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9f45e81bfe7472493b6df66133c929780ef2fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40ac13318631c6fe21593124321c04b4a4b6afc1",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "patch": "@@ -200,6 +200,7 @@ struct Sections {\n         case RPCArg::Type::STR:\n         case RPCArg::Type::NUM:\n         case RPCArg::Type::AMOUNT:\n+        case RPCArg::Type::RANGE:\n         case RPCArg::Type::BOOL: {\n             if (outer_type == OuterType::NAMED_ARG) return; // Nothing more to do for non-recursive types on first recursion\n             auto left = indent;\n@@ -405,6 +406,10 @@ std::string RPCArg::ToDescriptionString() const\n             ret += \"numeric or string\";\n             break;\n         }\n+        case Type::RANGE: {\n+            ret += \"numeric or array\";\n+            break;\n+        }\n         case Type::BOOL: {\n             ret += \"boolean\";\n             break;\n@@ -464,6 +469,8 @@ std::string RPCArg::ToStringObj(const bool oneline) const\n         return res + \"\\\"hex\\\"\";\n     case Type::NUM:\n         return res + \"n\";\n+    case Type::RANGE:\n+        return res + \"n or [n,n]\";\n     case Type::AMOUNT:\n         return res + \"amount\";\n     case Type::BOOL:\n@@ -494,6 +501,7 @@ std::string RPCArg::ToString(const bool oneline) const\n         return \"\\\"\" + m_name + \"\\\"\";\n     }\n     case Type::NUM:\n+    case Type::RANGE:\n     case Type::AMOUNT:\n     case Type::BOOL: {\n         return m_name;"
      },
      {
        "sha": "f1bd2c89dfc500905202c35dc8a28003a7dff66e",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "patch": "@@ -51,6 +51,7 @@ struct RPCArg {\n         OBJ_USER_KEYS, //!< Special type where the user must set the keys e.g. to define multiple addresses; as opposed to e.g. an options object where the keys are predefined\n         AMOUNT,        //!< Special type representing a floating point amount (can be either NUM or STR)\n         STR_HEX,       //!< Special type that is a STR with only hex chars\n+        RANGE,         //!< Special type that is a NUM or [NUM,NUM]\n     };\n \n     enum class Optional {"
      }
    ]
  },
  {
    "sha": "45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTY2MDExNjMxMWRjNGNiYjczZTJkZGVjYjFkMGNjNDA3ZDdhZWI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:51:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:01:44Z"
      },
      "message": "Add support for stop/[start,stop] ranges to scantxoutset",
      "tree": {
        "sha": "5dfa43ef7ee6460064d784980a3fb0e0798708f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5dfa43ef7ee6460064d784980a3fb0e0798708f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9f45e81bfe7472493b6df66133c929780ef2fb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7e8e5e07d08c49370153036588bde9be2f06b675",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "patch": "@@ -2159,7 +2159,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                                 {\n                                     {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::NUM, /* default */ \"1000\", \"Up to what child index HD chains should be explored\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n                                 },\n                             },\n                         },\n@@ -2216,7 +2216,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             std::string desc_str;\n-            int range = 1000;\n+            std::pair<int64_t, int64_t> range = {0, 1000};\n             if (scanobject.isStr()) {\n                 desc_str = scanobject.get_str();\n             } else if (scanobject.isObject()) {\n@@ -2225,8 +2225,8 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 desc_str = desc_uni.get_str();\n                 UniValue range_uni = find_value(scanobject, \"range\");\n                 if (!range_uni.isNull()) {\n-                    range = range_uni.get_int();\n-                    if (range < 0 || range > 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n+                    range = ParseRange(range_uni);\n+                    if (range.first < 0 || (range.second >> 31) != 0 || range.second >= range.first + 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n                 }\n             } else {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n@@ -2237,8 +2237,11 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             if (!desc) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor '%s'\", desc_str));\n             }\n-            if (!desc->IsRange()) range = 0;\n-            for (int i = 0; i <= range; ++i) {\n+            if (!desc->IsRange()) {\n+                range.first = 0;\n+                range.second = 0;\n+            }\n+            for (int i = range.first; i <= range.second; ++i) {\n                 std::vector<CScript> scripts;\n                 if (!desc->Expand(i, provider, scripts, provider)) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));"
      },
      {
        "sha": "18258f5df375fbce80f19ecc5ba51056109e9e7e",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "patch": "@@ -95,6 +95,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1499}])['total_amount'], Decimal(\"12.288\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": [1500,1500]}])['total_amount'], Decimal(\"16.384\"))\n \n         # Test the reported descriptors for a few matches\n         assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])), [\"pkh([0c5f9a1e/0'/0'/0]026dbd8b2315f296d36e6b6920b1579ca75569464875c7ebe869b536a7d9503c8c)#dzxw429x\", \"pkh([0c5f9a1e/0'/0'/1]033e6f25d76c00bedb3a8993c7d5739ee806397f0529b1b31dda31ef890f19a60c)#43rvceed\"])"
      }
    ]
  },
  {
    "sha": "1675b7ce5559d4796c81cb18a522d242be34d996",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjc1YjdjZTU1NTlkNDc5NmM4MWNiMThhNTIyZDI0MmJlMzRkOTk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:59:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:05:10Z"
      },
      "message": "Use stop/[start,stop] notation in importmulti desc range",
      "tree": {
        "sha": "811c9bae203da8a0fe558ecd38963613985d5f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/811c9bae203da8a0fe558ecd38963613985d5f11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1675b7ce5559d4796c81cb18a522d242be34d996",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1675b7ce5559d4796c81cb18a522d242be34d996",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1675b7ce5559d4796c81cb18a522d242be34d996",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1675b7ce5559d4796c81cb18a522d242be34d996/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 7,
      "deletions": 15
    },
    "files": [
      {
        "sha": "5b0592e06d8238328d16f28365baad0455813b18",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1675b7ce5559d4796c81cb18a522d242be34d996/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1675b7ce5559d4796c81cb18a522d242be34d996/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=1675b7ce5559d4796c81cb18a522d242be34d996",
        "patch": "@@ -1132,13 +1132,10 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n         if (!data.exists(\"range\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-        const UniValue& range = data[\"range\"];\n-        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n-        if (!range.exists(\"end\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n-        }\n-        range_end = range[\"end\"].get_int64();\n-        if (range_end < range_start || range_start < 0) {\n+        auto range = ParseRange(data[\"range\"]);\n+        range_start = range.first;\n+        range_end = range.second;\n+        if (range_start < 0 || (range_end >> 31) != 0 || range_end - range_start >= 1000000) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid descriptor range specified\");\n         }\n     }\n@@ -1373,12 +1370,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                             {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"range\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n-                                        {\n-                                            {\"start\", RPCArg::Type::NUM, /* default */ \"0\", \"Start of the range to import\"},\n-                                            {\"end\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"End of the range to import (inclusive)\"},\n-                                        }\n-                                    },\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n                                     {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n                                     {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n                                     {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},"
      },
      {
        "sha": "c6d0425f223e3d4685c461d33b9f4516e83f989c",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1675b7ce5559d4796c81cb18a522d242be34d996/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1675b7ce5559d4796c81cb18a522d242be34d996/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=1675b7ce5559d4796c81cb18a522d242be34d996",
        "patch": "@@ -584,7 +584,7 @@ def run_test(self):\n         self.log.info(\"Should import the ranged descriptor with specified range as solvable\")\n         self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\",\n-                               \"range\": {\"end\": 1}},\n+                               \"range\": 1},\n                               success=True,\n                               warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n         for address in addresses:\n@@ -807,7 +807,7 @@ def run_test(self):\n                 'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n                 'keypool': True,\n                 'timestamp': 'now',\n-                'range' : {'start': 0, 'end': 4}\n+                'range' : [0, 4],\n             }]\n         )\n         for i in range(0, 5):"
      }
    ]
  },
  {
    "sha": "ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTI1M2Y2ZWJmMmM5YTEyZjVjYjJiNGM5ZjU3NTE3OGQwNThhNjEy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T22:11:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-01T05:40:09Z"
      },
      "message": "Make deriveaddresses use stop/[start,stop] notation for ranges",
      "tree": {
        "sha": "4ca902fff36f7ee9db11c46d422921c7855f1fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ca902fff36f7ee9db11c46d422921c7855f1fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1675b7ce5559d4796c81cb18a522d242be34d996",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1675b7ce5559d4796c81cb18a522d242be34d996",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1675b7ce5559d4796c81cb18a522d242be34d996"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 24,
      "deletions": 21
    },
    "files": [
      {
        "sha": "765fd772fe796db4ca763f913d943546f84029d2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "patch": "@@ -185,7 +185,7 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n \n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.empty() || request.params.size() > 3) {\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n         throw std::runtime_error(\n             RPCHelpMan{\"deriveaddresses\",\n             {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n@@ -199,37 +199,37 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n             {\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n-                {\"begin\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n-                {\"end\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+                {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n             RPCResult{\n                 \"[ address ] (array) the derived addresses\\n\"\n             },\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n-                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" 0 2\")\n+                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" \\\"[0,2]\\\"\")\n             }}.ToString()\n         );\n     }\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType()}); // Range argument is checked later\n     const std::string desc_str = request.params[0].get_str();\n \n-    int range_begin = 0;\n-    int range_end = 0;\n+    int64_t range_begin = 0;\n+    int64_t range_end = 0;\n \n-    if (request.params.size() >= 2) {\n-        if (request.params.size() == 2) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n-        }\n-        range_begin = request.params[1].get_int();\n-        range_end = request.params[2].get_int();\n-        if (range_begin < 0) {\n+    if (request.params.size() >= 2 && !request.params[1].isNull()) {\n+        auto range = ParseRange(request.params[1]);\n+        if (range.first < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should be greater or equal than 0\");\n         }\n-        if (range_begin > range_end) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range end should be equal to or greater than begin\");\n+        if ((range.second >> 31) != 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range is too high\");\n+        }\n+        if (range.second >= range.first + 1000000) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range is too large\");\n         }\n+        range_begin = range.first;\n+        range_end = range.second;\n     }\n \n     FlatSigningProvider provider;"
      },
      {
        "sha": "185dffd51c8a530f3b3108c6beb637d20a011c11",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "patch": "@@ -27,17 +27,20 @@ def run_test(self):\n         assert_equal(self.nodes[0].deriveaddresses(descriptor_pubkey), [address])\n \n         ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)#kft60nuy\"\n-        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 0, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, [1, 2]), [\"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n \n-        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), 0, 2)\n+        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), [0, 2])\n \n         assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"))\n \n-        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 0)\n+        assert_raises_rpc_error(-8, \"End of range is too high\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 10000000000)\n \n-        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 2, 0)\n+        assert_raises_rpc_error(-8, \"Range is too large\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [1000000000, 2000000000])\n \n-        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), -1, 0)\n+        assert_raises_rpc_error(-8, \"Range specified as [begin,end] must not have begin after end\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [2, 0])\n+\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [-1, 0])\n \n         combo_descriptor = descsum_create(\"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\")\n         assert_equal(self.nodes[0].deriveaddresses(combo_descriptor), [\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", \"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", address, \"2NDvEwGfpEqJWfybzpKPHF2XH3jwoQV3D7x\"])"
      }
    ]
  }
]