gmaxwell,2019-02-27T22:31:33Z,"I like int,int. IIRC scantxoutset is experimental and we shouldn't shy away from breaking it, if we think a change is correct.",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468057350,468057350,
jnewbery,2019-02-27T23:08:18Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468067684,468067684,
DrahtBot,2019-02-27T23:48:11Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15427](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15427.html) (Add support for descriptors to utxoupdateps",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468077226,468077226,
sipa,2019-02-28T01:35:06Z,@promag Added tiny release note.,https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468100620,468100620,
laanwj,2019-02-28T14:02:50Z,"> The object notation is more verbose, like named arguments, it increases readability\n\nNamed arguments are useful when there is potential confusion about what the arguments mean, or when there's need for future expansibility. Range notation is kind of self-evident and it's entirely sure that no new fields will be introduced. `begin` and `end` adds no information then. It, for example, doesn't ",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468283340,468283340,
jonasschnelli,2019-02-28T14:05:26Z,Concept ACK (also as bugfix for 0.18 to avoid API inconsistency).,https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468284225,468284225,
flack,2019-02-28T14:10:07Z,"I realize it's needed for backward compat, but specifying a range by giving one number seems kind of counter intuitive. Esp since by looking at the param, you can't really tell if the one number is supposed to be the start or end of the range (so there's a 50% chance of guessing wrong). Maybe the `int` version should be restricted to where it's needed for backward compatibility instead of also mak",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468285755,468285755,
Sjors,2019-02-28T15:03:57Z,"@flack in most cases the start of the range is 0. What I think is more likely to confuse people is that ranges are 0 based, and so `1` means `[0, 1]` and not `[0,0]` (I've made this mistake a few times already, although ultimately it didn't really matter).",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468305985,468305985,
flack,2019-02-28T15:34:27Z,"@Sjors interesting, the 0-based part I got right away, but I guess it depends what programming lang you usually work with :-)\n\nWhat I just find ambiguous is that `range: 5` could plausibly be interpreted as either\n\n- `range: [0, 5]` (i.e. what it really does)\n- `range: [5, 5]` (i.e. give me just one element)\n- `range: [5, inf]` (i.e. start at 5, open-ended)\n\nofc when you read the d",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468317803,468317803,
Sjors,2019-02-28T15:49:30Z,"I would be OK with always requiring both start and end, so [0, 0]. It probably takes less time to type than to interpret the docs :-) Backwards compatibility is not a huge concern because we declared the scan method experimental.",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468323807,468323807,
promag,2019-02-28T16:01:00Z,"> So I tend to disagree here. A tuple [a,b] is fine, when documented in the RPC help of course.\n\n@laanwj I didn't say otherwise, just that object notation is more verbose.",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468328390,468328390,
Sjors,2019-03-01T12:42:43Z,"`rpc/client.cpp` needs to be updated for `deriveaddresses`, otherwise tACK ca253f6.\n\nSee: https://github.com/Sjors/bitcoin/commit/349c8cf2696f547cbe6d36934321d8ee3339e916",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468652737,468652737,
MarcoFalke,2019-03-01T14:12:51Z,"re-utACK ca253f6ebf2c9a12f5cb2b4c9f575178d058a612\n\nOnly change since previous review is adding an `RPCTypeCheck`",https://github.com/bitcoin/bitcoin/pull/15497#issuecomment-468677595,468677595,
promag,2019-02-28T00:46:54Z,bitcoin-cli users incoming ðŸ˜„ ,https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261007568,261007568,src/rpc/misc.cpp
sipa,2019-02-28T01:28:20Z,How so?,https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261015848,261015848,src/rpc/misc.cpp
promag,2019-02-28T01:36:57Z,"BTW should update convert params in client.cpp.\n\nWith the shell it must be\n```\nbitcoin-cli ... '[0,100]'\n```\nright?",https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261017489,261017489,src/rpc/misc.cpp
sipa,2019-02-28T01:43:37Z,I don't think so.,https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261018611,261018611,src/rpc/misc.cpp
promag,2019-02-28T01:48:28Z,"Yes, I have to test that.\n\nhttps://github.com/bitcoin/bitcoin/blob/a0d4e79b4dbbfda027054c991705313fcf04135c/src/rpc/client.cpp#L71\n\nThis must be updated.",https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261019426,261019426,src/rpc/misc.cpp
sipa,2019-02-28T01:51:37Z,"Right, done!",https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261020037,261020037,src/rpc/misc.cpp
Sjors,2019-02-28T08:45:11Z,You could move the start <= end and >0 check here too.,https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261093499,261093499,src/rpc/util.cpp
sipa,2019-02-28T21:08:32Z,"I've moved the `start <= end` check there. This function may be useful in places where negative numbers are acceptable, so I'm leaving the negative check in the callers.",https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261383831,261383831,src/rpc/util.cpp
MarcoFalke,2019-02-28T22:23:10Z,"style-nit: Any reason to remove this. You could keep it via\n\n```cpp\nRPCTypeCheck(request.params, {\n        UniValue::VSTR,\n        UniValueType(), // RANGE, checked later",https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261408814,261408814,src/rpc/misc.cpp
sipa,2019-03-01T05:40:24Z,Done.,https://github.com/bitcoin/bitcoin/pull/15497#discussion_r261484530,261484530,src/rpc/misc.cpp
