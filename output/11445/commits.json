[
  {
    "sha": "fc2aa09cf382f024f461e103f2500e95ddb692e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzJhYTA5Y2YzODJmMDI0ZjQ2MWUxMDNmMjUwMGU5NWRkYjY5MmU1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-02T18:30:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:18:17Z"
      },
      "message": "[tests] Introduce TestNode\n\nTestNode is a class responsible for all state related to a bitcoind node\nunder test. It stores local state, is responsible for tracking the\nbitcoind process and delegates unrecognised messages to the RPC\nconnection.\n\nThis commit changes start_nodes and stop_nodes to start and stop the\nbitcoind nodes in parallel, making test setup and teardown much faster.\n\nGithub-Pull: #10711\nRebased-From: 7897338918dac072e788b8ab2919d4559f311bef",
      "tree": {
        "sha": "b0148b97dda0141ef4fccf84120b74816079cfdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0148b97dda0141ef4fccf84120b74816079cfdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc2aa09cf382f024f461e103f2500e95ddb692e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939"
      }
    ],
    "stats": {
      "total": 290,
      "additions": 193,
      "deletions": 97
    },
    "files": [
      {
        "sha": "0812e1b0df90932d24a208f77621116523ff7bf7",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -139,13 +139,13 @@ def _test_stopatheight(self):\n         self.nodes[0].generate(6)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n-        assert_raises(subprocess.TimeoutExpired, lambda: self.bitcoind_processes[0].wait(timeout=3))\n+        assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n             self.nodes[0].generate(1)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      },
      {
        "sha": "3c488f609a3e0cdf8cf8b229206132dec1cb12b6",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -41,8 +41,7 @@ def setup_network(self, split=False):\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n         # Encrypt wallet for test_locked_wallet_fails test\n-        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n-        self.bitcoind_processes[1].wait()\n+        self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n "
      },
      {
        "sha": "f2f4efcf28f14ace9753329d335a141fb5c8cb2b",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -451,8 +451,7 @@ def run_test(self):\n         self.stop_node(0)\n         self.stop_node(2)\n         self.stop_node(3)\n-        self.nodes[1].encryptwallet(\"test\")\n-        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[1].node_encrypt_wallet(\"test\")\n \n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "cca30e2688e4d8ad8ba551520bfafe6bafbdafb7",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -17,7 +17,7 @@ def __init__(self, node):\n         self.longpollid = templat['longpollid']\n         # create a new connection to the node, we can't use the same\n         # connection from two threads\n-        self.node = get_rpc_proxy(node.url, 1, timeout=600)\n+        self.node = get_rpc_proxy(node.url, 1, timeout=600, coveragedir=node.coverage_dir)\n \n     def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})"
      },
      {
        "sha": "3e7bb0ee072057f463d195847e066c387c4d12a0",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -17,8 +17,7 @@ def run_test(self):\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n         # Encrypt wallet and wait to terminate\n-        nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n+        nodes[0].node_encrypt_wallet('test')\n         # Restart node 0\n         nodes[0] = self.start_node(0, self.options.tmpdir)\n         # Keep creating keys"
      },
      {
        "sha": "fc6e8e325f605f5d494580551747b70ade4e9fc3",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -35,11 +35,15 @@ def run_test(self):\n \n         self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n \n-        w1 = self.nodes[0] / \"wallet/w1\"\n+        w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n+        w2 = self.nodes[0].get_wallet_rpc(\"w2\")\n+        w3 = self.nodes[0].get_wallet_rpc(\"w3\")\n+        wallet_bad = self.nodes[0].get_wallet_rpc(\"bad\")\n+\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", (self.nodes[0] / \"wallet/bad\").getwalletinfo)\n+        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n         assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n@@ -50,14 +54,12 @@ def run_test(self):\n         w1_name = w1_info['walletname']\n         assert_equal(w1_name, \"w1\")\n \n-        # check w1 wallet balance\n-        w2 = self.nodes[0] / \"wallet/w2\"\n+        # check w2 wallet balance\n         w2_info = w2.getwalletinfo()\n         assert_equal(w2_info['immature_balance'], 0)\n         w2_name = w2_info['walletname']\n         assert_equal(w2_name, \"w2\")\n \n-        w3 = self.nodes[0] / \"wallet/w3\"\n         w3_name = w3.getwalletinfo()['walletname']\n         assert_equal(w3_name, \"w3\")\n "
      },
      {
        "sha": "20808207b2bc80729f99d94872fdaa5da300c01a",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -37,7 +37,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        pid = self.bitcoind_processes[0].pid\n+        pid = self.nodes[0].process.pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n \n@@ -49,7 +49,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n         # connect to node through non-loopback interface\n-        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()\n         self.stop_nodes()\n "
      },
      {
        "sha": "7903bb00451b5531a51de1222aa17b9837016a32",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 40,
        "deletions": 75,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -5,35 +5,30 @@\n \"\"\"Base class for RPC testing.\"\"\"\n \n from collections import deque\n-import errno\n from enum import Enum\n-import http.client\n import logging\n import optparse\n import os\n import pdb\n import shutil\n-import subprocess\n import sys\n import tempfile\n import time\n import traceback\n \n from .authproxy import JSONRPCException\n from . import coverage\n+from .test_node import TestNode\n from .util import (\n     MAX_NODES,\n     PortSeed,\n     assert_equal,\n     check_json_precision,\n     connect_nodes_bi,\n     disconnect_nodes,\n-    get_rpc_proxy,\n     initialize_datadir,\n-    get_datadir_path,\n     log_filename,\n     p2p_port,\n-    rpc_url,\n     set_node_times,\n     sync_blocks,\n     sync_mempools,\n@@ -70,7 +65,6 @@ def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n-        self.bitcoind_processes = {}\n         self.mocktime = 0\n \n     def add_options(self, parser):\n@@ -213,64 +207,62 @@ def main(self):\n     def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n         \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n \n-        datadir = os.path.join(dirname, \"node\" + str(i))\n+        if extra_args is None:\n+            extra_args = []\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n-        if extra_args is not None:\n-            args.extend(extra_args)\n-        self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-        self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-        self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i, rpchost)\n-        self.log.debug(\"initialize_chain: RPC successfully started\")\n-        proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n+        node = TestNode(i, dirname, extra_args, rpchost, timewait, binary, stderr, self.mocktime, coverage_dir=self.options.coveragedir)\n+        node.start()\n+        node.wait_for_rpc_connection()\n \n-        if self.options.coveragedir:\n-            coverage.write_all_rpc_commands(self.options.coveragedir, proxy)\n+        if self.options.coveragedir is not None:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return proxy\n+        return node\n \n     def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n \n         if extra_args is None:\n-            extra_args = [None] * num_nodes\n+            extra_args = [[]] * num_nodes\n         if binary is None:\n             binary = [None] * num_nodes\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n-        rpcs = []\n+        nodes = []\n         try:\n             for i in range(num_nodes):\n-                rpcs.append(self.start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+                nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+                nodes[i].start()\n+            for node in nodes:\n+                node.wait_for_rpc_connection()\n         except:\n             # If one node failed to start, stop the others\n-            # TODO: abusing self.nodes in this way is a little hacky.\n-            # Eventually we should do a better job of tracking nodes\n-            self.nodes.extend(rpcs)\n             self.stop_nodes()\n-            self.nodes = []\n             raise\n-        return rpcs\n+\n+        if self.options.coveragedir is not None:\n+            for node in nodes:\n+                coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n+\n+        return nodes\n \n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n-\n-        self.log.debug(\"Stopping node %d\" % i)\n-        try:\n-            self.nodes[i].stop()\n-        except http.client.CannotSendRequest as e:\n-            self.log.exception(\"Unable to stop node\")\n-        return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        del self.bitcoind_processes[i]\n-        assert_equal(return_code, 0)\n+        self.nodes[i].stop_node()\n+        while not self.nodes[i].is_node_stopped():\n+            time.sleep(0.1)\n \n     def stop_nodes(self):\n         \"\"\"Stop multiple bitcoind test nodes\"\"\"\n+        for node in self.nodes:\n+            # Issue RPC to stop nodes\n+            node.stop_node()\n \n-        for i in range(len(self.nodes)):\n-            self.stop_node(i)\n-        assert not self.bitcoind_processes.values()  # All connections must be gone now\n+        for node in self.nodes:\n+            # Wait for nodes to stop\n+            while not node.is_node_stopped():\n+                time.sleep(0.1)\n \n     def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n@@ -279,6 +271,8 @@ def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_m\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                self.nodes[i].running = False\n+                self.nodes[i].process = None\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n                     stderr = log_stderr.read().decode('utf-8')\n@@ -292,7 +286,7 @@ def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_m\n                 raise AssertionError(assert_msg)\n \n     def wait_for_node_exit(self, i, timeout):\n-        self.bitcoind_processes[i].wait(timeout)\n+        self.nodes[i].process.wait(timeout)\n \n     def split_network(self):\n         \"\"\"\n@@ -389,18 +383,13 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.bitcoind_processes[i] = subprocess.Popen(args)\n-                self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i)\n-                self.log.debug(\"initialize_chain: RPC successfully started\")\n+                self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes[i].args = args\n+                self.nodes[i].start()\n \n-            self.nodes = []\n-            for i in range(MAX_NODES):\n-                try:\n-                    self.nodes.append(get_rpc_proxy(rpc_url(get_datadir_path(cachedir, i), i), i))\n-                except:\n-                    self.log.exception(\"Error connecting to node %d\" % i)\n-                    sys.exit(1)\n+            # Wait for RPC connections to be ready\n+            for node in self.nodes:\n+                node.wait_for_rpc_connection()\n \n             # Create a 200-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n@@ -444,30 +433,6 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n         for i in range(num_nodes):\n             initialize_datadir(test_dir, i)\n \n-    def _wait_for_bitcoind_start(self, process, datadir, i, rpchost=None):\n-        \"\"\"Wait for bitcoind to start.\n-\n-        This means that RPC is accessible and fully initialized.\n-        Raise an exception if bitcoind exits during initialization.\"\"\"\n-        while True:\n-            if process.poll() is not None:\n-                raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n-            try:\n-                # Check if .cookie file to be created\n-                rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, coveragedir=self.options.coveragedir)\n-                rpc.getblockcount()\n-                break  # break out of loop on success\n-            except IOError as e:\n-                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n-                    raise  # unknown IO error\n-            except JSONRPCException as e:  # Initialization phase\n-                if e.error['code'] != -28:  # RPC in warmup?\n-                    raise  # unknown JSON RPC exception\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n-                if \"No RPC credentials\" not in str(e):\n-                    raise\n-            time.sleep(0.25)\n-\n class ComparisonTestFramework(BitcoinTestFramework):\n     \"\"\"Test framework for doing p2p comparison testing\n "
      },
      {
        "sha": "66f89d43f4fcbcac6c0d3676fdc16fdeadeacd1c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Class for bitcoind node under test\"\"\"\n+\n+import errno\n+import http.client\n+import logging\n+import os\n+import subprocess\n+import time\n+\n+from .util import (\n+    assert_equal,\n+    get_rpc_proxy,\n+    rpc_url,\n+)\n+from .authproxy import JSONRPCException\n+\n+class TestNode():\n+    \"\"\"A class for representing a bitcoind node under test.\n+\n+    This class contains:\n+\n+    - state about the node (whether it's running, etc)\n+    - a Python subprocess.Popen object representing the running process\n+    - an RPC connection to the node\n+\n+    To make things easier for the test writer, a bit of magic is happening under the covers.\n+    Any unrecognised messages will be dispatched to the RPC connection.\"\"\"\n+\n+    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir):\n+        self.index = i\n+        self.datadir = os.path.join(dirname, \"node\" + str(i))\n+        self.rpchost = rpchost\n+        self.rpc_timeout = timewait\n+        if binary is None:\n+            self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+        else:\n+            self.binary = binary\n+        self.stderr = stderr\n+        self.coverage_dir = coverage_dir\n+        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        self.extra_args = extra_args\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.url = None\n+        self.log = logging.getLogger('TestFramework.node%d' % i)\n+\n+    def __getattr__(self, *args, **kwargs):\n+        \"\"\"Dispatches any unrecognised messages to the RPC connection.\"\"\"\n+        assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n+        return self.rpc.__getattr__(*args, **kwargs)\n+\n+    def start(self):\n+        \"\"\"Start the node.\"\"\"\n+        self.process = subprocess.Popen(self.args + self.extra_args, stderr=self.stderr)\n+        self.running = True\n+        self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n+\n+    def wait_for_rpc_connection(self):\n+        \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n+\n+        # Wait for up to 10 seconds for the RPC server to respond\n+        for _ in range(40):\n+            assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n+            try:\n+                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n+                self.rpc.getblockcount()\n+                # If the call to getblockcount() succeeds then the RPC connection is up\n+                self.rpc_connected = True\n+                self.url = self.rpc.url\n+                self.log.debug(\"RPC successfully started\")\n+                return\n+            except IOError as e:\n+                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                    raise  # unknown IO error\n+            except JSONRPCException as e:  # Initialization phase\n+                if e.error['code'] != -28:  # RPC in warmup?\n+                    raise  # unknown JSON RPC exception\n+            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+                if \"No RPC credentials\" not in str(e):\n+                    raise\n+            time.sleep(0.25)\n+        raise AssertionError(\"Unable to connect to bitcoind\")\n+\n+    def get_wallet_rpc(self, wallet_name):\n+        assert self.rpc_connected\n+        assert self.rpc\n+        wallet_path = \"wallet/%s\" % wallet_name\n+        return self.rpc / wallet_path\n+\n+    def stop_node(self):\n+        \"\"\"Stop the node.\"\"\"\n+        if not self.running:\n+            return\n+        self.log.debug(\"Stopping node\")\n+        try:\n+            self.stop()\n+        except http.client.CannotSendRequest:\n+            self.log.exception(\"Unable to stop node.\")\n+\n+    def is_node_stopped(self):\n+        \"\"\"Checks whether the node has stopped.\n+\n+        Returns True if the node has stopped. False otherwise.\n+        This method is responsible for freeing resources (self.process).\"\"\"\n+        if not self.running:\n+            return True\n+        return_code = self.process.poll()\n+        if return_code is not None:\n+            # process has stopped. Assert that it didn't return an error code.\n+            assert_equal(return_code, 0)\n+            self.running = False\n+            self.process = None\n+            self.log.debug(\"Node stopped\")\n+            return True\n+        return False\n+\n+    def node_encrypt_wallet(self, passphrase):\n+        \"\"\"\"Encrypts the wallet.\n+\n+        This causes bitcoind to shutdown, so this method takes\n+        care of cleaning up resources.\"\"\"\n+        self.encryptwallet(passphrase)\n+        while not self.is_node_stopped():\n+            time.sleep(0.1)\n+        self.rpc = None\n+        self.rpc_connected = False"
      },
      {
        "sha": "4098fd86152acd44f77df05c6ba56bec908a18bb",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -204,7 +204,7 @@ def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def rpc_url(datadir, i, rpchost=None):\n-    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n+    rpc_u, rpc_p = get_auth_cookie(datadir)\n     host = '127.0.0.1'\n     port = rpc_port(i)\n     if rpchost:\n@@ -232,7 +232,7 @@ def initialize_datadir(dirname, n):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n-def get_auth_cookie(datadir, n):\n+def get_auth_cookie(datadir):\n     user = None\n     password = None\n     if os.path.isfile(os.path.join(datadir, \"bitcoin.conf\")):"
      },
      {
        "sha": "61ad00330bd74225714c0b7f6e5384990679d2e9",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -94,8 +94,7 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n \n         #encrypt wallet, restart, unlock and dump\n-        self.nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n+        self.nodes[0].node_encrypt_wallet('test')\n         self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:"
      },
      {
        "sha": "8fea4140db7591b32800de4e82471fcd44fe9228",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -30,8 +30,7 @@ def run_test(self):\n         assert_equal(len(privkey), 52)\n \n         # Encrypt the wallet\n-        self.nodes[0].encryptwallet(passphrase)\n-        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0].node_encrypt_wallet(passphrase)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n \n         # Test that the wallet is encrypted"
      }
    ]
  },
  {
    "sha": "c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjc2YzFlMWQxZmIxODc3MWQ5ZWZhYmFmNWE0NzZkMjljOTAxZDVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-18T20:09:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:23:41Z"
      },
      "message": "test: Increase initial RPC timeout to 60 seconds\n\nWhen running the tests locally with a parallelism of 4 on an otherwise\nbusy system, RPC can take quite a wait to come up.\n\nChange the timeout to 60 seconds just to be safe.\n\nGithub-Pull: #11091\nRebased-From: c1470a058f21bf98d83b9dc345c61626b87035cc",
      "tree": {
        "sha": "236c33e6b6b74048e67a12207146b79da2f87a40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/236c33e6b6b74048e67a12207146b79da2f87a40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc2aa09cf382f024f461e103f2500e95ddb692e5"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4b5dc9a792a4898a04af996f5b31751d8064274c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c276c1e1d1fb18771d9efabaf5a476d29c901d5d/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c276c1e1d1fb18771d9efabaf5a476d29c901d5d/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
        "patch": "@@ -65,9 +65,9 @@ def start(self):\n \n     def wait_for_rpc_connection(self):\n         \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n-\n-        # Wait for up to 10 seconds for the RPC server to respond\n-        for _ in range(40):\n+        timeout_s = 60 # Wait for up to 60 seconds for the RPC server to respond\n+        poll_per_s = 4 # Poll at a rate of four times per second\n+        for _ in range(timeout_s*poll_per_s):\n             assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n                 self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n@@ -86,7 +86,7 @@ def wait_for_rpc_connection(self):\n             except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n                 if \"No RPC credentials\" not in str(e):\n                     raise\n-            time.sleep(0.25)\n+            time.sleep(1.0 / poll_per_s)\n         raise AssertionError(\"Unable to connect to bitcoind\")\n \n     def get_wallet_rpc(self, wallet_name):"
      }
    ]
  },
  {
    "sha": "1d80d1e319b41e5187d5949b3c22c35df182ba3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDgwZDFlMzE5YjQxZTUxODdkNTk0OWIzYzIyYzM1ZGYxODJiYTNj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-16T19:46:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:29:34Z"
      },
      "message": "[tests] fix timeout issues from TestNode\n\nFixes a couple of bugs from the introduction of TestNode:\n\n- test scripts were no longer able to specify a custom timeout for\nstarting a node. Therefore tests with nodes that take a long time to\nstart up (eg pruning.py) would fail.\n- the test for whether a node has failed on start up was broken\nby changing 'assert x is None' to 'assert not x'. Since\nsubprocess.poll() can return None (indicating the node is still running)\nor 0 (indicating the node exited with return code 0), this was a\nregression.\n\nGithub-Pull: #11077\nRebased-From: 2b4ea520b717b3ca894adbac17796786667764d3",
      "tree": {
        "sha": "747875429f86e40ba789710935ed52618a6832fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/747875429f86e40ba789710935ed52618a6832fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c276c1e1d1fb18771d9efabaf5a476d29c901d5d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a7fcc411c345be7cff5df679af019f790611bbe1",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "patch": "@@ -64,7 +64,8 @@ def __init__(self):\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n     def setup_network(self):\n-        self.setup_nodes()\n+        # Need a bit of extra time for the nodes to start up for this test\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):\n@@ -74,10 +75,10 @@ def restart_node(self, node_index, expected_tip):\n         after 60 seconds. Returns the utxo hash of the given node.\"\"\"\n \n         time_start = time.time()\n-        while time.time() - time_start < 60:\n+        while time.time() - time_start < 120:\n             try:\n                 # Any of these RPC calls could throw due to node crash\n-                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index])\n+                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index], timewait=90)\n                 self.nodes[node_index].waitforblock(expected_tip)\n                 utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n                 return utxo_hash"
      },
      {
        "sha": "a803df5b4986019cf5f4a6f535f7585134fdc397",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "patch": "@@ -34,7 +34,11 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n-        self.rpc_timeout = timewait\n+        if timewait:\n+            self.rpc_timeout = timewait\n+        else:\n+            # Wait for up to 60 seconds for the RPC server to respond\n+            self.rpc_timeout = 60\n         if binary is None:\n             self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n         else:\n@@ -65,10 +69,10 @@ def start(self):\n \n     def wait_for_rpc_connection(self):\n         \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n-        timeout_s = 60 # Wait for up to 60 seconds for the RPC server to respond\n-        poll_per_s = 4 # Poll at a rate of four times per second\n-        for _ in range(timeout_s*poll_per_s):\n-            assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n+        # Poll at a rate of four times per second\n+        poll_per_s = 4\n+        for _ in range(poll_per_s * self.rpc_timeout):\n+            assert self.process.poll() is None, \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n                 self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n                 self.rpc.getblockcount()"
      }
    ]
  },
  {
    "sha": "5398f205e3ba1f7542deeba420f9e198bcb635f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mzk4ZjIwNWUzYmExZjc1NDJkZWViYTQyMGY5ZTE5OGJjYjYzNWY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-16T16:17:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:29:48Z"
      },
      "message": "qa: Move wait_until to util\n\nGithub-Pull: #11068\nRebased-From: 08ce33f8e95efa81b37ddc6b3350462c61bbfd51",
      "tree": {
        "sha": "c6192e754c839184b61de07d113924ef1cf8acf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6192e754c839184b61de07d113924ef1cf8acf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5398f205e3ba1f7542deeba420f9e198bcb635f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d80d1e319b41e5187d5949b3c22c35df182ba3c"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 78,
      "deletions": 89
    },
    "files": [
      {
        "sha": "65ae8de554b64f36a71969efd036d385a6ed8738",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -109,7 +109,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until(lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(node0.last_message[\"reject\"].code, REJECT_OBSOLETE)\n             assert_equal(node0.last_message[\"reject\"].reason, b'bad-version(0x00000003)')\n@@ -138,7 +138,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until (lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert node0.last_message[\"reject\"].code in [REJECT_INVALID, REJECT_NONSTANDARD]\n             assert_equal(node0.last_message[\"reject\"].data, block.sha256)"
      },
      {
        "sha": "9775970893091240f6ba57a9c5310a83dca6ab4b",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -98,7 +98,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until(lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(node0.last_message[\"reject\"].code, REJECT_OBSOLETE)\n             assert_equal(node0.last_message[\"reject\"].reason, b'bad-version(0x00000002)')\n@@ -128,7 +128,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until (lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             # We can receive different reject messages depending on whether\n             # bitcoind is running with multiple script check threads. If script"
      },
      {
        "sha": "19723226d3ca2dd4a3b1877f533879756c4d14dc",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -5,11 +5,13 @@\n \"\"\"Test node disconnect and ban behavior\"\"\"\n import time\n \n-from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal,\n-                                 assert_raises_jsonrpc,\n-                                 connect_nodes_bi)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes_bi,\n+    wait_until,\n+)\n \n class DisconnectBanTest(BitcoinTestFramework):\n \n@@ -24,7 +26,7 @@ def run_test(self):\n         self.log.info(\"setban: successfully ban single IP address\")\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n-        assert wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n+        wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n@@ -90,7 +92,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         self.nodes[0].disconnectnode(address=address1)\n-        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n@@ -101,7 +103,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by node id\")\n         id1 = self.nodes[0].getpeerinfo()[0]['id']\n         self.nodes[0].disconnectnode(nodeid=id1)\n-        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['id'] == id1]\n \n if __name__ == '__main__':"
      },
      {
        "sha": "a54b5278e48d0e86b894abdf85fb7e11391a9f9e",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -23,13 +23,13 @@\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n-    wait_until,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     connect_nodes,\n     p2p_port,\n+    wait_until,\n )\n \n # NodeConnCB is a class containing callbacks to be executed when a P2P\n@@ -209,7 +209,7 @@ def run_test(self):\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n         # NodeConnCB objects.\n-        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)\n+        wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5, lock=mininode_lock)\n \n         self.log.info(\"Check that each block was received only once\")\n         # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving"
      },
      {
        "sha": "807edeb7a83227a78b1ccaf4e7aec0da63e3bb21",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -32,7 +32,6 @@\n \"\"\"\n import time\n \n-from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -69,7 +68,7 @@ def run_test(self):\n         self.nodes.append(self.start_node(1, self.options.tmpdir))\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n-        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n@@ -84,7 +83,7 @@ def run_test(self):\n         self.stop_nodes()\n         self.nodes = []\n         self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':\n     MempoolPersistTest().main()"
      },
      {
        "sha": "c5c264765a3f0e243284904505c4875c3e546538",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 16,
        "deletions": 31,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -70,27 +70,23 @@ def send_header_for_blocks(self, new_blocks):\n     def request_headers_and_sync(self, locator, hashstop=0):\n         self.clear_block_announcement()\n         self.get_headers(locator, hashstop)\n-        assert wait_until(self.received_block_announcement, timeout=30)\n+        wait_until(self.received_block_announcement, timeout=30, lock=mininode_lock)\n         self.clear_block_announcement()\n \n     # Block until a block announcement for a particular block hash is\n     # received.\n     def wait_for_block_announcement(self, block_hash, timeout=30):\n         def received_hash():\n             return (block_hash in self.announced_blockhashes)\n-        return wait_until(received_hash, timeout=timeout)\n+        wait_until(received_hash, timeout=timeout, lock=mininode_lock)\n \n     def send_await_disconnect(self, message, timeout=30):\n         \"\"\"Sends a message to the node and wait for disconnect.\n \n         This is used when we want to send a message into the node that we expect\n         will get us disconnected, eg an invalid block.\"\"\"\n         self.send_message(message)\n-        success = wait_until(lambda: not self.connected, timeout=timeout)\n-        if not success:\n-            logger.error(\"send_await_disconnect failed!\")\n-            raise AssertionError(\"send_await_disconnect failed!\")\n-        return success\n+        wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n     def __init__(self):\n@@ -150,9 +146,7 @@ def test_sendcmpct(self, node, test_node, preferred_version, old_node=None):\n         # Make sure we get a SENDCMPCT message from our peer\n         def received_sendcmpct():\n             return (len(test_node.last_sendcmpct) > 0)\n-        got_message = wait_until(received_sendcmpct, timeout=30)\n-        assert(received_sendcmpct())\n-        assert(got_message)\n+        wait_until(received_sendcmpct, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             # Check that the first version received is the preferred one\n             assert_equal(test_node.last_sendcmpct[0].version, preferred_version)\n@@ -167,7 +161,6 @@ def check_announcement_of_new_block(node, peer, predicate):\n             block_hash = int(node.generate(1)[0], 16)\n             peer.wait_for_block_announcement(block_hash, timeout=30)\n             assert(peer.block_announced)\n-            assert(got_message)\n \n             with mininode_lock:\n                 assert predicate(peer), (\n@@ -282,7 +275,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n \n         # Wait until we've seen the block announcement for the resulting tip\n         tip = int(node.getbestblockhash(), 16)\n-        assert(test_node.wait_for_block_announcement(tip))\n+        test_node.wait_for_block_announcement(tip)\n \n         # Make sure we will receive a fast-announce compact block\n         self.request_cb_announcements(test_node, node, version)\n@@ -297,8 +290,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         block.rehash()\n \n         # Wait until the block was announced (via compact blocks)\n-        wait_until(test_node.received_block_announcement, timeout=30)\n-        assert(test_node.received_block_announcement())\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n@@ -314,8 +306,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n             inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n             test_node.send_message(msg_getdata([inv]))\n \n-        wait_until(test_node.received_block_announcement, timeout=30)\n-        assert(test_node.received_block_announcement())\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n@@ -386,13 +377,11 @@ def test_compactblock_requests(self, node, test_node, version, segwit):\n \n             if announce == \"inv\":\n                 test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n-                success = wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30)\n-                assert(success)\n+                wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30, lock=mininode_lock)\n                 test_node.send_header_for_blocks([block])\n             else:\n                 test_node.send_header_for_blocks([block])\n-            success = wait_until(lambda: \"getdata\" in test_node.last_message, timeout=30)\n-            assert(success)\n+            wait_until(lambda: \"getdata\" in test_node.last_message, timeout=30, lock=mininode_lock)\n             assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n             assert_equal(test_node.last_message[\"getdata\"].inv[0].type, 4)\n             assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n@@ -571,8 +560,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n \n         # We should receive a getdata request\n-        success = wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10)\n-        assert(success)\n+        wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10, lock=mininode_lock)\n         assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n         assert(test_node.last_message[\"getdata\"].inv[0].type == 2 or test_node.last_message[\"getdata\"].inv[0].type == 2|MSG_WITNESS_FLAG)\n         assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n@@ -599,8 +587,7 @@ def test_getblocktxn_handler(self, node, test_node, version):\n             num_to_request = random.randint(1, len(block.vtx))\n             msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n             test_node.send_message(msg)\n-            success = wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10)\n-            assert(success)\n+            wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10, lock=mininode_lock)\n \n             [tx.calc_sha256() for tx in block.vtx]\n             with mininode_lock:\n@@ -639,22 +626,20 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n         for i in range(MAX_CMPCTBLOCK_DEPTH + 1):\n             test_node.clear_block_announcement()\n             new_blocks.append(node.generate(1)[0])\n-            wait_until(test_node.received_block_announcement, timeout=30)\n+            wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n         test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30)\n-        assert(success)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n         node.generate(1)\n-        wait_until(test_node.received_block_announcement, timeout=30)\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n         test_node.clear_block_announcement()\n         with mininode_lock:\n             test_node.last_message.pop(\"block\", None)\n         test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: \"block\" in test_node.last_message, timeout=30)\n-        assert(success)\n+        wait_until(lambda: \"block\" in test_node.last_message, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             test_node.last_message[\"block\"].block.calc_sha256()\n             assert_equal(test_node.last_message[\"block\"].block.sha256, int(new_blocks[0], 16))\n@@ -705,7 +690,7 @@ def test_end_to_end_block_relay(self, node, listeners):\n         node.submitblock(ToHex(block))\n \n         for l in listeners:\n-            wait_until(lambda: l.received_block_announcement(), timeout=30)\n+            wait_until(lambda: l.received_block_announcement(), timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             for l in listeners:\n                 assert \"cmpctblock\" in l.last_message"
      },
      {
        "sha": "f0d4d9a8b86cc0bcf1a8f78c6e0dc8e4255b38d8",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -119,11 +119,11 @@ def run_test(self):\n \n         NetworkThread().start()  # Start up network handling in another thread\n \n-        assert wait_until(lambda: no_version_bannode.ever_connected, timeout=10)\n-        assert wait_until(lambda: no_version_idlenode.ever_connected, timeout=10)\n-        assert wait_until(lambda: no_verack_idlenode.version_received, timeout=10)\n-        assert wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10)\n-        assert wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10)\n+        wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n         self.nodes[0].generate(1)\n@@ -158,8 +158,8 @@ def run_test(self):\n         allowed_service_bit5_node.add_connection(connections[5])\n         allowed_service_bit7_node.add_connection(connections[6])\n \n-        assert wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10)\n-        assert wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10)\n+        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n+        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n \n if __name__ == '__main__':\n     P2PLeakTest().main()"
      },
      {
        "sha": "6451b097c07d33e9022195eeac34c50b44355390",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -128,7 +128,7 @@ def check_last_announcement(self, headers=None, inv=None):\n         expect_headers = headers if headers != None else []\n         expect_inv = inv if inv != None else []\n         test_function = lambda: self.block_announced\n-        assert(wait_until(test_function, timeout=60))\n+        wait_until(test_function, timeout=60, lock=mininode_lock)\n         with mininode_lock:\n             self.block_announced = False\n \n@@ -155,12 +155,12 @@ def wait_for_getdata(self, hash_list, timeout=60):\n             return\n \n         test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n-        assert(wait_until(test_function, timeout=timeout))\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         return\n \n     def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n-        assert(wait_until(test_function, timeout=timeout))\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         return\n \n     def send_header_for_blocks(self, new_blocks):"
      },
      {
        "sha": "bfbc0c3b034095e7ffb22a80e37748d318d63e0a",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -19,7 +19,7 @@\n \n from .mininode import *\n from .blockstore import BlockStore, TxStore\n-from .util import p2p_port\n+from .util import p2p_port, wait_until\n \n import logging\n \n@@ -189,15 +189,15 @@ def clear_all_connections(self):\n     def wait_for_disconnections(self):\n         def disconnected():\n             return all(node.closed for node in self.test_nodes)\n-        return wait_until(disconnected, timeout=10)\n+        wait_until(disconnected, timeout=10, lock=mininode_lock)\n \n     def wait_for_verack(self):\n         return all(node.wait_for_verack() for node in self.test_nodes)\n \n     def wait_for_pings(self, counter):\n         def received_pongs():\n             return all(node.received_ping_response(counter) for node in self.test_nodes)\n-        return wait_until(received_pongs)\n+        wait_until(received_pongs, lock=mininode_lock)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n     # then send get_headers to find out the tip of each node, and synchronize\n@@ -210,8 +210,7 @@ def blocks_requested():\n             )\n \n         # --> error if not requested\n-        if not wait_until(blocks_requested, attempts=20*num_blocks):\n-            raise AssertionError(\"Not all nodes requested block\")\n+        wait_until(blocks_requested, attempts=20*num_blocks, lock=mininode_lock)\n \n         # Send getheaders message\n         [ c.cb.send_getheaders() for c in self.connections ]\n@@ -231,8 +230,7 @@ def transaction_requested():\n             )\n \n         # --> error if not requested\n-        if not wait_until(transaction_requested, attempts=20*num_events):\n-            raise AssertionError(\"Not all nodes requested transaction\")\n+        wait_until(transaction_requested, attempts=20*num_events, lock=mininode_lock)\n \n         # Get the mempool\n         [ c.cb.send_mempool() for c in self.connections ]"
      },
      {
        "sha": "d0753276db2b61172a791b40bd3b6c6aac1ddfb4",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -35,7 +35,7 @@\n from threading import RLock, Thread\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n \n BIP0031_VERSION = 60000\n MY_VERSION = 70014  # past bip-31 for ping/pong\n@@ -1358,23 +1358,6 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-# Helper function\n-def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf')):\n-    if attempts == float('inf') and timeout == float('inf'):\n-        timeout = 60\n-    attempt = 0\n-    elapsed = 0\n-\n-    while attempt < attempts and elapsed < timeout:\n-        with mininode_lock:\n-            if predicate():\n-                return True\n-        attempt += 1\n-        elapsed += 0.05\n-        time.sleep(0.05)\n-\n-    return False\n-\n class msg_feefilter(object):\n     command = b\"feefilter\"\n \n@@ -1591,21 +1574,21 @@ def add_connection(self, conn):\n \n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: not self.connected\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     # Message receiving helper methods\n \n     def wait_for_block(self, blockhash, timeout=60):\n         test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getdata(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"getdata\")\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getheaders(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"getheaders\")\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_inv(self, expected_inv, timeout=60):\n         \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n@@ -1614,11 +1597,11 @@ def wait_for_inv(self, expected_inv, timeout=60):\n         test_function = lambda: self.last_message.get(\"inv\") and \\\n                                 self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n                                 self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_verack(self, timeout=60):\n         test_function = lambda: self.message_count[\"verack\"]\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     # Message sending helper functions\n \n@@ -1636,7 +1619,7 @@ def send_and_ping(self, message):\n     def sync_with_ping(self, timeout=60):\n         self.send_message(msg_ping(nonce=self.ping_counter))\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n         return True\n "
      },
      {
        "sha": "a14cda07d0cbd7b23f1bb9ec9fe5cf94bff90895",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -157,6 +157,28 @@ def str_to_b64str(string):\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n+def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None):\n+    if attempts == float('inf') and timeout == float('inf'):\n+        timeout = 60\n+    attempt = 0\n+    timeout += time.time()\n+\n+    while attempt < attempts and time.time() < timeout:\n+        if lock:\n+            with lock:\n+                if predicate():\n+                    return\n+        else:\n+            if predicate():\n+                return\n+        attempt += 1\n+        time.sleep(0.05)\n+\n+    # Print the cause of the timeout\n+    assert_greater_than(attempts, attempt)\n+    assert_greater_than(timeout, time.time())\n+    raise RuntimeError('Unreachable')\n+\n # RPC/P2P connection constants and functions\n ############################################\n "
      }
    ]
  },
  {
    "sha": "016b9ada2111aaf41f3336c0179a1347355bc9e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTZiOWFkYTIxMTFhYWY0MWYzMzM2YzAxNzlhMTM0NzM1NWJjOWU2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-11T17:01:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:31:40Z"
      },
      "message": "[tests] add TestNodeCLI class for calling bitcoin-cli for a node\n\nGithub-Pull: #10798\nRebased-From: b23549f6e677a8e22953568704eac7ea0c2c1289",
      "tree": {
        "sha": "e16642ab0b6e3ff9c3a2adfd89416a2d83322b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e16642ab0b6e3ff9c3a2adfd89416a2d83322b3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/016b9ada2111aaf41f3336c0179a1347355bc9e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5398f205e3ba1f7542deeba420f9e198bcb635f5"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7c1325e691473de83f49d5a7560294a0bb7c0f44",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import decimal\n import errno\n import http.client\n+import json\n import logging\n import os\n import subprocess\n@@ -49,6 +51,8 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.extra_args = extra_args\n         self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n \n+        self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n+\n         self.running = False\n         self.process = None\n         self.rpc_connected = False\n@@ -136,3 +140,28 @@ def node_encrypt_wallet(self, passphrase):\n             time.sleep(0.1)\n         self.rpc = None\n         self.rpc_connected = False\n+\n+class TestNodeCLI():\n+    \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n+\n+    def __init__(self, binary, datadir):\n+        self.binary = binary\n+        self.datadir = datadir\n+\n+    def __getattr__(self, command):\n+        def dispatcher(*args, **kwargs):\n+            return self.send_cli(command, *args, **kwargs)\n+        return dispatcher\n+\n+    def send_cli(self, command, *args, **kwargs):\n+        \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n+\n+        pos_args = [str(arg) for arg in args]\n+        named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n+        assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n+        p_args = [self.binary, \"-datadir=\" + self.datadir]\n+        if named_args:\n+            p_args += [\"-named\"]\n+        p_args += [command] + pos_args + named_args\n+        cli_output = subprocess.check_output(p_args, universal_newlines=True)\n+        return json.loads(cli_output, parse_float=decimal.Decimal)"
      },
      {
        "sha": "01236b607e6125be8b57760b17e5bb6c25e7e290",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "patch": "@@ -279,6 +279,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     #Set env vars\n     if \"BITCOIND\" not in os.environ:\n         os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+        os.environ[\"BITCOINCLI\"] = build_dir + '/src/bitcoin-cli' + exeext\n \n     tests_dir = src_dir + '/test/functional/'\n "
      }
    ]
  },
  {
    "sha": "716066dbea0e448b78838a692c4627a9e32fcec2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTYwNjZkYmVhMGU0NDhiNzg4MzhhNjkyYzQ2MjdhOWUzMmZjZWMy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-11T17:02:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:31:44Z"
      },
      "message": "[tests] Add bitcoin_cli.py test script\n\nGithub-Pull: #10798\nRebased-From: c6ec4358a797b7a11283238a0cf0b4531def9e92",
      "tree": {
        "sha": "099a395c0a0a11aa6c22290cf7cbab67b15da9ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/099a395c0a0a11aa6c22290cf7cbab67b15da9ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/716066dbea0e448b78838a692c4627a9e32fcec2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716066dbea0e448b78838a692c4627a9e32fcec2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/716066dbea0e448b78838a692c4627a9e32fcec2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716066dbea0e448b78838a692c4627a9e32fcec2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/016b9ada2111aaf41f3336c0179a1347355bc9e6"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1033202092680ebda9abc873731866b3bd962ca8",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=716066dbea0e448b78838a692c4627a9e32fcec2",
        "patch": "@@ -0,0 +1,26 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoin-cli\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class TestBitcoinCli(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        self.log.info(\"Compare responses from getinfo RPC and `bitcoin-cli getinfo`\")\n+        cli_get_info = self.nodes[0].cli.getinfo()\n+        rpc_get_info = self.nodes[0].getinfo()\n+\n+        assert_equal(cli_get_info, rpc_get_info)\n+\n+if __name__ == '__main__':\n+    TestBitcoinCli().main()"
      },
      {
        "sha": "fae4f66d70cde46fd9e16c039ea75e5dfd173705",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=716066dbea0e448b78838a692c4627a9e32fcec2",
        "patch": "@@ -81,6 +81,7 @@\n     # vv Tests less than 30s vv\n     'keypool-topup.py',\n     'zmq_test.py',\n+    'bitcoin_cli.py',\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n     'txn_clone.py',"
      }
    ]
  },
  {
    "sha": "2a5d099e47c896a7a3bd0015ca179587257b7792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTVkMDk5ZTQ3Yzg5NmE3YTNiZDAwMTVjYTE3OTU4NzI1N2I3Nzky",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-07-18T00:19:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:40:05Z"
      },
      "message": "RPC: gettxout: Slightly improve doc and tests\n\nGithub-Pull: #10859\nRebased-From: 6d2d2eb49389d70a5db327e133c9c90748f82d5f",
      "tree": {
        "sha": "7772865032536e165e4e6bd9e315023b3565d031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7772865032536e165e4e6bd9e315023b3565d031"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a5d099e47c896a7a3bd0015ca179587257b7792",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5d099e47c896a7a3bd0015ca179587257b7792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5d099e47c896a7a3bd0015ca179587257b7792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5d099e47c896a7a3bd0015ca179587257b7792/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "716066dbea0e448b78838a692c4627a9e32fcec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716066dbea0e448b78838a692c4627a9e32fcec2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/716066dbea0e448b78838a692c4627a9e32fcec2"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "720eb068bf65780366965d285355e16bfb497512",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5d099e47c896a7a3bd0015ca179587257b7792/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5d099e47c896a7a3bd0015ca179587257b7792/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2a5d099e47c896a7a3bd0015ca179587257b7792",
        "patch": "@@ -944,9 +944,10 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n-            \"2. n              (numeric, required) vout number\\n\"\n-            \"3. include_mempool  (boolean, optional) Whether to include the mempool\\n\"\n+            \"1. \\\"txid\\\"             (string, required) The transaction id\\n\"\n+            \"2. \\\"n\\\"                (numeric, required) vout number\\n\"\n+            \"3. \\\"include_mempool\\\"  (boolean, optional) Whether to include the mempool. Default: true.\"\n+            \"     Note that an unspent output that is spent in the mempool won't appear.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\""
      },
      {
        "sha": "a37c457bc813476a6d02fe828366e887fd5aae4c",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5d099e47c896a7a3bd0015ca179587257b7792/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5d099e47c896a7a3bd0015ca179587257b7792/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=2a5d099e47c896a7a3bd0015ca179587257b7792",
        "patch": "@@ -56,6 +56,15 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listunspent()), 1)\n         assert_equal(len(self.nodes[2].listunspent()), 0)\n \n+        self.log.info(\"test gettxout\")\n+        confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n+        # First, outputs that are unspent both in the chain and in the\n+        # mempool should appear with or without include_mempool\n+        txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=False)\n+        assert_equal(txout['value'], 50)\n+        txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=True)\n+        assert_equal(txout['value'], 50)\n+        \n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Locked memory should use at least 32 bytes to sign each transaction\n         self.log.info(\"test getmemoryinfo\")\n@@ -65,10 +74,9 @@ def run_test(self):\n         memory_after = self.nodes[0].getmemoryinfo()\n         assert(memory_before['locked']['used'] + 64 <= memory_after['locked']['used'])\n \n-        self.log.info(\"test gettxout\")\n+        self.log.info(\"test gettxout (second part)\")\n         # utxo spent in mempool should be visible if you exclude mempool\n         # but invisible if you include mempool\n-        confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False)\n         assert_equal(txout['value'], 50)\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, True)"
      }
    ]
  },
  {
    "sha": "847c75ec6447f58b6c4f3732a10551f1faddbb0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDdjNzVlYzY0NDdmNThiNmM0ZjM3MzJhMTA1NTFmMWZhZGRiYjBi",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-08-25T22:20:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:41:34Z"
      },
      "message": "Add getmininginfo functional test\n\nGithub-Pull: #11150\nRebased-From: 4f2905b76b502a9de235dbe739e5fe504ef5bc22",
      "tree": {
        "sha": "58976fd15ba781c15d2d38107fd6e9197ead70a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58976fd15ba781c15d2d38107fd6e9197ead70a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a5d099e47c896a7a3bd0015ca179587257b7792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5d099e47c896a7a3bd0015ca179587257b7792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5d099e47c896a7a3bd0015ca179587257b7792"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 17,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f3d1f3e90afb9bccb5d4fea57cc2f93747b0842d",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/847c75ec6447f58b6c4f3732a10551f1faddbb0b/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/847c75ec6447f58b6c4f3732a10551f1faddbb0b/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=847c75ec6447f58b6c4f3732a10551f1faddbb0b",
        "patch": "@@ -4,16 +4,18 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mining RPCs\n \n+- getmininginfo\n - getblocktemplate proposal mode\n - submitblock\"\"\"\n \n-from binascii import b2a_hex\n import copy\n+from binascii import b2a_hex\n+from decimal import Decimal\n \n from test_framework.blocktools import create_coinbase\n-from test_framework.test_framework import BitcoinTestFramework\n from test_framework.mininode import CBlock\n-from test_framework.util import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -33,6 +35,18 @@ def __init__(self):\n \n     def run_test(self):\n         node = self.nodes[0]\n+\n+        self.log.info('getmininginfo')\n+        mining_info = node.getmininginfo()\n+        assert_equal(mining_info['blocks'], 200)\n+        assert_equal(mining_info['chain'], 'regtest')\n+        assert_equal(mining_info['currentblocksize'], 0)\n+        assert_equal(mining_info['currentblocktx'], 0)\n+        assert_equal(mining_info['currentblockweight'], 0)\n+        assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))\n+        assert_equal(mining_info['networkhashps'], Decimal('0.003333333333333334'))\n+        assert_equal(mining_info['pooledtx'], 0)\n+\n         # Mine a block to leave initial block download\n         node.generate(1)\n         tmpl = node.getblocktemplate()"
      }
    ]
  },
  {
    "sha": "11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWE1OTkyYzkwZDRjYzlhMzgyM2VhMDhkYWIyYzA3OGJjYmYxNWQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-23T19:49:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:42:57Z"
      },
      "message": "[tests] fix - use rpc_timeout as rpc timeout\n\nGithub-Pull: #11121\nRebased-From: be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
      "tree": {
        "sha": "8650c8035ae9a4b6f76ac52be4e79f1697f56fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8650c8035ae9a4b6f76ac52be4e79f1697f56fdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "847c75ec6447f58b6c4f3732a10551f1faddbb0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/847c75ec6447f58b6c4f3732a10551f1faddbb0b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "553c7c9d20225b724642888b732a37f7c95154d0",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
        "patch": "@@ -78,7 +78,7 @@ def wait_for_rpc_connection(self):\n         for _ in range(poll_per_s * self.rpc_timeout):\n             assert self.process.poll() is None, \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n-                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n+                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n                 self.rpc.getblockcount()\n                 # If the call to getblockcount() succeeds then the RPC connection is up\n                 self.rpc_connected = True"
      }
    ]
  },
  {
    "sha": "4d3ba18386c7a09086d06c8b640c19343ff34188",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDNiYTE4Mzg2YzdhMDkwODZkMDZjOGI2NDBjMTkzNDNmZjM0MTg4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-09T20:35:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:43:15Z"
      },
      "message": "[tests] TestNode: separate add_node from start_node\n\nSeparates the act of creating a TestNode object from starting the node.\nThe test_framework now keeps track of its list of TestNodes, and test\nwriters can call start_node() and stop_node() without having to update\nthe self.nodes list.\n\nGithub-Pull: #11121\nRebased-From: 36b626867087e9fae6d85f926248997ebff327b7",
      "tree": {
        "sha": "93de2e0a806af1d76f8b36faf1bf3f3a5677a684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93de2e0a806af1d76f8b36faf1bf3f3a5677a684"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d3ba18386c7a09086d06c8b640c19343ff34188",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d3ba18386c7a09086d06c8b640c19343ff34188",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d3ba18386c7a09086d06c8b640c19343ff34188",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d3ba18386c7a09086d06c8b640c19343ff34188/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2"
      }
    ],
    "stats": {
      "total": 399,
      "additions": 202,
      "deletions": 197
    },
    "files": [
      {
        "sha": "1db04337a96f4d9c7c2cb2b51f9f0f4d9e7a7734",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -74,7 +74,7 @@ def run_test(self):\n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in either node's mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -121,7 +121,7 @@ def run_test(self):\n \n         # Remove using high relay fee again\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "63e6a384a45d2a7235bebad2b155997a5aae94f7",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -60,10 +60,11 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n+        self.add_nodes(3, self.options.tmpdir)\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid.\n-        self.nodes = [self.start_node(0, self.options.tmpdir)]\n+        self.start_node(0)\n \n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n@@ -162,15 +163,13 @@ def run_test(self):\n             height += 1\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n         node1.wait_for_verack()\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n         node2.add_connection(connections[2])"
      },
      {
        "sha": "ad16482550ce16ea5636ee53df1e2e12770af466",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -241,6 +241,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # Restart all\n         self.test.clear_all_connections()\n         self.stop_nodes()\n+        self.nodes = []\n         shutil.rmtree(self.options.tmpdir + \"/node0\")\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "a3a6cf2fb868966ae46b577a070ddfd69412d1aa",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -146,7 +146,7 @@ def _test_stopatheight(self):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n         self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n \n "
      },
      {
        "sha": "59c65f18e89deaeb70034accc603245fb89a7cb0",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -34,21 +34,18 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n+                           for i in range(self.num_nodes)]\n \n-    def setup_network(self, split=False):\n-        extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n-                      for i in range(self.num_nodes)]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n-\n+    def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n+        self.start_node(1)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n \n-    def run_test(self):\n         peer_node, rbf_node = self.nodes\n         rbf_node_address = rbf_node.getnewaddress()\n "
      },
      {
        "sha": "1a5754b3f7396d6ba0342476c85700ad6fb5f4fb",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -18,7 +18,6 @@ def __init__(self):\n \n         # Test network and test nodes are not required:\n         self.num_nodes = 0\n-        self.nodes = []\n \n     def setup_network(self):\n         pass"
      },
      {
        "sha": "d39369105bf6d5becfc54e1c137a7b7fc6415987",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -65,7 +65,8 @@ def __init__(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):\n@@ -78,7 +79,7 @@ def restart_node(self, node_index, expected_tip):\n         while time.time() - time_start < 120:\n             try:\n                 # Any of these RPC calls could throw due to node crash\n-                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index], timewait=90)\n+                self.start_node(node_index)\n                 self.nodes[node_index].waitforblock(expected_tip)\n                 utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n                 return utxo_hash"
      },
      {
        "sha": "cc8901c40ca5248041233792d6c1a9a4cdeed7a5",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -68,8 +68,8 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listbanned()), 3)\n \n         self.stop_node(1)\n+        self.start_node(1)\n \n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n         listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])"
      },
      {
        "sha": "3a2a927098e0fb0c486a9647e61a2a4f7d4316bf",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -7,7 +7,6 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n \n class ForkNotifyTest(BitcoinTestFramework):\n \n@@ -17,18 +16,12 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n-        self.nodes.append(self.start_node(0, self.options.tmpdir,\n-                            [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n-        # Node1 mines block.version=211 blocks\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                [\"-blockversion=211\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n-        self.sync_all()\n+        self.extra_args = [[\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"],\n+                           [\"-blockversion=211\"]]\n+        super().setup_network()\n \n     def run_test(self):\n         # Mine 51 up-version blocks"
      },
      {
        "sha": "242b6eed108cf996aa9391b626b9ad41403cb1b5",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -449,11 +449,11 @@ def run_test(self):\n         ############################################################\n         # locked wallet test\n         self.stop_node(0)\n+        self.nodes[1].node_encrypt_wallet(\"test\")\n         self.stop_node(2)\n         self.stop_node(3)\n-        self.nodes[1].node_encrypt_wallet(\"test\")\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:"
      },
      {
        "sha": "be52d5c8472d09a51d0972ddedaf2027e8892a31",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -121,7 +121,8 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n "
      },
      {
        "sha": "6aae95549de9359c742b3f5fe4d3c35226a8d654",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -429,7 +429,7 @@ def run_test (self):\n \n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(2, self.options.tmpdir)\n+        self.start_nodes()\n         address_assert = self.nodes[1].validateaddress(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)"
      },
      {
        "sha": "f14a449b59192d555de753d053524e832ec756d0",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -35,7 +35,7 @@ def run_test(self):\n         self.stop_node(1)\n \n         shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         self.log.info(\"Generate keys for wallet\")\n@@ -61,7 +61,7 @@ def run_test(self):\n \n         self.log.info(\"Verify keypool is restored and balance is correct\")\n \n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "0f84b5c0550170f4f74d4dd29af56efceb866bb6",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -19,7 +19,7 @@ def run_test(self):\n         # Encrypt wallet and wait to terminate\n         nodes[0].node_encrypt_wallet('test')\n         # Restart node 0\n-        nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)"
      },
      {
        "sha": "9b970284171d98daa703048649d9493758ce59e9",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -20,11 +20,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "6bd6a9e34f45ad0e37cd173b037280dff3e728ac",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -147,7 +147,7 @@ def run_test(self):\n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+        self.start_node(0, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect a test node\n         test_nodes = [TestNode()]"
      },
      {
        "sha": "dc5a3263ffa4a3568ecb8baf4862d38ad9e02073",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -63,26 +63,23 @@ def run_test(self):\n \n         self.log.debug(\"Stop-start node0 and node1. Verify that node0 has the transactions in its mempool and node1 does not.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n+        self.start_node(0)\n+        self.start_node(1)\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-persistmempool=0\"]))\n+        self.start_node(0, extra_args=[\"-persistmempool=0\"])\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.start_node(0)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "7381a9fd54d82a52f37e220547286465058a2b9b",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -23,17 +23,17 @@ def run_test(self):\n         self.stop_node(0)\n \n         # should not initialize if there are duplicate wallets\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.start_node(0, self.extra_args[0])\n \n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n         w2 = self.nodes[0].get_wallet_rpc(\"w2\")"
      },
      {
        "sha": "9189f5ef23f857cf5a56e27b927d8f280eb55a24",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -1496,7 +1496,7 @@ def test_upgrade_after_activation(self, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.nodes[node_id] = self.start_node(node_id, self.options.tmpdir)\n+        self.start_node(node_id, extra_args=[])\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "a7aacf908d1ede0bdf82fe513e5e50d0c83f6ed6",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -112,7 +112,7 @@ def run_test(self):\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n@@ -123,7 +123,7 @@ def run_test(self):\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "7f5a3810f4d4618ef359135a852bea4b3f7aaea7",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -89,7 +89,8 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.start_nodes()\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "fe406e89adc2b694bdc29ec878243e781b7857bb",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -56,6 +56,10 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 4)\n         sync_blocks(self.nodes[0:5])\n \n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=900)\n+        self.start_nodes()\n+\n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n         self.nodes[1].generate(200)\n@@ -98,7 +102,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             self.stop_node(0)\n-            self.nodes[0]=self.start_node(0, self.options.tmpdir, self.full_node_default_args, timewait=900)\n+            self.start_node(0, extra_args=self.full_node_default_args)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n                 if j == 0:\n@@ -126,7 +130,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         height = self.nodes[1].getblockcount()\n         self.log.info(\"Current block height: %d\" % height)\n@@ -149,7 +153,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n@@ -227,13 +231,15 @@ def reorg_back(self):\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, timewait=900)\n+        self.start_node(node_number)\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n-        self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n+        self.stop_node(node_number)\n+        self.start_node(node_number, extra_args=[\"-prune=1\"])\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n \n         def height(index):\n@@ -307,15 +313,15 @@ def has_block(index):\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n         self.stop_node(node_number)\n-        self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n+        self.start_node(node_number, extra_args=[\"-prune=550\"])\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(2, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads successfully when restarting a pruned node after IBD.\n@@ -325,7 +331,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        self.nodes[5] = self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(5, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "b1658341699875b4bc8762f9752315eb9c651983",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -28,11 +28,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "0d2a1065920611c09437acf603efb269ea2e2350",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -25,7 +25,7 @@ def reindex(self, justchainstate=False):\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes(extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "db6f6eec45896324a5f8f97b0c9523479e91a3a3",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -20,7 +20,7 @@ def run_test(self):\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0, extra_args=[])\n         assert_equal(self.nodes[0].resendwallettransactions(), [])\n \n         # Should return an array with the unconfirmed wallet transaction."
      },
      {
        "sha": "e9d64af204cda63c9dcdef3fb34b735f63fd8a41",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -20,23 +20,22 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        pass\n-\n-    def setup_nodes(self):\n-        pass\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, None)\n \n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''\n         Start a node with requested rpcallowip and rpcbind parameters,\n         then try to connect, and check if the set of bound addresses\n         matches the expected set.\n         '''\n+        self.log.info(\"Bind test for %s\" % str(addresses))\n         expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n         base_args = ['-disablewallet', '-nolisten']\n         if allow_ips:\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        self.nodes[0].rpchost = connect_to\n+        self.start_node(0, base_args + binds)\n         pid = self.nodes[0].process.pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n@@ -46,8 +45,10 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         Start a node with rpcallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n+        self.log.info(\"Allow IP test for %s:%d\" % (rpchost, rpcport))\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        self.nodes[0].rpchost = None\n+        self.start_nodes([base_args])\n         # connect to node through non-loopback interface\n         node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()"
      },
      {
        "sha": "6eb6658466449d0dd0eec8be4ef569f0d2e00de3",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 45,
        "deletions": 44,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -153,57 +153,16 @@ def setup_network(self):\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.nodes = []\n+        self.add_nodes(3, self.options.tmpdir, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+                                                           [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                                           [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-whitelist=127.0.0.1\"]))\n-\n-        self.log.info(\"This test is time consuming, please be patient\")\n-        self.log.info(\"Splitting inputs so we can generate tx's\")\n-        self.txouts = []\n-        self.txouts2 = []\n-        # Split a coinbase into two transaction puzzle outputs\n-        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n-\n-        # Mine\n-        while (len(self.nodes[0].getrawmempool()) > 0):\n-            self.nodes[0].generate(1)\n-\n-        # Repeatedly split those 2 outputs, doubling twice for each rep\n-        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n-        reps = 0\n-        while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n-                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n-                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            reps += 1\n-        self.log.info(\"Finished splitting\")\n-\n-        # Now we can connect the other nodes, didn't want to connect them earlier\n-        # so the estimates would not be affected by the splitting transactions\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n-        node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir, node2args))\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[2], 1)\n-\n-        self.sync_all()\n \n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n@@ -232,9 +191,51 @@ def transact_and_mine(self, numblocks, mining_node):\n             self.memutxo = newmem\n \n     def run_test(self):\n+        self.log.info(\"This test is time consuming, please be patient\")\n+        self.log.info(\"Splitting inputs so we can generate tx's\")\n+\n         # Make log handler available to helper functions\n         global log\n         log = self.log\n+\n+        # Start node0\n+        self.start_node(0)\n+        self.txouts = []\n+        self.txouts2 = []\n+        # Split a coinbase into two transaction puzzle outputs\n+        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n+\n+        # Mine\n+        while (len(self.nodes[0].getrawmempool()) > 0):\n+            self.nodes[0].generate(1)\n+\n+        # Repeatedly split those 2 outputs, doubling twice for each rep\n+        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n+        reps = 0\n+        while (reps < 5):\n+            #Double txouts to txouts2\n+            while (len(self.txouts)>0):\n+                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            #Double txouts2 to txouts\n+            while (len(self.txouts2)>0):\n+                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            reps += 1\n+        self.log.info(\"Finished splitting\")\n+\n+        # Now we can connect the other nodes, didn't want to connect them earlier\n+        # so the estimates would not be affected by the splitting transactions\n+        self.start_node(1)\n+        self.start_node(2)\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[2], 1)\n+\n+        self.sync_all()\n+\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting"
      },
      {
        "sha": "a14ff9c292e031c2089e7a5f7d894b66b8606de2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 33,
        "deletions": 32,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -91,7 +91,8 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -204,49 +205,49 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n+    def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        \"\"\"Instantiate TestNode objects\"\"\"\n \n         if extra_args is None:\n-            extra_args = []\n+            extra_args = [[]] * num_nodes\n         if binary is None:\n-            binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        node = TestNode(i, dirname, extra_args, rpchost, timewait, binary, stderr, self.mocktime, coverage_dir=self.options.coveragedir)\n-        node.start()\n+            binary = [None] * num_nodes\n+        assert_equal(len(extra_args), num_nodes)\n+        assert_equal(len(binary), num_nodes)\n+        for i in range(num_nodes):\n+            self.nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+\n+    def start_node(self, i, extra_args=None, stderr=None):\n+        \"\"\"Start a bitcoind\"\"\"\n+\n+        node = self.nodes[i]\n+\n+        node.start(extra_args, stderr)\n         node.wait_for_rpc_connection()\n \n         if self.options.coveragedir is not None:\n             coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return node\n-\n-    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n+    def start_nodes(self, extra_args=None):\n+        \"\"\"Start multiple bitcoinds\"\"\"\n \n         if extra_args is None:\n-            extra_args = [[]] * num_nodes\n-        if binary is None:\n-            binary = [None] * num_nodes\n-        assert_equal(len(extra_args), num_nodes)\n-        assert_equal(len(binary), num_nodes)\n-        nodes = []\n+            extra_args = [None] * self.num_nodes\n+        assert_equal(len(extra_args), self.num_nodes)\n         try:\n-            for i in range(num_nodes):\n-                nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n-                nodes[i].start()\n-            for node in nodes:\n+            for i, node in enumerate(self.nodes):\n+                node.start(extra_args[i])\n+            for node in self.nodes:\n                 node.wait_for_rpc_connection()\n         except:\n             # If one node failed to start, stop the others\n             self.stop_nodes()\n             raise\n \n         if self.options.coveragedir is not None:\n-            for node in nodes:\n+            for node in self.nodes:\n                 coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return nodes\n-\n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n         self.nodes[i].stop_node()\n@@ -264,10 +265,10 @@ def stop_nodes(self):\n             while not node.is_node_stopped():\n                 time.sleep(0.1)\n \n-    def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n+    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n             try:\n-                self.start_node(i, dirname, extra_args, stderr=log_stderr)\n+                self.start_node(i, extra_args, stderr=log_stderr)\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n@@ -385,7 +386,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n-                self.nodes[i].start()\n+                self.start_node(i)\n \n             # Wait for RPC connections to be ready\n             for node in self.nodes:\n@@ -455,13 +456,13 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n-        extra_args = [['-whitelist=127.0.0.1']]*self.num_nodes\n+        extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = self.start_nodes(\n-            self.num_nodes, self.options.tmpdir, extra_args,\n-            binary=[self.options.testbinary] +\n-            [self.options.refbinary] * (self.num_nodes - 1))\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args,\n+                       binary=[self.options.testbinary] +\n+                       [self.options.refbinary] * (self.num_nodes - 1))\n+        self.start_nodes()\n \n class SkipTest(Exception):\n     \"\"\"This exception is raised to skip a test\"\"\""
      },
      {
        "sha": "efb3ac9d16599cd8415293a4f8400ad3f12ecd1c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -65,9 +65,13 @@ def __getattr__(self, *args, **kwargs):\n         assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n         return self.rpc.__getattr__(*args, **kwargs)\n \n-    def start(self):\n+    def start(self, extra_args=None, stderr=None):\n         \"\"\"Start the node.\"\"\"\n-        self.process = subprocess.Popen(self.args + self.extra_args, stderr=self.stderr)\n+        if extra_args is None:\n+            extra_args = self.extra_args\n+        if stderr is None:\n+            stderr = self.stderr\n+        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr)\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n "
      },
      {
        "sha": "a588e2386ffe8b705181bf2011451facd1138567",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -68,7 +68,8 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.start_nodes()\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n@@ -95,7 +96,7 @@ def run_test (self):\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.start_node(0)\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "2f38e6fee846f65ab1cc8e19fd3d425ce035a55c",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -31,7 +31,7 @@ def run_test(self):\n \n         # Encrypt the wallet\n         self.nodes[0].node_encrypt_wallet(passphrase)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n \n         # Test that the wallet is encrypted\n         assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)"
      },
      {
        "sha": "13b9dd9a906f696ffb63ebb9c34e248644ddb9b9",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -25,8 +25,8 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.assert_start_raises_init_error(1, ['-usehd=0'], 'already existing HD wallet')\n+        self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -76,7 +76,7 @@ def run_test (self):\n         shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n         shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.start_node(1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -91,7 +91,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n+        self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n         # send a tx and make sure its using the internal chain for the changeoutput"
      },
      {
        "sha": "17896101498c8fccd062a275aa229b8c8500a0ce",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 35,
        "deletions": 26,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -21,11 +21,14 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n+        self.add_nodes(4, self.options.tmpdir, self.extra_args)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n     def run_test(self):\n \n@@ -42,9 +45,9 @@ def run_test(self):\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         self.nodes[1].generate(101)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -96,7 +99,7 @@ def run_test(self):\n \n         # Have node0 mine a block, thus it will collect its own fee.\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n@@ -109,7 +112,7 @@ def run_test(self):\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n         # minus the 21 plus fees sent to node2\n@@ -138,7 +141,7 @@ def run_test(self):\n \n         # Have node1 mine a block to confirm transactions:\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 94)\n@@ -150,30 +153,30 @@ def run_test(self):\n         self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_0_bal += Decimal('10')\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n@@ -184,9 +187,9 @@ def run_test(self):\n         # EXPECT: nodes[3] should have those transactions in its mempool.\n         txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        sync_mempools(self.nodes)\n+        sync_mempools(self.nodes[0:2])\n \n-        self.nodes.append(self.start_node(3, self.options.tmpdir, self.extra_args[3]))\n+        self.start_node(3)\n         connect_nodes_bi(self.nodes, 0, 3)\n         sync_blocks(self.nodes)\n \n@@ -230,22 +233,24 @@ def run_test(self):\n \n         #do some -walletbroadcast tests\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        self.start_node(0, [\"-walletbroadcast=0\"])\n+        self.start_node(1, [\"-walletbroadcast=0\"])\n+        self.start_node(2, [\"-walletbroadcast=0\"])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         assert_equal(self.nodes[2].getbalance(), node_2_bal) #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal += 2\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n@@ -255,14 +260,16 @@ def run_test(self):\n \n         #restart the nodes with -walletbroadcast=1\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n         node_2_bal += 2\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n@@ -293,7 +300,7 @@ def run_test(self):\n         address_to_import = self.nodes[2].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # 2. Import address from node2 to node1\n         self.nodes[1].importaddress(address_to_import)\n@@ -319,15 +326,15 @@ def run_test(self):\n         cbAddr = self.nodes[1].getnewaddress()\n         blkHash = self.nodes[0].generatetoaddress(1, cbAddr)[0]\n         cbTxId = self.nodes[0].getblock(blkHash)['tx'][0]\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(cbTxId)\n \n         # check if wallet or blockchain maintenance changes the balance\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         blocks = self.nodes[0].generate(2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n@@ -358,7 +365,9 @@ def run_test(self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.nodes = self.start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n+            self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(1, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(2, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -406,7 +415,7 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "688cd6d0c866376c3db657ebdb3068f57a070988",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -78,9 +78,9 @@ def do_one_round(self):\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)"
      },
      {
        "sha": "1005a4b95fc06c693b2ae0d3f5596703920b7881",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -48,23 +48,23 @@ def run_test(self):\n \n         # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n         # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes, but not persistmempool.\n         # The unconfirmed transaction is zapped and is no longer in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-zapwallettxes=2\"])\n \n         # tx1 is still be available because it was confirmed\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)"
      },
      {
        "sha": "603b7a1b948401c581d6821fd05177219392cd79",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -41,8 +41,9 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         try:"
      }
    ]
  },
  {
    "sha": "bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjVlN2NiMzA4YjU4YTFjMTZkYjEyNzVkZmNhMWEzMWUyYmJhNzFm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-24T15:37:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:43:29Z"
      },
      "message": "[tests] Avoid passing around member variables in test_framework\n\nGithub-Pull: #11121\nRebased-From: 6cf094a0229d051ab8a15189c8a0bc6011919e72",
      "tree": {
        "sha": "c2cb3f348525b7ee868231c45baf10bab9d80f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2cb3f348525b7ee868231c45baf10bab9d80f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d3ba18386c7a09086d06c8b640c19343ff34188",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d3ba18386c7a09086d06c8b640c19343ff34188",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d3ba18386c7a09086d06c8b640c19343ff34188"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "ec485281d4d937627b71bd2d8592fb605a0692d0",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -60,7 +60,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.add_nodes(3, self.options.tmpdir)\n+        self.add_nodes(3)\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid."
      },
      {
        "sha": "b0c6d39c494d5073f18c960d454a872327c47ecd",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -65,7 +65,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.add_nodes(self.num_nodes, timewait=90)\n         self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n "
      },
      {
        "sha": "e85086fbc16c8eb79aff4303ba17a384cea5f2ff",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -121,7 +121,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)"
      },
      {
        "sha": "adbbda278daca644f6086361e2da8551cca66749",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -89,7 +89,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.add_nodes(self.num_nodes, extra_args=args)\n         self.start_nodes()\n \n     def node_test(self, node, proxies, auth, test_onion=True):"
      },
      {
        "sha": "9690428769f87db1fb8d8cb18528778b9ab94d85",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -57,7 +57,7 @@ def setup_network(self):\n         sync_blocks(self.nodes[0:5])\n \n     def setup_nodes(self):\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=900)\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=900)\n         self.start_nodes()\n \n     def create_big_chain(self):"
      },
      {
        "sha": "a7661421ff9abe8bcfe219d0ab908faadc8da294",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -20,7 +20,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, None)\n+        self.add_nodes(self.num_nodes, None)\n \n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''"
      },
      {
        "sha": "caf35926522c93cd36e70471515e739da4d6ea1d",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -153,9 +153,9 @@ def setup_network(self):\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.add_nodes(3, self.options.tmpdir, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                                           [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n-                                                           [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n+        self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                      [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,"
      },
      {
        "sha": "5e3644a9142b68bde9b72c4a53d8233fec86ac35",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -73,9 +73,9 @@ def add_options(self, parser):\n     def setup_chain(self):\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n         if self.setup_clean_chain:\n-            self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+            self._initialize_chain_clean()\n         else:\n-            self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n+            self._initialize_chain()\n \n     def setup_network(self):\n         self.setup_nodes()\n@@ -91,7 +91,7 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n     def run_test(self):\n@@ -205,7 +205,7 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Instantiate TestNode objects\"\"\"\n \n         if extra_args is None:\n@@ -215,7 +215,7 @@ def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n \n     def start_node(self, i, extra_args=None, stderr=None):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -357,16 +357,16 @@ def _start_logging(self):\n             rpc_handler.setLevel(logging.DEBUG)\n             rpc_logger.addHandler(rpc_handler)\n \n-    def _initialize_chain(self, test_dir, num_nodes, cachedir):\n+    def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n         Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n-        assert num_nodes <= MAX_NODES\n+        assert self.num_nodes <= MAX_NODES\n         create_cache = False\n         for i in range(MAX_NODES):\n-            if not os.path.isdir(os.path.join(cachedir, 'node' + str(i))):\n+            if not os.path.isdir(os.path.join(self.options.cachedir, 'node' + str(i))):\n                 create_cache = True\n                 break\n \n@@ -375,16 +375,16 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n \n             # find and delete old cache directories if any exist\n             for i in range(MAX_NODES):\n-                if os.path.isdir(os.path.join(cachedir, \"node\" + str(i))):\n-                    shutil.rmtree(os.path.join(cachedir, \"node\" + str(i)))\n+                if os.path.isdir(os.path.join(self.options.cachedir, \"node\" + str(i))):\n+                    shutil.rmtree(os.path.join(self.options.cachedir, \"node\" + str(i)))\n \n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n-                datadir = initialize_datadir(cachedir, i)\n+                datadir = initialize_datadir(self.options.cachedir, i)\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n \n@@ -415,24 +415,24 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             self.nodes = []\n             self.disable_mocktime()\n             for i in range(MAX_NODES):\n-                os.remove(log_filename(cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(cachedir, i, \"db.log\"))\n-                os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-                os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n-\n-        for i in range(num_nodes):\n-            from_dir = os.path.join(cachedir, \"node\" + str(i))\n-            to_dir = os.path.join(test_dir, \"node\" + str(i))\n+                os.remove(log_filename(self.options.cachedir, i, \"debug.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"db.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"peers.dat\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"fee_estimates.dat\"))\n+\n+        for i in range(self.num_nodes):\n+            from_dir = os.path.join(self.options.cachedir, \"node\" + str(i))\n+            to_dir = os.path.join(self.options.tmpdir, \"node\" + str(i))\n             shutil.copytree(from_dir, to_dir)\n-            initialize_datadir(test_dir, i)  # Overwrite port/rpcport in bitcoin.conf\n+            initialize_datadir(self.options.tmpdir, i)  # Overwrite port/rpcport in bitcoin.conf\n \n-    def _initialize_chain_clean(self, test_dir, num_nodes):\n+    def _initialize_chain_clean(self):\n         \"\"\"Initialize empty blockchain for use by the test.\n \n         Create an empty blockchain and num_nodes wallets.\n         Useful if a test case wants complete control over initialization.\"\"\"\n-        for i in range(num_nodes):\n-            initialize_datadir(test_dir, i)\n+        for i in range(self.num_nodes):\n+            initialize_datadir(self.options.tmpdir, i)\n \n class ComparisonTestFramework(BitcoinTestFramework):\n     \"\"\"Test framework for doing p2p comparison testing\n@@ -459,7 +459,7 @@ def setup_network(self):\n         extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args,\n+        self.add_nodes(self.num_nodes, extra_args,\n                        binary=[self.options.testbinary] +\n                        [self.options.refbinary] * (self.num_nodes - 1))\n         self.start_nodes()"
      },
      {
        "sha": "e0381b9809f9cd899935104cadeb1f5a529f4313",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -68,7 +68,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=60)\n         self.start_nodes()\n \n     def run_test (self):"
      },
      {
        "sha": "7190de94b6706f1d4c0b925cb97d28988c7fce19",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.add_nodes(4, self.options.tmpdir, self.extra_args)\n+        self.add_nodes(4, self.extra_args)\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)"
      },
      {
        "sha": "b5a22ea07fc8f6b5d7050d03413bb9ce061382e5",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -42,7 +42,7 @@ def setup_nodes(self):\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n         self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n     def run_test(self):"
      }
    ]
  },
  {
    "sha": "801d2ae9247be5870344c8b4ed5c372ab8930408",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDFkMmFlOTI0N2JlNTg3MDM0NGM4YjRlZDVjMzcyYWI4OTMwNDA4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-09T22:21:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:43:43Z"
      },
      "message": "[tests] don't override __init__() in individual tests\n\nAlmost all test scripts currently need to override the __init__()\nmethod. When they do that they need to call into super().__init__() as\nthe base class does some generic initialization.\n\nThis commit makes the base class __init__() call into set_test_params()\nmethod. Individual test cases can override set_test_params() to setup\ntheir test parameters.\n\nGithub-Pull: #11121\nRebased-From: 5448a1471d6fc638a2220ea5a2f3782172efe14c",
      "tree": {
        "sha": "2326b26745fcdb556b9a937b5e8fe116fd21a9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2326b26745fcdb556b9a937b5e8fe116fd21a9ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/801d2ae9247be5870344c8b4ed5c372ab8930408",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/801d2ae9247be5870344c8b4ed5c372ab8930408",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/801d2ae9247be5870344c8b4ed5c372ab8930408",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/801d2ae9247be5870344c8b4ed5c372ab8930408/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f"
      }
    ],
    "stats": {
      "total": 467,
      "additions": 145,
      "deletions": 322
    },
    "files": [
      {
        "sha": "2558bd017d6a210f4040e88ddf529220129e4b84",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -24,8 +24,8 @@ don't have test cases for.\n - Use a module-level docstring to describe what the test is testing, and how it\n   is testing it.\n - When subclassing the BitcoinTestFramwork, place overrides for the\n-  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n-  locally-defined helper methods, then the `run_test()` method.\n+  `set_test_params()`, `add_options()` and `setup_xxxx()` methods at the top of\n+  the subclass, then locally-defined helper methods, then the `run_test()` method.\n \n #### General test-writing advice\n \n@@ -36,7 +36,7 @@ don't have test cases for.\n - Avoid stop-starting the nodes multiple times during the test if possible. A\n   stop-start takes several seconds, so doing it several times blows up the\n   runtime of the test.\n-- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+- Set the `self.setup_clean_chain` variable in `set_test_params()` to control whether\n   or not to use the cached data directories. The cached data directories\n   contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n   has 25 mature blocks (25x50=1250 BTC) in its wallet."
      },
      {
        "sha": "e8dbc864698aa3ead772fe78da08d5ef74bcc595",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,10 +14,8 @@\n from test_framework.util import *\n \n class AbandonConflictTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def run_test(self):"
      },
      {
        "sha": "beaf8c70558613e040dd9c089f422d255e38327b",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -54,8 +54,7 @@ def send_header_for_blocks(self, new_blocks):\n         self.send_message(headers_message)\n \n class AssumeValidTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "2cd6df6e37a823a03aa4f42c9f2105f7608e4392",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -60,9 +60,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP65Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True"
      },
      {
        "sha": "7e6a4f44086696eb2f9f4811bd4ee8832abf64a2",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -92,9 +92,9 @@ def all_rlt_txs(txarray):\n     return txs\n \n class BIP68_112_113Test(ComparisonTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4']]\n \n     def run_test(self):"
      },
      {
        "sha": "39012adf9533d25bb6d1e01afc7e94c6bc38cb21",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,10 +17,8 @@\n NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n \n class BIP68Test(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "904789301a1088d0e996c7fc0201f8a04e01a238",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -28,11 +28,10 @@\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1']]\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "c620d3e155d14b80aa14feee4f0fd6e39feb6efa",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -48,9 +48,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP66Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True"
      },
      {
        "sha": "5d04de9940c4b990453415ded48c529941119a3e",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -30,12 +30,8 @@\n     assert_is_hash_string,\n )\n \n-\n class BlockchainTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-stopatheight=207']]\n "
      },
      {
        "sha": "ede0df29d8d7befa3c9bc15f3abcaec32234f629",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -30,8 +30,7 @@\n \n \n class BumpFeeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]"
      },
      {
        "sha": "7d4d1a529b762b95075cfc2f24c64c53908a6c24",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,11 +12,9 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class CreateCache(BitcoinTestFramework):\n+    # Test network and test nodes are not required:\n \n-    def __init__(self):\n-        super().__init__()\n-\n-        # Test network and test nodes are not required:\n+    def set_test_params(self):\n         self.num_nodes = 0\n \n     def setup_network(self):"
      },
      {
        "sha": "71424f641b55d609c8e75e6e9e4e7b2d47da9e4d",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -43,8 +43,7 @@\n     pass\n \n class ChainstateWriteCrashTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n "
      },
      {
        "sha": "6611da8831472cf45310115009a63c07e42e4199",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -10,9 +10,7 @@\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "c1d37963bc60527603fe2fffeaa704a40c9a3f4c",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,11 +11,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class DisableWalletTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-disablewallet\"]]"
      },
      {
        "sha": "a6445b9b35e42554c62c76471275e399d040baed",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,11 +14,8 @@\n )\n \n class DisconnectBanTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         self.log.info(\"Test setban and listbanned RPCs\")"
      },
      {
        "sha": "de8934f74b7612c41e8d2f6d02a5f01f11311669",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -73,15 +73,11 @@ def custom_function():\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n-    def __init__(self):\n-        \"\"\"Initialize the test\n-\n-        Call super().__init__() first, and then override any test parameters\n-        for your individual test.\"\"\"\n-        super().__init__()\n+    def set_test_params(self):\n+        \"\"\"Override any test parameters for your individual test.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes"
      },
      {
        "sha": "afcad1f9cc3fa055cfafc2505b10d28cdacb932f",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,11 +9,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class ForkNotifyTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")"
      },
      {
        "sha": "dec3d41bfc5f24bfb767a9e024330eb417decfc7",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,13 +14,9 @@ def get_unspent(listunspent, amount):\n             return utx\n     raise AssertionError('Could not find unspent with amount={}'.format(amount))\n \n-\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n \n     def setup_network(self, split=False):\n         self.setup_nodes()"
      },
      {
        "sha": "85d2560244e579891d217fedfc077951c8b3a710",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -23,11 +23,6 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "00fc23c6b0d3f54e761ef92b690fbc896330f0cd",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,13 +14,7 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def run_test (self):\n-\n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)\n         assert_equal (tips[0]['branchlen'], 0)"
      },
      {
        "sha": "c7682cb49df422df050939a9cb729ecf528f5811",
        "filename": "test/functional/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/httpbasics.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,10 +11,8 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "02d7428120bea956e44c148822d35cba64fa4b14",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -111,8 +111,7 @@ def check(self, txid=None, amount=None, confirmations=None):\n \n \n class ImportRescanTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):"
      },
      {
        "sha": "4c519f40d54e3219af54a7c4e18b1e71164ed654",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -7,8 +7,7 @@\n from test_framework.util import *\n \n class ImportMultiTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "df90e9ec177ba30ac682a759771b9430acea7979",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -6,11 +6,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class ImportPrunedFundsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "dd3daf1e07bda1c55e8839215e7ad519309b322c",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class InvalidateTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "9f44b44927c0cb3d6331bc9340bfa5490d3e24eb",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -23,9 +23,9 @@ class InvalidBlockRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "a22bd8f8cdc3db99c95a8b118f1504e898f30bd1",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -19,9 +19,9 @@ class InvalidTxRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "8302e3ef606544c01849e1f64c2c66c6ccc1d3e3",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -20,8 +20,7 @@\n )\n \n class KeypoolRestoreTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]"
      },
      {
        "sha": "b823ca63bb80c35c3a6630a9b47533c67ecc7022",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import *\n \n class KeyPoolTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n \n     def run_test(self):\n         nodes = self.nodes\n@@ -78,10 +80,5 @@ def run_test(self):\n         assert_equal(wi['keypoolsize_hd_internal'], 100)\n         assert_equal(wi['keypoolsize'], 100)\n \n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-\n if __name__ == '__main__':\n     KeyPoolTest().main()"
      },
      {
        "sha": "ed1315e805b1640432af450c5fe7b976f9f8d712",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import assert_equal\n \n class ListSinceBlockTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n \n     def run_test(self):\n         self.nodes[2].generate(101)"
      },
      {
        "sha": "5ee85a0dac665384f80b1827bc737be8feeeb222",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -16,10 +16,7 @@ def txFromHex(hexstring):\n     return tx\n \n class ListTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "1f402798e7e01e05a60e5565d77867ea3101efec",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -31,8 +31,7 @@ def on_block(self, conn, message):\n \n class MaxUploadTest(BitcoinTestFramework):\n  \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]]"
      },
      {
        "sha": "e24dc5a464b366004a01470a4e6c73533131388f",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class MempoolLimitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]"
      },
      {
        "sha": "2dedadf8ce4a2b6f5b81289ff9dedbccff032335",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,10 +12,8 @@\n MAX_DESCENDANTS = 25\n \n class MempoolPackagesTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n     # Build a transaction that spends parent_txid:vout"
      },
      {
        "sha": "01f65b137363dffd6fd98e7c177d8460aa079f6e",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -36,12 +36,8 @@\n from test_framework.util import *\n \n class MempoolPersistTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        # We need 3 nodes for this test. Node1 does not have a persistent mempool.\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n     def run_test(self):"
      },
      {
        "sha": "7dfddd3230df1e32a7e5b1f35b4db985197e888b",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,10 +13,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]] * 2\n \n     alert_filename = None  # Set by setup_network"
      },
      {
        "sha": "1263c9306b6377d542db0302600a4a0ddc57e507",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,12 +9,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n-        # Just need one node for this test\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "58ccd3e3734f6d9f42d67bbd029bdaeeeb19eca8",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,11 +17,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "2125c6e17bc27f9e7bfe38520e6f24190745dcbd",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import *\n \n class MerkleBlockTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n "
      },
      {
        "sha": "93f98388960f5d83d5bee6446004f2025ced0d26",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -27,9 +27,7 @@ def assert_template(node, block, expect, rehash=True):\n     assert_equal(rsp, expect)\n \n class MiningTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n "
      },
      {
        "sha": "a2b346f27429acc9712591b6c167164345af00a7",
        "filename": "test/functional/multi_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multi_rpc.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,10 +12,7 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_chain(self):"
      },
      {
        "sha": "e5453e9aaddcf4608342286be5e5688def47b11b",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,9 +12,7 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class MultiWalletTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]"
      },
      {
        "sha": "37ea6824d570e82ddc5656a681a230b08f91f669",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,10 +17,8 @@\n     p2p_port,\n )\n \n-\n class NetTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "60d0d876df70f452e443ba3ecf235e0fd256345d",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -37,8 +37,7 @@ def trueDummy(tx):\n \n class NULLDUMMYTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness']]"
      },
      {
        "sha": "293bc055393ea1539eb9ea6508128d5fc833f0a3",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -60,8 +60,7 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to test\")\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]"
      },
      {
        "sha": "9c91c0045307fbeeba242d3134348f4357613515",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -89,8 +89,7 @@ def send_await_disconnect(self, message, timeout=30):\n         wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2"
      },
      {
        "sha": "8c92365ceda611f19c4e6286f3389f21542d50de",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -37,11 +37,8 @@ def clear_invs(self):\n             self.txinvs = []\n \n class FeeFilterTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         node1 = self.nodes[1]"
      },
      {
        "sha": "cb7bbaf7e563b183c07e3ec2b2bf09840c139576",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -49,12 +49,11 @@ def normal_serialize(self):\n         return r\n \n class FullBlockTest(ComparisonTestFramework):\n-\n     # Can either run this test as 1 node with expected answers, or two and compare them.\n     # Change the \"outcome\" variable from each TestInstance object to only do the comparison.\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n         self.coinbase_key.set_secretbytes(b\"horsebattery\")"
      },
      {
        "sha": "f27086c97eb2d883dfb5c968d6333373c847381a",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -92,8 +92,7 @@ def on_version(self, conn, message):\n         conn.send_message(msg_getaddr())\n \n class P2PLeakTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore='+str(banscore)]]\n "
      },
      {
        "sha": "40fcde2605716979490a62681df46ab5d3f28ed9",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n from test_framework.util import *\n \n class P2PMempoolTests(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-peerbloomfilters=0\"]]"
      },
      {
        "sha": "8c2d2f0272c32545c71bce57bd2bcab7d6071231",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -33,8 +33,7 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):\n@@ -109,9 +108,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n \n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-whitelist=127.0.0.1\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]"
      },
      {
        "sha": "51d4769efc3fb023135199ffbeee77bbb364c30a",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -33,8 +33,7 @@ def on_version(self, conn, message):\n         pass\n \n class TimeoutsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "5dfac6dd10e016c95460d125c8df33b3872da79a",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -28,8 +28,7 @@ def on_inv(self, conn, message):\n         pass\n \n class VersionBitsWarningTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "40d7bb14edcecd1162131bb7b4a2757ca02be50a",
        "filename": "test/functional/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/preciousblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -35,8 +35,7 @@ def node_sync_via_rpc(nodes):\n             unidirectional_node_sync_via_rpc(node_src, node_dest)\n \n class PreciousTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "7ad368acd4b8df665283e91004639c9db4e39124",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,9 +9,7 @@\n from test_framework.mininode import COIN, MAX_BLOCK_BASE_SIZE\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]"
      },
      {
        "sha": "26cb645da431eed4f0103669f1f732e8f3db2489",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -41,13 +41,7 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n-\n class ProxyTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports"
      },
      {
        "sha": "a4afbd46d73f7144d0ad20dd4fa4e1954d0d90e2",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -26,9 +26,7 @@ def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6\n "
      },
      {
        "sha": "51dda09ac4156877253ca379a9c92a88558c9286",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,9 +17,7 @@\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "48eb1c51b51c638bf28f355040f40cb00904c32a",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -23,11 +23,7 @@ def get_sub_array_from_array(object_array, to_match):\n     return []\n \n class ReceivedByTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "1f684a1afe3bf01dc15308e9e3ee9eaf5160988f",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -15,8 +15,7 @@\n \n class ReindexTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "220e889686630aa68f17dce6f5eec63d312aa621",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -61,10 +61,8 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\","
      },
      {
        "sha": "d6ba5913912d371c6765c47696927e0c7004d6ef",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,11 +8,9 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.extra_args = [['--walletbroadcast=false']]\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [['--walletbroadcast=false']]\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled."
      },
      {
        "sha": "437111a4d7fd576aa7b9f6d9104371952334a88c",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -43,8 +43,7 @@ def http_post_call(host, port, path, requestdata = '', response_object = 0):\n class RESTTest (BitcoinTestFramework):\n     FORMAT_SEPARATOR = \".\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "0cf64beebd408a90b058d531e09a01954dcb4ca1",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,11 +11,8 @@\n from test_framework.util import *\n from test_framework.netutil import *\n \n-\n class RPCBindTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "da61cc66e6854c8f989c3bd14bf349e43874d0fd",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -10,15 +10,8 @@\n     assert_raises_jsonrpc,\n )\n \n-\n class NamedArgumentTest(BitcoinTestFramework):\n-    \"\"\"\n-    Test named arguments on RPC calls.\n-    \"\"\"\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):"
      },
      {
        "sha": "c08fbd3e7751b6c688157cdfc82fa9d8dcda1fc9",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -75,9 +75,7 @@ def find_unspent(node, min_value):\n             return utxo\n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],"
      },
      {
        "sha": "fe577dc20a2dbd662f22c95acc188334dbfda5fc",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -174,8 +174,7 @@ def send_getblocks(self, locator):\n         self.send_message(getblocks_message)\n \n class SendHeadersTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "5fdfeceb76a0941ff2feb4da232190e775a92f90",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -7,9 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class SignMessagesTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "b47ef939558a272da9d147e9c99c8541501ff5fb",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,8 +9,7 @@\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "76632fc57848ac31ff914ec98aa06eb7e7f0476f",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -141,11 +141,8 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n \n \n class EstimateFeeTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         \"\"\""
      },
      {
        "sha": "d860bc5594c649cd23abd180e3c017c12b855595",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 50,
        "deletions": 39,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -48,58 +48,30 @@ class TestStatus(Enum):\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n-    Individual bitcoin test scripts should subclass this class and override the following methods:\n+    Individual bitcoin test scripts should subclass this class and override the run_test() method.\n \n-    - __init__()\n+    Individual tests can also override the following methods to customize the test setup:\n+\n+    - set_test_params()\n     - add_options()\n     - setup_chain()\n     - setup_network()\n-    - run_test()\n+    - setup_nodes()\n \n-    The main() method should not be overridden.\n+    The __init__() and main() methods should not be overridden.\n \n     This class also contains various public and private helper methods.\"\"\"\n \n-    # Methods to override in subclass test scripts.\n     def __init__(self):\n+        \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.mocktime = 0\n-\n-    def add_options(self, parser):\n-        pass\n-\n-    def setup_chain(self):\n-        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n-        if self.setup_clean_chain:\n-            self._initialize_chain_clean()\n-        else:\n-            self._initialize_chain()\n-\n-    def setup_network(self):\n-        self.setup_nodes()\n-\n-        # Connect the nodes as a \"chain\".  This allows us\n-        # to split the network between nodes 1 and 2 to get\n-        # two halves that can work on competing chains.\n-        for i in range(self.num_nodes - 1):\n-            connect_nodes_bi(self.nodes, i, i + 1)\n-        self.sync_all()\n-\n-    def setup_nodes(self):\n-        extra_args = None\n-        if hasattr(self, \"extra_args\"):\n-            extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, extra_args)\n-        self.start_nodes()\n-\n-    def run_test(self):\n-        raise NotImplementedError\n-\n-    # Main function. This should not be overridden by the subclass test scripts.\n+        self.set_test_params()\n \n     def main(self):\n+        \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n         parser = optparse.OptionParser(usage=\"%prog [options]\")\n         parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n@@ -203,6 +175,46 @@ def main(self):\n             logging.shutdown()\n             sys.exit(TEST_EXIT_FAILED)\n \n+    # Methods to override in subclass test scripts.\n+    def set_test_params(self):\n+        \"\"\"Override this method to change default values for number of nodes, topology, etc\"\"\"\n+        pass\n+\n+    def add_options(self, parser):\n+        \"\"\"Override this method to add command-line options to the test\"\"\"\n+        pass\n+\n+    def setup_chain(self):\n+        \"\"\"Override this method to customize blockchain setup\"\"\"\n+        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n+        if self.setup_clean_chain:\n+            self._initialize_chain_clean()\n+        else:\n+            self._initialize_chain()\n+\n+    def setup_network(self):\n+        \"\"\"Override this method to customize test network topology\"\"\"\n+        self.setup_nodes()\n+\n+        # Connect the nodes as a \"chain\".  This allows us\n+        # to split the network between nodes 1 and 2 to get\n+        # two halves that can work on competing chains.\n+        for i in range(self.num_nodes - 1):\n+            connect_nodes_bi(self.nodes, i, i + 1)\n+        self.sync_all()\n+\n+    def setup_nodes(self):\n+        \"\"\"Override this method to customize test node setup\"\"\"\n+        extra_args = None\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n+        self.add_nodes(self.num_nodes, extra_args)\n+        self.start_nodes()\n+\n+    def run_test(self):\n+        \"\"\"Override this method to define test logic\"\"\"\n+        raise NotImplementedError\n+\n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n     def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n@@ -442,8 +454,7 @@ class ComparisonTestFramework(BitcoinTestFramework):\n     - 2 binaries: 1 test binary, 1 ref binary\n     - n>2 binaries: 1 test binary, n-1 ref binaries\"\"\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "fc133050b0d7700ac69e3f010fc5076670097e0d",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,12 +8,6 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "ff24fac254ead6b9f4a361bd2e376a41650668c4",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,11 +9,6 @@\n \n class TxnMallTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "78236b239374a794703e9635666828586b0a7045",
        "filename": "test/functional/uptime.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uptime.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n \n \n class UptimeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "40726d2a760909af1c8fb221e18aa5b9cff49073",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,9 +17,7 @@\n from test_framework.util import assert_equal\n \n class WalletAccountsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[]]"
      },
      {
        "sha": "39b7164d6e6e3e80335de02a0f81b6439d48ea9a",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -56,10 +56,7 @@ def read_dump(file_name, addrs, hd_master_addr_old):\n \n \n class WalletDumpTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-keypool=90\"]]\n "
      },
      {
        "sha": "f63bb2ea5e1c984be6a48d4a5b87642c2f8909e3",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "68b5e5b8d48a9b23a8b0efba8cbc7b8794454676",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,11 +11,8 @@\n )\n import shutil\n \n-\n class WalletHDTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]"
      },
      {
        "sha": "79727f9be62da2a6482b4c81c7de468e71ee452f",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -7,17 +7,8 @@\n from test_framework.util import *\n \n class WalletTest(BitcoinTestFramework):\n-\n-    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n-        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n-        fee = balance_with_fee - curr_balance\n-        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n-        return curr_balance\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n@@ -30,8 +21,13 @@ def setup_network(self):\n         connect_nodes_bi(self.nodes,0,2)\n         self.sync_all([self.nodes[0:3]])\n \n-    def run_test(self):\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        fee = balance_with_fee - curr_balance\n+        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n+        return curr_balance\n \n+    def run_test(self):\n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n         assert_equal(len(self.nodes[1].listunspent()), 0)"
      },
      {
        "sha": "36714164a8327e9a83cd62b99da854c7d7e3393c",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -37,11 +37,8 @@\n from test_framework.util import *\n \n class WalletBackupTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n "
      },
      {
        "sha": "c001517a6d4f60449663a8642b5cd08a0b975a27",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -20,9 +20,7 @@\n                                  )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "3f2668ee8724db13627f0e8ad33a9186f3e5ab34",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n                                  )\n \n class ZMQTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_nodes(self):"
      }
    ]
  },
  {
    "sha": "82bf6fc6d48a232cc0ceb54b136d86914f49013c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmJmNmZjNmQ0OGEyMzJjYzBjZWI1NGIxMzZkODY5MTRmNDkwMTNj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-24T15:11:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:44:16Z"
      },
      "message": "[tests] Functional tests must explicitly set num_nodes\n\nGithub-Pull: #11121\nRebased-From: 7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
      "tree": {
        "sha": "d9709ea3cb26287e192aed77e65ca17cfb9c9a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9709ea3cb26287e192aed77e65ca17cfb9c9a39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "801d2ae9247be5870344c8b4ed5c372ab8930408",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/801d2ae9247be5870344c8b4ed5c372ab8930408",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/801d2ae9247be5870344c8b4ed5c372ab8930408"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 31,
      "deletions": 7
    },
    "files": [
      {
        "sha": "936aceb89aa73da63472c80b1f64a584b6be62a8",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -77,7 +77,9 @@ class ExampleTest(BitcoinTestFramework):\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n-        \"\"\"Override any test parameters for your individual test.\"\"\"\n+        \"\"\"Override test parameters for your individual test.\n+\n+        This method must be overridden and num_nodes must be exlicitly set.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes"
      },
      {
        "sha": "3326b58c457144e2077f1a126ece8aaa2b59b4fa",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -16,6 +16,7 @@ def get_unspent(listunspent, amount):\n \n class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n \n     def setup_network(self, split=False):"
      },
      {
        "sha": "89768bd2fb530ad31addf78c4ca8954c35dfdc45",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -23,6 +23,9 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "21b67bfc64f9c3c33b79f47a912f94e6fa7da03d",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -14,6 +14,9 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def run_test (self):\n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "6f428388ecbbd91bf9dfc27ef0822b8b98cd41f3",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -9,6 +9,7 @@\n \n class ListSinceBlockTest (BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n \n     def run_test(self):"
      },
      {
        "sha": "e4522cc3b5c7cb9878edf04ed8dab99ba0387d80",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -17,6 +17,7 @@ def txFromHex(hexstring):\n \n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "a58334b2a540e7cf693d0c521040259de33efd32",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -9,6 +9,7 @@\n \n class MerkleBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]"
      },
      {
        "sha": "9bb72c819945b9415ee00f0ca58e1e4f360604f5",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -34,6 +34,7 @@ def get_virtual_size(witness_block):\n \n class TestNode(NodeConnCB):\n     def set_test_params(self):\n+        self.num_nodes = 3\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):"
      },
      {
        "sha": "81b99d1bf4484a787d91f29db9880242ae90909e",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -42,6 +42,9 @@\n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n class ProxyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports"
      },
      {
        "sha": "db6fc86b82fe404850115ec9dc873827f7b91105",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -24,6 +24,7 @@ def get_sub_array_from_array(object_array, to_match):\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "103651f1752b87c9d7d15ea960452b66df4d29bc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -48,11 +48,10 @@ class TestStatus(Enum):\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n-    Individual bitcoin test scripts should subclass this class and override the run_test() method.\n+    Individual bitcoin test scripts should subclass this class and override the set_test_params() and run_test() methods.\n \n     Individual tests can also override the following methods to customize the test setup:\n \n-    - set_test_params()\n     - add_options()\n     - setup_chain()\n     - setup_network()\n@@ -64,12 +63,13 @@ class BitcoinTestFramework(object):\n \n     def __init__(self):\n         \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n-        self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.mocktime = 0\n         self.set_test_params()\n \n+        assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n+\n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n@@ -177,8 +177,8 @@ def main(self):\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):\n-        \"\"\"Override this method to change default values for number of nodes, topology, etc\"\"\"\n-        pass\n+        \"\"\"Tests must this method to change default values for number of nodes, topology, etc\"\"\"\n+        raise NotImplementedError\n \n     def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n@@ -212,7 +212,7 @@ def setup_nodes(self):\n         self.start_nodes()\n \n     def run_test(self):\n-        \"\"\"Override this method to define test logic\"\"\"\n+        \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n \n     # Public helper methods. These can be accessed by the subclass test scripts."
      },
      {
        "sha": "740bb2d4c5c061828a124eccc33677e64aa21d3c",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -8,6 +8,9 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "69629ef95196ebd765422d597e34a69dbcfd154b",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "de3aa8a875544e365ead9ab120df624d1f789d37",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -8,6 +8,7 @@\n \n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n "
      },
      {
        "sha": "15ea26afa1605f453bd1dc8fb46d033377b47c68",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -38,6 +38,7 @@\n \n class WalletBackupTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]"
      }
    ]
  },
  {
    "sha": "cef03198dcdca63d88bf8f50edcc79fa6b268261",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWYwMzE5OGRjZGNhNjNkODhiZjhmNTBlZGNjNzlmYTZiMjY4MjYx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-01T18:24:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:45:11Z"
      },
      "message": "[tests] fixups from set_test_params()\n\nGithub-Pull: #11215\nRebased-From: 3918d93f3cd2305dc12cb964aebba0fc1f8720b4",
      "tree": {
        "sha": "35491cdc00bfbfeae908c809f2eb20da542cd2f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35491cdc00bfbfeae908c809f2eb20da542cd2f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cef03198dcdca63d88bf8f50edcc79fa6b268261",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82bf6fc6d48a232cc0ceb54b136d86914f49013c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7acfede3f7a5f3d8087c050c38ec57ba7211cb4b",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "patch": "@@ -8,8 +8,7 @@\n \n class TestBitcoinCli(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "228e1505983c6411ce53d43c4a9fb7c472284ee9",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "patch": "@@ -85,7 +85,7 @@ def set_test_params(self):\n         # Use self.extra_args to change command-line arguments for the nodes\n         self.extra_args = [[], [\"-logips\"], []]\n \n-        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+        # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written"
      }
    ]
  },
  {
    "sha": "44241765e3c8caa9248949cbe0fbc1c3072319c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDI0MTc2NWUzYzhjYWE5MjQ4OTQ5Y2JlMGZiYzFjMzA3MjMxOWMw",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-09-05T16:55:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:49:02Z"
      },
      "message": "Improve signmessages functional test\n\nThis patch improves branch coverage of the test, making sure a\nmessage can not be verified with the wrong address or signature.\n\nGithub-Pull: #11241\nRebased-From: b3d6fc654770e3b4d2f82e8d77e531df9e522982",
      "tree": {
        "sha": "c3223b8d2b866895a20734aa84f3a982a573dad2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3223b8d2b866895a20734aa84f3a982a573dad2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44241765e3c8caa9248949cbe0fbc1c3072319c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cef03198dcdca63d88bf8f50edcc79fa6b268261"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "52ba6a5ad761844cf9b0480a767a6be2e8fcf4a2",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44241765e3c8caa9248949cbe0fbc1c3072319c0/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44241765e3c8caa9248949cbe0fbc1c3072319c0/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test RPC commands for signing and verifying messages.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n class SignMessagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,20 +15,24 @@ def set_test_params(self):\n     def run_test(self):\n         message = 'This is just a test message'\n \n-        # Test the signing with a privkey\n-        privKey = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n+        self.log.info('test signing with priv_key')\n+        priv_key = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n         address = 'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB'\n-        signature = self.nodes[0].signmessagewithprivkey(privKey, message)\n-\n-        # Verify the message\n+        expected_signature = 'INbVnW4e6PeRmsv2Qgu8NuopvrVjkcxob+sX8OcZG0SALhWybUjzMLPdAsXI46YZGb0KQTRii+wWIQzRpG/U+S0='\n+        signature = self.nodes[0].signmessagewithprivkey(priv_key, message)\n+        assert_equal(expected_signature, signature)\n         assert(self.nodes[0].verifymessage(address, signature, message))\n \n-        # Test the signing with an address with wallet\n+        self.log.info('test signing with an address with wallet')\n         address = self.nodes[0].getnewaddress()\n         signature = self.nodes[0].signmessage(address, message)\n-\n-        # Verify the message\n         assert(self.nodes[0].verifymessage(address, signature, message))\n \n+        self.log.info('test verifying with another address should not work')\n+        other_address = self.nodes[0].getnewaddress()\n+        other_signature = self.nodes[0].signmessage(other_address, message)\n+        assert(not self.nodes[0].verifymessage(other_address, signature, message))\n+        assert(not self.nodes[0].verifymessage(address, other_signature, message))\n+\n if __name__ == '__main__':\n     SignMessagesTest().main()"
      }
    ]
  },
  {
    "sha": "f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGI2Nzk1NGYwNmU3MWViMmY0ZGYwMTI1YjcwNzVkOGIzNmUwYzZm",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-05T03:02:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:50:43Z"
      },
      "message": "Remove redundant testutil files\n\nGithub-Pull: #11234\nRebased-From: d1138e36208dac87a27f415f39c70377636e93f1",
      "tree": {
        "sha": "01985f0c46ef72d56f4014c4da117d658c86ef4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01985f0c46ef72d56f4014c4da117d658c86ef4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44241765e3c8caa9248949cbe0fbc1c3072319c0"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 3,
      "deletions": 40
    },
    "files": [
      {
        "sha": "ea2ed17472ee59c47f12e8a0f0c602ce1e048de4",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -25,12 +25,10 @@ TEST_QT_H = \\\n   qt/test/wallettests.h\n \n TEST_BITCOIN_CPP = \\\n-  test/test_bitcoin.cpp \\\n-  test/testutil.cpp\n+  test/test_bitcoin.cpp\n \n TEST_BITCOIN_H = \\\n-  test/test_bitcoin.h \\\n-  test/testutil.h\n+  test/test_bitcoin.h\n \n qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)"
      },
      {
        "sha": "01ab0134fee5ece92a9d81e17b9c913798f1ebe8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -74,8 +74,6 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/test_bitcoin_main.cpp \\\n-  test/testutil.cpp \\\n-  test/testutil.h \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\"
      },
      {
        "sha": "c1f71a6b4eaba6b23940aff27863a191fa5edc99",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -11,7 +11,6 @@\n #include \"rpc/register.h\"\n #include \"rpc/server.h\"\n #include \"rpcconsole.h\"\n-#include \"test/testutil.h\"\n #include \"test/test_bitcoin.h\"\n #include \"univalue.h\"\n #include \"util.h\""
      },
      {
        "sha": "194f62ca118357c756db76a7c7b555ab62782cf2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -22,8 +22,6 @@\n #include \"rpc/register.h\"\n #include \"script/sigcache.h\"\n \n-#include \"test/testutil.h\"\n-\n #include <memory>\n \n uint256 insecure_rand_seed = GetRandHash();\n@@ -61,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n-        pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n+        pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n         gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n "
      },
      {
        "sha": "591d0bf30271240f9184ed472d04ab6c6096c851",
        "filename": "src/test/testutil.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "patch": "@@ -1,15 +0,0 @@\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"testutil.h\"\n-\n-#ifdef WIN32\n-#include <shlobj.h>\n-#endif\n-\n-#include \"fs.h\"\n-\n-fs::path GetTempPath() {\n-    return fs::temp_directory_path();\n-}"
      },
      {
        "sha": "cbe784d6400b9dd4cc4339ae6803f9c1d2bb13fd",
        "filename": "src/test/testutil.h",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "patch": "@@ -1,15 +0,0 @@\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-/**\n- * Utility functions shared by unit tests\n- */\n-#ifndef BITCOIN_TEST_TESTUTIL_H\n-#define BITCOIN_TEST_TESTUTIL_H\n-\n-#include \"fs.h\"\n-\n-fs::path GetTempPath();\n-\n-#endif // BITCOIN_TEST_TESTUTIL_H"
      }
    ]
  },
  {
    "sha": "f3f78917769b9bc65c133a160dba7df18a33b27d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2Y3ODkxNzc2OWI5YmM2NWMxMzNhMTYwZGJhN2RmMThhMzNiMjdk",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-08-30T23:15:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:53:16Z"
      },
      "message": "Stop test_bitcoin-qt touching ~/.bitcoin\n\nGithub-Pull: #11210\nRebased-From: dea086f498097d19a2c9acbfc753c9c2d68dbb03",
      "tree": {
        "sha": "ebbfb982fa6615cc5cd7aa28974a22166ff5f91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebbfb982fa6615cc5cd7aa28974a22166ff5f91d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3f78917769b9bc65c133a160dba7df18a33b27d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f78917769b9bc65c133a160dba7df18a33b27d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f78917769b9bc65c133a160dba7df18a33b27d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f78917769b9bc65c133a160dba7df18a33b27d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "98a6605190f4805d59ed8a40b07b62b8bc2b5ef3",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=f3f78917769b9bc65c133a160dba7df18a33b27d",
        "patch": "@@ -36,11 +36,6 @@ void RPCNestedTests::rpcNestedTests()\n     // do some test setup\n     // could be moved to a more generic place when we add more tests on QT level\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n-    ClearDatadirCache();\n-    std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n-    QDir dir(QString::fromStdString(path));\n-    dir.mkpath(\".\");\n-    gArgs.ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n \n     TestingSetup test;\n@@ -135,6 +130,4 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n #endif\n-\n-    fs::remove_all(fs::path(path));\n }"
      },
      {
        "sha": "b5790e4e2be8023c49cd1e5bb13290a5e290f85b",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=f3f78917769b9bc65c133a160dba7df18a33b27d",
        "patch": "@@ -53,6 +53,10 @@ int main(int argc, char *argv[])\n     SetupNetworking();\n     SelectParams(CBaseChainParams::MAIN);\n     noui_connect();\n+    ClearDatadirCache();\n+    fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n+    fs::create_directories(pathTemp);\n+    gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n \n     bool fInvalid = false;\n \n@@ -97,5 +101,7 @@ int main(int argc, char *argv[])\n     }\n #endif\n \n+    fs::remove_all(pathTemp);\n+\n     return fInvalid;\n }"
      }
    ]
  },
  {
    "sha": "eeb24a3a0157c41a0aae1d5561cf490abe378585",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWIyNGEzYTAxNTdjNDFhMGFhZTFkNTU2MWNmNDkwYWJlMzc4NTg1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-16T15:52:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:53:35Z"
      },
      "message": "[qa] TestNode: Add wait_until_stopped helper method\n\nGithub-Pull: #11067\nRebased-From: faa8d9581affde35a8242c63fca8a52004d4f943",
      "tree": {
        "sha": "a23aa52ed3ae8d1c1d68d0adf196706ba30db298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a23aa52ed3ae8d1c1d68d0adf196706ba30db298"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeb24a3a0157c41a0aae1d5561cf490abe378585",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f78917769b9bc65c133a160dba7df18a33b27d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f78917769b9bc65c133a160dba7df18a33b27d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f78917769b9bc65c133a160dba7df18a33b27d"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "50be9262e4f9cf9b95a2c397c11c55dc5905d817",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -21,7 +21,7 @@\n import http.client\n import subprocess\n \n-from test_framework.test_framework import (BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n@@ -141,7 +141,7 @@ def _test_stopatheight(self):\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0].wait_until_stopped()\n         self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      },
      {
        "sha": "42d95dd5204e646369ed04f3cf5967830b4cca44",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n "
      },
      {
        "sha": "a53eb517998dcdb22db84d6a561f475d15572217",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -43,8 +43,6 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n-BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n@@ -263,8 +261,7 @@ def start_nodes(self, extra_args=None):\n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n         self.nodes[i].stop_node()\n-        while not self.nodes[i].is_node_stopped():\n-            time.sleep(0.1)\n+        self.nodes[i].wait_until_stopped()\n \n     def stop_nodes(self):\n         \"\"\"Stop multiple bitcoind test nodes\"\"\"\n@@ -274,8 +271,7 @@ def stop_nodes(self):\n \n         for node in self.nodes:\n             # Wait for nodes to stop\n-            while not node.is_node_stopped():\n-                time.sleep(0.1)\n+            node.wait_until_stopped()\n \n     def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:"
      },
      {
        "sha": "f58a372a144a0f5748d8dd1cb4ca1464f59537fd",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -17,9 +17,12 @@\n     assert_equal,\n     get_rpc_proxy,\n     rpc_url,\n+    wait_until,\n )\n from .authproxy import JSONRPCException\n \n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n class TestNode():\n     \"\"\"A class for representing a bitcoind node under test.\n \n@@ -125,25 +128,28 @@ def is_node_stopped(self):\n         if not self.running:\n             return True\n         return_code = self.process.poll()\n-        if return_code is not None:\n-            # process has stopped. Assert that it didn't return an error code.\n-            assert_equal(return_code, 0)\n-            self.running = False\n-            self.process = None\n-            self.log.debug(\"Node stopped\")\n-            return True\n-        return False\n+        if return_code is None:\n+            return False\n+\n+        # process has stopped. Assert that it didn't return an error code.\n+        assert_equal(return_code, 0)\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.log.debug(\"Node stopped\")\n+        return True\n+\n+    def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n+        wait_until(self.is_node_stopped, timeout=timeout)\n \n     def node_encrypt_wallet(self, passphrase):\n         \"\"\"\"Encrypts the wallet.\n \n         This causes bitcoind to shutdown, so this method takes\n         care of cleaning up resources.\"\"\"\n         self.encryptwallet(passphrase)\n-        while not self.is_node_stopped():\n-            time.sleep(0.1)\n-        self.rpc = None\n-        self.rpc_connected = False\n+        self.wait_until_stopped()\n \n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\""
      },
      {
        "sha": "ce1e7744e903fe60062413ac106ee3248bd77175",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -6,7 +6,7 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,"
      }
    ]
  },
  {
    "sha": "812c87004311732da2fc8840a483be80c7a443ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTJjODcwMDQzMTE3MzJkYTJmYzg4NDBhNDgzYmU4MGM3YTQ0M2Nh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T15:52:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:09:43Z"
      },
      "message": "[test] Improve assert_raises_jsonrpc docstring\n\nGithub-Pull: #11125\nRebased-From: e1274947d4574bb83a020d0e178f0e5db7fc6282",
      "tree": {
        "sha": "eefe52ad7e60d9a9031ae317378947a1480cbe57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eefe52ad7e60d9a9031ae317378947a1480cbe57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/812c87004311732da2fc8840a483be80c7a443ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812c87004311732da2fc8840a483be80c7a443ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/812c87004311732da2fc8840a483be80c7a443ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812c87004311732da2fc8840a483be80c7a443ca/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeb24a3a0157c41a0aae1d5561cf490abe378585"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a5bc495dfaf86a255e3c0469b1b1a4d834992732",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812c87004311732da2fc8840a483be80c7a443ca/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812c87004311732da2fc8840a483be80c7a443ca/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=812c87004311732da2fc8840a483be80c7a443ca",
        "patch": "@@ -62,13 +62,13 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n     and verifies that the error code and message are as expected. Throws AssertionError if\n-    no JSONRPCException was returned or if the error code/message are not as expected.\n+    no JSONRPCException was raised or if the error code/message are not as expected.\n \n     Args:\n         code (int), optional: the error code returned by the RPC call (defined\n             in src/rpc/protocol.h). Set to None if checking the error code is not required.\n         message (string), optional: [a substring of] the error string returned by the\n-            RPC call. Set to None if checking the error string is not required\n+            RPC call. Set to None if checking the error string is not required.\n         fun (function): the function to call. This should be the name of an RPC.\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function."
      }
    ]
  },
  {
    "sha": "e0bfd28de28efb1ffa84e89d76c144824dae987f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGJmZDI4ZGUyOGVmYjFmZmE4NGU4OWQ3NmMxNDQ4MjRkYWU5ODdm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T16:07:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:09:52Z"
      },
      "message": "[test] Add support for custom arguments to TestNodeCLI\n\nGithub-Pull: #11125\nRebased-From: 5c18a84b9a49e3f9dacf0502dbf7d5d755f38da6",
      "tree": {
        "sha": "0dfc909d1f7ac566487e5f33f1817e4528056137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dfc909d1f7ac566487e5f33f1817e4528056137"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0bfd28de28efb1ffa84e89d76c144824dae987f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "812c87004311732da2fc8840a483be80c7a443ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812c87004311732da2fc8840a483be80c7a443ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/812c87004311732da2fc8840a483be80c7a443ca"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "363025740a53648bac2a0fd73048302d6cb6b487",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0bfd28de28efb1ffa84e89d76c144824dae987f/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0bfd28de28efb1ffa84e89d76c144824dae987f/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=e0bfd28de28efb1ffa84e89d76c144824dae987f",
        "patch": "@@ -155,8 +155,16 @@ class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n \n     def __init__(self, binary, datadir):\n+        self.args = []\n         self.binary = binary\n         self.datadir = datadir\n+        self.input = None\n+\n+    def __call__(self, *args, input=None):\n+        # TestNodeCLI is callable with bitcoin-cli command-line args\n+        self.args = [str(arg) for arg in args]\n+        self.input = input\n+        return self\n \n     def __getattr__(self, command):\n         def dispatcher(*args, **kwargs):\n@@ -169,9 +177,9 @@ def send_cli(self, command, *args, **kwargs):\n         pos_args = [str(arg) for arg in args]\n         named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n         assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n-        p_args = [self.binary, \"-datadir=\" + self.datadir]\n+        p_args = [self.binary, \"-datadir=\" + self.datadir] + self.args\n         if named_args:\n             p_args += [\"-named\"]\n         p_args += [command] + pos_args + named_args\n-        cli_output = subprocess.check_output(p_args, universal_newlines=True)\n+        cli_output = subprocess.check_output(p_args, input=self.input, universal_newlines=True)\n         return json.loads(cli_output, parse_float=decimal.Decimal)"
      }
    ]
  },
  {
    "sha": "e38211f5e8900ee9027c671d7c655958e4dbe8e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzgyMTFmNWU4OTAwZWU5MDI3YzY3MWQ3YzY1NTk1OGU0ZGJlOGU3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T15:35:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:10:05Z"
      },
      "message": "[test] Add assert_raises_process_error to assert process errors\n\nGithub-Pull: #11125\nRebased-From: 232e3e8471edb346c09f906c996b2f350cabc72a",
      "tree": {
        "sha": "8c8269263a6b54105bd9997f5539fa7a81539a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c8269263a6b54105bd9997f5539fa7a81539a95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0bfd28de28efb1ffa84e89d76c144824dae987f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0bfd28de28efb1ffa84e89d76c144824dae987f"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b2d8199d12b87a49d013f8240984aed1abd368c6",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e38211f5e8900ee9027c671d7c655958e4dbe8e7/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e38211f5e8900ee9027c671d7c655958e4dbe8e7/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=e38211f5e8900ee9027c671d7c655958e4dbe8e7",
        "patch": "@@ -12,6 +12,7 @@\n import os\n import random\n import re\n+from subprocess import CalledProcessError\n import time\n \n from . import coverage\n@@ -57,6 +58,30 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n+def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n+    \"\"\"Execute a process and asserts the process return code and output.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a CalledProcessError\n+    and verifies that the return code and output are as expected. Throws AssertionError if\n+    no CalledProcessError was raised or if the return code and output are not as expected.\n+\n+    Args:\n+        returncode (int): the process return code.\n+        output (string): [a substring of] the process output.\n+        fun (function): the function to call. This should execute a process.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n+    try:\n+        fun(*args, **kwds)\n+    except CalledProcessError as e:\n+        if returncode != e.returncode:\n+            raise AssertionError(\"Unexpected returncode %i\" % e.returncode)\n+        if output not in e.output:\n+            raise AssertionError(\"Expected substring not found:\" + e.output)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n "
      }
    ]
  },
  {
    "sha": "2b97b36e5d37c6935dce112f90213f4f49cd88ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjk3YjM2ZTVkMzdjNjkzNWRjZTExMmY5MDIxM2Y0ZjQ5Y2Q4OGFk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T15:36:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:10:21Z"
      },
      "message": "[test] Replace check_output with low level version\n\nGithub-Pull: #11125\nRebased-From: ce379b47b92d6c04250c21719bb1abfb41c586ad",
      "tree": {
        "sha": "639ef57856c3572124ed2824ff258762c56e8af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/639ef57856c3572124ed2824ff258762c56e8af5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e38211f5e8900ee9027c671d7c655958e4dbe8e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e38211f5e8900ee9027c671d7c655958e4dbe8e7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "12dab57a022d48c2e31dbb45380b6d8828caeaec",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b97b36e5d37c6935dce112f90213f4f49cd88ad/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b97b36e5d37c6935dce112f90213f4f49cd88ad/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=2b97b36e5d37c6935dce112f90213f4f49cd88ad",
        "patch": "@@ -181,5 +181,10 @@ def send_cli(self, command, *args, **kwargs):\n         if named_args:\n             p_args += [\"-named\"]\n         p_args += [command] + pos_args + named_args\n-        cli_output = subprocess.check_output(p_args, input=self.input, universal_newlines=True)\n-        return json.loads(cli_output, parse_float=decimal.Decimal)\n+        process = subprocess.Popen(p_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+        cli_stdout, cli_stderr = process.communicate(input=self.input)\n+        returncode = process.poll()\n+        if returncode:\n+            # Ignore cli_stdout, raise with cli_stderr\n+            raise subprocess.CalledProcessError(returncode, self.binary, output=cli_stderr)\n+        return json.loads(cli_stdout, parse_float=decimal.Decimal)"
      }
    ]
  },
  {
    "sha": "d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGRkOGU3MzU2YjQxMDljZmRlNDhkMjY2N2VhNGRhMjljODQ5Y2Y4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-04T15:45:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:08Z"
      },
      "message": "[tests] fixup dbcrash interaction with add_nodes()\n\nGithub-Pull: #11230\nRebased-From: 8fdb6f9126fe1e13b60de11fd34c204247679ef4",
      "tree": {
        "sha": "a1257847751e4b9ea06cf681d1b76e8e6533dfc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1257847751e4b9ea06cf681d1b76e8e6533dfc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b97b36e5d37c6935dce112f90213f4f49cd88ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b97b36e5d37c6935dce112f90213f4f49cd88ad"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24b9765b4e3773ab8830f7950da1adbb15fad601",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8dd8e7356b4109cfde48d2667ea4da29c849cf8/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8dd8e7356b4109cfde48d2667ea4da29c849cf8/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
        "patch": "@@ -64,7 +64,7 @@ def set_test_params(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.add_nodes(self.num_nodes, timewait=90)\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, timewait=90)\n         self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n "
      }
    ]
  },
  {
    "sha": "b6468d3c420f73627956fc94c9743d26d75af8b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQ2OGQzYzQyMGY3MzYyNzk1NmZjOTRjOTc0M2QyNmQ3NWFmOGIw",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-09-12T21:41:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:08Z"
      },
      "message": "Add listwallets RPC test to multiwallet.py\n\nGithub-Pull: #11310\nRebased-From: fb1f3258225a7052f4fc9e3f2accc3811c53e221",
      "tree": {
        "sha": "8e8410429891a6a56cb320a0f7d2ec57eb45876c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e8410429891a6a56cb320a0f7d2ec57eb45876c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6468d3c420f73627956fc94c9743d26d75af8b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6468d3c420f73627956fc94c9743d26d75af8b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6468d3c420f73627956fc94c9743d26d75af8b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6468d3c420f73627956fc94c9743d26d75af8b0/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8dd8e7356b4109cfde48d2667ea4da29c849cf8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b4e15a332219c36c81df953885b96db436461504",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6468d3c420f73627956fc94c9743d26d75af8b0/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6468d3c420f73627956fc94c9743d26d75af8b0/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=b6468d3c420f73627956fc94c9743d26d75af8b0",
        "patch": "@@ -18,6 +18,8 @@ def set_test_params(self):\n         self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n \n     def run_test(self):\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\"})\n+\n         self.stop_node(0)\n \n         # should not initialize if there are duplicate wallets"
      }
    ]
  },
  {
    "sha": "2e1ac70df97be758a2a9869104a81cb454008174",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTFhYzcwZGY5N2JlNzU4YTJhOTg2OTEwNGE4MWNiNDU0MDA4MTc0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-12T15:20:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:08Z"
      },
      "message": "[qa] zapwallettxes: Wait up to 3s for mempool reload\n\nGithub-Pull: #11308\nRebased-From: fadd0c16b6bd62e9d663d906755320ae089e02d3",
      "tree": {
        "sha": "38b8dc9442eb37a6ad1660f4e8f38b120c54b77c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38b8dc9442eb37a6ad1660f4e8f38b120c54b77c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e1ac70df97be758a2a9869104a81cb454008174",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac70df97be758a2a9869104a81cb454008174",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1ac70df97be758a2a9869104a81cb454008174",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac70df97be758a2a9869104a81cb454008174/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6468d3c420f73627956fc94c9743d26d75af8b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6468d3c420f73627956fc94c9743d26d75af8b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6468d3c420f73627956fc94c9743d26d75af8b0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "83b11035c89ec5a7a02828c2cfb9f3fe7df18f27",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e1ac70df97be758a2a9869104a81cb454008174/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e1ac70df97be758a2a9869104a81cb454008174/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=2e1ac70df97be758a2a9869104a81cb454008174",
        "patch": "@@ -15,9 +15,11 @@\n   been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal,\n-                                 assert_raises_jsonrpc,\n-                                 )\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    wait_until,\n+)\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -56,6 +58,8 @@ def run_test(self):\n         self.stop_node(0)\n         self.start_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n+        wait_until(lambda: self.nodes[0].getmempoolinfo()['size'] == 1, timeout=3)\n+\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n "
      }
    ]
  },
  {
    "sha": "f1ced0d7761d1316c6b522b2b426e79833e4cbae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWNlZDBkNzc2MWQxMzE2YzZiNTIyYjJiNDI2ZTc5ODMzZTRjYmFl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-17T15:35:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[tests] Make p2p-leaktests.py more robust\n\nGithub-Pull: #11078\nRebased-From: 0063d2c3dce9d9c1678197d2c65ee878793d1ef9",
      "tree": {
        "sha": "d31db5026a73908737b3597b2e60001c4f59fed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d31db5026a73908737b3597b2e60001c4f59fed4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e1ac70df97be758a2a9869104a81cb454008174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac70df97be758a2a9869104a81cb454008174",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1ac70df97be758a2a9869104a81cb454008174"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1dc8f72cd63246a4e96c590eece563c26fac04d5",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "patch": "@@ -139,6 +139,9 @@ def run_test(self):\n \n         [conn.disconnect_node() for conn in connections]\n \n+        # Wait until all connections are closed\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+\n         # Make sure no unexpected messages came in\n         assert(no_version_bannode.unexpected_msg == False)\n         assert(no_version_idlenode.unexpected_msg == False)\n@@ -157,8 +160,10 @@ def run_test(self):\n         allowed_service_bit5_node.add_connection(connections[5])\n         allowed_service_bit7_node.add_connection(connections[6])\n \n-        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n-        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n+        NetworkThread().start()  # Network thread stopped when all previous NodeConnCBs disconnected. Restart it\n+\n+        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n+        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)\n \n if __name__ == '__main__':\n     P2PLeakTest().main()"
      },
      {
        "sha": "59245302303c4647f808715f5fd776a25f58a34d",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "patch": "@@ -1837,6 +1837,7 @@ def run(self):\n                     disconnected.append(obj)\n             [ obj.handle_close() for obj in disconnected ]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n+        logger.debug(\"Network thread closing\")\n \n \n # An exception we can raise if we detect a potential disconnect"
      }
    ]
  },
  {
    "sha": "f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWNmN2I1ODlmNDMwYjJkN2M1MmU0NzdiNmQ2MmYyOWQ3NDhjMzhl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-15T18:36:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[tests] Check connectivity before sending in assumevalid.py\n\nassumevalid.py would try to send over a closed P2P connection in a loop,\nhitting the following failure many times:\n\nTestFramework.mininode (ERROR): Cannot send message. No connection to node!\n\nThe test still passes, but this is a lot of noise in the test log.\n\nJust check that the connection is open before trying to send.\n\nGithub-Pull: #11345\nRebased-From: e9e9391083721ca9733cc00a1907384f83b6435e",
      "tree": {
        "sha": "1e5e2eee186531531cf2b51bc5bbdaa6c7f609d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e5e2eee186531531cf2b51bc5bbdaa6c7f609d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ced0d7761d1316c6b522b2b426e79833e4cbae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "65685c48b7eef7e314375a751964057b2e3f1bdf",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cf7b589f430b2d7c52e477b6d62f29d748c38e/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cf7b589f430b2d7c52e477b6d62f29d748c38e/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
        "patch": "@@ -68,6 +68,8 @@ def setup_network(self):\n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n         for i in range(len(self.blocks)):\n+            if not node.connection:\n+                break\n             try:\n                 node.send_message(msg_block(self.blocks[i]))\n             except IOError as e:"
      }
    ]
  },
  {
    "sha": "794a80eee335a10d239aed7fdbdd013bce45161d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTRhODBlZWUzMzVhMTBkMjM5YWVkN2ZkYmRkMDEzYmNlNDUxNjFk",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-18T21:40:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[script] Unit tests for script/standard functions\n\nGithub-Pull: #11116\nRebased-From: d7afe2d1577eb3f6775301c81b94a191e0db99d9",
      "tree": {
        "sha": "261e83618a2e715e7626c84d9fc21fa14cfc41bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/261e83618a2e715e7626c84d9fc21fa14cfc41bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/794a80eee335a10d239aed7fdbdd013bce45161d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a80eee335a10d239aed7fdbdd013bce45161d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/794a80eee335a10d239aed7fdbdd013bce45161d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a80eee335a10d239aed7fdbdd013bce45161d/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cf7b589f430b2d7c52e477b6d62f29d748c38e"
      }
    ],
    "stats": {
      "total": 477,
      "additions": 386,
      "deletions": 91
    },
    "files": [
      {
        "sha": "3a932f460d697cc27707789b2dd708fc5fce8776",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a80eee335a10d239aed7fdbdd013bce45161d/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a80eee335a10d239aed7fdbdd013bce45161d/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=794a80eee335a10d239aed7fdbdd013bce45161d",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_TESTS =\\\n   test/scheduler_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n+  test/script_standard_tests.cpp \\\n   test/scriptnum_tests.cpp \\\n   test/serialize_tests.cpp \\\n   test/sighash_tests.cpp \\"
      },
      {
        "sha": "de7f3b48f5d6fb4036905b078bb8ec320d42bbc5",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 91,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=794a80eee335a10d239aed7fdbdd013bce45161d",
        "patch": "@@ -16,8 +16,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-typedef std::vector<unsigned char> valtype;\n-\n BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n@@ -173,95 +171,6 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n         BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n }\n \n-BOOST_AUTO_TEST_CASE(multisig_Solver1)\n-{\n-    // Tests Solver() that returns lists of keys that are\n-    // required to satisfy a ScriptPubKey\n-    //\n-    // Also tests IsMine() and ExtractDestination()\n-    //\n-    // Note: ExtractDestination for the multisignature transactions\n-    // always returns false for this release, even if you have\n-    // one key that would satisfy an (a|b) or 2-of-3 keys needed\n-    // to spend an escrow transaction.\n-    //\n-    CBasicKeyStore keystore, emptykeystore, partialkeystore;\n-    CKey key[3];\n-    CTxDestination keyaddr[3];\n-    for (int i = 0; i < 3; i++)\n-    {\n-        key[i].MakeNewKey(true);\n-        keystore.AddKey(key[i]);\n-        keyaddr[i] = key[i].GetPubKey().GetID();\n-    }\n-    partialkeystore.AddKey(key[0]);\n-\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 1);\n-        CTxDestination addr;\n-        BOOST_CHECK(ExtractDestination(s, addr));\n-        BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_DUP << OP_HASH160 << ToByteVector(key[0].GetPubKey().GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 1);\n-        CTxDestination addr;\n-        BOOST_CHECK(ExtractDestination(s, addr));\n-        BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n-        CTxDestination addr;\n-        BOOST_CHECK(!ExtractDestination(s, addr));\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n-        std::vector<CTxDestination> addrs;\n-        int nRequired;\n-        BOOST_CHECK(ExtractDestinations(s, whichType, addrs, nRequired));\n-        BOOST_CHECK(addrs[0] == keyaddr[0]);\n-        BOOST_CHECK(addrs[1] == keyaddr[1]);\n-        BOOST_CHECK(nRequired == 1);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 5);\n-    }\n-}\n-\n BOOST_AUTO_TEST_CASE(multisig_Sign)\n {\n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)"
      },
      {
        "sha": "e6a63ad54eb3005c15be93cd72bf80b27e063ef3",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "added",
        "additions": 385,
        "deletions": 0,
        "changes": 385,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=794a80eee335a10d239aed7fdbdd013bce45161d",
        "patch": "@@ -0,0 +1,385 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"key.h\"\n+#include \"script/script.h\"\n+#include \"script/script_error.h\"\n+#include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(script_standard_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<std::vector<unsigned char> > solutions;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0]));\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(CScriptID(redeemScript)));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_1 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(solutions.size(), 4);\n+    BOOST_CHECK(solutions[0] == std::vector<unsigned char>({1}));\n+    BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n+    BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n+    BOOST_CHECK(solutions[3] == std::vector<unsigned char>({2}));\n+\n+    s.clear();\n+    s << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        ToByteVector(pubkeys[2]) <<\n+        OP_3 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(solutions.size(), 5);\n+    BOOST_CHECK(solutions[0] == std::vector<unsigned char>({2}));\n+    BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n+    BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n+    BOOST_CHECK(solutions[3] == ToByteVector(pubkeys[2]));\n+    BOOST_CHECK(solutions[4] == std::vector<unsigned char>({3}));\n+\n+    // TX_NULL_DATA\n+    solutions.clear();\n+    s.clear();\n+    s << OP_RETURN <<\n+        std::vector<unsigned char>({0}) <<\n+        std::vector<unsigned char>({75}) <<\n+        std::vector<unsigned char>({255});\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_NULL_DATA);\n+    BOOST_CHECK_EQUAL(solutions.size(), 0);\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    solutions.clear();\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_KEYHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    uint256 scriptHash;\n+    CSHA256().Write(&redeemScript[0], redeemScript.size()).Finalize(scriptHash.begin());\n+\n+    solutions.clear();\n+    s.clear();\n+    s << OP_0 << ToByteVector(scriptHash);\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n+\n+    // TX_NONSTANDARD\n+    solutions.clear();\n+    s.clear();\n+    s << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_NONSTANDARD);\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n+{\n+    CKey key;\n+    CPubKey pubkey;\n+    key.MakeNewKey(true);\n+    pubkey = key.GetPubKey();\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<std::vector<unsigned char> > solutions;\n+\n+    // TX_PUBKEY with incorrectly sized pubkey\n+    s.clear();\n+    s << std::vector<unsigned char>(30, 0x01) << OP_CHECKSIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_PUBKEYHASH with incorrectly sized key hash\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkey) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_SCRIPTHASH with incorrectly sized script hash\n+    s.clear();\n+    s << OP_HASH160 << std::vector<unsigned char>(21, 0x01) << OP_EQUAL;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG 0/2\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG 2/1\n+    s.clear();\n+    s << OP_2 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG n = 2 with 1 pubkey\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey) << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG n = 1 with 0 pubkeys\n+    s.clear();\n+    s << OP_1 << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_NULL_DATA with other opcodes\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_WITNESS with unknown version\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey);\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_WITNESS with incorrect program size\n+    s.clear();\n+    s << OP_0 << std::vector<unsigned char>(19, 0x01);\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n+{\n+    CKey key;\n+    CPubKey pubkey;\n+    key.MakeNewKey(true);\n+    pubkey = key.GetPubKey();\n+\n+    CScript s;\n+    CTxDestination address;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkey) << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n+                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n+                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CScriptID>(&address) &&\n+                *boost::get<CScriptID>(&address) == CScriptID(redeemScript));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_NULL_DATA\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75});\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkey);\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CScriptID>(&addresses[0]) &&\n+                *boost::get<CScriptID>(&addresses[0]) == CScriptID(redeemScript));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(addresses.size(), 2);\n+    BOOST_CHECK_EQUAL(nRequired, 2);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[1]) &&\n+                *boost::get<CKeyID>(&addresses[1]) == pubkeys[1].GetID());\n+\n+    // TX_NULL_DATA\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75});\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript expected, result;\n+\n+    // CKeyID\n+    expected.clear();\n+    expected << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    result = GetScriptForDestination(pubkeys[0].GetID());\n+    BOOST_CHECK(result == expected);\n+\n+    // CScriptID\n+    CScript redeemScript(result);\n+    expected.clear();\n+    expected << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    result = GetScriptForDestination(CScriptID(redeemScript));\n+    BOOST_CHECK(result == expected);\n+\n+    // CNoDestination\n+    expected.clear();\n+    result = GetScriptForDestination(CNoDestination());\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForRawPubKey\n+    expected.clear();\n+    expected << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    result = GetScriptForRawPubKey(pubkeys[0]);\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForMultisig\n+    expected.clear();\n+    expected << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        ToByteVector(pubkeys[2]) <<\n+        OP_3 << OP_CHECKMULTISIG;\n+    result = GetScriptForMultisig(2, std::vector<CPubKey>(pubkeys, pubkeys + 3));\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForWitness\n+    CScript witnessScript;\n+\n+    witnessScript << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    expected.clear();\n+    expected << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+\n+    witnessScript.clear();\n+    witnessScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+\n+    witnessScript.clear();\n+    witnessScript << OP_1 << ToByteVector(pubkeys[0]) << OP_1 << OP_CHECKMULTISIG;\n+\n+    uint256 scriptHash;\n+    CSHA256().Write(&witnessScript[0], witnessScript.size()).Finalize(scriptHash.begin());\n+\n+    expected.clear();\n+    expected << OP_0 << ToByteVector(scriptHash);\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "2c4ff35a8fce0c40884886a93c1bf12395fb105d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzRmZjM1YThmY2UwYzQwODg0ODg2YTkzYzFiZjEyMzk1ZmIxMDVk",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-23T00:47:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[script] Unit tests for IsMine\n\nDoes not test watch-only addresses.\n\nGithub-Pull: #11116\nRebased-From: 7a1e873b27b790c965d9927ecd465710dc103136",
      "tree": {
        "sha": "83c0326b9efe09f938ec91d2af50069f4f049f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83c0326b9efe09f938ec91d2af50069f4f049f8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "794a80eee335a10d239aed7fdbdd013bce45161d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a80eee335a10d239aed7fdbdd013bce45161d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/794a80eee335a10d239aed7fdbdd013bce45161d"
      }
    ],
    "stats": {
      "total": 369,
      "additions": 363,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c3aade1774767085b6e6502e3397f9b0b18f9b13",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "patch": "@@ -46,6 +46,8 @@ isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& i\n \n isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n {\n+    isInvalid = false;\n+\n     std::vector<valtype> vSolutions;\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {"
      },
      {
        "sha": "3d17a0dbb6c6ab03c8e9a60d4bc71c069dfa2ee5",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 361,
        "deletions": 6,
        "changes": 367,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "patch": "@@ -3,6 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"key.h\"\n+#include \"keystore.h\"\n+#include \"script/ismine.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/standard.h\"\n@@ -81,7 +83,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     BOOST_CHECK(solutions[4] == std::vector<unsigned char>({3}));\n \n     // TX_NULL_DATA\n-    solutions.clear();\n     s.clear();\n     s << OP_RETURN <<\n         std::vector<unsigned char>({0}) <<\n@@ -92,7 +93,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     BOOST_CHECK_EQUAL(solutions.size(), 0);\n \n     // TX_WITNESS_V0_KEYHASH\n-    solutions.clear();\n     s.clear();\n     s << OP_0 << ToByteVector(pubkeys[0].GetID());\n     BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -102,9 +102,9 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n \n     // TX_WITNESS_V0_SCRIPTHASH\n     uint256 scriptHash;\n-    CSHA256().Write(&redeemScript[0], redeemScript.size()).Finalize(scriptHash.begin());\n+    CSHA256().Write(&redeemScript[0], redeemScript.size())\n+        .Finalize(scriptHash.begin());\n \n-    solutions.clear();\n     s.clear();\n     s << OP_0 << ToByteVector(scriptHash);\n     BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -113,7 +113,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n \n     // TX_NONSTANDARD\n-    solutions.clear();\n     s.clear();\n     s << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n     BOOST_CHECK(!Solver(s, whichType, solutions));\n@@ -374,12 +373,368 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n     witnessScript << OP_1 << ToByteVector(pubkeys[0]) << OP_1 << OP_CHECKMULTISIG;\n \n     uint256 scriptHash;\n-    CSHA256().Write(&witnessScript[0], witnessScript.size()).Finalize(scriptHash.begin());\n+    CSHA256().Write(&witnessScript[0], witnessScript.size())\n+        .Finalize(scriptHash.begin());\n \n     expected.clear();\n     expected << OP_0 << ToByteVector(scriptHash);\n     result = GetScriptForWitness(witnessScript);\n     BOOST_CHECK(result == expected);\n }\n \n+BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n+{\n+    CKey keys[2];\n+    CPubKey pubkeys[2];\n+    for (int i = 0; i < 2; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CKey uncompressedKey;\n+    uncompressedKey.MakeNewKey(false);\n+    CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n+\n+    CScript scriptPubKey;\n+    isminetype result;\n+    bool isInvalid;\n+\n+    // P2PK compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PK uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(uncompressedKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(uncompressedKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemScript;\n+        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore does not have redeemScript or key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript but no key\n+        keystore.AddCScript(redeemScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript and key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WPKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(pubkeys[0].GetID());\n+\n+        // Keystore has key, but no P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key and P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WPKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(uncompressedPubkey.GetID());\n+\n+        // Keystore has key, but no P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key and P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(isInvalid);\n+    }\n+\n+    // scriptPubKey multisig\n+    {\n+        CBasicKeyStore keystore;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        // Keystore does not have any keys\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has 1/2 keys\n+        keystore.AddKey(uncompressedKey);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has 2/2 keys\n+        keystore.AddKey(keys[1]);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2SH multisig\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript redeemScript;\n+        redeemScript << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore has no redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript\n+        keystore.AddCScript(redeemScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WSH multisig with compressed keys\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(pubkeys[0]) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WSH multisig with uncompressed key\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(isInvalid);\n+    }\n+\n+    // P2WSH multisig wrapped in P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(pubkeys[0]) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        CScript redeemScript;\n+        redeemScript << OP_0 << ToByteVector(scriptHash);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore has no witnessScript, P2SH redeemScript, or keys\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has witnessScript and P2SH redeemScript, but no keys\n+        keystore.AddCScript(redeemScript);\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddKey(keys[0]);\n+        keystore.AddKey(keys[1]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // OP_RETURN\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // Nonstandard\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDYwNWQ5ZGQ0OThhMWZhNzEzZTZhOTE2MzQ3YTdjODg3ZjJjMmI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-08T00:08:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "Tests for zmqpubrawtx and zmqpubrawblock\n\nGithub-Pull: #10552\nRebased-From: d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
      "tree": {
        "sha": "9d82d1c7eb05740f00930e2eed607a568bbed06d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d82d1c7eb05740f00930e2eed607a568bbed06d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c4ff35a8fce0c40884886a93c1bf12395fb105d"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 54,
      "deletions": 6
    },
    "files": [
      {
        "sha": "64966adb9738fc0814c480f6ad4d5b9800ff63dc",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "patch": "@@ -7,6 +7,7 @@\n from base64 import b64encode\n from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n+import hashlib\n import json\n import logging\n import os\n@@ -173,6 +174,13 @@ def count_bytes(hex_string):\n def bytes_to_hex_str(byte_str):\n     return hexlify(byte_str).decode('ascii')\n \n+def hash256(byte_str):\n+    sha256 = hashlib.sha256()\n+    sha256.update(byte_str)\n+    sha256d = hashlib.sha256()\n+    sha256d.update(sha256.digest())\n+    return sha256d.digest()[::-1]\n+\n def hex_str_to_bytes(hex_str):\n     return unhexlify(hex_str.encode('ascii'))\n "
      },
      {
        "sha": "382ef5bae2891df08c627e9878a0aaf45205feef",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 46,
        "deletions": 6,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "patch": "@@ -10,7 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n-                                 )\n+                                 hash256,\n+                                )\n \n class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -37,9 +38,12 @@ def setup_nodes(self):\n         self.zmqSubSocket.set(zmq.RCVTIMEO, 60000)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.extra_args = [['-zmqpubhashblock=%s' % ip_address, '-zmqpubhashtx=%s' % ip_address,\n+                       '-zmqpubrawblock=%s' % ip_address, '-zmqpubrawtx=%s' % ip_address], []]\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n@@ -59,28 +63,51 @@ def _zmq_test(self):\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n-        body = msg[1]\n+        txhash = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n+        # rawtx\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n+\n+        # Check that the rawtx hashes to the hashtx\n+        assert_equal(hash256(body), txhash)\n+\n         self.log.info(\"Wait for block\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n+        assert_equal(topic, b\"hashblock\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n-\n         assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        # rawblock\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawblock\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) #must be sequence 0 on rawblock\n+\n+        # Check the hash of the rawblock's header matches generate\n+        assert_equal(genhashes[0], bytes_to_hex_str(hash256(body[:80])))\n+\n         self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n+        zmqRawHashed = []\n         blockcount = 0\n-        for x in range(n * 2):\n+        for x in range(n * 4):\n             msg = self.zmqSubSocket.recv_multipart()\n             topic = msg[0]\n             body = msg[1]\n@@ -89,9 +116,14 @@ def _zmq_test(self):\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n                 assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n+            if topic == b\"rawblock\":\n+                zmqRawHashed.append(bytes_to_hex_str(hash256(body[:80])))\n+                msgSequence = struct.unpack('<I', msg[-1])[-1]\n+                assert_equal(msgSequence, blockcount)\n \n         for x in range(n):\n             assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n+            assert_equal(genhashes[x], zmqRawHashed[x])\n \n         self.log.info(\"Wait for tx from second node\")\n         # test tx from a second node\n@@ -101,13 +133,21 @@ def _zmq_test(self):\n         # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n-        body = msg[1]\n         assert_equal(topic, b\"hashtx\")\n+        body = msg[1]\n         hashZMQ = bytes_to_hex_str(body)\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, blockcount + 1)\n \n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        hashedZMQ = bytes_to_hex_str(hash256(body))\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount+1)\n         assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashedZMQ)\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      }
    ]
  },
  {
    "sha": "2f0b30a58a07a3e30faa82a27525025158754db2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjBiMzBhNThhMDdhM2UzMGZhYTgyYTI3NTI1MDI1MTU4NzU0ZGIy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-09-13T13:17:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "qa: Treat mininode p2p exceptions as fatal\n\nGithub-Pull: #11319\nRebased-From: a7820422e0b182db6f1df8904242e5d76d6c73fa",
      "tree": {
        "sha": "4551800f3d8c006e8072ead5f5a9facf9f02f613",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4551800f3d8c006e8072ead5f5a9facf9f02f613"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f0b30a58a07a3e30faa82a27525025158754db2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0b30a58a07a3e30faa82a27525025158754db2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0b30a58a07a3e30faa82a27525025158754db2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0b30a58a07a3e30faa82a27525025158754db2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4605d9dd498a1fa713e6a916347a7c887f2c2b8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "843b67cd5cace954b04f84ea5ee53b8d1160f0f0",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f0b30a58a07a3e30faa82a27525025158754db2/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f0b30a58a07a3e30faa82a27525025158754db2/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2f0b30a58a07a3e30faa82a27525025158754db2",
        "patch": "@@ -1505,6 +1505,7 @@ def deliver(self, conn, message):\n             except:\n                 print(\"ERROR delivering %s (%s)\" % (repr(message),\n                                                     sys.exc_info()[0]))\n+                raise\n \n     def set_deliver_sleep_time(self, value):\n         with mininode_lock:\n@@ -1708,13 +1709,10 @@ def handle_close(self):\n         self.cb.on_close(self)\n \n     def handle_read(self):\n-        try:\n-            t = self.recv(8192)\n-            if len(t) > 0:\n-                self.recvbuf += t\n-                self.got_data()\n-        except:\n-            pass\n+        t = self.recv(8192)\n+        if len(t) > 0:\n+            self.recvbuf += t\n+            self.got_data()\n \n     def readable(self):\n         return True\n@@ -1780,8 +1778,10 @@ def got_data(self):\n                     self.got_message(t)\n                 else:\n                     logger.warning(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n+                    raise ValueError(\"Unknown command: '%s'\" % (command))\n         except Exception as e:\n             logger.exception('got_data:', repr(e))\n+            raise\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:"
      }
    ]
  },
  {
    "sha": "8d2e51d86253881abadb5b11f93b12e3761f6232",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDJlNTFkODYyNTM4ODFhYmFkYjViMTFmOTNiMTJlMzc2MWY2MjMy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-09-13T13:21:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "qa: Fix bug introduced in p2p-segwit.py\n\nChanging __init__() -> set_test_params() in the tests should not have\napplied to NodeConnCB-derived objects.\n\nGithub-Pull: #11319\nRebased-From: f97ab35fa9687fd5c110ad6cca5be5b4a5c2142d",
      "tree": {
        "sha": "77d0d523336ab8b35c6c1d251c583707d2dfc11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d0d523336ab8b35c6c1d251c583707d2dfc11a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d2e51d86253881abadb5b11f93b12e3761f6232",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2e51d86253881abadb5b11f93b12e3761f6232",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2e51d86253881abadb5b11f93b12e3761f6232",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2e51d86253881abadb5b11f93b12e3761f6232/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f0b30a58a07a3e30faa82a27525025158754db2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0b30a58a07a3e30faa82a27525025158754db2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0b30a58a07a3e30faa82a27525025158754db2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9105f0ee06c5aaff55011d1eecf03194876a2c07",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2e51d86253881abadb5b11f93b12e3761f6232/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2e51d86253881abadb5b11f93b12e3761f6232/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=8d2e51d86253881abadb5b11f93b12e3761f6232",
        "patch": "@@ -33,8 +33,8 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def set_test_params(self):\n-        self.num_nodes = 3\n+    def __init__(self):\n+        super().__init__()\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):"
      }
    ]
  },
  {
    "sha": "a36f3320a94aa70328e133d53146fc1ef57e1e34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzZmMzMyMGE5NGFhNzAzMjhlMTMzZDUzMTQ2ZmMxZWY1N2UxZTM0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-29T21:33:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "Verify DBWrapper iterators are taking snapshots\n\nThe LevelDB docs seem to indicate that an iterator will not take\nsnapshots (even providing instructions on how to do so yourself).\nIn several of the places we use them, we assume snapshots to have\nbeen taken.\n\nIn order to make sure LevelDB doesn't change out from under us\n(and to prevent the next person who reads the docs from having the\nsame fright I did), verify that snapshots are taken in our tests.\n\nGithub-Pull: #11422\nRebased-From: bb8376bbc3d96af727444f90e5f60d47105609dc",
      "tree": {
        "sha": "e4c32f07df05ef0f4a113f030a104d0c7cb16237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4c32f07df05ef0f4a113f030a104d0c7cb16237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a36f3320a94aa70328e133d53146fc1ef57e1e34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2e51d86253881abadb5b11f93b12e3761f6232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2e51d86253881abadb5b11f93b12e3761f6232",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2e51d86253881abadb5b11f93b12e3761f6232"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d90fe5027705f1389211fa8f6d8f51fb3e744d3c",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a36f3320a94aa70328e133d53146fc1ef57e1e34/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a36f3320a94aa70328e133d53146fc1ef57e1e34/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=a36f3320a94aa70328e133d53146fc1ef57e1e34",
        "patch": "@@ -204,19 +204,31 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n         uint32_t value = x*x;\n-        BOOST_CHECK(dbw.Write(key, value));\n+        if (!(x & 1)) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n+    // Check that creating an iterator creates a snapshot\n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n+\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n     for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n-        for (int x=seek_start; x<256; ++x) {\n+        for (int x=seek_start; x<255; ++x) {\n             uint8_t key;\n             uint32_t value;\n             BOOST_CHECK(it->Valid());\n             if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n                 break;\n             BOOST_CHECK(it->GetKey(key));\n+            if (x & 1) {\n+                BOOST_CHECK_EQUAL(key, x + 1);\n+                continue;\n+            }\n             BOOST_CHECK(it->GetValue(value));\n             BOOST_CHECK_EQUAL(key, x);\n             BOOST_CHECK_EQUAL(value, x*x);"
      }
    ]
  },
  {
    "sha": "a825d4af5e3ca353bce421e966ddcb9fc643075c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODI1ZDRhZjVlM2NhMzUzYmNlNDIxZTk2NmRkY2I5ZmM2NDMwNzVj",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-25T10:14:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "Fix bip68-sequence rpc test\n\nGithub-Pull: #11399\nRebased-From: 49f869fe91716785b3276925d64bf8955feff69f",
      "tree": {
        "sha": "346a850dc1da7900f262a15e11797050c3c124be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/346a850dc1da7900f262a15e11797050c3c124be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a825d4af5e3ca353bce421e966ddcb9fc643075c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a36f3320a94aa70328e133d53146fc1ef57e1e34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a36f3320a94aa70328e133d53146fc1ef57e1e34"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1391b9ed466f15d55804ae02bf4ad9339d4e4fd6",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a825d4af5e3ca353bce421e966ddcb9fc643075c/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a825d4af5e3ca353bce421e966ddcb9fc643075c/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=a825d4af5e3ca353bce421e966ddcb9fc643075c",
        "patch": "@@ -369,11 +369,14 @@ def test_bip68_not_consensus(self):\n \n     def activateCSV(self):\n         # activation should happen at block height 432 (3 periods)\n+        # getblockchaininfo will show CSV as active at block 431 (144 * 3 -1) since it's returning whether CSV is active for the next block.\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n-        assert(height < min_activation_height)\n-        self.nodes[0].generate(min_activation_height-height)\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        assert_greater_than(min_activation_height - height, 2)\n+        self.nodes[0].generate(min_activation_height - height - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n         sync_blocks(self.nodes)\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      }
    ]
  },
  {
    "sha": "806c78f014f6be9e12afb181d85e135f3b44e33e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDZjNzhmMDE0ZjZiZTllMTJhZmIxODFkODVlMTM1ZjNiNDRlMzNl",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-09-26T21:24:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "add functional test for mempoolreplacement command line arg\n\nGithub-Pull: #11407\nRebased-From: 1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
      "tree": {
        "sha": "112f3d3f45e3287351883b72915754050c794f9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/112f3d3f45e3287351883b72915754050c794f9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/806c78f014f6be9e12afb181d85e135f3b44e33e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806c78f014f6be9e12afb181d85e135f3b44e33e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/806c78f014f6be9e12afb181d85e135f3b44e33e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806c78f014f6be9e12afb181d85e135f3b44e33e/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a825d4af5e3ca353bce421e966ddcb9fc643075c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a825d4af5e3ca353bce421e966ddcb9fc643075c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5e1f33991b4bbf6221c51264be626e6257f19b78",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/806c78f014f6be9e12afb181d85e135f3b44e33e/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/806c78f014f6be9e12afb181d85e135f3b44e33e/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=806c78f014f6be9e12afb181d85e135f3b44e33e",
        "patch": "@@ -62,13 +62,14 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n class ReplaceByFeeTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\",\n                            \"-limitancestorsize=101\",\n                            \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"]]\n+                           \"-limitdescendantsize=101\"],\n+                           [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n@@ -115,6 +116,8 @@ def test_simple_doublespend(self):\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n+        self.sync_all([self.nodes])\n+\n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -123,12 +126,17 @@ def test_simple_doublespend(self):\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        # This will raise an exception due to transaction replacement being disabled\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n+        # Replacement still disabled even with \"enough fee\"\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -138,6 +146,11 @@ def test_simple_doublespend(self):\n \n         assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n \n+        # Second node is running mempoolreplacement=0, will not replace originally-seen txn\n+        mempool = self.nodes[1].getrawmempool()\n+        assert tx1a_txid in mempool\n+        assert tx1b_txid not in mempool\n+\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n "
      }
    ]
  },
  {
    "sha": "e169349f8c25d8998492b38500c1fee1074ed6fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTY5MzQ5ZjhjMjVkODk5ODQ5MmIzODUwMGMxZmVlMTA3NGVkNmZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-01T09:19:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T09:59:33Z"
      },
      "message": "qa: Restore bitcoin-util-test py2 compatibility\n\nGithub-Pull: #11433\nRebased-From: fafff1220cf798e25f02cdd8affb70506dd366cc",
      "tree": {
        "sha": "733117b510b3c09e2aa4cec8b73e7e7e2d4a1319",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/733117b510b3c09e2aa4cec8b73e7e7e2d4a1319"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e169349f8c25d8998492b38500c1fee1074ed6fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169349f8c25d8998492b38500c1fee1074ed6fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e169349f8c25d8998492b38500c1fee1074ed6fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169349f8c25d8998492b38500c1fee1074ed6fe/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "806c78f014f6be9e12afb181d85e135f3b44e33e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806c78f014f6be9e12afb181d85e135f3b44e33e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/806c78f014f6be9e12afb181d85e135f3b44e33e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b48bfc76b78592aacff61bc3204f7165ee5d671d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e169349f8c25d8998492b38500c1fee1074ed6fe/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e169349f8c25d8998492b38500c1fee1074ed6fe/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e169349f8c25d8998492b38500c1fee1074ed6fe",
        "patch": "@@ -147,7 +147,7 @@ bitcoin_test_clean : FORCE\n \n check-local:\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n-\t$(top_builddir)/test/util/bitcoin-util-test.py\n+\t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "ef34955d90904c2176b8eef443d54b1b0ae957a5",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e169349f8c25d8998492b38500c1fee1074ed6fe/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e169349f8c25d8998492b38500c1fee1074ed6fe/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=e169349f8c25d8998492b38500c1fee1074ed6fe",
        "patch": "@@ -9,9 +9,14 @@\n \n Can also be run manually.\"\"\"\n \n+from __future__ import division,print_function,unicode_literals\n+\n import argparse\n import binascii\n-import configparser\n+try:\n+    import configparser\n+except ImportError:\n+    import ConfigParser as configparser\n import difflib\n import json\n import logging\n@@ -22,7 +27,9 @@\n \n def main():\n     config = configparser.ConfigParser()\n-    config.read_file(open(os.path.dirname(__file__) + \"/../config.ini\"))\n+    config.optionxform = str\n+    config.readfp(open(os.path.join(os.path.dirname(__file__), \"../config.ini\")))\n+    env_conf = dict(config.items('environment'))\n \n     parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n@@ -37,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(config[\"environment\"][\"SRCDIR\"] + \"/test/util/data\", \"bitcoin-util-test.json\", config[\"environment\"])\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "019c492490077a7581ab526b4208439200cbff24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTljNDkyNDkwMDc3YTc1ODFhYjUyNmI0MjA4NDM5MjAwY2JmZjI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T11:35:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T12:29:07Z"
      },
      "message": "qa: Fix lcov for out-of-tree builds\n\nGithub-Pull: #11443\nRebased-From: fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
      "tree": {
        "sha": "7fa3066c94e421b80cadcd2fd39117b62ad6910a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fa3066c94e421b80cadcd2fd39117b62ad6910a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019c492490077a7581ab526b4208439200cbff24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019c492490077a7581ab526b4208439200cbff24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/019c492490077a7581ab526b4208439200cbff24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019c492490077a7581ab526b4208439200cbff24/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e169349f8c25d8998492b38500c1fee1074ed6fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169349f8c25d8998492b38500c1fee1074ed6fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e169349f8c25d8998492b38500c1fee1074ed6fe"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8aa7d5ae121cc5561d0f7d17f86b8fc177a2349",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/019c492490077a7581ab526b4208439200cbff24/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/019c492490077a7581ab526b4208439200cbff24/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=019c492490077a7581ab526b4208439200cbff24",
        "patch": "@@ -1231,6 +1231,7 @@ AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_FILES([doc/Doxyfile])\n+AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n "
      }
    ]
  }
]