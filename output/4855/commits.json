[
  {
    "sha": "324c4dac7853c9711972d94903709842b64bcc37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjRjNGRhYzc4NTNjOTcxMTk3MmQ5NDkwMzcwOTg0MmI2NGJjYzM3",
    "commit": {
      "author": {
        "name": "himynameismartin",
        "email": "himynameismartin@gmail.com",
        "date": "2014-09-05T15:07:21Z"
      },
      "committer": {
        "name": "himynameismartin",
        "email": "himynameismartin@gmail.com",
        "date": "2014-09-05T15:07:21Z"
      },
      "message": "Merge pull request #1 from bitcoin/master\n\nUpdate",
      "tree": {
        "sha": "18510adf12d5f3b9ab55d46fa581d9763830a810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18510adf12d5f3b9ab55d46fa581d9763830a810"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/324c4dac7853c9711972d94903709842b64bcc37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/324c4dac7853c9711972d94903709842b64bcc37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/324c4dac7853c9711972d94903709842b64bcc37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/324c4dac7853c9711972d94903709842b64bcc37/comments",
    "author": {
      "login": "himynameismartin",
      "id": 368492,
      "node_id": "MDQ6VXNlcjM2ODQ5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/368492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/himynameismartin",
      "html_url": "https://github.com/himynameismartin",
      "followers_url": "https://api.github.com/users/himynameismartin/followers",
      "following_url": "https://api.github.com/users/himynameismartin/following{/other_user}",
      "gists_url": "https://api.github.com/users/himynameismartin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/himynameismartin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/himynameismartin/subscriptions",
      "organizations_url": "https://api.github.com/users/himynameismartin/orgs",
      "repos_url": "https://api.github.com/users/himynameismartin/repos",
      "events_url": "https://api.github.com/users/himynameismartin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/himynameismartin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "himynameismartin",
      "id": 368492,
      "node_id": "MDQ6VXNlcjM2ODQ5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/368492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/himynameismartin",
      "html_url": "https://github.com/himynameismartin",
      "followers_url": "https://api.github.com/users/himynameismartin/followers",
      "following_url": "https://api.github.com/users/himynameismartin/following{/other_user}",
      "gists_url": "https://api.github.com/users/himynameismartin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/himynameismartin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/himynameismartin/subscriptions",
      "organizations_url": "https://api.github.com/users/himynameismartin/orgs",
      "repos_url": "https://api.github.com/users/himynameismartin/repos",
      "events_url": "https://api.github.com/users/himynameismartin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/himynameismartin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb51e28227fc1561ffa55cd3c5222d2b581778af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb51e28227fc1561ffa55cd3c5222d2b581778af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb51e28227fc1561ffa55cd3c5222d2b581778af"
      },
      {
        "sha": "6ee78938ee6fda4fd80ece1eb5d736c79045eddd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ee78938ee6fda4fd80ece1eb5d736c79045eddd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ee78938ee6fda4fd80ece1eb5d736c79045eddd"
      }
    ],
    "stats": {
      "total": 239,
      "additions": 154,
      "deletions": 85
    },
    "files": [
      {
        "sha": "379a0e1df794341903b05f0da7ec38b49cac68af",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -14,10 +14,12 @@ env:\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n     - CCACHE_COMPRESS=1\n     - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n+    - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n cache:\n   apt: true\n   directories:\n   - depends/built\n+  - depends/sdk-sources\n   - $HOME/.ccache\n matrix:\n   fast_finish: true\n@@ -30,6 +32,8 @@ matrix:\n       env: HOST=x86_64-unknown-linux-gnu RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 4\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+    - compiler: \"true 5\"\n+      env: HOST=x86_64-apple-darwin11 PACKAGES=\"gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n     - compiler: \"true 6\"\n       env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev\" GOAL=\"deploy\"\n     - compiler: \"true 7\"\n@@ -39,7 +43,9 @@ install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-upgrade -qq $PACKAGES; fi\n before_script:\n     - unset CC; unset CXX\n-    - mkdir -p depends/SDKs\n+    - mkdir -p depends/SDKs depends/sdk-sources\n+    - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then wget $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -O depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n+    - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS || (echo \"Build failure. Verbose build follows.\" && make -C depends V=1 HOST=$HOST $DEP_OPTS)\n script:\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST"
      },
      {
        "sha": "157586e4d4e0a89a9ed9513be65f50933649b5bd",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -27,6 +27,7 @@ output.\n Optional config file setting for linearize-data:\n * \"netmagic\": network magic number\n * \"max_out_sz\": maximum output file size (default 1000*1000*1000)\n-* \"split_year\": Split files when a new year is first seen, in addition to\n+* \"split_timestamp\": Split files when a new month is first seen, in addition to\n reaching a maximum file size.\n-\n+* \"file_timestamp\": Set each file's last-modified time to that of the\n+most recent block in that file."
      },
      {
        "sha": "383bb38198a705e7e7bf397622970a8e49323bef",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 49,
        "deletions": 24,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -10,11 +10,13 @@\n import json\n import struct\n import re\n+import os\n import base64\n import httplib\n import sys\n import hashlib\n import datetime\n+import time\n \n settings = {}\n \n@@ -58,10 +60,12 @@ def calc_hash_str(blk_hdr):\n \thash_str = hash.encode('hex')\n \treturn hash_str\n \n-def get_blk_year(blk_hdr):\n+def get_blk_dt(blk_hdr):\n \tmembers = struct.unpack(\"<I\", blk_hdr[68:68+4])\n-\tdt = datetime.datetime.fromtimestamp(members[0])\n-\treturn dt.year\n+\tnTime = members[0]\n+\tdt = datetime.datetime.fromtimestamp(nTime)\n+\tdt_ym = datetime.datetime(dt.year, dt.month, 1)\n+\treturn (dt_ym, nTime)\n \n def get_block_hashes(settings):\n \tblkindex = []\n@@ -86,16 +90,21 @@ def copydata(settings, blkindex, blkset):\n \toutFn = 0\n \toutsz = 0\n \toutF = None\n+\toutFname = None\n \tblkCount = 0\n \n-\tlastYear = 0\n-\tsplitYear = False\n+\tlastDate = datetime.datetime(2000, 1, 1)\n+\thighTS = 1408893517 - 315360000\n+\ttimestampSplit = False\n \tfileOutput = True\n+\tsetFileTime = False\n \tmaxOutSz = settings['max_out_sz']\n \tif 'output' in settings:\n \t\tfileOutput = False\n-\tif settings['split_year'] != 0:\n-\t\tsplitYear = True\n+\tif settings['file_timestamp'] != 0:\n+\t\tsetFileTime = True\n+\tif settings['split_timestamp'] != 0:\n+\t\ttimestampSplit = True\n \n \twhile True:\n \t\tif not inF:\n@@ -125,36 +134,49 @@ def copydata(settings, blkindex, blkset):\n \t\t\tprint(\"Skipping unknown block \" + hash_str)\n \t\t\tcontinue\n \n+\t\tif blkindex[blkCount] != hash_str:\n+\t\t\tprint(\"Out of order block.\")\n+\t\t\tprint(\"Expected \" + blkindex[blkCount])\n+\t\t\tprint(\"Got \" + hash_str)\n+\t\t\tsys.exit(1)\n+\n \t\tif not fileOutput and ((outsz + inLen) > maxOutSz):\n \t\t\toutF.close()\n+\t\t\tif setFileTime:\n+\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n \t\t\toutF = None\n+\t\t\toutFname = None\n \t\t\toutFn = outFn + 1\n \t\t\toutsz = 0\n \n-\t\tif splitYear:\n-\t\t\tblkYear = get_blk_year(blk_hdr)\n-\t\t\tif blkYear > lastYear:\n-\t\t\t\tprint(\"New year \" + str(blkYear) + \" @ \" + hash_str)\n-\t\t\t\tlastYear = blkYear\n-\t\t\t\tif outF:\n-\t\t\t\t\toutF.close()\n-\t\t\t\t\toutF = None\n-\t\t\t\t\toutFn = outFn + 1\n-\t\t\t\t\toutsz = 0\n+\t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n+\t\tif timestampSplit and (blkDate > lastDate):\n+\t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + hash_str)\n+\t\t\tlastDate = blkDate\n+\t\t\tif outF:\n+\t\t\t\toutF.close()\n+\t\t\t\tif setFileTime:\n+\t\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n+\t\t\t\toutF = None\n+\t\t\t\toutFname = None\n+\t\t\t\toutFn = outFn + 1\n+\t\t\t\toutsz = 0\n \n \t\tif not outF:\n \t\t\tif fileOutput:\n-\t\t\t\tfname = settings['output_file']\n+\t\t\t\toutFname = settings['output_file']\n \t\t\telse:\n-\t\t\t\tfname = \"%s/blk%05d.dat\" % (settings['output'], outFn)\n-\t\t\tprint(\"Output file\" + fname)\n-\t\t\toutF = open(fname, \"wb\")\n+\t\t\t\toutFname = \"%s/blk%05d.dat\" % (settings['output'], outFn)\n+\t\t\tprint(\"Output file\" + outFname)\n+\t\t\toutF = open(outFname, \"wb\")\n \n \t\toutF.write(inhdr)\n \t\toutF.write(rawblock)\n \t\toutsz = outsz + inLen + 8\n \n \t\tblkCount = blkCount + 1\n+\t\tif blkTS > highTS:\n+\t\t\thighTS = blkTS\n \n \t\tif (blkCount % 1000) == 0:\n \t\t\tprint(\"Wrote \" + str(blkCount) + \" blocks\")\n@@ -184,13 +206,16 @@ def copydata(settings, blkindex, blkset):\n \t\tsettings['input'] = 'input'\n \tif 'hashlist' not in settings:\n \t\tsettings['hashlist'] = 'hashlist.txt'\n-\tif 'split_year' not in settings:\n-\t\tsettings['split_year'] = 0\n+\tif 'file_timestamp' not in settings:\n+\t\tsettings['file_timestamp'] = 0\n+\tif 'split_timestamp' not in settings:\n+\t\tsettings['split_timestamp'] = 0\n \tif 'max_out_sz' not in settings:\n \t\tsettings['max_out_sz'] = 1000L * 1000 * 1000\n \n \tsettings['max_out_sz'] = long(settings['max_out_sz'])\n-\tsettings['split_year'] = int(settings['split_year'])\n+\tsettings['split_timestamp'] = int(settings['split_timestamp'])\n+\tsettings['file_timestamp'] = int(settings['file_timestamp'])\n \tsettings['netmagic'] = settings['netmagic'].decode('hex')\n \n \tif 'output_file' not in settings and 'output' not in settings:"
      },
      {
        "sha": "28bfb85492382df47ac34d238868b2a1e382da4b",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -22,8 +22,8 @@ endef\n define fetch_file\n (test -f $(SOURCES_PATH)/$(4) || \\\n   ( mkdir -p $$($(1)_extract_dir) && \\\n-  ( $(build_DOWNLOAD) \"$$($(1)_extract_dir)/$(3).temp\" \"$(2)/$(3)\" || \\\n-    $(build_DOWNLOAD) \"$$($(1)_extract_dir)/$(3).temp\" \"$(FALLBACK_DOWNLOAD_PATH)/$(3)\" ) && \\\n+  ( $(build_DOWNLOAD) \"$$($(1)_extract_dir)/$(4).temp\" \"$(2)/$(3)\" || \\\n+    $(build_DOWNLOAD) \"$$($(1)_extract_dir)/$(4).temp\" \"$(FALLBACK_DOWNLOAD_PATH)/$(3)\" ) && \\\n     echo \"$(5)  $$($(1)_extract_dir)/$(4).temp\" > $$($(1)_extract_dir)/.$(4).hash && \\\n     $(build_SHA256SUM) -c $$($(1)_extract_dir)/.$(4).hash && \\\n     mv $$($(1)_extract_dir)/$(4).temp $(SOURCES_PATH)/$(4) ))"
      },
      {
        "sha": "87baadc5d6405ce58645774a467a23bfda191b17",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -10,7 +10,7 @@\n import sys\n sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n \n-from decimal import Decimal\n+from decimal import Decimal, ROUND_DOWN\n import json\n import random\n import shutil\n@@ -230,10 +230,12 @@ def make_change(from_node, amount_in, amount_out, fee):\n     change = amount_in - amount\n     if change > amount*2:\n         # Create an extra change output to break up big inputs\n-        outputs[from_node.getnewaddress()] = float(change/2)\n-        change = change/2\n+        change_address = from_node.getnewaddress()\n+        # Split change in two, being careful of rounding:\n+        outputs[change_address] = Decimal(change/2).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+        change = amount_in - amount - outputs[change_address]\n     if change > 0:\n-        outputs[from_node.getnewaddress()] = float(change)\n+        outputs[from_node.getnewaddress()] = change\n     return outputs\n \n def send_zeropri_transaction(from_node, to_node, amount, fee):"
      },
      {
        "sha": "68948ac7ffe3e107dd6c78038f5a23b71d0c4af5",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -45,13 +45,13 @@ bool CAddrInfo::IsTerrible(int64_t nNow) const\n     if (nTime > nNow + 10*60) // came in a flying DeLorean\n         return true;\n \n-    if (nTime==0 || nNow-nTime > ADDRMAN_HORIZON_DAYS*86400) // not seen in over a month\n+    if (nTime==0 || nNow-nTime > ADDRMAN_HORIZON_DAYS*24*60*60) // not seen in recent history\n         return true;\n \n-    if (nLastSuccess==0 && nAttempts>=ADDRMAN_RETRIES) // tried three times and never a success\n+    if (nLastSuccess==0 && nAttempts>=ADDRMAN_RETRIES) // tried N times and never a success\n         return true;\n \n-    if (nNow-nLastSuccess > ADDRMAN_MIN_FAIL_DAYS*86400 && nAttempts>=ADDRMAN_MAX_FAILURES) // 10 successive failures in the last week\n+    if (nNow-nLastSuccess > ADDRMAN_MIN_FAIL_DAYS*24*60*60 && nAttempts>=ADDRMAN_MAX_FAILURES) // N successive failures in the last week\n         return true;\n \n     return false;"
      },
      {
        "sha": "c41deea7ce64718950437f2d41f5e4ec3d96c72b",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -146,7 +146,7 @@ namespace Checkpoints {\n         return checkpoints.rbegin()->first;\n     }\n \n-    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex)\n+    CBlockIndex* GetLastCheckpoint()\n     {\n         if (!fEnabled)\n             return NULL;\n@@ -156,7 +156,7 @@ namespace Checkpoints {\n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {\n             const uint256& hash = i.second;\n-            std::map<uint256, CBlockIndex*>::const_iterator t = mapBlockIndex.find(hash);\n+            BlockMap::const_iterator t = mapBlockIndex.find(hash);\n             if (t != mapBlockIndex.end())\n                 return t->second;\n         }"
      },
      {
        "sha": "6d3f2d493563dc20239e2f5bc37da61c34c4e024",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -22,7 +22,7 @@ namespace Checkpoints {\n     int GetTotalBlocksEstimate();\n \n     // Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex);\n+    CBlockIndex* GetLastCheckpoint();\n \n     double GuessVerificationProgress(CBlockIndex *pindex, bool fSigchecks = true);\n "
      },
      {
        "sha": "31f64878fb2521d856758947db0dd1e20cc89fc3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1031,7 +1031,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     {\n         string strMatch = mapArgs[\"-printblock\"];\n         int nFound = 0;\n-        for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n+        for (BlockMap::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n         {\n             uint256 hash = (*mi).first;\n             if (boost::algorithm::starts_with(hash.ToString(), strMatch))"
      },
      {
        "sha": "2479beabddd129282bd41717cc51886a2392867a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -38,7 +38,7 @@ using namespace boost;\n \n CCriticalSection cs_main;\n \n-map<uint256, CBlockIndex*> mapBlockIndex;\n+BlockMap mapBlockIndex;\n CChain chainActive;\n int64_t nTimeBestReceived = 0;\n CWaitableCriticalSection csBestBlock;\n@@ -328,7 +328,7 @@ void ProcessBlockAvailability(NodeId nodeid) {\n     assert(state != NULL);\n \n     if (state->hashLastUnknownBlock != 0) {\n-        map<uint256, CBlockIndex*>::iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n+        BlockMap::iterator itOld = mapBlockIndex.find(state->hashLastUnknownBlock);\n         if (itOld != mapBlockIndex.end() && itOld->second->nChainWork > 0) {\n             if (state->pindexBestKnownBlock == NULL || itOld->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n                 state->pindexBestKnownBlock = itOld->second;\n@@ -344,7 +344,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n \n     ProcessBlockAvailability(nodeid);\n \n-    map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(hash);\n+    BlockMap::iterator it = mapBlockIndex.find(hash);\n     if (it != mapBlockIndex.end() && it->second->nChainWork > 0) {\n         // An actually better block was announced.\n         if (state->pindexBestKnownBlock == NULL || it->second->nChainWork >= state->pindexBestKnownBlock->nChainWork)\n@@ -434,7 +434,7 @@ CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n CBlockIndex *CChain::FindFork(const CBlockLocator &locator) const {\n     // Find the first block the caller has in the main chain\n     BOOST_FOREACH(const uint256& hash, locator.vHave) {\n-        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+        BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n             CBlockIndex* pindex = (*mi).second;\n@@ -2068,7 +2068,7 @@ CBlockIndex* AddToBlockIndex(CBlockHeader& block)\n {\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n-    std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(hash);\n+    BlockMap::iterator it = mapBlockIndex.find(hash);\n     if (it != mapBlockIndex.end())\n         return it->second;\n \n@@ -2079,9 +2079,9 @@ CBlockIndex* AddToBlockIndex(CBlockHeader& block)\n          LOCK(cs_nBlockSequenceId);\n          pindexNew->nSequenceId = nBlockSequenceId++;\n     }\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n+    BlockMap::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n-    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n+    BlockMap::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n     {\n         pindexNew->pprev = (*miPrev).second;\n@@ -2294,15 +2294,15 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n-    std::map<uint256, CBlockIndex*>::iterator miSelf = mapBlockIndex.find(hash);\n+    BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n     CBlockIndex *pindex = NULL;\n     if (miSelf != mapBlockIndex.end()) {\n         pindex = miSelf->second;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n             return state.Invalid(error(\"AcceptBlock() : block is marked invalid\"), 0, \"duplicate\");\n     }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n     if (pcheckpoint && block.hashPrevBlock != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n@@ -2323,7 +2323,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n     if (hash != Params().HashGenesisBlock()) {\n-        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n+        BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"AcceptBlock() : prev block not found\"), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n@@ -2345,7 +2345,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n                              REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n         // Don't accept any forks from the main chain prior to last checkpoint\n-        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n             return state.DoS(100, error(\"AcceptBlock() : forked chain older than last checkpoint (height %d)\", nHeight));\n \n@@ -2517,7 +2517,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         return error(\"ProcessBlock() : CheckBlock FAILED\");\n \n     // If we don't already have its previous block (with full data), shunt it off to holding area until we get it\n-    std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(pblock->hashPrevBlock);\n+    BlockMap::iterator it = mapBlockIndex.find(pblock->hashPrevBlock);\n     if (pblock->hashPrevBlock != 0 && (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)))\n     {\n         LogPrintf(\"ProcessBlock: ORPHAN BLOCK %lu, prev=%s\\n\", (unsigned long)mapOrphanBlocks.size(), pblock->hashPrevBlock.ToString());\n@@ -2799,7 +2799,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n         return NULL;\n \n     // Return existing\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+    BlockMap::iterator mi = mapBlockIndex.find(hash);\n     if (mi != mapBlockIndex.end())\n         return (*mi).second;\n \n@@ -2876,7 +2876,7 @@ bool static LoadBlockIndexDB()\n     LogPrintf(\"LoadBlockIndexDB(): transaction index %s\\n\", fTxIndex ? \"enabled\" : \"disabled\");\n \n     // Load pointer to end of best chain\n-    std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+    BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     if (it == mapBlockIndex.end())\n         return true;\n     chainActive.SetTip(it->second);\n@@ -3034,7 +3034,7 @@ void PrintBlockTree()\n     AssertLockHeld(cs_main);\n     // pre-compute tree structure\n     map<CBlockIndex*, vector<CBlockIndex*> > mapNext;\n-    for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n+    for (BlockMap::iterator mi = mapBlockIndex.begin(); mi != mapBlockIndex.end(); ++mi)\n     {\n         CBlockIndex* pindex = (*mi).second;\n         mapNext[pindex->pprev].push_back(pindex);\n@@ -3280,13 +3280,13 @@ void static ProcessGetData(CNode* pfrom)\n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n             {\n                 bool send = false;\n-                map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n+                BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n                 {\n                     // If the requested block is at a height below our last\n                     // checkpoint, only serve it if it's in the checkpointed chain\n                     int nHeight = mi->second->nHeight;\n-                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n                     if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n                         if (!chainActive.Contains(mi->second))\n                         {\n@@ -3711,7 +3711,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (locator.IsNull())\n         {\n             // If locator is null, return the hashStop block\n-            map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashStop);\n+            BlockMap::iterator mi = mapBlockIndex.find(hashStop);\n             if (mi == mapBlockIndex.end())\n                 return true;\n             pindex = (*mi).second;\n@@ -4513,7 +4513,7 @@ class CMainCleanup\n     CMainCleanup() {}\n     ~CMainCleanup() {\n         // block headers\n-        std::map<uint256, CBlockIndex*>::iterator it1 = mapBlockIndex.begin();\n+        BlockMap::iterator it1 = mapBlockIndex.begin();\n         for (; it1 != mapBlockIndex.end(); it1++)\n             delete (*it1).second;\n         mapBlockIndex.clear();"
      },
      {
        "sha": "8c0a743e24d666c87656b84cd0b45ebeb228351e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -29,6 +29,8 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/unordered_map.hpp>\n+\n class CBlockIndex;\n class CBloomFilter;\n class CInv;\n@@ -81,11 +83,16 @@ static const unsigned char REJECT_DUST = 0x41;\n static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n static const unsigned char REJECT_CHECKPOINT = 0x43;\n \n+struct BlockHasher\n+{\n+    size_t operator()(const uint256& hash) const { return hash.GetLow64(); }\n+};\n \n extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CTxMemPool mempool;\n-extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n+typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n+extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n extern const std::string strMessageMagic;"
      },
      {
        "sha": "2546826f9ae674e89d04dd27125afa4728a65d91",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1080,8 +1080,6 @@ void ThreadSocketHandler()\n             BOOST_FOREACH(CNode* pnode, vNodesCopy)\n                 pnode->Release();\n         }\n-\n-        MilliSleep(10);\n     }\n }\n \n@@ -1791,7 +1789,6 @@ bool StopNode()\n     if (semOutbound)\n         for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n             semOutbound->post();\n-    MilliSleep(50);\n     DumpAddresses();\n \n     return true;"
      },
      {
        "sha": "90762bea5d381bb60f46d9f3028808b72bb52483",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -172,7 +172,7 @@ void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64\n     // for symmetry reasons also show immature label when the watch-only one is shown\n     ui->labelImmature->setVisible(showImmature || showWatchOnlyImmature);\n     ui->labelImmatureText->setVisible(showImmature || showWatchOnlyImmature);\n-    ui->labelWatchImmature->setVisible(showWatchOnlyImmature);  // show watch-only immature balance\n+    ui->labelWatchImmature->setVisible(showWatchOnlyImmature); // show watch-only immature balance\n }\n \n // show/hide watch-only labels"
      },
      {
        "sha": "aeaa7d89a036eecf5f8c1fb7785fabf4bd04050b",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n //\n // Data for paymentservertests.cpp\n //"
      },
      {
        "sha": "5d7fe96285cc8438750f9c270b8583b9e555ef29",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"paymentservertests.h\"\n \n #include \"optionsmodel.h\"\n@@ -21,7 +25,6 @@ X509 *parse_b64der_cert(const char* cert_data)\n     return cert;\n }\n \n-\n //\n // Test payment request handling\n //\n@@ -30,7 +33,7 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n {\n     RecipientCatcher sigCatcher;\n     QObject::connect(server, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n-                     &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n+        &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n \n     // Write data to a temp file:\n     QTemporaryFile f;\n@@ -48,7 +51,7 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n     QCoreApplication::sendEvent(&object, &event);\n \n     QObject::disconnect(server, SIGNAL(receivedPaymentRequest(SendCoinsRecipient)),\n-                        &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n+        &sigCatcher, SLOT(getRecipient(SendCoinsRecipient)));\n \n     // Return results from sigCatcher\n     return sigCatcher.recipient;"
      },
      {
        "sha": "9b6400b0d58aed88cf19e7093e3e04044f6694fd",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef PAYMENTSERVERTESTS_H\n #define PAYMENTSERVERTESTS_H\n \n@@ -15,8 +19,8 @@ private slots:\n };\n \n // Dummy class to receive paymentserver signals.\n-// If SendCoinsRecipient was a proper QObject, then we could use\n-// QSignalSpy... but it's not.\n+// If SendCoinsRecipient was a proper QObject, then\n+// we could use QSignalSpy... but it's not.\n class RecipientCatcher : public QObject\n {\n     Q_OBJECT"
      },
      {
        "sha": "f2161c2f7931a0b33e7a3306d98558103e0c3ddd",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1,11 +1,16 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"uritests.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"paymentservertests.h\"\n #endif\n-#include \"uritests.h\"\n \n #include <QCoreApplication>\n #include <QObject>"
      },
      {
        "sha": "78a7b1b9b47ca78710725e5e17fead7f7f2dce9b",
        "filename": "src/qt/test/uritests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/uritests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/uritests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"uritests.h\"\n \n #include \"guiutil.h\""
      },
      {
        "sha": "1ea6d9f075eed968c2d3f2661b342184e4d799e9",
        "filename": "src/qt/test/uritests.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/uritests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/test/uritests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.h?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef URITESTS_H\n #define URITESTS_H\n "
      },
      {
        "sha": "20c1449c9248bd612a962c6f4641910aac3ba6e3",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -170,7 +170,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n \n     // Find the block the tx is in\n     CBlockIndex* pindex = NULL;\n-    std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(wtx.hashBlock);\n+    BlockMap::iterator mi = mapBlockIndex.find(wtx.hashBlock);\n     if (mi != mapBlockIndex.end())\n         pindex = (*mi).second;\n "
      },
      {
        "sha": "734c7afc4e5c84b7ab149a79beb1c009832093c2",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -394,19 +394,25 @@ QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx\n \n QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const\n {\n+    QString watchAddress;\n+    if (tooltip) {\n+        // Mark transactions involving watch-only addresses by adding \" (watch-only)\"\n+        watchAddress = wtx->involvesWatchAddress ? QString(\" (\") + tr(\"watch-only\") + QString(\")\") : \"\";\n+    }\n+\n     switch(wtx->type)\n     {\n     case TransactionRecord::RecvFromOther:\n-        return QString::fromStdString(wtx->address);\n+        return QString::fromStdString(wtx->address) + watchAddress;\n     case TransactionRecord::RecvWithAddress:\n     case TransactionRecord::SendToAddress:\n     case TransactionRecord::Generated:\n-        return lookupAddress(wtx->address, tooltip);\n+        return lookupAddress(wtx->address, tooltip) + watchAddress;\n     case TransactionRecord::SendToOther:\n-        return QString::fromStdString(wtx->address);\n+        return QString::fromStdString(wtx->address) + watchAddress;\n     case TransactionRecord::SendToSelf:\n     default:\n-        return tr(\"(n/a)\");\n+        return tr(\"(n/a)\") + watchAddress;\n     }\n }\n "
      },
      {
        "sha": "a7ba100cd20e975802b77bf493b20918139a707e",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -331,7 +331,7 @@ void TransactionView::exportClicked()\n     writer.setModel(transactionProxyModel);\n     writer.addColumn(tr(\"Confirmed\"), 0, TransactionTableModel::ConfirmedRole);\n     if (model && model->haveWatchOnly())\n-        writer.addColumn(tr(\"Watchonly\"), TransactionTableModel::Watchonly);\n+        writer.addColumn(tr(\"Watch-only\"), TransactionTableModel::Watchonly);\n     writer.addColumn(tr(\"Date\"), 0, TransactionTableModel::DateRole);\n     writer.addColumn(tr(\"Type\"), TransactionTableModel::Type, Qt::EditRole);\n     writer.addColumn(tr(\"Label\"), 0, TransactionTableModel::LabelRole);"
      },
      {
        "sha": "00a011d93790c157956bc96811f37914a9260ce9",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -256,7 +256,7 @@ public slots:\n     void updateTransaction(const QString &hash, int status);\n     /* New, updated or removed address book entry */\n     void updateAddressBook(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);\n-    /* Watchonly added */\n+    /* Watch-only added */\n     void updateWatchOnlyFlag(bool fHaveWatchonly);\n     /* Current, immature or unconfirmed balance might have changed - emit 'balanceChanged' if so */\n     void pollBalanceChanged();"
      },
      {
        "sha": "4b3beae20c1b37e0d12cf59562860ce910703e9b",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -392,7 +392,7 @@ Value gettxout(const Array& params, bool fHelp)\n     if (n<0 || (unsigned int)n>=coins.vout.size() || coins.vout[n].IsNull())\n         return Value::null;\n \n-    std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+    BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n     ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n     if ((unsigned int)coins.nHeight == MEMPOOL_HEIGHT)"
      },
      {
        "sha": "a73641834d803d43e4e24ac1b64461df37aaeb2c",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -88,7 +88,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n \n     if (hashBlock != 0) {\n         entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n-        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+        BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n             CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {"
      },
      {
        "sha": "100d6c2bd031a23b5d9a01faaccacf0d4aab5cc6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -1447,7 +1447,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n         uint256 blockId = 0;\n \n         blockId.SetHex(params[0].get_str());\n-        std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(blockId);\n+        BlockMap::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n             pindex = it->second;\n     }"
      },
      {
        "sha": "6bb9a5940047e3fde06d7354ff8efd29db2932a1",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -10,6 +10,7 @@\n #include <stdexcept>\n #include <stdint.h>\n #include <string>\n+#include <cstring>\n #include <vector>\n \n class uint_error : public std::runtime_error {\n@@ -215,8 +216,8 @@ class base_uint\n     friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }\n     friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }\n     friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n-    friend inline bool operator==(const base_uint& a, const base_uint& b) { return a.CompareTo(b) == 0; }\n-    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) != 0; }\n+    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n+    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n     friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n     friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n     friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }"
      },
      {
        "sha": "d3ad4869bbea1fc06afab6f40a71052c2077fafe",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/324c4dac7853c9711972d94903709842b64bcc37/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/324c4dac7853c9711972d94903709842b64bcc37/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=324c4dac7853c9711972d94903709842b64bcc37",
        "patch": "@@ -2113,7 +2113,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = (*it).second;\n-        std::map<uint256, CBlockIndex*>::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n+        BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n         if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n             // ... which are already in a block\n             int nHeight = blit->second->nHeight;\n@@ -2233,7 +2233,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n     }\n \n     // Is the tx in a block that's in the main chain\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+    BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n         return 0;\n     CBlockIndex* pindex = (*mi).second;\n@@ -2250,7 +2250,7 @@ int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n     AssertLockHeld(cs_main);\n \n     // Find the block it claims to be in\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+    BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n         return 0;\n     CBlockIndex* pindex = (*mi).second;"
      }
    ]
  },
  {
    "sha": "da86322ffbbef38dfc0d968694f0e4afb98fe924",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTg2MzIyZmZiYmVmMzhkZmMwZDk2ODY5NGYwZTRhZmI5OGZlOTI0",
    "commit": {
      "author": {
        "name": "himynameismartin",
        "email": "himynameismartin@gmail.com",
        "date": "2014-09-05T15:10:36Z"
      },
      "committer": {
        "name": "himynameismartin",
        "email": "himynameismartin@gmail.com",
        "date": "2014-09-05T15:10:36Z"
      },
      "message": "Added C++ syntax highlighting",
      "tree": {
        "sha": "011db7b3533d46013e12aa110d44ffd785f74aca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/011db7b3533d46013e12aa110d44ffd785f74aca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da86322ffbbef38dfc0d968694f0e4afb98fe924",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da86322ffbbef38dfc0d968694f0e4afb98fe924",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da86322ffbbef38dfc0d968694f0e4afb98fe924",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da86322ffbbef38dfc0d968694f0e4afb98fe924/comments",
    "author": {
      "login": "himynameismartin",
      "id": 368492,
      "node_id": "MDQ6VXNlcjM2ODQ5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/368492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/himynameismartin",
      "html_url": "https://github.com/himynameismartin",
      "followers_url": "https://api.github.com/users/himynameismartin/followers",
      "following_url": "https://api.github.com/users/himynameismartin/following{/other_user}",
      "gists_url": "https://api.github.com/users/himynameismartin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/himynameismartin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/himynameismartin/subscriptions",
      "organizations_url": "https://api.github.com/users/himynameismartin/orgs",
      "repos_url": "https://api.github.com/users/himynameismartin/repos",
      "events_url": "https://api.github.com/users/himynameismartin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/himynameismartin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "himynameismartin",
      "id": 368492,
      "node_id": "MDQ6VXNlcjM2ODQ5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/368492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/himynameismartin",
      "html_url": "https://github.com/himynameismartin",
      "followers_url": "https://api.github.com/users/himynameismartin/followers",
      "following_url": "https://api.github.com/users/himynameismartin/following{/other_user}",
      "gists_url": "https://api.github.com/users/himynameismartin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/himynameismartin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/himynameismartin/subscriptions",
      "organizations_url": "https://api.github.com/users/himynameismartin/orgs",
      "repos_url": "https://api.github.com/users/himynameismartin/repos",
      "events_url": "https://api.github.com/users/himynameismartin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/himynameismartin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "324c4dac7853c9711972d94903709842b64bcc37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/324c4dac7853c9711972d94903709842b64bcc37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/324c4dac7853c9711972d94903709842b64bcc37"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7185b7d1541dd5456c77a674242baa0d4cb7b56",
        "filename": "doc/multiwallet-qt.md",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da86322ffbbef38dfc0d968694f0e4afb98fe924/doc/multiwallet-qt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da86322ffbbef38dfc0d968694f0e4afb98fe924/doc/multiwallet-qt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiwallet-qt.md?ref=da86322ffbbef38dfc0d968694f0e4afb98fe924",
        "patch": "@@ -38,11 +38,15 @@ singleton BitcoinGUI instance called window. Formerly, BitcoinGUI kept a pointer\n The initial change required is very simple: rather than calling `window.setWalletModel(&walletModel);` we perform the\n following two steps:\n \n-\twindow.addWallet(\"~Default\", &walletModel);\n-\twindow.setCurrentWallet(\"~Default\");\n+```cpp\n+window.addWallet(\"~Default\", &walletModel);\n+window.setCurrentWallet(\"~Default\");\n+```\n \n The string parameter is just an arbitrary name given to the default wallet. It's been prepended with a tilde to avoid name collisions in the future with additional wallets.\n \n The shutdown call `window.setWalletModel(0)` has also been removed. In its place is now:\n \n+```cpp\n window.removeAllWallets();\n+```"
      }
    ]
  },
  {
    "sha": "08fbb7f762c867c4b4a814cacf2c66e388da3899",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGZiYjdmNzYyYzg2N2M0YjRhODE0Y2FjZjJjNjZlMzg4ZGEzODk5",
    "commit": {
      "author": {
        "name": "himynameismartin",
        "email": "himynameismartin@gmail.com",
        "date": "2014-09-05T15:15:39Z"
      },
      "committer": {
        "name": "himynameismartin",
        "email": "himynameismartin@gmail.com",
        "date": "2014-09-05T15:15:39Z"
      },
      "message": "Fixed a typo",
      "tree": {
        "sha": "2e428fdfc9faccf715c0bd957918f39c7cccbdd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e428fdfc9faccf715c0bd957918f39c7cccbdd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08fbb7f762c867c4b4a814cacf2c66e388da3899",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fbb7f762c867c4b4a814cacf2c66e388da3899",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08fbb7f762c867c4b4a814cacf2c66e388da3899",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08fbb7f762c867c4b4a814cacf2c66e388da3899/comments",
    "author": {
      "login": "himynameismartin",
      "id": 368492,
      "node_id": "MDQ6VXNlcjM2ODQ5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/368492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/himynameismartin",
      "html_url": "https://github.com/himynameismartin",
      "followers_url": "https://api.github.com/users/himynameismartin/followers",
      "following_url": "https://api.github.com/users/himynameismartin/following{/other_user}",
      "gists_url": "https://api.github.com/users/himynameismartin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/himynameismartin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/himynameismartin/subscriptions",
      "organizations_url": "https://api.github.com/users/himynameismartin/orgs",
      "repos_url": "https://api.github.com/users/himynameismartin/repos",
      "events_url": "https://api.github.com/users/himynameismartin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/himynameismartin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "himynameismartin",
      "id": 368492,
      "node_id": "MDQ6VXNlcjM2ODQ5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/368492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/himynameismartin",
      "html_url": "https://github.com/himynameismartin",
      "followers_url": "https://api.github.com/users/himynameismartin/followers",
      "following_url": "https://api.github.com/users/himynameismartin/following{/other_user}",
      "gists_url": "https://api.github.com/users/himynameismartin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/himynameismartin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/himynameismartin/subscriptions",
      "organizations_url": "https://api.github.com/users/himynameismartin/orgs",
      "repos_url": "https://api.github.com/users/himynameismartin/repos",
      "events_url": "https://api.github.com/users/himynameismartin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/himynameismartin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da86322ffbbef38dfc0d968694f0e4afb98fe924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da86322ffbbef38dfc0d968694f0e4afb98fe924",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da86322ffbbef38dfc0d968694f0e4afb98fe924"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "33c0fb0457b6fdf5b7d13892a9f48e4309478416",
        "filename": "doc/systemd.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08fbb7f762c867c4b4a814cacf2c66e388da3899/doc/systemd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08fbb7f762c867c4b4a814cacf2c66e388da3899/doc/systemd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/systemd.md?ref=08fbb7f762c867c4b4a814cacf2c66e388da3899",
        "patch": "@@ -21,7 +21,7 @@ to packager's needs.\n Daemon's config file is assumed to be located at /etc/bitcoind.conf (you can\n use contrib/debian/examples/bitcoin.conf as an example). Once installed, users\n must edit the file in order to update at least these two \n-values: rpcuser and rpcpassword . Failing to do so will make the daemon fail \n+values: rpcuser and rpcpassword. Failing to do so will make the daemon fail \n to boot. However, the message written to /var/lib/bitcoind/debug.log file is\n very helpful and no default values should be set:\n "
      }
    ]
  }
]