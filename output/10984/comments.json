[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322234015",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-322234015",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10984",
    "id": 322234015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjIzNDAxNQ==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-14T16:10:39Z",
    "updated_at": "2017-08-14T16:10:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and added a simple test",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/322234015/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332655400",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-332655400",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10984",
    "id": 332655400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY1NTQwMA==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-27T21:06:06Z",
    "updated_at": "2017-09-27T21:06:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332655400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332719048",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-332719048",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10984",
    "id": 332719048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjcxOTA0OA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-28T03:40:47Z",
    "updated_at": "2017-09-28T03:40:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice work!\r\nObviously concept ACK (have not looked closely at the code yet).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332719048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/347931952",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-347931952",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10984",
    "id": 347931952,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzkzMTk1Mg==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-29T17:19:31Z",
    "updated_at": "2017-11-29T17:19:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/347931952/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/785022734",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#issuecomment-785022734",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10984",
    "id": 785022734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTAyMjczNA==",
    "user": {
      "login": "iemwill",
      "id": 33894930,
      "node_id": "MDQ6VXNlcjMzODk0OTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33894930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iemwill",
      "html_url": "https://github.com/iemwill",
      "followers_url": "https://api.github.com/users/iemwill/followers",
      "following_url": "https://api.github.com/users/iemwill/following{/other_user}",
      "gists_url": "https://api.github.com/users/iemwill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iemwill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iemwill/subscriptions",
      "organizations_url": "https://api.github.com/users/iemwill/orgs",
      "repos_url": "https://api.github.com/users/iemwill/repos",
      "events_url": "https://api.github.com/users/iemwill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iemwill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-24T11:51:38Z",
    "updated_at": "2021-02-24T11:56:41Z",
    "author_association": "NONE",
    "body": "@TheBlueMatt \n> This is a (somewhat) simpler version of #9447 based on #10652.\n> \n> \n> \n> It allows for up to 2 simultaneous downloads of the same block at once, as long as the second one is using compact blocks and only has up to 10 transactions to request in a getblocktxn (if applicable).\n\nThe sentence above is controversial to itself.!\n\nEDIT: (not applicable)!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/785022734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143877477",
    "pull_request_review_id": 68453943,
    "id": 143877477,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Mzg3NzQ3Nw==",
    "diff_hunk": "@@ -260,51 +260,78 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n+// Requires cs_main\n+// Helper function for MarkBlockAsReceived and MarkBlockAsNotInFlight\n+static void ClearDownloadState(BlockDownloadMap::iterator itInFlight) {\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState *state = State(itInFlight->second.first);\n+    state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n+    if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n+        // Last validated block on the queue was received.\n+        nPeersWithValidatedDownloads--;\n+    }\n+    if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n+        // First block on the queue was received, update the start download time for the next one\n+        state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+    }\n+    state->vBlocksInFlight.erase(itInFlight->second.second);\n+    state->nBlocksInFlight--;\n+    state->nStallingSince = 0;\n+}\n+\n // Requires cs_main.\n+// Used to remove block from mmapBlocksInFlight and clear the download state for\n+// a block if for some reason block was not received. Download state clearing is\n+// skipped as an optimization in FinalizeNode.\n+static void MarkBlockAsNotInFlight(const uint256& hash, NodeId nodeid, bool clearState = true) {\n+    AssertLockHeld(cs_main);\n+\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;\n+        range.first++;\n+        if (itInFlight->second.first == nodeid) {\n+            if (clearState) ClearDownloadState(itInFlight);\n+            mmapBlocksInFlight.erase(itInFlight);",
    "path": "src/net_processing.cpp",
    "position": 55,
    "original_position": 55,
    "commit_id": "8acd39abf659241c70d257c7517d179559cc6951",
    "original_commit_id": "458feb36fcdb1ba36d82461262d276b0cfe7c4c6",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Loose `itInFlight`:\r\n```cpp\r\nwhile (range.first != range.second) {\r\n    if (range.first->second.first == nodeid) {\r\n        if (clearState) ClearDownloadState(range.first);\r\n        range.first = mmapBlocksInFlight.erase(range.first);\r\n    } else {\r\n        range.first++;\r\n    }\r\n}",
    "created_at": "2017-10-10T23:15:27Z",
    "updated_at": "2018-01-11T18:52:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r143877477",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143877477"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r143877477"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143877477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 343,
    "original_line": 343,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143878212",
    "pull_request_review_id": 68453943,
    "id": 143878212,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Mzg3ODIxMg==",
    "diff_hunk": "@@ -260,51 +260,78 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n+// Requires cs_main\n+// Helper function for MarkBlockAsReceived and MarkBlockAsNotInFlight\n+static void ClearDownloadState(BlockDownloadMap::iterator itInFlight) {\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState *state = State(itInFlight->second.first);\n+    state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n+    if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n+        // Last validated block on the queue was received.\n+        nPeersWithValidatedDownloads--;\n+    }\n+    if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n+        // First block on the queue was received, update the start download time for the next one\n+        state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+    }\n+    state->vBlocksInFlight.erase(itInFlight->second.second);\n+    state->nBlocksInFlight--;\n+    state->nStallingSince = 0;\n+}\n+\n // Requires cs_main.\n+// Used to remove block from mmapBlocksInFlight and clear the download state for\n+// a block if for some reason block was not received. Download state clearing is\n+// skipped as an optimization in FinalizeNode.\n+static void MarkBlockAsNotInFlight(const uint256& hash, NodeId nodeid, bool clearState = true) {\n+    AssertLockHeld(cs_main);\n+\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;\n+        range.first++;\n+        if (itInFlight->second.first == nodeid) {\n+            if (clearState) ClearDownloadState(itInFlight);\n+            mmapBlocksInFlight.erase(itInFlight);\n+        }\n+    }\n+}\n+\n // Returns a bool indicating whether we requested this block.\n-// Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n-    if (itInFlight != mapBlocksInFlight.end()) {\n-        CNodeState *state = State(itInFlight->second.first);\n-        assert(state != nullptr);\n-        state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n-        if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n-            // Last validated block on the queue was received.\n-            nPeersWithValidatedDownloads--;\n-        }\n-        if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n-            // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n-        }\n-        state->vBlocksInFlight.erase(itInFlight->second.second);\n-        state->nBlocksInFlight--;\n-        state->nStallingSince = 0;\n-        mapBlocksInFlight.erase(itInFlight);\n-        return true;\n-    }\n-    return false;\n+    LOCK(cs_main);\n+    bool found = false;\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 86,
    "commit_id": "8acd39abf659241c70d257c7517d179559cc6951",
    "original_commit_id": "458feb36fcdb1ba36d82461262d276b0cfe7c4c6",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Loose `found`:\r\n```cpp\r\nif (range.first == range.second) return false;\r\nwhile (range.first != range.second) {\r\n    ...\r\n}\r\nreturn true;\r\n```",
    "created_at": "2017-10-10T23:20:43Z",
    "updated_at": "2018-01-11T18:52:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r143878212",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143878212"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r143878212"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143878212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 353,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143878410",
    "pull_request_review_id": 68453943,
    "id": 143878410,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Mzg3ODQxMA==",
    "diff_hunk": "@@ -260,51 +260,78 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n+// Requires cs_main\n+// Helper function for MarkBlockAsReceived and MarkBlockAsNotInFlight\n+static void ClearDownloadState(BlockDownloadMap::iterator itInFlight) {\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState *state = State(itInFlight->second.first);\n+    state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n+    if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n+        // Last validated block on the queue was received.\n+        nPeersWithValidatedDownloads--;\n+    }\n+    if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n+        // First block on the queue was received, update the start download time for the next one\n+        state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+    }\n+    state->vBlocksInFlight.erase(itInFlight->second.second);\n+    state->nBlocksInFlight--;\n+    state->nStallingSince = 0;\n+}\n+\n // Requires cs_main.\n+// Used to remove block from mmapBlocksInFlight and clear the download state for\n+// a block if for some reason block was not received. Download state clearing is\n+// skipped as an optimization in FinalizeNode.\n+static void MarkBlockAsNotInFlight(const uint256& hash, NodeId nodeid, bool clearState = true) {\n+    AssertLockHeld(cs_main);\n+\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;\n+        range.first++;\n+        if (itInFlight->second.first == nodeid) {\n+            if (clearState) ClearDownloadState(itInFlight);\n+            mmapBlocksInFlight.erase(itInFlight);\n+        }\n+    }\n+}\n+\n // Returns a bool indicating whether we requested this block.\n-// Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n-    if (itInFlight != mapBlocksInFlight.end()) {\n-        CNodeState *state = State(itInFlight->second.first);\n-        assert(state != nullptr);\n-        state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n-        if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n-            // Last validated block on the queue was received.\n-            nPeersWithValidatedDownloads--;\n-        }\n-        if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n-            // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n-        }\n-        state->vBlocksInFlight.erase(itInFlight->second.second);\n-        state->nBlocksInFlight--;\n-        state->nStallingSince = 0;\n-        mapBlocksInFlight.erase(itInFlight);\n-        return true;\n-    }\n-    return false;\n+    LOCK(cs_main);\n+    bool found = false;\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        found = true;\n+        ClearDownloadState(range.first);\n+        range.first = mmapBlocksInFlight.erase(range.first);\n+    }\n+    return found;\n }\n \n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) {\n+    AssertLockHeld(cs_main);\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n     // Short-circuit most stuff in case its from the same node\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n-    if (itInFlight != mapBlocksInFlight.end() && itInFlight->second.first == nodeid) {\n-        if (pit) {\n-            *pit = &itInFlight->second.second;\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "8acd39abf659241c70d257c7517d179559cc6951",
    "original_commit_id": "458feb36fcdb1ba36d82461262d276b0cfe7c4c6",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same as above.",
    "created_at": "2017-10-10T23:22:05Z",
    "updated_at": "2018-01-11T18:52:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r143878410",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143878410"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r143878410"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143878410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 372,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161041433",
    "pull_request_review_id": 88266017,
    "id": 161041433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTA0MTQzMw==",
    "diff_hunk": "@@ -260,51 +260,78 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n+// Requires cs_main\n+// Helper function for MarkBlockAsReceived and MarkBlockAsNotInFlight\n+static void ClearDownloadState(BlockDownloadMap::iterator itInFlight) {\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState *state = State(itInFlight->second.first);\n+    state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n+    if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n+        // Last validated block on the queue was received.\n+        nPeersWithValidatedDownloads--;\n+    }\n+    if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n+        // First block on the queue was received, update the start download time for the next one\n+        state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+    }\n+    state->vBlocksInFlight.erase(itInFlight->second.second);\n+    state->nBlocksInFlight--;\n+    state->nStallingSince = 0;\n+}\n+\n // Requires cs_main.\n+// Used to remove block from mmapBlocksInFlight and clear the download state for\n+// a block if for some reason block was not received. Download state clearing is\n+// skipped as an optimization in FinalizeNode.\n+static void MarkBlockAsNotInFlight(const uint256& hash, NodeId nodeid, bool clearState = true) {\n+    AssertLockHeld(cs_main);\n+\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;\n+        range.first++;\n+        if (itInFlight->second.first == nodeid) {\n+            if (clearState) ClearDownloadState(itInFlight);\n+            mmapBlocksInFlight.erase(itInFlight);",
    "path": "src/net_processing.cpp",
    "position": 55,
    "original_position": 55,
    "commit_id": "8acd39abf659241c70d257c7517d179559cc6951",
    "original_commit_id": "458feb36fcdb1ba36d82461262d276b0cfe7c4c6",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Heh, thats more lines (and IMO less readable)...",
    "created_at": "2018-01-11T18:44:23Z",
    "updated_at": "2018-01-11T18:52:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r161041433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161041433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r161041433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161041433/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 343,
    "original_line": 343,
    "side": "RIGHT",
    "in_reply_to_id": 143877477
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161043474",
    "pull_request_review_id": 88268427,
    "id": 161043474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTA0MzQ3NA==",
    "diff_hunk": "@@ -260,51 +260,78 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n+// Requires cs_main\n+// Helper function for MarkBlockAsReceived and MarkBlockAsNotInFlight\n+static void ClearDownloadState(BlockDownloadMap::iterator itInFlight) {\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState *state = State(itInFlight->second.first);\n+    state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n+    if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n+        // Last validated block on the queue was received.\n+        nPeersWithValidatedDownloads--;\n+    }\n+    if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n+        // First block on the queue was received, update the start download time for the next one\n+        state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+    }\n+    state->vBlocksInFlight.erase(itInFlight->second.second);\n+    state->nBlocksInFlight--;\n+    state->nStallingSince = 0;\n+}\n+\n // Requires cs_main.\n+// Used to remove block from mmapBlocksInFlight and clear the download state for\n+// a block if for some reason block was not received. Download state clearing is\n+// skipped as an optimization in FinalizeNode.\n+static void MarkBlockAsNotInFlight(const uint256& hash, NodeId nodeid, bool clearState = true) {\n+    AssertLockHeld(cs_main);\n+\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;\n+        range.first++;\n+        if (itInFlight->second.first == nodeid) {\n+            if (clearState) ClearDownloadState(itInFlight);\n+            mmapBlocksInFlight.erase(itInFlight);\n+        }\n+    }\n+}\n+\n // Returns a bool indicating whether we requested this block.\n-// Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n-    if (itInFlight != mapBlocksInFlight.end()) {\n-        CNodeState *state = State(itInFlight->second.first);\n-        assert(state != nullptr);\n-        state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n-        if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n-            // Last validated block on the queue was received.\n-            nPeersWithValidatedDownloads--;\n-        }\n-        if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n-            // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n-        }\n-        state->vBlocksInFlight.erase(itInFlight->second.second);\n-        state->nBlocksInFlight--;\n-        state->nStallingSince = 0;\n-        mapBlocksInFlight.erase(itInFlight);\n-        return true;\n-    }\n-    return false;\n+    LOCK(cs_main);\n+    bool found = false;\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        found = true;\n+        ClearDownloadState(range.first);\n+        range.first = mmapBlocksInFlight.erase(range.first);\n+    }\n+    return found;\n }\n \n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) {\n+    AssertLockHeld(cs_main);\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n     // Short-circuit most stuff in case its from the same node\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n-    if (itInFlight != mapBlocksInFlight.end() && itInFlight->second.first == nodeid) {\n-        if (pit) {\n-            *pit = &itInFlight->second.second;\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 109,
    "commit_id": "8acd39abf659241c70d257c7517d179559cc6951",
    "original_commit_id": "458feb36fcdb1ba36d82461262d276b0cfe7c4c6",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2018-01-11T18:52:32Z",
    "updated_at": "2018-01-11T18:52:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r161043474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161043474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r161043474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161043474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 372,
    "side": "RIGHT",
    "in_reply_to_id": 143878410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161043482",
    "pull_request_review_id": 88268439,
    "id": 161043482,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTA0MzQ4Mg==",
    "diff_hunk": "@@ -260,51 +260,78 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n+// Requires cs_main\n+// Helper function for MarkBlockAsReceived and MarkBlockAsNotInFlight\n+static void ClearDownloadState(BlockDownloadMap::iterator itInFlight) {\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState *state = State(itInFlight->second.first);\n+    state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n+    if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n+        // Last validated block on the queue was received.\n+        nPeersWithValidatedDownloads--;\n+    }\n+    if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n+        // First block on the queue was received, update the start download time for the next one\n+        state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+    }\n+    state->vBlocksInFlight.erase(itInFlight->second.second);\n+    state->nBlocksInFlight--;\n+    state->nStallingSince = 0;\n+}\n+\n // Requires cs_main.\n+// Used to remove block from mmapBlocksInFlight and clear the download state for\n+// a block if for some reason block was not received. Download state clearing is\n+// skipped as an optimization in FinalizeNode.\n+static void MarkBlockAsNotInFlight(const uint256& hash, NodeId nodeid, bool clearState = true) {\n+    AssertLockHeld(cs_main);\n+\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {\n+        BlockDownloadMap::iterator itInFlight = range.first;\n+        range.first++;\n+        if (itInFlight->second.first == nodeid) {\n+            if (clearState) ClearDownloadState(itInFlight);\n+            mmapBlocksInFlight.erase(itInFlight);\n+        }\n+    }\n+}\n+\n // Returns a bool indicating whether we requested this block.\n-// Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n-    if (itInFlight != mapBlocksInFlight.end()) {\n-        CNodeState *state = State(itInFlight->second.first);\n-        assert(state != nullptr);\n-        state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n-        if (state->nBlocksInFlightValidHeaders == 0 && itInFlight->second.second->fValidatedHeaders) {\n-            // Last validated block on the queue was received.\n-            nPeersWithValidatedDownloads--;\n-        }\n-        if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n-            // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n-        }\n-        state->vBlocksInFlight.erase(itInFlight->second.second);\n-        state->nBlocksInFlight--;\n-        state->nStallingSince = 0;\n-        mapBlocksInFlight.erase(itInFlight);\n-        return true;\n-    }\n-    return false;\n+    LOCK(cs_main);\n+    bool found = false;\n+    std::pair<BlockDownloadMap::iterator, BlockDownloadMap::iterator> range = mmapBlocksInFlight.equal_range(hash);\n+    while (range.first != range.second) {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 86,
    "commit_id": "8acd39abf659241c70d257c7517d179559cc6951",
    "original_commit_id": "458feb36fcdb1ba36d82461262d276b0cfe7c4c6",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2018-01-11T18:52:33Z",
    "updated_at": "2018-01-11T18:52:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r161043482",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161043482"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10984#discussion_r161043482"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10984"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161043482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 353,
    "side": "RIGHT",
    "in_reply_to_id": 143878212
  }
]