[
  {
    "sha": "99e70751f23aa59ac297f6746dd8f09a140d48ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWU3MDc1MWYyM2FhNTlhYzI5N2Y2NzQ2ZGQ4ZjA5YTE0MGQ0OGFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-05T13:14:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-15T15:48:38Z"
      },
      "message": "Break circular dependency main \u2194 txdb\n\nBreak the circular dependency between main and txdb by:\n\n- Moving `CBlockFileInfo` from `main.h` to `chain.h`. I think this makes\n  sense, as the other block-file stuff is there too.\n\n- Moving `CDiskTxPos` from `main.h` to `txdb.h`. This type seems\n  specific to txdb.\n\n- Pass a functor `insertBlockIndex` to `LoadBlockIndexGuts`. This leaves\n  it up to the caller how to insert block indices.",
      "tree": {
        "sha": "2be46a38d1150ab1a07ba6871931194661464f0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2be46a38d1150ab1a07ba6871931194661464f0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99e70751f23aa59ac297f6746dd8f09a140d48ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e70751f23aa59ac297f6746dd8f09a140d48ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99e70751f23aa59ac297f6746dd8f09a140d48ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99e70751f23aa59ac297f6746dd8f09a140d48ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73fc922ed64333d45f18d8a448f30cfa2ae0281e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fc922ed64333d45f18d8a448f30cfa2ae0281e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73fc922ed64333d45f18d8a448f30cfa2ae0281e"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 87,
      "deletions": 89
    },
    "files": [
      {
        "sha": "e9da407e9917e5c397d7bb1b2afdd7c049acc47f",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=99e70751f23aa59ac297f6746dd8f09a140d48ae",
        "patch": "@@ -14,6 +14,60 @@\n \n #include <vector>\n \n+class CBlockFileInfo\n+{\n+public:\n+    unsigned int nBlocks;      //!< number of blocks stored in file\n+    unsigned int nSize;        //!< number of used bytes of block file\n+    unsigned int nUndoSize;    //!< number of used bytes in the undo file\n+    unsigned int nHeightFirst; //!< lowest height of block in file\n+    unsigned int nHeightLast;  //!< highest height of block in file\n+    uint64_t nTimeFirst;       //!< earliest time of block in file\n+    uint64_t nTimeLast;        //!< latest time of block in file\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(VARINT(nBlocks));\n+        READWRITE(VARINT(nSize));\n+        READWRITE(VARINT(nUndoSize));\n+        READWRITE(VARINT(nHeightFirst));\n+        READWRITE(VARINT(nHeightLast));\n+        READWRITE(VARINT(nTimeFirst));\n+        READWRITE(VARINT(nTimeLast));\n+    }\n+\n+     void SetNull() {\n+         nBlocks = 0;\n+         nSize = 0;\n+         nUndoSize = 0;\n+         nHeightFirst = 0;\n+         nHeightLast = 0;\n+         nTimeFirst = 0;\n+         nTimeLast = 0;\n+     }\n+\n+     CBlockFileInfo() {\n+         SetNull();\n+     }\n+\n+     std::string ToString() const;\n+\n+     /** update statistics (does not update nSize) */\n+     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {\n+         if (nBlocks==0 || nHeightFirst > nHeightIn)\n+             nHeightFirst = nHeightIn;\n+         if (nBlocks==0 || nTimeFirst > nTimeIn)\n+             nTimeFirst = nTimeIn;\n+         nBlocks++;\n+         if (nHeightIn > nHeightLast)\n+             nHeightLast = nHeightIn;\n+         if (nTimeIn > nTimeLast)\n+             nTimeLast = nTimeIn;\n+     }\n+};\n+\n struct CDiskBlockPos\n {\n     int nFile;"
      },
      {
        "sha": "2db726cb45dba517ce2906582b9b0d177a557720",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=99e70751f23aa59ac297f6746dd8f09a140d48ae",
        "patch": "@@ -3706,7 +3706,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n bool static LoadBlockIndexDB()\n {\n     const CChainParams& chainparams = Params();\n-    if (!pblocktree->LoadBlockIndexGuts())\n+    if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n         return false;\n \n     boost::this_thread::interruption_point();"
      },
      {
        "sha": "cd2009e28614c3251c23a55e1f8749915128c132",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 79,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=99e70751f23aa59ac297f6746dd8f09a140d48ae",
        "patch": "@@ -307,30 +307,6 @@ struct CNodeStateStats {\n     std::vector<int> vHeightInFlight;\n };\n \n-struct CDiskTxPos : public CDiskBlockPos\n-{\n-    unsigned int nTxOffset; // after header\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CDiskBlockPos*)this);\n-        READWRITE(VARINT(nTxOffset));\n-    }\n-\n-    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n-    }\n-\n-    CDiskTxPos() {\n-        SetNull();\n-    }\n-\n-    void SetNull() {\n-        CDiskBlockPos::SetNull();\n-        nTxOffset = 0;\n-    }\n-};\n \n \n /** \n@@ -469,61 +445,6 @@ bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockI\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n-\n-class CBlockFileInfo\n-{\n-public:\n-    unsigned int nBlocks;      //!< number of blocks stored in file\n-    unsigned int nSize;        //!< number of used bytes of block file\n-    unsigned int nUndoSize;    //!< number of used bytes in the undo file\n-    unsigned int nHeightFirst; //!< lowest height of block in file\n-    unsigned int nHeightLast;  //!< highest height of block in file\n-    uint64_t nTimeFirst;       //!< earliest time of block in file\n-    uint64_t nTimeLast;        //!< latest time of block in file\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(VARINT(nBlocks));\n-        READWRITE(VARINT(nSize));\n-        READWRITE(VARINT(nUndoSize));\n-        READWRITE(VARINT(nHeightFirst));\n-        READWRITE(VARINT(nHeightLast));\n-        READWRITE(VARINT(nTimeFirst));\n-        READWRITE(VARINT(nTimeLast));\n-    }\n-\n-     void SetNull() {\n-         nBlocks = 0;\n-         nSize = 0;\n-         nUndoSize = 0;\n-         nHeightFirst = 0;\n-         nHeightLast = 0;\n-         nTimeFirst = 0;\n-         nTimeLast = 0;\n-     }\n-\n-     CBlockFileInfo() {\n-         SetNull();\n-     }\n-\n-     std::string ToString() const;\n-\n-     /** update statistics (does not update nSize) */\n-     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {\n-         if (nBlocks==0 || nHeightFirst > nHeightIn)\n-             nHeightFirst = nHeightIn;\n-         if (nBlocks==0 || nTimeFirst > nTimeIn)\n-             nTimeFirst = nTimeIn;\n-         nBlocks++;\n-         if (nHeightIn > nHeightLast)\n-             nHeightLast = nHeightIn;\n-         if (nTimeIn > nTimeLast)\n-             nTimeLast = nTimeIn;\n-     }\n-};\n-\n /** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n class CVerifyDB {\n public:"
      },
      {
        "sha": "caa6bde38d6072fda1d3b84357beda2d8067b8b7",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=99e70751f23aa59ac297f6746dd8f09a140d48ae",
        "patch": "@@ -5,10 +5,8 @@\n \n #include \"txdb.h\"\n \n-#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"hash.h\"\n-#include \"main.h\"\n #include \"pow.h\"\n #include \"uint256.h\"\n \n@@ -177,7 +175,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     return true;\n }\n \n-bool CBlockTreeDB::LoadBlockIndexGuts()\n+bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n {\n     boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n \n@@ -191,8 +189,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n             CDiskBlockIndex diskindex;\n             if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object\n-                CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetBlockHash());\n-                pindexNew->pprev          = InsertBlockIndex(diskindex.hashPrev);\n+                CBlockIndex* pindexNew = insertBlockIndex(diskindex.GetBlockHash());\n+                pindexNew->pprev          = insertBlockIndex(diskindex.hashPrev);\n                 pindexNew->nHeight        = diskindex.nHeight;\n                 pindexNew->nFile          = diskindex.nFile;\n                 pindexNew->nDataPos       = diskindex.nDataPos;"
      },
      {
        "sha": "ce3c39d7fec11349353845d1601b0908fec51bd8",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 29,
        "deletions": 4,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99e70751f23aa59ac297f6746dd8f09a140d48ae/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=99e70751f23aa59ac297f6746dd8f09a140d48ae",
        "patch": "@@ -8,15 +8,17 @@\n \n #include \"coins.h\"\n #include \"dbwrapper.h\"\n+#include \"chain.h\"\n \n #include <map>\n #include <string>\n #include <utility>\n #include <vector>\n \n-class CBlockFileInfo;\n+#include <boost/function.hpp>\n+\n class CBlockIndex;\n-struct CDiskTxPos;\n+class CCoinsViewDBCursor;\n class uint256;\n \n //! -dbcache default (MiB)\n@@ -26,7 +28,30 @@ static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache in (MiB)\n static const int64_t nMinDbCache = 4;\n \n-class CCoinsViewDBCursor;\n+struct CDiskTxPos : public CDiskBlockPos\n+{\n+    unsigned int nTxOffset; // after header\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CDiskBlockPos*)this);\n+        READWRITE(VARINT(nTxOffset));\n+    }\n+\n+    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n+    }\n+\n+    CDiskTxPos() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        CDiskBlockPos::SetNull();\n+        nTxOffset = 0;\n+    }\n+};\n \n /** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n@@ -83,7 +108,7 @@ class CBlockTreeDB : public CDBWrapper\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n-    bool LoadBlockIndexGuts();\n+    bool LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n #endif // BITCOIN_TXDB_H"
      }
    ]
  }
]