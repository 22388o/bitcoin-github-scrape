[
  {
    "sha": "732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzJjN2JkZGViOWNkNGU5ZmU4MGViYjdlZTk4ZDBmOWZjYzZhOWQz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-19T10:37:05Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-19T21:35:56Z"
      },
      "message": "tests: Add test for CNetAddr::ToString IPv6 address formatting (RFC 5952)",
      "tree": {
        "sha": "5a045d4cdc919b11d9170eb87a6cb8b047261432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a045d4cdc919b11d9170eb87a6cb8b047261432"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3530d5d2d851d025b013b2ea79ed39a57cbbafcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3530d5d2d851d025b013b2ea79ed39a57cbbafcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3530d5d2d851d025b013b2ea79ed39a57cbbafcd"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "858b90b8b25a70e96842519f5aad4d36fe2b3096",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=732c7bddeb9cd4e9fe80ebb7ee98d0f9fcc6a9d3",
        "patch": "@@ -396,6 +396,60 @@ BOOST_AUTO_TEST_CASE(cnetaddr_basic)\n     BOOST_CHECK(!addr.SetSpecial(\"totally bogus\"));\n }\n \n+BOOST_AUTO_TEST_CASE(cnetaddr_tostring_canonical_ipv6)\n+{\n+    // Test that CNetAddr::ToString formats IPv6 addresses with zero compression as described in\n+    // RFC 5952 (\"A Recommendation for IPv6 Address Text Representation\").\n+    const std::map<std::string, std::string> canonical_representations_ipv6{\n+        {\"0000:0000:0000:0000:0000:0000:0000:0000\", \"::\"},\n+        {\"000:0000:000:00:0:00:000:0000\", \"::\"},\n+        {\"000:000:000:000:000:000:000:000\", \"::\"},\n+        {\"00:00:00:00:00:00:00:00\", \"::\"},\n+        {\"0:0:0:0:0:0:0:0\", \"::\"},\n+        {\"0:0:0:0:0:0:0:1\", \"::1\"},\n+        {\"2001:0:0:1:0:0:0:1\", \"2001:0:0:1::1\"},\n+        {\"2001:0db8:0:0:1:0:0:1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\", \"2001:db8:85a3::8a2e:370:7334\"},\n+        {\"2001:0db8::0001\", \"2001:db8::1\"},\n+        {\"2001:0db8::0001:0000\", \"2001:db8::1:0\"},\n+        {\"2001:0db8::1:0:0:1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:db8:0000:0:1::1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:db8:0000:1:1:1:1:1\", \"2001:db8:0:1:1:1:1:1\"},\n+        {\"2001:db8:0:0:0:0:2:1\", \"2001:db8::2:1\"},\n+        {\"2001:db8:0:0:0::1\", \"2001:db8::1\"},\n+        {\"2001:db8:0:0:1:0:0:1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:db8:0:0:1::1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:DB8:0:0:1::1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:db8:0:0::1\", \"2001:db8::1\"},\n+        {\"2001:db8:0:0:aaaa::1\", \"2001:db8::aaaa:0:0:1\"},\n+        {\"2001:db8:0:1:1:1:1:1\", \"2001:db8:0:1:1:1:1:1\"},\n+        {\"2001:db8:0::1\", \"2001:db8::1\"},\n+        {\"2001:db8:85a3:0:0:8a2e:370:7334\", \"2001:db8:85a3::8a2e:370:7334\"},\n+        {\"2001:db8::0:1\", \"2001:db8::1\"},\n+        {\"2001:db8::0:1:0:0:1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:DB8::1\", \"2001:db8::1\"},\n+        {\"2001:db8::1\", \"2001:db8::1\"},\n+        {\"2001:db8::1:0:0:1\", \"2001:db8::1:0:0:1\"},\n+        {\"2001:db8::1:1:1:1:1\", \"2001:db8:0:1:1:1:1:1\"},\n+        {\"2001:db8::aaaa:0:0:1\", \"2001:db8::aaaa:0:0:1\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:0:1\", \"2001:db8:aaaa:bbbb:cccc:dddd:0:1\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd::1\", \"2001:db8:aaaa:bbbb:cccc:dddd:0:1\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:eeee:0001\", \"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:eeee:001\", \"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:eeee:01\", \"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1\", \"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:eeee:aaaa\", \"2001:db8:aaaa:bbbb:cccc:dddd:eeee:aaaa\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:eeee:AAAA\", \"2001:db8:aaaa:bbbb:cccc:dddd:eeee:aaaa\"},\n+        {\"2001:db8:aaaa:bbbb:cccc:dddd:eeee:AaAa\", \"2001:db8:aaaa:bbbb:cccc:dddd:eeee:aaaa\"},\n+    };\n+    for (const auto& [input_address, expected_canonical_representation_output] : canonical_representations_ipv6) {\n+        CNetAddr net_addr;\n+        BOOST_REQUIRE(LookupHost(input_address, net_addr, false));\n+        BOOST_REQUIRE(net_addr.IsIPv6());\n+        BOOST_CHECK_EQUAL(net_addr.ToString(), expected_canonical_representation_output);\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(cnetaddr_serialize_v1)\n {\n     CNetAddr addr;"
      }
    ]
  }
]