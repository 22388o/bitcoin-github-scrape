DrahtBot,2021-02-15 08:44:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20874 (test: Run mempool_limit.py even with wallet disabled by stackman27)\n\nIf you consider this pull request important",https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-779060043,779060043,
fanquake,2021-04-01 08:50:11,@DariusParvin are you planning on following up with the review comments here?,https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-811757670,811757670,
DariusParvin,2021-04-02 20:58:58,"@fanquake Yes, thanks for prompting me, I'll push updates this weekend!",https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-812713184,812713184,
DariusParvin,2021-04-20 06:05:00,"I've addressed the comments, but since there are conflicting changes with #20874, it would probably make sense for that one to get merged first.",https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-822998617,822998617,
DariusParvin,2021-05-17 01:50:24,"@stackman27 thanks for your review! I added logs instead of comments, as you suggested. ",https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-841923462,841923462,
michaelfolkson,2021-05-17 11:29:41,"> I've addressed the comments, but since there are conflicting changes with #20874, it would probably make sense for that one to get merged first.\n\nIs this still waiting on #20874? Given Marco has reviewed this and not #20874 presumably this is closer to merging? ðŸ˜… \n\nedit: #20874 needs a rebase so yeah I think this is closer to merging. Obvious Concept ACK too btw.",https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-842248248,842248248,
michaelfolkson,2021-05-17 12:27:34,"The test is still skipped when wallet is disabled. I think you need to delete:\n\n```\ndef skip_test_if_missing_module(self):\n        self.skip_if_no_wallet()\n```",https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-842283896,842283896,
DariusParvin,2021-05-17 15:25:42,"@michaelfolkson oops! I removed those lines. And yes, since #21762 where `create_self_transfer` was added, this PR is relatively independent of everything else, so it's not waiting on anything. Cheers",https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-842416510,842416510,
michaelfolkson,2021-05-29 17:49:18,Re-ACK 163e8881e88a798462a60b5232a6b4ff62e1969a,https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-850872166,850872166,
MarcoFalke,2021-05-31 11:32:56,`s/disable/disabled/` in commit message 163e8881e88a798462a60b5232a6b4ff62e1969a,https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-851427023,851427023,
DariusParvin,2021-05-31 17:41:43,thanks @MarcoFalke! typo fixed and rebased,https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-851613165,851613165,
MarcoFalke,2021-06-01 13:04:45,cr ACK a3f0cbf82ddae2dd83001a9cc3a7948dcfb6fa47,https://github.com/bitcoin/bitcoin/pull/21178#issuecomment-852107614,852107614,
glozow,2021-02-16 13:41:55,this is not needed anymore i believe,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r576830729,576830729,test/functional/test_framework/wallet.py
glozow,2021-02-16 13:45:35,"nit\n```suggestion\n        timelock_tx, _ = wallet.create_self_transfer(\n            from_node=self.nodes[0],\n            utxo_to_spend=utxo,\n            locktime=self.nodes[0].getblockcount() + 2\n         )\n```",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r576833170,576833170,test/functional/mempool_reorg.py
glozow,2021-02-16 13:53:07,"Not sure if this is relevant to this PR or previous one, but I'm surprised the vsize is hard-coded? It should be programmatically obtained or asserted to be correct after it's constructed. There's a `get_vsize()` for `CTransaction`s in test_framework.messages",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r576838361,576838361,test/functional/test_framework/wallet.py
MarcoFalke,2021-02-16 15:37:20,"> asserted to be correct\n\nThere is an assertion: `assert_equal(tx_info['vsize'], vsize)`",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r576918272,576918272,test/functional/test_framework/wallet.py
MarcoFalke,2021-02-16 16:54:20,"Generating blocks takes a few seconds in valgrind, so I am thinking if this test may benefit from using `miniwallet.scan_blocks` (to be introduced in #21200)",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r576979517,576979517,test/functional/mempool_reorg.py
stackman27,2021-02-22 16:07:42,"nit: shouldn't the append be after `sendrawtx` as per [this](https://github.com/bitcoin/bitcoin/pull/21014#discussion_r575909995) comment \nðŸ¤”",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r580374456,580374456,test/functional/test_framework/wallet.py
stackman27,2021-02-22 16:11:27,I believe `tx_info` is being reused used in line 92 ,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r580377508,580377508,test/functional/test_framework/wallet.py
stackman27,2021-02-22 16:29:29,"I'm not very sure the intuition behind this but, can we just add everything in one variable and use key/value pairs to retrieve things? Seems cleaner to me and wouldn't have to include dead `_` every time I create a tx. For instance instead of doing `spend_101_raw, _ = wallet.create_self_transfer(from_node=self.nodes[0], utxo_to_spend=utxo_101)` we can simplt do       `spend_101_raw= wallet.create",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r580392460,580392460,test/functional/test_framework/wallet.py
stackman27,2021-02-22 16:31:37,"Also is there a need to recheck `testmempoolaccept`? Every time we call `send_self_transfer` it checks the mempool acceptance through `create_self_transfer` so, can we just return proper values and remove the additional check? ",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r580394186,580394186,test/functional/test_framework/wallet.py
DariusParvin,2021-04-05 05:12:55,good catch! I replaced it with `testmempoolaccept` with `FromHex` to get the txid and wtxid.,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r606922029,606922029,test/functional/test_framework/wallet.py
DariusParvin,2021-04-05 05:13:23,I had a go but I don't think it helps in this case since the pre-mined chain doesn't send the coinbase transaction to `self._address`. I made it little bit faster though by only mining 100 blocks instead of 200.,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r606922107,606922107,test/functional/mempool_reorg.py
DariusParvin,2021-04-05 05:13:33,switched it around!,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r606922141,606922141,test/functional/test_framework/wallet.py
DariusParvin,2021-04-05 05:13:45,done!,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r606922195,606922195,test/functional/test_framework/wallet.py
MarcoFalke,2021-04-20 07:01:16,"It should. Specifically the last 25 mature blocks (including block 100). And the last 25 immature blocks (including block 200), but you don't need those.",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r616397499,616397499,test/functional/mempool_reorg.py
MarcoFalke,2021-04-29 07:13:56,"Sorry, there was a bug. If you rebase, the bug should fix itself.",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r622789643,622789643,test/functional/mempool_reorg.py
DariusParvin,2021-05-17 01:11:59,"yes, it worked! I updated the PR to use `miniwallet.scan_blocks` starting from block 76.",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r633169672,633169672,test/functional/mempool_reorg.py
MarcoFalke,2021-05-17 07:20:42,"```suggestion\n        b = [self.nodes[0].getblockhash(n) for n in range(first_block, first_block+4)]\n```",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r633280595,633280595,test/functional/mempool_reorg.py
MarcoFalke,2021-05-17 15:39:58,Any reason you didn't fix this as well on the latest force push?,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r633644036,633644036,test/functional/mempool_reorg.py
DariusParvin,2021-05-17 17:08:13,"sorry i didn't see this comments, i'll fix it now!",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r633708888,633708888,test/functional/mempool_reorg.py
DariusParvin,2021-05-17 17:10:51,just pushed it. Thanks for the review,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r633710664,633710664,test/functional/mempool_reorg.py
michaelfolkson,2021-05-27 11:26:42,nit: s/invalidatblock/invalidateblock Might as well fix the typo,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r640534231,640534231,test/functional/mempool_reorg.py
DariusParvin,2021-05-27 20:49:59,"thanks! by the way, should I be squashing commits when making small fixes to the PR or will they get squashed at merge time?",https://github.com/bitcoin/bitcoin/pull/21178#discussion_r640956561,640956561,test/functional/mempool_reorg.py
michaelfolkson,2021-05-28 10:17:26,On this project we [squash commits](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) prior to review and merging. Obviously if there is a reason to have multiple commits then don't squash but in this case I don't think there should be a separate commit for a typo.,https://github.com/bitcoin/bitcoin/pull/21178#discussion_r641438939,641438939,test/functional/mempool_reorg.py
