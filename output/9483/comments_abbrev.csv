luke-jr,2017-01-06T17:14:13Z,"(Prefer if we don't propagate the misuse of ""SPV"" for things that don't support fraud proofs)",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-270953023,270953023,
gmaxwell,2017-01-06T21:24:55Z,"I kinda want to use an open lock icon instead of the likely meaningless to uses SPV in any case. \n\nWe also should do something about the confirmed counts in this mode. I'm not sure what. The issue is that confirmations mean less when you're not validating.  Perhaps displaying transactions like they are unconfirmed until they have 6 blocks might be the thing to do. Or displaying a visible ""not-",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271011343,271011343,
luke-jr,2017-01-06T23:42:05Z,"Indeed, I would assume any mode like this shouldn't count confirmation at all.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271040132,271040132,
dabura667,2017-01-07T05:05:56Z,"How about a flag for showing confirmations during SPV mode? Default to off.\n\nPeople who understand the implications and just don't want to bother having to search their address on an explorer can enable in the menu / config",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271063561,271063561,
luke-jr,2017-01-07T05:52:12Z,"@dabura667 Is it sufficient to simply show it in the transaction details dialog, perhaps?",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271065224,271065224,
dabura667,2017-01-07T09:13:34Z,"@luke-jr I would think so, yes.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271072461,271072461,
molxyz,2017-01-08T18:58:01Z,"On transactions screen, fully-confirmed receiving txs show only one confirmation, and fully-confirmed sending txs show ""unconfirmed"" with question marks.  \n![spv-txscreen](https://cloud.githubusercontent.com/assets/21127776/21752655/6e4431e0-d5aa-11e6-9493-141437b40085.png)\n",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271170997,271170997,
diegoviola,2017-01-08T19:45:06Z,"@molxyz I've also noticed the same thing, confirmations in Transactions list don't update, unless I restart Core.\n\nOther than that it works great.\n\nI used this for testing: `./bitcoin-qt -spv=1 -autorequestblocks=0 -testnet`.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271174040,271174040,
jonasschnelli,2017-01-08T21:35:41Z,Thanks for reporting. This seems to be a UI update issue. Will fix it in the next overhaul / PR update.,https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271181374,271181374,
luke-jr,2017-01-20T20:25:46Z,Thought: Can this be made to work with external wallets/software?,https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274171231,274171231,
jonasschnelli,2017-01-21T09:29:32Z,"> Thought: Can this be made to work with external wallets/software?\n\nI don't know what you mean by this.\nCan you make an use-case example?",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274250613,274250613,
jtimon,2017-01-24T14:12:47Z,"Needs rebase.\nConcept ACK\n\nWhat happens with -autorequestblocks=0 -spv=0?\nI assume both -spv and -autorequestblocks are 1 by default. With -spv=0 -autorequestblocks=1 you would get what you have today, but is it really so useful compared to -spv=1 -autorequestblocks=1 ?\n\nI don't know it seems overly complicated. I thought we would just have a single param spvonly that defaults to 0 (eq",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274812696,274812696,
jonasschnelli,2017-01-24T15:10:14Z,"Rebased.\n\n> What happens with -autorequestblocks=0 -spv=0?\n\nThis would result in a mode where no blocks are automatically requested (only headers are fetched).\n`autorequestblocks=0` is a debug option and I could imagine some interesting use-cases where you only want to fetch certain blocks with `requestblocks` RPC call.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274830852,274830852,
jonasschnelli,2017-01-24T20:12:44Z,"Adapted to work with bumpfee.\nAdded a fix for the UI update issue reported by @molxyz and @diegoviola (https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-271170997).",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-274924573,274924573,
ryanofsky,2017-02-09T22:47:29Z,"I reviewed all the commits and left many minor comments, but I have two broader concerns about this PR that may be worth some discussion:\n\n1) Architecture. It seems this change would be a lot simpler if it just added a `deque<const CBlockIndex*> blocksToDownloadFirst` net_processing variable that the wallet could add blocks to (through a function) and that net_processing code would process wit",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-278799990,278799990,
ryanofsky,2017-02-10T21:58:29Z,"To summarize my feedback above, here's what I think ideally would be next steps for this PR:\n\n- [ ] Get rid of the `CAuxiliaryBlockRequest` class and integrate prioritized block download logic directly into `net_processing.cpp` so more code responsible for regular and prioritized block downloads can be shared, and the wallet will not have to be involved in batching and sequencing p2p requests.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-279077608,279077608,
jonasschnelli,2017-07-11T10:07:42Z,"@ryanofsky: Thanks for your review and sorry for the late response.\n\n* About the idea of getting rid of `CAuxiliaryBlockRequest`:\nI think keeping it in a separate file/class allows simpler rebases. I expect to rebase that PR a lot. Also, clustering to much into net_processing would result against in a moster-class/Impl.-file that does everything net related. I think in terms of architecture,",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314397959,314397959,
ryanofsky,2017-07-11T17:26:20Z,"> About the idea of getting rid of CAuxiliaryBlockRequest\n\nSee https://github.com/bitcoin/bitcoin/pull/10794#issuecomment-314508746\n\n> Any objections calling this SPV mode?\n\nI don't like it, but I wouldn't object to a useful feature because it has a confusing name, and my complaints above are more about naming inconsistency than about this name in particular. Also, I wish you would res",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314514909,314514909,
sipa,2017-07-11T17:31:29Z,"@ryanofsky In early 2011, there was an incomplete feature in the codebase called ""client mode"", which probably was intended to be some sort of SPV version. It never got finished, and was eventually removed.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314516404,314516404,
ryanofsky,2017-07-11T17:36:17Z,That's interesting. I don't think client is a bad name either (seems pretty innocuous). I just hadn't heard it before.,https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-314517728,314517728,
nopara73,2017-11-11T17:54:18Z, What would be needed to progress this issue further?,https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-343682125,343682125,
jonasschnelli,2017-11-13T04:20:47Z,I have plans to soon re-do / overhaul the SPV work...,https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-343807661,343807661,
TheBlueMatt,2017-12-06T22:07:40Z,"Instead of headersChainActive, which seems hard to get to automatically reorg to the new-best-headers-chain after a block is found to be invalid when we get the full block, you may want to take a look at https://github.com/TheBlueMatt/bitcoin/commits/2017-10-best-header-tracking which should handle most of that work for you. ",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-349790765,349790765,
Sjors,2017-12-11T19:06:22Z,"I'll take a look after rebase. From the description:\n\n> requests and persist all blocks that are relevant for the wallet\n\nHow does it achieve this? BIP 37? In light of #11863, would it make sense to allow dropping in some arbitrary class that figures out which blocks to request?",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-350824738,350824738,
laanwj,2017-12-21T17:52:50Z,"> How does it achieve this? BIP 37? \n\nNo BIP37 involved here, to retain privacy uses full-block SPV mode. The relevant blocks are only those from the birthdate of the wallet on.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-353414933,353414933,
sipa,2018-03-06T18:33:50Z,"Sorry for the very late comment here, but I think this is introducing a lot of complexity and then building on top of it.\n\nI think a first step should be what @ryanofsky suggested above (""Get rid of the CAuxiliaryBlockRequest class and integrate prioritized block download logic directly into net_processing.cpp so more code responsible for regular and prioritized block downloads can be shared, ",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-370882003,370882003,
ryanofsky,2018-03-06T18:43:41Z,"> I think a first step should be what @ryanofsky suggested above (""Get rid of the CAuxiliaryBlockRequest class and integrate prioritized block download logic directly into net_processing.cpp so more code responsible for regular and prioritized block downloads can be shared, and the wallet will not have to be involved in batching and sequencing p2p requests."").\n\nThis is actually implemented in ",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-370884991,370884991,
ryanofsky,2018-03-23T18:45:03Z,"@TheBlueMatt pointed out at core dev that the sync implemented here sometimes can't recover from invalid blocks, and that basing this change on #12138 might fix this.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-375763906,375763906,
AlbertChanX,2018-06-05T00:46:31Z,"hey, how to run this version locally? thx",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-394544704,394544704,
Sjors,2018-06-15T10:23:31Z,"I'm also in favor of not using the word SPV in the PR description, which does not imply giving up on the term.\n\n<img width=""1146"" alt=""schermafbeelding 2018-06-15 om 12 14 15"" src=""https://user-images.githubusercontent.com/10217/41463137-a4f32750-7095-11e8-891e-114c5b8fe1da.png"">\n\nCan you clarify this:\n\n> Pure full block SPV mode is possible by setting -autorequestblocks=0, in that mod",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-397579541,397579541,
DrahtBot,2018-12-03T16:54:24Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-443782818,443782818,
BlockMechanic,2019-09-09T19:56:20Z,"Hi\n\nI've always liked the idea of the reference client ie core being available across all platforms. With my work on https://github.com/bitcoin/bitcoin/issues/16568 proving succeful for android , I'd like to request that an SPV mode be considered seriously for the next major release (0.20). I think ensuring that the core client is accesible across as many platforms (particularly mobile) is a p",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-529640078,529640078,
BlockMechanic,2019-10-05T18:02:28Z,"As we already sync headers , is there a reason to have a separate headers chain ?",https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-538674058,538674058,
ryanofsky,2017-01-24T22:43:26Z,"It would be nice if you could choose one of the terms ""nonvalidation"" ""nonvalidated"" and ""nvs"" and use it consistently everywhere in the code (personally I like ""nonvalidated""). Right now it seems like everything is named randomly and it's hard to remember what things are called.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r97670226,97670226,src/wallet/walletdb.h
ryanofsky,2017-01-24T22:50:21Z,"Comment is out of date. Could you update it to mention that this now checks the wallet, and also mention why it does this (maybe it should be obvious, but the reason isn't clear to me yet).",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r97671419,97671419,src/net_processing.cpp
ryanofsky,2017-01-24T22:54:59Z,"Any reason not to call this `FindTransaction` like the signal which it binds to? FindTransaction definitely seems like a better name given the implementation because if this method is called, it will return a transaction whether it is in the mempool or not.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r97672157,97672157,src/wallet/wallet.cpp
ryanofsky,2017-01-24T22:55:55Z,txsp = mi->second.tx; might be better to avoid a temporary.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r97672320,97672320,src/wallet/wallet.cpp
ryanofsky,2017-01-24T23:03:13Z,I think you can just make pNVSLastKnownBestHeader and pNVSBestBlock into const pointers to avoid these const_casts.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r97673509,97673509,src/wallet/wallet.cpp
ryanofsky,2017-01-24T23:05:25Z,"fInitialDownload isn't actually used, though maybe it is worth keeping if you plan to unify with the NotifyHeaderTip signal in the future.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r97673910,97673910,src/wallet/wallet.cpp
ryanofsky,2017-02-08T14:34:11Z,"I think it would be better if this class didn't exist, and the logic to download and process these blocks was integrated into the normal network processing logic instead of being segregated. This could mean:\n\n- Getting rid of the new `currentBlockRequest` global variable. Instead just add a simple `deque<const CBlockIndex*> blocksToDownloadFirst` or similar variable in `net_processing.cpp` alo",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100077677,100077677,src/auxiliaryblockrequest.h
ryanofsky,2017-02-08T16:02:01Z,Doxygen comment is now out of date.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100100096,100100096,src/validation.h
ryanofsky,2017-02-08T16:22:09Z,"Do you really want to skip this whole section just because blockRequest is not null? E.g. wouldn't it make sense to avoid WriteBlockToDisk below when fAlreadyHave is true like this is doing?\n\nAlso it's not clear to me whether `BLOCK_FAILED_VALID` and `setDirtyBlockIndex` below should be updated for blockRequest blocks. If you know that they should not be updated, it would be useful to have a c",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100105549,100105549,src/validation.cpp
ryanofsky,2017-02-08T18:31:03Z,"Why change signature of SyncTransaction when the value of the new argument can already be derived from pindex? It seems like it would make handling code clearer if the validated condition were written out there where it is actually used, instead of determined by the networking code and then passed along.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100135571,100135571,src/net_processing.h
ryanofsky,2017-02-08T18:38:58Z,"Maybe change ""is_cancled"" to ""cancelled"" (to be consistent with ""created""). Spelling error is also above in rpc documentation.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100137348,100137348,src/rpc/blockchain.cpp
ryanofsky,2017-02-08T18:58:01Z,"Can you explain what the the use-cases for this api are, and also what the use cases for the cancellation and SyncTransaction-suppressing options are? It doesn't seem good that this RPC can interfere with block download in spv mode and prevent transactions from getting to the wallet, but I can't figure out if this is designed to interact this way intentionally or if it is something that should be ",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100141701,100141701,src/rpc/blockchain.cpp
ryanofsky,2017-02-08T18:59:56Z,Maybe avoid copy with const &,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100142206,100142206,src/rpc/blockchain.cpp
ryanofsky,2017-02-08T19:12:29Z,"Probably should use ""pass_internally"" (underscore instead of dash) so the argument can be a valid identifier in python and other languages.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100144981,100144981,src/rpc/blockchain.cpp
ryanofsky,2017-02-08T21:11:54Z,"Seems like it makes sense to return ""headers-only-fork"" when `block->nChainTx == 0 && !headersChainActive.Contains(block)`, but I don't see how it makes sense to return ""headers-only"" when `block->nChainTx != 0 && headersChainActive.Contains(block)` instead of valid-fork or valid-headers when those conditions apply.\n\nMaybe this should be changed to:\n\n```\n} else if (block->nChainTx == 0) ",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100171010,100171010,src/rpc/blockchain.cpp
ryanofsky,2017-02-08T21:55:45Z,"`!pcoin->fValidated` seems like it might be too lax a condition, because the transaction could be from an orphaned block. \n\nAnd it's unclear why this change would have any desirable effect given that `GetDepthInMainChain` is updated in this commit to search headersChainActive, so presumably any nonvalidated transaction in headersChainActive would return true for IsTrusted.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100180187,100180187,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:06:52Z,Probably should just squash this commit (`Keep track of the headers chain tip to detect forks`) together with commit `Add full working SPV mode to the wallet` to avoid the code churn here.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100182392,100182392,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:07:55Z,Should just make pLastKnownBestHeader a pointer to const to avoid the need for this cast.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100182620,100182620,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:11:49Z,There's a race condition here where GetCurrentRequest() can return null between the first and second calls.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100183635,100183635,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:12:14Z,"double semicolon here, also probably should choose consistently between snake_case and camelCase for local variable names.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100183791,100183791,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:13:55Z,Maybe for (const auto& entry : mapKeyBirth),https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100184230,100184230,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:14:11Z,Maybe it->second,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100184301,100184301,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:23:46Z,Eliminate optional_timestamp argument? I don't see any calls where optional_timestamp is nonzero.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100186329,100186329,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:24:57Z,"As noted above, this case never seems to happen. But if it could happen, it would seem to negate all the code right above this, so maybe that code should be moved into an else.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100186596,100186596,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:30:34Z,No need for const_cast if you just make pNVSBestBlock a const pointer.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100187697,100187697,src/wallet/wallet.cpp
ryanofsky,2017-02-08T22:34:45Z,"Could switch to from vector to deque, or treat blocksToDownload as a circular buffer and call std::rotate after the loop to avoid O(n^2) cost of erasing from the beginning of a vector in a loop.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100188554,100188554,src/wallet/wallet.cpp
ryanofsky,2017-02-09T15:04:46Z,Maybe should throw if no arguments passed.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100325280,100325280,src/wallet/rpcwallet.cpp
ryanofsky,2017-02-09T15:08:05Z,"Seems incongruous that unlike the setting -spv option, enabling spv via RPC does not update `fFetchBlocksWhileFetchingHeaders`",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100326127,100326127,src/wallet/rpcwallet.cpp
ryanofsky,2017-02-09T15:11:25Z,"Seems incongruous that unlike setting the -spv option, toggling the spv mode in the GUI does not update `fFetchBlocksWhileFetchingHeaders`.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100326881,100326881,src/qt/walletmodel.cpp
ryanofsky,2017-02-09T16:59:14Z,"I think it would make the logic of this PR (and the code) clearer if both `fFetchBlocksWhileFetchingHeaders` and `fAutoRequestBlocks` flags were both handled inside of `FindNextBlocksToDownload`, instead of one flag handled inside, and one outside.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100354856,100354856,src/net_processing.cpp
ryanofsky,2017-02-09T17:24:21Z,Maybe rename `fFetchBlocksWhileFetchingHeaders` to `fRequestBlocksWhileFetchingHeaders` for consistency with `fAutoRequestBlocks`.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100361215,100361215,src/net_processing.h
ryanofsky,2017-02-09T17:25:04Z,Should 600 be 3600?,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100361396,100361396,src/net_processing.cpp
ryanofsky,2017-02-09T19:33:45Z,"Need to update the man page, too, I believe. Maybe also worth documenting that when -autorequestblocks is disabled, it only prevents blocks downloaded as part of the normal sync. It doesn't prevent downloading of blocks newer than the oldest wallet key in the -spv syncing code.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100392268,100392268,src/init.cpp
ryanofsky,2017-02-09T19:37:24Z,"spelling ""useful""",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100393126,100393126,src/net_processing.cpp
ryanofsky,2017-02-09T19:57:22Z,Const casts here should not be necessary if you declare pNVSLastKnownBestHeader and pNVSLastKnownBestHeader as pointers to const CBlockIndex objects.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100397625,100397625,src/wallet/wallet.cpp
ryanofsky,2017-02-09T20:03:54Z,"Seems to be a bug, this should probably say `!wtx.fValidated`.\n\nThis `CheckFinalTx(*wtx.tx, -1, !wtx.fValidated)` pattern is repeated enough times that I think it would be better if it were wrapped in a method:\n\n```\nbool CWalletTx::CheckFinal() const {\n    return CheckFinalTx(*tx, -1, !fValidated);\n}\n```",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100399039,100399039,src/wallet/rpcwallet.cpp
ryanofsky,2017-02-09T20:08:36Z,Maybe use make_shared.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100400047,100400047,src/wallet/wallet.cpp
ryanofsky,2017-02-09T20:17:49Z,"There's a race condition here if the state changes between the GetCurrentRequest() and setAsCurrentRequest() calls. Could easily be avoided by having setAsCurrentRequest return the overwrite bool, or a pointer to the previous request.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100401972,100401972,src/rpc/blockchain.cpp
ryanofsky,2017-02-09T20:20:34Z,Could use make_shared.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100402468,100402468,src/rpc/blockchain.cpp
ryanofsky,2017-02-09T20:28:00Z,Could just pass {} or nullptr for progress function instead of writing out the long lambda declaration.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100404045,100404045,src/rpc/blockchain.cpp
ryanofsky,2017-02-09T20:41:44Z,"`headersChainActive` variable doesn't seem to be defined yet. Should reorder this commit (""Allow CheckFinalTx() without validation using the headers chain"") after ""Add CChain object for headers-only chain.""",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100406742,100406742,src/validation.cpp
ryanofsky,2017-02-09T20:52:01Z,"Probably should just squash this ""CBlockRequest: make SyncTransaction() optional"" commit into ""Add CAuxiliaryBlockRequest, a class to handle auxiliary blocks downloads"" to avoid churn.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100408846,100408846,src/auxiliaryblockrequest.h
ryanofsky,2017-02-09T20:58:20Z,"Would be good to squash this ""[Wallet] don't consume non-validated transactions"" commit into the ""Pass CBlockRequest blocks through SyncTransaction signal"" to make commit order less fragile and review more straightforward.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100410117,100410117,src/wallet/wallet.cpp
ryanofsky,2017-02-09T20:59:35Z,Probably should throw if no arguments passed.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100410334,100410334,src/rpc/blockchain.cpp
ryanofsky,2017-02-09T21:05:05Z,Method looks like it could be const.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100411448,100411448,src/wallet/wallet.cpp
ryanofsky,2017-02-09T21:28:37Z,"Should probably squash this commit (`Little CAuxiliaryBlockRequest refactor`) into commit `Add CAuxiliaryBlockRequest, a class to handle auxiliary blocks downloads` to avoid code churn in the review.",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100416401,100416401,src/auxiliaryblockrequest.h
ryanofsky,2017-02-09T21:37:53Z,spelling: several,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r100418246,100418246,src/qt/forms/sendcoinsdialog.ui
jonasschnelli,2017-07-11T10:42:07Z,Good point.,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r126654061,126654061,src/net_processing.h
jonasschnelli,2017-07-11T12:21:27Z,"The use cases for the RPC `requestblocks` API:\nYou start your peer with `auto-download-blocks = false`, you will only sync the headers then. You can selectively download blocks and eventually pass them through the signal (== ZMQ), use cases: experiments, SPV, light-client backend, ideally if you have a full validated node within your network and you want to selectively load blocks from that node",https://github.com/bitcoin/bitcoin/pull/9483#discussion_r126671612,126671612,src/rpc/blockchain.cpp
jonasschnelli,2017-07-11T14:58:00Z,Would returning `true` be guaranteed then?,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r126714741,126714741,src/rpc/blockchain.cpp
practicalswift,2018-09-02T18:31:23Z,Typo found by `codespell`: cancled,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214549151,214549151,src/auxiliaryblockrequest.cpp
practicalswift,2018-09-02T18:31:47Z,Typo found by `codespell`: proccessed,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214549161,214549161,src/auxiliaryblockrequest.cpp
practicalswift,2018-09-02T18:32:13Z,Typo found by `codespell`: donwload annd privileg,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214549170,214549170,src/net_processing.cpp
practicalswift,2018-09-02T18:33:32Z,Typo found by `codespell`: wont,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214549204,214549204,src/net_processing.cpp
practicalswift,2018-09-02T18:34:27Z,This should be fixed throughout in this PR :-),https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214549225,214549225,src/auxiliaryblockrequest.cpp
practicalswift,2018-09-02T18:35:01Z,Typo found by `codespell`: usefull (also below),https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214549240,214549240,src/net_processing.cpp
Sjors,2018-09-03T08:59:02Z,Maybe we need a linter?,https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214618882,214618882,src/auxiliaryblockrequest.cpp
practicalswift,2018-09-03T09:06:14Z,@Sjors Please review #13954 which adds a `codespell` linter :-),https://github.com/bitcoin/bitcoin/pull/9483#discussion_r214620858,214620858,src/auxiliaryblockrequest.cpp
