[
  {
    "sha": "3a6364de88913b6bbf480c3ed1e17286528252ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTYzNjRkZTg4OTEzYjZiYmY0ODBjM2VkMWUxNzI4NjUyODI1MmNh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-16T09:01:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:00:30Z"
      },
      "message": "Add CAuxiliaryBlockRequest, a class to handle auxiliary blocks downloads\n\nThis is required for features that need to download and process block higher/further-away then the current validation depth",
      "tree": {
        "sha": "e70e816544d00bebad6bcd44bf33cd0ba4643b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e70e816544d00bebad6bcd44bf33cd0ba4643b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a6364de88913b6bbf480c3ed1e17286528252ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbA4ACgkQKdS8tkFv\nU+xtnw/9GwX+tX+S/wStiL2XUxnzVC16WdJ5gVBjhP1DFyTX4xwLiRx0mthWp9Lh\nX4hGuNlePpEPxd+GGtEq0Pf0DP3VzcjdIJDFaoWJtMukQoiBCurNusHlhhL9RtaU\nr8ZAujueFzETx5qxuCjs1cQHVsbbOyXBuTuQtBPjEvYxLHSw/8XFtO7Iw5fPk0pT\n5SkIsvHMjCZFfgBlQC5Jo5FyU+smSgTiPzXiTGywJs2+4AJI2c0f/KtVwqNkdx69\nhyMeySOlcXthdsDYE8/jFElHHYv+uxbgdVwr67iatSEzo1W89GAl7FGsjqRdf6zp\n43d3nciAHh0dqXvsdsq1v4+qLj94wIvfEWVVS0tSGFnZG3V8hbaLUV1DY1MWEkr9\nTI/o8ZJRh2kVMCSwqds+zPk/U5DmQUmvDYRC4s5WEnfCgLFyYIY4FjsfbfH8gYIL\ngsvm5FjVECLB8NLwOmGJtmxeuDQiiogDhQAfl2bAv6ykAEXed6xLSBdNG7UEjiic\n0lf+a3dgSMTH8Exo6eMoN1CdeDimWWjFgDlm/7NjplrHSyEaKHgBCfUUxTiwPR3Z\nFXeBTiXtZi9QH7NfPC/PAcKp6dUF/OaQN3XRoDLNVKBPFf72qPwI0ePkfgFRv4gU\nZYRDOvVw5s5PqmYa8kLCJkF4sUERzJq976I4jvVqtbD74JrhRV4=\n=p20X\n-----END PGP SIGNATURE-----",
        "payload": "tree e70e816544d00bebad6bcd44bf33cd0ba4643b3f\nparent 1ac878ace623d43993894b6de02fc83ef1df7093\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1481878877 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270030 +0100\n\nAdd CAuxiliaryBlockRequest, a class to handle auxiliary blocks downloads\n\nThis is required for features that need to download and process block higher/further-away then the current validation depth\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a6364de88913b6bbf480c3ed1e17286528252ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a6364de88913b6bbf480c3ed1e17286528252ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a6364de88913b6bbf480c3ed1e17286528252ca/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ac878ace623d43993894b6de02fc83ef1df7093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac878ace623d43993894b6de02fc83ef1df7093",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac878ace623d43993894b6de02fc83ef1df7093"
      }
    ],
    "stats": {
      "total": 325,
      "additions": 275,
      "deletions": 50
    },
    "files": [
      {
        "sha": "c6ec8b78372f8512f33933b155449b01758ed8eb",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a6364de88913b6bbf480c3ed1e17286528252ca/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a6364de88913b6bbf480c3ed1e17286528252ca/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3a6364de88913b6bbf480c3ed1e17286528252ca",
        "patch": "@@ -78,6 +78,7 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  auxiliaryblockrequest.h \\\n   base58.h \\\n   bloom.h \\\n   blockencodings.h \\\n@@ -177,6 +178,7 @@ libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   addrdb.cpp \\\n+  auxiliaryblockrequest.cpp \\\n   bloom.cpp \\\n   blockencodings.cpp \\\n   chain.cpp \\"
      },
      {
        "sha": "3fda42481d0faaac5eb1d00c11ad6d046479b5f8",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "added",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a6364de88913b6bbf480c3ed1e17286528252ca/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a6364de88913b6bbf480c3ed1e17286528252ca/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=3a6364de88913b6bbf480c3ed1e17286528252ca",
        "patch": "@@ -0,0 +1,126 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"auxiliaryblockrequest.h\"\n+\n+#include \"chainparams.h\"\n+#include \"validation.h\"\n+#include \"validationinterface.h\"\n+\n+#include <exception>\n+\n+static const unsigned int MAX_BLOCK_TO_PROCESS_PER_ITERATION = 5;\n+\n+std::shared_ptr<CAuxiliaryBlockRequest> currentBlockRequest; //thread-safe pointer (CAuxiliaryBlockRequest, the object, is also lock-free)\n+\n+CAuxiliaryBlockRequest::CAuxiliaryBlockRequest(std::vector<const CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+{\n+    fCancelled = false;\n+    requestedUpToSize = 0;\n+    processedUpToSize = 0;\n+}\n+\n+void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<const CBlock> pblock, CBlockIndex *pindex)\n+{\n+    // don't process anything if the request was cancled\n+    if (this->fCancelled)\n+        return;\n+\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        const CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n+        std::shared_ptr<const CBlock> currentBlock;\n+\n+        // if a block has been passed, check if is the next item in the sequence\n+        if (pindex && pblock && pindex == pindexRequest)\n+            currentBlock = pblock;\n+        else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n+            CBlock loadBlock;\n+            // we should already have this block on disk, process it\n+            if (!ReadBlockFromDisk(loadBlock, pindexRequest, Params().GetConsensus()))\n+                throw std::runtime_error(std::string(__func__) + \"Can't read block from disk\");\n+            currentBlock = std::make_shared<const CBlock>(loadBlock);\n+        } else {\n+            break;\n+        }\n+\n+        // fire signal with txns\n+        unsigned int cnt = 0;\n+        for(const auto& tx : currentBlock->vtx)\n+        {\n+            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt);\n+            cnt++;\n+        }\n+        this->processedUpToSize++;\n+\n+        // log some info\n+        LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n+\n+        if (progressCallback)\n+            if (!progressCallback(shared_from_this(), pindexRequest))\n+                this->cancel();\n+\n+        // release global block request pointer if request has been completed\n+        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+            currentBlockRequest = nullptr;\n+\n+        if (i-this->processedUpToSize >= MAX_BLOCK_TO_PROCESS_PER_ITERATION)\n+            break;\n+    }\n+}\n+\n+void CAuxiliaryBlockRequest::cancel()\n+{\n+    fCancelled = true;\n+    if (currentBlockRequest.get() == this) {\n+        // release shared pointer\n+        currentBlockRequest = nullptr;\n+    }\n+}\n+\n+bool CAuxiliaryBlockRequest::isCancelled()\n+{\n+    return fCancelled;\n+}\n+\n+void CAuxiliaryBlockRequest::setAsCurrentRequest()\n+{\n+    // if there is an existing block request, cancle it\n+    if (currentBlockRequest != nullptr)\n+        currentBlockRequest->fCancelled = true;\n+\n+    currentBlockRequest = shared_from_this();\n+}\n+\n+void CAuxiliaryBlockRequest::fillInNextBlocks(std::vector<const CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(const CBlockIndex*)> filterBlocksCallback)\n+{\n+    for (unsigned int i = this->processedUpToSize; i < this->vBlocksToDownload.size() ; i++) {\n+        const CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if ( filterBlocksCallback(pindex) && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n+            // the block was accepted by the filter, add it to the download queue\n+            vBlocks.push_back(pindex);\n+            if (vBlocks.size() == count) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    //try to process already available blocks through the signal\n+    this->processWithPossibleBlock(NULL, NULL);\n+}\n+\n+unsigned int CAuxiliaryBlockRequest::amountOfBlocksLoaded()\n+{\n+    unsigned int haveData = 0;\n+    for (unsigned int i = 0; i < this->vBlocksToDownload.size() ; i++) {\n+        const CBlockIndex *pindex = this->vBlocksToDownload[i];\n+        if (pindex->nStatus & BLOCK_HAVE_DATA)\n+            haveData++;\n+    }\n+    return haveData;\n+}\n+\n+std::shared_ptr<CAuxiliaryBlockRequest> CAuxiliaryBlockRequest::GetCurrentRequest()\n+{\n+    return currentBlockRequest;\n+}"
      },
      {
        "sha": "321ea920e57f75c49eca7353752c0136f1456e0e",
        "filename": "src/auxiliaryblockrequest.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a6364de88913b6bbf480c3ed1e17286528252ca/src/auxiliaryblockrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a6364de88913b6bbf480c3ed1e17286528252ca/src/auxiliaryblockrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.h?ref=3a6364de88913b6bbf480c3ed1e17286528252ca",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_AUXILIARYBLOCKREQUEST_H\n+#define BITCOIN_AUXILIARYBLOCKREQUEST_H\n+\n+#include <atomic>\n+#include \"chain.h\"\n+#include \"consensus/consensus.h\"\n+#include \"net.h\"\n+#include <stdint.h>\n+#include <vector>\n+\n+// \"Lock free\" auxiliary block request\n+class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlockRequest> {\n+public:\n+    std::atomic<size_t> requestedUpToSize; //requested up to this index in vBlocksToDownload\n+    std::atomic<size_t> processedUpToSize; //processed up to this index in vBlocksToDownload\n+\n+    const std::vector<const CBlockIndex*> vBlocksToDownload;\n+    const int64_t created; //!timestamp when the block request was created\n+\n+    /** Constructor of the lock free CAuxiliaryBlockRequest, vBlocksToDownloadIn remains constant */\n+    CAuxiliaryBlockRequest(std::vector<const CBlockIndex*> vBlocksToDownloadIn, int64_t created, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallbackIn);\n+\n+    /** Process the request, check if there are blocks available to \"stream\"\n+        over the SyncTransaction signal \n+        Allow to provide an optional block to avoid disk re-loading\n+     */\n+    void processWithPossibleBlock(const std::shared_ptr<const CBlock> pblock = nullptr, CBlockIndex *pindex = NULL);\n+\n+    /** Cancel the block request */\n+    void cancel();\n+    bool isCancelled();\n+\n+    /** Set as the current block request, invalidate/cancle the current one */\n+    void setAsCurrentRequest();\n+\n+    /** Fill next available, not already requested blocks into vBlocks\n+        allow to provide a function to check if block is already in flight somewhere */\n+    void fillInNextBlocks(std::vector<const CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(const CBlockIndex*)> filterBlocksCallback);\n+\n+    /** returns the amount of already loaded/local-stored blocks from this blockrequest */\n+    unsigned int amountOfBlocksLoaded();\n+\n+    /** Get the current main blockrequest, thread_safe */\n+    static std::shared_ptr<CAuxiliaryBlockRequest> GetCurrentRequest();\n+\n+private:\n+    const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallback; //! progress callback, with optional cancle mechanism (return false == cancel)\n+    std::atomic<bool> fCancelled;\n+};\n+\n+#endif // BITCOIN_AUXILIARYBLOCKREQUEST_H"
      },
      {
        "sha": "c55de9250e44c1de3154cfee0698f20f34cd147d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 11,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a6364de88913b6bbf480c3ed1e17286528252ca/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a6364de88913b6bbf480c3ed1e17286528252ca/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3a6364de88913b6bbf480c3ed1e17286528252ca",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"addrman.h\"\n #include \"arith_uint256.h\"\n+#include \"auxiliaryblockrequest.h\"\n #include \"blockencodings.h\"\n #include \"chainparams.h\"\n #include \"consensus/validation.h\"\n@@ -107,6 +108,7 @@ namespace {\n         const CBlockIndex* pindex;                               //!< Optional.\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest;             //!< Optional, used for auxiliary block downloads\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n@@ -309,7 +311,13 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n // Requires cs_main.\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n-bool MarkBlockAsReceived(const uint256& hash) {\n+\n+struct MarkBlockAsReceivedResult {\n+    bool fRequested;\n+    std::shared_ptr<CAuxiliaryBlockRequest> blockRequest;\n+};\n+\n+const MarkBlockAsReceivedResult MarkBlockAsReceived(const uint256& hash) {\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n@@ -322,19 +330,20 @@ bool MarkBlockAsReceived(const uint256& hash) {\n             // First block on the queue was received, update the start download time for the next one\n             state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n         }\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = itInFlight->second.second->blockRequest;\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n         mapBlocksInFlight.erase(itInFlight);\n-        return true;\n+        return {true, blockRequest};\n     }\n-    return false;\n+    return {false, nullptr};\n }\n \n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = {}) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n@@ -349,7 +358,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Pa\n     MarkBlockAsReceived(hash);\n \n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n-            {hash, pindex, pindex != NULL, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : NULL)});\n+            {hash, pindex, pindex != NULL, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : NULL), blockRequest});\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n@@ -470,7 +479,7 @@ const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex*\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n+void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest) {\n     if (count == 0)\n         return;\n \n@@ -481,6 +490,23 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n+    // if there is an open CAuxiliaryBlockRequest (out-of-band/specific block donwload), privileg it\n+    if (blockRequest && !blockRequest->isCancelled()) {\n+        // fill in next blocks to download, pass in a filter function to check mapBlocksInFlight\n+        blockRequest->fillInNextBlocks(vBlocks, count, [state](const CBlockIndex *pIndexCheck) -> bool {\n+            // make sure the remote node has this block\n+            // we have already verified the chainWork through the headers-sync\n+            // lets just compare heights\n+            // missing blocks will lead to a time-out/missbehave and re-request (from different peer) (TODO: check)\n+            if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nHeight < pIndexCheck->nHeight)\n+                return false;\n+            return (mapBlocksInFlight.count(pIndexCheck->GetBlockHash()) == 0);\n+        });\n+\n+        // if we haven't completed the individual CAuxiliaryBlockRequest, we wont continue with \"normal\" IBD\n+        return;\n+    }\n+\n     if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork) {\n         // This peer has nothing interesting.\n         return;\n@@ -2321,18 +2347,22 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = nullptr;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            MarkBlockAsReceivedResult result;\n+            result = MarkBlockAsReceived(hash);\n+            forceProcessing |= result.fRequested;\n+            blockRequest = result.blockRequest;\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock, blockRequest);\n         if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n     }\n@@ -3151,12 +3181,13 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n+            std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = CAuxiliaryBlockRequest::GetCurrentRequest();\n+            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams, blockRequest);\n             BOOST_FOREACH(const CBlockIndex *pindex, vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex, NULL, blockRequest);\n+                LogPrint(\"net\", \"Requesting%s block %s (%d) peer=%d\\n\", (blockRequest ? \" (auxiliary/SPV)\" : \" \"), pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {"
      },
      {
        "sha": "57717625bb998fff8183ab6afb6aeaa22c2b2bbc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 38,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a6364de88913b6bbf480c3ed1e17286528252ca/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a6364de88913b6bbf480c3ed1e17286528252ca/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3a6364de88913b6bbf480c3ed1e17286528252ca",
        "patch": "@@ -3147,7 +3147,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock, bool onlyHeaderCheck = false)\n {\n     const CBlock& block = *pblock;\n \n@@ -3160,40 +3160,47 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     if (!AcceptBlockHeader(block, state, chainparams, &pindex))\n         return false;\n \n-    // Try to process all requested blocks that we don't have, but only\n-    // process an unrequested block if it's new and has enough work to\n-    // advance our tip, and isn't too many blocks ahead.\n-    bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n-    // Blocks that are too out-of-order needlessly limit the effectiveness of\n-    // pruning, because pruning will not delete block files that contain any\n-    // blocks which are too close in height to the tip.  Apply this test\n-    // regardless of whether pruning is enabled; it should generally be safe to\n-    // not process unrequested blocks.\n-    bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n-\n-    // TODO: Decouple this function from the block download logic by removing fRequested\n-    // This requires some new chain datastructure to efficiently look up if a\n-    // block is in a chain leading to a candidate for best tip, despite not\n-    // being such a candidate itself.\n-\n-    // TODO: deal better with return value and error conditions for duplicate\n-    // and unrequested blocks.\n-    if (fAlreadyHave) return true;\n-    if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n-        if (!fHasMoreWork) return true;     // Don't process less-work chains\n-        if (fTooFarAhead) return true;      // Block height is too high\n-    }\n-    if (fNewBlock) *fNewBlock = true;\n-\n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n-        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n-        if (state.IsInvalid() && !state.CorruptionPossible()) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            setDirtyBlockIndex.insert(pindex);\n+    // don't validate the block if we fetch it with a auxiliary CAuxiliaryBlockRequest\n+    if (onlyHeaderCheck) {\n+        LogPrint(\"net\", \"Accept specific block %s (%d)\\n\", pindex->GetBlockHash().ToString(), pindex->nHeight);\n+    }\n+    else\n+    {\n+        // Try to process all requested blocks that we don't have, but only\n+        // process an unrequested block if it's new and has enough work to\n+        // advance our tip, and isn't too many blocks ahead.\n+        bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n+        bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+        // Blocks that are too out-of-order needlessly limit the effectiveness of\n+        // pruning, because pruning will not delete block files that contain any\n+        // blocks which are too close in height to the tip.  Apply this test\n+        // regardless of whether pruning is enabled; it should generally be safe to\n+        // not process unrequested blocks.\n+        bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n+\n+        // TODO: Decouple this function from the block download logic by removing fRequested\n+        // This requires some new chain datastructure to efficiently look up if a\n+        // block is in a chain leading to a candidate for best tip, despite not\n+        // being such a candidate itself.\n+\n+        // TODO: deal better with return value and error conditions for duplicate\n+        // and unrequested blocks.\n+        if (fAlreadyHave) return true;\n+        if (!fRequested) {  // If we didn't ask for it:\n+            if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n+            if (!fHasMoreWork) return true;     // Don't process less-work chains\n+            if (fTooFarAhead) return true;      // Block height is too high\n+        }\n+        if (fNewBlock) *fNewBlock = true;\n+\n+        if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+            !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n+            if (state.IsInvalid() && !state.CorruptionPossible()) {\n+                pindex->nStatus |= BLOCK_FAILED_VALID;\n+                setDirtyBlockIndex.insert(pindex);\n+            }\n+            return error(\"%s: %s\", __func__, FormatStateMessage(state));\n         }\n-        return error(\"%s: %s\", __func__, FormatStateMessage(state));\n     }\n \n     // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n@@ -3226,27 +3233,30 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest)\n {\n+    CBlockIndex *pindex = NULL;\n     {\n         LOCK(cs_main);\n \n         // Store to disk\n-        CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        bool ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock, (blockRequest != nullptr));\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n         }\n     }\n \n+    if (blockRequest)\n+        blockRequest->processWithPossibleBlock(pblock, pindex);\n+\n     NotifyHeaderTip();\n \n     CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!ActivateBestChain(state, chainparams, pblock))\n+    if (!blockRequest && !ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;"
      },
      {
        "sha": "8eb4d1afcf166f19e0e071592611619af9ac6db7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a6364de88913b6bbf480c3ed1e17286528252ca/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a6364de88913b6bbf480c3ed1e17286528252ca/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3a6364de88913b6bbf480c3ed1e17286528252ca",
        "patch": "@@ -11,6 +11,7 @@\n #endif\n \n #include \"amount.h\"\n+#include \"auxiliaryblockrequest.h\"\n #include \"chain.h\"\n #include \"coins.h\"\n #include \"protocol.h\" // For CMessageHeader::MessageStartChars\n@@ -231,7 +232,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock, std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = nullptr);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "340e363a7f229e42a02badbbb8ab26f5ed5a5215",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDBlMzYzYTdmMjI5ZTQyYTAyYmFkYmJiOGFiMjZmNWVkNWE1MjE1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-15T16:27:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:00:30Z"
      },
      "message": "Pass CBlockRequest blocks through SyncTransaction signal\n\n+ Adds a validate=true|false to the SyncTransaction signal",
      "tree": {
        "sha": "33e13cee9f53c4d39acee782cc5ec5c849ca5f4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33e13cee9f53c4d39acee782cc5ec5c849ca5f4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/340e363a7f229e42a02badbbb8ab26f5ed5a5215",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbA4ACgkQKdS8tkFv\nU+zLOA/8DDOiO14G0p1mpg7LJSHJVte6UJ07Op5pldVN912AErVzkLplHE2rQVzt\n3D8CB1nXHWvkNV+qCPhqOKBFMBsCKNesbfBVOX73fcIrTQSZaTnAOjenWVdh3eY4\nam6zAVoxccnWnFbX2DT5yzBw1rkDIemaBQmy/03zbn5Nos7UFdJsfVQ3Kk8AMkjw\nplaBMtNHxrUNMpCWEXnNEkGMXDbje7pYtjzJYF1Govuij2gfsb1K2cz79cqLyMpJ\nHYmdw/I2zEHGjlmz2UDqOMM7Q9UT7AaSb3ljvDUfJBCgirw+v2sbmaK42CAZB1JD\nztgOAGfcv7nCAhLcjHOerqwFq3tLI2XocoCLQJVaQwl259A9UAnkAtRItK8OZQUu\nUG+QN6IfY6kvn6MZGoApgmDC96gUwZLxSTACZFo3ZkzV0NfNth5SSrHNQdM6InPO\nsct8SOZHxFLsXhB0LDdGMUGvyxLHSv8SSddY8EtBXdkhCU5+zFboE4v7sDX+gcsi\nXLenxHbVEboMQNsDZPTU6KQIGqHGmgJYbaQSSmtACL3grOH4IUBHISR8Y4gyqn3r\nVMRdmNy3n0S5cRrrFZ6AIKmkHVcg6iY6Cc0t2KgWpAMK3ATS4vknsMm7FF4tzCrn\nDBBSKOwNtZ+xAjQTGCYDpUT5zMCfCzOiio8imnzD5OElGgXbf3I=\n=me8D\n-----END PGP SIGNATURE-----",
        "payload": "tree 33e13cee9f53c4d39acee782cc5ec5c849ca5f4e\nparent 3a6364de88913b6bbf480c3ed1e17286528252ca\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479227252 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270030 +0100\n\nPass CBlockRequest blocks through SyncTransaction signal\n\n+ Adds a validate=true|false to the SyncTransaction signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340e363a7f229e42a02badbbb8ab26f5ed5a5215",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/340e363a7f229e42a02badbbb8ab26f5ed5a5215",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340e363a7f229e42a02badbbb8ab26f5ed5a5215/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a6364de88913b6bbf480c3ed1e17286528252ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a6364de88913b6bbf480c3ed1e17286528252ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a6364de88913b6bbf480c3ed1e17286528252ca"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 21,
      "deletions": 16
    },
    "files": [
      {
        "sha": "21e8f3385d9fe55f4c8a0d0cc0e01d09da4b97af",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -48,7 +48,8 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n         unsigned int cnt = 0;\n         for(const auto& tx : currentBlock->vtx)\n         {\n-            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt);\n+            bool valid = ((pindexRequest->nStatus & BLOCK_VALID_MASK) == BLOCK_VALID_MASK);\n+            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt, valid);\n             cnt++;\n         }\n         this->processedUpToSize++;"
      },
      {
        "sha": "531de3cb11dad53d99d0052f9398321fb9f43bf3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -771,8 +771,8 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanI\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n }\n \n-void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock) {\n-    if (nPosInBlock == CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK)\n+void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock, bool validated) {\n+    if (nPosInBlock == CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK || !validated)\n         return;\n \n     LOCK(cs_main);"
      },
      {
        "sha": "809dc80af051e2f02b92ce8ff59812b926b69628",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -30,7 +30,7 @@ class PeerLogicValidation : public CValidationInterface {\n public:\n     PeerLogicValidation(CConnman* connmanIn);\n \n-    virtual void SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock);\n+    virtual void SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock, bool validated);\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock);"
      },
      {
        "sha": "4d78f1dfe08f5ff084e1ab1028943e69b57abc27",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -184,7 +184,7 @@ class MemPoolConflictRemovalTracker\n     ~MemPoolConflictRemovalTracker() {\n         pool.NotifyEntryRemoved.disconnect(boost::bind(&MemPoolConflictRemovalTracker::NotifyEntryRemoved, this, _1, _2));\n         for (const auto& tx : conflictedTxs) {\n-            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+            GetMainSignals().SyncTransaction(*tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK, true);\n         }\n         conflictedTxs.clear();\n     }\n@@ -1007,7 +1007,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK, true);\n \n     return true;\n }\n@@ -2217,7 +2217,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     for (const auto& tx : block.vtx) {\n-        GetMainSignals().SyncTransaction(*tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+        GetMainSignals().SyncTransaction(*tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK, true);\n     }\n     return true;\n }\n@@ -2525,7 +2525,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);\n                 for (unsigned int i = 0; i < block.vtx.size(); i++)\n-                    GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n+                    GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i, true);\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip)."
      },
      {
        "sha": "bd817d94875f9f161d36f5f5d5cf162ba00d7f95",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -14,7 +14,7 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3, _4));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -33,7 +33,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3, _4));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }"
      },
      {
        "sha": "cc73e29d4a8db27bdce5ab911662469723453e61",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -33,7 +33,7 @@ void UnregisterAllValidationInterfaces();\n class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock, bool validated = true) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -60,7 +60,7 @@ struct CMainSignals {\n      * transaction was accepted to mempool, removed from mempool (only when\n      * removal was due to conflict from connected block), or appeared in a\n      * disconnected block.*/\n-    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n+    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock, bool validated)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "316a57e99d0a2b2cd66dce62bb858cf6f8615d5c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -1165,7 +1165,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated)\n {\n     LOCK2(cs_main, cs_wallet);\n "
      },
      {
        "sha": "7db9fd959118e22f96e1ca62037a5391df0a09aa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -763,8 +763,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);"
      },
      {
        "sha": "ad9559dd05b3880745ccaa02af9840d147a026be",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -144,8 +144,12 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, co\n     }\n }\n \n-void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int posInBlock)\n+void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int posInBlock, bool validated)\n {\n+    // don't post non-validated tx for now\n+    if (!validated)\n+        return;\n+\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {\n         CZMQAbstractNotifier *notifier = *i;"
      },
      {
        "sha": "31547664afc8ec218350228e7d7a6e4ab9fcac3f",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340e363a7f229e42a02badbbb8ab26f5ed5a5215/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "patch": "@@ -24,7 +24,7 @@ class CZMQNotificationInterface : public CValidationInterface\n     void Shutdown();\n \n     // CValidationInterface\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated);\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n \n private:"
      }
    ]
  },
  {
    "sha": "ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTk5MTk3YWVmMWJhM2JkYTVmNWFiMzJkY2QyN2M2YzQ2ZTlhN2Yw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-16T07:56:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:00:30Z"
      },
      "message": "CBlockRequest: make SyncTransaction() optional",
      "tree": {
        "sha": "45d7990c6c2aa818a795e1d8d9af84c84cbbe862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45d7990c6c2aa818a795e1d8d9af84c84cbbe862"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbA4ACgkQKdS8tkFv\nU+w/1w//QXfMFV9qjETPZ+lBE/6607W7JmgoaS+1DSFStg0DxkH8XRKodX+bA5yW\n5bfi9pM2yVAgHzIxbm3pjzDnkZ4ROI8/k5XUgzLxBgd9mltA9n16VhWNA19lvGWZ\nAxkXaI7auf8m/tjmIdxHXLgfR2lA9Gd7adpSeKnORoyA6M5FyE+Vqe+lKzKGg3b1\nEbLE0caCl2X9gSZePFFocyIDjUbqOrU+rJtQuqFtSPZH3Dn8l0CCqDh1XRHGM+F3\nv7t5jOuMZKdcNDS1u2CPGGMmOFLJuZktoIWMdDrMLQnzlL5Om6GD+3JItZBPv9E+\n/KBOzGD9MhkzS8KJl7rsOrg1ZfoyPmr9zWgivKlZMMsC96WJfTLepczwDGYM2Roh\nyXPnM9775hjqS3ZGx9crWLDF6u1IaIhW+KRvZxQGL6T2uY2AgC4ysri05wg2f36G\n9RGC35M0kRtrcsYdkfPHKLpLtG3rg4ztu7dkSvAw7rpCfvUSOrYansY0WYmLUmlK\nWgFKJMYBYHcB8SsU4e/212aTw9heQqMzizeA6CKF6887N5mm3XWr0fSQvKJIXOvX\n9QNhX8Q8Aul6dMreROsp9A1HFRRUT5Kjw7WW6XT1KVKvUAXQ1BoAlQBhZJqtQltE\n7jw3LIXJr7f+yTogxdJ3NMSf7KMvMFmxez7fg0PwjhGeW3oEo+E=\n=lWfV\n-----END PGP SIGNATURE-----",
        "payload": "tree 45d7990c6c2aa818a795e1d8d9af84c84cbbe862\nparent 340e363a7f229e42a02badbbb8ab26f5ed5a5215\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479283004 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270030 +0100\n\nCBlockRequest: make SyncTransaction() optional\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340e363a7f229e42a02badbbb8ab26f5ed5a5215",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/340e363a7f229e42a02badbbb8ab26f5ed5a5215"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f3169f740e40bd4ebcdb53c4bb6426b3d038de59",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
        "patch": "@@ -14,7 +14,7 @@ static const unsigned int MAX_BLOCK_TO_PROCESS_PER_ITERATION = 5;\n \n std::shared_ptr<CAuxiliaryBlockRequest> currentBlockRequest; //thread-safe pointer (CAuxiliaryBlockRequest, the object, is also lock-free)\n \n-CAuxiliaryBlockRequest::CAuxiliaryBlockRequest(std::vector<const CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), progressCallback(progressCallbackIn)\n+CAuxiliaryBlockRequest::CAuxiliaryBlockRequest(std::vector<const CBlockIndex*> vBlocksToDownloadIn, int64_t createdIn, bool passThroughSignalsIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallbackIn) : vBlocksToDownload(vBlocksToDownloadIn), created(createdIn), passThroughSignals(passThroughSignalsIn), progressCallback(progressCallbackIn)\n {\n     fCancelled = false;\n     requestedUpToSize = 0;\n@@ -45,12 +45,14 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n         }\n \n         // fire signal with txns\n-        unsigned int cnt = 0;\n-        for(const auto& tx : currentBlock->vtx)\n-        {\n-            bool valid = ((pindexRequest->nStatus & BLOCK_VALID_MASK) == BLOCK_VALID_MASK);\n-            GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt, valid);\n-            cnt++;\n+        if (passThroughSignals) {\n+            unsigned int cnt = 0;\n+            for(const auto& tx : currentBlock->vtx)\n+            {\n+                bool valid = ((pindexRequest->nStatus & BLOCK_VALID_MASK) == BLOCK_VALID_MASK);\n+                GetMainSignals().SyncTransaction(*tx, pindexRequest, cnt, valid);\n+                cnt++;\n+            }\n         }\n         this->processedUpToSize++;\n "
      },
      {
        "sha": "e3953285ad7bffa23ef442727cc863aefb60d432",
        "filename": "src/auxiliaryblockrequest.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0/src/auxiliaryblockrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0/src/auxiliaryblockrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.h?ref=ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
        "patch": "@@ -20,9 +20,10 @@ class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlo\n \n     const std::vector<const CBlockIndex*> vBlocksToDownload;\n     const int64_t created; //!timestamp when the block request was created\n+    const bool passThroughSignals; //!if passThroughSignals is set, the received blocks transaction will be passed through the SyncTransaction signal */\n \n     /** Constructor of the lock free CAuxiliaryBlockRequest, vBlocksToDownloadIn remains constant */\n-    CAuxiliaryBlockRequest(std::vector<const CBlockIndex*> vBlocksToDownloadIn, int64_t created, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallbackIn);\n+    CAuxiliaryBlockRequest(std::vector<const CBlockIndex*> vBlocksToDownloadIn, int64_t created, bool passThroughSignalsIn, const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallbackIn);\n \n     /** Process the request, check if there are blocks available to \"stream\"\n         over the SyncTransaction signal "
      }
    ]
  },
  {
    "sha": "df6e5b873edd4058ec197da9363708162e5f2ec6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjZlNWI4NzNlZGQ0MDU4ZWMxOTdkYTkzNjM3MDgxNjJlNWYyZWM2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-16T08:12:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:00:30Z"
      },
      "message": "Add requestblocks - request out-of-band blocks download - RPC call",
      "tree": {
        "sha": "52709c36ca346f3ea552e5466dd164f82e4f2563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52709c36ca346f3ea552e5466dd164f82e4f2563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df6e5b873edd4058ec197da9363708162e5f2ec6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbA4ACgkQKdS8tkFv\nU+x+mg/9E52c8qPvMmByp+l6dCvxL9mkXqg1oyuinolA2lCcqSVqK/+NfhIcVn9L\nE0edGyJlVP3Zo85iAmzQThTSeeNb0ZAi5B05Z7cKEzMST6uC+Z83zNu7WCitWg2K\nrcoaLU6DfW+DnZ51jsBIAoyqFuMOmD9hsTdAVG+obHkEbFrwJhhXcUAcaD6mu6+h\nbB655VhmDhMHjMaDnIi32Z54kZo2mNt67hTF2l/VnyzPuVfiFsfKMok/3MyHC4DX\nyolPyFv+KHPmQjMt1NTOdcN09k3hyntUpMpbsjSWXXWaB4C7IiDjBN06VpZTnHky\nDU7cy53vcQNvq8s3Hp519JajIEvPHt0U2JyXBj7sze4sqma4LaKjGq+5l6O155yi\nsoV+kpY5ENndeQS/KZpY0gZYhX9v+I32DdgQ0PlDLcl1q6tdtuHpY1tY9waewDmD\n4ZHf3cptP9ZS4CLj+gbxQAYqaAKA1z//aRjqyUNx3brBK6HTANK/XHArA1RqZyPa\nq9JlT4V2T7Q3Jyugj1M9bu6mQNOgQpie5TZQnEuDlvyLjIQOFWo6QvDD13hYmXO+\nAbK2bZusBfBYdOFve8/it/qfaIcLfc8CXTygS2NfZXCfQuaI4DNgSFK9fjEzJlse\nBL6lAwgX8KIXch4klrAmBie2Qq2H1TzocX5zvHP3bk4vTWptavE=\n=VYGD\n-----END PGP SIGNATURE-----",
        "payload": "tree 52709c36ca346f3ea552e5466dd164f82e4f2563\nparent ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1479283947 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270030 +0100\n\nAdd requestblocks - request out-of-band blocks download - RPC call\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6e5b873edd4058ec197da9363708162e5f2ec6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df6e5b873edd4058ec197da9363708162e5f2ec6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6e5b873edd4058ec197da9363708162e5f2ec6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba99197aef1ba3bda5f5ab32dcd27c6c46e9a7f0"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 101,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3dbb9ab9c69fa5038a71449c728c9e7575bc432f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 1,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6e5b873edd4058ec197da9363708162e5f2ec6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6e5b873edd4058ec197da9363708162e5f2ec6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=df6e5b873edd4058ec197da9363708162e5f2ec6",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"amount.h\"\n+#include \"auxiliaryblockrequest.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -25,6 +26,7 @@\n #include <univalue.h>\n \n #include <boost/thread/thread.hpp> // boost::thread::interrupt\n+#include <boost/assign/list_of.hpp>\n \n #include <mutex>\n #include <condition_variable>\n@@ -82,6 +84,8 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+\n+    result.push_back(Pair(\"validated\", ((blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS)));\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", blockindex->nVersion));\n@@ -110,6 +114,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+    result.push_back(Pair(\"validated\", (blockindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS));\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n@@ -642,6 +647,7 @@ UniValue getblockheader(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"validated\\\" : n,       (boolean) True if the block has been validated (for auxiliary block requests)\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n@@ -1413,6 +1419,98 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+UniValue requestblocks(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"requestblocks (start|cancel|status) ([\\\"hash_0\\\", \\\"hash_1\\\", ...]) (<pass-internally>)\\n\"\n+                            \"\\nRequests blocks (auxiliary) by eventually downloading them.\\n\"\n+                            \"\\nDownload of the requested blocks will be priorized.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. action            (string, required) the action to execute\\n\"\n+                            \"                                        start  = start a new block request (overwrite existing one)\\n\"\n+                            \"                                        cancel = stop current block request\\n\"\n+                            \"                                        status = get info about current request\\n\"\n+                            \"2. blockhashes       (array, optional) the hashes of the blocks to download\\n\"\n+                            \"3. pass-internally   (boolean, optional, default = false) If set, the transactions of the requested blocks get passed into the wallet/ZMQ/etc.\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"   cancel: <true|false> (\\\"true\\\" if a blockrequest was present)\\n\"\n+                            \"   start: {\\\"overwrite\\\": <true|false>} (if the new blocksrequest has overwritten an already existign one\\n\"\n+                            \"   status: {\\n\"\n+                            \"              \\\"created\\\": <timestamp> (block request was created at this timestamp)\\n\"\n+                            \"              \\\"is_cancled\\\": <true|false> (set if blockrequest is cancled)\\n\"\n+                            \"              \\\"requested_blocks\\\": <number> (amount of requestes blocks)\\n\"\n+                            \"              \\\"loaded_blocks\\\": <number> (amount of blocks already available on disk)\\n\"\n+                            \"              \\\"processed_blocks\\\": <number> (amount of already processed blocks)\\n\"\n+                            \"           }\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"requestblocks\", \"\\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+                            + HelpExampleRpc(\"requestblocks\", \"\\\"'[\\\"<blockhash>\\\"]'\\\"\")\n+                            );\n+\n+    if (request.params[0].get_str() == \"cancel\")\n+    {\n+        if (CAuxiliaryBlockRequest::GetCurrentRequest()) {\n+            CAuxiliaryBlockRequest::GetCurrentRequest()->cancel();\n+            return UniValue(true);\n+        }\n+        else\n+            return UniValue(false);\n+    }\n+    if (request.params[0].get_str() == \"status\")\n+    {\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = CAuxiliaryBlockRequest::GetCurrentRequest();\n+        UniValue ret(UniValue::VOBJ);\n+        ret.pushKV(\"request_present\", (bool)blockRequest);\n+        if (blockRequest) {\n+            ret.pushKV(\"created\", UniValue(blockRequest->created));\n+            ret.pushKV(\"is_cancled\", UniValue(blockRequest->isCancelled()));\n+            ret.pushKV(\"requested_blocks\", (int64_t)blockRequest->vBlocksToDownload.size());\n+            ret.pushKV(\"loaded_blocks\", (int)blockRequest->amountOfBlocksLoaded());\n+            ret.pushKV(\"processed_blocks\", (int64_t)blockRequest->processedUpToSize);\n+        }\n+        return ret;\n+    }\n+    if (request.params[0].get_str() == \"start\")\n+    {\n+        if (request.params.size() < 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing blocks array\");\n+        UniValue hash_Uarray = request.params[1].get_array();\n+        if (!hash_Uarray.isArray())\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second parameter must be an array\");\n+\n+        std::vector<const CBlockIndex*> blocksToDownload;\n+        {\n+            LOCK(cs_main); //mapBlockIndex\n+            for (UniValue strHashU : hash_Uarray.getValues())\n+            {\n+                uint256 hash(uint256S(strHashU.get_str()));\n+                BlockMap::iterator mi = mapBlockIndex.find(hash);\n+                if (mi == mapBlockIndex.end())\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+                blocksToDownload.push_back((*mi).second);\n+            }\n+        }\n+\n+        bool passThroughSignals = false;\n+        if (request.params.size() == 3 && request.params[2].isBool())\n+            passThroughSignals = request.params[2].get_bool();\n+\n+        std::shared_ptr<CAuxiliaryBlockRequest> blockRequest(new CAuxiliaryBlockRequest(blocksToDownload, GetAdjustedTime(), passThroughSignals, [](std::shared_ptr<CAuxiliaryBlockRequest> cb_spvRequest, const CBlockIndex *pindex) -> bool {\n+            return true;\n+        }));\n+        bool overwrite = (CAuxiliaryBlockRequest::GetCurrentRequest() != nullptr);\n+        // set the global SPV Request\n+        blockRequest->setAsCurrentRequest();\n+\n+        UniValue ret(UniValue::VOBJ);\n+        ret.pushKV(\"overwrite\", UniValue(overwrite));\n+        return ret;\n+    }\n+    else\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unkown action\");\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafe argNames\n   //  --------------------- ------------------------  -----------------------  ------ ----------\n@@ -1433,8 +1531,8 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,  {} },\n     { \"blockchain\",         \"pruneblockchain\",        &pruneblockchain,        true,  {\"height\"} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,  {\"checklevel\",\"nblocks\"} },\n-\n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          true,  {\"blockhash\"} },\n+    { \"blockchain\",         \"requestblocks\",          &requestblocks,          true,  {\"action\", \"blockhashes\", \"pass-internally\"} },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,  {\"blockhash\"} },"
      },
      {
        "sha": "2cc9a549961812c06005d203e48f92b18cf5dbed",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6e5b873edd4058ec197da9363708162e5f2ec6/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6e5b873edd4058ec197da9363708162e5f2ec6/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=df6e5b873edd4058ec197da9363708162e5f2ec6",
        "patch": "@@ -118,6 +118,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n     { \"bumpfee\", 1, \"options\" },\n+    { \"requestblocks\", 1, \"blockhashes\" },\n+    { \"requestblocks\", 2, \"pass-internally\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      }
    ]
  },
  {
    "sha": "32770b8bf7fbbf016d2d176571cd67da9a68dcab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjc3MGI4YmY3ZmJiZjAxNmQyZDE3NjU3MWNkNjdkYTlhNjhkY2Fi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-16T15:04:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:01:05Z"
      },
      "message": "[Wallet] don't consume non-validated transactions",
      "tree": {
        "sha": "d400e02b79d3e89de40c4f74d0f4a4d1cf42fe57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d400e02b79d3e89de40c4f74d0f4a4d1cf42fe57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32770b8bf7fbbf016d2d176571cd67da9a68dcab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbDEACgkQKdS8tkFv\nU+z6yRAAhnxO3B/t4vwIV1dpkF5UML/jRGJH0VVSQ+qeEVD3G1kPhP43YEZNsPU0\nybUzfne6Oy3gQ4wM4Uq9sLhBrhQKkcgWYzY1u3zflwjXxfbyRq0vmaUYjPVootEY\nFRGBJW13lFEuFpaCA3wDV5WWmLQwLO8xDzS3eKhtKJpyFJV6wEvytSmafCU/bEkC\nlWd/io6v/iX6WlmLjenMEJIeJykBmBjoEdc9P4E6xLmtVKfpbUi2fGrThIGpIxMV\nOvG2QAF/QzeIggYtPSLjRV9/M3TuFZ//JkB0eHO46vWFh6cELf64YCwv6xU8sKvx\nj0cQK8FYVfabQHYDfYaQxAf5yIVUebvazYYuz2nIrvDYb1k5IJJ13CCVRVgBIQd8\nOdn5SKHsJSUBI2RBRjvhX3D5HpEACnN4aNmO3DutlRCKhQ4kbuBkjX/E+YQICH5P\n8SA4KRxPOqtY8HkeMsyKpe1YmnLK+fe45YZwqUIfZDxwAH1XZfyIaNxm8qs3LJab\n7L6OmCjX0lAQC91PBfWQlPhIjfe7SLup3/2J8KyyLTGKVozyX5AVcRAQ642+NV4M\ndUulX3fPQPsdPgGVhr6Lud7wgbL17TSJbVO4E3fmGk8gaCHMDFnppRKsjQWfNuTV\niR4ttyTMSV06xnqHcRPrRObTvmCPra7/Kg/9KlSD7TwR5L+24+E=\n=xLD1\n-----END PGP SIGNATURE-----",
        "payload": "tree d400e02b79d3e89de40c4f74d0f4a4d1cf42fe57\nparent df6e5b873edd4058ec197da9363708162e5f2ec6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1481900682 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270065 +0100\n\n[Wallet] don't consume non-validated transactions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32770b8bf7fbbf016d2d176571cd67da9a68dcab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32770b8bf7fbbf016d2d176571cd67da9a68dcab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32770b8bf7fbbf016d2d176571cd67da9a68dcab/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df6e5b873edd4058ec197da9363708162e5f2ec6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6e5b873edd4058ec197da9363708162e5f2ec6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df6e5b873edd4058ec197da9363708162e5f2ec6"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7375d2007c5da690c15144afa508f4e3ae748c43",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32770b8bf7fbbf016d2d176571cd67da9a68dcab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32770b8bf7fbbf016d2d176571cd67da9a68dcab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=32770b8bf7fbbf016d2d176571cd67da9a68dcab",
        "patch": "@@ -1169,6 +1169,9 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n {\n     LOCK2(cs_main, cs_wallet);\n \n+    if (!validated)\n+        return;\n+\n     if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true))\n         return; // Not one of ours\n "
      }
    ]
  },
  {
    "sha": "567055e6c4894707d5bd8ea28402dbb721d24f15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjcwNTVlNmM0ODk0NzA3ZDViZDhlYTI4NDAyZGJiNzIxZDI0ZjE1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-19T09:53:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:01:05Z"
      },
      "message": "Add -autorequestblocks debug option and setautorequestblocks hidden RPC call\n\nThis allows efficient testing of auxiliary block requests",
      "tree": {
        "sha": "8169ab230807957ee5c8760b3c497da08fa58a02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8169ab230807957ee5c8760b3c497da08fa58a02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/567055e6c4894707d5bd8ea28402dbb721d24f15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbDEACgkQKdS8tkFv\nU+zwfg//SDO6w7INSlP7DnAadSEvi4KkPvzbT0LJss4XQaLs+yXJj5GKWmTi5oy3\nYwJ4doJ/J43m9rTk1BuSlVnVtqFVN6aFNZ9jK4cTKMqDbdwFL5yZgEnGtkdHN+p7\nTdcELp0ZkDzRzS5w671GwWEBISZpquoRhj0+SdErqo6ArCaZih8x+Fn5SLKXv5PU\nOucccPqROWILP1+M6aChi/y2iNmEZRtUhdhq4G/DYneJe+p7IV0agqZQmAa8ycwH\n+/4KyZld3/uxrbP4KFg3VMBEen3ytTEsEMc9W1RDGfOojab9NEDqKSxP/Ip50Qfd\nHVqiC1A+JtjDoQ3OGHwoUM8r3btEuwvjhrlfOVMa+i9Vc1kGjdPCuV1u17UxIl0w\nh/1bh5tiayUXS0s/C0h8LNNwcDpMUzhqHwYVcdoS+tofNG3fh4L6i8FGKGd59FxM\ndjp9Ey7ZczqWbSiwxG355VbiBI1gtWcS+sweaY/R57Mo5JZdeF3aZcrcIzDUgx97\n0dDjdMTzoQOy7vKiZ1YPUyIMErtp0zpxYgxc1dhL4l808yactUukKAMkUliVQ8eq\nV3wizGmBjJcjr43fgEkGoypWuU+JQvUND2hNS0Bl0iQ0FcQ5ooMBmZmmn+jfdO4s\nClT8d5iIG3q6ViwCfIacC0RClZ3tFT+nqlXimJ5s8yBFLUHsuWs=\n=OAFZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 8169ab230807957ee5c8760b3c497da08fa58a02\nparent 32770b8bf7fbbf016d2d176571cd67da9a68dcab\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482141234 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270065 +0100\n\nAdd -autorequestblocks debug option and setautorequestblocks hidden RPC call\n\nThis allows efficient testing of auxiliary block requests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567055e6c4894707d5bd8ea28402dbb721d24f15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/567055e6c4894707d5bd8ea28402dbb721d24f15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567055e6c4894707d5bd8ea28402dbb721d24f15/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32770b8bf7fbbf016d2d176571cd67da9a68dcab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32770b8bf7fbbf016d2d176571cd67da9a68dcab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32770b8bf7fbbf016d2d176571cd67da9a68dcab"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 41,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eb5a803e529dde494457c97ba43ed6268e8908fc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567055e6c4894707d5bd8ea28402dbb721d24f15/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567055e6c4894707d5bd8ea28402dbb721d24f15/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=567055e6c4894707d5bd8ea28402dbb721d24f15",
        "patch": "@@ -435,6 +435,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-autorequestblocks\", strprintf(\"Automatic block request, if disabled, blocks will not be requested in IBD/sync-up (default: %u)\", DEFAULT_AUTOMATIC_BLOCK_REQUESTS));\n     }\n     string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -925,6 +926,7 @@ bool AppInitParameterInteraction()\n     }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", DEFAULT_CHECKPOINTS_ENABLED);\n+    fAutoRequestBlocks = GetBoolArg(\"-autorequestblocks\", DEFAULT_AUTOMATIC_BLOCK_REQUESTS);\n \n     hashAssumeValid = uint256S(GetArg(\"-assumevalid\", chainparams.GetConsensus().defaultAssumeValid.GetHex()));\n     if (!hashAssumeValid.IsNull())"
      },
      {
        "sha": "392b579810606edfb71ddf3149b736c0c26753b2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567055e6c4894707d5bd8ea28402dbb721d24f15/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567055e6c4894707d5bd8ea28402dbb721d24f15/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=567055e6c4894707d5bd8ea28402dbb721d24f15",
        "patch": "@@ -65,6 +65,8 @@ static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUAR\n \n static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n \n+std::atomic<bool> fAutoRequestBlocks(DEFAULT_AUTOMATIC_BLOCK_REQUESTS);\n+\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -507,6 +509,10 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n         return;\n     }\n \n+    // don't request any other blocks if we are in non autorequest mode (usefull for non-validation mode)\n+    if (!fAutoRequestBlocks)\n+        return;\n+\n     if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork) {\n         // This peer has nothing interesting.\n         return;"
      },
      {
        "sha": "665aea849c43187e4bcf68c0e58ad3e4ce9b8adc",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567055e6c4894707d5bd8ea28402dbb721d24f15/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567055e6c4894707d5bd8ea28402dbb721d24f15/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=567055e6c4894707d5bd8ea28402dbb721d24f15",
        "patch": "@@ -23,6 +23,10 @@ void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n \n+/** if disabled, blocks will not be requested automatically, usefull for non-validation mode */\n+static const bool DEFAULT_AUTOMATIC_BLOCK_REQUESTS = true;\n+extern std::atomic<bool> fAutoRequestBlocks;\n+\n class PeerLogicValidation : public CValidationInterface {\n private:\n     CConnman* connman;"
      },
      {
        "sha": "a3d317749adc6a7e99ff7a7c0466b2a5ba45328c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567055e6c4894707d5bd8ea28402dbb721d24f15/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567055e6c4894707d5bd8ea28402dbb721d24f15/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=567055e6c4894707d5bd8ea28402dbb721d24f15",
        "patch": "@@ -11,6 +11,7 @@\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n+#include \"net_processing.h\"\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpc/server.h\"\n@@ -192,7 +193,7 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n         latestblock.hash = pindex->GetBlockHash();\n         latestblock.height = pindex->nHeight;\n     }\n-\tcond_blockchange.notify_all();\n+    cond_blockchange.notify_all();\n }\n \n UniValue waitfornewblock(const JSONRPCRequest& request)\n@@ -1204,7 +1205,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     /*\n-     * Idea:  the set of chain tips is chainActive.tip, plus orphan blocks which do not have another orphan building off of them. \n+     * Idea:  the set of chain tips is chainActive.tip, plus orphan blocks which do not have another orphan building off of them.\n      * Algorithm:\n      *  - Make one pass through mapBlockIndex, picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.\n      *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip.\n@@ -1511,6 +1512,30 @@ UniValue requestblocks(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unkown action\");\n }\n \n+UniValue setautorequestblocks(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 1)\n+        throw runtime_error(\n+                            \"setautorequestblocks (true|false)\\n\"\n+                            \"\\nIf set to false, blocks will no longer be requested automatically\\n\"\n+                            \"Useful for a pure non-validation mode in conjunction with requestblocks.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. state             (boolean, optional) enables or disables the automatic block download\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"   status: <true|false> (\\\"true\\\" if a automatic blockdownloads are enabled)\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"setautorequestblocks\", \"\\\"false\\\"\")\n+                            + HelpExampleRpc(\"setautorequestblocks\", \"\\\"false\\\"\")\n+                            );\n+\n+    if (request.params.size() == 1)\n+        fAutoRequestBlocks = request.params[0].get_bool();\n+\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"status\", UniValue(fAutoRequestBlocks));\n+    return ret;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafe argNames\n   //  --------------------- ------------------------  -----------------------  ------ ----------\n@@ -1540,6 +1565,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"waitfornewblock\",        &waitfornewblock,        true,  {\"timeout\"} },\n     { \"hidden\",             \"waitforblock\",           &waitforblock,           true,  {\"blockhash\",\"timeout\"} },\n     { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     true,  {\"height\",\"timeout\"} },\n+    { \"hidden\",             \"setautorequestblocks\",   &setautorequestblocks,   true,  {\"state\"} },\n };\n \n void RegisterBlockchainRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "98a6ea68f7534b22391cff91e114e640f9118656",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567055e6c4894707d5bd8ea28402dbb721d24f15/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567055e6c4894707d5bd8ea28402dbb721d24f15/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=567055e6c4894707d5bd8ea28402dbb721d24f15",
        "patch": "@@ -120,6 +120,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"bumpfee\", 1, \"options\" },\n     { \"requestblocks\", 1, \"blockhashes\" },\n     { \"requestblocks\", 2, \"pass-internally\" },\n+    { \"setautorequestblocks\", 0, \"state\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      }
    ]
  },
  {
    "sha": "b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2VmOTNkNzY1MmJmNDMwYTI3MjU1N2RkMTBlYjFjYzRmMzMyZTRj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-19T10:28:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:01:05Z"
      },
      "message": "[QA] Add auxiliary block request test",
      "tree": {
        "sha": "ac975bce97cee4309a481b313a030f0ec018feef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac975bce97cee4309a481b313a030f0ec018feef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbDEACgkQKdS8tkFv\nU+xxGQ//c6GD60lViU/nFjTyGu99prH7MaVqe+JjFnQEV6R3kedaLMQgw+xJj/hc\naGXSu7yx1w55kQFVQ7Fb0ctiqg9yzLAtIFZX03yDolTBf8b2Iy6bqfseS43Y1heM\nbBJY0kxeL70nzkLp/ule4WGWb5FTn2wF2x2Y3mXgcYD2VmLgLD4WH6hbVE8rCVBT\n88t91ETF2aDWQpJDf8CDg6Lq7ivEiLl8fJZN+y3XTC4WLXpDjhLgxKCOFjGCkbI9\nxqpOc4FC1RIoIMh5ur/ZZQCHSqQBVTUQCxLefBasTvywYHsJH+h1BFdzrF9i7yAw\noJJz8uWWIZYJfAS8aqu4M8L3uA+qSaDikJDpGhnCDB2iVVgQZx1Fl+q8n/gLqj/h\nxF/LUoAh8B1a//ZjsBWEegnRc11GaY67kUODxh2xdt3NyKMFVI/k7zaVTsetHC0c\nT7RUzOHCmOmU65htLm24PDPaKLrUibNa6GvaH9k4Oo2R2Y1+ua4tDRTs2/wVluf0\nDr9RuwtRRz9dqWBa1o/UAW3ThxIUfQ4GeYqc0ZEwDIuFHzoXLMqq4KHxMpCcHF6H\naN7FqxhJW/P3bpLkT3vrJkfHPTanPxjG9ujLiL/9aTPtKaUdAgqdLuFAghoxN0Ff\nwJs8UaI85T5WgC6LNaeNVzHs1+XD9YPfac7ZOqEGHo44DA7yVWc=\n=D2+K\n-----END PGP SIGNATURE-----",
        "payload": "tree ac975bce97cee4309a481b313a030f0ec018feef\nparent 567055e6c4894707d5bd8ea28402dbb721d24f15\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482143293 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270065 +0100\n\n[QA] Add auxiliary block request test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7ef93d7652bf430a272557dd10eb1cc4f332e4c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "567055e6c4894707d5bd8ea28402dbb721d24f15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567055e6c4894707d5bd8ea28402dbb721d24f15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/567055e6c4894707d5bd8ea28402dbb721d24f15"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "69a715dae1196e1fac99a69c7ce995b700cee766",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7ef93d7652bf430a272557dd10eb1cc4f332e4c/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7ef93d7652bf430a272557dd10eb1cc4f332e4c/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
        "patch": "@@ -154,6 +154,7 @@\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n+    'auxiliaryblockrequests.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "9b9296a647fa0202e237efc9fb4f95400062193f",
        "filename": "qa/rpc-tests/auxiliaryblockrequests.py",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7ef93d7652bf430a272557dd10eb1cc4f332e4c/qa/rpc-tests/auxiliaryblockrequests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7ef93d7652bf430a272557dd10eb1cc4f332e4c/qa/rpc-tests/auxiliaryblockrequests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/auxiliaryblockrequests.py?ref=b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
        "patch": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class AuxiliaryBlockRequestTest (BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-autorequestblocks=0\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        print(\"Mining blocks...\")\n+        self.nodes[0].generate(101)\n+        self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        time.sleep(5)\n+        ctps = self.nodes[1].getchaintips()\n+        headersheight = -1\n+        chaintipheight = -1\n+        for ct in ctps:\n+            if ct['status'] == \"headers-only\":\n+                headersheight = ct['height']\n+            if ct['status'] == \"active\":\n+                chaintipheight = ct['height']\n+        assert(headersheight == 101)\n+        assert(chaintipheight == 0)\n+\n+        node0bbhash = self.nodes[0].getbestblockhash()\n+        # best block should not be validated, header must be available\n+        bh = self.nodes[1].getblockheader(node0bbhash, True)\n+        assert(bh['validated'] == False)\n+        # block must not be available\n+        try:\n+            bh = self.nodes[1].getblock(node0bbhash, True)\n+            raise AssertionError('Block must not be available')\n+        except JSONRPCException as e:\n+            assert(e.error['code']==-32603)\n+\n+        # request best block (auxiliary)\n+        self.nodes[1].requestblocks(\"start\", [node0bbhash])\n+        timeout = 20\n+        while timeout > 0:\n+            if self.nodes[1].requestblocks(\"status\")['request_present'] == 0:\n+                break;\n+            time.sleep(1)\n+            timeout-=1\n+        assert(timeout>0)\n+\n+        # block must now be available\n+        block = self.nodes[1].getblock(node0bbhash, True)\n+        assert(block['hash'] == node0bbhash)\n+        assert(block['validated'] == False)\n+\n+        # enable auto-request of blocks\n+        self.nodes[1].setautorequestblocks(True)\n+        sync_blocks(self.nodes)\n+\n+        ctps = self.nodes[1].getchaintips()\n+        # same block must now be available with mode validated=true\n+        block = self.nodes[1].getblock(node0bbhash, True)\n+        assert(block['hash'] == node0bbhash)\n+        assert(block['validated'] == True)\n+\n+        chaintipheight = -1\n+        for ct in ctps:\n+            if ct['status'] == \"active\":\n+                chaintipheight = ct['height']\n+        assert(chaintipheight == 101)\n+        \n+if __name__ == '__main__':\n+    AuxiliaryBlockRequestTest ().main ()"
      }
    ]
  },
  {
    "sha": "a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODZjNjZkOWRhYjc1NzRlY2VmODkxZGRmZjBhY2NkNWUzMWEzYWI0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-20T08:33:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:01:05Z"
      },
      "message": "Allow CheckFinalTx() without validation using the headers chain",
      "tree": {
        "sha": "b84ff9bb2b13cf5649d90493f37bb2ef0aece8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b84ff9bb2b13cf5649d90493f37bb2ef0aece8db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbDEACgkQKdS8tkFv\nU+wj4xAAs4Tt0QMYz9E2nfK6nTju20U6LUbs5/JS6x9XPg06VcgQ0CXIFlkJo87z\nlFy65P+mDX1wpzQ9gRbbSheYpjV9B8LVlTuoyG769fNSdag1jK3p9HKK58QXUjwQ\nSPLPGT/LbPuYSpbg66Mv2YWdSw9OLa3treot0d7k+IWydTqpeV8/Ndb5yLyUeiME\npQ+UN595Z19VFIJExS/+xm3H2roo9KlpyVi/9Vcf0dD0H7K7HaBnp52yM3gwMXLJ\naYrz+ilfj6EiLNlSHrimcGWjZqGjPp7pcVIUlR+3kjSbuqaKKf9YqFy9lfC2E6Se\n2yWiNqLUaIHEAq8aPMwmTf9jOnm5R4Vygqb/bDKu3sbzl3+rEkhtOSk57BjN7GFS\nLiWSLElRKjyo9+hmfi9xG7YgTot9f/mAKEboRgHMr8glgj9gZPKr3fu+qNlyeokW\n9NN1f7ckFgp3UNJuKZcebTtbertNRLlsLQxwtDtrYa4gnSZZMRZ017B4Y9jxS+Ta\n3kAHRwFguIcw0ERYU/L5byDLJx0+44VO9liiO1d8aeA0BRcggBcWiolCKHHnFq0U\nsH0IMHRs/seYTJDqV4IkA31HZ1l/OFPXWCPxxDp3eC06sPr9X9NH8SxV10RjGAPc\nqSfrDk3JgDSGXw4f0WY4ugO7Dq79yMy8hl85wJ6u66Fv+CWxYOM=\n=TtTO\n-----END PGP SIGNATURE-----",
        "payload": "tree b84ff9bb2b13cf5649d90493f37bb2ef0aece8db\nparent b7ef93d7652bf430a272557dd10eb1cc4f332e4c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482222834 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270065 +0100\n\nAllow CheckFinalTx() without validation using the headers chain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86c66d9dab7574ecef891ddff0accd5e31a3ab4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7ef93d7652bf430a272557dd10eb1cc4f332e4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7ef93d7652bf430a272557dd10eb1cc4f332e4c"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9a1351e352f5cec3ebc054676009cc3491d14066",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a86c66d9dab7574ecef891ddff0accd5e31a3ab4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a86c66d9dab7574ecef891ddff0accd5e31a3ab4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
        "patch": "@@ -235,7 +235,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n+bool CheckFinalTx(const CTransaction &tx, int flags, bool calcHeightFromHeaders)\n {\n     AssertLockHeld(cs_main);\n \n@@ -253,15 +253,21 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // IsFinalTx() with one more than chainActive.Height().\n-    const int nBlockHeight = chainActive.Height() + 1;\n+    //\n+    // If calcHeightFromHeaders is set to true, we use the headers-\n+    // chain-tip to calculate the block height\n+    CChain *chainToUse = &chainActive;\n+    if (calcHeightFromHeaders && headersChainActive.Tip())\n+        chainToUse = &headersChainActive;\n+    const int nBlockHeight = chainToUse->Height() + 1;\n \n     // BIP113 will require that time-locked transactions have nLockTime set to\n     // less than the median time of the previous block they're contained in.\n     // When the next block is created its previous block will be the current\n     // chain tip, so we use that to calculate the median time passed to\n     // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n     const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? chainActive.Tip()->GetMedianTimePast()\n+                             ? chainToUse->Tip()->GetMedianTimePast()\n                              : GetAdjustedTime();\n \n     return IsFinalTx(tx, nBlockHeight, nBlockTime);"
      },
      {
        "sha": "370f7c7f689495e4804227458a678b3b9380ba68",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a86c66d9dab7574ecef891ddff0accd5e31a3ab4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a86c66d9dab7574ecef891ddff0accd5e31a3ab4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
        "patch": "@@ -399,7 +399,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1, bool calcHeightFromHeaders = false);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain"
      }
    ]
  },
  {
    "sha": "7ca1a8738a878078c0d1546f7743a05ee474dd1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2ExYTg3MzhhODc4MDc4YzBkMTU0NmY3NzQzYTA1ZWU0NzRkZDFi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-20T08:57:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:01:05Z"
      },
      "message": "Add FindTransaction signal: allows to inv transactions that are not in the mempool",
      "tree": {
        "sha": "33681db81054d5a011def3c52c37244bfbdc8dda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33681db81054d5a011def3c52c37244bfbdc8dda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ca1a8738a878078c0d1546f7743a05ee474dd1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbDEACgkQKdS8tkFv\nU+wVvw//aSBmFOQPMbhNYq4lTkHusXCtM0k6VRwOEM5D/NEVWXeZsDdOq0CjV6MV\naidVglaIl/o1AEoDRUD7Dbo5rlsxJ8ijISwNbK02y2aC5ETyQnuyjFGBmiaGYNJS\nz2l2zlidQLI1rhVKsd+BZPNRCfyUinykY9l1iWcFL+//hDtxCsTnLyL08air1Wlv\nvr2zoj/StMeLHSdfnHsPr8yPnnvbu3oHq74x8I4QtEAZpFZNYee2nMGHYdbywmAs\no0Gsjg1UU8yIc+0KZwL/fohuV2ecHUb+pfuFkEZlf4MILy11B7ZMK/PDkHz7ZaNT\nkcuHakflAL2T+CemO7oYTkOkQmHeFAREhoUYeDNUy/ajWipsvt/tleG3HFApqYSc\nUDBm7J5r38V8TM+JwowUwIHnhchS/V4VqImu76twn3jlKjEQOIWd8apJMaO7uKQP\n0V35jt11LeSJUXwveunBNop8gWF6oveGdCYqG8u3IqXqMUn+CGGG3nsvETDMrj3W\n9G2+rTQmSix5+vnUCe473NQEnrLu487YkXiT+2tzatDVgJBvXYUWXFKXfPLCtnzW\nO3klN8BjKpxPjKMxlNRkrpH2CoqvvBGBmwzKfF97nYoUggjCinc6edRa7wQxk0Wh\nm2g2OKu7AIkm3m4pZsoAJzO8VkJSX/XXZV6pXZQBQJAuo7zSXrM=\n=333C\n-----END PGP SIGNATURE-----",
        "payload": "tree 33681db81054d5a011def3c52c37244bfbdc8dda\nparent a86c66d9dab7574ecef891ddff0accd5e31a3ab4\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482224221 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270065 +0100\n\nAdd FindTransaction signal: allows to inv transactions that are not in the mempool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ca1a8738a878078c0d1546f7743a05ee474dd1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ca1a8738a878078c0d1546f7743a05ee474dd1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ca1a8738a878078c0d1546f7743a05ee474dd1b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a86c66d9dab7574ecef891ddff0accd5e31a3ab4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a86c66d9dab7574ecef891ddff0accd5e31a3ab4"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 23,
      "deletions": 5
    },
    "files": [
      {
        "sha": "964ab9ec41fe1e8be1aa81b4c3ae165e6268a75a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7ca1a8738a878078c0d1546f7743a05ee474dd1b",
        "patch": "@@ -3121,13 +3121,16 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                     }\n                     // Not in the mempool anymore? don't bother sending it.\n                     auto txinfo = mempool.info(hash);\n-                    if (!txinfo.tx) {\n+                    CTransactionRef txsp = txinfo.tx;\n+                    if (!txsp)\n+                        GetMainSignals().FindTransaction(hash, txsp);\n+                    if (!txsp)\n                         continue;\n-                    }\n-                    if (filterrate && txinfo.feeRate.GetFeePerK() < filterrate) {\n+\n+                    if (filterrate && txinfo.tx && txinfo.feeRate.GetFeePerK() < filterrate) {\n                         continue;\n                     }\n-                    if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n+                    if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(*txsp)) continue;\n                     // Send\n                     vInv.push_back(CInv(MSG_TX, hash));\n                     nRelayedTransactions++;\n@@ -3139,7 +3142,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                             vRelayExpiration.pop_front();\n                         }\n \n-                        auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n+                        auto ret = mapRelay.insert(std::make_pair(hash, std::move(txsp)));\n                         if (ret.second) {\n                             vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n                         }"
      },
      {
        "sha": "ddcdbaeba8290565429b3891102b57ac69b8875f",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=7ca1a8738a878078c0d1546f7743a05ee474dd1b",
        "patch": "@@ -15,6 +15,7 @@ CMainSignals& GetMainSignals()\n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3, _4));\n+    g_signals.FindTransaction.connect(boost::bind(&CValidationInterface::GetNonMempoolTransaction, pwalletIn, _1, _2));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -33,6 +34,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.FindTransaction.disconnect(boost::bind(&CValidationInterface::GetNonMempoolTransaction, pwalletIn, _1, _2));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3, _4));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n@@ -46,6 +48,7 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.Inventory.disconnect_all_slots();\n     g_signals.SetBestChain.disconnect_all_slots();\n     g_signals.UpdatedTransaction.disconnect_all_slots();\n+    g_signals.FindTransaction.disconnect_all_slots();\n     g_signals.SyncTransaction.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n     g_signals.NewPoWValidBlock.disconnect_all_slots();"
      },
      {
        "sha": "7376a8ccbbab3e6c46dfa3af1640f786299eb17e",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=7ca1a8738a878078c0d1546f7743a05ee474dd1b",
        "patch": "@@ -34,6 +34,7 @@ class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock, bool validated = true) {}\n+    virtual void GetNonMempoolTransaction(const uint256 &hash,  std::shared_ptr<const CTransaction> &txsp) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -61,6 +62,8 @@ struct CMainSignals {\n      * removal was due to conflict from connected block), or appeared in a\n      * disconnected block.*/\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock, bool validated)> SyncTransaction;\n+    /** Signal used to find transactions if the node has the inv-hash but not the transaction in its mempool (non-validation mode) */\n+    boost::signals2::signal<void (const uint256 &, std::shared_ptr<const CTransaction> &)> FindTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "8273e44fd7abb4d18ca54f1ae79211ac47b5f886",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7ca1a8738a878078c0d1546f7743a05ee474dd1b",
        "patch": "@@ -1185,6 +1185,14 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n     }\n }\n \n+void CWallet::GetNonMempoolTransaction(const uint256 &hash, CTransactionRef &txsp)\n+{\n+    map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hash);\n+    if (mi != mapWallet.end())\n+    {\n+        txsp = MakeTransactionRef(mi->second);\n+    }\n+}\n \n isminetype CWallet::IsMine(const CTxIn &txin) const\n {"
      },
      {
        "sha": "c0736770c9959888587c4759bd77ec38ef034133",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ca1a8738a878078c0d1546f7743a05ee474dd1b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7ca1a8738a878078c0d1546f7743a05ee474dd1b",
        "patch": "@@ -765,6 +765,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated);\n+    void GetNonMempoolTransaction(const uint256 &hash, CTransactionRef &txsp);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);"
      }
    ]
  },
  {
    "sha": "1687a0e5bc958bd204644f2d5ad3647ab461d65d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjg3YTBlNWJjOTU4YmQyMDQ2NDRmMmQ1YWQzNjQ3YWI0NjFkNjVk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-30T09:15:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:01:05Z"
      },
      "message": "Add CChain object for headers-only chain",
      "tree": {
        "sha": "fc20dc85d62c5d5051709b63849ba7b97a521740",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc20dc85d62c5d5051709b63849ba7b97a521740"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1687a0e5bc958bd204644f2d5ad3647ab461d65d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbDEACgkQKdS8tkFv\nU+weWQ/9GCzDUml+XjYcLvyL15ej+ZhSM4qzjplKoGEwAGgucF/OM+v//IIuEZiE\nT5Qn2LrCZKgTUIM+6X7786dXxyMvpFSVVKfB//1FAb0ol7/+XwTi56/Eu7GR7Hv/\n1YRZVzPcjDuoMiyLyxSO2bQh78nYEmrW1g1GgqiH4CIudvEPEvgiqzDJVdTVnMoG\n3OlH3vh/FQtOJorj+hq7nA8YjdEUzap+MWe4MwSAispfGrR5SUaoUr7Y9ILLTOg0\nAC3IxTfygBnMxLR+1Vq6Rh5ogjJ5yWEawkcOSQnBtxGulOBgPREyNN/Q7IaGy/+t\nhrH6EjuJLI7fbEJtV6mNsyNls6BFvIUpWEWjE3PV9qZN3eh2SLpZg5yW8NdA4wvp\nHVZQdUdrgYpgosLa+Pt1frhV16mu/rJWMwwwTx7kb3IFG2eP4/dsHIpY0pvwd836\n1auj9THLk0cPnwdBVYSPCrbVLJoSMQv9AIOJ/1GHI7kJ0QreSsd8vl5WjA/sa+Ny\npQaeMjasxqCJ/LA+NpRmbt/2nKkFOblMJntk3ZSzdNgl/Ll0CDIF0YuaTbkU55/o\ncOyZjwrWp/dGzhtF0U1VzZedrpj0qW9jhInhfMbjPbqSUcldM2yosYRyN4SVygFa\nTNK5g8ivbGc66E7qfcOdmV1Lih1wdR3reBhGA/+9RVkRLh0xU9w=\n=uz87\n-----END PGP SIGNATURE-----",
        "payload": "tree fc20dc85d62c5d5051709b63849ba7b97a521740\nparent 7ca1a8738a878078c0d1546f7743a05ee474dd1b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483089304 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270065 +0100\n\nAdd CChain object for headers-only chain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687a0e5bc958bd204644f2d5ad3647ab461d65d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1687a0e5bc958bd204644f2d5ad3647ab461d65d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687a0e5bc958bd204644f2d5ad3647ab461d65d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ca1a8738a878078c0d1546f7743a05ee474dd1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ca1a8738a878078c0d1546f7743a05ee474dd1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ca1a8738a878078c0d1546f7743a05ee474dd1b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 17,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bb6b60b94ba350650e72596e93919a490079c416",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687a0e5bc958bd204644f2d5ad3647ab461d65d/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687a0e5bc958bd204644f2d5ad3647ab461d65d/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=1687a0e5bc958bd204644f2d5ad3647ab461d65d",
        "patch": "@@ -700,7 +700,7 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n         found = False\n         for x in tips:\n             if x[\"hash\"] == block.hash:\n-                assert_equal(x[\"status\"], \"headers-only\")\n+                assert( (x[\"status\"] == \"headers-only\" or x[\"status\"] == \"headers-only-fork\") )\n                 found = True\n                 break\n         assert(found)"
      },
      {
        "sha": "2519f7dc31aa49877316901ba79bab7df048e877",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687a0e5bc958bd204644f2d5ad3647ab461d65d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687a0e5bc958bd204644f2d5ad3647ab461d65d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1687a0e5bc958bd204644f2d5ad3647ab461d65d",
        "patch": "@@ -1232,6 +1232,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n \n     // Always report the currently active tip.\n     setTips.insert(chainActive.Tip());\n+    setTips.insert(headersChainActive.Tip());\n \n     /* Construct the output array.  */\n     UniValue res(UniValue::VARR);\n@@ -1251,9 +1252,12 @@ UniValue getchaintips(const JSONRPCRequest& request)\n         } else if (block->nStatus & BLOCK_FAILED_MASK) {\n             // This block or one of its ancestors is invalid.\n             status = \"invalid\";\n-        } else if (block->nChainTx == 0) {\n+        } else if (headersChainActive.Contains(block)) {\n             // This block cannot be connected because full block data for it or one of its parents is missing.\n             status = \"headers-only\";\n+        } else if (block->nChainTx == 0) {\n+            // This block cannot be connected because full block data for it or one of its parents is missing.\n+            status = \"headers-only-fork\";\n         } else if (block->IsValid(BLOCK_VALID_SCRIPTS)) {\n             // This block is fully validated, but no longer part of the active chain. It was probably the active block once, but was reorganized.\n             status = \"valid-fork\";"
      },
      {
        "sha": "39edcf43496435f0494737b615248dbe6ab8c16e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687a0e5bc958bd204644f2d5ad3647ab461d65d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687a0e5bc958bd204644f2d5ad3647ab461d65d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1687a0e5bc958bd204644f2d5ad3647ab461d65d",
        "patch": "@@ -60,6 +60,7 @@ CCriticalSection cs_main;\n \n BlockMap mapBlockIndex;\n CChain chainActive;\n+CChain headersChainActive;\n CBlockIndex *pindexBestHeader = NULL;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n@@ -2687,7 +2688,10 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n     pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + GetBlockProof(*pindexNew);\n     pindexNew->RaiseValidity(BLOCK_VALID_TREE);\n     if (pindexBestHeader == NULL || pindexBestHeader->nChainWork < pindexNew->nChainWork)\n+    {\n         pindexBestHeader = pindexNew;\n+        headersChainActive.SetTip(pindexNew);\n+    }\n \n     setDirtyBlockIndex.insert(pindexNew);\n \n@@ -3537,7 +3541,10 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n         if (pindex->pprev)\n             pindex->BuildSkip();\n         if (pindex->IsValid(BLOCK_VALID_TREE) && (pindexBestHeader == NULL || CBlockIndexWorkComparator()(pindexBestHeader, pindex)))\n+        {\n             pindexBestHeader = pindex;\n+            headersChainActive.SetTip(pindex);\n+        }\n     }\n \n     // Load block file info\n@@ -3800,6 +3807,7 @@ void UnloadBlockIndex()\n     LOCK(cs_main);\n     setBlockIndexCandidates.clear();\n     chainActive.SetTip(NULL);\n+    headersChainActive.SetTip(NULL);\n     pindexBestInvalid = NULL;\n     pindexBestHeader = NULL;\n     mempool.clear();"
      },
      {
        "sha": "36baf9d048ae7d28cfc57d15e7332b9c7f36ee6e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687a0e5bc958bd204644f2d5ad3647ab461d65d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687a0e5bc958bd204644f2d5ad3647ab461d65d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1687a0e5bc958bd204644f2d5ad3647ab461d65d",
        "patch": "@@ -531,6 +531,9 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex);\n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain chainActive;\n \n+/** The currently-connected chain of PoW validated headers (protected by cs_main). */\n+extern CChain headersChainActive;\n+\n /** Global variable that points to the active CCoinsView (protected by cs_main) */\n extern CCoinsViewCache *pcoinsTip;\n "
      }
    ]
  },
  {
    "sha": "4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2JhZjZjMGUxYzM0ZDMxOGJkZmY0ZTQxZTk3NmVlM2Q0YWIyNTY2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-20T09:21:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T15:01:06Z"
      },
      "message": "Track the validation state of a transaction (CMerkleTx::fValidated)",
      "tree": {
        "sha": "ea0fbf9ae161803def5039ec935353f28e17765c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea0fbf9ae161803def5039ec935353f28e17765c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHbDIACgkQKdS8tkFv\nU+y4chAAqe5+bZiTUH+c3vVhMCVl4EfZ0lbk8P2jm4WilfO2vxcAC38Ef9tB8UGV\nOSVVjWAggqVapiQkDMNsY7YTin+Fkpcf0AyeJx6aeY+lzXYK2sXcwz5Ns7UB0pXP\ngdDGlH34PepofZVnrrYwWR1qyIAk5auVGQx/Y0G76/RVQlnY4cSv+JVaDHRMAtRQ\newgPa48P6gtf8BD1zNy8Bf1AWKyGW5bcheiBn+fQTYKe6/Y1aUktHzXsM3ndSINI\nAYmWdorzjC1vUwPtApOGLsxlWANsd48OdjnOc/2B1b59GwFcOrbrtEW5TDrk0HeV\nJz9wk2HZgJhVIn2NvBsEDUoWbrt14HhusbMbKsVpC4S6fQ8DNxhuAgL+fqE1YA5g\naf/TCYHM7/g1sN8C8HQ3Z86OCloVYGyMBJ64GR2N4wWfBSi8Kg6PyVkEAoLx350A\n0c99CJeAqkWWxY2yfElr9zTHUq083JS5xGJ9NMZfrPi+tG7lq0CDCYpX2PGcCWRE\nlFSqvjwuq15neTFEK2aMaWwuo9+OGG4BRs+8Cv1GqgZ1eoJ4sob/czGCUG4DCLfY\nqEu9ckAGywCxIeB/MZr1KicA1Iz3aphmdOhGCzFF6a6zxhUgFq7PJWyTGIC7VxcD\n/EHYiofqQyyrfpBhmC15Ahr1a4S0CqreTgrAdlJP/5ynZM4TZCQ=\n=crYP\n-----END PGP SIGNATURE-----",
        "payload": "tree ea0fbf9ae161803def5039ec935353f28e17765c\nparent 1687a0e5bc958bd204644f2d5ad3647ab461d65d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482225676 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485270066 +0100\n\nTrack the validation state of a transaction (CMerkleTx::fValidated)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1687a0e5bc958bd204644f2d5ad3647ab461d65d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687a0e5bc958bd204644f2d5ad3647ab461d65d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1687a0e5bc958bd204644f2d5ad3647ab461d65d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6861c4b2ca8690151ef7c2c69d2be224f6a39e0d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
        "patch": "@@ -953,6 +953,12 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n             wtx.fFromMe = wtxIn.fFromMe;\n             fUpdated = true;\n         }\n+        // If validation state has changed, update\n+        if (wtxIn.fValidated != wtx.Validated)\n+        {\n+             wtx.Validated = wtxIn.Validated;\n+             fUpdated = true;\n+        }\n     }\n \n     //// debug print\n@@ -1015,7 +1021,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * Abandoned state should probably be more carefuly tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate, bool fValidated)\n {\n     {\n         AssertLockHeld(cs_wallet);\n@@ -1038,7 +1044,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n             CWalletTx wtx(this, MakeTransactionRef(tx));\n-\n+            wtx.fValidated = fValidated;\n             // Get merkle branch if transaction was found in a block\n             if (posInBlock != -1)\n                 wtx.SetMerkleBranch(pIndex, posInBlock);\n@@ -1172,7 +1178,7 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n     if (!validated)\n         return;\n \n-    if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true, validated))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1569,7 +1575,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             int posInBlock;\n             for (posInBlock = 0; posInBlock < (int)block.vtx.size(); posInBlock++)\n             {\n-                if (AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate))\n+                if (AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate, true))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);"
      },
      {
        "sha": "a13dcfa2f985c8efa54ca74d6f8eeccc3a8a21cc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
        "patch": "@@ -182,6 +182,7 @@ class CMerkleTx\n      * compatibility.\n      */\n     int nIndex;\n+    bool fValidated;\n \n     CMerkleTx()\n     {\n@@ -321,6 +322,7 @@ class CWalletTx : public CMerkleTx\n         nImmatureWatchCreditCached = 0;\n         nChangeCached = 0;\n         nOrderPos = -1;\n+        fValidated = false;\n     }\n \n     ADD_SERIALIZE_METHODS;\n@@ -339,6 +341,9 @@ class CWalletTx : public CMerkleTx\n \n             if (nTimeSmart)\n                 mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+\n+            if (fValidated)\n+                mapValue[\"validated\"] = \"yes\";\n         }\n \n         READWRITE(*(CMerkleTx*)this);\n@@ -358,13 +363,15 @@ class CWalletTx : public CMerkleTx\n             ReadOrderPos(nOrderPos, mapValue);\n \n             nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n+            fValidated = (mapValue.count(\"validated\") && mapValue[\"validated\"] == \"yes\") ? true : false;\n         }\n \n         mapValue.erase(\"fromaccount\");\n         mapValue.erase(\"version\");\n         mapValue.erase(\"spent\");\n         mapValue.erase(\"n\");\n         mapValue.erase(\"timesmart\");\n+        mapValue.erase(\"validated\");\n     }\n \n     //! make sure balances are recalculated\n@@ -763,7 +770,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate, bool fValidated);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated);\n     void GetNonMempoolTransaction(const uint256 &hash, CTransactionRef &txsp);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);"
      }
    ]
  },
  {
    "sha": "1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2M5MjkzYmZhYTllNTA2ZWU4YmQ5ZjgzMTU0YWIwYjkwNWQ2Y2Fi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-20T09:40:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:12Z"
      },
      "message": "Add basic non-validation mode to the wallet",
      "tree": {
        "sha": "608998d525c490d889644be851909976bbe4f793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/608998d525c490d889644be851909976bbe4f793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/EACgkQKdS8tkFv\nU+wQGQ/9EASURm1wTEvVN7rtRzypOQsLxYiNTykvaQC7faPNn1czFoyuKWy//s6w\nLiAon9n8gkCbybB7TcxcUXWPZ82Uimhd5o6GqSDXw2MWF/gf14HlaOlFcljCGrLJ\n/m9V2vT4gP5ia6s5fzMjJwUuBKX9uAK4zxQzBl0uLIuxy9xWFH0QAcJcgp4ViYMT\n33KHgHBcpIBxJeI8d3iMWMd2iB8EOMFv8kOGE8lktsPqcZLcKQQgUwYk1JojQ8YO\nDqZfnc8U0GaOYG+qFGq8UpqrS7Wv/rLOKttxa1phWIhmXtnV1J3nYmyphr8oWtvU\n2ZC9zv1xJ422n8hWbtWhSjsOqXop5Exxc4N5HLzaSHv+l3Lo2RdX1ey+yASrNHiM\neg9rM6BcCJKXOlKFMitxKA3JKgWFZhZzZ5RrXzsZ5BWOBcNeuc2deqRY5RsyoPLy\nSgp/RwRNUT6B6Wdwpvnv81Lo0ej9nNy6ZcHoMgygBV8tDQS6BzpCFZG6d1W6h9cg\nrT1V1Td9EWB6UjBhgJ51R6yJ0+TFB1k7DtQ0ql5+ChHF8BLuCX2LJF1C4hNhKhHq\nFarqCjKUDcdDk/WQVyUSR+CoO6kpdzNQ4zdLhLSFw7EMRf3rTYS+o5UfS8Ie+9CI\nj5FEwCkUwCiPFbFnh2r10oH+QgyK5my3M8vY27IXuLsYFQT9FRA=\n=cxc9\n-----END PGP SIGNATURE-----",
        "payload": "tree 608998d525c490d889644be851909976bbe4f793\nparent 4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1482226857 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288432 +0100\n\nAdd basic non-validation mode to the wallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cbaf6c0e1c34d318bdff4e41e976ee3d4ab2566"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 22,
      "deletions": 17
    },
    "files": [
      {
        "sha": "068d6950f9a6b4203778eba391c46f96f9257e83",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
        "patch": "@@ -60,6 +60,7 @@ void EnsureWalletIsUnlocked()\n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n+    entry.push_back(Pair(\"validated\", wtx.fValidated));\n     entry.push_back(Pair(\"confirmations\", confirms));\n     if (wtx.IsCoinBase())\n         entry.push_back(Pair(\"generated\", true));\n@@ -585,7 +586,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx, -1, !wtx.fValidated))\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n@@ -639,7 +640,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx, -1, !wtx.fValidated))\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n@@ -703,7 +704,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n+            if (!CheckFinalTx(wtx, -1, !wtx.fValidated) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n                 continue;\n \n             CAmount allFee;\n@@ -1151,7 +1152,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx, -1, wtx.fValidated))\n             continue;\n \n         int nDepth = wtx.GetDepthInMainChain();\n@@ -2883,6 +2884,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CReserveKey reservekey(pwalletMain);\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    wtxBumped.fValidated = wtx.fValidated;\n     CValidationState state;\n     if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));"
      },
      {
        "sha": "45ced5011aca39488fde1465c19c4307cb7d2d3b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
        "patch": "@@ -954,9 +954,9 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n             fUpdated = true;\n         }\n         // If validation state has changed, update\n-        if (wtxIn.fValidated != wtx.Validated)\n+        if (wtxIn.fValidated != wtx.fValidated)\n         {\n-             wtx.Validated = wtxIn.Validated;\n+             wtx.fValidated = wtxIn.fValidated;\n              fUpdated = true;\n         }\n     }\n@@ -1175,9 +1175,6 @@ void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex,\n {\n     LOCK2(cs_main, cs_wallet);\n \n-    if (!validated)\n-        return;\n-\n     if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true, validated))\n         return; // Not one of ours\n \n@@ -1629,7 +1626,7 @@ bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n     {\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n-        if (InMempool() || AcceptToMemoryPool(maxTxFee, state)) {\n+        if (!fValidated || InMempool() || AcceptToMemoryPool(maxTxFee, state)) {\n             LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             if (connman) {\n                 CInv inv(MSG_TX, GetHash());\n@@ -1828,7 +1825,7 @@ bool CWalletTx::InMempool() const\n bool CWalletTx::IsTrusted() const\n {\n     // Quick answer in most cases\n-    if (!CheckFinalTx(*this))\n+    if (!CheckFinalTx(*this, -1, !fValidated))\n         return false;\n     int nDepth = GetDepthInMainChain();\n     if (nDepth >= 1)\n@@ -1947,7 +1944,7 @@ CAmount CWallet::GetUnconfirmedBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n+            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && (!pcoin->fValidated || pcoin->InMempool()))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n@@ -2024,7 +2021,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             const uint256& wtxid = it->first;\n             const CWalletTx* pcoin = &(*it).second;\n \n-            if (!CheckFinalTx(*pcoin))\n+            if (!CheckFinalTx(*pcoin, -1, !pcoin->fValidated))\n                 continue;\n \n             if (fOnlyConfirmed && !pcoin->IsTrusted())\n@@ -2484,6 +2481,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n+                bool fOnlyValidatedInputs = true;\n                 for (const auto& pcoin : setCoins)\n                 {\n                     CAmount nCredit = pcoin.first->tx->vout[pcoin.second].nValue;\n@@ -2496,7 +2494,11 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     if (age != 0)\n                         age += 1;\n                     dPriority += (double)nCredit * age;\n+                    if (!pcoin.first->fValidated)\n+                        fOnlyValidatedInputs = false;\n                 }\n+                // make sure the new txes validation state reflects the used inputs validation state\n+                wtxNew.fValidated = fOnlyValidatedInputs;\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n@@ -2777,7 +2779,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n+            if (wtxNew.fValidated && !wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n                 LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n@@ -3264,7 +3266,7 @@ CAmount CWallet::GetAccountBalance(CWalletDB& walletdb, const std::string& strAc\n     for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n+        if (!CheckFinalTx(wtx, -1, !wtx.fValidated) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n         CAmount nReceived, nSent, nFee;\n@@ -3954,11 +3956,12 @@ int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n     if (mi == mapBlockIndex.end())\n         return 0;\n     CBlockIndex* pindex = (*mi).second;\n-    if (!pindex || !chainActive.Contains(pindex))\n+    CChain *chainToUse = (fValidated ? &chainActive : &headersChainActive);\n+    if (!pindex || !chainToUse->Contains(pindex))\n         return 0;\n \n     pindexRet = pindex;\n-    return ((nIndex == -1) ? (-1) : 1) * (chainActive.Height() - pindex->nHeight + 1);\n+    return ((nIndex == -1) ? (-1) : 1) * (chainToUse->Height() - pindex->nHeight + 1);\n }\n \n int CMerkleTx::GetBlocksToMaturity() const"
      }
    ]
  },
  {
    "sha": "cfe99214217efa94128d97e27f823a926201e5d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmU5OTIxNDIxN2VmYTk0MTI4ZDk3ZTI3ZjgyM2E5MjYyMDFlNWQ2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-30T12:54:49Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:17Z"
      },
      "message": "Add UpdateBlockHeaderTip signal",
      "tree": {
        "sha": "e59c0e9049579503cebf39b1c10f6c1d67890b3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e59c0e9049579503cebf39b1c10f6c1d67890b3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfe99214217efa94128d97e27f823a926201e5d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/UACgkQKdS8tkFv\nU+xqPw/+IhHoctxzSpkyKBV7074pRJD/1HEOvLGo/CUA7SmNT8JWKTQ6DWl50vNW\nzk6hXZO0Lq+VlwGg5I3hkE+YJ2vshKdzRxvCgoLS9nYIm7UaYq3YcInXatQyUbjd\n0QhGm8qgIa5koVc6ncIWvOS3zFFnDHa63MmlfiyYmTM5tk7BXq/LKjjV3W2x42ca\npqlLSUoani70kWc/jITL0rpYd43QmhArN17IKu2N9xyW8FXqd61/OKJVxEA0QDqN\nN4LnK9+DtkotBqzkJJ0ejj8UrWDL1K/QItSCzZ40uXshhREG6j1Rx96xTJk0iC5a\nuzj+3xwMdtdVZRpcnFPJiakMwgUmUur2AsZs9126nNxErUapuOHGjDu4QJyR6j/l\ntqfQcjVNNqtSgIQNNCW+l+f9kLC6AY583GrfHfO+Nsc+5dm7LrFK/g5PLsYEE2b6\njc/2udK/Zvq/57k9wiL0BPJMTwQi0Jw7ZfF1aDs/uJRrxp6n8JDS8E6P/un8WaEp\np+t6Su5SGCmLIHGjTlTdvdYUVbwcMiHLR7vsPJZtTopkxKg/r+LSPDqvJ1xoSX8J\nP8Zxz6pxALw/Yo287yUc6oKSvjBNF+/y/ryOp8PlR7Jeasr4y9KKyNq5G5A3lsZH\njpg7Vl5Ax7cO5X7LUF9QexCyQfqDjDYtI9+vY7Yy2wE6/BL7c8U=\n=D7aC\n-----END PGP SIGNATURE-----",
        "payload": "tree e59c0e9049579503cebf39b1c10f6c1d67890b3b\nparent 1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483102489 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288437 +0100\n\nAdd UpdateBlockHeaderTip signal\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe99214217efa94128d97e27f823a926201e5d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe99214217efa94128d97e27f823a926201e5d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe99214217efa94128d97e27f823a926201e5d6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cc9293bfaa9e506ee8bd9f83154ab0b905d6cab"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "97c2e299a44278599488f8afb9851446a87c69c2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe99214217efa94128d97e27f823a926201e5d6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe99214217efa94128d97e27f823a926201e5d6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cfe99214217efa94128d97e27f823a926201e5d6",
        "patch": "@@ -2467,6 +2467,7 @@ static void NotifyHeaderTip() {\n     // Send block tip changed notifications without cs_main\n     if (fNotify) {\n         uiInterface.NotifyHeaderTip(fInitialBlockDownload, pindexHeader);\n+        GetMainSignals().UpdatedBlockHeaderTip(fInitialBlockDownload, pindexHeader);\n     }\n }\n "
      },
      {
        "sha": "6f4ca098cccabf97281fa0d59fc279c2e26e41df",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe99214217efa94128d97e27f823a926201e5d6/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe99214217efa94128d97e27f823a926201e5d6/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=cfe99214217efa94128d97e27f823a926201e5d6",
        "patch": "@@ -22,12 +22,14 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n+    g_signals.UpdatedBlockHeaderTip.connect(boost::bind(&CValidationInterface::UpdatedBlockHeaderTip, pwalletIn, _1, _2));\n     g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n     g_signals.NewPoWValidBlock.connect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n \n void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n+    g_signals.UpdatedBlockHeaderTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockHeaderTip, pwalletIn, _1, _2));\n     g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n@@ -42,6 +44,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n \n void UnregisterAllValidationInterfaces() {\n     g_signals.BlockFound.disconnect_all_slots();\n+    g_signals.UpdatedBlockHeaderTip.disconnect_all_slots();\n     g_signals.ScriptForMining.disconnect_all_slots();\n     g_signals.BlockChecked.disconnect_all_slots();\n     g_signals.Broadcast.disconnect_all_slots();"
      },
      {
        "sha": "4357dbebf533197b2d2fa8c2ca8a3dc15791168f",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe99214217efa94128d97e27f823a926201e5d6/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe99214217efa94128d97e27f823a926201e5d6/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=cfe99214217efa94128d97e27f823a926201e5d6",
        "patch": "@@ -33,6 +33,7 @@ void UnregisterAllValidationInterfaces();\n class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void UpdatedBlockHeaderTip(bool fInitialDownload, const CBlockIndex *pindexNew) {}\n     virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock, bool validated = true) {}\n     virtual void GetNonMempoolTransaction(const uint256 &hash,  std::shared_ptr<const CTransaction> &txsp) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n@@ -82,6 +83,8 @@ struct CMainSignals {\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    /** Best header has changed */\n+    boost::signals2::signal<void (bool, const CBlockIndex *)> UpdatedBlockHeaderTip;\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "14ab0068adb388d60d54095709a51c3236f256e2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe99214217efa94128d97e27f823a926201e5d6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe99214217efa94128d97e27f823a926201e5d6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cfe99214217efa94128d97e27f823a926201e5d6",
        "patch": "@@ -1171,6 +1171,11 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n+void CWallet::UpdatedBlockHeaderTip(bool fInitialDownload, const CBlockIndex *pindexNew)\n+{\n+\n+}\n+\n void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated)\n {\n     LOCK2(cs_main, cs_wallet);"
      },
      {
        "sha": "b5028f0bd32c72b67def92f16152698a00772178",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe99214217efa94128d97e27f823a926201e5d6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe99214217efa94128d97e27f823a926201e5d6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cfe99214217efa94128d97e27f823a926201e5d6",
        "patch": "@@ -772,6 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate, bool fValidated);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated);\n+    void UpdatedBlockHeaderTip(bool fInitialDownload, const CBlockIndex *pindexNew);\n     void GetNonMempoolTransaction(const uint256 &hash, CTransactionRef &txsp);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      }
    ]
  },
  {
    "sha": "1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDMwMTFlZjkxYWU4OGZjZTg4NjQ3ZTdkNGEzZmU5MjRmZjBjYjIy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-30T12:55:22Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:17Z"
      },
      "message": "Keep track of the headers chain tip to detect forks",
      "tree": {
        "sha": "95ef7672724ebe2bbc14a3aacde7e5b16874c4e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95ef7672724ebe2bbc14a3aacde7e5b16874c4e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/UACgkQKdS8tkFv\nU+zc8A//fSJDWwoIwE0LusbRI/fznf3jOR7Z+9Hki4AgSfTHfF8ytDS/t2qdaib4\n9PDCv+OBvyBBjpsuoeVmHBgmQVKM4iJp7GYBLNIH2+TCan/h+iOloNexlrGW0rHM\nRx+RGzXrzANYZLQt23N6T6h1EkETlHsgUtDJ+NdeIuaNblNiYAHJ6ha4FDEEugQ9\nSLNBAUf3GfVtXyiEB9SklGy2Sh9EQhQKaDgQsPK/tK27T9MgZ6y3hly0ElZvLO/+\n5P7DcCRKSSTVT9SqAjFEZfBe8ZhfTVoV3n5vRkexfw3B2XWZjQqzuXhlYMk2kStY\ne712LHATfah2mCKHhD46RJabH0Lt0SM0jbNkrfrMr44QkFUreETstlxPCPprjKnX\nmMctZ0t5S2DlaxMJN6nbzGWJvO8RjfOuDud8BwbOhKOOWdIjdaNadxQPEffY+L7S\nB1/oMpBlof6oXsBHRrCKKnmRNSraHad2B4uwmYyEGwm/qmuAOKooiZDnrJYxHi/g\nAUVb6B8tqm6i5Pf9aBfardxjblWaKFaDwrS28JHm/Uh16E+GoPrXcvvP8z6XgyUb\nhP+BbnnegfN20I6tQOfVEKHnzFPYg0ol/dJJ81qWjzvfsO1Vtqy/xsKkSjns/pum\nQy44iVcU2rPKcgiPIxttlqjWBCutR9wlXr2iMKjPLqpOcnEID/w=\n=BZhO\n-----END PGP SIGNATURE-----",
        "payload": "tree 95ef7672724ebe2bbc14a3aacde7e5b16874c4e5\nparent cfe99214217efa94128d97e27f823a926201e5d6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483102522 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288437 +0100\n\nKeep track of the headers chain tip to detect forks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfe99214217efa94128d97e27f823a926201e5d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe99214217efa94128d97e27f823a926201e5d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe99214217efa94128d97e27f823a926201e5d6"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f709cd98d27139e40faa1825730cfc13c53b4153",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
        "patch": "@@ -1173,7 +1173,21 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n \n void CWallet::UpdatedBlockHeaderTip(bool fInitialDownload, const CBlockIndex *pindexNew)\n {\n+    LOCK2(cs_main, cs_wallet);\n \n+    if (pLastKnownBestHeader != NULL)\n+    {\n+        if (!headersChainActive.Contains(pLastKnownBestHeader))\n+        {\n+            const CBlockIndex *pindexFork = headersChainActive.FindFork(pLastKnownBestHeader);\n+            if (headersChainActive.Tip() && headersChainActive.Tip() != pindexFork)\n+            {\n+                // fork detected\n+                // TODO\n+            }\n+        }\n+    }\n+    pLastKnownBestHeader = (CBlockIndex *)pindexNew;\n }\n \n void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated)"
      },
      {
        "sha": "60ba4bfd324e39247e4d10237cef5d9d5cf0f389",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
        "patch": "@@ -669,6 +669,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nLastResend = 0;\n         nTimeFirstKey = 0;\n         fBroadcastTransactions = false;\n+        pLastKnownBestHeader = NULL;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -689,6 +690,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nTimeFirstKey;\n \n+    //! last known best header, required to check for forks\n+    CBlockIndex *pLastKnownBestHeader;\n+\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature"
      }
    ]
  },
  {
    "sha": "48c4c3c7c187c28608cecd39cd1401b062e97d3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGM0YzNjN2MxODdjMjg2MDhjZWNkMzljZDE0MDFiMDYyZTk3ZDNj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-01T19:50:45Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:17Z"
      },
      "message": "Little CAuxiliaryBlockRequest refactor",
      "tree": {
        "sha": "530c307766955840f1b8246157caa1b25ec59e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/530c307766955840f1b8246157caa1b25ec59e90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48c4c3c7c187c28608cecd39cd1401b062e97d3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/UACgkQKdS8tkFv\nU+z1+Q//ezgQBIgg+XI5UJmI6eN3L8+Dt5O+h9K8KLkxFsd1kujouoHT9eHdZ6+y\nho5W/1MDmdicudgody5eFtsxu3LGkk5Pzmaiu1VBs1hv7KZLgsCGmsxBKCfTKjq2\nxQV1sotJ5c0Q0MpKpD0Mgf8FAQ/CD6/nKbjLj5jB1tWgxI1Xcy+hk3SOJmebZDLz\nJ8e3eQkiG123RktjqKdMXTfOxQ65NDo4ZTO55iwLRmcaoDjxPZ6tTefuEGPf1y3e\nEfgYCyGCJzKNKMwWIfHcbZEgk2KVVL+PWHrjnxM+RjtWNEQKCLeP6uzvbpZzljvr\npz8EhAjHDa+F1kdyP8mRBG1gW8L6IkRvkVgT5obYAJM2UG+SYJvS/LZ8ZJi0JQMo\n+HQmJ5Vke/SR5w5m/pu0AeW3XhzQZ5VJaobrTJkyv6lIWa7RXnuu7gbD7e3JHlB6\nuJYhr5496eHn9+9G9WMVj5n9+DubTQGWGyFTT7KonoX5YHnQnSyrZremQ/29I6XE\nt4UYPnT01+7ERKTWcCNcN+1SXc+b11YFwQLRhi/xLipP6FahLk5rZGxh/1L0lfi2\ngjU7K60BJSHxnNQUp+NlHoUloVsxo9ArwurXfYuD06hSMkOSsEukJfwpF1oxQNiG\nt/tWQBQ6rzyqq5mLaMO2Aam/+OShslpHUU+wXOHu2AnezGym9rQ=\n=cViI\n-----END PGP SIGNATURE-----",
        "payload": "tree 530c307766955840f1b8246157caa1b25ec59e90\nparent 1d3011ef91ae88fce88647e7d4a3fe924ff0cb22\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483300245 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288437 +0100\n\nLittle CAuxiliaryBlockRequest refactor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c4c3c7c187c28608cecd39cd1401b062e97d3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48c4c3c7c187c28608cecd39cd1401b062e97d3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c4c3c7c187c28608cecd39cd1401b062e97d3c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3011ef91ae88fce88647e7d4a3fe924ff0cb22"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bb2adb87ce4060e86dda8df13978a544b832f4b5",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c4c3c7c187c28608cecd39cd1401b062e97d3c/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c4c3c7c187c28608cecd39cd1401b062e97d3c/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=48c4c3c7c187c28608cecd39cd1401b062e97d3c",
        "patch": "@@ -31,7 +31,7 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n         const CBlockIndex *pindexRequest = this->vBlocksToDownload[i];\n         std::shared_ptr<const CBlock> currentBlock;\n \n-        // if a block has been passed, check if is the next item in the sequence\n+        // if a block has been passed, check if it's the next item in the sequence\n         if (pindex && pblock && pindex == pindexRequest)\n             currentBlock = pblock;\n         else if (pindexRequest->nStatus & BLOCK_HAVE_DATA) {\n@@ -64,7 +64,7 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n                 this->cancel();\n \n         // release global block request pointer if request has been completed\n-        if (this->processedUpToSize == this->vBlocksToDownload.size())\n+        if (currentBlockRequest == shared_from_this() && isCompleted())\n             currentBlockRequest = nullptr;\n \n         if (i-this->processedUpToSize >= MAX_BLOCK_TO_PROCESS_PER_ITERATION)\n@@ -123,6 +123,11 @@ unsigned int CAuxiliaryBlockRequest::amountOfBlocksLoaded()\n     return haveData;\n }\n \n+bool CAuxiliaryBlockRequest::isCompleted()\n+{\n+    return (this->processedUpToSize == this->vBlocksToDownload.size());\n+}\n+\n std::shared_ptr<CAuxiliaryBlockRequest> CAuxiliaryBlockRequest::GetCurrentRequest()\n {\n     return currentBlockRequest;"
      },
      {
        "sha": "65ba7d3bfe67a00804c24ef195d98a786f5396e4",
        "filename": "src/auxiliaryblockrequest.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c4c3c7c187c28608cecd39cd1401b062e97d3c/src/auxiliaryblockrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c4c3c7c187c28608cecd39cd1401b062e97d3c/src/auxiliaryblockrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.h?ref=48c4c3c7c187c28608cecd39cd1401b062e97d3c",
        "patch": "@@ -45,6 +45,9 @@ class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlo\n     /** returns the amount of already loaded/local-stored blocks from this blockrequest */\n     unsigned int amountOfBlocksLoaded();\n \n+    /** returns true if all blocks have been downloaded & processed */\n+    bool isCompleted();\n+\n     /** Get the current main blockrequest, thread_safe */\n     static std::shared_ptr<CAuxiliaryBlockRequest> GetCurrentRequest();\n "
      }
    ]
  },
  {
    "sha": "5585662d372ec422b45a6ae44d45c38d8c63eb82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTg1NjYyZDM3MmVjNDIyYjQ1YTZhZTQ0ZDQ1YzM4ZDhjNjNlYjgy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-01T20:23:53Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:18Z"
      },
      "message": "Add full working SPV mode to the wallet",
      "tree": {
        "sha": "7ed6f29271e6e33f674fc36f3256871fc50e6688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ed6f29271e6e33f674fc36f3256871fc50e6688"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5585662d372ec422b45a6ae44d45c38d8c63eb82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/YACgkQKdS8tkFv\nU+zzPg//SvvuHZ1HdnTNbZ5cPiuJ+MO3rqWVj/0IMS+cAq/iIA1aRCf0jIv2DplQ\nH6IS+bxr63po/6w5OJ6coIXdFmyOxIr1N7JC3akP0PhKNuu9xEB5DdMmC6I/aPfv\npZjPZwZlOPZ0lKIvpGjwgusGnj2CGgtePJwTLpNe1aPRcz7a3hVAIEEt/dlBzoQ+\nfExNux/xoOfuhM7rwItKK7BhU8h42VyYC7S1nMLANRzUqwrxnUjuPNiH/FbSwv3K\ndMKXRTpJGcY60Y+HvxyboTlhsAn0n+pQLRFpIrJYZpDTxSvzTtTzogDn32sMGT+C\nCWZYiBMtiL/w//cDiAvoaYwaFUaEEMDmJHxqU2vY+LljWhDMwvXULfcV9qjiTfVP\nxmrOEAxxYSv+llApTZrUGLVqbWOWD+k+y1ktfcfe0gMkE1MFW154H6SBa95iKpK5\nPCw42Z4d+C7TIwjbBfZnC7+yyUWZTY3pACo2ZWqsF1fFDSa+jsz9UO98SsemLZvj\nizPhOm9rrkdcFmO4Zj6+1iR1AOOi2d4nSwv5hBjAikEX6T9v/f9Ro/p3Y/ne/3/i\naXGRHEd2qq77nkhltd7KnVtdXl++JDTtE7rTB4Rir4qaSpAMPc6cl2eQRItzeTP0\nYX8t4vKXtvg60lBw2L6srRDfhRj6RzGcK1hGNlMWxLINFuSCVtk=\n=K1FE\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ed6f29271e6e33f674fc36f3256871fc50e6688\nparent 48c4c3c7c187c28608cecd39cd1401b062e97d3c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483302233 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288438 +0100\n\nAdd full working SPV mode to the wallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5585662d372ec422b45a6ae44d45c38d8c63eb82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5585662d372ec422b45a6ae44d45c38d8c63eb82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5585662d372ec422b45a6ae44d45c38d8c63eb82/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48c4c3c7c187c28608cecd39cd1401b062e97d3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c4c3c7c187c28608cecd39cd1401b062e97d3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48c4c3c7c187c28608cecd39cd1401b062e97d3c"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 264,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4bfa546f3abe375f09480839896c4b6e4b4dcba3",
        "filename": "qa/rpc-tests/spv.py",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5585662d372ec422b45a6ae44d45c38d8c63eb82/qa/rpc-tests/spv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5585662d372ec422b45a6ae44d45c38d8c63eb82/qa/rpc-tests/spv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/spv.py?ref=5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "patch": "@@ -0,0 +1,122 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from pprint import pprint\n+\n+class SPVTest (BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        #connect to a local machine for debugging\n+        # url = \"http://test:test@%s:%d\" % ('127.0.0.1', 18332)\n+        # proxy = AuthServiceProxy(url)\n+        # proxy.url = url # store URL on proxy for info\n+        # self.nodes.append(proxy)\n+\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-autorequestblocks=0\", \"-spv=1\"]))\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+    def header_sync(self, node, height):\n+        timeout = 20\n+        while timeout > 0:\n+            for ct in node.getchaintips():\n+                if ct['status'] == \"headers-only\":\n+                    if ct['height'] == height:\n+                        return;\n+            time.sleep(1)\n+            timeout-=1\n+        assert(timeout>0)\n+\n+    def active_chain_height(self, node):\n+        for ct in node.getchaintips():\n+            if ct['status'] == \"active\":\n+                return ct['height']\n+        return -1\n+        \n+    def wait_wallet_spv_sync(self, node, hash):\n+        timeout = 20\n+        while timeout > 0:\n+            if node.getwalletinfo()['spv_bestblock_hash'] == hash:\n+                return\n+        assert(timeout>0)\n+\n+    def run_test(self):\n+        print(\"Mining blocks...\")\n+        self.nodes[0].setmocktime(int(time.time()) - 10600)\n+        self.nodes[0].generate(31)\n+        self.nodes[0].setmocktime(0)\n+        self.nodes[0].generate(70)\n+        self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 2)\n+        self.nodes[0].generate(1)\n+        self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 3)\n+        self.nodes[0].generate(1)\n+        node0bbhash = self.nodes[0].getbestblockhash()\n+        self.header_sync(self.nodes[1], 103)\n+        assert(self.active_chain_height(self.nodes[1]) == 0)\n+\n+        # spv sync must be possible due to the set -spv mode\n+        self.wait_wallet_spv_sync(self.nodes[1], node0bbhash)\n+\n+        # best block should be available at this point due to spv sync\n+        bh = self.nodes[1].getblockheader(node0bbhash, True)\n+        assert(bh['validated'] == False)\n+        bh = self.nodes[1].getblock(node0bbhash, True)\n+\n+        # confirmations must be -1 because we haven't validated the block\n+        assert(bh['confirmations'] == -1)\n+\n+        # fork\n+        self.nodes[0].invalidateblock(node0bbhash)\n+        newblocks = self.nodes[0].generate(2)\n+        node0bbhash = self.nodes[0].getbestblockhash()\n+\n+        # spy sync\n+        self.wait_wallet_spv_sync(self.nodes[1], node0bbhash)\n+\n+        # make sure the transactions are still available\n+        lt = self.nodes[1].listtransactions()\n+        assert(len(lt) == 2)\n+        confForked = -1\n+        confNonForked = -1\n+        for t in lt:\n+            if t['amount'] == Decimal('3.00000000'):\n+                confForked = t['confirmations']\n+            if t['amount'] == Decimal('2.00000000'):\n+                confNonForked = t['confirmations']\n+\n+        assert(confForked == 2)\n+        assert(confNonForked == 3)\n+\n+        # enable auto-request of blocks (normal IBD)\n+        print(\"Restart node1...\", end=\"\", flush=True)\n+        stop_node(self.nodes[1], 1)\n+        self.nodes[1] = start_node(1, self.options.tmpdir, [\"-autorequestblocks=0\", \"-spv=1\"])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        print(\"done\")\n+        self.nodes[1].setautorequestblocks(True)\n+        sync_blocks(self.nodes)\n+        lt = self.nodes[1].listtransactions()\n+        confForked = -1\n+        confNonForked = -1\n+        for t in lt:\n+            assert(t['validated'])\n+            if t['amount'] == Decimal('3.00000000'):\n+                confForked = t['confirmations']\n+            if t['amount'] == Decimal('2.00000000'):\n+                confNonForked = t['confirmations']\n+\n+        assert(confForked == 2)\n+        assert(confNonForked == 3)\n+\n+if __name__ == '__main__':\n+    SPVTest ().main ()"
      },
      {
        "sha": "a3bf884beaa1b9f42abb827ccaaece38cd126677",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "patch": "@@ -2318,7 +2318,10 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keypoolsize\\\": xxxx,          (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,           (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\" (string) the Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"spv_bestblock_height\\\": x,    (numeric) the height of the latest SPV scanned block\\n\"\n+            \"  \\\"spv_bestblock_hash\\\": x,      (string) the hash of the latest SPV scanned block\\n\"\n+            \"  \\\"spv_headerschain_height\\\": x, (numeric) the height of the wallets headers-chain tip\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2341,6 +2344,9 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n          obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+    obj.push_back(Pair(\"spv_bestblock_height\", (int)(pwalletMain->pNVSBestBlock ? pwalletMain->pNVSBestBlock->nHeight : 0)));\n+    obj.push_back(Pair(\"spv_bestblock_hash\", (pwalletMain->pNVSBestBlock ? pwalletMain->pNVSBestBlock->GetBlockHash().GetHex() : \"\")));\n+    obj.push_back(Pair(\"spv_headerschain_height\", (int)(pwalletMain->pNVSLastKnownBestHeader ? pwalletMain->pNVSLastKnownBestHeader->nHeight : 0)));\n     return obj;\n }\n "
      },
      {
        "sha": "bb330d483fb28200218f95d268d964394177b4ad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 9,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"wallet/wallet.h\"\n \n+#include \"auxiliaryblockrequest.h\"\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"chain.h\"\n@@ -45,6 +46,8 @@ bool fWalletRbf = DEFAULT_WALLET_RBF;\n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n+const static size_t nMaxBlocksPerAuxiliaryRequest = 16*32;\n+\n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n  * Override with -mintxfee\n@@ -1175,19 +1178,20 @@ void CWallet::UpdatedBlockHeaderTip(bool fInitialDownload, const CBlockIndex *pi\n {\n     LOCK2(cs_main, cs_wallet);\n \n-    if (pLastKnownBestHeader != NULL)\n+    if (pNVSLastKnownBestHeader && !headersChainActive.Contains(pNVSLastKnownBestHeader))\n     {\n-        if (!headersChainActive.Contains(pLastKnownBestHeader))\n+        const CBlockIndex *pindexFork = headersChainActive.FindFork(pNVSLastKnownBestHeader);\n+        if (headersChainActive.Tip() && headersChainActive.Tip() != pindexFork)\n         {\n-            const CBlockIndex *pindexFork = headersChainActive.FindFork(pLastKnownBestHeader);\n-            if (headersChainActive.Tip() && headersChainActive.Tip() != pindexFork)\n-            {\n-                // fork detected\n-                // TODO\n-            }\n+            pNVSLastKnownBestHeader = const_cast<CBlockIndex *>(pindexFork);\n+            if (pNVSBestBlock && pNVSBestBlock->nHeight >= pNVSLastKnownBestHeader->nHeight)\n+                pNVSBestBlock = const_cast<CBlockIndex *>(pindexFork);\n         }\n     }\n-    pLastKnownBestHeader = (CBlockIndex *)pindexNew;\n+    pNVSLastKnownBestHeader = const_cast<CBlockIndex *>(pindexNew);\n+\n+    if (GetBoolArg(\"-spv\", false))\n+        RequestNonValidationScan();\n }\n \n void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated)\n@@ -3562,6 +3566,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n+    strUsage += HelpMessageOpt(\"-spv\", strprintf(_(\"Make use of full block spv default: %u)\"), false));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n@@ -3763,6 +3768,15 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             }\n         }\n     }\n+\n+    // read non validation best block\n+    CWalletDB walletdb(walletFile);\n+    CBlockLocator locator;\n+    if (walletdb.ReadNonValidationBestBlock(locator))\n+        walletInstance->pNVSBestBlock = FindForkInGlobalIndex(headersChainActive, locator);\n+    else\n+        walletInstance->pNVSBestBlock = chainActive.Genesis();\n+\n     walletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n     {\n@@ -3791,6 +3805,9 @@ bool CWallet::InitLoadWallet()\n     }\n     pwalletMain = pwallet;\n \n+    if (GetBoolArg(\"-spv\", false))\n+        pwalletMain->RequestNonValidationScan();\n+\n     return true;\n }\n \n@@ -3897,6 +3914,95 @@ bool CWallet::ParameterInteraction()\n     return true;\n }\n \n+void CWallet::RequestNonValidationScan(int64_t optional_timestamp)\n+{\n+    if (CAuxiliaryBlockRequest::GetCurrentRequest() && !CAuxiliaryBlockRequest::GetCurrentRequest()->isCompleted())\n+        return;\n+\n+    CBlockIndex *pIndex = NULL;\n+    CBlockIndex *chainActiveTip = NULL;\n+    int64_t oldest_key = std::numeric_limits<int64_t>::max();;\n+    int nonValidationScanUpToHeight = 0;\n+    {\n+        LOCK2(cs_main, cs_wallet);\n+        if (pNVSBestBlock)\n+            nonValidationScanUpToHeight = pNVSBestBlock->nHeight;\n+        chainActiveTip = chainActive.Tip();\n+        pIndex = headersChainActive.Tip();\n+        std::map<CKeyID, int64_t> mapKeyBirth;\n+        GetKeyBirthTimes(mapKeyBirth);\n+        for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+            if ((*it).second < oldest_key)\n+                oldest_key = (*it).second;\n+        }\n+    }\n+\n+    if (optional_timestamp > 0)\n+    {\n+        oldest_key = optional_timestamp;\n+        nonValidationScanUpToHeight = 0;\n+    }\n+\n+    // find header\n+    if (!pIndex)\n+        return;\n+\n+    std::vector<const CBlockIndex*> blocksToDownload;\n+    do {\n+        if (pIndex == chainActiveTip)\n+            break;\n+\n+        // don't request blocks that are already scanned\n+        if (pIndex->nHeight <= nonValidationScanUpToHeight)\n+            break;\n+\n+        // check if block is relevant to this wallet\n+        if (pIndex->GetBlockTime() + 7200 < oldest_key)\n+            break;\n+\n+        // block is relevant, request\n+        blocksToDownload.push_back(pIndex);\n+\n+        // ensure we only request up to nMaxBlocksPerAuxiliaryRequest\n+        if (blocksToDownload.size() > nMaxBlocksPerAuxiliaryRequest)\n+            blocksToDownload.erase(blocksToDownload.begin());\n+        pIndex = pIndex->pprev;\n+    } while (pIndex->pprev);\n+\n+    // don't create empty CBlockRequests\n+    if (blocksToDownload.size() == 0)\n+        return;\n+    // reverse the blocks vector from older->newer\n+    std::reverse(blocksToDownload.begin(), blocksToDownload.end());\n+    // create an auxiliary block request\n+    std::shared_ptr<CAuxiliaryBlockRequest> auxiliaryRequest(new CAuxiliaryBlockRequest(blocksToDownload, GetAdjustedTime(), true, [this](std::shared_ptr<CAuxiliaryBlockRequest> cb_AuxiliaryBlockRequest, const CBlockIndex *pindex) -> bool {\n+\n+        LOCK2(cs_main, cs_wallet);\n+        if (pindex && (!pNVSBestBlock || pindex->nHeight > pNVSBestBlock->nHeight))\n+        {\n+            // write non validation best block\n+            pNVSBestBlock = const_cast<CBlockIndex *>(pindex);\n+            CBlockLocator locator = headersChainActive.GetLocator(pNVSBestBlock);\n+\n+            if (!locator.IsNull())\n+            {\n+                CWalletDB walletdb(strWalletFile);\n+                walletdb.WriteNonValidationBestBlock(locator);\n+            }\n+        }\n+\n+        // try to download more blocks if this on has been completed\n+        if (cb_AuxiliaryBlockRequest->isCompleted())\n+            RequestNonValidationScan();\n+\n+        // continue with the request\n+        return true;\n+    }));\n+\n+    // set the global Auxiliarry Block Request\n+    auxiliaryRequest->setAsCurrentRequest();\n+}\n+\n bool CWallet::BackupWallet(const std::string& strDest)\n {\n     if (!fFileBacked)"
      },
      {
        "sha": "bb54a1bf18c4c959c425d6b7fd5e5e8faa58370b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "patch": "@@ -669,7 +669,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nLastResend = 0;\n         nTimeFirstKey = 0;\n         fBroadcastTransactions = false;\n-        pLastKnownBestHeader = NULL;\n+        pNVSLastKnownBestHeader = NULL;\n+        pNVSBestBlock = NULL;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -691,7 +692,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     int64_t nTimeFirstKey;\n \n     //! last known best header, required to check for forks\n-    CBlockIndex *pLastKnownBestHeader;\n+    CBlockIndex *pNVSLastKnownBestHeader;\n+    //! wallet did non-validation scan up to this block\n+    CBlockIndex *pNVSBestBlock;\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n@@ -962,6 +965,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Wallets parameter interaction */\n     static bool ParameterInteraction();\n \n+    void RequestNonValidationScan(int64_t optional_timestamp = 0);\n     bool BackupWallet(const std::string& strDest);\n \n     /* Set the HD chain model (chain child index counters) */"
      },
      {
        "sha": "00df9a383035257467395e3887f0e570923c90b0",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "patch": "@@ -141,6 +141,17 @@ bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n     return Read(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n+bool CWalletDB::WriteNonValidationBestBlock(const CBlockLocator& locator)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"nonvalidationbestblock\"), locator);\n+}\n+\n+bool CWalletDB::ReadNonValidationBestBlock(CBlockLocator& locator)\n+{\n+    return Read(std::string(\"nonvalidationbestblock\"), locator);\n+}\n+\n bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n {\n     nWalletDBUpdated++;"
      },
      {
        "sha": "0cc0579d59973006baa0b42d1035bf6cac572a9d",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5585662d372ec422b45a6ae44d45c38d8c63eb82/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "patch": "@@ -141,6 +141,9 @@ class CWalletDB : public CDB\n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);\n \n+    bool WriteNonValidationBestBlock(const CBlockLocator& locator);\n+    bool ReadNonValidationBestBlock(CBlockLocator& locator);\n+\n     bool WriteOrderPosNext(int64_t nOrderPosNext);\n \n     bool WriteDefaultKey(const CPubKey& vchPubKey);"
      }
    ]
  },
  {
    "sha": "5826a5de17a458ae646569e5779546d2a69f98fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODI2YTVkZTE3YTQ1OGFlNjQ2NTY5ZTU3Nzk1NDZkMmE2OWY5OGZl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T11:32:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:18Z"
      },
      "message": "[Qt] add basic SPV support for the transaction table",
      "tree": {
        "sha": "be68588f9e01fc12db8cacc41065597ca82b1907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be68588f9e01fc12db8cacc41065597ca82b1907"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5826a5de17a458ae646569e5779546d2a69f98fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/YACgkQKdS8tkFv\nU+yI/A//VCF0iEA3g5x0W0vXelSaQ9gm9PhdOPGwJv9tA2LJpWdDjhSiCzJnM5S1\nPTTDDEFEz1Q11drbzEom9RU3LHpGb4Uz/MPDujTkBXyMBme+TPBXxxKD45TQtBNv\nuxInvFmewQlTGQFMo3natZ/pkpPl3fshwcF82L5kXkbsNzJfCRY2Dp2jINrQ07i0\n16Ub80mu6N6tPNowjHY8xS0j4sqtLHCql8ooBLbYB3yDALcsBc7dVPXqcCTjOKdE\nr6bhA6FSMOxIp8chYJaucYM/gkmeNLzrisgHypQnMDJ+6Ey4dvTv2GJAmR3R9oPb\naXLK9nxmTUcXhKgAMDNU8t40fOudupe/q/NWQIfT/yVIjfkLyqljyn9qi+2+nkXd\nMIExSK2JrCEnNb816aX27U0+1+H3YTUEywdWSx0RwTPezyN9JE0/gjbTlzIIcice\nZFtrVMozBKSvbN0FPbQvByQjIpZSeGqiPZzO6rikhyCTGzSpYF5hSJ9L5wxaGCZ3\n7YO+mKflrPyhh80zTYZ73aICa+KEgRsPoAI/q7XmygKKATm7Xn18mkcL7hf4OZJt\nIrc7xoDxtWIN3C8Ih9W99YLJ1BgU5fAxuwU3qFsaIHR0rus22w5xB+fCef9yhCLU\ndMlLPRCX23fNFivPZEQdPmSOnEBN2teJcia90A4prEyJVqUqkhM=\n=e1Nq\n-----END PGP SIGNATURE-----",
        "payload": "tree be68588f9e01fc12db8cacc41065597ca82b1907\nparent 5585662d372ec422b45a6ae44d45c38d8c63eb82\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483356775 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288438 +0100\n\n[Qt] add basic SPV support for the transaction table\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5826a5de17a458ae646569e5779546d2a69f98fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5826a5de17a458ae646569e5779546d2a69f98fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5826a5de17a458ae646569e5779546d2a69f98fe/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5585662d372ec422b45a6ae44d45c38d8c63eb82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5585662d372ec422b45a6ae44d45c38d8c63eb82"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 32,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3df83765bea5b06b1276c1b5942e51a2d2f685c8",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=5826a5de17a458ae646569e5779546d2a69f98fe",
        "patch": "@@ -31,6 +31,8 @@ static const bool DEFAULT_SPLASHSCREEN = true;\n #define COLOR_TX_STATUS_OFFLINE QColor(192, 192, 192)\n /* Transaction list -- TX status decoration - danger, tx needs attention */\n #define COLOR_TX_STATUS_DANGER QColor(200, 100, 100)\n+/* Transaction list -- TX status decoration - spv transaction */\n+#define COLOR_TX_STATUS_SPV_BACKGROUND QColor(240,240,240)\n /* Transaction list -- TX status decoration - default color */\n #define COLOR_BLACK QColor(0, 0, 0)\n "
      },
      {
        "sha": "46707594adde77a72cb6798887f3796ab14486ab",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=5826a5de17a458ae646569e5779546d2a69f98fe",
        "patch": "@@ -24,7 +24,7 @@\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     AssertLockHeld(cs_main);\n-    if (!CheckFinalTx(wtx))\n+    if (!CheckFinalTx(wtx, -1 , !wtx.fValidated))\n     {\n         if (wtx.tx->nLockTime < LOCKTIME_THRESHOLD)\n             return tr(\"Open for %n more block(s)\", \"\", wtx.tx->nLockTime - chainActive.Height());\n@@ -71,6 +71,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     }\n     strHTML += \"<br>\";\n \n+    strHTML += \"<b>\" + tr(\"SPV only\") + \":</b> \" + (!rec->status.fValidated ? \"yes\" : \"no\") + \"<br>\";\n     strHTML += \"<b>\" + tr(\"Date\") + \":</b> \" + (nTime ? GUIUtil::dateTimeStr(nTime) : \"\") + \"<br>\";\n \n     //"
      },
      {
        "sha": "a135522a8d064c9b9e14a69352b7b9c695cabd42",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=5826a5de17a458ae646569e5779546d2a69f98fe",
        "patch": "@@ -188,7 +188,8 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n-    if (!CheckFinalTx(wtx))\n+    status.fValidated = wtx.fValidated;\n+    if (!CheckFinalTx(wtx, -1, !status.fValidated))\n     {\n         if (wtx.tx->nLockTime < LOCKTIME_THRESHOLD)\n         {"
      },
      {
        "sha": "12b63fb34fb1da01b2455a64053f22a5f8afe846",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=5826a5de17a458ae646569e5779546d2a69f98fe",
        "patch": "@@ -61,6 +61,9 @@ class TransactionStatus\n \n     /** Current number of blocks (to know whether cached status is still valid) */\n     int cur_num_blocks;\n+\n+    /** true if transaction has been validated (false == spv) */\n+    bool fValidated;\n };\n \n /** UI model for a transaction. A core transaction can be represented by multiple UI transactions if it has"
      },
      {
        "sha": "da56cbd802acbca53e16b3f0a7829a857d9113c2",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=5826a5de17a458ae646569e5779546d2a69f98fe",
        "patch": "@@ -367,19 +367,22 @@ QString TransactionTableModel::lookupAddress(const std::string &address, bool to\n \n QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const\n {\n+    QString prefix;\n+    if (!wtx->status.fValidated)\n+        prefix = \"SPV/\";\n     switch(wtx->type)\n     {\n     case TransactionRecord::RecvWithAddress:\n-        return tr(\"Received with\");\n+        return prefix+tr(\"Received with\");\n     case TransactionRecord::RecvFromOther:\n-        return tr(\"Received from\");\n+        return prefix+tr(\"Received from\");\n     case TransactionRecord::SendToAddress:\n     case TransactionRecord::SendToOther:\n-        return tr(\"Sent to\");\n+        return prefix+tr(\"Sent to\");\n     case TransactionRecord::SendToSelf:\n-        return tr(\"Payment to yourself\");\n+        return prefix+tr(\"Payment to yourself\");\n     case TransactionRecord::Generated:\n-        return tr(\"Mined\");\n+        return prefix+tr(\"Mined\");\n     default:\n         return QString();\n     }\n@@ -402,6 +405,13 @@ QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx\n     }\n }\n \n+QVariant TransactionTableModel::typeDecoration(const TransactionRecord *wtx) const\n+{\n+    if(!wtx->status.fValidated)\n+        return QIcon(\":/icons/tx_spv\");\n+    return QVariant();\n+}\n+\n QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const\n {\n     QString watchAddress;\n@@ -533,6 +543,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n             return txStatusDecoration(rec);\n         case Watchonly:\n             return txWatchonlyDecoration(rec);\n+        case Type:\n+            return typeDecoration(rec);\n         case ToAddress:\n             return txAddressDecoration(rec);\n         }\n@@ -577,6 +589,11 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return formatTooltip(rec);\n     case Qt::TextAlignmentRole:\n         return column_alignments[index.column()];\n+    case Qt::BackgroundRole:\n+        if(!rec->status.fValidated)\n+            return COLOR_TX_STATUS_SPV_BACKGROUND;\n+        else\n+            return QColor(255,255,255,255);\n     case Qt::ForegroundRole:\n         // Use the \"danger\" color for abandoned transactions\n         if(rec->status.status == TransactionStatus::Abandoned)"
      },
      {
        "sha": "4deded1babd9ce6e2beed35d14af83f6e7a6e6ce",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5826a5de17a458ae646569e5779546d2a69f98fe/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=5826a5de17a458ae646569e5779546d2a69f98fe",
        "patch": "@@ -103,6 +103,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txStatusDecoration(const TransactionRecord *wtx) const;\n     QVariant txWatchonlyDecoration(const TransactionRecord *wtx) const;\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n+    QVariant typeDecoration(const TransactionRecord *wtx) const;\n \n public Q_SLOTS:\n     /* New transaction, or transaction changed status */"
      }
    ]
  },
  {
    "sha": "e783bae27220e24e62ab7badd872b7411766623e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzgzYmFlMjcyMjBlMjRlNjJhYjdiYWRkODcyYjc0MTE3NjY2MjNl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-02T14:11:32Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:18Z"
      },
      "message": "[Qt] Add status bar icon to indicate SPV mode",
      "tree": {
        "sha": "4ee6c116e8679d90fd817165e4b5ee41a7354ce5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ee6c116e8679d90fd817165e4b5ee41a7354ce5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e783bae27220e24e62ab7badd872b7411766623e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/YACgkQKdS8tkFv\nU+wYnQ/8D0FT/MyioXKHJI+BlcWTu2yQmwUdNs+1+/l7MaWkx9S2ZzfsegKd6PZQ\nIrCbkGISpgE586n8LHayTfC9xHtOYaQj66nQ/86FHtMpH2JzzJtj1Q3M1Hep6Xvf\n5KGmi7pcPbZRcHNSJml6YijxpQvrZjIrf2l7zR86pP+DbmaIIXa8DyWcMbxJROkl\nhUvjg5qFvga+14Qv4YAO5NcCVbQHDMr3BVUqKSeIDbwhth9iVAZBIL+Io087glzs\nXyfJrWrodsWOIlsxVbls7tra9ekZ0803xAZj9xA5wAH//Ois7sNx/sFqtkE0Uyei\nsaUYmFtFo4ddVN1QTcTNCRh44jPsMuf24kAHLK4if/CAKLWuMmH3mctFw/pGsnKC\nqUS4jX1609WV4QpjLxtmD34bNGWA6h7igYNzfjxTKFhqkE2MhdQx8ISwKhtNNq5n\nWlVci1PemxzbY0G/4AUG3xnpGy3DRouo0FKX/PZ5mN7Hn1fFzmaohvxwGL393PHr\n/QrMqyCwLrGwmBpV+Ml012HbIuF2lcilJkP6B7uKGJb2MJCupPysdEUIIt1zhjwf\nYJT0FhdCN6Y7zJqecQdxNsf5njLy3RPLbxXrhpMCwCsSoJJ8ZmTzes69oJKqZCkK\nGIcmzJxHuOjvFYX/Oa6qO88pCFy4VgdlB+0FY87axybfTgz7VH4=\n=J1UN\n-----END PGP SIGNATURE-----",
        "payload": "tree 4ee6c116e8679d90fd817165e4b5ee41a7354ce5\nparent 5826a5de17a458ae646569e5779546d2a69f98fe\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483366292 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288438 +0100\n\n[Qt] Add status bar icon to indicate SPV mode\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e783bae27220e24e62ab7badd872b7411766623e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e783bae27220e24e62ab7badd872b7411766623e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e783bae27220e24e62ab7badd872b7411766623e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5826a5de17a458ae646569e5779546d2a69f98fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5826a5de17a458ae646569e5779546d2a69f98fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5826a5de17a458ae646569e5779546d2a69f98fe"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 203,
      "deletions": 13
    },
    "files": [
      {
        "sha": "35c99fcdc65747c6823e1d5cb372663011846455",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -58,10 +58,10 @@ Files: src/qt/res/icons/tx_mined.png\n        src/qt/res/src/mine.svg\n        src/qt/res/icons/fontbigger.png\n        src/qt/res/icons/fontsmaller.png\n-       src/qt/res/icons/hd_disabled.png\n-       src/qt/res/src/hd_disabled.svg\n-       src/qt/res/icons/hd_enabled.png\n-       src/qt/res/src/hd_enabled.svg\n+       src/qt/res/icons/*_disabled.png\n+       src/qt/res/src/*_disabled.svg\n+       src/qt/res/icons/*_enabled.png\n+       src/qt/res/src/*_enabled.svg\n Copyright: Jonas Schnelli\n License: Expat\n Comment:"
      },
      {
        "sha": "d28affe9b7b32b6433b55ab857bf2873cdc0c22a",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -279,6 +279,8 @@ RES_ICONS = \\\n   qt/res/icons/receive.png \\\n   qt/res/icons/remove.png \\\n   qt/res/icons/send.png \\\n+  qt/res/icons/spv_disabled.png \\\n+  qt/res/icons/spv_enabled.png \\\n   qt/res/icons/synced.png \\\n   qt/res/icons/transaction0.png \\\n   qt/res/icons/transaction2.png \\"
      },
      {
        "sha": "2fd0a3f99e8dc69e7d700af5c8f34edf2caeabfe",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -53,6 +53,8 @@\n         <file alias=\"hd_enabled\">res/icons/hd_enabled.png</file>\n         <file alias=\"hd_disabled\">res/icons/hd_disabled.png</file>\n         <file alias=\"network_disabled\">res/icons/network_disabled.png</file>\n+        <file alias=\"spv_enabled\">res/icons/spv_enabled.png</file>\n+        <file alias=\"spv_disabled\">res/icons/spv_disabled.png</file>\n     </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"spinner-000\">res/movies/spinner-000.png</file>"
      },
      {
        "sha": "bc30da7f0b7d8ee98d2338ca653c03a351bea2f4",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -86,6 +86,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     unitDisplayControl(0),\n     labelWalletEncryptionIcon(0),\n     labelWalletHDStatusIcon(0),\n+    labelWalletSPVStatusIcon(0),\n     connectionsControl(0),\n     labelBlocksIcon(0),\n     progressBarLabel(0),\n@@ -199,6 +200,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     unitDisplayControl = new UnitDisplayStatusBarControl(platformStyle);\n     labelWalletEncryptionIcon = new QLabel();\n     labelWalletHDStatusIcon = new QLabel();\n+    labelWalletSPVStatusIcon = new GUIUtil::ClickableLabel();\n     connectionsControl = new GUIUtil::ClickableLabel();\n     labelBlocksIcon = new GUIUtil::ClickableLabel();\n     if(enableWallet)\n@@ -208,6 +210,8 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n         frameBlocksLayout->addStretch();\n         frameBlocksLayout->addWidget(labelWalletEncryptionIcon);\n         frameBlocksLayout->addWidget(labelWalletHDStatusIcon);\n+        frameBlocksLayout->addWidget(labelWalletSPVStatusIcon);\n+        connect(labelWalletSPVStatusIcon, SIGNAL(clicked(QPoint)), this, SLOT(toggleSPVMode()));\n     }\n     frameBlocksLayout->addStretch();\n     frameBlocksLayout->addWidget(connectionsControl);\n@@ -1046,6 +1050,12 @@ void BitcoinGUI::setHDStatus(int hdEnabled)\n     labelWalletHDStatusIcon->setEnabled(hdEnabled);\n }\n \n+void BitcoinGUI::setSPVStatus(int spvEnabled)\n+{\n+    labelWalletSPVStatusIcon->setPixmap(platformStyle->SingleColorIcon(spvEnabled ? \":/icons/spv_enabled\" : \":/icons/spv_disabled\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+    labelWalletSPVStatusIcon->setToolTip(spvEnabled ? tr(\"Simple Payment Verification is <b>enabled</b>\") : tr(\"Simple Payment Verification is <b>disabled</b>\"));\n+}\n+\n void BitcoinGUI::setEncryptionStatus(int status)\n {\n     switch(status)\n@@ -1074,6 +1084,13 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         break;\n     }\n }\n+\n+void BitcoinGUI::toggleSPVMode()\n+{\n+    if (walletFrame)\n+        walletFrame->setSPVMode(!walletFrame->getSPVMode());\n+}\n+\n #endif // ENABLE_WALLET\n \n void BitcoinGUI::showNormalIfMinimized(bool fToggleHidden)"
      },
      {
        "sha": "34d00b31612619e8868772b749e4c894605e15a2",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -85,6 +85,7 @@ class BitcoinGUI : public QMainWindow\n     UnitDisplayStatusBarControl *unitDisplayControl;\n     QLabel *labelWalletEncryptionIcon;\n     QLabel *labelWalletHDStatusIcon;\n+    QLabel *labelWalletSPVStatusIcon;\n     QLabel *connectionsControl;\n     QLabel *labelBlocksIcon;\n     QLabel *progressBarLabel;\n@@ -185,6 +186,12 @@ public Q_SLOTS:\n      */\n     void setHDStatus(int hdEnabled);\n \n+    /** Set the spv-enabled status as shown in the UI.\n+     @param[in] status            current spv enabled status\n+     */\n+    void setSPVStatus(int spvEnabled);\n+    void toggleSPVMode();\n+\n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     /** Show incoming transaction notification for new transactions. */"
      },
      {
        "sha": "5522003f25f2e00f6b908c6fbea376d7682b43a9",
        "filename": "src/qt/res/icons/spv_disabled.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/icons/spv_disabled.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/icons/spv_disabled.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/spv_disabled.png?ref=e783bae27220e24e62ab7badd872b7411766623e"
      },
      {
        "sha": "833c9a6add9bc3902f9d22abcd3a7863ca6fd632",
        "filename": "src/qt/res/icons/spv_enabled.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/icons/spv_enabled.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/icons/spv_enabled.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/spv_enabled.png?ref=e783bae27220e24e62ab7badd872b7411766623e"
      },
      {
        "sha": "1e73c46903c69db61c89c09d4b5477055cc4e694",
        "filename": "src/qt/res/src/spv_disabled.svg",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/src/spv_disabled.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/src/spv_disabled.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/spv_disabled.svg?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!-- Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n+\t viewBox=\"0 0 595.3 841.9\" style=\"enable-background:new 0 0 595.3 841.9;\" xml:space=\"preserve\">\n+<style type=\"text/css\">\n+\t.st0{fill:none;}\n+\t.st1{fill:#FFFFFF;}\n+</style>\n+<g>\n+\t<path d=\"M92,383.7c0-4.8-1-8.9-2.9-12.2c-1.9-3.4-4.9-5.1-9-5.1c-4.5,0-7.8,1.5-9.9,4.4c-2.1,2.9-3.1,6.2-3.1,9.8\n+\t\tc0,5.2,1.7,9.4,5.1,12.5c3.4,3.1,7.6,5.7,12.7,8c5.1,2.2,10.6,4.5,16.4,6.9c5.8,2.3,11.3,5.4,16.4,9.1c5.1,3.7,9.3,8.7,12.7,14.7\n+\t\tc3.4,6.1,5.1,14,5.1,23.7c0,17.1-4.9,29.5-14.6,37.2c-9.7,7.7-23.8,11.6-42.2,11.6c-8.7,0-16.4-0.7-23-2.1\n+\t\tc-6.7-1.4-12.3-3.9-16.9-7.4c-4.6-3.5-8.1-8.1-10.4-13.8c-2.4-5.7-3.6-12.7-3.6-21.1V454H65v3.8c0,6.9,1.3,11.7,3.8,14.5\n+\t\tc2.5,2.8,5.8,4.2,9.9,4.2c4.3,0,7.7-1.5,10-4.5c2.3-3,3.5-6.7,3.5-11c0-5.2-1.6-9.4-4.8-12.5c-3.2-3.1-7.3-5.7-12.1-7.9\n+\t\tc-4.9-2.2-10.1-4.4-15.8-6.6c-5.7-2.2-11-5.2-15.8-8.8c-4.9-3.6-8.9-8.3-12.1-14.2c-3.2-5.8-4.8-13.5-4.8-22.9\n+\t\tc0-16.3,4.3-28.8,13-37.3c8.7-8.5,21.9-12.8,39.5-12.8c18.3,0,31.5,3.9,39.7,11.8c8.2,7.9,12.2,20.4,12.2,37.6H92V383.7z\"/>\n+\t<path d=\"M211.3,341.3c7.9,0,14.8,1.3,20.7,3.8c5.8,2.5,10.7,6,14.5,10.4c3.8,4.4,6.6,9.6,8.4,15.6c1.8,6,2.7,12.5,2.7,19.5\n+\t\tc0,16.6-4.5,29.1-13.4,37.4c-8.9,8.3-22,12.5-39.2,12.5h-14.6v61.1h-41.8V341.3H211.3z M198.3,410.5c5.2,0,9.2-1.6,12-4.7\n+\t\tc2.8-3.1,4.2-8.1,4.2-14.8c0-13-5.4-19.5-16.2-19.5h-7.9v39.1H198.3z\"/>\n+\t<path d=\"M302.3,341.3l16.8,120.9h0.4l16.9-120.9h44.5l-34.6,160.4h-53.9l-33.9-160.4H302.3z\"/>\n+</g>\n+<g>\n+\t<g>\n+\t\t<line class=\"st0\" x1=\"32\" y1=\"555.9\" x2=\"358\" y2=\"293.9\"/>\n+\t</g>\n+\t<g>\n+\t\t<path class=\"st1\" d=\"M32,580.9c-7.3,0-14.6-3.2-19.5-9.3c-8.6-10.8-6.9-26.5,3.8-35.1l326-262c10.8-8.6,26.5-6.9,35.1,3.8\n+\t\t\tc8.6,10.8,6.9,26.5-3.8,35.1l-326,262C43,579.1,37.5,580.9,32,580.9z\"/>\n+\t</g>\n+\t<g>\n+\t\t<path d=\"M32,573.9c-5.3,0-10.5-2.3-14-6.7c-6.2-7.7-5-19.1,2.8-25.3l326-262c7.8-6.2,19.1-5,25.3,2.8c6.2,7.7,5,19.1-2.8,25.3\n+\t\t\tl-326,262C40,572.6,36,573.9,32,573.9z\"/>\n+\t</g>\n+</g>\n+</svg>"
      },
      {
        "sha": "8fbc0ce09d371bdd5f72fb69b9a04a7d8375fcb0",
        "filename": "src/qt/res/src/spv_enabled.svg",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/src/spv_enabled.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/res/src/spv_enabled.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/spv_enabled.svg?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!-- Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n+<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n+\t viewBox=\"0 0 595.3 841.9\" style=\"enable-background:new 0 0 595.3 841.9;\" xml:space=\"preserve\">\n+<g>\n+\t<path d=\"M96,386.7c0-4.8-1-8.9-2.9-12.2c-1.9-3.4-4.9-5.1-9-5.1c-4.5,0-7.8,1.5-9.9,4.4c-2.1,2.9-3.1,6.2-3.1,9.8\n+\t\tc0,5.2,1.7,9.4,5.1,12.5c3.4,3.1,7.6,5.7,12.7,8c5.1,2.2,10.6,4.5,16.4,6.9c5.8,2.3,11.3,5.4,16.4,9.1c5.1,3.7,9.3,8.7,12.7,14.7\n+\t\tc3.4,6.1,5.1,14,5.1,23.7c0,17.1-4.9,29.5-14.6,37.2c-9.7,7.7-23.8,11.6-42.2,11.6c-8.7,0-16.4-0.7-23-2.1\n+\t\tc-6.7-1.4-12.3-3.9-16.9-7.4c-4.6-3.5-8.1-8.1-10.4-13.8c-2.4-5.7-3.6-12.7-3.6-21.1V457H69v3.8c0,6.9,1.3,11.7,3.8,14.5\n+\t\tc2.5,2.8,5.8,4.2,9.9,4.2c4.3,0,7.7-1.5,10-4.5c2.3-3,3.5-6.7,3.5-11c0-5.2-1.6-9.4-4.8-12.5c-3.2-3.1-7.3-5.7-12.1-7.9\n+\t\tc-4.9-2.2-10.1-4.4-15.8-6.6c-5.7-2.2-11-5.2-15.8-8.8c-4.9-3.6-8.9-8.3-12.1-14.2c-3.2-5.8-4.8-13.5-4.8-22.9\n+\t\tc0-16.3,4.3-28.8,13-37.3c8.7-8.5,21.9-12.8,39.5-12.8c18.3,0,31.5,3.9,39.7,11.8c8.2,7.9,12.2,20.4,12.2,37.6H96V386.7z\"/>\n+\t<path d=\"M215.3,344.3c7.9,0,14.8,1.3,20.7,3.8c5.8,2.5,10.7,6,14.5,10.4c3.8,4.4,6.6,9.6,8.4,15.6c1.8,6,2.7,12.5,2.7,19.5\n+\t\tc0,16.6-4.5,29.1-13.4,37.4c-8.9,8.3-22,12.5-39.2,12.5h-14.6v61.1h-41.8V344.3H215.3z M202.3,413.5c5.2,0,9.2-1.6,12-4.7\n+\t\tc2.8-3.1,4.2-8.1,4.2-14.8c0-13-5.4-19.5-16.2-19.5h-7.9v39.1H202.3z\"/>\n+\t<path d=\"M306.3,344.3l16.8,120.9h0.4l16.9-120.9h44.5l-34.6,160.4h-53.9l-33.9-160.4H306.3z\"/>\n+</g>\n+</svg>"
      },
      {
        "sha": "7a9fbaedb2ad9f65403cc787846f9cb8c44d465a",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -201,3 +201,19 @@ void WalletFrame::outOfSyncWarningClicked()\n {\n     Q_EMIT requestedSyncWarningInfo();\n }\n+\n+void WalletFrame::setSPVMode(bool state)\n+{\n+    WalletView *walletView = currentWalletView();\n+    if (walletView)\n+        walletView->setSPVMode(state);\n+}\n+\n+bool WalletFrame::getSPVMode()\n+{\n+    WalletView *walletView = currentWalletView();\n+    if (walletView)\n+        return walletView->getSPVMode();\n+\n+    return false;\n+}"
      },
      {
        "sha": "fee1fa233b30cb88c24d6eef9e9fd1e48c1c526f",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -91,6 +91,10 @@ public Q_SLOTS:\n     void usedReceivingAddresses();\n     /** Pass on signal over requested out-of-sync-warning information */\n     void outOfSyncWarningClicked();\n+    /** Set the current wallets SPV mode */\n+    void setSPVMode(bool state);\n+    /** Get the current wallets SPV mode */\n+    bool getSPVMode();\n };\n \n #endif // BITCOIN_QT_WALLETFRAME_H"
      },
      {
        "sha": "699fa3783b5b21b09c1a4ae2db10887941273a5a",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -499,6 +499,12 @@ static void NotifyWatchonlyChanged(WalletModel *walletmodel, bool fHaveWatchonly\n                               Q_ARG(bool, fHaveWatchonly));\n }\n \n+static void NotifySPVModeChanged(WalletModel *walletmodel, bool fSPVModeEnabled)\n+{\n+    QMetaObject::invokeMethod(walletmodel, \"updateSPVMode\", Qt::QueuedConnection,\n+                              Q_ARG(bool, fSPVModeEnabled));\n+}\n+\n void WalletModel::subscribeToCoreSignals()\n {\n     // Connect signals to wallet\n@@ -507,6 +513,7 @@ void WalletModel::subscribeToCoreSignals()\n     wallet->NotifyTransactionChanged.connect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n     wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n     wallet->NotifyWatchonlyChanged.connect(boost::bind(NotifyWatchonlyChanged, this, _1));\n+    wallet->NotifySPVModeChanged.connect(boost::bind(NotifySPVModeChanged, this, _1));\n }\n \n void WalletModel::unsubscribeFromCoreSignals()\n@@ -517,6 +524,7 @@ void WalletModel::unsubscribeFromCoreSignals()\n     wallet->NotifyTransactionChanged.disconnect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n     wallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n     wallet->NotifyWatchonlyChanged.disconnect(boost::bind(NotifyWatchonlyChanged, this, _1));\n+    wallet->NotifySPVModeChanged.disconnect(boost::bind(NotifySPVModeChanged, this, _1));\n }\n \n // WalletModel::UnlockContext implementation\n@@ -702,6 +710,21 @@ bool WalletModel::hdEnabled() const\n     return wallet->IsHDEnabled();\n }\n \n+bool WalletModel::spvEnabled() const\n+{\n+    return wallet->IsSPVEnabled();\n+}\n+\n+void WalletModel::setSpvEnabled(bool state)\n+{\n+    wallet->setSPVEnabled(state);\n+}\n+\n+void WalletModel::updateSPVMode(bool fSPVModeEnabled)\n+{\n+    Q_EMIT spvEnabledStatusChanged(fSPVModeEnabled);\n+}\n+\n int WalletModel::getDefaultConfirmTarget() const\n {\n     return nTxConfirmTarget;"
      },
      {
        "sha": "16d689f3f3ceba8af473f11c148d2ebef48fd61e",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -210,6 +210,8 @@ class WalletModel : public QObject\n     static bool isWalletEnabled();\n \n     bool hdEnabled() const;\n+    bool spvEnabled() const;\n+    void setSpvEnabled(bool state);\n \n     int getDefaultConfirmTarget() const;\n \n@@ -267,6 +269,9 @@ class WalletModel : public QObject\n     // Watch-only address added\n     void notifyWatchonlyChanged(bool fHaveWatchonly);\n \n+    // SPV status of wallet changed\n+    void spvEnabledStatusChanged(int status);\n+\n public Q_SLOTS:\n     /* Wallet status might have changed */\n     void updateStatus();\n@@ -278,6 +283,8 @@ public Q_SLOTS:\n     void updateWatchOnlyFlag(bool fHaveWatchonly);\n     /* Current, immature or unconfirmed balance might have changed - emit 'balanceChanged' if so */\n     void pollBalanceChanged();\n+    /* Update the SPV Mode */\n+    void updateSPVMode(bool state);\n };\n \n #endif // BITCOIN_QT_WALLETMODEL_H"
      },
      {
        "sha": "372b0bf17865b3dcfc5c00cd36307c48c16f71fb",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -102,6 +102,9 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n \n         // Connect HD enabled state signal \n         connect(this, SIGNAL(hdEnabledStatusChanged(int)), gui, SLOT(setHDStatus(int)));\n+\n+        // Connect SPV enabled state signal\n+        connect(this, SIGNAL(spvEnabledStatusChanged(int)), gui, SLOT(setSPVStatus(int)));\n     }\n }\n \n@@ -137,6 +140,10 @@ void WalletView::setWalletModel(WalletModel *_walletModel)\n         // update HD status\n         Q_EMIT hdEnabledStatusChanged(_walletModel->hdEnabled());\n \n+        // update SPV status\n+        connect(_walletModel, SIGNAL(spvEnabledStatusChanged(int)), this, SLOT(updateSPVStatus()));\n+        updateSPVStatus();\n+\n         // Balloon pop-up for new transaction\n         connect(_walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n                 this, SLOT(processNewTransaction(QModelIndex,int,int)));\n@@ -328,3 +335,24 @@ void WalletView::requestedSyncWarningInfo()\n {\n     Q_EMIT outOfSyncWarningClicked();\n }\n+\n+void WalletView::setSPVMode(bool state)\n+{\n+    if(!walletModel)\n+        return;\n+\n+    walletModel->setSpvEnabled(state);\n+}\n+\n+bool WalletView::getSPVMode()\n+{\n+    if(!walletModel)\n+        return false;\n+\n+    return walletModel->spvEnabled();\n+}\n+\n+void WalletView::updateSPVStatus()\n+{\n+    Q_EMIT spvEnabledStatusChanged(walletModel->spvEnabled());\n+}"
      },
      {
        "sha": "ac02e0fc09eee4be6b138a3883dd2ffc8d922280",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -113,6 +113,13 @@ public Q_SLOTS:\n     /** User has requested more information about the out of sync state */\n     void requestedSyncWarningInfo();\n \n+    /** setter and getter of the wallet's spv mode */\n+    void setSPVMode(bool state);\n+    bool getSPVMode();\n+\n+    /** Update the GUI to reflect the new SPV status */\n+    void updateSPVStatus();\n+\n Q_SIGNALS:\n     /** Signal that we want to show the main window */\n     void showNormalIfMinimized();\n@@ -122,6 +129,8 @@ public Q_SLOTS:\n     void encryptionStatusChanged(int status);\n     /** HD-Enabled status of wallet changed (only possible during startup) */\n     void hdEnabledStatusChanged(int hdEnabled);\n+    /** SPV-Enabled status of wallet changed*/\n+    void spvEnabledStatusChanged(int spvEnabled);\n     /** Notify that a new transaction appeared */\n     void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label);\n     /** Notify that the out of sync warning icon has been pressed */"
      },
      {
        "sha": "d8e75f17f9153ce887a50c4f7b18d0223e7949b2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -1190,8 +1190,8 @@ void CWallet::UpdatedBlockHeaderTip(bool fInitialDownload, const CBlockIndex *pi\n     }\n     pNVSLastKnownBestHeader = const_cast<CBlockIndex *>(pindexNew);\n \n-    if (GetBoolArg(\"-spv\", false))\n-        RequestNonValidationScan();\n+    if (spvEnabled)\n+        RequestSPVScan();\n }\n \n void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock, bool validated)\n@@ -3566,7 +3566,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n-    strUsage += HelpMessageOpt(\"-spv\", strprintf(_(\"Make use of full block spv default: %u)\"), false));\n+    strUsage += HelpMessageOpt(\"-spv\", strprintf(_(\"Use full block spv before validating the chain (default: %u)\"), DEFAULT_USE_SPV));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n@@ -3805,8 +3805,8 @@ bool CWallet::InitLoadWallet()\n     }\n     pwalletMain = pwallet;\n \n-    if (GetBoolArg(\"-spv\", false))\n-        pwalletMain->RequestNonValidationScan();\n+    if (GetBoolArg(\"-spv\", DEFAULT_USE_SPV))\n+        pwalletMain->setSPVEnabled(true);\n \n     return true;\n }\n@@ -3914,7 +3914,7 @@ bool CWallet::ParameterInteraction()\n     return true;\n }\n \n-void CWallet::RequestNonValidationScan(int64_t optional_timestamp)\n+void CWallet::RequestSPVScan(int64_t optional_timestamp)\n {\n     if (CAuxiliaryBlockRequest::GetCurrentRequest() && !CAuxiliaryBlockRequest::GetCurrentRequest()->isCompleted())\n         return;\n@@ -3993,7 +3993,7 @@ void CWallet::RequestNonValidationScan(int64_t optional_timestamp)\n \n         // try to download more blocks if this on has been completed\n         if (cb_AuxiliaryBlockRequest->isCompleted())\n-            RequestNonValidationScan();\n+            RequestSPVScan();\n \n         // continue with the request\n         return true;\n@@ -4003,6 +4003,19 @@ void CWallet::RequestNonValidationScan(int64_t optional_timestamp)\n     auxiliaryRequest->setAsCurrentRequest();\n }\n \n+void CWallet::setSPVEnabled(bool status)\n+{\n+    spvEnabled = status;\n+    if (status)\n+        RequestSPVScan();\n+    NotifySPVModeChanged(status);\n+}\n+\n+bool CWallet::IsSPVEnabled()\n+{\n+    return spvEnabled;\n+}\n+\n bool CWallet::BackupWallet(const std::string& strDest)\n {\n     if (!fFileBacked)"
      },
      {
        "sha": "b142ee52cdcca29a40d57ec81f2612304c406dfc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e783bae27220e24e62ab7badd872b7411766623e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e783bae27220e24e62ab7badd872b7411766623e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e783bae27220e24e62ab7badd872b7411766623e",
        "patch": "@@ -68,7 +68,8 @@ static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n //! if set, all keys will be derived by using BIP32\n static const bool DEFAULT_USE_HD_WALLET = true;\n-\n+//! if set, the wallet does a full-block spv sync before continue validating the chain\n+static const bool DEFAULT_USE_SPV = false;\n extern const char * DEFAULT_WALLET_DAT;\n \n class CBlockIndex;\n@@ -610,6 +611,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+    std::atomic<bool> spvEnabled;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -671,6 +674,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         fBroadcastTransactions = false;\n         pNVSLastKnownBestHeader = NULL;\n         pNVSBestBlock = NULL;\n+        spvEnabled = false;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -938,6 +942,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /** Watch-only address added */\n     boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n \n+    /** SPV Mode changed */\n+    boost::signals2::signal<void (bool fSPVEnabled)> NotifySPVModeChanged;\n+\n     /** Inquire whether this wallet broadcasts transactions. */\n     bool GetBroadcastTransactions() const { return fBroadcastTransactions; }\n     /** Set whether this wallet broadcasts transactions. */\n@@ -965,7 +972,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Wallets parameter interaction */\n     static bool ParameterInteraction();\n \n-    void RequestNonValidationScan(int64_t optional_timestamp = 0);\n+    void RequestSPVScan(int64_t optional_timestamp = 0);\n+    void setSPVEnabled(bool status);\n+    bool IsSPVEnabled();\n     bool BackupWallet(const std::string& strDest);\n \n     /* Set the HD chain model (chain child index counters) */"
      }
    ]
  },
  {
    "sha": "3756ad373539be49dab9cac08c42f3ca35d1b2d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzU2YWQzNzM1MzliZTQ5ZGFiOWNhYzA4YzQyZjNjYTM1ZDFiMmQ2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-03T14:08:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:18Z"
      },
      "message": "Add RPC call to enabled/disabled SPV mode",
      "tree": {
        "sha": "c2af490e72224509f7a1a85cec4090f19013e77a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2af490e72224509f7a1a85cec4090f19013e77a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3756ad373539be49dab9cac08c42f3ca35d1b2d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/YACgkQKdS8tkFv\nU+yMKRAAqoNb0keIiuOKyS9JiIg6ULi0Jg1l252vA2uA3wtykSUZd8/rh6q41VxY\natGZY45b0onc9oP74X8coLYYMpXhqKiL7O7g3/YBG2USWG4uqe1Pgj9+Zdfl0saS\naNNdJhhrslJ4f4VbZMEV+9SYnGX8+4LZOJFPnVYk8VRyYqo8aVLLzokB6xNIzj+R\nECCQx6mkojAvdNbptPd5BPCTweH9IibeYoaiT2DJf+bjwD9EVrFAjFEYnWsM0p3+\nGN345hk7vRyzwmgdY6Qqm/Fx+3LdsMKH8hdoC1aNNa7Hl/AgULq3LbD8zU5HzC7R\nAzzhFMsKiMBpkL/zmnf8tHMVG8ZROCjuUxiY5vqb6YeCKNV1NZfACQOP6r7tzUGL\n8TKIYYy0QbXy5jH8K233cQlUvkTqCNmQc4RsuWf/h8RMQsNwKRk0t7yYuhciRjew\nEXSzwttI6sodeIo9fvjKrp1lF7ImpcyzDzP6sM2O/0j2FFQ2WzV6zvhc/MPdG/py\nbZj0gDIIz3dNnlaVFGBnzgKkOtgl54scVTykA2JvHdOZqLXb8tcDfDtplKQYiUBn\n06ZlRYwAjror3bD5phzbQlORehxLcCS6Dk1KZ5JCZJPWE/rW0h4F3F8vsrZ4wYQ0\ngkgumBrJEmeglsYupFvsMkCF54X5NzZxt0r+18uq6npljj3/SJg=\n=ejpq\n-----END PGP SIGNATURE-----",
        "payload": "tree c2af490e72224509f7a1a85cec4090f19013e77a\nparent e783bae27220e24e62ab7badd872b7411766623e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483452530 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288438 +0100\n\nAdd RPC call to enabled/disabled SPV mode\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3756ad373539be49dab9cac08c42f3ca35d1b2d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3756ad373539be49dab9cac08c42f3ca35d1b2d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3756ad373539be49dab9cac08c42f3ca35d1b2d6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e783bae27220e24e62ab7badd872b7411766623e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e783bae27220e24e62ab7badd872b7411766623e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e783bae27220e24e62ab7badd872b7411766623e"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3878ddd8b9e9abe49b387c0f1a1a76fbfd3a5b89",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3756ad373539be49dab9cac08c42f3ca35d1b2d6/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3756ad373539be49dab9cac08c42f3ca35d1b2d6/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3756ad373539be49dab9cac08c42f3ca35d1b2d6",
        "patch": "@@ -121,6 +121,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"requestblocks\", 1, \"blockhashes\" },\n     { \"requestblocks\", 2, \"pass-internally\" },\n     { \"setautorequestblocks\", 0, \"state\" },\n+    { \"setspv\", 0, \"state\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "2091bf09408de5b64555b0cef31a1e53a7bb4a55",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3756ad373539be49dab9cac08c42f3ca35d1b2d6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3756ad373539be49dab9cac08c42f3ca35d1b2d6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3756ad373539be49dab9cac08c42f3ca35d1b2d6",
        "patch": "@@ -2344,6 +2344,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n          obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+    obj.push_back(Pair(\"spv_enabled\", (int)(pwalletMain->IsSPVEnabled())));\n     obj.push_back(Pair(\"spv_bestblock_height\", (int)(pwalletMain->pNVSBestBlock ? pwalletMain->pNVSBestBlock->nHeight : 0)));\n     obj.push_back(Pair(\"spv_bestblock_hash\", (pwalletMain->pNVSBestBlock ? pwalletMain->pNVSBestBlock->GetBlockHash().GetHex() : \"\")));\n     obj.push_back(Pair(\"spv_headerschain_height\", (int)(pwalletMain->pNVSLastKnownBestHeader ? pwalletMain->pNVSLastKnownBestHeader->nHeight : 0)));\n@@ -2913,6 +2914,32 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue setspv(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw runtime_error(\n+                            \"setspv (true|false)\\n\"\n+                            \"\\nEnabled or disabled full block SPV mode.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. state             (boolean, optional) enables or disables the spv mode\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"   status: <true|false> (\\\"true\\\" if the spv mode is enabled)\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"setspv\", \"\\\"true\\\"\")\n+                            + HelpExampleRpc(\"setspv\", \"\\\"true\\\"\")\n+                            );\n+\n+    if (request.params.size() == 1)\n+        pwalletMain->setSPVEnabled(request.params[0].get_bool());\n+\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"status\", UniValue(pwalletMain->IsSPVEnabled()));\n+    return ret;\n+}\n+\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n extern UniValue importaddress(const JSONRPCRequest& request);\n@@ -2974,6 +3001,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true,   {\"txid\"} },\n+    { \"wallet\",             \"setspv\",                   &setspv,                   true,   {\"state\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "cb1ff093c3ed81697d040db985f8c800a6921696",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjFmZjA5M2MzZWQ4MTY5N2QwNDBkYjk4NWY4YzgwMGE2OTIxNjk2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-04T14:43:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:19Z"
      },
      "message": "[Qt] Show auxiliary-block-request/SPV progress in the UI",
      "tree": {
        "sha": "05829e8e27fabc0fc0ab5baac012d01474a4eb97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05829e8e27fabc0fc0ab5baac012d01474a4eb97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb1ff093c3ed81697d040db985f8c800a6921696",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/cACgkQKdS8tkFv\nU+w9gA//SYZP/KC7px6iy+SGQiEKD16IUAHXFndGK0okZyErS1jlffFedNkK/99i\nrCfJCs9LDuLcZ1dp2XVjFoXmhXQQM7kZIyvQBsk34XA3EwBMgAfm0ugpBSCeqjUS\nIlD5Swt5OL7SurHts/qrqDEUq3SEcVjgspKIjQWkIHbn4ZFYHQY783rqEQN7oY5p\nxQ9nCCh5t3Ms8b81fx3tXt5pYh3E3qMBt/3EKp42YqiOBp4V6fXy6gA9WQNPZm1k\nbL3Or/C7AO/z/A7ulb3qbmt74uxzs2hjQoC1mpEnxMjRN6cBDygwVJnTSXHXV6Jd\nHbtr6V21RcFAeTxoK/MciWp3akWVxqRLEmL0bhMCQO/i+9dO81qRhyTsyrZcCPPF\nGQ8KTbGYHxozbg6cdb8ojM9qvaJnWiBbkPD/21yD4Q9ZCceiAVyzcSIp3OxLt39W\n8ehYqqYCzVmyf0TxDQVewFKlYmGIGcg1Qyu3Xr85QgDWXX/XZADW60S8FKONWJgc\nSa51yIIxrgV68/OVxsx71qP7Ggjx8aOTHa34aGgnHZEeXEktRxgSMLUnpEk1iKLF\nbNOIcThUUAFGVxNPQt15OlNSW33f9sxnHEBZPFSbrgJyOc2qiq1IFPZv6EUyn1/i\nx8sJyNsrgDKsmw1hhrNbPRK/60dNx81ONspoEyfKgp7Whxq3Vvw=\n=3aLA\n-----END PGP SIGNATURE-----",
        "payload": "tree 05829e8e27fabc0fc0ab5baac012d01474a4eb97\nparent 3756ad373539be49dab9cac08c42f3ca35d1b2d6\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483541013 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288439 +0100\n\n[Qt] Show auxiliary-block-request/SPV progress in the UI\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb1ff093c3ed81697d040db985f8c800a6921696",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb1ff093c3ed81697d040db985f8c800a6921696",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb1ff093c3ed81697d040db985f8c800a6921696/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3756ad373539be49dab9cac08c42f3ca35d1b2d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3756ad373539be49dab9cac08c42f3ca35d1b2d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3756ad373539be49dab9cac08c42f3ca35d1b2d6"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 112,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3fb059c2d5b66359e5b0ead9e64bd210a1f04cfc",
        "filename": "src/auxiliaryblockrequest.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/auxiliaryblockrequest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/auxiliaryblockrequest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.cpp?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparams.h\"\n #include \"validation.h\"\n #include \"validationinterface.h\"\n+#include \"ui_interface.h\"\n \n #include <exception>\n \n@@ -19,6 +20,14 @@ CAuxiliaryBlockRequest::CAuxiliaryBlockRequest(std::vector<const CBlockIndex*> v\n     fCancelled = false;\n     requestedUpToSize = 0;\n     processedUpToSize = 0;\n+\n+    NotifyUI();\n+}\n+\n+void CAuxiliaryBlockRequest::NotifyUI()\n+{\n+    // Notify UI\n+    uiInterface.NotifyAuxiliaryBlockRequestProgress(this->created, this->vBlocksToDownload.size(), this->amountOfBlocksLoaded(), this->processedUpToSize);\n }\n \n void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<const CBlock> pblock, CBlockIndex *pindex)\n@@ -59,6 +68,8 @@ void CAuxiliaryBlockRequest::processWithPossibleBlock(const std::shared_ptr<cons\n         // log some info\n         LogPrint(\"net\", \"BlockRequest: proccessed up to %ld of total requested %ld blocks\\n\", this->processedUpToSize, this->vBlocksToDownload.size());\n \n+        NotifyUI();\n+\n         if (progressCallback)\n             if (!progressCallback(shared_from_this(), pindexRequest))\n                 this->cancel();\n@@ -112,10 +123,10 @@ void CAuxiliaryBlockRequest::fillInNextBlocks(std::vector<const CBlockIndex*>& v\n     this->processWithPossibleBlock(NULL, NULL);\n }\n \n-unsigned int CAuxiliaryBlockRequest::amountOfBlocksLoaded()\n+size_t CAuxiliaryBlockRequest::amountOfBlocksLoaded()\n {\n-    unsigned int haveData = 0;\n-    for (unsigned int i = 0; i < this->vBlocksToDownload.size() ; i++) {\n+    size_t haveData = 0;\n+    for (size_t i = 0; i < this->vBlocksToDownload.size() ; i++) {\n         const CBlockIndex *pindex = this->vBlocksToDownload[i];\n         if (pindex->nStatus & BLOCK_HAVE_DATA)\n             haveData++;"
      },
      {
        "sha": "d5d62b698ca55e16a76621ca9beb7b72c2fc7f34",
        "filename": "src/auxiliaryblockrequest.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/auxiliaryblockrequest.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/auxiliaryblockrequest.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxiliaryblockrequest.h?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -43,7 +43,7 @@ class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlo\n     void fillInNextBlocks(std::vector<const CBlockIndex*>& vBlocks, unsigned int count, std::function<bool(const CBlockIndex*)> filterBlocksCallback);\n \n     /** returns the amount of already loaded/local-stored blocks from this blockrequest */\n-    unsigned int amountOfBlocksLoaded();\n+    size_t amountOfBlocksLoaded();\n \n     /** returns true if all blocks have been downloaded & processed */\n     bool isCompleted();\n@@ -52,6 +52,7 @@ class CAuxiliaryBlockRequest : public std::enable_shared_from_this<CAuxiliaryBlo\n     static std::shared_ptr<CAuxiliaryBlockRequest> GetCurrentRequest();\n \n private:\n+    void NotifyUI();\n     const std::function<bool(std::shared_ptr<CAuxiliaryBlockRequest>, const CBlockIndex *pindex)> progressCallback; //! progress callback, with optional cancle mechanism (return false == cancel)\n     std::atomic<bool> fCancelled;\n };"
      },
      {
        "sha": "4b02eec07aca85ca89b5e56b52bdd246a17ef9e4",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -491,6 +491,16 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         // Show progress dialog\n         connect(_clientModel, SIGNAL(showProgress(QString,int)), this, SLOT(showProgress(QString,int)));\n \n+        // Show auxiliary block request (SPV) progress\n+        connect(_clientModel, SIGNAL(auxiliaryBlockRequestProgressChanged(QDateTime,int,int,int)), this, SLOT(setAuxiliaryBlockRequestProgress(QDateTime,int,int,int)));\n+\n+        // If we already have a auxiliary block request, update the progress immediately\n+        int64_t created;\n+        size_t requestedBlocks, loadedBlocks, processedBlocks;\n+        if (_clientModel->hasAuxiliaryBlockRequest(&created, &requestedBlocks, &loadedBlocks, &processedBlocks))\n+        {\n+            setAuxiliaryBlockRequestProgress(QDateTime::fromTime_t(created), requestedBlocks, loadedBlocks, processedBlocks);\n+        }\n         rpcConsole->setClientModel(_clientModel);\n #ifdef ENABLE_WALLET\n         if(walletFrame)\n@@ -773,11 +783,14 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     }\n     if (!clientModel)\n         return;\n+    if (clientModel->hasAuxiliaryBlockRequest())\n+        return;\n \n     // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n     statusBar()->clearMessage();\n \n     // Acquire current block source\n+    bool headerSyncInProgress = false;\n     enum BlockSource blockSource = clientModel->getBlockSource();\n     switch (blockSource) {\n         case BLOCK_SOURCE_NETWORK:\n@@ -872,6 +885,41 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     progressBar->setToolTip(tooltip);\n }\n \n+void BitcoinGUI::setAuxiliaryBlockRequestProgress(const QDateTime& blockDate, int requestesBlocks, int loadedBlocks, int processedBlocks)\n+{\n+    // at this stage, always display the progress bar and it's label\n+    progressBar->setVisible(true);\n+    progressBarLabel->setVisible(true);\n+\n+    // if we are not yet connected to some peers, show different text\n+    if (clientModel->getNumConnections() == 0)\n+    {\n+        progressBarLabel->setText(tr(\"Connecting to peers...\"));\n+        return;\n+    }\n+\n+    QString tooltip = tr(\"Scanning %1 blocks...\").arg(QString::number(requestesBlocks));\n+    tooltip += QString(\"<br>\");\n+    tooltip += tr(\"%1 blocks loaded.\").arg(QString::number(loadedBlocks));\n+    tooltip += QString(\"<br>\");\n+    tooltip += tr(\"%1 blocks processed.\").arg(QString::number(processedBlocks));\n+    tooltip = QString(\"<nobr>\") + tooltip + QString(\"</nobr>\");\n+\n+    double nABRprogress = 1.0/requestesBlocks*loadedBlocks;\n+    progressBar->setFormat(tr(\"behind\"));\n+    progressBar->setMaximum(1000000000);\n+    progressBar->setValue(nABRprogress  * 1000000000.0 + 0.5);\n+    progressBarLabel->setText(\"Download & scanning blocks (SPV)...\");\n+    progressBar->setToolTip(tooltip);\n+    progressBarLabel->setToolTip(tooltip);\n+    if (nABRprogress == 1)\n+    {\n+        // don't show progress if request has been completed\n+        progressBar->setVisible(false);\n+        progressBarLabel->setVisible(false);\n+    }\n+}\n+\n void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)\n {\n     QString strTitle = tr(\"Bitcoin\"); // default title"
      },
      {
        "sha": "d7997ef118998b0629aa520f6a53a5c3a39ced85",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -163,6 +163,8 @@ public Q_SLOTS:\n     void setNetworkActive(bool networkActive);\n     /** Set number of blocks and last block date shown in the UI */\n     void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n+    /** Set the auxiliary block request progress in the UI */\n+    void setAuxiliaryBlockRequestProgress(const QDateTime& blockDate, int requestesBlocks, int loadedBlocks, int processedBlocks);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n        @param[in] title     the message box / notification title"
      },
      {
        "sha": "78f17ffc011dac71d80d3829cd68ed7d46464842",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -238,6 +238,23 @@ void ClientModel::updateBanlist()\n     banTableModel->refresh();\n }\n \n+bool ClientModel::hasAuxiliaryBlockRequest(int64_t* createdRet, size_t* requestedBlocksRet, size_t* loadedBlocksRet, size_t* processedBlocksRet)\n+{\n+    std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = CAuxiliaryBlockRequest::GetCurrentRequest();\n+    if (!blockRequest)\n+        return false;\n+\n+    if (createdRet)\n+        *createdRet = blockRequest->created;\n+    if (requestedBlocksRet)\n+        *requestedBlocksRet = blockRequest->vBlocksToDownload.size();\n+    if (loadedBlocksRet)\n+        *loadedBlocksRet = blockRequest->amountOfBlocksLoaded();\n+    if (processedBlocksRet)\n+        *processedBlocksRet = blockRequest->processedUpToSize;\n+    return true;\n+}\n+\n // Handlers for core signals\n static void ShowProgress(ClientModel *clientmodel, const std::string &title, int nProgress)\n {\n@@ -295,6 +312,15 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     }\n }\n \n+static void AuxiliaryBlockRequestProgressUpdate(ClientModel *clientmodel, int64_t created, size_t blocksRequested, size_t blocksLoaded, size_t blocksProcessed)\n+{\n+    QMetaObject::invokeMethod(clientmodel, \"auxiliaryBlockRequestProgressChanged\", Qt::QueuedConnection,\n+                              Q_ARG(QDateTime, QDateTime::fromTime_t(created)),\n+                              Q_ARG(int, (int)blocksRequested),\n+                              Q_ARG(int, (int)blocksLoaded),\n+                              Q_ARG(int, (int)blocksProcessed));\n+}\n+\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n@@ -305,6 +331,7 @@ void ClientModel::subscribeToCoreSignals()\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2, false));\n     uiInterface.NotifyHeaderTip.connect(boost::bind(BlockTipChanged, this, _1, _2, true));\n+    uiInterface.NotifyAuxiliaryBlockRequestProgress.connect(boost::bind(AuxiliaryBlockRequestProgressUpdate, this, _1, _2, _3, _4));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n@@ -317,4 +344,5 @@ void ClientModel::unsubscribeFromCoreSignals()\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, false));\n     uiInterface.NotifyHeaderTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, true));\n+    uiInterface.NotifyAuxiliaryBlockRequestProgress.disconnect(boost::bind(AuxiliaryBlockRequestProgressUpdate, this, _1, _2, _3, _4));\n }"
      },
      {
        "sha": "7487d07e5b9876125c2cd22591d2494a6772c0e2",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -81,6 +81,8 @@ class ClientModel : public QObject\n     QString formatClientStartupTime() const;\n     QString dataDir() const;\n \n+    bool hasAuxiliaryBlockRequest(int64_t* createdRet = NULL, size_t* requestedBlocksRet = NULL, size_t* loadedBlocksRet = NULL, size_t* processedBlocksRet = NULL);\n+\n private:\n     OptionsModel *optionsModel;\n     PeerTableModel *peerTableModel;\n@@ -105,6 +107,8 @@ class ClientModel : public QObject\n     // Show progress dialog e.g. for verifychain\n     void showProgress(const QString &title, int nProgress);\n \n+    void auxiliaryBlockRequestProgressChanged(const QDateTime& created, int blocksRequested, int blocksLoaded, int blocksProcessed);\n+\n public Q_SLOTS:\n     void updateTimer();\n     void updateNumConnections(int numConnections);"
      },
      {
        "sha": "f3010956b51c31d877fd79291d1242cb96d12203",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -107,6 +107,9 @@ class CClientUIInterface\n \n     /** Banlist did change. */\n     boost::signals2::signal<void (void)> BannedListChanged;\n+\n+    /** Auxiliary Block Request (SPV) progress did change */\n+    boost::signals2::signal<void (int64_t, size_t, size_t, size_t)> NotifyAuxiliaryBlockRequestProgress;\n };\n \n /** Show warning message **/"
      },
      {
        "sha": "17aa5e7504dadbdd6802a1d81ee8b3ea3de05f70",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -2322,6 +2322,10 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"spv_bestblock_height\\\": x,    (numeric) the height of the latest SPV scanned block\\n\"\n             \"  \\\"spv_bestblock_hash\\\": x,      (string) the hash of the latest SPV scanned block\\n\"\n             \"  \\\"spv_headerschain_height\\\": x, (numeric) the height of the wallets headers-chain tip\\n\"\n+            \"  \\\"spv_scan_started\\\": ttt,      (numeric) Timestamp of the last started SPV blocks scan\\n\"\n+            \"  \\\"spv_blocks_requested\\\": x,    (numeric) the amount of requested blocks in the current scan\\n\"\n+            \"  \\\"spv_blocks_loaded\\\": x,       (numeric) the amount of loaded blocks in the current scan\\n\"\n+            \"  \\\"spv_blocks_processed\\\": x,    (numeric) the amount of processed blocks in the current scan\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2348,6 +2352,12 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"spv_bestblock_height\", (int)(pwalletMain->pNVSBestBlock ? pwalletMain->pNVSBestBlock->nHeight : 0)));\n     obj.push_back(Pair(\"spv_bestblock_hash\", (pwalletMain->pNVSBestBlock ? pwalletMain->pNVSBestBlock->GetBlockHash().GetHex() : \"\")));\n     obj.push_back(Pair(\"spv_headerschain_height\", (int)(pwalletMain->pNVSLastKnownBestHeader ? pwalletMain->pNVSLastKnownBestHeader->nHeight : 0)));\n+    std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = CAuxiliaryBlockRequest::GetCurrentRequest();\n+    obj.pushKV(\"spv_scan_started\", (!blockRequest ? 0 : UniValue(blockRequest->created)));\n+    obj.pushKV(\"spv_blocks_requested\", (int64_t)(!blockRequest ? 0 : blockRequest->vBlocksToDownload.size()));\n+    obj.pushKV(\"spv_blocks_loaded\", (int)(!blockRequest ? 0 : blockRequest->amountOfBlocksLoaded()));\n+    obj.pushKV(\"spv_blocks_processed\", (!blockRequest ? 0 : (int64_t)blockRequest->processedUpToSize));\n+\n     return obj;\n }\n "
      },
      {
        "sha": "c8455ce838faeeb3454f294cb87d8c143aad2d7c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb1ff093c3ed81697d040db985f8c800a6921696/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb1ff093c3ed81697d040db985f8c800a6921696/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cb1ff093c3ed81697d040db985f8c800a6921696",
        "patch": "@@ -46,7 +46,7 @@ bool fWalletRbf = DEFAULT_WALLET_RBF;\n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n-const static size_t nMaxBlocksPerAuxiliaryRequest = 16*32;\n+const static size_t nMaxBlocksPerAuxiliaryRequest = 144*100; //max request 100 days of blocks per request\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)"
      }
    ]
  },
  {
    "sha": "3f7aed91ce9a115af5d51ccedaddbfa044ef8983",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjdhZWQ5MWNlOWExMTVhZjVkNTFjY2VkYWRkYmZhMDQ0ZWY4OTgz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-04T14:44:09Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:19Z"
      },
      "message": "Bump default tx fee from 0.0002 to 0.0005 btc/kb",
      "tree": {
        "sha": "743b92cc5a3ff4a380c4934c78699e86c658a7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/743b92cc5a3ff4a380c4934c78699e86c658a7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f7aed91ce9a115af5d51ccedaddbfa044ef8983",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/cACgkQKdS8tkFv\nU+zEVBAAsGrcgPK43yiNp/aezPGxGsNKz8+7whlItjC821KmnKnSfkF7JhzlZn2S\nQJEJof1LcNMYGm8ebwHGQdbJ7oxTMAQnq/B2eM+P+SjjSyKwFK1Tf5Bpzl3E2Jml\nupfkvxeAe56TEbljSTkHKmxZRgfmsYwGR8mG6/GKaGb1Vs+aZ+qqb4YGgA2Ijolu\nL1F4YB50wvq6nisetkxKQRjrnvwgXFIGdF7E37+b/woqq1eVvp6qNY/FjB234Y1V\nfiH7CKhXe3oKUfdeknU2N9iJpdXaQEsgXd635lvgV3Aqhc8TcZffsqAN08EoB4fM\n3KYfuad2MDAvlwNnWSI8TevARWqfXsKVatqSQQ6CoNVyZg68AcKdjdTyYdzBwJKA\nEvoYnqLeXYyeEH8p3EEfGN+tNZhAMrTXJNujSWVud3/C/oIquf2w4VDRE2rc/MIU\nrRCuj8dgDI+Zdf/6DU8fk6bj7qIUKr6FLhbu+YxQT4KjNWE5kuTNAcXJNUbJDudQ\nk1apvDG1THJPb+Edbikw/Mp7hFObbh/tG0sliwbl6Qn1cO987XqSLHUltPDvmXeM\nZke6oLxJZkjkZt0yKpx0u7d1JHRZbhLQfmNiboIwWh2B+e+1nwqEm+6jWVKVJcjC\nOyUhmjYDITu02y1ANfEhwkUv8NCn/8bIBJ1wK1toFkvzg45PgHc=\n=yO7E\n-----END PGP SIGNATURE-----",
        "payload": "tree 743b92cc5a3ff4a380c4934c78699e86c658a7db\nparent cb1ff093c3ed81697d040db985f8c800a6921696\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483541049 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288439 +0100\n\nBump default tx fee from 0.0002 to 0.0005 btc/kb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7aed91ce9a115af5d51ccedaddbfa044ef8983",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7aed91ce9a115af5d51ccedaddbfa044ef8983",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7aed91ce9a115af5d51ccedaddbfa044ef8983/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb1ff093c3ed81697d040db985f8c800a6921696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb1ff093c3ed81697d040db985f8c800a6921696",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb1ff093c3ed81697d040db985f8c800a6921696"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b118ea0e2249a3eb082056688ca78e7d8010c24e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f7aed91ce9a115af5d51ccedaddbfa044ef8983/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f7aed91ce9a115af5d51ccedaddbfa044ef8983/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3f7aed91ce9a115af5d51ccedaddbfa044ef8983",
        "patch": "@@ -45,7 +45,7 @@ static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default\n-static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n+static const CAmount DEFAULT_FALLBACK_FEE = 50000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n //! target minimum change amount"
      }
    ]
  },
  {
    "sha": "346a917963701e6e8507f8c4de3147e867b6c1a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDZhOTE3OTYzNzAxZTZlODUwN2Y4YzRkZTMxNDdlODY3YjZjMWEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-05T11:20:26Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:19Z"
      },
      "message": "[Qt] Avoid in-between animation state of ModalOverlay",
      "tree": {
        "sha": "b8f684b7876c642842ec0300ab1b36b0af89e4ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8f684b7876c642842ec0300ab1b36b0af89e4ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/346a917963701e6e8507f8c4de3147e867b6c1a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/cACgkQKdS8tkFv\nU+xBJA//QVsX5KrDR4bujTf3OsNGasSvJHIcR8Nyh+WGWC5ehiEs5TZNAA6uZf5/\nnQ+wkcCgqC7L1MkF8oA5yaka9TiOvrrofpdUAksA78WBbn2J+CDpjy+oOwSnUqKJ\n8ki3qLRX/Otz0MqATGx5O1Xkt1lNgyHmQmp3rxlpkgH/xSWYHhCwE0gg3Uv72yzN\nqUGZhzH+SIu/kMYL10NvWd5yzGE50L8uemYHS9oo4epX2gzMX5+g4tCYtcSxkKOX\n2ixyXd0m8x3t6/NvbSQs6MoS0PFCxkDyS5J92CPOT4P9KNQtPEw17s/5Ggvfm9Ip\nzdKLSdISPDwjs/g3euV4BZKIoRlvfSxY2ER1UeJ7roeEWxXSEsu6TpUm0ZflsvR2\nBz+pi9pZrkZRjEmWxYw2J3MF+cleS2E3B3VcwKulTLMa5G8t2aAk1akDC6ozO/vD\n+OCzmvsCfsAU6GcGvv0W7kjH3EzgBitvDWySaLq3+DsQ+YbWI46zvZa3sbonlg4H\ndMlGtRiu/Oif9nU44G7J9/XiPPUHKmt4oG1QdhC0PCM34g2EQkf8Tc2H5VS5nBjV\nv/K/gKlrQHMmp+DwVt1SY9EF1VK3I3FrBJDHFBu3E6lJHPq0uaScqfKHTnjvJCau\nMBeqeFDmwuQ1cjYKfJKgxJ/QU64ayj/5cTod5SwIMa+delzPhOo=\n=EdOx\n-----END PGP SIGNATURE-----",
        "payload": "tree b8f684b7876c642842ec0300ab1b36b0af89e4ac\nparent 3f7aed91ce9a115af5d51ccedaddbfa044ef8983\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483615226 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288439 +0100\n\n[Qt] Avoid in-between animation state of ModalOverlay\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346a917963701e6e8507f8c4de3147e867b6c1a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/346a917963701e6e8507f8c4de3147e867b6c1a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346a917963701e6e8507f8c4de3147e867b6c1a1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f7aed91ce9a115af5d51ccedaddbfa044ef8983",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7aed91ce9a115af5d51ccedaddbfa044ef8983",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7aed91ce9a115af5d51ccedaddbfa044ef8983"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 20,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6084ce799e3d3781bbc149b281ae08e1a68ec281",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/346a917963701e6e8507f8c4de3147e867b6c1a1/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/346a917963701e6e8507f8c4de3147e867b6c1a1/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=346a917963701e6e8507f8c4de3147e867b6c1a1",
        "patch": "@@ -18,7 +18,8 @@ ui(new Ui::ModalOverlay),\n bestHeaderHeight(0),\n bestHeaderDate(QDateTime()),\n layerIsVisible(false),\n-userClosed(false)\n+userClosed(false),\n+animationRunning(false)\n {\n     ui->setupUi(this);\n     connect(ui->closeButton, SIGNAL(clicked()), this, SLOT(closeClicked()));\n@@ -155,13 +156,21 @@ void ModalOverlay::showHide(bool hide, bool userRequested)\n         setVisible(true);\n \n     setGeometry(0, hide ? 0 : height(), width(), height());\n-\n-    QPropertyAnimation* animation = new QPropertyAnimation(this, \"pos\");\n-    animation->setDuration(300);\n-    animation->setStartValue(QPoint(0, hide ? 0 : this->height()));\n-    animation->setEndValue(QPoint(0, hide ? this->height() : 0));\n-    animation->setEasingCurve(QEasingCurve::OutQuad);\n-    animation->start(QAbstractAnimation::DeleteWhenStopped);\n+    if (!animationRunning)\n+    {\n+        QPropertyAnimation* animation = new QPropertyAnimation(this, \"pos\");\n+        animation->setDuration(300);\n+        animation->setStartValue(QPoint(0, hide ? 0 : this->height()));\n+        animation->setEndValue(QPoint(0, hide ? this->height() : 0));\n+        animation->setEasingCurve(QEasingCurve::OutQuad);\n+        animation->start(QAbstractAnimation::DeleteWhenStopped);\n+        animationRunning = true;\n+        connect(animation, &QAbstractAnimation::finished, this, [this]() {\n+            // use action as you wish\n+            animationRunning = false;\n+            setGeometry(0, layerIsVisible ? 0 : height(), width(), height());\n+        });\n+    }\n     layerIsVisible = !hide;\n }\n "
      },
      {
        "sha": "88ea909e53c030c86a62a43633f32e7f505f3f4c",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/346a917963701e6e8507f8c4de3147e867b6c1a1/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/346a917963701e6e8507f8c4de3147e867b6c1a1/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=346a917963701e6e8507f8c4de3147e867b6c1a1",
        "patch": "@@ -8,6 +8,8 @@\n #include <QDateTime>\n #include <QWidget>\n \n+#include <atomic>\n+\n //! The required delta of headers to the estimated number of available headers until we show the IBD progress\n static constexpr int HEADER_HEIGHT_DELTA_SYNC = 24;\n \n@@ -45,6 +47,7 @@ public Q_SLOTS:\n     QVector<QPair<qint64, double> > blockProcessTime;\n     bool layerIsVisible;\n     bool userClosed;\n+    std::atomic<bool> animationRunning;\n };\n \n #endif // BITCOIN_QT_MODALOVERLAY_H"
      }
    ]
  },
  {
    "sha": "749b937ac69581ab1dc065fa7b9968b10383a26c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDliOTM3YWM2OTU4MWFiMWRjMDY1ZmE3Yjk5NjhiMTAzODNhMjZj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-05T11:21:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:19Z"
      },
      "message": "[Qt] Hide ModalOverlay by default when SPV is enabled",
      "tree": {
        "sha": "0d0a12c1000dbc2af91c920c26926ea7bef10a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d0a12c1000dbc2af91c920c26926ea7bef10a47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/749b937ac69581ab1dc065fa7b9968b10383a26c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/cACgkQKdS8tkFv\nU+yQdw//exhEsFH3cDTKKkcFgzR3tTGIxxVKdf2nBwN/UVnFYGrd6y7g56GV+7a/\nvgHTXStM2bhrDxYqQRSaEHyAjWrtM0+mVyHtYk3sa5BOnFttiSosrlVU+PsLdBcM\nG/F94DmdVJbjTDt5shmgg/LAQZoV6XQ0GflVZoMYIsosEYxjFDe0fUMd//GOfp9Z\nTwbpWoxgaB3U60eedLtt3j0ljTDu8Hehcp+wVcPVPuizgweXCreltLTrdT9l3E+K\n/rRZcSW8GM47N96v+qRJ/FEthIE+yrfnvpzK1ku/kvqTGLJ2FCZK8V7d/5cvzktS\nlaDam7w9rwWjSIiqyEUMeKdzNV96fk9A6lrq27hRFOzYE3vNm+CU5q1NRlr1GBLg\nABgc2L7M24/gDJNje2bJXNc0z06GGEVvo6INnE3P47zkaXdTnOPxxgI2SAGQqpIO\nU5/MUpT5gvh1lRAGYAqNl/4jAbKSCPO2LUnzH8HQnaPcKWAa8mqI17koxjQZVHd7\nZHdyjF2qOZ5g0QcC2mBCDuCff4TelaUdQaB4kqdw6HUkPdEEDdxbOZu/BAZtrKhg\n7UU4t9wwoumM32SIcmhlI0ZhMEGIVf0wZKGjCMa7iLLCD8bn0YM78cZpfwZMuPCU\n5cfURAYnmN+Nmud5JJa1EL7UdUsOrmnaZ2Drsr9BZgL43cy1PA8=\n=Em/I\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d0a12c1000dbc2af91c920c26926ea7bef10a47\nparent 346a917963701e6e8507f8c4de3147e867b6c1a1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483615284 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288439 +0100\n\n[Qt] Hide ModalOverlay by default when SPV is enabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/749b937ac69581ab1dc065fa7b9968b10383a26c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/749b937ac69581ab1dc065fa7b9968b10383a26c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/749b937ac69581ab1dc065fa7b9968b10383a26c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "346a917963701e6e8507f8c4de3147e867b6c1a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346a917963701e6e8507f8c4de3147e867b6c1a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/346a917963701e6e8507f8c4de3147e867b6c1a1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6026d250af9aa11eb081981f3ba48b0eca9fb8d0",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/749b937ac69581ab1dc065fa7b9968b10383a26c/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/749b937ac69581ab1dc065fa7b9968b10383a26c/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=749b937ac69581ab1dc065fa7b9968b10383a26c",
        "patch": "@@ -867,7 +867,8 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n         if(walletFrame)\n         {\n             walletFrame->showOutOfSyncWarning(true);\n-            modalOverlay->showHide();\n+            if (!walletFrame->getSPVMode())\n+                modalOverlay->showHide();\n         }\n #endif // ENABLE_WALLET\n \n@@ -1102,6 +1103,8 @@ void BitcoinGUI::setSPVStatus(int spvEnabled)\n {\n     labelWalletSPVStatusIcon->setPixmap(platformStyle->SingleColorIcon(spvEnabled ? \":/icons/spv_enabled\" : \":/icons/spv_disabled\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n     labelWalletSPVStatusIcon->setToolTip(spvEnabled ? tr(\"Simple Payment Verification is <b>enabled</b>\") : tr(\"Simple Payment Verification is <b>disabled</b>\"));\n+    if(spvEnabled)\n+        modalOverlay->showHide(true, false);\n }\n \n void BitcoinGUI::setEncryptionStatus(int status)"
      }
    ]
  },
  {
    "sha": "87fb7fbcb013265dd31730cdf3db5126c60c26d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2ZiN2ZiY2IwMTMyNjVkZDMxNzMwY2RmM2RiNTEyNmM2MGMyNmQw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-06T09:42:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:19Z"
      },
      "message": "[Qt] Show more significant warning if we fall back to the default fee",
      "tree": {
        "sha": "e76b09e26040eeb7296a7f48f1f295ccc55460cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e76b09e26040eeb7296a7f48f1f295ccc55460cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87fb7fbcb013265dd31730cdf3db5126c60c26d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/cACgkQKdS8tkFv\nU+xCvg/7BxNs4sqik4evrUSFxhH5CSX+7IRYFTDZsgfXrZ19TdkxHGDVOW+qvgSS\naPC8Cf6TfWAL6WFgSKBef5ItMg+bT01mubORZJ1pbX00uEjTpAFL5T3gB7o1pYEk\nAtcm/tWC0bhad3iutdzb/LRWrF+x5fKeCv2/YS7HDVpk1ZZDByJv20bPT8WnWbA5\n6Pb7AtnDEKSWE73IXthIiMP3RnvM+pajZaPERB63KI9wM9tuiMBhxIOe+FD75FWQ\n9GNis2w5Fr7OxoKZ/8nykbISXvafdgEASQRVta+tbArcUXVn2c5xF6X7EsD3gQpn\nWHDjrEKJvZKOmc48pJ5EzqDeLnW98ySXSHcjQW1n8FCKwKIQqm2jw/2helFC9dw2\nZ6NpI0NrlKJplIAKcQI11vu6E7YY/JtHoVWytQALPbxW+l2rRDK4f+tTFxDXRkMp\nNfHFvWVYssEGSpA+B8YodZfXNVFFvHIM81PLs5Iit+bKkl6N7PgRrEnDui0jzIXF\nbKrvFnOo22us51+GtmEMXl4QBsO+rMRyYGd91V10De+q0iFskk1rd3VjM3CpDNYB\nE1WMLLCFT0PI5qvc4EqIORbKMGcw39NnNp/8wXC1cpka9clagSNYnyKZaqi2xTEQ\nSTgWphoZ+vT/KGtifrF7a8Yb4d6k1xoXKyP8OstUNetUuJqidTQ=\n=PKy5\n-----END PGP SIGNATURE-----",
        "payload": "tree e76b09e26040eeb7296a7f48f1f295ccc55460cc\nparent 749b937ac69581ab1dc065fa7b9968b10383a26c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483695747 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288439 +0100\n\n[Qt] Show more significant warning if we fall back to the default fee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87fb7fbcb013265dd31730cdf3db5126c60c26d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87fb7fbcb013265dd31730cdf3db5126c60c26d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87fb7fbcb013265dd31730cdf3db5126c60c26d0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "749b937ac69581ab1dc065fa7b9968b10383a26c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/749b937ac69581ab1dc065fa7b9968b10383a26c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/749b937ac69581ab1dc065fa7b9968b10383a26c"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2eb3276a8deb431d1734f306da4148b1d3a415c7",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87fb7fbcb013265dd31730cdf3db5126c60c26d0/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87fb7fbcb013265dd31730cdf3db5126c60c26d0/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=87fb7fbcb013265dd31730cdf3db5126c60c26d0",
        "patch": "@@ -759,11 +759,31 @@\n             </item>\n            </layout>\n           </item>\n+          <item>\n+           <widget class=\"QLabel\" name=\"fallbackFeeWarningLabel\">\n+            <property name=\"toolTip\">\n+             <string>Using the fallbackfee can result in sending a transaction that will take serval hours or days (or never) to confirm. Consider choosing your fee manually or wait until your have validated the complete chain.</string>\n+            </property>\n+            <property name=\"styleSheet\">\n+             <string notr=\"true\">color: rgb(255, 150, 0);\n+font-weight: bold;</string>\n+            </property>\n+            <property name=\"text\">\n+             <string>Warning: Fee estimation is currently not possible.</string>\n+            </property>\n+            <property name=\"wordWrap\">\n+             <bool>false</bool>\n+            </property>\n+           </widget>\n+          </item>\n           <item>\n            <spacer name=\"horizontalSpacer_4\">\n             <property name=\"orientation\">\n              <enum>Qt::Horizontal</enum>\n             </property>\n+            <property name=\"sizeType\">\n+             <enum>QSizePolicy::MinimumExpanding</enum>\n+            </property>\n             <property name=\"sizeHint\" stdset=\"0\">\n              <size>\n               <width>40</width>"
      },
      {
        "sha": "8c0525a62daf98a08a84e3864a8ed9e6222b50f1",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87fb7fbcb013265dd31730cdf3db5126c60c26d0/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87fb7fbcb013265dd31730cdf3db5126c60c26d0/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=87fb7fbcb013265dd31730cdf3db5126c60c26d0",
        "patch": "@@ -656,13 +656,15 @@ void SendCoinsDialog::updateSmartFeeLabel()\n                                                                 std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n+        ui->fallbackFeeWarningLabel->setVisible(true);\n     }\n     else\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n                                                                 std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n         ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n+        ui->fallbackFeeWarningLabel->setVisible(false);\n     }\n \n     updateFeeMinimizedLabel();"
      }
    ]
  },
  {
    "sha": "9c4055dc46ad8dceecf098524e4577bb71da62d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzQwNTVkYzQ2YWQ4ZGNlZWNmMDk4NTI0ZTQ1NzdiYjcxZGE2MmQ3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-06T16:22:53Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:20Z"
      },
      "message": "Don't fetch blocks during headers-sync when SPV is enabled",
      "tree": {
        "sha": "cdbfe15efc1bfdfd7ac3e7d21ab5c1d68180589e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdbfe15efc1bfdfd7ac3e7d21ab5c1d68180589e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c4055dc46ad8dceecf098524e4577bb71da62d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/gACgkQKdS8tkFv\nU+yVHw/6A66vmz/wq4qb6Gc97aIrq9/ZrcZw/H5DcsTGFh1b1wS9bWd3igKyUbrf\nDFMPqEjAnBEHHDGfH3J19epnfrv+PP9uWtmjoAmtWelAxMEvMDt2c2O7bb11fknS\niI65o+R6e8peTJIHbo6oGhtNprMHIW+qJyIABsFWnD8aU5geqW/SIENBQbd93JNe\noh4JQNQ7jN59/IlSvdcQuM48HHQuHDKryksGl+FkSjwQ9VbRUo2r10dIaizEp0vW\nSV3RDGPrSLnB1F+g9wYgi2nlfAx4tJQnm5EZYkQW9toj/jyTa+6uSaFGKAIbndEp\nd3P0PbRMdWjWHSUFsWx0uXg9Q3XDHoNy835IEc/H2K1zXeaDu4Ki2vmTpdJZAAzm\n7SHhEQRrgogLlwRPIeS6LEYvwVNKvH+NumgRpDet8Mrpr0tpkphRA4FSGP3BXN0v\n4zXcmKCP2GhI2ANwmBUGPeP4BfoVqkM9yTc2KK5zBGRXxrNOcorFwD0DqrFb+wS0\nvlfpk2uRd1xoJewlYTxw20SzBysu8JC+pW8+GTitrTOfUQ0TEHao5uzKEnOpxUpp\n5Or1eWlC37xHjx8B/2mh8o43hovVp4zmsqOkEt9txR+GCWgt8JUz8r46W9ikX7Gi\nkH4u5tildhd4rIBEBvzaePXekhbEnDg3S8NtN84jUPqAlbXxZpw=\n=rs9I\n-----END PGP SIGNATURE-----",
        "payload": "tree cdbfe15efc1bfdfd7ac3e7d21ab5c1d68180589e\nparent 87fb7fbcb013265dd31730cdf3db5126c60c26d0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1483719773 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288440 +0100\n\nDon't fetch blocks during headers-sync when SPV is enabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4055dc46ad8dceecf098524e4577bb71da62d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4055dc46ad8dceecf098524e4577bb71da62d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4055dc46ad8dceecf098524e4577bb71da62d7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87fb7fbcb013265dd31730cdf3db5126c60c26d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87fb7fbcb013265dd31730cdf3db5126c60c26d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87fb7fbcb013265dd31730cdf3db5126c60c26d0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dc57006108ba0146215655900e208095f8e65279",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4055dc46ad8dceecf098524e4577bb71da62d7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4055dc46ad8dceecf098524e4577bb71da62d7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9c4055dc46ad8dceecf098524e4577bb71da62d7",
        "patch": "@@ -66,6 +66,7 @@ static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUAR\n static const uint64_t RANDOMIZER_ID_ADDRESS_RELAY = 0x3cac0035b5866b90ULL; // SHA256(\"main address relay\")[0:8]\n \n std::atomic<bool> fAutoRequestBlocks(DEFAULT_AUTOMATIC_BLOCK_REQUESTS);\n+std::atomic<bool> fFetchBlocksWhileFetchingHeaders(DEFAULT_FETCH_BLOCKS_WHILE_FETCH_HEADERS);\n \n // Internal stuff\n namespace {\n@@ -3187,7 +3188,9 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         // Message: getdata (blocks)\n         //\n         vector<CInv> vGetData;\n-        if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER\n+                && (fFetchBlocksWhileFetchingHeaders || (headersChainActive.Tip() && headersChainActive.Tip()->GetBlockTime() > GetAdjustedTime()-600*24))\n+           ){\n             vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             std::shared_ptr<CAuxiliaryBlockRequest> blockRequest = CAuxiliaryBlockRequest::GetCurrentRequest();"
      },
      {
        "sha": "df097bcd8e3108e13895ff9ae59942342d1cf42e",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4055dc46ad8dceecf098524e4577bb71da62d7/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4055dc46ad8dceecf098524e4577bb71da62d7/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9c4055dc46ad8dceecf098524e4577bb71da62d7",
        "patch": "@@ -27,6 +27,9 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n static const bool DEFAULT_AUTOMATIC_BLOCK_REQUESTS = true;\n extern std::atomic<bool> fAutoRequestBlocks;\n \n+static const bool DEFAULT_FETCH_BLOCKS_WHILE_FETCH_HEADERS = true;\n+extern std::atomic<bool> fFetchBlocksWhileFetchingHeaders;\n+\n class PeerLogicValidation : public CValidationInterface {\n private:\n     CConnman* connman;"
      },
      {
        "sha": "ac4fa14ee0d77a5ba6ecf1e41a0e666dbc45331d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4055dc46ad8dceecf098524e4577bb71da62d7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4055dc46ad8dceecf098524e4577bb71da62d7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9c4055dc46ad8dceecf098524e4577bb71da62d7",
        "patch": "@@ -16,6 +16,7 @@\n #include \"keystore.h\"\n #include \"validation.h\"\n #include \"net.h\"\n+#include \"net_processing.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -3806,7 +3807,13 @@ bool CWallet::InitLoadWallet()\n     pwalletMain = pwallet;\n \n     if (GetBoolArg(\"-spv\", DEFAULT_USE_SPV))\n+    {\n+        // don't download blocks for validating before we have all headers\n+        // allow to first request auxiliary blocks for SPV\n+        fFetchBlocksWhileFetchingHeaders = false;\n+\n         pwalletMain->setSPVEnabled(true);\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTRjOTRjYTQ1ZDk5MGQ3ZWI3NDUxMTA0ODZlYjljNmVjZmNiOGI0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T19:55:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-24T20:07:20Z"
      },
      "message": "[Qt] Update the transaction table based on changes of the header-chain",
      "tree": {
        "sha": "fdf28d59302231e22f62338c70224468dffd9756",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdf28d59302231e22f62338c70224468dffd9756"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliHs/gACgkQKdS8tkFv\nU+yJNg/8DSKVxGNNo5fvb+CDBjrcy3l/KXiDP3rbDy1Z5/XLkpMcyk9CItjRQheQ\n3nlZdHk2m+XvMjGR+YqZUCPB/LDy0AYRrCi+iLKlFeNkLuaFzHQNE6ryAcN2kgp+\naMkaHob3W7ekWGByKQHO9Rbr+2NYWeFTOOuqjJxk/aixulfeI62s9aThypcYFVxh\n4y3gzK1HOC3yHsPRMFOQbVCMcZMYtdWJP0p0EEEkuDcnRT4SAZX0JrtylcVAhOPg\nIK7xxdJt1M0P0ZRSLKvZv7bbE/fTy/BzvumPYqyFrJFo9y3CGzOXREP+xzmepDAu\nuTTdkDC9+MgJOZGutm0AqgB8KkWTesFTNETlesF4oeJAviJoji+iDi5XOGfS4TC4\nVys9pK0fThUIPZhylVGBfpqbHH0Hkrqaf5D8pAqNzp+0IEZNKKOMj0LhYbWW6ju2\neBtZjhzDfchc4B5iaYjBOBC9iOY4tpMj+bPvd1i1pIURgkj+LYRXqp1nW2jfac03\n0jl3NX1sRaQ8Ge/lWd4E9iffdM/FPut1727d2FbVa1pp/kaDZk/K7rRECzqqbWVI\nq7yDblKUs5U5YS1ayjhX+VRscNoQmnSB8fFuEM/0dWvKO/KtvChTuFlyHZAoG3pE\nnTI62kBy2mVEi4Wnhq/bJfy6ATfTP2rwhI3RwwCFCix7Qbc67qE=\n=R8y6\n-----END PGP SIGNATURE-----",
        "payload": "tree fdf28d59302231e22f62338c70224468dffd9756\nparent 9c4055dc46ad8dceecf098524e4577bb71da62d7\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1485287702 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1485288440 +0100\n\n[Qt] Update the transaction table based on changes of the header-chain\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c4055dc46ad8dceecf098524e4577bb71da62d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4055dc46ad8dceecf098524e4577bb71da62d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4055dc46ad8dceecf098524e4577bb71da62d7"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "34a9891152153a8d2ba9a2d0ef38eef7de273220",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
        "patch": "@@ -187,6 +187,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.countsForBalance = wtx.IsTrusted() && !(wtx.GetBlocksToMaturity() > 0);\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n+    status.cur_num_blocks_headers_chain = headersChainActive.Height();\n \n     status.fValidated = wtx.fValidated;\n     if (!CheckFinalTx(wtx, -1, !status.fValidated))\n@@ -258,7 +259,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n bool TransactionRecord::statusUpdateNeeded()\n {\n     AssertLockHeld(cs_main);\n-    return status.cur_num_blocks != chainActive.Height();\n+    return (status.cur_num_blocks != chainActive.Height() || status.cur_num_blocks_headers_chain != headersChainActive.Height());\n }\n \n QString TransactionRecord::getTxID() const"
      },
      {
        "sha": "e8cb25f724ed584537ae57e7f6cb2bfd199ecb58",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
        "patch": "@@ -62,6 +62,9 @@ class TransactionStatus\n     /** Current number of blocks (to know whether cached status is still valid) */\n     int cur_num_blocks;\n \n+    /** Current number of blocks based on the headers chain */\n+    int cur_num_blocks_headers_chain;\n+\n     /** true if transaction has been validated (false == spv) */\n     bool fValidated;\n };"
      },
      {
        "sha": "d46fce6b525d9b335436555bb35c8f0b7e0a2143",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
        "patch": "@@ -36,7 +36,8 @@ WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, O\n     recentRequestsTableModel(0),\n     cachedBalance(0), cachedUnconfirmedBalance(0), cachedImmatureBalance(0),\n     cachedEncryptionStatus(Unencrypted),\n-    cachedNumBlocks(0)\n+    cachedNumBlocks(0),\n+    cachedNumBlocksHeadersChain(0)\n {\n     fHaveWatchOnly = wallet->HaveWatchOnly();\n     fForceCheckBalanceChanged = false;\n@@ -125,12 +126,13 @@ void WalletModel::pollBalanceChanged()\n     if(!lockWallet)\n         return;\n \n-    if(fForceCheckBalanceChanged || chainActive.Height() != cachedNumBlocks)\n+    if(fForceCheckBalanceChanged || chainActive.Height() != cachedNumBlocks || (spvEnabled() && headersChainActive.Height() != cachedNumBlocksHeadersChain))\n     {\n         fForceCheckBalanceChanged = false;\n \n         // Balance and number of transactions might have changed\n         cachedNumBlocks = chainActive.Height();\n+        cachedNumBlocksHeadersChain = headersChainActive.Height();\n \n         checkBalanceChanged();\n         if(transactionTableModel)"
      },
      {
        "sha": "4c6567c691dd7eac82f5fc69b56cb42bc51d339b",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/254c94ca45d990d7eb745110486eb9c6ecfcb8b4/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=254c94ca45d990d7eb745110486eb9c6ecfcb8b4",
        "patch": "@@ -237,6 +237,7 @@ class WalletModel : public QObject\n     CAmount cachedWatchImmatureBalance;\n     EncryptionStatus cachedEncryptionStatus;\n     int cachedNumBlocks;\n+    int cachedNumBlocksHeadersChain;\n \n     QTimer *pollTimer;\n "
      }
    ]
  }
]