[
  {
    "sha": "0025c9eae41654c204ecf31f7e134b91dc473a75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDI1YzllYWU0MTY1NGMyMDRlY2YzMWY3ZTEzNGI5MWRjNDczYTc1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-11-26T16:17:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-12-10T21:42:14Z"
      },
      "message": "[mining] segwit option must be set in GBT\n\nCalling getblocktemplate without the segwit rule specified is most\nlikely a client error, since it results in lower fees for the miner.\nPrevent this client error by failing getblocktemplate if called without\nthe segwit rule specified.",
      "tree": {
        "sha": "4f02f77f87d09301d777b64287203849f0fe18cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f02f77f87d09301d777b64287203849f0fe18cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0025c9eae41654c204ecf31f7e134b91dc473a75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0025c9eae41654c204ecf31f7e134b91dc473a75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0025c9eae41654c204ecf31f7e134b91dc473a75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0025c9eae41654c204ecf31f7e134b91dc473a75/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f23460c7e316fe7c944680f3feff07ebb867f70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f23460c7e316fe7c944680f3feff07ebb867f70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f23460c7e316fe7c944680f3feff07ebb867f70"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 30,
      "deletions": 62
    },
    "files": [
      {
        "sha": "7cf27f9f5bca5072af89e1ab9fa991d1cd3d7080",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -27,7 +27,7 @@ static std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey\n {\n     auto block = std::make_shared<CBlock>(\n         BlockAssembler{Params()}\n-            .CreateNewBlock(coinbase_scriptPubKey, /* fMineWitnessTx */ true)\n+            .CreateNewBlock(coinbase_scriptPubKey)\n             ->block);\n \n     block->nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;"
      },
      {
        "sha": "ef48a86e32cd8f9abaf52af81acdbcc990272a64",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -95,7 +95,7 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();\n \n@@ -139,7 +139,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;\n+    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;"
      },
      {
        "sha": "44c50b01ad57db54f43e0f027dbb531c5df997d7",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -157,7 +157,7 @@ class BlockAssembler\n     BlockAssembler(const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx=true);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n \n private:\n     // utility functions"
      },
      {
        "sha": "d4d1adbb503e722e5710f387f34c2953cea5a0b7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -311,15 +311,15 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"A json object in the following spec\",\n+                    {\"template_request\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object in the following spec\",\n                         {\n                             {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n                             {\"capabilities\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A list of strings\",\n                                 {\n                                     {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n                                 },\n                                 },\n-                            {\"rules\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A list of strings\",\n+                            {\"rules\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A list of strings\",\n                                 {\n                                     {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported softfork deployment\"},\n                                 },\n@@ -503,21 +503,17 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     }\n \n     const struct VBDeploymentInfo& segwit_info = VersionBitsDeploymentInfo[Consensus::DEPLOYMENT_SEGWIT];\n-    // If the caller is indicating segwit support, then allow CreateNewBlock()\n-    // to select witness transactions, after segwit activates (otherwise\n-    // don't).\n-    bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n+    // GBT must be called with 'segwit' set in the rules\n+    if (setClientRules.count(segwit_info.name) != 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"getblocktemplate must be called with the segwit rule set (call with {\\\"rules\\\": [\\\"segwit\\\"]})\");\n+    }\n \n     // Update block\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;\n-    // Cache whether the last invocation was with segwit support, to avoid returning\n-    // a segwit-block to a non-segwit caller.\n-    static bool fLastTemplateSupportsSegwit = true;\n     if (pindexPrev != chainActive.Tip() ||\n-        (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5) ||\n-        fLastTemplateSupportsSegwit != fSupportsSegwit)\n+        (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n         pindexPrev = nullptr;\n@@ -526,11 +522,10 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n         CBlockIndex* pindexPrevNew = chainActive.Tip();\n         nStart = GetTime();\n-        fLastTemplateSupportsSegwit = fSupportsSegwit;\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy, fSupportsSegwit);\n+        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -682,7 +677,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.pushKV(\"bits\", strprintf(\"%08x\", pblock->nBits));\n     result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n \n-    if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n+    if (!pblocktemplate->vchCoinbaseCommitment.empty()) {\n         result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n     }\n "
      },
      {
        "sha": "a9d192e5553648a21a52ab4fe92e71aacf13ddaf",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -54,7 +54,7 @@ std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n     CScript pubKey;\n     pubKey << i++ << OP_TRUE;\n \n-    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey);\n     auto pblock = std::make_shared<CBlock>(ptemplate->block);\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;"
      },
      {
        "sha": "4bcdf9af55e6cb83cc1de74b588b31f6c452c1ce",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -90,7 +90,7 @@ def run_test(self):\n \n         self.log.info(\"Verify sigops are counted in GBT with pre-BIP141 rules before the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        tmpl = self.nodes[0].getblocktemplate({})\n+        tmpl = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert(tmpl['sizelimit'] == 1000000)\n         assert('weightlimit' not in tmpl)\n         assert(tmpl['sigoplimit'] == 20000)\n@@ -232,15 +232,7 @@ def run_test(self):\n         assert(tx.wit.is_null())\n         assert(txid3 in self.nodes[0].getrawmempool())\n \n-        # Now try calling getblocktemplate() without segwit support.\n-        template = self.nodes[0].getblocktemplate()\n-\n-        # Check that tx1 is the only transaction of the 3 in the template.\n-        template_txids = [t['txid'] for t in template['transactions']]\n-        assert(txid2 not in template_txids and txid3 not in template_txids)\n-        assert(txid1 in template_txids)\n-\n-        # Check that running with segwit support results in all 3 being included.\n+        # Check that getblocktemplate includes all transactions.\n         template = self.nodes[0].getblocktemplate({\"rules\": [\"segwit\"]})\n         template_txids = [t['txid'] for t in template['transactions']]\n         assert(txid1 in template_txids)"
      },
      {
        "sha": "661d9f4c97951463ad9095706648be3dc2dba30b",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -30,7 +30,7 @@\n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n         block.hashMerkleRoot = block.calc_merkle_root()\n-    rsp = node.getblocktemplate(template_request={'data': b2x(block.serialize()), 'mode': 'proposal'})\n+    rsp = node.getblocktemplate(template_request={'data': b2x(block.serialize()), 'mode': 'proposal', 'rules': ['segwit']})\n     assert_equal(rsp, expect)\n \n \n@@ -60,7 +60,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n \n         # Mine a block to leave initial block download\n         node.generatetoaddress(1, node.get_deterministic_priv_key().address)\n-        tmpl = node.getblocktemplate()\n+        tmpl = node.getblocktemplate({'rules': ['segwit']})\n         self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert 'proposal' in tmpl['capabilities']\n         assert 'coinbasetxn' not in tmpl\n@@ -86,6 +86,9 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         block.nNonce = 0\n         block.vtx = [coinbase_tx]\n \n+        self.log.info(\"getblocktemplate: segwit rule must be set\")\n+        assert_raises_rpc_error(-8, \"getblocktemplate must be called with the segwit rule set\", node.getblocktemplate)\n+\n         self.log.info(\"getblocktemplate: Test valid block\")\n         assert_template(node, block, None)\n \n@@ -102,7 +105,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal', 'rules': ['segwit']})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -132,7 +135,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         bad_block_sn = bytearray(block.serialize())\n         assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n         bad_block_sn[TX_COUNT_OFFSET] += 1\n-        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal', 'rules': ['segwit']})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n         bad_block = copy.deepcopy(block)"
      },
      {
        "sha": "72cde8e8113a349acb960137dd722c07446ca928",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -15,14 +15,14 @@ class LongpollThread(threading.Thread):\n     def __init__(self, node):\n         threading.Thread.__init__(self)\n         # query current longpollid\n-        template = node.getblocktemplate()\n+        template = node.getblocktemplate({'rules': ['segwit']})\n         self.longpollid = template['longpollid']\n         # create a new connection to the node, we can't use the same\n         # connection from two threads\n         self.node = get_rpc_proxy(node.url, 1, timeout=600, coveragedir=node.coverage_dir)\n \n     def run(self):\n-        self.node.getblocktemplate({'longpollid':self.longpollid})\n+        self.node.getblocktemplate({'longpollid': self.longpollid, 'rules': ['segwit']})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -34,10 +34,10 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n-        template = self.nodes[0].getblocktemplate()\n+        template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n-        template2 = self.nodes[0].getblocktemplate()\n+        template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert(template2['longpollid'] == longpollid)\n \n         # Test 1: test that the longpolling wait if we do nothing"
      },
      {
        "sha": "ceb5990f0edca8790dc2350612a5d395e21dee03",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -142,10 +142,10 @@ def run_test(self):\n         # getblocktemplate to (eventually) return a new block.\n         mock_time = int(time.time())\n         self.nodes[0].setmocktime(mock_time)\n-        template = self.nodes[0].getblocktemplate()\n+        template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         self.nodes[0].prioritisetransaction(txid=tx_id, fee_delta=-int(self.relayfee*COIN))\n         self.nodes[0].setmocktime(mock_time+10)\n-        new_template = self.nodes[0].getblocktemplate()\n+        new_template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n \n         assert(template != new_template)\n "
      },
      {
        "sha": "d95da227e53935824e674c973aaf5187c9639a47",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0025c9eae41654c204ecf31f7e134b91dc473a75/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=0025c9eae41654c204ecf31f7e134b91dc473a75",
        "patch": "@@ -545,31 +545,13 @@ def advance_to_segwit_started(self):\n \n     @subtest\n     def test_getblocktemplate_before_lockin(self):\n-        # Node0 is segwit aware, node2 is not.\n-        for node in [self.nodes[0], self.nodes[2]]:\n-            gbt_results = node.getblocktemplate()\n-            block_version = gbt_results['version']\n-            # If we're not indicating segwit support, we will still be\n-            # signalling for segwit activation.\n-            assert_equal((block_version & (1 << VB_WITNESS_BIT) != 0), node == self.nodes[0])\n-            # If we don't specify the segwit rule, then we won't get a default\n-            # commitment.\n-            assert('default_witness_commitment' not in gbt_results)\n-\n-        # Workaround:\n-        # Can either change the tip, or change the mempool and wait 5 seconds\n-        # to trigger a recomputation of getblocktemplate.\n         txid = int(self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1), 16)\n-        # Using mocktime lets us avoid sleep()\n-        sync_mempools(self.nodes)\n-        self.nodes[0].setmocktime(int(time.time()) + 10)\n-        self.nodes[2].setmocktime(int(time.time()) + 10)\n \n         for node in [self.nodes[0], self.nodes[2]]:\n             gbt_results = node.getblocktemplate({\"rules\": [\"segwit\"]})\n             block_version = gbt_results['version']\n             if node == self.nodes[2]:\n-                # If this is a non-segwit node, we should still not get a witness\n+                # If this is a non-segwit node, we should not get a witness\n                 # commitment, nor a version bit signalling segwit.\n                 assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n                 assert('default_witness_commitment' not in gbt_results)\n@@ -586,10 +568,6 @@ def test_getblocktemplate_before_lockin(self):\n                 script = get_witness_script(witness_root, 0)\n                 assert_equal(witness_commitment, bytes_to_hex_str(script))\n \n-        # undo mocktime\n-        self.nodes[0].setmocktime(0)\n-        self.nodes[2].setmocktime(0)\n-\n     @subtest\n     def advance_to_segwit_lockin(self):\n         \"\"\"Mine enough blocks to lock in segwit, but don't activate.\"\"\""
      }
    ]
  },
  {
    "sha": "d2ce315fbfd8d8ed52bde9f714ded8c76521cce2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmNlMzE1ZmJmZDhkOGVkNTJiZGU5ZjcxNGRlZDhjNzY1MjFjY2Uy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-11-26T17:42:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-12-10T21:42:14Z"
      },
      "message": "[docs] add release note for change to GBT\n\nGBT must now be called with the segwit rule.",
      "tree": {
        "sha": "e1b5708c0032dfae0a0c5f5cf0df4e6e430308b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1b5708c0032dfae0a0c5f5cf0df4e6e430308b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2ce315fbfd8d8ed52bde9f714ded8c76521cce2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ce315fbfd8d8ed52bde9f714ded8c76521cce2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ce315fbfd8d8ed52bde9f714ded8c76521cce2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ce315fbfd8d8ed52bde9f714ded8c76521cce2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0025c9eae41654c204ecf31f7e134b91dc473a75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0025c9eae41654c204ecf31f7e134b91dc473a75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0025c9eae41654c204ecf31f7e134b91dc473a75"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "94652583101a13aac5a89e70daf29d3e138ea5cc",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ce315fbfd8d8ed52bde9f714ded8c76521cce2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ce315fbfd8d8ed52bde9f714ded8c76521cce2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d2ce315fbfd8d8ed52bde9f714ded8c76521cce2",
        "patch": "@@ -65,6 +65,13 @@ platform.\n Notable changes\n ===============\n \n+Mining\n+------\n+\n+- Calls to `getblocktemplate` will fail if the segwit rule is not specified.\n+  Calling `getblocktemplate` without segwit specified is almost certainly\n+  a misconfiguration since doing so results in lower rewards for the miner.\n+\n Command line option changes\n ---------------------------\n \n@@ -182,6 +189,8 @@ in the Low-level Changes section below.\n   P2SH-P2WPKH, and P2SH-P2WSH. Requests for P2WSH and P2SH-P2WSH accept\n   an additional `witnessscript` parameter.\n \n+- See the [Mining](#mining) section for changes to `getblocktemplate`.\n+\n Low-level changes\n =================\n "
      }
    ]
  }
]