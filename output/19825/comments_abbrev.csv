gmaxwell,2020-08-28 00:36:27,"Because bans have specific durations I'm not sure if this is a good change.  Should a 1 hour ban of foo/16 stop you from adding a 1 year ban of foo/24? \n\nRight now I already have to undo every ban before adding it to make sure it's not rejected and as a result ends up expiring prematurely.  But if any wider banned blocked every narrower ban, I'm not sure how I could programmatically handle tha",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682259857,682259857,
DrahtBot,2020-08-28 03:23:39,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682303669,682303669,
dhruv,2020-08-28 06:59:53,"> I'm not sure how I could programmatically handle that. I'd have to have crazy logic interrogated the banlist and broke every larger ban into smaller ones when a smaller one with a different time period was added.\n\nTotally fair. I can't see either how clients will be able to make tooling with sane logic. I am going to think this through and update the PR with a better solution. Thanks for the",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682363772,682363772,
jnewbery,2020-08-28 07:06:04,Concept ACK on making this consistent. I'll review once you have an updated proposal that addresses gmaxwell's input.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-682365929,682365929,
dhruv,2020-08-28 23:24:37,"### Potential solution\n\nLet `(s0, t0)` be an existing ban, where `s0` is a subnet and `t0` is the ban expiration time. The user is now trying to add another ban `(s1, t1)`.\n\n**Case s1 ⊂ s0:**\nIf `t1 <= t0`: return success because the end goal is accomplished - this will minimize client error handling\nIf `t1 > t0`: insert `(s1, t1)` into `BanMan`\n\n**Case s1 ⊇ s0:**\nIf `t1 <= t0`: ",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683187822,683187822,
sipa,2020-08-29 18:36:03,"I think that approach makes sense; it's equivalent to treating every ban as a per-IP thing, and remembering the longest-duration ban for each.\n\nOne question I have is how to make clearbanned consistent with that? This is a bit confusing:\n* ban `1.2.3.0/24` for 1h\n* ban `1.2.0.0/16` for 2h -> overwrites the previous ban\n* unban `1.2.3.0/24` -> failure because no such ban exists\n\nAnd t",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683327324,683327324,
gmaxwell,2020-08-30 03:49:02,"I don't really like the banning add removal doing fancy logic.  This will make it extremely hard to have external software add bans, even with the newly proposed behaviour.  It's also unlike access-lists on any networking device I've ever worked with.\n\nWhat is the downside of the obvious behaviour? There is a list of bans, some of which are shorter-than-maximum-CIDR,  add adds to the list, cle",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683372477,683372477,
dhruv,2020-08-30 05:19:46,"I agree with the idea that we should interpret `setban ip/mask add time` as ""add a ban entry for this address range"", and not as ""add a ban entry on each single address in the range"". This way of thinking allows for overlapping bans.\n\nI also agree that unintended side effects like `setban 127.0.0.1/32 remove` removing the ban entry for `127.0.0.1/24` is not good as it means client scripts need",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683377943,683377943,
gmaxwell,2020-08-30 05:55:03,"The most common usage is a relative time, so the times won't be consistent. :)",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683380125,683380125,
dhruv,2020-08-30 06:46:09,"Ah, I see. So it's safe to say that the banlist would not depend on the order of insertions.",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683383582,683383582,
gmaxwell,2020-08-30 09:13:02,"I think it would with what you're suggesting.  You're suggesting that if there is a shorter wider block, and I insert a longer narrower block-- both get added.  But if there is a shorter narrower block and I add a longer wider block the shorter block is removed.\n\nIf I give both a relative lifetime of 1 day then make the two calls a second apart, then the resulting set of bans depends on the or",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683396285,683396285,
dhruv,2020-08-30 17:48:28,"@gmaxwell I still think we are in agreement that _equivalent_ `setban` instructions will produce _identical_ banlists. We seem to be disagreeing as to whether the following two sets of RPC instructions are _equivalent_:\n\nScript 1:\n```\nsetban 127.0.0.0/24 add\nsleep 1\nsetban 127.0.0.0/32 add\n```\n\nScript 2:\n```\nsetban 127.0.0.0/32 add\nsleep 1\nsetban 127.0.0.0/24 add\n```\n",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683449495,683449495,
dhruv,2020-09-06 19:38:43,"## Current state of this PR\n\n### What does the current patch at tip `9cc54bd` do?\nIt tries to make `setban` behave consistently whether it is provided with an IP address, or a subnet (IP address range).\n\nLet `(s0, t0)` be an existing ban, where `s0` is a subnet(a contiguous range of IP addresses) and `t0` is the ban expiration time. The user is now trying to add another ban `(s1, t1)`. I",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-687880953,687880953,
jnewbery,2020-09-28 09:29:51,"I agree with @gmaxwell's suggestion here: https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-683372477 that we shouldn't try to do any clever logic.\n\nI think the behaviour should be:\n\n- for `setban add`:\n    - Convert the IP address/net into the canonical CIDR subnet representation\n    - If that subnet is not already banned, add an entry\n    - If that subnet is already banned",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-699893518,699893518,
dhruv,2020-09-28 15:30:22,"Thank you for the kind review, @jnewbery. I've heard the same opinion from another casual in-person conversation. It seems like @practicalswift agrees as well. Sounds like there is consensus that simplicity of logic wins over performance in this case, especially given the minimal overhead. I will re-work the PR this week.",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-700088723,700088723,
dhruv,2020-12-14 07:30:42,"@jnewbery @gmaxwell @practicalswift I've changed the code to reflect what we agreed on. \n\n### Objectives:\n1. Consolidate `BanMan` functions\n2. Throw fewer RPC errors. If user intent is accomplished, the command is successful even if no change was made.\n\n### Changes:\n- Remove `BanMan::Ban(CNetAddr&)` and use `BanMan::Ban(CSubNet&)` instead (ips are subnets of one)\n  - RPC change: `s",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-744235473,744235473,
dhruv,2020-12-14 07:44:29,Force pushed again to alter commit messages. Ready for review.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-744243806,744243806,
dhruv,2021-01-04 08:19:07,"Thank you for the reviews, @glozow @jnewbery. Comments addressed. Rebased. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-753829686,753829686,
dhruv,2021-01-13 07:13:18,Rebased and addressed https://github.com/bitcoin/bitcoin/pull/19825#discussion_r553899004. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-759254983,759254983,
fjahr,2021-01-23 22:42:37,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-766193756,766193756,
dhruv,2021-01-27 00:33:22,Rebased and comments addressed. Ready for review.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-767924279,767924279,
dhruv,2021-01-27 06:23:24,Failing test fixed. Ready for review.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-768062803,768062803,
dhruv,2021-01-28 19:25:37,Rebased. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-769317861,769317861,
dhruv,2021-04-23 21:09:52,Rebased. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-825927339,825927339,
MarcoFalke,2021-07-30 12:08:58,Needs rebase to drop already merged hunks in the fuzz tests,https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-889849378,889849378,
naumenkogs,2021-09-28 10:18:25,"Okay, a lot of things here:\n1. I like the consolidation because it removes code.\n2. I don’t see a big difference between a no-op and throwing an error?\n3. I think UnbanAll would be better if it affected everything downwards (all bans for subnets of given net), not upwards. For “unban all above-nets of a specific addr”, I don’t see a use-case (maybe you can point out one?). If you really want",https://github.com/bitcoin/bitcoin/pull/19825#issuecomment-929054558,929054558,
glozow,2021-01-01 22:10:14,Should this be switching on a range of cases 0 to 8 now?,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r550812551,550812551,src/test/fuzz/banman.cpp
glozow,2021-01-01 22:24:46,nit: sort alphabetically,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r550813836,550813836,test/functional/p2p_disconnect_ban.py
glozow,2021-01-01 23:37:49,"Why not erase as you go and use `m_banned.size()` to infer `m_is_dirty`, instead of constructing a whole new vector?",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r550820325,550820325,src/banman.cpp
glozow,2021-01-01 23:38:32,"same, I wonder if this could just be a `std::remove_if`",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r550820394,550820394,src/banman.cpp
glozow,2021-01-01 23:43:37,`RPCArg::Optional::OMITTED_NAMED_ARG`?,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r550820714,550820714,src/rpc/net.cpp
jnewbery,2021-01-02 14:06:28,Using erase-remove_if is also more efficient - you'll only need to pass over `m_banned` once instead of up to `entries_to_delete.size()` times.,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r550885005,550885005,src/banman.cpp
glozow,2021-01-02 19:48:45,yeah `erase_if` would be the best but it's C++20 😭 ,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r550914703,550914703,src/banman.cpp
dhruv,2021-01-04 07:16:32,Yup - could increase test coverage. Done. ,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r551148954,551148954,src/test/fuzz/banman.cpp
dhruv,2021-01-04 07:26:22,"Since `map.erase(it)` invalidates `it` I was doing a double-pass to avoid incrementing `it`. However, it turns out `erase` will [return the Iterator](https://en.cppreference.com/w/cpp/container/map/erase) following the last removed element. So I've updated the code to use that.\n\n@jnewbery I am confused about this:\n> you'll only need to pass over m_banned once instead of up to entries_to_dele",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r551151768,551151768,src/banman.cpp
dhruv,2021-01-04 07:26:33,Done.,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r551151825,551151825,src/banman.cpp
dhruv,2021-01-04 07:26:54,Thanks for showing me that. Much better.,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r551152004,551152004,src/rpc/net.cpp
dhruv,2021-01-04 07:57:04,"#20671 was merged, so I'm now using `std::optional` instead of `boost::optional`. \n\n`std::optional<T>` is considered ill-formed if `is_reference_v<T>` and also if `!is_destructible_v<T>`. So we can't use `std::optional<const CNetAddr&>` and can't forward declare `CNetAddr` and `CSubNet` in this file (incomplete types are not destructible).",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r551161796,551161796,src/banman.h
jnewbery,2021-01-08 11:46:50,"I think better than adding this `std::optional<CNetAddr>` would be to just overload the `GetBanned()` function, since most of the logic in the function is now specific to the one case where you pass a filterForIp. Those feel like almost two different functional interfaces.\n\nI think better yet would be to do the filtering logic inside the RPC `listbanned()` function. It's not required by any ot",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r553899004,553899004,src/banman.h
dhruv,2021-01-13 07:11:50,That sounds good. Updated code accordingly.,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r556304555,556304555,src/banman.h
jnewbery,2021-01-14 10:31:10,Sorry. I mistakenly thought that `m_banned` was a vector.,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r557294946,557294946,src/banman.cpp
MarcoFalke,2021-01-14 10:32:25,"After you rebase, you may want to apply this patch: https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-760097060",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r557295685,557295685,src/test/fuzz/banman.cpp
jonatack,2021-01-25 13:22:31,579eaaa prefer prefix iterator over postfix one (see developer-notes.md),https://github.com/bitcoin/bitcoin/pull/19825#discussion_r563718303,563718303,src/banman.cpp
jonatack,2021-01-25 13:23:34,"579eaaa\n```suggestion\n                    {""command"", RPCArg::Type::STR, RPCArg::Optional::NO, ""'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list, 'removeall' to remove all bans that include the single IP address""},\n```",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r563718976,563718976,src/rpc/net.cpp
jonatack,2021-01-25 13:24:14,"579eaaa\n```suggestion\n        throw JSONRPCError(RPC_INVALID_PARAMETER, ""Error: setban removeall requires a single IP address"");\n```",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r563719416,563719416,src/rpc/net.cpp
jonatack,2021-01-25 13:24:50,"579eaaa\n```suggestion\n    } else if (strCommand == ""remove"") {\n```",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r563719732,563719732,src/rpc/net.cpp
jonatack,2021-01-25 13:26:05,"38abc322\n```suggestion\n            throw JSONRPCError(RPC_INVALID_PARAMETER, ""Error: Invalid IP address"");\n```",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r563720577,563720577,src/rpc/net.cpp
jonatack,2021-01-25 13:26:30,"38abc322 prefer prefix iterator\n```suggestion\n                ++it;\n```",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r563720874,563720874,src/rpc/net.cpp
jonatack,2021-01-25 13:28:33,877b14aaeb ISTM this behavior ought to be documented/clarified in the setban rpc help,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r563722213,563722213,src/banman.cpp
dhruv,2021-01-27 00:31:58,Done in 0dbe88ad3894cd76d52ed196fd2eed39de1296d2,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564933926,564933926,src/test/fuzz/banman.cpp
dhruv,2021-01-27 00:32:08,Done,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564933990,564933990,src/banman.cpp
dhruv,2021-01-27 00:32:16,Done,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564934035,564934035,src/rpc/net.cpp
dhruv,2021-01-27 00:32:37,Done,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564934164,564934164,src/rpc/net.cpp
dhruv,2021-01-27 00:32:42,Done,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564934191,564934191,src/rpc/net.cpp
dhruv,2021-01-27 00:32:49,Done,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564934231,564934231,src/rpc/net.cpp
dhruv,2021-01-27 00:32:55,Done,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564934279,564934279,src/rpc/net.cpp
dhruv,2021-01-27 00:33:01,Done.,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r564934327,564934327,src/banman.cpp
MarcoFalke,2021-01-28 18:40:37,"Can remove this diff, and then rebase",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r566323809,566323809,src/rpc/net.cpp
dhruv,2021-01-28 19:25:25,Thanks for making that easier :),https://github.com/bitcoin/bitcoin/pull/19825#discussion_r566350745,566350745,src/rpc/net.cpp
naumenkogs,2021-09-28 10:10:03,what is this change exactly about? Why is it relevant to the given PR?,https://github.com/bitcoin/bitcoin/pull/19825#discussion_r717427359,717427359,src/netaddress.cpp
naumenkogs,2021-09-28 10:10:42,"I see it's kinda used below in the same commit 80044bd2ed96c391e9e87d77cc876e653b512657, but splitting this change out (e.g. do it first) would simplify the review.",https://github.com/bitcoin/bitcoin/pull/19825#discussion_r717427911,717427911,src/netaddress.cpp
