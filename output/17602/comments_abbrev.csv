practicalswift,2019-11-25 21:26:23,"Concept ACK\n\nThe quoted discussion mentions that a maximum 31 IP:s fit in a single DNS response packet over UDP. Would it make sense to go with a `nMaxIPs` of `31` instead of the `32`?",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-558347205,558347205,
dongcarl,2019-11-26 17:37:15,"> The quoted discussion mentions that a maximum 31 IP:s fit in a single DNS response packet over UDP. Would it make sense to go with a `nMaxIPs` of `31` instead of the `32`?\n\nI actually don't remember how I calculated that or if I even calculated it correctly... Someone should verify... :eyes: @EthanHeilman\n\n___Update___: Ah, so we have 512 bytes to spend, and the DNS response should look ",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-558739567,558739567,
EthanHeilman,2019-11-26 20:27:54,"If I'm reading the code correctly even if you set `nMaxIPs=1` that will not stop a DNS seeder or misconfigured DNS resolver from sending you far more than `1` IP address over UDP or TCP. Instead Bitcoin will receive all of those IPs and then select `1` of them and throw away the rest. So sadly this change won't fix DNS over TCP grossness.\n\nhttps://github.com/bitcoin/bitcoin/blob/73b26e38d7a174",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-558803899,558803899,
practicalswift,2019-11-26 21:52:30,"> Instead Bitcoin will receive all of those IPs and then select `1` of them and throw away the rest. So sadly this change won't fix DNS over TCP grossness.\n\nYes, that's a good point. Perhaps it should be recommended that Bitcoin DNS seeder implementations limit the number of returned addresses to keep the response in one UDP packet and thus avoiding fragile DNS-over-TCP (fragile due middleboxe",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-558832908,558832908,
EthanHeilman,2019-11-27 17:18:00,"@practicalswift Are there any BIPs around how seeders should behave? I don't think we should specify implementation details, but having a rule saying something like don't return 3000 IPs would be helpful.",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-559179057,559179057,
laanwj,2019-11-28 12:06:57,">  Are there any BIPs around how seeders should behave?\n\nThere's `doc/dnsseed-policy.md` which all DNS seed operators need to agree with (this is particular to this project, not bitcoin in general).\n",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-559468955,559468955,
dongcarl,2019-12-02 15:59:44,Some discussion from the other thread: https://github.com/bitcoin/bitcoin/issues/16070#issuecomment-559297746,https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-560458705,560458705,
dongcarl,2019-12-02 18:35:00,"@EthanHeilman yeah I think we can definitely do 32, one thing that I realized after reading TheBlueMatt's response (in the other thread :roll_eyes:) was that: because we set `ai_family = AF_UNSPEC`, we actually get back both the `A` _and_ `AAAA` records, and the total would be more than 32.\n\nSomething that I want to discuss is: after we get the names from `getaddrinfo`, should we randomize the",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-560523250,560523250,
sipa,2019-12-02 19:29:58,"FWIW, https://github.com/sipa/bitcoin-seeder responds with as many addresses as fit in a UDP packet.\nDNS supports a weird compression scheme that lets record names point to earlier records in the same packet, which IIRC bitcoin-seeder does not use. As a result, the number of addresses that fit actually depends on the length of the domain name. For seed.bitcoin.sipa.be it's 25 IPv4 addresses or 1",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-560545210,560545210,
dongcarl,2019-12-02 22:29:41,"Here's a branch that limits by family, which I think is more sane: https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2019-12-rework-seeding, note that if the seeders use domain name compression properly, they should be able to fit 16 IPv6 addresses in a single packet.",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-560760942,560760942,
EthanHeilman,2019-12-03 15:28:35,"@dongcarl \n>It also seems kind of weird that we're basically disadvantaging the IPv6 network by nature of DNS's 512 byte limit (which remains true even with randomization)... I'm not sure what's best here, but perhaps a limit per-family is what we want?\n\nI'm not sure I understand, but I maybe I missed something what is limiting DNS to 512 bytes? Neither Bitcoin's DNS local resolver nor the D",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-561218793,561218793,
sipa,2019-12-03 21:20:29,"@EthanHeilman Traditionally, DNS UDP responses are limited to 512 bytes. The EDNS0 extension increases that limit, but isn't implemented by my seeder.",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-561362074,561362074,
EthanHeilman,2019-12-03 23:08:30,"@sipa What benefit justifies making this code more complex?  The current code doesn't have any negative effects on seeders that use your implementation.\n\nI see it as a choice between:\n\n1. Setting `nMaxIPs=16` or `nMaxIPs=32` which would cause a preference for IPv4 over IPv6 in some circumstances, This might require writing additional code to remove this preference.\n\n2. and setting `nMa",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-561398508,561398508,
sipa,2019-12-04 00:35:24,"I have no opinion on the PR here, just giving potentially relevant information about my seeder.",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-561421061,561421061,
dongcarl,2019-12-04 16:50:01,"@EthanHeilman See my patch here: https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2019-12-rework-seeding\n\nIt doesn't radomize (so less complexity), but it _does_ pick 16 addresses from each address family (eliminating family bias). Once the seeders use domain name compression properly, they should be able to fit 16 IPv6 addresses in a single packet. Let me know if that seems reason",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-561732318,561732318,
EthanHeilman,2019-12-04 17:39:08,"@dongcarl \nI like your change of pulling seed IPs by family. I think that is a good improvement and I would support merging it. I was mostly responding to the earlier comments about randomization as a solution however this solves that problem nicely.\n\nIt is satisfying that someone could write a DNS seeder that uses DNS compression to fit 16 IPv4 and 16 IPv6 addresses in one DNS packet. I thi",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-561758975,561758975,
dongcarl,2019-12-04 18:27:31,"> I like your change of pulling seed IPs by family. I think that is a good improvement and I would support merging it. I was mostly responding to the earlier comments about randomization as a solution however this solves that problem nicely.\n\nGreat! I'll push it to this PR :-)\n\n> It is satisfying that someone could write a DNS seeder that uses DNS compression to fit 16 IPv4 and 16 IPv6 add",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-561777529,561777529,
DrahtBot,2019-12-16 15:51:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17754](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17754.html) (net: Don't allow resolving of std::string w",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-566119517,566119517,
naumenkogs,2020-06-09 14:50:24,"I tried to go through the discussion, but I might be missing some of the points.\nIs the goal here is to avoid getting all IPv6 records, because they all might be Sybils (since IPv6 are cheaper)?",https://github.com/bitcoin/bitcoin/pull/17602#issuecomment-641347878,641347878,
naumenkogs,2020-06-09 14:15:29,"In the second iteration of `addrinfo_family`, `vAdd` here would also contain records from the first iteration?",https://github.com/bitcoin/bitcoin/pull/17602#discussion_r437456975,437456975,src/net.cpp
