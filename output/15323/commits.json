[
  {
    "sha": "bb8ae2c41941d0776968f75cec0de89247e952dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjhhZTJjNDE5NDFkMDc3Njk2OGY3NWNlYzBkZTg5MjQ3ZTk1MmRj",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-02-01T22:09:36Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-03-22T09:31:20Z"
      },
      "message": "rpc: Expose g_is_mempool_loaded via getmempoolinfo and /rest/mempool/info.json\n\nAnd use it to fix a race condition in mempool_persist.py:\nhttps://travis-ci.org/Empact/bitcoin/jobs/487577243\n\nSince e.g. getrawmempool returns errors based on this status, this\nenables users to test it for readiness.",
      "tree": {
        "sha": "44f74e39cf877e0c7683360fc223fbb55a4b3f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44f74e39cf877e0c7683360fc223fbb55a4b3f5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb8ae2c41941d0776968f75cec0de89247e952dc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlyUq2kACgkQTYykuhgE\nCQbx6g//RZNNsK5GxcEQA8GWXcRXA5WM/E5rm6WI0DXTuNs+jFuVHzzALchgmlAr\n3Bv6J4mPzI14IQFLWbDztg4U+42RDYMBXe1fIgp7dRHhcysHRYcC+gvuOGEFhDk0\nNRF9QARE39WvWBBJvhNnWgabelS87wZbNdUGyGEgYpeTHcOHgAO+DxNKToJ1+Oya\ny6XzhpgqTnQxYCu6vrvviSjhzzOTWXU993Rk7BMCsqe2MRdYKS8RYlUU4M0bCGTn\nwNCOZPw0ra2mbaewrgW/7gzos4oLZtUVLr0OmF2RO1EXe5hsVLqugqLse94laipo\nGSMgLosgYHFW725NBz0BMl2/ql96JeQrMggTyzHT1fo9G46mn+scEE3JuAd37m86\nPBDoUxdQ3AEbClM01gdzvUWa4M5I8V/txjH0TsEShzYX40EaVQKil+rtcbtihK3+\nDq+fYoCiJY51DJ7KgsH0H7G3ww65gWgUMPMsiL0FQ4eaFz4rKXt3oNSliAm57C83\nbOa5vgVFRKRmMX+RbfP0L4kkQxKQNSNZtYy51QWTQa5g0zJ1jflu2AUE9CZDtJzP\nQmRJi+PFDhkBo4NXNgfR8BRWgOnyHPHkRT2BpUzg7ETUfdbQZb7F5QyZfSLW+nYN\nlvo1yhugmCogHgZG1ry9byTAgMpriUBjtTj6V/jOTYMlrcNrlHY=\n=U7+B\n-----END PGP SIGNATURE-----",
        "payload": "tree 44f74e39cf877e0c7683360fc223fbb55a4b3f5b\nparent 3515612e069e3730f173a08e60b99f96b174188d\nauthor Ben Woosley <ben.woosley@gmail.com> 1549058976 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1553247080 -0700\n\nrpc: Expose g_is_mempool_loaded via getmempoolinfo and /rest/mempool/info.json\n\nAnd use it to fix a race condition in mempool_persist.py:\nhttps://travis-ci.org/Empact/bitcoin/jobs/487577243\n\nSince e.g. getrawmempool returns errors based on this status, this\nenables users to test it for readiness.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ae2c41941d0776968f75cec0de89247e952dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8ae2c41941d0776968f75cec0de89247e952dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ae2c41941d0776968f75cec0de89247e952dc/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3515612e069e3730f173a08e60b99f96b174188d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3515612e069e3730f173a08e60b99f96b174188d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3515612e069e3730f173a08e60b99f96b174188d"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c96871ab5f3ef58e4170a9690fd74d1eb3721921",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8ae2c41941d0776968f75cec0de89247e952dc/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8ae2c41941d0776968f75cec0de89247e952dc/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=bb8ae2c41941d0776968f75cec0de89247e952dc",
        "patch": "@@ -101,6 +101,7 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n \n Returns various information about the TX mempool.\n Only supports JSON as output format.\n+* loaded : (boolean) if the mempool is fully loaded\n * size : (numeric) the number of transactions in the TX mempool\n * bytes : (numeric) size of the TX mempool in bytes\n * usage : (numeric) total TX mempool memory usage"
      },
      {
        "sha": "cebb331f3809160c4258a0cb49c6225297883159",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8ae2c41941d0776968f75cec0de89247e952dc/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8ae2c41941d0776968f75cec0de89247e952dc/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bb8ae2c41941d0776968f75cec0de89247e952dc",
        "patch": "@@ -1484,6 +1484,7 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n {\n     UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"loaded\", g_is_mempool_loaded);\n     ret.pushKV(\"size\", (int64_t)pool.size());\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n@@ -1504,6 +1505,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{\\n\"\n+            \"  \\\"loaded\\\": true|false         (boolean) True if the mempool is fully loaded\\n\"\n             \"  \\\"size\\\": xxxxx,               (numeric) Current tx count\\n\"\n             \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n             \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\""
      },
      {
        "sha": "bb0169ee528605511a4b879b1fae9ab3180bda20",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb8ae2c41941d0776968f75cec0de89247e952dc/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb8ae2c41941d0776968f75cec0de89247e952dc/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=bb8ae2c41941d0776968f75cec0de89247e952dc",
        "patch": "@@ -37,7 +37,6 @@\n \"\"\"\n from decimal import Decimal\n import os\n-import time\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, wait_until\n@@ -83,9 +82,10 @@ def run_test(self):\n         self.start_node(1, extra_args=[\"-persistmempool=0\"])\n         self.start_node(0)\n         self.start_node(2)\n-        # Give bitcoind a second to reload the mempool\n-        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5, timeout=1)\n-        wait_until(lambda: len(self.nodes[2].getrawmempool()) == 5, timeout=1)\n+        wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"], timeout=1)\n+        wait_until(lambda: self.nodes[2].getmempoolinfo()[\"loaded\"], timeout=1)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 5)\n+        assert_equal(len(self.nodes[2].getrawmempool()), 5)\n         # The others have loaded their mempool. If node_1 loaded anything, we'd probably notice by now:\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n@@ -100,14 +100,14 @@ def run_test(self):\n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n         self.start_node(0, extra_args=[\"-persistmempool=0\"])\n-        # Give bitcoind a second to reload the mempool\n-        time.sleep(1)\n+        wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         self.stop_nodes()\n         self.start_node(0)\n-        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n+        assert_equal(len(self.nodes[0].getrawmempool()), 5)\n \n         mempooldat0 = os.path.join(self.nodes[0].datadir, 'regtest', 'mempool.dat')\n         mempooldat1 = os.path.join(self.nodes[1].datadir, 'regtest', 'mempool.dat')\n@@ -120,7 +120,8 @@ def run_test(self):\n         os.rename(mempooldat0, mempooldat1)\n         self.stop_nodes()\n         self.start_node(1, extra_args=[])\n-        wait_until(lambda: len(self.nodes[1].getrawmempool()) == 5)\n+        wait_until(lambda: self.nodes[1].getmempoolinfo()[\"loaded\"])\n+        assert_equal(len(self.nodes[1].getrawmempool()), 5)\n \n         self.log.debug(\"Prevent bitcoind from writing mempool.dat to disk. Verify that `savemempool` fails\")\n         # to test the exception we are creating a tmp folder called mempool.dat.new"
      }
    ]
  },
  {
    "sha": "effe81f7503d2ca3c88cfdea687f9f997f353e0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmZlODFmNzUwM2QyY2EzYzg4Y2ZkZWE2ODdmOWY5OTdmMzUzZTBk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-03-07T14:54:44Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-03-22T09:31:25Z"
      },
      "message": "Move g_is_mempool_loaded into CTxMemPool::m_is_loaded\n\nSo the loaded state is explicitly mempool-specific.",
      "tree": {
        "sha": "ede6c685bd0d9e24fd58aab6d4faa69baa69781f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ede6c685bd0d9e24fd58aab6d4faa69baa69781f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/effe81f7503d2ca3c88cfdea687f9f997f353e0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlyUq20ACgkQTYykuhgE\nCQZfbQ//XFqgHQQfec0Jo6lQ58C6C/jmgYx2E//PKnETHnAb4ndSch62g6GBfhrg\nIJoXfRQtiK5FzQv9YN2GvPC8+Gq+1tgsEofRK1ZKH0YvF0ZDUgdJVhwH26wb47mB\nviCpYCBWwtnUNWehmClbWI5vAZ3Af6/+Eumc+MQhzprNK0b68odqIPn13E1wC94e\nHaTnAaJi+WvHcaK3uXNnoEc18REMP0Y7cI/x1zZKgbw+5/KRQco2E4Bp5dz0/cch\nOfA6LyanZ8BTtOROV4VRCzeo6ErGBZMxZo46vMI22FqjxZ7kPJ/BFxp3/Dhb2fRT\ngC8f8EKuCUOTJinS5HNN8EsUKm1jQV8u2M0T0SUpOf0oirVMzkIQpZcuaOl8ACh2\nsDmuZcf/3BmbulJbZQPezocyZT/tfmZOby0WrnBxhDNadzgQgFq52+rWcreFyv2+\ni70WFSXQnh0bAAIGCyX+xHZl7N14NSmVrM5cXux1z5ny9KwcoqOkK9Uoh4V0IhpC\nTuaPOnA+tOIGPv8pCKJafzsDxH7vSyI47SEy52GcYlC462XkSIvrIWaGPyWXuSel\nyoTj5Xv3aLh3F6XBp1NutPu0cRkigmiF/yUohlOQ7bUiNkrXCCvFzNCNSJUtt3Pi\ncUmc2AYkT+fY92nBUvtfmBiBnAavSuu71xB8bM0ccTCkLYCQtT0=\n=W6Ja\n-----END PGP SIGNATURE-----",
        "payload": "tree ede6c685bd0d9e24fd58aab6d4faa69baa69781f\nparent bb8ae2c41941d0776968f75cec0de89247e952dc\nauthor Ben Woosley <ben.woosley@gmail.com> 1551970484 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1553247085 -0700\n\nMove g_is_mempool_loaded into CTxMemPool::m_is_loaded\n\nSo the loaded state is explicitly mempool-specific.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effe81f7503d2ca3c88cfdea687f9f997f353e0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/effe81f7503d2ca3c88cfdea687f9f997f353e0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effe81f7503d2ca3c88cfdea687f9f997f353e0d/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb8ae2c41941d0776968f75cec0de89247e952dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb8ae2c41941d0776968f75cec0de89247e952dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb8ae2c41941d0776968f75cec0de89247e952dc"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 38,
      "deletions": 20
    },
    "files": [
      {
        "sha": "cf3be0556ebcd2f7cead20dff89fc4dfd5a4f89e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=effe81f7503d2ca3c88cfdea687f9f997f353e0d",
        "patch": "@@ -235,8 +235,8 @@ void Shutdown(InitInterfaces& interfaces)\n     g_banman.reset();\n     g_txindex.reset();\n \n-    if (g_is_mempool_loaded && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        DumpMempool();\n+    if (::mempool.IsLoaded() && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+        DumpMempool(::mempool);\n     }\n \n     if (fFeeEstimatesInitialized)\n@@ -725,9 +725,9 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n     } // End scope of CImportingNow\n     if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        LoadMempool();\n+        LoadMempool(::mempool);\n     }\n-    g_is_mempool_loaded = !ShutdownRequested();\n+    ::mempool.SetIsLoaded(!ShutdownRequested());\n }\n \n /** Sanity checks"
      },
      {
        "sha": "1c20feba127a0efc20869f8c359fef12c4bb0e4c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=effe81f7503d2ca3c88cfdea687f9f997f353e0d",
        "patch": "@@ -1484,7 +1484,7 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n {\n     UniValue ret(UniValue::VOBJ);\n-    ret.pushKV(\"loaded\", g_is_mempool_loaded);\n+    ret.pushKV(\"loaded\", pool.IsLoaded());\n     ret.pushKV(\"size\", (int64_t)pool.size());\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n@@ -2056,11 +2056,11 @@ static UniValue savemempool(const JSONRPCRequest& request)\n             }.ToString());\n     }\n \n-    if (!g_is_mempool_loaded) {\n+    if (!::mempool.IsLoaded()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"The mempool was not loaded yet\");\n     }\n \n-    if (!DumpMempool()) {\n+    if (!DumpMempool(::mempool)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Unable to dump mempool to disk\");\n     }\n "
      },
      {
        "sha": "8a414f5dec13ce9bff9ce995b640dcc25ebdfcfc",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=effe81f7503d2ca3c88cfdea687f9f997f353e0d",
        "patch": "@@ -1090,4 +1090,16 @@ void CTxMemPool::GetTransactionAncestry(const uint256& txid, size_t& ancestors,\n     }\n }\n \n+bool CTxMemPool::IsLoaded() const\n+{\n+    LOCK(cs);\n+    return m_is_loaded;\n+}\n+\n+void CTxMemPool::SetIsLoaded(bool loaded)\n+{\n+    LOCK(cs);\n+    m_is_loaded = loaded;\n+}\n+\n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "3ada47a28ecc47292378c8d199f210ba219d3b8b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=effe81f7503d2ca3c88cfdea687f9f997f353e0d",
        "patch": "@@ -455,6 +455,8 @@ class CTxMemPool\n \n     void trackPackageRemoved(const CFeeRate& rate) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    bool m_is_loaded GUARDED_BY(cs){false};\n+\n public:\n \n     static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; // public only for testing\n@@ -672,6 +674,12 @@ class CTxMemPool\n      */\n     void GetTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) const;\n \n+    /** @returns true if the mempool is fully loaded */\n+    bool IsLoaded() const;\n+\n+    /** Sets the current loaded state */\n+    void SetIsLoaded(bool loaded);\n+\n     unsigned long size() const\n     {\n         LOCK(cs);"
      },
      {
        "sha": "68dea5dc8d3a368685f2934038e4ef142b54b101",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=effe81f7503d2ca3c88cfdea687f9f997f353e0d",
        "patch": "@@ -251,7 +251,6 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n CBlockPolicyEstimator feeEstimator;\n CTxMemPool mempool(&feeEstimator);\n-std::atomic_bool g_is_mempool_loaded{false};\n \n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n@@ -4648,7 +4647,7 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n \n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n-bool LoadMempool()\n+bool LoadMempool(CTxMemPool& pool)\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n@@ -4683,12 +4682,12 @@ bool LoadMempool()\n \n             CAmount amountdelta = nFeeDelta;\n             if (amountdelta) {\n-                mempool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n+                pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n+                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nullptr /* pfMissingInputs */, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n                                            false /* test_accept */);\n                 if (state.IsValid()) {\n@@ -4698,7 +4697,7 @@ bool LoadMempool()\n                     // wallet(s) having loaded it while we were processing\n                     // mempool transactions; consider these as valid, instead of\n                     // failed, but mark them as 'already there'\n-                    if (mempool.exists(tx->GetHash())) {\n+                    if (pool.exists(tx->GetHash())) {\n                         ++already_there;\n                     } else {\n                         ++failed;\n@@ -4714,7 +4713,7 @@ bool LoadMempool()\n         file >> mapDeltas;\n \n         for (const auto& i : mapDeltas) {\n-            mempool.PrioritiseTransaction(i.first, i.second);\n+            pool.PrioritiseTransaction(i.first, i.second);\n         }\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n@@ -4725,7 +4724,7 @@ bool LoadMempool()\n     return true;\n }\n \n-bool DumpMempool()\n+bool DumpMempool(const CTxMemPool& pool)\n {\n     int64_t start = GetTimeMicros();\n \n@@ -4736,11 +4735,11 @@ bool DumpMempool()\n     LOCK(dump_mutex);\n \n     {\n-        LOCK(mempool.cs);\n-        for (const auto &i : mempool.mapDeltas) {\n+        LOCK(pool.cs);\n+        for (const auto &i : pool.mapDeltas) {\n             mapDeltas[i.first] = i.second;\n         }\n-        vinfo = mempool.infoAll();\n+        vinfo = pool.infoAll();\n     }\n \n     int64_t mid = GetTimeMicros();"
      },
      {
        "sha": "0ff6c619b504432bb4058c5a84dad56f62cda835",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effe81f7503d2ca3c88cfdea687f9f997f353e0d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=effe81f7503d2ca3c88cfdea687f9f997f353e0d",
        "patch": "@@ -149,7 +149,6 @@ extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n-extern std::atomic_bool g_is_mempool_loaded;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap& mapBlockIndex GUARDED_BY(cs_main);\n extern const std::string strMessageMagic;\n@@ -486,10 +485,10 @@ static const unsigned int REJECT_HIGHFEE = 0x100;\n CBlockFileInfo* GetBlockFileInfo(size_t n);\n \n /** Dump the mempool to disk. */\n-bool DumpMempool();\n+bool DumpMempool(const CTxMemPool& pool);\n \n /** Load the mempool from disk. */\n-bool LoadMempool();\n+bool LoadMempool(CTxMemPool& pool);\n \n //! Check whether the block associated with this index entry is pruned or not.\n inline bool IsBlockPruned(const CBlockIndex* pblockindex)"
      }
    ]
  }
]