[
  {
    "sha": "fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGZkNThiMGQyODk4YzFjMWU1ZDE5YTljYmQ1YzE0MjY1NzIyMGI1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-14T13:03:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-20T08:02:42Z"
      },
      "message": "[Wallet] Add support for flexible BIP32/HD keypath-scheme",
      "tree": {
        "sha": "271948f43aa54a1fb5747c97cfb1bec2683ef0ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/271948f43aa54a1fb5747c97cfb1bec2683ef0ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYCHojAAoJECnUvLZBb1Ps6eAQAKCk0pKIdl1RPzk3p1DEjWyH\nY9epowiUn+kNM5I+f5BwzgiHGTr3ML7A8mqi6/tSZATWCuLmWkt+hPcrcYWmwZ94\nkoRFb8zsQtEW3FybqOs/dBOOa6cwg2zkyBZGNOGu84Bq0PnM3CNIOK6ShGGq/zy/\nqkfHJPeEQL1sob1SYjZfQdMhggb44Tsrbg4fHBsXRSJLAAykVGasguz2/e+JUznX\nXpVc2djU5RyoS2zBClaccV6R8TZAbA3QNcKa23A1qmn6/rq7QYEa9YElUsT81hOF\nNK9SzvMNKFdSSqVTZbvsQgmXNSUun27y4Dor9bWiPbyoi+0QNa9lAuXOmQxBUar3\nb6t89HPK+uOsNk/b258ENvM2FoV+fqW96Tt3LPC0zLEjuRus+A6/SUBiTeKJnXKs\nDV6sFs0Y3bxqG8XknK8qPlST0UeY6cqHnov96ArEml+YyaZaStBBtKbsd46GjuKe\n+z+inxcequ6vj8DK2FRoW0M9ZshwpT4zcizDRxXu/dq2syddlnP9tEfCHAUel1qJ\nilz47KLpgQRlofYmj9o52AkSU26G9v7kML6llazPA37v2VGuUh8xEKpNBOF44T18\nW1F485hj+w8SeT1wvPt9KeV8HtL4lFo6id7ny0p1i11tP2xjo0oWIIdVw8lMmweL\n2ZbW2UkSkHSgcOyozWXO\n=SCz3\n-----END PGP SIGNATURE-----",
        "payload": "tree 271948f43aa54a1fb5747c97cfb1bec2683ef0ab\nparent c5875773561c249a079714f3b091a2577707eadf\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1473858222 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476950562 +0200\n\n[Wallet] Add support for flexible BIP32/HD keypath-scheme\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5875773561c249a079714f3b091a2577707eadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5875773561c249a079714f3b091a2577707eadf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5875773561c249a079714f3b091a2577707eadf"
      }
    ],
    "stats": {
      "total": 241,
      "additions": 210,
      "deletions": 31
    },
    "files": [
      {
        "sha": "69f5a2278965e39eac8d0d8eed41dac99e39b172",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
        "patch": "@@ -65,7 +65,6 @@ def run_test (self):\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n         self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n-        #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -82,6 +81,16 @@ def run_test (self):\n         #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n+        print(\"Testing flexible keypath scheme ...\")\n+        self.stop_node(1)\n+        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1] + ['-hdkeypath=m/44h/0h/0h/0/k'])\n+        hd_add = self.nodes[1].getnewaddress()\n+        hd_info = self.nodes[1].validateaddress(hd_add)\n+        assert_equal(hd_info[\"hdkeypath\"], \"m/44'/0'/0'/0/1\")\n+        hd_add = self.nodes[1].getnewaddress()\n+        hd_info = self.nodes[1].validateaddress(hd_add)\n+        assert_equal(hd_info[\"hdkeypath\"], \"m/44'/0'/0'/0/2\")\n \n if __name__ == '__main__':\n     WalletHDTest().main ()"
      },
      {
        "sha": "a50bebacf19ea796381dd7d88eefe2b0d5bd809b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
        "patch": "@@ -4,6 +4,8 @@\n \n #include \"wallet/wallet.h\"\n \n+#include \"base58.h\"\n+\n #include <set>\n #include <stdint.h>\n #include <utility>\n@@ -351,4 +353,66 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n }\n \n+BOOST_AUTO_TEST_CASE(hdKeypathDerive)\n+{\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/0'/0'/k\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/44'/0'/0'/0/k\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/k\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/k'\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/0'/0'/k'\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/0'/0'/k'/k\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/0'/0'/k/0\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/0'/0'/k/0'\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/0'/0'/k/k'/0'\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/0/0/0/0/0/0/0/k\"));\n+    BOOST_CHECK(CHDChain::IsValidKeypath(\"m/10000000000000000000000000000/0/0/0/0/0/0/k\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"k\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"km\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"m/\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"k\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"m/0'/0'/h'\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"m/a/h'\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"100\"));\n+    BOOST_CHECK(!CHDChain::IsValidKeypath(\"foo/bar\"));\n+\n+    CBitcoinExtKey b58ExtKey(\"xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi\");\n+    CExtKey masterKey = b58ExtKey.GetKey();\n+    CExtKey childKey;\n+\n+    std::string keypathOut;\n+    unsigned int childKeyIndex = 0;\n+    CWallet::DeriveKeyWithKeypathScheme(\"m/0'/0'/k\", childKeyIndex, masterKey, childKey, keypathOut);\n+    b58ExtKey.SetKey(childKey);\n+    BOOST_CHECK_EQUAL(b58ExtKey.ToString(), \"xprv9zRKyaX9hfbUb1NyrdSREPVyKPM3jwrvMT3MgU7PeKnMgk3BCu5roZAEC4DKtQpHrYqWtt8Aauggp8WbvbgHivyBqEocrfeGVg3sHyT9Njd\");\n+    childKeyIndex++;\n+\n+    CWallet::DeriveKeyWithKeypathScheme(\"m/0'/0'/k\", childKeyIndex, masterKey, childKey, keypathOut);\n+    b58ExtKey.SetKey(childKey);\n+    BOOST_CHECK_EQUAL(b58ExtKey.ToString(), \"xprv9zRKyaX9hfbUeCGAk7rSpTP3Jw4skGGiHKdCfwwFRyVkXV2m1S8k8kkiRNk5vZ9cLHaKqSk9onAxp6RcYAppnMJiPGbmDnf5swM1GyVc9L5\");\n+\n+    CWallet::DeriveKeyWithKeypathScheme(\"m/0'/0'/k'\", childKeyIndex, masterKey, childKey, keypathOut);\n+    b58ExtKey.SetKey(childKey);\n+    BOOST_CHECK_EQUAL(b58ExtKey.ToString(), \"xprv9zRKyaXJ3L8SpFYTwagt1HJLHZ2EAVBs5fSVhtW2hGBT4YFBpog7LXGmw5BJa4SuEWaa24cCyGPgPRXcAWokSygHRwPN1obzS2ENoSmaeJp\");\n+    BOOST_CHECK_EQUAL(keypathOut, \"m/0'/0'/1'\");\n+\n+    CWallet::DeriveKeyWithKeypathScheme(\"m/k'/0'/k'\", childKeyIndex, masterKey, childKey, keypathOut);\n+    b58ExtKey.SetKey(childKey);\n+    BOOST_CHECK_EQUAL(b58ExtKey.ToString(), \"xprv9yHsKJMYTB7HafxSD1G4Vn3knV6d8MsPyNsuvQfi1XdF6XGGB7wtGc55DfYgGyYSoeVAMoPtYaCMzNtz5NSMVHXNjHouKmvm9363y5wArkr\");\n+\n+    CWallet::DeriveKeyWithKeypathScheme(\"m/kh/0h/kh\", childKeyIndex, masterKey, childKey, keypathOut);\n+    b58ExtKey.SetKey(childKey);\n+    BOOST_CHECK_EQUAL(b58ExtKey.ToString(), \"xprv9yHsKJMYTB7HafxSD1G4Vn3knV6d8MsPyNsuvQfi1XdF6XGGB7wtGc55DfYgGyYSoeVAMoPtYaCMzNtz5NSMVHXNjHouKmvm9363y5wArkr\");\n+\n+    CWallet::DeriveKeyWithKeypathScheme(\"m/1000'/99'/10/10'\", -100, masterKey, childKey, keypathOut);\n+    b58ExtKey.SetKey(childKey);\n+    BOOST_CHECK_EQUAL(b58ExtKey.ToString(), \"xprvA1ETihdkTTyB8B3K3J2iEDpNRxgrqUHTcYq7XnTPWyxCQAxGHAdvb6q7HUjZm4r2N4PNMwbFn9ZvtP3fzpVdDBBnEbekjKxSDfVVtn1HrGg\");\n+    BOOST_CHECK_EQUAL(keypathOut, \"m/1000'/99'/10/10'\");\n+\n+    CWallet::DeriveKeyWithKeypathScheme(\"m/1000h/99h/10/10h\", -100, masterKey, childKey, keypathOut);\n+    b58ExtKey.SetKey(childKey);\n+    BOOST_CHECK_EQUAL(b58ExtKey.ToString(), \"xprvA1ETihdkTTyB8B3K3J2iEDpNRxgrqUHTcYq7XnTPWyxCQAxGHAdvb6q7HUjZm4r2N4PNMwbFn9ZvtP3fzpVdDBBnEbekjKxSDfVVtn1HrGg\");\n+    BOOST_CHECK_EQUAL(keypathOut, \"m/1000'/99'/10/10'\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "97887aaba59fba30f8a09251646541a8313c4015",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 27,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
        "patch": "@@ -44,6 +44,7 @@ bool fWalletRbf = DEFAULT_WALLET_RBF;\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n+const char * DEFAULT_HD_KEYPATH_SCHEME = \"m/0'/0'/k'\";\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n@@ -87,6 +88,38 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n     return &(it->second);\n }\n \n+bool CWallet::DeriveKeyWithKeypathScheme(const std::string keypath, unsigned int childCounter, const CExtKey& masterKey, CExtKey& childKey, std::string &keypathOut)\n+{\n+    // cancel at this point if the keypath is not valid, set the 'k' element as not required\n+    if (!CHDChain::IsValidKeypath(keypath, false))\n+        return false;\n+\n+    // directly use the pass-by-ref childKey during the loop\n+    childKey = masterKey;\n+    unsigned int childkeyIndex = 0;\n+    std::stringstream ss;\n+    ss.str(keypath.substr(2)); //remove m/\n+    std::string item;\n+    keypathOut = \"m\";\n+\n+    while (getline(ss, item, '/')) {\n+        bool hardened = (item.back() == 'h' || item.back() == '\\'');\n+        if (hardened)\n+            item = item.substr(0, item.size()-1);\n+\n+        // replace k with the childkey index counter\n+        if (item.size() == 1 && item[0] == 'k')\n+            childkeyIndex = childCounter;\n+        else\n+            childkeyIndex = std::stoi(item);\n+\n+        // derive the next level, eventually add the hardened bit\n+        childKey.Derive(childKey, childkeyIndex | (hardened ? BIP32_HARDENED_KEY_LIMIT : 0));\n+        keypathOut+=\"/\"+std::to_string(childkeyIndex)+(hardened ? \"'\" : \"\");\n+    }\n+    return true;\n+}\n+\n CPubKey CWallet::GenerateNewKey()\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n@@ -123,37 +156,25 @@ CPubKey CWallet::GenerateNewKey()\n \n void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret)\n {\n-    // for now we use a fixed keypath scheme of m/0'/0'/k\n-    CKey key;                      //master key seed (256bit)\n-    CExtKey masterKey;             //hd master key\n-    CExtKey accountKey;            //key at m/0'\n-    CExtKey externalChainChildKey; //key at m/0'/0'\n-    CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+    CKey key;            //master key seed (256bit)\n+    CExtKey masterKey;\n+    CExtKey childKey;\n \n     // try to get the master key\n     if (!GetKey(hdChain.masterKeyID, key))\n         throw std::runtime_error(std::string(__func__) + \": Master key not found\");\n \n     masterKey.SetMaster(key.begin(), key.size());\n-\n-    // derive m/0'\n-    // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n-    masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-    // derive m/0'/0'\n-    accountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-    // derive child key at next index, skip keys already known to the wallet\n+    // loop until we have derived a key that does not already exists in the wallet\n     do {\n-        // always derive hardened keys\n-        // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n-        // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n-        externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-        metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n-        metadata.hdMasterKeyID = hdChain.masterKeyID;\n-        // increment childkey index\n+        if (!DeriveKeyWithKeypathScheme(hdChain.keypathScheme, hdChain.nExternalChainCounter, masterKey, childKey, metadata.hdKeypath))\n+            throw std::runtime_error(std::string(__func__) + \": Deriving child key failed\");\n         hdChain.nExternalChainCounter++;\n-    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+    } while(HaveKey(childKey.key.GetPubKey().GetID()));\n+\n+    // set metadata\n+    metadata.hdMasterKeyID = hdChain.masterKeyID;\n     secret = childKey.key;\n \n     // update the chain model in the database\n@@ -639,7 +660,8 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         if (IsHDEnabled()) {\n             CKey key;\n             CPubKey masterPubKey = GenerateNewHDMasterKey();\n-            if (!SetHDMasterKey(masterPubKey))\n+            // set the new master seed\n+            if (!SetHDMasterKeyAndScheme(masterPubKey, hdChain.keypathScheme))\n                 return false;\n         }\n \n@@ -1220,8 +1242,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n     return pubkey;\n }\n \n-bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n+bool CWallet::SetHDMasterKeyAndScheme(const CPubKey& pubkey, const std::string& keypathScheme)\n {\n+    if (!CHDChain::IsValidKeypath(keypathScheme))\n+        throw std::runtime_error(std::string(__func__) + \": invalid BIP32 keypath-scheme\");\n+\n     LOCK(cs_wallet);\n \n     // ensure this wallet.dat can only be opened by clients supporting HD\n@@ -1232,6 +1257,7 @@ bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n     // as a hdchain object\n     CHDChain newHdChain;\n     newHdChain.masterKeyID = pubkey.GetID();\n+    newHdChain.keypathScheme = keypathScheme;\n     SetHDChain(newHdChain, false);\n \n     return true;\n@@ -1249,7 +1275,7 @@ bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n \n bool CWallet::IsHDEnabled()\n {\n-    return !hdChain.masterKeyID.IsNull();\n+    return hdChain.IsValid();\n }\n \n int64_t CWalletTx::GetTxTime() const\n@@ -3277,6 +3303,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n+    strUsage += HelpMessageOpt(\"-hdkeypath\", _(\"Keypath-scheme to use when deterministic key generation (HD) after BIP32 in enabled. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_HD_KEYPATH_SCHEME));\n     strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (default: %u)\"), DEFAULT_WALLET_RBF));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n@@ -3374,7 +3401,7 @@ bool CWallet::InitLoadWallet()\n         if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsHDEnabled()) {\n             // generate a new master key\n             CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n-            if (!walletInstance->SetHDMasterKey(masterPubKey))\n+            if (!walletInstance->SetHDMasterKeyAndScheme(masterPubKey, GetArg(\"-hdkeypath\", DEFAULT_HD_KEYPATH_SCHEME)))\n                 throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n         }\n         CPubKey newDefaultKey;\n@@ -3390,6 +3417,8 @@ bool CWallet::InitLoadWallet()\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD)\n             return InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n+        if (walletInstance->IsHDEnabled() && walletInstance->GetHDChain().keypathScheme != GetArg(\"-hdkeypath\", DEFAULT_HD_KEYPATH_SCHEME))\n+            return InitError(strprintf(_(\"Error loading %s: You can't change the keypath-scheme on an already existing HD wallet\"), walletFile));\n         if (!walletInstance->IsHDEnabled() && useHD)\n             return InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n     }"
      },
      {
        "sha": "f81a42daf332e03e16d768eae48582e441fa62cc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
        "patch": "@@ -927,8 +927,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Generates a new HD master key (will not be activated) */\n     CPubKey GenerateNewHDMasterKey();\n     \n-    /* Set the current HD master key (will reset the chain child index counters) */\n-    bool SetHDMasterKey(const CPubKey& key);\n+    /* Set the current HD master key and the BIP32 keypath-scheme (will reset the chain child index counters) */\n+    bool SetHDMasterKeyAndScheme(const CPubKey& key, const std::string& keypathScheme);\n+\n+    /* Static function to derive a child key after a given keypath and masterkey */\n+    static bool DeriveKeyWithKeypathScheme(const std::string keypathScheme, unsigned int childCounter, const CExtKey& masterKey, CExtKey& childKey, std::string &keypathOut);\n+\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "f05d7c889e4bd42b50258fd316653a8a179afec4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
        "patch": "@@ -24,6 +24,51 @@ using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n \n+//\n+// CHDChain\n+//\n+\n+bool CHDChain::IsValidKeypath(const std::string& keypathToCheck, bool requireK)\n+{\n+    // first element must always be 'm' (master key)\n+    if (keypathToCheck.size() < 3 ||\n+        keypathToCheck[0] != 'm' ||\n+        keypathToCheck[1] != '/')\n+        return false;\n+\n+    std::stringstream ss;\n+    std::string dummy = keypathToCheck.substr(2); //remove m/ from the beginning\n+    ss.str(dummy);\n+    std::string item;\n+\n+    bool kFound = false;\n+    while (getline(ss, item, '/')) {\n+        bool hardened = (item.back() == 'h' || item.back() == '\\'');\n+        if (hardened)\n+        {\n+            // don't allow a single h or ' as item (they are only meant to attribue a child-key-index)\n+            if (item.size() == 1)\n+                return false;\n+            item = item.substr(0, item.size()-1);\n+        }\n+\n+        // allow the k element multiple times\n+        if (item == \"k\")\n+        {\n+            kFound = true;\n+            continue;\n+        }\n+\n+        // must be a number at this point\n+        // we don't care about uint32 overflows\n+        if (!std::all_of(item.begin(), item.end(), ::isdigit))\n+            return false;\n+    }\n+\n+    // return true if requireK was not set or if the 'k' element was present\n+    return (requireK ? kFound : true);\n+}\n+\n //\n // CWalletDB\n //"
      },
      {
        "sha": "5e7ea2698f8a2f0a4708ac57df7c21a037f9a717",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=fdfd58b0d2898c1c1e5d19a9cbd5c142657220b5",
        "patch": "@@ -47,8 +47,11 @@ class CHDChain\n public:\n     uint32_t nExternalChainCounter;\n     CKeyID masterKeyID; //!< master key hash160\n+    std::string keypathScheme; //!< keypath scheme like \"m/44'/0'/0'/0/k\" or \"m/0'/0'/k\" (default)\n \n-    static const int CURRENT_VERSION = 1;\n+    static const int VERSION_BASIC=1;\n+    static const int VERSION_WITH_FLEX_KEYPATH=2;\n+    static const int CURRENT_VERSION = VERSION_WITH_FLEX_KEYPATH;\n     int nVersion;\n \n     CHDChain() { SetNull(); }\n@@ -59,13 +62,38 @@ class CHDChain\n         READWRITE(this->nVersion);\n         READWRITE(nExternalChainCounter);\n         READWRITE(masterKeyID);\n+\n+        if (this->nVersion >= VERSION_WITH_FLEX_KEYPATH)\n+            READWRITE(keypathScheme);\n     }\n \n     void SetNull()\n     {\n         nVersion = CHDChain::CURRENT_VERSION;\n         nExternalChainCounter = 0;\n         masterKeyID.SetNull();\n+        keypathScheme.clear();\n+    }\n+\n+    // check the validity of a BIP32 keypath\n+    // possible elements are\n+    //   'm' for master-key\n+    //   'k' for the child-key to derive (upcounting index)\n+    //   ' or 'h' to attribute a child index as hardened\n+    // must contain m/ at the beginning\n+    // examples:\n+    //   m/0'/0'/k (Bitcoin Core default)\n+    //   m/44'/0'/0'/0/k (BIP44)\n+    //   m/100'/0/100'/k (custom, sill valid even if PRIV-CKD follows PUB-CKD)\n+    //   m/100'/k/100'/k' (Valid. result in m/100'/0/100'/0', m/100'/1/100'/1', m/100'/2/100'/2', ...)\n+    //   m/100'/0/100/1 (valid if requireK is disabled)\n+    static bool IsValidKeypath(const std::string& keypathToCheck, bool requireK = true);\n+\n+    bool IsValid()\n+    {\n+        if (!masterKeyID.IsNull() && keypathScheme.size() > 0)\n+            return true;\n+        return false;\n     }\n };\n "
      }
    ]
  }
]