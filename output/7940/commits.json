[
  {
    "sha": "c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDE2M2ViNTEwOGY1NWJjNmVjNTBhZTA2MDc4MjhiNjFhOWQ2YzFj",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-04-22T22:19:33Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-04-25T15:22:18Z"
      },
      "message": "Simple fuzzing framework.",
      "tree": {
        "sha": "5350842518331a23fc50f6b7fe553c9497b3f81d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5350842518331a23fc50f6b7fe553c9497b3f81d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46880ed2fd961c29b5fe4f841c747951bc706912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46880ed2fd961c29b5fe4f841c747951bc706912",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46880ed2fd961c29b5fe4f841c747951bc706912"
      }
    ],
    "stats": {
      "total": 275,
      "additions": 274,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e9a455e2984dfa4c24f66ccbf5896198723b9dd5",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
        "patch": "@@ -5,6 +5,7 @@ src/bitcoin\n src/bitcoind\n src/bitcoin-cli\n src/bitcoin-tx\n+src/bitcoin-fuzzy\n src/test/test_bitcoin\n src/qt/test/test_bitcoin-qt\n "
      },
      {
        "sha": "fe9420d01e73f747a34e1b3586d2991970813eb5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
        "patch": "@@ -66,7 +66,7 @@ if BUILD_BITCOIND\n endif\n \n if BUILD_BITCOIN_UTILS\n-  bin_PROGRAMS += bitcoin-cli bitcoin-tx\n+  bin_PROGRAMS += bitcoin-cli bitcoin-tx bitcoin-fuzzy\n endif\n \n .PHONY: FORCE check-symbols check-security\n@@ -400,6 +400,24 @@ bitcoin_tx_LDADD = \\\n bitcoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n #\n \n+# bitcoin-fuzzy binary #\n+bitcoin_fuzzy_SOURCES = bitcoin-fuzzy.cpp\n+bitcoin_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_fuzzy_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+bitcoin_fuzzy_LDADD = \\\n+  $(LIBUNIVALUE) \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBSECP256K1)\n+\n+bitcoin_fuzzy_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+#\n+\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h"
      },
      {
        "sha": "ace858ae18d0aa8fa7ed76df07bc98b4cb0f24d9",
        "filename": "src/bitcoin-fuzzy.cpp",
        "status": "added",
        "additions": 254,
        "deletions": 0,
        "changes": 254,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c/src/bitcoin-fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c/src/bitcoin-fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-fuzzy.cpp?ref=c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
        "patch": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"consensus/merkle.h\"\n+#include \"primitives/block.h\"\n+#include \"script/script.h\"\n+#include \"addrman.h\"\n+#include \"chain.h\"\n+#include \"coins.h\"\n+#include \"compressor.h\"\n+#include \"net.h\"\n+#include \"protocol.h\"\n+#include \"streams.h\"\n+#include \"undo.h\"\n+#include \"version.h\"\n+\n+#include <stdint.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <vector>\n+\n+enum TEST_ID {\n+    CBLOCK_DESERIALIZE=0,\n+    CTRANSACTION_DESERIALIZE,\n+    CBLOCKLOCATOR_DESERIALIZE,\n+    CBLOCKMERKLEROOT,\n+    CADDRMAN_DESERIALIZE,\n+    CBLOCKHEADER_DESERIALIZE,\n+    CBANENTRY_DESERIALIZE,\n+    CTXUNDO_DESERIALIZE,\n+    CBLOCKUNDO_DESERIALIZE,\n+    CCOINS_DESERIALIZE,\n+    CNETADDR_DESERIALIZE,\n+    CSERVICE_DESERIALIZE,\n+    CMESSAGEHEADER_DESERIALIZE,\n+    CADDRESS_DESERIALIZE,\n+    CINV_DESERIALIZE,\n+    CBLOOMFILTER_DESERIALIZE,\n+    CDISKBLOCKINDEX_DESERIALIZE,\n+    CTXOUTCOMPRESSOR_DESERIALIZE,\n+    TEST_ID_END\n+};\n+\n+bool read_stdin(std::vector<char> &data) {\n+    char buffer[1024];\n+    ssize_t length=0;\n+    while((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n+        data.insert(data.end(), buffer, buffer+length);\n+        \n+        if (data.size() > (1<<20)) return false;\n+    }\n+    return length==0;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+    std::vector<char> buffer;\n+    if (!read_stdin(buffer)) return 0;\n+    \n+    if (buffer.size() < sizeof(uint32_t)) return 0;\n+    \n+    uint32_t test_id = 0xffffffff;\n+    memcpy(&test_id, &buffer[0], sizeof(uint32_t));\n+    buffer.erase(buffer.begin(), buffer.begin() + sizeof(uint32_t));\n+    \n+    if (test_id >= TEST_ID_END) return 0;\n+    \n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    try {\n+        ds.ReadVersion();\n+    } catch (const std::ios_base::failure& e) {\n+        return 0;\n+    }\n+    \n+    switch(test_id) {\n+        case CBLOCK_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlock block;\n+                ds >> block;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CTRANSACTION_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CTransaction tx;\n+                ds >> tx;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKLOCATOR_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlockLocator bl;\n+                ds >> bl;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKMERKLEROOT:\n+        {\n+            try\n+            {\n+                CBlock block;\n+                ds >> block;\n+                bool mutated;\n+                BlockMerkleRoot(block, &mutated);\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CADDRMAN_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CAddrMan am;\n+                ds >> am;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKHEADER_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlockHeader bh;\n+                ds >> bh;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBANENTRY_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBanEntry be;\n+                ds >> be;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CTXUNDO_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CTxUndo tu;\n+                ds >> tu;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKUNDO_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlockUndo bu;\n+                ds >> bu;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CCOINS_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CCoins block;\n+                ds >> block;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CNETADDR_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CNetAddr na;\n+                ds >> na;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CSERVICE_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CService s;\n+                ds >> s;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CMESSAGEHEADER_DESERIALIZE:\n+        {\n+            CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n+            try\n+            {\n+                CMessageHeader mh(pchMessageStart);\n+                ds >> mh;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CADDRESS_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CAddress a;\n+                ds >> a;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CINV_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CInv i;\n+                ds >> i;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOOMFILTER_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBloomFilter bf;\n+                ds >> bf;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CDISKBLOCKINDEX_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CDiskBlockIndex dbi;\n+                ds >> dbi;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CTXOUTCOMPRESSOR_DESERIALIZE:\n+        {\n+            CTxOut to;\n+            try\n+            {\n+                ds >> to;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            \n+            CTxOutCompressor toc(to);\n+            break;\n+        }\n+        default:\n+            return 0;\n+    }\n+    return 0;\n+}\n+"
      }
    ]
  },
  {
    "sha": "761d2e2817cfce706c532c073b2b16d0b9864782",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjFkMmUyODE3Y2ZjZTcwNmM1MzJjMDczYjJiMTZkMGI5ODY0Nzgy",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-04-24T14:22:22Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-04-25T15:22:18Z"
      },
      "message": "CMessageHeader.IsValid()",
      "tree": {
        "sha": "b95fa794d4e5eeffb4d3f355ce0dcabf93334bc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b95fa794d4e5eeffb4d3f355ce0dcabf93334bc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/761d2e2817cfce706c532c073b2b16d0b9864782",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/761d2e2817cfce706c532c073b2b16d0b9864782",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/761d2e2817cfce706c532c073b2b16d0b9864782",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/761d2e2817cfce706c532c073b2b16d0b9864782/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4163eb5108f55bc6ec50ae0607828b61a9d6c1c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ebe3cf9d13e5926dc204faf7069f5676c2a043c2",
        "filename": "src/bitcoin-fuzzy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/761d2e2817cfce706c532c073b2b16d0b9864782/src/bitcoin-fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/761d2e2817cfce706c532c073b2b16d0b9864782/src/bitcoin-fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-fuzzy.cpp?ref=761d2e2817cfce706c532c073b2b16d0b9864782",
        "patch": "@@ -196,6 +196,7 @@ int main(int argc, char **argv)\n             {\n                 CMessageHeader mh(pchMessageStart);\n                 ds >> mh;\n+                if (!mh.IsValid(pchMessageStart)) {return 0;}\n             } catch (const std::ios_base::failure& e) {return 0;}\n             break;\n         }"
      }
    ]
  }
]