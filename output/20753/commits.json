[
  {
    "sha": "13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2MxNWJlNTc1NDQ5MDhiNzA3YTllZTZlYTVmOTJiYmJkMTdmMGI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-23T12:06:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-03T18:09:40Z"
      },
      "message": "refactor: Pass reason out of policy checks\n\nThe policy rejection reasons should live in ./src/policy, just like the\nother policy rejection reasons (e.g. IsStandardTx)",
      "tree": {
        "sha": "da037045d07c21831c5a09b6cd8839b8a2883908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da037045d07c21831c5a09b6cd8839b8a2883908"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a2400b5755896b5e15d7a218ba6095160b845d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a2400b5755896b5e15d7a218ba6095160b845d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a2400b5755896b5e15d7a218ba6095160b845d5"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 44,
      "deletions": 19
    },
    "files": [
      {
        "sha": "2d4a5ff5ba1ed02175d34d14a9835bd3f464f8db",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -44,8 +44,9 @@ static void CCoinsCaching(benchmark::Bench& bench)\n \n     // Benchmark.\n     const CTransaction tx_1(t1);\n+    std::string reason_dummy;\n     bench.run([&] {\n-        bool success = AreInputsStandard(tx_1, coins, false);\n+        bool success = AreInputsStandard(tx_1, coins, reason_dummy, false);\n         assert(success);\n     });\n     ECC_Stop();"
      },
      {
        "sha": "05cdbc7e1f529c6f99121e3aed1915df3268fd8d",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -156,7 +156,7 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n  */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active)\n+static bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n@@ -192,8 +192,16 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs,\n \n     return true;\n }\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, bool taproot_active)\n+{\n+    if (!AreInputsStandard(tx, mapInputs, taproot_active)) {\n+        reason_out = \"bad-txns-nonstandard-inputs\";\n+        return false;\n+    }\n+    return true;\n+}\n \n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+static bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases are skipped\n@@ -276,6 +284,14 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     }\n     return true;\n }\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out)\n+{\n+    if (!IsWitnessStandard(tx, mapInputs)) {\n+        reason_out = \"bad-witness-nonstandard\";\n+        return false;\n+    }\n+    return true;\n+}\n \n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop)\n {"
      },
      {
        "sha": "c7462a77fea0e3cefb1c43a5db9114a262a224fe",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -108,15 +108,15 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n * @param[in] taproot_active  Whether or taproot consensus rules are active (used to decide whether spends of them are permitted)\n * @return True if all inputs (scriptSigs) use only standard transaction forms\n */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, bool taproot_active);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, bool taproot_active);\n /**\n * Check if the transaction is over standard P2WSH resources limit:\n * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n * These limits are adequate for multisignatures up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL.\n *\n * Also enforce a maximum stack item size limit and no annexes for tapscript spends.\n */\n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out);\n \n /** Compute the virtual transaction size (weight reinterpreted as bytes). */\n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop);"
      },
      {
        "sha": "d08fea81577130ef045cd15aaa828d1926a308bb",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -229,8 +229,9 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n             break;\n         }\n         case 1: {\n-            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, false);\n-            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, true);\n+            std::string reason_dummy;\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy, false);\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy, true);\n             break;\n         }\n         case 2: {\n@@ -287,7 +288,8 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n             break;\n         }\n         case 6: {\n-            (void)IsWitnessStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            std::string reason_dummy;\n+            (void)IsWitnessStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy);\n             break;\n         }\n         }"
      },
      {
        "sha": "82adc04315f4b9b2485bd84eacb0122c34b60f4c",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -95,9 +95,10 @@ FUZZ_TARGET_INIT(transaction, initialize_transaction)\n \n     CCoinsView coins_view;\n     const CCoinsViewCache coins_view_cache(&coins_view);\n-    (void)AreInputsStandard(tx, coins_view_cache, false);\n-    (void)AreInputsStandard(tx, coins_view_cache, true);\n-    (void)IsWitnessStandard(tx, coins_view_cache);\n+    std::string reason_dummy;\n+    (void)AreInputsStandard(tx, coins_view_cache, reason_dummy, false);\n+    (void)AreInputsStandard(tx, coins_view_cache, reason_dummy, true);\n+    (void)IsWitnessStandard(tx, coins_view_cache, reason_dummy);\n \n     UniValue u(UniValue::VOBJ);\n     // ValueFromAmount(i) not defined when i == std::numeric_limits<int64_t>::min()"
      },
      {
        "sha": "04e40128beb4a473190ecd79bfff3e96e1fe3855",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -263,6 +263,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n \n BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n+    std::string reason_dummy;\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -343,7 +344,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << std::vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n     txTo.vin[4].scriptSig << std::vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n-    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins, false));\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins, reason_dummy, false));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txTo), coins), 22U);\n \n@@ -356,7 +357,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << std::vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins, false));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins, reason_dummy, false));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd1), coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -368,7 +369,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << std::vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins, false));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins, reason_dummy, false));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd2), coins), 20U);\n }\n "
      },
      {
        "sha": "47d0cd6b6ad130f4d4e246efec4a884052e7cb47",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -305,7 +305,8 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins, false));\n+    std::string reason_dummy;\n+    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins, reason_dummy, false));\n }\n \n static void CreateCreditAndSpend(const FillableSigningProvider& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)"
      },
      {
        "sha": "367a3a6359383abe7c75a80a1850e8f4f623d8cb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c15be57544908b707a9ee6ea5f92bbbd17f0b9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "patch": "@@ -689,13 +689,16 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Check for non-standard pay-to-script-hash in inputs\n     const auto& params = args.m_chainparams.GetConsensus();\n     auto taproot_state = VersionBitsState(::ChainActive().Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n-        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n+    std::string reason_inputs;\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, reason_inputs, taproot_state == ThresholdState::ACTIVE)) {\n+        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, reason_inputs);\n     }\n \n     // Check for non-standard witnesses.\n-    if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view))\n-        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, \"bad-witness-nonstandard\");\n+    std::string reason_witness;\n+    if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view, reason_witness)) {\n+        return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, reason_witness);\n+    }\n \n     int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n "
      }
    ]
  },
  {
    "sha": "9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDcwMDQzYmEyMzA2NmY2OWJhYWJiYjZmMGQxMGUyYjZjY2ZjODYz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-22T17:44:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-03T18:09:40Z"
      },
      "message": "refactor: Pass ignore_rejects from RPCs to policy\n\nThis is a pure refactor to pass ignore_rejects from the\nsendrawtransaction and testmempoolaccept RPCs to policy.\n\nOnly default-constructed (empty) sets are passed and never used, so this\ndoesn't change behavior.",
      "tree": {
        "sha": "0662cdd704f87b5d9a52acd3f273a0818227189b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0662cdd704f87b5d9a52acd3f273a0818227189b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c15be57544908b707a9ee6ea5f92bbbd17f0b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13c15be57544908b707a9ee6ea5f92bbbd17f0b9"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 70,
      "deletions": 55
    },
    "files": [
      {
        "sha": "9691d07f2001032818a77eabca4de89d071192ce",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -49,7 +49,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n \n         for (const auto& txr : txs) {\n             TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n+            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, {} /* ignore_rejects */, false /* bypass_limits */)};\n             assert(ret);\n         }\n     }"
      },
      {
        "sha": "d2ad849065cd10173be114e9ed55724c7a9a6507",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -46,7 +46,7 @@ static void CCoinsCaching(benchmark::Bench& bench)\n     const CTransaction tx_1(t1);\n     std::string reason_dummy;\n     bench.run([&] {\n-        bool success = AreInputsStandard(tx_1, coins, reason_dummy, false);\n+        bool success = AreInputsStandard(tx_1, coins, reason_dummy, /* ignore_rejects */ {}, false);\n         assert(success);\n     });\n     ECC_Stop();"
      },
      {
        "sha": "20b7edfbb33116fa3ee683fc79b59bc6f4b8af38",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -1986,7 +1986,7 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         TxValidationState state;\n         std::list<CTransactionRef> removed_txn;\n \n-        if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n+        if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, {} /* ignore_rejects */, false /* bypass_limits */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < porphanTx->vout.size(); i++) {\n@@ -2992,7 +2992,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         TxValidationState state;\n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n+        if (AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, {} /* ignore_rejects */, false /* bypass_limits */)) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             // As this version of the transaction was acceptable, we can forget about any\n             // requests for it."
      },
      {
        "sha": "e39ef02240c2566314b1580ac914af553cada33c",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -545,7 +545,7 @@ class ChainImpl : public Chain\n         bool relay,\n         std::string& err_string) override\n     {\n-        const TransactionError err = BroadcastTransaction(m_node, tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n+        const TransactionError err = BroadcastTransaction(m_node, tx, err_string, /* rejects_ignore */ {}, max_tx_fee, relay, /*wait_callback*/ false);\n         // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures.\n         // Note: this will need to be updated if BroadcastTransactions() is updated to return other non-mempool failures\n         // that Chain clients do not need to know about."
      },
      {
        "sha": "dadf096db6189ebc73a06739e2da78509418a91d",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -26,7 +26,7 @@ static TransactionError HandleATMPError(const TxValidationState& state, std::str\n     }\n }\n \n-TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const IgnoreRejectsType& ignore_rejects, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n@@ -56,15 +56,15 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n             // fails here, return error immediately.\n             CAmount fee{0};\n             if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n+                                    nullptr /* plTxnReplaced */, ignore_rejects, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n                 return HandleATMPError(state, err_string);\n             } else if (fee > max_tx_fee) {\n                 return TransactionError::MAX_FEE_EXCEEDED;\n             }\n         }\n         // Try to submit the transaction to the mempool.\n         if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\n+                                nullptr /* plTxnReplaced */, ignore_rejects, false /* bypass_limits */)) {\n             return HandleATMPError(state, err_string);\n         }\n "
      },
      {
        "sha": "9bf51818abe392527d8e9b80da3441440cbec009",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <attributes.h>\n #include <policy/feerate.h>\n+#include <policy/policy.h> // For IgnoreRejectsType\n #include <primitives/transaction.h>\n #include <util/error.h>\n \n@@ -36,6 +37,6 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n  * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const IgnoreRejectsType& ignore_rejects, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "7b5f8f9e8005f42ffc1638d64466af44ee3c1902",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -73,7 +73,7 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\n     return true;\n }\n \n-bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason)\n+bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason, const IgnoreRejectsType& ignore_rejects)\n {\n     if (tx.nVersion > TX_MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n@@ -192,7 +192,7 @@ static bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& map\n \n     return true;\n }\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, bool taproot_active)\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, const IgnoreRejectsType& ignore_rejects, bool taproot_active)\n {\n     if (!AreInputsStandard(tx, mapInputs, taproot_active)) {\n         reason_out = \"bad-txns-nonstandard-inputs\";\n@@ -284,7 +284,7 @@ static bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& map\n     }\n     return true;\n }\n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out)\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, const IgnoreRejectsType& ignore_rejects)\n {\n     if (!IsWitnessStandard(tx, mapInputs)) {\n         reason_out = \"bad-witness-nonstandard\";"
      },
      {
        "sha": "759aa581de13b7608932fa9d7e485e80e033ca12",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -91,6 +91,7 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFee);\n \n bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType);\n \n+using IgnoreRejectsType = std::set<std::string>;\n \n // Changing the default transaction version requires a two step process: first\n // adapting relay policy by bumping TX_MAX_STANDARD_VERSION, and then later\n@@ -101,22 +102,22 @@ static constexpr decltype(CTransaction::nVersion) TX_MAX_STANDARD_VERSION{2};\n * Check for standard transaction types\n * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n */\n-bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason);\n+bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason, const IgnoreRejectsType& ignore_rejects);\n /**\n * Check for standard transaction types\n * @param[in] mapInputs       Map of previous transactions that have outputs we're spending\n * @param[in] taproot_active  Whether or taproot consensus rules are active (used to decide whether spends of them are permitted)\n * @return True if all inputs (scriptSigs) use only standard transaction forms\n */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, bool taproot_active);\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, const IgnoreRejectsType& ignore_rejects, bool taproot_active);\n /**\n * Check if the transaction is over standard P2WSH resources limit:\n * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n * These limits are adequate for multisignatures up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL.\n *\n * Also enforce a maximum stack item size limit and no annexes for tapscript spends.\n */\n-bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out);\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, const IgnoreRejectsType& ignore_rejects);\n \n /** Compute the virtual transaction size (weight reinterpreted as bytes). */\n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost, unsigned int bytes_per_sigop);"
      },
      {
        "sha": "4236d306b5fed1166c1c429503be1a0be26e69d6",
        "filename": "src/policy/settings.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/policy/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/policy/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/settings.h?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -17,9 +17,9 @@ extern CFeeRate dustRelayFee;\n extern unsigned int nBytesPerSigOp;\n extern bool fIsBareMultisigStd;\n \n-static inline bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+static inline bool IsStandardTx(const CTransaction& tx, std::string& reason, const IgnoreRejectsType& ignore_rejects)\n {\n-    return IsStandardTx(tx, ::fIsBareMultisigStd, ::dustRelayFee, reason);\n+    return IsStandardTx(tx, ::fIsBareMultisigStd, ::dustRelayFee, reason, ignore_rejects);\n }\n \n static inline int64_t GetVirtualTransactionSize(int64_t weight, int64_t sigop_cost)"
      },
      {
        "sha": "c36d0f48693fbb11cae38c675d230fa51eb200b6",
        "filename": "src/qt/psbtoperationsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/qt/psbtoperationsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/qt/psbtoperationsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/psbtoperationsdialog.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -102,7 +102,7 @@ void PSBTOperationsDialog::broadcastTransaction()\n     CTransactionRef tx = MakeTransactionRef(mtx);\n     std::string err_string;\n     TransactionError error = BroadcastTransaction(\n-        *m_client_model->node().context(), tx, err_string, DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK(), /* relay */ true, /* await_callback */ false);\n+        *m_client_model->node().context(), tx, err_string, /* ignore_rejects */ {}, DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK(), /* relay */ true, /* await_callback */ false);\n \n     if (error == TransactionError::OK) {\n         showStatus(tr(\"Transaction broadcast successfully! Transaction ID: %1\")"
      },
      {
        "sha": "24e9af6ce9613d2f064c426fa20fa1180d1e1db1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -856,13 +856,15 @@ static RPCHelpMan sendrawtransaction()\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n+    IgnoreRejectsType ignore_rejects;\n+\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n     NodeContext& node = EnsureNodeContext(request.context);\n-    const TransactionError err = BroadcastTransaction(node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n+    const TransactionError err = BroadcastTransaction(node, tx, err_string, ignore_rejects, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n@@ -936,6 +938,8 @@ static RPCHelpMan testmempoolaccept()\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n+    IgnoreRejectsType ignore_rejects;\n+\n     CTxMemPool& mempool = EnsureMemPool(request.context);\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n@@ -950,7 +954,7 @@ static RPCHelpMan testmempoolaccept()\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+                                             nullptr /* plTxnReplaced */, ignore_rejects, false /* bypass_limits */, /* test_accept */ true, &fee);\n     }\n \n     // Check that fee does not exceed maximum fee"
      },
      {
        "sha": "7bcd6b65f59e0ed0d19c53e2a5e401153c0cdc4a",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -230,8 +230,8 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n         }\n         case 1: {\n             std::string reason_dummy;\n-            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy, false);\n-            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy, true);\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy, {}, false);\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy, {}, true);\n             break;\n         }\n         case 2: {\n@@ -289,7 +289,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n         }\n         case 6: {\n             std::string reason_dummy;\n-            (void)IsWitnessStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy);\n+            (void)IsWitnessStandard(CTransaction{random_mutable_transaction}, coins_view_cache, reason_dummy, {});\n             break;\n         }\n         }"
      },
      {
        "sha": "5f14148efd1cdf788b9364cb1532cdcdc7f0b4c8",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -66,8 +66,8 @@ FUZZ_TARGET_INIT(transaction, initialize_transaction)\n \n     const CFeeRate dust_relay_fee{DUST_RELAY_TX_FEE};\n     std::string reason;\n-    const bool is_standard_with_permit_bare_multisig = IsStandardTx(tx, /* permit_bare_multisig= */ true, dust_relay_fee, reason);\n-    const bool is_standard_without_permit_bare_multisig = IsStandardTx(tx, /* permit_bare_multisig= */ false, dust_relay_fee, reason);\n+    const bool is_standard_with_permit_bare_multisig = IsStandardTx(tx, /* permit_bare_multisig= */ true, dust_relay_fee, reason, {});\n+    const bool is_standard_without_permit_bare_multisig = IsStandardTx(tx, /* permit_bare_multisig= */ false, dust_relay_fee, reason, {});\n     if (is_standard_without_permit_bare_multisig) {\n         assert(is_standard_with_permit_bare_multisig);\n     }\n@@ -89,16 +89,16 @@ FUZZ_TARGET_INIT(transaction, initialize_transaction)\n     (void)GetTransactionWeight(tx);\n     (void)GetVirtualTransactionSize(tx);\n     (void)IsFinalTx(tx, /* nBlockHeight= */ 1024, /* nBlockTime= */ 1024);\n-    (void)IsStandardTx(tx, reason);\n+    (void)IsStandardTx(tx, reason, {});\n     (void)RecursiveDynamicUsage(tx);\n     (void)SignalsOptInRBF(tx);\n \n     CCoinsView coins_view;\n     const CCoinsViewCache coins_view_cache(&coins_view);\n     std::string reason_dummy;\n-    (void)AreInputsStandard(tx, coins_view_cache, reason_dummy, false);\n-    (void)AreInputsStandard(tx, coins_view_cache, reason_dummy, true);\n-    (void)IsWitnessStandard(tx, coins_view_cache, reason_dummy);\n+    (void)AreInputsStandard(tx, coins_view_cache, reason_dummy, {}, false);\n+    (void)AreInputsStandard(tx, coins_view_cache, reason_dummy, {}, true);\n+    (void)IsWitnessStandard(tx, coins_view_cache, reason_dummy, {});\n \n     UniValue u(UniValue::VOBJ);\n     // ValueFromAmount(i) not defined when i == std::numeric_limits<int64_t>::min()"
      },
      {
        "sha": "6a79f11de6dde432ccfd2e5270c9c86f3a59ad79",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -87,7 +87,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(CTransaction(txFrom), reason));\n+    BOOST_CHECK(IsStandardTx(CTransaction(txFrom), reason, {}));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -182,7 +182,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(CTransaction(txFrom), reason));\n+    BOOST_CHECK(IsStandardTx(CTransaction(txFrom), reason, {}));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -197,7 +197,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, CTransaction(txFrom), txTo[i], 0, SIGHASH_ALL), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(CTransaction(txTo[i]), reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(IsStandardTx(CTransaction(txTo[i]), reason, {}), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n \n@@ -344,7 +344,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << std::vector<unsigned char>(oneAndTwo.begin(), oneAndTwo.end());\n     txTo.vin[4].scriptSig << std::vector<unsigned char>(fifteenSigops.begin(), fifteenSigops.end());\n \n-    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins, reason_dummy, false));\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(txTo), coins, reason_dummy, {}, false));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txTo), coins), 22U);\n \n@@ -357,7 +357,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << std::vector<unsigned char>(sixteenSigops.begin(), sixteenSigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins, reason_dummy, false));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd1), coins, reason_dummy, {}, false));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd1), coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -369,7 +369,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << std::vector<unsigned char>(twentySigops.begin(), twentySigops.end());\n \n-    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins, reason_dummy, false));\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToNonStd2), coins, reason_dummy, {}, false));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(CTransaction(txToNonStd2), coins), 20U);\n }\n "
      },
      {
        "sha": "6fc556d6ee5482cfddb2e41c256a68df2543a746",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -302,11 +302,11 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vin[2].prevout.n = 1;\n     t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n     t1.vout.resize(2);\n-    t1.vout[0].nValue = 90*CENT;\n+    t1.vout[0].nValue = 90 * CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n     std::string reason_dummy;\n-    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins, reason_dummy, false));\n+    BOOST_CHECK(AreInputsStandard(CTransaction(t1), coins, reason_dummy, {}, false));\n }\n \n static void CreateCreditAndSpend(const FillableSigningProvider& keystore, const CScript& outscript, CTransactionRef& output, CMutableTransaction& input, bool success = true)\n@@ -670,6 +670,10 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\n \n+    const auto IsStandardTx = [](const CTransaction& tx, std::string& reason) {\n+        return ::IsStandardTx(tx, reason, {});\n+    };\n+\n     std::string reason;\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n "
      },
      {
        "sha": "bfa96d351c1b726b55a22b9ee413dc8b894d0720",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -37,10 +37,10 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     unsigned int initialPoolSize = m_node.mempool->size();\n \n     BOOST_CHECK_EQUAL(\n-            false,\n-            AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n-                nullptr /* plTxnReplaced */,\n-                true /* bypass_limits */));\n+        false,\n+        AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n+                           nullptr /* plTxnReplaced */, {} /* ignore_rejects */,\n+                           true /* bypass_limits */));\n \n     // Check that the transaction hasn't been added to mempool.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);"
      },
      {
        "sha": "3c91a2f988eb6c7331e0882e59db8cfabe05c42b",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -30,7 +30,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n         TxValidationState state;\n         return AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(tx),\n-            nullptr /* plTxnReplaced */, true /* bypass_limits */);\n+                                  nullptr /* plTxnReplaced */, {} /* ignore_rejects */, true /* bypass_limits */);\n     };\n \n     // Create a double-spend of mature coinbase txn:"
      },
      {
        "sha": "33e2f9cbf87662150bd5c2c91c7ccb9d21c9d2ba",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -291,6 +291,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n                     state,\n                     tx,\n                     &plTxnReplaced,\n+                    /* ignore_rejects */ {},\n                     /* bypass_limits */ false));\n             }\n         }"
      },
      {
        "sha": "444b50a34c8c6e7ed375623508c1eadfd70e469e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -381,7 +381,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n         TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n             !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+                                nullptr /* plTxnReplaced */, {} /* ignore_rejects */, true /* bypass_limits */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n             mempool.removeRecursive(**it, MemPoolRemovalReason::REORG);\n@@ -459,6 +459,7 @@ class MemPoolAccept\n         TxValidationState &m_state;\n         const int64_t m_accept_time;\n         std::list<CTransactionRef>* m_replaced_transactions;\n+        const IgnoreRejectsType m_ignore_rejects;\n         const bool m_bypass_limits;\n         /*\n          * Return any outpoints which were not previously present in the coins\n@@ -554,6 +555,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     TxValidationState &state = args.m_state;\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n+    const auto& ignore_rejects = args.m_ignore_rejects;\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n@@ -576,8 +578,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     std::string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (fRequireStandard && !IsStandardTx(tx, reason, ignore_rejects)) {\n         return state.Invalid(TxValidationResult::TX_NOT_STANDARD, reason);\n+    }\n \n     // Do not work on transactions that are too small.\n     // A transaction with 1 segwit input and 1 P2WPHK output has non-witness size of 82 bytes.\n@@ -690,13 +693,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     const auto& params = args.m_chainparams.GetConsensus();\n     auto taproot_state = VersionBitsState(::ChainActive().Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n     std::string reason_inputs;\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view, reason_inputs, taproot_state == ThresholdState::ACTIVE)) {\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, reason_inputs, ignore_rejects, taproot_state == ThresholdState::ACTIVE)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, reason_inputs);\n     }\n \n     // Check for non-standard witnesses.\n     std::string reason_witness;\n-    if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view, reason_witness)) {\n+    if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, m_view, reason_witness, ignore_rejects)) {\n         return state.Invalid(TxValidationResult::TX_WITNESS_MUTATED, reason_witness);\n     }\n \n@@ -1056,15 +1059,15 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n     return true;\n }\n \n-} // anon namespace\n+} // namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n+                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced, const IgnoreRejectsType& ignore_rejects,\n                         bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n+    MemPoolAccept::ATMPArgs args{chainparams, state, nAcceptTime, plTxnReplaced, ignore_rejects, bypass_limits, coins_to_uncache, test_accept, fee_out};\n     bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n@@ -1082,11 +1085,11 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n+                        std::list<CTransactionRef>* plTxnReplaced, const IgnoreRejectsType& ignore_rejects,\n                         bool bypass_limits, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, ignore_rejects, bypass_limits, test_accept, fee_out);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n@@ -5010,7 +5013,7 @@ bool LoadMempool(CTxMemPool& pool)\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */,\n+                                           nullptr /* plTxnReplaced */, /* ignore_rejects */ {}, false /* bypass_limits */,\n                                            false /* test_accept */);\n                 if (state.IsValid()) {\n                     ++count;"
      },
      {
        "sha": "6328cd808cc58936b712a605169363bfbec2a143",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d70043ba23066f69baabbb6f0d10e2b6ccfc863/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "patch": "@@ -16,13 +16,14 @@\n #include <fs.h>\n #include <optional.h>\n #include <policy/feerate.h>\n+#include <policy/policy.h> // For IgnoreRejectsType\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n+#include <serialize.h>\n #include <sync.h>\n-#include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n+#include <txmempool.h> // For CTxMemPool::cs\n #include <versionbits.h>\n-#include <serialize.h>\n \n #include <atomic>\n #include <map>\n@@ -198,7 +199,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool\n  * @param[out] fee_out optional argument to return tx fee to the caller **/\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n+                        std::list<CTransactionRef>* plTxnReplaced, const IgnoreRejectsType& ignore_rejects,\n                         bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */"
      }
    ]
  },
  {
    "sha": "af9b76a3d41b2520fa38f34b6c443a429dacd225",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjliNzZhM2Q0MWIyNTIwZmEzOGYzNGI2YzQ0M2E0MjlkYWNkMjI1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-22T20:01:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-03T18:09:40Z"
      },
      "message": "rpc: Allow to ignore specific reject reasons",
      "tree": {
        "sha": "1d4fb3c095b598749c27105b25c0138fdedf3b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d4fb3c095b598749c27105b25c0138fdedf3b37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af9b76a3d41b2520fa38f34b6c443a429dacd225",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9b76a3d41b2520fa38f34b6c443a429dacd225",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af9b76a3d41b2520fa38f34b6c443a429dacd225",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9b76a3d41b2520fa38f34b6c443a429dacd225/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d70043ba23066f69baabbb6f0d10e2b6ccfc863",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d70043ba23066f69baabbb6f0d10e2b6ccfc863"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 54,
      "deletions": 24
    },
    "files": [
      {
        "sha": "e0db0b82ea4a2d3d15d037feb932b54b5fa5c1fc",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 22,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9b76a3d41b2520fa38f34b6c443a429dacd225/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9b76a3d41b2520fa38f34b6c443a429dacd225/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=af9b76a3d41b2520fa38f34b6c443a429dacd225",
        "patch": "@@ -7,10 +7,22 @@\n \n #include <policy/policy.h>\n \n-#include <consensus/validation.h>\n #include <coins.h>\n+#include <consensus/validation.h>\n #include <span.h>\n \n+bool IsReject(std::string& reason_out, const std::string& reason_in, const IgnoreRejectsType& ignore_rejects)\n+{\n+    if (ignore_rejects.count(reason_in)) return false;\n+    reason_out = reason_in;\n+    return true;\n+}\n+\n+#define MAYBE_REJECT(reason_out, reason_in, ignore_rejects)                \\\n+    do {                                                                   \\\n+        if (IsReject(reason_out, reason_in, ignore_rejects)) return false; \\\n+    } while (false)\n+\n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n {\n     // \"Dust\" is defined in terms of dustRelayFee,\n@@ -76,8 +88,7 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\n bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason, const IgnoreRejectsType& ignore_rejects)\n {\n     if (tx.nVersion > TX_MAX_STANDARD_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n+        MAYBE_REJECT(reason, \"version\", ignore_rejects);\n     }\n \n     // Extremely large transactions with lots of inputs can cost the network\n@@ -86,8 +97,7 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n     // to MAX_STANDARD_TX_WEIGHT mitigates CPU exhaustion attacks.\n     unsigned int sz = GetTransactionWeight(tx);\n     if (sz > MAX_STANDARD_TX_WEIGHT) {\n-        reason = \"tx-size\";\n-        return false;\n+        MAYBE_REJECT(reason, \"tx-size\", ignore_rejects);\n     }\n \n     for (const CTxIn& txin : tx.vin)\n@@ -101,38 +111,33 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n         // 20-of-20 CHECKMULTISIG scriptPubKey, though such a scriptPubKey\n         // is not considered standard.\n         if (txin.scriptSig.size() > MAX_STANDARD_SCRIPTSIG_SIZE) {\n-            reason = \"scriptsig-size\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptsig-size\", ignore_rejects);\n         }\n         if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptsig-not-pushonly\", ignore_rejects);\n         }\n     }\n \n     unsigned int nDataOut = 0;\n     TxoutType whichType;\n     for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptpubkey\", ignore_rejects);\n         }\n \n         if (whichType == TxoutType::NULL_DATA)\n             nDataOut++;\n         else if ((whichType == TxoutType::MULTISIG) && (!permit_bare_multisig)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (IsDust(txout, dust_relay_fee)) {\n-            reason = \"dust\";\n-            return false;\n+            MAYBE_REJECT(reason, \"bare-multisig\", ignore_rejects);\n+        }\n+        if (IsDust(txout, dust_relay_fee)) {\n+            MAYBE_REJECT(reason, \"dust\", ignore_rejects);\n         }\n     }\n \n     // only one OP_RETURN txout is permitted\n     if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n+        MAYBE_REJECT(reason, \"multi-op-return\", ignore_rejects);\n     }\n \n     return true;\n@@ -195,8 +200,7 @@ static bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& map\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, const IgnoreRejectsType& ignore_rejects, bool taproot_active)\n {\n     if (!AreInputsStandard(tx, mapInputs, taproot_active)) {\n-        reason_out = \"bad-txns-nonstandard-inputs\";\n-        return false;\n+        MAYBE_REJECT(reason_out, \"bad-txns-nonstandard-inputs\", ignore_rejects);\n     }\n     return true;\n }\n@@ -287,8 +291,7 @@ static bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& map\n bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs, std::string& reason_out, const IgnoreRejectsType& ignore_rejects)\n {\n     if (!IsWitnessStandard(tx, mapInputs)) {\n-        reason_out = \"bad-witness-nonstandard\";\n-        return false;\n+        MAYBE_REJECT(reason_out, \"bad-witness-nonstandard\", ignore_rejects);\n     }\n     return true;\n }"
      },
      {
        "sha": "570a80f0ac37dd2277f79b595eb1a2da4c9ebe4e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 2,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9b76a3d41b2520fa38f34b6c443a429dacd225/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9b76a3d41b2520fa38f34b6c443a429dacd225/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=af9b76a3d41b2520fa38f34b6c443a429dacd225",
        "patch": "@@ -812,6 +812,15 @@ static RPCHelpMan signrawtransactionwithkey()\n     };\n }\n \n+const static std::string DOC_IGNORE_REJECTS{\n+    \"Specific reject reasons of a previous failing call to ignore.\\n\"\n+    \"Be aware of the following:\\n\"\n+    \"* This is not a stable interface. Policy in general and specific reject reasons might change from one version to another.\\n\"\n+    \"* Only some of the reject reasons that are returned can be ignored.\\n\"\n+    \"* A transaction with an ignored reject reason might not propagate on the network.\\n\"\n+    \"* As a miner, be aware that nonstandard transactions sometimes become consensus-invalid by future softforks that this software might not be aware of.\\n\"\n+    \"Only use this setting if you understand what it does.\"};\n+\n static RPCHelpMan sendrawtransaction()\n {\n     return RPCHelpMan{\"sendrawtransaction\",\n@@ -825,6 +834,10 @@ static RPCHelpMan sendrawtransaction()\n                     {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()),\n                         \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT +\n                             \"/kB.\\nSet to 0 to accept any fee rate.\\n\"},\n+                    {\"ignore_rejects\", RPCArg::Type::ARR, /* default */ \"empty\", DOC_IGNORE_REJECTS,\n+                    {\n+                        {\"reason\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A reject reason of a previous failing call\"},\n+                    }},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR_HEX, \"\", \"The transaction hash in hex\"\n@@ -857,6 +870,11 @@ static RPCHelpMan sendrawtransaction()\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     IgnoreRejectsType ignore_rejects;\n+    if (!request.params[2].isNull()) {\n+        for (const auto& ignore : request.params[2].get_array().getValues()) {\n+            ignore_rejects.insert(ignore.get_str());\n+        }\n+    }\n \n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n     CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n@@ -888,6 +906,10 @@ static RPCHelpMan testmempoolaccept()\n                         },\n                         },\n                     {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n+                    {\"ignore_rejects\", RPCArg::Type::ARR, /* default */ \"empty\", DOC_IGNORE_REJECTS,\n+                    {\n+                        {\"reason\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A reject reason of a previous failing call\"},\n+                    }},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -939,6 +961,11 @@ static RPCHelpMan testmempoolaccept()\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     IgnoreRejectsType ignore_rejects;\n+    if (!request.params[2].isNull()) {\n+        for (const auto& ignore : request.params[2].get_array().getValues()) {\n+            ignore_rejects.insert(ignore.get_str());\n+        }\n+    }\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n     int64_t virtual_size = GetVirtualTransactionSize(*tx);\n@@ -1868,10 +1895,10 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n     { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"maxfeerate\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"maxfeerate\",\"ignore_rejects\"} },\n     { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n     { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n-    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"maxfeerate\"} },\n+    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"maxfeerate\",\"ignore_rejects\"} },\n     { \"rawtransactions\",    \"decodepsbt\",                   &decodepsbt,                {\"psbt\"} },\n     { \"rawtransactions\",    \"combinepsbt\",                  &combinepsbt,               {\"txs\"} },\n     { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },"
      }
    ]
  },
  {
    "sha": "28760050fa9ac87e4ad58f3179304c4bc164a5ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODc2MDA1MGZhOWFjODdlNGFkNThmMzE3OTMwNGM0YmMxNjRhNWVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-23T13:44:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-03T18:09:40Z"
      },
      "message": "test: Replace acceptnonstdtxn=1 with specific ignore in wallet_basic",
      "tree": {
        "sha": "ba48320b21bf1a95e2368e9b99b706cc582814da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba48320b21bf1a95e2368e9b99b706cc582814da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28760050fa9ac87e4ad58f3179304c4bc164a5ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28760050fa9ac87e4ad58f3179304c4bc164a5ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28760050fa9ac87e4ad58f3179304c4bc164a5ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28760050fa9ac87e4ad58f3179304c4bc164a5ee/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af9b76a3d41b2520fa38f34b6c443a429dacd225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9b76a3d41b2520fa38f34b6c443a429dacd225",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af9b76a3d41b2520fa38f34b6c443a429dacd225"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 5,
      "deletions": 18
    },
    "files": [
      {
        "sha": "29bae2d4bc3a03d505d0b039f681cc272a1e357e",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28760050fa9ac87e4ad58f3179304c4bc164a5ee/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28760050fa9ac87e4ad58f3179304c4bc164a5ee/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=28760050fa9ac87e4ad58f3179304c4bc164a5ee",
        "patch": "@@ -21,9 +21,6 @@\n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-        ]] * self.num_nodes\n         self.setup_clean_chain = True\n         self.supports_cli = False\n \n@@ -281,32 +278,22 @@ def run_test(self):\n         self.connect_nodes(0, 3)\n         self.sync_all()\n \n-        # check if we can list zero value tx as available coins\n-        # 1. create raw_tx\n-        # 2. hex-changed one output to 0.0\n-        # 3. sign and send\n-        # 4. check if recipient (node0) can list the zero value tx\n+        self.log.info('check if we can list zero value tx as available coins')\n         usp = self.nodes[1].listunspent(query_options={'minimumAmount': '49.998'})[0]\n         inputs = [{\"txid\": usp['txid'], \"vout\": usp['vout']}]\n-        outputs = {self.nodes[1].getnewaddress(): 49.998, self.nodes[0].getnewaddress(): 11.11}\n+        outputs = {self.nodes[1].getnewaddress(): 49.998, self.nodes[0].getnewaddress(): 0}\n \n-        raw_tx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\")  # replace 11.11 with 0.0 (int32)\n+        raw_tx = self.nodes[1].createrawtransaction(inputs, outputs)\n         signed_raw_tx = self.nodes[1].signrawtransactionwithwallet(raw_tx)\n         decoded_raw_tx = self.nodes[1].decoderawtransaction(signed_raw_tx['hex'])\n         zero_value_txid = decoded_raw_tx['txid']\n-        self.nodes[1].sendrawtransaction(signed_raw_tx['hex'])\n+        self.nodes[1].sendrawtransaction(hexstring=signed_raw_tx['hex'], ignore_rejects=['dust'])\n \n-        self.sync_all()\n         self.nodes[1].generate(1)  # mine a block\n         self.sync_all()\n \n         unspent_txs = self.nodes[0].listunspent()  # zero value tx must be in listunspents output\n-        found = False\n-        for uTx in unspent_txs:\n-            if uTx['txid'] == zero_value_txid:\n-                found = True\n-                assert_equal(uTx['amount'], Decimal('0'))\n-        assert found\n+        assert_equal(next(uTx for uTx in unspent_txs if uTx['txid'] == zero_value_txid)['amount'], Decimal('0'))\n \n         self.log.info(\"Test -walletbroadcast\")\n         self.stop_nodes()"
      }
    ]
  }
]