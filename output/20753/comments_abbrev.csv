DrahtBot,2020-12-23 21:41:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20833 (rpc/validation: enable packages through testmempoolaccept by glozow)\n* #20828 (fuzz: Introduce CallOneOf helper t",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-750484455,750484455,
jnewbery,2020-12-29 10:14:06,"I think this needs more motivation. Without a strong reason to do this, I tend to agree with the comments on #7533:\n\n- ""I'm not convinced about the need to ignore based on the exact reason (as that is likely something that's hard to maintain, as reasons change over time)."" (https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-292789614)\n- ""This is not going to be maintainable for API cl",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752022945,752022945,
MarcoFalke,2020-12-29 10:25:13,"The reasons can only change if the server version changes. And the policy reject reasons may already change in all other RPCs (e.g. `sendrawtransaction`), so I don't see how this pull makes any difference. If you have specific concerns, it would be good to elaborate them with an example, so that it is easier to understand them.",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752026154,752026154,
MarcoFalke,2020-12-29 11:00:34,"To extend my reply a bit: Currently it is only possible to override the baked-in behavior for some very specific policy checks via command line (e.g. `-dustrelayfee`) for all network and rpc transactions. The goal of this change is to allow to override policy reject reasons while also giving the user more flexibility than an ""on-off"" `-acceptnonstdtxn` setting. The reason that `-acceptnonstdtxn` i",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752035750,752035750,
luke-jr,2020-12-29 16:08:58,"(Concept ACK, will review code in detail later)",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752138679,752138679,
sipa,2020-12-29 19:02:59,"Concept NACK on exposing this for mainnet. That seems like a huge footgun, even with the warning. What is the use case? We should never treat our own transactions differently than ones coming from the network.\n\nI think it's pretty ugly in any case, but can imagine it's useful for testing.",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752206826,752206826,
MarcoFalke,2020-12-30 08:53:14,"One use case is to accept a transaction as a miner that has a large fee, but violates a policy limit (e.g. tx-version, dust, ...) and thus has issues to propagate the network and be accepted to the likely-default mempool the miner is running. If someone is using this without thinking, it might lead to issues, just like `invalidateblock` may lead to issues when used without thinking.",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752379518,752379518,
luke-jr,2020-12-30 17:01:27,"Where is the footgun? Many policies are based on DoS risk, which doesn't exist if there's a user actively trying to add a transaction.\n\nAs for use cases, I know one real-world case where a user accidentally used an uncompressed key for a segwit address. He's figured out his mistake, and in theory he should be able to recover his coins, but he hasn't convinced any miners (last I checked) to mod",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752690860,752690860,
glozow,2020-12-31 23:55:05,"I can imagine a user wanting to look at a transaction just based on consensus rules and not policy... `testmempoolaccept` will currently tell you exactly which policy a tx is failing; if a user wants to know ""does my transaction pass _just_ consensus rules otherwise?"" I think ability to toggle on/off might make sense. But if a user is trying to get a nonstandard tx included in a block and can't ge",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753227558,753227558,
MarcoFalke,2021-01-01 10:59:04,"Correct, the transaction won't relay typically. (Unless you know that you are running an old version of Bitcoin Core to relay a tx that future versions of Bitcoin Core consider policy-""valid"", but this is probably an edge case). Thus, I think the primary user of this feature is a miner. (And maybe some power users that know exactly what they are doing).\n\n\n>  I think ability to toggle on/off ",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753301531,753301531,
luke-jr,2021-01-01 14:42:26,">But if a user is trying to get a nonstandard tx included in a block and can't get a miner to accept it directly, how does this help?\n\nThis is *how* a miner would accept it directly.\n\n>Another option would be for testmempoolaccept to continue and collect all policy-failures on the way and return all of them instead of only the first?\n\nThis seems like a good idea regardless.",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753324932,753324932,
glozow,2021-01-01 19:46:56,"> This is _how_ a miner would accept it directly.\n\nAh ok. Then, wrt maintainability, it still seems simpler to just set policy on/off entirely?\n\n> Another option would be for `testmempoolaccept` to continue and collect all policy-failures on the way and return all of them instead of only the first? This would make an on/off switch safe again, I believe.\n\nThat sounds nice. Although I'd ",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753373424,753373424,
jnewbery,2021-01-01 22:47:18,"> Although I'd say it's tricky to implement - what we might consider individual policies aren't really mutually exclusive and we usually stop after the first violation because later checks would break / say the same thing but be more expensive.\n\nAbsolutely agree with this. Mempool acceptance logic should be optimized towards simplicity and performance. Making the internal logic more complex so",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753399889,753399889,
MarcoFalke,2021-01-03 18:16:38,"> > Although I'd say it's tricky to implement - what we might consider individual policies aren't really mutually exclusive and we usually stop after the first violation because later checks would break / say the same thing but be more expensive.\n> \n> Absolutely agree with this. Mempool acceptance logic should be optimized towards simplicity and performance. Making the internal logic more comp",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753656174,753656174,
DrahtBot,2021-01-13 09:11:43,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-759313082,759313082,
luke-jr,2020-12-23 17:06:09,IMO [the const empty_ignore_rejects](https://github.com/bitcoin/bitcoin/pull/7533/files#diff-1fc0f6b5081e8ed5dfa8bf230744ad08cc6f4c1147e98552f1f424b0492fe9bdR79) is cleaner.,https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548056601,548056601,src/bench/block_assemble.cpp
luke-jr,2020-12-23 17:10:40,"[The `else` below needs to go too, or we accidentally also ignore dust multisigs](https://github.com/luke-jr/bitcoin/commit/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6#diff-ea6d307faa4ec9dfa5abcf6858bc19603079f2b8e110e1d62da4df98f4bdb9c0R174)",https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548058508,548058508,src/policy/policy.cpp
DrahtBot,2020-12-24 16:25:33,"\n\nThanks, also fixed the test issue in #20760\n",https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548597177,548597177,src/policy/policy.cpp
