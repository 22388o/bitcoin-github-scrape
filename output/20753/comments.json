[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750484455",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-750484455",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 750484455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ4NDQ1NQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-23T21:41:35Z",
    "updated_at": "2021-01-12T08:30:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20833 (rpc/validation: enable packages through testmempoolaccept by glozow)\n* #20828 (fuzz: Introduce CallOneOf helper to replace switch-case by MarcoFalke)\n* #20012 (rpc: Remove duplicate name and argNames from CRPCCommand by MarcoFalke)\n* #19935 (Move SaltedHashers to separate file and add some new ones by achow101)\n* #19602 (wallet: Migrate legacy wallets to descriptor wallets by achow101)\n* #19438 (Introduce deploymentstatus by ajtowns)\n* #19168 (Refactor: Improve setup_clean_chain semantics by fjahr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750484455/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752022945",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752022945",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 752022945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjAyMjk0NQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-29T10:14:06Z",
    "updated_at": "2020-12-29T10:14:06Z",
    "author_association": "MEMBER",
    "body": "I think this needs more motivation. Without a strong reason to do this, I tend to agree with the comments on #7533:\r\n\r\n- \"I'm not convinced about the need to ignore based on the exact reason (as that is likely something that's hard to maintain, as reasons change over time).\" (https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-292789614)\r\n- \"This is not going to be maintainable for API clients.\" (https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-314520218)\r\n- \"making this too granular makes this unmaintainable as rejection reasons might come and go, or implemented differently, as policy changes. After all, policy is not standardized.\" (https://github.com/bitcoin/bitcoin/pull/7533#issuecomment-331264593)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752022945/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752026154",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752026154",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 752026154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjAyNjE1NA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-29T10:25:13Z",
    "updated_at": "2020-12-29T10:25:13Z",
    "author_association": "MEMBER",
    "body": "The reasons can only change if the server version changes. And the policy reject reasons may already change in all other RPCs (e.g. `sendrawtransaction`), so I don't see how this pull makes any difference. If you have specific concerns, it would be good to elaborate them with an example, so that it is easier to understand them.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752026154/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752035750",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752035750",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 752035750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjAzNTc1MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-29T11:00:34Z",
    "updated_at": "2020-12-29T11:00:34Z",
    "author_association": "MEMBER",
    "body": "To extend my reply a bit: Currently it is only possible to override the baked-in behavior for some very specific policy checks via command line (e.g. `-dustrelayfee`) for all network and rpc transactions. The goal of this change is to allow to override policy reject reasons while also giving the user more flexibility than an \"on-off\" `-acceptnonstdtxn` setting. The reason that `-acceptnonstdtxn` is disabled is that it wouldn't be safe to turn on in normal operation for the default user. So I think the flexibility to have a per-tx override without restarting the node is useful. Maybe even outside the primary use case of one-off manual sends.\r\n\r\nSimply having broader categories (or even a single category) doesn't solve the problem that policy changes between versions.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752035750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752138679",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752138679",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 752138679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjEzODY3OQ==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-29T16:08:58Z",
    "updated_at": "2020-12-29T16:08:58Z",
    "author_association": "MEMBER",
    "body": "(Concept ACK, will review code in detail later)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752138679/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752206826",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752206826",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 752206826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjIwNjgyNg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-29T19:02:59Z",
    "updated_at": "2020-12-29T19:05:22Z",
    "author_association": "MEMBER",
    "body": "Concept NACK on exposing this for mainnet. That seems like a huge footgun, even with the warning. What is the use case? We should never treat our own transactions differently than ones coming from the network.\r\n\r\nI think it's pretty ugly in any case, but can imagine it's useful for testing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752206826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752379518",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752379518",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 752379518,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjM3OTUxOA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-30T08:53:14Z",
    "updated_at": "2020-12-30T08:53:47Z",
    "author_association": "MEMBER",
    "body": "One use case is to accept a transaction as a miner that has a large fee, but violates a policy limit (e.g. tx-version, dust, ...) and thus has issues to propagate the network and be accepted to the likely-default mempool the miner is running. If someone is using this without thinking, it might lead to issues, just like `invalidateblock` may lead to issues when used without thinking.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752379518/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752690860",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-752690860",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 752690860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjY5MDg2MA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-30T17:01:27Z",
    "updated_at": "2020-12-30T17:01:27Z",
    "author_association": "MEMBER",
    "body": "Where is the footgun? Many policies are based on DoS risk, which doesn't exist if there's a user actively trying to add a transaction.\r\n\r\nAs for use cases, I know one real-world case where a user accidentally used an uncompressed key for a segwit address. He's figured out his mistake, and in theory he should be able to recover his coins, but he hasn't convinced any miners (last I checked) to modify their software to accept it. (This PR might not be enough to get that one past, but it demonstrates that there are legitimate needs to override policies.)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752690860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753227558",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753227558",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 753227558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzIyNzU1OA==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-31T23:55:05Z",
    "updated_at": "2020-12-31T23:55:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can imagine a user wanting to look at a transaction just based on consensus rules and not policy... `testmempoolaccept` will currently tell you exactly which policy a tx is failing; if a user wants to know \"does my transaction pass _just_ consensus rules otherwise?\" I think ability to toggle on/off might make sense. But if a user is trying to get a nonstandard tx included in a block and can't get a miner to accept it directly, how does this help? Core nodes still wouldn't (and shouldn't) relay it. Unless someone is planning to mine the tx themselves (not the typical user?) it would just be garbage sitting in their local mempool right?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753227558/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753301531",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753301531",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 753301531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzMwMTUzMQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-01T10:59:04Z",
    "updated_at": "2021-01-01T10:59:04Z",
    "author_association": "MEMBER",
    "body": "Correct, the transaction won't relay typically. (Unless you know that you are running an old version of Bitcoin Core to relay a tx that future versions of Bitcoin Core consider policy-\"valid\", but this is probably an edge case). Thus, I think the primary user of this feature is a miner. (And maybe some power users that know exactly what they are doing).\r\n\r\n\r\n>  I think ability to toggle on/off might make sense.\r\n\r\nI am happy to explore this direction. Though, `testmempoolaccept` will only tell you the *first* policy-failure reason, not the second one. So I was thinking that it might be safer to supply all failure reasons explicitly instead of hoping there was only one.\r\n\r\nAnother option would be for `testmempoolaccept` to continue and collect all policy-failures on the way and return all of them instead of only the first? This would make an on/off switch safe again, I believe.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753301531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753324932",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753324932",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 753324932,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzMyNDkzMg==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-01T14:42:26Z",
    "updated_at": "2021-01-01T14:42:26Z",
    "author_association": "MEMBER",
    "body": ">But if a user is trying to get a nonstandard tx included in a block and can't get a miner to accept it directly, how does this help?\r\n\r\nThis is *how* a miner would accept it directly.\r\n\r\n>Another option would be for testmempoolaccept to continue and collect all policy-failures on the way and return all of them instead of only the first?\r\n\r\nThis seems like a good idea regardless.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753324932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753373424",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753373424",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 753373424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzM3MzQyNA==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-01T19:46:56Z",
    "updated_at": "2021-01-01T19:46:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is _how_ a miner would accept it directly.\r\n\r\nAh ok. Then, wrt maintainability, it still seems simpler to just set policy on/off entirely?\r\n\r\n> Another option would be for `testmempoolaccept` to continue and collect all policy-failures on the way and return all of them instead of only the first? This would make an on/off switch safe again, I believe.\r\n\r\nThat sounds nice. Although I'd say it's tricky to implement - what we might consider individual policies aren't really mutually exclusive and we usually stop after the first violation because later checks would break / say the same thing but be more expensive. For example [too small](https://github.com/bitcoin/bitcoin/blob/e75f91eae3936269b40b4bfdfe540d5526270936/src/validation.cpp#L582) or [scriptSig size](https://github.com/bitcoin/bitcoin/blob/e75f91eae3936269b40b4bfdfe540d5526270936/src/policy/policy.cpp#L95). Would we run `EvalScript` multiple times for the [standard flags](https://github.com/bitcoin/bitcoin/blob/e75f91eae3936269b40b4bfdfe540d5526270936/src/policy/policy.h#L60)? I suppose this is where inputs specifying which policies to exclude would make sense, but still requires policy to be well-enumerated/defined.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753373424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753399889",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753399889",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 753399889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzM5OTg4OQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-01T22:47:18Z",
    "updated_at": "2021-01-01T22:47:18Z",
    "author_association": "MEMBER",
    "body": "> Although I'd say it's tricky to implement - what we might consider individual policies aren't really mutually exclusive and we usually stop after the first violation because later checks would break / say the same thing but be more expensive.\r\n\r\nAbsolutely agree with this. Mempool acceptance logic should be optimized towards simplicity and performance. Making the internal logic more complex so that we can return additional debugging information over an interface that we can't guarantee to be stable doesn't seem like the right decision to me.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753399889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753656174",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-753656174",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 753656174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzY1NjE3NA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-03T18:16:38Z",
    "updated_at": "2021-01-03T18:16:38Z",
    "author_association": "MEMBER",
    "body": "> > Although I'd say it's tricky to implement - what we might consider individual policies aren't really mutually exclusive and we usually stop after the first violation because later checks would break / say the same thing but be more expensive.\r\n> \r\n> Absolutely agree with this. Mempool acceptance logic should be optimized towards simplicity and performance. Making the internal logic more complex so that we can return additional debugging information over an interface that we can't guarantee to be stable doesn't seem like the right decision to me.\r\n\r\nWe already return the failure reason, and it is already not stable, so this wouldn't change anything fundamentally. Also, this doesn't change performance of mempool acceptance logic if not enabled. Yes, it might run checks that aren't mutually exclusive, but what is the problem with that if the user explicitly asks to do that. A user might also rescan the wallet in a loop, even though it has already been rescanned.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753656174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759313082",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#issuecomment-759313082",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20753",
    "id": 759313082,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTMxMzA4Mg==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-13T09:11:43Z",
    "updated_at": "2021-01-13T09:11:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759313082/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548056601",
    "pull_request_review_id": 558113039,
    "id": 548056601,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1NjYwMQ==",
    "diff_hunk": "@@ -49,7 +49,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n \n         for (const auto& txr : txs) {\n             TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n+            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, {} /* ignore_rejects */, false /* bypass_limits */)};",
    "path": "src/bench/block_assemble.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "28760050fa9ac87e4ad58f3179304c4bc164a5ee",
    "original_commit_id": "fa381a1507dacedfc5b62a6f763d5c10f8a98523",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IMO [the const empty_ignore_rejects](https://github.com/bitcoin/bitcoin/pull/7533/files#diff-1fc0f6b5081e8ed5dfa8bf230744ad08cc6f4c1147e98552f1f424b0492fe9bdR79) is cleaner.",
    "created_at": "2020-12-23T17:06:09Z",
    "updated_at": "2021-01-03T18:10:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548056601",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20753",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548056601"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548056601"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20753"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548056601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 52,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548058508",
    "pull_request_review_id": 558113039,
    "id": 548058508,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1ODUwOA==",
    "diff_hunk": "@@ -101,38 +111,32 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n         // 20-of-20 CHECKMULTISIG scriptPubKey, though such a scriptPubKey\n         // is not considered standard.\n         if (txin.scriptSig.size() > MAX_STANDARD_SCRIPTSIG_SIZE) {\n-            reason = \"scriptsig-size\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptsig-size\", ignore_rejects);\n         }\n         if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptsig-not-pushonly\", ignore_rejects);\n         }\n     }\n \n     unsigned int nDataOut = 0;\n     TxoutType whichType;\n     for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptpubkey\", ignore_rejects);\n         }\n \n         if (whichType == TxoutType::NULL_DATA)\n             nDataOut++;\n         else if ((whichType == TxoutType::MULTISIG) && (!permit_bare_multisig)) {\n-            reason = \"bare-multisig\";\n-            return false;\n+            MAYBE_REJECT(reason, \"bare-multisig\", ignore_rejects);",
    "path": "src/policy/policy.cpp",
    "position": 80,
    "original_position": 77,
    "commit_id": "28760050fa9ac87e4ad58f3179304c4bc164a5ee",
    "original_commit_id": "fa381a1507dacedfc5b62a6f763d5c10f8a98523",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "[The `else` below needs to go too, or we accidentally also ignore dust multisigs](https://github.com/luke-jr/bitcoin/commit/e786e726d4a0b8e68aa87bd38dfac4aeecc76be6#diff-ea6d307faa4ec9dfa5abcf6858bc19603079f2b8e110e1d62da4df98f4bdb9c0R174)",
    "created_at": "2020-12-23T17:10:40Z",
    "updated_at": "2021-01-03T18:10:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548058508",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20753",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548058508"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548058508"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20753"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548058508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 131,
    "original_line": 131,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548597177",
    "pull_request_review_id": 558679263,
    "id": 548597177,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU5NzE3Nw==",
    "diff_hunk": "@@ -101,38 +111,32 @@ bool IsStandardTx(const CTransaction& tx, bool permit_bare_multisig, const CFeeR\n         // 20-of-20 CHECKMULTISIG scriptPubKey, though such a scriptPubKey\n         // is not considered standard.\n         if (txin.scriptSig.size() > MAX_STANDARD_SCRIPTSIG_SIZE) {\n-            reason = \"scriptsig-size\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptsig-size\", ignore_rejects);\n         }\n         if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptsig-not-pushonly\", ignore_rejects);\n         }\n     }\n \n     unsigned int nDataOut = 0;\n     TxoutType whichType;\n     for (const CTxOut& txout : tx.vout) {\n         if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n+            MAYBE_REJECT(reason, \"scriptpubkey\", ignore_rejects);\n         }\n \n         if (whichType == TxoutType::NULL_DATA)\n             nDataOut++;\n         else if ((whichType == TxoutType::MULTISIG) && (!permit_bare_multisig)) {\n-            reason = \"bare-multisig\";\n-            return false;\n+            MAYBE_REJECT(reason, \"bare-multisig\", ignore_rejects);",
    "path": "src/policy/policy.cpp",
    "position": 80,
    "original_position": 77,
    "commit_id": "28760050fa9ac87e4ad58f3179304c4bc164a5ee",
    "original_commit_id": "fa381a1507dacedfc5b62a6f763d5c10f8a98523",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\r\n\r\nThanks, also fixed the test issue in #20760\r\n",
    "created_at": "2020-12-24T16:25:33Z",
    "updated_at": "2021-01-03T18:10:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548597177",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20753",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548597177"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20753#discussion_r548597177"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20753"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548597177/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 131,
    "original_line": 131,
    "side": "RIGHT",
    "in_reply_to_id": 548058508
  }
]