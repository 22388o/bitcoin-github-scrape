[
  {
    "sha": "5865d41f889d326b51fb0b68be9a41c46d6cad83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODY1ZDQxZjg4OWQzMjZiNTFmYjBiNjhiZTlhNDFjNDZkNmNhZDgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-25T18:29:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "authproxy: Add support for RPC named arguments",
      "tree": {
        "sha": "d884341b8a08f690ab2dc72cc8f72f22929e37a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d884341b8a08f690ab2dc72cc8f72f22929e37a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5865d41f889d326b51fb0b68be9a41c46d6cad83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5865d41f889d326b51fb0b68be9a41c46d6cad83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5865d41f889d326b51fb0b68be9a41c46d6cad83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5865d41f889d326b51fb0b68be9a41c46d6cad83/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "406f35d99d0fcd2f50370280e605283d04da466a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/406f35d99d0fcd2f50370280e605283d04da466a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/406f35d99d0fcd2f50370280e605283d04da466a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "09ed6112992356ea535c6b56e331d2c7a2053ce3",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5865d41f889d326b51fb0b68be9a41c46d6cad83/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5865d41f889d326b51fb0b68be9a41c46d6cad83/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=5865d41f889d326b51fb0b68be9a41c46d6cad83",
        "patch": "@@ -138,14 +138,16 @@ def _request(self, method, path, postdata):\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n \n-    def __call__(self, *args):\n+    def __call__(self, *args, **argsn):\n         AuthServiceProxy.__id_count += 1\n \n         log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n                                  json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n+        if args and argsn:\n+            raise ValueError('Cannot handle both named and positional arguments')\n         postdata = json.dumps({'version': '1.1',\n                                'method': self._service_name,\n-                               'params': args,\n+                               'params': args or argsn,\n                                'id': AuthServiceProxy.__id_count}, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n         if response['error'] is not None:"
      }
    ]
  },
  {
    "sha": "6f1c76ae14c884c919db9ed720c7776aa0748244",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjFjNzZhZTE0Yzg4NGM5MTlkYjllZDcyMGM3Nzc2YWEwNzQ4MjQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-25T18:42:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Support named arguments\n\nThe [JSON-RPC specification](http://www.jsonrpc.org/specification) allows passing parameters as an Array, for by-position\narguments, or an Object, for by-name arguments.\n\nThis implements by-name arguments, but preserves full backwards compatibility. API using by-name arguments are\neasier to extend, and easier to use (no need to guess which argument goes where).\n\nNamed are mapped to positions by a per-call structure, provided through the RPC command table.\n\nMissing arguments will be replaced by null, except if at the end, then the argument is left out completely.\n\nCurrently calls fail (though not crash) on intermediate nulls, but this should be improved on a per-call basis later.",
      "tree": {
        "sha": "a67faa852cb940ff4503ffe639c9cd92e3810d29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a67faa852cb940ff4503ffe639c9cd92e3810d29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f1c76ae14c884c919db9ed720c7776aa0748244",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1c76ae14c884c919db9ed720c7776aa0748244",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1c76ae14c884c919db9ed720c7776aa0748244",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1c76ae14c884c919db9ed720c7776aa0748244/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5865d41f889d326b51fb0b68be9a41c46d6cad83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5865d41f889d326b51fb0b68be9a41c46d6cad83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5865d41f889d326b51fb0b68be9a41c46d6cad83"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 57,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1b94e100718de26696b9a01c80cbbe81f598d191",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 9,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1c76ae14c884c919db9ed720c7776aa0748244/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1c76ae14c884c919db9ed720c7776aa0748244/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=6f1c76ae14c884c919db9ed720c7776aa0748244",
        "patch": "@@ -26,6 +26,7 @@\n #include <boost/algorithm/string/case_conv.hpp> // for to_upper()\n \n #include <memory> // for unique_ptr\n+#include <unordered_map>\n \n using namespace RPCServer;\n using namespace std;\n@@ -268,11 +269,11 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n  * Call Table\n  */\n static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         okSafeMode\n-  //  --------------------- ------------------------  -----------------------  ----------\n+{ //  category              name                      actor (function)         okSafe argNames\n+  //  --------------------- ------------------------  -----------------------  ------ ----------\n     /* Overall control/query calls */\n-    { \"control\",            \"help\",                   &help,                   true  },\n-    { \"control\",            \"stop\",                   &stop,                   true  },\n+    { \"control\",            \"help\",                   &help,                   true,  {\"command\"}  },\n+    { \"control\",            \"stop\",                   &stop,                   true,  {}  },\n };\n \n CRPCTable::CRPCTable()\n@@ -379,12 +380,12 @@ void JSONRPCRequest::parse(const UniValue& valRequest)\n \n     // Parse params\n     UniValue valParams = find_value(request, \"params\");\n-    if (valParams.isArray())\n-        params = valParams.get_array();\n+    if (valParams.isArray() || valParams.isObject())\n+        params = valParams;\n     else if (valParams.isNull())\n         params = UniValue(UniValue::VARR);\n     else\n-        throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n+        throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array or object\");\n }\n \n static UniValue JSONRPCExecOne(const UniValue& req)\n@@ -420,6 +421,48 @@ std::string JSONRPCExecBatch(const UniValue& vReq)\n     return ret.write() + \"\\n\";\n }\n \n+/**\n+ * Process named arguments into a vector of positional arguments, based on the\n+ * passed-in specification for the RPC call's arguments.\n+ */\n+static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)\n+{\n+    JSONRPCRequest out = in;\n+    out.params = UniValue(UniValue::VARR);\n+    // Build a map of parameters, and remove ones that have been processed, so that we can throw a focused error if\n+    // there is an unknown one.\n+    const std::vector<std::string>& keys = in.params.getKeys();\n+    const std::vector<UniValue>& values = in.params.getValues();\n+    std::unordered_map<std::string, const UniValue*> argsIn;\n+    for (size_t i=0; i<keys.size(); ++i) {\n+        argsIn[keys[i]] = &values[i];\n+    }\n+    // Process expected parameters.\n+    int hole = 0;\n+    for (const std::string &argName: argNames) {\n+        auto fr = argsIn.find(argName);\n+        if (fr != argsIn.end()) {\n+            for (int i = 0; i < hole; ++i) {\n+                // Fill hole between specified parameters with JSON nulls,\n+                // but not at the end (for backwards compatibility with calls\n+                // that act based on number of specified parameters).\n+                out.params.push_back(UniValue());\n+            }\n+            hole = 0;\n+            out.params.push_back(*fr->second);\n+            argsIn.erase(fr);\n+        } else {\n+            hole += 1;\n+        }\n+    }\n+    // If there are still arguments in the argsIn map, this is an error.\n+    if (!argsIn.empty()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown named parameter \" + argsIn.begin()->first);\n+    }\n+    // Return request with named arguments transformed to positional arguments\n+    return out;\n+}\n+\n UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n {\n     // Return immediately if in warmup\n@@ -438,8 +481,12 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n \n     try\n     {\n-        // Execute\n-        return pcmd->actor(request);\n+        // Execute, convert arguments to array if necessary\n+        if (request.params.isObject()) {\n+            return pcmd->actor(transformNamedArguments(request, pcmd->argNames));\n+        } else {\n+            return pcmd->actor(request);\n+        }\n     }\n     catch (const std::exception& e)\n     {"
      },
      {
        "sha": "fed3d8c90f98e75c3d7a978dbbdc14608c59cff3",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f1c76ae14c884c919db9ed720c7776aa0748244/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f1c76ae14c884c919db9ed720c7776aa0748244/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=6f1c76ae14c884c919db9ed720c7776aa0748244",
        "patch": "@@ -136,6 +136,7 @@ class CRPCCommand\n     std::string name;\n     rpcfn_type actor;\n     bool okSafeMode;\n+    std::vector<std::string> argNames;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "495eb44a4f8461c799d2b1ad70e54d087a0b3098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTVlYjQ0YTRmODQ2MWM3OTlkMmIxYWQ3MGU1NGQwODdhMGIzMDk4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-25T18:44:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Named arguments for blockchain calls",
      "tree": {
        "sha": "3d23751586ee6dc4caed2804a2af16e63aa62ffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d23751586ee6dc4caed2804a2af16e63aa62ffb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/495eb44a4f8461c799d2b1ad70e54d087a0b3098",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/495eb44a4f8461c799d2b1ad70e54d087a0b3098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/495eb44a4f8461c799d2b1ad70e54d087a0b3098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/495eb44a4f8461c799d2b1ad70e54d087a0b3098/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f1c76ae14c884c919db9ed720c7776aa0748244",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f1c76ae14c884c919db9ed720c7776aa0748244",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f1c76ae14c884c919db9ed720c7776aa0748244"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 31,
      "deletions": 31
    },
    "files": [
      {
        "sha": "e38636aa7b09a1155e8e5d382dda59df6c596d0b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/495eb44a4f8461c799d2b1ad70e54d087a0b3098/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/495eb44a4f8461c799d2b1ad70e54d087a0b3098/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=495eb44a4f8461c799d2b1ad70e54d087a0b3098",
        "patch": "@@ -232,11 +232,11 @@ UniValue waitforblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"waitforblock <blockhash> (timeout)\\n\"\n+            \"waitforblock <hash> (timeout)\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. blockhash to wait for (string)\\n\"\n+            \"1. hash (string) Block hash to wait for.\\n\"\n             \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n@@ -858,12 +858,12 @@ UniValue gettxout(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n-            \"gettxout \\\"txid\\\" n ( includemempool )\\n\"\n+            \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n             \"2. n              (numeric, required) vout number\\n\"\n-            \"3. includemempool  (boolean, optional) Whether to include the mempool\\n\"\n+            \"3. include_mempool  (boolean, optional) Whether to include the mempool\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n@@ -940,11 +940,11 @@ UniValue verifychain(const JSONRPCRequest& request)\n     int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n-            \"verifychain ( checklevel numblocks )\\n\"\n+            \"verifychain ( checklevel nblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n-            \"2. numblocks    (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n+            \"2. nblocks      (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false       (boolean) Verified or not\\n\"\n             \"\\nExamples:\\n\"\n@@ -1367,33 +1367,33 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n }\n \n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         okSafeMode\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true  },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true  },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true  },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n-    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true  },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n-    { \"blockchain\",         \"getmempoolancestors\",    &getmempoolancestors,    true  },\n-    { \"blockchain\",         \"getmempooldescendants\",  &getmempooldescendants,  true  },\n-    { \"blockchain\",         \"getmempoolentry\",        &getmempoolentry,        true  },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true  },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true  },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n-\n-    { \"blockchain\",         \"preciousblock\",          &preciousblock,          true  },\n+{ //  category              name                      actor (function)         okSafe argNames\n+  //  --------------------- ------------------------  -----------------------  ------ ----------\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,  {} },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,  {} },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,  {} },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true,  {\"hash\",\"verbose\"} },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,  {\"index\"} },\n+    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true,  {\"hash\",\"verbose\"} },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,  {} },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,  {} },\n+    { \"blockchain\",         \"getmempoolancestors\",    &getmempoolancestors,    true,  {\"txid\",\"verbose\"} },\n+    { \"blockchain\",         \"getmempooldescendants\",  &getmempooldescendants,  true,  {\"txid\",\"verbose\"} },\n+    { \"blockchain\",         \"getmempoolentry\",        &getmempoolentry,        true,  {\"txid\"} },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true,  {} },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true,  {\"verbose\"} },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true,  {\"txid\",\"n\",\"include_mempool\"} },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,  {} },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true,  {\"checklevel\",\"nblocks\"} },\n+\n+    { \"blockchain\",         \"preciousblock\",          &preciousblock,          true,  {\"hash\"} },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },\n-    { \"hidden\",             \"waitfornewblock\",        &waitfornewblock,        true  },\n-    { \"hidden\",             \"waitforblock\",           &waitforblock,           true  },\n-    { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     true  },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,  {\"hash\"} },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,  {\"hash\"} },\n+    { \"hidden\",             \"waitfornewblock\",        &waitfornewblock,        true,  {\"timeout\"} },\n+    { \"hidden\",             \"waitforblock\",           &waitforblock,           true,  {\"hash\",\"timeout\"} },\n+    { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     true,  {\"height\",\"timeout\"} },\n };\n \n void RegisterBlockchainRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "286ec08cb0e5611bb062bc45d4b86df6d6ea801f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODZlYzA4Y2IwZTU2MTFiYjA2MmJjNDVkNGI4NmRmNmQ2ZWE4MDFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-25T18:55:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Add 'echo' call for testing\n\nThis hidden call simply returns what is passed in.",
      "tree": {
        "sha": "2178e03dca5a1e6c0b468cc1a7488cacfae5cdb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2178e03dca5a1e6c0b468cc1a7488cacfae5cdb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/286ec08cb0e5611bb062bc45d4b86df6d6ea801f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286ec08cb0e5611bb062bc45d4b86df6d6ea801f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/286ec08cb0e5611bb062bc45d4b86df6d6ea801f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286ec08cb0e5611bb062bc45d4b86df6d6ea801f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "495eb44a4f8461c799d2b1ad70e54d087a0b3098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/495eb44a4f8461c799d2b1ad70e54d087a0b3098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/495eb44a4f8461c799d2b1ad70e54d087a0b3098"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "13befb108915ac5543e8bb08fdb71dec3d7f1c54",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/286ec08cb0e5611bb062bc45d4b86df6d6ea801f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/286ec08cb0e5611bb062bc45d4b86df6d6ea801f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=286ec08cb0e5611bb062bc45d4b86df6d6ea801f",
        "patch": "@@ -492,6 +492,17 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     return obj;\n }\n \n+UniValue echo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp)\n+        throw runtime_error(\n+            \"echo \\\"message\\\" ...\\n\"\n+            \"\\nSimply echo back the input arguments\\n\"\n+        );\n+\n+    return request.params;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -504,6 +515,7 @@ static const CRPCCommand commands[] =\n \n     /* Not shown in help */\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            true  },\n+    { \"hidden\",             \"echo\",                   &echo,                   true, {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n };\n \n void RegisterMiscRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "fba1a6150c1f7f9e3b407faefba4ccc710fe075e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmExYTYxNTBjMWY3ZjllM2I0MDdmYWVmYmE0Y2NjNzEwZmUwNzVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-25T18:58:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Named arguments for misc calls",
      "tree": {
        "sha": "e1f0590fe8b8cda70c34cb971a9e0f012008eeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1f0590fe8b8cda70c34cb971a9e0f012008eeff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fba1a6150c1f7f9e3b407faefba4ccc710fe075e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fba1a6150c1f7f9e3b407faefba4ccc710fe075e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fba1a6150c1f7f9e3b407faefba4ccc710fe075e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fba1a6150c1f7f9e3b407faefba4ccc710fe075e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "286ec08cb0e5611bb062bc45d4b86df6d6ea801f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286ec08cb0e5611bb062bc45d4b86df6d6ea801f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/286ec08cb0e5611bb062bc45d4b86df6d6ea801f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "4029e5e67cfd25f3d7ac611eadff700bbf4ca42b",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fba1a6150c1f7f9e3b407faefba4ccc710fe075e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fba1a6150c1f7f9e3b407faefba4ccc710fe075e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fba1a6150c1f7f9e3b407faefba4ccc710fe075e",
        "patch": "@@ -506,16 +506,16 @@ UniValue echo(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n-    { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true  },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n-    { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, true  },\n+    { \"control\",            \"getinfo\",                &getinfo,                true,  {} }, /* uses wallet if enabled */\n+    { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true,  {} },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,  {\"bitcoinaddress\"} }, /* uses wallet if enabled */\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true,  {\"nrequired\",\"keys\"} },\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true,  {\"bitcoinaddress\",\"signature\",\"message\"} },\n+    { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, true,  {\"privkey\",\"message\"} },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true  },\n-    { \"hidden\",             \"echo\",                   &echo,                   true, {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true,  {\"timestamp\"}},\n+    { \"hidden\",             \"echo\",                   &echo,                   true,  {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n };\n \n void RegisterMiscRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "2ca9dcd5b934bb85088415e44b967e2b93c00227",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2E5ZGNkNWI5MzRiYjg1MDg4NDE1ZTQ0Yjk2N2UyYjkzYzAwMjI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-25T19:09:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "test: Add test for RPC named arguments\n\nAdd RPC testcase for RPC named arguments.",
      "tree": {
        "sha": "3094084c954f31adc1ce11a12a96210919cda77f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3094084c954f31adc1ce11a12a96210919cda77f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ca9dcd5b934bb85088415e44b967e2b93c00227",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca9dcd5b934bb85088415e44b967e2b93c00227",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca9dcd5b934bb85088415e44b967e2b93c00227",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca9dcd5b934bb85088415e44b967e2b93c00227/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fba1a6150c1f7f9e3b407faefba4ccc710fe075e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fba1a6150c1f7f9e3b407faefba4ccc710fe075e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fba1a6150c1f7f9e3b407faefba4ccc710fe075e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 65,
      "deletions": 0
    },
    "files": [
      {
        "sha": "83b6bdfe487931edb28645f618f70f7910ce40d8",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca9dcd5b934bb85088415e44b967e2b93c00227/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca9dcd5b934bb85088415e44b967e2b93c00227/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=2ca9dcd5b934bb85088415e44b967e2b93c00227",
        "patch": "@@ -151,6 +151,7 @@\n     'signmessages.py',\n     'nulldummy.py',\n     'import-rescan.py',\n+    'rpcnamedargs.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "b526b1f51a89a57b03faa6f8b023df62b8acd53c",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca9dcd5b934bb85088415e44b967e2b93c00227/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca9dcd5b934bb85088415e44b967e2b93c00227/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=2ca9dcd5b934bb85088415e44b967e2b93c00227",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    assert_is_hex_string,\n+    assert_is_hash_string,\n+    start_nodes,\n+    connect_nodes_bi,\n+)\n+\n+\n+class NamedArgumentTest(BitcoinTestFramework):\n+    \"\"\"\n+    Test named arguments on RPC calls.\n+    \"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        h = node.help(command='getinfo')\n+        assert(h.startswith('getinfo\\n'))\n+\n+        assert_raises_jsonrpc(-8, node.help, random='getinfo')\n+\n+        h = node.getblockhash(index=0)\n+        node.getblock(hash=h)\n+\n+        assert_equal(node.echo(), [])\n+        assert_equal(node.echo(arg0=0,arg9=9), [0] + [None]*8 + [9])\n+        assert_equal(node.echo(arg1=1), [None, 1])\n+        assert_equal(node.echo(arg9=None), [None]*10)\n+        assert_equal(node.echo(arg0=0,arg3=3,arg9=9), [0] + [None]*2 + [3] + [None]*5 + [9])\n+\n+if __name__ == '__main__':\n+    NamedArgumentTest().main()"
      },
      {
        "sha": "c29033595d63b122ec7bebe51903e597e74b8cdc",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca9dcd5b934bb85088415e44b967e2b93c00227/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca9dcd5b934bb85088415e44b967e2b93c00227/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=2ca9dcd5b934bb85088415e44b967e2b93c00227",
        "patch": "@@ -546,6 +546,18 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n+def assert_raises_jsonrpc(code, fun, *args, **kwds):\n+    '''Check for specific JSONRPC exception code'''\n+    try:\n+        fun(*args, **kwds)\n+    except JSONRPCException as e:\n+        if e.error[\"code\"] != code:\n+            raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+    except Exception as e:\n+        raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n def assert_is_hex_string(string):\n     try:\n         int(string, 16)"
      }
    ]
  },
  {
    "sha": "b8ebc595bbd18e9239f132fb90b5513ae4759ebc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGViYzU5NWJiZDE4ZTkyMzlmMTMyZmI5MGI1NTEzYWU0NzU5ZWJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-21T12:55:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Named arguments for net calls\n\nAlso add a more descriptive message for `setnetworkactive`.",
      "tree": {
        "sha": "5aa80210496ce211ca21fed73dbb087b6d0fd879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5aa80210496ce211ca21fed73dbb087b6d0fd879"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8ebc595bbd18e9239f132fb90b5513ae4759ebc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ebc595bbd18e9239f132fb90b5513ae4759ebc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ebc595bbd18e9239f132fb90b5513ae4759ebc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ebc595bbd18e9239f132fb90b5513ae4759ebc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ca9dcd5b934bb85088415e44b967e2b93c00227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca9dcd5b934bb85088415e44b967e2b93c00227",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca9dcd5b934bb85088415e44b967e2b93c00227"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "8e64ace9f2d21da339de8c3fe2cd336eb6de12b3",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8ebc595bbd18e9239f132fb90b5513ae4759ebc/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8ebc595bbd18e9239f132fb90b5513ae4759ebc/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=b8ebc595bbd18e9239f132fb90b5513ae4759ebc",
        "patch": "@@ -468,10 +468,10 @@ UniValue setban(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n-                            \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n+                            \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n                             \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"ip(/netmask)\\\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n+                            \"1. \\\"subnet\\\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n                             \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n                             \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n                             \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n@@ -580,7 +580,9 @@ UniValue setnetworkactive(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1) {\n         throw runtime_error(\n             \"setnetworkactive true|false\\n\"\n-            \"Disable/enable all p2p network activity.\"\n+            \"\\nDisable/enable all p2p network activity.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"state\\\"        (boolean, required) true to enable networking, false to disable\\n\"\n         );\n     }\n \n@@ -596,18 +598,18 @@ UniValue setnetworkactive(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true  },\n-    { \"network\",            \"ping\",                   &ping,                   true  },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true  },\n-    { \"network\",            \"addnode\",                &addnode,                true  },\n-    { \"network\",            \"disconnectnode\",         &disconnectnode,         true  },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true  },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true  },\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true  },\n-    { \"network\",            \"setban\",                 &setban,                 true  },\n-    { \"network\",            \"listbanned\",             &listbanned,             true  },\n-    { \"network\",            \"clearbanned\",            &clearbanned,            true  },\n-    { \"network\",            \"setnetworkactive\",       &setnetworkactive,       true, },\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true,  {} },\n+    { \"network\",            \"ping\",                   &ping,                   true,  {} },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,  {} },\n+    { \"network\",            \"addnode\",                &addnode,                true,  {\"node\",\"command\"} },\n+    { \"network\",            \"disconnectnode\",         &disconnectnode,         true,  {\"node\"} },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true,  {\"node\"} },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true,  {} },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true,  {} },\n+    { \"network\",            \"setban\",                 &setban,                 true,  {\"subnet\", \"command\", \"bantime\", \"absolute\"} },\n+    { \"network\",            \"listbanned\",             &listbanned,             true,  {} },\n+    { \"network\",            \"clearbanned\",            &clearbanned,            true,  {} },\n+    { \"network\",            \"setnetworkactive\",       &setnetworkactive,       true,  {\"state\"} },\n };\n \n void RegisterNetRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "78b684f2ac9a81026239417bc6d3b76ec9a410c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGI2ODRmMmFjOWE4MTAyNjIzOTQxN2JjNmQzYjc2ZWM5YTQxMGM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-21T13:03:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Named arguments for mining calls",
      "tree": {
        "sha": "5e3fa3023579fbc72b01272d51706198a6c4dc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e3fa3023579fbc72b01272d51706198a6c4dc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78b684f2ac9a81026239417bc6d3b76ec9a410c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b684f2ac9a81026239417bc6d3b76ec9a410c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78b684f2ac9a81026239417bc6d3b76ec9a410c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b684f2ac9a81026239417bc6d3b76ec9a410c7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8ebc595bbd18e9239f132fb90b5513ae4759ebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ebc595bbd18e9239f132fb90b5513ae4759ebc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ebc595bbd18e9239f132fb90b5513ae4759ebc"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "3143916c8888250c0dd8eb8bbfb287de7e7bfb78",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b684f2ac9a81026239417bc6d3b76ec9a410c7/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b684f2ac9a81026239417bc6d3b76ec9a410c7/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=78b684f2ac9a81026239417bc6d3b76ec9a410c7",
        "patch": "@@ -78,12 +78,12 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n-            \"getnetworkhashps ( blocks height )\\n\"\n+            \"getnetworkhashps ( nblocks height )\\n\"\n             \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n             \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n             \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\\n\"\n+            \"1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\\n\"\n             \"2. height     (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n             \"\\nResult:\\n\"\n             \"x             (numeric) Hashes per second estimated\\n\"\n@@ -150,10 +150,10 @@ UniValue generate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"generate numblocks ( maxtries )\\n\"\n-            \"\\nMine up to numblocks blocks immediately (before the RPC call returns)\\n\"\n+            \"generate nblocks ( maxtries )\\n\"\n+            \"\\nMine up to nblocks blocks immediately (before the RPC call returns)\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"1. nblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n             \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -186,10 +186,10 @@ UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n-            \"generatetoaddress numblocks address (maxtries)\\n\"\n+            \"generatetoaddress nblocks address (maxtries)\\n\"\n             \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"1. nblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n             \"2. address    (string, required) The address to send the newly generated bitcoin to.\\n\"\n             \"3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n             \"\\nResult:\\n\"\n@@ -329,7 +329,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\"\n \n             \"\\nArguments:\\n\"\n-            \"1. TemplateRequest          (json object, optional) A json object in the following spec\\n\"\n+            \"1. template_request         (json object, optional) A json object in the following spec\\n\"\n             \"     {\\n\"\n             \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\\n\"\n             \"       \\\"capabilities\\\":[     (array, optional) A list of strings\\n\"\n@@ -719,7 +719,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexdata\\\"    (string, required) the hex-encoded block data to submit\\n\"\n-            \"2. \\\"jsonparametersobject\\\"     (string, optional) object of optional parameters\\n\"\n+            \"2. \\\"parameters\\\"     (string, optional) object of optional parameters\\n\"\n             \"    {\\n\"\n             \"      \\\"workid\\\" : \\\"id\\\"    (string, optional) if the server provided a workid, it MUST be included with submissions\\n\"\n             \"    }\\n\"\n@@ -908,19 +908,19 @@ UniValue estimatesmartpriority(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true  },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true  },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true  },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true  },\n-\n-    { \"generating\",         \"generate\",               &generate,               true  },\n-    { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true  },\n-\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true  },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true  },\n-    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true  },\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true,  {\"nblocks\",\"height\"} },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true,  {} },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true,  {\"txid\",\"priority_delta\",\"fee_delta\"} },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,  {\"template_request\"} },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true,  {\"hexdata\",\"parameters\"} },\n+\n+    { \"generating\",         \"generate\",               &generate,               true,  {\"nblocks\",\"maxtries\"} },\n+    { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true,  {\"nblocks\",\"address\",\"maxtries\"} },\n+\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true,  {\"nblocks\"} },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true,  {\"nblocks\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true,  {\"nblocks\"} },\n+    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true,  {\"nblocks\"} },\n };\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "37a166f1465c91be3e700c0175f34dd0c3698df8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2ExNjZmMTQ2NWM5MWJlM2U3MDBjMDE3NWYzNGRkMGMzNjk4ZGY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-21T13:32:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Named arguments for wallet calls",
      "tree": {
        "sha": "bf619918ade1c1dc4d38b64d0de7e94f5bfae243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf619918ade1c1dc4d38b64d0de7e94f5bfae243"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37a166f1465c91be3e700c0175f34dd0c3698df8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a166f1465c91be3e700c0175f34dd0c3698df8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37a166f1465c91be3e700c0175f34dd0c3698df8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a166f1465c91be3e700c0175f34dd0c3698df8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78b684f2ac9a81026239417bc6d3b76ec9a410c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b684f2ac9a81026239417bc6d3b76ec9a410c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78b684f2ac9a81026239417bc6d3b76ec9a410c7"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 75,
      "deletions": 75
    },
    "files": [
      {
        "sha": "228064c983e4895e8d9636f0697ef60bfd4f632c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a166f1465c91be3e700c0175f34dd0c3698df8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a166f1465c91be3e700c0175f34dd0c3698df8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=37a166f1465c91be3e700c0175f34dd0c3698df8",
        "patch": "@@ -82,7 +82,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n@@ -963,10 +963,10 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n         throw runtime_error(\n-            \"importmulti '[<json import requests>]' '<json options>' \\n\\n\"\n+            \"importmulti \\\"requests\\\" \\\"options\\\"\\n\\n\"\n             \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).\\n\\n\"\n             \"Arguments:\\n\"\n-            \"1. request array     (array, required) Data to be imported\\n\"\n+            \"1. requests     (array, required) Data to be imported\\n\"\n             \"  [     (array of json objects)\\n\"\n             \"    {\\n\"\n             \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n@@ -980,7 +980,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n-            \"2. json options                 (json, optional)\\n\"\n+            \"2. options                 (json, optional)\\n\"\n             \"  {\\n\"\n             \"     \\\"rescan\\\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\\n\"\n             \"  }\\n\""
      },
      {
        "sha": "120f6401b16f94dd1056e6a9da1ff955ac7999c8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 71,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a166f1465c91be3e700c0175f34dd0c3698df8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a166f1465c91be3e700c0175f34dd0c3698df8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=37a166f1465c91be3e700c0175f34dd0c3698df8",
        "patch": "@@ -380,15 +380,15 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n-            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n+            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n             \"2. \\\"amount\\\"      (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n             \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n-            \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n+            \"4. \\\"comment_to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n@@ -660,15 +660,15 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n-            \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n+            \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n             \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"      (string, optional) DEPRECATED. The selected account, or \\\"*\\\" for entire wallet. It may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n-            \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n+            \"3. include_watchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n@@ -798,7 +798,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n-            \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n+            \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -808,7 +808,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                                     This is not part of the transaction, just kept in your wallet.\\n\"\n-            \"6. \\\"comment-to\\\"        (string, optional) An optional comment to store the name of the person or organization \\n\"\n+            \"6. \\\"comment_to\\\"        (string, optional) An optional comment to store the name of the person or organization \\n\"\n             \"                                     to which you're sending the transaction. This is not part of the transaction, \\n\"\n             \"                                     it is just kept in your wallet.\\n\"\n             \"\\nResult:\\n\"\n@@ -874,7 +874,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n             \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n-            \"5. subtractfeefromamount   (string, optional) A json array with addresses.\\n\"\n+            \"5. subtractfeefrom         (array, optional) A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n@@ -989,7 +989,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n-            \"2. \\\"keysobject\\\"   (string, required) A json array of bitcoin addresses or hex-encoded public keys\\n\"\n+            \"2. \\\"keys\\\"         (string, required) A json array of bitcoin addresses or hex-encoded public keys\\n\"\n             \"     [\\n\"\n             \"       \\\"address\\\"  (string) bitcoin address or hex-encoded public key\\n\"\n             \"       ...,\\n\"\n@@ -1253,12 +1253,12 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n-            \"listreceivedbyaddress ( minconf includeempty includeWatchonly)\\n\"\n+            \"listreceivedbyaddress ( minconf include_empty include_watchonly)\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. includeempty  (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n-            \"3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n+            \"2. include_empty  (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n+            \"3. include_watchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\"\n             \"[\\n\"\n@@ -1291,12 +1291,12 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n-            \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n+            \"listreceivedbyaccount ( minconf include_empty include_watchonly)\\n\"\n             \"\\nDEPRECATED. List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. includeempty (bool, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n-            \"3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n+            \"2. include_empty (bool, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n+            \"3. include_watchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\"\n             \"[\\n\"\n@@ -1427,13 +1427,13 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n-            \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n+            \"listtransactions ( \\\"account\\\" count from include_watchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"    (string, optional) DEPRECATED. The account name. Should be \\\"*\\\".\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. from           (numeric, optional, default=0) The number of transactions to skip\\n\"\n-            \"4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\\n\"\n+            \"4. include_watchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1554,11 +1554,11 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n-            \"listaccounts ( minconf includeWatchonly)\\n\"\n+            \"listaccounts ( minconf include_watchonly)\\n\"\n             \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n-            \"2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\\n\"\n+            \"2. include_watchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"{                      (json object where keys are account names, and values are numeric balances\\n\"\n             \"  \\\"account\\\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\\n\"\n@@ -1633,12 +1633,12 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     if (request.fHelp)\n         throw runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target-confirmations includeWatchonly)\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"   (string, optional) The block hash to list transactions since\\n\"\n-            \"2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n-            \"3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\"\n+            \"2. target_confirmations:   (numeric, optional) The confirmations required, must be 1 or more\\n\"\n+            \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n@@ -1726,11 +1726,11 @@ UniValue gettransaction(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"gettransaction \\\"txid\\\" ( includeWatchonly )\\n\"\n+            \"gettransaction \\\"txid\\\" ( include_watchonly )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n-            \"2. \\\"includeWatchonly\\\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n+            \"2. \\\"include_watchonly\\\"   (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -2352,7 +2352,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] )\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n             \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n@@ -2595,53 +2595,53 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false },\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true  },\n-    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true  },\n-    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true  },\n-    { \"wallet\",             \"backupwallet\",             &backupwallet,             true  },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true  },\n-    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true  },\n-    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true  },\n-    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        true  },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               true  },\n-    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    true  },\n-    { \"wallet\",             \"getbalance\",               &getbalance,               false },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            true  },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      true  },\n-    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     false },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     false },\n-    { \"wallet\",             \"gettransaction\",           &gettransaction,           false },\n-    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false },\n-    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false },\n-    { \"wallet\",             \"importmulti\",              &importmulti,              true  },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            true  },\n-    { \"wallet\",             \"importwallet\",             &importwallet,             true  },\n-    { \"wallet\",             \"importaddress\",            &importaddress,            true  },\n-    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        true  },\n-    { \"wallet\",             \"importpubkey\",             &importpubkey,             true  },\n-    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            true  },\n-    { \"wallet\",             \"listaccounts\",             &listaccounts,             false },\n-    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     false },\n-    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          false },\n-    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    false },\n-    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         false },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              false },\n-    { \"wallet\",             \"lockunspent\",              &lockunspent,              true  },\n-    { \"wallet\",             \"move\",                     &movecmd,                  false },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 false },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               true  },\n-    { \"wallet\",             \"settxfee\",                 &settxfee,                 true  },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              true  },\n-    { \"wallet\",             \"walletlock\",               &walletlock,               true  },\n-    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true  },\n-    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true  },\n-    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true  },\n+    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n+    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true,   {} },\n+    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false,  {\"txid\"} },\n+    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true,   {\"nrequired\",\"keys\",\"account\"} },\n+    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true,   {\"address\"} },\n+    { \"wallet\",             \"backupwallet\",             &backupwallet,             true,   {\"destination\"} },\n+    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"bitcoinaddress\"}  },\n+    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true,   {\"filename\"} },\n+    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true,   {\"passphrase\"} },\n+    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        true,   {\"account\"} },\n+    { \"wallet\",             \"getaccount\",               &getaccount,               true,   {\"bitcoinaddress\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    true,   {\"account\"} },\n+    { \"wallet\",             \"getbalance\",               &getbalance,               false,  {\"account\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            true,   {\"account\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      true,   {} },\n+    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     false,  {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     false,  {\"bitcoinaddress\",\"minconf\"} },\n+    { \"wallet\",             \"gettransaction\",           &gettransaction,           false,  {\"txid\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false,  {} },\n+    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false,  {} },\n+    { \"wallet\",             \"importmulti\",              &importmulti,              true,   {\"requests\",\"options\"} },\n+    { \"wallet\",             \"importprivkey\",            &importprivkey,            true,   {\"bitcoinprivkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importwallet\",             &importwallet,             true,   {\"filename\"} },\n+    { \"wallet\",             \"importaddress\",            &importaddress,            true,   {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n+    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        true,   {\"rawtransaction\",\"txoutproof\"} },\n+    { \"wallet\",             \"importpubkey\",             &importpubkey,             true,   {\"pubkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            true,   {\"newsize\"} },\n+    { \"wallet\",             \"listaccounts\",             &listaccounts,             false,  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     false,  {} },\n+    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          false,  {} },\n+    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"from\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\"} },\n+    { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"tobitcoinaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n+    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\"} },\n+    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"bitcoinaddress\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n+    { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"bitcoinaddress\",\"account\"} },\n+    { \"wallet\",             \"settxfee\",                 &settxfee,                 true,   {\"amount\"} },\n+    { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"bitcoinaddress\",\"message\"} },\n+    { \"wallet\",             \"walletlock\",               &walletlock,               true,   {} },\n+    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\"} },\n+    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\"} },\n+    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true,   {\"txid\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDcxM2Y3NjFiNmNlNWFiM2NjYTM5ODZiMDg4OGM4Yzc4YzZlYmNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-21T13:47:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Named arguments for rawtransaction calls",
      "tree": {
        "sha": "22aa90281116a8f6cfe17f2b0cb5fbaa1e5ac630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22aa90281116a8f6cfe17f2b0cb5fbaa1e5ac630"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37a166f1465c91be3e700c0175f34dd0c3698df8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a166f1465c91be3e700c0175f34dd0c3698df8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37a166f1465c91be3e700c0175f34dd0c3698df8"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a35fd276188d308cc06fa49726206f9ec7b06bbd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc",
        "patch": "@@ -532,7 +532,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"decodescript \\\"hex\\\"\\n\"\n+            \"decodescript \\\"hexstring\\\"\\n\"\n             \"\\nDecode a hex-encoded script.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"hex\\\"     (string) the hex encoded script\\n\"\n@@ -616,7 +616,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"    ]\\n\"\n-            \"3. \\\"privatekeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n             \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n             \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n             \"      ,...\\n\"\n@@ -926,15 +926,15 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true  },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true  },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n-\n-    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          true  },\n-    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       true  },\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,  {\"txid\",\"verbose\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true,  {\"transactions\",\"outputs\",\"locktime\"} },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,  {\"hexstring\"} },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,  {\"hexstring\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+\n+    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          true,  {\"txids\", \"blockhash\"} },\n+    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       true,  {\"proof\"} },\n };\n \n void RegisterRawTransactionRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWRiNGUxYTU5ZDU0Nzg4ZTIwNDg5NWFhZmY1ZDZjYmVmZDFiOTdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-21T13:39:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-05T10:30:20Z"
      },
      "message": "rpc: Argument name consistency\n\nThe meaning is clear from the context, and we're inconsistent here.\nAlso save typing when using named arguments.\n\n- `bitcoinaddress` -> `address`\n- `bitcoinprivkey` -> `privkey`\n- `bitcoinpubkey` -> `pubkey`",
      "tree": {
        "sha": "336dfa2c90016799bafad6215652dd17694421b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/336dfa2c90016799bafad6215652dd17694421b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d713f761b6ce5ab3cca3986b0888c8c78c6ebcc"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 42,
      "deletions": 42
    },
    "files": [
      {
        "sha": "77eb4190abf19bf93419f45f892efea8b50d7671",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
        "patch": "@@ -875,7 +875,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"     \\\"reqSigs\\\" : n,          (numeric) Number of required signatures\\n\"\n             \"     \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n             \"     \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n-            \"        \\\"bitcoinaddress\\\"     (string) bitcoin address\\n\"\n+            \"        \\\"address\\\"     (string) bitcoin address\\n\"\n             \"        ,...\\n\"\n             \"     ]\\n\"\n             \"  },\\n\""
      },
      {
        "sha": "e95f4223668d582bdfb28ccdc8b245c9a9ef5266",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
        "patch": "@@ -152,14 +152,14 @@ UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n+            \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\", (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n@@ -325,10 +325,10 @@ UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n         throw runtime_error(\n-            \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n+            \"verifymessage \\\"address\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n             \"\\nVerify a signed message\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the signature.\\n\"\n+            \"1. \\\"address\\\"  (string, required) The bitcoin address to use for the signature.\\n\"\n             \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n             \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n             \"\\nResult:\\n\"\n@@ -508,9 +508,9 @@ static const CRPCCommand commands[] =\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"control\",            \"getinfo\",                &getinfo,                true,  {} }, /* uses wallet if enabled */\n     { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true,  {} },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,  {\"bitcoinaddress\"} }, /* uses wallet if enabled */\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,  {\"address\"} }, /* uses wallet if enabled */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true,  {\"nrequired\",\"keys\"} },\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true,  {\"bitcoinaddress\",\"signature\",\"message\"} },\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true,  {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, true,  {\"privkey\",\"message\"} },\n \n     /* Not shown in help */"
      },
      {
        "sha": "78b0a00b8b1a2100e0ba5e8445eb3d152c53adab",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
        "patch": "@@ -174,7 +174,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"         \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n             \"         \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n             \"         \\\"addresses\\\" : [           (json array of string)\\n\"\n-            \"           \\\"bitcoinaddress\\\"        (string) bitcoin address\\n\"\n+            \"           \\\"address\\\"        (string) bitcoin address\\n\"\n             \"           ,...\\n\"\n             \"         ]\\n\"\n             \"       }\\n\""
      },
      {
        "sha": "a1912a78ec3b3510c194e34cc8cb96dd27f0db3d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
        "patch": "@@ -520,11 +520,11 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n-            \"\\nReveals the private key corresponding to 'bitcoinaddress'.\\n\"\n+            \"dumpprivkey \\\"address\\\"\\n\"\n+            \"\\nReveals the private key corresponding to 'address'.\\n\"\n             \"Then the importprivkey can be used with this output\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"   (string, required) The bitcoin address for the private key\\n\"\n+            \"1. \\\"address\\\"   (string, required) The bitcoin address for the private key\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"key\\\"                (string) The private key\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "2379403d40c1b22232057a01481aae90c44096e2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adb4e1a59d54788e204895aaff5d6cbefd1b97a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
        "patch": "@@ -116,7 +116,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n+            \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n@@ -166,7 +166,7 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"bitcoinaddress\\\"   (string) The account bitcoin address\\n\"\n+            \"\\\"address\\\"   (string) The account bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getaccountaddress\", \"\")\n             + HelpExampleCli(\"getaccountaddress\", \"\\\"\\\"\")\n@@ -228,10 +228,10 @@ UniValue setaccount(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n+            \"setaccount \\\"address\\\" \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an account.\\n\"\n+            \"1. \\\"address\\\"  (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n@@ -274,10 +274,10 @@ UniValue getaccount(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"getaccount \\\"bitcoinaddress\\\"\\n\"\n+            \"getaccount \\\"address\\\"\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for account lookup.\\n\"\n+            \"1. \\\"address\\\"  (string, required) The bitcoin address for account lookup.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"accountname\\\"        (string) the account address\\n\"\n             \"\\nExamples:\\n\"\n@@ -312,7 +312,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n             \"1. \\\"account\\\"  (string, required) The account name.\\n\"\n             \"\\nResult:\\n\"\n             \"[                     (json array of string)\\n\"\n-            \"  \\\"bitcoinaddress\\\"  (string) a bitcoin address associated with the given account\\n\"\n+            \"  \\\"address\\\"  (string) a bitcoin address associated with the given account\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n@@ -380,11 +380,11 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n-            \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n+            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n+            \"1. \\\"address\\\"  (string, required) The bitcoin address to send to.\\n\"\n             \"2. \\\"amount\\\"      (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n             \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n@@ -446,7 +446,7 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n             \"[\\n\"\n             \"  [\\n\"\n             \"    [\\n\"\n-            \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n+            \"      \\\"address\\\",     (string) The bitcoin address\\n\"\n             \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n@@ -489,11 +489,11 @@ UniValue signmessage(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n-            \"signmessage \\\"bitcoinaddress\\\" \\\"message\\\"\\n\"\n+            \"signmessage \\\"address\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the private key.\\n\"\n+            \"1. \\\"address\\\"  (string, required) The bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -545,10 +545,10 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"getreceivedbyaddress \\\"bitcoinaddress\\\" ( minconf )\\n\"\n-            \"\\nReturns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.\\n\"\n+            \"getreceivedbyaddress \\\"address\\\" ( minconf )\\n\"\n+            \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for transactions.\\n\"\n+            \"1. \\\"address\\\"  (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n@@ -798,12 +798,12 @@ UniValue sendfrom(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n-            \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n+            \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n-            \"2. \\\"tobitcoinaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n+            \"2. \\\"toaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n             \"3. amount                (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n@@ -997,7 +997,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"bitcoinaddress\\\"  (string) A bitcoin address associated with the keys.\\n\"\n+            \"\\\"address\\\"  (string) A bitcoin address associated with the keys.\\n\"\n \n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n@@ -1439,7 +1439,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"  {\\n\"\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. \\n\"\n             \"                                                It will be \\\"\\\" for the default account.\\n\"\n-            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n             \"                                                move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive|move\\\", (string) The transaction category. 'move' is a local (off blockchain)\\n\"\n             \"                                                transaction between accounts, and not associated with an address,\\n\"\n@@ -1643,7 +1643,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n-            \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n             \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n@@ -1746,7 +1746,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n-            \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n+            \"      \\\"address\\\" : \\\"address\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"label\\\" : \\\"label\\\",              (string) A comment for the address/transaction, if any\\n\"\n@@ -2071,7 +2071,7 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n             \"\\nNow set the passphrase to use the wallet, such as for signing or sending bitcoin\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\"\") +\n             \"\\nNow we can so something like sign\\n\"\n-            + HelpExampleCli(\"signmessage\", \"\\\"bitcoinaddress\\\" \\\"test message\\\"\") +\n+            + HelpExampleCli(\"signmessage\", \"\\\"address\\\" \\\"test message\\\"\") +\n             \"\\nNow lock the wallet again by removing the passphrase\\n\"\n             + HelpExampleCli(\"walletlock\", \"\") +\n             \"\\nAs a json rpc call\\n\"\n@@ -2601,22 +2601,22 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true,   {\"nrequired\",\"keys\",\"account\"} },\n     { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true,   {\"address\"} },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             true,   {\"destination\"} },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"bitcoinaddress\"}  },\n+    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true,   {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true,   {\"passphrase\"} },\n     { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        true,   {\"account\"} },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               true,   {\"bitcoinaddress\"} },\n+    { \"wallet\",             \"getaccount\",               &getaccount,               true,   {\"address\"} },\n     { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    true,   {\"account\"} },\n     { \"wallet\",             \"getbalance\",               &getbalance,               false,  {\"account\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",            &getnewaddress,            true,   {\"account\"} },\n     { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      true,   {} },\n     { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     false,  {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     false,  {\"bitcoinaddress\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     false,  {\"address\",\"minconf\"} },\n     { \"wallet\",             \"gettransaction\",           &gettransaction,           false,  {\"txid\",\"include_watchonly\"} },\n     { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false,  {} },\n     { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false,  {} },\n     { \"wallet\",             \"importmulti\",              &importmulti,              true,   {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            true,   {\"bitcoinprivkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importprivkey\",            &importprivkey,            true,   {\"privkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"importwallet\",             &importwallet,             true,   {\"filename\"} },\n     { \"wallet\",             \"importaddress\",            &importaddress,            true,   {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n     { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        true,   {\"rawtransaction\",\"txoutproof\"} },\n@@ -2632,12 +2632,12 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\"} },\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"tobitcoinaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n+    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n     { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"bitcoinaddress\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"bitcoinaddress\",\"account\"} },\n+    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n+    { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"address\",\"account\"} },\n     { \"wallet\",             \"settxfee\",                 &settxfee,                 true,   {\"amount\"} },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"bitcoinaddress\",\"message\"} },\n+    { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"address\",\"message\"} },\n     { \"wallet\",             \"walletlock\",               &walletlock,               true,   {} },\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\"} },"
      }
    ]
  },
  {
    "sha": "481f289765fab47ff2e0bd7dfb968f2bd92fd608",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODFmMjg5NzY1ZmFiNDdmZjJlMGJkN2RmYjk2OGYyYmQ5MmZkNjA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-22T13:56:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-10T11:04:54Z"
      },
      "message": "rpc: Named argument support for bitcoin-cli\n\nUsage e.g.:\n\n    $ src/bitcoin-cli -testnet -named echo arg0=\"dfdf\"\n    [\n    \"dfdf\"\n    ]\n\nArgument conversion also works, for arguments thus flagged in the table in\n`src/rpc/client.cpp`.\n\n    $ src/bitcoin-cli -testnet -named echojson arg0=\"[1,2,3]\"\n    [\n      [\n        1,\n        2,\n        3\n      ]\n    ]\n\nUnknown parameter (detected server-side):\n\n    $ src/bitcoin-cli -testnet -named getinfo arg0=\"dfdf\"\n    error code: -8\n    error message:\n    Unknown named parameter arg0",
      "tree": {
        "sha": "d7ad238c4842bc4fa6c9a05ae8aef395029d1835",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7ad238c4842bc4fa6c9a05ae8aef395029d1835"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/481f289765fab47ff2e0bd7dfb968f2bd92fd608",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/481f289765fab47ff2e0bd7dfb968f2bd92fd608",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/481f289765fab47ff2e0bd7dfb968f2bd92fd608",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/481f289765fab47ff2e0bd7dfb968f2bd92fd608/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adb4e1a59d54788e204895aaff5d6cbefd1b97a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9adb4e1a59d54788e204895aaff5d6cbefd1b97a"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 156,
      "deletions": 93
    },
    "files": [
      {
        "sha": "1c330cf5ea9baafaf6eb6864b66efb12eb1b2aca",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=481f289765fab47ff2e0bd7dfb968f2bd92fd608",
        "patch": "@@ -25,6 +25,7 @@\n \n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n+static const bool DEFAULT_NAMED=false;\n static const int CONTINUE_EXECUTION=-1;\n \n std::string HelpMessageCli()\n@@ -35,6 +36,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     AppendParamsHelpMessages(strUsage);\n+    strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n@@ -80,6 +82,7 @@ static int AppInitRPC(int argc, char* argv[])\n         if (!IsArgSet(\"-version\")) {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n                   \"  bitcoin-cli [options] <command> [params]  \" + strprintf(_(\"Send command to %s\"), _(PACKAGE_NAME)) + \"\\n\" +\n+                  \"  bitcoin-cli [options] -named <command> [name=value] ... \" + strprintf(_(\"Send command to %s (with named arguments)\"), _(PACKAGE_NAME)) + \"\\n\" +\n                   \"  bitcoin-cli [options] help                \" + _(\"List commands\") + \"\\n\" +\n                   \"  bitcoin-cli [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n \n@@ -278,7 +281,14 @@ int CommandLineRPC(int argc, char *argv[])\n         if (args.size() < 1)\n             throw std::runtime_error(\"too few parameters (need at least command)\");\n         std::string strMethod = args[0];\n-        UniValue params = RPCConvertValues(strMethod, std::vector<std::string>(args.begin()+1, args.end()));\n+        args.erase(args.begin()); // Remove trailing method name from arguments vector\n+\n+        UniValue params;\n+        if(GetBoolArg(\"-named\", DEFAULT_NAMED)) {\n+            params = RPCConvertNamedValues(strMethod, args);\n+        } else {\n+            params = RPCConvertValues(strMethod, args);\n+        }\n \n         // Execute and handle connection failures with -rpcwait\n         const bool fWait = GetBoolArg(\"-rpcwait\", false);"
      },
      {
        "sha": "17d1de6761ce83f5014e38e7ba63777afbadeaa4",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 90,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=481f289765fab47ff2e0bd7dfb968f2bd92fd608",
        "patch": "@@ -20,111 +20,130 @@ class CRPCConvertParam\n public:\n     std::string methodName; //!< method whose params want conversion\n     int paramIdx;           //!< 0-based idx of param to convert\n+    std::string paramName;  //!< parameter name\n };\n \n+/**\n+ * Specifiy a (method, idx, name) here if the argument is a non-string RPC\n+ * argument and needs to be converted from JSON.\n+ *\n+ * @note Parameter indexes start from 0.\n+ */\n static const CRPCConvertParam vRPCConvertParams[] =\n {\n-    { \"stop\", 0 },\n-    { \"setmocktime\", 0 },\n-    { \"generate\", 0 },\n-    { \"generate\", 1 },\n-    { \"generatetoaddress\", 0 },\n-    { \"generatetoaddress\", 2 },\n-    { \"getnetworkhashps\", 0 },\n-    { \"getnetworkhashps\", 1 },\n-    { \"sendtoaddress\", 1 },\n-    { \"sendtoaddress\", 4 },\n-    { \"settxfee\", 0 },\n-    { \"getreceivedbyaddress\", 1 },\n-    { \"getreceivedbyaccount\", 1 },\n-    { \"listreceivedbyaddress\", 0 },\n-    { \"listreceivedbyaddress\", 1 },\n-    { \"listreceivedbyaddress\", 2 },\n-    { \"listreceivedbyaccount\", 0 },\n-    { \"listreceivedbyaccount\", 1 },\n-    { \"listreceivedbyaccount\", 2 },\n-    { \"getbalance\", 1 },\n-    { \"getbalance\", 2 },\n-    { \"getblockhash\", 0 },\n-    { \"waitforblockheight\", 0 },\n-    { \"waitforblockheight\", 1 },\n-    { \"waitforblock\", 1 },\n-    { \"waitforblock\", 2 },\n-    { \"waitfornewblock\", 0 },\n-    { \"waitfornewblock\", 1 },\n-    { \"move\", 2 },\n-    { \"move\", 3 },\n-    { \"sendfrom\", 2 },\n-    { \"sendfrom\", 3 },\n-    { \"listtransactions\", 1 },\n-    { \"listtransactions\", 2 },\n-    { \"listtransactions\", 3 },\n-    { \"listaccounts\", 0 },\n-    { \"listaccounts\", 1 },\n-    { \"walletpassphrase\", 1 },\n-    { \"getblocktemplate\", 0 },\n-    { \"listsinceblock\", 1 },\n-    { \"listsinceblock\", 2 },\n-    { \"sendmany\", 1 },\n-    { \"sendmany\", 2 },\n-    { \"sendmany\", 4 },\n-    { \"addmultisigaddress\", 0 },\n-    { \"addmultisigaddress\", 1 },\n-    { \"createmultisig\", 0 },\n-    { \"createmultisig\", 1 },\n-    { \"listunspent\", 0 },\n-    { \"listunspent\", 1 },\n-    { \"listunspent\", 2 },\n-    { \"getblock\", 1 },\n-    { \"getblockheader\", 1 },\n-    { \"gettransaction\", 1 },\n-    { \"getrawtransaction\", 1 },\n-    { \"createrawtransaction\", 0 },\n-    { \"createrawtransaction\", 1 },\n-    { \"createrawtransaction\", 2 },\n-    { \"signrawtransaction\", 1 },\n-    { \"signrawtransaction\", 2 },\n-    { \"sendrawtransaction\", 1 },\n-    { \"fundrawtransaction\", 1 },\n-    { \"gettxout\", 1 },\n-    { \"gettxout\", 2 },\n-    { \"gettxoutproof\", 0 },\n-    { \"lockunspent\", 0 },\n-    { \"lockunspent\", 1 },\n-    { \"importprivkey\", 2 },\n-    { \"importaddress\", 2 },\n-    { \"importaddress\", 3 },\n-    { \"importpubkey\", 2 },\n-    { \"importmulti\", 0 },\n-    { \"importmulti\", 1 },\n-    { \"verifychain\", 0 },\n-    { \"verifychain\", 1 },\n-    { \"keypoolrefill\", 0 },\n-    { \"getrawmempool\", 0 },\n-    { \"estimatefee\", 0 },\n-    { \"estimatepriority\", 0 },\n-    { \"estimatesmartfee\", 0 },\n-    { \"estimatesmartpriority\", 0 },\n-    { \"prioritisetransaction\", 1 },\n-    { \"prioritisetransaction\", 2 },\n-    { \"setban\", 2 },\n-    { \"setban\", 3 },\n-    { \"setnetworkactive\", 0 },\n-    { \"getmempoolancestors\", 1 },\n-    { \"getmempooldescendants\", 1 },\n+    { \"setmocktime\", 0, \"timestamp\" },\n+    { \"generate\", 0, \"nblocks\" },\n+    { \"generate\", 1, \"maxtries\" },\n+    { \"generatetoaddress\", 0, \"nblocks\" },\n+    { \"generatetoaddress\", 2, \"maxtries\" },\n+    { \"getnetworkhashps\", 0, \"nblocks\" },\n+    { \"getnetworkhashps\", 1, \"height\" },\n+    { \"sendtoaddress\", 1, \"amount\" },\n+    { \"sendtoaddress\", 4, \"subtractfeefromamount\" },\n+    { \"settxfee\", 0, \"amount\" },\n+    { \"getreceivedbyaddress\", 1, \"minconf\" },\n+    { \"getreceivedbyaccount\", 1, \"minconf\" },\n+    { \"listreceivedbyaddress\", 0, \"minconf\" },\n+    { \"listreceivedbyaddress\", 1, \"include_empty\" },\n+    { \"listreceivedbyaddress\", 2, \"include_watchonly\" },\n+    { \"listreceivedbyaccount\", 0, \"minconf\" },\n+    { \"listreceivedbyaccount\", 1, \"include_empty\" },\n+    { \"listreceivedbyaccount\", 2, \"include_watchonly\" },\n+    { \"getbalance\", 1, \"minconf\" },\n+    { \"getbalance\", 2, \"include_watchonly\" },\n+    { \"getblockhash\", 0, \"index\" },\n+    { \"waitforblockheight\", 0, \"height\" },\n+    { \"waitforblockheight\", 1, \"timeout\" },\n+    { \"waitforblock\", 1, \"timeout\" },\n+    { \"waitfornewblock\", 0, \"timeout\" },\n+    { \"move\", 2, \"amount\" },\n+    { \"move\", 3, \"minconf\" },\n+    { \"sendfrom\", 2, \"amount\" },\n+    { \"sendfrom\", 3, \"minconf\" },\n+    { \"listtransactions\", 1, \"count\" },\n+    { \"listtransactions\", 2, \"from\" },\n+    { \"listtransactions\", 3, \"include_watchonly\" },\n+    { \"listaccounts\", 0, \"minconf\" },\n+    { \"listaccounts\", 1, \"include_watchonly\" },\n+    { \"walletpassphrase\", 1, \"timeout\" },\n+    { \"getblocktemplate\", 0, \"template_request\" },\n+    { \"listsinceblock\", 1, \"target_confirmations\" },\n+    { \"listsinceblock\", 2, \"include_watchonly\" },\n+    { \"sendmany\", 1, \"amounts\" },\n+    { \"sendmany\", 2, \"minconf\" },\n+    { \"sendmany\", 4, \"subtractfeefrom\" },\n+    { \"addmultisigaddress\", 0, \"nrequired\" },\n+    { \"addmultisigaddress\", 1, \"keys\" },\n+    { \"createmultisig\", 0, \"nrequired\" },\n+    { \"createmultisig\", 1, \"keys\" },\n+    { \"listunspent\", 0, \"minconf\" },\n+    { \"listunspent\", 1, \"maxconf\" },\n+    { \"listunspent\", 2, \"addresses\" },\n+    { \"getblock\", 1, \"verbose\" },\n+    { \"getblockheader\", 1, \"verbose\" },\n+    { \"gettransaction\", 1, \"include_watchonly\" },\n+    { \"getrawtransaction\", 1, \"verbose\" },\n+    { \"createrawtransaction\", 0, \"transactions\" },\n+    { \"createrawtransaction\", 1, \"outputs\" },\n+    { \"createrawtransaction\", 2, \"locktime\" },\n+    { \"signrawtransaction\", 1, \"prevtxs\" },\n+    { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"sendrawtransaction\", 1, \"allowhighfees\" },\n+    { \"fundrawtransaction\", 1, \"options\" },\n+    { \"gettxout\", 1, \"n\" },\n+    { \"gettxout\", 2, \"include_mempool\" },\n+    { \"gettxoutproof\", 0, \"txids\" },\n+    { \"lockunspent\", 0, \"unlock\" },\n+    { \"lockunspent\", 1, \"transactions\" },\n+    { \"importprivkey\", 2, \"rescan\" },\n+    { \"importaddress\", 2, \"rescan\" },\n+    { \"importaddress\", 3, \"p2sh\" },\n+    { \"importpubkey\", 2, \"rescan\" },\n+    { \"importmulti\", 0, \"requests\" },\n+    { \"importmulti\", 1, \"options\" },\n+    { \"verifychain\", 0, \"checklevel\" },\n+    { \"verifychain\", 1, \"nblocks\" },\n+    { \"keypoolrefill\", 0, \"newsize\" },\n+    { \"getrawmempool\", 0, \"verbose\" },\n+    { \"estimatefee\", 0, \"nblocks\" },\n+    { \"estimatepriority\", 0, \"nblocks\" },\n+    { \"estimatesmartfee\", 0, \"nblocks\" },\n+    { \"estimatesmartpriority\", 0, \"nblocks\" },\n+    { \"prioritisetransaction\", 1, \"priority_delta\" },\n+    { \"prioritisetransaction\", 2, \"fee_delta\" },\n+    { \"setban\", 2, \"bantime\" },\n+    { \"setban\", 3, \"absolute\" },\n+    { \"setnetworkactive\", 0, \"state\" },\n+    { \"getmempoolancestors\", 1, \"verbose\" },\n+    { \"getmempooldescendants\", 1, \"verbose\" },\n+    // Echo with conversion (For testing only)\n+    { \"echojson\", 0, \"arg0\" },\n+    { \"echojson\", 1, \"arg1\" },\n+    { \"echojson\", 2, \"arg2\" },\n+    { \"echojson\", 3, \"arg3\" },\n+    { \"echojson\", 4, \"arg4\" },\n+    { \"echojson\", 5, \"arg5\" },\n+    { \"echojson\", 6, \"arg6\" },\n+    { \"echojson\", 7, \"arg7\" },\n+    { \"echojson\", 8, \"arg8\" },\n+    { \"echojson\", 9, \"arg9\" },\n };\n \n class CRPCConvertTable\n {\n private:\n-    std::set<std::pair<std::string, int> > members;\n+    std::set<std::pair<std::string, int>> members;\n+    std::set<std::pair<std::string, std::string>> membersByName;\n \n public:\n     CRPCConvertTable();\n \n     bool convert(const std::string& method, int idx) {\n         return (members.count(std::make_pair(method, idx)) > 0);\n     }\n+    bool convert(const std::string& method, const std::string& name) {\n+        return (membersByName.count(std::make_pair(method, name)) > 0);\n+    }\n };\n \n CRPCConvertTable::CRPCConvertTable()\n@@ -135,6 +154,8 @@ CRPCConvertTable::CRPCConvertTable()\n     for (unsigned int i = 0; i < n_elem; i++) {\n         members.insert(std::make_pair(vRPCConvertParams[i].methodName,\n                                       vRPCConvertParams[i].paramIdx));\n+        membersByName.insert(std::make_pair(vRPCConvertParams[i].methodName,\n+                                            vRPCConvertParams[i].paramName));\n     }\n }\n \n@@ -152,7 +173,6 @@ UniValue ParseNonRFCJSONValue(const std::string& strVal)\n     return jVal[0];\n }\n \n-/** Convert strings to command-specific RPC representation */\n UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VARR);\n@@ -171,3 +191,28 @@ UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::s\n \n     return params;\n }\n+\n+UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n+{\n+    UniValue params(UniValue::VOBJ);\n+\n+    for (const std::string &s: strParams) {\n+        size_t pos = s.find(\"=\");\n+        if (pos == std::string::npos) {\n+            throw(std::runtime_error(\"No '=' in named argument '\"+s+\"', this needs to be present for every argument (even if it is empty)\"));\n+        }\n+\n+        std::string name = s.substr(0, pos);\n+        std::string value = s.substr(pos+1);\n+\n+        if (!rpcCvtTable.convert(strMethod, name)) {\n+            // insert string value directly\n+            params.pushKV(name, value);\n+        } else {\n+            // parse string as JSON, insert bool/number/object/etc. value\n+            params.pushKV(name, ParseNonRFCJSONValue(value));\n+        }\n+    }\n+\n+    return params;\n+}"
      },
      {
        "sha": "e7cf035d8f396e1354db27f64023d67f2d2fd87a",
        "filename": "src/rpc/client.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/rpc/client.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/rpc/client.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.h?ref=481f289765fab47ff2e0bd7dfb968f2bd92fd608",
        "patch": "@@ -8,7 +8,12 @@\n \n #include <univalue.h>\n \n+/** Convert positional arguments to command-specific RPC representation */\n UniValue RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n+\n+/** Convert named arguments to command-specific RPC representation */\n+UniValue RPCConvertNamedValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n+\n /** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)\n  * as well as objects and arrays.\n  */"
      },
      {
        "sha": "01e4dee55b0f94795172d288f464719ebfaf7ed9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/481f289765fab47ff2e0bd7dfb968f2bd92fd608/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=481f289765fab47ff2e0bd7dfb968f2bd92fd608",
        "patch": "@@ -496,8 +496,10 @@ UniValue echo(const JSONRPCRequest& request)\n {\n     if (request.fHelp)\n         throw runtime_error(\n-            \"echo \\\"message\\\" ...\\n\"\n-            \"\\nSimply echo back the input arguments\\n\"\n+            \"echo|echojson \\\"message\\\" ...\\n\"\n+            \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n+            \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in\"\n+            \"bitcoin-cli and the GUI. There is no server-side difference.\"\n         );\n \n     return request.params;\n@@ -516,6 +518,7 @@ static const CRPCCommand commands[] =\n     /* Not shown in help */\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            true,  {\"timestamp\"}},\n     { \"hidden\",             \"echo\",                   &echo,                   true,  {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n+    { \"hidden\",             \"echojson\",               &echo,                  true,  {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n };\n \n void RegisterMiscRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTdlMmUxNmU0NTMwYmUzMWJmYzY5NmEwOGJkM2QxMjY1ZTZmMjM1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-12-09T17:06:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-10T11:04:54Z"
      },
      "message": "Update RPC argument names",
      "tree": {
        "sha": "8b0581fd980a79ab4c3351c263f3b19a51b09db8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b0581fd980a79ab4c3351c263f3b19a51b09db8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "481f289765fab47ff2e0bd7dfb968f2bd92fd608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/481f289765fab47ff2e0bd7dfb968f2bd92fd608",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/481f289765fab47ff2e0bd7dfb968f2bd92fd608"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 90,
      "deletions": 90
    },
    "files": [
      {
        "sha": "0484204668edd2a1ca8e8b9e1f147248a3579e6b",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -39,8 +39,8 @@ def run_test(self):\n \n         assert_raises_jsonrpc(-8, node.help, random='getinfo')\n \n-        h = node.getblockhash(index=0)\n-        node.getblock(hash=h)\n+        h = node.getblockhash(height=0)\n+        node.getblock(blockhash=h)\n \n         assert_equal(node.echo(), [])\n         assert_equal(node.echo(arg0=0,arg9=9), [0] + [None]*8 + [9])"
      },
      {
        "sha": "5b529d7f2c767243aa1bb48ac216947ef6c9d0fe",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 29,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -232,12 +232,12 @@ UniValue waitforblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"waitforblock <hash> (timeout)\\n\"\n+            \"waitforblock <blockhash> (timeout)\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. hash (string) Block hash to wait for.\\n\"\n-            \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n+            \"1. \\\"blockhash\\\" (required, string) Block hash to wait for.\\n\"\n+            \"2. timeout       (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n@@ -274,12 +274,12 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"waitforblockheight <blockheight> (timeout)\\n\"\n+            \"waitforblockheight <height> (timeout)\\n\"\n             \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n             \"of the current tip.\\n\"\n             \"\\nReturns the current block on timeout or exit.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. block height to wait for (int)\\n\"\n+            \"1. height  (required, int) Block height to wait for (int)\\n\"\n             \"2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n@@ -418,7 +418,7 @@ UniValue getrawmempool(const JSONRPCRequest& request)\n             \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n             \"\\nResult: (for verbose = false):\\n\"\n             \"[                     (json array of string)\\n\"\n             \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n@@ -449,8 +449,8 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n             \"getmempoolancestors txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                   (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n+            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n             \"\\nResult (for verbose=false):\\n\"\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool ancestor transaction\\n\"\n@@ -513,8 +513,8 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n             \"getmempooldescendants txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"                   (string, required) The transaction id (must be in mempool)\\n\"\n-            \"2. verbose                  (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"1. \\\"txid\\\"                 (string, required) The transaction id (must be in mempool)\\n\"\n+            \"2. verbose                  (boolean, optional, default=false) True for a json object, false for array of transaction ids\\n\"\n             \"\\nResult (for verbose=false):\\n\"\n             \"[                       (json array of strings)\\n\"\n             \"  \\\"transactionid\\\"           (string) The transaction id of an in-mempool descendant transaction\\n\"\n@@ -607,10 +607,10 @@ UniValue getblockhash(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"getblockhash index\\n\"\n-            \"\\nReturns hash of block in best-block-chain at index provided.\\n\"\n+            \"getblockhash height\\n\"\n+            \"\\nReturns hash of block in best-block-chain at height provided.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. index         (numeric, required) The block index\\n\"\n+            \"1. height         (numeric, required) The height index\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"hash\\\"         (string) The block hash\\n\"\n             \"\\nExamples:\\n\"\n@@ -691,12 +691,12 @@ UniValue getblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n-            \"getblock \\\"hash\\\" ( verbose )\\n\"\n+            \"getblock \\\"blockhash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n             \"If verbose is true, returns an Object with information about block <hash>.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n-            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+            \"1. \\\"blockhash\\\"          (string, required) The block hash\\n\"\n+            \"2. verbose                (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n             \"\\nResult (for verbose = true):\\n\"\n             \"{\\n\"\n             \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n@@ -1257,12 +1257,12 @@ UniValue preciousblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"preciousblock \\\"hash\\\"\\n\"\n+            \"preciousblock \\\"blockhash\\\"\\n\"\n             \"\\nTreats a block as if it were received before others with the same work.\\n\"\n             \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n             \"\\nThe effects of preciousblock are not retained across restarts.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. hash   (string, required) the hash of the block to mark as precious\\n\"\n+            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as precious\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n@@ -1295,10 +1295,10 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"invalidateblock \\\"hash\\\"\\n\"\n+            \"invalidateblock \\\"blockhash\\\"\\n\"\n             \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. hash   (string, required) the hash of the block to mark as invalid\\n\"\n+            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to mark as invalid\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n@@ -1333,11 +1333,11 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n-            \"reconsiderblock \\\"hash\\\"\\n\"\n+            \"reconsiderblock \\\"blockhash\\\"\\n\"\n             \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n             \"This can be used to undo the effects of invalidateblock.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. hash   (string, required) the hash of the block to reconsider\\n\"\n+            \"1. \\\"blockhash\\\"   (string, required) the hash of the block to reconsider\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n@@ -1372,9 +1372,9 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,  {} },\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,  {} },\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          true,  {} },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true,  {\"hash\",\"verbose\"} },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,  {\"index\"} },\n-    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true,  {\"hash\",\"verbose\"} },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true,  {\"blockhash\",\"verbose\"} },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true,  {\"height\"} },\n+    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true,  {\"blockhash\",\"verbose\"} },\n     { \"blockchain\",         \"getchaintips\",           &getchaintips,           true,  {} },\n     { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true,  {} },\n     { \"blockchain\",         \"getmempoolancestors\",    &getmempoolancestors,    true,  {\"txid\",\"verbose\"} },\n@@ -1386,13 +1386,13 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,  {} },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,  {\"checklevel\",\"nblocks\"} },\n \n-    { \"blockchain\",         \"preciousblock\",          &preciousblock,          true,  {\"hash\"} },\n+    { \"blockchain\",         \"preciousblock\",          &preciousblock,          true,  {\"blockhash\"} },\n \n     /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,  {\"hash\"} },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,  {\"hash\"} },\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true,  {\"blockhash\"} },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true,  {\"blockhash\"} },\n     { \"hidden\",             \"waitfornewblock\",        &waitfornewblock,        true,  {\"timeout\"} },\n-    { \"hidden\",             \"waitforblock\",           &waitforblock,           true,  {\"hash\",\"timeout\"} },\n+    { \"hidden\",             \"waitforblock\",           &waitforblock,           true,  {\"blockhash\",\"timeout\"} },\n     { \"hidden\",             \"waitforblockheight\",     &waitforblockheight,     true,  {\"height\",\"timeout\"} },\n };\n "
      },
      {
        "sha": "422d005f0ceb9449298ea8ffb2bb168601283dde",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -51,7 +51,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbyaccount\", 2, \"include_watchonly\" },\n     { \"getbalance\", 1, \"minconf\" },\n     { \"getbalance\", 2, \"include_watchonly\" },\n-    { \"getblockhash\", 0, \"index\" },\n+    { \"getblockhash\", 0, \"height\" },\n     { \"waitforblockheight\", 0, \"height\" },\n     { \"waitforblockheight\", 1, \"timeout\" },\n     { \"waitforblock\", 1, \"timeout\" },\n@@ -61,7 +61,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendfrom\", 2, \"amount\" },\n     { \"sendfrom\", 3, \"minconf\" },\n     { \"listtransactions\", 1, \"count\" },\n-    { \"listtransactions\", 2, \"from\" },\n+    { \"listtransactions\", 2, \"skip\" },\n     { \"listtransactions\", 3, \"include_watchonly\" },\n     { \"listaccounts\", 0, \"minconf\" },\n     { \"listaccounts\", 1, \"include_watchonly\" },"
      },
      {
        "sha": "91aa7497b352585cb2fba72252a153ed2f472836",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -84,7 +84,7 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n             \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\\n\"\n-            \"2. height     (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n+            \"2. height      (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n             \"\\nResult:\\n\"\n             \"x             (numeric) Hashes per second estimated\\n\"\n             \"\\nExamples:\\n\"\n@@ -153,7 +153,7 @@ UniValue generate(const JSONRPCRequest& request)\n             \"generate nblocks ( maxtries )\\n\"\n             \"\\nMine up to nblocks blocks immediately (before the RPC call returns)\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n             \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -189,8 +189,8 @@ UniValue generatetoaddress(const JSONRPCRequest& request)\n             \"generatetoaddress nblocks address (maxtries)\\n\"\n             \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. address    (string, required) The address to send the newly generated bitcoin to.\\n\"\n+            \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"2. address      (string, required) The address to send the newly generated bitcoin to.\\n\"\n             \"3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -264,10 +264,10 @@ UniValue prioritisetransaction(const JSONRPCRequest& request)\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id.\\n\"\n-            \"2. priority delta (numeric, required) The priority to add or subtract.\\n\"\n+            \"2. priority_delta (numeric, required) The priority to add or subtract.\\n\"\n             \"                  The transaction selection algorithm considers the tx as it would have a higher priority.\\n\"\n             \"                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) \\n\"\n-            \"3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+            \"3. fee_delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\\n\"\n             \"\\nResult:\\n\"\n@@ -717,8 +717,8 @@ UniValue submitblock(const JSONRPCRequest& request)\n             \"The 'jsonparametersobject' parameter is currently ignored.\\n\"\n             \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n \n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexdata\\\"    (string, required) the hex-encoded block data to submit\\n\"\n+            \"\\nArguments\\n\"\n+            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block data to submit\\n\"\n             \"2. \\\"parameters\\\"     (string, optional) object of optional parameters\\n\"\n             \"    {\\n\"\n             \"      \\\"workid\\\" : \\\"id\\\"    (string, optional) if the server provided a workid, it MUST be included with submissions\\n\"\n@@ -781,7 +781,7 @@ UniValue estimatefee(const JSONRPCRequest& request)\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric, required)\\n\"\n             \"\\nResult:\\n\"\n             \"n              (numeric) estimated fee-per-kilobyte\\n\"\n             \"\\n\"\n@@ -814,7 +814,7 @@ UniValue estimatepriority(const JSONRPCRequest& request)\n             \"\\nDEPRECATED. Estimates the approximate priority a zero-fee transaction needs to begin\\n\"\n             \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric, required)\\n\"\n             \"\\nResult:\\n\"\n             \"n              (numeric) estimated priority\\n\"\n             \"\\n\"\n@@ -879,7 +879,7 @@ UniValue estimatesmartpriority(const JSONRPCRequest& request)\n             \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks     (numeric, required)\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"priority\\\" : x.x,    (numeric) estimated priority\\n\""
      },
      {
        "sha": "54d8c3e035916cd8542ed05d39bab1b1c267cab8",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -328,7 +328,7 @@ UniValue verifymessage(const JSONRPCRequest& request)\n             \"verifymessage \\\"address\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n             \"\\nVerify a signed message\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"  (string, required) The bitcoin address to use for the signature.\\n\"\n+            \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the signature.\\n\"\n             \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n             \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "9d89bb2ab61edcc1721b91a5c8f5942e1619feb8",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -471,7 +471,7 @@ UniValue setban(const JSONRPCRequest& request)\n                             \"setban \\\"subnet\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n                             \"\\nAttempts add or remove a IP/Subnet from the banned list.\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"subnet\\\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n+                            \"1. \\\"subnet\\\"       (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\\n\"\n                             \"2. \\\"command\\\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\\n\"\n                             \"3. \\\"bantime\\\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\\n\"\n                             \"4. \\\"absolute\\\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\""
      },
      {
        "sha": "4996eb2a6913058d90daaa3834196572632fee0c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -248,7 +248,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             \"      \\\"txid\\\"     (string) A transaction hash\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"2. \\\"block hash\\\"  (string, optional) If specified, looks for txid in the block with this hash\\n\"\n+            \"2. \\\"blockhash\\\"   (string, optional) If specified, looks for txid in the block with this hash\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n         );\n@@ -358,24 +358,24 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"it is not stored in the wallet or transmitted to the network.\\n\"\n \n             \"\\nArguments:\\n\"\n-            \"1. \\\"transactions\\\"        (string, required) A json array of json objects\\n\"\n+            \"1. \\\"inputs\\\"                (string, required) A json array of json objects\\n\"\n             \"     [\\n\"\n             \"       {\\n\"\n             \"         \\\"txid\\\":\\\"id\\\",    (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n        (numeric, required) The output number\\n\"\n-            \"         \\\"sequence\\\":n    (numeric, optional) The sequence number\\n\"\n-            \"       }\\n\"\n+            \"         \\\"vout\\\":n,         (numeric, required) The output number\\n\"\n+            \"         \\\"sequence\\\":n      (numeric, optional) The sequence number\\n\"\n+            \"       } \\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"outputs\\\"             (string, required) a json object with outputs\\n\"\n+            \"2. \\\"outputs\\\"               (string, required) a json object with outputs\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx   (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the \" + CURRENCY_UNIT + \" amount\\n\"\n-            \"      \\\"data\\\": \\\"hex\\\",     (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n-            \"      ...\\n\"\n+            \"      \\\"address\\\": x.xxx,    (numeric or string, required) The key is the bitcoin address, the numeric value (can be string) is the \" + CURRENCY_UNIT + \" amount\\n\"\n+            \"      \\\"data\\\": \\\"hex\\\"      (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n+            \"      ,...\\n\"\n             \"    }\\n\"\n-            \"3. locktime                (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n+            \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"transaction\\\"            (string) hex string of the transaction\\n\"\n+            \"\\\"transaction\\\"              (string) hex string of the transaction\\n\"\n \n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n@@ -467,7 +467,7 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n             \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n \n             \"\\nArguments:\\n\"\n-            \"1. \\\"hex\\\"      (string, required) The transaction hex string\\n\"\n+            \"1. \\\"hexstring\\\"      (string, required) The transaction hex string\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -535,7 +535,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n             \"decodescript \\\"hexstring\\\"\\n\"\n             \"\\nDecode a hex-encoded script.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"hex\\\"     (string) the hex encoded script\\n\"\n+            \"1. \\\"hexstring\\\"     (string) the hex encoded script\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"asm\\\":\\\"asm\\\",   (string) Script public key\\n\""
      },
      {
        "sha": "4dda480216bddd4b79b77096852e98045a1f93ae",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e7e2e16e4530be31bfc696a08bd3d1265e6f235/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4e7e2e16e4530be31bfc696a08bd3d1265e6f235",
        "patch": "@@ -166,7 +166,7 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"address\\\"   (string) The account bitcoin address\\n\"\n+            \"\\\"address\\\"          (string) The account bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getaccountaddress\", \"\")\n             + HelpExampleCli(\"getaccountaddress\", \"\\\"\\\"\")\n@@ -231,7 +231,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n             \"setaccount \\\"address\\\" \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"  (string, required) The bitcoin address to be associated with an account.\\n\"\n+            \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n@@ -277,7 +277,7 @@ UniValue getaccount(const JSONRPCRequest& request)\n             \"getaccount \\\"address\\\"\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"  (string, required) The bitcoin address for account lookup.\\n\"\n+            \"1. \\\"address\\\"         (string, required) The bitcoin address for account lookup.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"accountname\\\"        (string) the account address\\n\"\n             \"\\nExamples:\\n\"\n@@ -309,10 +309,10 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"  (string, required) The account name.\\n\"\n+            \"1. \\\"account\\\"        (string, required) The account name.\\n\"\n             \"\\nResult:\\n\"\n             \"[                     (json array of string)\\n\"\n-            \"  \\\"address\\\"  (string) a bitcoin address associated with the given account\\n\"\n+            \"  \\\"address\\\"         (string) a bitcoin address associated with the given account\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n@@ -384,17 +384,17 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"  (string, required) The bitcoin address to send to.\\n\"\n-            \"2. \\\"amount\\\"      (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n-            \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n+            \"1. \\\"address\\\"            (string, required) The bitcoin address to send to.\\n\"\n+            \"2. \\\"amount\\\"             (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n+            \"3. \\\"comment\\\"            (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n-            \"4. \\\"comment_to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n+            \"4. \\\"comment_to\\\"         (string, optional) A comment to store the name of the person or organization \\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"transactionid\\\"  (string) The transaction id.\\n\"\n+            \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n@@ -493,7 +493,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n             \"\\nSign a message with the private key of an address\"\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"  (string, required) The bitcoin address to use for the private key.\\n\"\n+            \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -548,7 +548,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             \"getreceivedbyaddress \\\"address\\\" ( minconf )\\n\"\n             \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"  (string, required) The bitcoin address for transactions.\\n\"\n+            \"1. \\\"address\\\"         (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n@@ -803,7 +803,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n-            \"2. \\\"toaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n+            \"2. \\\"toaddress\\\"         (string, required) The bitcoin address to send funds to.\\n\"\n             \"3. amount                (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n@@ -812,7 +812,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             \"                                     to which you're sending the transaction. This is not part of the transaction, \\n\"\n             \"                                     it is just kept in your wallet.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"transactionid\\\"        (string) The transaction id.\\n\"\n+            \"\\\"txid\\\"                 (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSend 0.01 \" + CURRENCY_UNIT + \" from the default account to the address, must have at least 1 confirmation\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01\") +\n@@ -879,11 +879,11 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n             \"    [\\n\"\n-            \"      \\\"address\\\"            (string) Subtract fee from this address\\n\"\n+            \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"transactionid\\\"          (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+            \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSend two amounts to two different addresses:\\n\"\n@@ -997,7 +997,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"address\\\"  (string) A bitcoin address associated with the keys.\\n\"\n+            \"\\\"address\\\"         (string) A bitcoin address associated with the keys.\\n\"\n \n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n@@ -1256,8 +1256,8 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             \"listreceivedbyaddress ( minconf include_empty include_watchonly)\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. include_empty  (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n+            \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n+            \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\"\n@@ -1294,8 +1294,8 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n             \"listreceivedbyaccount ( minconf include_empty include_watchonly)\\n\"\n             \"\\nDEPRECATED. List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n-            \"2. include_empty (bool, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n+            \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n+            \"2. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\\n\"\n \n             \"\\nResult:\\n\"\n@@ -1427,12 +1427,12 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n-            \"listtransactions ( \\\"account\\\" count from include_watchonly)\\n\"\n+            \"listtransactions ( \\\"account\\\" count skip include_watchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"    (string, optional) DEPRECATED. The account name. Should be \\\"*\\\".\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n-            \"3. from           (numeric, optional, default=0) The number of transactions to skip\\n\"\n+            \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. include_watchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n@@ -1557,8 +1557,8 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             \"listaccounts ( minconf include_watchonly)\\n\"\n             \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n-            \"2. include_watchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\\n\"\n+            \"1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n+            \"2. include_watchonly   (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"{                      (json object where keys are account names, and values are numeric balances\\n\"\n             \"  \\\"account\\\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\\n\"\n@@ -1636,8 +1636,8 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"blockhash\\\"   (string, optional) The block hash to list transactions since\\n\"\n-            \"2. target_confirmations:   (numeric, optional) The confirmations required, must be 1 or more\\n\"\n+            \"1. \\\"blockhash\\\"            (string, optional) The block hash to list transactions since\\n\"\n+            \"2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n             \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -1729,8 +1729,8 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             \"gettransaction \\\"txid\\\" ( include_watchonly )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n-            \"2. \\\"include_watchonly\\\"   (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n+            \"1. \\\"txid\\\"                  (string, required) The transaction id\\n\"\n+            \"2. \\\"include_watchonly\\\"     (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -2475,7 +2475,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\"\n                             \"\\nArguments:\\n\"\n                             \"1. \\\"hexstring\\\"           (string, required) The hex string of the raw transaction\\n\"\n-                            \"2. options               (object, optional)\\n\"\n+                            \"2. options                 (object, optional)\\n\"\n                             \"   {\\n\"\n                             \"     \\\"changeAddress\\\"     (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n                             \"     \\\"changePosition\\\"    (numeric, optional, default random) The index of the change output\\n\"\n@@ -2628,7 +2628,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"from\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\"} },\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },"
      }
    ]
  }
]