laanwj,2016-09-26T15:35:28Z,"This is useful because a lot of features add new arguments to an existing call. For example #8751.\n\nCurrently the user of the API has to explicitly specify defaults for the intermediate arguments. With named arguments this would no longer be necessary.\n\nIt could also help clean up the API for calls that already have a lot of optional arguments such as `sendtoaddress`, or at least make it easie",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-249606511,249606511,
MarcoFalke,2016-10-02T11:16:48Z,"The only alternative I see would be to only accept one object as first positional argument for all methods, but this will likely never happen, so Concept ACK.\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-250966251,250966251,
jonasschnelli,2016-10-10T10:32:44Z,"Concept ACK. I think this is very useful.\nACK to extend it to `bitcoin-cli`, to the other rpc tables and to the RPC value conversions table.\n\nAfter this, we should update the documents (and RPC help examples) to slowly move away from recommending fixed position arguments.\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-252582482,252582482,
laanwj,2016-10-10T14:02:58Z,Rebased to get rid of the univalue change\n,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-252630068,252630068,
laanwj,2016-10-25T14:58:54Z,"Needed rebase, rebased\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-256060105,256060105,
afk11,2016-11-08T13:37:40Z,"Concept ACK, needs rebase\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-259137932,259137932,
laanwj,2016-11-15T09:31:16Z,"Rebased, added @instagibbs' test and fix.\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-260591308,260591308,
mrbandrews,2016-11-15T14:03:21Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-260649057,260649057,
sipa,2016-11-15T18:12:37Z,Concept ACK!\n\nDo you intend to include the echo command in the final merge?\n,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-260720295,260720295,
laanwj,2016-11-16T06:54:03Z,@sipa I've had use for it two times in testing - here and in #7783. Also I fathom it's somewhat useful for users when testing JSON RPC libraries. So my preference would be to keep it.\n,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-260868584,260868584,
instagibbs,2016-11-18T00:06:41Z,utACK https://github.com/bitcoin/bitcoin/pull/8811/commits/3c7647ea7814f7d3f0304bb4b39274c748a88900\n,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-261409874,261409874,
laanwj,2016-11-21T13:52:03Z,"As there is interest in this I'm continuing work on the issues that are still open in the OP. \nI've pushed argument naming for `mining`, `net`, `rawtransaction` and `wallet`, which completes it for all calls. I'll also make it possible to use named arguments with `bitcoin-cli`.\nI'll leave the GUI change for another time though.",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-261943609,261943609,
laanwj,2016-11-22T14:22:18Z,"Added support to bitcoin-cli. This should complete the feature set for this pull. I'd appreciate testing and review.\n\nEspecially important to review are the parameter names in the RPC tables, as they will become part of the API:\n\n- https://github.com/laanwj/bitcoin/blob/2016_09_rpc_named_arguments/src/rpc/server.cpp#L275\n- https://github.com/laanwj/bitcoin/blob/2016_09_rpc_named_argument",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-262252906,262252906,
luke-jr,2016-11-26T05:28:38Z,"Why is there a ""wtxid"" ever needed as a param? ""txhash"" and ""txid"" are all I see existing at all (hash != txid).",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263045298,263045298,
luke-jr,2016-11-26T05:32:08Z,I think a lot of the options params ought to be flattened?,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263045394,263045394,
laanwj,2016-11-26T05:38:09Z,"> I think a lot of the options params ought to be flattened?\n\nPossibly. Not in this pull, though. JSON can perfectly deal with nested structures. Also this would break backwards compatibility, unlike anything in this pull.",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263045571,263045571,
theuni,2016-11-26T06:49:17Z,"@luke-jr Sure, txhash/txid. I was only making the point that going forward there will be a distinction between those, so it'd be good to make sure that all ""txid"" params here really mean txid.",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263047904,263047904,
luke-jr,2016-11-26T07:14:44Z,"@laanwj If this pull is merged as-is, then flattening the options will involve breaking backward compatibility with this, no? ie, it may be better to just not allow for already-named options at all right now.",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263048750,263048750,
laanwj,2016-11-26T08:57:03Z,"I pushed cfields' rename suggestions, and compiled statistics on what argument names are used in which calls. This could be helpful in determining further unifications:\n```\n""absolute"",          // setban\n""account"",           // addmultisigaddress getaccountaddress getaddressesbyaccount getbalance getnewaddress getreceivedbyaccount listtransactions setaccount\n""address"",           // generat",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263052377,263052377,
laanwj,2016-11-26T11:08:39Z,"This looks like a good candidate for unification. Any opinions on ""hexdata"" versus ""hexstring""?\n```\n""hexdata"",           // submitblock\n""hexstring"",         // decoderawtransaction decodescript sendrawtransaction signrawtransaction fundrawtransaction\n```",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263057588,263057588,
luke-jr,2016-11-26T11:40:10Z,"@laanwj GBT/submitblock probably shouldn't accept named parameters at all, since they are according to BIPs...?",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263058828,263058828,
laanwj,2016-11-26T12:10:19Z,"You don't *have* to use named arguments. For consistency I prefer all calls\nto have the possibility to have their arguments named, though.\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-263060055,263060055,
laanwj,2016-12-02T04:24:50Z,"Rebased for #9144, squashed (into logically separate commits)",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-264370417,264370417,
MarcoFalke,2016-12-02T17:38:38Z,I think travis wants you to include stdexcept,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-264513851,264513851,
laanwj,2016-12-05T18:29:53Z,"Good point about the negative values. Hadn't thought about that. Same will\nhold for string values that start with '-', such as labels. Any argument\ncould have been meant as literal value.\n\nThinking of it this could even be a security issue. Say someone controls\nthe first argument to a call, they could now instead provide the second by\nusing, say --amount=123.\n\n It should be made ex",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-264935466,264935466,
theuni,2016-12-06T06:09:10Z,@laanwj +1 for explicit,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265069262,265069262,
sipa,2016-12-06T06:34:05Z,"The issue only exists for string arguments, as anything else would be invalid JSON anyway.\n\nAlso, I have a slight preference for `bitcoin-cli getblock hash=X` over `bitcoin-cli getblock -hash=X`... it feels like the latter is an option to `bitcoin-cli` rather than `getblock` (but feel free to ignore this if I'm alone with that opinion).",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265072599,265072599,
laanwj,2016-12-06T06:40:00Z,"> The issue only exists for string arguments, as anything else would be invalid JSON anyway.\n\nYes, only a problem for string arguments and negative numbers. But unfortunately that's enough to make it irresponsible to 'guess'.\n\n> Also, I have a slight preference for bitcoin-cli getblock hash=X over bitcoin-cli getblock -hash=X... it feels like the latter is an option to bitcoin-cli rather t",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265073423,265073423,
theuni,2016-12-06T06:45:02Z,"Worth mentioning how subarg syntax is handled by other familiar progs:\n\ngit:```./bitcoin-cli -testnet -- --hash=X```\nor\ngdb: ```./bitcoin-cli -testnet --args --hash=X```",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265074094,265074094,
sipa,2016-12-06T06:57:36Z,"Another idea: named arguments have to precede the command (so `bitcoin-cli -hash=X getblock`), that's never ambiguous.",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265075847,265075847,
laanwj,2016-12-06T07:51:22Z,"> ./bitcoin-cli -testnet -- --hash=X\n> ./bitcoin-cli -testnet --args --hash=X\n\nI like supporting at least one of those. Mind that the `--`/`--args` delimiter has to be *before* the command for it to be nonambigious, otherwise it may be a legitimate string argument.\n\n> Another idea: named arguments have to precede the command (so bitcoin-cli -hash=X getblock), that's never ambiguous.\n\",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265083688,265083688,
sipa,2016-12-06T07:54:09Z,"> Sure, but then they can collide with bitcoin-cli's own arguments, which we were trying to avoid at the same time. It will be tricky to figure out what arguments to send to the server and which ones to keep for ourselves, and may change per version.\n\nThat can be avoided by using `hash=X` style naming ;)\n\n> But even if we manage to get that sorted out, it looks like ""putting the cart befor",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265084145,265084145,
jnewbery,2016-12-06T10:13:19Z,"I agree with the explicit `bitcoin-cli -named {method} -arg1=val1 -arg2=val2 ...` syntax. It guarantees backwards compatibility for any applications that are calling into bitcoin-cli with the current positional argument syntax.\n\nIf we're explicitly specifying that the arguments are named, then we could even drop the dashes before the argument names, ie `bitcoin-cli -named {method} arg1=val1 ar",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265111615,265111615,
laanwj,2016-12-06T11:30:37Z,"> If we're explicitly specifying that the arguments are named, then we could even drop the dashes before the argument names, ie bitcoin-cli -named {method} arg1=val1 arg2=val2 ...\n\nThat's what @sipa is suggesting too. Seems fine to me *if* we can be sure that there are no shells that eat these. I've only seen the syntax used for passing arguments to make/configure  and always assumed it was se",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265127449,265127449,
theuni,2016-12-06T12:24:44Z,"@laanwj Not sure if you were just using configure/make as an example, but in those cases anyway, those assignments are separate from environment vars.\n\nThat's why, for ex, ```CC=clang ./configure``` != ```./configure CC=clang```. The first sets env vars that aren't necessarily persistent to the resulting builds unless the user persists them explicitly in the shell. The second allows configure ",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265137513,265137513,
sipa,2016-12-06T19:01:20Z,@laanwj `dd` and `bitcoin-tx` also use key=value.,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265240089,265240089,
morcos,2016-12-06T20:54:28Z,"concept ACK\nI will review more thoroughly after update\n\nI think I have a slight preference for eliminating the dashes\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265269055,265269055,
laanwj,2016-12-08T11:04:23Z,"- Dashes have been successfully eliminated. New syntax:\n\n```\n     $ src/bitcoin-cli -testnet -named echo arg0=""dfdf""\n     [\n     ""dfdf""\n     ]\n```\n\nArgument conversion also works, for arguments thus flagged in the table in\n`src/rpc/client.cpp`.\n\n```\n    $ src/bitcoin-cli -testnet -named echojson arg0=""[1,2,3]""\n    [\n      [\n        1,\n        2,\n        3\n    ",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-265714367,265714367,
jnewbery,2016-12-09T17:08:44Z,"I've spent some time looking through the RPC arguments, and my view is that the following argument names should be changed to be more descriptive:\n\n- `getblock/index` becomes `getblock/height` to conform with `waitforblockheight` and `getnetworkhashps`\n- `createrawtransaction/transactions` becomes `createrawtransaction/inputs` to conform with `createrawtransaction/outputs`\n- `listtransacti",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-266067278,266067278,
laanwj,2016-12-12T12:15:22Z,"@jnewbery Sounds good to me, thanks, will cherry-pick that.",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-266417306,266417306,
jnewbery,2016-12-12T14:59:14Z,"Oops - I didn't change the named arguments in rpcnamedargs.py to match the new argument names.\n\nFix is here: https://github.com/jnewbery/bitcoin/commit/d45ef7c02cf682f59f129b2af5df064270b20e03",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-266452071,266452071,
laanwj,2016-12-14T09:16:13Z,@jnewbery Thanks - cherry-picked and squashed into the last commit.,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-266982891,266982891,
laanwj,2016-12-19T09:15:27Z,Rebased for a small add/add conflict in `rpc-tests.py`.,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-267916494,267916494,
laanwj,2017-01-05T10:34:07Z,Rebased for minor argument documentation conflict.,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-270613693,270613693,
sipa,2017-01-07T23:28:23Z,"utACK 65bf5d27c578e7560128a28af08fef57135ec841.\n\nI have not read through the test code in detail, nor verified whether the RPC help names match the named arguments in the server and client tables. I have also not checked the consistency of the chosen names (but I don't care strongly). I have played around briefly with the new `echo` and `echojson` commands and they seem to work as expected.",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-271117540,271117540,
laanwj,2017-01-10T11:06:02Z,"Fixed @bluematt's documentation nit and removed the `_`/`-` interchangeability for option names, and squashed. Should be ready for merge now if travis passes.\n",https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-271548050,271548050,
jtimon,2017-01-10T17:46:41Z,Concept ACK (I'm surprised I didn't do it before).,https://github.com/bitcoin/bitcoin/pull/8811#issuecomment-271645459,271645459,
MarcoFalke,2016-10-02T11:06:48Z,"In the OP you are linking to the ""JSON-RPC 2.0 Specification"", which states\n\n> jsonrpc\n>     A String specifying the version of the JSON-RPC protocol. MUST be exactly ""2.0"".\n\nCan you explain why you keep this at 1.1?\n",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r81468409,81468409,qa/rpc-tests/test_framework/authproxy.py
laanwj,2016-10-02T11:20:40Z,"May make sense to change it to that (even irrespective of this pull) however I'm not sure that we support the entire 2.0 standard, so that may involve other changes too.\n",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r81468561,81468561,qa/rpc-tests/test_framework/authproxy.py
instagibbs,2016-11-01T14:50:17Z,"after this loop `hole` should be reset to 0, otherwise holes will be repeated for every subsequent entry?\n",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r85943516,85943516,src/rpc/server.cpp
instagibbs,2016-11-01T14:52:09Z,what does fr stand for?\n,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r85943871,85943871,src/rpc/server.cpp
instagibbs,2016-11-01T14:55:37Z,"may want to add test of [exist, hole, exist, exist] to catch gap repeat error\n",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r85944558,85944558,qa/rpc-tests/rpcnamedargs.py
mrbandrews,2016-11-14T17:05:31Z,find returnvalue?  Just a guess.\n,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r87845118,87845118,src/rpc/server.cpp
mrbandrews,2016-11-14T17:07:18Z,"I added the test: \nassert_equal(node.echo(arg0=0,arg3=3,arg9=9), [0] + [None]_2 + [3] + [None]_5 + [9])\nVerified that with the code as is it fails, but with instagibbs fix of hole=0 it succeeds. \n",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r87845478,87845478,qa/rpc-tests/rpcnamedargs.py
laanwj,2016-11-15T09:31:00Z,"Yes, good catch, thanks!\n",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r87977216,87977216,src/rpc/server.cpp
theuni,2016-11-25T21:12:04Z,"This is referred to as ""address"" in the help",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89657352,89657352,src/rpc/misc.cpp
theuni,2016-11-25T21:12:16Z,same,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89657359,89657359,src/rpc/misc.cpp
theuni,2016-11-25T21:18:13Z,"maybe these should be ""address"" rather than ""node"", so that in the future we can differentiate? (nodeid, subnet, etc)",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89657634,89657634,src/rpc/net.cpp
theuni,2016-11-25T21:25:04Z,probably better to call this subnet,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89657946,89657946,src/rpc/net.cpp
theuni,2016-11-25T21:36:23Z,unify nblocks/numblocks?,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89658355,89658355,src/rpc/mining.cpp
theuni,2016-11-25T22:18:34Z,should probably make sure that ```!name.empty() && !value.empty()``` for good measure.,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89659796,89659796,src/rpc/client.cpp
theuni,2016-11-25T22:58:16Z,"Mixing args here with GetBoolArg/GetArg is a little scary. If some command took a (for example) ""-version=foo"" argument, I believe it would be swallowed by line 81 instead?",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89660995,89660995,src/bitcoin-cli.cpp
laanwj,2016-11-26T05:32:41Z,"ParseParameters stops at the first argument that doesn't start with `-`, which happens to be the command. This starts after the command. So unless I miss something they will never interfere.",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89666033,89666033,src/bitcoin-cli.cpp
laanwj,2016-11-26T05:34:46Z,"In that case it should do the expected thing: send an empty name or value.\nAn empty value is perfectly acceptable if you want to send an empty string.\nAn empty name is a bit strange, agreed, but it gets caught server-side as an unknown argument.",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89666056,89666056,src/rpc/client.cpp
laanwj,2016-11-26T05:37:18Z,"'address' is already used for bitcoin addresses, so I'd prefer not overloading that for network addresses. Other suggestions are welcome, though",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89666083,89666083,src/rpc/net.cpp
laanwj,2016-11-26T05:39:33Z,"address/privkey/pubkey usage is made consistent in a later commit:\nhttps://github.com/bitcoin/bitcoin/pull/8811/commits/8b6fd17692b0a402858ef313d6b15e0d086db2c2",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89666110,89666110,src/rpc/misc.cpp
laanwj,2016-11-26T05:39:45Z,Will do,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89666112,89666112,src/rpc/net.cpp
laanwj,2016-11-26T05:39:51Z,Will do,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89666114,89666114,src/rpc/mining.cpp
theuni,2016-11-26T06:45:21Z,"Ah, that's the part I was missing, thanks. Maybe a comment to that effect to remind me next time I have to ask? :)",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89666834,89666834,src/bitcoin-cli.cpp
laanwj,2016-11-26T09:09:28Z,Added a comment :),https://github.com/bitcoin/bitcoin/pull/8811#discussion_r89668397,89668397,src/bitcoin-cli.cpp
jnewbery,2016-12-05T15:48:13Z,needs to be `std::runtime_error` since we're not using namespace std,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r90891244,90891244,src/bitcoin-cli.cpp
jnewbery,2016-12-05T16:00:23Z,"I believe this breaks passing in negative numbers as a positional argument. For example, the following cli command is valid prior to this commit:\n\n`bitcoin-cli getnetworkhashps -1`\n\nand returns the estimated network hashes per second in the current difficulty window. After this commit, the method fails:\n\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ bitcoin-cli getnetworkhashps -1\nerror:",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r90894145,90894145,src/bitcoin-cli.cpp
jnewbery,2016-12-05T23:29:47Z,should be nblocks,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r90980630,90980630,src/rpc/client.cpp
laanwj,2016-12-06T06:40:54Z,will rename it,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r91019924,91019924,src/rpc/client.cpp
laanwj,2016-12-06T06:41:15Z,"no longer, no",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r91019951,91019951,src/bitcoin-cli.cpp
TheBlueMatt,2017-01-08T01:27:27Z,"Because univalue does not check for duplicate keys, things are a bit weird. I'm not sure if there's much that this PR could/should do about this, but as long as we're adding more user-provided-json-parsing stuff I thought I'd mention it.",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95069551,95069551,src/rpc/server.cpp
TheBlueMatt,2017-01-08T17:36:09Z,"Docs here still say ""blockheight"" for one-line help but height for multi-line.",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95084461,95084461,src/rpc/blockchain.cpp
TheBlueMatt,2017-01-08T18:17:26Z,Why?,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95085202,95085202,src/rpc/client.cpp
laanwj,2017-01-09T06:57:21Z,Almost no JSON implementation checks for duplicate keys. The usual behavior is that the last value assigned to the key takes precedence. I think that will happen here?,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95107579,95107579,src/rpc/server.cpp
laanwj,2017-01-09T06:58:27Z,This was useful when the syntax was -arg=value. I guess it no longer really is now that plain name=value pairs are used.,https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95107679,95107679,src/rpc/client.cpp
laanwj,2017-01-09T06:58:37Z,"OK, will make that consistent.",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95107724,95107724,src/rpc/blockchain.cpp
TheBlueMatt,2017-01-09T17:02:40Z,"Yes, I believe the last one will take precedence. I'm ok with not fixing this, but it seems super strange.",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95198148,95198148,src/rpc/server.cpp
laanwj,2017-01-10T11:00:06Z,"Well if it's any guide, python's JSON behaves exactly the same:\n```\n>>> json.loads('{""a"":""b"",""a"":""C""}')\n{'a': 'C'}\n```\nWhat I would not mind is checking at the client side for duplicate arguments, as a user friendly feature, but I'm not going to do it in this pull.",https://github.com/bitcoin/bitcoin/pull/8811#discussion_r95341492,95341492,src/rpc/server.cpp
