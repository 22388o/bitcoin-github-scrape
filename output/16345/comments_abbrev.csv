emilengler,2019-07-05 22:12:26,"@fqlx Actually I do not think it is a good idea to move `int verbosity` to something else.\nThis could break the API backwards compatibility, maybe some 3rd party APIs are working with negative numbers for the verbosity. If we would use an unsigned variable it would cause an overflow and then the output would be the opposite",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508871580,508871580,
emilengler,2019-07-05 22:33:23,@fqlx I made some changes you've suggested.,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508873921,508873921,
fqlx,2019-07-05 22:42:52,Can you add tests?,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508874932,508874932,
emilengler,2019-07-05 22:52:29,I don't see the need for a test for such a function.,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508875950,508875950,
promag,2019-07-05 23:10:23,"@emilengler every change should have a test, especially a new RPC. Also in this case you should a release note too.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508877749,508877749,
fqlx,2019-07-05 23:30:01,The tests are good not only to increase confidence in our codebase but to also show a working example how to use it. The code will used by 1000s of people ,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508879553,508879553,
achow101,2019-07-06 05:15:24,"> I don't see the need for a test for such a function.\n\nThere should be at least a basic test that checks `getblockbyheight(height)` is consistent with `getblock(getblockhash(height))`",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508898106,508898106,
achow101,2019-07-06 05:29:05,"Concept ACK\n\nfailing a linter:\n\n```\nThis diff appears to have added new lines with trailing whitespace.\nThe following changes were suspected:\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\n@@ -942,0 +943,97 @@ static UniValue getblock(const JSONRPCRequest& request)\n+\n+\n^---- failure generated from test/lint/lint-whitespace.sh\n```",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508898725,508898725,
emilengler,2019-07-06 13:30:59,"@fqlx @promag @achow101 \nTest added, can someone take a look at it?",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508926760,508926760,
promag,2019-07-06 14:59:05,"I can't unresolve https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833726, but please address my comment there.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508932427,508932427,
emilengler,2019-07-06 17:18:13,@promag I pushed a new commit which fix this and unresolved the conversation.,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-508941343,508941343,
emilengler,2019-07-09 17:10:10,"@fanquake Thank you for writing such an informative comment!\nI have fixed to compilation errors and squashed to commits.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-509727480,509727480,
emilengler,2019-07-09 19:43:42,I've also updated the commit messages with the rpc prefix,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-509780431,509780431,
instagibbs,2019-07-10 17:49:44,"> I don't see the need for a test for such a function.\n\nIs how we get RPC bugs into releases :D \n\nconcept ACK ",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510162511,510162511,
emilengler,2019-07-11 17:00:00,"Why does travis starts responding with errors?\nThe codebase hasn't changed",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510569594,510569594,
abitfan,2019-07-12 10:40:54,"Concept ACK\nNACK for another rpc call. The reason #8457 was rejected was due to overloading APIs however this is invalidated by the existence of getblockstats.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510840305,510840305,
emilengler,2019-07-12 17:35:39,@abitfan See #16317,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510970526,510970526,
emilengler,2019-07-12 18:45:04,"Seems that travis failed again, I will check the code again",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-510992631,510992631,
emilengler,2019-07-12 21:18:05,Finally Travis has succeeded. I will do some small changes to the code which were suggested above and then this can be merged I think.,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511036416,511036416,
jonasschnelli,2019-07-12 21:36:00,"What is wrong with `getblock(getblockhash(<height>))`?\nIs the intention of this PR to increase fetch performance by height?",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511041222,511041222,
emilengler,2019-07-12 21:39:52,@jonasschnelli Such a feature get requested a lot,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511042233,511042233,
DrahtBot,2019-07-13 05:05:37,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16728](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16728.html) (move-only: move coins statistics utils out ",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511089299,511089299,
ajtowns,2019-07-16 15:16:48,"> An alternative to overloading `hash` in `getblock` is to add an extra parameter to `getblock`, like:\n> \n> ```\n> getblock hash ( height )\n> ```\n> \n> Then:\n> \n>     * if `hash` is null then use height\n> \n>     * if both are set then they must match.\n> \n> \n> This would look good if called with named parameter `getblock(height=20)`.\n\nI think I agree with this -- here's ",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511861339,511861339,
jonasschnelli,2019-07-16 15:32:07,"I'm unsure about this. Overlapping features for a machine-2-machine API (our RPC API) seems non-ideal to me.\nIMO `getblockhash` (or `/rest/blockhashbyheight`) is the one call that deals with heights.\n\nI would accept the argument that performance is an issue (since one needs to execute two calls for getting a block at a certain height),... but since the RPC interface with its JSON overhead is",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-511867759,511867759,
emilengler,2019-07-17 15:30:55,"@jonasschnelli #16317 \nThe feature get requested a lot (around once or twice per semester).\nI think it should be added to to lots of requests.\nIt wouldn't make in terms of speed such a difference.\nIt is even slower to first call getblockhash and then getblock",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512331736,512331736,
promag,2019-07-17 15:40:28,"@emilengler note that this call can't be cached whereas getblock by hash can.\n\n> I think it should be added to to lots of requests.\n\nWhat you mean?\n\n> It is even slower to first call getblockhash and then getblock\n\nDo you have numbers to prove this? I suspect it is far from being a bottleneck.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512335808,512335808,
emilengler,2019-07-17 15:44:00,"@promag First there was a type sorry\nI meant:\n_I think it should be added due to lots of requests._\n\nTo the second point: I don't have numbers to prove it but I'm very sure that 2 separate calls are slower.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512337339,512337339,
promag,2019-07-17 15:53:29,"I know it's slower, but how much? How much this saves?",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512341362,512341362,
sipa,2019-07-17 16:45:11,"I don't think speed is a good rationale for this PR. If speed was really a concern, you wouldn't be using Bitcoin Core RPCs in the first place.\n\nThe only real reason to want this is convenience. I'm sure that's the real reason this is often requested, and I'm mildly in favor of it because of that.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512361535,512361535,
MarcoFalke,2019-07-17 17:16:52,"See also "" GUI: Add generate method #16000 "".\n\nBasically it would be nice to have a way to set aliases like `generate=generatetoaddress(getnewaddress())` or `getblockbyheight=getblock(getblockhash($1))`.  This is really easy if you call the rpc from bash or python, but not when calling from the gui.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512414974,512414974,
ajtowns,2019-07-18 01:05:19,"> The only real reason to want this is convenience.\n\nHow about just treating a blockhash `""@123""` as a request of the block at height 123, rather than an error for not being 64 hex digits? That's pretty convenient for manual use from the cli and gui, and pretty easy to code (and thus to do for other RPCs that want a block hash):\n\n    $ bitcoin-cli -regtest getblock $(bitcoin-cli -regtest g",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512624370,512624370,
emilengler,2019-07-18 15:42:23,@ajtowns I think it is better to have a seperate command for this. This could cause confusion,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512871611,512871611,
promag,2019-07-18 15:49:18,"Concept NAK from me sorry, please provide benchmarks to support the new RPC - which IMO is the only valid reason to add redundancy to the RPC interface.",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512874508,512874508,
emilengler,2019-07-18 19:51:44,This would make it even faster to get a block just by its height. Currently you need to execute two separate commands which is slower and more complicated in two ways: For the machine and for the user and such a feature get requested a lot,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-512962108,512962108,
promag,2019-07-18 21:52:04,"I went ahead and made a quick profile:\n```py\ncount = 5000\nnode.generate(count)\n\nfor i in range(count):\n    node.getblock(self.nodes[0].getblockhash(i))\n\n# takes ~ 3742ms\n\nfor i in range(count):\n    node.getblockbyheight(i)\n\n# takes ~ 2193ms\n```\nNote that it fetches 5000 blocks but these are really small blocks and you should try with bigger blocks - I think it will ma",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-513002784,513002784,
emilengler,2019-07-19 15:34:42,@promag Thanks for doing the test but it is even faster for the user to type the command,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-513275025,513275025,
emilengler,2019-07-20 13:06:55,"Currently there are:\n3 ACKs\n1 NACK",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-513466136,513466136,
ajtowns,2019-07-23 05:14:01,"> Note that it fetches 5000 blocks but these are really small blocks and you should try with bigger blocks - I think it will make a difference in the comparison - I mean `getblockbyheight` would just be slightly faster.\n\nIt looks like even with bigger blocks avoiding the two RPCs is a fair bit faster:\n\n```\n$ time for a in `seq 400000 400500`; do bitcoin-cli getblock $(bitcoin-cli getbloc",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-514057030,514057030,
ajtowns,2019-07-23 09:15:04,"> @emilengler note that this call can't be cached whereas getblock by hash can.\n\nStrictly speaking, ""getblock(hash)"" can't be cached either, because it includes a ""confirmations"" key which changes every time a new block gets mined",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-514125792,514125792,
jnewbery,2019-07-30 15:42:14,"I'm a mild concept NACK and an approach NACK on this.\n\n- mild concept NACK: unless there's a very compelling reason, I don't think the RPC interface should offer redundant ways to do the same thing. Increasing the surface area of the RPC interface increases the maintenance burden, so we should try to keep it minimal wherever possible.\n- approach NACK: this approach duplicates a lot of code, ",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-516476034,516476034,
ryanofsky,2019-07-31 14:28:11,"@emilengler re: your question in IRC\n\n> [01:04:54] \<emilengler> How the CTRL+L shortcut is being handled in bitcoin-qt? Over a QAction or a QShortcut?\n\nIt's just a property of the clear button https://github.com/bitcoin/bitcoin/blob/3f288a1c05ebcadd7d7709f81c77921ff9e27ba2/src/qt/forms/debugwindow.ui#L564-L566\n",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-516873288,516873288,
emilengler,2019-07-31 18:36:44,"@ryanofsky Thank you, already got this :)\nBut I don't think this is the right place to discuss this.\nAn IRC direct message had done the same",https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-516969568,516969568,
luke-jr,2019-08-19 23:47:59,Concept NACK. getblock(getblockhash(1)) is simple enough.,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-522796363,522796363,
emilengler,2019-08-20 14:29:03,@luke-jr It probably is but in my opinion it isn't really shown that using RPC commands as parameters is possible (at least I didn't saw something like this),https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-523041051,523041051,
DrahtBot,2019-08-27 17:44:36,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-525409246,525409246,
emilengler,2019-10-14 15:27:53,Closed because of lack of interest and merging conflicts,https://github.com/bitcoin/bitcoin/pull/16345#issuecomment-541747028,541747028,
fqlx,2019-07-05 20:03:38,Not needed curly ,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300786226,300786226,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:06:02,Use the same curly brace formatting. Either all on the same line or all new line.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300786641,300786641,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:08:26,No assignment?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300787061,300787061,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:18:20,Very strange params[1] is a union of a number and bool. I'm skeptical of this because it will cause more bugs down the line. ,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300788723,300788723,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:21:12,Why no check for param[0].isNull()?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789152,300789152,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:21:58,Place this assignment below the throw when checking pblockindex,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789254,300789254,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:22:39,Add the hash to the throw so we can debug why this statement would have failed ,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789355,300789355,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:24:07,Will std::string be converted to the univalue object? Do we need to cast to a JSON object?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789607,300789607,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:26:40,There is no documentation for when verbosity is less than 0. I don't think it can ever be? Should verbosity be an unsigned int or enum?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300789988,300789988,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:30:44,"This verbosity level logging should be an enum of constants to help read instead of magic numbers.\n\ne.g. `int verbosity = LEVEL1_BLOCKHEIGHT`",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300790639,300790639,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:31:12,I can't tell if this returns negative or >3,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300790722,300790722,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:33:56,If help is null this toString will cause undefined behavior,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300791155,300791155,src/rpc/blockchain.cpp
fqlx,2019-07-05 20:34:36,Can you add what block/parameter that is not found for debugging,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300791292,300791292,src/rpc/blockchain.cpp
emilengler,2019-07-05 21:14:59,The code is mostly a fork from the getblock function which means that I copied this from this function as well but I personally think that this issue is a topic for another pull request.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300797511,300797511,src/rpc/blockchain.cpp
sipa,2019-07-05 21:21:03,"The developer guidelines state that for new code, following the specified coding style is preferable. The only exception is commits which just move code around. See https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300798341,300798341,src/rpc/blockchain.cpp
emilengler,2019-07-05 21:47:54,"What do you mean by isNull?\nIf the param is empty or if the user has selected block zero, which is a valid block",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300801699,300801699,src/rpc/blockchain.cpp
emilengler,2019-07-05 21:51:46,Nope verbosity cannot be less than zero,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802179,300802179,src/rpc/blockchain.cpp
emilengler,2019-07-05 21:53:56,"Agree, a legacy of getblock",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802444,300802444,src/rpc/blockchain.cpp
emilengler,2019-07-05 21:57:15,The input is an integer and the various types of verbosity are magic numbers.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802822,300802822,src/rpc/blockchain.cpp
emilengler,2019-07-05 21:57:35,How?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802858,300802858,src/rpc/blockchain.cpp
emilengler,2019-07-05 21:57:43,Sure,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300802885,300802885,src/rpc/blockchain.cpp
fqlx,2019-07-05 22:02:13,Can we remove this check for less than zero and change verbosity to an unsigned short or preferably an enum of constants 0-3?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300803375,300803375,src/rpc/blockchain.cpp
fqlx,2019-07-05 22:25:28,Yes but we only have 4 types. 0-3. It could be an enum,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300805732,300805732,src/rpc/blockchain.cpp
fqlx,2019-07-05 22:47:54,"\n`<= -1` should be `== BLOCK_DOESNT_EXIST` and define block doesn't exist to -1. I would also bet this constant is define in a header already. Find it please. We also can't have negative blocks so no need to check for less than -1.\n",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300807641,300807641,src/rpc/blockchain.cpp
fqlx,2019-07-06 00:39:58,"Hi - I may have made a mistake here.  It seems like the curly brace is needed to acquire tsc_main scope lock here. I'm not very familiar with this feature.\n\nSee: https://github.com/bitcoin/bitcoin/pull/16285#discussion_r300809662",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300814190,300814190,src/rpc/blockchain.cpp
sipa,2019-07-06 02:24:17,@fqlx You seem very confused. The opening brace isn't needed to acquire the `cs_main` lock; It's to make the lock be released after the `GetBlockChecked` call. We want to minimize the time the lock is held for responsivity reasons.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300817268,300817268,src/rpc/blockchain.cpp
achow101,2019-07-06 05:12:20,`<<` is the correct operator to serialize an object to a stream.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820535,300820535,src/rpc/blockchain.cpp
achow101,2019-07-06 05:13:21,`std::string` is a valid `UniValue` object and is used in many other RPCs.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820557,300820557,src/rpc/blockchain.cpp
achow101,2019-07-06 05:23:10,"IIRC it is undefined behavior to cast an `int` to an `enum` that is out of range of the `enum`. Because any `int` can be entered in the RPC, it could be out of range of the `enum` and cause undesirable things. So I think it is actually better to just handle it as an int. Also, `UniValue` does not have a `get_short()` function so there would be no way to fetch a short from the request other than ca",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820746,300820746,src/rpc/blockchain.cpp
achow101,2019-07-06 05:24:07,`get_int` can return any valid `int`.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820772,300820772,src/rpc/blockchain.cpp
achow101,2019-07-06 05:27:56,"> `<= -1` should be `== BLOCK_DOESNT_EXIST` and define block doesn't exist to -1.\n\nWhy? This is a user entered value, it could literally be anything, not just `-1`. A user isn't going to search specifically for `-1` just so they can get an error. It could be `-16654` or whatever you want. It is safer to check whether the value is `<= -1` rather than `-1`.\n\nAlso, why would this need to be d",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820876,300820876,src/rpc/blockchain.cpp
fqlx,2019-07-06 05:31:20,I appreciate the response @achow101.  I would then suggest we add a validate and transform for the RPC call but that is out of the scope of the PR. Validation from the client is necessary in these cases so we don't get undesirable things and it would keep the code clean.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300820929,300820929,src/rpc/blockchain.cpp
achow101,2019-07-06 05:42:33,Validation from the client is not possible. The client is not necessarily `bitcoin-cli`. It could be any JSON-RPC client. Validation of this must happen server side.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300821167,300821167,src/rpc/blockchain.cpp
fqlx,2019-07-06 05:50:20,"> Why?\n\nIt's easier to read and maintain if we check for the valid paths.  The documentation says verbose 0-3, uses a weak type (int vs enum), then check for unrelated int values mid code - it's confusing. We can't just arbitrarily pick error cases to check for here. Why not check if the user inputted a string, emoji, a number greater than `INT_MAX` too? \n\n> It probably isn't defined anywh",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300821308,300821308,src/rpc/blockchain.cpp
achow101,2019-07-06 06:39:37,"> It's easier to read and maintain if we check for the valid paths. The documentation says verbose 0-3, uses a weak type (int vs enum), then check for unrelated int values mid code - it's confusing.\n\nYou're getting your conversations mixed up. This isn't about verbosity.\n\n> We can't just arbitrarily pick error cases to check for here.\n\nWe aren't.\n\n> Why not check if the user inputt",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300822307,300822307,src/rpc/blockchain.cpp
emilengler,2019-07-06 10:20:40,"@sipa Ok, I've re-added it",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300827307,300827307,src/rpc/blockchain.cpp
promag,2019-07-06 14:29:31,"> Validation from the client is necessary in these cases so we don't get undesirable things and it would keep the code clean.\n\nNo.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300832926,300832926,src/rpc/blockchain.cpp
promag,2019-07-06 14:33:05,"Something like the following should be enough:\n```py\nassert_equal(getblock(getblockhash(20)), getblockbyheight)\n```\nThen you could also test these errors:\n - calling without arguments\n - calling with extra arguments\n - calling with wrong type (string for instance).",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833027,300833027,test/functional/rpc_blockchain.py
emilengler,2019-07-06 14:47:18,"Thank you, I will edit it",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833423,300833423,test/functional/rpc_blockchain.py
promag,2019-07-06 14:58:28,"You should assert the whole response, not just the hash.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300833726,300833726,test/functional/rpc_blockchain.py
emilengler,2019-07-06 17:24:09,"Other functions use this as well, I think this should be improved in another PR",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300837447,300837447,src/rpc/blockchain.cpp
fqlx,2019-07-07 01:00:52,"I'd recommend removing the logging on 317, 319 because it's not needed and will clutter the console logging.  Other than that, things look good.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300846315,300846315,test/functional/rpc_blockchain.py
emilengler,2019-07-07 12:13:56,"Good point, removed!",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300863875,300863875,test/functional/rpc_blockchain.py
fanquake,2019-07-08 01:16:01,"No need for the `The block is valid` logging, or the extra white space here.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r300896491,300896491,test/functional/rpc_blockchain.py
promag,2019-07-08 16:12:50,"@fqlx from the server point of view, never trust the client.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301180681,301180681,src/rpc/blockchain.cpp
MarcoFalke,2019-07-08 16:44:04,Why do you translate the hash into hex and then parse the hex into a hash?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301194131,301194131,src/rpc/blockchain.cpp
MarcoFalke,2019-07-08 16:45:06,"Why would this happen? I'd say never, so it should not throw ""invalid key"", but an internal error. Also, missing `{}`",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301194560,301194560,src/rpc/blockchain.cpp
emilengler,2019-07-08 19:36:49,"You are right, was suggested by someone else",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301265946,301265946,src/rpc/blockchain.cpp
emilengler,2019-07-08 19:37:31,I was doing it the same way as in `getblock()`,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301266206,301266206,src/rpc/blockchain.cpp
Empact,2019-07-08 22:14:31,"Which is to say, you can make this argument just a number. No need to make this RPC strictly consistent with `getblock`. This behavior is only maintained in exceptional cases which do not apply here:\n\n```\n  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n    to a multi-value, or due to other historical reasons. **Always** have false ma",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301322612,301322612,src/rpc/blockchain.cpp
Empact,2019-07-08 22:16:52,"nit: braceless `ifs` should be inline\n\n```\n  - If an `if` only has a single-statement `then`-clause, it can appear\n    on the same line as the `if`, without braces. In every other case,\n    braces are required, and the `then` and `else` clauses must appear\n    correctly indented on a new line.\n```",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301323333,301323333,src/rpc/blockchain.cpp
Empact,2019-07-08 22:18:06,nit: having a `blockheight` local will make this more legible imo,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301323670,301323670,src/rpc/blockchain.cpp
Empact,2019-07-08 22:20:40,I would test the argument for valid range and throw an rpc error if out of range. Better to accept just the valid values IMO.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301324382,301324382,src/rpc/blockchain.cpp
emilengler,2019-07-09 16:59:03,Fixed,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301693757,301693757,test/functional/rpc_blockchain.py
emilengler,2019-07-09 17:01:59,"It is only used 2 times, I think it is not necessary.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301695052,301695052,src/rpc/blockchain.cpp
MarcoFalke,2019-07-09 17:57:26,Can remove this line. pblockindex is already the correct value,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301718362,301718362,src/rpc/blockchain.cpp
emilengler,2019-07-09 19:30:28,Sure thing,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301756779,301756779,src/rpc/blockchain.cpp
Empact,2019-07-10 05:28:13,4 times (see below),https://github.com/bitcoin/bitcoin/pull/16345#discussion_r301891181,301891181,src/rpc/blockchain.cpp
instagibbs,2019-07-10 17:50:17,"This is the wrong commit for logic changes(stick to tests only!), please split up this commit. Ask if you need help.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302194093,302194093,src/rpc/blockchain.cpp
instagibbs,2019-07-10 17:53:01,feel-free-to-ignore-nit: error could be `RPC_INVALID_PARAMETER`,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302195289,302195289,src/rpc/blockchain.cpp
instagibbs,2019-07-10 17:55:37,"good follow-up testing would be to make sure `-1`, `0`, `getblockcount()`, and `getblockcount()+1` args respond properly.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302196460,302196460,test/functional/rpc_blockchain.py
instagibbs,2019-07-10 17:59:34,agreed on filtering for valid range,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302198402,302198402,src/rpc/blockchain.cpp
instagibbs,2019-07-10 18:00:32,Do we need to support both named args like getblock? I don't really know the story on this.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302198828,302198828,src/rpc/blockchain.cpp
instagibbs,2019-07-10 18:02:45,"also, exercising the 2nd arg once in the test would be :+1: ",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302199781,302199781,test/functional/rpc_blockchain.py
emilengler,2019-07-10 18:07:30,"I've written you a message on freenode if you are `instagibbs` there. Can we discuss this here?\nI would post the chat log here afterwards with your permission",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302201835,302201835,src/rpc/blockchain.cpp
emilengler,2019-07-10 18:07:46,Ok,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302201939,302201939,src/rpc/blockchain.cpp
emilengler,2019-07-10 18:09:18,"Same, the reason why the RPC call is very similar to getblock is becuase I have forked it. That's why I also removed some of the legacy getblock stuff",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302202611,302202611,src/rpc/blockchain.cpp
instagibbs,2019-07-10 18:22:18,we fixed this on the interwebs :+1: ,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302207953,302207953,src/rpc/blockchain.cpp
emilengler,2019-07-10 18:25:53,For future readers: https://pastebin.com/33uYhx7i,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302209396,302209396,src/rpc/blockchain.cpp
promag,2019-07-11 07:37:46,👀 this should have `cs_main` locked?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302401670,302401670,src/rpc/blockchain.cpp
promag,2019-07-11 07:38:23,"nit, add `{}`",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302401871,302401871,src/rpc/blockchain.cpp
emilengler,2019-07-11 17:01:06,"Why?\n",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302648697,302648697,src/rpc/blockchain.cpp
promag,2019-07-11 17:59:04,"Because the chain ""can"" change concurrently. Similarly, note that below `cs_main` is locked in order to access the chain tip.",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302672478,302672478,src/rpc/blockchain.cpp
promag,2019-07-11 18:02:34,Also note that `getblockhash` RPC also locks `cs_main`.,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302673916,302673916,src/rpc/blockchain.cpp
emilengler,2019-07-11 20:01:29,"Ok, I will change this tomorrow",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r302718574,302718574,src/rpc/blockchain.cpp
emilengler,2019-07-12 20:40:07,Where I need to LOCK?,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303141331,303141331,src/rpc/blockchain.cpp
MarcoFalke,2019-07-12 20:45:56,"You could move this line down to where you already lock\n```suggestion\n    CBlockIndex* pblockindex;\n```",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303143169,303143169,src/rpc/blockchain.cpp
emilengler,2019-07-12 20:53:01,"Thank you, I thought I would need a new lock",https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303145312,303145312,src/rpc/blockchain.cpp
emilengler,2019-07-12 21:53:55,Done,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r303160775,303160775,src/rpc/blockchain.cpp
ajtowns,2019-07-22 13:13:41,`hash` isn't used,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r305837407,305837407,src/rpc/blockchain.cpp
emilengler,2019-07-22 18:56:37,You're right,https://github.com/bitcoin/bitcoin/pull/16345#discussion_r305982197,305982197,src/rpc/blockchain.cpp
