sipa,2018-03-21T00:09:27Z,"@ryanofsky Scary. I've removed the `T&&` overloads on the `ReadWriteAsTypeHelper` function, and will use a different approach for serializing `ServiceFlags`.",https://github.com/bitcoin/bitcoin/pull/12731#issuecomment-374799498,374799498,
laanwj,2018-04-10T18:33:51Z,utACK 818dc74ba2745872fd68d2158380fc8bd331210e,https://github.com/bitcoin/bitcoin/pull/12731#issuecomment-380203445,380203445,
dcousens,2018-03-20T00:48:34Z,"As `x` is `X&&`,  is `std::move` necessary?",https://github.com/bitcoin/bitcoin/pull/12731#discussion_r175628782,175628782,src/serialize.h
sipa,2018-03-20T00:50:59Z,"`x` is a variable, and thus can't be a temporary.\n\nThe type of the expression `x` is `X`. The `X&&` in the function signature makes that particular instance match cases where it's invoked with a temporary as argument, but once assigned to the variable `x` that is gone.",https://github.com/bitcoin/bitcoin/pull/12731#discussion_r175629068,175629068,src/serialize.h
dcousens,2018-03-20T00:54:09Z,"@sipa thanks,  I found a verbose explanation [here](https://stackoverflow.com/a/7518365).   I had been mislead by a previous generalization of a possible `std::move` implementation that lacked the cast.",https://github.com/bitcoin/bitcoin/pull/12731#discussion_r175629448,175629448,src/serialize.h
ryanofsky,2018-03-20T16:35:32Z,"I think this may be broken in the case where `x` binds to the temporary result of an implicit conversion, e.g. in deserialization of `ServiceFlags nServices` above as `int64_t`, or in a more straightforward case of a `char` variable being deserialized as an `int`. In these cases the deserialization will just happen into a temporary variable, and the actual `obj` argument passed to `READWRITEAS` wo",https://github.com/bitcoin/bitcoin/pull/12731#discussion_r175836732,175836732,src/serialize.h
