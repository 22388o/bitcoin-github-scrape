[
  {
    "sha": "23045a7136afc7d22d967fcbcf4735f80df29e3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzA0NWE3MTM2YWZjN2QyMmQ5NjdmY2JjZjQ3MzVmODBkZjI5ZTNi",
    "commit": {
      "author": {
        "name": "Nick ODell",
        "email": "nickodell@gmail.com",
        "date": "2014-09-15T03:03:11Z"
      },
      "committer": {
        "name": "Nick ODell",
        "email": "nickodell@gmail.com",
        "date": "2014-09-15T03:03:11Z"
      },
      "message": "Add wildcard support to -rpcallowip",
      "tree": {
        "sha": "9057e67fa2e6c5d136ab4c4481eb35e314e9791b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9057e67fa2e6c5d136ab4c4481eb35e314e9791b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23045a7136afc7d22d967fcbcf4735f80df29e3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23045a7136afc7d22d967fcbcf4735f80df29e3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23045a7136afc7d22d967fcbcf4735f80df29e3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23045a7136afc7d22d967fcbcf4735f80df29e3b/comments",
    "author": {
      "login": "nickodell",
      "id": 666402,
      "node_id": "MDQ6VXNlcjY2NjQwMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/666402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickodell",
      "html_url": "https://github.com/nickodell",
      "followers_url": "https://api.github.com/users/nickodell/followers",
      "following_url": "https://api.github.com/users/nickodell/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickodell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickodell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickodell/subscriptions",
      "organizations_url": "https://api.github.com/users/nickodell/orgs",
      "repos_url": "https://api.github.com/users/nickodell/repos",
      "events_url": "https://api.github.com/users/nickodell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickodell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nickodell",
      "id": 666402,
      "node_id": "MDQ6VXNlcjY2NjQwMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/666402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickodell",
      "html_url": "https://github.com/nickodell",
      "followers_url": "https://api.github.com/users/nickodell/followers",
      "following_url": "https://api.github.com/users/nickodell/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickodell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickodell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickodell/subscriptions",
      "organizations_url": "https://api.github.com/users/nickodell/orgs",
      "repos_url": "https://api.github.com/users/nickodell/repos",
      "events_url": "https://api.github.com/users/nickodell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickodell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0a8700bc84cf10d99d9d3699e7b0fdfc323cf1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0a8700bc84cf10d99d9d3699e7b0fdfc323cf1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0a8700bc84cf10d99d9d3699e7b0fdfc323cf1c"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 180,
      "deletions": 37
    },
    "files": [
      {
        "sha": "4c4174102be20fb0629a6847443398116d39537f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 169,
        "deletions": 36,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=23045a7136afc7d22d967fcbcf4735f80df29e3b",
        "patch": "@@ -1117,58 +1117,186 @@ CSubNet::CSubNet():\n \n CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n {\n-    size_t slash = strSubnet.find_last_of('/');\n     std::vector<CNetAddr> vIP;\n-\n     valid = true;\n+\n     // Default to /32 (IPv4) or /128 (IPv6), i.e. match single address\n     memset(netmask, 255, sizeof(netmask));\n \n-    std::string strAddress = strSubnet.substr(0, slash);\n-    if (LookupHost(strAddress.c_str(), vIP, 1, fAllowLookup))\n+    int32_t slash_count = std::count(strSubnet.begin(), strSubnet.end(), '/');\n+    int32_t star_count = std::count(strSubnet.begin(), strSubnet.end(), '*');\n+\n+    if (slash_count > 1)\n+    {\n+        invalidReason = std::string(\"Cannot have more than one / in subnet\");\n+        valid = false;\n+        return;\n+    }\n+    if (star_count > 1)\n+    {\n+        invalidReason = std::string(\"Cannot have more than one wildcard\");\n+        valid = false;\n+        return;\n+    }\n+    if (slash_count + star_count > 1)\n+    {\n+        invalidReason = std::string(\"Cannot use both wildcard and CIDR notation\");\n+        valid = false;\n+        return;\n+    }\n+    if (slash_count > 0)\n     {\n+        // CIDR notation / netmask notation\n+        size_t slash = strSubnet.find_last_of('/');\n+\n+        std::string strAddress = strSubnet.substr(0, slash);\n+        if (!LookupHost(strAddress.c_str(), vIP, 1, fAllowLookup))\n+        {\n+            invalidReason = std::string(\"Invalid IP address\");\n+            valid = false;\n+            return;\n+        }\n         network = vIP[0];\n-        if (slash != strSubnet.npos)\n+        std::string strNetmask = strSubnet.substr(slash + 1);\n+        int32_t n;\n+        // IPv4 addresses start at offset 12, and first 12 bytes must match, so just offset n\n+        int noffset = network.IsIPv4() ? (12 * 8) : 0;\n+        if (ParseInt32(strNetmask, &n)) // If valid number, assume /24 symtex\n         {\n-            std::string strNetmask = strSubnet.substr(slash + 1);\n-            int32_t n;\n-            // IPv4 addresses start at offset 12, and first 12 bytes must match, so just offset n\n-            int noffset = network.IsIPv4() ? (12 * 8) : 0;\n-            if (ParseInt32(strNetmask, &n)) // If valid number, assume /24 symtex\n+            if(n >= 0 && n <= (128 - noffset)) // Only valid if in range of bits of address\n             {\n-                if(n >= 0 && n <= (128 - noffset)) // Only valid if in range of bits of address\n-                {\n-                    n += noffset;\n-                    // Clear bits [n..127]\n-                    for (; n < 128; ++n)\n-                        netmask[n>>3] &= ~(1<<(n&7));\n-                }\n-                else\n-                {\n-                    valid = false;\n-                }\n+                n += noffset;\n+                // Clear bits [n..127]\n+                for (; n < 128; ++n)\n+                    netmask[n>>3] &= ~(1<<(n&7));\n             }\n-            else // If not a valid number, try full netmask syntax\n+            else\n             {\n-                if (LookupHost(strNetmask.c_str(), vIP, 1, false)) // Never allow lookup for netmask\n-                {\n-                    // Remember: GetByte returns bytes in reversed order\n-                    // Copy only the *last* four bytes in case of IPv4, the rest of the mask should stay 1's as\n-                    // we don't want pchIPv4 to be part of the mask.\n-                    int asize = network.IsIPv4() ? 4 : 16;\n-                    for(int x=0; x<asize; ++x)\n-                        netmask[15-x] = vIP[0].GetByte(x);\n-                }\n-                else\n-                {\n-                    valid = false;\n-                }\n+                invalidReason = std::string(\"Prefix too large or too small. Valid are 0 to 32 for IPv4, and 0 to 128 for IPv6\");\n+                valid = false;\n+                return;\n+            }\n+        }\n+        else // If not a valid number, it might be in format 255.255.255.0\n+        {\n+            if (LookupHost(strNetmask.c_str(), vIP, 1, false)) // Never allow lookup for netmask\n+            {\n+                // Remember: GetByte returns bytes in reversed order\n+                // Copy only the *last* four bytes in case of IPv4, the rest of the mask should stay 1's as\n+                // we don't want pchIPv4 to be part of the mask.\n+                int asize = network.IsIPv4() ? 4 : 16;\n+                for(int x=0; x<asize; ++x)\n+                    netmask[15-x] = vIP[0].GetByte(x);\n+            }\n+            else\n+            {\n+                invalidReason = std::string(\"Invalid subnet mask, valid values are e.g. /8 or /255.0.0.0\");\n+                valid = false;\n+                return;\n             }\n         }\n     }\n+    else if (star_count > 0)\n+    {\n+        // Wildcard notation\n+        if (strSubnet.compare(\"*\") == 0)\n+        {\n+            // Allow all IPv4 and IPv6 addresses\n+            memset(netmask, 0, sizeof(netmask));\n+            LookupHost(\"::\", vIP, 1, false);\n+            network = vIP[0];\n+            return;\n+        }\n+        \n+        if (strSubnet.at(strSubnet.length() - 1) != '*')\n+        {\n+            invalidReason = std::string(\"Wildcard must be at the end\");\n+            valid = false;\n+            return;\n+        }\n+\n+        // Assume IPv4 unless you see a :\n+        bool isIPv4 = !(std::count(strSubnet.begin(), strSubnet.end(), ':') > 0);\n+        if (isIPv4)\n+        {\n+            if (strSubnet.at(strSubnet.length() - 2) != '.')\n+            {\n+                invalidReason = std::string(\"Cannot match on incomplete octet. '192.168.*' would be valid\");\n+                valid = false;\n+                return;\n+            }\n+        }\n+        else\n+        {\n+            if (strSubnet.at(strSubnet.length() - 2) != ':')\n+            {\n+                invalidReason = std::string(\"Cannot match on incomplete hextet. 'fe80:*' would be valid\");\n+                valid = false;\n+                return;\n+            }\n+        }\n+        std::string strCompleteAddress;\n+        int32_t octets;\n+        if (isIPv4)\n+        {\n+            octets = std::count(strSubnet.begin(), strSubnet.end(), '.');\n+            if (octets >= 4)\n+            {\n+                invalidReason = std::string(\"Too many octets\");\n+                valid = false;\n+                return;\n+            }\n+            strCompleteAddress = strSubnet.substr(0, strSubnet.length() - 1);\n+            for(int32_t octetsToAdd = 3 - octets; octetsToAdd > 0; octetsToAdd--)\n+            {\n+                strCompleteAddress += std::string(\"0.\");\n+            }\n+            strCompleteAddress += std::string(\"0\");\n+        }\n+        else\n+        {\n+            int32_t hextets = std::count(strSubnet.begin(), strSubnet.end(), ':');\n+            if (hextets >= 8)\n+            {\n+                invalidReason = std::string(\"Too many hextets\");\n+                valid = false;\n+                return;\n+            }\n+            strCompleteAddress = strSubnet.substr(0, strSubnet.length() - 1);\n+            for(int32_t hextetsToAdd = 7 - hextets; hextetsToAdd > 0; hextetsToAdd--)\n+            {\n+                strCompleteAddress += std::string(\"0:\");\n+            }\n+            strCompleteAddress += std::string(\"0\");\n+            octets = hextets * 2; // Each section of an IPv6 addr is two bytes\n+        }\n+        if (!LookupHost(strCompleteAddress.c_str(), vIP, 1, fAllowLookup))\n+        {\n+            invalidReason = std::string(\"Invalid IP address\");\n+            valid = false;\n+            return;\n+        }\n+        network = vIP[0];\n+        int32_t noffset = network.IsIPv4() ? (12 * 8) : 0;\n+        int32_t n = noffset + octets * 8;\n+        // Clear bits [n..127]\n+        for (; n < 128; ++n)\n+            netmask[n>>3] &= ~(1<<(n&7));\n+    }\n     else\n     {\n-        valid = false;\n+        // No wildcard or CIDR notation\n+        if (LookupHost(strSubnet.c_str(), vIP, 1, fAllowLookup))\n+        {\n+            network = vIP[0];\n+            // No netmask adjusting needed\n+        }\n+        else\n+        {\n+            invalidReason = std::string(\"Invalid IP address\");\n+            valid = false;\n+            return;\n+        }\n     }\n }\n \n@@ -1201,6 +1329,11 @@ bool CSubNet::IsValid() const\n     return valid;\n }\n \n+std::string CSubNet::GetInvalidReason() const\n+{\n+    return invalidReason;\n+}\n+\n bool operator==(const CSubNet& a, const CSubNet& b)\n {\n     return a.valid == b.valid && a.network == b.network && !memcmp(a.netmask, b.netmask, 16);"
      },
      {
        "sha": "75f430b852b53b0fa02cff2f9271aea53ca52af1",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=23045a7136afc7d22d967fcbcf4735f80df29e3b",
        "patch": "@@ -105,6 +105,8 @@ class CSubNet\n         uint8_t netmask[16];\n         /// Is this value valid? (only used to signal parse errors)\n         bool valid;\n+        /// If not, why?\n+        std::string invalidReason;\n \n     public:\n         CSubNet();\n@@ -114,6 +116,7 @@ class CSubNet\n \n         std::string ToString() const;\n         bool IsValid() const;\n+        std::string GetInvalidReason() const;\n \n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n         friend bool operator!=(const CSubNet& a, const CSubNet& b);"
      },
      {
        "sha": "c1e1102b34c4cbbc0bb2a65a24ce1645364c9fb2",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=23045a7136afc7d22d967fcbcf4735f80df29e3b",
        "patch": "@@ -543,7 +543,7 @@ void StartRPCThreads()\n             if(!subnet.IsValid())\n             {\n                 uiInterface.ThreadSafeMessageBox(\n-                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                    strprintf(\"Invalid -rpcallowip option: %s. Reason: %s.\", strAllow, subnet.GetInvalidReason().c_str()),\n                     \"\", CClientUIInterface::MSG_ERROR);\n                 StartShutdown();\n                 return;"
      },
      {
        "sha": "18169dbee869015bed20a6e886876b24279de320",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23045a7136afc7d22d967fcbcf4735f80df29e3b/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=23045a7136afc7d22d967fcbcf4735f80df29e3b",
        "patch": "@@ -116,6 +116,13 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8\").Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n     BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8\").Match(CNetAddr(\"1:2:3:4:5:6:7:9\")));\n     BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:0/112\").Match(CNetAddr(\"1:2:3:4:5:6:7:1234\")));\n+    // Check wildcards\n+    BOOST_CHECK(CSubNet(\"*\").Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n+    BOOST_CHECK(CSubNet(\"*\").Match(CNetAddr(\"1.2.3.4\")));\n+    BOOST_CHECK(CSubNet(\"192.*\").Match(CNetAddr(\"192.168.1.1\")));\n+    BOOST_CHECK(!CSubNet(\"192.*\").Match(CNetAddr(\"193.168.1.1\")));\n+    BOOST_CHECK(!CSubNet(\"192.*\").Match(CNetAddr(\"192:2:3:4:5:6:7:8\")));\n+    BOOST_CHECK(!CSubNet(\"2001:*\").Match(CNetAddr(\"2002:2:3:4:5:6:7:8\")));\n     // All-Matching IPv6 Matches arbitrary IPv4 and IPv6\n     BOOST_CHECK(CSubNet(\"::/0\").Match(CNetAddr(\"1:2:3:4:5:6:7:1234\")));\n     BOOST_CHECK(CSubNet(\"::/0\").Match(CNetAddr(\"1.2.3.4\")));"
      }
    ]
  },
  {
    "sha": "31544d847d043812d0c644ddcec1231a81628690",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTU0NGQ4NDdkMDQzODEyZDBjNjQ0ZGRjZWMxMjMxYTgxNjI4Njkw",
    "commit": {
      "author": {
        "name": "Nick ODell",
        "email": "nickodell@gmail.com",
        "date": "2014-09-15T03:18:39Z"
      },
      "committer": {
        "name": "Nick ODell",
        "email": "nickodell@gmail.com",
        "date": "2014-09-15T03:42:12Z"
      },
      "message": "More tests for -rpcallowip",
      "tree": {
        "sha": "29da1ebbbba1d43e26b487cb688689f065b0f5ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29da1ebbbba1d43e26b487cb688689f065b0f5ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31544d847d043812d0c644ddcec1231a81628690",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31544d847d043812d0c644ddcec1231a81628690",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31544d847d043812d0c644ddcec1231a81628690",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31544d847d043812d0c644ddcec1231a81628690/comments",
    "author": {
      "login": "nickodell",
      "id": 666402,
      "node_id": "MDQ6VXNlcjY2NjQwMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/666402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickodell",
      "html_url": "https://github.com/nickodell",
      "followers_url": "https://api.github.com/users/nickodell/followers",
      "following_url": "https://api.github.com/users/nickodell/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickodell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickodell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickodell/subscriptions",
      "organizations_url": "https://api.github.com/users/nickodell/orgs",
      "repos_url": "https://api.github.com/users/nickodell/repos",
      "events_url": "https://api.github.com/users/nickodell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickodell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nickodell",
      "id": 666402,
      "node_id": "MDQ6VXNlcjY2NjQwMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/666402?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickodell",
      "html_url": "https://github.com/nickodell",
      "followers_url": "https://api.github.com/users/nickodell/followers",
      "following_url": "https://api.github.com/users/nickodell/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickodell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickodell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickodell/subscriptions",
      "organizations_url": "https://api.github.com/users/nickodell/orgs",
      "repos_url": "https://api.github.com/users/nickodell/repos",
      "events_url": "https://api.github.com/users/nickodell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickodell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23045a7136afc7d22d967fcbcf4735f80df29e3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23045a7136afc7d22d967fcbcf4735f80df29e3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23045a7136afc7d22d967fcbcf4735f80df29e3b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e2494b26180d4df1f7850848639f2fc9c2141b0a",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31544d847d043812d0c644ddcec1231a81628690/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31544d847d043812d0c644ddcec1231a81628690/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=31544d847d043812d0c644ddcec1231a81628690",
        "patch": "@@ -117,6 +117,9 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8\").Match(CNetAddr(\"1:2:3:4:5:6:7:9\")));\n     BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:0/112\").Match(CNetAddr(\"1:2:3:4:5:6:7:1234\")));\n     // Check wildcards\n+    BOOST_CHECK(CSubNet(\"*\") == CSubNet(\"::/0\"));\n+    BOOST_CHECK(CSubNet(\"2001:*\") == CSubNet(\"2001::/16\"));\n+    BOOST_CHECK(CSubNet(\"192.*\") == CSubNet(\"192.0.0.0/8\"));\n     BOOST_CHECK(CSubNet(\"*\").Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n     BOOST_CHECK(CSubNet(\"*\").Match(CNetAddr(\"1.2.3.4\")));\n     BOOST_CHECK(CSubNet(\"192.*\").Match(CNetAddr(\"192.168.1.1\")));"
      }
    ]
  }
]