JeremyRubin,2020-01-29 05:04:14,Concept ACK. Will need to play around with it a little bit to test that clang actually prevents compiling incorrect uses.,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-579594113,579594113,
DrahtBot,2020-01-29 09:20:53,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-579666481,579666481,
laanwj,2020-02-10 16:21:07,"Concept ACK, nice",https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-584205068,584205068,
hebasto,2020-05-24 08:12:48,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-633196020,633196020,
ajtowns,2020-05-26 12:07:20,Incorporated @hebasto's suggested changes,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-633984070,633984070,
ajtowns,2020-05-26 16:30:34,@hebasto - `AssertLockNotHeld(m_epoch)` won't work -- epochs aren't sync.h locks. I think the annotation for UpdateForDescendents would be better made after #18191 is merged?,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-634134624,634134624,
hebasto,2020-05-26 16:36:53,"@ajtowns \n> @hebasto - `AssertLockNotHeld(m_epoch)` won't work -- epochs aren't sync.h locks. I think the annotation for UpdateForDescendents would be better made after #18191 is merged?\n\nAgree.",https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-634138030,634138030,
ajtowns,2020-09-10 22:57:41,Rebased,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-690774658,690774658,
JeremyRubin,2020-09-15 16:05:18,re CR-ACK,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-692815496,692815496,
jonatack,2020-09-18 08:37:56,"Concept ACK, the code looks like a nice refactoring.",https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-694737531,694737531,
ajtowns,2021-01-14 11:14:23,Rebased to deal with adjacent lines changed in #19935,https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-760130294,760130294,
ajtowns,2021-02-09 05:41:39,":birthday: This PR turned 1 the other week! Rebased on top of #20944 due to header reordering, and addressed @hebasto's nits.\n\n(I think the mempool visited methods are public deliberately, so that they could be used by external functions if desired; so haven't made them private)",https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-775682083,775682083,
JeremyRubin,2021-02-10 04:42:30,Yes this is correct; IIRC there's some stalled out patches which require them to be visible :),https://github.com/bitcoin/bitcoin/pull/18017#issuecomment-776435206,776435206,
hebasto,2020-05-24 08:37:48,Mind switching from the member initialization list to the default member initializers?,https://github.com/bitcoin/bitcoin/pull/18017#discussion_r429613083,429613083,src/txmempool.h
hebasto,2020-05-24 08:39:33,Mind switching from the member initialization list to the default member initializer?,https://github.com/bitcoin/bitcoin/pull/18017#discussion_r429613209,429613209,src/txmempool.h
hebasto,2020-05-24 10:23:22,micro-nit: These comments are so obvious that seem redundant :),https://github.com/bitcoin/bitcoin/pull/18017#discussion_r429621402,429621402,src/txmempool.h
hebasto,2020-05-24 11:33:51,"Tested on top of the #18635, and had loads of warnings:\n```\n./txmempool.h:102:38: warning: 'exclusive_lock_function' attribute requires arguments whose type is annotated with 'capability' attribute; type here is 'Epoch' [-Wthread-safety-attributes]\n        explicit Guard(Epoch& epoch) EXCLUSIVE_LOCK_FUNCTION(epoch) LOCKS_EXCLUDED(epoch);\n                                     ^\n...\n./txm",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r429627015,429627015,src/txmempool.h
hebasto,2020-05-24 11:37:01,"From the Thread Safety Analysis [docs](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquire-acquire-shared-release-release-shared):\n> The caller must not hold the given capability on entry\n\nIt seems `LOCKS_EXCLUDED(epoch)` is redundant, no?",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r429627231,429627231,src/txmempool.h
ajtowns,2020-05-26 11:51:32,"I'm not seeing what benefit changing `Epoch::Guard::m_epoch` from reference to pointer would have -- the analysis shouldn't (and doesn't) treat them any different, as far as I can see?",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r430353995,430353995,src/txmempool.h
hebasto,2020-05-26 14:59:56,"Indeed :)\nIDK why I saw warnings...",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r430479806,430479806,src/txmempool.h
JeremyRubin,2020-09-11 05:41:41,Is this used?,https://github.com/bitcoin/bitcoin/pull/18017#discussion_r486785464,486785464,src/txmempool.h
JeremyRubin,2020-09-11 05:42:24,"(I'm fine leaving it if it isn't used, just curious).",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r486785695,486785695,src/txmempool.h
JeremyRubin,2020-09-11 05:52:31,"nit: how would you feel about:\n\n```\nuint64_t marker_old = marker.m_marker;\nmarker.m_marker = std::max(marker.m_marker, m_raw_epoch);\nreturn marker.m_marker != marker_old;\n```\n\nfor whatever reason I find it easier to read/reason about when we always set it to max.",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r486788819,486788819,src/txmempool.h
JeremyRubin,2020-09-11 05:57:40,Maybe best to move this into it's own header-only file/all headers to minimize conflict with #17786?,https://github.com/bitcoin/bitcoin/pull/18017#discussion_r486790383,486790383,src/txmempool.cpp
ajtowns,2020-09-15 01:52:04,There's an `assert(m_epoch.guarded());` in `CTxMemPool::visited(Optional<txiter> it)` to check the lock's held in the case where `it->visited` isn't called.,https://github.com/bitcoin/bitcoin/pull/18017#discussion_r488334488,488334488,src/txmempool.h
ajtowns,2020-09-15 02:09:23,"That reverses the logic (`ret == false` causes `m_marker` to change originally, but your code returns `true` if `m_marker` changed) ? Seems like that's evidence it's not that easy to read/reason about? :)\n\nIt might be less confusing to write it out in full:\n\n```c++\nif (marker.m_marker < m_raw_epoch ) {\n    // this entry is from an earlier epoch, so it hasn't been visited\n    marker.m",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r488339385,488339385,src/txmempool.h
JeremyRubin,2020-09-15 02:37:57,"Ah my bad, I've made a case against myself -- for what it's worth, I made the proposed version by translating your proposed version, which I have trouble parsing logically, and thought it was equivalent to that logic (and still can't figure out the concrete reason it's opposite).\n\nI'm fine with the completely written out version as it is the most obvious for sleepy brains like mine.",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r488347408,488347408,src/txmempool.h
ajtowns,2020-09-15 03:20:48,"I think the translation goes:\n\n- `r = a >= b; if (!r) a = b; return r;`  (current)\n- `o = a; if (! (a >= b)) a = b; return o >= b;`   (store old value, replace `r`)\n- `o = a; if (a < b) a = b; return !(o < b);`  (switch to less than)\n- `o = a; a = max(a,b); return !(o != a);`  (`o < b` iff the if was taken, and `a` was changed)\n- `o = a; a = max(a,b); return o == a;`  (simplify)\n\nA",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r488358871,488358871,src/txmempool.h
ajtowns,2020-09-15 03:21:04,Moved into util/epochguard.h,https://github.com/bitcoin/bitcoin/pull/18017#discussion_r488358955,488358955,src/txmempool.cpp
JeremyRubin,2020-09-15 16:04:41,"micronit: may be worth adding a comment here that the assert is redundant when it != nullopt, but is used for consistency when it == nullopt.",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r488785835,488785835,src/txmempool.h
hebasto,2021-01-15 21:09:00,"style nit: while touching headers they could be sorted:\n```\n#include <random.h>\n#include <sync.h>\n#include <util/epochguard.h>\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558593664,558593664,src/txmempool.h
hebasto,2021-01-15 21:13:01,"style nit, suggested by `clang-format`:\n```suggestion\n    bool visited(const txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch)\n    {\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558595243,558595243,src/txmempool.h
hebasto,2021-01-15 21:14:04,"style nit, suggested by `clang-format`:\n```suggestion\n    bool visited(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs, m_epoch)\n    {\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558595646,558595646,src/txmempool.h
hebasto,2021-01-15 21:14:35,"style nit, suggested by `clang-format`:\n```suggestion\n    Epoch() {}\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558595862,558595862,src/util/epochguard.h
hebasto,2021-01-15 21:14:58,"style nit, suggested by `clang-format`:\n```suggestion\n    class Marker\n    {\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558596003,558596003,src/util/epochguard.h
hebasto,2021-01-15 21:15:22,"style nit, suggested by `clang-format`:\n```suggestion\n    class SCOPED_LOCKABLE Guard\n    {\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558596167,558596167,src/util/epochguard.h
hebasto,2021-01-15 21:17:15,"typo, https://github.com/bitcoin/bitcoin/pull/17925#discussion_r374052497:\n```suggestion\n * adds an asymptotic factor of O(log n) to traversals cost and triggers O(n)\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558596990,558596990,src/util/epochguard.h
hebasto,2021-01-15 21:40:39,"```suggestion\n        {\n            assert(m_epoch.m_guarded);\n            ++m_epoch.m_raw_epoch; // ensure clear separation between epochs\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r558607064,558607064,src/util/epochguard.h
ajtowns,2021-02-09 04:53:23,Sorted in #20944,https://github.com/bitcoin/bitcoin/pull/18017#discussion_r572593067,572593067,src/txmempool.h
jonatack,2021-02-10 18:10:07,"```suggestion\n * counter to track the time (or, ""epoch"") that we began a traversal and\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r573958822,573958822,src/util/epochguard.h
jonatack,2021-02-10 18:10:20,"```suggestion\n * traversal should be viewed as a TODO for replacement with an epoch-based\n```",https://github.com/bitcoin/bitcoin/pull/18017#discussion_r573959000,573959000,src/util/epochguard.h
