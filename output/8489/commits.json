[
  {
    "sha": "160f895a80660e4e3904a2624e4110960d051902",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjBmODk1YTgwNjYwZTRlMzkwNGEyNjI0ZTQxMTA5NjBkMDUxOTAy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-08-08T21:16:40Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-08-08T21:56:32Z"
      },
      "message": "Bugfix: Use pre-BIP141 sigops until segwit activates",
      "tree": {
        "sha": "da7fab3c9f4a027edbf5a26d5b9676af1bf14824",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da7fab3c9f4a027edbf5a26d5b9676af1bf14824"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/160f895a80660e4e3904a2624e4110960d051902",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160f895a80660e4e3904a2624e4110960d051902",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/160f895a80660e4e3904a2624e4110960d051902",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160f895a80660e4e3904a2624e4110960d051902/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e6ab2c3238264b34c0c83ebf703502f5ec72848",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6ab2c3238264b34c0c83ebf703502f5ec72848",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e6ab2c3238264b34c0c83ebf703502f5ec72848"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2479e5d5953d2dfd5678e260b1e32c84dffe4239",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/160f895a80660e4e3904a2624e4110960d051902/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/160f895a80660e4e3904a2624e4110960d051902/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=160f895a80660e4e3904a2624e4110960d051902",
        "patch": "@@ -546,6 +546,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UpdateTime(pblock, consensusParams, pindexPrev);\n     pblock->nNonce = 0;\n \n+    // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n+    const bool fPreSegWit = (THRESHOLD_ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));\n+\n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n \n     UniValue transactions(UniValue::VARR);\n@@ -574,7 +577,12 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n         int index_in_template = i - 1;\n         entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n-        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOpsCost[index_in_template]));\n+        int64_t nTxSigOps = pblocktemplate->vTxSigOpsCost[index_in_template];\n+        if (fPreSegWit) {\n+            assert(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n+            nTxSigOps /= WITNESS_SCALE_FACTOR;\n+        }\n+        entry.push_back(Pair(\"sigops\", nTxSigOps));\n         entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n \n         transactions.push_back(entry);\n@@ -657,7 +665,12 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n-    result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS_COST));\n+    int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n+    if (fPreSegWit) {\n+        assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n+        nSigOpLimit /= WITNESS_SCALE_FACTOR;\n+    }\n+    result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n     result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));"
      }
    ]
  },
  {
    "sha": "239cbd2e5c2a36843b45b356e9aea6e8d35f0968",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzljYmQyZTVjMmEzNjg0M2I0NWIzNTZlOWFlYTZlOGQzNWYwOTY4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-08-08T21:58:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-08-08T21:58:36Z"
      },
      "message": "qa/rpc-tests/segwit: Test GBT sigops before and after activation",
      "tree": {
        "sha": "a9449ebba51b7f5e1233eedc1c49368a481a169c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9449ebba51b7f5e1233eedc1c49368a481a169c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/239cbd2e5c2a36843b45b356e9aea6e8d35f0968",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239cbd2e5c2a36843b45b356e9aea6e8d35f0968",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/239cbd2e5c2a36843b45b356e9aea6e8d35f0968",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239cbd2e5c2a36843b45b356e9aea6e8d35f0968/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "160f895a80660e4e3904a2624e4110960d051902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160f895a80660e4e3904a2624e4110960d051902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/160f895a80660e4e3904a2624e4110960d051902"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 45,
      "deletions": 7
    },
    "files": [
      {
        "sha": "097e119f3239b7d334efdd2d82790361342d8fff",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 45,
        "deletions": 7,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239cbd2e5c2a36843b45b356e9aea6e8d35f0968/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239cbd2e5c2a36843b45b356e9aea6e8d35f0968/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=239cbd2e5c2a36843b45b356e9aea6e8d35f0968",
        "patch": "@@ -69,6 +69,11 @@ def getutxo(txid):\n     utxo[\"txid\"] = txid\n     return utxo\n \n+def find_unspent(node, min_value):\n+    for utxo in node.listunspent():\n+        if utxo['amount'] >= min_value:\n+            return utxo\n+\n class SegWitTest(BitcoinTestFramework):\n \n     def setup_chain(self):\n@@ -117,8 +122,21 @@ def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n         sync_blocks(self.nodes)\n \n     def run_test(self):\n-        self.nodes[0].generate(160) #block 160\n-\n+        self.nodes[0].generate(161) #block 161\n+\n+        print(\"Verify sigops are counted in GBT with pre-BIP141 rules before the fork\")\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(tmpl['sigoplimit'] == 20000)\n+        assert(tmpl['transactions'][0]['hash'] == txid)\n+        assert(tmpl['transactions'][0]['sigops'] == 2)\n+        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        assert(tmpl['sigoplimit'] == 20000)\n+        assert(tmpl['transactions'][0]['hash'] == txid)\n+        assert(tmpl['transactions'][0]['sigops'] == 2)\n+        self.nodes[0].generate(1) #block 162\n+\n+        balance_presetup = self.nodes[0].getbalance()\n         self.pubkey = []\n         p2sh_ids = [] # p2sh_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE embedded in p2sh\n         wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n@@ -137,18 +155,18 @@ def run_test(self):\n         for i in range(5):\n             for n in range(3):\n                 for v in range(2):\n-                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], False, Decimal(\"49.999\")))\n-                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], self.nodes[0].listunspent()[0], self.pubkey[n], True, Decimal(\"49.999\")))\n+                    wit_ids[n][v].append(send_to_witness(v, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[n], False, Decimal(\"49.999\")))\n+                    p2sh_ids[n][v].append(send_to_witness(v, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[n], True, Decimal(\"49.999\")))\n \n-        self.nodes[0].generate(1) #block 161\n+        self.nodes[0].generate(1) #block 163\n         sync_blocks(self.nodes)\n \n         # Make sure all nodes recognize the transactions as theirs\n-        assert_equal(self.nodes[0].getbalance(), 60*50 - 60*50 + 20*Decimal(\"49.999\") + 50)\n+        assert_equal(self.nodes[0].getbalance(), balance_presetup - 60*50 + 20*Decimal(\"49.999\") + 50)\n         assert_equal(self.nodes[1].getbalance(), 20*Decimal(\"49.999\"))\n         assert_equal(self.nodes[2].getbalance(), 20*Decimal(\"49.999\"))\n \n-        self.nodes[0].generate(262) #block 423\n+        self.nodes[0].generate(260) #block 423\n         sync_blocks(self.nodes)\n \n         print(\"Verify default node can't accept any witness format txs before fork\")\n@@ -205,5 +223,25 @@ def run_test(self):\n         self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V0][0], True) #block 434\n         self.success_mine(self.nodes[0], p2sh_ids[NODE_0][WIT_V1][0], True) #block 435\n \n+        print(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        assert(tmpl['sigoplimit'] == 80000)\n+        assert(tmpl['transactions'][0]['txid'] == txid)\n+        assert(tmpl['transactions'][0]['sigops'] == 8)\n+\n+        print(\"Verify non-segwit miners get a valid GBT response after the fork\")\n+        send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.998\"))\n+        try:\n+            tmpl = self.nodes[0].getblocktemplate({})\n+            assert(len(tmpl['transactions']) == 1)  # Doesn't include witness tx\n+            assert(tmpl['sigoplimit'] == 20000)\n+            assert(tmpl['transactions'][0]['hash'] == txid)\n+            assert(tmpl['transactions'][0]['sigops'] == 2)\n+            assert(('!segwit' in tmpl['rules']) or ('segwit' not in tmpl['rules']))\n+        except JSONRPCException:\n+            # This is an acceptable outcome\n+            pass\n+\n if __name__ == '__main__':\n     SegWitTest().main()"
      }
    ]
  }
]