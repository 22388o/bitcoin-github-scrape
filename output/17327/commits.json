[
  {
    "sha": "94fcc08541cf58bee864ab7c28a6c77e42472f17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGZjYzA4NTQxY2Y1OGJlZTg2NGFiN2MyOGE2Yzc3ZTQyNDcyZjE3",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-10-31T10:46:57Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-01T10:27:11Z"
      },
      "message": "test: add rpc_fundrawtransaction logging\n\ntest/functional/rpc_fundrawtransaction.py is fairly long to run and has no\nlogging, so it can appear to be stalled.\n\nThis commit adds info logging at each test to provide feedback on the test run.",
      "tree": {
        "sha": "4f7f4240b39e62cd0fc112f10b2b9eb5793db88b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f7f4240b39e62cd0fc112f10b2b9eb5793db88b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94fcc08541cf58bee864ab7c28a6c77e42472f17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl28CIkACgkQT1chs9Dj\nkh1v2Q/+J/G/UcK+Da/Sw0w2cV3m1znl/Zhmc8hqW2d6lRhQDFanfxQ8rISygNo5\niLiUNiPglbkMKo0/niWKWBKMYPtj/g8pQKTNU7McfcJxzdJyS9ZeNzuqKeymXvHW\nPsMXjL5EPFwew1JBG/t/2cYlR5jf0TgnsQwB9AfM9SD8n28ncaaqYUYiBt50fALe\nwnstddXlNciTOnQIGKp6czTDYTn56ZBGBVsv5x1sSqB33IStPwguqbxUQwrAIrys\nbsZkAfqzBsXmFCP2OBEW2OZc0wZkbKiB3wuIbR3PnbfavJoxKPA0eggQ/RXDRevG\nmaDdUIE4h/jrPrMGoV+UpwZsQyEpZP7pOS/tN9C6/6SSEgdrViUjGc3PpUc1RlXD\nBs0CgndfCwXYRZR2uBqskN7VNAJfnTMhUrY0I8CmEGuLlOotaorfU+d4rCmKjWm2\n6B1GPzFdFQCCx2ulQ/UDewzUEmowvawxW9xS9KrxUfQl/tjM3YmYEpizMe23SIoS\nfURnR4A7yA464rc0V5ZNansEBNapEjag+LBFbrGoT+09t3+pqT3N02TycY4Hjw88\nQAxZ4nRXor9BxN/rvST+0/zIBnz5O5KShZuNzCZ08qqIYV+5ZUpNiiPzHSDdJyJK\nB/CvCkcp3JSEUnZfmiePuWWtBnTC2UxmBHkcyBgDvyM1PmRGqok=\n=xccF\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMR4UU6SVd3uM+EHydzfq3oyZZ0Qpy1ZaJo5Lq+EkKSaCP/wEFV6sdDyIekN\nP/jWMRAyc8MI8QRdvAiM8Aj+1cvNLVpQnwCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEHBTl6pOMNyNzG3ko5Vy4FUI\n8QRdvAiN8AhwSt7ye43OqACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbfAQkJvDTdd/sh1PWAE1JIKhZgjxBF28CI3wCGEKUvaIqd3F\nAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 4f7f4240b39e62cd0fc112f10b2b9eb5793db88b\nparent 08e29473126d5cc4df6d2b3f368c6f6f641c0bd8\nauthor Jon Atack <jon@atack.com> 1572518817 +0100\ncommitter Jon Atack <jon@atack.com> 1572604031 +0100\n\ntest: add rpc_fundrawtransaction logging\n\ntest/functional/rpc_fundrawtransaction.py is fairly long to run and has no\nlogging, so it can appear to be stalled.\n\nThis commit adds info logging at each test to provide feedback on the test run.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fcc08541cf58bee864ab7c28a6c77e42472f17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94fcc08541cf58bee864ab7c28a6c77e42472f17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fcc08541cf58bee864ab7c28a6c77e42472f17/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08e29473126d5cc4df6d2b3f368c6f6f641c0bd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e29473126d5cc4df6d2b3f368c6f6f641c0bd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08e29473126d5cc4df6d2b3f368c6f6f641c0bd8"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 55,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b09aeafcfe0985c32e1759bdc5d3e32e3e8a750f",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 55,
        "deletions": 4,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94fcc08541cf58bee864ab7c28a6c77e42472f17/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94fcc08541cf58bee864ab7c28a6c77e42472f17/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=94fcc08541cf58bee864ab7c28a6c77e42472f17",
        "patch": "@@ -41,6 +41,7 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 3)\n \n     def run_test(self):\n+        self.log.info(\"Connect nodes, set fees, generate blocks, and sync\")\n         self.min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n@@ -91,6 +92,7 @@ def run_test(self):\n \n     def test_change_position(self):\n         # ensure that setting changePosition in fundraw with an exact match is handled properly\n+        self.log.info(\"Test fundrawtxn changePosition option\")\n         rawmatch = self.nodes[2].createrawtransaction([], {self.nodes[2].getnewaddress():50})\n         rawmatch = self.nodes[2].fundrawtransaction(rawmatch, {\"changePosition\":1, \"subtractFeeFromOutputs\":[0]})\n         assert_equal(rawmatch[\"changepos\"], -1)\n@@ -118,6 +120,7 @@ def test_simple(self):\n         ###############\n         # simple test #\n         ###############\n+        self.log.info(\"Test fundrawtxn\")\n         inputs  = [ ]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -130,6 +133,7 @@ def test_simple_two_coins(self):\n         ##############################\n         # simple test with two coins #\n         ##############################\n+        self.log.info(\"Test fundrawtxn with 2 coins\")\n         inputs  = [ ]\n         outputs = { self.nodes[0].getnewaddress() : 2.2 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -144,6 +148,8 @@ def test_simple_two_outputs(self):\n         ################################\n         # simple test with two outputs #\n         ################################\n+        self.log.info(\"Test fundrawtxn with 2 outputs\")\n+\n         inputs  = [ ]\n         outputs = { self.nodes[0].getnewaddress() : 2.6, self.nodes[1].getnewaddress() : 2.5 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -162,6 +168,7 @@ def test_change(self):\n         #########################################################################\n         # test a fundrawtransaction with a VIN greater than the required amount #\n         #########################################################################\n+        self.log.info(\"Test fundrawtxn with a vin > required amount\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n@@ -184,6 +191,7 @@ def test_no_change(self):\n         #####################################################################\n         # test a fundrawtransaction with which will not get a change output #\n         #####################################################################\n+        self.log.info(\"Test fundrawtxn not having a change output\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n@@ -206,6 +214,7 @@ def test_invalid_option(self):\n         ####################################################\n         # test a fundrawtransaction with an invalid option #\n         ####################################################\n+        self.log.info(\"Test fundrawtxn with an invalid option\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n@@ -223,6 +232,7 @@ def test_invalid_change_address(self):\n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n         ############################################################\n+        self.log.info(\"Test fundrawtxn with an invalid change address\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n@@ -237,6 +247,7 @@ def test_valid_change_address(self):\n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n         ############################################################\n+        self.log.info(\"Test fundrawtxn with a provided change address\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n@@ -256,6 +267,7 @@ def test_change_type(self):\n         #########################################################\n         # test a fundrawtransaction with a provided change type #\n         #########################################################\n+        self.log.info(\"Test fundrawtxn with a provided change type\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']} ]\n@@ -271,6 +283,7 @@ def test_coin_selection(self):\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n+        self.log.info(\"Test fundrawtxn with a vin < required amount\")\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n@@ -305,6 +318,7 @@ def test_two_vin(self):\n         ###########################################\n         # test a fundrawtransaction with two VINs #\n         ###########################################\n+        self.log.info(\"Test fundrawtxn with 2 vins\")\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n         utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -338,6 +352,7 @@ def test_two_vin_two_vout(self):\n         #########################################################\n         # test a fundrawtransaction with two VINs and two vOUTs #\n         #########################################################\n+        self.log.info(\"Test fundrawtxn with 2 vins and 2 vouts\")\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n         utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -363,6 +378,7 @@ def test_invalid_input(self):\n         ##############################################\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n+        self.log.info(\"Test fundrawtxn with an invalid vin\")\n         inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n         outputs = { self.nodes[0].getnewaddress() : 1.0}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n@@ -371,6 +387,7 @@ def test_invalid_input(self):\n     def test_fee_p2pkh(self):\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n+        self.log.info(\"Test fundrawtxn p2pkh fee\")\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n@@ -388,8 +405,16 @@ def test_fee_p2pkh(self):\n     def test_fee_p2pkh_multi_out(self):\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction with multiple outputs\n+        self.log.info(\"Test fundrawtxn p2pkh fee with multiple outputs\")\n         inputs = []\n-        outputs = {self.nodes[1].getnewaddress():1.1,self.nodes[1].getnewaddress():1.2,self.nodes[1].getnewaddress():0.1,self.nodes[1].getnewaddress():1.3,self.nodes[1].getnewaddress():0.2,self.nodes[1].getnewaddress():0.3}\n+        outputs = {\n+            self.nodes[1].getnewaddress():1.1,\n+            self.nodes[1].getnewaddress():1.2,\n+            self.nodes[1].getnewaddress():0.1,\n+            self.nodes[1].getnewaddress():1.3,\n+            self.nodes[1].getnewaddress():0.2,\n+            self.nodes[1].getnewaddress():0.3,\n+        }\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n         #create same transaction over sendtoaddress\n@@ -431,6 +456,7 @@ def test_fee_p2sh(self):\n     def test_fee_4of5(self):\n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n+        self.log.info(\"Test fundrawtxn fee with 4-of-5 addresses\")\n \n         # create 4of5 addr\n         addr1 = self.nodes[1].getnewaddress()\n@@ -445,7 +471,16 @@ def test_fee_4of5(self):\n         addr4Obj = self.nodes[1].getaddressinfo(addr4)\n         addr5Obj = self.nodes[1].getaddressinfo(addr5)\n \n-        mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])['address']\n+        mSigObj = self.nodes[1].addmultisigaddress(\n+            4,\n+            [\n+                addr1Obj['pubkey'],\n+                addr2Obj['pubkey'],\n+                addr3Obj['pubkey'],\n+                addr4Obj['pubkey'],\n+                addr5Obj['pubkey'],\n+            ]\n+        )['address']\n \n         inputs = []\n         outputs = {mSigObj:1.1}\n@@ -464,6 +499,7 @@ def test_fee_4of5(self):\n     def test_spend_2of2(self):\n         ############################################################\n         # spend a 2of2 multisig transaction over fundraw\n+        self.log.info(\"Test fundrawtxn spending 2-of-2 multisig\")\n \n         # create 2of2 addr\n         addr1 = self.nodes[2].getnewaddress()\n@@ -472,8 +508,13 @@ def test_spend_2of2(self):\n         addr1Obj = self.nodes[2].getaddressinfo(addr1)\n         addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n-        mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-\n+        mSigObj = self.nodes[2].addmultisigaddress(\n+            2,\n+            [\n+                addr1Obj['pubkey'],\n+                addr2Obj['pubkey'],\n+            ]\n+        )['address']\n \n         # send 1.2 BTC to msig addr\n         self.nodes[0].sendtoaddress(mSigObj, 1.2)\n@@ -499,6 +540,8 @@ def test_spend_2of2(self):\n     def test_locked_wallet(self):\n         ############################################################\n         # locked wallet test\n+        self.log.info(\"Test fundrawtxn with locked wallet\")\n+\n         self.nodes[1].encryptwallet(\"test\")\n         self.stop_nodes()\n \n@@ -555,6 +598,7 @@ def test_many_inputs_fee(self):\n         ###############################################\n         # multiple (~19) inputs tx test | Compare fee #\n         ###############################################\n+        self.log.info(\"Test fundrawtxn fee with many inputs\")\n \n         #empty node1, send some small coins from node0 to node1\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n@@ -585,6 +629,7 @@ def test_many_inputs_send(self):\n         #############################################\n         # multiple (~19) inputs tx test | sign/send #\n         #############################################\n+        self.log.info(\"Test fundrawtxn sign+send with many inputs\")\n \n         #again, empty node1, send some small coins from node0 to node1\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n@@ -615,6 +660,7 @@ def test_op_return(self):\n         #####################################################\n         # test fundrawtransaction with OP_RETURN and no vin #\n         #####################################################\n+        self.log.info(\"Test fundrawtxn with OP_RETURN and no vin\")\n \n         rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n@@ -632,6 +678,7 @@ def test_watchonly(self):\n         ##################################################\n         # test a fundrawtransaction using only watchonly #\n         ##################################################\n+        self.log.info(\"Test fundrawtxn using only watchonly\")\n \n         inputs = []\n         outputs = {self.nodes[2].getnewaddress(): self.watchonly_amount / 2}\n@@ -649,6 +696,7 @@ def test_all_watched_funds(self):\n         ###############################################################\n         # test fundrawtransaction using the entirety of watched funds #\n         ###############################################################\n+        self.log.info(\"Test fundrawtxn using entirety of watched funds\")\n \n         inputs = []\n         outputs = {self.nodes[2].getnewaddress(): self.watchonly_amount}\n@@ -676,6 +724,7 @@ def test_option_feerate(self):\n         #######################\n         # Test feeRate option #\n         #######################\n+        self.log.info(\"Test fundrawtxn feeRate option\")\n \n         # Make sure there is exactly one input so coin selection can't skew the result\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n@@ -695,6 +744,7 @@ def test_address_reuse(self):\n         ################################\n         # Test no address reuse occurs #\n         ################################\n+        self.log.info(\"Test fundrawtxn does not reuse addresses\")\n \n         rawtx = self.nodes[3].createrawtransaction(inputs=[], outputs={self.nodes[3].getnewaddress(): 1})\n         result3 = self.nodes[3].fundrawtransaction(rawtx)\n@@ -712,6 +762,7 @@ def test_option_subtract_fee_from_outputs(self):\n         ######################################\n         # Test subtractFeeFromOutputs option #\n         ######################################\n+        self.log.info(\"Test fundrawtxn subtractFeeFromOutputs option\")\n \n         # Make sure there is exactly one input so coin selection can't skew the result\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)"
      }
    ]
  },
  {
    "sha": "ff22751417c6fbbd22f4eefd0e23431a83335c13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjIyNzUxNDE3YzZmYmJkMjJmNGVlZmQwZTIzNDMxYTgzMzM1YzEz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-01T10:51:49Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-01T10:56:53Z"
      },
      "message": "test: rm ascii art in rpc_fundrawtransaction\n\nDoc changes only to test/functional/rpc_fundrawtransaction.py:\n\n- remove ascii art or convert to a docstring when sufficiently different from\nthe logging\n\n- touch up other comments while here",
      "tree": {
        "sha": "1199f5153035cd3e7c67658e99a68675525c8066",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1199f5153035cd3e7c67658e99a68675525c8066"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff22751417c6fbbd22f4eefd0e23431a83335c13",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl28D40ACgkQT1chs9Dj\nkh0sWw/5AW5+m7iSzwWuCSA6R6LQbdtJCpPyym6oTJDCQd7P5IiJlrP2PPWdINnH\nFgaOrCSOa4vmn2NhFamvqHPCWEtBMwmN9Qzyb20nnolURk/2hZ2xBYGcVNQ9uHz7\nki9P2A9nf/VacLQ+IDx8VDSyrcUqMKK5sPkCCcF9oNUTWgVlWAc2apNn65UAu/1X\nkJPC1f4vLBGQEi8N4zYSHO+zRgqwDfE+GB1CEv+4w5hqlAjhmr2LSQIJIpeU+N6l\n3/E8P8rPen7BW+PGRJbmPDzy0uNTpIPIusTs8HSG13/2Yp9+/MIlZySYKxaBhYb2\nKkVYPfp9y3n5gTdOKR2JAvfvCR/+oUQWI9tOaLTYOFPtuQgdu6FenYtYFBJmGI87\nWvDZYg0czHjF8ph574daOhr6c5eJmGpKKW+kF+cdgj4s4wLfxYagsMb4kO1cgfrN\nduI/6/e+Re5zD3GmQBliAdeBO91aFtOmW3Ku1zoJhNT+OXGNxGxfqE3A3FvViQeW\nE8EJF0sZ7t5g6CWtHxed6YEndZvaAqB1cra3l7SnKUpqvxu4vxNEPbJVeQ2i0jv0\njMi8EEo58FsNUIsfCUrmFVGHH3nc4bo5smrzMwVoS2S4GpJoHffbwScIW9urU8yn\n+yIzxYg12zx96lbLk39iXz4y+Giy1lou/HGjFprZDDXpwyG8JqA=\n=Mr12\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDXcN5y+2updM63Zmf1VzKnLg8rsSE/0jpFTThOowy3CCP/wEARUPZCudZFA\nH/uXK2a3m/YI8QRdvA+P8Ajd/NWUNI2bHACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQwTx9Lh1zJu4Cjals\nF+znVAjxBF28D47wCIiaAPQmaXrwAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t8BDJ0NiePsW5jzM0zqHgkYs1CPAgERO80uk4p2GY\nsxNwbMThuv/Iv7jbUxEBL8KQ93/TH7kI8QRdvA+P8Ah/b8NLFPT6NgCD3+MNLvkM\njikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1199f5153035cd3e7c67658e99a68675525c8066\nparent 94fcc08541cf58bee864ab7c28a6c77e42472f17\nauthor Jon Atack <jon@atack.com> 1572605509 +0100\ncommitter Jon Atack <jon@atack.com> 1572605813 +0100\n\ntest: rm ascii art in rpc_fundrawtransaction\n\nDoc changes only to test/functional/rpc_fundrawtransaction.py:\n\n- remove ascii art or convert to a docstring when sufficiently different from\nthe logging\n\n- touch up other comments while here\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff22751417c6fbbd22f4eefd0e23431a83335c13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff22751417c6fbbd22f4eefd0e23431a83335c13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff22751417c6fbbd22f4eefd0e23431a83335c13/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94fcc08541cf58bee864ab7c28a6c77e42472f17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fcc08541cf58bee864ab7c28a6c77e42472f17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94fcc08541cf58bee864ab7c28a6c77e42472f17"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 49,
      "deletions": 119
    },
    "files": [
      {
        "sha": "41a9b50ea6eeb931e9259ddcd6c7d42ee7820a3b",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 49,
        "deletions": 119,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff22751417c6fbbd22f4eefd0e23431a83335c13/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff22751417c6fbbd22f4eefd0e23431a83335c13/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=ff22751417c6fbbd22f4eefd0e23431a83335c13",
        "patch": "@@ -91,7 +91,7 @@ def run_test(self):\n         self.test_option_subtract_fee_from_outputs()\n \n     def test_change_position(self):\n-        # ensure that setting changePosition in fundraw with an exact match is handled properly\n+        \"\"\"Ensure setting changePosition in fundraw with an exact match is handled properly.\"\"\"\n         self.log.info(\"Test fundrawtxn changePosition option\")\n         rawmatch = self.nodes[2].createrawtransaction([], {self.nodes[2].getnewaddress():50})\n         rawmatch = self.nodes[2].fundrawtransaction(rawmatch, {\"changePosition\":1, \"subtractFeeFromOutputs\":[0]})\n@@ -117,9 +117,6 @@ def test_change_position(self):\n         self.sync_all()\n \n     def test_simple(self):\n-        ###############\n-        # simple test #\n-        ###############\n         self.log.info(\"Test fundrawtxn\")\n         inputs  = [ ]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n@@ -130,9 +127,6 @@ def test_simple(self):\n         assert len(dec_tx['vin']) > 0  #test that we have enough inputs\n \n     def test_simple_two_coins(self):\n-        ##############################\n-        # simple test with two coins #\n-        ##############################\n         self.log.info(\"Test fundrawtxn with 2 coins\")\n         inputs  = [ ]\n         outputs = { self.nodes[0].getnewaddress() : 2.2 }\n@@ -145,9 +139,6 @@ def test_simple_two_coins(self):\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n     def test_simple_two_outputs(self):\n-        ################################\n-        # simple test with two outputs #\n-        ################################\n         self.log.info(\"Test fundrawtxn with 2 outputs\")\n \n         inputs  = [ ]\n@@ -165,9 +156,6 @@ def test_simple_two_outputs(self):\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n     def test_change(self):\n-        #########################################################################\n-        # test a fundrawtransaction with a VIN greater than the required amount #\n-        #########################################################################\n         self.log.info(\"Test fundrawtxn with a vin > required amount\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -188,9 +176,6 @@ def test_change(self):\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n     def test_no_change(self):\n-        #####################################################################\n-        # test a fundrawtransaction with which will not get a change output #\n-        #####################################################################\n         self.log.info(\"Test fundrawtxn not having a change output\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -211,9 +196,6 @@ def test_no_change(self):\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n     def test_invalid_option(self):\n-        ####################################################\n-        # test a fundrawtransaction with an invalid option #\n-        ####################################################\n         self.log.info(\"Test fundrawtxn with an invalid option\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -229,9 +211,6 @@ def test_invalid_option(self):\n         assert_raises_rpc_error(-3, \"Unexpected key reserveChangeKey\", lambda: self.nodes[2].fundrawtransaction(hexstring=rawtx, options={'reserveChangeKey': True}))\n \n     def test_invalid_change_address(self):\n-        ############################################################\n-        # test a fundrawtransaction with an invalid change address #\n-        ############################################################\n         self.log.info(\"Test fundrawtxn with an invalid change address\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -244,9 +223,6 @@ def test_invalid_change_address(self):\n         assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n     def test_valid_change_address(self):\n-        ############################################################\n-        # test a fundrawtransaction with a provided change address #\n-        ############################################################\n         self.log.info(\"Test fundrawtxn with a provided change address\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -264,9 +240,6 @@ def test_valid_change_address(self):\n         assert_equal(change, out['scriptPubKey']['addresses'][0])\n \n     def test_change_type(self):\n-        #########################################################\n-        # test a fundrawtransaction with a provided change type #\n-        #########################################################\n         self.log.info(\"Test fundrawtxn with a provided change type\")\n         utx = get_unspent(self.nodes[2].listunspent(), 5)\n \n@@ -280,9 +253,6 @@ def test_change_type(self):\n         assert_equal('witness_v0_keyhash', dec_tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n \n     def test_coin_selection(self):\n-        #########################################################################\n-        # test a fundrawtransaction with a VIN smaller than the required amount #\n-        #########################################################################\n         self.log.info(\"Test fundrawtxn with a vin < required amount\")\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n \n@@ -315,9 +285,6 @@ def test_coin_selection(self):\n         assert_equal(len(dec_tx['vout']), 2)\n \n     def test_two_vin(self):\n-        ###########################################\n-        # test a fundrawtransaction with two VINs #\n-        ###########################################\n         self.log.info(\"Test fundrawtxn with 2 vins\")\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n         utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n@@ -349,9 +316,6 @@ def test_two_vin(self):\n         assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n \n     def test_two_vin_two_vout(self):\n-        #########################################################\n-        # test a fundrawtransaction with two VINs and two vOUTs #\n-        #########################################################\n         self.log.info(\"Test fundrawtxn with 2 vins and 2 vouts\")\n         utx = get_unspent(self.nodes[2].listunspent(), 1)\n         utx2 = get_unspent(self.nodes[2].listunspent(), 5)\n@@ -375,36 +339,30 @@ def test_two_vin_two_vout(self):\n         assert_equal(len(dec_tx['vout']), 3)\n \n     def test_invalid_input(self):\n-        ##############################################\n-        # test a fundrawtransaction with invalid vin #\n-        ##############################################\n         self.log.info(\"Test fundrawtxn with an invalid vin\")\n         inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n         outputs = { self.nodes[0].getnewaddress() : 1.0}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n     def test_fee_p2pkh(self):\n-        ############################################################\n-        #compare fee of a standard pubkeyhash transaction\n+        \"\"\"Compare fee of a standard pubkeyhash transaction.\"\"\"\n         self.log.info(\"Test fundrawtxn p2pkh fee\")\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n \n-        #create same transaction over sendtoaddress\n+        # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1.1)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n-        #compare fee\n+        # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n-        ############################################################\n \n     def test_fee_p2pkh_multi_out(self):\n-        ############################################################\n-        #compare fee of a standard pubkeyhash transaction with multiple outputs\n+        \"\"\"Compare fee of a standard pubkeyhash transaction with multiple outputs.\"\"\"\n         self.log.info(\"Test fundrawtxn p2pkh fee with multiple outputs\")\n         inputs = []\n         outputs = {\n@@ -417,20 +375,18 @@ def test_fee_p2pkh_multi_out(self):\n         }\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n-        #create same transaction over sendtoaddress\n+\n+        # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendmany(\"\", outputs)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n-        #compare fee\n+        # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n-        ############################################################\n \n     def test_fee_p2sh(self):\n-        ############################################################\n-        #compare fee of a 2of2 multisig p2sh transaction\n-\n-        # create 2of2 addr\n+        \"\"\"Compare fee of a 2-of-2 multisig p2sh transaction.\"\"\"\n+        # Create 2-of-2 addr.\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n \n@@ -444,21 +400,19 @@ def test_fee_p2sh(self):\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n \n-        #create same transaction over sendtoaddress\n+        # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n-        #compare fee\n+        # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n-        ############################################################\n \n     def test_fee_4of5(self):\n-        ############################################################\n-        #compare fee of a standard pubkeyhash transaction\n+        \"\"\"Compare fee of a standard pubkeyhash transaction.\"\"\"\n         self.log.info(\"Test fundrawtxn fee with 4-of-5 addresses\")\n \n-        # create 4of5 addr\n+        # Create 4-of-5 addr.\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n         addr3 = self.nodes[1].getnewaddress()\n@@ -487,21 +441,19 @@ def test_fee_4of5(self):\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[0].fundrawtransaction(rawtx)\n \n-        #create same transaction over sendtoaddress\n+        # Create same transaction over sendtoaddress.\n         txId = self.nodes[0].sendtoaddress(mSigObj, 1.1)\n         signedFee = self.nodes[0].getrawmempool(True)[txId]['fee']\n \n-        #compare fee\n+        # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n-        ############################################################\n \n     def test_spend_2of2(self):\n-        ############################################################\n-        # spend a 2of2 multisig transaction over fundraw\n+        \"\"\"Spend a 2-of-2 multisig transaction over fundraw.\"\"\"\n         self.log.info(\"Test fundrawtxn spending 2-of-2 multisig\")\n \n-        # create 2of2 addr\n+        # Create 2-of-2 addr.\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n@@ -516,7 +468,7 @@ def test_spend_2of2(self):\n             ]\n         )['address']\n \n-        # send 1.2 BTC to msig addr\n+        # Send 1.2 BTC to msig addr.\n         self.nodes[0].sendtoaddress(mSigObj, 1.2)\n         self.sync_all()\n         self.nodes[1].generate(1)\n@@ -534,20 +486,18 @@ def test_spend_2of2(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        # make sure funds are received at node1\n+        # Make sure funds are received at node1.\n         assert_equal(oldBalance+Decimal('1.10000000'), self.nodes[1].getbalance())\n \n     def test_locked_wallet(self):\n-        ############################################################\n-        # locked wallet test\n         self.log.info(\"Test fundrawtxn with locked wallet\")\n \n         self.nodes[1].encryptwallet(\"test\")\n         self.stop_nodes()\n \n         self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like\n-        # to be sure all txs are sent at a consistent desired feerate\n+        # to be sure all txns are sent at a consistent desired feerate.\n         for node in self.nodes:\n             node.settxfee(self.min_relay_tx_fee)\n \n@@ -556,11 +506,11 @@ def test_locked_wallet(self):\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[0], 3)\n         # Again lock the watchonly UTXO or nodes[0] may spend it, because\n-        # lockunspent is memory-only and thus lost on restart\n+        # lockunspent is memory-only and thus lost on restart.\n         self.nodes[0].lockunspent(False, [{\"txid\": self.watchonly_txid, \"vout\": self.watchonly_vout}])\n         self.sync_all()\n \n-        # drain the keypool\n+        # Drain the keypool.\n         self.nodes[1].getnewaddress()\n         self.nodes[1].getrawchangeaddress()\n         inputs = []\n@@ -570,7 +520,7 @@ def test_locked_wallet(self):\n         # creating the key must be impossible because the wallet is locked\n         assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n \n-        #refill the keypool\n+        # Refill the keypool.\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].keypoolrefill(8) #need to refill the keypool to get an internal change address\n         self.nodes[1].walletlock()\n@@ -584,23 +534,21 @@ def test_locked_wallet(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n \n-        #now we need to unlock\n+        # Now we need to unlock.\n         self.nodes[1].walletpassphrase(\"test\", 600)\n         signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        # make sure funds are received at node1\n+        # Make sure funds are received at node1.\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n \n     def test_many_inputs_fee(self):\n-        ###############################################\n-        # multiple (~19) inputs tx test | Compare fee #\n-        ###############################################\n+        \"\"\"Multiple (~19) inputs tx test | Compare fee.\"\"\"\n         self.log.info(\"Test fundrawtxn fee with many inputs\")\n \n-        #empty node1, send some small coins from node0 to node1\n+        # Empty node1, send some small coins from node0 to node1.\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -611,27 +559,25 @@ def test_many_inputs_fee(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        #fund a tx with ~20 small inputs\n+        # Fund a tx with ~20 small inputs.\n         inputs = []\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n \n-        #create same transaction over sendtoaddress\n+        # Create same transaction over sendtoaddress.\n         txId = self.nodes[1].sendmany(\"\", outputs)\n         signedFee = self.nodes[1].getrawmempool(True)[txId]['fee']\n \n-        #compare fee\n+        # Compare fee.\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance * 19  #~19 inputs\n \n     def test_many_inputs_send(self):\n-        #############################################\n-        # multiple (~19) inputs tx test | sign/send #\n-        #############################################\n+        \"\"\"Multiple (~19) inputs tx test | sign/send.\"\"\"\n         self.log.info(\"Test fundrawtxn sign+send with many inputs\")\n \n-        #again, empty node1, send some small coins from node0 to node1\n+        # Again, empty node1, send some small coins from node0 to node1.\n         self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), self.nodes[1].getbalance(), \"\", \"\", True)\n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -642,7 +588,7 @@ def test_many_inputs_send(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        #fund a tx with ~20 small inputs\n+        # Fund a tx with ~20 small inputs.\n         oldBalance = self.nodes[0].getbalance()\n \n         inputs = []\n@@ -657,9 +603,6 @@ def test_many_inputs_send(self):\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n     def test_op_return(self):\n-        #####################################################\n-        # test fundrawtransaction with OP_RETURN and no vin #\n-        #####################################################\n         self.log.info(\"Test fundrawtxn with OP_RETURN and no vin\")\n \n         rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n@@ -675,9 +618,6 @@ def test_op_return(self):\n         assert_equal(len(dec_tx['vout']), 2) # one change output added\n \n     def test_watchonly(self):\n-        ##################################################\n-        # test a fundrawtransaction using only watchonly #\n-        ##################################################\n         self.log.info(\"Test fundrawtxn using only watchonly\")\n \n         inputs = []\n@@ -693,16 +633,13 @@ def test_watchonly(self):\n         assert_greater_than(result[\"changepos\"], -1)\n \n     def test_all_watched_funds(self):\n-        ###############################################################\n-        # test fundrawtransaction using the entirety of watched funds #\n-        ###############################################################\n         self.log.info(\"Test fundrawtxn using entirety of watched funds\")\n \n         inputs = []\n         outputs = {self.nodes[2].getnewaddress(): self.watchonly_amount}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n-        # Backward compatibility test (2nd param is includeWatching)\n+        # Backward compatibility test (2nd param is includeWatching).\n         result = self.nodes[3].fundrawtransaction(rawtx, True)\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n         assert_equal(len(res_dec[\"vin\"]), 2)\n@@ -721,12 +658,9 @@ def test_all_watched_funds(self):\n         self.sync_all()\n \n     def test_option_feerate(self):\n-        #######################\n-        # Test feeRate option #\n-        #######################\n         self.log.info(\"Test fundrawtxn feeRate option\")\n \n-        # Make sure there is exactly one input so coin selection can't skew the result\n+        # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n \n         inputs = []\n@@ -741,9 +675,7 @@ def test_option_feerate(self):\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n     def test_address_reuse(self):\n-        ################################\n-        # Test no address reuse occurs #\n-        ################################\n+        \"\"\"Test no address reuse occurs.\"\"\"\n         self.log.info(\"Test fundrawtxn does not reuse addresses\")\n \n         rawtx = self.nodes[3].createrawtransaction(inputs=[], outputs={self.nodes[3].getnewaddress(): 1})\n@@ -755,16 +687,13 @@ def test_address_reuse(self):\n                 changeaddress += out['scriptPubKey']['addresses'][0]\n         assert changeaddress != \"\"\n         nextaddr = self.nodes[3].getnewaddress()\n-        # Now the change address key should be removed from the keypool\n+        # Now the change address key should be removed from the keypool.\n         assert changeaddress != nextaddr\n \n     def test_option_subtract_fee_from_outputs(self):\n-        ######################################\n-        # Test subtractFeeFromOutputs option #\n-        ######################################\n         self.log.info(\"Test fundrawtxn subtractFeeFromOutputs option\")\n \n-        # Make sure there is exactly one input so coin selection can't skew the result\n+        # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n \n         inputs = []\n@@ -795,38 +724,39 @@ def test_option_subtract_fee_from_outputs(self):\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n         result = [self.nodes[3].fundrawtransaction(rawtx),\n-                  # split the fee between outputs 0, 2, and 3, but not output 1\n+                  # Split the fee between outputs 0, 2, and 3, but not output 1.\n                   self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": [0, 2, 3]})]\n \n         dec_tx = [self.nodes[3].decoderawtransaction(result[0]['hex']),\n                   self.nodes[3].decoderawtransaction(result[1]['hex'])]\n \n-        # Nested list of non-change output amounts for each transaction\n+        # Nested list of non-change output amounts for each transaction.\n         output = [[out['value'] for i, out in enumerate(d['vout']) if i != r['changepos']]\n                   for d, r in zip(dec_tx, result)]\n \n-        # List of differences in output amounts between normal and subtractFee transactions\n+        # List of differences in output amounts between normal and subtractFee transactions.\n         share = [o0 - o1 for o0, o1 in zip(output[0], output[1])]\n \n-        # output 1 is the same in both transactions\n+        # Output 1 is the same in both transactions.\n         assert_equal(share[1], 0)\n \n-        # the other 3 outputs are smaller as a result of subtractFeeFromOutputs\n+        # The other 3 outputs are smaller as a result of subtractFeeFromOutputs.\n         assert_greater_than(share[0], 0)\n         assert_greater_than(share[2], 0)\n         assert_greater_than(share[3], 0)\n \n-        # outputs 2 and 3 take the same share of the fee\n+        # Outputs 2 and 3 take the same share of the fee.\n         assert_equal(share[2], share[3])\n \n-        # output 0 takes at least as much share of the fee, and no more than 2 satoshis more, than outputs 2 and 3\n+        # Output 0 takes at least as much share of the fee, and no more than 2\n+        # satoshis more, than outputs 2 and 3.\n         assert_greater_than_or_equal(share[0], share[2])\n         assert_greater_than_or_equal(share[2] + Decimal(2e-8), share[0])\n \n-        # the fee is the same in both transactions\n+        # The fee is the same in both transactions.\n         assert_equal(result[0]['fee'], result[1]['fee'])\n \n-        # the total subtracted from the outputs is equal to the fee\n+        # The total subtracted from the outputs is equal to the fee.\n         assert_equal(share[0] + share[2] + share[3], result[0]['fee'])\n \n if __name__ == '__main__':"
      }
    ]
  }
]