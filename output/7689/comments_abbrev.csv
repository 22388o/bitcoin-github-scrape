jonasschnelli,2016-03-15T08:27:02Z,Nice work!\nShort code review utACK. Will test soon.\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-196714786,196714786,
sipa,2016-03-16T17:29:11Z,Made a small change: the RijndaelSetup function now uses no modulus or division operations anymore. All tests still pass.\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-197444191,197444191,
sipa,2016-03-17T00:44:36Z,Added more comments.\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-197624230,197624230,
theuni,2016-03-17T02:10:54Z,Thanks @sipa for the constant-time version!\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-197654199,197654199,
jonasschnelli,2016-03-21T12:38:53Z,"Tested ACK (52e05be371551a4529ec9248afebcca67fae6181).\nVerified test vectors, run tests on different platforms and setups.\nTested this PR with encrypted `wallet.dat` from master (and vice versa).\n\nNOT tested/verified constant time behavior.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-199254006,199254006,
petertodd,2016-03-23T23:01:44Z,"Concept NACK\n\nI don't think we should be using low-level crypto primitives code developed by us that has ~zero chance of being reviewed or used by anyone other than us. I don't care how good we think we are, thats just not a good practice.\n\nMaybe stick this in libsecp256k1 instead?\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200575780,200575780,
gmaxwell,2016-03-24T05:20:33Z,"@petertodd the ""go put it in another library"" response has a verifiable history of killing useful progress here (see also continued use of the problematic and fairly scary openssl RNG), you wouldn't provide the same complaint for random ""found on the internet"" code that was demonstratively broken. Seems misplaced.  We don't have any performance concerns for AES but in a generic library there would",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200672247,200672247,
sipa,2016-03-24T07:00:06Z,"We could also not go as far making it a separate library, but do abstract\nout the inner AES logic as a separate C file and publish that under a\ndifferent repository, together with tests.\n\n@petertodd I agree in theory that it has little chance of being reviewed\nelsewhere this way, but what about reviewers here? We have several\nreimplementations of other crypto primitives, in which bugs could ",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200699101,200699101,
laanwj,2016-03-24T07:24:27Z,"I agree with @petertodd that ideally the code should be published separately from bitcoin as well.\n\nThis doesn't need to be a _generic_ library. We'd like this code to be self-contained (and have a special requirement here) so using OpenSSL et al is not an option, and maintaining a new generic library is a lot of work and responsibility too.\n\nBut I can understand that some people would find a ",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200703423,200703423,
luke-jr,2016-03-24T07:31:22Z,"There seems to be a case to make for a ""Bitcoin non-consensus crypto"" library with AES, SHA512, etc...\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200704384,200704384,
laanwj,2016-03-24T07:53:35Z,"I think we should ask the question separately from where the code is, though:\n\nCan we get any (independent, skilled) cryptographers to review this code? At least reviewing crypto code is a mostly one-time deal, after which it will (hardly) ever change.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200715826,200715826,
gmaxwell,2016-03-24T08:24:45Z,"I'd already suggested sipa split out and convert to C before he posted it because this have have independent interest as is probably the smallest constant time implementation of AES I've seen, or at least the smallest that doesn't have embarrassingly bad performance-- so no objection there.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200730929,200730929,
jonasschnelli,2016-03-24T08:27:18Z,I'm happy to extract this PR as C code into a C89 compatible library. I have interest to use this for my SPV library project (https://github.com/libbtc/libbtc) and for a open source hardware wallet MCU codebase: https://github.com/digitalbitbox/mcu.\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-200731622,200731622,
gmaxwell,2016-03-30T04:53:59Z,"I have had this code running on 104 cores for several days, running a test that feeds random input through encode and decode with random keys and compares it to AES-NI.\n\nThe current maximum long term rate for the wallet application of this code in the current network is roughly 7 decrypts per second of roughly 48 bytes. At the current speed of my test harness it means that I have tested the equi",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203248250,203248250,
laanwj,2016-03-30T07:23:51Z,Thanks for the thorough testing and reviewing @gmaxwell!\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203286840,203286840,
btcdrak,2016-03-30T09:02:30Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203333735,203333735,
paveljanik,2016-03-30T13:49:36Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203442099,203442099,
sipa,2016-03-30T13:58:36Z,"The constant time AES core code is now factored out to a new repository; for now, it's available at  http://github.com/sipa/ctaes/\n\nThe pull request here has been updated to use a subtree of that project, with C++ wrappers around it.\n\nThe build code is very simple: ctaes does not have any configuration or own build system, so Bitcoin Core just builds it as part of its own process. I have not i",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203445191,203445191,
sipa,2016-03-30T14:12:05Z,"I've marked it as WIP for now, as I'd like to get some review on the ctaes code first before moving to the separate repository.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203450315,203450315,
gmaxwell,2016-03-31T05:03:39Z,@sipa can you at least update to your latest code (even if not doing the subtree) just so people will not review the wrong thing?\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203753072,203753072,
sipa,2016-03-31T10:01:08Z,@gmaxwell Done. Not going to touch this PR or the sipa/ctaes master branch until there has been some review.\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-203860040,203860040,
sipa,2016-05-11T18:18:16Z,"Updated to latest ctaes (which includes a link to the review work by Ayo Akinyele), and rebased.\n\nI now get this error:\n\n```\n/usr/bin/ld: crypto/libbitcoin_crypto.a(crypto_libbitcoin_crypto_a-ctaes.o): relocation R_X86_64_PC32 against undefined symbol `__stack_chk_fail@@GLIBC_2.4' can not be used when making a shared object; recompile with -fPIC\n```\n\n@theuni Did I screw up the rebase?\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218544723,218544723,
theuni,2016-05-11T23:22:29Z,"@sipa: ctaes.c doesn't get cxxflags (it gets cflags since it builds with gcc). Introducing a c source throws a wrench in our assumptions that we're building c++(11) sources. We could come up with a common set of flags shared between them, but by far the easiest fix here is just to ctaes.c --> ctaes.cpp.\n\nIf that drives you crazy, I can work on it.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218618833,218618833,
sipa,2016-05-12T00:09:51Z,@theuni Included the .c file from the .cpp wrapper for now; seems to work fine\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218626025,218626025,
sipa,2016-05-12T01:20:06Z,"@theuni Ok, I'll need your help anyway :)\n\nEdit: nevermind, I did `EXTRA_DIST += src/crypto/ctaes` instead of `EXTRA_DIST += crypto/ctaes`\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218635218,218635218,
sipa,2016-05-13T08:30:34Z,"I think the CBC implementation should move to ctaes. It makes ctaes more useful (people shouldn't be using the raw AES block cipher without a mode of operation), and reduced custom-written crypto inside Core.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-218982670,218982670,
theuni,2016-05-13T17:03:51Z,"@sipa makes sense, sgtm. No hard feelings if you'd prefer to drop this stuff. I could port it to c and give it an api in ctaes if you'd like, though obviously the ""i tried to make it constant-time"" implementation will need a stronger guarantee :)\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219101534,219101534,
sipa,2016-05-13T17:07:03Z,"@theuni No need for that to be a blocker, though. We could move things to C as a follow-up.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219102300,219102300,
sipa,2016-05-13T18:24:39Z,"Ready for merging, I hope.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219122213,219122213,
gmaxwell,2016-05-14T00:18:35Z,"I didn't see any tests that explicit test for failure with invalid padding, except perhaps in the test that makes sure it behaves the same as OpenSSL. Perhaps if the CBC mode is ported to C in a later PR that could be addressed.\n\nutACK.  Good work sipa and cfields.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219187989,219187989,
btcdrak,2016-05-17T19:39:35Z,"For the record, the formal peer review was made of CTAES implementation correctness. The report can be found at http://bitcoin.sipa.be/ctaes/review.zip written by Ayo Akinyele.\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-219830217,219830217,
sipa,2016-05-25T14:17:23Z,@theuni @jonasschnelli Feel like testing/reviewing again after the update to use ctaes?\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-221590237,221590237,
theuni,2016-05-26T15:54:15Z,"@sipa Thanks for the reminder, I'll test/ack again today. I'm not qualified to review ctaes itself, so I'll have to defer to Ayo Akinyele's review (which appears thorough).\n",https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-221913280,221913280,
theuni,2016-05-27T18:38:35Z,@sipa Please grab a quick build change: https://github.com/theuni/bitcoin/commit/723779c6504453cfb5ccdacf864e7e2f09bb6c32\n\nAfter that: ACK\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-222222582,222222582,
sipa,2016-05-27T18:54:01Z,@theuni Merged in\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-222226272,222226272,
theuni,2016-06-01T16:12:58Z,ACK https://github.com/bitcoin/bitcoin/pull/7689/commits/723779c6504453cfb5ccdacf864e7e2f09bb6c32\n,https://github.com/bitcoin/bitcoin/pull/7689#issuecomment-223044079,223044079,
jonasschnelli,2016-03-15T08:26:05Z,I guess this does not break the `--disable-wallet` non BDB compile option? Its probably empty if BDB was not found.\n,https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56128445,56128445,src/Makefile.am
theuni,2016-03-17T02:09:50Z,"@jonasschnelli yep, just empty\n",https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56446590,56446590,src/Makefile.am
gmaxwell,2016-03-19T17:05:15Z,"A bounds assertion on nkeywords would be helpful prior to this line (e.g. at the start of the function). The loop requires that i<8 to prevent overflow on the stack, but this is only enforced in the caller. Similarly, the round count must be limited to not overflow the state.\n",https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56751705,56751705,src/crypto/aes.cpp
sipa,2016-03-20T13:57:48Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/7689#discussion_r56764840,56764840,src/crypto/aes.cpp
pstratem,2016-05-17T08:15:22Z,Won't this just be optimized out?\n,https://github.com/bitcoin/bitcoin/pull/7689#discussion_r63480900,63480900,src/crypto/aes.cpp
theuni,2016-05-17T21:01:49Z,"@pstratem Probably, but it doesn't hurt to leave it here. We can replace it with something stronger when we figure out what to do about OPENSSL_cleanse.\n",https://github.com/bitcoin/bitcoin/pull/7689#discussion_r63603342,63603342,src/crypto/aes.cpp
