MarcoFalke,2020-08-25 17:45:52,"Heh, this one might be controversial. In theory it shouldn't be confusing if there is only exactly one p2p connection. If this pull gets Concept ACKs, that is fine. If not, it might be good to replace the `assert self.p2ps` with `assert len(self.p2ps)==1`.",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-680174958,680174958,
glozow,2020-08-25 17:51:09,@MarcoFalke indeed. [You put this idea in my head](https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644442680) üòÇ but `assert len == 1` is a good way too. I don't see any advantages to having this though.,https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-680177633,680177633,
MarcoFalke,2020-08-25 18:16:39,"Yes, I remember that. It looks like that was in reply to a performance bottleneck. Is that still observable?",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-680190467,680190467,
glozow,2020-08-25 19:01:09,@MarcoFalke I think the performance problems were addressed elsewhere [(comment)](https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644530432). We were talking about p2p_invalid_messages.py which has a lot of subtests that needed to wait for `disconnect_p2ps` before moving on.,https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-680212829,680212829,
DrahtBot,2020-08-26 01:12:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19893 (test: Remove or explain syncwithvalidationinterfacequeue by MarcoFalke)\n* #19801 (test: check for all possible OP",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-680401982,680401982,
theStack,2020-08-28 10:39:28,"Concept ACK\nI agree that the `p2p` property can be quite confusing, as it is a bit too much of ""implicit magic"" going on.\n```\nnode.add_p2p_connection(P2PInterface())\nnode.p2p.do_something_fancy()\n```\nis less clear than the explicit\n```\np2p_conn = node.add_p2p_connection(P2PInterface())\np2p_conn.do_something_fancy()\n```\nin terms of readability, in my opinion. Generally, if you",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-682455956,682455956,
glozow,2020-08-28 15:50:39,"thanks for Concept ACK @theStack! \n\nAgreed that's more clear, I could also just apply the explicit `p2p_conn = node.add_p2p_connection(...)` to all the places where `p2p` is used (just couldn't be a scripted-diff).\n\nI'll wait for more people to weigh in :)",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-682753036,682753036,
robot-dreams,2020-09-01 06:25:36,"Yes, agreed that this seems controversial :) there was even discussion of this in the original PR: https://github.com/bitcoin/bitcoin/pull/11182#issuecomment-331467540\n\nI don't have a strong preference for `p2p` vs `p2ps[0]`. I have a mild preference for not reversing an existing style decision without new information. Maybe you can see if the original author says ""I regret my decision to intr",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-684437371,684437371,
glozow,2020-09-01 11:45:06,"That is true, I should have asked - @jnewbery how do you feel about this?",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-684792137,684792137,
jnewbery,2020-09-01 13:35:52,"> @jnewbery how do you feel about this?\n\nI can see how `TestNode.p2p` could introduce subtle bugs if tests get extended and the wrong connection is used by mistake, so we should either remove the property or add an assert when it gets used.\n\nThe approach in this PR (removing the property entirely) seems fine to me. Concept ACK.",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-684858325,684858325,
robot-dreams,2020-09-01 17:58:32,"Concept ACK\n\nAnd thanks for the motivation to learn about `scripted-diff` :)\n\nAre you also on MacOS? I had to install `gsed` and use that in place of `sed` in order to run `commit-script-check.sh` locally, but once I did this, I was able to reproduce the CI error.\n\nA few thoughts:\n- Do you need to append a final `/g` to the scripted diff to avoid the ""unterminated `s command"" CI erro",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-685035203,685035203,
glozow,2020-09-04 01:39:16,"> * Should the regex be `\.p2p\b` (end on a word boundary instead of a dot)? e.g. it looks like test/functional/feature_versionbits_warning.py uses node.p2p without a trailing dot\n\n@robot-dreams really good point about feature_versionbits_warning, thanks for catching that! I think the problem with using `\.p2p\b` is we'll also be replacing all of the `test_framework.p2p` imports. I'm going thr",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-686849451,686849451,
robot-dreams,2020-09-04 02:09:25,"Oops, nice catch! I forgot to actually test the script myself üòÖ \n\nIt's a moot point at this point since your proposed change sounds better, but I think this would've worked (don't do the replace on lines that start with `from`)\n\n    sed -i '/^from/!s/\.p2p\b/.p2ps[0]/g' $(git grep -l ""\.p2p\b"" test/functional)",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-686857844,686857844,
glozow,2020-09-04 02:25:25,"One day I will get the scripted-diff right on the first try... üòÇ \n\nI figured 3 Concept ACKs was enough for me to put some work into this. Last push replaces `p2p` property with the p2p object returned from `node.add_p2p_connection()` instead (except for two places where it'd be a nontrivial refactor). As stated previously in the description and by @theStack, this is the clearest way to do it. ",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-686862039,686862039,
glozow,2020-09-10 16:05:50,"Did a little more refactoring to make feature_block.py and feature_csv_activation.py more clear, addressed @MarcoFalke's comments. Just left p2p_invalid_tx.py for the scripted-diff since it seems to want a variable number of connections in `bootstrap_p2p`, maybe future additions to the test could need it. Also added some stuff to the functional test README. Ready for another look :)",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-690411440,690411440,
robot-dreams,2020-09-10 21:33:04,"utACK 10d61505fe77880d6989115defa5e08417f3de2d\n\nThanks for improving the documentation as well!",https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-690743886,690743886,
jnewbery,2020-09-14 08:41:50,utACK 10d61505fe77880d6989115defa5e08417f3de2d,https://github.com/bitcoin/bitcoin/pull/19804#issuecomment-691911283,691911283,
robot-dreams,2020-09-04 02:30:47,Nit: Would it make sense to incorporate this change into the scripted-diff?,https://github.com/bitcoin/bitcoin/pull/19804#discussion_r483351426,483351426,test/functional/feature_block.py
robot-dreams,2020-09-04 02:34:16,Nit: Should `p2p.wait_until` be replaced with `peer_receiving.wait_until` in this comment?,https://github.com/bitcoin/bitcoin/pull/19804#discussion_r483352225,483352225,test/functional/example_test.py
glozow,2020-09-04 12:27:19,yes i should do that!,https://github.com/bitcoin/bitcoin/pull/19804#discussion_r483583612,483583612,test/functional/feature_block.py
glozow,2020-09-04 12:27:53,"they are the same, no?",https://github.com/bitcoin/bitcoin/pull/19804#discussion_r483583888,483583888,test/functional/example_test.py
robot-dreams,2020-09-04 17:21:17,"Yes, my intent was ""for clarity, should the variable name in the comment match the usage on line 205"", but I could also see the case for `p2p` being clearer than `peer_receiving`.\n\nI'm happy with it the way it is, especially if you think it's clearer as `p2p`!",https://github.com/bitcoin/bitcoin/pull/19804#discussion_r483757252,483757252,test/functional/example_test.py
glozow,2020-09-04 17:50:43,"ohhhh i see what you mean! ü§∑  I think since it's in example_test.py, yeah, `p2p` might be more helpful",https://github.com/bitcoin/bitcoin/pull/19804#discussion_r483769860,483769860,test/functional/example_test.py
MarcoFalke,2020-09-06 08:41:00,"What about \n```suggestion\n        self.helper_peer = self.nodes[0].add_p2p_connection(P2PDataStore())\n```",https://github.com/bitcoin/bitcoin/pull/19804#discussion_r484041352,484041352,test/functional/feature_block.py
MarcoFalke,2020-09-06 08:41:21,"```suggestion\n        self.helper_peer.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_reason=reject_reason, force_send=force_send, timeout=timeout, expect_disconnect=reconnect)\n```",https://github.com/bitcoin/bitcoin/pull/19804#discussion_r484041377,484041377,test/functional/feature_block.py
glozow,2020-09-10 14:03:19,ü§¶‚Äç‚ôÄÔ∏è  I should've just done that,https://github.com/bitcoin/bitcoin/pull/19804#discussion_r486369553,486369553,test/functional/feature_block.py
guggero,2020-09-17 14:21:18,6 lines above there's a stray `node.p2ps[1]` that can be replaced with `peer_second`.,https://github.com/bitcoin/bitcoin/pull/19804#discussion_r490286433,490286433,test/functional/wallet_resendwallettransactions.py
MarcoFalke,2020-09-25 12:22:23,@guggero Seems like a good suggestion. Mind following up with a patch?,https://github.com/bitcoin/bitcoin/pull/19804#discussion_r494950062,494950062,test/functional/wallet_resendwallettransactions.py
