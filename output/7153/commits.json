[
  {
    "sha": "110ff1142c5284edba8aab77fcac0bea0e551969",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTBmZjExNDJjNTI4NGVkYmE4YWFiNzdmY2FjMGJlYTBlNTUxOTY5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T14:42:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-02T07:36:05Z"
      },
      "message": "[Tests] Add mempool_limit.py test",
      "tree": {
        "sha": "ea8f8c1dd86bcd0d5d5610ec5c1c0eb3e554e1c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea8f8c1dd86bcd0d5d5610ec5c1c0eb3e554e1c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/110ff1142c5284edba8aab77fcac0bea0e551969",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWXp9nAAoJECnUvLZBb1Psn0oP/02L2ScLaXSHp1Qwd8f/MXtZ\nCiPydDAE8SkqAiDuON/cDncXaH7+V3/2bKG9VnP/JdPkW5dJD/1Nd2pXFbuCqOSH\n7iyl4XKePqTe0H6gvlMQgWR70oDOcKaugxMK35if5PxqGR8X9Y74BP+1MNfCs9pn\nKDrpnv0fU1HhUJ08qxa+DjmbwJB4Kijw6l4qVIOQCccAOsyTHS5agHA5Hhfb/FP9\n4RG5iI4/sIKMxlGxbTAeWH/vElalvGNPTxP8mUTpVtOQZk9pcpHidRco/hkYoyrX\nsiwRj/IBXAH6TViJCjXTj9V11F7IB1d88i4ZhtP0VdchkW/Ab45nvihUUfsDFxKL\nuch5b7HwwLnLtlqTnKKInwzP0EQU91leX1D7x5mBTYvOftaUUSqjQEYvtMzWRZHL\nS0mXDA+UK7Ir171nKRh9/Y+EUWd6av/wi7vT5iLxtMt/YSEnHie3q4XP5HaDynQs\nhP2hfYxhi7OESJjwGD7dFSmoUHCHn3sd7oRiCmpi0dMB3GKblKatYIRjpTWSsmb+\n0n98yapiKEqRmDyVFf2MO6qCqn8V8WkgTA0GFThHiLCi9i+sqKxePNsHxjB7PGBZ\nzCBDyn6e0xjVbHZ/a04cQmcNFwe6yQMDpqp6zXgoMIrILIl9GjB5cICnc5nOvjws\nQ9oYuEJczwrMesQJ/4hT\n=PCAj\n-----END PGP SIGNATURE-----",
        "payload": "tree ea8f8c1dd86bcd0d5d5610ec5c1c0eb3e554e1c1\nparent 4077ad20d03f0ef61d48ef34b3107661b0ff8ffe\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1448894547 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1449041765 +0100\n\n[Tests] Add mempool_limit.py test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/110ff1142c5284edba8aab77fcac0bea0e551969",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/110ff1142c5284edba8aab77fcac0bea0e551969",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/110ff1142c5284edba8aab77fcac0bea0e551969/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4077ad20d03f0ef61d48ef34b3107661b0ff8ffe"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 120,
      "deletions": 0
    },
    "files": [
      {
        "sha": "993646c50517e5c810e5d8ad641e651ca01be45c",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/110ff1142c5284edba8aab77fcac0bea0e551969/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/110ff1142c5284edba8aab77fcac0bea0e551969/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=110ff1142c5284edba8aab77fcac0bea0e551969",
        "patch": "@@ -83,6 +83,7 @@\n     'rest.py',\n     'mempool_spendcoinbase.py',\n     'mempool_reorg.py',\n+    'mempool_limit.py',\n     'httpbasics.py',\n     'multi_rpc.py',\n     'zapwallettxes.py',"
      },
      {
        "sha": "aeaaa29f32ff87a148794aecf671314d7e326725",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "added",
        "additions": 119,
        "deletions": 0,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/110ff1142c5284edba8aab77fcac0bea0e551969/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/110ff1142c5284edba8aab77fcac0bea0e551969/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=110ff1142c5284edba8aab77fcac0bea0e551969",
        "patch": "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Test mempool limiting together/eviction with the wallet\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class MempoolLimitTest(BitcoinTestFramework):\n+\n+    def satoshi_round(self, amount):\n+        return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+\n+    def __init__(self):\n+        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n+        # So we have big transactions (and therefore can't fit very many into each block)\n+        # create one script_pubkey\n+        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n+        for i in xrange (512):\n+            script_pubkey = script_pubkey + \"01\"\n+        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n+        self.txouts = \"81\"\n+        for k in xrange(128):\n+            # add txout value\n+            self.txouts = self.txouts + \"0000000000000000\"\n+            # add length of script_pubkey\n+            self.txouts = self.txouts + \"fd0402\"\n+            # add script_pubkey\n+            self.txouts = self.txouts + script_pubkey\n+\n+    def create_confirmed_utxos(self, count):\n+        self.nodes[0].generate(int(0.5*90)+102)\n+        utxos = self.nodes[0].listunspent()\n+        iterations = count - len(utxos)\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        if iterations <= 0:\n+            return utxos\n+        for i in xrange(iterations):\n+            t = utxos.pop()\n+            fee = self.relayfee\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr1] = self.satoshi_round(send_value/2)\n+            outputs[addr2] = self.satoshi_round(send_value/2)\n+            raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_tx = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+            txid = self.nodes[0].sendrawtransaction(signed_tx)\n+\n+        while (self.nodes[0].getmempoolinfo()['size'] > 0):\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+        assert(len(utxos) >= count)\n+        return utxos\n+\n+    def create_lots_of_big_transactions(self, utxos, fee):\n+        addr = self.nodes[0].getnewaddress()\n+        txids = []\n+        for i in xrange(len(utxos)):\n+            t = utxos.pop()\n+            inputs = []\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            outputs = {}\n+            send_value = t['amount'] - fee\n+            outputs[addr] = self.satoshi_round(send_value)\n+            rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            newtx = rawtx[0:92]\n+            newtx = newtx + self.txouts\n+            newtx = newtx + rawtx[94:]\n+            signresult = self.nodes[0].signrawtransaction(newtx, None, None, \"NONE\")\n+            txid = self.nodes[0].sendrawtransaction(signresult[\"hex\"], True)\n+            txids.append(txid)\n+        return txids\n+                    \n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\", \"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, []))\n+        connect_nodes(self.nodes[0], 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+        self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def run_test(self):\n+        txids = []\n+        utxos = self.create_confirmed_utxos(90)\n+\n+        #create a mempool tx that will be evicted\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {self.nodes[1].getnewaddress() : 0.0001}\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        txF = self.nodes[0].fundrawtransaction(tx)\n+        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n+        self.nodes[0].lockunspent(True, [us0])\n+\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        base_fee = relayfee*100\n+        for i in xrange (4):\n+            txids.append([])\n+            txids[i] = self.create_lots_of_big_transactions(utxos[30*i:30*i+30], (i+1)*base_fee)\n+\n+        # by now, the tx should be evicted, check confirmation state\n+        assert(txid not in self.nodes[0].getrawmempool())\n+        txdata = self.nodes[0].gettransaction(txid);\n+        assert(txdata['confirmations'] ==  0) #confirmation should still be 0\n+\n+if __name__ == '__main__':\n+    MempoolLimitTest().main()"
      }
    ]
  },
  {
    "sha": "7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjMyY2Y2ODlhOWI5NTlkZDdhMDU5YjhiNGEwNDc2MWE0YmM2ZTZh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-03T10:02:24Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-03T12:25:27Z"
      },
      "message": "[Tests] Refactor some shared functions",
      "tree": {
        "sha": "af148e735c739973263404a2c38093a99aa0abc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af148e735c739973263404a2c38093a99aa0abc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWYDS5AAoJECnUvLZBb1Ps+poP/1QP/4ufz1VCkK4ksvhw/Kl8\nTPPGPQihAgSjZbdtfKAwXJbT0RN52kX9oiFxTz+RYGt7mgU+heI/X01n9dzPjd4A\nGkf3/kFgGOJsCP1m4V6X1KRLLbG6JXTU9xEdTkvDd04lxc80ZHSjf7CQmVuQZhCe\n9qNRSWSLjtZMYCu9gWi1bnsRyHEWzsnCnwWUtRsAIdjtltxg3yb3M1t6q03//NYU\nypr1ynpi9RknVLjtjGZBwblV/uK+B4gpF4IdQFQkbRwZAYpjyMwAImArYrd1L2O4\neBIhA+QzY+a1y7lYt+XCQIxRmjJGoEx4SfhSquLkJgQ1W5KW1l9HlSGZdJvZU3q8\nKJsUCkjTjZPuKpAmw5bN86xrRIxDV+v7NgGuvslvw17CKejARmZk3rZhRoxeFg3z\ndst/AfYxgKLLqVhNY1wo6+FQTdsOC8SYZ0JYnY94SQWQOruxTWPhFZNqFYnMgfh4\n6i85ogiteTqWcfaE9WayeRwJfJZzV27rJV4L1/x2zVsm3E7IQOkb70GPYorWeD58\ndETxgXfSJkypzIEu+JMlGQ9yrSt5zXPtCYFadRvTs+pEVMCZb9eSk2MUkpULNMKr\nZ/9P/j89ichD4pmg+OAw8NNn1uu1pDbbaIeb+654yiKC7HlgWrzQpjbcg6NzKWgc\ni+Ld/ZEKWvR5oDTP/hpn\n=DDwW\n-----END PGP SIGNATURE-----",
        "payload": "tree af148e735c739973263404a2c38093a99aa0abc2\nparent 110ff1142c5284edba8aab77fcac0bea0e551969\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1449136944 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1449145527 +0100\n\n[Tests] Refactor some shared functions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "110ff1142c5284edba8aab77fcac0bea0e551969",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/110ff1142c5284edba8aab77fcac0bea0e551969",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/110ff1142c5284edba8aab77fcac0bea0e551969"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 51,
      "deletions": 104
    },
    "files": [
      {
        "sha": "48a2ea294a9a63ccdffb1760765d48106131c5b2",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 55,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
        "patch": "@@ -10,9 +10,6 @@\n \n class MempoolLimitTest(BitcoinTestFramework):\n \n-    def satoshi_round(self, amount):\n-        return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n     def __init__(self):\n         # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n         # So we have big transactions (and therefore can't fit very many into each block)\n@@ -29,59 +26,10 @@ def __init__(self):\n             self.txouts = self.txouts + \"fd0402\"\n             # add script_pubkey\n             self.txouts = self.txouts + script_pubkey\n-\n-    def create_confirmed_utxos(self, count):\n-        self.nodes[0].generate(int(0.5*90)+102)\n-        utxos = self.nodes[0].listunspent()\n-        iterations = count - len(utxos)\n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n-        if iterations <= 0:\n-            return utxos\n-        for i in xrange(iterations):\n-            t = utxos.pop()\n-            fee = self.relayfee\n-            inputs = []\n-            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n-            outputs = {}\n-            send_value = t['amount'] - fee\n-            outputs[addr1] = self.satoshi_round(send_value/2)\n-            outputs[addr2] = self.satoshi_round(send_value/2)\n-            raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_tx = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n-            txid = self.nodes[0].sendrawtransaction(signed_tx)\n-\n-        while (self.nodes[0].getmempoolinfo()['size'] > 0):\n-            self.nodes[0].generate(1)\n-\n-        utxos = self.nodes[0].listunspent()\n-        assert(len(utxos) >= count)\n-        return utxos\n-\n-    def create_lots_of_big_transactions(self, utxos, fee):\n-        addr = self.nodes[0].getnewaddress()\n-        txids = []\n-        for i in xrange(len(utxos)):\n-            t = utxos.pop()\n-            inputs = []\n-            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n-            outputs = {}\n-            send_value = t['amount'] - fee\n-            outputs[addr] = self.satoshi_round(send_value)\n-            rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            newtx = rawtx[0:92]\n-            newtx = newtx + self.txouts\n-            newtx = newtx + rawtx[94:]\n-            signresult = self.nodes[0].signrawtransaction(newtx, None, None, \"NONE\")\n-            txid = self.nodes[0].sendrawtransaction(signresult[\"hex\"], True)\n-            txids.append(txid)\n-        return txids\n                     \n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\", \"-debug\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, []))\n-        connect_nodes(self.nodes[0], 1)\n         self.is_network_split = False\n         self.sync_all()\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -92,12 +40,12 @@ def setup_chain(self):\n \n     def run_test(self):\n         txids = []\n-        utxos = self.create_confirmed_utxos(90)\n+        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], 90)\n \n         #create a mempool tx that will be evicted\n         us0 = utxos.pop()\n         inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[1].getnewaddress() : 0.0001}\n+        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         txF = self.nodes[0].fundrawtransaction(tx)\n         txFS = self.nodes[0].signrawtransaction(txF['hex'])\n@@ -108,7 +56,7 @@ def run_test(self):\n         base_fee = relayfee*100\n         for i in xrange (4):\n             txids.append([])\n-            txids[i] = self.create_lots_of_big_transactions(utxos[30*i:30*i+30], (i+1)*base_fee)\n+            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], (i+1)*base_fee)\n \n         # by now, the tx should be evicted, check confirmation state\n         assert(txid not in self.nodes[0].getrawmempool())"
      },
      {
        "sha": "b4ef1a9b3c892db6fa20ebf589498700cb952778",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 49,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
        "patch": "@@ -42,62 +42,15 @@ def setup_network(self):\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-printpriority=1\"]))\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n-    def create_confirmed_utxos(self, count):\n-        self.nodes[0].generate(int(0.5*count)+101)\n-        utxos = self.nodes[0].listunspent()\n-        iterations = count - len(utxos)\n-        addr1 = self.nodes[0].getnewaddress()\n-        addr2 = self.nodes[0].getnewaddress()\n-        if iterations <= 0:\n-            return utxos\n-        for i in xrange(iterations):\n-            t = utxos.pop()\n-            fee = self.relayfee\n-            inputs = []\n-            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n-            outputs = {}\n-            send_value = t['amount'] - fee\n-            outputs[addr1] = satoshi_round(send_value/2)\n-            outputs[addr2] = satoshi_round(send_value/2)\n-            raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_tx = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n-            txid = self.nodes[0].sendrawtransaction(signed_tx)\n-\n-        while (self.nodes[0].getmempoolinfo()['size'] > 0):\n-            self.nodes[0].generate(1)\n-\n-        utxos = self.nodes[0].listunspent()\n-        assert(len(utxos) >= count)\n-        return utxos\n-\n-    def create_lots_of_big_transactions(self, utxos, fee):\n-        addr = self.nodes[0].getnewaddress()\n-        txids = []\n-        for i in xrange(len(utxos)):\n-            t = utxos.pop()\n-            inputs = []\n-            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n-            outputs = {}\n-            send_value = t['amount'] - fee\n-            outputs[addr] = satoshi_round(send_value)\n-            rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            newtx = rawtx[0:92]\n-            newtx = newtx + self.txouts\n-            newtx = newtx + rawtx[94:]\n-            signresult = self.nodes[0].signrawtransaction(newtx, None, None, \"NONE\")\n-            txid = self.nodes[0].sendrawtransaction(signresult[\"hex\"], True)\n-            txids.append(txid)\n-        return txids\n-\n     def run_test(self):\n-        utxos = self.create_confirmed_utxos(90)\n+        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], 90)\n         base_fee = self.relayfee*100 # our transactions are smaller than 100kb\n         txids = []\n \n         # Create 3 batches of transactions at 3 different fee rate levels\n         for i in xrange(3):\n             txids.append([])\n-            txids[i] = self.create_lots_of_big_transactions(utxos[30*i:30*i+30], (i+1)*base_fee)\n+            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], (i+1)*base_fee)\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined (lower"
      },
      {
        "sha": "80ee8ea16de950c030133466617bfdad8345720b",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7632cf689a9b959dd7a059b8b4a04761a4bc6e6a/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=7632cf689a9b959dd7a059b8b4a04761a4bc6e6a",
        "patch": "@@ -408,3 +408,49 @@ def assert_raises(exc, fun, *args, **kwds):\n \n def satoshi_round(amount):\n     return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+\n+def create_confirmed_utxos(fee, node, count):\n+    node.generate(int(0.5*count)+101)\n+    utxos = node.listunspent()\n+    iterations = count - len(utxos)\n+    addr1 = node.getnewaddress()\n+    addr2 = node.getnewaddress()\n+    if iterations <= 0:\n+        return utxos\n+    for i in xrange(iterations):\n+        t = utxos.pop()\n+        inputs = []\n+        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+        outputs = {}\n+        send_value = t['amount'] - fee\n+        outputs[addr1] = satoshi_round(send_value/2)\n+        outputs[addr2] = satoshi_round(send_value/2)\n+        raw_tx = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n+        txid = node.sendrawtransaction(signed_tx)\n+\n+    while (node.getmempoolinfo()['size'] > 0):\n+        node.generate(1)\n+\n+    utxos = node.listunspent()\n+    assert(len(utxos) >= count)\n+    return utxos\n+\n+def create_lots_of_big_transactions(node, txouts, utxos, fee):\n+    addr = node.getnewaddress()\n+    txids = []\n+    for i in xrange(len(utxos)):\n+        t = utxos.pop()\n+        inputs = []\n+        inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+        outputs = {}\n+        send_value = t['amount'] - fee\n+        outputs[addr] = satoshi_round(send_value)\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        newtx = rawtx[0:92]\n+        newtx = newtx + txouts\n+        newtx = newtx + rawtx[94:]\n+        signresult = node.signrawtransaction(newtx, None, None, \"NONE\")\n+        txid = node.sendrawtransaction(signresult[\"hex\"], True)\n+        txids.append(txid)\n+    return txids\n\\ No newline at end of file"
      }
    ]
  }
]