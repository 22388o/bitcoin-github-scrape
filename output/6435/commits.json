[
  {
    "sha": "51592935d5e530a3de001196285497dac5ed8b26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTU5MjkzNWQ1ZTUzMGEzZGUwMDExOTYyODU0OTdkYWM1ZWQ4YjI2",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-14T18:49:40Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-14T19:43:44Z"
      },
      "message": "Always clean up manual tx prioritization deltas",
      "tree": {
        "sha": "b21c22c02039e8779bb2ae435a496120d6bb198a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b21c22c02039e8779bb2ae435a496120d6bb198a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51592935d5e530a3de001196285497dac5ed8b26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51592935d5e530a3de001196285497dac5ed8b26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51592935d5e530a3de001196285497dac5ed8b26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51592935d5e530a3de001196285497dac5ed8b26/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd5dfda9396968346edcf1f5ddf946d63e797554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd5dfda9396968346edcf1f5ddf946d63e797554",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd5dfda9396968346edcf1f5ddf946d63e797554"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8ef269813613362db44cc44aa46497a9baaa8d9a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51592935d5e530a3de001196285497dac5ed8b26/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51592935d5e530a3de001196285497dac5ed8b26/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=51592935d5e530a3de001196285497dac5ed8b26",
        "patch": "@@ -150,6 +150,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n             totalTxSize -= mapTx[hash].GetTxSize();\n             cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n             mapTx.erase(hash);\n+            mapDeltas.erase(hash);\n             nTransactionsUpdated++;\n             minerPolicyEstimator->removeTx(hash);\n         }\n@@ -217,7 +218,6 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n         std::list<CTransaction> dummy;\n         remove(tx, dummy, false);\n         removeConflicts(tx, conflicts);\n-        ClearPrioritisation(tx.GetHash());\n     }\n     // After the txs in the new block have been removed from the mempool, update policy estimates\n     minerPolicyEstimator->processBlock(nBlockHeight, entries, fCurrentEstimate);\n@@ -395,12 +395,6 @@ void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount\n     nFeeDelta += deltas.second;\n }\n \n-void CTxMemPool::ClearPrioritisation(const uint256 hash)\n-{\n-    LOCK(cs);\n-    mapDeltas.erase(hash);\n-}\n-\n bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n {\n     for (unsigned int i = 0; i < tx.vin.size(); i++)"
      },
      {
        "sha": "985e2b0ba147620be92e3e9b7451482f2fac8631",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51592935d5e530a3de001196285497dac5ed8b26/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51592935d5e530a3de001196285497dac5ed8b26/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=51592935d5e530a3de001196285497dac5ed8b26",
        "patch": "@@ -136,7 +136,6 @@ class CTxMemPool\n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n-    void ClearPrioritisation(const uint256 hash);\n \n     unsigned long size()\n     {"
      }
    ]
  },
  {
    "sha": "13985c54db8495597c6ee55176d11d3ad7570d7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzk4NWM1NGRiODQ5NTU5N2M2ZWU1NTE3NmQxMWQzYWQ3NTcwZDdk",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-22T15:43:42Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-22T15:43:42Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "34e31e6120d2ec6be8d0ffc5b386830fb31b921a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34e31e6120d2ec6be8d0ffc5b386830fb31b921a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13985c54db8495597c6ee55176d11d3ad7570d7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13985c54db8495597c6ee55176d11d3ad7570d7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13985c54db8495597c6ee55176d11d3ad7570d7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13985c54db8495597c6ee55176d11d3ad7570d7d/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51592935d5e530a3de001196285497dac5ed8b26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51592935d5e530a3de001196285497dac5ed8b26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51592935d5e530a3de001196285497dac5ed8b26"
      },
      {
        "sha": "45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a"
      }
    ],
    "stats": {
      "total": 914,
      "additions": 508,
      "deletions": 406
    },
    "files": [
      {
        "sha": "7f90b5f395cb8948bbe3a13d801cc3b9718e9174",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -147,12 +147,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=no])\n \n if test \"x$enable_debug\" = xyes; then\n+    CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n     if test \"x$GCC\" = xyes; then\n-        CFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CFLAGS=\"$CFLAGS -g3 -O0\"\n     fi\n     \n     if test \"x$GXX\" = xyes; then\n-        CXXFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CXXFLAGS=\"$CXXFLAGS -g3 -O0\"\n     fi\n fi \n "
      },
      {
        "sha": "71a42e514881bc6383531ea2c82c93998453245e",
        "filename": "contrib/gitian-downloader/centaur1-key.pgp",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/contrib/gitian-downloader/centaur1-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/contrib/gitian-downloader/centaur1-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/centaur1-key.pgp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -0,0 +1,30 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1.4.12 (GNU/Linux)\n+\n+mQENBFTjy20BCAC7q/tpPQ9tdEALpDqe8kpVAT5ysOJDLDeFEE1J5O8NuDFuibiN\n+XYkb2nAt4Vdr23in9z0LAiTSgr7znndnab/rOSn6pXbXQfLTHrSnAeClTHVQVPSq\n+m5kNg1vWvNxFtIpZ/fGsc6LLmIHxdgeLn+NOpvNx7RzF/N5ctX51vMxMUeDq3daZ\n+tLneJVRj5tXHRJcjW62cyiNFasYAZ3JC8wjwzr0SOndc7kygbEVCTWNkTAGd1Lax\n+KSJW6TjhBPK7j+RljS5nfx/Tf+OG4AoA7/53593YL7Shfx8rwWVIeF4nS6efFnuf\n+eIj+aS5haGyFvNgw8DE7QUCrPiUxeA8wuXu7ABEBAAG0H2NlbnRhdXIgPGNlbnRh\n+dXJAcGhvbmVib29rLmNvbT6JATgEEwECACIFAlTjy20CGwMGCwkIBwMCBhUIAgkK\n+CwQWAgMBAh4BAheAAAoJEP+V+qlxaXQF8r4IAKnE8D9AOTdM/YvYxpCeI6ndEUUs\n+8NcotpbIBJ67vr1Dsot7Ee0PrmIYOiInA+T81lPUDecJYrnemVefhquiyJ5VJ4/d\n+z2zUKBfxjeOsj/PHgcowVxMco8fNEWQa2fZX6X8RVADIsUnIIwpRFVUcbssK/3xJ\n+k46vjWwYNQywht/ZgFBesOgywyz5GozmwrK6TixJxKk8M69GFz2fHhJjp1bxDZuk\n+Rs3YmWeOcCasoJ6GbvIboKQSPHGyEOCqIuiBL63YMa0n1FU0ooDteNZ04eRinIhc\n+fo9JC66fQrUFn8CmmRTtdZOrZ/efYjQtfLAunCkzSM3p6DE9u4Y7d8E5Ar65AQ0E\n+VOPLbQEIANhxtouZuQmw+k89toBWXw75s+csxKHKZuhw8QntaFyFYq3IOnIeV1sK\n+PRENkWsqDInjEM8k9eZ6pnS11EQ1rrFffss+mprTbL3I4S489tJETYZKHrmmox7h\n+ustRi5eXBEmGeKW0mqpb/9r4okpTaIfs+EJ4C9jj0ghWkqU0acyzanJiUY/0R46F\n+vPfGfHnhZ5TAl3eiL0H2JkF6taG8K1XOLemahdZHE9wJh0ZFWnDDkA1l6j2rtYga\n+jEi/ucOp5GkmumxbFiVgponDBqBpsscRrCV6SbZs9gz3dQNgqe5A3CKGZRuVCY6s\n+djRJelgqCF5+dV0fAT0oF3C/3E5KAgcAEQEAAYkBHwQYAQIACQUCVOPLbQIbDAAK\n+CRD/lfqpcWl0BUSxCACjEFwQSHcfZINWD+KdNMayxyHQlBwsEDX+xQkgnn+/Q3hW\n+9VI3SSSfFV3ustlUa3IaNHwuWzsrSqG6mLG47LAQ6vPAWVh723gVCpyJf42Oms/e\n+qeyn0f/PT/6RuNMXQeHbfddmRp4PFjyKOms5Bmf3oi4t4JSvOS4yABBBKzhDQYC9\n+e+qv6Y1sDYpSiCxstQLzIHKiB5bfZ8Szfk09EyyLdqLGkiB0MFhHoXWwQxKiLVc+\n+xNFj2a/jw0rQVgN5DZgHBWU5WqvS5CWIczi+2S9MFI26iBhCn3urZToaaQ/DObqC\n+qmekFrJ/GOj5vB1Mm014lWjG2X3EovLZ1XkgWI7W\n+=vtNZ\n+-----END PGP PUBLIC KEY BLOCK-----"
      },
      {
        "sha": "06f278f3b3c710ed237ee81b1357970b583bd457",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -3,7 +3,7 @@ Construct a linear, no-fork, best version of the blockchain.\n \n ## Step 1: Download hash list\n \n-   $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n+    $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n \n Required configuration file settings for linearize-hashes:\n * RPC: rpcuser, rpcpassword\n@@ -14,7 +14,7 @@ Optional config file setting for linearize-hashes:\n \n ## Step 2: Copy local block data\n \n-   $ ./linearize-data.py linearize.cfg\n+    $ ./linearize-data.py linearize.cfg\n \n Required configuration file settings:\n * \"input\": bitcoind blocks/ directory containing blkNNNNN.dat\n@@ -26,7 +26,7 @@ output.\n \n Optional config file setting for linearize-data:\n * \"netmagic\": network magic number\n-* \"max_out_sz\": maximum output file size (default 1000*1000*1000)\n+* \"max_out_sz\": maximum output file size (default `1000*1000*1000`)\n * \"split_timestamp\": Split files when a new month is first seen, in addition to\n reaching a maximum file size.\n * \"file_timestamp\": Set each file's last-modified time to that of the"
      },
      {
        "sha": "0f6fde2a6e05216873f29cb8ec47d416f5c484d3",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -12,6 +12,7 @@\n import struct\n import re\n import os\n+import os.path\n import base64\n import httplib\n import sys\n@@ -115,19 +116,20 @@ def __init__(self, settings, blkindex, blkmap):\n \t\t\tself.setFileTime = True\n \t\tif settings['split_timestamp'] != 0:\n \t\t\tself.timestampSplit = True\n-        # Extents and cache for out-of-order blocks\n+\t\t# Extents and cache for out-of-order blocks\n \t\tself.blockExtents = {}\n \t\tself.outOfOrderData = {}\n \t\tself.outOfOrderSize = 0 # running total size for items in outOfOrderData\n \n \tdef writeBlock(self, inhdr, blk_hdr, rawblock):\n-\t\tif not self.fileOutput and ((self.outsz + self.inLen) > self.maxOutSz):\n+\t\tblockSizeOnDisk = len(inhdr) + len(blk_hdr) + len(rawblock)\n+\t\tif not self.fileOutput and ((self.outsz + blockSizeOnDisk) > self.maxOutSz):\n \t\t\tself.outF.close()\n \t\t\tif self.setFileTime:\n \t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n \t\t\tself.outF = None\n \t\t\tself.outFname = None\n-\t\t\tself.outFn = outFn + 1\n+\t\t\tself.outFn = self.outFn + 1\n \t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n@@ -147,7 +149,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\tif self.fileOutput:\n \t\t\t\toutFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = \"%s/blk%05d.dat\" % (self.settings['output'], outFn)\n+\t\t\t\toutFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n \t\t\tprint(\"Output file \" + outFname)\n \t\t\tself.outF = open(outFname, \"wb\")\n \n@@ -165,7 +167,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\t\t\t(self.blkCountIn, self.blkCountOut, len(self.blkindex), 100.0 * self.blkCountOut / len(self.blkindex)))\n \n \tdef inFileName(self, fn):\n-\t\treturn \"%s/blk%05d.dat\" % (self.settings['input'], fn)\n+\t\treturn os.path.join(self.settings['input'], \"blk%05d.dat\" % fn)\n \n \tdef fetchBlock(self, extent):\n \t\t'''Fetch block contents from disk given extents'''"
      },
      {
        "sha": "d27a701344877b0af8857f5466d12b999658399b",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -1,9 +1,8 @@\n package=boost\n-$(package)_version=1_55_0\n-$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.55.0\n+$(package)_version=1_58_0\n+$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.58.0\n $(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7f2b7b52\n-$(package)_patches=darwin_boost_atomic-1.patch darwin_boost_atomic-2.patch gcc_5_no_cxx11.patch\n+$(package)_sha256_hash=fdfc204fc33ec79c99b9a74944c3e54bd78be4f7f15e260c0e2700a36dc7d3e5\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release\n@@ -26,9 +25,6 @@ $(package)_cxxflags_linux=-fPIC\n endef\n \n define $(package)_preprocess_cmds\n-  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-1.patch && \\\n-  patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-2.patch && \\\n-  patch -p2 < $($(package)_patch_dir)/gcc_5_no_cxx11.patch && \\\n   echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n endef\n "
      },
      {
        "sha": "e6573986f731d91b629563441661baf58d770f1a",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=1.9.20140701\n+$(package)_version=1.9.20150609\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=26f3985bad7768b8483b793448ae49414cdc4451d0ec83e7c1944367e15f9f07\n+$(package)_sha256_hash=86e6ccec5b660ba6889893d1f3fca21db087c6466b1a90f495a1f87ab1cd1c36\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      },
      {
        "sha": "745d7a3982c168c5927fdc60c91fd0f415ba41d5",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.1.9\n+$(package)_version=3.2.2\n $(package)_download_path=http://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=04d3e2e438ac8d4cc4b110b68cdd61bd59226c6588739a4a386869467f5ced7c\n+$(package)_sha256_hash=440f5e15141cc72d2bfff467c977020979810eb800882e3437ad1a7153cce7b2\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "ce50b366fa74f3fbed838624f9d7ec58396ace02",
        "filename": "depends/packages/native_protobuf.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/native_protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/native_protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_protobuf.mk?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -1,8 +1,8 @@\n package=native_protobuf\n-$(package)_version=2.5.0\n-$(package)_download_path=https://protobuf.googlecode.com/files\n+$(package)_version=2.6.1\n+$(package)_download_path=https://github.com/google/protobuf/releases/download/v$($(package)_version)\n $(package)_file_name=protobuf-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=13bfc5ae543cf3aa180ac2485c0bc89495e3ae711fc6fab4f8ffe90dfb4bb677\n+$(package)_sha256_hash=ee445612d544d885ae240ffbcbf9267faa9f593b7b101f21d58beceb92661910\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared"
      },
      {
        "sha": "7b21247133f42754d8c67ad940e2ce77357acb98",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -1,8 +1,8 @@\n package=qrencode\n-$(package)_version=3.4.3\n+$(package)_version=3.4.4\n $(package)_download_path=https://fukuchi.org/works/qrencode/\n $(package)_file_name=qrencode-$(qrencode_version).tar.bz2\n-$(package)_sha256_hash=dfd71487513c871bad485806bfd1fdb304dedc84d2b01a8fb8e0940b50597a98\n+$(package)_sha256_hash=efe5188b1ddbcbf98763b819b146be6a90481aac30cfc8d858ab78a19cde1fa5\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-shared -without-tools --disable-sdltest"
      },
      {
        "sha": "7b0c39d3834f53722b7f6773810d982cad077b53",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -58,6 +58,7 @@ The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Unit Tests](unit-tests.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n+- [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n - [Dnsseed Policy](dnsseed-policy.md)\n "
      },
      {
        "sha": "ac7cd45f7002a2d0d11d0505da3b61e3e784c687",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -9,17 +9,15 @@ Supported API\n ####Transactions\n `GET /rest/tx/<TX-HASH>.<bin|hex|json>`\n \n-Given a transaction hash,\n-Returns a transaction, in binary, hex-encoded binary or JSON formats.\n+Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n \n For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n \n ####Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`\n `GET /rest/block/notxdetails/<BLOCK-HASH>.<bin|hex|json>`\n \n-Given a block hash,\n-Returns a block, in binary, hex-encoded binary or JSON formats.\n+Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats.\n \n The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 2.66MB (1 MB max block, plus hex encoding) per request.\n \n@@ -28,8 +26,7 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n ####Blockheaders\n `GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`\n \n-Given a block hash,\n-Returns <COUNT> amount of blockheaders in upward direction.\n+Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n \n ####Chaininfos\n `GET /rest/chaininfo.json`\n@@ -43,6 +40,9 @@ Only supports JSON as output format.\n * difficulty : (numeric) the current difficulty\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n+* pruned : (boolean) if the blocks are subject to pruning\n+* pruneheight : (numeric) heighest block available\n+* softforks : (array) status of softforks in progress\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n@@ -79,4 +79,4 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n \n Risks\n -------------\n-Running a webbrowser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy.\n+Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "92aed7725e12e1c3af29254d493a8d3d56a8c62e",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 13,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -59,7 +59,7 @@ Build requirements:\n \n \tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n \t\n-for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n+For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n \n \tsudo apt-get install libboost-all-dev\n \n@@ -72,18 +72,7 @@ for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be inst\n  Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev,\n  but using these will break binary wallet compatibility, and is not recommended.\n \n-for Debian 7 (Wheezy) and later:\n- The oldstable repository contains db4.8 packages.\n- Add the following line to /etc/apt/sources.list,\n- replacing [mirror] with any official debian mirror.\n-\n-\tdeb http://[mirror]/debian/ oldstable main\n-\n-To enable the change run\n-\n-\tsudo apt-get update\n-\n-for other Debian & Ubuntu (with ppa):\n+For other Debian & Ubuntu (with ppa):\n \n \tsudo apt-get install libdb4.8-dev libdb4.8++-dev\n "
      },
      {
        "sha": "630b3c04a7bafc67a601b9792d1b2bcbaf15506c",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -74,7 +74,7 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.8 net installer](http://cdimage.debian.org/debian-cd/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.8 net installer](http://cdimage.debian.org/cdimage/archive/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n "
      },
      {
        "sha": "1fc32112ceabc6c9fa93a3cd9a363c4b08e69c58",
        "filename": "doc/shared-libraries.md",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -0,0 +1,42 @@\n+Shared Libraries\n+================\n+\n+## bitcoinconsensus\n+\n+The purpose of this library is to make the verification functionality that is critical to Bitcoin's consensus available to other applications, e.g. to language bindings.\n+\n+### API\n+\n+The interface is defined in the C header `bitcoinconsensus.h` located in  `src/script/bitcoinconsensus.h`.\n+\n+#### Version\n+\n+`bitcoinconsensus_version` returns an `unsigned int` with the the API version *(currently at an experimental `0`)*.\n+\n+#### Script Validation\n+\n+`bitcoinconsensus_verify_script` returns an `int` with the status of the verification. It will be `1` if the input script correctly spends the previous output `scriptPubKey`.\n+\n+##### Parameters\n+- `const unsigned char *scriptPubKey` - The previous output script that encumbers spending.\n+- `unsigned int scriptPubKeyLen` - The number of bytes for the `scriptPubKey`.\n+- `const unsigned char *txTo` - The transaction with the input that is spending the previous output.\n+- `unsigned int txToLen` - The number of bytes for the `txTo`.\n+- `unsigned int nIn` - The index of the input in `txTo` that spends the `scriptPubKey`.\n+- `unsigned int flags` - The script validation flags *(see below)*.\n+- `bitcoinconsensus_error* err` - Will have the error/success code for the operation *(see below)*.\n+\n+##### Script Flags\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE`\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH` - Evaluate P2SH ([BIP16](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki)) subscripts\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG` - Enforce strict DER ([BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)) compliance\n+\n+##### Errors\n+- `bitcoinconsensus_ERR_OK` - No errors with input parameters *(see the return value of `bitcoinconsensus_verify_script` for the verification status)*\n+- `bitcoinconsensus_ERR_TX_INDEX` - An invalid index for `txTo`\n+- `bitcoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n+- `bitcoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n+\n+### Example Implementations\n+- [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)\n+- [node-libbitcoinconsensus](https://github.com/bitpay/node-libbitcoinconsensus) (Node.js Bindings)"
      },
      {
        "sha": "cfda8fe91f8af7dcc277e4fb3c5ef43d5d386bce",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -12,10 +12,6 @@ Base class for new regression tests.\n ### [test_framework/util.py](test_framework/util.py)\n Generally useful functions.\n \n-Bash-based tests, to be ported to Python:\n------------------------------------------\n-- conflictedbalance.sh : More testing of malleable transaction handling\n-\n Notes\n =====\n "
      },
      {
        "sha": "ce52247b2e4b9b08b63846610cd0904ad1188967",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -524,6 +524,22 @@ def run_test(self):\n         self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n+        #####################################################\n+        # test fundrawtransaction with OP_RETURN and no vin #\n+        #####################################################\n+\n+        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        assert_equal(len(dec_tx['vin']), 0)\n+        assert_equal(len(dec_tx['vout']), 1)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+\n+        assert_greater_than(len(dec_tx['vin']), 0) # at least one vin\n+        assert_equal(len(dec_tx['vout']), 2) # one change output added\n+\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "cc8dded413361c7a81c7bee8ea0cfe34d32ab4db",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_CORE_H = \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n+  core_memusage.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\"
      },
      {
        "sha": "2ec3468e060de5fc59cd93031dfd25cc14b40ec5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -322,7 +322,7 @@ RES_MOVIES = $(wildcard qt/res/movies/spinner-*.png)\n BITCOIN_RC = qt/res/bitcoin-qt-res.rc\n \n BITCOIN_QT_INCLUDES = -I$(builddir)/qt -I$(srcdir)/qt -I$(srcdir)/qt/forms \\\n-  -I$(builddir)/qt/forms\n+  -I$(builddir)/qt/forms -DQT_NO_KEYWORDS\n \n qt_libbitcoinqt_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(PROTOBUF_CFLAGS) $(QR_CFLAGS)"
      },
      {
        "sha": "95e20bf61bc18630c4d8f928e486c8ba1b1d094e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 35,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -16,6 +16,45 @@ using namespace std;\n \n #include \"chainparamsseeds.h\"\n \n+static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+{\n+    CMutableTransaction txNew;\n+    txNew.nVersion = 1;\n+    txNew.vin.resize(1);\n+    txNew.vout.resize(1);\n+    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vout[0].nValue = genesisReward;\n+    txNew.vout[0].scriptPubKey = genesisOutputScript;\n+\n+    CBlock genesis;\n+    genesis.nTime    = nTime;\n+    genesis.nBits    = nBits;\n+    genesis.nNonce   = nNonce;\n+    genesis.nVersion = nVersion;\n+    genesis.vtx.push_back(txNew);\n+    genesis.hashPrevBlock.SetNull();\n+    genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n+    return genesis;\n+}\n+\n+/**\n+ * Build the genesis block. Note that the output of its generation\n+ * transaction cannot be spent since it did not originally exist in the\n+ * database.\n+ *\n+ * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+ *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+ *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+ *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+ *   vMerkleTree: 4a5e1e\n+ */\n+static CBlock CreateGenesisBlock(uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+{\n+    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+    CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n+}\n+\n /**\n  * Main network\n  */\n@@ -52,33 +91,7 @@ class CMainParams : public CChainParams {\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n \n-        /**\n-         * Build the genesis block. Note that the output of its generation\n-         * transaction cannot be spent since it did not originally exist in the\n-         * database.\n-         *\n-         * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n-         *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n-         *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n-         *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n-         *   vMerkleTree: 4a5e1e\n-         */\n-        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-        CMutableTransaction txNew;\n-        txNew.nVersion = 1;\n-        txNew.vin.resize(1);\n-        txNew.vout.resize(1);\n-        txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n-        txNew.vout[0].nValue = 50 * COIN;\n-        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-        genesis.vtx.push_back(txNew);\n-        genesis.hashPrevBlock.SetNull();\n-        genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n-        genesis.nVersion = 1;\n-        genesis.nTime    = 1231006505;\n-        genesis.nBits    = 0x1d00ffff;\n-        genesis.nNonce   = 2083236893;\n-\n+        genesis = CreateGenesisBlock();\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n@@ -131,13 +144,17 @@ static CMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CTestNetParams : public CMainParams {\n+class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n+        consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n@@ -147,9 +164,7 @@ class CTestNetParams : public CMainParams {\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n \n-        //! Modify the testnet genesis block so the timestamp is valid for a later start.\n-        genesis.nTime = 1296688602;\n-        genesis.nNonce = 414098458;\n+        genesis = CreateGenesisBlock(1296688602, 414098458);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n@@ -189,7 +204,7 @@ static CTestNetParams testNetParams;\n /**\n  * Regression test\n  */\n-class CRegTestParams : public CTestNetParams {\n+class CRegTestParams : public CChainParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n@@ -198,13 +213,14 @@ class CRegTestParams : public CTestNetParams {\n         consensus.nMajorityRejectBlockOutdated = 950;\n         consensus.nMajorityWindow = 1000;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        genesis.nTime = 1296688602;\n-        genesis.nBits = 0x207fffff;\n-        genesis.nNonce = 2;\n+        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n@@ -226,6 +242,11 @@ class CRegTestParams : public CTestNetParams {\n             0,\n             0\n         };\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n };\n static CRegTestParams regTestParams;"
      },
      {
        "sha": "9c87bf21548a70402ac06b8e1eefaa0f30ae659b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -25,7 +25,7 @@ static CBaseMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CBaseTestNetParams : public CBaseMainParams\n+class CBaseTestNetParams : public CBaseChainParams\n {\n public:\n     CBaseTestNetParams()\n@@ -39,11 +39,12 @@ static CBaseTestNetParams testNetParams;\n /*\n  * Regression test\n  */\n-class CBaseRegTestParams : public CBaseTestNetParams\n+class CBaseRegTestParams : public CBaseChainParams\n {\n public:\n     CBaseRegTestParams()\n     {\n+        nRPCPort = 18332;\n         strDataDir = \"regtest\";\n     }\n };"
      },
      {
        "sha": "f02949de53528d0ab03c9853d081c4b0b431bade",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -83,7 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n+    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n@@ -110,7 +110,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n     } else {\n-        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n+        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n@@ -159,21 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n+                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -261,6 +261,6 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cacheCoins.erase(it);\n     } else {\n         // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n+        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n     }\n }"
      },
      {
        "sha": "bf4a777b8a9022e9cbac6e4ed9c4452639019d85",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n+#include \"core_memusage.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -257,8 +258,7 @@ class CCoins\n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n         BOOST_FOREACH(const CTxOut &out, vout) {\n-            const std::vector<unsigned char> *script = &out.scriptPubKey;\n-            ret += memusage::DynamicUsage(*script);\n+            ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;\n     }"
      },
      {
        "sha": "5378c2c761fe8d8124e448941688fc555ddbdb88",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -92,4 +92,12 @@ typedef u_int SOCKET;\n size_t strnlen( const char *start, size_t max_len);\n #endif // HAVE_DECL_STRNLEN\n \n+bool static inline IsSelectableSocket(SOCKET s) {\n+#ifdef WIN32\n+    return true;\n+#else\n+    return (s < FD_SETSIZE);\n+#endif\n+}\n+\n #endif // BITCOIN_COMPAT_H"
      },
      {
        "sha": "711135bb444390b85d895e7fab3d3788bedf1e99",
        "filename": "src/core_memusage.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_MEMUSAGE_H\n+#define BITCOIN_CORE_MEMUSAGE_H\n+\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n+#include \"memusage.h\"\n+\n+static inline size_t RecursiveDynamicUsage(const CScript& script) {\n+    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n+    return 0;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n+    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n+    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n+    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n+    return memusage::DynamicUsage(locator.vHave);\n+}\n+\n+#endif // BITCOIN_CORE_MEMUSAGE_H"
      },
      {
        "sha": "fb90d7578c7e683d56377b87bc853c22346ada87",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -2059,15 +2059,14 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n         GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(inv.hash);\n+        mapBlockSource.erase(pindexNew->GetBlockHash());\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());"
      },
      {
        "sha": "be3964df1bf4121a47c998c8580e74ab39b07263",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 65,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -34,28 +34,14 @@ static inline size_t DynamicUsage(const float& v) { return 0; }\n static inline size_t DynamicUsage(const double& v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n-template<typename X, typename Y> static inline size_t DynamicUsage(std::pair<X, Y> &p) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  use RecursiveDynamicUsage, iterate themselves, or use more efficient caching +\n- *  updating on modification.\n+ *  iterate themselves, or use more efficient caching + updating on modification.\n  */\n-template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n-template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n-template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n-template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n-template<typename X> static size_t DynamicUsage(const X& x);\n-\n-template<typename X> static size_t RecursiveDynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const std::set<X>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::map<X, Y>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::pair<X, Y>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const X& v);\n \n static inline size_t MallocUsage(size_t alloc)\n {\n@@ -88,54 +74,18 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::vector<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X>\n static inline size_t DynamicUsage(const std::set<X>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::set<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::map<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::map<X, Y>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    for (typename std::map<X, Y>::const_iterator it = v.begin(); it != v.end(); it++) {\n-        usage += RecursiveDynamicUsage(*it);\n-    }\n-    return usage;\n-}\n-\n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::pair<X, Y>& v)\n-{\n-    return RecursiveDynamicUsage(v.first) + RecursiveDynamicUsage(v.second);\n-}\n-\n // Boost data structures\n \n template<typename X>\n@@ -157,20 +107,6 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n-// Dispatch to class method as fallback\n-\n-template<typename X>\n-static inline size_t DynamicUsage(const X& x)\n-{\n-    return x.DynamicMemoryUsage();\n-}\n-\n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const X& x)\n-{\n-    return DynamicUsage(x);\n-}\n-\n }\n \n #endif"
      },
      {
        "sha": "3d369c7dd1eb893a22eaa2f64672d518f230ebc5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -386,6 +386,12 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n     if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n                   ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n     {\n+        if (!IsSelectableSocket(hSocket)) {\n+            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+            CloseSocket(hSocket);\n+            return NULL;\n+        }\n+\n         addrman.Attempt(addrConnect);\n \n         // Add node\n@@ -949,6 +955,11 @@ void ThreadSocketHandler()\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n+                else if (!IsSelectableSocket(hSocket))\n+                {\n+                    LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n+                    CloseSocket(hSocket);\n+                }\n                 else if (nInbound >= nMaxInbound)\n                 {\n                     LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n@@ -1597,6 +1608,13 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n+    if (!IsSelectableSocket(hListenSocket))\n+    {\n+        strError = \"Error: Couldn't create a listenable socket for incoming connections\";\n+        LogPrintf(\"%s\\n\", strError);\n+        return false;\n+    }\n+\n \n #ifndef WIN32\n #ifdef SO_NOSIGPIPE"
      },
      {
        "sha": "b7e2e57917bb1ee39dbc1689f2ee95d6273aa1fd",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -266,6 +266,9 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n+                if (!IsSelectableSocket(hSocket)) {\n+                    return false;\n+                }\n                 struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n                 fd_set fdset;\n                 FD_ZERO(&fdset);"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -72,11 +72,6 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-size_t CTransaction::DynamicMemoryUsage() const\n-{\n-    return memusage::RecursiveDynamicUsage(vin) + memusage::RecursiveDynamicUsage(vout);\n-}\n-\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {"
      },
      {
        "sha": "2a457cdae78c523a0d4f8526dc51273af2c3ec31",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n-#include \"memusage.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -49,8 +48,6 @@ class COutPoint\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /** An input of a transaction.  It contains the location of the previous\n@@ -99,8 +96,6 @@ class CTxIn\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptSig.DynamicMemoryUsage(); }\n };\n \n /** An output of a transaction.  It contains the public key that the next input\n@@ -146,10 +141,13 @@ class CTxOut\n         // which has units satoshis-per-kilobyte.\n         // If you'd pay more than 1/3 in fees\n         // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n+        // A typical spendable txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a txout less than 546 satoshis \n+        // so dust is a spendable txout less than 546 satoshis\n         // with default minRelayTxFee.\n+        if (scriptPubKey.IsUnspendable())\n+            return 0;\n+\n         size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n         return 3*minRelayTxFee.GetFee(nSize);\n     }\n@@ -171,8 +169,6 @@ class CTxOut\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptPubKey.DynamicMemoryUsage(); }\n };\n \n struct CMutableTransaction;\n@@ -256,8 +252,6 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "af6801919c5643b6993a8605f6ad6e99310e54cf",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -254,7 +254,7 @@ void AddressBookPage::done(int retval)\n     // Figure out which address was selected, and return it\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n-    foreach (const QModelIndex& index, indexes) {\n+    Q_FOREACH (const QModelIndex& index, indexes) {\n         QVariant address = table->model()->data(index);\n         returnValue = address.toString();\n     }"
      },
      {
        "sha": "09634ce336623214c02a64901ca840b56cdbb4e5",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -45,7 +45,7 @@ class AddressBookPage : public QDialog\n     void setModel(AddressTableModel *model);\n     const QString &getReturnValue() const { return returnValue; }\n \n-public slots:\n+public Q_SLOTS:\n     void done(int retval);\n \n private:\n@@ -59,7 +59,7 @@ public slots:\n     QAction *deleteAction; // to be able to explicitly disable it\n     QString newAddressToSelect;\n \n-private slots:\n+private Q_SLOTS:\n     /** Delete currently selected address entry */\n     void on_deleteAddress_clicked();\n     /** Create a new address for receiving coins and / or add a new address book entry */\n@@ -80,7 +80,7 @@ private slots:\n     /** New entry/entries were added to address table */\n     void selectNewAddress(const QModelIndex &parent, int begin, int /*end*/);\n \n-signals:\n+Q_SIGNALS:\n     void sendCoins(QString addr);\n };\n "
      },
      {
        "sha": "c5ac07cfc29626f808f71afba38fbc037a6a3267",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -450,5 +450,5 @@ int AddressTableModel::lookupAddress(const QString &address) const\n \n void AddressTableModel::emitDataChanged(int idx)\n {\n-    emit dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n+    Q_EMIT dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n }"
      },
      {
        "sha": "2b7475c4e2997ed31803a47bef6074d498543729",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -84,7 +84,7 @@ class AddressTableModel : public QAbstractTableModel\n     /** Notify listeners that data changed. */\n     void emitDataChanged(int index);\n \n-public slots:\n+public Q_SLOTS:\n     /* Update address list from core.\n      */\n     void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);"
      },
      {
        "sha": "d4d832825a38211d1acecb234cd47da88d90ddfa",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -40,7 +40,7 @@ class AskPassphraseDialog : public QDialog\n     WalletModel *model;\n     bool fCapsLock;\n \n-private slots:\n+private Q_SLOTS:\n     void textChanged();\n \n protected:"
      },
      {
        "sha": "ec02c4be9f8f7874f0f99eeb81e78a2e5b96daaa",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -169,11 +169,11 @@ class BitcoinCore: public QObject\n public:\n     explicit BitcoinCore();\n \n-public slots:\n+public Q_SLOTS:\n     void initialize();\n     void shutdown();\n \n-signals:\n+Q_SIGNALS:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     void runawayException(const QString &message);\n@@ -216,13 +216,13 @@ class BitcoinApplication: public QApplication\n     /// Get window identifier of QMainWindow (BitcoinGUI)\n     WId getMainWinId() const;\n \n-public slots:\n+public Q_SLOTS:\n     void initializeResult(int retval);\n     void shutdownResult(int retval);\n     /// Handle runaway exceptions. Shows a message box with the problem and quits the program.\n     void handleRunawayException(const QString &message);\n \n-signals:\n+Q_SIGNALS:\n     void requestedInitialize();\n     void requestedShutdown();\n     void stopThread();\n@@ -253,7 +253,7 @@ BitcoinCore::BitcoinCore():\n void BitcoinCore::handleRunawayException(const std::exception *e)\n {\n     PrintExceptionContinue(e, \"Runaway exception\");\n-    emit runawayException(QString::fromStdString(strMiscWarning));\n+    Q_EMIT runawayException(QString::fromStdString(strMiscWarning));\n }\n \n void BitcoinCore::initialize()\n@@ -269,7 +269,7 @@ void BitcoinCore::initialize()\n              */\n             StartDummyRPCThread();\n         }\n-        emit initializeResult(rv);\n+        Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -286,7 +286,7 @@ void BitcoinCore::shutdown()\n         threadGroup.join_all();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n-        emit shutdownResult(1);\n+        Q_EMIT shutdownResult(1);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n     } catch (...) {\n@@ -315,7 +315,7 @@ BitcoinApplication::~BitcoinApplication()\n     if(coreThread)\n     {\n         qDebug() << __func__ << \": Stopping thread\";\n-        emit stopThread();\n+        Q_EMIT stopThread();\n         coreThread->wait();\n         qDebug() << __func__ << \": Stopped thread\";\n     }\n@@ -386,7 +386,7 @@ void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n     startThread();\n-    emit requestedInitialize();\n+    Q_EMIT requestedInitialize();\n }\n \n void BitcoinApplication::requestShutdown()\n@@ -409,7 +409,7 @@ void BitcoinApplication::requestShutdown()\n     ShutdownWindow::showShutdownWindow(window);\n \n     // Request shutdown from core thread\n-    emit requestedShutdown();\n+    Q_EMIT requestedShutdown();\n }\n \n void BitcoinApplication::initializeResult(int retval)\n@@ -449,7 +449,7 @@ void BitcoinApplication::initializeResult(int retval)\n         {\n             window->show();\n         }\n-        emit splashFinished(window);\n+        Q_EMIT splashFinished(window);\n \n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line"
      },
      {
        "sha": "d19b9fd4afa6433b7448dd8a02484591d4fd5273",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -61,7 +61,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void setValue(const CAmount& value)\n     {\n         lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n-        emit valueChanged();\n+        Q_EMIT valueChanged();\n     }\n \n     void stepBy(int steps)\n@@ -184,7 +184,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         return rv;\n     }\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n };\n "
      },
      {
        "sha": "3703b1f8d7364a878e46a3220531c3eefcda1010",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -56,7 +56,7 @@ class BitcoinAmountField: public QWidget\n     */\n     QWidget *setupTabChain(QWidget *prev);\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n \n protected:\n@@ -67,7 +67,7 @@ class BitcoinAmountField: public QWidget\n     AmountSpinBox *amount;\n     QValueComboBox *unit;\n \n-private slots:\n+private Q_SLOTS:\n     void unitChanged(int idx);\n \n };"
      },
      {
        "sha": "396435f12b1bb30329d2b937f48a1c8109af9c1b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -600,7 +600,7 @@ void BitcoinGUI::openClicked()\n     OpenURIDialog dlg(this);\n     if(dlg.exec())\n     {\n-        emit receivedURI(dlg.getURI());\n+        Q_EMIT receivedURI(dlg.getURI());\n     }\n }\n \n@@ -886,9 +886,9 @@ void BitcoinGUI::dropEvent(QDropEvent *event)\n {\n     if(event->mimeData()->hasUrls())\n     {\n-        foreach(const QUrl &uri, event->mimeData()->urls())\n+        Q_FOREACH(const QUrl &uri, event->mimeData()->urls())\n         {\n-            emit receivedURI(uri.toString());\n+            Q_EMIT receivedURI(uri.toString());\n         }\n     }\n     event->acceptProposedAction();\n@@ -1050,7 +1050,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n     QList<BitcoinUnits::Unit> units = BitcoinUnits::availableUnits();\n     int max_width = 0;\n     const QFontMetrics fm(font());\n-    foreach (const BitcoinUnits::Unit unit, units)\n+    Q_FOREACH (const BitcoinUnits::Unit unit, units)\n     {\n         max_width = qMax(max_width, fm.width(BitcoinUnits::name(unit)));\n     }\n@@ -1069,7 +1069,7 @@ void UnitDisplayStatusBarControl::mousePressEvent(QMouseEvent *event)\n void UnitDisplayStatusBarControl::createContextMenu()\n {\n     menu = new QMenu();\n-    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         QAction *menuAction = new QAction(QString(BitcoinUnits::name(u)), this);\n         menuAction->setData(QVariant(u));"
      },
      {
        "sha": "4e50b1712a0965ea75010edab95db46c07c938ff",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -136,11 +136,11 @@ class BitcoinGUI : public QMainWindow\n     /** Disconnect core signals from GUI client */\n     void unsubscribeFromCoreSignals();\n \n-signals:\n+Q_SIGNALS:\n     /** Signal raised when a URI was entered or dragged to the GUI */\n     void receivedURI(const QString &uri);\n \n-public slots:\n+public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks and last block date shown in the UI */\n@@ -168,7 +168,7 @@ public slots:\n     void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address, const QString& label);\n #endif // ENABLE_WALLET\n \n-private slots:\n+private Q_SLOTS:\n #ifdef ENABLE_WALLET\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n@@ -232,7 +232,7 @@ class UnitDisplayStatusBarControl : public QLabel\n     /** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */\n     void createContextMenu();\n \n-private slots:\n+private Q_SLOTS:\n     /** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */\n     void updateDisplayUnit(int newUnits);\n     /** Tells underlying optionsModel to update its current display unit. */"
      },
      {
        "sha": "92a9ef279df2aab4291828d595f1422e3890f340",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -117,15 +117,15 @@ void ClientModel::updateTimer()\n         cachedReindexing = fReindex;\n         cachedImporting = fImporting;\n \n-        emit numBlocksChanged(newNumBlocks, newBlockDate);\n+        Q_EMIT numBlocksChanged(newNumBlocks, newBlockDate);\n     }\n \n-    emit bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n+    Q_EMIT bytesChanged(getTotalBytesRecv(), getTotalBytesSent());\n }\n \n void ClientModel::updateNumConnections(int numConnections)\n {\n-    emit numConnectionsChanged(numConnections);\n+    Q_EMIT numConnectionsChanged(numConnections);\n }\n \n void ClientModel::updateAlert(const QString &hash, int status)\n@@ -138,11 +138,11 @@ void ClientModel::updateAlert(const QString &hash, int status)\n         CAlert alert = CAlert::getAlertByHash(hash_256);\n         if(!alert.IsNull())\n         {\n-            emit message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n+            Q_EMIT message(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), CClientUIInterface::ICON_ERROR);\n         }\n     }\n \n-    emit alertsChanged(getStatusBarWarnings());\n+    Q_EMIT alertsChanged(getStatusBarWarnings());\n }\n \n bool ClientModel::inInitialBlockDownload() const"
      },
      {
        "sha": "68434f404c39cfef67e9ff0ebcea5ca05c9e82ed",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -82,7 +82,7 @@ class ClientModel : public QObject\n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();\n \n-signals:\n+Q_SIGNALS:\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, const QDateTime& blockDate);\n     void alertsChanged(const QString &warnings);\n@@ -94,7 +94,7 @@ class ClientModel : public QObject\n     // Show progress dialog e.g. for verifychain\n     void showProgress(const QString &title, int nProgress);\n \n-public slots:\n+public Q_SLOTS:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n     void updateAlert(const QString &hash, int status);"
      },
      {
        "sha": "778dbcb1ca3dc760f7a54dbcf0a2f1fbc7a22bbe",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -30,7 +30,6 @@\n #include <QTreeWidget>\n #include <QTreeWidgetItem>\n \n-using namespace std;\n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n@@ -442,7 +441,7 @@ QString CoinControlDialog::getPriorityLabel(double dPriority, double mempoolEsti\n // shows count of locked unspent outputs\n void CoinControlDialog::updateLabelLocked()\n {\n-    vector<COutPoint> vOutpts;\n+    std::vector<COutPoint> vOutpts;\n     model->listLockedCoins(vOutpts);\n     if (vOutpts.size() > 0)\n     {\n@@ -461,13 +460,13 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    foreach(const CAmount &amount, CoinControlDialog::payAmounts)\n+    Q_FOREACH(const CAmount &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n             if (txout.IsDust(::minRelayTxFee))\n                fDust = true;\n@@ -487,8 +486,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     int nQuantityUncompressed   = 0;\n     bool fAllowFree             = false;\n \n-    vector<COutPoint> vCoinControl;\n-    vector<COutput>   vOutputs;\n+    std::vector<COutPoint> vCoinControl;\n+    std::vector<COutput>   vOutputs;\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n@@ -568,7 +567,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n-                CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n@@ -687,10 +686,10 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n     double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n \n-    map<QString, vector<COutput> > mapCoins;\n+    std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, vector<COutput>)& coins, mapCoins) {\n+    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;"
      },
      {
        "sha": "0566b02c965a9b7f905dd60eccc9a1299425bf2e",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -102,7 +102,7 @@ class CoinControlDialog : public QDialog\n         return column;\n     }\n \n-private slots:\n+private Q_SLOTS:\n     void showMenu(const QPoint &);\n     void copyAmount();\n     void copyLabel();"
      },
      {
        "sha": "d59fce2d41c13e940871d687aa2edc6f174911e7",
        "filename": "src/qt/editaddressdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/editaddressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/editaddressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -40,7 +40,7 @@ class EditAddressDialog : public QDialog\n     QString getAddress() const;\n     void setAddress(const QString &address);\n \n-public slots:\n+public Q_SLOTS:\n     void accept();\n \n private:"
      },
      {
        "sha": "0ac3db6327ce1fc98ba0407ecba5b388a7803d78",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -169,7 +169,7 @@ namespace GUIUtil\n             void setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode);\n             void resizeColumn(int nColumnIndex, int width);\n \n-        private slots:\n+        private Q_SLOTS:\n             void on_sectionResized(int logicalIndex, int oldSize, int newSize);\n             void on_geometriesChanged();\n     };"
      },
      {
        "sha": "117969758c4617582990077eff8c6bc5388c6fce",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -42,10 +42,10 @@ class FreespaceChecker : public QObject\n         ST_ERROR\n     };\n \n-public slots:\n+public Q_SLOTS:\n     void check();\n \n-signals:\n+Q_SIGNALS:\n     void reply(int status, const QString &message, quint64 available);\n \n private:\n@@ -102,7 +102,7 @@ void FreespaceChecker::check()\n         replyStatus = ST_ERROR;\n         replyMessage = tr(\"Cannot create data directory here.\");\n     }\n-    emit reply(replyStatus, replyMessage, freeBytesAvailable);\n+    Q_EMIT reply(replyStatus, replyMessage, freeBytesAvailable);\n }\n \n \n@@ -121,7 +121,7 @@ Intro::~Intro()\n {\n     delete ui;\n     /* Ensure thread is finished before it is deleted */\n-    emit stopThread();\n+    Q_EMIT stopThread();\n     thread->wait();\n }\n \n@@ -277,7 +277,7 @@ void Intro::checkPath(const QString &dataDir)\n     if(!signalled)\n     {\n         signalled = true;\n-        emit requestCheck();\n+        Q_EMIT requestCheck();\n     }\n     mutex.unlock();\n }"
      },
      {
        "sha": "50783f7225c1f51c4e67ed3a835486fbb4e5aa3f",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -43,14 +43,14 @@ class Intro : public QDialog\n      */\n     static QString getDefaultDataDirectory();\n \n-signals:\n+Q_SIGNALS:\n     void requestCheck();\n     void stopThread();\n \n-public slots:\n+public Q_SLOTS:\n     void setStatus(int status, const QString &message, quint64 bytesAvailable);\n \n-private slots:\n+private Q_SLOTS:\n     void on_dataDirectory_textChanged(const QString &arg1);\n     void on_ellipsisButton_clicked();\n     void on_dataDirDefault_clicked();"
      },
      {
        "sha": "8bd867c1034ba471ff5b23b71c74b4937c72bb02",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -30,7 +30,7 @@ class MacDockIconHandler : public QObject\n     static void cleanup();\n     void handleDockIconClickEvent();\n \n-signals:\n+Q_SIGNALS:\n     void dockIconClicked();\n \n private:"
      },
      {
        "sha": "a41d39d51e3b2fde851b109276e3a66c605f2e67",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -130,5 +130,5 @@ void setupDockClickHandler() {\n         this->mainWindow->show();\n     }\n \n-    emit this->dockIconClicked();\n+    Q_EMIT this->dockIconClicked();\n }"
      },
      {
        "sha": "f2a15e9c346bb050687704d4a8ad2d28de6d6a49",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -40,7 +40,7 @@ class Notificator: public QObject\n         Critical        /**< An error occurred */\n     };\n \n-public slots:\n+public Q_SLOTS:\n     /** Show notification message.\n        @param[in] cls    general message class\n        @param[in] title  title shown with message"
      },
      {
        "sha": "28b8f56ca6f0f1597ed45b9b038e850b0250bffa",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -21,10 +21,10 @@ class OpenURIDialog : public QDialog\n \n     QString getURI();\n \n-protected slots:\n+protected Q_SLOTS:\n     void accept();\n \n-private slots:\n+private Q_SLOTS:\n     void on_selectFileButton_clicked();\n \n private:"
      },
      {
        "sha": "173bed3b6250bb008f2440f0d10342dac752fd85",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -73,7 +73,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     /* Display elements init */\n     QDir translations(\":translations\");\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n-    foreach(const QString &langStr, translations.entryList())\n+    Q_FOREACH(const QString &langStr, translations.entryList())\n     {\n         QLocale locale(langStr);\n \n@@ -281,7 +281,7 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n     {\n         if(object == ui->proxyIp)\n         {\n-            emit proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n+            Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n     }\n     return QDialog::eventFilter(object, event);"
      },
      {
        "sha": "fa983e798cce7cf740e77889ded05c105c7f7ef3",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -33,7 +33,7 @@ class OptionsDialog : public QDialog\n protected:\n     bool eventFilter(QObject *object, QEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     /* enable OK button */\n     void enableOkButton();\n     /* disable OK button */\n@@ -48,7 +48,7 @@ private slots:\n     void clearStatusLabel();\n     void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n-signals:\n+Q_SIGNALS:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n private:"
      },
      {
        "sha": "b4ce8191d0f523f316b2ddbcee6bfba7f4db31a1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -286,7 +286,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         case CoinControlFeatures:\n             fCoinControlFeatures = value.toBool();\n             settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            emit coinControlFeaturesChanged(fCoinControlFeatures);\n+            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n             break;\n         case DatabaseCache:\n             if (settings.value(\"nDatabaseCache\") != value) {\n@@ -311,7 +311,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         }\n     }\n \n-    emit dataChanged(index, index);\n+    Q_EMIT dataChanged(index, index);\n \n     return successful;\n }\n@@ -324,7 +324,7 @@ void OptionsModel::setDisplayUnit(const QVariant &value)\n         QSettings settings;\n         nDisplayUnit = value.toInt();\n         settings.setValue(\"nDisplayUnit\", nDisplayUnit);\n-        emit displayUnitChanged(nDisplayUnit);\n+        Q_EMIT displayUnitChanged(nDisplayUnit);\n     }\n }\n "
      },
      {
        "sha": "fc26d65b04773b497f06eb32f3090c25198de785",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -81,7 +81,7 @@ class OptionsModel : public QAbstractListModel\n     /// Add option to list of GUI options overridden through command line/config file\n     void addOverriddenOption(const std::string &option);\n \n-signals:\n+Q_SIGNALS:\n     void displayUnitChanged(int unit);\n     void coinControlFeaturesChanged(bool);\n };"
      },
      {
        "sha": "bbd95ef4789c08612bb925b96c722590af535f53",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -142,7 +142,7 @@ OverviewPage::OverviewPage(QWidget *parent) :\n void OverviewPage::handleTransactionClicked(const QModelIndex &index)\n {\n     if(filter)\n-        emit transactionClicked(filter->mapToSource(index));\n+        Q_EMIT transactionClicked(filter->mapToSource(index));\n }\n \n OverviewPage::~OverviewPage()"
      },
      {
        "sha": "de5ac345dadc3aaada272c71c13a6c6ec1b8b165",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -35,11 +35,11 @@ class OverviewPage : public QWidget\n     void setWalletModel(WalletModel *walletModel);\n     void showOutOfSyncWarning(bool fShow);\n \n-public slots:\n+public Q_SLOTS:\n     void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                     const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n-signals:\n+Q_SIGNALS:\n     void transactionClicked(const QModelIndex &index);\n \n private:\n@@ -56,7 +56,7 @@ public slots:\n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;\n \n-private slots:\n+private Q_SLOTS:\n     void updateDisplayUnit();\n     void handleTransactionClicked(const QModelIndex &index);\n     void updateAlerts(const QString &warnings);"
      },
      {
        "sha": "78a783dea4680c6e17a34e1fea4c79cf53560380",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -19,8 +19,6 @@\n #include <QDebug>\n #include <QSslCertificate>\n \n-using namespace std;\n-\n class SSLVerifyError : public std::runtime_error\n {\n public:\n@@ -49,7 +47,7 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n     return true;\n }\n \n-bool PaymentRequestPlus::SerializeToString(string* output) const\n+bool PaymentRequestPlus::SerializeToString(std::string* output) const\n {\n     return paymentRequest.SerializeToString(output);\n }"
      },
      {
        "sha": "6481b0046e7603ba6d8fb2d97431f5202c9acf0c",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 32,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -46,8 +46,6 @@\n #include <QUrlQuery>\n #endif\n \n-using namespace std;\n-\n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n // BIP70 payment protocol messages\n@@ -148,7 +146,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     int nRootCerts = 0;\n     const QDateTime currentTime = QDateTime::currentDateTime();\n \n-    foreach (const QSslCertificate& cert, certList) {\n+    Q_FOREACH (const QSslCertificate& cert, certList) {\n         // Don't log NULL certificates\n         if (cert.isNull())\n             continue;\n@@ -201,7 +199,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n // when uiReady() is called.\n //\n // Warning: ipcSendCommandLine() is called early in init,\n-// so don't use \"emit message()\", but \"QMessageBox::\"!\n+// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n {\n@@ -269,7 +267,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n bool PaymentServer::ipcSendCommandLine()\n {\n     bool fResult = false;\n-    foreach (const QString& r, savedPaymentRequests)\n+    Q_FOREACH (const QString& r, savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();\n         socket->connectToServer(ipcServerName(), QIODevice::WriteOnly);\n@@ -326,7 +324,7 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n         uriServer = new QLocalServer(this);\n \n         if (!uriServer->listen(name)) {\n-            // constructor is called early in init, so don't use \"emit message()\" here\n+            // constructor is called early in init, so don't use \"Q_EMIT message()\" here\n             QMessageBox::critical(0, tr(\"Payment request error\"),\n                 tr(\"Cannot start bitcoin: click-to-pay handler\"));\n         }\n@@ -394,7 +392,7 @@ void PaymentServer::uiReady()\n     initNetManager();\n \n     saveURIs = false;\n-    foreach (const QString& s, savedPaymentRequests)\n+    Q_FOREACH (const QString& s, savedPaymentRequests)\n     {\n         handleURIOrFile(s);\n     }\n@@ -431,7 +429,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             else\n             {\n                 qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n-                emit message(tr(\"URI handling\"),\n+                Q_EMIT message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n@@ -445,14 +443,14 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             {\n                 CBitcoinAddress address(recipient.address.toStdString());\n                 if (!address.IsValid()) {\n-                    emit message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n+                    Q_EMIT message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n                         CClientUIInterface::MSG_ERROR);\n                 }\n                 else\n-                    emit receivedPaymentRequest(recipient);\n+                    Q_EMIT receivedPaymentRequest(recipient);\n             }\n             else\n-                emit message(tr(\"URI handling\"),\n+                Q_EMIT message(tr(\"URI handling\"),\n                     tr(\"URI cannot be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                     CClientUIInterface::ICON_WARNING);\n \n@@ -466,12 +464,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         SendCoinsRecipient recipient;\n         if (!readPaymentRequestFromFile(s, request))\n         {\n-            emit message(tr(\"Payment request file handling\"),\n+            Q_EMIT message(tr(\"Payment request file handling\"),\n                 tr(\"Payment request file cannot be read! This can be caused by an invalid payment request file.\"),\n                 CClientUIInterface::ICON_WARNING);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            emit receivedPaymentRequest(recipient);\n+            Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -500,7 +498,7 @@ void PaymentServer::handleURIConnection()\n \n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n-// so don't use \"emit message()\", but \"QMessageBox::\"!\n+// so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n //\n bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request)\n {\n@@ -533,7 +531,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     if (request.IsInitialized()) {\n         // Payment request network matches client network?\n         if (!verifyNetwork(request.getDetails())) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request network doesn't match client network.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n@@ -542,13 +540,13 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // Make sure any payment requests involved are still valid.\n         // This is re-checked just before sending coins in WalletModel::sendCoins().\n         if (verifyExpired(request.getDetails())) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Payment request expired.\"),\n                 CClientUIInterface::MSG_ERROR);\n \n             return false;\n         }\n     } else {\n-        emit message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n+        Q_EMIT message(tr(\"Payment request error\"), tr(\"Payment request is not initialized.\"),\n             CClientUIInterface::MSG_ERROR);\n \n         return false;\n@@ -562,7 +560,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    Q_FOREACH(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n@@ -573,7 +571,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n             // Unauthenticated payment requests to custom bitcoin addresses are not supported\n             // (there is no good way to tell the user where they are paying in a way they'd\n             // have a chance of understanding).\n-            emit message(tr(\"Payment request rejected\"),\n+            Q_EMIT message(tr(\"Payment request rejected\"),\n                 tr(\"Unverified payment requests to custom payment scripts are unsupported.\"),\n                 CClientUIInterface::MSG_ERROR);\n             return false;\n@@ -583,14 +581,14 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         // but CAmount is defined as int64_t. Because of that we need to verify that amounts are in a valid range\n         // and no overflow has happened.\n         if (!verifyAmount(sendingTo.second)) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(::minRelayTxFee)) {\n-            emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n+            Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);\n \n@@ -600,7 +598,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n         recipient.amount += sendingTo.second;\n         // Also verify that the final amount is still in a valid range after adding additional amounts.\n         if (!verifyAmount(recipient.amount)) {\n-            emit message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request rejected\"), tr(\"Invalid payment request.\"), CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n     }\n@@ -647,7 +645,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     // Create a new refund address, or re-use:\n     QString account = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant);\n     std::string strAccount = account.toStdString();\n-    set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n+    std::set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n         CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();\n@@ -694,7 +692,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(BIP70_MAX_PAYMENTREQUEST_SIZE);\n \n         qWarning() << QString(\"PaymentServer::%1:\").arg(__func__) << msg;\n-        emit message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n+        Q_EMIT message(tr(\"Payment request DoS protection\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -704,7 +702,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             .arg(reply->errorString());\n \n         qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-        emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+        Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n     }\n \n@@ -718,12 +716,12 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         if (!request.parse(data))\n         {\n             qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n-            emit message(tr(\"Payment request error\"),\n+            Q_EMIT message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n         }\n         else if (processPaymentRequest(request, recipient))\n-            emit receivedPaymentRequest(recipient);\n+            Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n     }\n@@ -736,11 +734,11 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n                 .arg(reply->request().url().toString());\n \n             qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n-            emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n         {\n-            emit receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n+            Q_EMIT receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n         }\n     }\n }\n@@ -750,11 +748,11 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     Q_UNUSED(reply);\n \n     QString errString;\n-    foreach (const QSslError& err, errs) {\n+    Q_FOREACH (const QSslError& err, errs) {\n         qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n-    emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n+    Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n \n void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n@@ -765,7 +763,7 @@ void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't futher process or store the paymentACK message\n-    emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n+    Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n \n bool PaymentServer::verifyNetwork(const payments::PaymentDetails& requestDetails)"
      },
      {
        "sha": "5df0a14cf74cd530c661668082be2e456260f7ee",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -98,7 +98,7 @@ class PaymentServer : public QObject\n     // Verify the payment request amount is valid\n     static bool verifyAmount(const CAmount& requestAmount);\n \n-signals:\n+Q_SIGNALS:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n@@ -108,7 +108,7 @@ class PaymentServer : public QObject\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public slots:\n+public Q_SLOTS:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n     void uiReady();\n@@ -119,7 +119,7 @@ public slots:\n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);\n \n-private slots:\n+private Q_SLOTS:\n     void handleURIConnection();\n     void netRequestFinished(QNetworkReply*);\n     void reportSslErrors(QNetworkReply*, const QList<QSslError> &);"
      },
      {
        "sha": "85339166b0e486b35227812054d1f93f58c905b9",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -63,7 +63,7 @@ class PeerTablePriv\n #if QT_VERSION >= 0x040700\n             cachedNodeStats.reserve(vNodes.size());\n #endif\n-            foreach (CNode* pnode, vNodes)\n+            Q_FOREACH (CNode* pnode, vNodes)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStateStats.nMisbehavior = 0;\n@@ -92,7 +92,7 @@ class PeerTablePriv\n         // build index map\n         mapNodeRows.clear();\n         int row = 0;\n-        foreach (const CNodeCombinedStats& stats, cachedNodeStats)\n+        Q_FOREACH (const CNodeCombinedStats& stats, cachedNodeStats)\n             mapNodeRows.insert(std::pair<NodeId, int>(stats.nodeStats.nodeid, row++));\n     }\n \n@@ -220,9 +220,9 @@ const CNodeCombinedStats *PeerTableModel::getNodeStats(int idx)\n \n void PeerTableModel::refresh()\n {\n-    emit layoutAboutToBeChanged();\n+    Q_EMIT layoutAboutToBeChanged();\n     priv->refreshPeers();\n-    emit layoutChanged();\n+    Q_EMIT layoutChanged();\n }\n \n int PeerTableModel::getRowByNodeId(NodeId nodeid)"
      },
      {
        "sha": "fcb89b7611f423d0abdc7025b94e6fc976348428",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -68,7 +68,7 @@ class PeerTableModel : public QAbstractTableModel\n     void sort(int column, Qt::SortOrder order);\n     /*@}*/\n \n-public slots:\n+public Q_SLOTS:\n     void refresh();\n \n private:"
      },
      {
        "sha": "8665acda5ea67cd80b1a8328944f906ba776ad09",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -27,11 +27,11 @@ class QValidatedLineEdit : public QLineEdit\n     bool valid;\n     const QValidator *checkValidator;\n \n-public slots:\n+public Q_SLOTS:\n     void setValid(bool valid);\n     void setEnabled(bool enabled);\n \n-private slots:\n+private Q_SLOTS:\n     void markValid();\n     void checkValidity();\n };"
      },
      {
        "sha": "800436661f2312c733b8bd8c4f19c81259c447ce",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -27,5 +27,5 @@ void QValueComboBox::setRole(int role)\n \n void QValueComboBox::handleSelectionChanged(int idx)\n {\n-    emit valueChanged();\n+    Q_EMIT valueChanged();\n }"
      },
      {
        "sha": "5b20e6a5a4ac503a596fc4382ceb43b2f21352c3",
        "filename": "src/qt/qvaluecombobox.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/qvaluecombobox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/qvaluecombobox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -24,13 +24,13 @@ class QValueComboBox : public QComboBox\n     /** Specify model role to use as ordinal value (defaults to Qt::UserRole) */\n     void setRole(int role);\n \n-signals:\n+Q_SIGNALS:\n     void valueChanged();\n \n private:\n     int role;\n \n-private slots:\n+private Q_SLOTS:\n     void handleSelectionChanged(int idx);\n };\n "
      },
      {
        "sha": "43b46c63b52913a0a97b12f48f30e5bcf303e77e",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -185,7 +185,7 @@ void ReceiveCoinsDialog::on_showRequestButton_clicked()\n         return;\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n \n-    foreach (const QModelIndex& index, selection) {\n+    Q_FOREACH (const QModelIndex& index, selection) {\n         on_recentRequestsView_doubleClicked(index);\n     }\n }"
      },
      {
        "sha": "6bb159482bf56a2902274dfeb2cf00b143c97149",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -44,7 +44,7 @@ class ReceiveCoinsDialog : public QDialog\n \n     void setModel(WalletModel *model);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void reject();\n     void accept();\n@@ -60,7 +60,7 @@ public slots:\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     void on_receiveButton_clicked();\n     void on_showRequestButton_clicked();\n     void on_removeRequestButton_clicked();"
      },
      {
        "sha": "69f84ebbd725326f6f2d25c1759ba1737f57aaaf",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -32,7 +32,7 @@ class QRImageWidget : public QLabel\n     explicit QRImageWidget(QWidget *parent = 0);\n     QImage exportImage();\n \n-public slots:\n+public Q_SLOTS:\n     void saveImage();\n     void copyImage();\n \n@@ -55,7 +55,7 @@ class ReceiveRequestDialog : public QDialog\n     void setModel(OptionsModel *model);\n     void setInfo(const SendCoinsRecipient &info);\n \n-private slots:\n+private Q_SLOTS:\n     void on_btnCopyURI_clicked();\n     void on_btnCopyAddress_clicked();\n "
      },
      {
        "sha": "5692a7aaef392f3d3ca7cd84a8eabffc581fb08a",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -119,7 +119,7 @@ QVariant RecentRequestsTableModel::headerData(int section, Qt::Orientation orien\n void RecentRequestsTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = getAmountTitle();\n-    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n /** Gets title for amount column including current display unit if optionsModel reference available. */\n@@ -214,7 +214,7 @@ void RecentRequestsTableModel::addNewRequest(RecentRequestEntry &recipient)\n void RecentRequestsTableModel::sort(int column, Qt::SortOrder order)\n {\n     qSort(list.begin(), list.end(), RecentRequestEntryLessThan(column, order));\n-    emit dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n+    Q_EMIT dataChanged(index(0, 0, QModelIndex()), index(list.size() - 1, NUMBER_OF_COLUMNS - 1, QModelIndex()));\n }\n \n void RecentRequestsTableModel::updateDisplayUnit()"
      },
      {
        "sha": "64faa72d455b9a2fac2082eafc994ab4bccc3ca3",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -89,7 +89,7 @@ class RecentRequestsTableModel: public QAbstractTableModel\n     void addNewRequest(const std::string &recipient);\n     void addNewRequest(RecentRequestEntry &recipient);\n \n-public slots:\n+public Q_SLOTS:\n     void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);\n     void updateDisplayUnit();\n "
      },
      {
        "sha": "2fafb83d43ea330faf141dd65aca62c37bcc628a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -60,10 +60,10 @@ class RPCExecutor : public QObject\n {\n     Q_OBJECT\n \n-public slots:\n+public Q_SLOTS:\n     void request(const QString &command);\n \n-signals:\n+Q_SIGNALS:\n     void reply(int category, const QString &command);\n };\n \n@@ -95,7 +95,7 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n         STATE_ESCAPE_DOUBLEQUOTED\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n-    foreach(char ch, strCommand)\n+    Q_FOREACH(char ch, strCommand)\n     {\n         switch(state)\n         {\n@@ -158,7 +158,7 @@ void RPCExecutor::request(const QString &command)\n     std::vector<std::string> args;\n     if(!parseCommandLine(args, command.toStdString()))\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n+        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n         return;\n     }\n     if(args.empty())\n@@ -180,24 +180,24 @@ void RPCExecutor::request(const QString &command)\n         else\n             strPrint = result.write(2);\n \n-        emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n+        Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n     catch (UniValue& objError)\n     {\n         try // Nice formatting for standard-format error\n         {\n             int code = find_value(objError, \"code\").get_int();\n             std::string message = find_value(objError, \"message\").get_str();\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n         }\n         catch (const std::runtime_error&) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n+            Q_EMIT reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n         }\n     }\n     catch (const std::exception& e)\n     {\n-        emit reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n+        Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Error: \") + QString::fromStdString(e.what()));\n     }\n }\n \n@@ -245,7 +245,7 @@ RPCConsole::RPCConsole(QWidget *parent) :\n RPCConsole::~RPCConsole()\n {\n     GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n-    emit stopExecutor();\n+    Q_EMIT stopExecutor();\n     delete ui;\n }\n \n@@ -431,7 +431,7 @@ void RPCConsole::on_lineEdit_returnPressed()\n     if(!cmd.isEmpty())\n     {\n         message(CMD_REQUEST, cmd);\n-        emit cmdRequest(cmd);\n+        Q_EMIT cmdRequest(cmd);\n         // Remove command, if already in history\n         history.removeOne(cmd);\n         // Append command to history"
      },
      {
        "sha": "6f42aa08b79e11765afa17c0c3e3c8f0e3ff32af",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -46,7 +46,7 @@ class RPCConsole: public QWidget\n     virtual bool eventFilter(QObject* obj, QEvent *event);\n     void keyPressEvent(QKeyEvent *);\n \n-private slots:\n+private Q_SLOTS:\n     void on_lineEdit_returnPressed();\n     void on_tabWidget_currentChanged(int index);\n     /** open the debug.log from the current datadir */\n@@ -61,7 +61,7 @@ private slots:\n     /** Show custom context menu on Peers tab */\n     void showMenu(const QPoint& point);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n@@ -79,7 +79,7 @@ public slots:\n     /** Disconnect a selected node on the Peers tab */\n     void disconnectSelectedNode();\n \n-signals:\n+Q_SIGNALS:\n     // For RPC command executor\n     void stopExecutor();\n     void cmdRequest(const QString &command);"
      },
      {
        "sha": "e13cd714a632007edb0306d2820d930b8a8b845a",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -251,7 +251,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // Format confirmation message\n     QStringList formatted;\n-    foreach(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n+    Q_FOREACH(const SendCoinsRecipient &rcp, currentTransaction.getRecipients())\n     {\n         // generate bold amount string\n         QString amount = \"<b>\" + BitcoinUnits::formatHtmlWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\n@@ -305,7 +305,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     questionString.append(\"<hr />\");\n     CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n-    foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n+    Q_FOREACH(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n         if(u != model->getOptionsModel()->getDisplayUnit())\n             alternativeUnits.append(BitcoinUnits::formatHtmlWithUnit(u, totalAmount));\n@@ -540,7 +540,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         return;\n     }\n \n-    emit message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n+    Q_EMIT message(tr(\"Send Coins\"), msgParams.first, msgParams.second);\n }\n \n void SendCoinsDialog::minimizeFeeSection(bool fMinimize)"
      },
      {
        "sha": "c833da84b2ef2c78564b33e5c4b2171e545eb8ca",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -45,7 +45,7 @@ class SendCoinsDialog : public QDialog\n     void pasteEntry(const SendCoinsRecipient &rv);\n     bool handlePaymentRequest(const SendCoinsRecipient &recipient);\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n     void reject();\n     void accept();\n@@ -62,13 +62,13 @@ public slots:\n     bool fFeeMinimized;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n-    // of a message and message flags for use in emit message().\n+    // of a message and message flags for use in Q_EMIT message().\n     // Additional parameter msgArg can be used via .arg(msgArg).\n     void processSendCoinsReturn(const WalletModel::SendCoinsReturn &sendCoinsReturn, const QString &msgArg = QString());\n     void minimizeFeeSection(bool fMinimize);\n     void updateFeeMinimizedLabel();\n \n-private slots:\n+private Q_SLOTS:\n     void on_sendButton_clicked();\n     void on_buttonChooseFee_clicked();\n     void on_buttonMinimizeFee_clicked();\n@@ -93,7 +93,7 @@ private slots:\n     void updateSmartFeeLabel();\n     void updateGlobalFeeVariables();\n \n-signals:\n+Q_SIGNALS:\n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n };"
      },
      {
        "sha": "90a8cbdc4ea42097aa2dcc2d7f4c88349995bc25",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -114,7 +114,7 @@ void SendCoinsEntry::clear()\n \n void SendCoinsEntry::deleteClicked()\n {\n-    emit removeEntry(this);\n+    Q_EMIT removeEntry(this);\n }\n \n bool SendCoinsEntry::validate()"
      },
      {
        "sha": "d7e655fdc3991f78e073ea8bb62cff5ea0287d7c",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -45,15 +45,15 @@ class SendCoinsEntry : public QStackedWidget\n \n     void setFocus();\n \n-public slots:\n+public Q_SLOTS:\n     void clear();\n \n-signals:\n+Q_SIGNALS:\n     void removeEntry(SendCoinsEntry *entry);\n     void payAmountChanged();\n     void subtractFeeFromAmountChanged();\n \n-private slots:\n+private Q_SLOTS:\n     void deleteClicked();\n     void on_payTo_textChanged(const QString &address);\n     void on_addressBookButton_clicked();"
      },
      {
        "sha": "bf841e4f8b3f26fdd52ed97bee3068a2e18c6dde",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -35,7 +35,7 @@ class SignVerifyMessageDialog : public QDialog\n     Ui::SignVerifyMessageDialog *ui;\n     WalletModel *model;\n \n-private slots:\n+private Q_SLOTS:\n     /* sign message */\n     void on_addressBookButton_SM_clicked();\n     void on_pasteButton_SM_clicked();"
      },
      {
        "sha": "29d16d4eae2d6bea46075bfbafe7fb147cb19076",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -27,7 +27,7 @@ class SplashScreen : public QWidget\n     void paintEvent(QPaintEvent *event);\n     void closeEvent(QCloseEvent *event);\n \n-public slots:\n+public Q_SLOTS:\n     /** Slot to call finish() method as it's not defined as slot */\n     void slotFinish(QWidget *mainWin);\n "
      },
      {
        "sha": "b28934cd313579871b0cb12ddd7abd756d1368a5",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -195,7 +195,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    foreach (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    Q_FOREACH (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "71d61fcbe77c3acdf8273edba4902fdd2027609c",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -14,7 +14,7 @@ class PaymentServerTests : public QObject\n {\n     Q_OBJECT\n \n-private slots:\n+private Q_SLOTS:\n     void paymentServerTests();\n };\n \n@@ -25,7 +25,7 @@ class RecipientCatcher : public QObject\n {\n     Q_OBJECT\n \n-public slots:\n+public Q_SLOTS:\n     void getRecipient(SendCoinsRecipient r);\n \n public:"
      },
      {
        "sha": "434169dcde0cf20cca56b9a6804b0400a7c717a5",
        "filename": "src/qt/test/uritests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/test/uritests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/test/uritests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -12,7 +12,7 @@ class URITests : public QObject\n {\n     Q_OBJECT\n \n-private slots:\n+private Q_SLOTS:\n     void uriTests();\n };\n "
      },
      {
        "sha": "9b67445bc0f428d4577bc5e23a30e72541161143",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -139,10 +139,10 @@ void TrafficGraphWidget::updateRates()\n     }\n \n     float tmax = 0.0f;\n-    foreach(float f, vSamplesIn) {\n+    Q_FOREACH(float f, vSamplesIn) {\n         if(f > tmax) tmax = f;\n     }\n-    foreach(float f, vSamplesOut) {\n+    Q_FOREACH(float f, vSamplesOut) {\n         if(f > tmax) tmax = f;\n     }\n     fMax = tmax;"
      },
      {
        "sha": "6336a8d1446465f8ce7b4bed68e7bef4adf455e0",
        "filename": "src/qt/trafficgraphwidget.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/trafficgraphwidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/trafficgraphwidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -27,7 +27,7 @@ class TrafficGraphWidget : public QWidget\n protected:\n     void paintEvent(QPaintEvent *);\n \n-public slots:\n+public Q_SLOTS:\n     void updateRates();\n     void setGraphRangeMins(int mins);\n     void clear();"
      },
      {
        "sha": "af78a51d0fc3f58e6397ab3a11e971dd6e16d93c",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -21,8 +21,6 @@\n #include <stdint.h>\n #include <string>\n \n-using namespace std;\n-\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     AssertLockHeld(cs_main);\n@@ -243,14 +241,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), rec->idx) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    foreach (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "e3d64387f71033d6b9d6195395c8096fd17ec00c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -142,7 +142,7 @@ class TransactionTablePriv\n                 {\n                     parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n                     int insert_idx = lowerIndex;\n-                    foreach(const TransactionRecord &rec, toInsert)\n+                    Q_FOREACH(const TransactionRecord &rec, toInsert)\n                     {\n                         cachedWallet.insert(insert_idx, rec);\n                         insert_idx += 1;\n@@ -245,7 +245,7 @@ TransactionTableModel::~TransactionTableModel()\n void TransactionTableModel::updateAmountColumnTitle()\n {\n     columns[Amount] = BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n-    emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n+    Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n@@ -262,8 +262,8 @@ void TransactionTableModel::updateConfirmations()\n     // Invalidate status (number of confirmations) and (possibly) description\n     //  for all rows. Qt is smart enough to only actually request the data for the\n     //  visible rows.\n-    emit dataChanged(index(0, Status), index(priv->size()-1, Status));\n-    emit dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n+    Q_EMIT dataChanged(index(0, Status), index(priv->size()-1, Status));\n+    Q_EMIT dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n }\n \n int TransactionTableModel::rowCount(const QModelIndex &parent) const\n@@ -650,7 +650,7 @@ void TransactionTableModel::updateDisplayUnit()\n {\n     // emit dataChanged to update Amount column with the current unit\n     updateAmountColumnTitle();\n-    emit dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n+    Q_EMIT dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n }\n \n // queue notifications to show a non freezing progress dialog e.g. for rescan"
      },
      {
        "sha": "25c82c764bd81f102b55010a06a3608fafccc5cf",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -98,7 +98,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txWatchonlyDecoration(const TransactionRecord *wtx) const;\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n \n-public slots:\n+public Q_SLOTS:\n     /* New transaction, or transaction changed status */\n     void updateTransaction(const QString &hash, int status, bool showTransaction);\n     void updateConfirmations();"
      },
      {
        "sha": "998789b3ae453a2e1203570b200878a5e50f75ad",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -341,11 +341,11 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n \n     if(!writer.write()) {\n-        emit message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n     }\n     else {\n-        emit message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Exporting Successful\"), tr(\"The transaction history was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "6c35362be4e3116e38fec8f9d96e724cb64c5909",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -83,7 +83,7 @@ class TransactionView : public QWidget\n \n     bool eventFilter(QObject *obj, QEvent *event);\n \n-private slots:\n+private Q_SLOTS:\n     void contextualMenu(const QPoint &);\n     void dateRangeChanged();\n     void showDetails();\n@@ -95,13 +95,13 @@ private slots:\n     void openThirdPartyTxUrl(QString url);\n     void updateWatchOnlyColumn(bool fHaveWatchOnly);\n \n-signals:\n+Q_SIGNALS:\n     void doubleClicked(const QModelIndex&);\n \n     /**  Fired when a message should be reported to the user */\n     void message(const QString &title, const QString &message, unsigned int style);\n \n-public slots:\n+public Q_SLOTS:\n     void chooseDate(int idx);\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);"
      },
      {
        "sha": "5e26f3e01b6bbd174823ef44e02880b51ccbee1f",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -84,7 +84,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n \n-        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n+        Q_FOREACH (const QString &line, coreOptions.split(\"\\n\")) {\n             if (line.startsWith(\"  -\"))\n             {\n                 cursor.currentTable()->appendRows(1);"
      },
      {
        "sha": "47282ae2d0504587b044d50998adec9b1b6b9f89",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -31,7 +31,7 @@ class HelpMessageDialog : public QDialog\n     Ui::HelpMessageDialog *ui;\n     QString text;\n \n-private slots:\n+private Q_SLOTS:\n     void on_okButton_accepted();\n };\n "
      },
      {
        "sha": "5a5e2ab944311ddd657d7825204932e179153c16",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -47,7 +47,7 @@ class WalletFrame : public QFrame\n \n     WalletView *currentWalletView();\n \n-public slots:\n+public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */"
      },
      {
        "sha": "168a0255ffd39abbc5d6ec95236ec8a55621bcf0",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -25,8 +25,6 @@\n #include <QSet>\n #include <QTimer>\n \n-using namespace std;\n-\n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n@@ -107,7 +105,7 @@ void WalletModel::updateStatus()\n     EncryptionStatus newEncryptionStatus = getEncryptionStatus();\n \n     if(cachedEncryptionStatus != newEncryptionStatus)\n-        emit encryptionStatusChanged(newEncryptionStatus);\n+        Q_EMIT encryptionStatusChanged(newEncryptionStatus);\n }\n \n void WalletModel::pollBalanceChanged()\n@@ -159,7 +157,7 @@ void WalletModel::checkBalanceChanged()\n         cachedWatchOnlyBalance = newWatchOnlyBalance;\n         cachedWatchUnconfBalance = newWatchUnconfBalance;\n         cachedWatchImmatureBalance = newWatchImmatureBalance;\n-        emit balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n+        Q_EMIT balanceChanged(newBalance, newUnconfirmedBalance, newImmatureBalance,\n                             newWatchOnlyBalance, newWatchUnconfBalance, newWatchImmatureBalance);\n     }\n }\n@@ -180,7 +178,7 @@ void WalletModel::updateAddressBook(const QString &address, const QString &label\n void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)\n {\n     fHaveWatchOnly = fHaveWatchonly;\n-    emit notifyWatchonlyChanged(fHaveWatchonly);\n+    Q_EMIT notifyWatchonlyChanged(fHaveWatchonly);\n }\n \n bool WalletModel::validateAddress(const QString &address)\n@@ -205,7 +203,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     int nAddresses = 0;\n \n     // Pre-check input data for validity\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n     {\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n@@ -285,7 +283,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }\n-            emit message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n+            Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n                          CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n@@ -306,7 +304,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         LOCK2(cs_main, wallet->cs_wallet);\n         CWalletTx *newTx = transaction.getTransaction();\n \n-        foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+        Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n         {\n             if (rcp.paymentRequest.IsInitialized())\n             {\n@@ -337,7 +335,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n     // Add addresses / update labels that we've sent to to the address book,\n     // and emit coinsSent signal for each recipient\n-    foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n+    Q_FOREACH(const SendCoinsRecipient &rcp, transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n         if (!rcp.paymentRequest.IsInitialized())\n@@ -361,7 +359,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 }\n             }\n         }\n-        emit coinsSent(wallet, rcp, transaction_array);\n+        Q_EMIT coinsSent(wallet, rcp, transaction_array);\n     }\n     checkBalanceChanged(); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits\n \n@@ -521,7 +519,7 @@ WalletModel::UnlockContext WalletModel::requestUnlock()\n     if(was_locked)\n     {\n         // Request UI to unlock wallet\n-        emit requireUnlock();\n+        Q_EMIT requireUnlock();\n     }\n     // If wallet is still locked, unlock was failed or cancelled, mark context as invalid\n     bool valid = getEncryptionStatus() != Locked;"
      },
      {
        "sha": "40bc623543ff73942cf665a46b82c4c79b6d5bb4",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -227,7 +227,7 @@ class WalletModel : public QObject\n     void unsubscribeFromCoreSignals();\n     void checkBalanceChanged();\n \n-signals:\n+Q_SIGNALS:\n     // Signal that balance in wallet changed\n     void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                         const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n@@ -252,7 +252,7 @@ class WalletModel : public QObject\n     // Watch-only address added\n     void notifyWatchonlyChanged(bool fHaveWatchonly);\n \n-public slots:\n+public Q_SLOTS:\n     /* Wallet status might have changed */\n     void updateStatus();\n     /* New transaction, or transaction changed status */"
      },
      {
        "sha": "6a9b2d5bd31152bb2d7ce400e5aceb3659b73298",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -81,7 +81,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n     CAmount totalTransactionAmount = 0;\n-    foreach(const SendCoinsRecipient &rcp, recipients)\n+    Q_FOREACH(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;\n     }"
      },
      {
        "sha": "c5f556b444f227a92745f1f750841e4b333d495e",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -153,7 +153,7 @@ void WalletView::processNewTransaction(const QModelIndex& parent, int start, int\n     QString address = ttm->data(index, TransactionTableModel::AddressRole).toString();\n     QString label = ttm->data(index, TransactionTableModel::LabelRole).toString();\n \n-    emit incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n+    Q_EMIT incomingTransaction(date, walletModel->getOptionsModel()->getDisplayUnit(), amount, type, address, label);\n }\n \n void WalletView::gotoOverviewPage()\n@@ -215,7 +215,7 @@ void WalletView::showOutOfSyncWarning(bool fShow)\n \n void WalletView::updateEncryptionStatus()\n {\n-    emit encryptionStatusChanged(walletModel->getEncryptionStatus());\n+    Q_EMIT encryptionStatusChanged(walletModel->getEncryptionStatus());\n }\n \n void WalletView::encryptWallet(bool status)\n@@ -239,11 +239,11 @@ void WalletView::backupWallet()\n         return;\n \n     if (!walletModel->backupWallet(filename)) {\n-        emit message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to %1.\").arg(filename),\n             CClientUIInterface::MSG_ERROR);\n         }\n     else {\n-        emit message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n+        Q_EMIT message(tr(\"Backup Successful\"), tr(\"The wallet data was successfully saved to %1.\").arg(filename),\n             CClientUIInterface::MSG_INFORMATION);\n     }\n }"
      },
      {
        "sha": "87c5d7bfbfda53d1035c412d8d0510ed028955a7",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -65,7 +65,7 @@ class WalletView : public QStackedWidget\n \n     QProgressDialog *progressDialog;\n \n-public slots:\n+public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n     /** Switch to history (transactions) page */\n@@ -105,7 +105,7 @@ public slots:\n     /** Show progress dialog e.g. for rescan */\n     void showProgress(const QString &title, int nProgress);\n \n-signals:\n+Q_SIGNALS:\n     /** Signal that we want to show the main window */\n     void showNormalIfMinimized();\n     /**  Fired when a message should be reported to the user */"
      },
      {
        "sha": "f1c5ffe0500580c40313a1aecaa254bb58944bff",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -594,6 +594,8 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) heighest block available\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\""
      },
      {
        "sha": "703b0ee6537b0135c27cf249e0a7191fa82f0e9e",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -666,16 +666,15 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte\\n\"\n-            \"needed for a transaction to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated fee-per-kilobyte\\n\"\n+            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n@@ -698,16 +697,15 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n-            \"\\nEstimates the approximate priority\\n\"\n-            \"a zero-fee transaction needs to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated priority\\n\"\n+            \"n              (numeric) estimated priority\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );"
      },
      {
        "sha": "fd33924732c3476c1639b5332b62c0382f1bc7b3",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -260,8 +260,3 @@ std::string CScript::ToString() const\n     }\n     return str;\n }\n-\n-size_t CScript::DynamicMemoryUsage() const\n-{\n-    return memusage::DynamicUsage(*(static_cast<const std::vector<unsigned char>*>(this)));\n-}"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n-#include \"memusage.h\"\n #include \"crypto/common.h\"\n \n #include <assert.h>\n@@ -608,8 +607,6 @@ class CScript : public std::vector<unsigned char>\n         // The default std::vector::clear() does not release memory.\n         std::vector<unsigned char>().swap(*this);\n     }\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n class CReserveScript"
      },
      {
        "sha": "13d848311a037331269640ed2deaf06d1c0517b6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -70,9 +70,9 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += memusage::DynamicUsage(it->second.coins);\n+            ret += it->second.coins.DynamicMemoryUsage();\n         }\n-        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n+        BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n     }\n \n };"
      },
      {
        "sha": "8a36276b1928e993a55483b2bd5d4bfcd05c11ad",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -31,7 +31,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n-    nUsageSize = tx.DynamicMemoryUsage();\n+    nUsageSize = RecursiveDynamicUsage(tx);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)"
      },
      {
        "sha": "00d0f3a00dc9965913a8e3709e68c96af0d61750",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13985c54db8495597c6ee55176d11d3ad7570d7d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13985c54db8495597c6ee55176d11d3ad7570d7d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=13985c54db8495597c6ee55176d11d3ad7570d7d",
        "patch": "@@ -83,6 +83,7 @@\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n+#include <openssl/conf.h>\n \n // Work around clang compilation problem in Boost 1.46:\n // /usr/include/boost/program_options/detail/config_file.hpp:163:17: error: call to function 'to_internal' that is neither visible in the template definition nor found by argument-dependent lookup\n@@ -134,6 +135,13 @@ class CInit\n             ppmutexOpenSSL[i] = new CCriticalSection();\n         CRYPTO_set_locking_callback(locking_callback);\n \n+        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n+        // We don't use them so we don't require the config. However some of our libs may call functions\n+        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n+        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n+        // that the config appears to have been loaded and there are no modules/engines available.\n+        OPENSSL_no_config();\n+\n #ifdef WIN32\n         // Seed OpenSSL PRNG with current contents of the screen\n         RAND_screen();"
      }
    ]
  },
  {
    "sha": "7ded539ece22e0fc9b03a1e9ebc3631fc3db802c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGVkNTM5ZWNlMjJlMGZjOWIwM2ExZTllYmMzNjMxZmMzZGI4MDJj",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-22T15:51:02Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-22T15:51:02Z"
      },
      "message": "Don't share the default objects list between instances",
      "tree": {
        "sha": "20d78bc923cec1e22bf3df7b8184f374e47cbb6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20d78bc923cec1e22bf3df7b8184f374e47cbb6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ded539ece22e0fc9b03a1e9ebc3631fc3db802c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ded539ece22e0fc9b03a1e9ebc3631fc3db802c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ded539ece22e0fc9b03a1e9ebc3631fc3db802c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ded539ece22e0fc9b03a1e9ebc3631fc3db802c/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13985c54db8495597c6ee55176d11d3ad7570d7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13985c54db8495597c6ee55176d11d3ad7570d7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13985c54db8495597c6ee55176d11d3ad7570d7d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7fb31d4a06252953471577b10de7c6dfb2602a2e",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ded539ece22e0fc9b03a1e9ebc3631fc3db802c/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ded539ece22e0fc9b03a1e9ebc3631fc3db802c/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=7ded539ece22e0fc9b03a1e9ebc3631fc3db802c",
        "patch": "@@ -122,8 +122,8 @@ def send_mempool(self):\n #    or false, then only the last tx is tested against outcome.)\n \n class TestInstance(object):\n-    def __init__(self, objects=[], sync_every_block=True, sync_every_tx=False):\n-        self.blocks_and_transactions = objects\n+    def __init__(self, objects=None, sync_every_block=True, sync_every_tx=False):\n+        self.blocks_and_transactions = objects if objects else []\n         self.sync_every_block = sync_every_block\n         self.sync_every_tx = sync_every_tx\n "
      }
    ]
  }
]