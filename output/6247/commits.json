[
  {
    "sha": "076badb60f33f0c32b035de220ca14c52a423a2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzZiYWRiNjBmMzNmMGMzMmIwMzVkZTIyMGNhMTRjNTJhNDIzYTJh",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-05T19:37:17Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-05T19:37:58Z"
      },
      "message": "Add getblockheader RPC call\n\nAlternative to getblock that works even when the block itself has been\npruned, returning all available information.",
      "tree": {
        "sha": "d77ab151e6e6660013ea675a75ea06e07cae92f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d77ab151e6e6660013ea675a75ea06e07cae92f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/076badb60f33f0c32b035de220ca14c52a423a2a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJVcfqYXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAxMjdhYjFkNTc2ZGM4NTFmMzc0NDI0ZjEyNjljNDcwMGNj\nYWJhMmM0MmQ5N2U3NzgvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udyOPAf/ZBr/sMsJmFWsRIOhlWeecRzp\ng98+lC2aX5qWwjeTBLSnK9Wr1eqG0mcB86StvGMpFs+zCXnUulzmReerf88zina8\naL0iShG2KPGRhs+8ylVPAoZZHQzzDXQ1N+deFi67xhAVS+NyiWm3/au/fqmqfaSC\nYP4Gz/rJEYj82ZOWA5bWD4jEg5+CJkyp7FMvfWw5WmW1suJLeLhxMMh23D8r+EnW\nwY3PpAr5nF/4hIvbaGjJq0iqQC7xx4U/lsXA1qgK+BZghNCtsBc7XjLt5iV8KTAx\nRGjO7WcGY8Zch/j6fhl3lndNp1JVcrU+ehMVkWP4N0DnfmN1F1bsKWx95Laj2Q==\n=B2B7\n-----END PGP SIGNATURE-----",
        "payload": "tree d77ab151e6e6660013ea675a75ea06e07cae92f4\nparent ab20ae807961982c54e92675bee4c4000b990b7b\nauthor Peter Todd <pete@petertodd.org> 1433533037 -0230\ncommitter Peter Todd <pete@petertodd.org> 1433533078 -0230\n\nAdd getblockheader RPC call\n\nAlternative to getblock that works even when the block itself has been\npruned, returning all available information.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/076badb60f33f0c32b035de220ca14c52a423a2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/076badb60f33f0c32b035de220ca14c52a423a2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/076badb60f33f0c32b035de220ca14c52a423a2a/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab20ae807961982c54e92675bee4c4000b990b7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab20ae807961982c54e92675bee4c4000b990b7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab20ae807961982c54e92675bee4c4000b990b7b"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 85,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1baaaa7e1055aed9c9ee4e6ff9f37e5d366db872",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=076badb60f33f0c32b035de220ca14c52a423a2a",
        "patch": "@@ -51,6 +51,32 @@ double GetDifficulty(const CBlockIndex* blockindex)\n     return dDiff;\n }\n \n+UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n+{\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    int confirmations = -1;\n+    // Only report confirmations if the block is on the main chain\n+    if (chainActive.Contains(blockindex))\n+        confirmations = chainActive.Height() - blockindex->nHeight + 1;\n+    result.push_back(Pair(\"confirmations\", confirmations));\n+    result.push_back(Pair(\"height\", blockindex->nHeight));\n+    result.push_back(Pair(\"version\", blockindex->nVersion));\n+    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n+    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n+    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n+    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n+    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+\n+    if (blockindex->pprev)\n+        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    if (pnext)\n+        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+    return result;\n+}\n+\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)\n {\n@@ -255,6 +281,62 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n+UniValue getblockheader(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n+            \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n+            \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hash\\\"          (string, required) The block hash\\n\"\n+            \"2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\\n\"\n+            \"\\nResult (for verbose = true):\\n\"\n+            \"{\\n\"\n+            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+            \"}\\n\"\n+            \"\\nResult (for verbose=false):\\n\"\n+            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+            + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    std::string strHash = params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+\n+    bool fVerbose = true;\n+    if (params.size() > 1)\n+        fVerbose = params[1].get_bool();\n+\n+    if (mapBlockIndex.count(hash) == 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+    CBlockIndex* pblockindex = mapBlockIndex[hash];\n+\n+    if (!fVerbose)\n+    {\n+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n+        ssBlock << pblockindex->GetBlockHeader();\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());\n+        return strHex;\n+    }\n+\n+    return blockheaderToJSON(pblockindex);\n+}\n+\n UniValue getblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)"
      },
      {
        "sha": "b15df6a9b93f85c74cfe763e43219d9d72d021ee",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=076badb60f33f0c32b035de220ca14c52a423a2a",
        "patch": "@@ -71,6 +71,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 1 },\n     { \"listunspent\", 2 },\n     { \"getblock\", 1 },\n+    { \"getblockheader\", 1 },\n     { \"gettransaction\", 1 },\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },"
      },
      {
        "sha": "aba016be7853433c1b73b4b6926dfa0cd430b6cc",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=076badb60f33f0c32b035de220ca14c52a423a2a",
        "patch": "@@ -288,6 +288,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n     { \"blockchain\",         \"getblock\",               &getblock,               true  },\n     { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n+    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true  },\n     { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n     { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },"
      },
      {
        "sha": "2830d9c106c7a54ec7ed1c8616929c21b2757dfa",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/076badb60f33f0c32b035de220ca14c52a423a2a/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=076badb60f33f0c32b035de220ca14c52a423a2a",
        "patch": "@@ -229,6 +229,7 @@ extern UniValue settxfee(const UniValue& params, bool fHelp);\n extern UniValue getmempoolinfo(const UniValue& params, bool fHelp);\n extern UniValue getrawmempool(const UniValue& params, bool fHelp);\n extern UniValue getblockhash(const UniValue& params, bool fHelp);\n+extern UniValue getblockheader(const UniValue& params, bool fHelp);\n extern UniValue getblock(const UniValue& params, bool fHelp);\n extern UniValue gettxoutsetinfo(const UniValue& params, bool fHelp);\n extern UniValue gettxout(const UniValue& params, bool fHelp);"
      }
    ]
  }
]