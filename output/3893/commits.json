[
  {
    "sha": "db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjBiOGYzYTJlOTZiYzdjN2FmZjk1YzlhZGU2NWJlMzNkZDI3MjA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-18T14:49:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-21T15:17:04Z"
      },
      "message": "qt: Use locale-specific number formatting\n\n- Change bitcoinamountfield to use locale-specific number format\n- Change bitcoinunits to show and parse locale-specific numbers\n- If a language/territory is selected in options, this is set as default\n  locale (overrides system locale).\n\nFixes #3887",
      "tree": {
        "sha": "fd671998f9e6234efb8e427581f9f01d2f7a0de7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd671998f9e6234efb8e427581f9f01d2f7a0de7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a3acf260a56cb21fa768c7b7a82efa2f1bdcbf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a3acf260a56cb21fa768c7b7a82efa2f1bdcbf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a3acf260a56cb21fa768c7b7a82efa2f1bdcbf6"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 107,
      "deletions": 53
    },
    "files": [
      {
        "sha": "6e631091acda3cc66446adad19d77e1d7a42b641",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
        "patch": "@@ -94,6 +94,9 @@ static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTrans\n     // 3) -lang command line argument\n     lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n \n+    // Set default locale for amount and date formatting according to the selected language\n+    QLocale::setDefault(QLocale(lang_territory));\n+\n     // Convert to \"de\" only by truncating \"_DE\"\n     QString lang = lang_territory;\n     lang.truncate(lang_territory.lastIndexOf('_'));"
      },
      {
        "sha": "3f4ca3e884d25d29f110261daa70639ca7923aca",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 14,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
        "patch": "@@ -14,15 +14,54 @@\n #include <QKeyEvent>\n #include <qmath.h> // for qPow()\n \n+/** QDoubleSpinBox that shows number group seperators.\n+ * In Qt 5.3+ this could be replaced with QAbstractSpinBox::setGroupSeparatorShown(true)\n+ * See https://bugreports.qt-project.org/browse/QTBUG-5142\n+ *\n+ * TODO: We should not use a QDoubleSpinBox at all but implement our own\n+ * spinbox for fixed-point numbers.\n+ */\n+class AmountSpinBox: public QDoubleSpinBox\n+{\n+public:\n+    explicit AmountSpinBox(QWidget *parent):\n+        QDoubleSpinBox(parent)\n+    {\n+    }\n+    QString textFromValue(double value) const\n+    {\n+        return QLocale().toString(value, 'f', decimals());\n+    }\n+    QValidator::State validate (QString &text, int &pos) const\n+    {\n+        bool ok = false;\n+        QValidator::State rv = QDoubleSpinBox::validate(text, pos);\n+        if (rv == QValidator::Acceptable)\n+        {\n+            // Make sure that we only return acceptable if group seperators\n+            // are in the right place. If not, a fixup step is needed first so\n+            // return Intermediate.\n+            QLocale().toDouble(text, &ok);\n+            if (!ok)\n+                return QValidator::Intermediate;\n+        }\n+        return rv;\n+    }\n+\n+    double valueFromText(const QString& text) const\n+    {\n+        return QLocale().toDouble(text);\n+    }\n+};\n+\n BitcoinAmountField::BitcoinAmountField(QWidget *parent) :\n     QWidget(parent),\n     amount(0),\n     currentUnit(-1)\n {\n     nSingleStep = 100000; // satoshis\n \n-    amount = new QDoubleSpinBox(this);\n-    amount->setLocale(QLocale::c());\n+    amount = new AmountSpinBox(this);\n     amount->installEventFilter(this);\n     amount->setMaximumWidth(170);\n \n@@ -52,7 +91,7 @@ void BitcoinAmountField::setText(const QString &text)\n     if (text.isEmpty())\n         amount->clear();\n     else\n-        amount->setValue(text.toDouble());\n+        amount->setValue(QLocale().toDouble(text));\n }\n \n void BitcoinAmountField::clear()\n@@ -99,17 +138,6 @@ bool BitcoinAmountField::eventFilter(QObject *object, QEvent *event)\n         // Clear invalid flag on focus\n         setValid(true);\n     }\n-    else if (event->type() == QEvent::KeyPress || event->type() == QEvent::KeyRelease)\n-    {\n-        QKeyEvent *keyEvent = static_cast<QKeyEvent *>(event);\n-        if (keyEvent->key() == Qt::Key_Comma)\n-        {\n-            // Translate a comma into a period\n-            QKeyEvent periodKeyEvent(event->type(), Qt::Key_Period, keyEvent->modifiers(), \".\", keyEvent->isAutoRepeat(), keyEvent->count());\n-            QApplication::sendEvent(object, &periodKeyEvent);\n-            return true;\n-        }\n-    }\n     return QWidget::eventFilter(object, event);\n }\n "
      },
      {
        "sha": "7e3fb6152e02161020e4e7b6d4a28eecffdb42fd",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 34,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
        "patch": "@@ -5,6 +5,7 @@\n #include \"bitcoinunits.h\"\n \n #include <QStringList>\n+#include <QLocale>\n \n BitcoinUnits::BitcoinUnits(QObject *parent):\n         QAbstractListModel(parent),\n@@ -100,71 +101,89 @@ int BitcoinUnits::decimals(int unit)\n     }\n }\n \n-QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)\n+QString BitcoinUnits::format(int unit, qint64 n, bool fPlus, bool fTrim, const QLocale &locale_in)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n     if(!valid(unit))\n         return QString(); // Refuse to format invalid unit\n+    QLocale locale(locale_in);\n     qint64 coin = factor(unit);\n     int num_decimals = decimals(unit);\n+\n     qint64 n_abs = (n > 0 ? n : -n);\n     qint64 quotient = n_abs / coin;\n     qint64 remainder = n_abs % coin;\n-    QString quotient_str = QString::number(quotient);\n-    QString remainder_str = QString::number(remainder).rightJustified(num_decimals, '0');\n+    // Quotient has group (decimal) separators if locale has this enabled\n+    QString quotient_str = locale.toString(quotient);\n+    // Remainder does not have group separators\n+    locale.setNumberOptions(QLocale::OmitGroupSeparator | QLocale::RejectGroupSeparator);\n+    QString remainder_str = locale.toString(remainder).rightJustified(num_decimals, '0');\n \n-    // Right-trim excess zeros after the decimal point\n-    int nTrim = 0;\n-    for (int i = remainder_str.size()-1; i>=2 && (remainder_str.at(i) == '0'); --i)\n-        ++nTrim;\n-    remainder_str.chop(nTrim);\n+    if(fTrim)\n+    {\n+        // Right-trim excess zeros after the decimal point\n+        int nTrim = 0;\n+        for (int i = remainder_str.size()-1; i>=2 && (remainder_str.at(i) == '0'); --i)\n+            ++nTrim;\n+        remainder_str.chop(nTrim);\n+    }\n \n     if (n < 0)\n         quotient_str.insert(0, '-');\n-    else if (fPlus && n > 0)\n+    else if (fPlus && n >= 0)\n         quotient_str.insert(0, '+');\n-    return quotient_str + QString(\".\") + remainder_str;\n+    return quotient_str + locale.decimalPoint() + remainder_str;\n }\n \n-QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign)\n+QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign, bool trim, const QLocale &locale)\n {\n-    return format(unit, amount, plussign) + QString(\" \") + name(unit);\n+    return format(unit, amount, plussign, trim) + QString(\" \") + name(unit);\n }\n-\n-bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n+bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out, const QLocale &locale_in)\n {\n     if(!valid(unit) || value.isEmpty())\n         return false; // Refuse to parse invalid unit or empty string\n+\n+    QLocale locale(locale_in);\n+    qint64 coin = factor(unit);\n     int num_decimals = decimals(unit);\n-    QStringList parts = value.split(\".\");\n+    QStringList parts = value.split(locale.decimalPoint());\n+    bool ok = false;\n \n     if(parts.size() > 2)\n-    {\n-        return false; // More than one dot\n-    }\n-    QString whole = parts[0];\n-    QString decimals;\n-\n+        return false; // More than one decimal point\n+\n+    // Parse whole part (may include locale-specific group separators)\n+#if QT_VERSION < 0x050000\n+    qint64 whole = locale.toLongLong(parts[0], &ok, 10);\n+#else\n+    qint64 whole = locale.toLongLong(parts[0], &ok);\n+#endif\n+    if(!ok)\n+        return false; // Parse error\n+    if(whole > maxAmount(unit) || whole < 0)\n+        return false; // Overflow or underflow\n+\n+    // Parse decimals part (if present, may not include group separators)\n+    qint64 decimals = 0;\n     if(parts.size() > 1)\n     {\n-        decimals = parts[1];\n-    }\n-    if(decimals.size() > num_decimals)\n-    {\n-        return false; // Exceeds max precision\n+        if(parts[1].size() > num_decimals)\n+            return false; // Exceeds max precision\n+        locale.setNumberOptions(QLocale::OmitGroupSeparator | QLocale::RejectGroupSeparator);\n+#if QT_VERSION < 0x050000\n+        decimals = locale.toLongLong(parts[1].leftJustified(num_decimals, '0'), &ok, 10);\n+#else\n+        decimals = locale.toLongLong(parts[1].leftJustified(num_decimals, '0'), &ok);\n+#endif\n+        if(!ok || decimals < 0)\n+            return false; // Parse error\n     }\n-    bool ok = false;\n-    QString str = whole + decimals.leftJustified(num_decimals, '0');\n \n-    if(str.size() > 18)\n-    {\n-        return false; // Longer numbers will exceed 63 bits\n-    }\n-    qint64 retvalue = str.toLongLong(&ok);\n     if(val_out)\n     {\n-        *val_out = retvalue;\n+        *val_out = whole * coin + decimals;\n     }\n     return ok;\n }"
      },
      {
        "sha": "490bf545fabb67f941fcbacda94205ccc715dfe3",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <QAbstractListModel>\n #include <QString>\n+#include <QLocale>\n \n /** Bitcoin unit definitions. Encapsulates parsing and formatting\n    and serves as list model for drop-down selection boxes.\n@@ -49,11 +50,11 @@ class BitcoinUnits: public QAbstractListModel\n     //! Number of decimals left\n     static int decimals(int unit);\n     //! Format as string\n-    static QString format(int unit, qint64 amount, bool plussign=false);\n+    static QString format(int unit, qint64 amount, bool plussign=false, bool trim=true, const QLocale &locale=QLocale());\n     //! Format as string (with unit)\n-    static QString formatWithUnit(int unit, qint64 amount, bool plussign=false);\n+    static QString formatWithUnit(int unit, qint64 amount, bool plussign=false, bool trim=true, const QLocale &locale=QLocale());\n     //! Parse string to coin amount\n-    static bool parse(int unit, const QString &value, qint64 *val_out);\n+    static bool parse(int unit, const QString &value, qint64 *val_out, const QLocale &locale=QLocale());\n     ///@}\n \n     //! @name AbstractListModel implementation"
      },
      {
        "sha": "7c4872aedebacbf0fe3544043b95d09470ac430d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
        "patch": "@@ -58,7 +58,7 @@ namespace GUIUtil {\n \n QString dateTimeStr(const QDateTime &date)\n {\n-    return date.date().toString(Qt::SystemLocaleShortDate) + QString(\" \") + date.toString(\"hh:mm\");\n+    return date.date().toString(Qt::DefaultLocaleShortDate) + QString(\" \") + date.toString(\"hh:mm\");\n }\n \n QString dateTimeStr(qint64 nTime)\n@@ -133,7 +133,10 @@ bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)\n         {\n             if(!i->second.isEmpty())\n             {\n-                if(!BitcoinUnits::parse(BitcoinUnits::BTC, i->second, &rv.amount))\n+                // Parse amount in C locale with no number separators\n+                QLocale locale(QLocale::c());\n+                locale.setNumberOptions(QLocale::OmitGroupSeparator | QLocale::RejectGroupSeparator);\n+                if(!BitcoinUnits::parse(BitcoinUnits::BTC, i->second, &rv.amount, locale))\n                 {\n                     return false;\n                 }"
      }
    ]
  },
  {
    "sha": "9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2UzMTA2M2I4YzdlMmVjYWM0MDg3ZjI0ODdkMWM0ZGE1YWJlMjlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-21T15:17:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-22T07:00:17Z"
      },
      "message": "qt: Add tests for bitcoin units parsing/formatting\n\nTests various locales, as well as variants with and without\ndecimals group separators.",
      "tree": {
        "sha": "7f43c8c38f3085675596351e13d7822a69cc7fae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f43c8c38f3085675596351e13d7822a69cc7fae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db0b8f3a2e96bc7c7aff95c9ade65be33dd27209"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 130,
      "deletions": 2
    },
    "files": [
      {
        "sha": "159b7f4a07e083e72bf16779ef976e8d5edcc1b3",
        "filename": "src/qt/test/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/Makefile.am?ref=9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
        "patch": "@@ -8,13 +8,16 @@ AM_CPPFLAGS += -I$(top_srcdir)/src \\\n bin_PROGRAMS = test_bitcoin-qt\n TESTS = test_bitcoin-qt\n \n-TEST_QT_MOC_CPP = moc_uritests.cpp\n+TEST_QT_MOC_CPP = \\\n+  moc_bitcoinunitstests.cpp \\\n+  moc_uritests.cpp\n \n if ENABLE_WALLET\n TEST_QT_MOC_CPP += moc_paymentservertests.cpp\n endif\n \n TEST_QT_H = \\\n+  bitcoinunitstests.h \\\n   uritests.h \\\n   paymentrequestdata.h \\\n   paymentservertests.h\n@@ -24,6 +27,7 @@ BUILT_SOURCES = $(TEST_QT_MOC_CPP)\n test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n \n test_bitcoin_qt_SOURCES = \\\n+  bitcoinunitstests.cpp \\\n   test_main.cpp \\\n   uritests.cpp \\\n   $(TEST_QT_H)"
      },
      {
        "sha": "ec4eb4c659e64ecdd253f8f926428c9b5fb6109c",
        "filename": "src/qt/test/bitcoinunitstests.cpp",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/bitcoinunitstests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/bitcoinunitstests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/bitcoinunitstests.cpp?ref=9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
        "patch": "@@ -0,0 +1,104 @@\n+#include \"bitcoinunitstests.h\"\n+\n+#include \"bitcoinunits.h\"\n+\n+#include <QUrl>\n+\n+void BitcoinUnitsTests::parseTests()\n+{\n+    qint64 value = 0;\n+\n+    /// Tests with en_US locale\n+    QLocale locale1(\"en_US\");\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::BTC, \"0\", &value, locale1));\n+    QCOMPARE(value, 0LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::BTC, \"1\", &value, locale1));\n+    QCOMPARE(value, 100000000LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::BTC, \"1.0\", &value, locale1));\n+    QCOMPARE(value, 100000000LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::uBTC, \"1,000,000.0\", &value, locale1));\n+    QCOMPARE(value, 100000000LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::uBTC, \"1,000.0\", &value, locale1));\n+    QCOMPARE(value, 100000LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::mBTC, \"1,000.0\", &value, locale1));\n+    QCOMPARE(value, 100000000LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::BTC, \"0.00000001\", &value, locale1));\n+    QCOMPARE(value, 1LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::mBTC, \"0.00001\", &value, locale1));\n+    QCOMPARE(value, 1LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::uBTC, \"0.01\", &value, locale1));\n+    QCOMPARE(value, 1LL);\n+    // Fail: group separator in wrong place\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"0,00\", &value, locale1));\n+    // Fail: group separator in decimals\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"0.0,000\", &value, locale1));\n+    // Fail: multiple decimal separators\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"0.000.000\", &value, locale1));\n+\n+    /// Tests with nl_NL locale\n+    QLocale locale2(\"nl_NL\");\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::BTC, \"1\", &value, locale2));\n+    QCOMPARE(value, 100000000LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::BTC, \"1,0\", &value, locale2));\n+    QCOMPARE(value, 100000000LL);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::uBTC, \"1.000.000,0\", &value, locale2));\n+    QCOMPARE(value, 100000000LL);\n+    // Fail: multiple decimal separators\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"0,000,000\", &value, locale2));\n+\n+    /// Tests with de_CH locale\n+    QLocale locale3(\"de_CH\");\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::uBTC, \"123'456.78\", &value, locale3));\n+    QCOMPARE(value, 12345678LL);\n+    // Fail: multiple decimal separators\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"0.000.000\", &value, locale3));\n+\n+    /// Tests with c locale\n+    QLocale locale4(QLocale::c());\n+    locale4.setNumberOptions(QLocale::OmitGroupSeparator | QLocale::RejectGroupSeparator);\n+    QVERIFY(BitcoinUnits::parse(BitcoinUnits::BTC, \"1000.00000000\", &value, locale4));\n+    QCOMPARE(value, 100000000000LL);\n+    // Fail: group separator\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"1,000.00\", &value, locale4));\n+    // Fail: too many decimals\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"1000.000000000\", &value, locale4));\n+    // Fail: overflow\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"21000001.0\", &value, locale4));\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"92233720368547758090.0\", &value, locale4));\n+    // Fail: underflow\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"-1000000.0\", &value, locale4));\n+    // Fail: sign in decimals\n+    QVERIFY(!BitcoinUnits::parse(BitcoinUnits::BTC, \"0.-1000000\", &value, locale4));\n+}\n+\n+void BitcoinUnitsTests::formatTests()\n+{\n+    /// Tests with en_US locale\n+    QLocale locale1(\"en_US\");\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::BTC, 0, false, false, locale1), QString(\"0.00000000\"));\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::BTC, 0, false, true, locale1), QString(\"0.00\"));\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::mBTC, 0, false, false, locale1), QString(\"0.00000\"));\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 0, false, false, locale1), QString(\"0.00\"));\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 0, true, false, locale1), QString(\"+0.00\"));\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 100000000, false, true, locale1), QString(\"1,000,000.00\"));\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 100000000, true, true, locale1), QString(\"+1,000,000.00\"));\n+\n+    QCOMPARE(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, 100000000, false, true, locale1), QString(\"1.00 BTC\"));\n+    QCOMPARE(BitcoinUnits::formatWithUnit(BitcoinUnits::mBTC, 100000000, false, true, locale1), QString(\"1,000.00 mBTC\"));\n+    QCOMPARE(BitcoinUnits::formatWithUnit(BitcoinUnits::uBTC, 100000000, false, true, locale1), QString(\"1,000,000.00 \u03bcBTC\"));\n+\n+    /// Tests with nl_NL locale\n+    QLocale locale2(\"nl_NL\");\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 100000000, false, true, locale2), QString(\"1.000.000,00\"));\n+\n+    /// Tests with de_CH locale\n+    QLocale locale3(\"de_CH\");\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 100000000, false, true, locale3), QString(\"1'000'000.00\"));\n+\n+    /// Tests with c locale (with and without group separators)\n+    QLocale locale4(QLocale::c());\n+    locale4.setNumberOptions(QLocale::OmitGroupSeparator | QLocale::RejectGroupSeparator);\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 100000000, false, true, QLocale::c()), QString(\"1,000,000.00\"));\n+    QCOMPARE(BitcoinUnits::format(BitcoinUnits::uBTC, 100000000, false, true, locale4), QString(\"1000000.00\"));\n+}\n+"
      },
      {
        "sha": "f00c2372e16b80d2d543b09321659daa80f746e4",
        "filename": "src/qt/test/bitcoinunitstests.h",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/bitcoinunitstests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/bitcoinunitstests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/bitcoinunitstests.h?ref=9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
        "patch": "@@ -0,0 +1,16 @@\n+#ifndef BITCOINUNITSTESTS_H\n+#define BITCOINUNITSTESTS_H\n+\n+#include <QObject>\n+#include <QTest>\n+\n+class BitcoinUnitsTests : public QObject\n+{\n+    Q_OBJECT\n+\n+private slots:\n+    void formatTests();\n+    void parseTests();\n+};\n+\n+#endif // BITCOINUNITSTESTS_H"
      },
      {
        "sha": "b73a884d37130d9bfac6cd62e74465228c2cad98",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
        "patch": "@@ -3,10 +3,11 @@\n #include \"bitcoin-config.h\"\n #endif\n \n+#include \"bitcoinunitstests.h\"\n+#include \"uritests.h\"\n #ifdef ENABLE_WALLET\n #include \"paymentservertests.h\"\n #endif\n-#include \"uritests.h\"\n \n #include <QCoreApplication>\n #include <QObject>\n@@ -38,6 +39,9 @@ int main(int argc, char *argv[])\n     if (QTest::qExec(&test2) != 0)\n         fInvalid = true;\n #endif\n+    BitcoinUnitsTests test3;\n+    if (QTest::qExec(&test3) != 0)\n+        fInvalid = true;\n \n     return fInvalid;\n }"
      }
    ]
  },
  {
    "sha": "a8c9ed2ecf40386de5bc93e4796948714e6f2e93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGM5ZWQyZWNmNDAzODZkZTViYzkzZTQ3OTY5NDg3MTRlNmYyZTkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-22T07:26:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-03-22T07:28:00Z"
      },
      "message": "qt: use QChar(0x03BC) for mu symbol\n\nEmbedding UTF-8 in source code is not portable.\n\nAlso make unit descriptions translatable.",
      "tree": {
        "sha": "fb7e40d23a9f640805d379f02969e0d38821e673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb7e40d23a9f640805d379f02969e0d38821e673"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8c9ed2ecf40386de5bc93e4796948714e6f2e93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c9ed2ecf40386de5bc93e4796948714e6f2e93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8c9ed2ecf40386de5bc93e4796948714e6f2e93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c9ed2ecf40386de5bc93e4796948714e6f2e93/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ce31063b8c7e2ecac4087f2487d1c4da5abe29d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9f6000cb9affdd5a3c4dd9148cb511fd6d58d8df",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8c9ed2ecf40386de5bc93e4796948714e6f2e93/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8c9ed2ecf40386de5bc93e4796948714e6f2e93/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=a8c9ed2ecf40386de5bc93e4796948714e6f2e93",
        "patch": "@@ -41,7 +41,7 @@ QString BitcoinUnits::name(int unit)\n     {\n     case BTC: return QString(\"BTC\");\n     case mBTC: return QString(\"mBTC\");\n-    case uBTC: return QString::fromUtf8(\"\u03bcBTC\");\n+    case uBTC: return QChar(0x03BC) + QString(\"BTC\");\n     default: return QString(\"???\");\n     }\n }\n@@ -50,9 +50,9 @@ QString BitcoinUnits::description(int unit)\n {\n     switch(unit)\n     {\n-    case BTC: return QString(\"Bitcoins\");\n-    case mBTC: return QString(\"Milli-Bitcoins (1 / 1,000)\");\n-    case uBTC: return QString(\"Micro-Bitcoins (1 / 1,000,000)\");\n+    case BTC: return tr(\"Bitcoins\");\n+    case mBTC: return tr(\"Milli-Bitcoins (1 / 1,000)\");\n+    case uBTC: return tr(\"Micro-Bitcoins (1 / 1,000,000)\");\n     default: return QString(\"???\");\n     }\n }"
      },
      {
        "sha": "35c7a149cb58254ec1dd71d854cccff181f9e64f",
        "filename": "src/qt/test/bitcoinunitstests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8c9ed2ecf40386de5bc93e4796948714e6f2e93/src/qt/test/bitcoinunitstests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8c9ed2ecf40386de5bc93e4796948714e6f2e93/src/qt/test/bitcoinunitstests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/bitcoinunitstests.cpp?ref=a8c9ed2ecf40386de5bc93e4796948714e6f2e93",
        "patch": "@@ -85,7 +85,7 @@ void BitcoinUnitsTests::formatTests()\n \n     QCOMPARE(BitcoinUnits::formatWithUnit(BitcoinUnits::BTC, 100000000, false, true, locale1), QString(\"1.00 BTC\"));\n     QCOMPARE(BitcoinUnits::formatWithUnit(BitcoinUnits::mBTC, 100000000, false, true, locale1), QString(\"1,000.00 mBTC\"));\n-    QCOMPARE(BitcoinUnits::formatWithUnit(BitcoinUnits::uBTC, 100000000, false, true, locale1), QString(\"1,000,000.00 \u03bcBTC\"));\n+    QCOMPARE(BitcoinUnits::formatWithUnit(BitcoinUnits::uBTC, 100000000, false, true, locale1), QString(\"1,000,000.00 \")+QChar(0x03BC)+QString(\"BTC\"));\n \n     /// Tests with nl_NL locale\n     QLocale locale2(\"nl_NL\");"
      }
    ]
  }
]