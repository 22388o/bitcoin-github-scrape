[
  {
    "sha": "386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODZhNmI2MmE4YTFkYjlkZDBmMzU0Y2I5NWI3NTg1ZjU1NWM3ZTVk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-03-09T04:12:43Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-03-11T04:37:20Z"
      },
      "message": "Allow to optional specify the directory for the blocks storage",
      "tree": {
        "sha": "4179dce98f66712dd2f266ed0568b8911cbf8831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4179dce98f66712dd2f266ed0568b8911cbf8831"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqksoEACgkQHrd2uwPH\nki21ZhAAgm6bAQofR7a/huFsT5IfyuWc/X2wCuemLUTwcl0W7eukIuXsbD0M9K+f\nDfbm6UmRS1rfaq5ZGyUPABgBKV8ULPG3HSwXG4jVBozd0Xy4gyyQX6y2a2Kpi0vN\n7Qog2EYDfCTdgo6+bRPK1HUS0UxCnPhO9zGNrAhIAWwqAz/Z+1GKIXw0vbCRIiog\nFHWV9rraPmlCQp5F2lgpUdS3bBh3n5rIEfF1fgNYqMln+2lN1utRYAXXUL+WV0zV\nlXvdbxxg3z+pV2dMImQPfenjslCTqGc9tVkcCaaEw/atocVdERGKiuqSBb40tCTG\n0wXEAp5BxgdDTuH+gL6a2AhHx3eiKEnlTuSmA57DG+aVC287ldSKWn5igDw/wA9C\nYItBW5VA1kr2RWUR1VWpq5xgYdWf+8s4nw0YOr1CoSPMmmNAALarEd3XGQync9zR\nayotLS02mno/kvHCUhdq3UcI3co6PVvsaIVg1qRGa6y4xxFM012pNNW9ep0tE1ej\nSLu3bv2LqVZKutUbICcFSbGn5ET6L3t72PWXUh7ENr0OCn5oeeY79KgGxiPyqbKK\nYP/3wV8Oc/WcbXXlF70C6I0FLhhzgpffWgILsuiv797vjcXzEncnjS6O2PGBkbvE\nCJ9JrUnvH5kPR7fSeRC9ratulHCdowqdU9K9OAL5VNtVgyDeEqM=\n=2UVp\n-----END PGP SIGNATURE-----",
        "payload": "tree 4179dce98f66712dd2f266ed0568b8911cbf8831\nparent ed6ae8059cdbad60466807a7cfb23e5540a50051\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1520568763 +0800\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1520743040 +0800\n\nAllow to optional specify the directory for the blocks storage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6ae8059cdbad60466807a7cfb23e5540a50051"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 50,
      "deletions": 11
    },
    "files": [
      {
        "sha": "eb8beda8d31ae0682f66c34c9181c3870fd7150d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "patch": "@@ -333,6 +333,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n+    strUsage += HelpMessageOpt(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     if (showDebug)\n@@ -596,7 +597,7 @@ void CleanupBlockRevFiles()\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    fs::path blocksdir = GetDataDir() / \"blocks\";\n+    fs::path blocksdir = GetBlocksDir();\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (fs::is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n@@ -908,6 +909,10 @@ bool AppInitParameterInteraction()\n \n     // also see: InitParameterInteraction()\n \n+    if (!fs::is_directory(GetBlocksDir(false))) {\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\\n\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n@@ -1630,7 +1635,7 @@ bool AppInitMain()\n \n     // ********************************************************* Step 10: import blocks\n \n-    if (!CheckDiskSpace())\n+    if (!CheckDiskSpace() && !CheckDiskSpace(0, true))\n         return false;\n \n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly."
      },
      {
        "sha": "a47b4af44c05a2187ab9c091f623643b16f01f4f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "patch": "@@ -617,7 +617,7 @@ int main(int argc, char *argv[])\n     if (!Intro::pickDataDirectory())\n         return EXIT_SUCCESS;\n \n-    /// 6. Determine availability of data directory and parse bitcoin.conf\n+    /// 6. Determine availability of data and blocks directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n     if (!fs::is_directory(GetDataDir(false)))\n     {"
      },
      {
        "sha": "f6d60411b43227026b91d740dd53b3d26a6c6fa4",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "patch": "@@ -147,7 +147,7 @@ size_t CCoinsViewDB::EstimateSize() const\n     return db.EstimateSize(DB_COIN, (char)(DB_COIN+1));\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetBlocksDir() / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {"
      },
      {
        "sha": "18a020ccd97af5c9f8f4c2ed3201dba4a09869be",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "patch": "@@ -598,10 +598,41 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n+static fs::path g_blocks_path_cached;\n+static fs::path g_blocks_path_cache_net_specific;\n static fs::path pathCached;\n static fs::path pathCachedNetSpecific;\n static CCriticalSection csPathCached;\n \n+const fs::path &GetBlocksDir(bool fNetSpecific)\n+{\n+\n+    LOCK(csPathCached);\n+\n+    fs::path &path = fNetSpecific ? g_blocks_path_cache_net_specific : g_blocks_path_cached;\n+\n+    // This can be called during exceptions by LogPrintf(), so we cache the\n+    // value so we don't have to do memory allocations after that.\n+    if (!path.empty())\n+        return path;\n+\n+    if (gArgs.IsArgSet(\"-blocksdir\")) {\n+        path = fs::system_complete(gArgs.GetArg(\"-blocksdir\", \"\"));\n+        if (!fs::is_directory(path)) {\n+            path = \"\";\n+            return path;\n+        }\n+    } else {\n+        path = GetDataDir(false);\n+    }\n+    if (fNetSpecific)\n+        path /= BaseParams().DataDir();\n+\n+    path /= \"blocks\";\n+    fs::create_directories(path);\n+    return path;\n+}\n+\n const fs::path &GetDataDir(bool fNetSpecific)\n {\n \n@@ -640,6 +671,8 @@ void ClearDatadirCache()\n \n     pathCached = fs::path();\n     pathCachedNetSpecific = fs::path();\n+    g_blocks_path_cached = fs::path();\n+    g_blocks_path_cache_net_specific = fs::path();\n }\n \n fs::path GetConfigFile(const std::string& confPath)"
      },
      {
        "sha": "0c31ac5e6009160e8a6c17228d4896c42e8f815c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "patch": "@@ -182,6 +182,7 @@ void ReleaseDirectoryLocks();\n \n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n+const fs::path &GetBlocksDir(bool fNetSpecific = true);\n const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n fs::path GetConfigFile(const std::string& confPath);"
      },
      {
        "sha": "16bba4f7b935516c92fd129fa7b8b64b56855444",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "patch": "@@ -2056,7 +2056,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         // Write blocks and block index to disk.\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n-            if (!CheckDiskSpace(0))\n+            if (!CheckDiskSpace(0, true))\n                 return state.Error(\"out of disk space\");\n             // First make sure all block and undo data is flushed to disk.\n             FlushBlockFile();\n@@ -2895,7 +2895,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n         if (nNewChunks > nOldChunks) {\n             if (fPruneMode)\n                 fCheckForPruning = true;\n-            if (CheckDiskSpace(nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos)) {\n+            if (CheckDiskSpace(nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos, true)) {\n                 FILE *file = OpenBlockFile(pos);\n                 if (file) {\n                     LogPrintf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n@@ -2928,7 +2928,7 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     if (nNewChunks > nOldChunks) {\n         if (fPruneMode)\n             fCheckForPruning = true;\n-        if (CheckDiskSpace(nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos)) {\n+        if (CheckDiskSpace(nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos, true)) {\n             FILE *file = OpenUndoFile(pos);\n             if (file) {\n                 LogPrintf(\"Pre-allocating up to position 0x%x in rev%05u.dat\\n\", nNewChunks * UNDOFILE_CHUNK_SIZE, pos.nFile);\n@@ -3604,9 +3604,9 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n            nLastBlockWeCanPrune, count);\n }\n \n-bool CheckDiskSpace(uint64_t nAdditionalBytes)\n+bool CheckDiskSpace(uint64_t nAdditionalBytes, bool blocks_dir)\n {\n-    uint64_t nFreeBytesAvailable = fs::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = fs::space(blocks_dir ? GetBlocksDir() : GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n@@ -3649,7 +3649,7 @@ static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n \n fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n {\n-    return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n+    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }\n \n CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)"
      },
      {
        "sha": "ba7a018ec3d8f68d6e2e007ce172b221086795c4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "patch": "@@ -254,7 +254,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr, CBlockHeader *first_invalid=nullptr);\n \n /** Check whether enough disk space is available for an incoming block */\n-bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n+bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */"
      }
    ]
  },
  {
    "sha": "f38e4fdb06406f9a1a2562836fab523eb75b5090",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzhlNGZkYjA2NDA2ZjlhMWEyNTYyODM2ZmFiNTIzZWI3NWI1MDkw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-03-09T04:43:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-03-18T05:24:10Z"
      },
      "message": "QA: Add -blocksdir test",
      "tree": {
        "sha": "5e9b40207f9df611c29656973ee0cd3d89c9fe5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e9b40207f9df611c29656973ee0cd3d89c9fe5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f38e4fdb06406f9a1a2562836fab523eb75b5090",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqt9/sACgkQHrd2uwPH\nki3cug//SWByQIdMQSo4cXCWR969zY5fIX8G2v911HV4Sn6XsfNCjPUuXZmC/bWI\nzVLc7/8O57GNvDJJmszPM6MDm/F+VyqHNXOdN2aNMci6c2oTqCFMzP4xPnng7Qkg\nI84537YoqBx1OH4sp/0+uCwAuwwkzRv9ciZq17+7yAP84CyBZJj5hbY4U4L6pcQH\nZ57QgHNN3r4tfSoIp9DvOCXELZ4PlfxgnQjoorNWWjLdTJ0i/9BmlrpWF/+Z0/BZ\ntb5yJa16XkaMcATUfSbuhL5VBsrtLzmRvvq7cdg3tyNwTn8psQiJkigpN2ZXhlMA\nLv3cGx6ydLn7xwZOPDbsiD7Chx8P0cPRGNT9rCrNXQIM8OGn/vBnPnVtpUtuAY5v\nY76uVn8EPW+YAF6po/yjtMX4Tvr+z+ZFVYMlpiXMYLM7Ot7AvwF5DCEwcZTL8wzt\nkML0usqY7oJKvkw14Yzu5bOOFv3KIWEDbxb4PtuCFupghQT4rBrh7YGbcCj+H6dK\nGD41u4xT1y5U7pev6djE4UN3V7Xyr+Dt0AnimmJVXJpY76x17wdntUlvmEkpRyFi\ng4atVtCbwR0Q0/KK730BQI7zdpevmNbpwULlmiyYqqT7jDlY/UtmD53zriXp7tGE\nhjGw0vqgQI1ySrmrpzjR8GtKyyFS+UQI5KgvuUCRsv7r+RbrzAk=\n=OUXx\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e9b40207f9df611c29656973ee0cd3d89c9fe5a\nparent 386a6b62a8a1db9dd0f354cb95b7585f555c7e5d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1520570635 +0800\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1521350650 +0700\n\nQA: Add -blocksdir test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f38e4fdb06406f9a1a2562836fab523eb75b5090",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f38e4fdb06406f9a1a2562836fab523eb75b5090",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f38e4fdb06406f9a1a2562836fab523eb75b5090/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/386a6b62a8a1db9dd0f354cb95b7585f555c7e5d"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e9d7b9de5b4cf4f9461e5b88e82edf4da7b75dba",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f38e4fdb06406f9a1a2562836fab523eb75b5090/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f38e4fdb06406f9a1a2562836fab523eb75b5090/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=f38e4fdb06406f9a1a2562836fab523eb75b5090",
        "patch": "@@ -0,0 +1,34 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the blocksdir option.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework, initialize_datadir\n+\n+import shutil\n+import os\n+\n+class BlocksdirTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.stop_node(0)\n+        node0path = os.path.join(self.options.tmpdir, \"node0\")\n+        shutil.rmtree(node0path)\n+        initialize_datadir(self.options.tmpdir, 0)\n+        self.log.info(\"Starting with non exiting blocksdir ...\")\n+        self.assert_start_raises_init_error(0, [\"-blocksdir=\"+self.options.tmpdir+ \"/blocksdir\"], \"Specified blocks director\")\n+        os.mkdir(self.options.tmpdir+ \"/blocksdir\")\n+        self.log.info(\"Starting with exiting blocksdir ...\")\n+        self.start_node(0, [\"-blocksdir=\"+self.options.tmpdir+ \"/blocksdir\"])\n+        self.log.info(\"mining blocks..\")\n+        self.nodes[0].generate(10)\n+        assert(os.path.isfile(self.options.tmpdir+ \"/blocksdir/regtest/blocks/blk00000.dat\"))\n+        assert(os.path.isdir(self.options.tmpdir+ \"/blocksdir/regtest/blocks/index\"))\n+\n+if __name__ == '__main__':\n+    BlocksdirTest().main()"
      },
      {
        "sha": "14211cd4026398b1c357f66a57bdc8c7188bd3f8",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f38e4fdb06406f9a1a2562836fab523eb75b5090/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f38e4fdb06406f9a1a2562836fab523eb75b5090/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f38e4fdb06406f9a1a2562836fab523eb75b5090",
        "patch": "@@ -133,6 +133,7 @@\n     'p2p_unrequested_blocks.py',\n     'feature_logging.py',\n     'p2p_node_network_limited.py',\n+    'feature_blocksdir.py',\n     'feature_config_args.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time"
      }
    ]
  },
  {
    "sha": "a1926362ecb3c354ae338ef7d7020daf78f980c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTkyNjM2MmVjYjNjMzU0YWUzMzhlZjdkNzAyMGRhZjc4Zjk4MGM5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-03-11T04:42:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-03-20T02:33:17Z"
      },
      "message": "-blocksdir: keep blockindex leveldb database in datadir",
      "tree": {
        "sha": "9be5d4ea2d46e0c8624b74774ab555035120ea58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9be5d4ea2d46e0c8624b74774ab555035120ea58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1926362ecb3c354ae338ef7d7020daf78f980c9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqwcu8ACgkQHrd2uwPH\nki2C0w//YLlsD2kmJc/De81tDx5MI4oP3sFBTWnaTLgqv7Ii+hPgyJ0Cf1CLTJAY\nq3vT5Rzs7fRzEEuLycuTZOQpn5wuIrtF9qywb696HyVw7fV89j1kd82z/4Z2PlmI\nHv7Hy5WTFd/JpmTMGjSWiNlp5847vf8mXB4Sa6vq/PDNidkbHrLM7twDuKt+YZTA\nNGZeqi2A59Kaaz4EgcyJFiY3qO+vsaqsF4UgTd8KQVltUSuJIgLABVoJM27p8kJ9\nb+v9r66fvx6qjTI/GuTWE1EbpzsvbjdxbMSwprBHqkMYzpe8gETCezg+47Nfsv8z\nrG3HAOM50vq8Luu+LS2dlzxjvHQRyrdosixVPb2rxOsF5M+HMq+SDDhE+f1N71Sq\n5Eei8UQWF6VK+AkB8kjUe31MmIr9NE/lz9dANvBu89mq3etwBlXjDKVSu0gif+b7\njE6uPxT740puybeVEugv0/0gJ3mwNVc7BupmjKv99C/rNAeS5ReDSsgjB9A/BdLe\nKUJW948GhXL5KcHCNrW2jWwIb44q+V3OMlRzR+EH+Uw2JAXt5QQUvXDg0EQGT/9v\nPupxBhyYimkkpfjBIOGRVFYS6MsrhvKcXyNiZxrjZ23fP1ukcv23c42pKRxQr0j8\nYuFjywjxjaFyyL1Hf7YHzovEt8JBdwWXXNM4lZ4tU487xjQ8x2s=\n=LnNz\n-----END PGP SIGNATURE-----",
        "payload": "tree 9be5d4ea2d46e0c8624b74774ab555035120ea58\nparent f38e4fdb06406f9a1a2562836fab523eb75b5090\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1520743322 +0800\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1521513197 +0700\n\n-blocksdir: keep blockindex leveldb database in datadir\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1926362ecb3c354ae338ef7d7020daf78f980c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1926362ecb3c354ae338ef7d7020daf78f980c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1926362ecb3c354ae338ef7d7020daf78f980c9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f38e4fdb06406f9a1a2562836fab523eb75b5090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f38e4fdb06406f9a1a2562836fab523eb75b5090",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f38e4fdb06406f9a1a2562836fab523eb75b5090"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4a2c321885ba29b3d1b055ce96411a0f84ad10f1",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1926362ecb3c354ae338ef7d7020daf78f980c9/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1926362ecb3c354ae338ef7d7020daf78f980c9/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a1926362ecb3c354ae338ef7d7020daf78f980c9",
        "patch": "@@ -147,7 +147,7 @@ size_t CCoinsViewDB::EstimateSize() const\n     return db.EstimateSize(DB_COIN, (char)(DB_COIN+1));\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetBlocksDir() / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.IsArgSet(\"-blocksdir\") ? GetDataDir() / \"blocks\" / \"index\" : GetBlocksDir() / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {"
      },
      {
        "sha": "6ee6cb9a3e6977576780898f5561430a855d1f12",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1926362ecb3c354ae338ef7d7020daf78f980c9/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1926362ecb3c354ae338ef7d7020daf78f980c9/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=a1926362ecb3c354ae338ef7d7020daf78f980c9",
        "patch": "@@ -27,8 +27,8 @@ def run_test(self):\n         self.start_node(0, [\"-blocksdir=\"+self.options.tmpdir+ \"/blocksdir\"])\n         self.log.info(\"mining blocks..\")\n         self.nodes[0].generate(10)\n-        assert(os.path.isfile(self.options.tmpdir+ \"/blocksdir/regtest/blocks/blk00000.dat\"))\n-        assert(os.path.isdir(self.options.tmpdir+ \"/blocksdir/regtest/blocks/index\"))\n+        assert(os.path.isfile(os.path.join(self.options.tmpdir, \"blocksdir\", \"regtest\", \"blocks\", \"blk00000.dat\")))\n+        assert(os.path.isdir(os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"blocks\", \"index\")))\n \n if __name__ == '__main__':\n     BlocksdirTest().main()"
      }
    ]
  }
]