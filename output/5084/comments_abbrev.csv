luke-jr,2014-10-13T23:21:49Z,There is already work in progress to modularise Bitcoin Core. I believe the current plan is to start with a libbitcoinscript and libbitcoinconsensus.\n,https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58969190,58969190,
martindale,2014-10-13T23:25:23Z,"@luke-jr this is @BitPay's implementation, which we'd like to use as a foundation for future work.  It'd make sense to consolidate efforts if that is the case – can you please link us to the appropriate place where the existing efforts are being documented?\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58969443,58969443,
luke-jr,2014-10-13T23:27:20Z,@martindale eg #4692 #4981 #5081 #5082\n,https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58969591,58969591,
TheBlueMatt,2014-10-13T23:27:27Z,"Yes, this seems like a very bad idea to structure it this way - exposing lots and lots of bitcoin core's internal interfaces externally is very poor library design as those interfaces are nearly guaranteed to change. Instead, the current approach is to take it slow, first by exposing one simple function - script verification, and hopefully adding more to that as is possible.\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58969608,58969608,
TheBlueMatt,2014-10-13T23:28:18Z,See-also: https://github.com/TheBlueMatt/bitcoin/commit/6d697838209a12eb5cba4f5f41caca53899b85d1\n,https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58969680,58969680,
TheBlueMatt,2014-10-13T23:29:40Z,"Do note that most of the bugs we've seen in alternate implementations have been in the handling of script details, so this should alleviate many of the issues, and others can be addressed over time.\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58969797,58969797,
martindale,2014-10-13T23:39:43Z,"Ideally, we can find a happy medium between @BitPay's need to move quickly with an implementation of a modular daemon library and the overall community's need to expose a resilient interface but not access internals (i.e., the existing work on #4692)  – perhaps a solution would be to consider the two distinct needs, such that a `daemonlib` and `libbitcoin` (or `libbitcoinconsensus`?) would exist s",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58970579,58970579,
TheBlueMatt,2014-10-13T23:48:47Z,"What, specifically, does Bitpay need here? Access to most information about blocks, etc is already available via RPC, and I would argue that, with a bit of testing and running it behind bitcoin core proxies, doing a full node implementation based on a libbitcoinconsensus_verify_script should be reasonably secure.\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58971280,58971280,
luke-jr,2014-10-13T23:51:38Z,@martindale (note that libbitcoin already exists and is completely independent from Bitcoin Core)\n,https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58971489,58971489,
sipa,2014-10-14T00:10:15Z,"I understand the use case, but I think this is a bad idea without having a stable API we want to commit to.\n\nEither we'll end up breaking the API continuously, with people perhaps sticking to older versions and not upgrading because of incompatibilities, or we'll end up maintaining crufty old APIs because we can't afford the former to happen.\n\nWe are working pretty actively towards modularizin",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58972958,58972958,
theuni,2014-10-14T00:59:36Z,"NACK from me as well, I agree with @sipa, @luke-jr, @TheBlueMatt completely.\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58976612,58976612,
jgarzik,2014-10-14T01:01:07Z,"Direct language bindings typically do have access to internal, oft-changing APIs (ex. SQL db world), as what matters is the downstream JS API.\n\nThere is no explicit or implicit obligation to make internal APIs stable and maintain them until they are old & crufty.\n\nI would definitely suggest readers look at linked bitcoind.js and the provided example, as some of the comments seem to miss how th",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58976728,58976728,
sipa,2014-10-14T01:28:34Z,"This pull request is not introducing a node.js library though - it's introducing a libbitcoind.so whose API will break with every code change.\n\nCan't we have a C++ top-level API implementation that does what the node.js code is doing, and expose that as a library? That way it would be reusable, and not break compatibility...\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58978479,58978479,
martindale,2014-10-14T05:02:18Z,"After [some discussion in IRC](http://bitcoinstats.com/irc/bitcoin-dev/logs/2014/10/14), we're going to investigate using the `-rdynamic` flag to expose this as a dynamic library.  If this works out, we will add commits to this branch as we make said changes.  Thanks to everyone who is providing feedback.\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-58990550,58990550,
chjj,2014-10-14T19:45:25Z,"> Yes, this seems like a very bad idea to structure it this way - exposing lots and lots of bitcoin core's internal interfaces externally is very poor library design as those interfaces are nearly guaranteed to change.\n\nYes, I mentioned the burden of keeping what is normally an internal API stable in my PR. However, I see this as a problem for the platform binding maintainers, not the bitcoin co",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59104543,59104543,
TheBlueMatt,2014-10-14T19:55:58Z,"There was a long discussion around this on #bitcoin-dev last night, so I'll refer you to that. But, essentially, if BitPay wants to update bitcoind.js after every release, they might as well simply maintain this patch as a part of that effort (its not that big a patch, so it really should be minimal effort). That very clearly sends the right message of ""this is an unsupported way of doing things, ",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59106116,59106116,
jgarzik,2014-10-14T20:25:19Z,"The aforementioned stable C++ API is being developed inside-out, small consensus parts first.  It's the right way to do things, but it will be a long while before that is a complete solution akin to what embedding bitcoind offers immediately: bug-for-bug match right down to the database & crypto libs.\n\nThat is a reasonable solution to offer users; there is nothing BitPay-specific about that solu",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59110390,59110390,
sipa,2014-10-14T21:13:36Z,"I very well understand that RPC does not cover all needs - or even just the built-in wallet code as such.\n\nBut I never got a good answer as to why the abstraction is done in the Javascript layer rather than the C++ layer. If we had a libbitcoind.so which exposed an API similar to what bitcoind.js is doing now (which seems trivial), it would not break on every change, and it would be usable to mo",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59117594,59117594,
chjj,2014-10-14T21:40:20Z,"> But I never got a good answer as to why the abstraction is done in the Javascript layer rather than the C++ layer.\n\nThat's definitely possible, and a good idea. I would love to write a C++ wrapper and abstract _that_ into a library and simply maintain that as frequently as bitcoin itself changes. Libraries for any other language or platform could use that.\n\nbitcoind.js was just sort of a pro",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59121429,59121429,
jtimon,2014-10-15T00:05:05Z,"`Reiterating comments above, bitcoind.js provides a high speed, asynchronous interface to a running bitcoind. It produces something akin to the ZMQ integration.`\nWhy not implementing a ZMQ equivalent of the RPC (and whetever else you need) and call that from javascript?\nThus using ZMQ as the glue.\n\n`if BitPay wants to update bitcoind.js after every release, they might as well simply maintain t",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59138160,59138160,
sipa,2014-10-15T00:12:48Z,"I would like to close this pull request, given an easier equivalent short-term solution exists (`-rdynamic`), and that later work can be focussed around more proper encapsulation (either by having a libbitcoind.so, or by building upon the libbitcoinconsensus.so work).\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59138865,59138865,
laanwj,2014-10-15T07:29:58Z,"I feel your pain @chjj. I also tried to do this once, see #3961. Even without a stable interface there are valid use-cases for something like this. The drawback is that whatever you're developing needs to be developed in lock-step with bitcoin core's internals, but for some uses that can be acceptable.\n\nFor those uses the only feasible way right now is to manually patch bitcoind to yield a libra",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59167793,59167793,
chjj,2014-10-21T03:24:03Z,"Thanks for your sympathy, @laanwj. I really wish this wasn't seemingly dismissed so quickly. I should have figured it's been tried before. I think it can be useful anyway and isn't too intrusive to the current build even if it appears to be a step in the wrong direction at first glance. I do like the way you did it and I'm glad you learned something about libtool (meanwhile I'm still trying to fig",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59873834,59873834,
sipa,2014-10-21T07:12:48Z,Does `-rdynamic` not work?\n,https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59887958,59887958,
chjj,2014-10-21T09:47:49Z,"@sipa, apparently not on OSX. Which is why I'd like to find a sane way to build this on OSX (people I know have problems just compiling bitcoind itself on Apple machines given OSX's gigantic mess of directory structures, headers, and libraries). I imagine there will be some hurdles.\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-59903594,59903594,
laanwj,2014-11-20T15:22:01Z,"Closing this for now. bitcoinconsensus has been merged for transaction verification, and more of the consensus will be available as library over time. People that need this can find it (or use -rdynamic).\n",https://github.com/bitcoin/bitcoin/pull/5084#issuecomment-63823760,63823760,
Diapolo,2014-10-14T08:59:27Z,Nit: Year and just MIT license.\n,https://github.com/bitcoin/bitcoin/pull/5084#discussion_r18815968,18815968,src/bitcoind.h
Diapolo,2014-10-14T08:59:43Z,Nit: Remove the 1 at the end.\n,https://github.com/bitcoin/bitcoin/pull/5084#discussion_r18815978,18815978,src/bitcoind.h
Diapolo,2014-10-14T08:59:58Z,Nit: Add header end comment `// _BITCOIN_BITCOIND`.\n,https://github.com/bitcoin/bitcoin/pull/5084#discussion_r18815988,18815988,src/bitcoind.h
Diapolo,2014-10-14T09:00:46Z,Nit: Alphabetical ordering.\n,https://github.com/bitcoin/bitcoin/pull/5084#discussion_r18816025,18816025,src/bitcoind.h
Diapolo,2014-10-14T09:01:54Z,Nit: Comments from bitcoind.h also apply to this file.\n,https://github.com/bitcoin/bitcoin/pull/5084#discussion_r18816082,18816082,src/rpcwallet.h
