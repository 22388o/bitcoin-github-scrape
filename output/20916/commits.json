[
  {
    "sha": "fa0aa87071eaec8a5df17774cdb352195e5e09de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBhYTg3MDcxZWFlYzhhNWRmMTc3NzRjZGIzNTIxOTVlNWUwOWRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-07T15:47:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-12T17:43:43Z"
      },
      "message": "rpc: Return wtxid from testmempoolaccept",
      "tree": {
        "sha": "454ced6a44964dcddf0351b8558d5a676d629e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/454ced6a44964dcddf0351b8558d5a676d629e11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0aa87071eaec8a5df17774cdb352195e5e09de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUimpwv+N89okNUFDbilUWVzfEcw9cotc0UsljVznhy89FTs3rzjeNHnbh4sgU+T\nOMWJ0BiHjVAiiIWsTuHRMZJ1G/NIays2RH3eF9MkoQwxBD3jz/vashhLnoS2v6MC\ny8kCEFM/1LidPkrTWc+zgEBUm1rVIIpuv7PGVxlRvAlQn30ib6gOqPodiIQCSld2\n8h4fy7Yx3PsgV4XXSx9q0bpC2QaAbUYjQ6+yyP9kqFeBBasdued0h2M5SacjPzdU\n08JVZKu5ijCFtO/lrdx7yEBVUPaCVYMfo7jiqli+tbjEOJjdPPrKqmq6mEcxcwpo\nYZJcMp20SPrwXS0TfYzSf4Y+MAPOtdZ1LqnFNR/u3p1I9Ox770TKm2sw3OzLTGDh\n1UmvgQQZukRhRAiUYSHooZCzNu7wNEc8L0HdEGKIyMEhHHDeJ2t4084KiC43y7Fp\nCdOIgEQ1ZHzmagGczHm9hVidjfJF+u5Zpj94l2vVqIhS11KThoyXodYRvL3mUbz9\n6z+n46cX\n=Qt5Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 454ced6a44964dcddf0351b8558d5a676d629e11\nparent 6af013792f1bf85824803fc5283bf0d68a8fd080\nauthor MarcoFalke <falke.marco@gmail.com> 1610034455 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1610473423 +0100\n\nrpc: Return wtxid from testmempoolaccept\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0aa87071eaec8a5df17774cdb352195e5e09de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0aa87071eaec8a5df17774cdb352195e5e09de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0aa87071eaec8a5df17774cdb352195e5e09de/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af013792f1bf85824803fc5283bf0d68a8fd080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af013792f1bf85824803fc5283bf0d68a8fd080",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af013792f1bf85824803fc5283bf0d68a8fd080"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 48,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e94d554e3cf56209c2af73cb4faeeeb0f63153f6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aa87071eaec8a5df17774cdb352195e5e09de/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aa87071eaec8a5df17774cdb352195e5e09de/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa0aa87071eaec8a5df17774cdb352195e5e09de",
        "patch": "@@ -894,6 +894,7 @@ static RPCHelpMan testmempoolaccept()\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n+                            {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n                             {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n                             {RPCResult::Type::NUM, \"vsize\", \"Virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted (only present when 'allowed' is true)\"},\n                             {RPCResult::Type::OBJ, \"fees\", \"Transaction fees (only present if 'allowed' is true)\",\n@@ -930,7 +931,6 @@ static RPCHelpMan testmempoolaccept()\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n     }\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n \n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n@@ -942,7 +942,8 @@ static RPCHelpMan testmempoolaccept()\n \n     UniValue result(UniValue::VARR);\n     UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx_hash.GetHex());\n+    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n+    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n     TxValidationState state;\n     bool test_accept_res;"
      },
      {
        "sha": "b7c2887ee82a1d85b59c502625a9408c8293edcb",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa0aa87071eaec8a5df17774cdb352195e5e09de",
        "patch": "@@ -126,8 +126,13 @@ def run_test(self):\n         # First we show that this tx is valid except for CLTV by getting it\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n-            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': 'non-mandatory-script-verify-flag (Negative locktime)'}],\n-            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0)\n+            [{\n+                'txid': spendtx.hash,\n+                'wtxid': spendtx.getwtxid(),\n+                'allowed': False,\n+                'reject-reason': 'non-mandatory-script-verify-flag (Negative locktime)',\n+            }],\n+            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0),\n         )\n \n         # Now we verify that a block with this transaction is also invalid."
      },
      {
        "sha": "3b430139b15a9ad8d913d50c73ce97e680c4b7a3",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=fa0aa87071eaec8a5df17774cdb352195e5e09de",
        "patch": "@@ -112,8 +112,13 @@ def run_test(self):\n         # First we show that this tx is valid except for DERSIG by getting it\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n-            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': 'non-mandatory-script-verify-flag (Non-canonical DER signature)'}],\n-            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0)\n+            [{\n+                'txid': spendtx.hash,\n+                'wtxid': spendtx.getwtxid(),\n+                'allowed': False,\n+                'reject-reason': 'non-mandatory-script-verify-flag (Non-canonical DER signature)',\n+            }],\n+            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], maxfeerate=0),\n         )\n \n         # Now we verify that a block with this transaction is also invalid."
      },
      {
        "sha": "c4002f524ad73ef3a71d3d9549677b542eac99b6",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=fa0aa87071eaec8a5df17774cdb352195e5e09de",
        "patch": "@@ -51,6 +51,8 @@ def skip_test_if_missing_module(self):\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)\n+        for r in result_test:\n+            r.pop('wtxid')  # Skip check for now\n         assert_equal(result_expected, result_test)\n         assert_equal(self.nodes[0].getmempoolinfo()['size'], self.mempool_size)  # Must not change mempool state\n "
      },
      {
        "sha": "54891b07e1cea7508f81cca26d087686b531383e",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa0aa87071eaec8a5df17774cdb352195e5e09de",
        "patch": "@@ -686,13 +686,35 @@ def test_standardness_v0(self):\n         if not self.segwit_active:\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': tx3.get_vsize(), 'fees': { 'base': Decimal('0.00001000')}}])\n+            assert_equal(\n+                self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]),\n+                [{\n+                    'txid': tx3.hash,\n+                    'wtxid': tx3.getwtxid(),\n+                    'allowed': True,\n+                    'vsize': tx3.get_vsize(),\n+                    'fees': {\n+                        'base': Decimal('0.00001000'),\n+                    },\n+                }],\n+            )\n             # Create the same output as tx3, but by replacing tx\n             tx3_out = tx3.vout[0]\n             tx3 = tx\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'vsize': tx3.get_vsize(), 'fees': { 'base': Decimal('0.00011000')}}])\n+            assert_equal(\n+                self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]),\n+                [{\n+                    'txid': tx3.hash,\n+                    'wtxid': tx3.getwtxid(),\n+                    'allowed': True,\n+                    'vsize': tx3.get_vsize(),\n+                    'fees': {\n+                        'base': Decimal('0.00011000'),\n+                    },\n+                }],\n+            )\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)"
      },
      {
        "sha": "6ad4e13db28f3510e8688e329c0aac0566154cfd",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa0aa87071eaec8a5df17774cdb352195e5e09de",
        "patch": "@@ -564,6 +564,9 @@ def serialize_with_witness(self):\n     def serialize(self):\n         return self.serialize_with_witness()\n \n+    def getwtxid(self):\n+        return hash256(self.serialize())[::-1].hex()\n+\n     # Recalculate the txid (transaction hash without witness)\n     def rehash(self):\n         self.sha256 = None\n@@ -579,7 +582,7 @@ def calc_sha256(self, with_witness=False):\n \n         if self.sha256 is None:\n             self.sha256 = uint256_from_str(hash256(self.serialize_without_witness()))\n-        self.hash = encode(hash256(self.serialize_without_witness())[::-1], 'hex_codec').decode('ascii')\n+        self.hash = hash256(self.serialize_without_witness())[::-1].hex()\n \n     def is_valid(self):\n         self.calc_sha256()"
      },
      {
        "sha": "edd77926084f9e803b0fbd6a809411315f1b860d",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0aa87071eaec8a5df17774cdb352195e5e09de/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=fa0aa87071eaec8a5df17774cdb352195e5e09de",
        "patch": "@@ -76,4 +76,4 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         from_node.sendrawtransaction(tx_hex)\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fees']['base'], fee)\n-        return {'txid': tx_info['txid'], 'wtxid': from_node.decoderawtransaction(tx_hex)['hash'], 'hex': tx_hex}\n+        return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex}"
      }
    ]
  }
]