DrahtBot,2018-06-14T20:10:06Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21727 (refactor: Move more stuff to blockstorage by MarcoFalke)\n* #19521 (Coinstats Index by fjahr)\n\nIf you consider t",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397422935,397422935,
Empact,2018-06-14T21:06:35Z,Withdrawing this pending #10785. Will re-open after.,https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397438445,397438445,
sipa,2018-06-14T21:35:51Z,"@Empact #10785 is low priority, and will probably take a while. Don't let it stop you.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397446088,397446088,
Empact,2018-06-14T21:48:57Z,"Good to know, thanks.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397449076,397449076,
sipa,2018-06-14T22:15:04Z,"I don't understand ""scripted-diff: Drop SER_GETHASH""; it changes `!(s.GetType() & SER_GETHASH)` to `s.GetType()`. That means that what used to be the branch for DISK/NETWORK will end up being run just for DISK, and what used to be the branch for GETHASH will end up being run for NETWORK and GETHASH.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397454818,397454818,
Empact,2018-06-14T23:23:09Z,"@sipa `SER_NETWORK` is `(1 << 0)` i.e. `0x01`, `SER_DISK` is `(1 << 1)` i.e. `0x02`, so both will evaluate to `true`, while with `0` used where `SER_GETHASH` once was, it will evaluate to false. Note also while they're defined as flags all uses of `SER_GETHASH` are singular.\nhttps://github.com/bitcoin/bitcoin/pull/13462/files#diff-1fc2d3d7edc00ab8ea29eb1ca30cdcbbR163",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397467473,397467473,
sipa,2018-06-14T23:27:52Z,"Ah of course; I missed the `(1 << ...)` around it.\n\nThis isn't very readable code though. Would you mind keeping `SER_GETHASH` as a constant (perhaps just defined as 0), and explicit comparisons with it (rather than bit masking). That should still be a nice simplification.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397468215,397468215,
Empact,2018-06-15T00:13:43Z,"@sipa Fair enough, I dropped that commit. Def more straight-forward now.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397475480,397475480,
sipa,2018-06-15T00:24:12Z,"Thinking a bit more about this, I think you can actually go further. I believe none of the serializers which have conditionals that mention SER_GETHASH (CDiskBlockIndex, CBlockLocator, CAddress, CKeyPool, CWalletKey, CAccountingEntry, CAccount) are ever actually invoked with SER_GETHASH as nType, so we could literally delete SER_GETHASH entire and all conditions that test for it. SerializeHash cou",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397477138,397477138,
Empact,2018-06-15T00:25:12Z,@sipa Nice I'll look into that.,https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-397477329,397477329,
DrahtBot,2018-08-10T12:37:15Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 53 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-412069635,412069635,
Empact,2018-12-14T10:01:21Z,"In case the SER_GETHASH removal was complicating things, I reoriented this around simply making SER_GETHASH implicit in the obviously hash-specific contexts.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-447276061,447276061,
Empact,2020-02-29T10:34:12Z,"Rebased, refined, how about another look?",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-592930739,592930739,
Empact,2021-04-13T16:32:00Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-818875133,818875133,
laanwj,2021-04-14T12:12:47Z,"This has been open for two (almost three) years ! we probably should get to either merging it if it is worth doing, or decide not to, but not keep @Empact rebasing it forever.\n\nEdit: personally I'm not 100% convinced, I mean, yes the arguments can be elided now in some cases but does this make the code clearer than being explicit? ",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-819470595,819470595,
Empact,2021-04-14T17:39:13Z,"Hi @laanwj - I took 2020 (and then some) off, but it's good to be back at it. As you note, this is old work and may not be worthwhile but here are my thoughts:\n\nIn these contexts, `SER_GETHASH` is redundant/noise. It's a matter of interpretation whether `CHashWriter(0)` is more informative than `CHashWriter` - I tend to think it does not convey information so should be elided for readability.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-819697130,819697130,
practicalswift,2021-04-15T07:18:13Z,"Personally I don't have any strong opinions about this PR but I do have strong opinions about another thing: very glad to have you back @Empact! Warm welcome back as a contributor! :)\n\n>  I took 2020 (and then some) off, but it's good to be back at it.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-820180988,820180988,
laanwj,2021-04-19T08:00:39Z,"Yes, welcome back!\n\n> If the answer to this is ""meh,"" though, fair enough.\n\nI hope we can get some people who are more familiar with this specific code to review it.\nI mean if @sipa is okay with it we should go ahead with it.",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-822260644,822260644,
DrahtBot,2021-04-30T16:40:57Z,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/13462#issuecomment-830219079,830219079,
Empact,2018-06-13T20:55:45Z,Note this was the only call that relied on the `SerializeHash` `nVersion` default value.,https://github.com/bitcoin/bitcoin/pull/13462#discussion_r195233046,195233046,src/primitives/block.cpp
sipa,2018-06-26T23:37:47Z,"Can you use SER_NETWORK instead here? 0 is not a valid serialization type, even if it's not actually used anywhere.",https://github.com/bitcoin/bitcoin/pull/13462#discussion_r198328741,198328741,src/hash.h
Empact,2018-06-28T05:03:48Z,"Reviewing calls to `GetType` after these changes, it seems like there are only 2 calls that affect the output, both testing `GetType` for `SER_DISK` in `CAddress::SerializationOp`. Is it possible to remove those? If so we could get right of `GetType` entirely, which seems like a big win.\n\nIf not, it seems like SER_NETWORK would not cause negative effects, but it would be a bit misleading for t",https://github.com/bitcoin/bitcoin/pull/13462#discussion_r198708251,198708251,src/hash.h
Empact,2018-06-28T05:10:39Z,"Relatedly: #13558 - note that `CAddress` refers to a node network address, not a wallet address, etc.",https://github.com/bitcoin/bitcoin/pull/13462#discussion_r198708934,198708934,src/hash.h
Empact,2018-06-28T06:58:23Z,"~~As of #13560, I'm pretty confident that `GetType` can be removed across the board.~~\nSpoke too soon.",https://github.com/bitcoin/bitcoin/pull/13462#discussion_r198725245,198725245,src/hash.h
practicalswift,2018-10-23T20:13:57Z,This should be `explicit`? :-),https://github.com/bitcoin/bitcoin/pull/13462#discussion_r227546787,227546787,src/hash.h
Empact,2018-12-02T10:49:07Z,Switched to `SER_NETWORK` - it's equivalent to `0` now as only `SER_DISK` has conditional behavior associated with it.,https://github.com/bitcoin/bitcoin/pull/13462#discussion_r238093445,238093445,src/hash.h
practicalswift,2019-01-07T14:41:44Z,Should be `explicit`?,https://github.com/bitcoin/bitcoin/pull/13462#discussion_r245674807,245674807,src/hash.h
Empact,2019-01-07T19:31:48Z,"Indeed, fixed.",https://github.com/bitcoin/bitcoin/pull/13462#discussion_r245771483,245771483,src/hash.h
