[
  {
    "sha": "bb24d686500375564a2137f0940b329b6905bce6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjI0ZDY4NjUwMDM3NTU2NGEyMTM3ZjA5NDBiMzI5YjY5MDViY2U2",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-25T19:41:55Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-13T05:01:14Z"
      },
      "message": "Make CWallet::ScanForWalletTransactions args and return value const",
      "tree": {
        "sha": "d27dccfa93f179ed01088ffece0e4b9d793d9b3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d27dccfa93f179ed01088ffece0e4b9d793d9b3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb24d686500375564a2137f0940b329b6905bce6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJb6lqcAAoJEG7l83hfeLNFgtQH/Rd1yHWAchmt/KIbio1lZ4R8\npdcwIUTVoK71Xp30iEJYR5lrZZC/fzQHM1UhLQZF02ALPs7U9/qT3bMcCHw7VlMJ\n2AVMY7W2+a7jUK6ydV9sWvslRmRHpm/MEx8esm83LscQJpT2p8imG61VRC3NN/ag\nolG5EJSebUuCY7U50BpW29OLHTq/cXKZsdCgKv5VOSiq6QnS/COr6CoIJu+63YBe\ncjKuPebxjQPnK5vNIyM1A0jhJL8x4K/8JBprCsHD5xpjuQ0LNvKXCiiV5zU/558l\nJibhlQcvbhz5qDhHcx6VTG7jrRxqohPLTtgApheHeJ7DWUCnvSrViC7RpN78/+g=\n=DPyH\n-----END PGP SIGNATURE-----",
        "payload": "tree d27dccfa93f179ed01088ffece0e4b9d793d9b3d\nparent 47ed24cf8aa7be3b778731b1f140ad9941157933\nauthor Ben Woosley <ben.woosley@gmail.com> 1524685315 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1542085274 -0500\n\nMake CWallet::ScanForWalletTransactions args and return value const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb24d686500375564a2137f0940b329b6905bce6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb24d686500375564a2137f0940b329b6905bce6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb24d686500375564a2137f0940b329b6905bce6/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47ed24cf8aa7be3b778731b1f140ad9941157933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ed24cf8aa7be3b778731b1f140ad9941157933",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47ed24cf8aa7be3b778731b1f140ad9941157933"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1514c978b87e55dd9329163262c0da7ad5a36cde",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb24d686500375564a2137f0940b329b6905bce6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb24d686500375564a2137f0940b329b6905bce6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bb24d686500375564a2137f0940b329b6905bce6",
        "patch": "@@ -3332,7 +3332,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n     }\n \n-    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n+    const CBlockIndex* stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n     if (!stopBlock) {\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");"
      },
      {
        "sha": "0e135d978d1d58ad4a540683d63d4f11a34acf2d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb24d686500375564a2137f0940b329b6905bce6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb24d686500375564a2137f0940b329b6905bce6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb24d686500375564a2137f0940b329b6905bce6",
        "patch": "@@ -1637,7 +1637,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n@@ -1647,8 +1647,8 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n         assert(pindexStop->nHeight >= pindexStart->nHeight);\n     }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    const CBlockIndex* pindex = pindexStart;\n+    const CBlockIndex* ret = nullptr;\n \n     if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n "
      },
      {
        "sha": "dcd1ee687be319fc8d6029f75f85838ff79bae54",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb24d686500375564a2137f0940b329b6905bce6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb24d686500375564a2137f0940b329b6905bce6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bb24d686500375564a2137f0940b329b6905bce6",
        "patch": "@@ -896,7 +896,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n+    const CBlockIndex* ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "3002d6cf31821622e9f21d51e536cafc5cfb10ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDAyZDZjZjMxODIxNjIyZTlmMjFkNTFlNTM2Y2FmYzVjZmIxMGFl",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-04-29T15:45:44Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-13T05:04:13Z"
      },
      "message": "Return a status enum from ScanForWalletTransactions\n\nReturn the failed block as an out var.\n\nThis clarifies the outcome as the prior return value could\nbe null due to user abort or failure.",
      "tree": {
        "sha": "a0831d207b5ca61d08285ac71212929817e5d8d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0831d207b5ca61d08285ac71212929817e5d8d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3002d6cf31821622e9f21d51e536cafc5cfb10ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJb6ltOAAoJEG7l83hfeLNFpAwH/0Au+JFyV8MvzclVhMWkGbyu\n5otGAOgfkUg5kYTfm9BjuwYXl5sy2Sda6c/Nd6stlfiIzPWF6XQaP1kZHCOMT5l2\nIV1k9MxIRcMXqjpb/WMi2Q4U00FIuUWve3KEXP99jmI+OD2jEaqW+YX2scKWz5f1\no9nOaMUIG50oRvr4Wy+PUaLg3YZOttHgLTr4d+MCwfUYx04p5yjFkqpBom9bGqAi\nJcKPsqW+RzMHW8ctUuoHH6xdYog+xJM2xy1ER1QsbXiRcw+icoAxa+fFzdr81w8r\nAEqg7udhBjVtBxexYTiPI3EsFoW5Lng7p/aBkUw6FFmSvXgpsytVwdk4a+0dp1s=\n=DhSF\n-----END PGP SIGNATURE-----",
        "payload": "tree a0831d207b5ca61d08285ac71212929817e5d8d4\nparent bb24d686500375564a2137f0940b329b6905bce6\nauthor Ben Woosley <ben.woosley@gmail.com> 1525016744 +0000\ncommitter Ben Woosley <ben.woosley@gmail.com> 1542085453 -0500\n\nReturn a status enum from ScanForWalletTransactions\n\nReturn the failed block as an out var.\n\nThis clarifies the outcome as the prior return value could\nbe null due to user abort or failure.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3002d6cf31821622e9f21d51e536cafc5cfb10ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3002d6cf31821622e9f21d51e536cafc5cfb10ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3002d6cf31821622e9f21d51e536cafc5cfb10ae/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb24d686500375564a2137f0940b329b6905bce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb24d686500375564a2137f0940b329b6905bce6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb24d686500375564a2137f0940b329b6905bce6"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 68,
      "deletions": 32
    },
    "files": [
      {
        "sha": "5646070a3ff2914d7916bc093359962ab63ad5f1",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "patch": "@@ -146,7 +146,12 @@ void TestGUI()\n         auto locked_chain = wallet->chain().lock();\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, true);\n+        const CBlockIndex* const null_block = nullptr;\n+        const CBlockIndex* stop_block;\n+        QCOMPARE(\n+            wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, stop_block, true /* fUpdate */),\n+            CWallet::ScanResult::SUCCESS);\n+        QCOMPARE(stop_block, null_block);\n     }\n     wallet->SetBroadcastTransactions(true);\n "
      },
      {
        "sha": "182571b00410656eb6cab0ee7ce68efdd662e0da",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "patch": "@@ -15,9 +15,17 @@\n #include <txmempool.h>\n \n #include <memory>\n+#include <type_traits>\n \n #include <boost/thread.hpp>\n \n+// Enable BOOST_CHECK_EQUAL for enum class types\n+template <typename T>\n+std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::ostream>::type& stream, const T& e)\n+{\n+    return stream << static_cast<typename std::underlying_type<T>::type>(e);\n+}\n+\n extern uint256 insecure_rand_seed;\n extern FastRandomContext insecure_rand_ctx;\n "
      },
      {
        "sha": "c3f12f373d8f94aacc30c1b3e982d69f73541346",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "patch": "@@ -3332,16 +3332,18 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n     }\n \n-    const CBlockIndex* stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n-    if (!stopBlock) {\n-        if (pwallet->IsAbortingRescan()) {\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n-        }\n-        // if we got a nullptr returned, ScanForWalletTransactions did rescan up to the requested stopindex\n+    const CBlockIndex* stopBlock;\n+    CWallet::ScanResult result =\n+        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, stopBlock, true);\n+    switch (result) {\n+    case CWallet::ScanResult::SUCCESS:\n         stopBlock = pindexStop ? pindexStop : pChainTip;\n-    }\n-    else {\n+        break;\n+    case CWallet::ScanResult::FAILURE:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n+    case CWallet::ScanResult::USER_ABORT:\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n+        // no default case, so the compiler can warn about missing cases\n     }\n     UniValue response(UniValue::VOBJ);\n     response.pushKV(\"start_height\", pindexStart->nHeight);"
      },
      {
        "sha": "dccda1acf1b336716533ded63b98ccafb7d8cefb",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "patch": "@@ -38,7 +38,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     auto chain = interfaces::MakeChain();\n \n     // Cap last block file size, and mine new block in a new block file.\n-    CBlockIndex* const nullBlock = nullptr;\n+    const CBlockIndex* const null_block = nullptr;\n     CBlockIndex* oldTip = chainActive.Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n@@ -53,7 +53,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n+        const CBlockIndex* stop_block;\n+        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, stop_block), CWallet::ScanResult::SUCCESS);\n+        BOOST_CHECK_EQUAL(stop_block, null_block);\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -68,7 +70,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n+        const CBlockIndex* stop_block;\n+        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, stop_block), CWallet::ScanResult::FAILURE);\n+        BOOST_CHECK_EQUAL(oldTip, stop_block);\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n@@ -286,7 +290,10 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         AddKey(*wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver);\n+        const CBlockIndex* const null_block = nullptr;\n+        const CBlockIndex* stop_block;\n+        BOOST_CHECK_EQUAL(wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, stop_block), CWallet::ScanResult::SUCCESS);\n+        BOOST_CHECK_EQUAL(stop_block, null_block);\n     }\n \n     ~ListCoinsTestingSetup()"
      },
      {
        "sha": "28ee32b128bb63583ba635af00ca0fc1a3da4a00",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 18,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "patch": "@@ -1613,8 +1613,9 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     }\n \n     if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n-        if (failedBlock) {\n+        const CBlockIndex* failedBlock;\n+        // TODO: this should take into account failure by ScanResult::USER_ABORT\n+        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, update)) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n     }\n@@ -1626,18 +1627,20 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * Returns null if scan was successful. Otherwise, if a complete rescan was not\n- * possible (due to pruning or corruption), returns pointer to the most recent\n- * block that could not be scanned.\n+ * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n+ * @param[out] failed_block if FAILURE is returned, will be set to the most\n+ *    recent block that could not be scanned, otherwise nullptr\n  *\n- * If pindexStop is not a nullptr, the scan will stop at the block-index\n- * defined by pindexStop\n+ * @return ScanResult indicating success or failure of the scan. SUCCESS if\n+ * scan was successful. FAILURE if a complete rescan was not possible (due to\n+ * pruning or corruption). USER_ABORT if the rescan was aborted before it\n+ * could complete.\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n@@ -1648,7 +1651,7 @@ const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* const p\n     }\n \n     const CBlockIndex* pindex = pindexStart;\n-    const CBlockIndex* ret = nullptr;\n+    failed_block = nullptr;\n \n     if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n \n@@ -1669,8 +1672,7 @@ const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* const p\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested())\n-        {\n+        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n             if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n@@ -1686,14 +1688,14 @@ const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* const p\n                 if (pindex && !chainActive.Contains(pindex)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    ret = pindex;\n+                    failed_block = pindex;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                     SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n             } else {\n-                ret = pindex;\n+                failed_block = pindex;\n             }\n             if (pindex == pindexStop) {\n                 break;\n@@ -1709,14 +1711,20 @@ const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* const p\n                 }\n             }\n         }\n+        ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n         if (pindex && fAbortRescan) {\n             WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+            return ScanResult::USER_ABORT;\n         } else if (pindex && ShutdownRequested()) {\n             WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+            return ScanResult::USER_ABORT;\n         }\n-        ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n     }\n-    return ret;\n+    if (failed_block) {\n+        return ScanResult::FAILURE;\n+    } else {\n+        return ScanResult::SUCCESS;\n+    }\n }\n \n void CWallet::ReacceptWalletTransactions()\n@@ -4166,11 +4174,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         nStart = GetTimeMillis();\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n-            if (!reserver.reserve()) {\n+            const CBlockIndex* stop_block;\n+            if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, stop_block, true))) {\n                 InitError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n             }\n-            walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, true);\n         }\n         walletInstance->WalletLogPrintf(\"Rescan completed in %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->ChainStateFlushed(chainActive.GetLocator());"
      },
      {
        "sha": "08184bdc22d473a8d3905af16a8fbcce23975e34",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002d6cf31821622e9f21d51e536cafc5cfb10ae/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "patch": "@@ -896,7 +896,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n-    const CBlockIndex* ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n+\n+    enum class ScanResult {\n+        SUCCESS,\n+        FAILURE,\n+        USER_ABORT\n+    };\n+    ScanResult ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "bd3b0361d840bff95988a048abf70ade94d80524",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDNiMDM2MWQ4NDBiZmY5NTk4OGEwNDhhYmY3MGFkZTk0ZDgwNTI0",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-13T04:57:10Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-13T17:51:16Z"
      },
      "message": "Add stop_block out arg to ScanForWalletTransactions\n\nAccurately reports the last block successfully scanned, replacing a return of\nthe chain tip, which represented possibly inaccurated data in a race condition.",
      "tree": {
        "sha": "4c542682c6aac615aa2cc1760fef4faba7195d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c542682c6aac615aa2cc1760fef4faba7195d52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd3b0361d840bff95988a048abf70ade94d80524",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJb6w8WAAoJEG7l83hfeLNF1DYH/2OzW+A+JZ0XkYFNKULysxXQ\nY46uC716I4EbdjLCfbZXE+/7ItAzd16Ic5ffEPzfJ4Uq9EXWtWHeftajqGl35F1D\nSGSORZZ865OrkpOzgdxOYiv0Peh4fN1NCgY0KU3xdVmWpjyPGh097VkW9ovAsXhX\n+/VE0aWiMtLEScjshfn8y5UkBVKwA3mpAYx5M2HtCHXtdaVi93CQmSIn8erDn4zU\ndg7knA7JxYv7UoD6pA8U4Lb7bYXzQQJ1xHfbantYl6m6EnklmmMNH36P74NcHAB6\nl6PQkZ+CzKPjmhNAR8vtlJeLXeLBnYYJmxBwY+WpR+KpqtJyyXj5Q2vItnRoncg=\n=sZUb\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c542682c6aac615aa2cc1760fef4faba7195d52\nparent 3002d6cf31821622e9f21d51e536cafc5cfb10ae\nauthor Ben Woosley <ben.woosley@gmail.com> 1542085030 +0000\ncommitter Ben Woosley <ben.woosley@gmail.com> 1542131476 -0500\n\nAdd stop_block out arg to ScanForWalletTransactions\n\nAccurately reports the last block successfully scanned, replacing a return of\nthe chain tip, which represented possibly inaccurated data in a race condition.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd3b0361d840bff95988a048abf70ade94d80524",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd3b0361d840bff95988a048abf70ade94d80524",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd3b0361d840bff95988a048abf70ade94d80524/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3002d6cf31821622e9f21d51e536cafc5cfb10ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3002d6cf31821622e9f21d51e536cafc5cfb10ae"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 32,
      "deletions": 24
    },
    "files": [
      {
        "sha": "610d83acb6fb967a8d57eca8b52e1582bf23d0e4",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd3b0361d840bff95988a048abf70ade94d80524/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd3b0361d840bff95988a048abf70ade94d80524/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=bd3b0361d840bff95988a048abf70ade94d80524",
        "patch": "@@ -147,11 +147,12 @@ void TestGUI()\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n         const CBlockIndex* const null_block = nullptr;\n-        const CBlockIndex* stop_block;\n+        const CBlockIndex *stop_block, *failed_block;\n         QCOMPARE(\n-            wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, stop_block, true /* fUpdate */),\n+            wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, failed_block, stop_block, true /* fUpdate */),\n             CWallet::ScanResult::SUCCESS);\n-        QCOMPARE(stop_block, null_block);\n+        QCOMPARE(stop_block, chainActive.Tip());\n+        QCOMPARE(failed_block, null_block);\n     }\n     wallet->SetBroadcastTransactions(true);\n "
      },
      {
        "sha": "3c92eb31204c83d96cceef29ca5572fc8dc3114f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bd3b0361d840bff95988a048abf70ade94d80524",
        "patch": "@@ -3332,13 +3332,12 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n     }\n \n-    const CBlockIndex* stopBlock;\n+    const CBlockIndex *failed_block, *stopBlock;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, stopBlock, true);\n+        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n     switch (result) {\n     case CWallet::ScanResult::SUCCESS:\n-        stopBlock = pindexStop ? pindexStop : pChainTip;\n-        break;\n+        break; // stopBlock set by ScanForWalletTransactions\n     case CWallet::ScanResult::FAILURE:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n     case CWallet::ScanResult::USER_ABORT:"
      },
      {
        "sha": "46d9b5b23831338b5296070ad10ec7829d747522",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=bd3b0361d840bff95988a048abf70ade94d80524",
        "patch": "@@ -53,9 +53,10 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        const CBlockIndex* stop_block;\n-        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, stop_block), CWallet::ScanResult::SUCCESS);\n-        BOOST_CHECK_EQUAL(stop_block, null_block);\n+        const CBlockIndex *stop_block, *failed_block;\n+        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::SUCCESS);\n+        BOOST_CHECK_EQUAL(failed_block, null_block);\n+        BOOST_CHECK_EQUAL(stop_block, newTip);\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -70,9 +71,10 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        const CBlockIndex* stop_block;\n-        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, stop_block), CWallet::ScanResult::FAILURE);\n-        BOOST_CHECK_EQUAL(oldTip, stop_block);\n+        const CBlockIndex *stop_block, *failed_block;\n+        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::FAILURE);\n+        BOOST_CHECK_EQUAL(failed_block, oldTip);\n+        BOOST_CHECK_EQUAL(stop_block, newTip);\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n@@ -291,9 +293,10 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n         const CBlockIndex* const null_block = nullptr;\n-        const CBlockIndex* stop_block;\n-        BOOST_CHECK_EQUAL(wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, stop_block), CWallet::ScanResult::SUCCESS);\n-        BOOST_CHECK_EQUAL(stop_block, null_block);\n+        const CBlockIndex *stop_block, *failed_block;\n+        BOOST_CHECK_EQUAL(wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::SUCCESS);\n+        BOOST_CHECK_EQUAL(stop_block, chainActive.Tip());\n+        BOOST_CHECK_EQUAL(failed_block, null_block);\n     }\n \n     ~ListCoinsTestingSetup()"
      },
      {
        "sha": "3c25a67fd14843c7ef1573370f05cd5fa6ee0105",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bd3b0361d840bff95988a048abf70ade94d80524",
        "patch": "@@ -1613,9 +1613,9 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     }\n \n     if (startBlock) {\n-        const CBlockIndex* failedBlock;\n+        const CBlockIndex *failedBlock, *stop_block;\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, update)) {\n+        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n     }\n@@ -1628,8 +1628,10 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * exist in the wallet will be updated.\n  *\n  * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, will be set to the most\n- *    recent block that could not be scanned, otherwise nullptr\n+ * @param[out] failed_block if FAILURE is returned, the most recent block\n+ *     that could not be scanned, otherwise nullptr\n+ * @param[out] stop_block the most recent block that could be scanned,\n+ *     otherwise nullptr if no block could be scanned\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if\n  * scan was successful. FAILURE if a complete rescan was not possible (due to\n@@ -1640,7 +1642,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n@@ -1694,7 +1696,10 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                     SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n+                // scan succeeded, record block as most recent successfully scanned\n+                stop_block = pindex;\n             } else {\n+                // could not scan block, keep scanning but record this block as the most recent failure\n                 failed_block = pindex;\n             }\n             if (pindex == pindexStop) {\n@@ -4174,8 +4179,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         nStart = GetTimeMillis();\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n-            const CBlockIndex* stop_block;\n-            if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, stop_block, true))) {\n+            const CBlockIndex *stop_block, *failed_block;\n+            if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, failed_block, stop_block, true))) {\n                 InitError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n             }"
      },
      {
        "sha": "5ba5514fc2b9d31a98324a27c10e8f31510fc258",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd3b0361d840bff95988a048abf70ade94d80524/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bd3b0361d840bff95988a048abf70ade94d80524",
        "patch": "@@ -902,7 +902,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         FAILURE,\n         USER_ABORT\n     };\n-    ScanResult ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, bool fUpdate = false);\n+    ScanResult ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  }
]