Empact,2018-04-30T14:56:45Z,Dropped explicit values and type from `ScanResult` enum.,https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-385424120,385424120,
Empact,2018-05-03T17:27:51Z,Rebased and updated to accommodate #12507.,https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-386373196,386373196,
Empact,2018-05-18T20:39:55Z,Rebased and moved the shutdown / abort handling inline.,https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-390325991,390325991,
DrahtBot,2018-07-29T15:16:54Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14711](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14711.html) (Remove uses of chainActive and mapBlockInde",https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-408684612,408684612,
Empact,2018-11-07T19:51:50Z,"Rebased. @MarcoFalke could you remove ""Up for grabs""?",https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-436755220,436755220,
meshcollider,2018-11-11T13:54:27Z,"Concept ACK / light-utACK https://github.com/bitcoin/bitcoin/pull/13076/commits/b52abc7164ba6403124e409af2e3ee2e2dad7f24\n\nI agree with Marco that returning the last successful block is probably a good idea, but with that and the other comments, at least this doesn't appear to make things worse, so it could be addressed in follow-ups if not here :)",https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-437672072,437672072,
ryanofsky,2018-11-11T17:12:12Z,"> I agree with Marco that returning the last successful block is probably a good idea\n\nReturning the last failed block instead of the last successful block is needed for importmulti. Importmulti uses the last failed block to return success for keys with birthdays after that block, and failures for keys with older birthdays.\n\nI tried to clarify this in #12275 by returning both values (`last",https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-437687206,437687206,
meshcollider,2018-11-12T00:02:04Z,"@ryanofsky I think I mis-explained, I mean in the case of success - the failure case behaviour should remain unchanged",https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-437718184,437718184,
Empact,2018-11-13T10:25:41Z,@MarcoFalke see the stop_block commit above. Any idea where the test failures are coming from? I donâ€™t see the connection.,https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-438214691,438214691,
jonasschnelli,2018-12-11T19:04:17Z,utACK bd3b0361d840bff95988a048abf70ade94d80524,https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-446321844,446321844,
MarcoFalke,2018-12-11T19:41:15Z,utACK bd3b0361d8,https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-446334894,446334894,
meshcollider,2018-12-12T05:00:05Z,utACK https://github.com/bitcoin/bitcoin/pull/13076/commits/bd3b0361d840bff95988a048abf70ade94d80524,https://github.com/bitcoin/bitcoin/pull/13076#issuecomment-446462701,446462701,
Empact,2018-04-25T20:37:14Z,"Note I added the failure height here. Happy to remove, but I assume it could be helpful.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184197927,184197927,src/wallet/rpcwallet.cpp
Empact,2018-04-25T20:38:19Z,"Note this did not previously fail when ScanForWalletTransactions failed, so this removes a silent failure.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184198224,184198224,src/wallet/wallet.cpp
Empact,2018-04-25T21:14:19Z,"Alternatively, this could be `(!pindex && !failed_block)`",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184207815,184207815,src/wallet/wallet.cpp
ryanofsky,2018-04-26T00:17:38Z,"I think you might want to drop this line and just return true here, to fix the regression described here: https://github.com/bitcoin/bitcoin/pull/12275#issuecomment-360864576.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184241541,184241541,src/wallet/wallet.cpp
jonasschnelli,2018-04-26T07:43:41Z,"Not sure if in this PR, but would it make sense to just return an `enum` to better distinct between `fail`, `ok` and `user-aborted`?",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184296308,184296308,src/wallet/wallet.cpp
promag,2018-04-26T09:23:11Z,*Output* arguments could be last?,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184324009,184324009,src/wallet/wallet.cpp
promag,2018-04-26T09:25:56Z,"Could be done here IMO, not a big change and would be a lot better IMO.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184324842,184324842,src/wallet/wallet.cpp
promag,2018-04-26T09:28:55Z,Could assert return value and `stop_block` value?,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184325684,184325684,src/qt/test/wallettests.cpp
promag,2018-04-26T09:33:12Z,I think this is ok. This just adds another case where `walletInstance` is leaked on error.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184326932,184326932,src/wallet/wallet.cpp
Empact,2018-04-26T14:40:58Z,Should we be switching `walletInstance` to RAII then?,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184414467,184414467,src/wallet/wallet.cpp
promag,2018-04-26T14:47:46Z,@Empact done in #13063.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184416962,184416962,src/wallet/wallet.cpp
Empact,2018-04-29T16:11:35Z,"Not sure about that - my inclination is to maintain stricter checking at the risk of spurious failures over less strict checking at the risk of silent failure. How about opening a separate PR for that so it can be considered separately?\n",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184887895,184887895,src/wallet/wallet.cpp
Empact,2018-04-29T16:31:54Z,I'll address this todo in a follow-up.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184888349,184888349,src/wallet/wallet.cpp
Empact,2018-04-29T16:32:09Z,Updated to return an enum.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184888353,184888353,src/wallet/wallet.cpp
Empact,2018-04-30T05:29:22Z,Made it second-to-last due to default value for update arg.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184913248,184913248,src/wallet/wallet.cpp
jonasschnelli,2018-04-30T12:09:57Z,"nit: not sure if SUCCESS should use a non C-ish, non null positive value (1 probably)",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184969265,184969265,src/wallet/wallet.h
MarcoFalke,2018-04-30T12:29:54Z,note that there is no need for an `enum class` to derive from int or even specify values for the members.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r184973014,184973014,src/wallet/wallet.h
MarcoFalke,2018-11-05T21:39:41Z,"Should remove the default case, so instead of a runtime-error the compiler can warn about missing cases.\n```suggestion\n        // no default case, so the compiler can warn about missing cases\n```",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r230922658,230922658,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-07T20:18:00Z,"nit: No need to initialize a return value. In fact this might look like you are passing in something.\n\nAlso could inline nullptr for null_block below for brevity.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r231662215,231662215,src/qt/test/wallettests.cpp
MarcoFalke,2018-11-07T20:19:02Z,nit: No need to initialize a return value. In fact this might look like you are passing in something.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r231662560,231662560,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-07T20:23:21Z,Why are you overriding the return value?,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r231663814,231663814,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-07T20:25:05Z,"pIndexStop was nullptr, so this should be tip instead?",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r231664323,231664323,src/wallet/test/wallet_tests.cpp
MarcoFalke,2018-11-07T20:26:13Z,Should be tip instead of null_block?,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r231664619,231664619,src/wallet/test/wallet_tests.cpp
MarcoFalke,2018-11-07T20:34:23Z,"nit: could return `last_block`, which will either be ""the most recent block that could not be scanned"" (failure/abort) or ""pindexStop/::chainActive.Tip()"" (success)",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r231666975,231666975,src/wallet/wallet.cpp
Empact,2018-11-08T21:14:50Z,This has been the behavior since the rpc's introduction in c77170fbdb,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232062789,232062789,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-08T21:26:26Z,Which doesn't mean it is correct. (The tip can change when you don't hold cs_main),https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232066384,232066384,src/wallet/rpcwallet.cpp
Empact,2018-11-08T21:27:46Z,"Buf if we switch to returning the last block in `stopBlock` on success, this replacement won't be necessary.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232066868,232066868,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-08T21:27:46Z,"Since you rework what the function returns, you might as well make it return the last successfully scanned block.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232066870,232066870,src/wallet/rpcwallet.cpp
MarcoFalke,2018-11-09T21:11:03Z,I can pick this up and address my feedback middle of next week. (Let me know if you are currently busy or want to take a stab at this.),https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232394798,232394798,src/wallet/rpcwallet.cpp
meshcollider,2018-11-11T13:49:54Z,"@MarcoFalke `stop_block` is only set if the scan failed, it isn't set to tip if the scan succeeds",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232488701,232488701,src/wallet/test/wallet_tests.cpp
meshcollider,2018-11-11T13:50:29Z,Same here as the other case :),https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232488725,232488725,src/wallet/test/wallet_tests.cpp
Empact,2018-11-13T00:09:04Z,"Removed the initialization of the out var, though this required setting the out var to null in the method for consistent behavior under test. Seems like a good change to me as this seems more predictable.\n\nCan't inline the `null_block` vars as that results in template ambiguity around `<ostream, nullptr_t>`",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232854808,232854808,src/qt/test/wallettests.cpp
Empact,2018-11-13T05:58:06Z,"Follow-up is here, I'll wait to open until this is accepted:\nhttps://github.com/Empact/bitcoin/tree/rescan-from-time",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r232905965,232905965,src/wallet/wallet.cpp
MarcoFalke,2018-11-13T17:00:09Z,"Travis failure:\n\n```\n********* Start testing of WalletTests *********\nConfig: Using QtTest library 5.9.6, Qt 5.9.6 (i386-little_endian-ilp32 static release build; by GCC 7.3.0)\nPASS   : WalletTests::initTestCase()\nFAIL!  : WalletTests::walletTests() Compared pointers are not the same\n   Loc: [qt/test/wallettests.cpp(154)]\nPASS   : WalletTests::cleanupTestCase()\nTotals: 2 passed, ",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r233134556,233134556,src/qt/test/wallettests.cpp
Empact,2018-11-13T22:53:32Z,Thanks! Solved.,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r233254604,233254604,src/qt/test/wallettests.cpp
ryanofsky,2018-12-13T21:21:44Z,"Code is not setting `stop_block` null here, which seems unintended and could lead to uninitialized variables. Would be good to fix this or add documentation if it was done intentionally.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r241565738,241565738,src/wallet/wallet.cpp
Empact,2018-12-14T06:09:52Z,#14942,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r241652030,241652030,src/wallet/wallet.cpp
Empact,2018-12-14T07:15:22Z,"Ah, right, the code does contradict the comments on line 1634. Will open a PR.",https://github.com/bitcoin/bitcoin/pull/13076#discussion_r241660906,241660906,src/wallet/wallet.cpp
Empact,2018-12-14T07:25:53Z,#14957,https://github.com/bitcoin/bitcoin/pull/13076#discussion_r241662607,241662607,src/wallet/wallet.cpp
