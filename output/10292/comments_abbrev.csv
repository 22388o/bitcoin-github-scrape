mm-s,2017-04-28T08:44:09Z,"Fixed both suggestions. @dcousens & @kallewoof,\nalthough I'd like to state my opinion on these reviews:\n1.- ""In"" suffix does not add any value and makes the sentence more verbose and, in my opinion, less readable. \n2.- Consistency rules often carry problems related to lack of diversity.\n\nThanks\n",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-297943044,297943044,
kallewoof,2017-04-28T15:02:45Z,I would argue that foo(foo) is less ambiguous despite semantic equivalence. It's also the standard that's been adhered to in the code thus far so it'd require some amount of merit to break.,https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298022486,298022486,
mm-s,2017-04-28T15:29:55Z,"it is just that c(p):p(p) is a better abstraction than c(pIn):p(pIn) since In does not add any meaning to the code, apart from remarking that it is an input parameter which is obvious.",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298029767,298029767,
kallewoof,2017-04-28T15:41:55Z,"That's all fine and dandy until you start doing things like\n```C++\nclass foo {\n    int x;\n    foo(int x) { x = x * 48; } \n};\n```\nwhich, crazy as it may seem, is not very far away from your suggestion.",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298032813,298032813,
JeremyRubin,2017-04-28T20:43:02Z,"Weak Concept Ack.\n\nMost likely this gets inlined and optimized out so this shouldn't impact the generated code?\n\nIf that isn't the case, I have a slight preference to make this happen by exposing an uninitialized constructor for uin256_t and then calling SetNull. ",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298101852,298101852,
mm-s,2017-04-30T18:40:11Z,"@JeremyRubin Not easy decision: The default constructor is reseting to 0, adding a constructor that leaves the object uninitalized looks like having an ugly prototype; on the other hand changing the behavior by leaving the object uninitalized in the default constructor and adding another constructor accepting a uint8[]  looks like it is the right design, but at this point it may confuse to whom is",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298249116,298249116,
JeremyRubin,2017-05-01T05:40:44Z,"I'm not suggesting that it has to/should be the default constructor.\n\nAlso the main part is that this likely does not impact the actual code generated; you should try outputting optimized assembly for \n```c++\n#include <memory>\nint main() {\n    char x[32];\n    memset((void*)*x, 0, 32);\n}\n```\n\nand \n```c++\n#include <memory>\nint main() {\n    char x[32];\n    memset((void",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298289499,298289499,
sipa,2017-05-01T05:46:35Z,@JeremyRubin Also when the code is split over different modules?,https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298289946,298289946,
mm-s,2017-05-01T12:09:08Z,"@JeremyRubin The compiler can resolve programmer's errors automatically, but it is preferably to have the high level code well designed before the optimizer checks ; with so many compiler vendors , so many flags and so many archs out there you can never say for sure the compiler will end up optimizing.\nAlso i commented on the possibility of not using the default constructor, and seemed to me ugl",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298324696,298324696,
JeremyRubin,2017-05-01T16:49:31Z,"@sipa I think the memset occurs in the header so it's my understanding it would be inlined.\n\nedit: notice that memset is defined in a different header in my example.\n\n@mm-s while this is true, your PR is not fixing an error it is an optimization, which introduces a dependency on the 0 initialization of uint256 that might introduce bugs later. Perhaps one easy way is:\n```c++\nclass X {\",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298371882,298371882,
sipa,2017-05-01T23:31:23Z,"utACK 4fbae77929e6344bc49ab60af10a9c5ff21d2cdf\n\nI think this change is perfectly reasonable. There is a slight duplication between the SetNull function and the constructor, but it comes at almost no extra complexity. Please let's not introduce explicit non-initializing constructors.",https://github.com/bitcoin/bitcoin/pull/10292#issuecomment-298459838,298459838,
kallewoof,2017-04-28T08:10:37Z,"Can you leave the names as `hashIn` and `nIn` so we don't get `hash(hash), n(n)`?",https://github.com/bitcoin/bitcoin/pull/10292#discussion_r113875385,113875385,src/primitives/transaction.h
dcousens,2017-04-28T08:24:17Z,"Inconsistent spacing, `n((uint32_t) -1)` is fine",https://github.com/bitcoin/bitcoin/pull/10292#discussion_r113877601,113877601,src/primitives/transaction.h
