[
  {
    "sha": "e254ff5d53b79bee29203b965fca572f218bff54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjU0ZmY1ZDUzYjc5YmVlMjkyMDNiOTY1ZmNhNTcyZjIxOGJmZjU0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2018-08-07T20:37:45Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2018-08-09T20:54:01Z"
      },
      "message": "Introduce a maximum size for locators.\n\nThe largest sensible size for a locator is log in the number of blocks.\n But, as noted by Coinr8d on BCT a maximum size message could encode a\n hundred thousand locators.  If height were used to limit the messages\n that could open new attacks where peers on long low diff forks would\n get disconnected and end up stuck.\n\nIdeally, nodes first first learn to limit the size of locators they\n send before limiting what would be processed, but common implementations\n back off with an exponent of 2 and have an implicit limit of 2^32\n blocks, so they already cannot produce locators over some size.\n\nThis sets the limit to an absurdly high amount of 101 in order to\n maximize compatibility with existing software.",
      "tree": {
        "sha": "f4292a9196aa3c08945fae5d66fbb761a5d3c2a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4292a9196aa3c08945fae5d66fbb761a5d3c2a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e254ff5d53b79bee29203b965fca572f218bff54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e254ff5d53b79bee29203b965fca572f218bff54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e254ff5d53b79bee29203b965fca572f218bff54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e254ff5d53b79bee29203b965fca572f218bff54/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d86aad287f07e20066138b9f909758ad7a2e098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d86aad287f07e20066138b9f909758ad7a2e098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d86aad287f07e20066138b9f909758ad7a2e098"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f242f4955f18ae3dd16b19aaca013b7b1afe90b0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e254ff5d53b79bee29203b965fca572f218bff54/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e254ff5d53b79bee29203b965fca572f218bff54/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e254ff5d53b79bee29203b965fca572f218bff54",
        "patch": "@@ -45,6 +45,8 @@ static const int TIMEOUT_INTERVAL = 20 * 60;\n static const int FEELER_INTERVAL = 120;\n /** The maximum number of entries in an 'inv' protocol message */\n static const unsigned int MAX_INV_SZ = 50000;\n+/** The maximum number of entries in a locator */\n+static const unsigned int MAX_LOCATOR_SZ = 101;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */"
      },
      {
        "sha": "eaa2fb3dfdb2bd7bd84522d012fa3cc25da51ebc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e254ff5d53b79bee29203b965fca572f218bff54/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e254ff5d53b79bee29203b965fca572f218bff54/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e254ff5d53b79bee29203b965fca572f218bff54",
        "patch": "@@ -2018,6 +2018,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n \n+        if (locator.vHave.size() > MAX_LOCATOR_SZ) {\n+            LogPrint(BCLog::NET, \"getblocks locator size %lld > %d, disconnect peer=%d\\n\", locator.vHave.size(), MAX_LOCATOR_SZ, pfrom->GetId());\n+            pfrom->fDisconnect = true;\n+            return true;\n+        }\n+\n         // We might have announced the currently-being-connected tip using a\n         // compact block, which resulted in the peer sending a getblocks\n         // request, which we would otherwise respond to without the new block.\n@@ -2131,6 +2137,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n \n+        if (locator.vHave.size() > MAX_LOCATOR_SZ) {\n+            LogPrint(BCLog::NET, \"getheaders locator size %lld > %d, disconnect peer=%d\\n\", locator.vHave.size(), MAX_LOCATOR_SZ, pfrom->GetId());\n+            pfrom->fDisconnect = true;\n+            return true;\n+        }\n+\n         LOCK(cs_main);\n         if (IsInitialBlockDownload() && !pfrom->fWhitelisted) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom->GetId());"
      }
    ]
  }
]