[
  {
    "sha": "e2a47ce08528dfb39c0340145c6977f6afd587f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmE0N2NlMDg1MjhkZmIzOWMwMzQwMTQ1YzY5NzdmNmFmZDU4N2Y2",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-12-18T16:45:11Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2021-05-19T06:50:16Z"
      },
      "message": "refactor: move first run detection to client code",
      "tree": {
        "sha": "f945e6ef156bfc81e97d47059c3725da9b66088d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f945e6ef156bfc81e97d47059c3725da9b66088d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2a47ce08528dfb39c0340145c6977f6afd587f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a47ce08528dfb39c0340145c6977f6afd587f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a47ce08528dfb39c0340145c6977f6afd587f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a47ce08528dfb39c0340145c6977f6afd587f6/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fa3f30050f2db665605c8371b1fd131f39a2f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa3f30050f2db665605c8371b1fd131f39a2f9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa3f30050f2db665605c8371b1fd131f39a2f9b"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 16,
      "deletions": 24
    },
    "files": [
      {
        "sha": "362b7c1e15d560dc0243e0547ed0f19982fb72f9",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -22,8 +22,7 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n     CWallet wallet{test_setup->m_node.chain.get(), \"\", CreateMockWalletDatabase()};\n     {\n         wallet.SetupLegacyScriptPubKeyMan();\n-        bool first_run;\n-        if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n+        if (wallet.LoadWallet() != DBErrors::LOAD_OK) assert(false);\n     }\n     auto handler = test_setup->m_node.chain->handleNotifications({&wallet, [](CWallet*) {}});\n "
      },
      {
        "sha": "39c69fe1848b5a7f74ad525fe7f5fe08c7cdeb41",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -63,8 +63,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n-    bool firstRun;\n-    wallet->LoadWallet(firstRun);\n+    wallet->LoadWallet();\n \n     auto build_address = [&wallet]() {\n         CKey key;"
      },
      {
        "sha": "febfead6ad3a785594d0e02cc4fc7fa5f803d48e",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -140,8 +140,7 @@ void TestGUI(interfaces::Node& node)\n     }\n     node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n-    bool firstRun;\n-    wallet->LoadWallet(firstRun);\n+    wallet->LoadWallet();\n     {\n         auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n         LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);"
      },
      {
        "sha": "c39c0c7e7330420734a199685e2f70edfb395960",
        "filename": "src/wallet/dump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -194,8 +194,7 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n     std::shared_ptr<CWallet> wallet(new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet);\n     {\n         LOCK(wallet->cs_wallet);\n-        bool first_run = true;\n-        DBErrors load_wallet_ret = wallet->LoadWallet(first_run);\n+        DBErrors load_wallet_ret = wallet->LoadWallet();\n         if (load_wallet_ret != DBErrors::LOAD_OK) {\n             error = strprintf(_(\"Error creating %s\"), name);\n             return false;"
      },
      {
        "sha": "7bca385debec78b0607d6ac83302da014d4b1380",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -297,8 +297,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     empty_wallet();\n     {\n         std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n-        bool firstRun;\n-        wallet->LoadWallet(firstRun);\n+        wallet->LoadWallet();\n         wallet->SetupLegacyScriptPubKeyMan();\n         LOCK(wallet->cs_wallet);\n         add_coin(*wallet, 5 * CENT, 6 * 24, false, 0, true);"
      },
      {
        "sha": "fc744ebe5b7661a77b6c5d8c50a5a6aaca709e9b",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -8,8 +8,7 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName)\n     : TestingSetup(chainName),\n       m_wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase())\n {\n-    bool fFirstRun;\n-    m_wallet.LoadWallet(fFirstRun);\n+    m_wallet.LoadWallet();\n     m_chain_notifications_handler = m_node.chain->handleNotifications({ &m_wallet, [](CWallet*) {} });\n     m_wallet_client->registerRpcs();\n }"
      },
      {
        "sha": "171fa67b8532231403f7455ed297efb438f07e2e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -483,8 +483,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n             LOCK2(wallet->cs_wallet, ::cs_main);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n-        bool firstRun;\n-        wallet->LoadWallet(firstRun);\n+        wallet->LoadWallet();\n         AddKey(*wallet, coinbaseKey);\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();"
      },
      {
        "sha": "c4619a622bd9cf15f4a137ff7f1343e9d62c49e7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -3247,11 +3247,10 @@ void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n     }\n }\n \n-DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n+DBErrors CWallet::LoadWallet()\n {\n     LOCK(cs_wallet);\n \n-    fFirstRunRet = false;\n     DBErrors nLoadWalletRet = WalletBatch(GetDatabase()).LoadWallet(this);\n     if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n     {\n@@ -3263,9 +3262,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         }\n     }\n \n-    // This wallet is in its first run if there are no ScriptPubKeyMans and it isn't blank or no privkeys\n-    fFirstRunRet = m_spk_managers.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n-    if (fFirstRunRet) {\n+    if (m_spk_managers.empty()) {\n         assert(m_external_spk_managers.empty());\n         assert(m_internal_spk_managers.empty());\n     }\n@@ -3893,11 +3890,10 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n     chain.initMessage(_(\"Loading wallet\u2026\").translated);\n \n     int64_t nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n     std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, name, std::move(database)), ReleaseWallet);\n-    DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n+    DBErrors nLoadWalletRet = walletInstance->LoadWallet();\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n             error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n@@ -3924,6 +3920,10 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n         }\n     }\n \n+    // This wallet is in its first run if there are no ScriptPubKeyMans and it isn't blank or no privkeys\n+    const bool fFirstRun = walletInstance->m_spk_managers.empty() &&\n+                     !walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+                     !walletInstance->IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n     if (fFirstRun)\n     {\n         // ensure this wallet.dat can only be opened by clients supporting HD with chain split and expects no default key"
      },
      {
        "sha": "a8ef200b2c84c6e23c32c010664821478dd6f7d9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -1126,7 +1126,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     CAmount GetChange(const CTransaction& tx) const;\n     void chainStateFlushed(const CBlockLocator& loc) override;\n \n-    DBErrors LoadWallet(bool& fFirstRunRet);\n+    DBErrors LoadWallet();\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);"
      },
      {
        "sha": "50b6c9d29f12d9fd9a675acf9ce43cd6649d5470",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a47ce08528dfb39c0340145c6977f6afd587f6/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "patch": "@@ -54,8 +54,7 @@ static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::pa\n     std::shared_ptr<CWallet> wallet_instance{new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet};\n     DBErrors load_wallet_ret;\n     try {\n-        bool first_run;\n-        load_wallet_ret = wallet_instance->LoadWallet(first_run);\n+        load_wallet_ret = wallet_instance->LoadWallet();\n     } catch (const std::runtime_error&) {\n         tfm::format(std::cerr, \"Error loading %s. Is wallet being used by another process?\\n\", name);\n         return nullptr;"
      }
    ]
  },
  {
    "sha": "44c430ffac940e1d1dd7f5939a495470bc694489",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGM0MzBmZmFjOTQwZTFkMWRkN2Y1OTM5YTQ5NTQ3MGJjNjk0NDg5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-14T17:07:00Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2021-05-19T06:50:20Z"
      },
      "message": "refactor: Add CWallet:::AttachChain method\n\nThis commit does not change behavior, it just moves code from\nCWallet::CreateWalletFromFile to CWallet:::AttachChain so it can be updated in\nthe next commit.\n\nThis commit is most easily reviewed with\n\"git diff -w --color-moved=dimmed_zebra\" or by diffing CWallet:::AttachChain\nagainst the previous code with an external diff tool.",
      "tree": {
        "sha": "1aeee116905157c9060e344a8ea47368f3b191ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1aeee116905157c9060e344a8ea47368f3b191ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44c430ffac940e1d1dd7f5939a495470bc694489",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c430ffac940e1d1dd7f5939a495470bc694489",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44c430ffac940e1d1dd7f5939a495470bc694489",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c430ffac940e1d1dd7f5939a495470bc694489/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a47ce08528dfb39c0340145c6977f6afd587f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a47ce08528dfb39c0340145c6977f6afd587f6"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 45,
      "deletions": 24
    },
    "files": [
      {
        "sha": "a6ba994361935971156e655d65829b98c16d272b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 24,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44c430ffac940e1d1dd7f5939a495470bc694489/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44c430ffac940e1d1dd7f5939a495470bc694489/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=44c430ffac940e1d1dd7f5939a495470bc694489",
        "patch": "@@ -4089,6 +4089,35 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n \n     LOCK(walletInstance->cs_wallet);\n \n+    if (!AttachChain(walletInstance, chain, error, warnings)) {\n+        return nullptr;\n+    }\n+\n+    {\n+        LOCK(cs_wallets);\n+        for (auto& load_wallet : g_load_wallet_fns) {\n+            load_wallet(interfaces::MakeWallet(walletInstance));\n+        }\n+    }\n+\n+    walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n+\n+    {\n+        walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n+        walletInstance->WalletLogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n+        walletInstance->WalletLogPrintf(\"m_address_book.size() = %u\\n\",  walletInstance->m_address_book.size());\n+    }\n+\n+    return walletInstance;\n+}\n+\n+bool CWallet::AttachChain(const std::shared_ptr<CWallet>& walletInstance, interfaces::Chain& chain, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+{\n+    LOCK(walletInstance->cs_wallet);\n+    // allow setting the chain if it hasn't been set already but prevent changing it\n+    assert(!walletInstance->m_chain || walletInstance->m_chain == &chain);\n+    walletInstance->m_chain = &chain;\n+\n     // Register wallet with validationinterface. It's done before rescan to avoid\n     // missing block connections between end of rescan and validation subscribing.\n     // Because of wallet lock being hold, block connection notifications are going to\n@@ -4122,21 +4151,21 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n \n     if (tip_height && *tip_height != rescan_height)\n     {\n-        // We can't rescan beyond non-pruned blocks, stop and throw an error.\n-        // This might happen if a user uses an old wallet within a pruned node\n-        // or if they ran -disablewallet for a longer time, then decided to re-enable\n         if (chain.havePruned()) {\n-            // Exit early and print an error.\n-            // If a block is pruned after this check, we will load the wallet,\n-            // but fail the rescan with a generic error.\n             int block_height = *tip_height;\n             while (block_height > 0 && chain.haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {\n                 --block_height;\n             }\n \n             if (rescan_height != block_height) {\n+                // We can't rescan beyond non-pruned blocks, stop and throw an error.\n+                // This might happen if a user uses an old wallet within a pruned node\n+                // or if they ran -disablewallet for a longer time, then decided to re-enable\n+                // Exit early and print an error.\n+                // If a block is pruned after this check, we will load the wallet,\n+                // but fail the rescan with a generic error.\n                 error = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n-                return nullptr;\n+                return false;\n             }\n         }\n \n@@ -4158,29 +4187,14 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             WalletRescanReserver reserver(*walletInstance);\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(chain.getBlockHash(rescan_height), rescan_height, {} /* max height */, reserver, true /* update */).status)) {\n                 error = _(\"Failed to rescan the wallet during initialization\");\n-                return nullptr;\n+                return false;\n             }\n         }\n         walletInstance->chainStateFlushed(chain.getTipLocator());\n         walletInstance->GetDatabase().IncrementUpdateCounter();\n     }\n \n-    {\n-        LOCK(cs_wallets);\n-        for (auto& load_wallet : g_load_wallet_fns) {\n-            load_wallet(interfaces::MakeWallet(walletInstance));\n-        }\n-    }\n-\n-    walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n-\n-    {\n-        walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n-        walletInstance->WalletLogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n-        walletInstance->WalletLogPrintf(\"m_address_book.size() = %u\\n\",  walletInstance->m_address_book.size());\n-    }\n-\n-    return walletInstance;\n+    return true;\n }\n \n const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest, bool allow_change) const"
      },
      {
        "sha": "ec1415bf103ae1afb38a52923963a1ce416fa460",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44c430ffac940e1d1dd7f5939a495470bc694489/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44c430ffac940e1d1dd7f5939a495470bc694489/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=44c430ffac940e1d1dd7f5939a495470bc694489",
        "patch": "@@ -763,6 +763,13 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool CreateTransactionInternal(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, FeeCalculation& fee_calc_out, bool sign);\n \n+    /**\n+     * Catch wallet up to current chain, scanning new blocks, updating the best\n+     * block locator and m_last_block_processed, and registering for\n+     * notifications about new blocks and transactions.\n+     */\n+    static bool AttachChain(const std::shared_ptr<CWallet>& wallet, interfaces::Chain& chain, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+\n public:\n     /**\n      * Main wallet lock."
      }
    ]
  },
  {
    "sha": "d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzNhZTkzOTY0OWYzYjMwZTUyYjVhMmNjY2Q3ZmFmZDFhYjM2NzY2",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2020-12-16T21:41:43Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2021-05-19T06:50:20Z"
      },
      "message": "CWallet::Create move chain init message up into calling code",
      "tree": {
        "sha": "3e18eda4f65cd0dd565c556fdb9e17a581e1a42b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e18eda4f65cd0dd565c556fdb9e17a581e1a42b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73ae939649f3b30e52b5a2cccd7fafd1ab36766/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44c430ffac940e1d1dd7f5939a495470bc694489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c430ffac940e1d1dd7f5939a495470bc694489",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44c430ffac940e1d1dd7f5939a495470bc694489"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9a163ef556df55ec42865d3513ff5112e6892318",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d73ae939649f3b30e52b5a2cccd7fafd1ab36766/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d73ae939649f3b30e52b5a2cccd7fafd1ab36766/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
        "patch": "@@ -105,6 +105,7 @@ bool LoadWallets(interfaces::Chain& chain)\n             if (!database && status == DatabaseStatus::FAILED_NOT_FOUND) {\n                 continue;\n             }\n+            chain.initMessage(_(\"Loading wallet...\").translated);\n             std::shared_ptr<CWallet> pwallet = database ? CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings) : nullptr;\n             if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n             if (!pwallet) {"
      },
      {
        "sha": "01016e9bfc0dd61a010e1ac2604dbbe9615ec566",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d73ae939649f3b30e52b5a2cccd7fafd1ab36766/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d73ae939649f3b30e52b5a2cccd7fafd1ab36766/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
        "patch": "@@ -213,6 +213,7 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std:\n             return nullptr;\n         }\n \n+        chain.initMessage(_(\"Loading wallet...\").translated);\n         std::shared_ptr<CWallet> wallet = CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings);\n         if (!wallet) {\n             error = Untranslated(\"Wallet loading failed.\") + Untranslated(\" \") + error;\n@@ -292,6 +293,7 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n     }\n \n     // Make the wallet\n+    chain.initMessage(_(\"Loading wallet...\").translated);\n     std::shared_ptr<CWallet> wallet = CWallet::Create(chain, name, std::move(database), wallet_creation_flags, error, warnings);\n     if (!wallet) {\n         error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n@@ -3887,8 +3889,6 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n {\n     const std::string& walletFile = database->Filename();\n \n-    chain.initMessage(_(\"Loading wallet\u2026\").translated);\n-\n     int64_t nStart = GetTimeMillis();\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared."
      }
    ]
  },
  {
    "sha": "489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODllYmI3YjM0YzQwM2EzY2U3OGZmNmZiMjcxZjhlNmVjYjQ3MzA0",
    "commit": {
      "author": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2021-01-18T08:26:33Z"
      },
      "committer": {
        "name": "Ivan Metlushko",
        "email": "metlushko@gmail.com",
        "date": "2021-05-19T06:50:20Z"
      },
      "message": "wallet: make chain optional for CWallet::Create",
      "tree": {
        "sha": "d503521c7b2355e3b2b376ad29c12fe3a91b0038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d503521c7b2355e3b2b376ad29c12fe3a91b0038"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73ae939649f3b30e52b5a2cccd7fafd1ab36766",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d73ae939649f3b30e52b5a2cccd7fafd1ab36766"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 30,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e0df96666fe4cd326927f12445762e78e109e3a8",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
        "patch": "@@ -106,7 +106,7 @@ bool LoadWallets(interfaces::Chain& chain)\n                 continue;\n             }\n             chain.initMessage(_(\"Loading wallet...\").translated);\n-            std::shared_ptr<CWallet> pwallet = database ? CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings) : nullptr;\n+            std::shared_ptr<CWallet> pwallet = database ? CWallet::Create(&chain, name, std::move(database), options.create_flags, error, warnings) : nullptr;\n             if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n             if (!pwallet) {\n                 chain.initError(error);"
      },
      {
        "sha": "512374c34feaf4ffd317f291f0ad4792ac6213dd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
        "patch": "@@ -38,15 +38,17 @@ static_assert(WALLET_INCREMENTAL_RELAY_FEE >= DEFAULT_INCREMENTAL_RELAY_FEE, \"wa\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n-static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain& chain)\n+static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain* chain)\n {\n     DatabaseOptions options;\n     DatabaseStatus status;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n     auto database = MakeWalletDatabase(\"\", options, status, error);\n     auto wallet = CWallet::Create(chain, \"\", std::move(database), options.create_flags, error, warnings);\n-    wallet->postInitProcess();\n+    if (chain) {\n+        wallet->postInitProcess();\n+    }\n     return wallet;\n }\n \n@@ -689,7 +691,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n {\n     gArgs.ForceSetArg(\"-unsafesqlitesync\", \"1\");\n     // Create new wallet with known key and unload it.\n-    auto wallet = TestLoadWallet(*m_node.chain);\n+    auto wallet = TestLoadWallet(m_node.chain.get());\n     CKey key;\n     key.MakeNewKey(true);\n     AddKey(*wallet, key);\n@@ -729,7 +731,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n \n     // Reload wallet and make sure new transactions are detected despite events\n     // being blocked\n-    wallet = TestLoadWallet(*m_node.chain);\n+    wallet = TestLoadWallet(m_node.chain.get());\n     BOOST_CHECK(rescan_completed);\n     BOOST_CHECK_EQUAL(addtx_count, 2);\n     {\n@@ -769,7 +771,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n             ENTER_CRITICAL_SECTION(wallet->wallet()->cs_wallet);\n             ENTER_CRITICAL_SECTION(cs_wallets);\n         });\n-    wallet = TestLoadWallet(*m_node.chain);\n+    wallet = TestLoadWallet(m_node.chain.get());\n     BOOST_CHECK_EQUAL(addtx_count, 4);\n     {\n         LOCK(wallet->cs_wallet);\n@@ -781,10 +783,17 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n     TestUnloadWallet(std::move(wallet));\n }\n \n+BOOST_FIXTURE_TEST_CASE(CreateWalletWithoutChain, BasicTestingSetup)\n+{\n+    auto wallet = TestLoadWallet(nullptr);\n+    BOOST_CHECK(wallet);\n+    UnloadWallet(std::move(wallet));\n+}\n+\n BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n {\n     gArgs.ForceSetArg(\"-unsafesqlitesync\", \"1\");\n-    auto wallet = TestLoadWallet(*m_node.chain);\n+    auto wallet = TestLoadWallet(m_node.chain.get());\n     CKey key;\n     key.MakeNewKey(true);\n     AddKey(*wallet, key);"
      },
      {
        "sha": "7cdf2fcda0ec6146ba5b262f52fefa5c9f559d0d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
        "patch": "@@ -214,7 +214,7 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std:\n         }\n \n         chain.initMessage(_(\"Loading wallet...\").translated);\n-        std::shared_ptr<CWallet> wallet = CWallet::Create(chain, name, std::move(database), options.create_flags, error, warnings);\n+        std::shared_ptr<CWallet> wallet = CWallet::Create(&chain, name, std::move(database), options.create_flags, error, warnings);\n         if (!wallet) {\n             error = Untranslated(\"Wallet loading failed.\") + Untranslated(\" \") + error;\n             status = DatabaseStatus::FAILED_LOAD;\n@@ -294,7 +294,7 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n \n     // Make the wallet\n     chain.initMessage(_(\"Loading wallet...\").translated);\n-    std::shared_ptr<CWallet> wallet = CWallet::Create(chain, name, std::move(database), wallet_creation_flags, error, warnings);\n+    std::shared_ptr<CWallet> wallet = CWallet::Create(&chain, name, std::move(database), wallet_creation_flags, error, warnings);\n     if (!wallet) {\n         error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n         status = DatabaseStatus::FAILED_CREATE;\n@@ -3885,14 +3885,14 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n     return MakeDatabase(wallet_path, options, status, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     const std::string& walletFile = database->Filename();\n \n     int64_t nStart = GetTimeMillis();\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(&chain, name, std::move(database)), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet();\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n@@ -3952,7 +3952,9 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             }\n         }\n \n-        walletInstance->chainStateFlushed(chain.getTipLocator());\n+        if (chain) {\n+            walletInstance->chainStateFlushed(chain->getTipLocator());\n+        }\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n         error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile);\n@@ -4049,9 +4051,9 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n                                _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n-        if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n+        if (chain && walletInstance->m_pay_tx_fee < chain->relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n+                gArgs.GetArg(\"-paytxfee\", \"\"), chain->relayMinFee().ToString());\n             return nullptr;\n         }\n     }\n@@ -4065,15 +4067,15 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n             warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         }\n-        if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n+        if (chain && CFeeRate(nMaxFee, 1000) < chain->relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n+                gArgs.GetArg(\"-maxtxfee\", \"\"), chain->relayMinFee().ToString());\n             return nullptr;\n         }\n         walletInstance->m_default_max_tx_fee = nMaxFee;\n     }\n \n-    if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n+    if (chain && chain->relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n         warnings.push_back(AmountHighWarn(\"-minrelaytxfee\") + Untranslated(\" \") +\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n@@ -4089,7 +4091,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n \n     LOCK(walletInstance->cs_wallet);\n \n-    if (!AttachChain(walletInstance, chain, error, warnings)) {\n+    if (chain && !AttachChain(walletInstance, *chain, error, warnings)) {\n         return nullptr;\n     }\n "
      },
      {
        "sha": "fc4edd8d201a8eebe9c183ce3eab609fae9dbdf5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/489ebb7b34c403a3ce78ff6fb271f8e6ecb47304/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=489ebb7b34c403a3ce78ff6fb271f8e6ecb47304",
        "patch": "@@ -1209,7 +1209,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> Create(interfaces::Chain& chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+    static std::shared_ptr<CWallet> Create(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n     /**\n      * Wallet post-init setup"
      }
    ]
  }
]