DrahtBot,2020-12-26 18:04:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20243 (rpc, wallet: Expose wallet id in getwalletinfo RPC output by hebasto)\n* #20205 (wallet: Properly support a wallet",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-751381033,751381033,
S3RK,2021-01-14 09:52:36,"@ryanofsky greatly appreciate your review.\n\n> * It would be good to squash 5th commit into 1st commit. No need to add a method and enum in one commit and then change the signature and drop the enum right after.\n\nI squashed handling first run and changing signature commits into adding `AttachChain`. There are less changing back and forth and overall it looks a bit simpler now.\n\n> * I th",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-760086132,760086132,
achow101,2021-01-15 20:31:05,"ISTM there are 5 main components of `CWallet::Create`: Loading/creating the wallet file, initializing new wallets, processing all of the wallet CLI args, setting up the chain, and setting up wallet client interfaces.\n\nWhat I had envisioned for splitting up `CWallet::Create` was to have separate functions for each of those components but still having `CWallet::Create` call all of them. This wou",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-761182042,761182042,
S3RK,2021-01-18 08:51:24,"Thanks ryanofsky and achow101, I have a better understanding now and adjusted my PR accordingly:\n\n1) I removed the last commit and  restored `AttachChain` call within `CWallet::Create`\n2) I made `chain` arg of `CWallet::Create` optional to accommodate wallet tool use-case\n\nI kept the 3rd commit which moves chain related checks to `AttachChain`. This way we can have all chain related code",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-762091567,762091567,
fanquake,2021-04-01 09:18:59,@meshcollider did you want to have a look here?,https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-811775801,811775801,
meshcollider,2021-04-06 04:54:39,"Yep I will review this sometime in the next couple of days 👍 \n\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-813820506,813820506,
S3RK,2021-04-14 07:53:50,Rebased to fix conflict in `src/wallet/test/wallet_tests.cpp`,https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-819311990,819311990,
achow101,2021-05-10 20:09:16,"While I think this is a good improvement, there are a few changes I would like to see before ACK'ing this.\n\n1. We don't need `m_first_run`. The only reason it needs to be in `AttachChain` is to allow for new wallets to be initialized with a best block that is the current tip to avoid unnecessary rescanning. But because we shouldn't be using `AttachChain` outside of `Create`, I think it would b",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-837258798,837258798,
ryanofsky,2021-05-10 20:36:05,"Agree with Achow's suggestions. But if the suggestions turn out to be hard to implement, I hope we consider them optional. The big improvement I see in this PR is that that it unscrambles wallet loading code from wallet syncing code. This is important so syncing code can be moved to a higher-level, so wallet code can be less monolithic and so multiple wallets can be synced in a single scan during ",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-837298935,837298935,
S3RK,2021-05-15 13:00:58,"1. Reworked the first commit. It doesn't introduce `m_frist_run`, but rather just moves the first run detection closer to the point of use\n2. Updated `AttachChain` signature. Made it private and changed the first param to const reference\n3. Added a check that chain can't be changed.",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-841655833,841655833,
achow101,2021-05-17 19:10:22,Code Review ACK 37b55f38d31c05f1ae6e22537eea8707463168a6,https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-842565169,842565169,
S3RK,2021-05-19 06:54:49,"I've dropped ""refactor: Move chain checks into CWallet::AttachChain"" (88f1982)",https://github.com/bitcoin/bitcoin/pull/20773#issuecomment-843800432,843800432,
ryanofsky,2021-01-11 23:54:20,"In commit ""refactor: Track first run state in CWallet"" (b528485dc7701dcd8fafcf2da996160c52546f07)\n\nCould this be initialized with `bool m_first_run = true` or `bool m_first_run = false` here? It would be nice to avoid possibility of non-determinism since it is technically possible to create a `CWallet` object without loading it",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r555413735,555413735,src/wallet/wallet.h
ryanofsky,2021-01-12 00:52:12,"In commit ""refactor: Move chain checks into CWallet::AttachChain"" (eabcd952d1c664cd964eb3376bc2865a49b33f16)\n\nI think this commit is not an improvement and that it would be better to drop. Safer and clearer to check these values for errors early as they are initialized, than to initialize one place and do checking later.",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r555436448,555436448,src/wallet/wallet.cpp
ryanofsky,2021-01-12 00:54:04,"In commit ""refactor: Update CWallet::AttachChain signature"" (847588a4b8e0dcc9975a675c46eca095c7cce4eb)\n\nCompile error this line (should say `CWallet`)",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r555437036,555437036,src/wallet/test/wallet_test_fixture.cpp
ryanofsky,2021-01-12 01:00:09,"In commit ""refactor: Update CWallet::AttachChain signature"" (847588a4b8e0dcc9975a675c46eca095c7cce4eb)\n\nThis change seems good but it would be nice to squash this commit into the first commit 4398236619aa1f70886a0e9ae7093b413ec172c6 to make the PR simpler and avoid defining an enum in an an earlier change that gets deleted later",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r555438988,555438988,src/wallet/wallet.h
ryanofsky,2021-01-12 01:07:29,"In commit ""CWallet::Create move CWallet::AttachChain up into calling code"" (9b575783f0f075d66350def60a842aee9ee05267)\n\nI don't think it's safe to reorder loading sequence and call AttachChain after g_load_wallet_fns callbacks. It also adds extra code to give callers responsibility to call AttachChain. If the point is to allow wallets to be created without syncing, would suggest just changing `",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r555441172,555441172,src/wallet/wallet.cpp
ryanofsky,2021-01-12 14:50:20,"In commit ""refactor: Handle first run in CWallet::AttachChain"" (b20c1e516d5bfc87e8d75a34799a91d71475ee8b)\n\nI think it's good that this PR adds `m_first_run`, to be able to freely move code around without changing behavior. In the future, though I think it would be good to eliminate `m_first_run`. This `chainStateFlushed` call seems to be the main place it is used, and it would seem better if t",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r555828788,555828788,src/wallet/wallet.cpp
S3RK,2021-01-14 09:10:19,Thanks. I initialised it to `false` so it wouldn't call `chainStateFlushed` by default. I think this is a safer option.,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r557242356,557242356,src/wallet/wallet.h
S3RK,2021-01-14 09:11:53,Squashed.,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r557243331,557243331,src/wallet/wallet.h
S3RK,2021-01-14 09:12:14,🤦 ,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r557243550,557243550,src/wallet/test/wallet_test_fixture.cpp
S3RK,2021-01-14 09:14:13,Totally! I started to look at how the best block record is used and maintained but it sent me down the rabbit hole as I'm not familiar with the codebase yet. I'll look at it as a follow up.,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r557244933,557244933,src/wallet/wallet.cpp
S3RK,2021-01-14 09:45:36,Addressed in a general comment below,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r557265784,557265784,src/wallet/wallet.cpp
S3RK,2021-01-14 09:52:28,"Thanks for bringing it up. I looked at `g_load_wallet_fns` and there are two use-cases for it both in UI:\n * register handler for show progress messages\n * create and connect wallet model for UI controller\n\nI have almost zero understanding of GUI code and QT, but it looks like a safe change to me. Can we ask someone with better understanding of GUI to comment on that?\n\nAlso see my gene",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r557270303,557270303,src/wallet/wallet.cpp
kiminuo,2021-05-09 13:55:09,"Question: How does one distinguish whether accessing a wallet field (in this case `walletInstance->m_first_run`) requires `cs_wallet` lock or not? I'm asking because `cs_wallet` is described like this:\n\n```cpp\n/*\n * Main wallet lock.\n * This lock protects all the fields added by CWallet.  */\nmutable RecursiveMutex cs_wallet;\n```\n\nCan anybody shed light on this for my information?",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r628893976,628893976,src/wallet/wallet.cpp
ryanofsky,2021-05-10 12:54:23,"> Question: How does one distinguish whether accessing a wallet field (in this case `walletInstance->m_first_run`) requires `cs_wallet` lock or not?\n\nPeople may have different ideas about what ""requires"" means, but I would say a variable is required to be locked if not locking it would cause bugs. I.e. if it can be read and written at the same time from multiple threads. So a lock is not requi",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r629334016,629334016,src/wallet/wallet.cpp
S3RK,2021-05-10 18:48:42,Thanks for the review. Since I need to rebase the branch anyway I'm going to incorporate the suggestion,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r629602249,629602249,src/wallet/wallet.cpp
kiminuo,2021-05-10 20:24:39,"> People may have different ideas about what ""requires"" means, but I would say a variable is required to be locked if not locking it would cause bugs. I.e. if it can be read and written at the same time from multiple threads. So a lock is not required for this because parts of wallet loading code which use this are single threaded.\n\nThank you for the explanation. \n\n> But I do think it woul",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r629660134,629660134,src/wallet/wallet.cpp
S3RK,2021-05-15 13:02:04,I've dropped `m_first_run` altogether ,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r632946907,632946907,src/wallet/wallet.cpp
fjahr,2021-05-16 18:06:41,nit: could be `const`,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r633120365,633120365,src/wallet/wallet.cpp
ryanofsky,2021-05-18 13:55:32,"In commit ""refactor: Add CWallet:::AttachChain method"" (491feef0e97adf4ec5ca1b17a0c097a4f7324a9e)\n\nNot very important but I wonder if you could drop the `|| walletInstance->m_chain == &chain` condition. It seems like it would be a bug to call attachchain more than once, even with the same chain pointer.",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634407700,634407700,src/wallet/wallet.cpp
ryanofsky,2021-05-18 14:19:12,"In commit ""refactor: Move chain checks into CWallet::AttachChain"" (88f19822bd14d23e2e0f4ebc7e7221f029d0abad)\n\nI still think this commit is not an improvement and should be dropped because it makes the already complicated handling of these fee options and errors more complicated and less transparent. Instead of handling the settings in one place in `Create`, it splits up handling between two fu",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634430171,634430171,src/wallet/wallet.cpp
S3RK,2021-05-18 18:00:30,"`m_chain` is initialized in the CWallet ctr. I've tried to drop it originally, but there were some issues, so I decided to leave it for the follow up.",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634626623,634626623,src/wallet/wallet.cpp
S3RK,2021-05-18 18:54:56,"Hm... thanks for mentioning that the dependency on the chain is accidental. I didn't look deep into it before.\n\nI'm much more happy to drop that commit now, but should we explore other options as well?\n\nIt looks like we're just comparing one arg against other args. paytxfee and maxtxfee against `minRelayFee`, plus `minRelayFee` against some constant. There should be a better place for thos",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634666757,634666757,src/wallet/wallet.cpp
ryanofsky,2021-05-18 21:59:43,"> @ryanofsky and @fjahr could you help me locate a better place for those checks?\n\nI think the checks are in a good place. Good to validate settings in the same place where they are parsed. There are just other ways this code could access `::minRelayTxFee` value other than by calling a chain method. It could passed as a create option or be part of a different struct or interface. Simply changi",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634776548,634776548,src/wallet/wallet.cpp
fjahr,2021-05-18 22:03:11,"> And in the future, these checks can be updated to not use the chain interface at all.\n\nFor the `chain` topic this seems a good solution going forward.\n\nOtherwise, I am not sure why you are interested in moving this code. These are checks that can make the wallet creation process fail or at least print a warning. So this seems to be a good place for it. Fee options are part of the wallet ",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634778183,634778183,src/wallet/wallet.cpp
S3RK,2021-05-19 06:50:34,done,https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634958163,634958163,src/wallet/wallet.cpp
S3RK,2021-05-19 06:54:09,"> Maybe the confusion is because these are config options and not args of createwallet? \n\nyes, and \n> and thus are only checked once the user wants to create a wallet.\n\nShouldn't we check them earlier? They are from the wallet ""world"" but have nothing to do with the wallet *creation*. Especially `chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB`. It seems just a coincidence that the",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r634960131,634960131,src/wallet/wallet.cpp
ryanofsky,2021-05-19 11:42:42,"> Shouldn't we check them earlier? They are from the wallet ""world"" but have nothing to do with the wallet _creation_. \n\nYes, these settings could be [`WalletContext`](https://github.com/bitcoin/bitcoin/blob/4da26fb85d6d6d205a2794ccb98beee1302b4a25/src/wallet/context.h#L23) members and shared across multiple `CWallet` instances instead of being `CWallet` members. (Or maybe if we want keep thes",https://github.com/bitcoin/bitcoin/pull/20773#discussion_r635158578,635158578,src/wallet/wallet.cpp
