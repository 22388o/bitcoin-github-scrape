[
  {
    "sha": "e141aa4ba604ff22c68454112501c166d3e892c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTQxYWE0YmE2MDRmZjIyYzY4NDU0MTEyNTAxYzE2NmQzZTg5MmM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-20T09:09:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-20T09:30:18Z"
      },
      "message": "Add mallocinfo mode to `getmemoryinfo` RPC\n\nThis adds a mode argument to `getmemoryinfo`. By default the output\nwill remain the same. However if a mode argument of `mallocinfo` is\nprovided the result of glibc `malloc_info` (if available) will\nbe returned as a string, as-is.\n\nThis is useful for tracking heap usage over time or troubleshooting\nmemory fragmentation issues.",
      "tree": {
        "sha": "31b8f8f363e0042f48af9a9291efebc9aee1d139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31b8f8f363e0042f48af9a9291efebc9aee1d139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e141aa4ba604ff22c68454112501c166d3e892c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141aa4ba604ff22c68454112501c166d3e892c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e141aa4ba604ff22c68454112501c166d3e892c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141aa4ba604ff22c68454112501c166d3e892c9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c1a95812411b864ced43a151cf86cc49da48150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1a95812411b864ced43a151cf86cc49da48150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c1a95812411b864ced43a151cf86cc49da48150"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 54,
      "deletions": 7
    },
    "files": [
      {
        "sha": "41634e035b4453dbd88d79700a0c7440268d8100",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e141aa4ba604ff22c68454112501c166d3e892c9/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e141aa4ba604ff22c68454112501c166d3e892c9/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e141aa4ba604ff22c68454112501c166d3e892c9",
        "patch": "@@ -566,6 +566,13 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n  [ AC_MSG_RESULT(no)]\n )\n \n+dnl Check for malloc_info (for memory statistics information in getmemoryinfo)\n+AC_MSG_CHECKING(for getmemoryinfo)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n+ [[ int f = malloc_info(0, NULL); ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOC_INFO, 1,[Define this symbol if you have malloc_info]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n \n AC_MSG_CHECKING([for visibility attribute])\n AC_LINK_IFELSE([AC_LANG_SOURCE(["
      },
      {
        "sha": "de1bbe62e57777e9b6cbb5eb63035559665105d9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 7,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e141aa4ba604ff22c68454112501c166d3e892c9/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e141aa4ba604ff22c68454112501c166d3e892c9/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e141aa4ba604ff22c68454112501c166d3e892c9",
        "patch": "@@ -20,6 +20,9 @@\n #endif\n \n #include <stdint.h>\n+#ifdef HAVE_MALLOC_INFO\n+#include <malloc.h>\n+#endif\n \n #include <boost/assign/list_of.hpp>\n \n@@ -485,16 +488,39 @@ static UniValue RPCLockedMemoryInfo()\n     return obj;\n }\n \n+#ifdef HAVE_MALLOC_INFO\n+static std::string RPCMallocInfo()\n+{\n+    char *ptr = nullptr;\n+    size_t size = 0;\n+    FILE *f = open_memstream(&ptr, &size);\n+    if (f) {\n+        malloc_info(0, f);\n+        fclose(f);\n+        if (ptr) {\n+            std::string rv(ptr, size);\n+            free(ptr);\n+            return rv;\n+        }\n+    }\n+    return \"\";\n+}\n+#endif\n+\n UniValue getmemoryinfo(const JSONRPCRequest& request)\n {\n     /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n      */\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getmemoryinfo\\n\"\n+            \"getmemoryinfo (\\\"mode\\\")\\n\"\n             \"Returns an object containing information about memory usage.\\n\"\n-            \"\\nResult:\\n\"\n+            \"Arguments:\\n\"\n+            \"1. \\\"mode\\\" determines what kind of information is returned. This argument is optional, the default mode is \\\"stats\\\".\\n\"\n+            \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n+            \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\\n\"\n+            \"\\nResult (mode \\\"stats\\\"):\\n\"\n             \"{\\n\"\n             \"  \\\"locked\\\": {               (json object) Information about locked memory manager\\n\"\n             \"    \\\"used\\\": xxxxx,          (numeric) Number of bytes used\\n\"\n@@ -505,13 +531,27 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n             \"    \\\"chunks_free\\\": xxxxx,   (numeric) Number unused chunks\\n\"\n             \"  }\\n\"\n             \"}\\n\"\n+            \"\\nResult (mode \\\"mallocinfo\\\"):\\n\"\n+            \"\\\"<malloc version=\\\"1\\\">...\\\"\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmemoryinfo\", \"\")\n             + HelpExampleRpc(\"getmemoryinfo\", \"\")\n         );\n-    UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n-    return obj;\n+\n+    std::string mode = (request.params.size() < 1 || request.params[0].isNull()) ? \"stats\" : request.params[0].get_str();\n+    if (mode == \"stats\") {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+        return obj;\n+    } else if (mode == \"mallocinfo\") {\n+#ifdef HAVE_MALLOC_INFO\n+        return RPCMallocInfo();\n+#else\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"mallocinfo is only available when compiled with glibc 2.10+\");\n+#endif\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown mode \" + mode);\n+    }\n }\n \n UniValue echo(const JSONRPCRequest& request)\n@@ -531,7 +571,7 @@ static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"control\",            \"getinfo\",                &getinfo,                true,  {} }, /* uses wallet if enabled */\n-    { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true,  {} },\n+    { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true,  {\"mode\"} },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true,  {\"address\"} }, /* uses wallet if enabled */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true,  {\"nrequired\",\"keys\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          true,  {\"address\",\"signature\",\"message\"} },"
      }
    ]
  }
]