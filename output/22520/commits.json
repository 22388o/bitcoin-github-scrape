[
  {
    "sha": "0a9129c588ab016eb0453b40a0cae918ca4aa6a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTkxMjljNTg4YWIwMTZlYjA0NTNiNDBhMGNhZTkxOGNhNGFhNmEy",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T15:05:01Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T15:38:19Z"
      },
      "message": "test: assert on the value of getblockchaininfo#time",
      "tree": {
        "sha": "df87c026800a28bf29e152c55bf178387ef714fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df87c026800a28bf29e152c55bf178387ef714fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a9129c588ab016eb0453b40a0cae918ca4aa6a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmD4P2wACgkQT1chs9Dj\nkh1s2hAAtWXWKSF0PowFnGCx5bzptu9SgbaWdE/3G9gnKwbQoe3h2XHoX2Os2z2l\n2HWYqgsw+z417emetbx6bhVFsD5EBgKGU5/iu3gTzt/GSchbJW+9ADVn7RYZap3e\nJwduuOOARqwa10OqYeO1JfMv/35Nk291l5huJpn5hzB4pHWZiDdcUUziqPmWTt94\n0SebSFmgDeoau7Nv7qZaPzYt1kgK+e/JR9jee/Wf6NDweBQQAN6vKS8kGhJOenzj\nG1zEsHymm4lFwmXNH3DphaP24HBsWxM3OqwgTjOx345nU1g4CrB9PicpeOKwLmF7\n3zTpT13dxCt+o9ivvuPOEe+eyFNNWhx32eADIVk8aEMAQtiX+6WqL4lAsMgSpOzr\nvXYj3Gcroel3qwOmQ4VXkNBbPpefp6ohE/VycqhMhMrrIr9z7hsZC+hGwFa2k19m\n8ZRCGYz79Bjt69e/R7q4phax+wjOE8ffpkTK540lBHK+lFYmR1c9v82ndOlt36cA\nokzvRIJH3zMaOh30/EthF+vbgFBPe4hVfYPGJ1R6+bpohQs1/UWD4YGKXX2cYfNm\n9SUD+w7kGzf7k2NMKVECs77I48s8cSEWVf7gGa+VXwF54jwlDj6+ifMDtl0CAsMR\nYxn4aJG84SSILHbR/ShWiIzBhOgtBqufKgBjyMSrhC4jCfTyhrI=\n=uYO0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBydh7hSTSNZmYnOApH4C6YrZx01sdcza5F1ps4PQgHrCP/wEDCtNq+Kuakv\nAVXpX952mksI8QRg+D9t8AhouF90Mct0HQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEHHUcaqz2mJzEyiC8dGcMWAI\n8CAjjE0WX/IPqBDAqMGWYzA3oxKS1isMTjmM4K9ezew87QjxBGD4P27wCNvJpUl4\nf9NwAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmf/8BCWaioy3zNHWk+FSb1McUKUCPEEYPg/bfAIIH65It5/mFoA\ng9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEJe0\naX243FBlOXn98rS5D2UI8CCT69eFqTIPR0N+3jnQcDcIJy8z37a2ju37QsZym05C\n4QjxBGD4P27wCAMZ4NSMGccsAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree df87c026800a28bf29e152c55bf178387ef714fb\nparent a3791da0e80ab35e862989373f033e5be4dff26b\nauthor Jon Atack <jon@atack.com> 1626879901 +0200\ncommitter Jon Atack <jon@atack.com> 1626881899 +0200\n\ntest: assert on the value of getblockchaininfo#time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9129c588ab016eb0453b40a0cae918ca4aa6a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a9129c588ab016eb0453b40a0cae918ca4aa6a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9129c588ab016eb0453b40a0cae918ca4aa6a2/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3791da0e80ab35e862989373f033e5be4dff26b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3791da0e80ab35e862989373f033e5be4dff26b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3791da0e80ab35e862989373f033e5be4dff26b"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "01f5ce7eb0bcb39173bd334937664dbe66a6fb67",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a9129c588ab016eb0453b40a0cae918ca4aa6a2/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a9129c588ab016eb0453b40a0cae918ca4aa6a2/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=0a9129c588ab016eb0453b40a0cae918ca4aa6a2",
        "patch": "@@ -49,6 +49,10 @@\n from test_framework.wallet import MiniWallet\n \n \n+TIME_RANGE_STEP = 600  # ten-minute steps\n+TIME_RANGE_END = TIME_GENESIS_BLOCK + 200 * TIME_RANGE_STEP\n+\n+\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -71,9 +75,8 @@ def run_test(self):\n         assert self.nodes[0].verifychain(4, 0)\n \n     def mine_chain(self):\n-        self.log.info('Create some old blocks')\n-        for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n-            # ten-minute steps from genesis block time\n+        self.log.info(\"Generate 200 blocks after the genesis block in ten-minute steps\")\n+        for t in range(TIME_GENESIS_BLOCK, TIME_RANGE_END, TIME_RANGE_STEP):\n             self.nodes[0].setmocktime(t)\n             self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n         assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n@@ -99,7 +102,7 @@ def _test_getblockchaininfo(self):\n         ]\n         res = self.nodes[0].getblockchaininfo()\n \n-        assert isinstance(res['time'], int)\n+        assert_equal(res['time'], TIME_RANGE_END - TIME_RANGE_STEP)\n \n         # result should have these additional pruning keys if manual pruning is enabled\n         assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning'] + keys))"
      }
    ]
  },
  {
    "sha": "78c361086fc0bf27612e8142bd33e05e37a36af6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGMzNjEwODZmYzBiZjI3NjEyZTgxNDJiZDMzZTA1ZTM3YTM2YWY2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T15:07:18Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T16:01:09Z"
      },
      "message": "test: assert on mediantime in getblockheader and getblockchaininfo",
      "tree": {
        "sha": "16407ab6fbe31d16c1ccce7740c50348ff2c2582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16407ab6fbe31d16c1ccce7740c50348ff2c2582"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78c361086fc0bf27612e8142bd33e05e37a36af6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmD4RPsACgkQT1chs9Dj\nkh231BAApHzZfzSwlZ3OXf0C94kW/e/3f+KEhC31eAxeYa7rQZnQUxjTOvtE4iMa\nX/wjQlQMlLU2fdBAgkWpmwxhr8c+JWR9onNqkH/ot1P4j6EysiyDZgQ9/WkL6Pnw\nckUqRZRH9+k3fKLhEMWJuRYtxIknIJo23hdAczbjJhwLHv0WCy00T8H+zO0oBTJW\nhtECu1HeExjU9DjUDpl6Z7/h3EVY807sNWC1VQLjG3+p2A24+ZlqvKg7zI+y0LE9\nfUr3XaL09kcXZDIqrhCECIHP7i11FCvv6c5NRseyqwlTL3zG3GmLqhowY/Bb70TY\n/YOAmNNvbxz1KmDDIUAIgk9WAGGreSZkBxnNJzxyOWNsGlcf6iWHEVk3YT22tPhy\nnTUubhMl3YZEaBSPYYQa822hwyY9UD/bCvCFaXN4lRj0cIyMAQipT0wfm0qBFvcm\n+PHmYx/8F+99lxX7i7Erp40zCk5cRX4NXY0vq+JxF1omSaoAtNVYZTqO4QqTT+vS\ngF3pd96eeIW0PAUY49/vf91zicqLZbmqqD5MH6rR0usGOBJUyVY33cDxB2UvUtLc\nEq7GGKDJQ4fGAIC+Novq3CL/6M2AzhFhFueUGprPyIfdi2Omu6ylWKIyNKRB5CbW\nW/Ko9ebQArRAFUgKsqn7VC+G5pK9DPFYc83J2WGvVf0ldH0pDQU=\n=8LKp\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFE20az6SDhgcK7kcZAKwnQ7jzfOI+1Ej3wlaMB1coWpCP/wEBLZxiL0eyuM\nDWNzat5a5ssI8CAyh97SLE5YFBOpcaUvRXwsKd20KX8eKqMLK1YIPdX0FQjwIJ9N\neLNpbuRJoLZQ53oQLViftnOo/ANhpUUYD55oPT1eCPAg6ULT3VHrVfU7qT5IWU7/\nRVFJqZdCn4iIBEW+54goaAcI8QRg+ET98AjqN+eRWVH8/ACD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wELPEQhAa7iOV\ntKdn6qs5gGwI8CAox5iSmdRXrcvd/gYoHGRSKj3lekSZ1KYIaRQIY2ZajQjwIFkz\nJHylVXuJt8pb2mN0VLdlfu1XmkT+TG/TFQvsw2NrCPEEYPhE/fAIugKkyDMNNFMA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BDPCdpHeMqmK8TH5ZkWhFF1CPAg1b5R3ajyZk0mK9LSZC2Ie3hbOUW9\nLQcs+j6g/I9tMdEI8CAuV0jk3Q6oYIGv8A/NYz4HKhy8Q/eHZ0dpRQ43+2APyQjx\nBGD4RP3wCOyLaizZivAHAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BD7s6tB1w9PIDnQ5c7dzGF7CPAgg9YvRbYLi1rACyuyVYS7\nNuIwZFxTXv3/7TcoWQ7VEvQI8CCz7CcJRgTXnRxsNq8v4Pf5us29BS2Cbs3u0FQV\nWeq0BAjxBGD4RP3wCB5rD1KQee33AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0\nYy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 16407ab6fbe31d16c1ccce7740c50348ff2c2582\nparent 0a9129c588ab016eb0453b40a0cae918ca4aa6a2\nauthor Jon Atack <jon@atack.com> 1626880038 +0200\ncommitter Jon Atack <jon@atack.com> 1626883269 +0200\n\ntest: assert on mediantime in getblockheader and getblockchaininfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c361086fc0bf27612e8142bd33e05e37a36af6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78c361086fc0bf27612e8142bd33e05e37a36af6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c361086fc0bf27612e8142bd33e05e37a36af6/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a9129c588ab016eb0453b40a0cae918ca4aa6a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9129c588ab016eb0453b40a0cae918ca4aa6a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a9129c588ab016eb0453b40a0cae918ca4aa6a2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "524268ecbab113a65b6b2ee8df3c73dabb44c38c",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78c361086fc0bf27612e8142bd33e05e37a36af6/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78c361086fc0bf27612e8142bd33e05e37a36af6/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=78c361086fc0bf27612e8142bd33e05e37a36af6",
        "patch": "@@ -50,6 +50,7 @@\n \n \n TIME_RANGE_STEP = 600  # ten-minute steps\n+TIME_RANGE_MTP = TIME_GENESIS_BLOCK + 194 * TIME_RANGE_STEP\n TIME_RANGE_END = TIME_GENESIS_BLOCK + 200 * TIME_RANGE_STEP\n \n \n@@ -103,6 +104,7 @@ def _test_getblockchaininfo(self):\n         res = self.nodes[0].getblockchaininfo()\n \n         assert_equal(res['time'], TIME_RANGE_END - TIME_RANGE_STEP)\n+        assert_equal(res['mediantime'], TIME_RANGE_MTP)\n \n         # result should have these additional pruning keys if manual pruning is enabled\n         assert_equal(sorted(res.keys()), sorted(['pruneheight', 'automatic_pruning'] + keys))\n@@ -310,7 +312,7 @@ def _test_getblockheader(self):\n         assert_is_hash_string(header['merkleroot'])\n         assert_is_hash_string(header['bits'], length=None)\n         assert isinstance(header['time'], int)\n-        assert isinstance(header['mediantime'], int)\n+        assert_equal(header['mediantime'], TIME_RANGE_MTP)\n         assert isinstance(header['nonce'], int)\n         assert isinstance(header['version'], int)\n         assert isinstance(int(header['versionHex'], 16), int)"
      }
    ]
  },
  {
    "sha": "d548dc71e4849f638fccaea6be86ac4fa5304f01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTQ4ZGM3MWU0ODQ5ZjYzOGZjY2FlYTZiZTg2YWM0ZmE1MzA0ZjAx",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T15:15:06Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T23:43:34Z"
      },
      "message": "test: replace magic values by constants in rpc_blockchain.py",
      "tree": {
        "sha": "f5cb1c0e032b5f448e96213ec274ecba8e6220fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5cb1c0e032b5f448e96213ec274ecba8e6220fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d548dc71e4849f638fccaea6be86ac4fa5304f01",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmD4sS8ACgkQT1chs9Dj\nkh1ZSRAAtIPxecLQDqaoea0bYRHPuURHVkLmM0QCGGuvhmWtBZu3awGmPqp7iiqM\nXUj72qvioXLZvmYnj+KaifPZCG1WlQ21zfLwtHVoIRDUXe7zGUvCprftN72X7JTD\n4OmXcQSpMOlRbO1RMtOahGPihB0lqbe6+iAajc+o+T7MfP6BX5HoTdJkt/fTVbxj\n0KdkmDOTOQ+TYsoKiKz02qvYfiXutSo+7K2C07Z+UohNb9PkTSvnCLf58erwruLX\nrPor/dshs2BN1+FhZsCe+35cngNHXZ4raLqrxv/HCLOvaB5fWMEY96YEpGzvNkZE\nkOu8jkEA7GJws3bYORHgf36qwFpTAwS3dXw2LATo8WmYzGMt37GUSBUsWurG3S72\nzPNeIlxQSztcdIiWvANg5jIoyBxlPMflrPThLVOfPXUAqRmCd84HCcAE0ehuTwqL\ni0LS0nIrVUR3dp9JbhSeD5EWe62eMCfTGc5j03L6uvHZgwRJXlaezYwlxr014xFL\nnMl9s6sJDTC1mYm0hF5gmkBtkoIcC69DGWCXIdxO1gU6+qaTMgP7nzeWz7F85VHg\n1mSWAkpJtaCTtIVajkO3m/Q55cJZgDG4L+MzxJjKN/A6mucFKxxck99zhL0k1ZSS\ne7HqGwslIga8TPrgAPCwi8xkiML9i/G0FHiTsjujWXr+cSD5mrU=\n=jodg\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAGhYk2G4/HsFE4SymiaewWdEAdCk2F0xhY1/xdc1krFCP/wEG7T4ZDvUsWM\nme3zV8CNT7oI8CCrFqTlY0wiVk/pVnG0+sszI+PfsCMRC1E4cvAspK4xuAjwIPEo\n/DkT7NmMK7SSwy9675NI+i0QsiT2E+qAr5X/ke6kCPEEYPixMfAIPRP0zMCZz9gA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb23/8BBu/dX5Len5rPrPOQgfWMz3CPEEYPixMfAI52NZbAuuG3kAg9/jDS75DI4j\nImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BB1gL7b2MkJTKZK\nsJ1zzqRmCPEEYPixMfAI853gMr2ySsEAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2Uu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQscqEUMKfPQE9sFEFEt0h\nMwjxBGD4sTHwCPCRgmPfU1SBAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f5cb1c0e032b5f448e96213ec274ecba8e6220fc\nparent 78c361086fc0bf27612e8142bd33e05e37a36af6\nauthor Jon Atack <jon@atack.com> 1626880506 +0200\ncommitter Jon Atack <jon@atack.com> 1626911014 +0200\n\ntest: replace magic values by constants in rpc_blockchain.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d548dc71e4849f638fccaea6be86ac4fa5304f01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d548dc71e4849f638fccaea6be86ac4fa5304f01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d548dc71e4849f638fccaea6be86ac4fa5304f01/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78c361086fc0bf27612e8142bd33e05e37a36af6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78c361086fc0bf27612e8142bd33e05e37a36af6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78c361086fc0bf27612e8142bd33e05e37a36af6"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 25,
      "deletions": 24
    },
    "files": [
      {
        "sha": "2b604b7b23f2d1293c3ff55646ec35ce93cecbf5",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 25,
        "deletions": 24,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d548dc71e4849f638fccaea6be86ac4fa5304f01/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d548dc71e4849f638fccaea6be86ac4fa5304f01/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=d548dc71e4849f638fccaea6be86ac4fa5304f01",
        "patch": "@@ -49,9 +49,10 @@\n from test_framework.wallet import MiniWallet\n \n \n+HEIGHT = 200  # blocks mined\n TIME_RANGE_STEP = 600  # ten-minute steps\n-TIME_RANGE_MTP = TIME_GENESIS_BLOCK + 194 * TIME_RANGE_STEP\n-TIME_RANGE_END = TIME_GENESIS_BLOCK + 200 * TIME_RANGE_STEP\n+TIME_RANGE_MTP = TIME_GENESIS_BLOCK + (HEIGHT - 6) * TIME_RANGE_STEP\n+TIME_RANGE_END = TIME_GENESIS_BLOCK + HEIGHT * TIME_RANGE_STEP\n \n \n class BlockchainTest(BitcoinTestFramework):\n@@ -76,11 +77,11 @@ def run_test(self):\n         assert self.nodes[0].verifychain(4, 0)\n \n     def mine_chain(self):\n-        self.log.info(\"Generate 200 blocks after the genesis block in ten-minute steps\")\n+        self.log.info(f\"Generate {HEIGHT} blocks after the genesis block in ten-minute steps\")\n         for t in range(TIME_GENESIS_BLOCK, TIME_RANGE_END, TIME_RANGE_STEP):\n             self.nodes[0].setmocktime(t)\n             self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n-        assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n+        assert_equal(self.nodes[0].getblockchaininfo()['blocks'], HEIGHT)\n \n     def _test_getblockchaininfo(self):\n         self.log.info(\"Test getblockchaininfo\")\n@@ -153,8 +154,8 @@ def _test_getblockchaininfo(self):\n                     'statistics': {\n                         'period': 144,\n                         'threshold': 108,\n-                        'elapsed': 57,\n-                        'count': 57,\n+                        'elapsed': HEIGHT - 143,\n+                        'count': HEIGHT - 143,\n                         'possible': True,\n                     },\n                     'min_activation_height': 0,\n@@ -191,33 +192,33 @@ def _test_getchaintxstats(self):\n         assert_raises_rpc_error(-8, \"blockhash must be of length 64 (not 1, for '0')\", self.nodes[0].getchaintxstats, blockhash='0')\n         assert_raises_rpc_error(-8, \"blockhash must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getchaintxstats, blockhash='ZZZ0000000000000000000000000000000000000000000000000000000000000')\n         assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getchaintxstats, blockhash='0000000000000000000000000000000000000000000000000000000000000000')\n-        blockhash = self.nodes[0].getblockhash(200)\n+        blockhash = self.nodes[0].getblockhash(HEIGHT)\n         self.nodes[0].invalidateblock(blockhash)\n         assert_raises_rpc_error(-8, \"Block is not in main chain\", self.nodes[0].getchaintxstats, blockhash=blockhash)\n         self.nodes[0].reconsiderblock(blockhash)\n \n         chaintxstats = self.nodes[0].getchaintxstats(nblocks=1)\n         # 200 txs plus genesis tx\n-        assert_equal(chaintxstats['txcount'], 201)\n+        assert_equal(chaintxstats['txcount'], HEIGHT + 1)\n         # tx rate should be 1 per 10 minutes, or 1/600\n         # we have to round because of binary math\n-        assert_equal(round(chaintxstats['txrate'] * 600, 10), Decimal(1))\n+        assert_equal(round(chaintxstats['txrate'] * TIME_RANGE_STEP, 10), Decimal(1))\n \n         b1_hash = self.nodes[0].getblockhash(1)\n         b1 = self.nodes[0].getblock(b1_hash)\n-        b200_hash = self.nodes[0].getblockhash(200)\n+        b200_hash = self.nodes[0].getblockhash(HEIGHT)\n         b200 = self.nodes[0].getblock(b200_hash)\n         time_diff = b200['mediantime'] - b1['mediantime']\n \n         chaintxstats = self.nodes[0].getchaintxstats()\n         assert_equal(chaintxstats['time'], b200['time'])\n-        assert_equal(chaintxstats['txcount'], 201)\n+        assert_equal(chaintxstats['txcount'], HEIGHT + 1)\n         assert_equal(chaintxstats['window_final_block_hash'], b200_hash)\n-        assert_equal(chaintxstats['window_final_block_height'], 200)\n-        assert_equal(chaintxstats['window_block_count'], 199)\n-        assert_equal(chaintxstats['window_tx_count'], 199)\n+        assert_equal(chaintxstats['window_final_block_height'], HEIGHT )\n+        assert_equal(chaintxstats['window_block_count'], HEIGHT - 1)\n+        assert_equal(chaintxstats['window_tx_count'], HEIGHT - 1)\n         assert_equal(chaintxstats['window_interval'], time_diff)\n-        assert_equal(round(chaintxstats['txrate'] * time_diff, 10), Decimal(199))\n+        assert_equal(round(chaintxstats['txrate'] * time_diff, 10), Decimal(HEIGHT - 1))\n \n         chaintxstats = self.nodes[0].getchaintxstats(blockhash=b1_hash)\n         assert_equal(chaintxstats['time'], b1['time'])\n@@ -234,11 +235,11 @@ def _test_gettxoutsetinfo(self):\n         res = node.gettxoutsetinfo()\n \n         assert_equal(res['total_amount'], Decimal('8725.00000000'))\n-        assert_equal(res['transactions'], 200)\n-        assert_equal(res['height'], 200)\n-        assert_equal(res['txouts'], 200)\n+        assert_equal(res['transactions'], HEIGHT)\n+        assert_equal(res['height'], HEIGHT)\n+        assert_equal(res['txouts'], HEIGHT)\n         assert_equal(res['bogosize'], 16800),\n-        assert_equal(res['bestblock'], node.getblockhash(200))\n+        assert_equal(res['bestblock'], node.getblockhash(HEIGHT))\n         size = res['disk_size']\n         assert size > 6400\n         assert size < 64000\n@@ -298,11 +299,11 @@ def _test_getblockheader(self):\n         assert_raises_rpc_error(-5, \"Block not found\", node.getblockheader, \"0cf7bb8b1697ea987f3b223ba7819250cae33efacb068d23dc24859824a77844\")\n \n         besthash = node.getbestblockhash()\n-        secondbesthash = node.getblockhash(199)\n+        secondbesthash = node.getblockhash(HEIGHT - 1)\n         header = node.getblockheader(blockhash=besthash)\n \n         assert_equal(header['hash'], besthash)\n-        assert_equal(header['height'], 200)\n+        assert_equal(header['height'], HEIGHT)\n         assert_equal(header['confirmations'], 1)\n         assert_equal(header['previousblockhash'], secondbesthash)\n         assert_is_hex_string(header['chainwork'])\n@@ -341,9 +342,9 @@ def _test_getnetworkhashps(self):\n         assert abs(hashes_per_second * 300 - 1) < 0.0001\n \n     def _test_stopatheight(self):\n-        assert_equal(self.nodes[0].getblockcount(), 200)\n+        assert_equal(self.nodes[0].getblockcount(), HEIGHT)\n         self.nodes[0].generatetoaddress(6, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n-        assert_equal(self.nodes[0].getblockcount(), 206)\n+        assert_equal(self.nodes[0].getblockcount(), HEIGHT + 6)\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n@@ -353,7 +354,7 @@ def _test_stopatheight(self):\n         self.log.debug('Node should stop at this height...')\n         self.nodes[0].wait_until_stopped()\n         self.start_node(0)\n-        assert_equal(self.nodes[0].getblockcount(), 207)\n+        assert_equal(self.nodes[0].getblockcount(), HEIGHT + 7)\n \n     def _test_waitforblockheight(self):\n         self.log.info(\"Test waitforblockheight\")"
      }
    ]
  },
  {
    "sha": "ef5e9304cd407adab1563f24215da1b582274c20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjVlOTMwNGNkNDA3YWRhYjE1NjNmMjQyMTVkYTFiNTgyMjc0YzIw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T16:11:19Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-21T23:43:45Z"
      },
      "message": "test: update logging and docstring in rpc_blockchain.py",
      "tree": {
        "sha": "72590fed97d94d0db00a1bdf93ee84838287dfa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72590fed97d94d0db00a1bdf93ee84838287dfa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef5e9304cd407adab1563f24215da1b582274c20",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmD4sTIACgkQT1chs9Dj\nkh2voQ/9GYedLX9z2H9cjf7bNZ2KiqNupXCRmXxYvOr1RxU7YBqPSTbiJYc4VkvQ\nYKYas/mgHffOhQpiKAjc3YWWuzTwxqys5XkakCQ16sbOppU839i3swB4GoRDS69P\nnc3GSqDBxso3vyRj4VAI1+KrmCZocbLiLjzGRjNT6yPg230xat9bF+prFYROeQ+P\n5+OPEDw3Ng3jPsRXsDkIbfGA3PUOM5veffFgoyHQo5ZlrF9PGOav4ZkNbjnp105i\nH2IG9yULRRZRockrIT3N5lXUVH8AhG1rAWEWUklV6TrSnlPBRWlP4W6SsBd2Wkpg\nxaxucye11M9ZXPbuzI3xP05jFOXQ4PvpJXToX8H9VQ6NoH5YXIZTrr2mkLTU3rUn\nLjJmHqBEhKoJKsiqm2QG/kK/ziG2NyN2iO6lDc9cRt2Yv0t66/N2EqNcUsswKQ0b\nJj6aRwKWelwBxtXeozKBWy3JvPZaqNWHJs6C1mwv0GL8ONu6VzCB2asMSZe0L3vs\n5KkjyIzPa10lPpIiw0ZsLdN1ULoAMEo9Hq84GjWg3F7EdwCAKXpAVcbLxTHM82/5\nupeYHXOMiee/kdh2wfYGr8+gDM/odLXmi9uEXxVYcJLJ/T+T8nftmotZ1lmV/4em\nSn1kMA0PE2Z8ORlvkhnj8NIcW4z+YH7reUwWuSWa4TLtKSaLtto=\n=0eog\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIE2YQOPgyB/JLPTrAk5NNW6hICeCtHdiAurQgdJYNXaCCP/wECIPNvxXXy+V\nplhvSh8lFfoI8QRg+LEz8Aiidd7uY3+SWQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEJ7Fd5EAz9h6ctPk8Q4f9MkI\n8QRg+LEz8AhdOP45oqjQ0gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEM2ByM271Ve4O4xfeebq6SII8QRg+LEz8AjqEv0EeZUG\nWACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQ07X89IqGiL3Fjk1mXYFjmgjwIPo7w8UDelMvMfGZ1T7JksizOPnX\nlLg3dVZivK22uZMpCPAghH6vPLaIzyr0v+00Nv8ZrlB2YWCBnJcQBxuvjucDnqYI\n8QRg+LE08Ag+eDF+DmUz9QCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 72590fed97d94d0db00a1bdf93ee84838287dfa7\nparent d548dc71e4849f638fccaea6be86ac4fa5304f01\nauthor Jon Atack <jon@atack.com> 1626883879 +0200\ncommitter Jon Atack <jon@atack.com> 1626911025 +0200\n\ntest: update logging and docstring in rpc_blockchain.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef5e9304cd407adab1563f24215da1b582274c20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef5e9304cd407adab1563f24215da1b582274c20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef5e9304cd407adab1563f24215da1b582274c20/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d548dc71e4849f638fccaea6be86ac4fa5304f01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d548dc71e4849f638fccaea6be86ac4fa5304f01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d548dc71e4849f638fccaea6be86ac4fa5304f01"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 17,
      "deletions": 11
    },
    "files": [
      {
        "sha": "794b2e5e0810f7111fccbab3f1545c92a4498782",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef5e9304cd407adab1563f24215da1b582274c20/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef5e9304cd407adab1563f24215da1b582274c20/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=ef5e9304cd407adab1563f24215da1b582274c20",
        "patch": "@@ -6,13 +6,15 @@\n \n Test the following RPCs:\n     - getblockchaininfo\n+    - getchaintxstats\n     - gettxoutsetinfo\n-    - getdifficulty\n-    - getbestblockhash\n-    - getblockhash\n     - getblockheader\n-    - getchaintxstats\n+    - getdifficulty\n     - getnetworkhashps\n+    - waitforblockheight\n+    - getblock\n+    - getblockhash\n+    - getbestblockhash\n     - verifychain\n \n Tests correspond to code in rpc/blockchain.cpp.\n@@ -246,7 +248,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(len(res['bestblock']), 64)\n         assert_equal(len(res['hash_serialized_2']), 64)\n \n-        self.log.info(\"Test that gettxoutsetinfo() works for blockchain with just the genesis block\")\n+        self.log.info(\"Test gettxoutsetinfo works for blockchain with just the genesis block\")\n         b1hash = node.getblockhash(1)\n         node.invalidateblock(b1hash)\n \n@@ -259,7 +261,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res2['bestblock'], node.getblockhash(0))\n         assert_equal(len(res2['hash_serialized_2']), 64)\n \n-        self.log.info(\"Test that gettxoutsetinfo() returns the same result after invalidate/reconsider block\")\n+        self.log.info(\"Test gettxoutsetinfo returns the same result after invalidate/reconsider block\")\n         node.reconsiderblock(b1hash)\n \n         res3 = node.gettxoutsetinfo()\n@@ -268,7 +270,7 @@ def _test_gettxoutsetinfo(self):\n         del res['disk_size'], res3['disk_size']\n         assert_equal(res, res3)\n \n-        self.log.info(\"Test hash_type option for gettxoutsetinfo()\")\n+        self.log.info(\"Test gettxoutsetinfo hash_type option\")\n         # Adding hash_type 'hash_serialized_2', which is the default, should\n         # not change the result.\n         res4 = node.gettxoutsetinfo(hash_type='hash_serialized_2')\n@@ -292,6 +294,7 @@ def _test_gettxoutsetinfo(self):\n         assert_raises_rpc_error(-8, \"foohash is not a valid hash_type\", node.gettxoutsetinfo, \"foohash\")\n \n     def _test_getblockheader(self):\n+        self.log.info(\"Test getblockheader\")\n         node = self.nodes[0]\n \n         assert_raises_rpc_error(-8, \"hash must be of length 64 (not 8, for 'nonsense')\", node.getblockheader, \"nonsense\")\n@@ -331,17 +334,20 @@ def _test_getblockheader(self):\n         assert 'nextblockhash' not in node.getblockheader(node.getbestblockhash())\n \n     def _test_getdifficulty(self):\n+        self.log.info(\"Test getdifficulty\")\n         difficulty = self.nodes[0].getdifficulty()\n         # 1 hash in 2 should be valid, so difficulty should be 1/2**31\n         # binary => decimal => binary math is why we do this check\n         assert abs(difficulty * 2**31 - 1) < 0.0001\n \n     def _test_getnetworkhashps(self):\n+        self.log.info(\"Test getnetworkhashps\")\n         hashes_per_second = self.nodes[0].getnetworkhashps()\n         # This should be 2 hashes every 10 minutes or 1/300\n         assert abs(hashes_per_second * 300 - 1) < 0.0001\n \n     def _test_stopatheight(self):\n+        self.log.info(\"Test stopping at height\")\n         assert_equal(self.nodes[0].getblockcount(), HEIGHT)\n         self.nodes[0].generatetoaddress(6, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n         assert_equal(self.nodes[0].getblockcount(), HEIGHT + 6)\n@@ -406,20 +412,20 @@ def _test_getblock(self):\n         miniwallet.send_self_transfer(fee_rate=fee_per_kb, from_node=node)\n         blockhash = node.generate(1)[0]\n \n-        self.log.info(\"Test that getblock with verbosity 1 doesn't include fee\")\n+        self.log.info(\"Test getblock with verbosity 1 doesn't include fee\")\n         block = node.getblock(blockhash, 1)\n         assert 'fee' not in block['tx'][1]\n \n-        self.log.info('Test that getblock with verbosity 2 includes expected fee')\n+        self.log.info('Test getblock with verbosity 2 includes expected fee')\n         block = node.getblock(blockhash, 2)\n         tx = block['tx'][1]\n         assert 'fee' in tx\n         assert_equal(tx['fee'], tx['vsize'] * fee_per_byte)\n \n-        self.log.info(\"Test that getblock with verbosity 2 still works with pruned Undo data\")\n+        self.log.info(\"Test getblock with verbosity 2 still works with pruned Undo data\")\n         datadir = get_datadir_path(self.options.tmpdir, 0)\n \n-        self.log.info(\"Test that getblock with invalid verbosity type returns proper error message\")\n+        self.log.info(\"Test getblock with invalid verbosity type returns proper error message\")\n         assert_raises_rpc_error(-1, \"JSON value is not an integer as expected\", node.getblock, blockhash, \"2\")\n \n         def move_block_file(old, new):"
      }
    ]
  }
]