[
  {
    "sha": "9b42f8be7031a33e4bdd6e5c016044ecb454114d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjQyZjhiZTcwMzFhMzNlNGJkZDZlNWMwMTYwNDRlY2I0NTQxMTRk",
    "commit": {
      "author": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-09T02:05:35Z"
      },
      "committer": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-09T02:05:35Z"
      },
      "message": "Delete the file at '.appveyor.yml'",
      "tree": {
        "sha": "3b65bed77aa90b063a65a54b5d3b7f13d4573751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b65bed77aa90b063a65a54b5d3b7f13d4573751"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b42f8be7031a33e4bdd6e5c016044ecb454114d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b42f8be7031a33e4bdd6e5c016044ecb454114d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b42f8be7031a33e4bdd6e5c016044ecb454114d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b42f8be7031a33e4bdd6e5c016044ecb454114d/comments",
    "author": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3203a99d886177eee9d1f9cd8411e215118a4e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3203a99d886177eee9d1f9cd8411e215118a4e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3203a99d886177eee9d1f9cd8411e215118a4e6"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 0,
      "deletions": 63
    },
    "files": [
      {
        "sha": "3ca7818ecad24cdb4937763142a5ff746aa92605",
        "filename": ".appveyor.yml",
        "status": "removed",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3203a99d886177eee9d1f9cd8411e215118a4e6/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3203a99d886177eee9d1f9cd8411e215118a4e6/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=d3203a99d886177eee9d1f9cd8411e215118a4e6",
        "patch": "@@ -1,63 +0,0 @@\n-version: '{branch}.{build}'\n-skip_tags: true\n-image: Visual Studio 2019\n-configuration: Release\n-platform: x64\n-clone_depth: 5\n-environment:\n-  PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n-  PYTHONUTF8: 1\n-  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt51211x64_static_vs2019_16101/Qt5.12.11_x64_static_vs2019_16101.zip'\n-  QT_DOWNLOAD_HASH: 'cf1b58107fadbf0d9a957d14dab16cde6b6eb6936a1908472da1f967dda34a3a'\n-  QT_LOCAL_PATH: 'C:\\Qt5.12.11_x64_static_vs2019_16101'\n-  VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'\n-install:\n-# Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n-# - cmd: pip install zmq\n-# The powershell block below is to set up vcpkg to install the c++ dependencies. The pseudo code is:\n-#    a. Checkout the vcpkg source (including port files) for the specific checkout and build the vcpkg binary,\n-#    b. Append a setting to the vcpkg cmake config file to only do release builds of dependencies (skipping deubg builds saves ~5 mins).\n-# Note originally this block also installed the dependencies using 'vcpkg install'. Dependencies are now installed\n-# as part of the msbuild command using vcpkg mainfests.\n-- ps: |\n-      cd c:\\tools\\vcpkg\n-      $env:GIT_REDIRECT_STDERR = '2>&1' # git is writing non-errors to STDERR when doing git pull. Send to STDOUT instead.\n-      git -c advice.detachedHead=false checkout $env:VCPKG_TAG\n-      .\\bootstrap-vcpkg.bat > $null\n-      Add-Content \"C:\\tools\\vcpkg\\triplets\\$env:PLATFORM-windows-static.cmake\" \"set(VCPKG_BUILD_TYPE release)\"\n-      cd \"$env:APPVEYOR_BUILD_FOLDER\"\n-before_build:\n-# Powershell block below is to download and extract the Qt static libraries. The pseudo code is:\n-#    a. Download the zip file with the prebuilt Qt static libraries.\n-#    b. Check that the downloaded file matches the expected hash.\n-#    c. Extract the zip file to the specific destination path expected by the msbuild projects.\n-- ps: |\n-      Write-Host \"Downloading Qt binaries.\";\n-      Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n-      Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n-      if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n-        Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n-        Write-Host \"Qt binary download matched the expected hash.\";\n-      }\n-      else {\n-        Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n-        Exit-AppveyorBuild;\n-      }\n-- cmd: python build_msvc\\msvc-autogen.py\n-build_script:\n-- cmd: msbuild /p:TrackFileAccess=false build_msvc\\bitcoin.sln /m /v:q /nologo\n-after_build:\n-#- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n-test_script:\n-- cmd: src\\test_bitcoin.exe -l test_suite\n-- cmd: src\\bench_bitcoin.exe > NUL\n-- ps:  python test\\util\\bitcoin-util-test.py\n-- cmd: python test\\util\\rpcauth-test.py\n-# Fee estimation test failing on appveyor with: WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted.\n-# functional tests disabled for now. See\n-# https://github.com/bitcoin/bitcoin/pull/18626#issuecomment-613396202\n-# https://github.com/bitcoin/bitcoin/issues/18623\n-# - cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n-artifacts:\n-#- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n-deploy: off"
      }
    ]
  },
  {
    "sha": "60b4d709b54e94051aef4920a3c86d672ba9e7b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGI0ZDcwOWI1NGU5NDA1MWFlZjQ5MjBhM2M4NmQ2NzJiYTllN2I2",
    "commit": {
      "author": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-09T02:05:36Z"
      },
      "committer": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-09T02:05:36Z"
      },
      "message": "Rename .appveyor.yml to .appveyor.html",
      "tree": {
        "sha": "0d494712cc0a425caf7fc0d4b221816717ab49a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d494712cc0a425caf7fc0d4b221816717ab49a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60b4d709b54e94051aef4920a3c86d672ba9e7b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b4d709b54e94051aef4920a3c86d672ba9e7b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60b4d709b54e94051aef4920a3c86d672ba9e7b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b4d709b54e94051aef4920a3c86d672ba9e7b6/comments",
    "author": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b42f8be7031a33e4bdd6e5c016044ecb454114d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b42f8be7031a33e4bdd6e5c016044ecb454114d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b42f8be7031a33e4bdd6e5c016044ecb454114d"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 63,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3ca7818ecad24cdb4937763142a5ff746aa92605",
        "filename": ".appveyor.html",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60b4d709b54e94051aef4920a3c86d672ba9e7b6/.appveyor.html",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60b4d709b54e94051aef4920a3c86d672ba9e7b6/.appveyor.html",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.html?ref=60b4d709b54e94051aef4920a3c86d672ba9e7b6",
        "patch": "@@ -0,0 +1,63 @@\n+version: '{branch}.{build}'\n+skip_tags: true\n+image: Visual Studio 2019\n+configuration: Release\n+platform: x64\n+clone_depth: 5\n+environment:\n+  PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n+  PYTHONUTF8: 1\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/qt51211x64_static_vs2019_16101/Qt5.12.11_x64_static_vs2019_16101.zip'\n+  QT_DOWNLOAD_HASH: 'cf1b58107fadbf0d9a957d14dab16cde6b6eb6936a1908472da1f967dda34a3a'\n+  QT_LOCAL_PATH: 'C:\\Qt5.12.11_x64_static_vs2019_16101'\n+  VCPKG_TAG: '75522bb1f2e7d863078bcd06322348f053a9e33f'\n+install:\n+# Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n+# - cmd: pip install zmq\n+# The powershell block below is to set up vcpkg to install the c++ dependencies. The pseudo code is:\n+#    a. Checkout the vcpkg source (including port files) for the specific checkout and build the vcpkg binary,\n+#    b. Append a setting to the vcpkg cmake config file to only do release builds of dependencies (skipping deubg builds saves ~5 mins).\n+# Note originally this block also installed the dependencies using 'vcpkg install'. Dependencies are now installed\n+# as part of the msbuild command using vcpkg mainfests.\n+- ps: |\n+      cd c:\\tools\\vcpkg\n+      $env:GIT_REDIRECT_STDERR = '2>&1' # git is writing non-errors to STDERR when doing git pull. Send to STDOUT instead.\n+      git -c advice.detachedHead=false checkout $env:VCPKG_TAG\n+      .\\bootstrap-vcpkg.bat > $null\n+      Add-Content \"C:\\tools\\vcpkg\\triplets\\$env:PLATFORM-windows-static.cmake\" \"set(VCPKG_BUILD_TYPE release)\"\n+      cd \"$env:APPVEYOR_BUILD_FOLDER\"\n+before_build:\n+# Powershell block below is to download and extract the Qt static libraries. The pseudo code is:\n+#    a. Download the zip file with the prebuilt Qt static libraries.\n+#    b. Check that the downloaded file matches the expected hash.\n+#    c. Extract the zip file to the specific destination path expected by the msbuild projects.\n+- ps: |\n+      Write-Host \"Downloading Qt binaries.\";\n+      Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n+      Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n+      if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n+        Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n+        Write-Host \"Qt binary download matched the expected hash.\";\n+      }\n+      else {\n+        Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n+        Exit-AppveyorBuild;\n+      }\n+- cmd: python build_msvc\\msvc-autogen.py\n+build_script:\n+- cmd: msbuild /p:TrackFileAccess=false build_msvc\\bitcoin.sln /m /v:q /nologo\n+after_build:\n+#- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n+test_script:\n+- cmd: src\\test_bitcoin.exe -l test_suite\n+- cmd: src\\bench_bitcoin.exe > NUL\n+- ps:  python test\\util\\bitcoin-util-test.py\n+- cmd: python test\\util\\rpcauth-test.py\n+# Fee estimation test failing on appveyor with: WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted.\n+# functional tests disabled for now. See\n+# https://github.com/bitcoin/bitcoin/pull/18626#issuecomment-613396202\n+# https://github.com/bitcoin/bitcoin/issues/18623\n+# - cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n+artifacts:\n+#- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n+deploy: off"
      }
    ]
  },
  {
    "sha": "d71a1da43ff0b7b1fd2cfe86897873bc91a3b283",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzFhMWRhNDNmZjBiN2IxZmQyY2ZlODY4OTc4NzNiYzkxYTNiMjgz",
    "commit": {
      "author": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-18T23:44:41Z"
      },
      "committer": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-18T23:44:41Z"
      },
      "message": "Delete the file at 'build-aux/m4/bitcoin_qt.m4'",
      "tree": {
        "sha": "66711f1a65d935f49cda88d3ac5ced2fcfa33e7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66711f1a65d935f49cda88d3ac5ced2fcfa33e7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d71a1da43ff0b7b1fd2cfe86897873bc91a3b283",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71a1da43ff0b7b1fd2cfe86897873bc91a3b283",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d71a1da43ff0b7b1fd2cfe86897873bc91a3b283",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71a1da43ff0b7b1fd2cfe86897873bc91a3b283/comments",
    "author": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60b4d709b54e94051aef4920a3c86d672ba9e7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60b4d709b54e94051aef4920a3c86d672ba9e7b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60b4d709b54e94051aef4920a3c86d672ba9e7b6"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 0,
      "deletions": 398
    },
    "files": [
      {
        "sha": "5b5a8ed16e252844d88785da1ab26facc8e3b27f",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 398,
        "changes": 398,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60b4d709b54e94051aef4920a3c86d672ba9e7b6/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60b4d709b54e94051aef4920a3c86d672ba9e7b6/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=60b4d709b54e94051aef4920a3c86d672ba9e7b6",
        "patch": "@@ -1,398 +0,0 @@\n-dnl Copyright (c) 2013-2016 The Bitcoin Core developers\n-dnl Distributed under the MIT software license, see the accompanying\n-dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-dnl Helper for cases where a qt dependency is not met.\n-dnl Output: If qt version is auto, set bitcoin_enable_qt to false. Else, exit.\n-AC_DEFUN([BITCOIN_QT_FAIL],[\n-  if test \"x$bitcoin_qt_want_version\" = xauto && test \"x$bitcoin_qt_force\" != xyes; then\n-    if test \"x$bitcoin_enable_qt\" != xno; then\n-      AC_MSG_WARN([$1; bitcoin-qt frontend will not be built])\n-    fi\n-    bitcoin_enable_qt=no\n-    bitcoin_enable_qt_test=no\n-  else\n-    AC_MSG_ERROR([$1])\n-  fi\n-])\n-\n-AC_DEFUN([BITCOIN_QT_CHECK],[\n-  if test \"x$bitcoin_enable_qt\" != xno && test \"x$bitcoin_qt_want_version\" != xno; then\n-    true\n-    $1\n-  else\n-    true\n-    $2\n-  fi\n-])\n-\n-dnl BITCOIN_QT_PATH_PROGS([FOO], [foo foo2], [/path/to/search/first], [continue if missing])\n-dnl Helper for finding the path of programs needed for Qt.\n-dnl Inputs: $1: Variable to be set\n-dnl Inputs: $2: List of programs to search for\n-dnl Inputs: $3: Look for $2 here before $PATH\n-dnl Inputs: $4: If \"yes\", don't fail if $2 is not found.\n-dnl Output: $1 is set to the path of $2 if found. $2 are searched in order.\n-AC_DEFUN([BITCOIN_QT_PATH_PROGS],[\n-  BITCOIN_QT_CHECK([\n-    if test \"x$3\" != x; then\n-      AC_PATH_PROGS($1,$2,,$3)\n-    else\n-      AC_PATH_PROGS($1,$2)\n-    fi\n-    if test \"x$$1\" = x && test \"x$4\" != xyes; then\n-      BITCOIN_QT_FAIL([$1 not found])\n-    fi\n-  ])\n-])\n-\n-dnl Initialize qt input.\n-dnl This must be called before any other BITCOIN_QT* macros to ensure that\n-dnl input variables are set correctly.\n-dnl CAUTION: Do not use this inside of a conditional.\n-AC_DEFUN([BITCOIN_QT_INIT],[\n-  dnl enable qt support\n-  AC_ARG_WITH([gui],\n-    [AS_HELP_STRING([--with-gui@<:@=no|qt5|auto@:>@],\n-    [build bitcoin-qt GUI (default=auto)])],\n-    [\n-     bitcoin_qt_want_version=$withval\n-     if test \"x$bitcoin_qt_want_version\" = xyes; then\n-       bitcoin_qt_force=yes\n-       bitcoin_qt_want_version=auto\n-     fi\n-    ],\n-    [bitcoin_qt_want_version=auto])\n-\n-  AS_IF([test \"x$with_gui\" = xqt5_debug],\n-        [AS_CASE([$host],\n-                 [*darwin*], [qt_lib_suffix=_debug],\n-                 [*mingw*], [qt_lib_suffix=d],\n-                 [qt_lib_suffix= ]); bitcoin_qt_want_version=qt5],\n-        [qt_lib_suffix= ])\n-\n-  AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [])\n-  AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [])\n-  AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [])\n-  AC_ARG_WITH([qt-translationdir],[AS_HELP_STRING([--with-qt-translationdir=PLUGIN_DIR],[specify qt translation path (overridden by pkgconfig)])], [qt_translation_path=$withval], [])\n-  AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path])], [qt_bin_path=$withval], [])\n-\n-  AC_ARG_WITH([qtdbus],\n-    [AS_HELP_STRING([--with-qtdbus],\n-    [enable DBus support (default is yes if qt is enabled and QtDBus is found, except on Android)])],\n-    [use_dbus=$withval],\n-    [use_dbus=auto])\n-\n-  dnl Android doesn't support D-Bus and certainly doesn't use it for notifications\n-  case $host in\n-    *android*)\n-      if test \"x$use_dbus\" != xyes; then\n-        use_dbus=no\n-      fi\n-    ;;\n-  esac\n-\n-  AC_SUBST(QT_TRANSLATION_DIR,$qt_translation_path)\n-])\n-\n-dnl Find Qt libraries and includes.\n-dnl\n-dnl   BITCOIN_QT_CONFIGURE([MINIMUM-VERSION])\n-dnl\n-dnl Outputs: See _BITCOIN_QT_FIND_LIBS\n-dnl Outputs: Sets variables for all qt-related tools.\n-dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n-AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n-  qt_version=\">= $1\"\n-  qt_lib_prefix=\"Qt5\"\n-  BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS])\n-\n-  dnl This is ugly and complicated. Yuck. Works as follows:\n-  dnl We check a header to find out whether Qt is built statically.\n-  dnl When Qt is built statically, some plugins must be linked into\n-  dnl the final binary as well. _BITCOIN_QT_CHECK_STATIC_PLUGIN does\n-  dnl a quick link-check and appends the results to QT_LIBS.\n-  BITCOIN_QT_CHECK([\n-  TEMP_CPPFLAGS=$CPPFLAGS\n-  TEMP_CXXFLAGS=$CXXFLAGS\n-  CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n-  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n-  _BITCOIN_QT_IS_STATIC\n-  if test \"x$bitcoin_cv_static_qt\" = xyes; then\n-    _BITCOIN_QT_CHECK_STATIC_LIBS\n-\n-    if test \"x$qt_plugin_path\" != x; then\n-      if test -d \"$qt_plugin_path/platforms\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n-      fi\n-      if test -d \"$qt_plugin_path/styles\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/styles\"\n-      fi\n-      if test -d \"$qt_plugin_path/accessible\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-      fi\n-      if test -d \"$qt_plugin_path/platforms/android\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms/android -lqtfreetype -lEGL\"\n-      fi\n-    fi\n-\n-    AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-    if test \"x$TARGET_OS\" != xandroid; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMinimalIntegrationPlugin], [-lqminimal])\n-      AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n-    fi\n-    if test \"x$TARGET_OS\" = xwindows; then\n-      dnl Linking against wtsapi32 is required. See #17749 and\n-      dnl https://bugreports.qt.io/browse/QTBUG-27097.\n-      AX_CHECK_LINK_FLAG([-lwtsapi32], [QT_LIBS=\"$QT_LIBS -lwtsapi32\"], [AC_MSG_ERROR([could not link against -lwtsapi32])])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsIntegrationPlugin], [-lqwindows])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsVistaStylePlugin], [-lqwindowsvistastyle])\n-      AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n-    elif test \"x$TARGET_OS\" = xlinux; then\n-      dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n-      AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"$QT_LIBS -lxcb-shm\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n-      AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n-    elif test \"x$TARGET_OS\" = xdarwin; then\n-      AX_CHECK_LINK_FLAG([[-framework Carbon]],[QT_LIBS=\"$QT_LIBS -framework Carbon\"],[AC_MSG_ERROR(could not link against Carbon framework)])\n-      AX_CHECK_LINK_FLAG([[-framework IOSurface]],[QT_LIBS=\"$QT_LIBS -framework IOSurface\"],[AC_MSG_ERROR(could not link against IOSurface framework)])\n-      AX_CHECK_LINK_FLAG([[-framework Metal]],[QT_LIBS=\"$QT_LIBS -framework Metal\"],[AC_MSG_ERROR(could not link against Metal framework)])\n-      AX_CHECK_LINK_FLAG([[-framework QuartzCore]],[QT_LIBS=\"$QT_LIBS -framework QuartzCore\"],[AC_MSG_ERROR(could not link against QuartzCore framework)])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QCocoaIntegrationPlugin], [-lqcocoa])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMacStylePlugin], [-lqmacstyle])\n-      AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n-    elif test \"x$TARGET_OS\" = xandroid; then\n-      QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype $QT_LIBS\"\n-      AC_DEFINE(QT_QPA_PLATFORM_ANDROID, 1, [Define this symbol if the qt platform is android])\n-    fi\n-  fi\n-  CPPFLAGS=$TEMP_CPPFLAGS\n-  CXXFLAGS=$TEMP_CXXFLAGS\n-  ])\n-\n-  if test \"x$qt_bin_path\" = x; then\n-    qt_bin_path=\"`$PKG_CONFIG --variable=host_bins ${qt_lib_prefix}Core 2>/dev/null`\"\n-  fi\n-\n-  if test \"x$use_hardening\" != xno; then\n-    BITCOIN_QT_CHECK([\n-    AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n-    TEMP_CPPFLAGS=$CPPFLAGS\n-    TEMP_CXXFLAGS=$CXXFLAGS\n-    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n-    CXXFLAGS=\"$PIE_FLAGS $CXXFLAGS\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-        #include <QtCore/qconfig.h>\n-        #ifndef QT_VERSION\n-        #  include <QtCore/qglobal.h>\n-        #endif\n-      ]],\n-      [[\n-        #if defined(QT_REDUCE_RELOCATIONS)\n-        choke\n-        #endif\n-      ]])],\n-      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n-      [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n-    )\n-    CPPFLAGS=$TEMP_CPPFLAGS\n-    CXXFLAGS=$TEMP_CXXFLAGS\n-    ])\n-  else\n-    BITCOIN_QT_CHECK([\n-    AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n-    TEMP_CPPFLAGS=$CPPFLAGS\n-    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-        #include <QtCore/qconfig.h>\n-        #ifndef QT_VERSION\n-        #  include <QtCore/qglobal.h>\n-        #endif\n-      ]],\n-      [[\n-        #if defined(QT_REDUCE_RELOCATIONS)\n-        choke\n-        #endif\n-      ]])],\n-      [ AC_MSG_RESULT(no)],\n-      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n-    )\n-    CPPFLAGS=$TEMP_CPPFLAGS\n-    ])\n-  fi\n-\n-  BITCOIN_QT_PATH_PROGS([MOC], [moc-qt5 moc5 moc], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([UIC], [uic-qt5 uic5 uic], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt5 rcc5 rcc], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([LRELEASE], [lrelease-qt5 lrelease5 lrelease], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([LUPDATE], [lupdate-qt5 lupdate5 lupdate],$qt_bin_path, yes)\n-  BITCOIN_QT_PATH_PROGS([LCONVERT], [lconvert-qt5 lconvert5 lconvert], $qt_bin_path, yes)\n-\n-  MOC_DEFS='-DHAVE_CONFIG_H -I$(srcdir)'\n-  case $host in\n-    *darwin*)\n-     BITCOIN_QT_CHECK([\n-       MOC_DEFS=\"${MOC_DEFS} -DQ_OS_MAC\"\n-       base_frameworks=\"-framework Foundation -framework AppKit\"\n-       AX_CHECK_LINK_FLAG([[$base_frameworks]],[QT_LIBS=\"$QT_LIBS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n-     ])\n-    ;;\n-    *mingw*)\n-       BITCOIN_QT_CHECK([\n-         AX_CHECK_LINK_FLAG([[-mwindows]],[QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"],[AC_MSG_WARN(-mwindows linker support not detected)])\n-       ])\n-  esac\n-\n-\n-  dnl enable qt support\n-  AC_MSG_CHECKING([whether to build ]AC_PACKAGE_NAME[ GUI])\n-  BITCOIN_QT_CHECK([\n-    bitcoin_enable_qt=yes\n-    bitcoin_enable_qt_test=yes\n-    if test \"x$have_qt_test\" = xno; then\n-      bitcoin_enable_qt_test=no\n-    fi\n-    bitcoin_enable_qt_dbus=no\n-    if test \"x$use_dbus\" != xno && test \"x$have_qt_dbus\" = xyes; then\n-      bitcoin_enable_qt_dbus=yes\n-    fi\n-    if test \"x$use_dbus\" = xyes && test \"x$have_qt_dbus\" = xno; then\n-      AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n-    fi\n-    if test \"x$LUPDATE\" = x; then\n-      AC_MSG_WARN([lupdate tool is required to update Qt translations.])\n-    fi\n-    if test \"x$LCONVERT\" = x; then\n-      AC_MSG_WARN([lconvert tool is required to update Qt translations.])\n-    fi\n-  ],[\n-    bitcoin_enable_qt=no\n-  ])\n-  if test x$bitcoin_enable_qt = xyes; then\n-    AC_MSG_RESULT([$bitcoin_enable_qt ($qt_lib_prefix)])\n-  else\n-    AC_MSG_RESULT([$bitcoin_enable_qt])\n-  fi\n-\n-  AC_SUBST(QT_PIE_FLAGS)\n-  AC_SUBST(QT_INCLUDES)\n-  AC_SUBST(QT_LIBS)\n-  AC_SUBST(QT_LDFLAGS)\n-  AC_SUBST(QT_DBUS_INCLUDES)\n-  AC_SUBST(QT_DBUS_LIBS)\n-  AC_SUBST(QT_TEST_INCLUDES)\n-  AC_SUBST(QT_TEST_LIBS)\n-  AC_SUBST(QT_SELECT, qt5)\n-  AC_SUBST(MOC_DEFS)\n-])\n-\n-dnl All macros below are internal and should _not_ be used from configure.ac.\n-\n-dnl Internal. Check if the linked version of Qt was built statically.\n-dnl\n-dnl _BITCOIN_QT_IS_STATIC\n-dnl ---------------------\n-dnl\n-dnl Requires: INCLUDES and LIBS must be populated as necessary.\n-dnl Output: bitcoin_cv_static_qt=yes|no\n-AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n-  AC_CACHE_CHECK(for static Qt, bitcoin_cv_static_qt,[\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-        #include <QtCore/qconfig.h>\n-        #ifndef QT_VERSION\n-        #  include <QtCore/qglobal.h>\n-        #endif\n-      ]],\n-      [[\n-        #if !defined(QT_STATIC)\n-        choke\n-        #endif\n-      ]])],\n-      [bitcoin_cv_static_qt=yes],\n-      [bitcoin_cv_static_qt=no])\n-    ])\n-])\n-\n-dnl Internal. Check if the link-requirements for a static plugin are met.\n-dnl\n-dnl _BITCOIN_QT_CHECK_STATIC_PLUGIN(PLUGIN, LIBRARIES)\n-dnl --------------------------------------------------\n-dnl\n-dnl Requires: INCLUDES and LIBS must be populated as necessary.\n-dnl Inputs: $1: A static plugin name.\n-dnl Inputs: $2: The libraries that resolve $1.\n-dnl Output: QT_LIBS is prepended or configure exits.\n-AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGIN], [\n-  AC_MSG_CHECKING([for $1 ($2)])\n-  CHECK_STATIC_PLUGINS_TEMP_LIBS=\"$LIBS\"\n-  LIBS=\"$2${qt_lib_suffix} $QT_LIBS $LIBS\"\n-  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-      #include <QtPlugin>\n-      Q_IMPORT_PLUGIN($1)\n-    ]])],\n-    [AC_MSG_RESULT([yes]); QT_LIBS=\"$2${qt_lib_suffix} $QT_LIBS\"],\n-    [AC_MSG_RESULT([no]); BITCOIN_QT_FAIL([$1 not found.])])\n-  LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n-])\n-\n-dnl Internal. Check Qt static libs with PKG_CHECK_MODULES.\n-dnl\n-dnl _BITCOIN_QT_CHECK_STATIC_LIBS\n-dnl -----------------------------\n-dnl\n-dnl Outputs: QT_LIBS is prepended.\n-AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_LIBS], [\n-  PKG_CHECK_MODULES([QT_ACCESSIBILITY], [${qt_lib_prefix}AccessibilitySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_ACCESSIBILITY_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_DEVICEDISCOVERY], [${qt_lib_prefix}DeviceDiscoverySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_DEVICEDISCOVERY_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_EDID], [${qt_lib_prefix}EdidSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EDID_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_EVENTDISPATCHER], [${qt_lib_prefix}EventDispatcherSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EVENTDISPATCHER_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_FB], [${qt_lib_prefix}FbSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FB_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_FONTDATABASE], [${qt_lib_prefix}FontDatabaseSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FONTDATABASE_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_THEME], [${qt_lib_prefix}ThemeSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_THEME_LIBS $QT_LIBS\"])\n-  if test \"x$TARGET_OS\" = xlinux; then\n-    PKG_CHECK_MODULES([QT_INPUT], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_INPUT_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_XCBQPA], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_XCBQPA_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xdarwin; then\n-    PKG_CHECK_MODULES([QT_CLIPBOARD], [${qt_lib_prefix}ClipboardSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_CLIPBOARD_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_GRAPHICS], [${qt_lib_prefix}GraphicsSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_GRAPHICS_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xwindows; then\n-    PKG_CHECK_MODULES([QT_WINDOWSUIAUTOMATION], [${qt_lib_prefix}WindowsUIAutomationSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_WINDOWSUIAUTOMATION_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xandroid; then\n-    PKG_CHECK_MODULES([QT_EGL], [${qt_lib_prefix}EglSupport], [QT_LIBS=\"$QT_EGL_LIBS $QT_LIBS\"])\n-  fi\n-])\n-\n-dnl Internal. Find Qt libraries using pkg-config.\n-dnl\n-dnl _BITCOIN_QT_FIND_LIBS\n-dnl ---------------------\n-dnl\n-dnl Outputs: All necessary QT_* variables are set.\n-dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n-AC_DEFUN([_BITCOIN_QT_FIND_LIBS],[\n-  BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_CORE], [${qt_lib_prefix}Core${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_CORE_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_CORE_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Core${qt_lib_suffix} $qt_version not found])])\n-  ])\n-  BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_GUI], [${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_GUI_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_GUI_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version not found])])\n-  ])\n-  BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_WIDGETS], [${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_WIDGETS_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_WIDGETS_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version not found])])\n-  ])\n-  BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_NETWORK], [${qt_lib_prefix}Network${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_NETWORK_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_NETWORK_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Network${qt_lib_suffix} $qt_version not found])])\n-  ])\n-\n-  BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_TEST], [${qt_lib_prefix}Test${qt_lib_suffix} $qt_version], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n-    if test \"x$use_dbus\" != xno; then\n-      PKG_CHECK_MODULES([QT_DBUS], [${qt_lib_prefix}DBus $qt_version], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n-    fi\n-  ])\n-])"
      }
    ]
  },
  {
    "sha": "a575ca3e277cfb598479a498b6367884fb4c1631",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTc1Y2EzZTI3N2NmYjU5ODQ3OWE0OThiNjM2Nzg4NGZiNGMxNjMx",
    "commit": {
      "author": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-18T23:44:42Z"
      },
      "committer": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-18T23:44:42Z"
      },
      "message": "Rename bitcoin_qt.m4 to bitcoin_qt.m4.html",
      "tree": {
        "sha": "387dac61347342de75b642de6701e5a4f260183a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/387dac61347342de75b642de6701e5a4f260183a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a575ca3e277cfb598479a498b6367884fb4c1631",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a575ca3e277cfb598479a498b6367884fb4c1631",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a575ca3e277cfb598479a498b6367884fb4c1631",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a575ca3e277cfb598479a498b6367884fb4c1631/comments",
    "author": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d71a1da43ff0b7b1fd2cfe86897873bc91a3b283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71a1da43ff0b7b1fd2cfe86897873bc91a3b283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d71a1da43ff0b7b1fd2cfe86897873bc91a3b283"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 398,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b5a8ed16e252844d88785da1ab26facc8e3b27f",
        "filename": "build-aux/m4/bitcoin_qt.m4.html",
        "status": "added",
        "additions": 398,
        "deletions": 0,
        "changes": 398,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a575ca3e277cfb598479a498b6367884fb4c1631/build-aux/m4/bitcoin_qt.m4.html",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a575ca3e277cfb598479a498b6367884fb4c1631/build-aux/m4/bitcoin_qt.m4.html",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4.html?ref=a575ca3e277cfb598479a498b6367884fb4c1631",
        "patch": "@@ -0,0 +1,398 @@\n+dnl Copyright (c) 2013-2016 The Bitcoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+dnl Helper for cases where a qt dependency is not met.\n+dnl Output: If qt version is auto, set bitcoin_enable_qt to false. Else, exit.\n+AC_DEFUN([BITCOIN_QT_FAIL],[\n+  if test \"x$bitcoin_qt_want_version\" = xauto && test \"x$bitcoin_qt_force\" != xyes; then\n+    if test \"x$bitcoin_enable_qt\" != xno; then\n+      AC_MSG_WARN([$1; bitcoin-qt frontend will not be built])\n+    fi\n+    bitcoin_enable_qt=no\n+    bitcoin_enable_qt_test=no\n+  else\n+    AC_MSG_ERROR([$1])\n+  fi\n+])\n+\n+AC_DEFUN([BITCOIN_QT_CHECK],[\n+  if test \"x$bitcoin_enable_qt\" != xno && test \"x$bitcoin_qt_want_version\" != xno; then\n+    true\n+    $1\n+  else\n+    true\n+    $2\n+  fi\n+])\n+\n+dnl BITCOIN_QT_PATH_PROGS([FOO], [foo foo2], [/path/to/search/first], [continue if missing])\n+dnl Helper for finding the path of programs needed for Qt.\n+dnl Inputs: $1: Variable to be set\n+dnl Inputs: $2: List of programs to search for\n+dnl Inputs: $3: Look for $2 here before $PATH\n+dnl Inputs: $4: If \"yes\", don't fail if $2 is not found.\n+dnl Output: $1 is set to the path of $2 if found. $2 are searched in order.\n+AC_DEFUN([BITCOIN_QT_PATH_PROGS],[\n+  BITCOIN_QT_CHECK([\n+    if test \"x$3\" != x; then\n+      AC_PATH_PROGS($1,$2,,$3)\n+    else\n+      AC_PATH_PROGS($1,$2)\n+    fi\n+    if test \"x$$1\" = x && test \"x$4\" != xyes; then\n+      BITCOIN_QT_FAIL([$1 not found])\n+    fi\n+  ])\n+])\n+\n+dnl Initialize qt input.\n+dnl This must be called before any other BITCOIN_QT* macros to ensure that\n+dnl input variables are set correctly.\n+dnl CAUTION: Do not use this inside of a conditional.\n+AC_DEFUN([BITCOIN_QT_INIT],[\n+  dnl enable qt support\n+  AC_ARG_WITH([gui],\n+    [AS_HELP_STRING([--with-gui@<:@=no|qt5|auto@:>@],\n+    [build bitcoin-qt GUI (default=auto)])],\n+    [\n+     bitcoin_qt_want_version=$withval\n+     if test \"x$bitcoin_qt_want_version\" = xyes; then\n+       bitcoin_qt_force=yes\n+       bitcoin_qt_want_version=auto\n+     fi\n+    ],\n+    [bitcoin_qt_want_version=auto])\n+\n+  AS_IF([test \"x$with_gui\" = xqt5_debug],\n+        [AS_CASE([$host],\n+                 [*darwin*], [qt_lib_suffix=_debug],\n+                 [*mingw*], [qt_lib_suffix=d],\n+                 [qt_lib_suffix= ]); bitcoin_qt_want_version=qt5],\n+        [qt_lib_suffix= ])\n+\n+  AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [])\n+  AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [])\n+  AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [])\n+  AC_ARG_WITH([qt-translationdir],[AS_HELP_STRING([--with-qt-translationdir=PLUGIN_DIR],[specify qt translation path (overridden by pkgconfig)])], [qt_translation_path=$withval], [])\n+  AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path])], [qt_bin_path=$withval], [])\n+\n+  AC_ARG_WITH([qtdbus],\n+    [AS_HELP_STRING([--with-qtdbus],\n+    [enable DBus support (default is yes if qt is enabled and QtDBus is found, except on Android)])],\n+    [use_dbus=$withval],\n+    [use_dbus=auto])\n+\n+  dnl Android doesn't support D-Bus and certainly doesn't use it for notifications\n+  case $host in\n+    *android*)\n+      if test \"x$use_dbus\" != xyes; then\n+        use_dbus=no\n+      fi\n+    ;;\n+  esac\n+\n+  AC_SUBST(QT_TRANSLATION_DIR,$qt_translation_path)\n+])\n+\n+dnl Find Qt libraries and includes.\n+dnl\n+dnl   BITCOIN_QT_CONFIGURE([MINIMUM-VERSION])\n+dnl\n+dnl Outputs: See _BITCOIN_QT_FIND_LIBS\n+dnl Outputs: Sets variables for all qt-related tools.\n+dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n+AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n+  qt_version=\">= $1\"\n+  qt_lib_prefix=\"Qt5\"\n+  BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS])\n+\n+  dnl This is ugly and complicated. Yuck. Works as follows:\n+  dnl We check a header to find out whether Qt is built statically.\n+  dnl When Qt is built statically, some plugins must be linked into\n+  dnl the final binary as well. _BITCOIN_QT_CHECK_STATIC_PLUGIN does\n+  dnl a quick link-check and appends the results to QT_LIBS.\n+  BITCOIN_QT_CHECK([\n+  TEMP_CPPFLAGS=$CPPFLAGS\n+  TEMP_CXXFLAGS=$CXXFLAGS\n+  CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n+  _BITCOIN_QT_IS_STATIC\n+  if test \"x$bitcoin_cv_static_qt\" = xyes; then\n+    _BITCOIN_QT_CHECK_STATIC_LIBS\n+\n+    if test \"x$qt_plugin_path\" != x; then\n+      if test -d \"$qt_plugin_path/platforms\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n+      fi\n+      if test -d \"$qt_plugin_path/styles\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/styles\"\n+      fi\n+      if test -d \"$qt_plugin_path/accessible\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+      fi\n+      if test -d \"$qt_plugin_path/platforms/android\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms/android -lqtfreetype -lEGL\"\n+      fi\n+    fi\n+\n+    AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n+    if test \"x$TARGET_OS\" != xandroid; then\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMinimalIntegrationPlugin], [-lqminimal])\n+      AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+    fi\n+    if test \"x$TARGET_OS\" = xwindows; then\n+      dnl Linking against wtsapi32 is required. See #17749 and\n+      dnl https://bugreports.qt.io/browse/QTBUG-27097.\n+      AX_CHECK_LINK_FLAG([-lwtsapi32], [QT_LIBS=\"$QT_LIBS -lwtsapi32\"], [AC_MSG_ERROR([could not link against -lwtsapi32])])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsIntegrationPlugin], [-lqwindows])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsVistaStylePlugin], [-lqwindowsvistastyle])\n+      AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n+    elif test \"x$TARGET_OS\" = xlinux; then\n+      dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n+      AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"$QT_LIBS -lxcb-shm\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n+      AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n+    elif test \"x$TARGET_OS\" = xdarwin; then\n+      AX_CHECK_LINK_FLAG([[-framework Carbon]],[QT_LIBS=\"$QT_LIBS -framework Carbon\"],[AC_MSG_ERROR(could not link against Carbon framework)])\n+      AX_CHECK_LINK_FLAG([[-framework IOSurface]],[QT_LIBS=\"$QT_LIBS -framework IOSurface\"],[AC_MSG_ERROR(could not link against IOSurface framework)])\n+      AX_CHECK_LINK_FLAG([[-framework Metal]],[QT_LIBS=\"$QT_LIBS -framework Metal\"],[AC_MSG_ERROR(could not link against Metal framework)])\n+      AX_CHECK_LINK_FLAG([[-framework QuartzCore]],[QT_LIBS=\"$QT_LIBS -framework QuartzCore\"],[AC_MSG_ERROR(could not link against QuartzCore framework)])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QCocoaIntegrationPlugin], [-lqcocoa])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMacStylePlugin], [-lqmacstyle])\n+      AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n+    elif test \"x$TARGET_OS\" = xandroid; then\n+      QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype $QT_LIBS\"\n+      AC_DEFINE(QT_QPA_PLATFORM_ANDROID, 1, [Define this symbol if the qt platform is android])\n+    fi\n+  fi\n+  CPPFLAGS=$TEMP_CPPFLAGS\n+  CXXFLAGS=$TEMP_CXXFLAGS\n+  ])\n+\n+  if test \"x$qt_bin_path\" = x; then\n+    qt_bin_path=\"`$PKG_CONFIG --variable=host_bins ${qt_lib_prefix}Core 2>/dev/null`\"\n+  fi\n+\n+  if test \"x$use_hardening\" != xno; then\n+    BITCOIN_QT_CHECK([\n+    AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n+    TEMP_CPPFLAGS=$CPPFLAGS\n+    TEMP_CXXFLAGS=$CXXFLAGS\n+    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+    CXXFLAGS=\"$PIE_FLAGS $CXXFLAGS\"\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <QtCore/qconfig.h>\n+        #ifndef QT_VERSION\n+        #  include <QtCore/qglobal.h>\n+        #endif\n+      ]],\n+      [[\n+        #if defined(QT_REDUCE_RELOCATIONS)\n+        choke\n+        #endif\n+      ]])],\n+      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n+      [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n+    )\n+    CPPFLAGS=$TEMP_CPPFLAGS\n+    CXXFLAGS=$TEMP_CXXFLAGS\n+    ])\n+  else\n+    BITCOIN_QT_CHECK([\n+    AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n+    TEMP_CPPFLAGS=$CPPFLAGS\n+    CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <QtCore/qconfig.h>\n+        #ifndef QT_VERSION\n+        #  include <QtCore/qglobal.h>\n+        #endif\n+      ]],\n+      [[\n+        #if defined(QT_REDUCE_RELOCATIONS)\n+        choke\n+        #endif\n+      ]])],\n+      [ AC_MSG_RESULT(no)],\n+      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n+    )\n+    CPPFLAGS=$TEMP_CPPFLAGS\n+    ])\n+  fi\n+\n+  BITCOIN_QT_PATH_PROGS([MOC], [moc-qt5 moc5 moc], $qt_bin_path)\n+  BITCOIN_QT_PATH_PROGS([UIC], [uic-qt5 uic5 uic], $qt_bin_path)\n+  BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt5 rcc5 rcc], $qt_bin_path)\n+  BITCOIN_QT_PATH_PROGS([LRELEASE], [lrelease-qt5 lrelease5 lrelease], $qt_bin_path)\n+  BITCOIN_QT_PATH_PROGS([LUPDATE], [lupdate-qt5 lupdate5 lupdate],$qt_bin_path, yes)\n+  BITCOIN_QT_PATH_PROGS([LCONVERT], [lconvert-qt5 lconvert5 lconvert], $qt_bin_path, yes)\n+\n+  MOC_DEFS='-DHAVE_CONFIG_H -I$(srcdir)'\n+  case $host in\n+    *darwin*)\n+     BITCOIN_QT_CHECK([\n+       MOC_DEFS=\"${MOC_DEFS} -DQ_OS_MAC\"\n+       base_frameworks=\"-framework Foundation -framework AppKit\"\n+       AX_CHECK_LINK_FLAG([[$base_frameworks]],[QT_LIBS=\"$QT_LIBS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+     ])\n+    ;;\n+    *mingw*)\n+       BITCOIN_QT_CHECK([\n+         AX_CHECK_LINK_FLAG([[-mwindows]],[QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"],[AC_MSG_WARN(-mwindows linker support not detected)])\n+       ])\n+  esac\n+\n+\n+  dnl enable qt support\n+  AC_MSG_CHECKING([whether to build ]AC_PACKAGE_NAME[ GUI])\n+  BITCOIN_QT_CHECK([\n+    bitcoin_enable_qt=yes\n+    bitcoin_enable_qt_test=yes\n+    if test \"x$have_qt_test\" = xno; then\n+      bitcoin_enable_qt_test=no\n+    fi\n+    bitcoin_enable_qt_dbus=no\n+    if test \"x$use_dbus\" != xno && test \"x$have_qt_dbus\" = xyes; then\n+      bitcoin_enable_qt_dbus=yes\n+    fi\n+    if test \"x$use_dbus\" = xyes && test \"x$have_qt_dbus\" = xno; then\n+      AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n+    fi\n+    if test \"x$LUPDATE\" = x; then\n+      AC_MSG_WARN([lupdate tool is required to update Qt translations.])\n+    fi\n+    if test \"x$LCONVERT\" = x; then\n+      AC_MSG_WARN([lconvert tool is required to update Qt translations.])\n+    fi\n+  ],[\n+    bitcoin_enable_qt=no\n+  ])\n+  if test x$bitcoin_enable_qt = xyes; then\n+    AC_MSG_RESULT([$bitcoin_enable_qt ($qt_lib_prefix)])\n+  else\n+    AC_MSG_RESULT([$bitcoin_enable_qt])\n+  fi\n+\n+  AC_SUBST(QT_PIE_FLAGS)\n+  AC_SUBST(QT_INCLUDES)\n+  AC_SUBST(QT_LIBS)\n+  AC_SUBST(QT_LDFLAGS)\n+  AC_SUBST(QT_DBUS_INCLUDES)\n+  AC_SUBST(QT_DBUS_LIBS)\n+  AC_SUBST(QT_TEST_INCLUDES)\n+  AC_SUBST(QT_TEST_LIBS)\n+  AC_SUBST(QT_SELECT, qt5)\n+  AC_SUBST(MOC_DEFS)\n+])\n+\n+dnl All macros below are internal and should _not_ be used from configure.ac.\n+\n+dnl Internal. Check if the linked version of Qt was built statically.\n+dnl\n+dnl _BITCOIN_QT_IS_STATIC\n+dnl ---------------------\n+dnl\n+dnl Requires: INCLUDES and LIBS must be populated as necessary.\n+dnl Output: bitcoin_cv_static_qt=yes|no\n+AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n+  AC_CACHE_CHECK(for static Qt, bitcoin_cv_static_qt,[\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <QtCore/qconfig.h>\n+        #ifndef QT_VERSION\n+        #  include <QtCore/qglobal.h>\n+        #endif\n+      ]],\n+      [[\n+        #if !defined(QT_STATIC)\n+        choke\n+        #endif\n+      ]])],\n+      [bitcoin_cv_static_qt=yes],\n+      [bitcoin_cv_static_qt=no])\n+    ])\n+])\n+\n+dnl Internal. Check if the link-requirements for a static plugin are met.\n+dnl\n+dnl _BITCOIN_QT_CHECK_STATIC_PLUGIN(PLUGIN, LIBRARIES)\n+dnl --------------------------------------------------\n+dnl\n+dnl Requires: INCLUDES and LIBS must be populated as necessary.\n+dnl Inputs: $1: A static plugin name.\n+dnl Inputs: $2: The libraries that resolve $1.\n+dnl Output: QT_LIBS is prepended or configure exits.\n+AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGIN], [\n+  AC_MSG_CHECKING([for $1 ($2)])\n+  CHECK_STATIC_PLUGINS_TEMP_LIBS=\"$LIBS\"\n+  LIBS=\"$2${qt_lib_suffix} $QT_LIBS $LIBS\"\n+  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+      #include <QtPlugin>\n+      Q_IMPORT_PLUGIN($1)\n+    ]])],\n+    [AC_MSG_RESULT([yes]); QT_LIBS=\"$2${qt_lib_suffix} $QT_LIBS\"],\n+    [AC_MSG_RESULT([no]); BITCOIN_QT_FAIL([$1 not found.])])\n+  LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n+])\n+\n+dnl Internal. Check Qt static libs with PKG_CHECK_MODULES.\n+dnl\n+dnl _BITCOIN_QT_CHECK_STATIC_LIBS\n+dnl -----------------------------\n+dnl\n+dnl Outputs: QT_LIBS is prepended.\n+AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_LIBS], [\n+  PKG_CHECK_MODULES([QT_ACCESSIBILITY], [${qt_lib_prefix}AccessibilitySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_ACCESSIBILITY_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_DEVICEDISCOVERY], [${qt_lib_prefix}DeviceDiscoverySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_DEVICEDISCOVERY_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_EDID], [${qt_lib_prefix}EdidSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EDID_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_EVENTDISPATCHER], [${qt_lib_prefix}EventDispatcherSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EVENTDISPATCHER_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_FB], [${qt_lib_prefix}FbSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FB_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_FONTDATABASE], [${qt_lib_prefix}FontDatabaseSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FONTDATABASE_LIBS $QT_LIBS\"])\n+  PKG_CHECK_MODULES([QT_THEME], [${qt_lib_prefix}ThemeSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_THEME_LIBS $QT_LIBS\"])\n+  if test \"x$TARGET_OS\" = xlinux; then\n+    PKG_CHECK_MODULES([QT_INPUT], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_INPUT_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_XCBQPA], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_XCBQPA_LIBS $QT_LIBS\"])\n+  elif test \"x$TARGET_OS\" = xdarwin; then\n+    PKG_CHECK_MODULES([QT_CLIPBOARD], [${qt_lib_prefix}ClipboardSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_CLIPBOARD_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_GRAPHICS], [${qt_lib_prefix}GraphicsSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_GRAPHICS_LIBS $QT_LIBS\"])\n+    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n+  elif test \"x$TARGET_OS\" = xwindows; then\n+    PKG_CHECK_MODULES([QT_WINDOWSUIAUTOMATION], [${qt_lib_prefix}WindowsUIAutomationSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_WINDOWSUIAUTOMATION_LIBS $QT_LIBS\"])\n+  elif test \"x$TARGET_OS\" = xandroid; then\n+    PKG_CHECK_MODULES([QT_EGL], [${qt_lib_prefix}EglSupport], [QT_LIBS=\"$QT_EGL_LIBS $QT_LIBS\"])\n+  fi\n+])\n+\n+dnl Internal. Find Qt libraries using pkg-config.\n+dnl\n+dnl _BITCOIN_QT_FIND_LIBS\n+dnl ---------------------\n+dnl\n+dnl Outputs: All necessary QT_* variables are set.\n+dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n+AC_DEFUN([_BITCOIN_QT_FIND_LIBS],[\n+  BITCOIN_QT_CHECK([\n+    PKG_CHECK_MODULES([QT_CORE], [${qt_lib_prefix}Core${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_CORE_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_CORE_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Core${qt_lib_suffix} $qt_version not found])])\n+  ])\n+  BITCOIN_QT_CHECK([\n+    PKG_CHECK_MODULES([QT_GUI], [${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_GUI_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_GUI_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version not found])])\n+  ])\n+  BITCOIN_QT_CHECK([\n+    PKG_CHECK_MODULES([QT_WIDGETS], [${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_WIDGETS_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_WIDGETS_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version not found])])\n+  ])\n+  BITCOIN_QT_CHECK([\n+    PKG_CHECK_MODULES([QT_NETWORK], [${qt_lib_prefix}Network${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_NETWORK_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_NETWORK_LIBS $QT_LIBS\"],\n+                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Network${qt_lib_suffix} $qt_version not found])])\n+  ])\n+\n+  BITCOIN_QT_CHECK([\n+    PKG_CHECK_MODULES([QT_TEST], [${qt_lib_prefix}Test${qt_lib_suffix} $qt_version], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+    if test \"x$use_dbus\" != xno; then\n+      PKG_CHECK_MODULES([QT_DBUS], [${qt_lib_prefix}DBus $qt_version], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+    fi\n+  ])\n+])"
      }
    ]
  },
  {
    "sha": "c1b1e8039170fddc115699b9ae4f8186d5559a20",
    "node_id": "C_kwDOABII59oAKGMxYjFlODAzOTE3MGZkZGMxMTU2OTliOWFlNGY4MTg2ZDU1NTlhMjA",
    "commit": {
      "author": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-28T01:52:59Z"
      },
      "committer": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-28T01:52:59Z"
      },
      "message": "Set theme jekyll-theme-hacker",
      "tree": {
        "sha": "bca9e9021aa952dce8edaa0b147f28083f574d11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bca9e9021aa952dce8edaa0b147f28083f574d11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1b1e8039170fddc115699b9ae4f8186d5559a20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b1e8039170fddc115699b9ae4f8186d5559a20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1b1e8039170fddc115699b9ae4f8186d5559a20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b1e8039170fddc115699b9ae4f8186d5559a20/comments",
    "author": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a575ca3e277cfb598479a498b6367884fb4c1631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a575ca3e277cfb598479a498b6367884fb4c1631",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a575ca3e277cfb598479a498b6367884fb4c1631"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc24e7a62dc288c776f8448cd073a01e7721ed32",
        "filename": "_config.yml",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1b1e8039170fddc115699b9ae4f8186d5559a20/_config.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1b1e8039170fddc115699b9ae4f8186d5559a20/_config.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/_config.yml?ref=c1b1e8039170fddc115699b9ae4f8186d5559a20",
        "patch": "@@ -0,0 +1 @@\n+theme: jekyll-theme-hacker\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "51d2e553bb35fa9b42a7af6e8cf428014731caa0",
    "node_id": "C_kwDOABII59oAKDUxZDJlNTUzYmIzNWZhOWI0MmE3YWY2ZThjZjQyODAxNDczMWNhYTA",
    "commit": {
      "author": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-28T01:53:33Z"
      },
      "committer": {
        "name": "adam khader",
        "email": "82147328+Iceymann18777@users.noreply.github.com",
        "date": "2021-09-28T01:53:33Z"
      },
      "message": "Create CNAME",
      "tree": {
        "sha": "1a66caa19cf9dc9fe9fab93591b789a0886f6fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a66caa19cf9dc9fe9fab93591b789a0886f6fc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51d2e553bb35fa9b42a7af6e8cf428014731caa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51d2e553bb35fa9b42a7af6e8cf428014731caa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51d2e553bb35fa9b42a7af6e8cf428014731caa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51d2e553bb35fa9b42a7af6e8cf428014731caa0/comments",
    "author": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Iceymann18777",
      "id": 82147328,
      "node_id": "MDQ6VXNlcjgyMTQ3MzI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82147328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Iceymann18777",
      "html_url": "https://github.com/Iceymann18777",
      "followers_url": "https://api.github.com/users/Iceymann18777/followers",
      "following_url": "https://api.github.com/users/Iceymann18777/following{/other_user}",
      "gists_url": "https://api.github.com/users/Iceymann18777/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Iceymann18777/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Iceymann18777/subscriptions",
      "organizations_url": "https://api.github.com/users/Iceymann18777/orgs",
      "repos_url": "https://api.github.com/users/Iceymann18777/repos",
      "events_url": "https://api.github.com/users/Iceymann18777/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Iceymann18777/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1b1e8039170fddc115699b9ae4f8186d5559a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b1e8039170fddc115699b9ae4f8186d5559a20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1b1e8039170fddc115699b9ae4f8186d5559a20"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fad19ebe29b2530c7b6cc8ac94103a2bfdfe57d9",
        "filename": "CNAME",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51d2e553bb35fa9b42a7af6e8cf428014731caa0/CNAME",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51d2e553bb35fa9b42a7af6e8cf428014731caa0/CNAME",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CNAME?ref=51d2e553bb35fa9b42a7af6e8cf428014731caa0",
        "patch": "@@ -0,0 +1 @@\n+bitcoinminer.grafana.net\n\\ No newline at end of file"
      }
    ]
  }
]