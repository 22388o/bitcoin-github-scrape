[
  {
    "sha": "eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjFjMmNkMzdmNzVjZjRkMGU4NTk3MDkzMmI5Nzc0YjJkMDczMjI1",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-02-03T14:44:39Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-02-03T14:44:39Z"
      },
      "message": "Split logic to undo txin's off DisconnectBlock.\n\nInstead, create a separate function that applies the undo operation of a\nCTxInUndo object onto a CCoinsViewCache.  This method is used from\nDisconnectBlock.",
      "tree": {
        "sha": "ff27a32087c80b95e1c0e1fe7f304dcd366bad88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff27a32087c80b95e1c0e1fe7f304dcd366bad88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb1c2cd37f75cf4d0e85970932b9774b2d073225",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb1c2cd37f75cf4d0e85970932b9774b2d073225/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf646c9b08e7f846d6c99314f937ace50809d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf646c9b08e7f846d6c99314f937ace50809d7a"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 38,
      "deletions": 24
    },
    "files": [
      {
        "sha": "a0ad5e51f65560f6c60ba54ec602e20ab7281d68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 24,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb1c2cd37f75cf4d0e85970932b9774b2d073225/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb1c2cd37f75cf4d0e85970932b9774b2d073225/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eb1c2cd37f75cf4d0e85970932b9774b2d073225",
        "patch": "@@ -1588,6 +1588,39 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n \n } // anon namespace\n \n+/**\n+ * Apply the undo operation of a CTxInUndo to the given chain state.\n+ * @param undo The undo object.\n+ * @param view The coins view to which to apply the changes.\n+ * @param out The out point that corresponds to the tx input.\n+ * @return True on success.\n+ */\n+static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)\n+{\n+    bool fClean = true;\n+\n+    CCoinsModifier coins = view.ModifyCoins(out.hash);\n+    if (undo.nHeight != 0) {\n+        // undo data contains height: this is the last output of the prevout tx being spent\n+        if (!coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data overwriting existing transaction\", __func__);\n+        coins->Clear();\n+        coins->fCoinBase = undo.fCoinBase;\n+        coins->nHeight = undo.nHeight;\n+        coins->nVersion = undo.nVersion;\n+    } else {\n+        if (coins->IsPruned())\n+            fClean = fClean && error(\"%s: undo data adding output to missing transaction\", __func__);\n+    }\n+    if (coins->IsAvailable(out.n))\n+        fClean = fClean && error(\"%s: undo data overwriting existing output\", __func__);\n+    if (coins->vout.size() < out.n+1)\n+        coins->vout.resize(out.n+1);\n+    coins->vout[out.n] = undo.txout;\n+\n+    return fClean;\n+}\n+\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n@@ -1613,11 +1646,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         uint256 hash = tx.GetHash();\n \n         // Check that all outputs are available and match the outputs in the block itself\n-        // exactly. Note that transactions with only provably unspendable outputs won't\n-        // have outputs available even in the block itself, so we handle that case\n-        // specially with outsEmpty.\n+        // exactly.\n         {\n-        CCoins outsEmpty;\n         CCoinsModifier outs = view.ModifyCoins(hash);\n         outs->ClearUnspendable();\n \n@@ -1642,24 +1672,8 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoinsModifier coins = view.ModifyCoins(out.hash);\n-                if (undo.nHeight != 0) {\n-                    // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n-                    coins->Clear();\n-                    coins->fCoinBase = undo.fCoinBase;\n-                    coins->nHeight = undo.nHeight;\n-                    coins->nVersion = undo.nVersion;\n-                } else {\n-                    if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n-                }\n-                if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n-                if (coins->vout.size() < out.n+1)\n-                    coins->vout.resize(out.n+1);\n-                coins->vout[out.n] = undo.txout;\n+                if (!ApplyTxInUndo(undo, view, out))\n+                    fClean = false;\n             }\n         }\n     }\n@@ -1670,9 +1684,9 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     if (pfClean) {\n         *pfClean = fClean;\n         return true;\n-    } else {\n-        return fClean;\n     }\n+\n+    return fClean;\n }\n \n void static FlushBlockFile(bool fFinalize = false)"
      }
    ]
  }
]