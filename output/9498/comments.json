[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272054484",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#issuecomment-272054484",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9498",
    "id": 272054484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjA1NDQ4NA==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-12T01:59:39Z",
    "updated_at": "2017-01-12T01:59:39Z",
    "author_association": "MEMBER",
    "body": "```\r\nCCheckQueueSpeed,576,0.001812756061554,0.001984249800444,0.001944298545520,6149498,6731089,6595898\r\nCCheckQueueSpeed,576,0.001704573631287,0.001963026821613,0.001897984494766,5782270,6659114,6438475\r\nCCheckQueueSpeed,576,0.001838877797127,0.001967173069715,0.001926153070397,6237919,6675994,6534347\r\nCCheckQueueSpeed,576,0.001697123050690,0.001930065453053,0.001841966890626,5757193,6547343,6248762\r\nCCheckQueueSpeed,576,0.001837179064751,0.001974612474442,0.001906548523241,6232267,6698444,6467841\r\n```\r\n```\r\nCCheckQueueSpeedPrevectorJob,448,0.002283558249474,0.002333313226700,0.002298991062811,7746465,7915155,7799211\r\nCCheckQueueSpeedPrevectorJob,448,0.002310715615749,0.002362936735153,0.002330580460174,7838558,8015741,7906361\r\nCCheckQueueSpeedPrevectorJob,448,0.002285875380039,0.002489343285561,0.002338334918022,7754281,8444561,7932261\r\nCCheckQueueSpeedPrevectorJob,448,0.002281628549099,0.002457186579704,0.002311725169420,7739965,8335454,7842407\r\nCCheckQueueSpeedPrevectorJob,448,0.002286218106747,0.002332687377930,0.002305187284946,7755492,7913158,7820222\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272054484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273790061",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#issuecomment-273790061",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9498",
    "id": 273790061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Mzc5MDA2MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-19T14:29:07Z",
    "updated_at": "2017-01-19T14:29:07Z",
    "author_association": "MEMBER",
    "body": "utack aad4cb5",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273790061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95670750",
    "pull_request_review_id": 16234341,
    "id": 95670750,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjcwNzUw",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{",
    "path": "src/bench/checkqueue.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe declare some constants here with the various magic numbers & things that could be tuned in the benchmark, like size of the queue, number of threads, number of jobs to add, number of times to call add, etc.",
    "created_at": "2017-01-11T21:00:19Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95670750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95670750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95670750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95670750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 19,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95671671",
    "pull_request_review_id": 16234341,
    "id": 95671671,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjcxNjcx",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.",
    "path": "src/bench/checkqueue.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe add an assert to the end of the benchmark to check this? It's be easy to imagine the vector being moved from in the future, which would invalidate the benchmark.",
    "created_at": "2017-01-11T21:05:21Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95671671",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95671671"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95671671"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95671671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95672621",
    "pull_request_review_id": 16234341,
    "id": 95672621,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjcyNjIx",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.",
    "path": "src/bench/checkqueue.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also, if this is true, any reason not to move vChecks declaration out of the while loop too? ",
    "created_at": "2017-01-11T21:11:11Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95672621",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95672621"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95672621"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95672621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95673006",
    "pull_request_review_id": 16234341,
    "id": 95673006,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjczMDA2",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.\n+        std::vector<FakeJobNoWork> vChecks;\n+        vChecks.resize(30);",
    "path": "src/bench/checkqueue.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could call the vector constructor taking a size to eliminate the resize line.",
    "created_at": "2017-01-11T21:13:12Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95673006",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95673006"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95673006"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95673006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 37,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95673985",
    "pull_request_review_id": 16234341,
    "id": 95673985,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NjczOTg1",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.\n+        std::vector<FakeJobNoWork> vChecks;\n+        vChecks.resize(30);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+        for (size_t j = 0; j < 101; ++j) {\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<28, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % 56);\n+        }\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(PrevectorJob& x){p.swap(x.p);};\n+    };\n+    CCheckQueue<PrevectorJob> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        // Make insecure_rand here so that each iteration is identical.\n+        FastRandomContext insecure_rand(true);",
    "path": "src/bench/checkqueue.cpp",
    "position": 86,
    "original_position": 77,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe move this outside while loop, if whatever time this takes isn't meaningful to the benchmark.",
    "created_at": "2017-01-11T21:18:15Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95673985",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95673985"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95673985"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95673985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 86,
    "original_line": 77,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95675187",
    "pull_request_review_id": 16234341,
    "id": 95675187,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Njc1MTg3",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.\n+        std::vector<FakeJobNoWork> vChecks;\n+        vChecks.resize(30);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+        for (size_t j = 0; j < 101; ++j) {\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<28, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % 56);",
    "path": "src/bench/checkqueue.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why do this in the constructor instead of the call operator? Wouldn't it be more realistic to have the work done in the worker threads instead of the control thread? Maybe add a comment if this is the intended behavior.",
    "created_at": "2017-01-11T21:24:12Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95675187",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95675187"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95675187"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95675187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95677971",
    "pull_request_review_id": 16242012,
    "id": 95677971,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Njc3OTcx",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.\n+        std::vector<FakeJobNoWork> vChecks;\n+        vChecks.resize(30);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+        for (size_t j = 0; j < 101; ++j) {\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<28, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % 56);\n+        }\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(PrevectorJob& x){p.swap(x.p);};\n+    };\n+    CCheckQueue<PrevectorJob> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        // Make insecure_rand here so that each iteration is identical.\n+        FastRandomContext insecure_rand(true);",
    "path": "src/bench/checkqueue.cpp",
    "position": 86,
    "original_position": 77,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is meaningful for each iteration to be identical.",
    "created_at": "2017-01-11T21:38:51Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95677971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95677971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95677971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95677971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 86,
    "original_line": 77,
    "side": "RIGHT",
    "in_reply_to_id": 95673985
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95678397",
    "pull_request_review_id": 16242447,
    "id": 95678397,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Njc4Mzk3",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.\n+        std::vector<FakeJobNoWork> vChecks;\n+        vChecks.resize(30);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+        for (size_t j = 0; j < 101; ++j) {\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<28, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % 56);",
    "path": "src/bench/checkqueue.cpp",
    "position": null,
    "original_position": 62,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "FastRandomContext is not thread safe.\r\n\r\nAlso we do want the main thread to be doing some work while the worker threads process.",
    "created_at": "2017-01-11T21:40:56Z",
    "updated_at": "2017-01-11T22:06:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95678397",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95678397"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95678397"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95678397/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 95675187
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95695236",
    "pull_request_review_id": 16259710,
    "id": 95695236,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1Njk1MjM2",
    "diff_hunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.\n+        std::vector<FakeJobNoWork> vChecks;\n+        vChecks.resize(30);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+        for (size_t j = 0; j < 101; ++j) {\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<28, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % 56);\n+        }\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(PrevectorJob& x){p.swap(x.p);};\n+    };\n+    CCheckQueue<PrevectorJob> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        // Make insecure_rand here so that each iteration is identical.\n+        FastRandomContext insecure_rand(true);",
    "path": "src/bench/checkqueue.cpp",
    "position": 86,
    "original_position": 77,
    "commit_id": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "original_commit_id": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, should have read the comment above. Though maybe I would reword it to something like \"Start with a fresh insecure_rand here\" rather than \"Make insecure_rand here.\"",
    "created_at": "2017-01-11T23:19:16Z",
    "updated_at": "2017-01-11T23:19:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95695236",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95695236"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9498#discussion_r95695236"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9498"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95695236/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 86,
    "original_line": 77,
    "side": "RIGHT",
    "in_reply_to_id": 95673985
  }
]