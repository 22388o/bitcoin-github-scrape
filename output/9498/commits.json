[
  {
    "sha": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjAzMTEwZjMyNTZlODExNzNjNjVjMmVkMTgxMGVmYWE3NGZiYzVi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-07T21:34:50Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-09T19:07:02Z"
      },
      "message": "Add Basic CheckQueue Benchmark",
      "tree": {
        "sha": "2eedd7865b3aa5e76741372a1ec25fbddb180040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eedd7865b3aa5e76741372a1ec25fbddb180040"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f03110f3256e81173c65c2ed1810efaa74fbc5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f03110f3256e81173c65c2ed1810efaa74fbc5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f03110f3256e81173c65c2ed1810efaa74fbc5b/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce43630d1e97368f454ad6a7b65a24263ab5be71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce43630d1e97368f454ad6a7b65a24263ab5be71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce43630d1e97368f454ad6a7b65a24263ab5be71"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 95,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c699c2f8c5c4da0f5e035b24c88846a72dd7594",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f03110f3256e81173c65c2ed1810efaa74fbc5b/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f03110f3256e81173c65c2ed1810efaa74fbc5b/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=9f03110f3256e81173c65c2ed1810efaa74fbc5b",
        "patch": "@@ -15,6 +15,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n   bench/checkblock.cpp \\\n+  bench/checkqueue.cpp \\\n   bench/Examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\"
      },
      {
        "sha": "280d24a5eff6524736b86c8f273d3582d60d5280",
        "filename": "src/bench/checkqueue.cpp",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f03110f3256e81173c65c2ed1810efaa74fbc5b/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f03110f3256e81173c65c2ed1810efaa74fbc5b/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=9f03110f3256e81173c65c2ed1810efaa74fbc5b",
        "patch": "@@ -0,0 +1,94 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+        // We can make vChecks out of the loop because calling Add doesn't\n+        // change the size of the vector.\n+        std::vector<FakeJobNoWork> vChecks;\n+        vChecks.resize(30);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+        for (size_t j = 0; j < 101; ++j) {\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<28, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % 56);\n+        }\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(PrevectorJob& x){p.swap(x.p);};\n+    };\n+    CCheckQueue<PrevectorJob> queue {128};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        // Make insecure_rand here so that each iteration is identical.\n+        FastRandomContext insecure_rand(true);\n+        CCheckQueueControl<PrevectorJob> control(&queue);\n+        for (size_t j = 0; j < 101; ++j) {\n+            std::vector<PrevectorJob> vChecks;\n+            vChecks.reserve(30);\n+            for (auto x = 0; x < 30; ++x)\n+                vChecks.emplace_back(insecure_rand);\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+BENCHMARK(CCheckQueueSpeed);\n+BENCHMARK(CCheckQueueSpeedPrevectorJob);"
      }
    ]
  },
  {
    "sha": "aad4cb50599b15d6fc439e465a616635e96466d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWQ0Y2I1MDU5OWIxNWQ2ZmM0MzllNDY1YTYxNjYzNWU5NjQ2NmQx",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-11T22:04:59Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-11T22:05:06Z"
      },
      "message": "Address ryanofsky feedback on CCheckQueue benchmarks. Eliminated magic numbers, fixed scoping of vectors (and memory movement component of benchmark).",
      "tree": {
        "sha": "c923676a56269c318a895db70f75093ac8859ead",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c923676a56269c318a895db70f75093ac8859ead"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aad4cb50599b15d6fc439e465a616635e96466d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aad4cb50599b15d6fc439e465a616635e96466d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aad4cb50599b15d6fc439e465a616635e96466d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aad4cb50599b15d6fc439e465a616635e96466d1/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f03110f3256e81173c65c2ed1810efaa74fbc5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f03110f3256e81173c65c2ed1810efaa74fbc5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f03110f3256e81173c65c2ed1810efaa74fbc5b"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 24,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6fa9fe4fe8c489660346c2b1cd555748678be6ac",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 15,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aad4cb50599b15d6fc439e465a616635e96466d1/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aad4cb50599b15d6fc439e465a616635e96466d1/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=aad4cb50599b15d6fc439e465a616635e96466d1",
        "patch": "@@ -15,6 +15,11 @@\n // This Benchmark tests the CheckQueue with the lightest\n // weight Checks, so it should make any lock contention\n // particularly visible\n+static const int MIN_CORES = 2;\n+static const size_t BATCHES = 101;\n+static const size_t BATCH_SIZE = 30;\n+static const int PREVECTOR_SIZE = 28;\n+static const int QUEUE_BATCH_SIZE = 128;\n static void CCheckQueueSpeed(benchmark::State& state)\n {\n     struct FakeJobNoWork {\n@@ -24,21 +29,25 @@ static void CCheckQueueSpeed(benchmark::State& state)\n         }\n         void swap(FakeJobNoWork& x){};\n     };\n-    CCheckQueue<FakeJobNoWork> queue {128};\n+    CCheckQueue<FakeJobNoWork> queue {QUEUE_BATCH_SIZE};\n     boost::thread_group tg;\n-    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n        tg.create_thread([&]{queue.Thread();});\n     }\n     while (state.KeepRunning()) {\n         CCheckQueueControl<FakeJobNoWork> control(&queue);\n-        // We can make vChecks out of the loop because calling Add doesn't\n-        // change the size of the vector.\n-        std::vector<FakeJobNoWork> vChecks;\n-        vChecks.resize(30);\n \n         // We call Add a number of times to simulate the behavior of adding\n         // a block of transactions at once.\n-        for (size_t j = 0; j < 101; ++j) {\n+\n+        std::vector<std::vector<FakeJobNoWork>> vBatches(BATCHES);\n+        for (auto& vChecks : vBatches) {\n+            vChecks.resize(BATCH_SIZE);\n+        }\n+        for (auto& vChecks : vBatches) {\n+            // We can't make vChecks in the inner loop because we want to measure\n+            // the cost of getting the memory to each thread and we might get the same\n+            // memory\n             control.Add(vChecks);\n         }\n         // control waits for completion by RAII, but\n@@ -55,31 +64,31 @@ static void CCheckQueueSpeed(benchmark::State& state)\n static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n {\n     struct PrevectorJob {\n-        prevector<28, uint8_t> p;\n+        prevector<PREVECTOR_SIZE, uint8_t> p;\n         PrevectorJob(){\n         }\n         PrevectorJob(FastRandomContext& insecure_rand){\n-            p.resize(insecure_rand.rand32() % 56);\n+            p.resize(insecure_rand.rand32() % (PREVECTOR_SIZE*2));\n         }\n         bool operator()()\n         {\n             return true;\n         }\n         void swap(PrevectorJob& x){p.swap(x.p);};\n     };\n-    CCheckQueue<PrevectorJob> queue {128};\n+    CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n     boost::thread_group tg;\n-    for (auto x = 0; x < std::max(2, GetNumCores()); ++x) {\n+    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n        tg.create_thread([&]{queue.Thread();});\n     }\n     while (state.KeepRunning()) {\n         // Make insecure_rand here so that each iteration is identical.\n         FastRandomContext insecure_rand(true);\n         CCheckQueueControl<PrevectorJob> control(&queue);\n-        for (size_t j = 0; j < 101; ++j) {\n-            std::vector<PrevectorJob> vChecks;\n-            vChecks.reserve(30);\n-            for (auto x = 0; x < 30; ++x)\n+        std::vector<std::vector<PrevectorJob>> vBatches(BATCHES);\n+        for (auto& vChecks : vBatches) {\n+            vChecks.reserve(BATCH_SIZE);\n+            for (size_t x = 0; x < BATCH_SIZE; ++x)\n                 vChecks.emplace_back(insecure_rand);\n             control.Add(vChecks);\n         }"
      }
    ]
  }
]