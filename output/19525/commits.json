[
  {
    "sha": "2e9e6377f10ab1ca5021f6ec964d22161469ba60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTllNjM3N2YxMGFiMWNhNTAyMWY2ZWM5NjRkMjIxNjE0NjliYTYw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-10T12:53:28Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-28T04:57:35Z"
      },
      "message": "build: add -Wl,-z,separate-code to hardening flags\n\nThis flag was added to binutils/ld in the 2.30 release, \nsee commit c11c786f0b45617bb8807ab6a57220d5ff50e414:\n\n> The new \"-z separate-code\" option will generate separate code LOAD\nsegment which must be in wholly disjoint pages from any other data.\n\n\nIt was made the default for Linux/x86 targets in the 2.31 release, see commit\nf6aec96dce1ddbd8961a3aa8a2925db2021719bb:\n\n> This patch adds --enable-separate-code to ld configure to turn on\n-z separate-code by default and enables it by default for Linux/x86.\nThis avoids mixing code pages with data to improve cache performance\nas well as security.\n\n> To reduce x86-64 executable and shared object sizes, the maximum page\nsize is reduced from 2MB to 4KB when -z separate-code is turned on by\ndefault.  Note: -z max-page-size= can be used to set the maximum page\nsize.\n\n> We compared SPEC CPU 2017 performance before and after this change on\nSkylake server.  There are no any significant performance changes.\nEverything is mostly below +/-1%.\n\nSupport was also added to LLVMs lld: https://reviews.llvm.org/D64903, however\nthere is remains off by default.\n\nThere were concerns about an increase in binary size, however in our case, the\nincrease (1 page worth of bytes) would seem negligible, given we are shipping a\nmulti-megabyte binary, which then downloads 100's of GBs of data.\n\nAlso note that most recent versions of distros are shipping a new enough version\nof binutils that this is available and/or on by default (assuming the distro has\nnot turned it off, I haven't checked everywhere):\n\nCentOS 8: 2.30\nDebian Buster 2.31.1\nFedora 29: 2.31.1\nFreeBSD: 2.33\nGNU Guix: 2.33 / 2.34\nUbuntu 18.04: 2.30\n\nRelated threads / discussion:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1623218",
      "tree": {
        "sha": "5ce8fd1d6ee66cd215ad4d128a74d54718b9c933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ce8fd1d6ee66cd215ad4d128a74d54718b9c933"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e9e6377f10ab1ca5021f6ec964d22161469ba60",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl8fsD8ACgkQLuufXMCV\nJsHknw//aFFKvwf0htAdOqMsQQBklcdD/xia7PhCstKD8yBjvQgzMOU85k/2lM72\nK99g7vMJCUQYOYUOgyRPaaolSK/0NpU8KMuI1THsyS7ds8Sa+ZXSj3abE62XY8Rz\n9NGRTaFnPKltZDox2fIBxN+F1A1LEpN39RUPvet+wcWT68G38eOVr1yDVUJC75h7\nmUUJL9fHKg/oVrMD2rPbUC3peEIFrRerfrqsX12fo+LHVxME3vJ5PtPhMARUlSDn\nvWY7K403glLN+ZP8hq8hoZA4txxXc6UvvKWZ9DcNyAqZFHjqLMfQ2oO3RYEio7rW\nPpv21sqRehP5S7yrojlIFdpHuQXMo62WIdT11/Ma3dtxAsbS2jWI/DdTj4tnX781\n+3AOSliZdJXtau/s3KjwitEBzl5gmDUf83k5qTafaXyHOjepriwCqft7SHbPH+qJ\nJmbT+1X69OYyY6gWKvHEuhethKEDkxQhmrr+Ri+au619eNROCVpdFC6JDj09aBMV\n1yfh6y1IG+2EDJGbpJQw25/zcnZM8SPVdnTJUNjzQYcoV9mEt/nAQkK+B6jbeY2d\n/WUzeABcNkDhHaum5ZA0+knbgxYS8gyVhE9a4BuTMmjv0TFLuBI53RFYa8Cm9R0E\nR0PNThhCQ/B6TADaQTWoV2gFY69Bt0Jv+jvJhVSDsox7jLVI2XA=\n=XCPJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ce8fd1d6ee66cd215ad4d128a74d54718b9c933\nparent b62fbf9e1c193464bca443076906b7ea47d56532\nauthor fanquake <fanquake@gmail.com> 1594385608 +0800\ncommitter fanquake <fanquake@gmail.com> 1595912255 +0800\n\nbuild: add -Wl,-z,separate-code to hardening flags\n\nThis flag was added to binutils/ld in the 2.30 release, \nsee commit c11c786f0b45617bb8807ab6a57220d5ff50e414:\n\n> The new \"-z separate-code\" option will generate separate code LOAD\nsegment which must be in wholly disjoint pages from any other data.\n\n\nIt was made the default for Linux/x86 targets in the 2.31 release, see commit\nf6aec96dce1ddbd8961a3aa8a2925db2021719bb:\n\n> This patch adds --enable-separate-code to ld configure to turn on\n-z separate-code by default and enables it by default for Linux/x86.\nThis avoids mixing code pages with data to improve cache performance\nas well as security.\n\n> To reduce x86-64 executable and shared object sizes, the maximum page\nsize is reduced from 2MB to 4KB when -z separate-code is turned on by\ndefault.  Note: -z max-page-size= can be used to set the maximum page\nsize.\n\n> We compared SPEC CPU 2017 performance before and after this change on\nSkylake server.  There are no any significant performance changes.\nEverything is mostly below +/-1%.\n\nSupport was also added to LLVMs lld: https://reviews.llvm.org/D64903, however\nthere is remains off by default.\n\nThere were concerns about an increase in binary size, however in our case, the\nincrease (1 page worth of bytes) would seem negligible, given we are shipping a\nmulti-megabyte binary, which then downloads 100's of GBs of data.\n\nAlso note that most recent versions of distros are shipping a new enough version\nof binutils that this is available and/or on by default (assuming the distro has\nnot turned it off, I haven't checked everywhere):\n\nCentOS 8: 2.30\nDebian Buster 2.31.1\nFedora 29: 2.31.1\nFreeBSD: 2.33\nGNU Guix: 2.33 / 2.34\nUbuntu 18.04: 2.30\n\nRelated threads / discussion:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1623218\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e6377f10ab1ca5021f6ec964d22161469ba60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9e6377f10ab1ca5021f6ec964d22161469ba60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e6377f10ab1ca5021f6ec964d22161469ba60/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b62fbf9e1c193464bca443076906b7ea47d56532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b62fbf9e1c193464bca443076906b7ea47d56532",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b62fbf9e1c193464bca443076906b7ea47d56532"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f11f2b20599c4ebc8ceff3a2f4ca6d124c7df9d9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9e6377f10ab1ca5021f6ec964d22161469ba60/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9e6377f10ab1ca5021f6ec964d22161469ba60/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2e9e6377f10ab1ca5021f6ec964d22161469ba60",
        "patch": "@@ -785,6 +785,7 @@ if test x$use_hardening != xno; then\n   AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,separate-code]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,separate-code\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-fPIE -pie]], [PIE_FLAGS=\"-fPIE\"; HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"],, [[$CXXFLAG_WERROR]])\n \n   case $host in"
      }
    ]
  },
  {
    "sha": "65d0f1a53354fb25c8152ee5b430cf57e6508594",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWQwZjFhNTMzNTRmYjI1YzgxNTJlZTViNDMwY2Y1N2U2NTA4NTk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-07-22T14:00:07Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-07-28T04:57:35Z"
      },
      "message": "devtools: Add security check for separate_code\n\nCheck that sections are appropriately separated in virtual memory,\nbased on their (expected) permissions. This checks for missing\n-Wl,-z,separate-code and potentially other problems.\n\nCo-authored-by: fanquake <fanquake@gmail.com>",
      "tree": {
        "sha": "29c37f2d26cbfa6855b64379fe604713d045ddcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29c37f2d26cbfa6855b64379fe604713d045ddcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65d0f1a53354fb25c8152ee5b430cf57e6508594",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl8fsD8ACgkQLuufXMCV\nJsFkrhAArABT1gv49r6qWBWnSFmxI0AjiLxPLWCMkRty3RpOEwIjJbZzFs6DJnHI\nf8Dg5iY/GQQlZX6B8A1tczNioMiFx2me/BwOIb9EWd018y1N6SouZxhIbqYZa0Iq\n7t6+DY7m4JVcNrUW0bimoW0+bVFdVxZ/Yg6MvBkBoy1hcRmpl8G/oFZyGivw+XOl\ndhZjm/SPgrJpqjA6GYIQFBNmKuOmPNJy30CNIGmteuq6+TIgs1qQKuPHcsliOX2a\nLINPA31VYRSCtv2ec3BKo27eBvB7b4quV6w+mGNyN25SVRclLDzjKPjrGNfZ14Ub\nruDRN2ZmJRCssrY+bPHe693qISt9tEYDLeaCOTt30yTkfBW/F+YcCFEXKatkm2cw\nVd52b/DGPU53uKhDE2z14dVuZ/GYrA85q8y6GUwKCj0pOA7ghTscQqOz8ZLtzSgg\nmpyETA3X5TBakggFB5MglcRXEAMaHNT90Bw6AYaFjkhrmYv4mc49/HZKL8HASBUl\ntQoyru7NNz5PS3v0NkCdFLO8MwZs7VgOLQtXqgNqGaBn8brYmrkgCMc6wS20r5kM\nZhBVpLFEQKFNxUSqKsiWGF3gl7z1S1fetU7xx/K5C7jX0dOnZL3O5hJxOwdefgyE\nwTxZHJE2fkmWXlAHyhwKviKfknVnQ+2s6Xu3zLCw5fNx0prfiZA=\n=0XAR\n-----END PGP SIGNATURE-----",
        "payload": "tree 29c37f2d26cbfa6855b64379fe604713d045ddcb\nparent 2e9e6377f10ab1ca5021f6ec964d22161469ba60\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1595426407 +0200\ncommitter fanquake <fanquake@gmail.com> 1595912255 +0800\n\ndevtools: Add security check for separate_code\n\nCheck that sections are appropriately separated in virtual memory,\nbased on their (expected) permissions. This checks for missing\n-Wl,-z,separate-code and potentially other problems.\n\nCo-authored-by: fanquake <fanquake@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65d0f1a53354fb25c8152ee5b430cf57e6508594",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65d0f1a53354fb25c8152ee5b430cf57e6508594",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65d0f1a53354fb25c8152ee5b430cf57e6508594/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e9e6377f10ab1ca5021f6ec964d22161469ba60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e6377f10ab1ca5021f6ec964d22161469ba60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9e6377f10ab1ca5021f6ec964d22161469ba60"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 99,
      "deletions": 17
    },
    "files": [
      {
        "sha": "dc74de91980a4cce82b01c915be9e9c8a7d3c62e",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 92,
        "deletions": 12,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0f1a53354fb25c8152ee5b430cf57e6508594/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0f1a53354fb25c8152ee5b430cf57e6508594/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=65d0f1a53354fb25c8152ee5b430cf57e6508594",
        "patch": "@@ -40,25 +40,48 @@ def get_ELF_program_headers(executable):\n     stdout = run_command([READELF_CMD, '-l', '-W', executable])\n \n     in_headers = False\n-    count = 0\n     headers = []\n     for line in stdout.splitlines():\n         if line.startswith('Program Headers:'):\n             in_headers = True\n+            count = 0\n         if line == '':\n             in_headers = False\n         if in_headers:\n             if count == 1: # header line\n-                ofs_typ = line.find('Type')\n-                ofs_offset = line.find('Offset')\n-                ofs_flags = line.find('Flg')\n-                ofs_align = line.find('Align')\n-                if ofs_typ == -1 or ofs_offset == -1 or ofs_flags == -1 or ofs_align  == -1:\n+                header = [x.strip() for x in line.split()]\n+                ofs_typ = header.index('Type')\n+                ofs_flags = header.index('Flg')\n+                # assert readelf output is what we expect\n+                if ofs_typ == -1 or ofs_flags == -1:\n                     raise ValueError('Cannot parse elfread -lW output')\n             elif count > 1:\n-                typ = line[ofs_typ:ofs_offset].rstrip()\n-                flags = line[ofs_flags:ofs_align].rstrip()\n-                headers.append((typ, flags))\n+                splitline = [x.strip() for x in line.split()]\n+                typ = splitline[ofs_typ]\n+                if not typ.startswith('[R'): # skip [Requesting ...]\n+                    splitline = [x.strip() for x in line.split()]\n+                    flags = splitline[ofs_flags]\n+                    # check for 'R', ' E'\n+                    if splitline[ofs_flags + 1] is 'E':\n+                        flags += ' E'\n+                    headers.append((typ, flags, []))\n+            count += 1\n+\n+        if line.startswith(' Section to Segment mapping:'):\n+            in_mapping = True\n+            count = 0\n+        if line == '':\n+            in_mapping = False\n+        if in_mapping:\n+            if count == 1: # header line\n+                ofs_segment = line.find('Segment')\n+                ofs_sections = line.find('Sections...')\n+                if ofs_segment == -1 or ofs_sections == -1:\n+                    raise ValueError('Cannot parse elfread -lW output')\n+            elif count > 1:\n+                segment = int(line[ofs_segment:ofs_sections].strip())\n+                sections = line[ofs_sections:].strip().split()\n+                headers[segment][2].extend(sections)\n             count += 1\n     return headers\n \n@@ -68,7 +91,7 @@ def check_ELF_NX(executable) -> bool:\n     '''\n     have_wx = False\n     have_gnu_stack = False\n-    for (typ, flags) in get_ELF_program_headers(executable):\n+    for (typ, flags, _) in get_ELF_program_headers(executable):\n         if typ == 'GNU_STACK':\n             have_gnu_stack = True\n         if 'W' in flags and 'E' in flags: # section is both writable and executable\n@@ -82,7 +105,7 @@ def check_ELF_RELRO(executable) -> bool:\n     Dynamic section must have BIND_NOW flag\n     '''\n     have_gnu_relro = False\n-    for (typ, flags) in get_ELF_program_headers(executable):\n+    for (typ, flags, _) in get_ELF_program_headers(executable):\n         # Note: not checking flags == 'R': here as linkers set the permission differently\n         # This does not affect security: the permission flags of the GNU_RELRO program\n         # header are ignored, the PT_LOAD header determines the effective permissions.\n@@ -113,6 +136,62 @@ def check_ELF_Canary(executable) -> bool:\n             ok = True\n     return ok\n \n+def check_ELF_separate_code(executable):\n+    '''\n+    Check that sections are appropriately separated in virtual memory,\n+    based on their permissions. This checks for missing -Wl,-z,separate-code\n+    and potentially other problems.\n+    '''\n+    EXPECTED_FLAGS = {\n+        # Read + execute\n+        '.init': 'R E',\n+        '.plt': 'R E',\n+        '.plt.got': 'R E',\n+        '.plt.sec': 'R E',\n+        '.text': 'R E',\n+        '.fini': 'R E',\n+        # Read-only data\n+        '.interp': 'R',\n+        '.note.gnu.property': 'R',\n+        '.note.gnu.build-id': 'R',\n+        '.note.ABI-tag': 'R',\n+        '.gnu.hash': 'R',\n+        '.dynsym': 'R',\n+        '.dynstr': 'R',\n+        '.gnu.version': 'R',\n+        '.gnu.version_r': 'R',\n+        '.rela.dyn': 'R',\n+        '.rela.plt': 'R',\n+        '.rodata': 'R',\n+        '.eh_frame_hdr': 'R',\n+        '.eh_frame': 'R',\n+        '.qtmetadata': 'R',\n+        '.gcc_except_table': 'R',\n+        '.stapsdt.base': 'R',\n+        # Writable data\n+        '.init_array': 'RW',\n+        '.fini_array': 'RW',\n+        '.dynamic': 'RW',\n+        '.got': 'RW',\n+        '.data': 'RW',\n+        '.bss': 'RW',\n+    }\n+    # For all LOAD program headers get mapping to the list of sections,\n+    # and for each section, remember the flags of the associated program header.\n+    flags_per_section = {}\n+    for (typ, flags, sections) in get_ELF_program_headers(executable):\n+        if typ == 'LOAD':\n+            for section in sections:\n+                assert(section not in flags_per_section)\n+                flags_per_section[section] = flags\n+    # Spot-check ELF LOAD program header flags per section\n+    # If these sections exist, check them against the expected R/W/E flags\n+    for (section, flags) in flags_per_section.items():\n+        if section in EXPECTED_FLAGS:\n+            if EXPECTED_FLAGS[section] != flags:\n+                return False\n+    return True\n+\n def get_PE_dll_characteristics(executable) -> int:\n     '''Get PE DllCharacteristics bits'''\n     stdout = run_command([OBJDUMP_CMD, '-x',  executable])\n@@ -225,7 +304,8 @@ def check_MACHO_Canary(executable) -> bool:\n     ('PIE', check_ELF_PIE),\n     ('NX', check_ELF_NX),\n     ('RELRO', check_ELF_RELRO),\n-    ('Canary', check_ELF_Canary)\n+    ('Canary', check_ELF_Canary),\n+    ('separate_code', check_ELF_separate_code),\n ],\n 'PE': [\n     ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),"
      },
      {
        "sha": "ec2d8866534214c86ebbf112232984ea55e85b0b",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65d0f1a53354fb25c8152ee5b430cf57e6508594/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65d0f1a53354fb25c8152ee5b430cf57e6508594/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=65d0f1a53354fb25c8152ee5b430cf57e6508594",
        "patch": "@@ -31,15 +31,17 @@ def test_ELF(self):\n         cc = 'gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed PIE NX RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed PIE RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed PIE RELRO'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE', '-Wl,-z,separate-code']),\n                 (1, executable+': failed RELRO'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,noseparate-code']),\n+                (1, executable+': failed separate_code'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code']),\n                 (0, ''))\n \n     def test_PE(self):"
      }
    ]
  }
]