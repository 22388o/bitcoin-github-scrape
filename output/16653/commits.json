[
  {
    "sha": "14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDg2MGE0ZTgwYjYwZDJiNGFjNzQyZjUyY2UxMTZmMTBjN2NkMGFk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-05T08:04:49Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-30T08:01:52Z"
      },
      "message": "add simple signature support (checker)",
      "tree": {
        "sha": "ff081aeff9dafbf99e68a834bbd7c6557b0f9e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff081aeff9dafbf99e68a834bbd7c6557b0f9e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl6Bp3AACgkQV692LbM1\nMyJJFg/9FznHzFRqh79AkVnPOq0Uduf13lUPdxFfj4kk6QjpfSqchKEYczyMwf9Z\nlVqtttDOZg2Z2kuw2FQtfhuB+CobHKSwAF0J9LqL1cWfWQ4mOeble5ZblDBh3qva\n0qljPeEX+CXBShGeN21I30Tt8rCfsh8UG4QzkocRXdWe1wf45UJK+tyRABXdWHqL\ngUpkGFq/yt6djtDhzKH6dlTz6MC2XRDZLyfs7sJJP7aS926JKChpudX+T0XRAo8d\nO4cU3whCM/U4IS03psgm0ffFVshl/LQvA1sAUhJRLnswQ8GQV6A5dfD8L2rnI6Jc\naG/+Oc0BFrpuoIVYvRAdHwJBsP56v7VcW9RgEXdHxorqCFwtGe014gWMJ9yRjYTY\n2aEg6Wfx8A7YmKjwklRnx6VRUiWpPeVvt/eYiplTk8KRw78VSdWPSVeiWWPIJb8D\nfRAU3kFN/1um8R+9FClIMDSxKFtV/VL0WhX6N18Fzqfgu/ztmtkKBLO3up8RKDT/\nb8KIbTAGC10R4truwBVmt670HOekqoMwZbGogfyGuvLPQ1WcT57nx/t1XFQqGkpy\nKmuamvdgl0qDfw8iMxzF1v4FQLfsm5jwBJ11GvnddzlNLxP4ZSD32fGtkLKuvto/\nnKUvA5Ua+Q/XD9gKzxypcHyZ6VoAwdVmLtyUKLdlWgrzZFmNu38=\n=X6A3\n-----END PGP SIGNATURE-----",
        "payload": "tree ff081aeff9dafbf99e68a834bbd7c6557b0f9e84\nparent 5f9cd62f33fb4d440173b9c376cadf4887e81e9d\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583395489 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1585555312 +0900\n\nadd simple signature support (checker)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f9cd62f33fb4d440173b9c376cadf4887e81e9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9cd62f33fb4d440173b9c376cadf4887e81e9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9cd62f33fb4d440173b9c376cadf4887e81e9d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6b141a9dbcb5ec0cdce2369a7b6d65985a5af0a3",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
        "patch": "@@ -1478,6 +1478,18 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+bool SimpleSignatureChecker::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+{\n+    CPubKey pubkey(vchPubKey);\n+    if (!pubkey.IsValid()) return false;\n+\n+    std::vector<unsigned char> vchSig(vchSigIn);\n+    if (vchSig.empty()) return false;\n+    vchSig.pop_back();\n+\n+    return pubkey.Verify(m_hash, vchSig);\n+}\n+\n static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     std::vector<valtype> stack{stack_span.begin(), stack_span.end()};"
      },
      {
        "sha": "ce9d722acb862621d6dfbb1230a62a7a16b2a9bf",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
        "patch": "@@ -161,6 +161,17 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n+/** A low level signature checker.  Note that the caller must verify that the hash passed in relates to a known message (unlike for the other signature checkers). */\n+class SimpleSignatureChecker : public BaseSignatureChecker\n+{\n+private:\n+    uint256 m_hash;\n+public:\n+    const uint256& GetHash() const { return m_hash; }\n+    explicit SimpleSignatureChecker(const uint256& hash) : BaseSignatureChecker(), m_hash(hash) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+};\n+\n template <class T>\n class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {"
      }
    ]
  },
  {
    "sha": "da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTNkMmE3YjE5Mjc2Y2M5MDA0YTk0YjkyNTI1ZTRmNzJiODZiOWUy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:38:43Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-30T08:01:52Z"
      },
      "message": "script: add simple signature support (creator)",
      "tree": {
        "sha": "f24b45c4be86c647401fb0ab9ac19fcb8cf6edc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f24b45c4be86c647401fb0ab9ac19fcb8cf6edc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl6Bp3AACgkQV692LbM1\nMyL8TRAAjtyNHDCu2g7KxEu2KmaBxXSaIR8k4V4QaMo9nhnpnRjTDrHsgA6QfGpa\ngueJ8wIvXKfTKLhpwmQLkq/jwlL+Owu1PRFFOeSfCTZAXzsIhN9FI6aBQ7nskErr\n6T+mEIkzVFbwCtv1XrXVVqT/DqsTjjaHwpazFSk52De0sUfrKC8hV07UC+qp8REW\nZchOWkJ19xUdfqu1LWRLkbmwn6LhULI78Sab20GlYWjNAFtROBqDQNiR1FKxt4+o\nWdiOuhk7LtS3qOWUZh8QzMKPRAv1FhJ3STvtMg/Q9A4CV4+nj5FA01yOB6ntKOhw\nl28cJ8nPQwG3MCN6a9pbBC1aMgEYo7kHEgb6IE0iZB63JDV+djxOi2Sn5IIPuklQ\nYSbUXg7ZRX7THz70cbKjQDTz/zXftNGD1d+a3Gwvy+UPdxNnxFH8il5FBvZjtnA0\nHXcfG1y/017qUXLSG2ZTb217bzNl4UOq39IvBGAhNUkrYO3xa2xv6CiiBOAxk0Ma\n3M8Ud4jU3kZsRhoSSl7EIJv3JMn+/Cxnmkdq2pFt4m/olGGMgOwwnG8HpmAj2Qbp\ngRdPhBywVBjZTp+cHi8y8KPM0eEjrZGiOY5rveahM5BufHC38kLfVsrxTIacpuAq\numotLRZa1zpVJ9oJQQ9RbuPIIcC/ii8vh/EyCBYZM3PstZG31+g=\n=8DeA\n-----END PGP SIGNATURE-----",
        "payload": "tree f24b45c4be86c647401fb0ab9ac19fcb8cf6edc9\nparent 14860a4e80b60d2b4ac742f52ce116f10c7cd0ad\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563352723 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1585555312 +0900\n\nscript: add simple signature support (creator)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da3d2a7b19276cc9004a94b92525e4f72b86b9e2/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14860a4e80b60d2b4ac742f52ce116f10c7cd0ad"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "92a587fa8bb6456e478e2e14fa21be559717fe5b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da3d2a7b19276cc9004a94b92525e4f72b86b9e2/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da3d2a7b19276cc9004a94b92525e4f72b86b9e2/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
        "patch": "@@ -33,6 +33,15 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n+bool SimpleSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n+{\n+    CKey key;\n+    if (!provider.GetKey(keyid, key)) return false;\n+    if (!key.Sign(checker.GetHash(), vchSig)) return false;\n+    vchSig.push_back((unsigned char)SIGHASH_ALL);\n+    return true;\n+}\n+\n static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)\n {\n     if (provider.GetCScript(scriptid, script)) {"
      },
      {
        "sha": "ba8f10c96858da569aa0ef43a43d689e8c6b55d1",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da3d2a7b19276cc9004a94b92525e4f72b86b9e2/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da3d2a7b19276cc9004a94b92525e4f72b86b9e2/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
        "patch": "@@ -32,6 +32,17 @@ class BaseSignatureCreator {\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n };\n \n+/** A general purpose signature creator. Note that this lacks assumptions about the `sighash`, as the preimage is not known to the signer. */\n+class SimpleSignatureCreator : public BaseSignatureCreator\n+{\n+    SimpleSignatureChecker checker;\n+\n+public:\n+    explicit SimpleSignatureCreator(const uint256& hashIn) : BaseSignatureCreator(), checker(hashIn) {};\n+    const BaseSignatureChecker& Checker() const override { return checker; }\n+    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n+};\n+\n /** A signature creator for transactions. */\n class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     const CMutableTransaction* txTo;"
      }
    ]
  },
  {
    "sha": "cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGNiMzc3NmJmY2Y3ZGUwMzVlOGQ0ZmZjYzU2ZGQzOTRlODkwNWJj",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-31T02:45:43Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-04-01T00:17:24Z"
      },
      "message": "test: add simple signer/checker tests",
      "tree": {
        "sha": "25e5ac1d6539375c4bf9dd52119c6e65d4edf33a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25e5ac1d6539375c4bf9dd52119c6e65d4edf33a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl6D3ZQACgkQV692LbM1\nMyIO7Q//bPGhTAVtJVaTLzoCtpNwMqpdm2nvNzS6xwatX+OeX1Qo8nhidPXs7joq\nKFejrtl9UVvb1YHszvo5fVi3Ro6Qjhfvwxb8Po6CjVZ7sIvtdc9cAYWDa/8AajNF\nNkbCfchlEnBFMRgfqMaPUEUJUreLUJy30knOWuYSO8rsgkHd6PZlrNbq8luoTFT8\nvcLN2Vh4QQQap9ftf8UKxooflAnRXPOPR55xikb7fK3cDdIkH+zoI2u0tLvbqOOr\nIfU965iWVoWkEWgSM1qGqkUDpjJvKC8OGpaGn7C/IiQlK2hjyILxzzAOhUZXjj06\nveTSitWOrh+VgghEqi9PwTrnZb1b5bhBrrHHqt0FUHsmANLkpXRPaCLgmQr7tRaG\n5uWuoU9ObKvUxwf535T6rlq2q1HKwNUQRzptSvMLOn0ERnjlCD1+AQhzGcnH/u+a\nj+RHCFBaKlTHSWtZg5jHKnxGk0UPpJSZCc/1Gc8/J0OhLuXc3Cau5mzHiaz8bb17\nTv9O3tIDs7uMsJGlS0q/DSO5pciFI9PM1rqVl0t0rmSN14DaWYWfWDFIw4SlrhG8\n38RHB58BXEBZNQ7aZsOyYpLreNbRQsbubQojLbfkAj2euybIyZ5NbPFTbFtjfkQb\n3GIA9BdBhOHiOiErWOq0EvL+oWEltpkN6lzLbieE9IP9I4K09vo=\n=jr1E\n-----END PGP SIGNATURE-----",
        "payload": "tree 25e5ac1d6539375c4bf9dd52119c6e65d4edf33a\nparent da3d2a7b19276cc9004a94b92525e4f72b86b9e2\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1585622743 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1585700244 +0900\n\ntest: add simple signer/checker tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da3d2a7b19276cc9004a94b92525e4f72b86b9e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da3d2a7b19276cc9004a94b92525e4f72b86b9e2"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 167,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eb3931b3509486a1a3aadbc8990f6857aa9ef33b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc",
        "patch": "@@ -229,6 +229,7 @@ BITCOIN_TESTS =\\\n   test/settings_tests.cpp \\\n   test/sighash_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n+  test/simplesigner_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n   test/sync_tests.cpp \\"
      },
      {
        "sha": "8a6c2f9aeca5b806aa039b1e952256fdfc243328",
        "filename": "src/test/simplesigner_tests.cpp",
        "status": "added",
        "additions": 166,
        "deletions": 0,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc/src/test/simplesigner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc/src/test/simplesigner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/simplesigner_tests.cpp?ref=cdcb3776bfcf7de035e8d4ffcc56dd394e8905bc",
        "patch": "@@ -0,0 +1,166 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/interpreter.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <tinyformat.h>\n+#include <uint256.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(simplesigner_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(simplesigner_base_tests)\n+{\n+    uint256 message = uint256S(\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\");\n+    CKey privkey;\n+    privkey.MakeNewKey(true);\n+    CPubKey pubkey = privkey.GetPubKey();\n+\n+    // Sign `message` with `privkey`, associated with `pubkey`\n+\n+    CKeyID keyid = pubkey.GetID();\n+    CScript script = GetScriptForDestination(PKHash(keyid));\n+\n+    FillableSigningProvider signing_provider;\n+    signing_provider.AddKeyPubKey(privkey, pubkey);\n+\n+    SimpleSignatureCreator creator(message);\n+\n+    std::vector<unsigned char> sig;\n+    bool res = creator.CreateSig(signing_provider, sig, keyid, script, SigVersion::BASE);\n+    BOOST_CHECK(res);\n+    BOOST_CHECK(sig.size() > 0);\n+\n+    // Verify `sig` for `message` and `pubkey`\n+\n+    SimpleSignatureChecker checker(message);\n+    res = checker.CheckSig(sig, ToByteVector(pubkey), script, SigVersion::BASE);\n+    BOOST_CHECK(res);\n+}\n+\n+BOOST_AUTO_TEST_CASE(simplesigner_witv0_tests)\n+{\n+    uint256 message = uint256S(\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\");\n+    CKey privkey;\n+    privkey.MakeNewKey(true);\n+    CPubKey pubkey = privkey.GetPubKey();\n+\n+    // Sign `message` with `privkey`, associated with `pubkey`\n+\n+    CKeyID keyid = pubkey.GetID();\n+    CScript script = GetScriptForDestination(WitnessV0KeyHash(keyid));\n+\n+    FillableSigningProvider signing_provider;\n+    signing_provider.AddKeyPubKey(privkey, pubkey);\n+\n+    SimpleSignatureCreator creator(message);\n+\n+    std::vector<unsigned char> sig;\n+    bool res = creator.CreateSig(signing_provider, sig, keyid, script, SigVersion::WITNESS_V0);\n+    BOOST_CHECK(res);\n+    BOOST_CHECK(sig.size() > 0);\n+\n+    // Verify `sig` for `message` and `pubkey`\n+\n+    SimpleSignatureChecker checker(message);\n+    res = checker.CheckSig(sig, ToByteVector(pubkey), script, SigVersion::WITNESS_V0);\n+    BOOST_CHECK(res);\n+}\n+\n+/* Based off of multisig_verify in multisig_tests.cpp */\n+BOOST_AUTO_TEST_CASE(simplesigner_multisig_tests)\n+{\n+    unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n+\n+    uint256 message = uint256S(\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\");\n+    FillableSigningProvider signing_provider;\n+    ScriptError err;\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++) {\n+        key[i].MakeNewKey(true);\n+        signing_provider.AddKey(key[i]);\n+    }\n+\n+    CScript a_and_b;\n+    a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript a_or_b;\n+    a_or_b << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript escrow;\n+    escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n+\n+    // Test a AND b:\n+    std::vector<unsigned char> sig1, sig2;\n+    SimpleSignatureCreator creator(message);\n+    SimpleSignatureChecker checker(message);\n+    bool res;\n+    CScript multisig;\n+    {\n+        res = creator.CreateSig(signing_provider, sig1, key[0].GetPubKey().GetID(), a_and_b, SigVersion::BASE);\n+        BOOST_CHECK(res);\n+        res = creator.CreateSig(signing_provider, sig2, key[1].GetPubKey().GetID(), a_and_b, SigVersion::BASE);\n+        BOOST_CHECK(res);\n+        multisig = CScript() << OP_0 << sig1 << sig2;\n+        res = VerifyScript(multisig, a_and_b, nullptr, flags, checker, &err);\n+        BOOST_CHECK_MESSAGE(res, ScriptErrorString(err));\n+    }\n+\n+    for (int i = 0; i < 4; i++) {\n+        res = creator.CreateSig(signing_provider, sig1, key[i].GetPubKey().GetID(), a_and_b, SigVersion::BASE);\n+        BOOST_CHECK(res);\n+        multisig = CScript() << OP_0 << sig1;\n+        BOOST_CHECK_MESSAGE(!VerifyScript(multisig, a_and_b, nullptr, flags, checker, &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n+\n+        res = creator.CreateSig(signing_provider, sig1, key[1].GetPubKey().GetID(), a_and_b, SigVersion::BASE);\n+        BOOST_CHECK(res);\n+        res = creator.CreateSig(signing_provider, sig2, key[i].GetPubKey().GetID(), a_and_b, SigVersion::BASE);\n+        BOOST_CHECK(res);\n+        multisig = CScript() << OP_0 << sig1 << sig2;\n+        BOOST_CHECK_MESSAGE(!VerifyScript(multisig, a_and_b, nullptr, flags, checker, &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n+    }\n+\n+    // Test a OR b:\n+    for (int i = 0; i < 4; i++) {\n+        res = creator.CreateSig(signing_provider, sig1, key[i].GetPubKey().GetID(), a_or_b, SigVersion::BASE);\n+        multisig = CScript() << OP_0 << sig1;\n+        if (i == 0 || i == 1) {\n+            BOOST_CHECK_MESSAGE(VerifyScript(multisig, a_or_b, nullptr, flags, checker, &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n+        } else {\n+            BOOST_CHECK_MESSAGE(!VerifyScript(multisig, a_or_b, nullptr, flags, checker, &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n+        }\n+    }\n+    multisig = CScript() << OP_0 << OP_1;\n+    BOOST_CHECK(!VerifyScript(multisig, a_or_b, nullptr, flags, checker, &err));\n+    BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n+\n+    for (int i = 0; i < 4; i++) {\n+        for (int j = 0; j < 4; j++) {\n+            res = creator.CreateSig(signing_provider, sig1, key[i].GetPubKey().GetID(), escrow, SigVersion::BASE);\n+            BOOST_CHECK(res);\n+            res = creator.CreateSig(signing_provider, sig2, key[j].GetPubKey().GetID(), escrow, SigVersion::BASE);\n+            BOOST_CHECK(res);\n+            multisig = CScript() << OP_0 << sig1 << sig2;\n+            if (i < j && i < 3 && j < 3) {\n+                BOOST_CHECK_MESSAGE(VerifyScript(multisig, escrow, nullptr, flags, checker, &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n+            } else {\n+                BOOST_CHECK_MESSAGE(!VerifyScript(multisig, escrow, nullptr, flags, checker, &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n+            }\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]