DrahtBot,2019-08-19 08:15:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17977 (Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n* #13062 (Make script interpreter independe",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-522462817,522462817,
NicolasDorier,2019-08-19 08:27:32,ACK 02a1db1607ec59b6c54072cd3ffb606422eea3a4,https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-522467269,522467269,
Sjors,2019-08-19 10:33:43,Concept ACK. It strictly adds new functions so that seems a pretty safe approach. This PR needs tests though.,https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-522511624,522511624,
emilengler,2019-08-19 16:12:24,"Concept NACK until it is being used actively.\nI don't think unused code is good, it just makes the binary bigger",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-522646806,522646806,
kallewoof,2019-08-20 03:21:46,@emilengler Did you read the PR description?,https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-522836833,522836833,
kallewoof,2019-08-20 05:49:06,"@Sjors Added tests. The multisig ones are based on the `multisig_tests.cpp` file, but adapted to use the new creators/checkers.",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-522863623,522863623,
emilengler,2019-08-20 14:27:57,"@kallewoof I did but until nothing is merged I don't think this should be added.\nI prefer a chronological order.",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523040554,523040554,
kallewoof,2019-08-21 02:35:45,lol good trolling there,https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523270571,523270571,
Sjors,2019-08-21 10:07:26,"@kallewoof thanks for adding the tests. They pass for me on macOS. I haven't followed the BIP-322 discussion in great detail, so can't really comment on the cryptography itself or how likely that is to change. It would be nice if it remained consistent with signet.\n\n@emilengler when you built the binary, how many bytes were added? Even if this difference is non-trivial, it only matters if for ",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523391075,523391075,
NicolasDorier,2019-08-21 14:07:22,On my side I am fine both about either having it in this PR or on the same PR as signet.,https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523473044,523473044,
emilengler,2019-08-21 14:16:00,@Sjors Sure thing but why isn't this being added to the original PR? @kallewoof ,https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523476656,523476656,
sdaftuar,2019-08-21 14:58:41,"This interface, where the caller provides the hash of a message, and then ""verifies"" that the signature is valid, seems problematic to me at this layer of our code -- my understanding is that without knowing the preimage of the hash (ie the message being signed), this doesn't prove that the signature could only have come from someone with knowledge of the private key.\n\nI know at some layer of ",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523495761,523495761,
kallewoof,2019-08-22 03:29:58,"@sdaftuar \n\nMaybe I'm misunderstanding, but I'm not sure if it's that inconsistent in the end. The ""CreateSig"" methods right now\n1. Get the private key from the signing provider.\n2. Generate the sighash based on internal data.\n3. Sign the sighash using the aforementioned private key.\n\nThis is consistent across all of these, and in fact, the other implementations could become sub-clas",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-523732232,523732232,
jtimon,2019-10-23 23:20:05,"utACK 0bd274fe8544c896616268a21edd06b2d927fc0f\n\nAn alternative that perhaps @sdaftuar would like more given his reasonings, is having a templated class that will work for any object implementing a GetHash() method.\nSomething like:\n\n```\nexplicit SimpleSignatureChecker(const T& hashable) : hash(hashable.GetHash()) {}\n```\nBut that would require a wrapper class for signet and another o",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-545675933,545675933,
instagibbs,2020-04-08 13:31:56,"concept and approach ACK. It's ok sometimes to have really small tooling to support not-yet-merged uses, provided there are tests",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-610961515,610961515,
kallewoof,2020-07-31 03:00:08,"Closing this as it's no longer certain whether it will be used, now that BIP-322 switched to a tx based version.",https://github.com/bitcoin/bitcoin/pull/16653#issuecomment-666886129,666886129,
sdaftuar,2019-09-10 19:57:09,"This should emphasize that the issue about not knowing the hash preimage is for the verifier, not the signer.  Perhaps:\n```\n/** A low level signature checker.  Note that the caller must verify that the hash passed in relates to a known message (unlike for the other signature checkers). */",https://github.com/bitcoin/bitcoin/pull/16653#discussion_r322933316,322933316,src/script/interpreter.h
kallewoof,2019-09-24 08:14:30,"Sorry for delay. Yes, that looks great, thanks. Adopting.",https://github.com/bitcoin/bitcoin/pull/16653#discussion_r327482613,327482613,src/script/interpreter.h
theStack,2020-01-24 15:12:09,"nit: Move constructor one line up, immediately after `public` (like for the other class `SimpleSignatureCreator` and for most classes in general I'd say)",https://github.com/bitcoin/bitcoin/pull/16653#discussion_r370683987,370683987,src/script/interpreter.h
theStack,2020-01-24 15:13:53,"Is there any reason why the constructor of this class calls its base class constructor `BaseSignatureCreator()`, while the constructor of `SimpleSignatureChecker()` doesn't?",https://github.com/bitcoin/bitcoin/pull/16653#discussion_r370685058,370685058,src/script/sign.h
theStack,2020-01-24 15:41:46,Is it intended that here (and in all following testcases) `message` is (implicitely) set to all-zero?,https://github.com/bitcoin/bitcoin/pull/16653#discussion_r370699527,370699527,src/test/simplesigner_tests.cpp
kallewoof,2020-01-25 01:45:34,"Nope. Shouldn't change anything in practice, but consistency is nice. Unifying.",https://github.com/bitcoin/bitcoin/pull/16653#discussion_r370905256,370905256,src/script/sign.h
kallewoof,2020-01-25 01:47:24,"I think it's fine as is, and there are plenty of examples of the constructor not being right below `public:`.",https://github.com/bitcoin/bitcoin/pull/16653#discussion_r370905413,370905413,src/script/interpreter.h
kallewoof,2020-01-25 01:48:27,"It shouldn't really matter what the message is, but then there's that saying about bridges, so I'll set it to something, sure.",https://github.com/bitcoin/bitcoin/pull/16653#discussion_r370905525,370905525,src/test/simplesigner_tests.cpp
