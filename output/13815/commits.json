[
  {
    "sha": "7c5bc2a52388522eccd3090e9473d4b627980672",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzViYzJhNTIzODg1MjJlY2NkMzA5MGU5NDczZDRiNjI3OTgwNjcy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-31T05:32:47Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-05T15:52:59Z"
      },
      "message": "miner: Default to DEFAULT_BLOCK_MIN_TX_FEE if unable to parse -blockmintxfee",
      "tree": {
        "sha": "24469d06068595d8356b64007b411a5fb1fb06ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24469d06068595d8356b64007b411a5fb1fb06ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c5bc2a52388522eccd3090e9473d4b627980672",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c5bc2a52388522eccd3090e9473d4b627980672",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c5bc2a52388522eccd3090e9473d4b627980672",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c5bc2a52388522eccd3090e9473d4b627980672/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8d0a2164b30eab76e7bccb1ffb056a10fba406"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "96c9cd6d2a1cdd186e23e79b9035555c18d8a4a1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c5bc2a52388522eccd3090e9473d4b627980672/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c5bc2a52388522eccd3090e9473d4b627980672/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7c5bc2a52388522eccd3090e9473d4b627980672",
        "patch": "@@ -70,9 +70,8 @@ static BlockAssembler::Options DefaultOptions()\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-    if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n-        CAmount n = 0;\n-        ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n);\n+    CAmount n = 0;\n+    if (gArgs.IsArgSet(\"-blockmintxfee\") && ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n)) {\n         options.blockMinFeeRate = CFeeRate(n);\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);"
      }
    ]
  },
  {
    "sha": "145fe95ec7a15c3796d5ed24521dde220edecbe0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDVmZTk1ZWM3YTE1YzM3OTZkNWVkMjQ1MjFkZGUyMjBlZGVjYmUw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-02T14:31:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-05T15:52:59Z"
      },
      "message": "tests: Check return value of ParseParameters(...)",
      "tree": {
        "sha": "82a1c7794450c438f3ea9307a2c380c16155a3d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82a1c7794450c438f3ea9307a2c380c16155a3d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/145fe95ec7a15c3796d5ed24521dde220edecbe0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/145fe95ec7a15c3796d5ed24521dde220edecbe0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/145fe95ec7a15c3796d5ed24521dde220edecbe0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/145fe95ec7a15c3796d5ed24521dde220edecbe0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c5bc2a52388522eccd3090e9473d4b627980672",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c5bc2a52388522eccd3090e9473d4b627980672",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c5bc2a52388522eccd3090e9473d4b627980672"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "14ddf4d10eed711ca8aa96b6ffd0e10becb8d8e2",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/145fe95ec7a15c3796d5ed24521dde220edecbe0/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/145fe95ec7a15c3796d5ed24521dde220edecbe0/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=145fe95ec7a15c3796d5ed24521dde220edecbe0",
        "patch": "@@ -28,7 +28,7 @@ static void ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    gArgs.ParseParameters(vecChar.size(), vecChar.data(), error);\n+    BOOST_CHECK(gArgs.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n static void SetupArgs(const std::vector<std::string>& args)"
      },
      {
        "sha": "f461c7496f8bf1696dd4da760ab3a219a7b457c4",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/145fe95ec7a15c3796d5ed24521dde220edecbe0/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/145fe95ec7a15c3796d5ed24521dde220edecbe0/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=145fe95ec7a15c3796d5ed24521dde220edecbe0",
        "patch": "@@ -210,13 +210,13 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n \n     std::string error;\n     testArgs.SetupArgs(4, avail_args);\n-    testArgs.ParseParameters(0, (char**)argv_test, error);\n+    BOOST_CHECK(testArgs.ParseParameters(0, (char**)argv_test, error));\n     BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n-    testArgs.ParseParameters(1, (char**)argv_test, error);\n+    BOOST_CHECK(testArgs.ParseParameters(1, (char**)argv_test, error));\n     BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n-    testArgs.ParseParameters(7, (char**)argv_test, error);\n+    BOOST_CHECK(testArgs.ParseParameters(7, (char**)argv_test, error));\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n@@ -242,7 +242,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n         \"ignored\", \"-a\", \"-nob\", \"-c=0\", \"-d=1\", \"-e=false\", \"-f=true\"};\n     std::string error;\n     testArgs.SetupArgs(6, avail_args);\n-    testArgs.ParseParameters(7, (char**)argv_test, error);\n+    BOOST_CHECK(testArgs.ParseParameters(7, (char**)argv_test, error));\n \n     // Each letter should be set.\n     for (const char opt : \"abcdef\")\n@@ -278,7 +278,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.SetupArgs(2, avail_args);\n     std::string error;\n-    testArgs.ParseParameters(4, (char**)argv_test, error);\n+    BOOST_CHECK(testArgs.ParseParameters(4, (char**)argv_test, error));\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n@@ -290,7 +290,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // Config test\n     const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n-    testArgs.ParseParameters(1, (char**)argv_test, error);\n+    BOOST_CHECK(testArgs.ParseParameters(1, (char**)argv_test, error));\n     testArgs.ReadConfigString(conf_test);\n \n     // This was passed twice, second one overrides the negative setting,\n@@ -305,7 +305,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     // Combined test\n     const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n     const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n-    testArgs.ParseParameters(3, (char**)combo_test_args, error);\n+    BOOST_CHECK(testArgs.ParseParameters(3, (char**)combo_test_args, error));\n     testArgs.ReadConfigString(combo_test_conf);\n \n     // Command line overrides, but doesn't erase old setting\n@@ -557,62 +557,62 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     const char* testnetconf = \"testnet=1\\nregtest=0\\n[test]\\nregtest=1\";\n     std::string error;\n \n-    test_args.ParseParameters(0, (char**)argv_testnet, error);\n+    BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"main\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet, error);\n+    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_testnet, error));\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest, error);\n+    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"regtest\");\n \n-    test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n+    BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_test_no_reg, error));\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both, error);\n+    BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(0, (char**)argv_testnet, error);\n+    BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet, error);\n+    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest, error);\n+    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(3, (char**)argv_test_no_reg, error);\n+    BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_test_no_reg, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both, error);\n+    BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n     // check setting the network to test (and thus making\n     // [test] regtest=1 potentially relevant) doesn't break things\n     test_args.SelectConfigNetwork(\"test\");\n \n-    test_args.ParseParameters(0, (char**)argv_testnet, error);\n+    BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_testnet, error);\n+    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest, error);\n+    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n-    test_args.ParseParameters(2, (char**)argv_test_no_reg, error);\n+    BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_test_no_reg, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(3, (char**)argv_both, error);\n+    BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }"
      }
    ]
  },
  {
    "sha": "579497e77a3a71b2d8e44a6a3e00a8a46366d5c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Nzk0OTdlNzdhM2E3MWIyZDhlNDRhNmEzZTAwYThhNDYzNjZkNWMw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-02T14:53:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-05T15:52:59Z"
      },
      "message": "tests: Explicitly ignore the return value of DecodeBase58(...)",
      "tree": {
        "sha": "b99adcefb692d49ab0efcf49df0382ee10b7bb46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99adcefb692d49ab0efcf49df0382ee10b7bb46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "145fe95ec7a15c3796d5ed24521dde220edecbe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/145fe95ec7a15c3796d5ed24521dde220edecbe0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/145fe95ec7a15c3796d5ed24521dde220edecbe0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e7702ec4619d6983e3b30ccf3bc903488e1d3aca",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=579497e77a3a71b2d8e44a6a3e00a8a46366d5c0",
        "patch": "@@ -49,7 +49,7 @@ static void Base58Decode(benchmark::State& state)\n     const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n     std::vector<unsigned char> vch;\n     while (state.KeepRunning()) {\n-        DecodeBase58(addr, vch);\n+        (void) DecodeBase58(addr, vch);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2MwMjMwY2ZjMWFlOWI5YzFjOTA1Y2Q5YWM2MTNiYzk4YmZhNDNh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-25T05:00:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-05T16:03:11Z"
      },
      "message": "Add NODISCARD to all {Decode,Parse}[...](...) functions returning bool. Sort includes.",
      "tree": {
        "sha": "c3cd7df7ea0228dee67b7160ba960a6eba5bbac4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3cd7df7ea0228dee67b7160ba960a6eba5bbac4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "579497e77a3a71b2d8e44a6a3e00a8a46366d5c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/579497e77a3a71b2d8e44a6a3e00a8a46366d5c0"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 58,
      "deletions": 26
    },
    "files": [
      {
        "sha": "be2d5691739e6dcc18957a58e277100ab3b6c22a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -95,6 +95,7 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  attributes.h \\\n   base58.h \\\n   bech32.h \\\n   bloom.h \\"
      },
      {
        "sha": "45099bd8b88025cb1e77bc6648f086660bf025dc",
        "filename": "src/attributes.h",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ATTRIBUTES_H\n+#define BITCOIN_ATTRIBUTES_H\n+\n+#if defined(__has_cpp_attribute)\n+#  if __has_cpp_attribute(nodiscard)\n+#    define NODISCARD [[nodiscard]]\n+#  endif\n+#endif\n+#ifndef NODISCARD\n+#  if defined(_MSC_VER) && _MSC_VER >= 1700\n+#    define NODISCARD _Check_return_\n+#  else\n+#    define NODISCARD __attribute__((warn_unused_result))\n+#  endif\n+#endif\n+\n+#endif // BITCOIN_ATTRIBUTES_H"
      },
      {
        "sha": "d6e0299a1e9a0efa3b461f2f4412f2ce106695b3",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -14,6 +14,8 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n+#include <attributes.h>\n+\n #include <string>\n #include <vector>\n \n@@ -33,13 +35,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -50,12 +52,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n+NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "6f87161f46acade891eec47f419aa64c0a67e220",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_CORE_IO_H\n \n #include <amount.h>\n+#include <attributes.h>\n \n #include <string>\n #include <vector>\n@@ -22,8 +23,8 @@ class UniValue;\n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n-bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n+NODISCARD bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n+NODISCARD bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n \n /**\n@@ -36,7 +37,7 @@ bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n  */\n bool ParseHashStr(const std::string& strHex, uint256& result);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n-bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n+NODISCARD bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n int ParseSighashString(const UniValue& sighash);\n \n // core_write.cpp"
      },
      {
        "sha": "6c30fd19505fb02c6e139c0d567c9d1be79f31a0",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_OUTPUTTYPE_H\n #define BITCOIN_OUTPUTTYPE_H\n \n+#include <attributes.h>\n #include <keystore.h>\n #include <script/standard.h>\n \n@@ -26,7 +27,7 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n-bool ParseOutputType(const std::string& str, OutputType& output_type);\n+NODISCARD bool ParseOutputType(const std::string& str, OutputType& output_type);\n const std::string& FormatOutputType(OutputType type);\n \n /**"
      },
      {
        "sha": "4988e6ed268081f7fe68243737faabc002bbb472",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -3,20 +3,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <attributes.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <core_io.h>\n+#include <httpserver.h>\n #include <index/txindex.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n-#include <validation.h>\n-#include <httpserver.h>\n #include <rpc/blockchain.h>\n #include <rpc/server.h>\n #include <streams.h>\n #include <sync.h>\n #include <txmempool.h>\n #include <util/strencodings.h>\n+#include <validation.h>\n #include <version.h>\n \n #include <boost/algorithm/string.hpp>"
      },
      {
        "sha": "d343972c40c5884270bba70592501a3591d45410",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -478,7 +478,7 @@ std::vector<Span<const char>> Split(const Span<const char>& sp, char sep)\n }\n \n /** Parse a key path, being passed a split list of elements (the first element is ignored). */\n-bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)\n+NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)\n {\n     for (size_t i = 1; i < split.size(); ++i) {\n         Span<const char> elem = split[i];"
      },
      {
        "sha": "b8e2812a96d7c1d45641699c7308a1900b892a1f",
        "filename": "src/util/moneystr.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/moneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/moneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.h?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -9,16 +9,17 @@\n #ifndef BITCOIN_UTIL_MONEYSTR_H\n #define BITCOIN_UTIL_MONEYSTR_H\n \n-#include <stdint.h>\n-#include <string>\n-\n #include <amount.h>\n+#include <attributes.h>\n+\n+#include <cstdint>\n+#include <string>\n \n /* Do not use these functions to represent or parse monetary amounts to or from\n  * JSON but use AmountFromValue and ValueFromAmount for that.\n  */\n std::string FormatMoney(const CAmount& n);\n-bool ParseMoney(const std::string& str, CAmount& nRet);\n-bool ParseMoney(const char* pszIn, CAmount& nRet);\n+NODISCARD bool ParseMoney(const std::string& str, CAmount& nRet);\n+NODISCARD bool ParseMoney(const char* pszIn, CAmount& nRet);\n \n #endif // BITCOIN_UTIL_MONEYSTR_H"
      },
      {
        "sha": "46146be66fbb2d34a71d3000a7a34e1c2aac6c72",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -263,7 +263,7 @@ std::string DecodeBase32(const std::string& str)\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n-static bool ParsePrechecks(const std::string& str)\n+NODISCARD static bool ParsePrechecks(const std::string& str)\n {\n     if (str.empty()) // No empty string allowed\n         return false;"
      },
      {
        "sha": "7d16d7dcfdb45b4746cb9fa6d3d2aa25e28c932d",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -9,7 +9,9 @@\n #ifndef BITCOIN_UTIL_STRENCODINGS_H\n #define BITCOIN_UTIL_STRENCODINGS_H\n \n-#include <stdint.h>\n+#include <attributes.h>\n+\n+#include <cstdint>\n #include <string>\n #include <vector>\n \n@@ -92,35 +94,35 @@ constexpr inline bool IsSpace(char c) noexcept {\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-bool ParseInt32(const std::string& str, int32_t *out);\n+NODISCARD bool ParseInt32(const std::string& str, int32_t *out);\n \n /**\n  * Convert string to signed 64-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-bool ParseInt64(const std::string& str, int64_t *out);\n+NODISCARD bool ParseInt64(const std::string& str, int64_t *out);\n \n /**\n  * Convert decimal string to unsigned 32-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-bool ParseUInt32(const std::string& str, uint32_t *out);\n+NODISCARD bool ParseUInt32(const std::string& str, uint32_t *out);\n \n /**\n  * Convert decimal string to unsigned 64-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-bool ParseUInt64(const std::string& str, uint64_t *out);\n+NODISCARD bool ParseUInt64(const std::string& str, uint64_t *out);\n \n /**\n  * Convert string to double with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid double,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-bool ParseDouble(const std::string& str, double *out);\n+NODISCARD bool ParseDouble(const std::string& str, double *out);\n \n template<typename T>\n std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)\n@@ -173,7 +175,7 @@ bool TimingResistantEqual(const T& a, const T& b)\n  * @returns true on success, false on error.\n  * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n  */\n-bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n+NODISCARD bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n /** Convert from one power-of-2 number base to another. */\n template<int frombits, int tobits, bool pad, typename O, typename I>\n@@ -200,7 +202,7 @@ bool ConvertBits(const O& outfn, I it, I end) {\n }\n \n /** Parse an HD keypaths like \"m/7/0'/2000\". */\n-bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n+NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n \n /**\n  * Converts the given character to its lowercase equivalent."
      },
      {
        "sha": "bebb089a2afd925e919785586dbe09e953c649f2",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=9cc0230cfc1ae9b9c1c905cd9ac613bc98bfa43a",
        "patch": "@@ -14,6 +14,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <attributes.h>\n #include <compat.h>\n #include <fs.h>\n #include <logging.h>\n@@ -159,7 +160,7 @@ class ArgsManager\n      */\n     void SelectConfigNetwork(const std::string& network);\n \n-    bool ParseParameters(int argc, const char* const argv[], std::string& error);\n+    NODISCARD bool ParseParameters(int argc, const char* const argv[], std::string& error);\n     bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n     /**"
      }
    ]
  }
]