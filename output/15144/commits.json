[
  {
    "sha": "fac2f5ecae96dd11057977ce988501e18bb162c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWMyZjVlY2FlOTZkZDExMDU3OTc3Y2U5ODg1MDFlMThiYjE2MmM2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-05T11:11:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-10T19:55:45Z"
      },
      "message": "Use C++11 default member initializers",
      "tree": {
        "sha": "5d0ca21eb2fe92b28903b64fdf9813f81351e966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d0ca21eb2fe92b28903b64fdf9813f81351e966"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac2f5ecae96dd11057977ce988501e18bb162c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcN6NBAAoJEM4rdWl+aaVIPocMAKYKAmRLOlTJtxkYCSPFR9gD\nyg2hVBlay6/wU3j+/+lNZdfu/f4J3LTUX2YvfB8Dk175g/N5E+AtZwx4nIIjHGFd\nIIXKjXUHTDGDClrO+NRqgFDvla3bGnG/5aZbR0xdvkkELKqYk5Ywe6G75Y1oAQ52\nGZrfVlX2SjLqyuipWsImuq6kmS56F5hZgTbYr+D1sdMpispoRFku+RWN97BAcxih\nbibHPgnMXSlG8o5LueMQzqjvv8Vj3U+iD2XffVhK/QU92HyRuIYuaIwMPC8AW6D3\n69daP6JZC0suzJj/o6HqoB/uM1F9KfwLEA5wKDldQzL7NWT8q/mgzDeJEEQxwbGU\n80uWuWfSbqjmZCbeQKrTZii6lfGejDrIdPkg3BUI7SmjbJnY7H4pBF5JTVH+tXPk\n8FsUpMmG3tCNVNDNKXGckSjsCoVfEh1t7u+tAQmkGBQ7Abtqr8JaJ/pwUwbMTfUX\njVqUyYe+qoNv8l5e4mZux110r9y7pmZiqntkxLa4Gg==\n=uhdL\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d0ca21eb2fe92b28903b64fdf9813f81351e966\nparent 3f125151998d9fead198fd44243dd64006b5a56b\nauthor MarcoFalke <falke.marco@gmail.com> 1546686664 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1547150145 -0500\n\nUse C++11 default member initializers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac2f5ecae96dd11057977ce988501e18bb162c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac2f5ecae96dd11057977ce988501e18bb162c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac2f5ecae96dd11057977ce988501e18bb162c6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f125151998d9fead198fd44243dd64006b5a56b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f125151998d9fead198fd44243dd64006b5a56b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f125151998d9fead198fd44243dd64006b5a56b"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 45,
      "deletions": 87
    },
    "files": [
      {
        "sha": "be2c4f0e3f69ffedf47eb120db7bc139766c9a26",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 45,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac2f5ecae96dd11057977ce988501e18bb162c6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac2f5ecae96dd11057977ce988501e18bb162c6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fac2f5ecae96dd11057977ce988501e18bb162c6",
        "patch": "@@ -2796,8 +2796,8 @@ int CConnman::GetBestHeight() const\n \n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string& addrNameIn, bool fInboundIn) :\n-    nTimeConnected(GetSystemTimeInSeconds()),\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, bool fInboundIn)\n+    : nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n     fInbound(fInboundIn),\n@@ -2807,56 +2807,14 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     id(idIn),\n     nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n-    nMyStartingHeight(nMyStartingHeightIn),\n-    nSendVersion(0)\n+    nMyStartingHeight(nMyStartingHeightIn)\n {\n-    nServices = NODE_NONE;\n     hSocket = hSocketIn;\n-    nRecvVersion = INIT_PROTO_VERSION;\n-    nLastSend = 0;\n-    nLastRecv = 0;\n-    nSendBytes = 0;\n-    nRecvBytes = 0;\n-    nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n-    nVersion = 0;\n     strSubVer = \"\";\n-    fWhitelisted = false;\n-    fOneShot = false;\n-    m_manual_connection = false;\n-    fClient = false; // set by version message\n-    m_limited_node = false; // set by version message\n-    fFeeler = false;\n-    fSuccessfullyConnected = false;\n-    fDisconnect = false;\n-    nRefCount = 0;\n-    nSendSize = 0;\n-    nSendOffset = 0;\n     hashContinue = uint256();\n-    nStartingHeight = -1;\n     filterInventoryKnown.reset();\n-    fSendMempool = false;\n-    fGetAddr = false;\n-    nNextLocalAddrSend = 0;\n-    nNextAddrSend = 0;\n-    nNextInvSend = 0;\n-    fRelayTxes = false;\n-    fSentAddr = false;\n     pfilter = MakeUnique<CBloomFilter>();\n-    timeLastMempoolReq = 0;\n-    nLastBlockTime = 0;\n-    nLastTXTime = 0;\n-    nPingNonceSent = 0;\n-    nPingUsecStart = 0;\n-    nPingUsecTime = 0;\n-    fPingQueued = false;\n-    nMinPingUsecTime = std::numeric_limits<int64_t>::max();\n-    minFeeFilter = 0;\n-    lastSentFeeFilter = 0;\n-    nextSendTimeFeeFilter = 0;\n-    fPauseRecv = false;\n-    fPauseSend = false;\n-    nProcessQueueSize = 0;\n \n     for (const std::string &msg : getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "3926d9e131bef958bba0f7053d544f582b842872",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 42,
        "deletions": 42,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac2f5ecae96dd11057977ce988501e18bb162c6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac2f5ecae96dd11057977ce988501e18bb162c6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fac2f5ecae96dd11057977ce988501e18bb162c6",
        "patch": "@@ -640,80 +640,80 @@ class CNode\n     friend class CConnman;\n public:\n     // socket\n-    std::atomic<ServiceFlags> nServices;\n+    std::atomic<ServiceFlags> nServices{NODE_NONE};\n     SOCKET hSocket GUARDED_BY(cs_hSocket);\n-    size_t nSendSize; // total size of all vSendMsg entries\n-    size_t nSendOffset; // offset inside the first vSendMsg already sent\n-    uint64_t nSendBytes GUARDED_BY(cs_vSend);\n+    size_t nSendSize{0}; // total size of all vSendMsg entries\n+    size_t nSendOffset{0}; // offset inside the first vSendMsg already sent\n+    uint64_t nSendBytes GUARDED_BY(cs_vSend){0};\n     std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n-    size_t nProcessQueueSize;\n+    size_t nProcessQueueSize{0};\n \n     CCriticalSection cs_sendProcessing;\n \n     std::deque<CInv> vRecvGetData;\n-    uint64_t nRecvBytes GUARDED_BY(cs_vRecv);\n-    std::atomic<int> nRecvVersion;\n+    uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n+    std::atomic<int> nRecvVersion{INIT_PROTO_VERSION};\n \n-    std::atomic<int64_t> nLastSend;\n-    std::atomic<int64_t> nLastRecv;\n+    std::atomic<int64_t> nLastSend{0};\n+    std::atomic<int64_t> nLastRecv{0};\n     const int64_t nTimeConnected;\n-    std::atomic<int64_t> nTimeOffset;\n+    std::atomic<int64_t> nTimeOffset{0};\n     // Address of this peer\n     const CAddress addr;\n     // Bind address of our side of the connection\n     const CAddress addrBind;\n-    std::atomic<int> nVersion;\n+    std::atomic<int> nVersion{0};\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer GUARDED_BY(cs_SubVer), cleanSubVer GUARDED_BY(cs_SubVer);\n     CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n-    bool fWhitelisted; // This peer can bypass DoS banning.\n-    bool fFeeler; // If true this node is being used as a short lived feeler.\n-    bool fOneShot;\n-    bool m_manual_connection;\n-    bool fClient;\n-    bool m_limited_node; //after BIP159\n+    bool fWhitelisted{false}; // This peer can bypass DoS banning.\n+    bool fFeeler{false}; // If true this node is being used as a short lived feeler.\n+    bool fOneShot{false};\n+    bool m_manual_connection{false};\n+    bool fClient{false}; // set by version message\n+    bool m_limited_node{false}; //after BIP159, set by version message\n     const bool fInbound;\n-    std::atomic_bool fSuccessfullyConnected;\n-    std::atomic_bool fDisconnect;\n+    std::atomic_bool fSuccessfullyConnected{false};\n+    std::atomic_bool fDisconnect{false};\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    bool fRelayTxes GUARDED_BY(cs_filter);\n-    bool fSentAddr;\n+    bool fRelayTxes GUARDED_BY(cs_filter){false};\n+    bool fSentAddr{false};\n     CSemaphoreGrant grantOutbound;\n     mutable CCriticalSection cs_filter;\n     std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter);\n-    std::atomic<int> nRefCount;\n+    std::atomic<int> nRefCount{0};\n \n     const uint64_t nKeyedNetGroup;\n-    std::atomic_bool fPauseRecv;\n-    std::atomic_bool fPauseSend;\n+    std::atomic_bool fPauseRecv{false};\n+    std::atomic_bool fPauseSend{false};\n \n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);\n \n public:\n     uint256 hashContinue;\n-    std::atomic<int> nStartingHeight;\n+    std::atomic<int> nStartingHeight{-1};\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n     CRollingBloomFilter addrKnown;\n-    bool fGetAddr;\n+    bool fGetAddr{false};\n     std::set<uint256> setKnown;\n-    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing);\n-    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing);\n+    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing){0};\n+    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing){0};\n \n     // inventory based relay\n     CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_inventory);\n@@ -727,35 +727,35 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n-    int64_t nNextInvSend;\n+    int64_t nNextInvSend{0};\n     // Used for headers announcements - unfiltered blocks to relay\n     std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n     // Used for BIP35 mempool sending\n-    bool fSendMempool GUARDED_BY(cs_inventory);\n+    bool fSendMempool GUARDED_BY(cs_inventory){false};\n \n     // Last time a \"MEMPOOL\" request was serviced.\n-    std::atomic<int64_t> timeLastMempoolReq;\n+    std::atomic<int64_t> timeLastMempoolReq{0};\n \n     // Block and TXN accept times\n-    std::atomic<int64_t> nLastBlockTime;\n-    std::atomic<int64_t> nLastTXTime;\n+    std::atomic<int64_t> nLastBlockTime{0};\n+    std::atomic<int64_t> nLastTXTime{0};\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n-    std::atomic<uint64_t> nPingNonceSent;\n+    std::atomic<uint64_t> nPingNonceSent{0};\n     // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    std::atomic<int64_t> nPingUsecStart;\n+    std::atomic<int64_t> nPingUsecStart{0};\n     // Last measured round-trip time.\n-    std::atomic<int64_t> nPingUsecTime;\n+    std::atomic<int64_t> nPingUsecTime{0};\n     // Best measured round-trip time.\n-    std::atomic<int64_t> nMinPingUsecTime;\n+    std::atomic<int64_t> nMinPingUsecTime{std::numeric_limits<int64_t>::max()};\n     // Whether a ping is requested.\n-    std::atomic<bool> fPingQueued;\n+    std::atomic<bool> fPingQueued{false};\n     // Minimum fee rate with which to filter inv's to this node\n-    CAmount minFeeFilter GUARDED_BY(cs_feeFilter);\n+    CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};\n     CCriticalSection cs_feeFilter;\n-    CAmount lastSentFeeFilter;\n-    int64_t nextSendTimeFeeFilter;\n+    CAmount lastSentFeeFilter{0};\n+    int64_t nextSendTimeFeeFilter{0};\n \n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n@@ -768,7 +768,7 @@ class CNode\n     // Services offered to this peer\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;\n-    int nSendVersion;\n+    int nSendVersion{0};\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;"
      }
    ]
  }
]