[
  {
    "sha": "e3165d0bfd90e28cee4e649fc12fc042a408838b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzE2NWQwYmZkOTBlMjhjZWU0ZTY0OWZjMTJmYzA0MmE0MDg4Mzhi",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-07T02:58:06Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-11-13T16:43:26Z"
      },
      "message": "utxoscriptindex: draft",
      "tree": {
        "sha": "b37c10865d2fced7ad6cc0407b1b98c36f195e94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b37c10865d2fced7ad6cc0407b1b98c36f195e94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3165d0bfd90e28cee4e649fc12fc042a408838b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3165d0bfd90e28cee4e649fc12fc042a408838b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3165d0bfd90e28cee4e649fc12fc042a408838b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3165d0bfd90e28cee4e649fc12fc042a408838b/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d605b27457dd307e31ac320c83f3b01a41e1ae1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d605b27457dd307e31ac320c83f3b01a41e1ae1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d605b27457dd307e31ac320c83f3b01a41e1ae1"
      }
    ],
    "stats": {
      "total": 962,
      "additions": 906,
      "deletions": 56
    },
    "files": [
      {
        "sha": "0cb2f925048f5b5e0838cba64dfdafe0575e3cd4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -123,6 +123,7 @@ BITCOIN_CORE_H = \\\n   httpserver.h \\\n   index/base.h \\\n   index/txindex.h \\\n+  index/utxoindex.h \\\n   indirectmap.h \\\n   init.h \\\n   interfaces/chain.h \\\n@@ -235,6 +236,7 @@ libbitcoin_server_a_SOURCES = \\\n   index/base.cpp \\\n   index/txindex.cpp \\\n   interfaces/chain.cpp \\\n+  index/utxoindex.cpp \\\n   interfaces/handler.cpp \\\n   interfaces/node.cpp \\\n   init.cpp \\"
      },
      {
        "sha": "ceb7a56c459f8988bda130603e511f58ef942654",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -149,7 +149,7 @@ bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n     return true;\n }\n \n-void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::shared_ptr<const CBlockUndo> &blockundo,\n                                const std::vector<CTransactionRef>& txn_conflicted)\n {\n     if (!m_synced) {"
      },
      {
        "sha": "a1ba6f090a0d5311f145a82aa2a289a2ece40724",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -58,7 +58,7 @@ class BaseIndex : public CValidationInterface\n     bool WriteBestBlock(const CBlockIndex* block_index);\n \n protected:\n-    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::shared_ptr<const CBlockUndo> &blockundo,\n                         const std::vector<CTransactionRef>& txn_conflicted) override;\n \n     void ChainStateFlushed(const CBlockLocator& locator) override;"
      },
      {
        "sha": "7aae120f7b76629bcea251d998f2e810ecc8ec5e",
        "filename": "src/index/utxoindex.cpp",
        "status": "added",
        "additions": 423,
        "deletions": 0,
        "changes": 423,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/utxoindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/utxoindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/utxoindex.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -0,0 +1,423 @@\n+#include \"index/utxoindex.h\"\n+//#include <util.h>\n+#include <script/standard.h>\n+#include <pubkey.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+\n+#include<boost/thread.hpp>\n+\n+\n+std::unique_ptr<UtxoIndex> g_utxoindex;\n+\n+\n+class UtxoIndex::DB : public BaseIndex::DB\n+{\n+public:\n+\texplicit DB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+\n+\tbool WriteUtxos(std::map<CScriptID, SerializableUtxoSet>& scriptUtxos);\n+\tbool ReadUtxos(const CScriptID&, SerializableUtxoSet& utxoSet);\n+\n+\tUtxoIndexDBCursor* Cursor() const;\n+};\n+\n+UtxoIndex::DB::DB(size_t nCacheSize, bool fMemory, bool fWipe) :\n+\tBaseIndex::DB(GetDataDir() / \"indexes\" / \"coinsbyscript\", nCacheSize, fMemory, fWipe)\n+{\n+\n+}\n+\n+bool UtxoIndex::DB::WriteUtxos(std::map<CScriptID, SerializableUtxoSet>& scriptUtxos)\n+{\n+\tCDBBatch batch(*this);\n+\tfor(const auto& scriptUtxo: scriptUtxos)\n+\t{\n+\t\tauto key = std::make_pair(DB_UTXO, std::ref(scriptUtxo.first));\n+\t\tauto& value = scriptUtxo.second;\n+\t\tif(scriptUtxo.second.empty())\n+\t\t\tbatch.Erase(key);\n+\t\telse\n+\t\t\tbatch.Write(key,value);\n+\t}\n+\treturn WriteBatch(batch);\n+}\n+\n+bool UtxoIndex::DB::ReadUtxos(const CScriptID& scriptId, SerializableUtxoSet& utxoSet)\n+{\n+\treturn Read(std::make_pair(DB_UTXO, scriptId), utxoSet);\n+}\n+\n+UtxoIndexDBCursor* UtxoIndex::DB::Cursor() const\n+{\n+\tUtxoIndexDBCursor* cursor = new UtxoIndexDBCursor(\n+\t\t\t\t\t\t\t\t\tconst_cast<CDBWrapper*>(\n+\t\t\t\t\t\t\t\t\t\tstatic_cast<const CDBWrapper*>(this))->NewIterator());\n+\tcursor->pcursor->Seek(DB_UTXO);\n+\tif(not cursor->pcursor->Valid())\n+\t\tcursor->keyTmp.first = 0;\n+\telse\n+\t\tcursor->pcursor->GetKey(cursor->keyTmp);\n+\treturn cursor;\n+}\n+\n+bool UtxoIndexDBCursor::GetKey(CScriptID& key)\n+{\n+\tif(keyTmp.first == DB_UTXO)\n+\t{\n+\t\tkey = keyTmp.second;\n+\t\treturn true;\n+\t}\n+\treturn false;\n+}\n+\n+bool UtxoIndexDBCursor::GetValue(SerializableUtxoSet& utxoSet)\n+{\n+\treturn pcursor->GetValue(utxoSet);\n+}\n+\n+bool UtxoIndexDBCursor::Valid() const\n+{\n+\treturn keyTmp.first == DB_UTXO;\n+}\n+\n+void UtxoIndexDBCursor::Next()\n+{\n+\tpcursor->Next();\n+\tif(pcursor->Valid() and pcursor->GetKey(keyTmp))\n+\t\treturn;\n+\telse\n+\t\tkeyTmp.first = 0;\n+}\n+\n+UtxoIndex::UtxoIndex(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+\tm_db(std::move(MakeUnique<UtxoIndex::DB>(n_cache_size, f_memory, f_wipe)))\n+{\n+\n+}\n+\n+UtxoIndex::~UtxoIndex() {\n+\n+}\n+\n+void UtxoIndex::Start()\n+{\n+\tRegisterValidationInterface(this);\n+}\n+\n+void UtxoIndex::TransactionAddedToMempool(const CTransactionRef &ptxn) {\n+\tLOCK(cs_utxoCacheMempool);\n+\tconst CTransaction &tx = *ptxn;\n+\tfor (unsigned int i = 0; i < tx.vout.size(); i++)\n+\t{\n+\t\tif (tx.vout[i].IsNull() or tx.vout[i].scriptPubKey.IsUnspendable())\n+\t\t\tcontinue;\n+\n+\t\tauto utxoKey = CScriptID(tx.vout[i].scriptPubKey);\n+\t\tutxoCacheMempool[utxoKey].insert(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+\t}\n+}\n+\n+void UtxoIndex::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+\tLOCK(cs_utxoCacheMempool);\n+\tconst CTransaction &tx = *ptx;\n+\tfor (unsigned int i = 0; i < tx.vout.size(); i++)\n+\t{\n+\t\tif (tx.vout[i].IsNull() or tx.vout[i].scriptPubKey.IsUnspendable())\n+\t\t\tcontinue;\n+\t\n+\t\tstd::map<CScriptID, SerializableUtxoSet>::iterator it = utxoCacheMempool.find(CScriptID(tx.vout[i].scriptPubKey));\n+\t    \n+\t\tif (it != utxoCacheMempool.end())\n+\t\t{\n+\t        it->second.erase(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+\t        if (it->second.empty())\n+\t            utxoCacheMempool.erase(it);\n+\t    }\n+\t}\t\n+}\n+\n+void UtxoIndex::BlockConnected(\tconst std::shared_ptr<const CBlock> &block,\n+\t\t\t\t\t\t\t\tconst CBlockIndex *pindex,\n+\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo,\n+\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted)\n+{\n+\tassert(block->vtx.size() > 0);\n+\t{\n+\t\tLOCK(cs_utxoCache);\n+\t\tremoveSpentUtxosOnTipConnected(*block, *blockundo);\n+\t\taddNewUtxosOnTipConnected(*block);\n+\t}\n+\tWriteBestBlock(block->GetHash());\n+}\n+\n+void UtxoIndex::BlockDisconnected(\tconst std::shared_ptr<const CBlock> &block,\n+\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) {\n+\tassert(block->vtx.size() > 0);\n+\tLOCK(cs_utxoCache);\n+\trestoreSpentUtxosOnTipDisconnected(*block, *blockundo);\n+\tremoveUtxosOnTipDisconnected(*block);\n+}\n+\n+BaseIndex::DB& UtxoIndex::GetDB() const { return *m_db; }\n+\n+void UtxoIndex::removeUtxo(const CTxOut& txout, const COutPoint outpoint)\n+{\n+\tif(txout.IsNull() or txout.scriptPubKey.IsUnspendable())\n+\t\treturn;\n+\tconst CScriptID utxoCacheKey = CScriptID(txout.scriptPubKey);\n+\tloadToCache(utxoCacheKey);\n+\tif(utxoCache.count(utxoCacheKey) == 0)\n+\t\treturn;\n+\tSerializableUtxoSet& utxoCacheSet = utxoCache.at(utxoCacheKey);\n+\t\tutxoCacheSet.erase(outpoint);\n+}\n+\n+void UtxoIndex::removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo)\n+{\n+\n+\tfor(unsigned int i = 1; i < block.vtx.size(); ++i)\n+\t{\n+\t\tfor(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n+\t\t{\n+\t\t\tremoveUtxo(\tblockundo.vtxundo[i-1].vprevout[j].out,\n+\t\t\t\t\t\tblock.vtx[i]->vin[j].prevout);\n+\t\t}\n+\t}\n+}\n+\n+void UtxoIndex::removeUtxosOnTipDisconnected(const CBlock& block)\n+{\n+\tfor(unsigned int i = block.vtx.size() - 1; i >= 0; --i)\n+\t{\n+\t\tfor(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n+\t\t{\n+\t\t\tremoveUtxo(\tblock.vtx[i]->vout[j], \n+\t\t\t\t\t\tCOutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n+\t\t}\n+\t\tif(i==0)\n+\t\t\tbreak;\n+\t}\n+}\n+\n+void UtxoIndex::loadToCache(const CScriptID& key)\n+{\n+\tif(not utxoCache[key].empty())\n+\t\treturn;\n+\tm_db->ReadUtxos(key, utxoCache[key]);\n+}\n+\n+void UtxoIndex::addUtxo(const CScript& scriptPubKey, COutPoint outpoint)\n+{\n+\tCTxDestination dest;\n+\tExtractDestination(scriptPubKey, dest);\n+\tconst CScriptID utxoCacheKey(GetScriptForDestination(dest));\t\n+\tloadToCache(utxoCacheKey);\n+\tSerializableUtxoSet& utxoCacheSet = utxoCache[utxoCacheKey];\n+\tutxoCacheSet.insert(outpoint);\n+}\n+\n+void UtxoIndex::restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo)\n+{\n+\tfor(unsigned int i = block.vtx.size() - 1; i > 0; --i)\n+\t{\n+\t\tfor(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n+\t\t{\n+\t\t\taddUtxo(blockundo.vtxundo[i-1].vprevout[j].out.scriptPubKey,\n+\t\t\t\t\tblock.vtx[i]->vin[j].prevout);\n+\t\t}\n+\t}\n+}\n+\n+void UtxoIndex::addNewUtxosOnTipConnected(const CBlock& block)\n+{\n+\tfor(unsigned int i = 0; i < block.vtx.size(); ++i)\n+\t{\n+\t\tfor(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n+\t\t{\n+\t\t\taddUtxo(block.vtx[i]->vout[j].scriptPubKey, \n+\t\t\t\t\tCOutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n+\t\t}\n+\t}\n+}\n+\n+void UtxoIndex::getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script)\n+{\n+\tconst CScriptID key(script);\n+\tloadToCache(key);\n+\tutxoSet.insert(utxoCache[key].begin(), utxoCache[key].end());\n+}\n+\n+void UtxoIndex::appendMempoolUtxos(SerializableUtxoSet& utxoSet, const CScriptID& key)\n+{\n+\t\tLOCK(cs_utxoCacheMempool);\n+\t\tCoin dummyCoin;\n+\t\tutxoSet.insert(utxoCacheMempool[key].begin(), utxoCacheMempool[key].end());\n+\t\tLOCK(mempool.cs);\n+\t\tCCoinsViewMemPool view(pcoinsTip.get(), mempool);\n+\t\tfor(const COutPoint& outpoint: utxoSet)\n+\t\t{\n+\t\t\tif(not view.GetCoin(outpoint, dummyCoin))\n+\t\t\t\tutxoSet.erase(outpoint);\n+\t\t\tif(mempool.isSpent(outpoint))\n+\t\t\t\tutxoSet.erase(outpoint);\n+\t\t}\n+}\n+\n+SerializableUtxoSet UtxoIndex::getUtxosForScript(const CScript& script, unsigned int minConf)\n+{\n+\tconst CScriptID key(script);\n+\tLOCK(cs_utxoCache);\n+\t\n+\tSerializableUtxoSet retSet{};\n+\tgetConfirmedUtxos(retSet, script);\n+\tif(minConf == 0)\n+\t\tappendMempoolUtxos(retSet, key);\n+\t\n+\treturn retSet;\n+}\n+\n+bool UtxoIndex::Flush()\n+{\n+\tLOCK(cs_utxoCache);\n+\tbool writeResult = m_db->WriteUtxos(utxoCache);\n+\tif(writeResult == true)\n+\t\tutxoCache.clear();\t\n+\treturn writeResult;\n+}\n+\n+int64_t UtxoIndex::countCoins(const std::unique_ptr<CCoinsViewDB>& coins)\n+{\n+\tstd::unique_ptr<CCoinsViewCursor> coinsCursor(coins->Cursor());\n+\tint64_t coinsCount = 0;\n+\twhile(coinsCursor->Valid())\n+\t{\n+\t\t++coinsCount;\n+\t\tcoinsCursor->Next();\n+\t}\n+\treturn coinsCount;\n+}\n+\n+bool UtxoIndex::createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor)\n+{\n+\tCOutPoint outpoint;\n+\tCoin coin;\n+\n+\tif(not coinsCursor->GetKey(outpoint) or not coinsCursor->GetValue(coin))\n+\t\treturn false;\n+\n+\tif(not coin.out.IsNull() and not coin.out.scriptPubKey.IsUnspendable())\n+\t{\n+\t\tLOCK(cs_utxoCache);\n+\t\tconst CScriptID key = CScriptID(coin.out.scriptPubKey);\n+\t\tif(utxoCache.count(key) == 0)\n+\t\t{\n+\t\t\tSerializableUtxoSet utxos;\n+\t\t\tm_db->ReadUtxos(key, utxos);\n+\t\t\tutxoCache.insert(std::make_pair(key, utxos));\n+\t\t}\n+\t\tloadToCache(key);\n+\t\tutxoCache[key].insert(outpoint);\n+\t}\n+\treturn true;\n+}\n+\n+bool UtxoIndex::GenerateUtxoIndex(const std::unique_ptr<CCoinsViewDB>& coins)\n+{\n+    int64_t coinsCount = countCoins(coins);\n+    int64_t coinsProcessed = 0;\n+\t\n+    LogPrintf(\"GenerateUtxoIndex, coinsCount:%d\\n\", coinsCount);\n+\t\n+    std::unique_ptr<CCoinsViewCursor> coinsCursor(coins->Cursor());\n+\n+    while(coinsCursor->Valid())\n+    {\n+\t    try{\n+            boost::this_thread::interruption_point();\n+\t\t\n+            if(coinsCount > 0 and coinsProcessed % 1000 == 0)\n+                uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)coinsProcessed / (double)coinsCount) * (double)100), false);\n+\n+            if(not createUtxoRecordFromCoin(coinsCursor)){\n+                LogPrintf(\"Error creating utxo record from coin\\n\");\n+                return false;\n+            }\n+\n+            if(utxoCache.size() > DB_UTXO_FLUSH_FREQUENCY)\n+                Flush();\n+\n+            coinsProcessed++;\n+            coinsCursor->Next();\n+\t    }\n+        catch(std::exception &e){\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+\tWriteBestBlock(coins->GetBestBlock());\n+\tFlush();\n+\treturn true;\n+}\n+\n+bool UtxoIndex::removeUtxoRecord(\tconst std::unique_ptr<UtxoIndexDBCursor>& cursor,\n+\t\t\t\t\t\t\t\t\tstd::map<CScriptID, SerializableUtxoSet>& keysToDelete,\n+\t\t\t\t\t\t\t\t\tint64_t counter)\n+{\n+\tCScriptID key;\n+\tif(not cursor->GetKey(key))\n+\t\treturn false;\n+\n+\tkeysToDelete.emplace(std::make_pair(key, SerializableUtxoSet{}));\n+\t++counter;\n+\tif(keysToDelete.size() > DB_UTXO_FLUSH_FREQUENCY)\n+\t{\n+\t\tm_db->WriteUtxos(keysToDelete);\n+\t\tkeysToDelete.clear();\n+\t}\n+\tcursor->Next();\n+\treturn true;\n+}\n+\n+bool UtxoIndex::DeleteUtxoIndex()\n+{\n+\tLogPrintf(\"DeleteUtxoIndex\\n\");\n+\tstd::unique_ptr<UtxoIndexDBCursor> cursor(m_db->Cursor());\n+\tstd::map<CScriptID, SerializableUtxoSet> keysToDelete;\n+\t\n+\tint64_t counter = 0;\n+\twhile(cursor->Valid())\n+\t{\n+\t\tboost::this_thread::interruption_point();\n+\t\ttry\n+\t\t{\n+\t\t\tif(not removeUtxoRecord(cursor, keysToDelete, counter))\n+\t\t\t\tbreak;\n+\t\t}\n+\t\tcatch(std::exception &e)\n+\t\t{\n+\t\t\treturn error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+\t\t}\n+\t}\n+\tif(not keysToDelete.empty())\n+\t{\n+\t\tm_db->WriteUtxos(keysToDelete);\n+\t\tkeysToDelete.clear();\n+\t}\n+\tWriteBestBlock(uint256());\n+\tLogPrintf(\"Address index with %d addresses successfully deleted.\\n\", counter);\t\n+\treturn true;\n+}\n+\t\n+bool UtxoIndex::WriteBestBlock(const uint256& value)\n+{\n+\tCDBBatch batch(*m_db);\n+\tbatch.Write(DB_UTXO_BEST_BLOCK, value);\n+\treturn m_db->WriteBatch(batch);\n+}\n+\t\n+bool UtxoIndex::ReadBestBlock(uint256& value)\n+{\n+\treturn m_db->Read(DB_UTXO_BEST_BLOCK, value);\n+}"
      },
      {
        "sha": "342a86d36229d3f85ffc137314535b698308ea43",
        "filename": "src/index/utxoindex.h",
        "status": "added",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/utxoindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/index/utxoindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/utxoindex.h?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -0,0 +1,114 @@\n+#include <coins.h>\n+#include <dbwrapper.h>\n+#include <validationinterface.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <serialize.h>\n+#include <script/standard.h>\n+#include <sync.h>\n+#include <undo.h>\n+#include <index/base.h>\n+\n+#include <map>\n+#include <memory>\n+\n+static const char DB_UTXO = 'd';\n+static const char DB_UTXO_BEST_BLOCK = 'D';\n+\n+const unsigned int DB_UTXO_FLUSH_FREQUENCY = 10000;\n+\n+class CCoinsViewDB;\n+class UtxoIndexDBCursor;\n+\n+class SerializableUtxoSet : public std::set<COutPoint>\n+{\n+public:\n+\tADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        //READWRITE(setCoins);\n+\t\tREADWRITE(static_cast<std::set<COutPoint>&>(*this));\n+    }\t\n+};\n+\n+\n+class UtxoIndex final : public BaseIndex\n+{\n+protected:\n+\tclass DB;\n+public:\n+\texplicit UtxoIndex(size_t n_cache_size, bool f_memory, bool f_wipe);\n+\n+\t~UtxoIndex() override;\n+//\tUtxoIndex(UtxoIndex&) = delete;\t\n+//\tUtxoIndex& operator=(const UtxoIndex&) = delete;\n+\n+\tvoid Start();\n+\n+\tvoid TransactionAddedToMempool(const CTransactionRef &ptxn) override;\n+    void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n+\t\n+\tvoid BlockConnected(const std::shared_ptr<const CBlock> &block, \n+\t\t\t\t\t\tconst CBlockIndex *pindex, \n+\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n+\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted) override;\n+\t\n+\tvoid BlockDisconnected(\tconst std::shared_ptr<const CBlock> &block,\n+\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override;\n+\n+\tBaseIndex::DB& GetDB() const;\n+    const char* GetName() const override { return \"utxoindex\"; }\n+\t\n+\t/*void UpdateUtxoIndexOnTipConnected(const CBlock& block, const CBlockUndo& blockundo);\n+\tvoid UpdateUtxoIndexOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo);\n+\tvoid updateIndexOnTransactionAddedToMempool(const CTransaction& tx); \n+    void updateIndexOnTransactionRemovedFromMempool(const CTransaction& tx);\n+*/\tSerializableUtxoSet getUtxosForScript(const CScript& script, unsigned int minConf);\n+\tbool Flush();\n+\tbool GenerateUtxoIndex(const std::unique_ptr<CCoinsViewDB>&);\n+\tbool DeleteUtxoIndex();\n+\tbool WriteBestBlock(const uint256& value);\n+\tbool ReadBestBlock(uint256& value);\n+\n+private:\n+\tconst std::unique_ptr<DB> m_db;\n+\tstd::map<CScriptID, SerializableUtxoSet> utxoCache;\n+\tstd::map<CScriptID, SerializableUtxoSet> utxoCacheMempool;\n+\tCCriticalSection cs_utxoCache;\n+\tCCriticalSection cs_utxoCacheMempool;\n+\t\n+\tvoid loadToCache(const CScriptID& key);\n+\tint64_t countCoins(const std::unique_ptr<CCoinsViewDB>& coins);\n+\tvoid removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo);\n+\tvoid addNewUtxosOnTipConnected(const CBlock& block);\n+\tvoid restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo);\n+\tvoid removeUtxosOnTipDisconnected(const CBlock& block);\n+\tvoid removeUtxo(const CTxOut& txout, COutPoint outpoint);\n+\tvoid addUtxo(const CScript& scriptPubKey, COutPoint outpoint);\n+\tvoid getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script);\n+\tvoid appendMempoolUtxos(SerializableUtxoSet& utxoSet, const CScriptID& key);\n+\tbool createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor);\n+\tbool removeUtxoRecord(\tconst std::unique_ptr<UtxoIndexDBCursor>& cursor,\n+\t\t\t\t\t\t\tstd::map<CScriptID, SerializableUtxoSet>& keysToDelete,\n+\t\t\t\t\t\t\tint64_t counter);\n+};\n+\n+class UtxoIndexDBCursor\n+{\n+public:\n+\tUtxoIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n+\n+\tbool GetKey(CScriptID& key);\n+\tbool GetValue(SerializableUtxoSet& utxoSet);\n+\tunsigned int GetValueSize() const;\n+\n+\tbool Valid() const;\n+\tvoid Next();\n+\n+//private:\n+\tstd::pair<char, CScriptID> keyTmp;\t\n+\tstd::unique_ptr<CDBIterator> pcursor;\n+\n+//\tfriend class UtxoIndex::DB;\n+};\n+extern std::unique_ptr<UtxoIndex> g_utxoindex;"
      },
      {
        "sha": "bdd5ec6151a1fd17b9eea6f8ca540a2938c8190a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -21,6 +21,7 @@\n #include <httprpc.h>\n #include <interfaces/chain.h>\n #include <index/txindex.h>\n+#include <index/utxoindex.h>\n #include <key.h>\n #include <validation.h>\n #include <miner.h>\n@@ -201,7 +202,8 @@ void Shutdown(InitInterfaces& interfaces)\n     peerLogic.reset();\n     g_connman.reset();\n     g_txindex.reset();\n-\n+    g_utxoscriptindex.reset();\n+    \n     if (g_is_mempool_loaded && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool();\n     }\n@@ -375,6 +377,7 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n     gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-utxoindex\", strprintf(\"Maintain unspent output index by script, used by the getutxoindex rpc call (default: %u)\", DEFAULT_UTXOINDEX), false, OptionsCategory::OPTIONS);\n \n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n@@ -1390,16 +1393,21 @@ bool AppInitMain(InitInterfaces& interfaces)\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n+    int64_t nUtxoIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-utxoindex\", DEFAULT_UTXOINDEX) ? nMaxTxIndexCache << 20 : 0);\n+\tnTotalCache -= nUtxoIndexCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n-    nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+\tnCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache    \n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1fMiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         LogPrintf(\"* Using %.1fMiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n     }\n+    if (gArgs.GetBoolArg(\"-utxoindex\", DEFAULT_UTXOINDEX)) {\n+        LogPrintf(\"* Using %.1fMiB for transaction index database\\n\", nUtxoIndexCache * (1.0 / 1024 / 1024));\n+\t}\n     LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n     LogPrintf(\"* Using %.1fMiB for in-memory UTXO set (plus up to %.1fMiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n@@ -1580,6 +1588,32 @@ bool AppInitMain(InitInterfaces& interfaces)\n         g_txindex->Start();\n     }\n \n+    if(gArgs.IsArgSet(\"-utxoindex\"))\n+    {\n+        g_utxoindex = MakeUnique<UtxoIndex>(nUtxoIndexCache, false, fReindex);\n+\t    \n+        if(gArgs.GetBoolArg(\"-utxoindex\", DEFAULT_UTXOINDEX)) \n+        {\n+            uint256 utxoindexBestBlock;\n+            if(not g_utxoindex->ReadBestBlock(utxoindexBestBlock) or utxoindexBestBlock != pcoinsdbview->GetBestBlock()){\n+                if(not g_utxoindex->DeleteUtxoIndex()){\n+                    LogPrintf(\"Error deleting utxoindex\\n\");\n+                    return false;\t\n+                }\n+                if(not g_utxoindex->GenerateUtxoIndex(pcoinsdbview)){\n+                    LogPrintf(\"Error building utxoindex\\n\");\n+                    return false;\n+                }\n+            }\n+            g_utxoindex->Start();\n+        }\n+        else\n+        {\n+            g_utxoindex->DeleteUtxoIndex();\n+            g_utxoindex.reset();\t\n+        }\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : interfaces.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "a748f18fea27669e907b4f3ad0b6741ca68d6a2f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -859,7 +859,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &schedu\n  * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n  * block. Also save the time of the last tip update.\n  */\n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK(g_cs_orphans);\n \n     std::vector<uint256> vOrphanErase;"
      },
      {
        "sha": "cd6777e04e6be5b9245b0516b91f8b42a602dfa2",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -30,7 +30,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     /**\n      * Overridden from CValidationInterface.\n      */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& vtxConflicted) override;\n     /**\n      * Overridden from CValidationInterface.\n      */"
      },
      {
        "sha": "78ef2d3afb016b31f92cbd664daa91bd56342a5c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 0,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -32,6 +32,9 @@\n #include <validationinterface.h>\n #include <versionbitsinfo.h>\n #include <warnings.h>\n+#include <base58.h>\n+#include <script/standard.h>\n+#include <index/utxoindex.h>\n \n #include <assert.h>\n #include <stdint.h>\n@@ -41,6 +44,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/thread/thread.hpp> // boost::thread::interrupt\n \n+#include <limits>\n #include <memory>\n #include <mutex>\n #include <condition_variable>\n@@ -1090,6 +1094,114 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsigned int minConf)\n+{\n+\tfor(auto outpoint: utxoSet)\n+\t{\n+\t\tCoin coin;\n+\t\tif(minConf == 0)\n+\t\t{\n+\t\t\tLOCK(mempool.cs);\n+\t\t\tCCoinsViewMemPool view(pcoinsTip.get(), mempool);\n+\t\t\tif(not view.GetCoin(outpoint, coin))\n+\t\t\t\tcontinue;\n+\t\t}\n+\t\telse if(not pcoinsTip->GetCoin(outpoint, coin))\n+\t\t\tcontinue;\n+\t\n+\t\tif(coin.out.IsNull() or coin.out.scriptPubKey.IsUnspendable())\n+\t\t\tcontinue;\n+\n+\t\tif(coin.nHeight != MEMPOOL_HEIGHT and not (chainActive[coin.nHeight] and chainActive[coin.nHeight]->phashBlock))\n+\t\t\tthrow JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n+\n+\t\tCBlockIndex *pindex = mapBlockIndex.find(pcoinsTip->GetBestBlock())->second;\n+\n+\t\tint nConfirmations = 0;\n+\t\tif ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n+\t\t\tnConfirmations = pindex->nHeight - coin.nHeight + 1;\n+\t\tif (nConfirmations < minConf)\n+\t\t\tcontinue;\n+\n+\t\tUniValue oScriptPubKey(UniValue::VOBJ);\n+\t\tScriptPubKeyToUniv(coin.out.scriptPubKey, oScriptPubKey, true);\n+\t\n+\t\tUniValue o(UniValue::VOBJ);\n+\t\to.push_back(Pair(\"confirmations\", nConfirmations));\n+\t\to.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n+\t\to.push_back(Pair(\"vout\", (int)outpoint.n));\n+\t\to.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+\t\to.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n+\t\to.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+\t\to.push_back(Pair(\"bestblockhash\", pindex->GetBlockHash().GetHex()));\n+\t\to.push_back(Pair(\"bestblockheight\", pindex->nHeight));\n+\t\to.push_back(Pair(\"bestblocktime\", pindex->GetBlockTime()));\n+\t\tif ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n+\t\t{\n+\t\t\to.push_back(Pair(\"blockhash\", chainActive[coin.nHeight]->GetBlockHash().GetHex()));\n+\t\t\to.push_back(Pair(\"blockheight\", (uint64_t)coin.nHeight));\n+\t\t\to.push_back(Pair(\"blocktime\", chainActive[coin.nHeight]->GetBlockTime()));\n+\t\t}\n+\t\tvObjects.push_back(o);\n+\t}\n+}\n+\n+UniValue getutxoindex(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp or request.params.size() != 2)\n+        throw std::runtime_error(\n+            \"getutxoindex ( minconf [\\\"address\\\",...] ) \\n\"\n+\t\t\t\"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+\t\t\t\"Note that passing minconf=0 will include the mempool.\\n\"\n+\t\t\t\"\\nTo use this function, you must start bitcoin with the -utxoindex parameter.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf          (numeric) Minimum confirmations\\n\"\n+            \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n+\t\t\t\"    [\\n\"\n+            \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+        );\n+\t\n+\tUniValue retVal;\n+\t\n+\tif(not g_utxoindex)\n+\t\tthrow JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -utxoindex parameter.\");\n+\n+\tRPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VARR});\n+\n+\tunsigned int minConf = request.params[0].get_int();\n+\tUniValue inputs = request.params[1].get_array();\n+    \n+    if (minConf < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n+ \n+    UniValue vObjects(UniValue::VARR);\n+\t\n+\tfor(unsigned int idx = 0; idx < inputs.size(); ++idx)\n+\t{\n+\t\tCScript script;\n+\t\tconst UniValue& input = inputs[idx];\n+        CTxDestination destination = DecodeDestination(input.get_str());\n+\t\tif(IsValidDestination(destination))\n+\t\t{\n+\t\t\tscript = GetScriptForDestination(destination);\n+\t\t}\n+\t\telse if(IsHex(input.get_str()))\n+\t\t{\n+\t\t\tstd::vector<unsigned char> data(ParseHex(input.get_str()));\n+\t\t\tscript = CScript(data.begin(), data.end());\n+\t\t}\n+\t\telse\n+\t\t\tthrow JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n+\t\n+\t\tSerializableUtxoSet utxoSet = g_utxoindex->getUtxosForScript(script, minConf);\t\n+\t\tutxoSetToJson(utxoSet, vObjects, minConf);\n+\t}\n+\n+\treturn vObjects;\n+}\n+\n static UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n@@ -2204,6 +2316,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempooldescendants\",  &getmempooldescendants,  {\"txid\",\"verbose\"} },\n     { \"blockchain\",         \"getmempoolentry\",        &getmempoolentry,        {\"txid\"} },\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         {} },\n+\t{ \"blockchain\",         \"getutxoindex\",\t\t\t  &getutxoindex,\t\t   {\"minconf\", \"addresses\"} },\t\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          {\"verbose\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               {\"txid\",\"n\",\"include_mempool\"} },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {} },"
      },
      {
        "sha": "f4edf113086734f46f722b64a8d2a6321530c69e",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -143,6 +143,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setnetworkactive\", 0, \"state\" },\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n+    { \"getutxoindex\", 0, \"minconf\" },\n+    { \"getutxoindex\", 1, \"addresses\" },\n     { \"bumpfee\", 1, \"options\" },\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },"
      },
      {
        "sha": "82b62c415e78c884dbbcb3d3e3ec3944889b46e0",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -30,15 +30,16 @@ struct TestSubscriber : public CValidationInterface {\n         BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n     }\n \n-    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted) override\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& txnConflicted) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n         BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n \n         m_expected_tip = block->GetHash();\n     }\n \n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& block) override\n+    void BlockDisconnected( const std::shared_ptr<const CBlock>& block,\n+\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n "
      },
      {
        "sha": "1c533938f9405160fc737469af351c7aaafb70e8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 26,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -17,6 +17,7 @@\n #include <cuckoocache.h>\n #include <hash.h>\n #include <index/txindex.h>\n+#include <index/utxoindex.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -168,9 +169,9 @@ class CChainState {\n     bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n-    DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n+    DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view, std::shared_ptr<CBlockUndo> blockundo);\n     bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                      CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CCoinsViewCache& view, const CChainParams& chainparams, std::shared_ptr<CBlockUndo> blockundo, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block disconnection on our pcoinsTip:\n     bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n@@ -1567,17 +1568,19 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n  *  When FAILED is returned, view is left in an indeterminate state. */\n-DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n+DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view, std::shared_ptr<CBlockUndo> blockUndo)\n {\n     bool fClean = true;\n \n-    CBlockUndo blockUndo;\n-    if (!UndoReadFromDisk(blockUndo, pindex)) {\n+\tif(not blockUndo)\n+\t\tblockUndo = std::make_shared<CBlockUndo>();\n+\n+    if (!UndoReadFromDisk(*blockUndo, pindex)) {\n         error(\"DisconnectBlock(): failure reading undo data\");\n         return DISCONNECT_FAILED;\n     }\n \n-    if (blockUndo.vtxundo.size() + 1 != block.vtx.size()) {\n+    if (blockUndo->vtxundo.size() + 1 != block.vtx.size()) {\n         error(\"DisconnectBlock(): block and undo data inconsistent\");\n         return DISCONNECT_FAILED;\n     }\n@@ -1603,7 +1606,7 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n \n         // restore inputs\n         if (i > 0) { // not coinbases\n-            CTxUndo &txundo = blockUndo.vtxundo[i-1];\n+            CTxUndo txundo = blockUndo->vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size()) {\n                 error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n                 return DISCONNECT_FAILED;\n@@ -1614,7 +1617,6 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n                 if (res == DISCONNECT_FAILED) return DISCONNECT_FAILED;\n                 fClean = fClean && res != DISCONNECT_UNCLEAN;\n             }\n-            // At this point, all of txundo.vprevout should have been moved out.\n         }\n     }\n \n@@ -1794,7 +1796,7 @@ static int64_t nBlocksTotal = 0;\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n+                  CCoinsViewCache& view, const CChainParams& chainparams, std::shared_ptr<CBlockUndo> blockundo, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -1969,15 +1971,16 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime2 - nTime1), nTimeForks * MICRO, nTimeForks * MILLI / nBlocksTotal);\n \n-    CBlockUndo blockundo;\n+\tif(not blockundo)\n+\t\tblockundo = std::make_shared<CBlockUndo>();\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : nullptr);\n \n     std::vector<int> prevheights;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     int64_t nSigOpsCost = 0;\n-    blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    blockundo->vtxundo.reserve(block.vtx.size() - 1);\n     std::vector<PrecomputedTransactionData> txdata;\n     txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n@@ -2034,9 +2037,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n \n         CTxUndo undoDummy;\n         if (i > 0) {\n-            blockundo.vtxundo.push_back(CTxUndo());\n+            blockundo->vtxundo.push_back(CTxUndo());\n         }\n-        UpdateCoins(tx, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n+        UpdateCoins(tx, view, i == 0 ? undoDummy : blockundo->vtxundo.back(), pindex->nHeight);\n     }\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n@@ -2056,7 +2059,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     if (fJustCheck)\n         return true;\n \n-    if (!WriteUndoDataForBlock(blockundo, state, pindex, chainparams))\n+    if (!WriteUndoDataForBlock(*blockundo, state, pindex, chainparams))\n         return false;\n \n     if (!pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n@@ -2176,7 +2179,10 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             // Flush the chainstate (which may refer to block index entries).\n             if (!pcoinsTip->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n-            nLastFlush = nNow;\n+            if(g_utxoindex)\n+\t\t\t\tif(not g_utxoindex->Flush())\n+\t\t\t\t\treturn AbortNode(state, \"Failed to write to utxo database\");\n+\t\t\tnLastFlush = nNow;\n             full_flush_completed = true;\n         }\n     }\n@@ -2296,15 +2302,16 @@ bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& cha\n     assert(pindexDelete);\n     // Read block from disk.\n     std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n-    CBlock& block = *pblock;\n+    std::shared_ptr<CBlockUndo> blockundo = std::make_shared<CBlockUndo>();\n+\tCBlock& block = *pblock;\n     if (!ReadBlockFromDisk(block, pindexDelete, chainparams.GetConsensus()))\n         return AbortNode(state, \"Failed to read block\");\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n         CCoinsViewCache view(pcoinsTip.get());\n         assert(view.GetBestBlock() == pindexDelete->GetBlockHash());\n-        if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)\n+        if (DisconnectBlock(block, pindexDelete, view, blockundo) != DISCONNECT_OK)\n             return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         bool flushed = view.Flush();\n         assert(flushed);\n@@ -2332,7 +2339,7 @@ bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& cha\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    GetMainSignals().BlockDisconnected(pblock);\n+    GetMainSignals().BlockDisconnected(pblock, blockundo);\n     return true;\n }\n \n@@ -2346,6 +2353,7 @@ struct PerBlockConnectTrace {\n     CBlockIndex* pindex = nullptr;\n     std::shared_ptr<const CBlock> pblock;\n     std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n+\tstd::shared_ptr<const CBlockUndo> pblockundo;\n     PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n };\n /**\n@@ -2378,12 +2386,15 @@ class ConnectTrace {\n         pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n     }\n \n-    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n+    void BlockConnected(CBlockIndex* pindex,\n+\t\t\t\t\t\tstd::shared_ptr<const CBlock> pblock,\n+\t\t\t\t\t\tstd::shared_ptr<CBlockUndo> pblockundo) {\n         assert(!blocksConnected.back().pindex);\n         assert(pindex);\n         assert(pblock);\n         blocksConnected.back().pindex = pindex;\n         blocksConnected.back().pblock = std::move(pblock);\n+\t\tblocksConnected.back().pblockundo = std::move(pblockundo);\n         blocksConnected.emplace_back();\n     }\n \n@@ -2432,9 +2443,10 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     int64_t nTime2 = GetTimeMicros(); nTimeReadFromDisk += nTime2 - nTime1;\n     int64_t nTime3;\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * MILLI, nTimeReadFromDisk * MICRO);\n+\tstd::shared_ptr<CBlockUndo> blockundo = std::make_shared<CBlockUndo>();\n     {\n         CCoinsViewCache view(pcoinsTip.get());\n-        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n+        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams, blockundo);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -2464,7 +2476,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);\n \n-    connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n+    connectTrace.BlockConnected(pindexNew, std::move(pthisBlock), blockundo);\n     return true;\n }\n \n@@ -2716,7 +2728,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n                 for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                     assert(trace.pblock && trace.pindex);\n-                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n+                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.pblockundo, trace.conflictedTxs);\n                 }\n             } while (!chainActive.Tip() || (starting_tip && CBlockIndexWorkComparator()(chainActive.Tip(), starting_tip)));\n             if (!blocks_connected) return true;\n@@ -3575,7 +3587,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, nullptr, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -4016,7 +4028,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n             assert(coins.GetBestBlock() == pindex->GetBlockHash());\n-            DisconnectResult res = g_chainstate.DisconnectBlock(block, pindex, coins);\n+            DisconnectResult res = g_chainstate.DisconnectBlock(block, pindex, coins, nullptr);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n@@ -4045,7 +4057,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!g_chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!g_chainstate.ConnectBlock(block, state, pindex, coins, chainparams, nullptr))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         }\n     }\n@@ -4116,7 +4128,7 @@ bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n                 return error(\"RollbackBlock(): ReadBlockFromDisk() failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n             }\n             LogPrintf(\"Rolling back %s (%i)\\n\", pindexOld->GetBlockHash().ToString(), pindexOld->nHeight);\n-            DisconnectResult res = DisconnectBlock(block, pindexOld, cache);\n+            DisconnectResult res = DisconnectBlock(block, pindexOld, cache, nullptr);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"RollbackBlock(): DisconnectBlock failed at %d, hash=%s\", pindexOld->nHeight, pindexOld->GetBlockHash().ToString());\n             }"
      },
      {
        "sha": "73b80b795971bc4676500ce6af67a3a3c927b1d5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -117,6 +117,7 @@ static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+static const bool DEFAULT_UTXOINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n /** Default for -persistmempool */\n static const bool DEFAULT_PERSIST_MEMPOOL = true;"
      },
      {
        "sha": "bb0bc006227139edbe1b545dc018b94d1937396c",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -9,6 +9,8 @@\n #include <scheduler.h>\n #include <txmempool.h>\n #include <util/system.h>\n+#include <undo.h> \n+#include <util.h>\n #include <validation.h>\n \n #include <list>\n@@ -20,8 +22,12 @@\n struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (\tconst std::shared_ptr<const CBlock> &,\n+\t\t\t\t\t\t\t\t\tconst CBlockIndex *pindex, \n+\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n+\t\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (\tconst std::shared_ptr<const CBlock> &,\n+\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n@@ -74,8 +80,8 @@ CMainSignals& GetMainSignals()\n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3, _4));\n+    g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1, _2));\n     g_signals.m_internals->TransactionRemovedFromMempool.connect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->ChainStateFlushed.connect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n     g_signals.m_internals->Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n@@ -88,8 +94,8 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.m_internals->ChainStateFlushed.disconnect(boost::bind(&CValidationInterface::ChainStateFlushed, pwalletIn, _1));\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n-    g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n+    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3, _4));\n+    g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1, _2));\n     g_signals.m_internals->TransactionRemovedFromMempool.disconnect(boost::bind(&CValidationInterface::TransactionRemovedFromMempool, pwalletIn, _1));\n     g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n@@ -148,15 +154,16 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n     });\n }\n \n-void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n-        m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const CBlockUndo> &blockundo, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, blockundo, pvtxConflicted, this] {\n+        m_internals->BlockConnected(pblock, pindex, blockundo, *pvtxConflicted);\n     });\n }\n \n-void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n-        m_internals->BlockDisconnected(pblock);\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock, \n+\t\t\t\t\t\t\t\t\t const std::shared_ptr<const CBlockUndo> &blockundo) {\n+    m_internals->m_schedulerClient.AddToProcessQueue([pblock, blockundo, this] {\n+        m_internals->BlockDisconnected(pblock, blockundo);\n     });\n }\n "
      },
      {
        "sha": "1170c68d537736463ea7e91e03993a2c68181542",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -15,6 +15,7 @@\n extern CCriticalSection cs_main;\n class CBlock;\n class CBlockIndex;\n+class CBlockUndo;\n struct CBlockLocator;\n class CBlockIndex;\n class CConnman;\n@@ -110,13 +111,17 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, \n+\t\t\t\t\t\t\t\tconst CBlockIndex *pindex,\n+\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n+\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted) {}\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    virtual void BlockDisconnected( const std::shared_ptr<const CBlock> &block,\n+\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) {}\n     /**\n      * Notifies listeners of the new active block chain on-disk.\n      *\n@@ -181,8 +186,12 @@ class CMainSignals {\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>> &);\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, \n+\t\t\t\t\t\tconst CBlockIndex *pindex, \n+\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &, \n+\t\t\t\t\t\tconst std::shared_ptr<const std::vector<CTransactionRef>> &);\n+    void BlockDisconnected( const std::shared_ptr<const CBlock> &,\n+\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo);\n     void ChainStateFlushed(const CBlockLocator &);\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);"
      },
      {
        "sha": "5351f2f944543ff08a43fce6e5aa29445b4f7861",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -893,8 +893,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     void LoadToWallet(const CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockDisconnected( const std::shared_ptr<const CBlock>& pblock,\n+\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;"
      },
      {
        "sha": "0cccc7e7562810cf813563eb40c84f99e9676614",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -179,15 +179,19 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n-void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n+void CZMQNotificationInterface::BlockConnected( const std::shared_ptr<const CBlock>& pblock,\n+\t\t\t\t\t\t\t\t\t\t\t\tconst CBlockIndex* pindexConnected, \n+\t\t\t\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n+\t\t\t\t\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef>& vtxConflicted)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction added in the block\n         TransactionAddedToMempool(ptx);\n     }\n }\n \n-void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock)\n+void CZMQNotificationInterface::BlockDisconnected(  const std::shared_ptr<const CBlock>& pblock,\n+\t\t\t\t\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction removed in block disconnection"
      },
      {
        "sha": "c26610d1ac316a6d32957ce542f523b8bdcdd508",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -28,8 +28,9 @@ class CZMQNotificationInterface final : public CValidationInterface\n \n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockDisconnected( const std::shared_ptr<const CBlock>& pblock,\n+\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n \n private:"
      },
      {
        "sha": "4489684a22bb59c86178a7f5123a3d18c092211b",
        "filename": "test/functional/rpc_utxoindex.py",
        "status": "added",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/test/functional/rpc_utxoindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/test/functional/rpc_utxoindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_utxoindex.py?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+\"\"\"utxoindex test\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    sync_blocks,\n+    sync_mempools,\n+    assert_is_hash_string,\n+)\n+from test_framework.test_node import TestNode\n+\n+class UTXOIndexTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[\"-utxoindex\"], [], []]\n+\n+    def check_utxoindex(self, node_id, minConf, addr, expected_txid):\n+        txouts = self.nodes[node_id].getutxoindex(minConf, (addr,))\n+        txid = txouts[0][\"txid\"]\n+        assert_is_hash_string(txid)\n+        assert_equal(txid, expected_txid)\n+\n+    def assert_empty_utxoindex(self, node_id, minConf, addr):\n+        txouts = self.nodes[node_id].getutxoindex(minConf, (addr,))\n+        assert_equal(txouts, [])\n+\n+    def run_test(self):\n+        print(\"Generating test blockchain...\")\n+\n+        # Check that there's no UTXO on any of the nodes\n+        for node in self.nodes:\n+            assert_equal(len(node.listunspent()), 0)\n+\n+        # mining\n+        self.nodes[0].generate(101)\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+\n+        # TX1: send from node0 to node1\n+        # - check if txout from tx1 is there\n+        address = self.nodes[1].getnewaddress()\n+        txid1 = self.nodes[0].sendtoaddress(address, 10)\n+\n+        self.sync_all()\n+\n+        self.check_utxoindex(node_id = 0, minConf = 0, addr = address, expected_txid = txid1)\n+\n+        self.nodes[0].generate(101)  # node will collect its own fee\n+\n+        self.check_utxoindex(node_id=0, minConf=1, addr=address, expected_txid=txid1)\n+\n+        #restart node 2 with utxoindex on, shall reindex utxo database\n+        self.stop_node(2)\n+\n+        self.start_node(2, [\"-utxoindex\"])\n+\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), 5090)\n+        assert_equal(self.nodes[1].getbalance(), 10)\n+\n+        self.check_utxoindex(node_id = 0, minConf = 1, addr = address, expected_txid = txid1)\n+        self.check_utxoindex(node_id = 2, minConf = 1, addr = address, expected_txid = txid1)\n+\n+        # Restart node 2 and check if utxo index is still valid\n+        self.stop_node(2)\n+\n+        self.start_node(2, [\"-utxoindex\"])\n+\n+        self.sync_all()\n+\n+        self.check_utxoindex(node_id = 2, minConf = 1, addr = address, expected_txid = txid1)\n+\n+        # Stop node 2. We want to restart it later and orphan a node 1 block in\n+        # order to test txoutindex handling the reorg. In other words, node 2 is\n+        # stopped so that it won't build on a node 1 block.\n+        self.stop_node(2)\n+\n+        # TX2: send from node1 to node0\n+        # - check if txout from tx1 is gone\n+        # - check if txout from tx2 is there\n+        address2 = self.nodes[0].getnewaddress()\n+        txid2 = self.nodes[1].sendtoaddress(address2, 5)\n+\n+        sync_mempools([self.nodes[0], self.nodes[1]])\n+\n+        self.assert_empty_utxoindex(node_id = 0, minConf = 0, addr = address)\n+        self.check_utxoindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n+\n+        self.nodes[1].generate(1)\n+        self.sync_all([self.nodes[:2]])\n+        assert_equal(self.nodes[0].getbalance(), 5145)\n+\n+        self.assert_empty_utxoindex(node_id=0, minConf=0, addr=address)\n+        self.assert_empty_utxoindex(node_id=0, minConf=1, addr=address)\n+        self.check_utxoindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n+        self.check_utxoindex(node_id=0, minConf=1, addr=address2, expected_txid=txid2)\n+\n+        # start node 2\n+        self.start_node(2, self.extra_args[2])\n+\n+        # mine 10 blocks alone to have the longest chain\n+        self.nodes[2].generate(10)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        self.nodes[2].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # TX2 must be reverted\n+        # - check if txout from tx1 is there again\n+        # - check if txout from tx2 is gone\n+        assert_equal(self.nodes[0].getbalance(), 5640)\n+\n+        self.assert_empty_utxoindex(node_id=0, minConf=0, addr=address)\n+        self.check_utxoindex(node_id = 0, minConf = 1, addr = address, expected_txid = txid1)\n+        self.check_utxoindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n+        self.assert_empty_utxoindex(node_id=0, minConf=1, addr=address2)\n+\n+if __name__ == '__main__':\n+    UTXOIndexTest().main()"
      },
      {
        "sha": "c24d508a260e53e2955818a90ba7dace0d907f1a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3165d0bfd90e28cee4e649fc12fc042a408838b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3165d0bfd90e28cee4e649fc12fc042a408838b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "patch": "@@ -88,6 +88,7 @@\n     'p2p_timeouts.py',\n     'wallet_dump.py',\n     'wallet_listtransactions.py',\n+    'rpc_utxoindex.py',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n     'wallet_zapwallettxes.py',"
      }
    ]
  },
  {
    "sha": "e6aaa3aefc1bf1451109f40270b3c2814b434aae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmFhYTNhZWZjMWJmMTQ1MTEwOWY0MDI3MGIzYzI4MTRiNDM0YWFl",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-09T13:51:06Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-11-13T16:45:11Z"
      },
      "message": "utxoscriptindex: utxoindex to utxoscriptindex rename, unit tests added, copyrights, minor cleanup",
      "tree": {
        "sha": "a85816c726476c74b394164bc11d6f34e00df088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85816c726476c74b394164bc11d6f34e00df088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6aaa3aefc1bf1451109f40270b3c2814b434aae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6aaa3aefc1bf1451109f40270b3c2814b434aae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6aaa3aefc1bf1451109f40270b3c2814b434aae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6aaa3aefc1bf1451109f40270b3c2814b434aae/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3165d0bfd90e28cee4e649fc12fc042a408838b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3165d0bfd90e28cee4e649fc12fc042a408838b"
      }
    ],
    "stats": {
      "total": 599,
      "additions": 389,
      "deletions": 210
    },
    "files": [
      {
        "sha": "c79d5357260f642b1e5c54cb8d2a03659552b1b6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -123,7 +123,7 @@ BITCOIN_CORE_H = \\\n   httpserver.h \\\n   index/base.h \\\n   index/txindex.h \\\n-  index/utxoindex.h \\\n+  index/utxoscriptindex.h \\\n   indirectmap.h \\\n   init.h \\\n   interfaces/chain.h \\\n@@ -236,9 +236,9 @@ libbitcoin_server_a_SOURCES = \\\n   index/base.cpp \\\n   index/txindex.cpp \\\n   interfaces/chain.cpp \\\n-  index/utxoindex.cpp \\\n   interfaces/handler.cpp \\\n   interfaces/node.cpp \\\n+  index/utxoscriptindex.cpp \\\n   init.cpp \\\n   dbwrapper.cpp \\\n   merkleblock.cpp \\"
      },
      {
        "sha": "52e455e33a3824589ff1bc16f5329c8ff5b55f99",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_TESTS =\\\n   test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/util_tests.cpp \\\n+  test/utxoscriptindex_tests.cpp \\\n   test/validation_block_tests.cpp \\\n   test/versionbits_tests.cpp\n "
      },
      {
        "sha": "ea686da47e6c31a6032f454b388dbee9c62c222c",
        "filename": "src/index/utxoscriptindex.cpp",
        "status": "renamed",
        "additions": 111,
        "deletions": 79,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/index/utxoscriptindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/index/utxoscriptindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/utxoscriptindex.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -1,5 +1,9 @@\n-#include \"index/utxoindex.h\"\n-//#include <util.h>\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/utxoscriptindex.h>\n+#include <util.h>\n #include <script/standard.h>\n #include <pubkey.h>\n #include <txmempool.h>\n@@ -10,27 +14,46 @@\n #include<boost/thread.hpp>\n \n \n-std::unique_ptr<UtxoIndex> g_utxoindex;\n+std::unique_ptr<UtxoScriptIndex> g_utxoscriptindex;\n \n+static ScriptHash ScriptIndexHash(const CScript& in){\n+    return Hash160(in.begin(), in.end());\n+}\n \n-class UtxoIndex::DB : public BaseIndex::DB\n+class UtxoScriptIndexDBCursor\n+{\n+public:\n+\tUtxoScriptIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n+\n+\tbool GetKey(ScriptHash& key);\n+\tbool GetValue(SerializableUtxoSet& utxoSet);\n+\tunsigned int GetValueSize() const;\n+\n+\tbool Valid() const;\n+\tvoid Next();\n+\n+\tstd::pair<char, ScriptHash> keyTmp;\n+\tstd::unique_ptr<CDBIterator> pcursor;\n+};\n+\n+class UtxoScriptIndex::DB : public BaseIndex::DB\n {\n public:\n \texplicit DB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-\tbool WriteUtxos(std::map<CScriptID, SerializableUtxoSet>& scriptUtxos);\n-\tbool ReadUtxos(const CScriptID&, SerializableUtxoSet& utxoSet);\n+\tbool WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos);\n+\tbool ReadUtxos(const ScriptHash&, SerializableUtxoSet& utxoSet);\n \n-\tUtxoIndexDBCursor* Cursor() const;\n+\tUtxoScriptIndexDBCursor* Cursor() const;\n };\n \n-UtxoIndex::DB::DB(size_t nCacheSize, bool fMemory, bool fWipe) :\n+UtxoScriptIndex::DB::DB(size_t nCacheSize, bool fMemory, bool fWipe) :\n \tBaseIndex::DB(GetDataDir() / \"indexes\" / \"coinsbyscript\", nCacheSize, fMemory, fWipe)\n {\n \n }\n \n-bool UtxoIndex::DB::WriteUtxos(std::map<CScriptID, SerializableUtxoSet>& scriptUtxos)\n+bool UtxoScriptIndex::DB::WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos)\n {\n \tCDBBatch batch(*this);\n \tfor(const auto& scriptUtxo: scriptUtxos)\n@@ -45,14 +68,14 @@ bool UtxoIndex::DB::WriteUtxos(std::map<CScriptID, SerializableUtxoSet>& scriptU\n \treturn WriteBatch(batch);\n }\n \n-bool UtxoIndex::DB::ReadUtxos(const CScriptID& scriptId, SerializableUtxoSet& utxoSet)\n+bool UtxoScriptIndex::DB::ReadUtxos(const ScriptHash& scriptId, SerializableUtxoSet& utxoSet)\n {\n \treturn Read(std::make_pair(DB_UTXO, scriptId), utxoSet);\n }\n \n-UtxoIndexDBCursor* UtxoIndex::DB::Cursor() const\n+UtxoScriptIndexDBCursor* UtxoScriptIndex::DB::Cursor() const\n {\n-\tUtxoIndexDBCursor* cursor = new UtxoIndexDBCursor(\n+\tUtxoScriptIndexDBCursor* cursor = new UtxoScriptIndexDBCursor(\n \t\t\t\t\t\t\t\t\tconst_cast<CDBWrapper*>(\n \t\t\t\t\t\t\t\t\t\tstatic_cast<const CDBWrapper*>(this))->NewIterator());\n \tcursor->pcursor->Seek(DB_UTXO);\n@@ -63,7 +86,7 @@ UtxoIndexDBCursor* UtxoIndex::DB::Cursor() const\n \treturn cursor;\n }\n \n-bool UtxoIndexDBCursor::GetKey(CScriptID& key)\n+bool UtxoScriptIndexDBCursor::GetKey(ScriptHash& key)\n {\n \tif(keyTmp.first == DB_UTXO)\n \t{\n@@ -73,17 +96,17 @@ bool UtxoIndexDBCursor::GetKey(CScriptID& key)\n \treturn false;\n }\n \n-bool UtxoIndexDBCursor::GetValue(SerializableUtxoSet& utxoSet)\n+bool UtxoScriptIndexDBCursor::GetValue(SerializableUtxoSet& utxoSet)\n {\n \treturn pcursor->GetValue(utxoSet);\n }\n \n-bool UtxoIndexDBCursor::Valid() const\n+bool UtxoScriptIndexDBCursor::Valid() const\n {\n \treturn keyTmp.first == DB_UTXO;\n }\n \n-void UtxoIndexDBCursor::Next()\n+void UtxoScriptIndexDBCursor::Next()\n {\n \tpcursor->Next();\n \tif(pcursor->Valid() and pcursor->GetKey(keyTmp))\n@@ -92,90 +115,89 @@ void UtxoIndexDBCursor::Next()\n \t\tkeyTmp.first = 0;\n }\n \n-UtxoIndex::UtxoIndex(size_t n_cache_size, bool f_memory, bool f_wipe) :\n-\tm_db(std::move(MakeUnique<UtxoIndex::DB>(n_cache_size, f_memory, f_wipe)))\n+UtxoScriptIndex::UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+\tm_db(std::move(MakeUnique<UtxoScriptIndex::DB>(n_cache_size, f_memory, f_wipe)))\n {\n \n }\n \n-UtxoIndex::~UtxoIndex() {\n-\n+UtxoScriptIndex::~UtxoScriptIndex() {\n+    UnregisterValidationInterface(this);\n }\n \n-void UtxoIndex::Start()\n+void UtxoScriptIndex::Start()\n {\n \tRegisterValidationInterface(this);\n }\n \n-void UtxoIndex::TransactionAddedToMempool(const CTransactionRef &ptxn) {\n+void UtxoScriptIndex::TransactionAddedToMempool(const CTransactionRef &ptxn) {\n \tLOCK(cs_utxoCacheMempool);\n \tconst CTransaction &tx = *ptxn;\n \tfor (unsigned int i = 0; i < tx.vout.size(); i++)\n \t{\n \t\tif (tx.vout[i].IsNull() or tx.vout[i].scriptPubKey.IsUnspendable())\n \t\t\tcontinue;\n \n-\t\tauto utxoKey = CScriptID(tx.vout[i].scriptPubKey);\n+\t\tauto utxoKey = ScriptIndexHash(tx.vout[i].scriptPubKey);\n \t\tutxoCacheMempool[utxoKey].insert(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n \t}\n }\n \n-void UtxoIndex::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+void UtxoScriptIndex::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n \tLOCK(cs_utxoCacheMempool);\n \tconst CTransaction &tx = *ptx;\n \tfor (unsigned int i = 0; i < tx.vout.size(); i++)\n \t{\n \t\tif (tx.vout[i].IsNull() or tx.vout[i].scriptPubKey.IsUnspendable())\n \t\t\tcontinue;\n-\t\n-\t\tstd::map<CScriptID, SerializableUtxoSet>::iterator it = utxoCacheMempool.find(CScriptID(tx.vout[i].scriptPubKey));\n-\t    \n+\n+\t\tstd::map<ScriptHash, SerializableUtxoSet>::iterator it = utxoCacheMempool.find(ScriptIndexHash(tx.vout[i].scriptPubKey));\n+\n \t\tif (it != utxoCacheMempool.end())\n \t\t{\n \t        it->second.erase(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n \t        if (it->second.empty())\n \t            utxoCacheMempool.erase(it);\n \t    }\n-\t}\t\n+\t}\n }\n \n-void UtxoIndex::BlockConnected(\tconst std::shared_ptr<const CBlock> &block,\n+void UtxoScriptIndex::BlockConnected(\tconst std::shared_ptr<const CBlock> &block,\n \t\t\t\t\t\t\t\tconst CBlockIndex *pindex,\n \t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo,\n \t\t\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted)\n {\n-\tassert(block->vtx.size() > 0);\n-\t{\n+    {\n \t\tLOCK(cs_utxoCache);\n \t\tremoveSpentUtxosOnTipConnected(*block, *blockundo);\n \t\taddNewUtxosOnTipConnected(*block);\n \t}\n \tWriteBestBlock(block->GetHash());\n }\n \n-void UtxoIndex::BlockDisconnected(\tconst std::shared_ptr<const CBlock> &block,\n+void UtxoScriptIndex::BlockDisconnected(\tconst std::shared_ptr<const CBlock> &block,\n \t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) {\n \tassert(block->vtx.size() > 0);\n \tLOCK(cs_utxoCache);\n \trestoreSpentUtxosOnTipDisconnected(*block, *blockundo);\n \tremoveUtxosOnTipDisconnected(*block);\n }\n \n-BaseIndex::DB& UtxoIndex::GetDB() const { return *m_db; }\n+BaseIndex::DB& UtxoScriptIndex::GetDB() const { return *m_db; }\n \n-void UtxoIndex::removeUtxo(const CTxOut& txout, const COutPoint outpoint)\n+void UtxoScriptIndex::removeUtxo(const CTxOut& txout, const COutPoint outpoint)\n {\n \tif(txout.IsNull() or txout.scriptPubKey.IsUnspendable())\n \t\treturn;\n-\tconst CScriptID utxoCacheKey = CScriptID(txout.scriptPubKey);\n+\tconst ScriptHash utxoCacheKey = ScriptIndexHash(txout.scriptPubKey);\n \tloadToCache(utxoCacheKey);\n \tif(utxoCache.count(utxoCacheKey) == 0)\n \t\treturn;\n \tSerializableUtxoSet& utxoCacheSet = utxoCache.at(utxoCacheKey);\n \t\tutxoCacheSet.erase(outpoint);\n }\n \n-void UtxoIndex::removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo)\n+void UtxoScriptIndex::removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo)\n {\n \n \tfor(unsigned int i = 1; i < block.vtx.size(); ++i)\n@@ -188,38 +210,43 @@ void UtxoIndex::removeSpentUtxosOnTipConnected(const CBlock& block, const CBlock\n \t}\n }\n \n-void UtxoIndex::removeUtxosOnTipDisconnected(const CBlock& block)\n+void UtxoScriptIndex::removeUtxosOnTipDisconnected(const CBlock& block)\n {\n-\tfor(unsigned int i = block.vtx.size() - 1; i >= 0; --i)\n+    if(block.vtx.size() == 0)\n+        return;\n+\n+    unsigned int i = block.vtx.size() - 1;\n+    while(true)\n \t{\n \t\tfor(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n \t\t{\n-\t\t\tremoveUtxo(\tblock.vtx[i]->vout[j], \n+\t\t\tremoveUtxo(\tblock.vtx[i]->vout[j],\n \t\t\t\t\t\tCOutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n \t\t}\n \t\tif(i==0)\n \t\t\tbreak;\n+        --i;\n \t}\n }\n \n-void UtxoIndex::loadToCache(const CScriptID& key)\n+void UtxoScriptIndex::loadToCache(const ScriptHash& key)\n {\n \tif(not utxoCache[key].empty())\n \t\treturn;\n \tm_db->ReadUtxos(key, utxoCache[key]);\n }\n \n-void UtxoIndex::addUtxo(const CScript& scriptPubKey, COutPoint outpoint)\n+void UtxoScriptIndex::addUtxo(const CScript& scriptPubKey, COutPoint outpoint)\n {\n \tCTxDestination dest;\n \tExtractDestination(scriptPubKey, dest);\n-\tconst CScriptID utxoCacheKey(GetScriptForDestination(dest));\t\n+\tconst ScriptHash utxoCacheKey = ScriptIndexHash(GetScriptForDestination(dest));\t\n \tloadToCache(utxoCacheKey);\n \tSerializableUtxoSet& utxoCacheSet = utxoCache[utxoCacheKey];\n \tutxoCacheSet.insert(outpoint);\n }\n \n-void UtxoIndex::restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo)\n+void UtxoScriptIndex::restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo)\n {\n \tfor(unsigned int i = block.vtx.size() - 1; i > 0; --i)\n \t{\n@@ -231,64 +258,69 @@ void UtxoIndex::restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CB\n \t}\n }\n \n-void UtxoIndex::addNewUtxosOnTipConnected(const CBlock& block)\n+void UtxoScriptIndex::addNewUtxosOnTipConnected(const CBlock& block)\n {\n \tfor(unsigned int i = 0; i < block.vtx.size(); ++i)\n \t{\n \t\tfor(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n \t\t{\n-\t\t\taddUtxo(block.vtx[i]->vout[j].scriptPubKey, \n+\t\t\taddUtxo(block.vtx[i]->vout[j].scriptPubKey,\n \t\t\t\t\tCOutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n \t\t}\n \t}\n }\n \n-void UtxoIndex::getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script)\n+void UtxoScriptIndex::getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script)\n {\n-\tconst CScriptID key(script);\n+\tconst ScriptHash key = ScriptIndexHash(script);\n \tloadToCache(key);\n \tutxoSet.insert(utxoCache[key].begin(), utxoCache[key].end());\n }\n \n-void UtxoIndex::appendMempoolUtxos(SerializableUtxoSet& utxoSet, const CScriptID& key)\n+void UtxoScriptIndex::appendMempoolUtxos(SerializableUtxoSet& utxoSet, const ScriptHash& key)\n {\n \t\tLOCK(cs_utxoCacheMempool);\n \t\tCoin dummyCoin;\n \t\tutxoSet.insert(utxoCacheMempool[key].begin(), utxoCacheMempool[key].end());\n \t\tLOCK(mempool.cs);\n \t\tCCoinsViewMemPool view(pcoinsTip.get(), mempool);\n-\t\tfor(const COutPoint& outpoint: utxoSet)\n+\t\tstd::set<COutPoint> outpointsToErase{};\n+        for(const COutPoint& outpoint: utxoSet)\n \t\t{\n \t\t\tif(not view.GetCoin(outpoint, dummyCoin))\n-\t\t\t\tutxoSet.erase(outpoint);\n+\t\t\t\toutpointsToErase.insert(outpoint);\n \t\t\tif(mempool.isSpent(outpoint))\n-\t\t\t\tutxoSet.erase(outpoint);\n+                outpointsToErase.insert(outpoint);\n \t\t}\n+        for(const COutPoint& outpoint: outpointsToErase)\n+        {\n+            utxoSet.erase(outpoint);\n+        }\n }\n \n-SerializableUtxoSet UtxoIndex::getUtxosForScript(const CScript& script, unsigned int minConf)\n+SerializableUtxoSet UtxoScriptIndex::getUtxosForScript(const CScript& script, unsigned int minConf)\n {\n-\tconst CScriptID key(script);\n+\tconst ScriptHash key = ScriptIndexHash(script);\n \tLOCK(cs_utxoCache);\n-\t\n+\n \tSerializableUtxoSet retSet{};\n \tgetConfirmedUtxos(retSet, script);\n \tif(minConf == 0)\n \t\tappendMempoolUtxos(retSet, key);\n-\t\n+\n \treturn retSet;\n }\n \n-bool UtxoIndex::Flush()\n+bool UtxoScriptIndex::Flush()\n {\n \tLOCK(cs_utxoCache);\n \tbool writeResult = m_db->WriteUtxos(utxoCache);\n \tif(writeResult == true)\n-\t\tutxoCache.clear();\t\n+\t\tutxoCache.clear();\n \treturn writeResult;\n }\n \n-int64_t UtxoIndex::countCoins(const std::unique_ptr<CCoinsViewDB>& coins)\n+int64_t UtxoScriptIndex::countCoins(const std::unique_ptr<CCoinsViewDB>& coins)\n {\n \tstd::unique_ptr<CCoinsViewCursor> coinsCursor(coins->Cursor());\n \tint64_t coinsCount = 0;\n@@ -300,7 +332,7 @@ int64_t UtxoIndex::countCoins(const std::unique_ptr<CCoinsViewDB>& coins)\n \treturn coinsCount;\n }\n \n-bool UtxoIndex::createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor)\n+bool UtxoScriptIndex::createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor)\n {\n \tCOutPoint outpoint;\n \tCoin coin;\n@@ -311,7 +343,7 @@ bool UtxoIndex::createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>\n \tif(not coin.out.IsNull() and not coin.out.scriptPubKey.IsUnspendable())\n \t{\n \t\tLOCK(cs_utxoCache);\n-\t\tconst CScriptID key = CScriptID(coin.out.scriptPubKey);\n+\t\tconst ScriptHash key = ScriptIndexHash(coin.out.scriptPubKey);\n \t\tif(utxoCache.count(key) == 0)\n \t\t{\n \t\t\tSerializableUtxoSet utxos;\n@@ -324,20 +356,20 @@ bool UtxoIndex::createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>\n \treturn true;\n }\n \n-bool UtxoIndex::GenerateUtxoIndex(const std::unique_ptr<CCoinsViewDB>& coins)\n+bool UtxoScriptIndex::GenerateIndex(const std::unique_ptr<CCoinsViewDB>& coins)\n {\n     int64_t coinsCount = countCoins(coins);\n     int64_t coinsProcessed = 0;\n-\t\n-    LogPrintf(\"GenerateUtxoIndex, coinsCount:%d\\n\", coinsCount);\n-\t\n+\n+    LogPrintf(\"Generating utxo script index, coinsCount:%d\\n\", coinsCount);\n+\n     std::unique_ptr<CCoinsViewCursor> coinsCursor(coins->Cursor());\n \n     while(coinsCursor->Valid())\n     {\n \t    try{\n             boost::this_thread::interruption_point();\n-\t\t\n+\n             if(coinsCount > 0 and coinsProcessed % 1000 == 0)\n                 uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)coinsProcessed / (double)coinsCount) * (double)100), false);\n \n@@ -361,11 +393,11 @@ bool UtxoIndex::GenerateUtxoIndex(const std::unique_ptr<CCoinsViewDB>& coins)\n \treturn true;\n }\n \n-bool UtxoIndex::removeUtxoRecord(\tconst std::unique_ptr<UtxoIndexDBCursor>& cursor,\n-\t\t\t\t\t\t\t\t\tstd::map<CScriptID, SerializableUtxoSet>& keysToDelete,\n-\t\t\t\t\t\t\t\t\tint64_t counter)\n+bool UtxoScriptIndex::removeUtxoRecord(\tconst std::unique_ptr<UtxoScriptIndexDBCursor>& cursor,\n+\t\t\t\t\t\t\t\t\tstd::map<ScriptHash, SerializableUtxoSet>& keysToDelete,\n+\t\t\t\t\t\t\t\t\tint64_t& counter)\n {\n-\tCScriptID key;\n+\tScriptHash key;\n \tif(not cursor->GetKey(key))\n \t\treturn false;\n \n@@ -380,12 +412,12 @@ bool UtxoIndex::removeUtxoRecord(\tconst std::unique_ptr<UtxoIndexDBCursor>& curs\n \treturn true;\n }\n \n-bool UtxoIndex::DeleteUtxoIndex()\n+bool UtxoScriptIndex::DeleteIndex()\n {\n-\tLogPrintf(\"DeleteUtxoIndex\\n\");\n-\tstd::unique_ptr<UtxoIndexDBCursor> cursor(m_db->Cursor());\n-\tstd::map<CScriptID, SerializableUtxoSet> keysToDelete;\n-\t\n+\tLogPrintf(\"Deleting utxo script index\\n\");\n+\tstd::unique_ptr<UtxoScriptIndexDBCursor> cursor(m_db->Cursor());\n+\tstd::map<ScriptHash, SerializableUtxoSet> keysToDelete;\n+\n \tint64_t counter = 0;\n \twhile(cursor->Valid())\n \t{\n@@ -406,18 +438,18 @@ bool UtxoIndex::DeleteUtxoIndex()\n \t\tkeysToDelete.clear();\n \t}\n \tWriteBestBlock(uint256());\n-\tLogPrintf(\"Address index with %d addresses successfully deleted.\\n\", counter);\t\n+\tLogPrintf(\"Address index with %d addresses successfully deleted.\\n\", counter);\n \treturn true;\n }\n-\t\n-bool UtxoIndex::WriteBestBlock(const uint256& value)\n+\n+bool UtxoScriptIndex::WriteBestBlock(const uint256& value)\n {\n \tCDBBatch batch(*m_db);\n \tbatch.Write(DB_UTXO_BEST_BLOCK, value);\n \treturn m_db->WriteBatch(batch);\n }\n-\t\n-bool UtxoIndex::ReadBestBlock(uint256& value)\n+\n+bool UtxoScriptIndex::ReadBestBlock(uint256& value)\n {\n \treturn m_db->Read(DB_UTXO_BEST_BLOCK, value);\n }",
        "previous_filename": "src/index/utxoindex.cpp"
      },
      {
        "sha": "a8756691c6ecd34191eee313eb362e5ce3acb374",
        "filename": "src/index/utxoscriptindex.h",
        "status": "renamed",
        "additions": 36,
        "deletions": 48,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/index/utxoscriptindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/index/utxoscriptindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/utxoscriptindex.h?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -1,3 +1,10 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_UTXOSCRIPTINDEX_H\n+#define BITCOIN_INDEX_UTXOSCRIPTINDEX_H\n+\n #include <coins.h>\n #include <dbwrapper.h>\n #include <validationinterface.h>\n@@ -18,97 +25,78 @@ static const char DB_UTXO_BEST_BLOCK = 'D';\n const unsigned int DB_UTXO_FLUSH_FREQUENCY = 10000;\n \n class CCoinsViewDB;\n-class UtxoIndexDBCursor;\n+class UtxoScriptIndexDBCursor;\n \n class SerializableUtxoSet : public std::set<COutPoint>\n {\n public:\n \tADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        //READWRITE(setCoins);\n \t\tREADWRITE(static_cast<std::set<COutPoint>&>(*this));\n-    }\t\n+    }\n };\n \n+typedef uint160 ScriptHash;\n \n-class UtxoIndex final : public BaseIndex\n+class UtxoScriptIndex final : public BaseIndex\n {\n protected:\n \tclass DB;\n public:\n-\texplicit UtxoIndex(size_t n_cache_size, bool f_memory, bool f_wipe);\n+\texplicit UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe);\n \n-\t~UtxoIndex() override;\n-//\tUtxoIndex(UtxoIndex&) = delete;\t\n-//\tUtxoIndex& operator=(const UtxoIndex&) = delete;\n+\t~UtxoScriptIndex() override;\n \n \tvoid Start();\n \n \tvoid TransactionAddedToMempool(const CTransactionRef &ptxn) override;\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n-\t\n-\tvoid BlockConnected(const std::shared_ptr<const CBlock> &block, \n-\t\t\t\t\t\tconst CBlockIndex *pindex, \n-\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n+\n+\tvoid BlockConnected(const std::shared_ptr<const CBlock> &block,\n+\t\t\t\t\t\tconst CBlockIndex *pindex,\n+\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo,\n \t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted) override;\n-\t\n+\n \tvoid BlockDisconnected(\tconst std::shared_ptr<const CBlock> &block,\n \t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override;\n \n \tBaseIndex::DB& GetDB() const;\n-    const char* GetName() const override { return \"utxoindex\"; }\n-\t\n-\t/*void UpdateUtxoIndexOnTipConnected(const CBlock& block, const CBlockUndo& blockundo);\n-\tvoid UpdateUtxoIndexOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo);\n-\tvoid updateIndexOnTransactionAddedToMempool(const CTransaction& tx); \n-    void updateIndexOnTransactionRemovedFromMempool(const CTransaction& tx);\n-*/\tSerializableUtxoSet getUtxosForScript(const CScript& script, unsigned int minConf);\n+    const char* GetName() const override { return \"utxoscriptindex\"; }\n+\n+\tSerializableUtxoSet getUtxosForScript(const CScript& script, unsigned int minConf);\n \tbool Flush();\n-\tbool GenerateUtxoIndex(const std::unique_ptr<CCoinsViewDB>&);\n-\tbool DeleteUtxoIndex();\n+\tbool GenerateIndex(const std::unique_ptr<CCoinsViewDB>&);\n+\tbool DeleteIndex();\n \tbool WriteBestBlock(const uint256& value);\n \tbool ReadBestBlock(uint256& value);\n \n private:\n \tconst std::unique_ptr<DB> m_db;\n-\tstd::map<CScriptID, SerializableUtxoSet> utxoCache;\n-\tstd::map<CScriptID, SerializableUtxoSet> utxoCacheMempool;\n+\tstd::map<ScriptHash, SerializableUtxoSet> utxoCache;\n+\tstd::map<ScriptHash, SerializableUtxoSet> utxoCacheMempool;\n \tCCriticalSection cs_utxoCache;\n \tCCriticalSection cs_utxoCacheMempool;\n-\t\n-\tvoid loadToCache(const CScriptID& key);\n+\n+\tvoid loadToCache(const ScriptHash& key);\n \tint64_t countCoins(const std::unique_ptr<CCoinsViewDB>& coins);\n \tvoid removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo);\n \tvoid addNewUtxosOnTipConnected(const CBlock& block);\n \tvoid restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo);\n \tvoid removeUtxosOnTipDisconnected(const CBlock& block);\n+\n \tvoid removeUtxo(const CTxOut& txout, COutPoint outpoint);\n \tvoid addUtxo(const CScript& scriptPubKey, COutPoint outpoint);\n+\n \tvoid getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script);\n-\tvoid appendMempoolUtxos(SerializableUtxoSet& utxoSet, const CScriptID& key);\n+\n+\tvoid appendMempoolUtxos(SerializableUtxoSet& utxoSet, const ScriptHash& key);\n \tbool createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor);\n-\tbool removeUtxoRecord(\tconst std::unique_ptr<UtxoIndexDBCursor>& cursor,\n-\t\t\t\t\t\t\tstd::map<CScriptID, SerializableUtxoSet>& keysToDelete,\n-\t\t\t\t\t\t\tint64_t counter);\n+\tbool removeUtxoRecord(\tconst std::unique_ptr<UtxoScriptIndexDBCursor>& cursor,\n+\t\t\t\t\t\t\tstd::map<ScriptHash, SerializableUtxoSet>& keysToDelete,\n+\t\t\t\t\t\t\tint64_t& counter);\n };\n \n-class UtxoIndexDBCursor\n-{\n-public:\n-\tUtxoIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n-\n-\tbool GetKey(CScriptID& key);\n-\tbool GetValue(SerializableUtxoSet& utxoSet);\n-\tunsigned int GetValueSize() const;\n+extern std::unique_ptr<UtxoScriptIndex> g_utxoscriptindex;\n \n-\tbool Valid() const;\n-\tvoid Next();\n-\n-//private:\n-\tstd::pair<char, CScriptID> keyTmp;\t\n-\tstd::unique_ptr<CDBIterator> pcursor;\n-\n-//\tfriend class UtxoIndex::DB;\n-};\n-extern std::unique_ptr<UtxoIndex> g_utxoindex;\n+#endif",
        "previous_filename": "src/index/utxoindex.h"
      },
      {
        "sha": "6f82ddc21df207843a5a33572d7352d902ebc4e8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 22,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -21,7 +21,7 @@\n #include <httprpc.h>\n #include <interfaces/chain.h>\n #include <index/txindex.h>\n-#include <index/utxoindex.h>\n+#include <index/utxoscriptindex.h>\n #include <key.h>\n #include <validation.h>\n #include <miner.h>\n@@ -202,8 +202,7 @@ void Shutdown(InitInterfaces& interfaces)\n     peerLogic.reset();\n     g_connman.reset();\n     g_txindex.reset();\n-    g_utxoscriptindex.reset();\n-    \n+\n     if (g_is_mempool_loaded && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool();\n     }\n@@ -225,6 +224,8 @@ void Shutdown(InitInterfaces& interfaces)\n         FlushStateToDisk();\n     }\n \n+    g_utxoscriptindex.reset();\n+\n     // After there are no more peers/RPC left to give us new data which may generate\n     // CValidationInterface callbacks, flush them...\n     GetMainSignals().FlushBackgroundCallbacks();\n@@ -377,7 +378,7 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n     gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-utxoindex\", strprintf(\"Maintain unspent output index by script, used by the getutxoindex rpc call (default: %u)\", DEFAULT_UTXOINDEX), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-utxoscriptindex\", strprintf(\"Maintain unspent output index by script, used by the getutxoscriptindex rpc call (default: %u)\", DEFAULT_UTXOINDEX), false, OptionsCategory::OPTIONS);\n \n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n@@ -1393,20 +1394,20 @@ bool AppInitMain(InitInterfaces& interfaces)\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n-    int64_t nUtxoIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-utxoindex\", DEFAULT_UTXOINDEX) ? nMaxTxIndexCache << 20 : 0);\n-\tnTotalCache -= nUtxoIndexCache;\n+    int64_t nUtxoScriptIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-utxoscriptindex\", DEFAULT_UTXOINDEX) ? nMaxTxIndexCache << 20 : 0);\n+\tnTotalCache -= nUtxoScriptIndexCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n-\tnCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache    \n+    nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1fMiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         LogPrintf(\"* Using %.1fMiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n     }\n-    if (gArgs.GetBoolArg(\"-utxoindex\", DEFAULT_UTXOINDEX)) {\n-        LogPrintf(\"* Using %.1fMiB for transaction index database\\n\", nUtxoIndexCache * (1.0 / 1024 / 1024));\n+    if (gArgs.GetBoolArg(\"-utxoscriptindex\", DEFAULT_UTXOINDEX)) {\n+        LogPrintf(\"* Using %.1fMiB for unspent output by script index database\\n\", nUtxoScriptIndexCache * (1.0 / 1024 / 1024));\n \t}\n     LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n     LogPrintf(\"* Using %.1fMiB for in-memory UTXO set (plus up to %.1fMiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n@@ -1588,29 +1589,30 @@ bool AppInitMain(InitInterfaces& interfaces)\n         g_txindex->Start();\n     }\n \n-    if(gArgs.IsArgSet(\"-utxoindex\"))\n+    if(gArgs.IsArgSet(\"-utxoscriptindex\"))\n     {\n-        g_utxoindex = MakeUnique<UtxoIndex>(nUtxoIndexCache, false, fReindex);\n-\t    \n-        if(gArgs.GetBoolArg(\"-utxoindex\", DEFAULT_UTXOINDEX)) \n+        g_utxoscriptindex = MakeUnique<UtxoScriptIndex>(nUtxoScriptIndexCache, false, fReindex);\n+\n+        if(gArgs.GetBoolArg(\"-utxoscriptindex\", DEFAULT_UTXOINDEX))\n         {\n             uint256 utxoindexBestBlock;\n-            if(not g_utxoindex->ReadBestBlock(utxoindexBestBlock) or utxoindexBestBlock != pcoinsdbview->GetBestBlock()){\n-                if(not g_utxoindex->DeleteUtxoIndex()){\n-                    LogPrintf(\"Error deleting utxoindex\\n\");\n-                    return false;\t\n+            if(not g_utxoscriptindex->ReadBestBlock(utxoindexBestBlock) or utxoindexBestBlock != pcoinsdbview->GetBestBlock()){\n+                LogPrintf(\"Utxo script index best block (%s) not matching current best block (%s)\\n\", utxoindexBestBlock.ToString(), pcoinsdbview->GetBestBlock().ToString());\n+                if(not g_utxoscriptindex->DeleteIndex()){\n+                    LogPrintf(\"Error deleting utxoscriptindex\\n\");\n+                    return false;\n                 }\n-                if(not g_utxoindex->GenerateUtxoIndex(pcoinsdbview)){\n-                    LogPrintf(\"Error building utxoindex\\n\");\n+                if(not g_utxoscriptindex->GenerateIndex(pcoinsdbview)){\n+                    LogPrintf(\"Error building utxoscriptindex\\n\");\n                     return false;\n                 }\n             }\n-            g_utxoindex->Start();\n+            g_utxoscriptindex->Start();\n         }\n         else\n         {\n-            g_utxoindex->DeleteUtxoIndex();\n-            g_utxoindex.reset();\t\n+            g_utxoscriptindex->DeleteIndex();\n+            g_utxoscriptindex.reset();\n         }\n     }\n "
      },
      {
        "sha": "982591e8ae183ccd08e6445e9b1b6ff200976920",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 20,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -32,9 +32,8 @@\n #include <validationinterface.h>\n #include <versionbitsinfo.h>\n #include <warnings.h>\n-#include <base58.h>\n #include <script/standard.h>\n-#include <index/utxoindex.h>\n+#include <index/utxoscriptindex.h>\n \n #include <assert.h>\n #include <stdint.h>\n@@ -1108,7 +1107,7 @@ void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsig\n \t\t}\n \t\telse if(not pcoinsTip->GetCoin(outpoint, coin))\n \t\t\tcontinue;\n-\t\n+\n \t\tif(coin.out.IsNull() or coin.out.scriptPubKey.IsUnspendable())\n \t\t\tcontinue;\n \n@@ -1117,15 +1116,15 @@ void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsig\n \n \t\tCBlockIndex *pindex = mapBlockIndex.find(pcoinsTip->GetBestBlock())->second;\n \n-\t\tint nConfirmations = 0;\n+\t\tuint64_t nConfirmations = 0;\n \t\tif ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n \t\t\tnConfirmations = pindex->nHeight - coin.nHeight + 1;\n \t\tif (nConfirmations < minConf)\n \t\t\tcontinue;\n \n \t\tUniValue oScriptPubKey(UniValue::VOBJ);\n \t\tScriptPubKeyToUniv(coin.out.scriptPubKey, oScriptPubKey, true);\n-\t\n+\n \t\tUniValue o(UniValue::VOBJ);\n \t\to.push_back(Pair(\"confirmations\", nConfirmations));\n \t\to.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n@@ -1146,38 +1145,69 @@ void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsig\n \t}\n }\n \n-UniValue getutxoindex(const JSONRPCRequest& request)\n+UniValue getutxoscriptindex(const JSONRPCRequest& request)\n {\n     if (request.fHelp or request.params.size() != 2)\n         throw std::runtime_error(\n-            \"getutxoindex ( minconf [\\\"address\\\",...] ) \\n\"\n+            \"getutxoscriptindex ( minconf [\\\"address\\\",...] ) \\n\"\n \t\t\t\"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n \t\t\t\"Note that passing minconf=0 will include the mempool.\\n\"\n-\t\t\t\"\\nTo use this function, you must start bitcoin with the -utxoindex parameter.\\n\"\n+\t\t\t\"\\nTo use this function, you must start bitcoin with the -utxoscriptindex parameter.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric) Minimum confirmations\\n\"\n             \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n \t\t\t\"    [\\n\"\n             \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n+            \"\\nResult\\n\"\n+            \"[                   (array of json object)\\n\"\n+            \"  {\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",          (string)  The transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) The vout value\\n\"\n+            \"    \\\"value\\\" : x.xxx,            (numeric) The transaction value in btc\\n\"\n+            \"    \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"       \\\"asm\\\" : \\\"code\\\",        (string) \\n\"\n+            \"       \\\"hex\\\" : \\\"hex\\\",         (string) \\n\"\n+            \"       \\\"reqSigs\\\" : n,           (numeric) Number of required signatures\\n\"\n+            \"       \\\"type\\\" : \\\"pubkeyhash\\\", (string) The type, eg pubkeyhash\\n\"\n+            \"       \\\"addresses\\\" : [          (array of string) array of bitcoin addresses\\n\"\n+            \"          \\\"bitcoinaddress\\\"      (string) bitcoin address\\n\"\n+            \"          ,...\\n\"\n+            \"       ]\\n\"\n+            \"    },\\n\"\n+            \"    \\\"coinbase\\\" : true|false     (boolean) Coinbase or not\\n\"\n+            \"    \\\"bestblockhash\\\" : \\\"hash\\\", (string)  The block hash of the best block\\n\"\n+            \"    \\\"bestblockheight\\\" : n,      (numeric) The block height of the best block\\n\"\n+            \"    \\\"bestblocktime\\\" : n,        (numeric) The block time of the best block\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",     (string)  The block hash of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blockheight\\\" : n,          (numeric) The block height of the block the tx is in (only if confirmations > 0)\\n\"\n+            \"    \\\"blocktime\\\" : ttt,          (numeric) The block time in seconds since 1.1.1970 GMT (only if confirmations > 0)\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getutxoindex\", \"6 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n+            + \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"getutxoindex\", \"6, \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n-\t\n-\tUniValue retVal;\n-\t\n-\tif(not g_utxoindex)\n-\t\tthrow JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -utxoindex parameter.\");\n+\n+    UniValue retVal;\n+\n+\tif(not g_utxoscriptindex)\n+\t\tthrow JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -utxoscriptindex parameter.\");\n \n \tRPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VARR});\n \n-\tunsigned int minConf = request.params[0].get_int();\n+\tint minConf = request.params[0].get_int();\n \tUniValue inputs = request.params[1].get_array();\n-    \n+\n     if (minConf < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n- \n+\n     UniValue vObjects(UniValue::VARR);\n-\t\n+\n \tfor(unsigned int idx = 0; idx < inputs.size(); ++idx)\n \t{\n \t\tCScript script;\n@@ -1194,8 +1224,8 @@ UniValue getutxoindex(const JSONRPCRequest& request)\n \t\t}\n \t\telse\n \t\t\tthrow JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n-\t\n-\t\tSerializableUtxoSet utxoSet = g_utxoindex->getUtxosForScript(script, minConf);\t\n+\n+\t\tSerializableUtxoSet utxoSet = g_utxoscriptindex->getUtxosForScript(script, minConf);\n \t\tutxoSetToJson(utxoSet, vObjects, minConf);\n \t}\n \n@@ -2316,7 +2346,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempooldescendants\",  &getmempooldescendants,  {\"txid\",\"verbose\"} },\n     { \"blockchain\",         \"getmempoolentry\",        &getmempoolentry,        {\"txid\"} },\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         {} },\n-\t{ \"blockchain\",         \"getutxoindex\",\t\t\t  &getutxoindex,\t\t   {\"minconf\", \"addresses\"} },\t\n+    { \"blockchain\",         \"getutxoscriptindex\",     &getutxoscriptindex,     {\"minconf\", \"addresses\"} },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          {\"verbose\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               {\"txid\",\"n\",\"include_mempool\"} },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {} },"
      },
      {
        "sha": "5eb3a29b8f7611d604c1dbe69a37f8cb1b02ddc6",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -143,8 +143,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setnetworkactive\", 0, \"state\" },\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n-    { \"getutxoindex\", 0, \"minconf\" },\n-    { \"getutxoindex\", 1, \"addresses\" },\n+    { \"getutxoscriptindex\", 0, \"minconf\" },\n+    { \"getutxoscriptindex\", 1, \"addresses\" },\n     { \"bumpfee\", 1, \"options\" },\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },"
      },
      {
        "sha": "17aeb43509974dc86d98bd57b7a43f5675c6fce1",
        "filename": "src/test/utxoscriptindex_tests.cpp",
        "status": "added",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/test/utxoscriptindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/test/utxoscriptindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/utxoscriptindex_tests.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -0,0 +1,126 @@\n+#include <index/utxoscriptindex.h>\n+#include <validation.h>\n+#include <txmempool.h>\n+#include <consensus/validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <test/test_bitcoin.h>\n+\n+BOOST_AUTO_TEST_SUITE(utxoscriptindex_tests)\n+\n+CMutableTransaction createSimpleTx(const uint256& prevHash, const CScript& script, CKey& key)\n+{\n+   CMutableTransaction spend_tx;\n+    spend_tx.nVersion = 1;\n+    spend_tx.vin.resize(1);\n+    spend_tx.vin[0].prevout.hash = prevHash;\n+    spend_tx.vin[0].prevout.n = 0;\n+    spend_tx.vout.resize(1);\n+    spend_tx.vout[0].nValue = 11*CENT;\n+    spend_tx.vout[0].scriptPubKey = script;\n+\n+    std::vector<unsigned char> vchSig;\n+    uint256 hash = SignatureHash(script, spend_tx, 0, SIGHASH_ALL, 0, SigVersion::BASE);\n+    BOOST_CHECK(key.Sign(hash, vchSig));\n+    vchSig.push_back((unsigned char)SIGHASH_ALL);\n+    spend_tx.vin[0].scriptSig << vchSig;\n+\n+   return spend_tx;\n+}\n+\n+CBlockUndo createBlockUndo(const CScript& script)\n+{\n+   CBlockUndo bu = CBlockUndo();\n+   bu.vtxundo.emplace_back();\n+   bu.vtxundo[0].vprevout.emplace_back();\n+   bu.vtxundo[0].vprevout[0].out.scriptPubKey = script;\n+\n+   return bu;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(block_connected_adds_utxo_record, TestChain100Setup)\n+{\n+    UtxoScriptIndex utxoscriptindex(1 << 20, false, false);\n+    CScript scriptPubKey = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+\n+    SerializableUtxoSet utxos = utxoscriptindex.getUtxosForScript(scriptPubKey, 1);\n+    BOOST_CHECK_EQUAL(utxos.size(), 0);\n+\n+    CMutableTransaction spend_tx = createSimpleTx(m_coinbase_txns[0]->GetHash(), scriptPubKey, coinbaseKey);\n+\n+    CBlock b = CreateAndProcessBlock({spend_tx}, scriptPubKey);\n+    CBlockUndo bu = createBlockUndo(scriptPubKey);\n+\n+    utxoscriptindex.BlockConnected(std::make_shared<CBlock>(b),\n+                                   nullptr,\n+                                   std::make_shared<CBlockUndo>(bu),\n+                                   {});\n+    utxos = utxoscriptindex.getUtxosForScript(scriptPubKey, 1);\n+\n+    BOOST_CHECK_EQUAL(utxos.size(), 2);\n+    BOOST_CHECK_EQUAL(b.vtx.size(), 2);\n+\n+    std::set<std::string> blockTxHashes;\n+    std::set<std::string> utxoTxHashes;\n+\n+    blockTxHashes.insert(b.vtx[0]->GetHash().ToString());\n+    blockTxHashes.insert(b.vtx[1]->GetHash().ToString());\n+\n+    utxoTxHashes.insert(utxos.begin()->hash.ToString());\n+    utxoTxHashes.insert((++utxos.begin())->hash.ToString());\n+\n+    BOOST_CHECK(blockTxHashes == utxoTxHashes);\n+\n+    utxos = utxoscriptindex.getUtxosForScript(scriptPubKey, 0);\n+    BOOST_CHECK_EQUAL(utxos.size(), 0);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(no_record_after_connect_and_disconnect, TestChain100Setup)\n+{\n+    UtxoScriptIndex utxoscriptindex(1 << 20, false, false);\n+    CScript scriptPubKey = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+\n+    CMutableTransaction spend_tx = createSimpleTx(m_coinbase_txns[0]->GetHash(), scriptPubKey, coinbaseKey);\n+\n+    CBlock b = CreateAndProcessBlock({spend_tx}, scriptPubKey);\n+\n+    BOOST_CHECK_EQUAL(b.vtx[0]->vout[1].nValue, 0);\n+\n+    CBlockUndo bu = createBlockUndo(b.vtx[0]->vout[1].scriptPubKey);\n+\n+    utxoscriptindex.BlockConnected(std::make_shared<CBlock>(b),\n+                            nullptr,\n+                            std::make_shared<CBlockUndo>(bu),\n+                            {});\n+\n+    utxoscriptindex.BlockDisconnected(std::make_shared<CBlock>(b), std::make_shared<CBlockUndo>(bu));\n+\n+    SerializableUtxoSet utxos = utxoscriptindex.getUtxosForScript(scriptPubKey, 1);\n+    BOOST_CHECK_EQUAL(utxos.size(), 0);\n+\n+    utxos = utxoscriptindex.getUtxosForScript(scriptPubKey, 0);\n+    BOOST_CHECK_EQUAL(utxos.size(), 0);\n+}\n+\n+\n+BOOST_FIXTURE_TEST_CASE(new_mempool_tx_adds_record, TestChain100Setup)\n+{\n+    UtxoScriptIndex utxoscriptindex(1 << 20, false, false);\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    CMutableTransaction spend = createSimpleTx(m_coinbase_txns[0]->GetHash(), scriptPubKey, coinbaseKey);\n+    LOCK(cs_main);\n+\n+    CValidationState state;\n+    BOOST_CHECK(AcceptToMemoryPool(mempool, state, MakeTransactionRef(spend), nullptr /* pfMissingInputs */, nullptr, true, 0));\n+\n+    CTransactionRef ptxn = std::make_shared<CTransaction>(spend);\n+    utxoscriptindex.TransactionAddedToMempool(ptxn);\n+\n+    SerializableUtxoSet utxos = utxoscriptindex.getUtxosForScript(scriptPubKey, 0);\n+\n+    BOOST_CHECK_EQUAL(utxos.size(), 1);\n+    BOOST_CHECK_EQUAL(utxos.begin()->hash.ToString(), spend.GetHash().ToString());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1d7d6ab44a85bfb05e4592d45445f5a92e08f0e8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -17,7 +17,7 @@\n #include <cuckoocache.h>\n #include <hash.h>\n #include <index/txindex.h>\n-#include <index/utxoindex.h>\n+#include <index/utxoscriptindex.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -2179,8 +2179,8 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             // Flush the chainstate (which may refer to block index entries).\n             if (!pcoinsTip->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n-            if(g_utxoindex)\n-\t\t\t\tif(not g_utxoindex->Flush())\n+            if(g_utxoscriptindex)\n+\t\t\t\tif(not g_utxoscriptindex->Flush())\n \t\t\t\t\treturn AbortNode(state, \"Failed to write to utxo database\");\n \t\t\tnLastFlush = nNow;\n             full_flush_completed = true;"
      },
      {
        "sha": "ce86937f2da24e01dd5d67b3cc8aa8ddcb8a3554",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -160,7 +160,7 @@ void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, c\n     });\n }\n \n-void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock, \n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock,\n \t\t\t\t\t\t\t\t\t const std::shared_ptr<const CBlockUndo> &blockundo) {\n     m_internals->m_schedulerClient.AddToProcessQueue([pblock, blockundo, this] {\n         m_internals->BlockDisconnected(pblock, blockundo);"
      },
      {
        "sha": "04d8f9c7328c261da35ae44b84c70a6b9b2c0723",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -111,9 +111,9 @@ class CValidationInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, \n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block,\n \t\t\t\t\t\t\t\tconst CBlockIndex *pindex,\n-\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n+\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo,\n \t\t\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted) {}\n     /**\n      * Notifies listeners of a block being disconnected\n@@ -186,9 +186,9 @@ class CMainSignals {\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void BlockConnected(const std::shared_ptr<const CBlock> &, \n-\t\t\t\t\t\tconst CBlockIndex *pindex, \n-\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &, \n+    void BlockConnected(const std::shared_ptr<const CBlock> &,\n+\t\t\t\t\t\tconst CBlockIndex *pindex,\n+\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &,\n \t\t\t\t\t\tconst std::shared_ptr<const std::vector<CTransactionRef>> &);\n     void BlockDisconnected( const std::shared_ptr<const CBlock> &,\n \t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo);"
      },
      {
        "sha": "2ec654bd8d1078869ae61721517f7bd811d02fc7",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -180,9 +180,9 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n }\n \n void CZMQNotificationInterface::BlockConnected( const std::shared_ptr<const CBlock>& pblock,\n-\t\t\t\t\t\t\t\t\t\t\t\tconst CBlockIndex* pindexConnected, \n-\t\t\t\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n-\t\t\t\t\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef>& vtxConflicted)\n+                                                const CBlockIndex* pindexConnected,\n+                                                const std::shared_ptr<const CBlockUndo> &blockundo,\n+                                                const std::vector<CTransactionRef>& vtxConflicted)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction added in the block"
      },
      {
        "sha": "c21132f21fb7ba788110e4acfe35a145495fcb22",
        "filename": "test/functional/rpc_utxoindex.py",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/test/functional/rpc_utxoindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/test/functional/rpc_utxoindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_utxoindex.py?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -9,22 +9,21 @@\n     sync_mempools,\n     assert_is_hash_string,\n )\n-from test_framework.test_node import TestNode\n \n class UTXOIndexTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        self.extra_args = [[\"-utxoindex\"], [], []]\n+        self.extra_args = [[\"-utxoscriptindex\"], [], []]\n \n-    def check_utxoindex(self, node_id, minConf, addr, expected_txid):\n-        txouts = self.nodes[node_id].getutxoindex(minConf, (addr,))\n+    def check_utxoscriptindex(self, node_id, minConf, addr, expected_txid):\n+        txouts = self.nodes[node_id].getutxoscriptindex(minConf, (addr,))\n         txid = txouts[0][\"txid\"]\n         assert_is_hash_string(txid)\n         assert_equal(txid, expected_txid)\n \n-    def assert_empty_utxoindex(self, node_id, minConf, addr):\n-        txouts = self.nodes[node_id].getutxoindex(minConf, (addr,))\n+    def assert_empty_utxoscriptindex(self, node_id, minConf, addr):\n+        txouts = self.nodes[node_id].getutxoscriptindex(minConf, (addr,))\n         assert_equal(txouts, [])\n \n     def run_test(self):\n@@ -46,16 +45,16 @@ def run_test(self):\n \n         self.sync_all()\n \n-        self.check_utxoindex(node_id = 0, minConf = 0, addr = address, expected_txid = txid1)\n+        self.check_utxoscriptindex(node_id = 0, minConf = 0, addr = address, expected_txid = txid1)\n \n         self.nodes[0].generate(101)  # node will collect its own fee\n \n-        self.check_utxoindex(node_id=0, minConf=1, addr=address, expected_txid=txid1)\n+        self.check_utxoscriptindex(node_id=0, minConf=1, addr=address, expected_txid=txid1)\n \n-        #restart node 2 with utxoindex on, shall reindex utxo database\n+        #restart node 2 with utxoscriptindex on, shall reindex utxo database\n         self.stop_node(2)\n \n-        self.start_node(2, [\"-utxoindex\"])\n+        self.start_node(2, [\"-utxoscriptindex\"])\n \n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[1], 2)\n@@ -64,17 +63,17 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbalance(), 5090)\n         assert_equal(self.nodes[1].getbalance(), 10)\n \n-        self.check_utxoindex(node_id = 0, minConf = 1, addr = address, expected_txid = txid1)\n-        self.check_utxoindex(node_id = 2, minConf = 1, addr = address, expected_txid = txid1)\n+        self.check_utxoscriptindex(node_id = 0, minConf = 1, addr = address, expected_txid = txid1)\n+        self.check_utxoscriptindex(node_id = 2, minConf = 1, addr = address, expected_txid = txid1)\n \n         # Restart node 2 and check if utxo index is still valid\n         self.stop_node(2)\n \n-        self.start_node(2, [\"-utxoindex\"])\n+        self.start_node(2, [\"-utxoscriptindex\"])\n \n         self.sync_all()\n \n-        self.check_utxoindex(node_id = 2, minConf = 1, addr = address, expected_txid = txid1)\n+        self.check_utxoscriptindex(node_id = 2, minConf = 1, addr = address, expected_txid = txid1)\n \n         # Stop node 2. We want to restart it later and orphan a node 1 block in\n         # order to test txoutindex handling the reorg. In other words, node 2 is\n@@ -89,17 +88,17 @@ def run_test(self):\n \n         sync_mempools([self.nodes[0], self.nodes[1]])\n \n-        self.assert_empty_utxoindex(node_id = 0, minConf = 0, addr = address)\n-        self.check_utxoindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n+        self.assert_empty_utxoscriptindex(node_id = 0, minConf = 0, addr = address)\n+        self.check_utxoscriptindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n \n         self.nodes[1].generate(1)\n         self.sync_all([self.nodes[:2]])\n         assert_equal(self.nodes[0].getbalance(), 5145)\n \n-        self.assert_empty_utxoindex(node_id=0, minConf=0, addr=address)\n-        self.assert_empty_utxoindex(node_id=0, minConf=1, addr=address)\n-        self.check_utxoindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n-        self.check_utxoindex(node_id=0, minConf=1, addr=address2, expected_txid=txid2)\n+        self.assert_empty_utxoscriptindex(node_id=0, minConf=0, addr=address)\n+        self.assert_empty_utxoscriptindex(node_id=0, minConf=1, addr=address)\n+        self.check_utxoscriptindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n+        self.check_utxoscriptindex(node_id=0, minConf=1, addr=address2, expected_txid=txid2)\n \n         # start node 2\n         self.start_node(2, self.extra_args[2])\n@@ -116,10 +115,10 @@ def run_test(self):\n         # - check if txout from tx2 is gone\n         assert_equal(self.nodes[0].getbalance(), 5640)\n \n-        self.assert_empty_utxoindex(node_id=0, minConf=0, addr=address)\n-        self.check_utxoindex(node_id = 0, minConf = 1, addr = address, expected_txid = txid1)\n-        self.check_utxoindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n-        self.assert_empty_utxoindex(node_id=0, minConf=1, addr=address2)\n+        self.assert_empty_utxoscriptindex(node_id=0, minConf=0, addr=address)\n+        self.check_utxoscriptindex(node_id = 0, minConf = 1, addr = address, expected_txid = txid1)\n+        self.check_utxoscriptindex(node_id = 0, minConf = 0, addr = address2, expected_txid = txid2)\n+        self.assert_empty_utxoscriptindex(node_id=0, minConf=1, addr=address2)\n \n if __name__ == '__main__':\n     UTXOIndexTest().main()"
      },
      {
        "sha": "2127b63f24890f1770903b5cfe33aab14d6b8088",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -88,7 +88,6 @@\n     'p2p_timeouts.py',\n     'wallet_dump.py',\n     'wallet_listtransactions.py',\n-    'rpc_utxoindex.py',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n     'wallet_zapwallettxes.py',\n@@ -102,6 +101,7 @@\n     'wallet_address_types.py',\n     'feature_bip68_sequence.py',\n     'p2p_feefilter.py',\n+    'rpc_utxoindex.py',\n     'feature_reindex.py',\n     # vv Tests less than 30s vv\n     'wallet_keypool_topup.py',"
      },
      {
        "sha": "bbe7fcb91534ffabbaf3b9abc13f577d274bea0b",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6aaa3aefc1bf1451109f40270b3c2814b434aae/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6aaa3aefc1bf1451109f40270b3c2814b434aae/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "patch": "@@ -12,6 +12,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"checkpoints -> validation -> checkpoints\"\n     \"index/txindex -> validation -> index/txindex\"\n+    \"index/utxoscriptindex -> validation -> index/utxoscriptindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"policy/policy -> validation -> policy/policy\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\""
      }
    ]
  },
  {
    "sha": "1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDRlYjI5MWE3NTI2MTNhMWMwYzI2Y2NkNWE1YmZhNTllODBkNWRh",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-23T20:13:43Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-11-13T16:47:10Z"
      },
      "message": "whitespace fix + msvc build fix",
      "tree": {
        "sha": "8d12d44759639693621f38a96b15ec29e911d789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d12d44759639693621f38a96b15ec29e911d789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6aaa3aefc1bf1451109f40270b3c2814b434aae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6aaa3aefc1bf1451109f40270b3c2814b434aae"
      }
    ],
    "stats": {
      "total": 824,
      "additions": 411,
      "deletions": 413
    },
    "files": [
      {
        "sha": "936cafce0ec417914ddbefabdb2a99e7bdc8ebf0",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -169,4 +169,4 @@\n     <ClInclude Include=\"..\\..\\srcpcegister.h\" />\n   </ItemGroup>\n   <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>\n\\ No newline at end of file\n+</Project>"
      },
      {
        "sha": "7905f6ba02d54c12ec5dc391fab54f86f348e8f6",
        "filename": "src/index/utxoscriptindex.cpp",
        "status": "modified",
        "additions": 247,
        "deletions": 247,
        "changes": 494,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/index/utxoscriptindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/index/utxoscriptindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/utxoscriptindex.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -23,100 +23,100 @@ static ScriptHash ScriptIndexHash(const CScript& in){\n class UtxoScriptIndexDBCursor\n {\n public:\n-\tUtxoScriptIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n+    UtxoScriptIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n \n-\tbool GetKey(ScriptHash& key);\n-\tbool GetValue(SerializableUtxoSet& utxoSet);\n-\tunsigned int GetValueSize() const;\n+    bool GetKey(ScriptHash& key);\n+    bool GetValue(SerializableUtxoSet& utxoSet);\n+    unsigned int GetValueSize() const;\n \n-\tbool Valid() const;\n-\tvoid Next();\n+    bool Valid() const;\n+    void Next();\n \n-\tstd::pair<char, ScriptHash> keyTmp;\n-\tstd::unique_ptr<CDBIterator> pcursor;\n+    std::pair<char, ScriptHash> keyTmp;\n+    std::unique_ptr<CDBIterator> pcursor;\n };\n \n class UtxoScriptIndex::DB : public BaseIndex::DB\n {\n public:\n-\texplicit DB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    explicit DB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-\tbool WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos);\n-\tbool ReadUtxos(const ScriptHash&, SerializableUtxoSet& utxoSet);\n+    bool WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos);\n+    bool ReadUtxos(const ScriptHash&, SerializableUtxoSet& utxoSet);\n \n-\tUtxoScriptIndexDBCursor* Cursor() const;\n+    UtxoScriptIndexDBCursor* Cursor() const;\n };\n \n UtxoScriptIndex::DB::DB(size_t nCacheSize, bool fMemory, bool fWipe) :\n-\tBaseIndex::DB(GetDataDir() / \"indexes\" / \"coinsbyscript\", nCacheSize, fMemory, fWipe)\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"coinsbyscript\", nCacheSize, fMemory, fWipe)\n {\n \n }\n \n bool UtxoScriptIndex::DB::WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos)\n {\n-\tCDBBatch batch(*this);\n-\tfor(const auto& scriptUtxo: scriptUtxos)\n-\t{\n-\t\tauto key = std::make_pair(DB_UTXO, std::ref(scriptUtxo.first));\n-\t\tauto& value = scriptUtxo.second;\n-\t\tif(scriptUtxo.second.empty())\n-\t\t\tbatch.Erase(key);\n-\t\telse\n-\t\t\tbatch.Write(key,value);\n-\t}\n-\treturn WriteBatch(batch);\n+    CDBBatch batch(*this);\n+    for(const auto& scriptUtxo: scriptUtxos)\n+    {\n+        auto key = std::make_pair(DB_UTXO, std::ref(scriptUtxo.first));\n+        auto& value = scriptUtxo.second;\n+        if(scriptUtxo.second.empty())\n+            batch.Erase(key);\n+        else\n+            batch.Write(key,value);\n+    }\n+    return WriteBatch(batch);\n }\n \n bool UtxoScriptIndex::DB::ReadUtxos(const ScriptHash& scriptId, SerializableUtxoSet& utxoSet)\n {\n-\treturn Read(std::make_pair(DB_UTXO, scriptId), utxoSet);\n+    return Read(std::make_pair(DB_UTXO, scriptId), utxoSet);\n }\n \n UtxoScriptIndexDBCursor* UtxoScriptIndex::DB::Cursor() const\n {\n-\tUtxoScriptIndexDBCursor* cursor = new UtxoScriptIndexDBCursor(\n-\t\t\t\t\t\t\t\t\tconst_cast<CDBWrapper*>(\n-\t\t\t\t\t\t\t\t\t\tstatic_cast<const CDBWrapper*>(this))->NewIterator());\n-\tcursor->pcursor->Seek(DB_UTXO);\n-\tif(not cursor->pcursor->Valid())\n-\t\tcursor->keyTmp.first = 0;\n-\telse\n-\t\tcursor->pcursor->GetKey(cursor->keyTmp);\n-\treturn cursor;\n+    UtxoScriptIndexDBCursor* cursor = new UtxoScriptIndexDBCursor(\n+                                    const_cast<CDBWrapper*>(\n+                                        static_cast<const CDBWrapper*>(this))->NewIterator());\n+    cursor->pcursor->Seek(DB_UTXO);\n+    if(!(cursor->pcursor->Valid()))\n+        cursor->keyTmp.first = 0;\n+    else\n+        cursor->pcursor->GetKey(cursor->keyTmp);\n+    return cursor;\n }\n \n bool UtxoScriptIndexDBCursor::GetKey(ScriptHash& key)\n {\n-\tif(keyTmp.first == DB_UTXO)\n-\t{\n-\t\tkey = keyTmp.second;\n-\t\treturn true;\n-\t}\n-\treturn false;\n+    if(keyTmp.first == DB_UTXO)\n+    {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n }\n \n bool UtxoScriptIndexDBCursor::GetValue(SerializableUtxoSet& utxoSet)\n {\n-\treturn pcursor->GetValue(utxoSet);\n+    return pcursor->GetValue(utxoSet);\n }\n \n bool UtxoScriptIndexDBCursor::Valid() const\n {\n-\treturn keyTmp.first == DB_UTXO;\n+    return keyTmp.first == DB_UTXO;\n }\n \n void UtxoScriptIndexDBCursor::Next()\n {\n-\tpcursor->Next();\n-\tif(pcursor->Valid() and pcursor->GetKey(keyTmp))\n-\t\treturn;\n-\telse\n-\t\tkeyTmp.first = 0;\n+    pcursor->Next();\n+    if(pcursor->Valid() && pcursor->GetKey(keyTmp))\n+        return;\n+    else\n+        keyTmp.first = 0;\n }\n \n UtxoScriptIndex::UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe) :\n-\tm_db(std::move(MakeUnique<UtxoScriptIndex::DB>(n_cache_size, f_memory, f_wipe)))\n+    m_db(std::move(MakeUnique<UtxoScriptIndex::DB>(n_cache_size, f_memory, f_wipe)))\n {\n \n }\n@@ -127,87 +127,87 @@ UtxoScriptIndex::~UtxoScriptIndex() {\n \n void UtxoScriptIndex::Start()\n {\n-\tRegisterValidationInterface(this);\n+    RegisterValidationInterface(this);\n }\n \n void UtxoScriptIndex::TransactionAddedToMempool(const CTransactionRef &ptxn) {\n-\tLOCK(cs_utxoCacheMempool);\n-\tconst CTransaction &tx = *ptxn;\n-\tfor (unsigned int i = 0; i < tx.vout.size(); i++)\n-\t{\n-\t\tif (tx.vout[i].IsNull() or tx.vout[i].scriptPubKey.IsUnspendable())\n-\t\t\tcontinue;\n+    LOCK(cs_utxoCacheMempool);\n+    const CTransaction &tx = *ptxn;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    {\n+        if (tx.vout[i].IsNull() || tx.vout[i].scriptPubKey.IsUnspendable())\n+            continue;\n \n-\t\tauto utxoKey = ScriptIndexHash(tx.vout[i].scriptPubKey);\n-\t\tutxoCacheMempool[utxoKey].insert(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n-\t}\n+        auto utxoKey = ScriptIndexHash(tx.vout[i].scriptPubKey);\n+        utxoCacheMempool[utxoKey].insert(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+    }\n }\n \n void UtxoScriptIndex::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n-\tLOCK(cs_utxoCacheMempool);\n-\tconst CTransaction &tx = *ptx;\n-\tfor (unsigned int i = 0; i < tx.vout.size(); i++)\n-\t{\n-\t\tif (tx.vout[i].IsNull() or tx.vout[i].scriptPubKey.IsUnspendable())\n-\t\t\tcontinue;\n-\n-\t\tstd::map<ScriptHash, SerializableUtxoSet>::iterator it = utxoCacheMempool.find(ScriptIndexHash(tx.vout[i].scriptPubKey));\n-\n-\t\tif (it != utxoCacheMempool.end())\n-\t\t{\n-\t        it->second.erase(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n-\t        if (it->second.empty())\n-\t            utxoCacheMempool.erase(it);\n-\t    }\n-\t}\n-}\n-\n-void UtxoScriptIndex::BlockConnected(\tconst std::shared_ptr<const CBlock> &block,\n-\t\t\t\t\t\t\t\tconst CBlockIndex *pindex,\n-\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo,\n-\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted)\n+    LOCK(cs_utxoCacheMempool);\n+    const CTransaction &tx = *ptx;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    {\n+        if (tx.vout[i].IsNull() || tx.vout[i].scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        std::map<ScriptHash, SerializableUtxoSet>::iterator it = utxoCacheMempool.find(ScriptIndexHash(tx.vout[i].scriptPubKey));\n+\n+        if (it != utxoCacheMempool.end())\n+        {\n+            it->second.erase(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+            if (it->second.empty())\n+                utxoCacheMempool.erase(it);\n+        }\n+    }\n+}\n+\n+void UtxoScriptIndex::BlockConnected(const std::shared_ptr<const CBlock> &block,\n+                                     const CBlockIndex *pindex,\n+                                     const std::shared_ptr<const CBlockUndo> &blockundo,\n+                                     const std::vector<CTransactionRef> &txnConflicted)\n {\n     {\n-\t\tLOCK(cs_utxoCache);\n-\t\tremoveSpentUtxosOnTipConnected(*block, *blockundo);\n-\t\taddNewUtxosOnTipConnected(*block);\n-\t}\n-\tWriteBestBlock(block->GetHash());\n+        LOCK(cs_utxoCache);\n+        removeSpentUtxosOnTipConnected(*block, *blockundo);\n+        addNewUtxosOnTipConnected(*block);\n+    }\n+    WriteBestBlock(block->GetHash());\n }\n \n-void UtxoScriptIndex::BlockDisconnected(\tconst std::shared_ptr<const CBlock> &block,\n-\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) {\n-\tassert(block->vtx.size() > 0);\n-\tLOCK(cs_utxoCache);\n-\trestoreSpentUtxosOnTipDisconnected(*block, *blockundo);\n-\tremoveUtxosOnTipDisconnected(*block);\n+void UtxoScriptIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block,\n+                                        const std::shared_ptr<const CBlockUndo> &blockundo) {\n+    assert(block->vtx.size() > 0);\n+    LOCK(cs_utxoCache);\n+    restoreSpentUtxosOnTipDisconnected(*block, *blockundo);\n+    removeUtxosOnTipDisconnected(*block);\n }\n \n BaseIndex::DB& UtxoScriptIndex::GetDB() const { return *m_db; }\n \n void UtxoScriptIndex::removeUtxo(const CTxOut& txout, const COutPoint outpoint)\n {\n-\tif(txout.IsNull() or txout.scriptPubKey.IsUnspendable())\n-\t\treturn;\n-\tconst ScriptHash utxoCacheKey = ScriptIndexHash(txout.scriptPubKey);\n-\tloadToCache(utxoCacheKey);\n-\tif(utxoCache.count(utxoCacheKey) == 0)\n-\t\treturn;\n-\tSerializableUtxoSet& utxoCacheSet = utxoCache.at(utxoCacheKey);\n-\t\tutxoCacheSet.erase(outpoint);\n+    if(txout.IsNull() || txout.scriptPubKey.IsUnspendable())\n+        return;\n+    const ScriptHash utxoCacheKey = ScriptIndexHash(txout.scriptPubKey);\n+    loadToCache(utxoCacheKey);\n+    if(utxoCache.count(utxoCacheKey) == 0)\n+        return;\n+    SerializableUtxoSet& utxoCacheSet = utxoCache.at(utxoCacheKey);\n+        utxoCacheSet.erase(outpoint);\n }\n \n void UtxoScriptIndex::removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo)\n {\n \n-\tfor(unsigned int i = 1; i < block.vtx.size(); ++i)\n-\t{\n-\t\tfor(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n-\t\t{\n-\t\t\tremoveUtxo(\tblockundo.vtxundo[i-1].vprevout[j].out,\n-\t\t\t\t\t\tblock.vtx[i]->vin[j].prevout);\n-\t\t}\n-\t}\n+    for(unsigned int i = 1; i < block.vtx.size(); ++i)\n+    {\n+        for(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n+        {\n+            removeUtxo(blockundo.vtxundo[i-1].vprevout[j].out,\n+                       block.vtx[i]->vin[j].prevout);\n+        }\n+    }\n }\n \n void UtxoScriptIndex::removeUtxosOnTipDisconnected(const CBlock& block)\n@@ -217,81 +217,81 @@ void UtxoScriptIndex::removeUtxosOnTipDisconnected(const CBlock& block)\n \n     unsigned int i = block.vtx.size() - 1;\n     while(true)\n-\t{\n-\t\tfor(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n-\t\t{\n-\t\t\tremoveUtxo(\tblock.vtx[i]->vout[j],\n-\t\t\t\t\t\tCOutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n-\t\t}\n-\t\tif(i==0)\n-\t\t\tbreak;\n+    {\n+        for(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n+        {\n+            removeUtxo(block.vtx[i]->vout[j],\n+                       COutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n+        }\n+        if(i==0)\n+            break;\n         --i;\n-\t}\n+    }\n }\n \n void UtxoScriptIndex::loadToCache(const ScriptHash& key)\n {\n-\tif(not utxoCache[key].empty())\n-\t\treturn;\n-\tm_db->ReadUtxos(key, utxoCache[key]);\n+    if(!(utxoCache[key].empty()))\n+        return;\n+    m_db->ReadUtxos(key, utxoCache[key]);\n }\n \n void UtxoScriptIndex::addUtxo(const CScript& scriptPubKey, COutPoint outpoint)\n {\n-\tCTxDestination dest;\n-\tExtractDestination(scriptPubKey, dest);\n-\tconst ScriptHash utxoCacheKey = ScriptIndexHash(GetScriptForDestination(dest));\t\n-\tloadToCache(utxoCacheKey);\n-\tSerializableUtxoSet& utxoCacheSet = utxoCache[utxoCacheKey];\n-\tutxoCacheSet.insert(outpoint);\n+    CTxDestination dest;\n+    ExtractDestination(scriptPubKey, dest);\n+    const ScriptHash utxoCacheKey = ScriptIndexHash(GetScriptForDestination(dest));\n+    loadToCache(utxoCacheKey);\n+    SerializableUtxoSet& utxoCacheSet = utxoCache[utxoCacheKey];\n+    utxoCacheSet.insert(outpoint);\n }\n \n void UtxoScriptIndex::restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo)\n {\n-\tfor(unsigned int i = block.vtx.size() - 1; i > 0; --i)\n-\t{\n-\t\tfor(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n-\t\t{\n-\t\t\taddUtxo(blockundo.vtxundo[i-1].vprevout[j].out.scriptPubKey,\n-\t\t\t\t\tblock.vtx[i]->vin[j].prevout);\n-\t\t}\n-\t}\n+    for(unsigned int i = block.vtx.size() - 1; i > 0; --i)\n+    {\n+        for(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n+        {\n+            addUtxo(blockundo.vtxundo[i-1].vprevout[j].out.scriptPubKey,\n+                    block.vtx[i]->vin[j].prevout);\n+        }\n+    }\n }\n \n void UtxoScriptIndex::addNewUtxosOnTipConnected(const CBlock& block)\n {\n-\tfor(unsigned int i = 0; i < block.vtx.size(); ++i)\n-\t{\n-\t\tfor(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n-\t\t{\n-\t\t\taddUtxo(block.vtx[i]->vout[j].scriptPubKey,\n-\t\t\t\t\tCOutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n-\t\t}\n-\t}\n+    for(unsigned int i = 0; i < block.vtx.size(); ++i)\n+    {\n+        for(unsigned int j = 0; j < block.vtx[i]->vout.size(); ++j)\n+        {\n+            addUtxo(block.vtx[i]->vout[j].scriptPubKey,\n+                    COutPoint(block.vtx[i]->GetHash(), static_cast<uint32_t>(j)));\n+        }\n+    }\n }\n \n void UtxoScriptIndex::getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script)\n {\n-\tconst ScriptHash key = ScriptIndexHash(script);\n-\tloadToCache(key);\n-\tutxoSet.insert(utxoCache[key].begin(), utxoCache[key].end());\n+    const ScriptHash key = ScriptIndexHash(script);\n+    loadToCache(key);\n+    utxoSet.insert(utxoCache[key].begin(), utxoCache[key].end());\n }\n \n void UtxoScriptIndex::appendMempoolUtxos(SerializableUtxoSet& utxoSet, const ScriptHash& key)\n {\n-\t\tLOCK(cs_utxoCacheMempool);\n-\t\tCoin dummyCoin;\n-\t\tutxoSet.insert(utxoCacheMempool[key].begin(), utxoCacheMempool[key].end());\n-\t\tLOCK(mempool.cs);\n-\t\tCCoinsViewMemPool view(pcoinsTip.get(), mempool);\n-\t\tstd::set<COutPoint> outpointsToErase{};\n+        LOCK(cs_utxoCacheMempool);\n+        Coin dummyCoin;\n+        utxoSet.insert(utxoCacheMempool[key].begin(), utxoCacheMempool[key].end());\n+        LOCK(mempool.cs);\n+        CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n+        std::set<COutPoint> outpointsToErase{};\n         for(const COutPoint& outpoint: utxoSet)\n-\t\t{\n-\t\t\tif(not view.GetCoin(outpoint, dummyCoin))\n-\t\t\t\toutpointsToErase.insert(outpoint);\n-\t\t\tif(mempool.isSpent(outpoint))\n+        {\n+            if(!(view.GetCoin(outpoint, dummyCoin)))\n+                outpointsToErase.insert(outpoint);\n+            if(mempool.isSpent(outpoint))\n                 outpointsToErase.insert(outpoint);\n-\t\t}\n+        }\n         for(const COutPoint& outpoint: outpointsToErase)\n         {\n             utxoSet.erase(outpoint);\n@@ -300,60 +300,60 @@ void UtxoScriptIndex::appendMempoolUtxos(SerializableUtxoSet& utxoSet, const Scr\n \n SerializableUtxoSet UtxoScriptIndex::getUtxosForScript(const CScript& script, unsigned int minConf)\n {\n-\tconst ScriptHash key = ScriptIndexHash(script);\n-\tLOCK(cs_utxoCache);\n+    const ScriptHash key = ScriptIndexHash(script);\n+    LOCK(cs_utxoCache);\n \n-\tSerializableUtxoSet retSet{};\n-\tgetConfirmedUtxos(retSet, script);\n-\tif(minConf == 0)\n-\t\tappendMempoolUtxos(retSet, key);\n+    SerializableUtxoSet retSet{};\n+    getConfirmedUtxos(retSet, script);\n+    if(minConf == 0)\n+        appendMempoolUtxos(retSet, key);\n \n-\treturn retSet;\n+    return retSet;\n }\n \n bool UtxoScriptIndex::Flush()\n {\n-\tLOCK(cs_utxoCache);\n-\tbool writeResult = m_db->WriteUtxos(utxoCache);\n-\tif(writeResult == true)\n-\t\tutxoCache.clear();\n-\treturn writeResult;\n+    LOCK(cs_utxoCache);\n+    bool writeResult = m_db->WriteUtxos(utxoCache);\n+    if(writeResult == true)\n+        utxoCache.clear();\n+    return writeResult;\n }\n \n int64_t UtxoScriptIndex::countCoins(const std::unique_ptr<CCoinsViewDB>& coins)\n {\n-\tstd::unique_ptr<CCoinsViewCursor> coinsCursor(coins->Cursor());\n-\tint64_t coinsCount = 0;\n-\twhile(coinsCursor->Valid())\n-\t{\n-\t\t++coinsCount;\n-\t\tcoinsCursor->Next();\n-\t}\n-\treturn coinsCount;\n+    std::unique_ptr<CCoinsViewCursor> coinsCursor(coins->Cursor());\n+    int64_t coinsCount = 0;\n+    while(coinsCursor->Valid())\n+    {\n+        ++coinsCount;\n+        coinsCursor->Next();\n+    }\n+    return coinsCount;\n }\n \n bool UtxoScriptIndex::createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor)\n {\n-\tCOutPoint outpoint;\n-\tCoin coin;\n-\n-\tif(not coinsCursor->GetKey(outpoint) or not coinsCursor->GetValue(coin))\n-\t\treturn false;\n-\n-\tif(not coin.out.IsNull() and not coin.out.scriptPubKey.IsUnspendable())\n-\t{\n-\t\tLOCK(cs_utxoCache);\n-\t\tconst ScriptHash key = ScriptIndexHash(coin.out.scriptPubKey);\n-\t\tif(utxoCache.count(key) == 0)\n-\t\t{\n-\t\t\tSerializableUtxoSet utxos;\n-\t\t\tm_db->ReadUtxos(key, utxos);\n-\t\t\tutxoCache.insert(std::make_pair(key, utxos));\n-\t\t}\n-\t\tloadToCache(key);\n-\t\tutxoCache[key].insert(outpoint);\n-\t}\n-\treturn true;\n+    COutPoint outpoint;\n+    Coin coin;\n+\n+    if(!(coinsCursor->GetKey(outpoint)) || !(coinsCursor->GetValue(coin)))\n+        return false;\n+\n+    if(!(coin.out.IsNull()) && !(coin.out.scriptPubKey.IsUnspendable()))\n+    {\n+        LOCK(cs_utxoCache);\n+        const ScriptHash key = ScriptIndexHash(coin.out.scriptPubKey);\n+        if(utxoCache.count(key) == 0)\n+        {\n+            SerializableUtxoSet utxos;\n+            m_db->ReadUtxos(key, utxos);\n+            utxoCache.insert(std::make_pair(key, utxos));\n+        }\n+        loadToCache(key);\n+        utxoCache[key].insert(outpoint);\n+    }\n+    return true;\n }\n \n bool UtxoScriptIndex::GenerateIndex(const std::unique_ptr<CCoinsViewDB>& coins)\n@@ -367,13 +367,13 @@ bool UtxoScriptIndex::GenerateIndex(const std::unique_ptr<CCoinsViewDB>& coins)\n \n     while(coinsCursor->Valid())\n     {\n-\t    try{\n+        try{\n             boost::this_thread::interruption_point();\n \n-            if(coinsCount > 0 and coinsProcessed % 1000 == 0)\n+            if(coinsCount > 0 && coinsProcessed % 1000 == 0)\n                 uiInterface.ShowProgress(_(\"Building address index...\"), (int)(((double)coinsProcessed / (double)coinsCount) * (double)100), false);\n \n-            if(not createUtxoRecordFromCoin(coinsCursor)){\n+            if(!createUtxoRecordFromCoin(coinsCursor)){\n                 LogPrintf(\"Error creating utxo record from coin\\n\");\n                 return false;\n             }\n@@ -383,73 +383,73 @@ bool UtxoScriptIndex::GenerateIndex(const std::unique_ptr<CCoinsViewDB>& coins)\n \n             coinsProcessed++;\n             coinsCursor->Next();\n-\t    }\n+        }\n         catch(std::exception &e){\n             return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n-\tWriteBestBlock(coins->GetBestBlock());\n-\tFlush();\n-\treturn true;\n+    WriteBestBlock(coins->GetBestBlock());\n+    Flush();\n+    return true;\n }\n \n-bool UtxoScriptIndex::removeUtxoRecord(\tconst std::unique_ptr<UtxoScriptIndexDBCursor>& cursor,\n-\t\t\t\t\t\t\t\t\tstd::map<ScriptHash, SerializableUtxoSet>& keysToDelete,\n-\t\t\t\t\t\t\t\t\tint64_t& counter)\n+bool UtxoScriptIndex::removeUtxoRecord(const std::unique_ptr<UtxoScriptIndexDBCursor>& cursor,\n+                                       std::map<ScriptHash, SerializableUtxoSet>& keysToDelete,\n+                                       int64_t& counter)\n {\n-\tScriptHash key;\n-\tif(not cursor->GetKey(key))\n-\t\treturn false;\n+    ScriptHash key;\n+    if(!(cursor->GetKey(key)))\n+        return false;\n \n-\tkeysToDelete.emplace(std::make_pair(key, SerializableUtxoSet{}));\n-\t++counter;\n-\tif(keysToDelete.size() > DB_UTXO_FLUSH_FREQUENCY)\n-\t{\n-\t\tm_db->WriteUtxos(keysToDelete);\n-\t\tkeysToDelete.clear();\n-\t}\n-\tcursor->Next();\n-\treturn true;\n+    keysToDelete.emplace(std::make_pair(key, SerializableUtxoSet{}));\n+    ++counter;\n+    if(keysToDelete.size() > DB_UTXO_FLUSH_FREQUENCY)\n+    {\n+        m_db->WriteUtxos(keysToDelete);\n+        keysToDelete.clear();\n+    }\n+    cursor->Next();\n+    return true;\n }\n \n bool UtxoScriptIndex::DeleteIndex()\n {\n-\tLogPrintf(\"Deleting utxo script index\\n\");\n-\tstd::unique_ptr<UtxoScriptIndexDBCursor> cursor(m_db->Cursor());\n-\tstd::map<ScriptHash, SerializableUtxoSet> keysToDelete;\n-\n-\tint64_t counter = 0;\n-\twhile(cursor->Valid())\n-\t{\n-\t\tboost::this_thread::interruption_point();\n-\t\ttry\n-\t\t{\n-\t\t\tif(not removeUtxoRecord(cursor, keysToDelete, counter))\n-\t\t\t\tbreak;\n-\t\t}\n-\t\tcatch(std::exception &e)\n-\t\t{\n-\t\t\treturn error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n-\t\t}\n-\t}\n-\tif(not keysToDelete.empty())\n-\t{\n-\t\tm_db->WriteUtxos(keysToDelete);\n-\t\tkeysToDelete.clear();\n-\t}\n-\tWriteBestBlock(uint256());\n-\tLogPrintf(\"Address index with %d addresses successfully deleted.\\n\", counter);\n-\treturn true;\n+    LogPrintf(\"Deleting utxo script index\\n\");\n+    std::unique_ptr<UtxoScriptIndexDBCursor> cursor(m_db->Cursor());\n+    std::map<ScriptHash, SerializableUtxoSet> keysToDelete;\n+\n+    int64_t counter = 0;\n+    while(cursor->Valid())\n+    {\n+        boost::this_thread::interruption_point();\n+        try\n+        {\n+            if(!removeUtxoRecord(cursor, keysToDelete, counter))\n+                break;\n+        }\n+        catch(std::exception &e)\n+        {\n+            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        }\n+    }\n+    if(!keysToDelete.empty())\n+    {\n+        m_db->WriteUtxos(keysToDelete);\n+        keysToDelete.clear();\n+    }\n+    WriteBestBlock(uint256());\n+    LogPrintf(\"Address index with %d addresses successfully deleted.\\n\", counter);\n+    return true;\n }\n \n bool UtxoScriptIndex::WriteBestBlock(const uint256& value)\n {\n-\tCDBBatch batch(*m_db);\n-\tbatch.Write(DB_UTXO_BEST_BLOCK, value);\n-\treturn m_db->WriteBatch(batch);\n+    CDBBatch batch(*m_db);\n+    batch.Write(DB_UTXO_BEST_BLOCK, value);\n+    return m_db->WriteBatch(batch);\n }\n \n bool UtxoScriptIndex::ReadBestBlock(uint256& value)\n {\n-\treturn m_db->Read(DB_UTXO_BEST_BLOCK, value);\n+    return m_db->Read(DB_UTXO_BEST_BLOCK, value);\n }"
      },
      {
        "sha": "a7d90ee1062502d4028f415eecd46ae36d29fe03",
        "filename": "src/index/utxoscriptindex.h",
        "status": "modified",
        "additions": 43,
        "deletions": 43,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/index/utxoscriptindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/index/utxoscriptindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/utxoscriptindex.h?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -30,10 +30,10 @@ class UtxoScriptIndexDBCursor;\n class SerializableUtxoSet : public std::set<COutPoint>\n {\n public:\n-\tADD_SERIALIZE_METHODS;\n+    ADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-\t\tREADWRITE(static_cast<std::set<COutPoint>&>(*this));\n+        READWRITE(static_cast<std::set<COutPoint>&>(*this));\n     }\n };\n \n@@ -42,59 +42,59 @@ typedef uint160 ScriptHash;\n class UtxoScriptIndex final : public BaseIndex\n {\n protected:\n-\tclass DB;\n+    class DB;\n public:\n-\texplicit UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe);\n+    explicit UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe);\n \n-\t~UtxoScriptIndex() override;\n+    ~UtxoScriptIndex() override;\n \n-\tvoid Start();\n+    void Start();\n \n-\tvoid TransactionAddedToMempool(const CTransactionRef &ptxn) override;\n+    void TransactionAddedToMempool(const CTransactionRef &ptxn) override;\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n \n-\tvoid BlockConnected(const std::shared_ptr<const CBlock> &block,\n-\t\t\t\t\t\tconst CBlockIndex *pindex,\n-\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo,\n-\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock> &block,\n+                        const CBlockIndex *pindex,\n+                        const std::shared_ptr<const CBlockUndo> &blockundo,\n+                        const std::vector<CTransactionRef> &txnConflicted) override;\n \n-\tvoid BlockDisconnected(\tconst std::shared_ptr<const CBlock> &block,\n-\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override;\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block,\n+                           const std::shared_ptr<const CBlockUndo> &blockundo) override;\n \n-\tBaseIndex::DB& GetDB() const;\n+    BaseIndex::DB& GetDB() const;\n     const char* GetName() const override { return \"utxoscriptindex\"; }\n \n-\tSerializableUtxoSet getUtxosForScript(const CScript& script, unsigned int minConf);\n-\tbool Flush();\n-\tbool GenerateIndex(const std::unique_ptr<CCoinsViewDB>&);\n-\tbool DeleteIndex();\n-\tbool WriteBestBlock(const uint256& value);\n-\tbool ReadBestBlock(uint256& value);\n+    SerializableUtxoSet getUtxosForScript(const CScript& script, unsigned int minConf);\n+    bool Flush();\n+    bool GenerateIndex(const std::unique_ptr<CCoinsViewDB>&);\n+    bool DeleteIndex();\n+    bool WriteBestBlock(const uint256& value);\n+    bool ReadBestBlock(uint256& value);\n \n private:\n-\tconst std::unique_ptr<DB> m_db;\n-\tstd::map<ScriptHash, SerializableUtxoSet> utxoCache;\n-\tstd::map<ScriptHash, SerializableUtxoSet> utxoCacheMempool;\n-\tCCriticalSection cs_utxoCache;\n-\tCCriticalSection cs_utxoCacheMempool;\n-\n-\tvoid loadToCache(const ScriptHash& key);\n-\tint64_t countCoins(const std::unique_ptr<CCoinsViewDB>& coins);\n-\tvoid removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo);\n-\tvoid addNewUtxosOnTipConnected(const CBlock& block);\n-\tvoid restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo);\n-\tvoid removeUtxosOnTipDisconnected(const CBlock& block);\n-\n-\tvoid removeUtxo(const CTxOut& txout, COutPoint outpoint);\n-\tvoid addUtxo(const CScript& scriptPubKey, COutPoint outpoint);\n-\n-\tvoid getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script);\n-\n-\tvoid appendMempoolUtxos(SerializableUtxoSet& utxoSet, const ScriptHash& key);\n-\tbool createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor);\n-\tbool removeUtxoRecord(\tconst std::unique_ptr<UtxoScriptIndexDBCursor>& cursor,\n-\t\t\t\t\t\t\tstd::map<ScriptHash, SerializableUtxoSet>& keysToDelete,\n-\t\t\t\t\t\t\tint64_t& counter);\n+    const std::unique_ptr<DB> m_db;\n+    std::map<ScriptHash, SerializableUtxoSet> utxoCache;\n+    std::map<ScriptHash, SerializableUtxoSet> utxoCacheMempool;\n+    CCriticalSection cs_utxoCache;\n+    CCriticalSection cs_utxoCacheMempool;\n+\n+    void loadToCache(const ScriptHash& key);\n+    int64_t countCoins(const std::unique_ptr<CCoinsViewDB>& coins);\n+    void removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo);\n+    void addNewUtxosOnTipConnected(const CBlock& block);\n+    void restoreSpentUtxosOnTipDisconnected(const CBlock& block, const CBlockUndo& blockundo);\n+    void removeUtxosOnTipDisconnected(const CBlock& block);\n+\n+    void removeUtxo(const CTxOut& txout, COutPoint outpoint);\n+    void addUtxo(const CScript& scriptPubKey, COutPoint outpoint);\n+\n+    void getConfirmedUtxos(SerializableUtxoSet& utxoSet, const CScript& script);\n+\n+    void appendMempoolUtxos(SerializableUtxoSet& utxoSet, const ScriptHash& key);\n+    bool createUtxoRecordFromCoin(const std::unique_ptr<CCoinsViewCursor>& coinsCursor);\n+    bool removeUtxoRecord(const std::unique_ptr<UtxoScriptIndexDBCursor>& cursor,\n+                            std::map<ScriptHash, SerializableUtxoSet>& keysToDelete,\n+                            int64_t& counter);\n };\n \n extern std::unique_ptr<UtxoScriptIndex> g_utxoscriptindex;"
      },
      {
        "sha": "02cbcb8ce2e13c92b98147b7a276a76ec31d4498",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -1395,7 +1395,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n     int64_t nUtxoScriptIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-utxoscriptindex\", DEFAULT_UTXOINDEX) ? nMaxTxIndexCache << 20 : 0);\n-\tnTotalCache -= nUtxoScriptIndexCache;\n+    nTotalCache -= nUtxoScriptIndexCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n@@ -1408,7 +1408,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n     if (gArgs.GetBoolArg(\"-utxoscriptindex\", DEFAULT_UTXOINDEX)) {\n         LogPrintf(\"* Using %.1fMiB for unspent output by script index database\\n\", nUtxoScriptIndexCache * (1.0 / 1024 / 1024));\n-\t}\n+    }\n     LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n     LogPrintf(\"* Using %.1fMiB for in-memory UTXO set (plus up to %.1fMiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n@@ -1596,13 +1596,13 @@ bool AppInitMain(InitInterfaces& interfaces)\n         if(gArgs.GetBoolArg(\"-utxoscriptindex\", DEFAULT_UTXOINDEX))\n         {\n             uint256 utxoindexBestBlock;\n-            if(not g_utxoscriptindex->ReadBestBlock(utxoindexBestBlock) or utxoindexBestBlock != pcoinsdbview->GetBestBlock()){\n+            if(!(g_utxoscriptindex->ReadBestBlock(utxoindexBestBlock)) || utxoindexBestBlock != pcoinsdbview->GetBestBlock()){\n                 LogPrintf(\"Utxo script index best block (%s) not matching current best block (%s)\\n\", utxoindexBestBlock.ToString(), pcoinsdbview->GetBestBlock().ToString());\n-                if(not g_utxoscriptindex->DeleteIndex()){\n+                if(!(g_utxoscriptindex->DeleteIndex())){\n                     LogPrintf(\"Error deleting utxoscriptindex\\n\");\n                     return false;\n                 }\n-                if(not g_utxoscriptindex->GenerateIndex(pcoinsdbview)){\n+                if(!(g_utxoscriptindex->GenerateIndex(pcoinsdbview))){\n                     LogPrintf(\"Error building utxoscriptindex\\n\");\n                     return false;\n                 }"
      },
      {
        "sha": "4a342457e1fb232b36813b92193d8d6c115edd4d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 79,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -1095,68 +1095,68 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsigned int minConf)\n {\n-\tfor(auto outpoint: utxoSet)\n-\t{\n-\t\tCoin coin;\n-\t\tif(minConf == 0)\n-\t\t{\n-\t\t\tLOCK(mempool.cs);\n-\t\t\tCCoinsViewMemPool view(pcoinsTip.get(), mempool);\n-\t\t\tif(not view.GetCoin(outpoint, coin))\n-\t\t\t\tcontinue;\n-\t\t}\n-\t\telse if(not pcoinsTip->GetCoin(outpoint, coin))\n-\t\t\tcontinue;\n-\n-\t\tif(coin.out.IsNull() or coin.out.scriptPubKey.IsUnspendable())\n-\t\t\tcontinue;\n-\n-\t\tif(coin.nHeight != MEMPOOL_HEIGHT and not (chainActive[coin.nHeight] and chainActive[coin.nHeight]->phashBlock))\n-\t\t\tthrow JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n-\n-\t\tCBlockIndex *pindex = mapBlockIndex.find(pcoinsTip->GetBestBlock())->second;\n-\n-\t\tuint64_t nConfirmations = 0;\n-\t\tif ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n-\t\t\tnConfirmations = pindex->nHeight - coin.nHeight + 1;\n-\t\tif (nConfirmations < minConf)\n-\t\t\tcontinue;\n-\n-\t\tUniValue oScriptPubKey(UniValue::VOBJ);\n-\t\tScriptPubKeyToUniv(coin.out.scriptPubKey, oScriptPubKey, true);\n-\n-\t\tUniValue o(UniValue::VOBJ);\n-\t\to.push_back(Pair(\"confirmations\", nConfirmations));\n-\t\to.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n-\t\to.push_back(Pair(\"vout\", (int)outpoint.n));\n-\t\to.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n-\t\to.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n-\t\to.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n-\t\to.push_back(Pair(\"bestblockhash\", pindex->GetBlockHash().GetHex()));\n-\t\to.push_back(Pair(\"bestblockheight\", pindex->nHeight));\n-\t\to.push_back(Pair(\"bestblocktime\", pindex->GetBlockTime()));\n-\t\tif ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n-\t\t{\n-\t\t\to.push_back(Pair(\"blockhash\", chainActive[coin.nHeight]->GetBlockHash().GetHex()));\n-\t\t\to.push_back(Pair(\"blockheight\", (uint64_t)coin.nHeight));\n-\t\t\to.push_back(Pair(\"blocktime\", chainActive[coin.nHeight]->GetBlockTime()));\n-\t\t}\n-\t\tvObjects.push_back(o);\n-\t}\n+    for(auto outpoint: utxoSet)\n+    {\n+        Coin coin;\n+        if(minConf == 0)\n+        {\n+            LOCK(mempool.cs);\n+            CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n+            if(!(view.GetCoin(outpoint, coin)))\n+                continue;\n+        }\n+        else if(!(pcoinsTip->GetCoin(outpoint, coin)))\n+            continue;\n+\n+        if(coin.out.IsNull() || coin.out.scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        if(coin.nHeight != MEMPOOL_HEIGHT && !(chainActive[coin.nHeight] && chainActive[coin.nHeight]->phashBlock))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n+\n+        CBlockIndex *pindex = mapBlockIndex.find(pcoinsTip->GetBestBlock())->second;\n+\n+        uint64_t nConfirmations = 0;\n+        if ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n+            nConfirmations = pindex->nHeight - coin.nHeight + 1;\n+        if (nConfirmations < minConf)\n+            continue;\n+\n+        UniValue oScriptPubKey(UniValue::VOBJ);\n+        ScriptPubKeyToUniv(coin.out.scriptPubKey, oScriptPubKey, true);\n+\n+        UniValue o(UniValue::VOBJ);\n+        o.push_back(Pair(\"confirmations\", nConfirmations));\n+        o.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n+        o.push_back(Pair(\"vout\", (int)outpoint.n));\n+        o.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+        o.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n+        o.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+        o.push_back(Pair(\"bestblockhash\", pindex->GetBlockHash().GetHex()));\n+        o.push_back(Pair(\"bestblockheight\", pindex->nHeight));\n+        o.push_back(Pair(\"bestblocktime\", pindex->GetBlockTime()));\n+        if ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n+        {\n+            o.push_back(Pair(\"blockhash\", chainActive[coin.nHeight]->GetBlockHash().GetHex()));\n+            o.push_back(Pair(\"blockheight\", (uint64_t)coin.nHeight));\n+            o.push_back(Pair(\"blocktime\", chainActive[coin.nHeight]->GetBlockTime()));\n+        }\n+        vObjects.push_back(o);\n+    }\n }\n \n UniValue getutxoscriptindex(const JSONRPCRequest& request)\n {\n-    if (request.fHelp or request.params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n             \"getutxoscriptindex ( minconf [\\\"address\\\",...] ) \\n\"\n-\t\t\t\"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n-\t\t\t\"Note that passing minconf=0 will include the mempool.\\n\"\n-\t\t\t\"\\nTo use this function, you must start bitcoin with the -utxoscriptindex parameter.\\n\"\n+            \"\\nReturns a list of unspent transaction outputs by address (or script).\\n\"\n+            \"Note that passing minconf=0 will include the mempool.\\n\"\n+            \"\\nTo use this function, you must start bitcoin with the -utxoscriptindex parameter.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf          (numeric) Minimum confirmations\\n\"\n             \"2. \\\"addresses\\\"    (string) A json array of bitcoin addresses (or scripts)\\n\"\n-\t\t\t\"    [\\n\"\n+            \"    [\\n\"\n             \"      \\\"address\\\"   (string) bitcoin address (or script)\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n@@ -1195,41 +1195,41 @@ UniValue getutxoscriptindex(const JSONRPCRequest& request)\n \n     UniValue retVal;\n \n-\tif(not g_utxoscriptindex)\n-\t\tthrow JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -utxoscriptindex parameter.\");\n+    if(!g_utxoscriptindex)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"To use this function, you must start bitcoin with the -utxoscriptindex parameter.\");\n \n-\tRPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VARR});\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VARR});\n \n-\tint minConf = request.params[0].get_int();\n-\tUniValue inputs = request.params[1].get_array();\n+    int minConf = request.params[0].get_int();\n+    UniValue inputs = request.params[1].get_array();\n \n     if (minConf < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative minconf\");\n \n     UniValue vObjects(UniValue::VARR);\n \n-\tfor(unsigned int idx = 0; idx < inputs.size(); ++idx)\n-\t{\n-\t\tCScript script;\n-\t\tconst UniValue& input = inputs[idx];\n+    for(unsigned int idx = 0; idx < inputs.size(); ++idx)\n+    {\n+        CScript script;\n+        const UniValue& input = inputs[idx];\n         CTxDestination destination = DecodeDestination(input.get_str());\n-\t\tif(IsValidDestination(destination))\n-\t\t{\n-\t\t\tscript = GetScriptForDestination(destination);\n-\t\t}\n-\t\telse if(IsHex(input.get_str()))\n-\t\t{\n-\t\t\tstd::vector<unsigned char> data(ParseHex(input.get_str()));\n-\t\t\tscript = CScript(data.begin(), data.end());\n-\t\t}\n-\t\telse\n-\t\t\tthrow JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n-\n-\t\tSerializableUtxoSet utxoSet = g_utxoscriptindex->getUtxosForScript(script, minConf);\n-\t\tutxoSetToJson(utxoSet, vObjects, minConf);\n-\t}\n-\n-\treturn vObjects;\n+        if(IsValidDestination(destination))\n+        {\n+            script = GetScriptForDestination(destination);\n+        }\n+        else if(IsHex(input.get_str()))\n+        {\n+            std::vector<unsigned char> data(ParseHex(input.get_str()));\n+            script = CScript(data.begin(), data.end());\n+        }\n+        else\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script: \" + input.get_str());\n+\n+        SerializableUtxoSet utxoSet = g_utxoscriptindex->getUtxosForScript(script, minConf);\n+        utxoSetToJson(utxoSet, vObjects, minConf);\n+    }\n+\n+    return vObjects;\n }\n \n static UniValue verifychain(const JSONRPCRequest& request)"
      },
      {
        "sha": "b9ef990c8e9d1ded411ed2e512c7cd9d5c16c86b",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -38,8 +38,7 @@ struct TestSubscriber : public CValidationInterface {\n         m_expected_tip = block->GetHash();\n     }\n \n-    void BlockDisconnected( const std::shared_ptr<const CBlock>& block,\n-\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const std::shared_ptr<const CBlockUndo> &blockundo) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n "
      },
      {
        "sha": "9cad450d18e72561e206bc3cc6cbea54d91b035a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -1572,8 +1572,8 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n {\n     bool fClean = true;\n \n-\tif(not blockUndo)\n-\t\tblockUndo = std::make_shared<CBlockUndo>();\n+    if(!blockUndo)\n+        blockUndo = std::make_shared<CBlockUndo>();\n \n     if (!UndoReadFromDisk(*blockUndo, pindex)) {\n         error(\"DisconnectBlock(): failure reading undo data\");\n@@ -1971,8 +1971,8 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime2 - nTime1), nTimeForks * MICRO, nTimeForks * MILLI / nBlocksTotal);\n \n-\tif(not blockundo)\n-\t\tblockundo = std::make_shared<CBlockUndo>();\n+    if(!blockundo)\n+        blockundo = std::make_shared<CBlockUndo>();\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : nullptr);\n \n@@ -2180,9 +2180,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             if (!pcoinsTip->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n             if(g_utxoscriptindex)\n-\t\t\t\tif(not g_utxoscriptindex->Flush())\n-\t\t\t\t\treturn AbortNode(state, \"Failed to write to utxo database\");\n-\t\t\tnLastFlush = nNow;\n+                if(!(g_utxoscriptindex->Flush()))\n+                    return AbortNode(state, \"Failed to write to utxo database\");\n+            nLastFlush = nNow;\n             full_flush_completed = true;\n         }\n     }\n@@ -2303,7 +2303,7 @@ bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& cha\n     // Read block from disk.\n     std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n     std::shared_ptr<CBlockUndo> blockundo = std::make_shared<CBlockUndo>();\n-\tCBlock& block = *pblock;\n+    CBlock& block = *pblock;\n     if (!ReadBlockFromDisk(block, pindexDelete, chainparams.GetConsensus()))\n         return AbortNode(state, \"Failed to read block\");\n     // Apply the block atomically to the chain state.\n@@ -2353,7 +2353,7 @@ struct PerBlockConnectTrace {\n     CBlockIndex* pindex = nullptr;\n     std::shared_ptr<const CBlock> pblock;\n     std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n-\tstd::shared_ptr<const CBlockUndo> pblockundo;\n+    std::shared_ptr<const CBlockUndo> pblockundo;\n     PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n };\n /**\n@@ -2387,14 +2387,14 @@ class ConnectTrace {\n     }\n \n     void BlockConnected(CBlockIndex* pindex,\n-\t\t\t\t\t\tstd::shared_ptr<const CBlock> pblock,\n-\t\t\t\t\t\tstd::shared_ptr<CBlockUndo> pblockundo) {\n+                        std::shared_ptr<const CBlock> pblock,\n+                        std::shared_ptr<CBlockUndo> pblockundo) {\n         assert(!blocksConnected.back().pindex);\n         assert(pindex);\n         assert(pblock);\n         blocksConnected.back().pindex = pindex;\n         blocksConnected.back().pblock = std::move(pblock);\n-\t\tblocksConnected.back().pblockundo = std::move(pblockundo);\n+        blocksConnected.back().pblockundo = std::move(pblockundo);\n         blocksConnected.emplace_back();\n     }\n \n@@ -2443,7 +2443,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     int64_t nTime2 = GetTimeMicros(); nTimeReadFromDisk += nTime2 - nTime1;\n     int64_t nTime3;\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * MILLI, nTimeReadFromDisk * MICRO);\n-\tstd::shared_ptr<CBlockUndo> blockundo = std::make_shared<CBlockUndo>();\n+    std::shared_ptr<CBlockUndo> blockundo = std::make_shared<CBlockUndo>();\n     {\n         CCoinsViewCache view(pcoinsTip.get());\n         bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams, blockundo);"
      },
      {
        "sha": "48b55ad54530b1dd3892a07526b41a65cb5c53c1",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -22,12 +22,12 @@\n struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (\tconst std::shared_ptr<const CBlock> &,\n-\t\t\t\t\t\t\t\t\tconst CBlockIndex *pindex, \n-\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo, \n-\t\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef>&)> BlockConnected;\n-    boost::signals2::signal<void (\tconst std::shared_ptr<const CBlock> &,\n-\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &,\n+                                  const CBlockIndex *pindex,\n+                                  const std::shared_ptr<const CBlockUndo> &blockundo,\n+                                  const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &,\n+                                  const std::shared_ptr<const CBlockUndo> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionRemovedFromMempool;\n     boost::signals2::signal<void (const CBlockLocator &)> ChainStateFlushed;\n     boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n@@ -161,7 +161,7 @@ void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, c\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock,\n-\t\t\t\t\t\t\t\t\t const std::shared_ptr<const CBlockUndo> &blockundo) {\n+                                     const std::shared_ptr<const CBlockUndo> &blockundo) {\n     m_internals->m_schedulerClient.AddToProcessQueue([pblock, blockundo, this] {\n         m_internals->BlockDisconnected(pblock, blockundo);\n     });"
      },
      {
        "sha": "716bb752417898a0d6d38bab30f41aa8038cd95e",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -112,16 +112,16 @@ class CValidationInterface {\n      * Called on a background thread.\n      */\n     virtual void BlockConnected(const std::shared_ptr<const CBlock> &block,\n-\t\t\t\t\t\t\t\tconst CBlockIndex *pindex,\n-\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo,\n-\t\t\t\t\t\t\t\tconst std::vector<CTransactionRef> &txnConflicted) {}\n+                                const CBlockIndex *pindex,\n+                                const std::shared_ptr<const CBlockUndo> &blockundo,\n+                                const std::vector<CTransactionRef> &txnConflicted) {}\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n      * Called on a background thread.\n      */\n-    virtual void BlockDisconnected( const std::shared_ptr<const CBlock> &block,\n-\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) {}\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block,\n+                                   const std::shared_ptr<const CBlockUndo> &blockundo) {}\n     /**\n      * Notifies listeners of the new active block chain on-disk.\n      *\n@@ -187,11 +187,11 @@ class CMainSignals {\n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n     void BlockConnected(const std::shared_ptr<const CBlock> &,\n-\t\t\t\t\t\tconst CBlockIndex *pindex,\n-\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &,\n-\t\t\t\t\t\tconst std::shared_ptr<const std::vector<CTransactionRef>> &);\n-    void BlockDisconnected( const std::shared_ptr<const CBlock> &,\n-\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo);\n+                        const CBlockIndex *pindex,\n+                        const std::shared_ptr<const CBlockUndo> &,\n+                        const std::shared_ptr<const std::vector<CTransactionRef>> &);\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &,\n+                           const std::shared_ptr<const CBlockUndo> &blockundo);\n     void ChainStateFlushed(const CBlockLocator &);\n     void Broadcast(int64_t nBestBlockTime, CConnman* connman);\n     void BlockChecked(const CBlock&, const CValidationState&);"
      },
      {
        "sha": "890cda6b467dd0e25d1fb56b7ef0dceca7ba4b12",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -1185,7 +1185,8 @@ void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const\n     m_last_block_processed = pindex;\n }\n \n-void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n+void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock,\n+                                const std::shared_ptr<const CBlockUndo> &blockundo) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n "
      },
      {
        "sha": "d0b685ab4901cf7e5171872113d1e71c5d8e811e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -895,7 +895,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected( const std::shared_ptr<const CBlock>& pblock,\n-\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override;\n+                            const std::shared_ptr<const CBlockUndo> &blockundo) override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;"
      },
      {
        "sha": "e08164eb2dc1553b7119dfcb42d298fb2d0333c6",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -190,8 +190,7 @@ void CZMQNotificationInterface::BlockConnected( const std::shared_ptr<const CBlo\n     }\n }\n \n-void CZMQNotificationInterface::BlockDisconnected(  const std::shared_ptr<const CBlock>& pblock,\n-\t\t\t\t\t\t\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo)\n+void CZMQNotificationInterface::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const std::shared_ptr<const CBlockUndo> &blockundo)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction removed in block disconnection"
      },
      {
        "sha": "197c9c5f7e4ca67870ab2bf8351038327b043ce7",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "patch": "@@ -29,8 +29,7 @@ class CZMQNotificationInterface final : public CValidationInterface\n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& vtxConflicted) override;\n-    void BlockDisconnected( const std::shared_ptr<const CBlock>& pblock,\n-\t\t\t\t\t\t\tconst std::shared_ptr<const CBlockUndo> &blockundo) override;\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const std::shared_ptr<const CBlockUndo> &blockundo) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n \n private:"
      }
    ]
  },
  {
    "sha": "34c8e8e7cff4fa79264c510655f2320ac80e1513",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGM4ZThlN2NmZjRmYTc5MjY0YzUxMDY1NWYyMzIwYWM4MGUxNTEz",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-24T17:34:56Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-11-13T18:49:16Z"
      },
      "message": "utxoscriptindex: rework - push(Pair) replaced with pushKV",
      "tree": {
        "sha": "92fbb337ec0889fb4b3d2987ff921e665bdf0ba1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92fbb337ec0889fb4b3d2987ff921e665bdf0ba1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34c8e8e7cff4fa79264c510655f2320ac80e1513",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c8e8e7cff4fa79264c510655f2320ac80e1513",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34c8e8e7cff4fa79264c510655f2320ac80e1513",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c8e8e7cff4fa79264c510655f2320ac80e1513/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4eb291a752613a1c0c26ccd5a5bfa59e80d5da"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "fb4fa4955edd5b1025ce21014bc25b7e286a942e",
        "filename": "src/index/utxoscriptindex.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/index/utxoscriptindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/index/utxoscriptindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/utxoscriptindex.cpp?ref=34c8e8e7cff4fa79264c510655f2320ac80e1513",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <index/utxoscriptindex.h>\n-#include <util.h>\n #include <script/standard.h>\n #include <pubkey.h>\n #include <txmempool.h>"
      },
      {
        "sha": "8f9ac3257e71f070da5289aaf378289d32117b82",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=34c8e8e7cff4fa79264c510655f2320ac80e1513",
        "patch": "@@ -1126,20 +1126,20 @@ void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsig\n         ScriptPubKeyToUniv(coin.out.scriptPubKey, oScriptPubKey, true);\n \n         UniValue o(UniValue::VOBJ);\n-        o.push_back(Pair(\"confirmations\", nConfirmations));\n-        o.push_back(Pair(\"txid\", outpoint.hash.GetHex()));\n-        o.push_back(Pair(\"vout\", (int)outpoint.n));\n-        o.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n-        o.push_back(Pair(\"scriptPubKey\", oScriptPubKey));\n-        o.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n-        o.push_back(Pair(\"bestblockhash\", pindex->GetBlockHash().GetHex()));\n-        o.push_back(Pair(\"bestblockheight\", pindex->nHeight));\n-        o.push_back(Pair(\"bestblocktime\", pindex->GetBlockTime()));\n+        o.pushKV(\"confirmations\", nConfirmations);\n+        o.pushKV(\"txid\", outpoint.hash.GetHex());\n+        o.pushKV(\"vout\", (int)outpoint.n);\n+        o.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n+        o.pushKV(\"scriptPubKey\", oScriptPubKey);\n+        o.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n+        o.pushKV(\"bestblockhash\", pindex->GetBlockHash().GetHex());\n+        o.pushKV(\"bestblockheight\", pindex->nHeight);\n+        o.pushKV(\"bestblocktime\", pindex->GetBlockTime());\n         if ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n         {\n-            o.push_back(Pair(\"blockhash\", chainActive[coin.nHeight]->GetBlockHash().GetHex()));\n-            o.push_back(Pair(\"blockheight\", (uint64_t)coin.nHeight));\n-            o.push_back(Pair(\"blocktime\", chainActive[coin.nHeight]->GetBlockTime()));\n+            o.pushKV(\"blockhash\", chainActive[coin.nHeight]->GetBlockHash().GetHex());\n+            o.pushKV(\"blockheight\", (uint64_t)coin.nHeight);\n+            o.pushKV(\"blocktime\", chainActive[coin.nHeight]->GetBlockTime());\n         }\n         vObjects.push_back(o);\n     }"
      },
      {
        "sha": "6414bacc9018e7aca0a486c35084ee317df08bcd",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=34c8e8e7cff4fa79264c510655f2320ac80e1513",
        "patch": "@@ -9,8 +9,7 @@\n #include <scheduler.h>\n #include <txmempool.h>\n #include <util/system.h>\n-#include <undo.h> \n-#include <util.h>\n+#include <undo.h>\n #include <validation.h>\n \n #include <list>"
      },
      {
        "sha": "90d1b88efdfe72730284e84bfb0c9c00ad4dcd74",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c8e8e7cff4fa79264c510655f2320ac80e1513/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=34c8e8e7cff4fa79264c510655f2320ac80e1513",
        "patch": "@@ -1162,7 +1162,7 @@ void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n     }\n }\n \n-void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::shared_ptr<const CBlockUndo> &blockundo, const std::vector<CTransactionRef>& vtxConflicted) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n     // TODO: Temporarily ensure that mempool removals are notified before"
      },
      {
        "sha": "5a84a6510519743f3fb9f06ced2744bcff938008",
        "filename": "test/functional/rpc_utxoindex.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c8e8e7cff4fa79264c510655f2320ac80e1513/test/functional/rpc_utxoindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c8e8e7cff4fa79264c510655f2320ac80e1513/test/functional/rpc_utxoindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_utxoindex.py?ref=34c8e8e7cff4fa79264c510655f2320ac80e1513",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[\"-utxoscriptindex\"], [], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def check_utxoscriptindex(self, node_id, minConf, addr, expected_txid):\n         txouts = self.nodes[node_id].getutxoscriptindex(minConf, (addr,))\n         txid = txouts[0][\"txid\"]\n@@ -31,7 +34,7 @@ def run_test(self):\n \n         # Check that there's no UTXO on any of the nodes\n         for node in self.nodes:\n-            assert_equal(len(node.listunspent()), 0)\n+            assert_equal(node.listunspent(), [])\n \n         # mining\n         self.nodes[0].generate(101)"
      }
    ]
  }
]