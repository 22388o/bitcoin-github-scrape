[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628167453",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-628167453",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 628167453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyODE2NzQ1Mw==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-13T18:27:48Z",
    "updated_at": "2020-05-13T18:27:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since this PR touches critical parts of the codebase, I think it deserves a thorough review. I'm going to go through the original PR (#16323) commit by commit and write down my notes here: https://docs.google.com/document/d/1tduRmqcvhdl3FRkmdnj0f3_fknXuIZ57R8zdCGHNt6k/edit?usp=sharing",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628167453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630453121",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-630453121",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 630453121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ1MzEyMQ==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T21:49:35Z",
    "updated_at": "2020-05-18T21:49:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased on newer #17479. `git-bisect`ing the `validationinterface_tests/unregister_all_during_call` says:\r\n\r\n```\r\n194935b1a2968b594a42cb880e30701dd2e2bc7c is the first bad commit\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630453121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630470943",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-630470943",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 630470943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ3MDk0Mw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T22:35:42Z",
    "updated_at": "2020-05-18T22:35:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Rebased on newer #17479. `git-bisect`ing the `validationinterface_tests/unregister_all_during_call` says:\r\n> \r\n> ```\r\n> 194935b1a2968b594a42cb880e30701dd2e2bc7c is the first bad commit\r\n> ```\r\n\r\nTest was relying on the fact that BlockChecked as synchronous and that commit made it asynchronous. You can switch it to a different synchronous method:\r\n\r\n```diff\r\n--- a/src/test/validationinterface_tests.cpp\r\n+++ b/src/test/validationinterface_tests.cpp\r\n@@ -57,15 +57,13 @@ public:\r\n     {\r\n         if (m_on_destroy) m_on_destroy();\r\n     }\r\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override\r\n+    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) override\r\n     {\r\n         if (m_on_call) m_on_call();\r\n     }\r\n     static void Call()\r\n     {\r\n-        std::shared_ptr<const CBlock> block = std::make_shared<CBlock>();\r\n-        BlockValidationState state;\r\n-        GetMainSignals().BlockChecked(block, state);\r\n+        GetMainSignals().NewPoWValidBlock(nullptr, std::make_shared<CBlock>());\r\n     }\r\n     std::function<void()> m_on_call;\r\n     std::function<void()> m_on_destroy;\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630470943/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630493441",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-630493441",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 630493441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ5MzQ0MQ==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T23:50:26Z",
    "updated_at": "2020-05-18T23:50:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Now `p2p_unrequested_blocks.py` is failing. `git-bisect` says: \r\n```\r\n1d9f66ea37ac6f22f26013cd57ed75fc04a9481f is the first bad commit\r\n```\r\n-----\r\n\r\nAs noted in the Google Doc:\r\n\r\n> Up to this point, it seems that splitting this commit into:\r\n> \r\n> 1. Changing the call semantics of `ProcessNewBlock`\r\n> 2. Changing the return type to a `std::future`\r\n> \r\n> Might make it easier to review.\r\n\r\nSo I plan to split it up and track it down.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630493441/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631038490",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-631038490",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 631038490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTAzODQ5MA==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-19T19:37:54Z",
    "updated_at": "2020-05-19T19:37:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Split up the first commit into:\r\n\r\n1. cb178903b0752de3edfd87f6013c2b4de41b6e13 which changes the call semantics of `ProcessNewBlock` and deals with the fallout of that\r\n2. 7532cf6c56d015e8bae646138d71df825d2684ab which changes the return from a bool to a future of a bool and deals with the fallout of that\r\n3. 2dcdb537b5c1dce60db217238c5e75dae602e755 which contains changes that are non-obvious to me to be correct\r\n\r\n-----\r\n\r\nI also botched the `git-bisect` before (didn't call `make` in a `bash -c`), new output:\r\n```\r\n$ git bisect run bash -c \"make -j50 && python3 test/functional/p2p_unrequested_blocks.py\"\r\n\r\n...\r\n\r\n7c77827558715180594f5881b6d02982504c4fad is the first bad commit\r\ncommit 7c77827558715180594f5881b6d02982504c4fad\r\nAuthor: Matt Corallo <git@bluematt.me>\r\nDate:   Mon Jun 17 13:13:36 2019 -0400\r\n\r\n    Move net_processing's ProcessNewBlock calls to resolve async.\r\n\r\n    Essentially, our goal is to not process anything for the given peer\r\n    until the block finishes processing (emulating the previous behavior)\r\n    without actually blocking the ProcessMessages loops. Obviously, in\r\n    most cases, we'll just go on to the next peer and immediately hit a\r\n    cs_main lock, blocking us anyway, but this we can slowly improve\r\n    that state over time by moving things from CNodeState to CPeerState.\r\n\r\n src/net_processing.cpp | 79 ++++++++++++++++++++++++++++++++++++++++++--------\r\n 1 file changed, 67 insertions(+), 12 deletions(-)\r\nbisect run success\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631038490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632370917",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-632370917",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 632370917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjM3MDkxNw==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-21T22:06:45Z",
    "updated_at": "2020-05-21T22:06:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Got the unit tests and functional tests to pass!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632370917/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/823380098",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-823380098",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 823380098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMzM4MDA5OA==",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?u=62e3204f6586795420395a7059ec7dc7c4a40c7d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-20T15:45:21Z",
    "updated_at": "2021-04-20T15:45:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not planning to work on this anytime soon unfortunately.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/823380098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/823421533",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#issuecomment-823421533",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18963",
    "id": 823421533,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMzQyMTUzMw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-20T16:30:40Z",
    "updated_at": "2021-04-20T16:30:40Z",
    "author_association": "MEMBER",
    "body": "![image](https://user-images.githubusercontent.com/1063656/115432151-f68a7900-a1fd-11eb-9a0e-9a29702d40b4.png)\r\n\r\n\ud83d\ude41 \r\n\r\nLet me know if you pick this up again!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/823421533/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429490419",
    "pull_request_review_id": 417226161,
    "id": 429490419,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5MDQxOQ==",
    "diff_hunk": "@@ -237,6 +248,30 @@ namespace {\n } // namespace\n \n namespace {\n+/**\n+ * Maintain state about nodes, protected by our own lock. Historically we put all\n+ * peer tracking state in CNodeState, however this results in significant cs_main\n+ * contention. Thus, new state tracking should go here, and we should eventually\n+ * move most (non-validation-specific) state here.",
    "path": "src/net_processing.cpp",
    "position": 36,
    "original_position": 36,
    "commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "original_commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you should define more difference between validation-state and non-validation-state. Right now peer tracking state is spread among multiple class like `CNode` with `TxRelay` or `CNodeState` and now `CPeerState`. We should have a clear idea of _what_ should go _where_, according to which thread uses it. You should also explain how `CPeerState` aims to reduce `cs_main` contention with regards to the new threading model.",
    "created_at": "2020-05-22T23:42:31Z",
    "updated_at": "2020-05-22T23:54:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429490419",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429490419"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429490419"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429490419/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 255,
    "original_line": 255,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491029",
    "pull_request_review_id": 417226161,
    "id": 429491029,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5MTAyOQ==",
    "diff_hunk": "@@ -237,6 +248,30 @@ namespace {\n } // namespace\n \n namespace {\n+/**\n+ * Maintain state about nodes, protected by our own lock. Historically we put all\n+ * peer tracking state in CNodeState, however this results in significant cs_main\n+ * contention. Thus, new state tracking should go here, and we should eventually\n+ * move most (non-validation-specific) state here.\n+ */\n+struct CPeerState {\n+    //! If this peer generated some headers for us to add, we store the resulting\n+    //! future here and wait for it to complete before we process more data from this\n+    //! peer.\n+    std::future<bool> pending_block_processing;\n+    //! The hash of the block which is pending download.\n+    uint256 pending_block_hash;\n+    //! Once we've finished processing a block from this peer, we must still wait for\n+    //! any related callbacks to fire (to ensure, specifically, that rejects go out",
    "path": "src/net_processing.cpp",
    "position": 46,
    "original_position": 46,
    "commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "original_commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is reject here making reference to reject messages ? I think it doesn't make sense anymore post-#15437 and post-#17004. Also you may lay out the expected callback sequence (as we do for `TransactionRemovedFromMempool` in `src/validationinterface.h`). ",
    "created_at": "2020-05-22T23:46:53Z",
    "updated_at": "2020-05-22T23:54:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491029",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491029"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491029"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 265,
    "original_line": 265,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491095",
    "pull_request_review_id": 417226161,
    "id": 429491095,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5MTA5NQ==",
    "diff_hunk": "@@ -1973,6 +2047,23 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ *  A block has been processed. Handle potential peer punishment and housekeeping.",
    "path": "src/net_processing.cpp",
    "position": 189,
    "original_position": 189,
    "commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "original_commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please define more \"housekeeping\".",
    "created_at": "2020-05-22T23:47:32Z",
    "updated_at": "2020-05-22T23:54:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491095",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491095"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491095"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 2051,
    "original_line": 2051,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491238",
    "pull_request_review_id": 417226161,
    "id": 429491238,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5MTIzOA==",
    "diff_hunk": "@@ -3082,30 +3167,22 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 // updated, etc.\n                 MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n-                // mapBlockSource is used for potentially punishing peers and\n-                // updating which peers send us compact blocks, so the race\n-                // between here and cs_main in ProcessNewBlock is fine.\n-                // BIP 152 permits peers to relay compact blocks after validating\n-                // the header only; we should not punish peers if the block turns\n-                // out to be invalid.\n-                mapBlockSource.emplace(resp.blockhash, std::make_pair(pfrom->GetId(), false));\n             }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n-            bool fNewBlock = false;\n+            // BIP 152 permits peers to relay compact blocks after validating",
    "path": "src/net_processing.cpp",
    "position": 283,
    "original_position": 283,
    "commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "original_commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure that BIP152 low-bandwidth authorizes invalid header propagation, maybe precise.",
    "created_at": "2020-05-22T23:48:14Z",
    "updated_at": "2020-05-22T23:54:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491238",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491238"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491238"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3173,
    "original_line": 3173,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491376",
    "pull_request_review_id": 417226161,
    "id": 429491376,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5MTM3Ng==",
    "diff_hunk": "@@ -3729,23 +3729,10 @@ static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChai\n     return blockPos;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n+bool CChainState::ShouldMaybeWrite(CBlockIndex* pindex, bool fRequested)",
    "path": "src/validation.cpp",
    "position": 15,
    "original_position": 15,
    "commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "original_commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please can you comment on what conditional write is laying on.",
    "created_at": "2020-05-22T23:49:32Z",
    "updated_at": "2020-05-22T23:54:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491376",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491376"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491376"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3732,
    "original_line": 3732,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491503",
    "pull_request_review_id": 417226161,
    "id": 429491503,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ5MTUwMw==",
    "diff_hunk": "@@ -3812,39 +3844,135 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+void CChainState::AwaitBlockValidationParked()\n+{\n+    std::unique_lock<RecursiveMutex> lock(m_cs_block_validation_queue);\n+    m_cv_block_validation_parked.wait(lock, [this] { return m_block_validation_parked; });\n+}\n+\n+void CChainState::ProcessBlockValidationQueue()\n+{\n+    while (true) {\n+        std::shared_ptr<const CBlock> pblock;\n+        bool fForceProcessing;\n+        std::promise<bool> result_promise;\n+        {\n+            std::unique_lock<RecursiveMutex> lock(m_cs_block_validation_queue);\n+            if (m_block_validation_queue.empty()) {\n+                m_block_validation_parked = true;\n+                m_cv_block_validation_parked.notify_all();\n+                m_cv_block_validation_queue.wait_for(lock, std::chrono::milliseconds(100));\n+                m_block_validation_parked = false;\n+            }\n+            if (ShutdownRequested())\n+                break;\n+            boost::this_thread::interruption_point();\n+            if (m_block_validation_queue.empty()) {\n+                continue;\n+            }\n+\n+            std::tuple<std::shared_ptr<const CBlock>, bool, std::promise<bool>>& tuple = m_block_validation_queue.front();\n+            pblock = std::move(std::get<0>(tuple));\n+            fForceProcessing = std::get<1>(tuple);\n+            result_promise = std::move(std::get<2>(tuple));\n+            m_block_validation_queue.pop_front();\n+        }\n+\n+        CChainParams chainparams = Params();\n+        {\n+            LOCK(cs_main);\n+\n+            CBlockIndex* pindex = LookupBlockIndex(pblock->GetHash());\n+            assert(pindex);\n+\n+            // Check that we still want this block\n+            if (!ShouldMaybeWrite(pindex, fForceProcessing)) {\n+                result_promise.set_value(false);\n+                continue;\n+            }\n+\n+            // We already verified the block in ProcessNewBlock, so no need to check merkle roots here again\n+\n+            // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n+            // (but if it does not build on our best tip, let the SendMessages loop relay it)\n+            if (!IsInitialBlockDownload() && m_chain.Tip() == pindex->pprev)\n+                GetMainSignals().NewPoWValidBlock(pindex, pblock);\n+\n+            BlockValidationState state;\n+            try {\n+                FlatFilePos blockPos = SaveBlockToDisk(*pblock, pindex->nHeight, chainparams, nullptr);\n+                if (blockPos.IsNull()) {\n+                    error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__).c_str());\n+                    result_promise.set_value(false);\n+                    continue;\n+                }\n+                ReceivedBlockTransactions(*pblock, pindex, blockPos, chainparams.GetConsensus());\n+            } catch (const std::runtime_error& e) {\n+                AbortNode(state, std::string(\"System error: \") + e.what());\n+            }\n+\n+            FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n+\n+            CheckBlockIndex(chainparams.GetConsensus());\n+\n+            if (state.IsError()) {\n+                result_promise.set_value(false);\n+                continue;\n+            }\n+        }\n+\n+        NotifyHeaderTip();\n+\n+        BlockValidationState state; // Only used to report errors, not invalidity - ignore it",
    "path": "src/validation.cpp",
    "position": 195,
    "original_position": 195,
    "commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "original_commit_id": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You should point where errors are distinguished from invalidity.",
    "created_at": "2020-05-22T23:50:28Z",
    "updated_at": "2020-05-22T23:54:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491503",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491503"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18963#discussion_r429491503"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18963"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429491503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3926,
    "original_line": 3926,
    "side": "RIGHT"
  }
]