[
  {
    "sha": "45bedbd96a2c736c525dd0d08b5f2b44a1bab886",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWJlZGJkOTZhMmM3MzZjNTI1ZGQwZDA4YjVmMmI0NGExYmFiODg2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-12T00:10:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-14T13:02:23Z"
      },
      "message": "[tests] Remove unnecessary cs_mains in denialofservice_tests\n\n9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af resolved some lock\ninversion warnings in denialofservice_tests, but left in a number\nof cs_main locks that are unnecessary (introducing lock inversion\nwarnings in future changes).",
      "tree": {
        "sha": "80ad0b96cd3f9197ca32bb633e19290a442f2781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80ad0b96cd3f9197ca32bb633e19290a442f2781"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45bedbd96a2c736c525dd0d08b5f2b44a1bab886",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45bedbd96a2c736c525dd0d08b5f2b44a1bab886",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45bedbd96a2c736c525dd0d08b5f2b44a1bab886",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45bedbd96a2c736c525dd0d08b5f2b44a1bab886/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9c504cbc4ba45a32abb86b67a277b75a17f13a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c504cbc4ba45a32abb86b67a277b75a17f13a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c504cbc4ba45a32abb86b67a277b75a17f13a4"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "6112b6394776e46ff8481b9beb6d905926be276c",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45bedbd96a2c736c525dd0d08b5f2b44a1bab886/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45bedbd96a2c736c525dd0d08b5f2b44a1bab886/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=45bedbd96a2c736c525dd0d08b5f2b44a1bab886",
        "patch": "@@ -98,11 +98,11 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Test starts here\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n         dummyNode1.vSendMsg.clear();\n     }\n@@ -111,17 +111,17 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // Wait 21 minutes\n     SetMockTime(nStartTime+21*60);\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n     }\n     // Wait 3 more minutes\n     SetMockTime(nStartTime+24*60);\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in disconnect\n     }\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(banman->IsBanned(addr1));\n@@ -252,7 +252,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n     {\n-        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr2)); // 2 not banned yet...\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n     {\n-        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(banman->IsBanned(addr2));\n@@ -291,7 +291,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 100);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr1));\n@@ -300,7 +300,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 10);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr1));\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 1);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(banman->IsBanned(addr1));\n@@ -341,7 +341,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n         Misbehaving(dummyNode.GetId(), 100);\n     }\n     {\n-        LOCK2(cs_main, dummyNode.cs_sendProcessing);\n+        LOCK(dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n     }\n     BOOST_CHECK(banman->IsBanned(addr));"
      }
    ]
  },
  {
    "sha": "3446fd29867cb65ecb7d836ed828ec335be3895c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDQ2ZmQyOTg2N2NiNjVlY2I3ZDgzNmVkODI4ZWMzMzViZTM4OTVj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-14T19:47:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-14T13:02:23Z"
      },
      "message": "[net processing] Deduplicate post-block-processing code\n\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "64abecee883ccac83fc502be53c41180b87d0047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64abecee883ccac83fc502be53c41180b87d0047"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3446fd29867cb65ecb7d836ed828ec335be3895c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3446fd29867cb65ecb7d836ed828ec335be3895c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3446fd29867cb65ecb7d836ed828ec335be3895c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3446fd29867cb65ecb7d836ed828ec335be3895c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45bedbd96a2c736c525dd0d08b5f2b44a1bab886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45bedbd96a2c736c525dd0d08b5f2b44a1bab886",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45bedbd96a2c736c525dd0d08b5f2b44a1bab886"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0b1df9ee11278c49c1a1de3ffbc2ec1d750d1f5b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3446fd29867cb65ecb7d836ed828ec335be3895c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3446fd29867cb65ecb7d836ed828ec335be3895c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3446fd29867cb65ecb7d836ed828ec335be3895c",
        "patch": "@@ -1973,6 +1973,19 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n     }\n }\n \n+/**\n+ *  A block has been processed. Do housekeeping.\n+ */\n+void static BlockProcessed(CNode* pfrom, std::shared_ptr<CBlock> pblock, bool new_block)\n+{\n+    if (new_block) {\n+        pfrom->nLastBlockTime = GetTime();\n+    } else {\n+        LOCK(cs_main);\n+        ::mapBlockSource.erase(pblock->GetHash());\n+    }\n+}\n+\n /**\n  * Validation logic for compact filters request handling.\n  *\n@@ -3010,12 +3023,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n             ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom->nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            BlockProcessed(pfrom, pblock, fNewBlock);\n+\n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n                 // Clear download state for this block, which is in\n@@ -3100,12 +3109,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n             ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n-                pfrom->nLastBlockTime = GetTime();\n-            } else {\n-                LOCK(cs_main);\n-                mapBlockSource.erase(pblock->GetHash());\n-            }\n+            BlockProcessed(pfrom, pblock, fNewBlock);\n         }\n         return true;\n     }\n@@ -3163,12 +3167,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         }\n         bool fNewBlock = false;\n         ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n-        if (fNewBlock) {\n-            pfrom->nLastBlockTime = GetTime();\n-        } else {\n-            LOCK(cs_main);\n-            mapBlockSource.erase(pblock->GetHash());\n-        }\n+        BlockProcessed(pfrom, pblock, fNewBlock);\n         return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjBlZWNjMmJkNjc0YzdjMGI0NDAwNjMwZGZiZDQwZjFmNjI0M2Ew",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T18:26:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-14T20:18:16Z"
      },
      "message": "[validation] Add BlockValidationState inout param to ProcessNewBlock\n\nThis is a pure refactor commit.\n\nThis commit enables the caller of ProcessNewBlock to access the final\nBlockValidationState passed around between CheckBlock(), AcceptBlock(),\nand BlockChecked() inside ProcessNewBlock(). This is useful because in a\nfuture commit, we will move the BlockChecked() call out of\nProcessNewBlock(), and BlockChecked() still needs to be able to access\nthe BlockValidationState.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "000b3bd2c30a492c71f54963410680758ee30372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/000b3bd2c30a492c71f54963410680758ee30372"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3446fd29867cb65ecb7d836ed828ec335be3895c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3446fd29867cb65ecb7d836ed828ec335be3895c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3446fd29867cb65ecb7d836ed828ec335be3895c"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 46,
      "deletions": 29
    },
    "files": [
      {
        "sha": "bd30cd091282c7245bd7626a005a0f7b2e44358e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -3022,7 +3022,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            BlockValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n             BlockProcessed(pfrom, pblock, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n@@ -3108,7 +3109,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            BlockValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n             BlockProcessed(pfrom, pblock, fNewBlock);\n         }\n         return true;\n@@ -3166,7 +3168,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        BlockValidationState dos_state;\n+        ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n         BlockProcessed(pfrom, pblock, fNewBlock);\n         return true;\n     }"
      },
      {
        "sha": "4a9dee1aa986e81b3dfe975d59f3175a9cdf24e5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -124,7 +124,8 @@ static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extr\n     }\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    if (!ProcessNewBlock(chainparams, shared_pblock, true, nullptr))\n+    BlockValidationState state;\n+    if (!ProcessNewBlock(chainparams, shared_pblock, state, true, nullptr))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n \n     block_hash = block.GetHash();\n@@ -944,7 +945,8 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    BlockValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";"
      },
      {
        "sha": "9d5de9b1c3ce43bc88b57399df7f6f5db73618de",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -171,7 +171,8 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     uint256 chainA_last_header = last_header;\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n     }\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n@@ -189,7 +190,8 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     uint256 chainB_last_header = last_header;\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n     }\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n@@ -218,10 +220,11 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     }\n \n     // Reorg back to chain A.\n-     for (size_t i = 2; i < 4; i++) {\n-         const auto& block = chainA[i];\n-         BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n-     }\n+    for (size_t i = 2; i < 4; i++) {\n+        const auto& block = chainA[i];\n+        BlockValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+    }\n \n      // Check that chain A and B blocks can be retrieved.\n      chainA_last_header = last_header;"
      },
      {
        "sha": "6f600ea8a8718f8091c928151bf3c1f9c9afb9a6",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -7,6 +7,7 @@\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <script/standard.h>\n@@ -253,7 +254,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             pblock->nNonce = blockinfo[i].nonce;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, nullptr));\n+        BlockValidationState dos_state;\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "d2d66d25d7f082bbdeba908899afc3db3dc9eea1",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chainparams.h>\n #include <consensus/merkle.h>\n+#include <consensus/validation.h>\n #include <key_io.h>\n #include <miner.h>\n #include <node/context.h>\n@@ -31,7 +32,8 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n         assert(block->nNonce);\n     }\n \n-    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n+    BlockValidationState dos_state;\n+    bool processed{ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n     assert(processed);\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};"
      },
      {
        "sha": "e1890daf4e033fb38202327387040790548e42ee",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -228,7 +228,8 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n+    BlockValidationState dos_state;\n+    ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "d70ec6f0fa9c14c2d9b153fe8bc3e15d96e0fcab",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -166,7 +166,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\n+    BlockValidationState dos_state;\n+    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true, &ignored));\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -188,13 +189,15 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n-                ProcessNewBlock(Params(), block, true, &ignored);\n+                BlockValidationState dos_state;\n+                ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n-                    bool processed = ProcessNewBlock(Params(), block, true, &ignored);\n+                    BlockValidationState dos_state;\n+                    bool processed = ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n                     assert(processed);\n                 }\n             }\n@@ -233,7 +236,8 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n {\n     bool ignored;\n     auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n-        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        BlockValidationState dos_state;\n+        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n     };\n \n     // Process all mined blocks"
      },
      {
        "sha": "4f427ca1f45cdff68b848fc1a1131a34d9aa8355",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -3812,29 +3812,28 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        BlockValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n+            GetMainSignals().BlockChecked(*pblock, dos_state);\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n         }\n     }\n "
      },
      {
        "sha": "1bd6b5bf5fe0c22e713e098c0a63b20d33d05b8b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "patch": "@@ -157,12 +157,13 @@ extern uint64_t nPruneTarget;\n  * May not be called in a\n  * validationinterface callback.\n  *\n- * @param[in]   pblock  The block we want to process.\n- * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n- * @returns     If the block was processed, independently of block validity\n+ * @param[in]   pblock            The block we want to process.\n+ * @param[out]  state             Currently unused.\n+ * @param[in]   fForceProcessing  Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n+ * @param[out]  fNewBlock         A boolean which is set to indicate if the block was first received via this call\n+ * @returns     bool              If the block was processed, independently of block validity\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "a85e8b7393b37e74ddd7ce0e5639bc1944f756f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODVlOGI3MzkzYjM3ZTc0ZGRkN2NlMGU1NjM5YmMxOTQ0Zjc1NmY1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:51:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-14T20:18:19Z"
      },
      "message": "[net processing] Make BlockChecked a standalone, static function\n\nThis is a pure refactor commit.\n\nSince BlockChecked() doesn't actually depend on all of\nPeerLogicValidation but just PeerLogicValidation's CConnman, we can make\na standalone, static function that simply has an extra CConnman\nparameter and have the non-static version call the static one.\n\nThis also means that, in a future commit, when we move the\nBlockChecked() call out of ProcessNewBlock(), the caller of\nProcessNewBlock() can call BlockChecked() directly even if they only\nhave a CConnman.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "2bf67fb4946d0c1843f0f889d0d2f9533b9c8625",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bf67fb4946d0c1843f0f889d0d2f9533b9c8625"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db0eecc2bd674c7c0b4400630dfbd40f1f6243a0"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d8b0bf0b6382d0a0534865569a0545e4ffe65023",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a85e8b7393b37e74ddd7ce0e5639bc1944f756f5",
        "patch": "@@ -1332,8 +1332,11 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n /**\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n+ * Called both in case of cursory DoS checks failing (implying the peer is likely\n+ * sending us bogus data) and after full validation of the block fails (which may\n+ * be OK if it was sent over compact blocks).\n  */\n-void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+static void BlockChecked(const CBlock& block, const BlockValidationState& state, CConnman* connman) {\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());\n@@ -1363,6 +1366,10 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidatio\n         mapBlockSource.erase(it);\n }\n \n+void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+    ::BlockChecked(block, state, connman);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      }
    ]
  },
  {
    "sha": "8fc192c3ecb40695ebddbe736684b152081ea4df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmMxOTJjM2VjYjQwNjk1ZWJkZGJlNzM2Njg0YjE1MjA4MWVhNGRm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:56:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-14T20:18:19Z"
      },
      "message": "[validation] Return the AcceptBlock BlockValidationState directly in ProcessNewBlock\n\nNet processing now passes a BlockValidationState object into\nProcessNewBlock(). If CheckBlock() or AcceptBlock() fails, then PNB\nreturns to net processing without calling the (asynchronous)\nBlockChecked Validation Interface method. net processing can use the\ninvalid BlockValidationState returned to punish peers.\n\nCheckBlock() and AcceptBlock() represent the DoS checks on a block (ie\nPoW and malleability). Net processing wants to know about those failed\nchecks immediately and shouldn't have to wait on a callback. Other\nvalidation interface clients don't care about net processing submitting\nbogus malleated blocks to validation, so they don't need to be notified\nof BlockChecked.\n\nFurthermore, if PNB returns a valid BlockValidationState, we never need\nto try to process (non-malleated) copies of the block from other peers.\nThat makes it much easier to move the best chain activation logic to a\nbackground thread in future work.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "7cbc0b0c9ae2ce08657025d12c5613f8b58978a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cbc0b0c9ae2ce08657025d12c5613f8b58978a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fc192c3ecb40695ebddbe736684b152081ea4df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc192c3ecb40695ebddbe736684b152081ea4df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc192c3ecb40695ebddbe736684b152081ea4df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc192c3ecb40695ebddbe736684b152081ea4df/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a85e8b7393b37e74ddd7ce0e5639bc1944f756f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a85e8b7393b37e74ddd7ce0e5639bc1944f756f5"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 36,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d8eecd7ef52e648eeb12f0c6a6812b4b5302094d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc192c3ecb40695ebddbe736684b152081ea4df/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc192c3ecb40695ebddbe736684b152081ea4df/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8fc192c3ecb40695ebddbe736684b152081ea4df",
        "patch": "@@ -1981,15 +1981,21 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n }\n \n /**\n- *  A block has been processed. Do housekeeping.\n+ *  A block has been processed. Handle potential peer punishment and housekeeping.\n  */\n-void static BlockProcessed(CNode* pfrom, std::shared_ptr<CBlock> pblock, bool new_block)\n+void static BlockProcessed(CNode* pfrom, CConnman* connman, std::shared_ptr<CBlock> pblock, BlockValidationState& state, bool new_block)\n {\n-    if (new_block) {\n-        pfrom->nLastBlockTime = GetTime();\n-    } else {\n+    if (!state.IsValid()) {\n+        // The block failed anti-dos / mutation checks. Call BlockChecked() callback here.\n+        // This clears the block from mapBlockSource.\n+        BlockChecked(*pblock, state, connman);\n+    } else if (!new_block) {\n+        // Block was valid but we've seen it before. Clear it from mapBlockSource.\n         LOCK(cs_main);\n         ::mapBlockSource.erase(pblock->GetHash());\n+    } else {\n+        // Block is valid and we haven't seen it before. set nLastBlockTime for this peer.\n+        pfrom->nLastBlockTime = GetTime();\n     }\n }\n \n@@ -3031,7 +3037,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // reconstructed compact blocks as having been requested.\n             BlockValidationState dos_state;\n             ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n-            BlockProcessed(pfrom, pblock, fNewBlock);\n+            BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n@@ -3118,7 +3124,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // in compact block optimistic reconstruction handling.\n             BlockValidationState dos_state;\n             ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n-            BlockProcessed(pfrom, pblock, fNewBlock);\n+            BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         }\n         return true;\n     }\n@@ -3177,7 +3183,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         bool fNewBlock = false;\n         BlockValidationState dos_state;\n         ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n-        BlockProcessed(pfrom, pblock, fNewBlock);\n+        BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         return true;\n     }\n "
      },
      {
        "sha": "b3a071fa6fc5796cf48d96c9e0ae2dcf50ce8210",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc192c3ecb40695ebddbe736684b152081ea4df/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc192c3ecb40695ebddbe736684b152081ea4df/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=8fc192c3ecb40695ebddbe736684b152081ea4df",
        "patch": "@@ -951,6 +951,9 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n+    if (!dos_state.IsValid()) {\n+        return BIP22ValidationResult(dos_state);\n+    }\n     if (!sc->found) {\n         return \"inconclusive\";\n     }"
      },
      {
        "sha": "701e4587ff50f20b703e39a12a3ccbe0869d5501",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc192c3ecb40695ebddbe736684b152081ea4df/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc192c3ecb40695ebddbe736684b152081ea4df/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8fc192c3ecb40695ebddbe736684b152081ea4df",
        "patch": "@@ -3832,7 +3832,6 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n             ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, dos_state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n         }\n     }"
      },
      {
        "sha": "05106f41f9a33e2b65c40542d889ee1a9492862c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc192c3ecb40695ebddbe736684b152081ea4df/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc192c3ecb40695ebddbe736684b152081ea4df/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8fc192c3ecb40695ebddbe736684b152081ea4df",
        "patch": "@@ -147,18 +147,29 @@ extern uint64_t nPruneTarget;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided BlockValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n+ * state is guaranteed to be some non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), and state.IsValid(),\n+ * barring pruning and a desire to re-download a pruned block, there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ *\n+ * May not be called in a validationinterface callback.\n  *\n  * @param[in]   pblock            The block we want to process.\n- * @param[out]  state             Currently unused.\n+ * @param[out]  state             Only used for failures in CheckBlock/AcceptBlock. For failure in block connection,\n+ *                                a CValidationInterface BlockChecked callback is used to notify clients of validity.\n  * @param[in]   fForceProcessing  Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  fNewBlock         A boolean which is set to indicate if the block was first received via this call\n  * @returns     bool              If the block was processed, independently of block validity"
      }
    ]
  },
  {
    "sha": "c94ca983852368e683f89db32d94be21d3748a0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTRjYTk4Mzg1MjM2OGU2ODNmODlkYjMyZDk0YmUyMWQzNzQ4YTBj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:56:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-14T20:18:19Z"
      },
      "message": "[validation] trivial: Rename state to dummy_state for clarity\n\nThis is a pure refactor commit.\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "3534a35bf449ebdc7077463ec79ba67f8e7dbf28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3534a35bf449ebdc7077463ec79ba67f8e7dbf28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c94ca983852368e683f89db32d94be21d3748a0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94ca983852368e683f89db32d94be21d3748a0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c94ca983852368e683f89db32d94be21d3748a0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94ca983852368e683f89db32d94be21d3748a0c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fc192c3ecb40695ebddbe736684b152081ea4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc192c3ecb40695ebddbe736684b152081ea4df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc192c3ecb40695ebddbe736684b152081ea4df"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fe70e556a4a711278eb76a68ecbd443e97b30f6d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c94ca983852368e683f89db32d94be21d3748a0c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c94ca983852368e683f89db32d94be21d3748a0c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c94ca983852368e683f89db32d94be21d3748a0c",
        "patch": "@@ -3838,9 +3838,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n \n     NotifyHeaderTip();\n \n-    BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n+    BlockValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n+    if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))\n+        return error(\"%s: ActivateBestChain failed (%s)\", __func__, dummy_state.ToString());\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "50048f45a07fdced2b97209a17bfa0b161518773",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDA0OGY0NWEwN2ZkY2VkMmI5NzIwOWExN2JmYTBiMTYxNTE4Nzcz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-15T19:58:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-14T20:18:56Z"
      },
      "message": "[test/rpc] Additional checks for dos_state validity\n\nCo-authored-by: John Newbery <john@johnnewbery.com>\nCo-authored-by: Carl Dong <contact@carldong.me>",
      "tree": {
        "sha": "6fe24c6a960107951c22f7ce8591bfba08cc3011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fe24c6a960107951c22f7ce8591bfba08cc3011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50048f45a07fdced2b97209a17bfa0b161518773",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50048f45a07fdced2b97209a17bfa0b161518773",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50048f45a07fdced2b97209a17bfa0b161518773",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50048f45a07fdced2b97209a17bfa0b161518773/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c94ca983852368e683f89db32d94be21d3748a0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94ca983852368e683f89db32d94be21d3748a0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c94ca983852368e683f89db32d94be21d3748a0c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2f75d1ae0fc5ab8d8f6f99d7de2546f2455117eb",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50048f45a07fdced2b97209a17bfa0b161518773/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50048f45a07fdced2b97209a17bfa0b161518773/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=50048f45a07fdced2b97209a17bfa0b161518773",
        "patch": "@@ -173,6 +173,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n@@ -192,6 +193,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const auto& block = chainB[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n@@ -224,6 +226,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n         BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n     }\n \n      // Check that chain A and B blocks can be retrieved."
      },
      {
        "sha": "8812263ec4142e6036c894c9ee4e9d9435c71f27",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50048f45a07fdced2b97209a17bfa0b161518773/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50048f45a07fdced2b97209a17bfa0b161518773/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=50048f45a07fdced2b97209a17bfa0b161518773",
        "patch": "@@ -256,6 +256,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BlockValidationState dos_state;\n         BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n+        BOOST_CHECK(dos_state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "7a11757159daad02374661990353cdf4b8c690be",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50048f45a07fdced2b97209a17bfa0b161518773/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50048f45a07fdced2b97209a17bfa0b161518773/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=50048f45a07fdced2b97209a17bfa0b161518773",
        "patch": "@@ -35,6 +35,7 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n     BlockValidationState dos_state;\n     bool processed{ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n     assert(processed);\n+    assert(dos_state.IsValid());\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};\n }"
      },
      {
        "sha": "21e5e9319f83fe4b13a0155405dd1603f72afd79",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50048f45a07fdced2b97209a17bfa0b161518773/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50048f45a07fdced2b97209a17bfa0b161518773/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=50048f45a07fdced2b97209a17bfa0b161518773",
        "patch": "@@ -199,6 +199,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n                     BlockValidationState dos_state;\n                     bool processed = ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n                     assert(processed);\n+                    assert(dos_state.IsValid());\n                 }\n             }\n         });\n@@ -237,7 +238,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n     bool ignored;\n     auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n         BlockValidationState dos_state;\n-        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored) && dos_state.IsValid();\n     };\n \n     // Process all mined blocks"
      }
    ]
  },
  {
    "sha": "cb178903b0752de3edfd87f6013c2b4de41b6e13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjE3ODkwM2IwNzUyZGUzZWRmZDg3ZjYwMTNjMmI0ZGU0MWI2ZTEz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-19T18:45:08Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-19T18:45:08Z"
      },
      "message": "Make ProcessNewBlock return fNewBlock instead of state validity",
      "tree": {
        "sha": "b8e2d39ed2d0715d883f1ad775b03eda4544c909",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8e2d39ed2d0715d883f1ad775b03eda4544c909"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb178903b0752de3edfd87f6013c2b4de41b6e13",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7EKTQACgkQDMUhUxl5\nkaW4cRAAtZORr3ghXpXrNDPUctCMv5TX9FJkPu8hrL8//GMS1kr7mICF7MnU3cMG\nbwp67bWLWmE3SNhd7GPFSU2whhIRXHktgpTKg/7dc3awELU7eoJeXeKYVNPeDblk\nfGp+cWQX5qalXhA2ah2mrL3VJ5Pzdr+Y0iGwST7ep5E9yHuEgPNZMjVT5sWFek51\nfA9o8/fao2ylwjLPgDbyMSdn75COTN11B/SXh0E//GOqWKI+lo5Fr2Jpj0hAvuyQ\npOmW0h46UiPy+DNYgD0WBUg1WFRQpr6CMzBy/s037lWfZoYdxCRiF0ZxjRHEQFKf\nDVwe0fQmG//ijyYQKx1hdHzOMe7C720EA1NZ9v/b31dIU3RZVGkQCMHXLkl5t3yF\nq77bqsrJrAWbcCp5eNiSLgYwzCN+7UgFKzEqqQ/ayksY7iOByAAIhgSDZDuRl4fY\netNHIC0J91r6AdFt9Etiys7lo97Vyd0hq458OIXTornvCdHeVEE4JWEJWTQNWLTL\nyM2s9BoaQZWm+hMfyFS1GCGzCggrkCTAsKG7iHpzZ4kiF/BlBrF8r6CWkdKxk3Av\nqgt4A+X7EhvHpY73x5Ou6S8LABIPcMwIGobhuyleBH3pwl7SGZ0occnskyP3esF7\nOSzzqSm16JdZR6tQDTYzJx4nPTmAnm0VTbb+KJAeoJFYHu0iD8o=\n=A4gg\n-----END PGP SIGNATURE-----",
        "payload": "tree b8e2d39ed2d0715d883f1ad775b03eda4544c909\nparent 50048f45a07fdced2b97209a17bfa0b161518773\nauthor Carl Dong <contact@carldong.me> 1589913908 -0400\ncommitter Carl Dong <contact@carldong.me> 1589913908 -0400\n\nMake ProcessNewBlock return fNewBlock instead of state validity\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb178903b0752de3edfd87f6013c2b4de41b6e13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb178903b0752de3edfd87f6013c2b4de41b6e13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb178903b0752de3edfd87f6013c2b4de41b6e13/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50048f45a07fdced2b97209a17bfa0b161518773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50048f45a07fdced2b97209a17bfa0b161518773",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50048f45a07fdced2b97209a17bfa0b161518773"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 33,
      "deletions": 36
    },
    "files": [
      {
        "sha": "846454a4da75fa9c1ae2a37ba37975c322a690c0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -3025,7 +3025,6 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 LOCK(cs_main);\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             }\n-            bool fNewBlock = false;\n             // Setting fForceProcessing to true means that we bypass some of\n             // our anti-DoS protections in AcceptBlock, which filters\n             // unrequested blocks that might be trying to waste our resources\n@@ -3036,7 +3035,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n             BlockValidationState dos_state;\n-            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true);\n             BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n@@ -3115,15 +3114,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n-            bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n             // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n             BlockValidationState dos_state;\n-            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true);\n             BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         }\n         return true;\n@@ -3180,9 +3178,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n-        bool fNewBlock = false;\n         BlockValidationState dos_state;\n-        ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n+        bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing);\n         BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         return true;\n     }"
      },
      {
        "sha": "040c6d7f529c15e49be8360dbfbac7cdfd3b79dc",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -125,7 +125,8 @@ static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extr\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     BlockValidationState state;\n-    if (!ProcessNewBlock(chainparams, shared_pblock, state, true, nullptr))\n+    ProcessNewBlock(Params(), shared_pblock, state, true);\n+    if (!state.IsValid())\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n \n     block_hash = block.GetHash();\n@@ -942,13 +943,12 @@ static UniValue submitblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n     BlockValidationState dos_state;\n-    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    bool new_block = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true);\n     UnregisterSharedValidationInterface(sc);\n-    if (!new_block && accepted) {\n+    if (!new_block && dos_state.IsValid()) {\n         return \"duplicate\";\n     }\n     if (!dos_state.IsValid()) {"
      },
      {
        "sha": "a4120a7ee45a74da50858fe3652be973031d9bc8",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -172,7 +172,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        ProcessNewBlock(Params(), block, dos_state, true);\n         BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 2; i++) {\n@@ -192,7 +192,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n         BlockValidationState dos_state;\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        ProcessNewBlock(Params(), block, dos_state, true);\n         BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 3; i++) {\n@@ -225,7 +225,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     for (size_t i = 2; i < 4; i++) {\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        ProcessNewBlock(Params(), block, dos_state, true);\n         BOOST_REQUIRE(dos_state.IsValid());\n     }\n "
      },
      {
        "sha": "7d209caca1b5efe0ff9c9a27a6f687e15acca52a",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BlockValidationState dos_state;\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n+        ProcessNewBlock(chainparams, shared_pblock, dos_state, true);\n         BOOST_CHECK(dos_state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "cecea7ba08f4f7c0e2ca0f83e6c92a40c2354b87",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -33,8 +33,7 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n     }\n \n     BlockValidationState dos_state;\n-    bool processed{ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n-    assert(processed);\n+    ProcessNewBlock(Params(), block, dos_state, true);\n     assert(dos_state.IsValid());\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};"
      },
      {
        "sha": "369888a8b196a0ca972d9e54624e768876245061",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -229,7 +229,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     BlockValidationState dos_state;\n-    ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr);\n+    ProcessNewBlock(chainparams, shared_pblock, dos_state, true);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "3edd7f39dda489076fb465f21f822b2b9608cf37",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -157,7 +157,6 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         BuildChain(Params().GenesisBlock().GetHash(), 100, 15, 10, 500, blocks);\n     }\n \n-    bool ignored;\n     BlockValidationState state;\n     std::vector<CBlockHeader> headers;\n     std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n@@ -167,7 +166,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n \n     // Connect the genesis block and drain any outstanding events\n     BlockValidationState dos_state;\n-    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true, &ignored));\n+    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true);\n+    BOOST_CHECK(dos_state.IsValid());\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -185,20 +185,18 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     std::vector<std::thread> threads;\n     for (int i = 0; i < 10; i++) {\n         threads.emplace_back([&blocks]() {\n-            bool ignored;\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n                 BlockValidationState dos_state;\n-                ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n+                ProcessNewBlock(Params(), block, dos_state, true);\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n                     BlockValidationState dos_state;\n-                    bool processed = ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n-                    assert(processed);\n+                    ProcessNewBlock(Params(), block, dos_state, true);\n                     assert(dos_state.IsValid());\n                 }\n             }\n@@ -238,7 +236,8 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n     bool ignored;\n     auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n         BlockValidationState dos_state;\n-        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored) && dos_state.IsValid();\n+        ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true);\n+        return dos_state.IsValid();\n     };\n \n     // Process all mined blocks"
      },
      {
        "sha": "07fd3f4cb8c38ef2808993713d3d7677563f9f7d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -3812,13 +3812,14 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing)\n {\n     AssertLockNotHeld(cs_main);\n \n+    bool fNewBlock = false;\n+\n     {\n         CBlockIndex *pindex = nullptr;\n-        if (fNewBlock) *fNewBlock = false;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n@@ -3829,20 +3830,21 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);\n         }\n         if (!ret) {\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n+            error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n+            return fNewBlock;\n         }\n     }\n \n     NotifyHeaderTip();\n \n     BlockValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n     if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed (%s)\", __func__, dummy_state.ToString());\n+        error(\"%s: ActivateBestChain failed (%s)\", __func__, dummy_state.ToString());\n \n-    return true;\n+    return fNewBlock;\n }\n \n bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)"
      },
      {
        "sha": "88f35dba0b9912e93af7f6d369e206dfaf167b06",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb178903b0752de3edfd87f6013c2b4de41b6e13/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "patch": "@@ -161,20 +161,20 @@ extern uint64_t nPruneTarget;\n  * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n  * state is guaranteed to be some non-IsValid() state.\n  *\n- * If fForceProcessing is set (or fNewBlock returns true), and state.IsValid(),\n- * barring pruning and a desire to re-download a pruned block, there should\n- * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ * If fForceProcessing is set (or the function returns true), and\n+ * state.IsValid(), barring pruning and a desire to re-download a pruned block,\n+ * there should never be any reason to re-ProcessNewBlock any block with the\n+ * same hash.\n  *\n  * May not be called in a validationinterface callback.\n  *\n  * @param[in]   pblock            The block we want to process.\n  * @param[out]  state             Only used for failures in CheckBlock/AcceptBlock. For failure in block connection,\n  *                                a CValidationInterface BlockChecked callback is used to notify clients of validity.\n  * @param[in]   fForceProcessing  Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  fNewBlock         A boolean which is set to indicate if the block was first received via this call\n- * @returns     bool              If the block was processed, independently of block validity\n+ * @returns     If the block was first received via this call\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "7532cf6c56d015e8bae646138d71df825d2684ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTMyY2Y2YzU2ZDAxNWU4YmFlNjQ2MTM4ZDcxZGY4MjVkMjY4NGFi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-17T16:57:01Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-19T19:07:21Z"
      },
      "message": "Make ProcessNewBlock return a future instead of an immediate bool\n\nThis prepares for making best-chain-activation and disk writes\nhappen in a separate thread from the caller, even though all\ncallsites currently block on the return value immediately.",
      "tree": {
        "sha": "d05b4ed6ec2858d87865105a39dd6c409c7d5550",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d05b4ed6ec2858d87865105a39dd6c409c7d5550"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7532cf6c56d015e8bae646138d71df825d2684ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7ELmkACgkQDMUhUxl5\nkaUWtw//VbFhyeDDt2iCiQPBTe0c0jyHj+fr8G6LaByDX9QZEeDDgaVwFHALhHe/\nweA7XtwZgI/WVtaQrD27b/nc1UNi2MEGgMyqZ4v70NREYadMtVf0qAgfSsQyEi1/\nKsW6SCPVWh5PPBCGqrkDwcedfLw/r5pEPPn6bj4s8tAkbSKd1LxBqq2iKGR2WNGG\n/+IMeBbp6mdF5Yb0nzMwiaLpELnTS51LqScoQLVy5dUC7OPhLaMLEPcRnGHHqjGV\nuQ2gF1u9S+dwdKui/bsLWT2iFftIELBsaKOH9YBsA0fc7nh7o/ZUqLG3/DyUAOyT\n9IrFWkbOKOaOVqGrxdb/5ylyqscqiI9YJzONTM9rUjlJSMeNhVZfsZZlVyzh4UYV\n/jnoKdbjC2Go31ThdgCCBRdqzcM6ulwEkxytRccKqX3Zy9FJjpv+4QZNBJMr+CB8\n/xzftue0emwmz9E+CuH0W/Hzg2pi1t7nz57OsJtVYZr8cL9qjguwglPkKPOlmagY\nUNtwgfCQPNI/seVutqD2JdQ+my45lhkCWwruBk9wfQyN28WhpD1wE+R2YhMEDJW1\nMPGywy/nZwYUPMsa38P3nq1RsIcFovVUxL/bkNVyjROlhAivBcphMXfwFkOFeq4s\nzq6M8cYKpNBSWye8TDLGl72oYxDlxs3XqzKm+GPPjcO2Cj7EFi8=\n=Q63n\n-----END PGP SIGNATURE-----",
        "payload": "tree d05b4ed6ec2858d87865105a39dd6c409c7d5550\nparent cb178903b0752de3edfd87f6013c2b4de41b6e13\nauthor Matt Corallo <git@bluematt.me> 1560790621 -0400\ncommitter Carl Dong <contact@carldong.me> 1589915241 -0400\n\nMake ProcessNewBlock return a future instead of an immediate bool\n\nThis prepares for making best-chain-activation and disk writes\nhappen in a separate thread from the caller, even though all\ncallsites currently block on the return value immediately.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7532cf6c56d015e8bae646138d71df825d2684ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7532cf6c56d015e8bae646138d71df825d2684ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7532cf6c56d015e8bae646138d71df825d2684ab/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb178903b0752de3edfd87f6013c2b4de41b6e13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb178903b0752de3edfd87f6013c2b4de41b6e13"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 33,
      "deletions": 24
    },
    "files": [
      {
        "sha": "2378810730af92e6d92b7ac03530faf209cb2b3c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -3035,7 +3035,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n             BlockValidationState dos_state;\n-            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true);\n+            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true).get();\n             BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n@@ -3121,7 +3121,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n             BlockValidationState dos_state;\n-            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true);\n+            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true).get();\n             BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         }\n         return true;\n@@ -3179,7 +3179,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         BlockValidationState dos_state;\n-        bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing);\n+        bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing).get();\n         BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n         return true;\n     }"
      },
      {
        "sha": "ec6474d208729b48cae562386dec4d040e24e70a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -125,7 +125,7 @@ static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extr\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     BlockValidationState state;\n-    ProcessNewBlock(Params(), shared_pblock, state, true);\n+    ProcessNewBlock(Params(), shared_pblock, state, true).wait();\n     if (!state.IsValid())\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n \n@@ -946,7 +946,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n     BlockValidationState dos_state;\n-    bool new_block = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true);\n+    bool new_block = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true).get();\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && dos_state.IsValid()) {\n         return \"duplicate\";"
      },
      {
        "sha": "2387743323a60d9a7d4d5fd6196ac3acfac8a5ec",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -172,7 +172,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n-        ProcessNewBlock(Params(), block, dos_state, true);\n+        ProcessNewBlock(Params(), block, dos_state, true).wait();\n         BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 2; i++) {\n@@ -192,7 +192,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n         BlockValidationState dos_state;\n-        ProcessNewBlock(Params(), block, dos_state, true);\n+        ProcessNewBlock(Params(), block, dos_state, true).wait();\n         BOOST_REQUIRE(dos_state.IsValid());\n     }\n     for (size_t i = 0; i < 3; i++) {\n@@ -225,7 +225,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     for (size_t i = 2; i < 4; i++) {\n         const auto& block = chainA[i];\n         BlockValidationState dos_state;\n-        ProcessNewBlock(Params(), block, dos_state, true);\n+        ProcessNewBlock(Params(), block, dos_state, true).wait();\n         BOOST_REQUIRE(dos_state.IsValid());\n     }\n "
      },
      {
        "sha": "d9bd9ecfe0f121348ac0791cf8326c33c172754d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BlockValidationState dos_state;\n-        ProcessNewBlock(chainparams, shared_pblock, dos_state, true);\n+        ProcessNewBlock(chainparams, shared_pblock, dos_state, true).wait();\n         BOOST_CHECK(dos_state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "44547ab9f6f28c06997a7ebe952f896fc386a7ce",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -33,7 +33,7 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n     }\n \n     BlockValidationState dos_state;\n-    ProcessNewBlock(Params(), block, dos_state, true);\n+    ProcessNewBlock(Params(), block, dos_state, true).wait();\n     assert(dos_state.IsValid());\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};"
      },
      {
        "sha": "dd10b8e507cc87d6d7563571e58c42d96897adca",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -229,7 +229,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     BlockValidationState dos_state;\n-    ProcessNewBlock(chainparams, shared_pblock, dos_state, true);\n+    ProcessNewBlock(chainparams, shared_pblock, dos_state, true).wait();\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "430dcf2407b5e7c7de2ecdb4b3ffe617180f5fc6",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -166,7 +166,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n \n     // Connect the genesis block and drain any outstanding events\n     BlockValidationState dos_state;\n-    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true);\n+    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true).wait();\n     BOOST_CHECK(dos_state.IsValid());\n     SyncWithValidationInterfaceQueue();\n \n@@ -189,14 +189,14 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n                 BlockValidationState dos_state;\n-                ProcessNewBlock(Params(), block, dos_state, true);\n+                ProcessNewBlock(Params(), block, dos_state, true).wait();\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n                     BlockValidationState dos_state;\n-                    ProcessNewBlock(Params(), block, dos_state, true);\n+                    ProcessNewBlock(Params(), block, dos_state, true).wait();\n                     assert(dos_state.IsValid());\n                 }\n             }\n@@ -236,7 +236,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n     bool ignored;\n     auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n         BlockValidationState dos_state;\n-        ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true);\n+        ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true).wait();\n         return dos_state.IsValid();\n     };\n "
      },
      {
        "sha": "4cb2925530704fa9167ae8aac665f7d8de94b49f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -3812,10 +3812,12 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing)\n+std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing)\n {\n     AssertLockNotHeld(cs_main);\n \n+    std::promise<bool> result_promise;\n+    std::future<bool> result = result_promise.get_future();\n     bool fNewBlock = false;\n \n     {\n@@ -3834,17 +3836,20 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         }\n         if (!ret) {\n             error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n-            return fNewBlock;\n+            result_promise.set_value(fNewBlock);\n+            return result;\n         }\n     }\n \n+    result_promise.set_value(fNewBlock);\n+\n     NotifyHeaderTip();\n \n     BlockValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n     if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))\n         error(\"%s: ActivateBestChain failed (%s)\", __func__, dummy_state.ToString());\n \n-    return fNewBlock;\n+    return result;\n }\n \n bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)"
      },
      {
        "sha": "dd845dcc3c145422da63ec8d29cf01a9de898624",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7532cf6c56d015e8bae646138d71df825d2684ab/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7532cf6c56d015e8bae646138d71df825d2684ab/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7532cf6c56d015e8bae646138d71df825d2684ab",
        "patch": "@@ -25,6 +25,7 @@\n #include <serialize.h>\n \n #include <atomic>\n+#include <future>\n #include <map>\n #include <memory>\n #include <set>\n@@ -161,20 +162,23 @@ extern uint64_t nPruneTarget;\n  * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n  * state is guaranteed to be some non-IsValid() state.\n  *\n- * If fForceProcessing is set (or the function returns true), and\n- * state.IsValid(), barring pruning and a desire to re-download a pruned block,\n- * there should never be any reason to re-ProcessNewBlock any block with the\n- * same hash.\n+ * If fForceProcessing is set (or the future returns true), and state.IsValid(),\n+ * barring pruning and a desire to re-download a pruned block, there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n  *\n  * May not be called in a validationinterface callback.\n  *\n+ * Do NOT block on the returned future waiting for it to resolve as this may\n+ * introduce deadlocks (in the case you are holding any mutexes which are\n+ * also taken in validationinterface callbacks).\n+ *\n  * @param[in]   pblock            The block we want to process.\n  * @param[out]  state             Only used for failures in CheckBlock/AcceptBlock. For failure in block connection,\n  *                                a CValidationInterface BlockChecked callback is used to notify clients of validity.\n  * @param[in]   fForceProcessing  Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @returns     If the block was first received via this call\n+ * @returns      A future which completes with a boolean which is set to indicate if the block was first received via this call\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing) LOCKS_EXCLUDED(cs_main);\n+std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "2dcdb537b5c1dce60db217238c5e75dae602e755",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGNkYjUzN2I1YzFkY2U2MGRiMjE3MjM4YzVlNzVkYWU2MDJlNzU1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-19T19:08:31Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-19T19:10:35Z"
      },
      "message": "Non-obvious parts of \"Make ProcessNewBlock return a future instead of an immediate bool\"",
      "tree": {
        "sha": "7bbb2e9aadabaaf886ddc02ce0720abc534736d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bbb2e9aadabaaf886ddc02ce0720abc534736d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dcdb537b5c1dce60db217238c5e75dae602e755",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7EL0MACgkQDMUhUxl5\nkaWfgg//d9oRHyG/2UdQ8iXU9E95VeVOGv4vofYdeXwh66NSixnDKgJvQy1w1eY3\nGCvhqfpB9UiSx0lw8uTol2bL4cBISX+yfd0fp7xGOWUib+l5aoa+KOtUPXLuK6Bj\nUfi8MT8jMkLWcwyHeyd8QiXmPrV2XZYqYoh+4+e45/WkderPABnCPfR3yiEZhXgD\niyDAqtsIlQt0hY7emKUSzIhMpszklrvJJol12hmfMbG/7JvL1DaE0mdzvH3jd7wt\n7abVxzfbihqxuNUzAZx4AHHNHLwtFIIPTeeGk+aaD59dCPz88C/TYvkOcIAlz5FI\nBdefMYWXhNPWTcpm+5zpL7iOa/cs2T+VlYg1vrcTZPdVA/EglScIk9yWh0Gn5wTI\n/O4+a+2lL2fOPEc++aTIxcW7kKlNaGFtxVaLe9fzY/BcvqGQgk5772eOdF+358Xl\nEVQ6DERhUXTlNPcwkYopKT3AP1+T14fy8GGWY3wfGpRy/+bC5yhApCBgLpkIjHoI\nf+phEoPbVi5cjCVL6G2Z1Je0FBnYxEWW0jEz3x3+4Skudtie9Zhd9+hDZl+dTCMC\nz4wGMtoeGuYo8RrBxa63uuEKbnhEErP3oPIYXv9w3CkP/tf3jKj+JqzJ8cZwNcR3\n1vMQp+FHq4kPR8CbZSjazZSTI54DeiVpmKSo31Ywn38me+F5GZo=\n=1wBP\n-----END PGP SIGNATURE-----",
        "payload": "tree 7bbb2e9aadabaaf886ddc02ce0720abc534736d8\nparent 7532cf6c56d015e8bae646138d71df825d2684ab\nauthor Carl Dong <contact@carldong.me> 1589915311 -0400\ncommitter Carl Dong <contact@carldong.me> 1589915435 -0400\n\nNon-obvious parts of \"Make ProcessNewBlock return a future instead of an immediate bool\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dcdb537b5c1dce60db217238c5e75dae602e755",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dcdb537b5c1dce60db217238c5e75dae602e755",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dcdb537b5c1dce60db217238c5e75dae602e755/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7532cf6c56d015e8bae646138d71df825d2684ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7532cf6c56d015e8bae646138d71df825d2684ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7532cf6c56d015e8bae646138d71df825d2684ab"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8fc973e4018ab96e8fbe65b423542f0e9af19f76",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dcdb537b5c1dce60db217238c5e75dae602e755/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dcdb537b5c1dce60db217238c5e75dae602e755/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2dcdb537b5c1dce60db217238c5e75dae602e755",
        "patch": "@@ -126,7 +126,7 @@ static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extr\n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n     BlockValidationState state;\n     ProcessNewBlock(Params(), shared_pblock, state, true).wait();\n-    if (!state.IsValid())\n+    if (ChainActive().Tip()->GetBlockHash() != block.GetHash())\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n \n     block_hash = block.GetHash();"
      },
      {
        "sha": "2e6b6d88e717aa2b38c5955f320e61f2986088a7",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dcdb537b5c1dce60db217238c5e75dae602e755/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dcdb537b5c1dce60db217238c5e75dae602e755/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=2dcdb537b5c1dce60db217238c5e75dae602e755",
        "patch": "@@ -185,21 +185,25 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     std::vector<std::thread> threads;\n     for (int i = 0; i < 10; i++) {\n         threads.emplace_back([&blocks]() {\n+            std::vector<std::future<bool>> thread_futures;\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n                 BlockValidationState dos_state;\n-                ProcessNewBlock(Params(), block, dos_state, true).wait();\n+                thread_futures.push_back(ProcessNewBlock(Params(), block, dos_state, true));\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n                     BlockValidationState dos_state;\n-                    ProcessNewBlock(Params(), block, dos_state, true).wait();\n+                    thread_futures.push_back(ProcessNewBlock(Params(), block, dos_state, true));\n                     assert(dos_state.IsValid());\n                 }\n             }\n+            for (std::future<bool>& future: thread_futures) {\n+                future.wait();\n+            }\n         });\n     }\n "
      }
    ]
  },
  {
    "sha": "3a91e366697d9e83c496cbff1991467c64dd6d48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTkxZTM2NjY5N2Q5ZTgzYzQ5NmNiZmYxOTkxNDY3YzY0ZGQ2ZDQ4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-08T12:47:58Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-19T19:11:00Z"
      },
      "message": "Add a new peer state tracking class to reduce cs_main contention.\n\nCNodeState was added for validation-state-tracking, and thus,\nlogically, was protected by cs_main. However, as it has grown to\ninclude non-validation state (taking state from CNode), and as\nwe've reduced cs_main usage for other unrelated things, CNodeState\nis left with lots of cs_main locking in net_processing.\n\nIn order to ease transition to something new, this adds only a\ndummy CPeerState which is held as a reference for the duration of\nmessage processing.\n\nNote that moving things is somewhat tricky pre validation-thread as\na consistent lockorder must be kept - we can't take a lock on the\nnew cs_peerstate in anything that's called directly from\nvalidation.",
      "tree": {
        "sha": "6195507d5bcd2ad2e9952ebbd51816e3c2f58b90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6195507d5bcd2ad2e9952ebbd51816e3c2f58b90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a91e366697d9e83c496cbff1991467c64dd6d48",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7EL0QACgkQDMUhUxl5\nkaVY2hAAi0td1v8Gi9Kv6FHDU8zP7N87+ntsNM8u3804w93HtMvh6qaRKnrgfojK\n/NXtNKwNs4kuUeyoGqIU1wzhzRiURv+B9XVcInQSN2YN2RUgIMTIxdgmtb5LDs35\n0XW+RG6OaOu5WjMhEebPFcpwHiPN3zndNCtxcfye9Jjihcq1oPQgnvHQwdVPerTU\naWp2Qf/FnXnJCDNxKErSrqIyPX7iDzpqQf5h9nVt65fpPBA/igRSPOG9Dw/4/qqM\nk7yR54o7FWrB56M4GmCjemwq+kC2cO7ox8oO2yHF6iWChx95MeOJWNcApxXquQtI\n4fwLlV45Zz24tNcNE98hM/FArw/ClkVSQGU04V4M2p9lt0Fsng6tW9UvYNwVgTQO\n+0kIxh577sFXHrZoSLEU1dahkiFIE3T9jzJMdUII04zXBcBooPGGFpzFje+eR9rA\nGx6Kks03aXjuu5jlxo34pduJnU7r8RSiqPvjObGDZWOWPBSUkoVokwxUBiZlA6Tt\nX2xIgrKCy+dDtHNiMEWZW93JZ8j05gTXR+nhSFi28ugoYDmlv/zmo2KVV711cO2n\nQqhdmWumIhe8sy54TicpZQfi0USRea04S8BWg//r9awwzzJRxZbf/dq+UcuDneMr\nAAR+nSoRQDoT9EUTWhbPfvWgmUI+Ha449NQYNlanclVuMHsuRgk=\n=Y3Og\n-----END PGP SIGNATURE-----",
        "payload": "tree 6195507d5bcd2ad2e9952ebbd51816e3c2f58b90\nparent 2dcdb537b5c1dce60db217238c5e75dae602e755\nauthor Matt Corallo <git@bluematt.me> 1559998078 -0400\ncommitter Carl Dong <contact@carldong.me> 1589915460 -0400\n\nAdd a new peer state tracking class to reduce cs_main contention.\n\nCNodeState was added for validation-state-tracking, and thus,\nlogically, was protected by cs_main. However, as it has grown to\ninclude non-validation state (taking state from CNode), and as\nwe've reduced cs_main usage for other unrelated things, CNodeState\nis left with lots of cs_main locking in net_processing.\n\nIn order to ease transition to something new, this adds only a\ndummy CPeerState which is held as a reference for the duration of\nmessage processing.\n\nNote that moving things is somewhat tricky pre validation-thread as\na consistent lockorder must be kept - we can't take a lock on the\nnew cs_peerstate in anything that's called directly from\nvalidation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a91e366697d9e83c496cbff1991467c64dd6d48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a91e366697d9e83c496cbff1991467c64dd6d48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a91e366697d9e83c496cbff1991467c64dd6d48/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dcdb537b5c1dce60db217238c5e75dae602e755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dcdb537b5c1dce60db217238c5e75dae602e755",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dcdb537b5c1dce60db217238c5e75dae602e755"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 44,
      "deletions": 3
    },
    "files": [
      {
        "sha": "28091ce8481364d1eea23be1156a154f6dc5e9e3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 3,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a91e366697d9e83c496cbff1991467c64dd6d48/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a91e366697d9e83c496cbff1991467c64dd6d48/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3a91e366697d9e83c496cbff1991467c64dd6d48",
        "patch": "@@ -237,6 +237,17 @@ namespace {\n } // namespace\n \n namespace {\n+/**\n+ * Maintain state about nodes, protected by our own lock. Historically we put all\n+ * peer tracking state in CNodeState, however this results in significant cs_main\n+ * contention. Thus, new state tracking should go here, and we should eventually\n+ * move most (non-validation-specific) state here.\n+ */\n+struct CPeerState {\n+    CPeerState() {}\n+};\n+\n+\n /**\n  * Maintain validation-specific state about nodes, protected by cs_main, instead\n  * by CNode's own locks. This simplifies asynchronous operation, where\n@@ -429,7 +440,20 @@ struct CNodeState {\n // Keeps track of the time (in microseconds) when transactions were requested last time\n limitedmap<uint256, std::chrono::microseconds> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n \n+/** Note that this must be locked BEFORE cs_main! */\n+RecursiveMutex cs_peerstate;\n+\n /** Map maintaining per-node state. */\n+static std::map<NodeId, CPeerState> mapPeerState GUARDED_BY(cs_peerstate);\n+\n+static CPeerState *PeerState(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate) LOCKS_EXCLUDED(cs_main) {\n+    std::map<NodeId, CPeerState>::iterator it = mapPeerState.find(pnode);\n+    if (it == mapPeerState.end())\n+        return nullptr;\n+    return &it->second;\n+}\n+\n+/** Map maintaining new per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n@@ -810,6 +834,11 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         LOCK(cs_main);\n         mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->m_manual_connection));\n     }\n+    {\n+        LOCK(cs_peerstate);\n+        mapPeerState.emplace_hint(mapPeerState.end(), nodeid, CPeerState{});\n+    }\n+\n     if(!pnode->fInbound)\n         PushNodeVersion(pnode, connman, GetTime());\n }\n@@ -829,6 +858,11 @@ void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n \n void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n     fUpdateConnectionTime = false;\n+\n+    LOCK(cs_peerstate);\n+    CPeerState* peerstate = PeerState(nodeid);\n+    assert(peerstate != nullptr);\n+\n     LOCK(cs_main);\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n@@ -851,13 +885,15 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n     assert(g_outbound_peers_with_protect_from_disconnect >= 0);\n \n     mapNodeState.erase(nodeid);\n+    mapPeerState.erase(nodeid);\n \n     if (mapNodeState.empty()) {\n         // Do a consistency check after the last peer is removed.\n         assert(mapBlocksInFlight.empty());\n         assert(nPreferredDownload == 0);\n         assert(nPeersWithValidatedDownloads == 0);\n         assert(g_outbound_peers_with_protect_from_disconnect == 0);\n+        assert(mapPeerState.empty());\n     }\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n@@ -2100,7 +2136,7 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     connman->PushMessage(pfrom, std::move(msg));\n }\n \n-bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -3007,7 +3043,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, mempool, connman, banman, interruptMsgProc);\n+            return ProcessMessage(pfrom, peerstate, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, mempool, connman, banman, interruptMsgProc);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n@@ -3456,6 +3492,8 @@ bool PeerLogicValidation::CheckIfBanned(CNode* pnode)\n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n+    LOCK(cs_peerstate);\n+    CPeerState* peerstate = PeerState(pfrom->GetId());\n     //\n     // Message format\n     //  (4) message start\n@@ -3535,7 +3573,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, msg_type, vRecv, msg.m_time, chainparams, m_mempool, connman, m_banman, interruptMsgProc);\n+        fRet = ProcessMessage(pfrom, peerstate, msg_type, vRecv, msg.m_time, chainparams, m_mempool, connman, m_banman, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())\n@@ -3721,6 +3759,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // If we get here, the outgoing message serialization version is set and can't change.\n         const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n+        LOCK(cs_peerstate);\n+        CPeerState* peerstate = PeerState(pto->GetId());\n+\n         //\n         // Message: ping\n         //"
      }
    ]
  },
  {
    "sha": "97aa9078e58c85c458b6589c43bddf505b53d704",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2FhOTA3OGU1OGM4NWM0NThiNjU4OWM0M2JkZGY1MDViNTNkNzA0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-17T17:13:36Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-21T22:02:51Z"
      },
      "message": "Move net_processing's ProcessNewBlock calls to resolve async.\n\nEssentially, our goal is to not process anything for the given peer\nuntil the block finishes processing (emulating the previous behavior)\nwithout actually blocking the ProcessMessages loops. Obviously, in\nmost cases, we'll just go on to the next peer and immediately hit a\ncs_main lock, blocking us anyway, but this we can slowly improve\nthat state over time by moving things from CNodeState to CPeerState.",
      "tree": {
        "sha": "e50684fa512a75326bd9e4c3eb116f7e3f33053e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e50684fa512a75326bd9e4c3eb116f7e3f33053e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97aa9078e58c85c458b6589c43bddf505b53d704",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7G+osACgkQDMUhUxl5\nkaW6NRAAmKok7JRa0A9WcrvovWe9gYnvJMchzjrtpeaMZg776aQK/xheHYzuEbsV\nXO9wsfsTMchHyfO+z/JKyFP9aH762gTltUwJ+Mjo2l0gi2JwE9RpaSvcMdfvAwfp\nwSSZgU1w1xTuuHNngX292/NhLITzQRIz66waz6+Wr3X4vV2AH4IfmcAJSQ3/bm+2\nMmIrDun6mcfDc31Tf/t7QEsunykBuNoYgvhhsDfG/Wha4vnauo5DbsSii+x746eX\nh47ZXIKOkvFbKZrfcV/FTm+apQZU4Dq47sMQ8GWGxZ8wdGvJZZUZ7vfpwd26NyPj\nmnt2fBv3QZzqUSQAkqi27VT81j01s4M6NcfPnVmA/HCtUOBZCZg0Kw8PCw8hN9V+\noddkkk1iNBvHeqd350WL0O0MGOtvAsmmTWcFuNQli4ze/pU1kAvk3acTbP7pwOfq\n6D0WKovD+udbhkZqwbJL+YYlG4luF6y7qRjtnlbE7M9YEjilt7zfRHmp1vccYYXh\nVRLBOjvFEHzqjLYmjB+xlldoXF9WnlkkKwOdto8FKDiIGJWdkg4cfP+b8Olrwbjz\nmaC6cWQql+TSLAjCa4miFlzn8qT0cG6850D+1Tpo9mRiRe1eRQrfv542MLKbQWgH\nM7f+p5jBBtGlqj4D80rwoX8vNl6pc01ea+SE34DA4GX/LnQf/vE=\n=NiqS\n-----END PGP SIGNATURE-----",
        "payload": "tree e50684fa512a75326bd9e4c3eb116f7e3f33053e\nparent 3a91e366697d9e83c496cbff1991467c64dd6d48\nauthor Matt Corallo <git@bluematt.me> 1560791616 -0400\ncommitter Carl Dong <contact@carldong.me> 1590098571 -0400\n\nMove net_processing's ProcessNewBlock calls to resolve async.\n\nEssentially, our goal is to not process anything for the given peer\nuntil the block finishes processing (emulating the previous behavior)\nwithout actually blocking the ProcessMessages loops. Obviously, in\nmost cases, we'll just go on to the next peer and immediately hit a\ncs_main lock, blocking us anyway, but this we can slowly improve\nthat state over time by moving things from CNodeState to CPeerState.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97aa9078e58c85c458b6589c43bddf505b53d704",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97aa9078e58c85c458b6589c43bddf505b53d704",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97aa9078e58c85c458b6589c43bddf505b53d704/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a91e366697d9e83c496cbff1991467c64dd6d48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a91e366697d9e83c496cbff1991467c64dd6d48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a91e366697d9e83c496cbff1991467c64dd6d48"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 67,
      "deletions": 12
    },
    "files": [
      {
        "sha": "1e89c7bfec0df1552d5f444635c682ef6840839f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 12,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97aa9078e58c85c458b6589c43bddf505b53d704/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97aa9078e58c85c458b6589c43bddf505b53d704/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=97aa9078e58c85c458b6589c43bddf505b53d704",
        "patch": "@@ -157,6 +157,20 @@ namespace {\n      * happens afterwards.\n      * Set mapBlockSource[hash].second to false if the node should not be\n      * punished if the block is invalid.\n+     *\n+     * If a block is in this map by the time you read it, this means there\n+     * is no reason to re-download the block (as it passed the\n+     * ProcessNewBlock state.IsValid()). See the ProcessNewBlock docs for\n+     * more info.\n+     *\n+     * TODO: There is currently a race on the above - we add to this map\n+     * before calling PNB and then remove it if the block was malleated. We\n+     * should be able to just not add it to the map if the block is malleated.\n+     * (This is fixed later in this patch set, so should never hit master!)\n+     *\n+     * However, things which are not on our best chain but were written to\n+     * disk anyway may sit around in here forever, so be careful relying on\n+     * its size for any decisions.\n      */\n     std::map<uint256, std::pair<NodeId, bool>> mapBlockSource GUARDED_BY(cs_main);\n \n@@ -244,6 +258,13 @@ namespace {\n  * move most (non-validation-specific) state here.\n  */\n struct CPeerState {\n+    //! If this peer generated some headers for us to add, we store the resulting\n+    //! future here and wait for it to complete before we process more data from this\n+    //! peer.\n+    std::future<bool> pending_block_processing;\n+    //! The hash of the block which is pending download.\n+    uint256 pending_block_hash;\n+\n     CPeerState() {}\n };\n \n@@ -721,7 +742,7 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n-            if (pindex->nStatus & BLOCK_HAVE_DATA || ::ChainActive().Contains(pindex)) {\n+            if (pindex->nStatus & BLOCK_HAVE_DATA || ::ChainActive().Contains(pindex) || mapBlockSource.count(pindex->GetBlockHash()) != 0) {\n                 if (pindex->HaveTxsDownloaded())\n                     state->pindexLastCommonBlock = pindex;\n             } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n@@ -1878,6 +1899,7 @@ bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, CTxMemPool& m\n             while (pindexWalk && !::ChainActive().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n                         !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        !mapBlockSource.count(pindexWalk->GetBlockHash()) &&\n                         (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n@@ -2019,19 +2041,18 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n /**\n  *  A block has been processed. Handle potential peer punishment and housekeeping.\n  */\n-void static BlockProcessed(CNode* pfrom, CConnman* connman, std::shared_ptr<CBlock> pblock, BlockValidationState& state, bool new_block)\n+void static BlockProcessed(CNode* pfrom, CConnman* connman, CPeerState* peerstate, std::shared_ptr<CBlock> pblock, BlockValidationState& state, std::future<bool>& block_future)\n {\n     if (!state.IsValid()) {\n         // The block failed anti-dos / mutation checks. Call BlockChecked() callback here.\n         // This clears the block from mapBlockSource.\n         BlockChecked(*pblock, state, connman);\n-    } else if (!new_block) {\n         // Block was valid but we've seen it before. Clear it from mapBlockSource.\n         LOCK(cs_main);\n         ::mapBlockSource.erase(pblock->GetHash());\n     } else {\n-        // Block is valid and we haven't seen it before. set nLastBlockTime for this peer.\n-        pfrom->nLastBlockTime = GetTime();\n+        peerstate->pending_block_hash = pblock->GetHash();\n+        peerstate->pending_block_processing = std::move(block_future);\n     }\n }\n \n@@ -2939,8 +2960,9 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n         std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n-        if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n+        if ((pindex->nStatus & BLOCK_HAVE_DATA) || mapBlockSource.count(pindex->GetBlockHash())) {// Nothing to do here\n             return true;\n+        }\n \n         if (pindex->nChainWork <= ::ChainActive().Tip()->nChainWork || // We know something better\n                 pindex->nTx != 0) { // We had this block at some point, but pruned it\n@@ -3071,8 +3093,8 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n             BlockValidationState dos_state;\n-            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true).get();\n-            BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n+            std::future<bool> block_future = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true);\n+            BlockProcessed(pfrom, connman, peerstate, pblock, dos_state, block_future);\n \n             LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n             if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n@@ -3157,8 +3179,8 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n             BlockValidationState dos_state;\n-            bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true).get();\n-            BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n+            std::future<bool> block_future = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true);\n+            BlockProcessed(pfrom, connman, peerstate, pblock, dos_state, block_future);\n         }\n         return true;\n     }\n@@ -3215,8 +3237,8 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         BlockValidationState dos_state;\n-        bool fNewBlock = ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing).get();\n-        BlockProcessed(pfrom, connman, pblock, dos_state, fNewBlock);\n+        std::future<bool> block_future = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/forceProcessing);\n+        BlockProcessed(pfrom, connman, peerstate, pblock, dos_state, block_future);\n         return true;\n     }\n \n@@ -3489,6 +3511,24 @@ bool PeerLogicValidation::CheckIfBanned(CNode* pnode)\n     return false;\n }\n \n+bool static IsPendingBlockValidation(CNode* pfrom, CPeerState* peerstate) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate)\n+{\n+    if (peerstate->pending_block_processing.valid()) {\n+        if (peerstate->pending_block_processing.wait_for(std::chrono::duration<int>::zero()) == std::future_status::ready) {\n+            bool fNewBlock = peerstate->pending_block_processing.get();\n+            if (fNewBlock) {\n+                pfrom->nLastBlockTime = GetTime();\n+            } else {\n+                LOCK(cs_main);\n+                mapBlockSource.erase(peerstate->pending_block_hash);\n+            }\n+            peerstate->pending_block_processing = std::future<bool>();\n+            peerstate->pending_block_hash = uint256();\n+            return false;\n+        } else { return true; }\n+    } else { return false; }\n+}\n+\n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n@@ -3516,6 +3556,17 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         }\n     }\n \n+    if (IsPendingBlockValidation(pfrom, peerstate)) {\n+        return false;\n+    }\n+    {\n+        // Somewhat annoyingly, tests currently rely on any pending bans/disconnects\n+        // being processed prior to any pong responses, thus if we were waiting on a\n+        // block validation to complete, we need to recheck bans.\n+        LOCK(cs_main);\n+        CheckIfBanned(pfrom);\n+    }\n+\n     if (pfrom->fDisconnect)\n         return false;\n \n@@ -3762,6 +3813,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         LOCK(cs_peerstate);\n         CPeerState* peerstate = PeerState(pto->GetId());\n \n+        if (IsPendingBlockValidation(pto, peerstate)) {\n+            return true;\n+        }\n+\n         //\n         // Message: ping\n         //"
      }
    ]
  },
  {
    "sha": "92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjU3NGUyZmRhY2JiZGRmNGQ3NDM0ZDk4YWNjMDc4NjFkYmRmN2U0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-07-21T21:06:11Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-21T22:02:52Z"
      },
      "message": "Run the ActivateBestChain in ProcessNewBlock in a background thread\n\nSpawn a background thread at startup which validates each block as\nit comes in from ProcessNewBlock, taking advantage of the new\nstd::future return value to keep tests simple (and the new\nnet_processing handling of such values async already).\n\nThis makes introducing subtle validationinterface deadlocks much\nharder as any locks held going into ProcessNewBlock do not interact\nwith (in the form of lockorder restrictions) locks taken in\nvalidationinterface callbacks.\n\nNote that after this commit, feature_block and feature_assumevalid\ntests time out due to increased latency between block processing\nwhen those blocks do not represent a new best block. This will be\nresolved in the next commit.",
      "tree": {
        "sha": "288f3812d213f2b88bbca2fe849cd1649b2829a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/288f3812d213f2b88bbca2fe849cd1649b2829a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7G+owACgkQDMUhUxl5\nkaVvAA/+IOZVTYa0vij9V7uaAfOw9MQ9P0uWf7LRJ/pFntfrQPtrKLLX950WuIgu\ntWiZn0c7EdzFSFUcsozw4UU8bNUj9LFMCkryCSAbt0nOFNy+qPaymxJI0TqI/gng\nqPyXTtHgjiGmmbGvllHD6BCk0X7BX7iBHw0FbLMjgKimvn8SKBUpGV4Zc0K8F+79\nPsZpWlc5srnKdWV7c41Zb0yNkczP0uav526jF3iX/IyFncNLxAHkaOWHN02ODx1A\nqshWvGMmn+zj19El9OxJqMh2YV1uQIaJG7fv8Pn7ZpKS3bi7sOXG7qOJjqnSL5AY\nkeQZ+0JibUFGVG7vaKl5Z1o1z4+lmfvcSHXUJ9uyDzKqjEz7lsaVhA55/ZFSuG35\n+6upOGMXet4YAvAS2R96Hg55UbrAbDKzwbsRWu4d3an2n2RItYi7A0D9S+VWDmiU\n7OTcMDAX7dB1PK4xlF4tFDvNJqovI78E67zBUDS2hk79lM2HnTC2FTA5sv6+e4dG\nXrR23vDXdA6e7+MlqJXvwQIjskZjhTUQo3LGDslF70axuBDSGKl40WukJpPwXcrk\nT0FYUQyBUI0KreJ8x+Itq9jMOtB7HsFvqGHgqoyL1BNXIeRiMwDrSpX6Olw/gSHE\nqYidD9h+ry1e0yugmxY4AH6rbFuFtCyvu2C8SfakzdBlc+KhuQk=\n=g3FQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 288f3812d213f2b88bbca2fe849cd1649b2829a4\nparent 97aa9078e58c85c458b6589c43bddf505b53d704\nauthor Matt Corallo <git@bluematt.me> 1563743171 -0400\ncommitter Carl Dong <contact@carldong.me> 1590098572 -0400\n\nRun the ActivateBestChain in ProcessNewBlock in a background thread\n\nSpawn a background thread at startup which validates each block as\nit comes in from ProcessNewBlock, taking advantage of the new\nstd::future return value to keep tests simple (and the new\nnet_processing handling of such values async already).\n\nThis makes introducing subtle validationinterface deadlocks much\nharder as any locks held going into ProcessNewBlock do not interact\nwith (in the form of lockorder restrictions) locks taken in\nvalidationinterface callbacks.\n\nNote that after this commit, feature_block and feature_assumevalid\ntests time out due to increased latency between block processing\nwhen those blocks do not represent a new best block. This will be\nresolved in the next commit.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97aa9078e58c85c458b6589c43bddf505b53d704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97aa9078e58c85c458b6589c43bddf505b53d704",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97aa9078e58c85c458b6589c43bddf505b53d704"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 100,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d83bdd2e9f4f07d3bb3a868ba248fbea83c1cd9a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
        "patch": "@@ -1764,6 +1764,8 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    threadGroup.create_thread(std::bind(&TraceThread<std::function<void()>>, \"blockconn\", std::function<void()>(std::bind(&CChainState::ProcessBlockValidationQueue, &ChainstateActive()))));\n+\n     fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup."
      },
      {
        "sha": "2486f388dbcca5314cc1b5cb8ebbddf18225ddd3",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
        "patch": "@@ -159,6 +159,9 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     m_node.mempool = &::mempool;\n     m_node.mempool->setSanityCheck(1.0);\n+\n+    threadGroup.create_thread(std::function<void()>(std::bind(&CChainState::ProcessBlockValidationQueue, &ChainstateActive())));\n+\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n     m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler, *m_node.mempool);\n@@ -171,6 +174,10 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n TestingSetup::~TestingSetup()\n {\n+    // If eg the block connection thread is waiting on the queue to drain,\n+    // killing the scheduler thread now will hang us, so wait on the queue\n+    // to drain first.\n+    ChainstateActive().AwaitBlockValidationParked();\n     if (m_node.scheduler) m_node.scheduler->stop();\n     threadGroup.interrupt_all();\n     threadGroup.join_all();"
      },
      {
        "sha": "26020d026c68a3b0445ab4377a393b8245d0b95a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 11,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
        "patch": "@@ -3812,7 +3812,54 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing)\n+void CChainState::AwaitBlockValidationParked()\n+{\n+    std::unique_lock<RecursiveMutex> lock(m_cs_block_validation_queue);\n+    m_cv_block_validation_parked.wait(lock, [this] { return m_block_validation_parked; });\n+}\n+\n+void CChainState::ProcessBlockValidationQueue()\n+{\n+    while (true) {\n+        std::shared_ptr<const CBlock> pblock;\n+        bool fForceProcessing;\n+        std::promise<bool> result_promise;\n+        {\n+            std::unique_lock<RecursiveMutex> lock(m_cs_block_validation_queue);\n+            if (m_block_validation_queue.empty()) {\n+                m_block_validation_parked = true;\n+                m_cv_block_validation_parked.notify_all();\n+                m_cv_block_validation_queue.wait_for(lock, std::chrono::milliseconds(100));\n+                m_block_validation_parked = false;\n+            }\n+            if (ShutdownRequested())\n+                break;\n+            boost::this_thread::interruption_point();\n+            if (m_block_validation_queue.empty()) {\n+                continue;\n+            }\n+\n+            std::tuple<std::shared_ptr<const CBlock>, bool, std::promise<bool>>& tuple = m_block_validation_queue.front();\n+            pblock = std::move(std::get<0>(tuple));\n+            fForceProcessing = std::get<1>(tuple);\n+            result_promise = std::move(std::get<2>(tuple));\n+            m_block_validation_queue.pop_front();\n+        }\n+\n+        CChainParams chainparams = Params();\n+\n+        NotifyHeaderTip();\n+\n+        BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n+        if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n+            error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n+\n+        result_promise.set_value(true);\n+        LimitValidationInterfaceQueue();\n+    }\n+}\n+\n+std::future<bool> CChainState::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -3834,24 +3881,28 @@ std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::sh\n             // Store to disk\n             ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);\n         }\n-        if (!ret) {\n-            error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n+        if (!ret || !fNewBlock) {\n+            if (!ret) {\n+                error(\"%s: AcceptBlock FAILED (%s)\", __func__, dos_state.ToString());\n+            }\n             result_promise.set_value(fNewBlock);\n             return result;\n         }\n     }\n \n-    result_promise.set_value(fNewBlock);\n-\n-    NotifyHeaderTip();\n-\n-    BlockValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))\n-        error(\"%s: ActivateBestChain failed (%s)\", __func__, dummy_state.ToString());\n-\n+    {\n+        LOCK(m_cs_block_validation_queue);\n+        m_block_validation_queue.emplace_back(std::move(pblock), fForceProcessing, std::move(result_promise));\n+    }\n+    m_cv_block_validation_queue.notify_one();\n     return result;\n }\n \n+std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing)\n+{\n+    return ::ChainstateActive().ProcessNewBlock(chainparams, pblock, dos_state, fForceProcessing);\n+}\n+\n bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "5141df481db4426a19919369bcb5f382526f4b69",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92574e2fdacbbddf4d7434d98acc07861dbdf7e4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
        "patch": "@@ -178,7 +178,7 @@ extern uint64_t nPruneTarget;\n  * @param[in]   fForceProcessing  Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @returns      A future which completes with a boolean which is set to indicate if the block was first received via this call\n  */\n-std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& state, bool fForceProcessing) LOCKS_EXCLUDED(cs_main);\n+std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers.\n@@ -556,6 +556,21 @@ class CChainState {\n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n+    /** Lock for m_block_validation_queue */\n+    RecursiveMutex m_cs_block_validation_queue;\n+    /** CV for m_block_validation_queue */\n+    std::condition_variable_any m_cv_block_validation_queue;\n+    /**\n+     * Queue of blocks to validate\n+     * tuple<block, force-processing, promise-to-complete>\n+     */\n+    std::list<std::tuple<std::shared_ptr<const CBlock>, bool, std::promise<bool>>> m_block_validation_queue;\n+\n+    /** CV for waiting on the validation queue process to park */\n+    std::condition_variable_any m_cv_block_validation_parked;\n+    /** Indicates the block validation thread is parked */\n+    bool m_block_validation_parked;\n+\n public:\n     explicit CChainState(BlockManager& blockman, uint256 from_snapshot_blockhash = uint256());\n \n@@ -692,6 +707,19 @@ class CChainState {\n     /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n     bool IsInitialBlockDownload() const;\n \n+    /** Drain the block validation queue in a loop. Should be run only in one thread. */\n+    void ProcessBlockValidationQueue();\n+\n+    /**\n+     * Wait for the block validation queue process loop to be parked with no more work to do.\n+     * Obviously only really useful during shutdown once no more blocks will be pushed to\n+     * ProcessNewBlock.\n+     */\n+    void AwaitBlockValidationParked();\n+\n+    /** Push a new block to the block validation queue */\n+    std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, BlockValidationState& dos_state, bool fForceProcessing);\n+\n     /**\n      * Make various assertions about the state of the block index.\n      *"
      }
    ]
  },
  {
    "sha": "9a25c49a502cf8897bd73dcae81b28c879307fb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTI1YzQ5YTUwMmNmODg5N2JkNzNkY2FlODFiMjhjODc5MzA3ZmI1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-11T17:29:08Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-21T22:02:53Z"
      },
      "message": "Add a callback to indicate a block has been processed\n\nThis resolves the performance regression introduced in the previous\ncommit by always waking the message processing thread after each\nblock future resolves.\n\nSadly, this is somewhat awkward - all other validationinterface\ncallbacks represent an actual change to the global validation state,\nwhereas this callback indicates only that a call which one\nvalidation \"client\" made has completed. After going back and forth\nfor some time I didn't see a materially better way to resolve this\nissue, and luckily its a rather simple change, but its far from\nideal. Note that because we absolutely do not want to ever block on\na ProcessNewBlock-returned-future, the callback approach is\ncritical.",
      "tree": {
        "sha": "ae5571a4f6f2adc05df01eb52c3857f376b7e6c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae5571a4f6f2adc05df01eb52c3857f376b7e6c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a25c49a502cf8897bd73dcae81b28c879307fb5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7G+o4ACgkQDMUhUxl5\nkaX5Vg//TnhX0wcNfMLtaiMc6AaBsKCanF8VT16JLyN7AcFxKILQRG/h9fB4auUK\n/2IhbbpzpJKS+QbFeCLBZxEBHqEHpTM40+MudipnriLBjTYmp/m0AqAIDVGtgXIv\nlR6eR8IWH27+IEQEHSzVr/udSDik5dzR16YACpbCnaKUr5cahDBR2DUecUC1iucg\nLMnVc+TjdTRL6Q7OVnzNJ00sTfOIjejjXHiVuJLnZWlH769Dkqzq757GlXWo4l6q\n8/xTffQR7+8YaVbT/56TmzA9ONSxXWr5QRqXpZemNV2WGuIESYOGSmLW10cMw9FG\nGE61fYKPCJocTt4ZiE9z7IoXo4S30GWbToSMeU7cjwDg8VbN5lf5mvAymynr2ECu\nO6xw07UYMBE153eFmYqwpTkJgQmm6ct/FFv0n8Sd1K++PurRZcSS0Or/ZNhA91/V\nTnkzwnIFLPJAuL5WRXlHyXTLUYy6UGoCAEROC7PkBdKZchEcg5CSmJSqDFvURmSy\nvJhZOawLN2kjWdenGl/UUdUyMXps9F274pcNzHOlTuxV0mALJ2+n7qJMd2iQFX5d\nKSP8o7QGTGS6IK7L04INquIvGQsrMRFvqs6vVszCSqWx2N2Hri8O0DAv0ssYUgml\nu/iaj9lc6aJlflW5ZlebezbQ8vAza4EveyemtKkHFgtlE40icRI=\n=+Umo\n-----END PGP SIGNATURE-----",
        "payload": "tree ae5571a4f6f2adc05df01eb52c3857f376b7e6c4\nparent 92574e2fdacbbddf4d7434d98acc07861dbdf7e4\nauthor Matt Corallo <git@bluematt.me> 1560274148 -0400\ncommitter Carl Dong <contact@carldong.me> 1590098573 -0400\n\nAdd a callback to indicate a block has been processed\n\nThis resolves the performance regression introduced in the previous\ncommit by always waking the message processing thread after each\nblock future resolves.\n\nSadly, this is somewhat awkward - all other validationinterface\ncallbacks represent an actual change to the global validation state,\nwhereas this callback indicates only that a call which one\nvalidation \"client\" made has completed. After going back and forth\nfor some time I didn't see a materially better way to resolve this\nissue, and luckily its a rather simple change, but its far from\nideal. Note that because we absolutely do not want to ever block on\na ProcessNewBlock-returned-future, the callback approach is\ncritical.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a25c49a502cf8897bd73dcae81b28c879307fb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a25c49a502cf8897bd73dcae81b28c879307fb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a25c49a502cf8897bd73dcae81b28c879307fb5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92574e2fdacbbddf4d7434d98acc07861dbdf7e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92574e2fdacbbddf4d7434d98acc07861dbdf7e4"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4d7cd39f2ee6d68125ac8b8e1b07a295e2673d5d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9a25c49a502cf8897bd73dcae81b28c879307fb5",
        "patch": "@@ -1427,6 +1427,14 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidatio\n     ::BlockChecked(block, state, connman);\n }\n \n+/**\n+ * Wake up message handler once a block has been processed to process the\n+ * next message from the peer that sent us that block.\n+ */\n+void PeerLogicValidation::BlockProcessed() {\n+    connman->WakeMessageHandler();\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      },
      {
        "sha": "927b677c716d0651c8167989dae810669d06c425",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9a25c49a502cf8897bd73dcae81b28c879307fb5",
        "patch": "@@ -51,6 +51,10 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n      * Overridden from CValidationInterface.\n      */\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n+    void BlockProcessed() override;\n \n     /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n     void InitializeNode(CNode* pnode) override;"
      },
      {
        "sha": "eac892151cb562925957e8e8d372813976d8244a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9a25c49a502cf8897bd73dcae81b28c879307fb5",
        "patch": "@@ -3855,6 +3855,7 @@ void CChainState::ProcessBlockValidationQueue()\n             error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n \n         result_promise.set_value(true);\n+        GetMainSignals().BlockProcessed();\n         LimitValidationInterfaceQueue();\n     }\n }"
      },
      {
        "sha": "768805ad417694a2a12ed9f186f1544b2d364764",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=9a25c49a502cf8897bd73dcae81b28c879307fb5",
        "patch": "@@ -254,3 +254,9 @@ void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared\n     LOG_EVENT(\"%s: block hash=%s\", __func__, block->GetHash().ToString());\n     m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.NewPoWValidBlock(pindex, block); });\n }\n+\n+void CMainSignals::BlockProcessed() {\n+    m_internals->m_schedulerClient.AddToProcessQueue([this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.BlockProcessed(); });\n+    });\n+}"
      },
      {
        "sha": "d06c6bb6685a2ca3d15cc0dd838a1014f6850772",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a25c49a502cf8897bd73dcae81b28c879307fb5/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=9a25c49a502cf8897bd73dcae81b28c879307fb5",
        "patch": "@@ -171,6 +171,12 @@ class CValidationInterface {\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    /**\n+     * Notifies listeners that a block which was submitted has been fully processed.\n+     *\n+     * Called on a background thread.\n+     */\n+    virtual void BlockProcessed() {}\n     friend class CMainSignals;\n };\n \n@@ -203,6 +209,7 @@ class CMainSignals {\n     void ChainStateFlushed(const CBlockLocator &);\n     void BlockChecked(const CBlock&, const BlockValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n+    void BlockProcessed();\n };\n \n CMainSignals& GetMainSignals();"
      }
    ]
  },
  {
    "sha": "bc8c92de5e67920a60c6ba3e4dff7eea85346837",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzhjOTJkZTVlNjc5MjBhNjBjNmJhM2U0ZGZmN2VlYTg1MzQ2ODM3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-07-06T01:43:39Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-21T22:02:55Z"
      },
      "message": "Split AcceptBlock into three stages to write to disk in background\n\nTo keep the API the same (and for simplicity of clients, ie\nnet_processing), this splits AcceptBlock into the do-I-want-this\nstage, the checking stage, and the writing stage.\n\nProcessNewBlock calls the do-I-want-this and checking (ie\nmalleability checking) stuff, and then dumps blocks that pass\ninto the background thread. In the background, we re-test the\ndo-I-want-this logic but skip the checking stuff, before writing\nthe block to disk and activating the best chain.",
      "tree": {
        "sha": "74b69aa822769aee541d02fad5ac2c1b17bcee15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74b69aa822769aee541d02fad5ac2c1b17bcee15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc8c92de5e67920a60c6ba3e4dff7eea85346837",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7G+o8ACgkQDMUhUxl5\nkaUptA//WNafq8LNjj+DFiGYhs+Y9+YinSvcxwvUQn1q+FeIaZImB7FRTGZGwXez\nwquZPRGe58V9bDpXO0ij1V9735gRgsgWpUVdhZBYb99V267eIbWzBWLy/j4PW5lP\ni2agR7stydzj69kyq4WX3Z8tWmM82URMNZyZfAlAUXYVh6Dgmy5+fSq2Yy+rCMsX\nTcwUujWeDZ79ob9eipw+4z9DbPz3bi32LpwKWjQ/Gy83l8heuu7Rs1ml1X2GOpbr\nCfOkFhOcxXMn4WnN9qWFwvDH5mep973iZSuiUnx8zDyM2dD8hPRlmgB8YqFZU779\n6uP8v9MRa2qtHHUS/B8y7jrX+s4JdKRwtxFVO1KOK09PAaODsjcd4bsluracS+Sw\n/JafPLyZ0BTR4TollXt1nDXo6XRssmLOtAIygA0RXmCefXqPjTF0m1tddQcgGzcw\nXKvgqbrNWXqnlHqnahlfQZfnjuX04AxFRw9XQqJqqCTWnCGAV+G1xiCmHsPXQIZR\nbn5aLgbOpxgKrz1fhRL7spSrAOxDm6Voxzin+fKing/1VVwlqgkMz6cjFOHhuiaS\nWdgIW7QMFyTI9EmhbYuMiH9r5CtbL2rhKeAvuIv84wxy7H80a2N8RdqlNuq96EKz\nUSSGmgw4zj7ajMoR4GVAa9oWeRuj4YzJ/he3hVmcYe4Rza719Ls=\n=3Gtz\n-----END PGP SIGNATURE-----",
        "payload": "tree 74b69aa822769aee541d02fad5ac2c1b17bcee15\nparent 9a25c49a502cf8897bd73dcae81b28c879307fb5\nauthor Matt Corallo <git@bluematt.me> 1562377419 -0400\ncommitter Carl Dong <contact@carldong.me> 1590098575 -0400\n\nSplit AcceptBlock into three stages to write to disk in background\n\nTo keep the API the same (and for simplicity of clients, ie\nnet_processing), this splits AcceptBlock into the do-I-want-this\nstage, the checking stage, and the writing stage.\n\nProcessNewBlock calls the do-I-want-this and checking (ie\nmalleability checking) stuff, and then dumps blocks that pass\ninto the background thread. In the background, we re-test the\ndo-I-want-this logic but skip the checking stuff, before writing\nthe block to disk and activating the best chain.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8c92de5e67920a60c6ba3e4dff7eea85346837",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8c92de5e67920a60c6ba3e4dff7eea85346837",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8c92de5e67920a60c6ba3e4dff7eea85346837/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a25c49a502cf8897bd73dcae81b28c879307fb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a25c49a502cf8897bd73dcae81b28c879307fb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a25c49a502cf8897bd73dcae81b28c879307fb5"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 109,
      "deletions": 22
    },
    "files": [
      {
        "sha": "1ea77db19ffec67700ae995ccf94b14a45f6d4c6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 22,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc8c92de5e67920a60c6ba3e4dff7eea85346837/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc8c92de5e67920a60c6ba3e4dff7eea85346837/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bc8c92de5e67920a60c6ba3e4dff7eea85346837",
        "patch": "@@ -3729,23 +3729,10 @@ static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChai\n     return blockPos;\n }\n \n-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n+bool CChainState::ShouldMaybeWrite(CBlockIndex* pindex, bool fRequested)\n {\n-    const CBlock& block = *pblock;\n-\n-    if (fNewBlock) *fNewBlock = false;\n     AssertLockHeld(cs_main);\n \n-    CBlockIndex *pindexDummy = nullptr;\n-    CBlockIndex *&pindex = ppindex ? *ppindex : pindexDummy;\n-\n-    bool accepted_header = m_blockman.AcceptBlockHeader(block, state, chainparams, &pindex);\n-    CheckBlockIndex(chainparams.GetConsensus());\n-\n-    if (!accepted_header)\n-        return false;\n-\n     // Try to process all requested blocks that we don't have, but only\n     // process an unrequested block if it's new and has enough work to\n     // advance our tip, and isn't too many blocks ahead.\n@@ -3765,19 +3752,41 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n \n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n-    if (fAlreadyHave) return true;\n+    if (fAlreadyHave) return false;\n     if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n-        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n-        if (fTooFarAhead) return true;        // Block height is too high\n+        if (pindex->nTx != 0) return false;    // This is a previously-processed block that was pruned\n+        if (!fHasMoreOrSameWork) return false; // Don't process less-work chains\n+        if (fTooFarAhead) return false;        // Block height is too high\n \n         // Protect against DoS attacks from low-work chains.\n         // If our tip is behind, a peer could try to send us\n         // low-work blocks on a fake chain that we would never\n         // request; don't process these.\n-        if (pindex->nChainWork < nMinimumChainWork) return true;\n+        if (pindex->nChainWork < nMinimumChainWork) return false;\n     }\n \n+    return true;\n+}\n+\n+/** Check block before we go to write it to disk */\n+bool CChainState::PreWriteCheckBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, bool* fShouldWrite)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    const CBlock& block = *pblock;\n+    if (fShouldWrite) *fShouldWrite = false;\n+\n+    CBlockIndex *pindexDummy = nullptr;\n+    CBlockIndex *&pindex = ppindex ? *ppindex : pindexDummy;\n+\n+    bool accepted_header = m_blockman.AcceptBlockHeader(block, state, chainparams, &pindex);\n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n+    if (!accepted_header)\n+        return false;\n+\n+    if (!ShouldMaybeWrite(pindex, fRequested)) return true;\n+\n     if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {\n@@ -3787,6 +3796,29 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n         return error(\"%s: %s\", __func__, state.ToString());\n     }\n \n+    if (fShouldWrite) *fShouldWrite = true;\n+    return true;\n+}\n+\n+/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    const CBlock& block = *pblock;\n+    if (fNewBlock) *fNewBlock = false;\n+\n+    CBlockIndex *pindexDummy = nullptr;\n+    CBlockIndex *&pindex = ppindex ? *ppindex : pindexDummy;\n+\n+    bool fShouldWrite = false;\n+    if (!PreWriteCheckBlock(pblock, state, chainparams, &pindex, fRequested, &fShouldWrite)) {\n+        return false;\n+    }\n+    if (!fShouldWrite) {\n+        return true;\n+    }\n+\n     // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n     // (but if it does not build on our best tip, let the SendMessages loop relay it)\n     if (!IsInitialBlockDownload() && m_chain.Tip() == pindex->pprev)\n@@ -3847,6 +3879,47 @@ void CChainState::ProcessBlockValidationQueue()\n         }\n \n         CChainParams chainparams = Params();\n+        {\n+            LOCK(cs_main);\n+\n+            CBlockIndex* pindex = LookupBlockIndex(pblock->GetHash());\n+            assert(pindex);\n+\n+            // Check that we still want this block\n+            if (!ShouldMaybeWrite(pindex, fForceProcessing)) {\n+                result_promise.set_value(false);\n+                continue;\n+            }\n+\n+            // We already verified the block in ProcessNewBlock, so no need to check merkle roots here again\n+\n+            // Header is valid/has work, merkle tree and segwit merkle tree are good...RELAY NOW\n+            // (but if it does not build on our best tip, let the SendMessages loop relay it)\n+            if (!IsInitialBlockDownload() && m_chain.Tip() == pindex->pprev)\n+                GetMainSignals().NewPoWValidBlock(pindex, pblock);\n+\n+            BlockValidationState state;\n+            try {\n+                FlatFilePos blockPos = SaveBlockToDisk(*pblock, pindex->nHeight, chainparams, nullptr);\n+                if (blockPos.IsNull()) {\n+                    error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__).c_str());\n+                    result_promise.set_value(false);\n+                    continue;\n+                }\n+                ReceivedBlockTransactions(*pblock, pindex, blockPos, chainparams.GetConsensus());\n+            } catch (const std::runtime_error& e) {\n+                AbortNode(state, std::string(\"System error: \") + e.what());\n+            }\n+\n+            FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n+\n+            CheckBlockIndex(chainparams.GetConsensus());\n+\n+            if (state.IsError()) {\n+                result_promise.set_value(false);\n+                continue;\n+            }\n+        }\n \n         NotifyHeaderTip();\n \n@@ -3869,8 +3942,6 @@ std::future<bool> CChainState::ProcessNewBlock(const CChainParams& chainparams,\n     bool fNewBlock = false;\n \n     {\n-        CBlockIndex *pindex = nullptr;\n-\n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n@@ -3880,7 +3951,7 @@ std::future<bool> CChainState::ProcessNewBlock(const CChainParams& chainparams,\n         bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);\n+            ret = PreWriteCheckBlock(pblock, dos_state, chainparams, nullptr, fForceProcessing, &fNewBlock);\n         }\n         if (!ret || !fNewBlock) {\n             if (!ret) {"
      },
      {
        "sha": "b9477f5f14bed441e73be3e29bf2f329ab289b3b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc8c92de5e67920a60c6ba3e4dff7eea85346837/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc8c92de5e67920a60c6ba3e4dff7eea85346837/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bc8c92de5e67920a60c6ba3e4dff7eea85346837",
        "patch": "@@ -571,6 +571,22 @@ class CChainState {\n     /** Indicates the block validation thread is parked */\n     bool m_block_validation_parked;\n \n+    /**\n+     * Utility function to check if it makes sense to write the given block to\n+     * disk right now.\n+     * Checks whether we already had/have the block and whether it meets DoS\n+     * criteria.\n+     */\n+    bool ShouldMaybeWrite(CBlockIndex* pindex, bool fRequested) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    /**\n+     * Performs initial DoS checks for the given block (assuming ShouldMaybeWrite\n+     * passes).\n+     * Will detect any cases of malleability, ie if this passes, pblock is a\n+     * \"good\" copy of the block.\n+     */\n+    bool PreWriteCheckBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, bool* fShouldWrite) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n public:\n     explicit CChainState(BlockManager& blockman, uint256 from_snapshot_blockhash = uint256());\n "
      }
    ]
  },
  {
    "sha": "2ed0b647435b80946f7f000d573ff4b4e274ca70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWQwYjY0NzQzNWI4MDk0NmY3ZjAwMGQ1NzNmZjRiNGUyNzRjYTcw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-09T15:27:07Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-21T22:02:56Z"
      },
      "message": "Move BlockChecked to a background thread\n\nAs reject messages are required to go out in-order (ie before any\nfurther messages are processed), this sadly requires that we\nfurther delay re-enabling a peer after a block has been processed\nby waiting for current validationinterface callbacks to drain.\n\nThis commit enables further reduction of cs_main in net_processing\nby allowing us to lock cs_peerstate before cs_main in BlockChecked\n(ie allows us to move things which are accessed in BlockChecked,\nincluding DoS state and rejects into CPeerState and out of\nCNodeState).",
      "tree": {
        "sha": "b87ffaf68942b5fc34b9f362941bdcc011322c81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b87ffaf68942b5fc34b9f362941bdcc011322c81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ed0b647435b80946f7f000d573ff4b4e274ca70",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7G+pAACgkQDMUhUxl5\nkaVjAw//Vo1t5G4lSHCy9/zTGt5r/2YaaUmuCKEvLfGhpVmx1lVOKgIwpk0zc97X\nClW6vJnFYxNrk1JNaIF8XZwvTsXenpHOJs91onAIkU/j0He9aUU3aAnk3QD4cC9D\nZkOIY/TH9LNVrXgvWRSM093QOXGw/C8PnyObTjVNxyut31rrjvMK5JbgF9Ey3aRy\nXdEscitNKx6L5cPClpPj9A4c8DR0yak7WUCYvOsPTwhtkbBSaYKkTMTLk5qKY7S6\npe5RE3imNKnHWHnG6h1uB4NUUcMGgJ9In6QeUfLR5RJYlnfW/ybxs/Wx6bNZomHv\n2mLRZT89gM08wd0/mu7DXfgxLj8v/wbDf4dy7WDPnLhYE1McBw4mCC0IL5Cnp76T\ni+4/5kkBR/xnGGFXZuLA9h1GDSL9DG83wThLI01IgGliOlXxJWJLGSjKE40qFV0B\n/RbfekAyZIz9RoCYuLDTAQaq6QDW9cR2J/5Ge7Fue/fK7ddYPh0UrIZvS1trI4xI\nHCLzvcv+Oomi1ZXH4yswsjmTR+66VKcUl1nkIz32B8HJ9PeIrZ4cAA/7YgCB8ny8\n4xeAJQdYguNaj+BD1n3ka5EqUfHyhxVRdUJlwuphHORphhY+MWck7IsUnbSjq2Ig\n9Gg5opr4YbFvwUq7gZjmi5eVMemOw8hfok1oDn/sMjs4+lE7xMg=\n=4Tba\n-----END PGP SIGNATURE-----",
        "payload": "tree b87ffaf68942b5fc34b9f362941bdcc011322c81\nparent bc8c92de5e67920a60c6ba3e4dff7eea85346837\nauthor Matt Corallo <git@bluematt.me> 1560094027 -0400\ncommitter Carl Dong <contact@carldong.me> 1590098576 -0400\n\nMove BlockChecked to a background thread\n\nAs reject messages are required to go out in-order (ie before any\nfurther messages are processed), this sadly requires that we\nfurther delay re-enabling a peer after a block has been processed\nby waiting for current validationinterface callbacks to drain.\n\nThis commit enables further reduction of cs_main in net_processing\nby allowing us to lock cs_peerstate before cs_main in BlockChecked\n(ie allows us to move things which are accessed in BlockChecked,\nincluding DoS state and rejects into CPeerState and out of\nCNodeState).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed0b647435b80946f7f000d573ff4b4e274ca70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed0b647435b80946f7f000d573ff4b4e274ca70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed0b647435b80946f7f000d573ff4b4e274ca70/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc8c92de5e67920a60c6ba3e4dff7eea85346837",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8c92de5e67920a60c6ba3e4dff7eea85346837",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8c92de5e67920a60c6ba3e4dff7eea85346837"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 42,
      "deletions": 14
    },
    "files": [
      {
        "sha": "1f3aa39b680bf38848a01028670b0847e9ba3ea6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "patch": "@@ -264,8 +264,14 @@ struct CPeerState {\n     std::future<bool> pending_block_processing;\n     //! The hash of the block which is pending download.\n     uint256 pending_block_hash;\n+    //! Once we've finished processing a block from this peer, we must still wait for\n+    //! any related callbacks to fire (to ensure, specifically, that rejects go out\n+    //! in order, though this may grow to include more such events in the future).\n+    bool pending_event_wait;\n \n-    CPeerState() {}\n+    CPeerState() {\n+        pending_event_wait = false;\n+    }\n };\n \n \n@@ -3519,7 +3525,7 @@ bool PeerLogicValidation::CheckIfBanned(CNode* pnode)\n     return false;\n }\n \n-bool static IsPendingBlockValidation(CNode* pfrom, CPeerState* peerstate) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate)\n+bool static IsPendingBlockValidation(CConnman* connman, CNode* pfrom, CPeerState* peerstate) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate)\n {\n     if (peerstate->pending_block_processing.valid()) {\n         if (peerstate->pending_block_processing.wait_for(std::chrono::duration<int>::zero()) == std::future_status::ready) {\n@@ -3532,9 +3538,26 @@ bool static IsPendingBlockValidation(CNode* pfrom, CPeerState* peerstate) EXCLUS\n             }\n             peerstate->pending_block_processing = std::future<bool>();\n             peerstate->pending_block_hash = uint256();\n-            return false;\n+\n+            // We need to wait for BlockChecked to fire, so we don't re-enable\n+            // this peer until the current pending validationinterface callbacks\n+            // drain. This ensures bans and reject messages happen in order, as\n+            // expected by some of our functional tests.\n+            peerstate->pending_event_wait = true;\n+            NodeId node_id = pfrom->GetId();\n+            CallFunctionInValidationInterfaceQueue([node_id, connman] {\n+                LOCK(cs_peerstate);\n+                CPeerState* peerstate = PeerState(node_id);\n+                if (peerstate != nullptr) {\n+                    peerstate->pending_event_wait = false;\n+                    connman->WakeMessageHandler();\n+                }\n+            });\n+            return true;\n         } else { return true; }\n-    } else { return false; }\n+    } else {\n+        return peerstate->pending_event_wait;\n+    }\n }\n \n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n@@ -3564,7 +3587,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         }\n     }\n \n-    if (IsPendingBlockValidation(pfrom, peerstate)) {\n+    if (IsPendingBlockValidation(connman, pfrom, peerstate)) {\n         return false;\n     }\n     {\n@@ -3821,7 +3844,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         LOCK(cs_peerstate);\n         CPeerState* peerstate = PeerState(pto->GetId());\n \n-        if (IsPendingBlockValidation(pto, peerstate)) {\n+        if (IsPendingBlockValidation(connman, pto, peerstate)) {\n             return true;\n         }\n "
      },
      {
        "sha": "d7b2b50594f9459f76583c346addd7060bfb0adf",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "patch": "@@ -947,6 +947,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     RegisterSharedValidationInterface(sc);\n     BlockValidationState dos_state;\n     bool new_block = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true).get();\n+    SyncWithValidationInterfaceQueue();\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && dos_state.IsValid()) {\n         return \"duplicate\";"
      },
      {
        "sha": "661754b7b86338023e4108288484f50116bc75b2",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "patch": "@@ -22,7 +22,7 @@ BOOST_AUTO_TEST_CASE(unregister_validation_interface_race)\n \n     // Start thread to generate notifications\n     std::thread gen{[&] {\n-        const CBlock block_dummy;\n+        const std::shared_ptr<const CBlock> block_dummy = std::make_shared<const CBlock>();\n         const BlockValidationState state_dummy;\n         while (generate) {\n             GetMainSignals().BlockChecked(block_dummy, state_dummy);\n@@ -63,7 +63,7 @@ class TestInterface : public CValidationInterface\n     }\n     static void Call()\n     {\n-        CBlock block;\n+        std::shared_ptr<const CBlock> block = std::make_shared<CBlock>();\n         BlockValidationState state;\n         GetMainSignals().BlockChecked(block, state);\n     }"
      },
      {
        "sha": "0655493aa97f4c788bf310ed6226e92c9f050ada",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "patch": "@@ -2601,7 +2601,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     {\n         CCoinsViewCache view(&CoinsTip());\n         bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n-        GetMainSignals().BlockChecked(blockConnecting, state);\n+        GetMainSignals().BlockChecked(pthisBlock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);"
      },
      {
        "sha": "a427909e5ec1b0968710872eb33ae76b52bd7664",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "patch": "@@ -244,10 +244,12 @@ void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n                           locator.IsNull() ? \"null\" : locator.vHave.front().ToString());\n }\n \n-void CMainSignals::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n-    LOG_EVENT(\"%s: block hash=%s state=%s\", __func__,\n-              block.GetHash().ToString(), state.ToString());\n-    m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.BlockChecked(block, state); });\n+void CMainSignals::BlockChecked(const std::shared_ptr<const CBlock> &pblock, const BlockValidationState& state) {\n+    auto event = [pblock, state, this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.BlockChecked(*pblock, state); });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s state=%s\", __func__,\n+                          pblock->GetHash().ToString(), state.ToString());\n }\n \n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {"
      },
      {
        "sha": "97106c8226e5aa00d1fd1b04b9fd057bd3d12da8",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0b647435b80946f7f000d573ff4b4e274ca70/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "patch": "@@ -165,6 +165,8 @@ class CValidationInterface {\n      * If the provided BlockValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n+     *\n+     * Called on a background thread.\n      */\n     virtual void BlockChecked(const CBlock&, const BlockValidationState&) {}\n     /**\n@@ -207,7 +209,7 @@ class CMainSignals {\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &, const CBlockIndex* pindex);\n     void ChainStateFlushed(const CBlockLocator &);\n-    void BlockChecked(const CBlock&, const BlockValidationState&);\n+    void BlockChecked(const std::shared_ptr<const CBlock> &, const BlockValidationState&);\n     void NewPoWValidBlock(const CBlockIndex *, const std::shared_ptr<const CBlock>&);\n     void BlockProcessed();\n };"
      }
    ]
  },
  {
    "sha": "d3a941e8c54f318952f702db24fff58e3ea419f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2E5NDFlOGM1NGYzMTg5NTJmNzAyZGIyNGZmZjU4ZTNlYTQxOWY3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-17T21:43:31Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-21T22:02:57Z"
      },
      "message": "Move mapBlockSource to cs_peerstate from cs_main\n\nThis technically resolves a race where entries are added to\nmapBlockSource before we know that they're non-malleated and then\nremoved only after PNB returns, though in practice this wasn't an\nissue since all access to mapBlockSource already held cs_peerstate.",
      "tree": {
        "sha": "6bd3ca5cedf64f40afe78e695e3b70b244b4ee79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bd3ca5cedf64f40afe78e695e3b70b244b4ee79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3a941e8c54f318952f702db24fff58e3ea419f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7G+pEACgkQDMUhUxl5\nkaUMzQ/+KDVjV+sm0GhZ1jio7ntko3g2bJC1KMi3isOzSz8LwAQsF6BygeH/XeIz\n0gxV1dImIKf7X0UHxUjr70Kl7dLkZgLcbWsq2++5paCtMUJIcG13fhuRmKF+Wm1N\nfVFpFO0WNKJlU/juyhGQv2KvCDbhPSxG8bEgzdpxP6dVDnxMQRKD+ldchGG4pCOZ\nremObqtEtZek6TV3bfgqjUWJz6kmneVhxtb8mltMHNaLy67p9qkYlyn1zmU9ySbh\npuAPUFMzOMMv/glvHI2KqTKzYFau06k7eM3ACoORRi36zy2T2+E1EYA/kmr71ScE\nvP9z1EkvKWrABE0jh2hdSsgeiKsUu3vhb0+4Db49M64derygVEqjc4k9XoTTkfCr\nxzT+0Mq38NeqQobB9OlvzX2V/AHD0rD2JwGpyw+nUxuAb+Va3hMtyzdjiuKbQ0uV\ne9BWN9DbrLAr03VLhq+IBVWSEUe8+qo99xUbUEFb8Jm5bXzouP0D9Os/L61i9gfG\nL96LdLIJQXJmILCAzch621RPEajul+N8n2vpiuzW5pyCiwBNYRzB2jtJW17Bh5Jd\nkBt2u3jHk2e8MSuAa9Y+QRTaJl0i1NYOoUyS4zS9oDAzovRYrqQ56kffyHUr5En5\nvlrjM67+ezUtIDwjsz1swnQRLHozdzuaYp9L+D1/0GTymGXmFWI=\n=pJ9m\n-----END PGP SIGNATURE-----",
        "payload": "tree 6bd3ca5cedf64f40afe78e695e3b70b244b4ee79\nparent 2ed0b647435b80946f7f000d573ff4b4e274ca70\nauthor Matt Corallo <git@bluematt.me> 1560807811 -0400\ncommitter Carl Dong <contact@carldong.me> 1590098577 -0400\n\nMove mapBlockSource to cs_peerstate from cs_main\n\nThis technically resolves a race where entries are added to\nmapBlockSource before we know that they're non-malleated and then\nremoved only after PNB returns, though in practice this wasn't an\nissue since all access to mapBlockSource already held cs_peerstate.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a941e8c54f318952f702db24fff58e3ea419f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3a941e8c54f318952f702db24fff58e3ea419f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a941e8c54f318952f702db24fff58e3ea419f7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed0b647435b80946f7f000d573ff4b4e274ca70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed0b647435b80946f7f000d573ff4b4e274ca70"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 20,
      "deletions": 28
    },
    "files": [
      {
        "sha": "9ced5ef5065f7981c3bd8e23f683380a8d8b9e6d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 28,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3a941e8c54f318952f702db24fff58e3ea419f7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3a941e8c54f318952f702db24fff58e3ea419f7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d3a941e8c54f318952f702db24fff58e3ea419f7",
        "patch": "@@ -144,6 +144,8 @@ std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n \n+/** Note that this must be locked BEFORE cs_main! */\n+RecursiveMutex cs_peerstate ACQUIRED_BEFORE(cs_main);\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\") EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -163,16 +165,11 @@ namespace {\n      * ProcessNewBlock state.IsValid()). See the ProcessNewBlock docs for\n      * more info.\n      *\n-     * TODO: There is currently a race on the above - we add to this map\n-     * before calling PNB and then remove it if the block was malleated. We\n-     * should be able to just not add it to the map if the block is malleated.\n-     * (This is fixed later in this patch set, so should never hit master!)\n-     *\n      * However, things which are not on our best chain but were written to\n      * disk anyway may sit around in here forever, so be careful relying on\n      * its size for any decisions.\n      */\n-    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource GUARDED_BY(cs_main);\n+    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource GUARDED_BY(cs_peerstate);\n \n     /**\n      * Filter for transactions that were recently rejected by\n@@ -467,9 +464,6 @@ struct CNodeState {\n // Keeps track of the time (in microseconds) when transactions were requested last time\n limitedmap<uint256, std::chrono::microseconds> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n \n-/** Note that this must be locked BEFORE cs_main! */\n-RecursiveMutex cs_peerstate;\n-\n /** Map maintaining per-node state. */\n static std::map<NodeId, CPeerState> mapPeerState GUARDED_BY(cs_peerstate);\n \n@@ -686,7 +680,7 @@ static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIV\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate, cs_main)\n {\n     if (count == 0)\n         return;\n@@ -1400,6 +1394,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n  * be OK if it was sent over compact blocks).\n  */\n static void BlockChecked(const CBlock& block, const BlockValidationState& state, CConnman* connman) {\n+    LOCK(cs_peerstate);\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());\n@@ -1809,7 +1804,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, CTxMemPool& mempool, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)\n+bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, CTxMemPool& mempool, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate)\n {\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     size_t nCount = headers.size();\n@@ -2062,7 +2057,6 @@ void static BlockProcessed(CNode* pfrom, CConnman* connman, CPeerState* peerstat\n         // This clears the block from mapBlockSource.\n         BlockChecked(*pblock, state, connman);\n         // Block was valid but we've seen it before. Clear it from mapBlockSource.\n-        LOCK(cs_main);\n         ::mapBlockSource.erase(pblock->GetHash());\n     } else {\n         peerstate->pending_block_hash = pblock->GetHash();\n@@ -3093,10 +3087,6 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n         if (fBlockReconstructed) {\n             // If we got here, we were able to optimistically reconstruct a\n             // block that is in flight from some other peer.\n-            {\n-                LOCK(cs_main);\n-                mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n-            }\n             // Setting fForceProcessing to true means that we bypass some of\n             // our anti-DoS protections in AcceptBlock, which filters\n             // unrequested blocks that might be trying to waste our resources\n@@ -3106,6 +3096,7 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n+            mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             BlockValidationState dos_state;\n             std::future<bool> block_future = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true);\n             BlockProcessed(pfrom, connman, peerstate, pblock, dos_state, block_future);\n@@ -3176,16 +3167,13 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n                 // updated, etc.\n                 MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n-                // mapBlockSource is used for potentially punishing peers and\n-                // updating which peers send us compact blocks, so the race\n-                // between here and cs_main in ProcessNewBlock is fine.\n-                // BIP 152 permits peers to relay compact blocks after validating\n-                // the header only; we should not punish peers if the block turns\n-                // out to be invalid.\n-                mapBlockSource.emplace(resp.blockhash, std::make_pair(pfrom->GetId(), false));\n             }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n+            // BIP 152 permits peers to relay compact blocks after validating\n+            // the header only; we should not punish peers if the block turns\n+            // out to be invalid.\n+            mapBlockSource.emplace(resp.blockhash, std::make_pair(pfrom->GetId(), false));\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n             // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n@@ -3245,11 +3233,16 @@ bool ProcessMessage(CNode* pfrom, CPeerState* peerstate, const std::string& msg_\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n             forceProcessing |= MarkBlockAsReceived(hash);\n-            // mapBlockSource is only used for punishing peers and setting\n-            // which peers send us compact blocks, so the race between here and\n-            // cs_main in ProcessNewBlock is fine.\n-            mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n+        // Note that ProcessNewBlock only guarantees that we have no need to ever re-download\n+        // this block in case forceProcessing is set to true or the future returns true, but\n+        // adding to mapBlockSource will prevent us from re-downloading this block until the\n+        // future completes. This is ok, as, if we requested the block we'll set forceProcessing,\n+        // and if the block is the same or higher work as our tip the block will be accepted\n+        // (and the future will return true). Thus, a peer sending us an unsolicited block can\n+        // force us to use FindNextBlocksToDownload to fetch a block, but only if that block\n+        // has less work than our current tip.\n+        mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         BlockValidationState dos_state;\n         std::future<bool> block_future = ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/forceProcessing);\n         BlockProcessed(pfrom, connman, peerstate, pblock, dos_state, block_future);\n@@ -3533,7 +3526,6 @@ bool static IsPendingBlockValidation(CConnman* connman, CNode* pfrom, CPeerState\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n-                LOCK(cs_main);\n                 mapBlockSource.erase(peerstate->pending_block_hash);\n             }\n             peerstate->pending_block_processing = std::future<bool>();"
      }
    ]
  },
  {
    "sha": "d6b1729e642e05738858772f8d2b334b8360b75e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmIxNzI5ZTY0MmUwNTczODg1ODc3MmY4ZDJiMzM0YjgzNjBiNzVl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-18T23:24:08Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-05-21T22:02:58Z"
      },
      "message": "validationinterface: Use NewPoWValidBlock as sync test instead.",
      "tree": {
        "sha": "eb64b1c5151c3b0f5495f4a05471f08e9ace7ea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb64b1c5151c3b0f5495f4a05471f08e9ace7ea2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6b1729e642e05738858772f8d2b334b8360b75e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl7G+pIACgkQDMUhUxl5\nkaXqdhAAqwNb03i8sVk7mAFWvkkpCk9Q+4dt+AEP1Sj+TsrmjL5rq/X05yJsxqdT\nIECDaI/LjYFQ7OIyUfwNKwX62+a/GZiOM5K6OQaFgn/JeQuxUQFSQqm+p1/IO/FO\nqJYJzzj+BE0vvTkj+F2U60/OJcrXNPwOl4H5OqdvCTDXQdgMf+QXiR7ycXTZsvMu\nq6gjpH3UcIxlUZAB/iTr9DfzHtd03CbumCxHIOqEcLB7FLuuiniRvecRIL6UzLM2\nRpTo0ufHZfWSz8eFc5G5eVvilu/o8JraQHU4/8ijvXd58teoO0WcygNTpajY75+u\nslbBn4eCxoWksFC1fZnX0j4iOneF/wuZs0/VbOb8OwUiMYUCDP+Iy1Ka1Z0E1fUG\ngca7aDG13noaXPIND1dVlJrTv8GI+UAGh4Nel17hYuJP12KzVrCLQIJcm2i9Z04c\n3zb8x1Ab4bzLY6GAIfBw3yXZ5nP2NLD824YZTbF36W+AeCKhoW8KXSlz9d9NcYuH\nA5DOz5N7peLouiIx98ZpaVBzQO7Ybl0MzX8Hb8bJh90/w6G5u7iMV0a12eMFIWwp\ncedZeO4PI0tV5Eis7t3gp7XHJXzwMIgHdK2eKdojvwnT5IgdBdNk7Ba/PQL9JS5P\nkHYoHLDz0DO5bZFDOHa15jBdudnMHz0au7gtBhvb1oe6VcfVFPY=\n=wPEB\n-----END PGP SIGNATURE-----",
        "payload": "tree eb64b1c5151c3b0f5495f4a05471f08e9ace7ea2\nparent d3a941e8c54f318952f702db24fff58e3ea419f7\nauthor Carl Dong <contact@carldong.me> 1589844248 -0400\ncommitter Carl Dong <contact@carldong.me> 1590098578 -0400\n\nvalidationinterface: Use NewPoWValidBlock as sync test instead.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b1729e642e05738858772f8d2b334b8360b75e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b1729e642e05738858772f8d2b334b8360b75e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b1729e642e05738858772f8d2b334b8360b75e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3a941e8c54f318952f702db24fff58e3ea419f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3a941e8c54f318952f702db24fff58e3ea419f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3a941e8c54f318952f702db24fff58e3ea419f7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "317e4390973c84b0c690d73f0add7bfb2fdbca96",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b1729e642e05738858772f8d2b334b8360b75e/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b1729e642e05738858772f8d2b334b8360b75e/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=d6b1729e642e05738858772f8d2b334b8360b75e",
        "patch": "@@ -57,15 +57,15 @@ class TestInterface : public CValidationInterface\n     {\n         if (m_on_destroy) m_on_destroy();\n     }\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override\n+    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) override\n     {\n         if (m_on_call) m_on_call();\n     }\n     static void Call()\n     {\n         std::shared_ptr<const CBlock> block = std::make_shared<CBlock>();\n         BlockValidationState state;\n-        GetMainSignals().BlockChecked(block, state);\n+        GetMainSignals().NewPoWValidBlock(nullptr, std::make_shared<CBlock>());\n     }\n     std::function<void()> m_on_call;\n     std::function<void()> m_on_destroy;"
      }
    ]
  }
]