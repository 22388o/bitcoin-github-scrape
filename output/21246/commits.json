[
  {
    "sha": "6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTBhNmU3ZDA1MDllNDhhNmNjMDhjNjYwNGEyNTY3MWQ1ZjhjYWI0",
    "commit": {
      "author": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-03-01T14:01:48Z"
      },
      "committer": {
        "name": "Russell O'Connor",
        "email": "roconnor@blockstream.io",
        "date": "2021-03-01T14:01:48Z"
      },
      "message": "Correction for VerifyTaprootCommitment comments\n\nAccording to BIP-341, 'p' is called the taproot *internal* key, not inner key.",
      "tree": {
        "sha": "54a16ceb306673025468c441594d51983e582a17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54a16ceb306673025468c441594d51983e582a17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4/comments",
    "author": {
      "login": "roconnor-blockstream",
      "id": 21371712,
      "node_id": "MDQ6VXNlcjIxMzcxNzEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roconnor-blockstream",
      "html_url": "https://github.com/roconnor-blockstream",
      "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
      "following_url": "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
      "gists_url": "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
      "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
      "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
      "events_url": "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
      "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "roconnor-blockstream",
      "id": 21371712,
      "node_id": "MDQ6VXNlcjIxMzcxNzEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roconnor-blockstream",
      "html_url": "https://github.com/roconnor-blockstream",
      "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
      "following_url": "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
      "gists_url": "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
      "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
      "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
      "events_url": "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
      "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "828bb776d29cbdfad3937ba100c428e3244c652f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/828bb776d29cbdfad3937ba100c428e3244c652f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/828bb776d29cbdfad3937ba100c428e3244c652f"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "20a4ce48b04ea639036614832f3f9835eb030069",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4",
        "patch": "@@ -1834,7 +1834,7 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, const std::vector<unsigned char>& program, const CScript& script, uint256& tapleaf_hash)\n {\n     const int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n-    //! The inner pubkey (x-only, so no Y coordinate parity).\n+    //! The internal pubkey (x-only, so no Y coordinate parity).\n     const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n     //! The output pubkey (taken from the scriptPubKey).\n     const XOnlyPubKey q{uint256(program)};\n@@ -1852,9 +1852,9 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n         }\n         k = ss_branch.GetSHA256();\n     }\n-    // Compute the tweak from the Merkle root and the inner pubkey.\n+    // Compute the tweak from the Merkle root and the internal pubkey.\n     k = (CHashWriter(HASHER_TAPTWEAK) << MakeSpan(p) << k).GetSHA256();\n-    // Verify that the output pubkey matches the tweaked inner pubkey, after correcting for parity.\n+    // Verify that the output pubkey matches the tweaked internal pubkey, after correcting for parity.\n     return q.CheckPayToContract(p, k, control[0] & 1);\n }\n "
      },
      {
        "sha": "183a43abd4ea4f99c8180ffe587b291050fc6805",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4",
        "patch": "@@ -177,17 +177,17 @@ def default_negflag(ctx):\n     \"\"\"Default expression for \"negflag\": tap.negflag.\"\"\"\n     return get(ctx, \"tap\").negflag\n \n-def default_pubkey_inner(ctx):\n-    \"\"\"Default expression for \"pubkey_inner\": tap.inner_pubkey.\"\"\"\n-    return get(ctx, \"tap\").inner_pubkey\n+def default_pubkey_internal(ctx):\n+    \"\"\"Default expression for \"pubkey_internal\": tap.internal_pubkey.\"\"\"\n+    return get(ctx, \"tap\").internal_pubkey\n \n def default_merklebranch(ctx):\n     \"\"\"Default expression for \"merklebranch\": tapleaf.merklebranch.\"\"\"\n     return get(ctx, \"tapleaf\").merklebranch\n \n def default_controlblock(ctx):\n-    \"\"\"Default expression for \"controlblock\": combine leafversion, negflag, pubkey_inner, merklebranch.\"\"\"\n-    return bytes([get(ctx, \"leafversion\") + get(ctx, \"negflag\")]) + get(ctx, \"pubkey_inner\") + get(ctx, \"merklebranch\")\n+    \"\"\"Default expression for \"controlblock\": combine leafversion, negflag, pubkey_internal, merklebranch.\"\"\"\n+    return bytes([get(ctx, \"leafversion\") + get(ctx, \"negflag\")]) + get(ctx, \"pubkey_internal\") + get(ctx, \"merklebranch\")\n \n def default_sighash(ctx):\n     \"\"\"Default expression for \"sighash\": depending on mode, compute BIP341, BIP143, or legacy sighash.\"\"\"\n@@ -341,9 +341,9 @@ def default_scriptsig(ctx):\n     \"tapleaf\": default_tapleaf,\n     # The script to push, and include in the sighash, for a taproot script path spend.\n     \"script_taproot\": default_script_taproot,\n-    # The inner pubkey for a taproot script path spend (32 bytes).\n-    \"pubkey_inner\": default_pubkey_inner,\n-    # The negation flag of the inner pubkey for a taproot script path spend.\n+    # The internal pubkey for a taproot script path spend (32 bytes).\n+    \"pubkey_internal\": default_pubkey_internal,\n+    # The negation flag of the internal pubkey for a taproot script path spend.\n     \"negflag\": default_negflag,\n     # The leaf version to include in the sighash (this does not affect the one in the control block).\n     \"leafversion\": default_leafversion,\n@@ -780,8 +780,8 @@ def mutate(spk):\n     add_spender(spenders, \"spendpath/negflag\", tap=tap, leaf=\"128deep\", **SINGLE_SIG, key=secs[0], failure={\"negflag\": lambda ctx: 1 - default_negflag(ctx)}, **ERR_WITNESS_PROGRAM_MISMATCH)\n     # Test that bitflips in the Merkle branch invalidate it.\n     add_spender(spenders, \"spendpath/bitflipmerkle\", tap=tap, leaf=\"128deep\", **SINGLE_SIG, key=secs[0], failure={\"merklebranch\": bitflipper(default_merklebranch)}, **ERR_WITNESS_PROGRAM_MISMATCH)\n-    # Test that bitflips in the inner pubkey invalidate it.\n-    add_spender(spenders, \"spendpath/bitflippubkey\", tap=tap, leaf=\"128deep\", **SINGLE_SIG, key=secs[0], failure={\"pubkey_inner\": bitflipper(default_pubkey_inner)}, **ERR_WITNESS_PROGRAM_MISMATCH)\n+    # Test that bitflips in the internal pubkey invalidate it.\n+    add_spender(spenders, \"spendpath/bitflippubkey\", tap=tap, leaf=\"128deep\", **SINGLE_SIG, key=secs[0], failure={\"pubkey_internal\": bitflipper(default_pubkey_internal)}, **ERR_WITNESS_PROGRAM_MISMATCH)\n     # Test that empty witnesses are invalid.\n     add_spender(spenders, \"spendpath/emptywit\", tap=tap, leaf=\"128deep\", **SINGLE_SIG, key=secs[0], failure={\"witness\": []}, **ERR_EMPTY_WITNESS)\n     # Test that adding garbage to the control block invalidates it."
      },
      {
        "sha": "3c9b8a6e69eb46d68ccfabfa8a42b232c3fcb76c",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=6a0a6e7d0509e48a6cc08c6604a25671d5f8cab4",
        "patch": "@@ -826,11 +826,11 @@ def taproot_tree_helper(scripts):\n \n # A TaprootInfo object has the following fields:\n # - scriptPubKey: the scriptPubKey (witness v1 CScript)\n-# - inner_pubkey: the inner pubkey (32 bytes)\n-# - negflag: whether the pubkey in the scriptPubKey was negated from inner_pubkey+tweak*G (bool).\n+# - internal_pubkey: the internal pubkey (32 bytes)\n+# - negflag: whether the pubkey in the scriptPubKey was negated from internal_pubkey+tweak*G (bool).\n # - tweak: the tweak (32 bytes)\n # - leaves: a dict of name -> TaprootLeafInfo objects for all known leaves\n-TaprootInfo = namedtuple(\"TaprootInfo\", \"scriptPubKey,inner_pubkey,negflag,tweak,leaves\")\n+TaprootInfo = namedtuple(\"TaprootInfo\", \"scriptPubKey,internal_pubkey,negflag,tweak,leaves\")\n \n # A TaprootLeafInfo object has the following fields:\n # - script: the leaf script (CScript or bytes)"
      }
    ]
  }
]