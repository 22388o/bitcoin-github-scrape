[
  {
    "sha": "d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGMyMThmOWMyNjhiMDBlZDliYjhlN2VlMDBlOTgwYTBmYTMyNmRl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-24T03:56:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-31T20:59:38Z"
      },
      "message": "[tests] Functional tests call self.start_node(s) and self.stop_node(s)\n\nThis commit changes the individual test scripts to call the\nstart_node(s) and stop_node(s) methods in BitcoinTestFramework.",
      "tree": {
        "sha": "23f699605512b7d3c643461b8939724edc3850e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23f699605512b7d3c643461b8939724edc3850e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1c9a95379d364ea8ca5d3d0789e8afb1a99bb8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c9a95379d364ea8ca5d3d0789e8afb1a99bb8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c9a95379d364ea8ca5d3d0789e8afb1a99bb8b"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 93,
      "deletions": 106
    },
    "files": [
      {
        "sha": "c87c02492d7cc488196706311d65bff7f284ff81",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -73,8 +73,8 @@ def run_test(self):\n \n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in either node's mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -100,8 +100,8 @@ def run_test(self):\n         balance = newbalance\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -120,8 +120,8 @@ def run_test(self):\n         balance = newbalance\n \n         # Remove using high relay fee again\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "9d17faac51ba2a5da6e62636f35140d83a1516a3",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -45,7 +45,7 @@\n                                      msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_node, p2p_port, assert_equal)\n+from test_framework.util import (p2p_port, assert_equal)\n \n class BaseNode(NodeConnCB):\n     def send_header_for_blocks(self, new_blocks):\n@@ -63,7 +63,7 @@ def setup_network(self):\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid.\n-        self.nodes = [start_node(0, self.options.tmpdir)]\n+        self.nodes = [self.start_node(0, self.options.tmpdir)]\n \n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n@@ -162,14 +162,14 @@ def run_test(self):\n             height += 1\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n+        self.nodes.append(self.start_node(1, self.options.tmpdir,\n                                      [\"-assumevalid=\" + hex(block102.sha256)]))\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n         node1.wait_for_verack()\n \n-        self.nodes.append(start_node(2, self.options.tmpdir,\n+        self.nodes.append(self.start_node(2, self.options.tmpdir,\n                                      [\"-assumevalid=\" + hex(block102.sha256)]))\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))"
      },
      {
        "sha": "b90b0ca62842eb28d04a25f5ff96ce19df2d56d1",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -239,7 +239,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n \n         # Restart all\n         self.test.clear_all_connections()\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         shutil.rmtree(self.options.tmpdir + \"/node0\")\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "0e868945d611f78c05be0fc75e4c63805146c410",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -24,6 +24,7 @@\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n     assert_is_hash_string,\n+    connect_nodes_bi,\n )\n \n "
      },
      {
        "sha": "cbc97fe222a4532da76f4de6d886329917ffca73",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -38,12 +38,12 @@ def __init__(self):\n     def setup_network(self, split=False):\n         extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n                       for i in range(self.num_nodes)]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         bitcoind_processes[1].wait()\n-        self.nodes[1] = start_node(1, self.options.tmpdir, extra_args[1])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "89b68aeb25e6a0bf8120af1f7bac0126e1b7e647",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -9,10 +9,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (assert_equal,\n                                  assert_raises_jsonrpc,\n-                                 connect_nodes_bi,\n-                                 start_node,\n-                                 stop_node,\n-                                 )\n+                                 connect_nodes_bi)\n \n class DisconnectBanTest(BitcoinTestFramework):\n \n@@ -68,9 +65,9 @@ def run_test(self):\n         self.nodes[1].setmocktime(old_time + 3)\n         assert_equal(len(self.nodes[1].listbanned()), 3)\n \n-        stop_node(self.nodes[1], 1)\n+        self.stop_node(1)\n \n-        self.nodes[1] = start_node(1, self.options.tmpdir)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n         listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])"
      },
      {
        "sha": "3bcf0a679511f68a4e03b16e36a5788eb60c88af",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -21,10 +21,10 @@ def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n-        self.nodes.append(start_node(0, self.options.tmpdir,\n+        self.nodes.append(self.start_node(0, self.options.tmpdir,\n                             [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n         # Node1 mines block.version=211 blocks\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n+        self.nodes.append(self.start_node(1, self.options.tmpdir,\n                                 [\"-blockversion=211\"]))\n         connect_nodes(self.nodes[1], 0)\n "
      },
      {
        "sha": "25bfb3f9a8efaf426aa8f1ed78187ae68644e959",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -449,12 +449,12 @@ def run_test(self):\n         ############################################################\n         # locked wallet test\n         self.nodes[1].encryptwallet(\"test\")\n+        self.stop_node(0)\n+        self.stop_node(2)\n+        self.stop_node(3)\n         self.nodes.pop(1)\n-        stop_node(self.nodes[0], 0)\n-        stop_node(self.nodes[1], 2)\n-        stop_node(self.nodes[2], 3)\n \n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:"
      },
      {
        "sha": "4fc507821760e8492e32fe1ccd8a622a573de719",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -21,7 +21,7 @@\n \n from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -121,7 +121,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n "
      },
      {
        "sha": "e83e85de138ef421ef01783ee1ef024ae609cfda",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -428,8 +428,8 @@ def run_test (self):\n \n \n         # restart nodes to check for proper serialization/deserialization of watch only address\n-        stop_nodes(self.nodes)\n-        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(2, self.options.tmpdir)\n         address_assert = self.nodes[1].validateaddress(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)"
      },
      {
        "sha": "f23a427d1fff72c3a6f79edd91dfe196186d50c9",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -20,7 +20,7 @@ def run_test(self):\n         nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n         # Restart node 0\n-        nodes[0] = start_node(0, self.options.tmpdir)\n+        nodes[0] = self.start_node(0, self.options.tmpdir)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)"
      },
      {
        "sha": "f69f1c5724ef35694fdb7534018904da673da787",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "66e5bd29e6d244b9e50e108e95b2d517d9f2363e",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -146,8 +146,8 @@ def run_test(self):\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n-        stop_node(self.nodes[0], 0)\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect a test node\n         test_nodes = [TestNode()]"
      },
      {
        "sha": "e0889fd5e9d89eb0bb89cb9ccc8be9fdb5801786",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -63,27 +63,27 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].getrawmempool()), 5)\n \n         self.log.debug(\"Stop-start node0 and node1. Verify that node0 has the transactions in its mempool and node1 does not.\")\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir))\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-persistmempool=0\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-persistmempool=0\"]))\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir))\n         assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "102ca52fc5c3f21264bb2db667652b5dca9aedd2",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -14,8 +14,7 @@\n     assert_equal,\n     assert_raises_jsonrpc,\n     connect_nodes_bi,\n-    p2p_port,\n-)\n+    p2p_port)\n \n \n class NetTest(BitcoinTestFramework):"
      },
      {
        "sha": "ab97596ba35bca1f7f5282612d76bf953ccd0b74",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -1495,8 +1495,8 @@ def test_upgrade_after_activation(self, node, node_id):\n         sync_blocks(self.nodes)\n \n         # Restart with the new binary\n-        stop_node(node, node_id)\n-        self.nodes[node_id] = start_node(node_id, self.options.tmpdir)\n+        self.stop_node(node_id)\n+        self.nodes[node_id] = self.start_node(node_id, self.options.tmpdir)\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "df7e8ce5c1630999ee95a3eb32ac9b2a416b00d9",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -108,22 +108,22 @@ def run_test(self):\n         # is cleared, and restart the node. This should move the versionbit state\n         # to ACTIVE.\n         self.nodes[0].generate(VB_PERIOD)\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getinfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "ae6f843ddce7b0e9bd2935384e1e62d989c11c9c",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -35,7 +35,6 @@\n from test_framework.util import (\n     PORT_MIN,\n     PORT_RANGE,\n-    start_nodes,\n     assert_equal,\n )\n from test_framework.netutil import test_ipv6_local\n@@ -90,7 +89,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "4c3501ad7798a818253f6868d5d556b7b526f80f",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -98,7 +98,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             self.stop_node(0)\n-            self.nodes[0]=start_node(0, self.options.tmpdir, self.full_node_default_args, timewait=900)\n+            self.nodes[0]=self.start_node(0, self.options.tmpdir, self.full_node_default_args, timewait=900)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n                 if j == 0:\n@@ -126,7 +126,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         self.stop_node(1)\n-        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n         self.log.info(\"Current block height: %d\" % height)\n@@ -149,7 +149,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n-        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n@@ -227,13 +227,13 @@ def reorg_back(self):\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n-        node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, timewait=900)\n+        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, timewait=900)\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n         self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n-        node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n+        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n \n         def height(index):\n@@ -307,15 +307,15 @@ def has_block(index):\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n         self.stop_node(node_number)\n-        self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n+        self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads loads successfully when restarting a pruned node after IBD.\n@@ -325,7 +325,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "2cad6269acb7e20401e818fc982cb520a0156393",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -32,7 +32,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "b446baa04dee4bd511a6df16cc4939d7468cebd0",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -10,11 +10,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    start_nodes,\n-    stop_nodes,\n-    assert_equal,\n-)\n+from test_framework.util import assert_equal\n import time\n \n class ReindexTest(BitcoinTestFramework):\n@@ -27,9 +23,9 @@ def __init__(self):\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "533acc532e794de2f0225a925473924e9e0dfeac",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -36,22 +36,22 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         if allow_ips:\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n         pid = bitcoind_processes[0].pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n         Start a node with rpcallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n         # connect to node through non-loopback interface\n         node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n         node.getnetworkinfo()\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux"
      },
      {
        "sha": "482c77863f1920176e2e4a6c83662c62dea7d7a5",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -155,7 +155,7 @@ def setup_network(self):\n         \"\"\"\n         self.nodes = []\n         # Use node0 to mine blocks for input splitting\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n                                                               \"-whitelist=127.0.0.1\"]))\n \n         self.log.info(\"This test is time consuming, please be patient\")\n@@ -191,15 +191,15 @@ def setup_network(self):\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n+        self.nodes.append(self.start_node(1, self.options.tmpdir,\n                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n         node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n \n-        self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[2], 1)\n "
      },
      {
        "sha": "158aa9ae896c75894f433769b105e1e3c0d8cc45",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -14,9 +14,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-)\n+from test_framework.util import assert_equal\n \n class WalletAccountsTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "c38a9bc996e5976126e9ca4c8f58087a9cc6691b",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the dumpwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, start_node, assert_equal, bitcoind_processes)\n+from test_framework.util import (assert_equal, bitcoind_processes)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -66,7 +66,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n@@ -93,7 +93,7 @@ def run_test (self):\n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n-        self.nodes[0] = start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "e7ec72a2484e5018f152b2c7e3aba5c006da1897",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -6,7 +6,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n-    start_node,\n     assert_equal,\n     connect_nodes_bi,\n     assert_start_raises_init_error\n@@ -29,7 +28,7 @@ def run_test (self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n         assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -76,7 +75,7 @@ def run_test (self):\n         self.stop_node(1)\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n         #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n@@ -90,7 +89,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n         #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n "
      },
      {
        "sha": "3e3e8fcddb389044d5faff872aba0e289262fe8f",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n+        self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -178,7 +178,7 @@ def run_test(self):\n         txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         sync_mempools(self.nodes)\n \n-        self.nodes.append(start_node(3, self.options.tmpdir, self.extra_args[3]))\n+        self.nodes.append(self.start_node(3, self.options.tmpdir, self.extra_args[3]))\n         connect_nodes_bi(self.nodes, 0, 3)\n         sync_blocks(self.nodes)\n \n@@ -221,8 +221,8 @@ def run_test(self):\n         assert(found)\n \n         #do some -walletbroadcast tests\n-        stop_nodes(self.nodes)\n-        self.nodes = start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -246,8 +246,8 @@ def run_test(self):\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n \n         #restart the nodes with -walletbroadcast=1\n-        stop_nodes(self.nodes)\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(3, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -348,9 +348,9 @@ def run_test(self):\n         chainlimit = 6\n         for m in maintenance:\n             self.log.info(\"check \" + m)\n-            stop_nodes(self.nodes)\n+            self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.nodes = start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n+            self.nodes = self.start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -397,8 +397,8 @@ def run_test(self):\n \n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "a4507182a24dfa9eac95fee521f9b652132911d0",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -77,18 +77,18 @@ def do_one_round(self):\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n-        self.nodes[0] = start_node(0, self.options.tmpdir)\n-        self.nodes[1] = start_node(1, self.options.tmpdir)\n-        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n+        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)\n         connect_nodes(self.nodes[2], 0)\n \n     def stop_three(self):\n-        stop_node(self.nodes[0], 0)\n-        stop_node(self.nodes[1], 1)\n-        stop_node(self.nodes[2], 2)\n+        self.stop_node(0)\n+        self.stop_node(1)\n+        self.stop_node(2)\n \n     def erase_three(self):\n         os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")"
      },
      {
        "sha": "a8600e82f64febf888c985d2b6de8d4b1354c507",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -58,18 +58,16 @@ def run_test (self):\n         assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n         \n         #restart bitcoind\n-        self.nodes[0].stop()\n-        bitcoind_processes[0].wait()\n-        self.nodes[0] = start_node(0,self.options.tmpdir)\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0,self.options.tmpdir)\n         \n         tx3 = self.nodes[0].gettransaction(txid3)\n         assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n         \n-        self.nodes[0].stop()\n-        bitcoind_processes[0].wait()\n+        self.stop_node(0)\n         \n         #restart bitcoind with zapwallettxes\n-        self.nodes[0] = start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n         \n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n         #there must be a expection because the unconfirmed wallettx0 must be gone by now"
      },
      {
        "sha": "2bf684be24129b6402b62faa5d7459e236d5b8af",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "patch": "@@ -42,7 +42,7 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n             [],\n             [],"
      }
    ]
  },
  {
    "sha": "a433d8a15e165cfb42e44319d608365603f64e0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDMzZDhhMTVlMTY1Y2ZiNDJlNDQzMTlkNjA4MzY1NjAzZjY0ZTBj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-08T15:04:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-31T20:59:38Z"
      },
      "message": "[tests] Update start/stop node functions to be private module functions\n\nThis commit marks the start/stop functions in util.py as private module\nfunctions. A future PR will remove these entirely and move the\nfunctionality directly into the BitcoinTestFramework class, but setting them as\nprivate in this PR will prevent anyone from accidentally calling them\nbefore that future PR is merged.",
      "tree": {
        "sha": "4695b9485202f58795e836c0c09351838fc86089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4695b9485202f58795e836c0c09351838fc86089"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a433d8a15e165cfb42e44319d608365603f64e0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a433d8a15e165cfb42e44319d608365603f64e0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a433d8a15e165cfb42e44319d608365603f64e0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a433d8a15e165cfb42e44319d608365603f64e0c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8c218f9c268b00ed9bb8e7ee00e980a0fa326de"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 34,
      "deletions": 24
    },
    "files": [
      {
        "sha": "1fb337326b79542e217ca266b8fd879697616f93",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a433d8a15e165cfb42e44319d608365603f64e0c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a433d8a15e165cfb42e44319d608365603f64e0c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=a433d8a15e165cfb42e44319d608365603f64e0c",
        "patch": "@@ -31,10 +31,10 @@\n     p2p_port,\n     rpc_url,\n     set_node_times,\n-    start_node,\n-    start_nodes,\n-    stop_node,\n-    stop_nodes,\n+    _start_node,\n+    _start_nodes,\n+    _stop_node,\n+    _stop_nodes,\n     sync_blocks,\n     sync_mempools,\n     wait_for_bitcoind_start,\n@@ -91,7 +91,7 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = _start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -194,16 +194,16 @@ def main(self):\n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n     def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n+        return _start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n \n     def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+        return _start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n \n     def stop_node(self, num_node):\n-        stop_node(self.nodes[num_node], num_node)\n+        _stop_node(self.nodes[num_node], num_node)\n \n     def stop_nodes(self):\n-        stop_nodes(self.nodes)\n+        _stop_nodes(self.nodes)\n \n     def split_network(self):\n         \"\"\""
      },
      {
        "sha": "2b0f32c2b6cbfba2533e381547bd40d356dd12f1",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a433d8a15e165cfb42e44319d608365603f64e0c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a433d8a15e165cfb42e44319d608365603f64e0c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=a433d8a15e165cfb42e44319d608365603f64e0c",
        "patch": "@@ -227,10 +227,11 @@ def wait_for_bitcoind_start(process, url, i):\n         time.sleep(0.25)\n \n \n-def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-    \"\"\"\n-    Start a bitcoind and return RPC connection to it\n-    \"\"\"\n+def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+    \"\"\"Start a bitcoind and return RPC connection to it\n+\n+    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n+\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n@@ -251,8 +252,8 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=None):\n     with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n         try:\n-            node = start_node(i, dirname, extra_args, stderr=log_stderr)\n-            stop_node(node, i)\n+            node = _start_node(i, dirname, extra_args, stderr=log_stderr)\n+            _stop_node(node, i)\n         except Exception as e:\n             assert 'bitcoind exited' in str(e) #node must have shutdown\n             if expected_msg is not None:\n@@ -267,27 +268,32 @@ def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=Non\n                 assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n             raise AssertionError(assert_msg)\n \n-def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-    \"\"\"\n-    Start multiple bitcoinds, return RPC connections to them\n-    \"\"\"\n+def _start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    \"\"\"Start multiple bitcoinds, return RPC connections to them\n+    \n+    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n+\n     if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n     if binary is None: binary = [ None for _ in range(num_nodes) ]\n     assert_equal(len(extra_args), num_nodes)\n     assert_equal(len(binary), num_nodes)\n     rpcs = []\n     try:\n         for i in range(num_nodes):\n-            rpcs.append(start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+            rpcs.append(_start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n     except: # If one node failed to start, stop the others\n-        stop_nodes(rpcs)\n+        _stop_nodes(rpcs)\n         raise\n     return rpcs\n \n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n \n-def stop_node(node, i):\n+def _stop_node(node, i):\n+    \"\"\"Stop a bitcoind test node\n+\n+    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n+\n     logger.debug(\"Stopping node %d\" % i)\n     try:\n         node.stop()\n@@ -297,9 +303,13 @@ def stop_node(node, i):\n     assert_equal(return_code, 0)\n     del bitcoind_processes[i]\n \n-def stop_nodes(nodes):\n+def _stop_nodes(nodes):\n+    \"\"\"Stop multiple bitcoind test nodes\n+\n+    This function should only be called from within test_framework, not by individual test scripts.\"\"\"\n+\n     for i, node in enumerate(nodes):\n-        stop_node(node, i)\n+        _stop_node(node, i)\n     assert not bitcoind_processes.values() # All connections must be gone now\n \n def set_node_times(nodes, t):"
      }
    ]
  },
  {
    "sha": "53f6775fe14417a5b975a40b3c0964a9e86d5f39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2Y2Nzc1ZmUxNDQxN2E1Yjk3NWE0MGIzYzA5NjRhOWU4NmQ1ZjM5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-01T14:08:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-01T14:08:24Z"
      },
      "message": "fixup: fix nits",
      "tree": {
        "sha": "f77cf62282cd7d3c5304223a23faf32d1d2a3b80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f77cf62282cd7d3c5304223a23faf32d1d2a3b80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53f6775fe14417a5b975a40b3c0964a9e86d5f39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53f6775fe14417a5b975a40b3c0964a9e86d5f39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53f6775fe14417a5b975a40b3c0964a9e86d5f39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53f6775fe14417a5b975a40b3c0964a9e86d5f39/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a433d8a15e165cfb42e44319d608365603f64e0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a433d8a15e165cfb42e44319d608365603f64e0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a433d8a15e165cfb42e44319d608365603f64e0c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b6112c728083a1a79b32fb096470c51c1e163cee",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53f6775fe14417a5b975a40b3c0964a9e86d5f39/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53f6775fe14417a5b975a40b3c0964a9e86d5f39/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=53f6775fe14417a5b975a40b3c0964a9e86d5f39",
        "patch": "@@ -24,7 +24,6 @@\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n     assert_is_hash_string,\n-    connect_nodes_bi,\n )\n \n "
      },
      {
        "sha": "c41afe2b93853dd5115f75d4580c2f8bb9b8a3a4",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53f6775fe14417a5b975a40b3c0964a9e86d5f39/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53f6775fe14417a5b975a40b3c0964a9e86d5f39/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=53f6775fe14417a5b975a40b3c0964a9e86d5f39",
        "patch": "@@ -448,10 +448,10 @@ def run_test(self):\n \n         ############################################################\n         # locked wallet test\n-        self.nodes[1].encryptwallet(\"test\")\n         self.stop_node(0)\n         self.stop_node(2)\n         self.stop_node(3)\n+        self.nodes[1].encryptwallet(\"test\")\n         self.nodes.pop(1)\n \n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)"
      },
      {
        "sha": "fb460644413ac9157f784aba39a1258b95780af9",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53f6775fe14417a5b975a40b3c0964a9e86d5f39/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53f6775fe14417a5b975a40b3c0964a9e86d5f39/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=53f6775fe14417a5b975a40b3c0964a9e86d5f39",
        "patch": "@@ -14,7 +14,8 @@\n     assert_equal,\n     assert_raises_jsonrpc,\n     connect_nodes_bi,\n-    p2p_port)\n+    p2p_port,\n+)\n \n \n class NetTest(BitcoinTestFramework):"
      }
    ]
  }
]