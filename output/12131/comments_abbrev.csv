TheBlueMatt,2018-01-09T21:42:59Z,Are there demos of scripts based on this/BIP117 anywhere? eg has someone sat down and rewritten the Lightning scripts or TumbleBit scripts to use this stuff to compare the cost/privacy tradeoffs? What about example usage for hiding multisig?,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356423600,356423600,
maaku,2018-01-09T22:15:39Z,"There are some examples inside the BIPs:\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0116.mediawiki\nhttps://github.com/bitcoin/bips/blob/master/bip-0117.mediawiki\n\nIt is specifically anticipated that ALL instances of MAST would be of the following:\n\n> redeemScript: `[TOALTSTACK]*N OVER HASH256 <root> 1 MERKLEBRANCHVERIFY 2DROP 2DROP`\n> witness: `<policyScript> <proof> <arg1> .",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356432048,356432048,
TheBlueMatt,2018-01-09T22:49:25Z,"Hmm, I was hoping for somewhat larger scripts. Specifically, do you have a list of scripts which are cheaper to do using a merkle-hidden tail call than normally outside of large-multisig examples?",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356440036,356440036,
maaku,2018-01-09T23:02:21Z,"Basically every script where you are eliding, at minimum, a hash or pubkey push. Sorry for the obtuseness, but it seems like that describes just about anything and it didn't seem appropriate to overload the BIP with examples of everything beyond what was necessary to illustrate the concept. I would certainly like a lightning developer to show how those scripts could be reformulated to use tail-cal",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356442915,356442915,
TheBlueMatt,2018-01-09T23:05:07Z,"Hmm, well my primary motivation for asking was to get a better sense of the cost of using MBV+tail-call in practice. Comparing the cost of LN + TumbleBit scripts seems like an obvious route to figure that out, as it seems to me the only obvious user of something like this would be small-n large-m multisig, which seems somewhat of a waste.",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356443498,356443498,
maaku,2018-01-09T23:06:31Z,It seems rather to me that the obvious user of something like this is 'everybody' for the fungibility improvement.,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356443782,356443782,
TheBlueMatt,2018-01-09T23:08:51Z,"Hence my concern - ideally ""everyone"" would use something like this for fungibility reasons, but I'm highly skeptical anyone will pay a material difference in fees to do so. Obviously I'm not suggesting we go through all the fun of SegWit again to adjust the discount to make a MAST extra branch free, but getting a good idea of exactly what that cost is for common protocols would be useful.",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356444255,356444255,
maaku,2018-01-09T23:13:44Z,I think your intuition for the cost savings is off. Right now even a 2-of-3 multisig ends up costing about the same as a MAST of 2-of-2 vs having an extra (unused) pubkey. Likewise the 2of2 -or- CSV 1of1. And when we switch to Schnorr signatures basically any multisig becomes cheaper in the MAST construct because they all reduce to a MAST of 1of1's.,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356445236,356445236,
ghost,2018-01-10T01:26:34Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356469403,356469403,
chiguireitor,2018-01-11T12:28:13Z,"Conceptual question here: am i reading the code right or is the branch size limited to 9997 branches? Imho, having arbitrarily long branching trees could allow for really interesting stuff",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356920088,356920088,
kallewoof,2018-01-11T13:56:41Z,"@chiguireitor I believe the 9997 cap is basically representing the maximum depth in the tree. I think that shrinks if you want to pick multiple entries, though. I could be wrong. @maaku?",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356940840,356940840,
maaku,2018-01-11T14:33:43Z,"I had to grep the diff to figure out what @chiguireitor was referring to. I assume it is the comment about MAX_STACK_SIZE limiting the number of elements that can be proven from a Merkle tree at once. That number is actually an error, as it should be 997, not 9997 as MAX_STACK_SIZE is a constant limit of 1,000 elements and 3 of those elements are the count parameter, the root hash, and the proof. ",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356951184,356951184,
chiguireitor,2018-01-11T15:05:05Z,"Yeah, my bad. Makes sense now, it's just limiting the ""next"" level of the tree, so in fact, it's not limiting the overall tree structure at all, excellent.",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-356960972,356960972,
martin-lizner,2018-01-16T08:49:47Z,Code will go to 0.16 and softfork signalling will start 0.16.1?,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-357891958,357891958,
kallewoof,2018-01-16T09:01:09Z,@martin-lizner There is no consensus yet on whether this code will be merged or not. It's still being debated (e.g. on the mailing list and such).,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-357894817,357894817,
kallewoof,2018-03-23T05:17:15Z,@jl2012 Thanks for feedback! I inlined `GetRight`/`SetRight` in d99522a and added check/error for invalid result in `GetHash` in 8191d01. Not sure if `SCRIPT_ERR_BAD_DECODE_ARG` is suitable but it looked close enough.,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-375547840,375547840,
kallewoof,2018-04-24T06:38:23Z,"The failure is due to a recent rewrite causing `READWRITE(REF(CFlatData(m_skip)));` to fail in `merkle.h`. \n\nDiscussing right now whether it makes a difference to switch to varint over compactsize explicitly as is done right now (I argue it does not make a difference, as the size is only a small fraction of the content).",https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-383820180,383820180,
kallewoof,2018-09-19T03:30:57Z,I'm closing this for now. If a better suited champion appears I'll help out where I can. Ping @btcdrak @maaku.,https://github.com/bitcoin/bitcoin/pull/12131#issuecomment-422638527,422638527,
jl2012,2018-03-18T18:56:44Z,should error be returned here for invalid MerkleTree structure?,https://github.com/bitcoin/bitcoin/pull/12131#discussion_r175299607,175299607,src/script/interpreter.cpp
kallewoof,2018-03-19T09:03:46Z,@maaku Is there a reason why you presumed `!invalid` on this one? If not I think we should check validity and return error on `invalid=true`.,https://github.com/bitcoin/bitcoin/pull/12131#discussion_r175364673,175364673,src/script/interpreter.cpp
jl2012,2018-03-20T15:39:30Z,inline?,https://github.com/bitcoin/bitcoin/pull/12131#discussion_r175815214,175815214,src/consensus/merkle.h
maaku,2018-03-24T03:58:35Z,I think this is the reason for allowing invalid=true in MBV. Maybe it should be fixed by setting *invalid to the logical OR of the various sizes referenced.,https://github.com/bitcoin/bitcoin/pull/12131#discussion_r176899120,176899120,src/consensus/merkle.cpp
kallewoof,2018-03-27T06:20:41Z,"All tests passed, though. I'm pretty sure you are testing for that case, no?",https://github.com/bitcoin/bitcoin/pull/12131#discussion_r177318302,177318302,src/consensus/merkle.cpp
