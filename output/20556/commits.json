[
  {
    "sha": "faa2059547389e342991ab0d9382f8694f74fce1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWEyMDU5NTQ3Mzg5ZTM0Mjk5MWFiMGQ5MzgyZjg2OTRmNzRmY2Ux",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-23T10:21:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-25T07:06:26Z"
      },
      "message": "rpc: Properly document gettxout return value\n\nCan be reviewed with --ignore-all-space",
      "tree": {
        "sha": "2343e3e3a5a85633345edccf2b7a23bf032ce8e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2343e3e3a5a85633345edccf2b7a23bf032ce8e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa2059547389e342991ab0d9382f8694f74fce1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgCEAv/d05XTm2JngaqDkJhAK3Uk/k50T+kT4HWlyut9rf1Q9uWFAc94FG+Fvu0\njnwsrlm485RY6QE8JGGRl8Di7xeUcM3XgXDM2vW6jTQatEz5eHFq6gA2VQOv2/3g\nwFHzvnsEZq8fu8e5wNMicODkgfLBAn/h4bHXbsXAql8CLurQ74eOU95XEkGs+FQ6\nAfEJOxOZLor3GdczTA20psjIEGriN19wqaqMGji66kah6RLEbxU896mjN1F5eGgm\n6oTBFVfHVlIGur/jAnF6OtpOsP4W3vfHPYYvJ1WvNVQHqeOBgxE4NygAbcKipvFx\nKvR3IHce3MG3PwIXIdzWokRhszY+0QBqV6ry1M4nLfQUwJcBIujbjtD8QWPn77fW\nloMye5yfZbReIXqqjpjJRxBlftLRP1vG96s1cseyWy8c9M9ATxkMNb4xAx4tsSGn\nuAMspEmYy+s+EVegCW+O9fO7nHJyBMOnhrYp5Kl9o5Jz4OpgKRguYQTpzS28h32U\n/4NhfBFu\n=HkBo\n-----END PGP SIGNATURE-----",
        "payload": "tree 2343e3e3a5a85633345edccf2b7a23bf032ce8e2\nparent 56f06a986385b24818a53fde24c6f3a0b01f1a93\nauthor MarcoFalke <falke.marco@gmail.com> 1606126915 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1614236786 +0100\n\nrpc: Properly document gettxout return value\n\nCan be reviewed with --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa2059547389e342991ab0d9382f8694f74fce1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa2059547389e342991ab0d9382f8694f74fce1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa2059547389e342991ab0d9382f8694f74fce1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56f06a986385b24818a53fde24c6f3a0b01f1a93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f06a986385b24818a53fde24c6f3a0b01f1a93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56f06a986385b24818a53fde24c6f3a0b01f1a93"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "e119b1f73d2cb4a6d9d4b6ebc0d0756117036eda",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa2059547389e342991ab0d9382f8694f74fce1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa2059547389e342991ab0d9382f8694f74fce1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=faa2059547389e342991ab0d9382f8694f74fce1",
        "patch": "@@ -1100,30 +1100,29 @@ static RPCHelpMan gettxoutsetinfo()\n static RPCHelpMan gettxout()\n {\n     return RPCHelpMan{\"gettxout\",\n-                \"\\nReturns details about an unspent transaction output.\\n\",\n-                {\n-                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n-                    {\"n\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"vout number\"},\n-                    {\"include_mempool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"value\", \"The transaction value in \" + CURRENCY_UNIT},\n-                        {RPCResult::Type::OBJ, \"scriptPubKey\", \"\",\n-                            {\n-                                {RPCResult::Type::STR_HEX, \"asm\", \"\"},\n-                                {RPCResult::Type::STR_HEX, \"hex\", \"\"},\n-                                {RPCResult::Type::NUM, \"reqSigs\", \"Number of required signatures\"},\n-                                {RPCResult::Type::STR_HEX, \"type\", \"The type, eg pubkeyhash\"},\n-                                {RPCResult::Type::ARR, \"addresses\", \"array of bitcoin addresses\",\n-                                    {{RPCResult::Type::STR, \"address\", \"bitcoin address\"}}},\n-                            }},\n-                        {RPCResult::Type::BOOL, \"coinbase\", \"Coinbase or not\"},\n-                    }},\n-                RPCExamples{\n+        \"\\nReturns details about an unspent transaction output.\\n\",\n+        {\n+            {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+            {\"n\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"vout number\"},\n+            {\"include_mempool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n+        },\n+        {\n+            RPCResult{\"If the UTXO was not found\", RPCResult::Type::NONE, \"\", \"\"},\n+            RPCResult{\"Otherwise\", RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n+                {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n+                {RPCResult::Type::STR_AMOUNT, \"value\", \"The transaction value in \" + CURRENCY_UNIT},\n+                {RPCResult::Type::OBJ, \"scriptPubKey\", \"\", {\n+                    {RPCResult::Type::STR_HEX, \"asm\", \"\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"\"},\n+                    {RPCResult::Type::NUM, \"reqSigs\", \"Number of required signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"type\", \"The type, eg pubkeyhash\"},\n+                    {RPCResult::Type::ARR, \"addresses\", \"array of bitcoin addresses\", {{RPCResult::Type::STR, \"address\", \"bitcoin address\"}}},\n+                }},\n+                {RPCResult::Type::BOOL, \"coinbase\", \"Coinbase or not\"},\n+            }},\n+        },\n+        RPCExamples{\n             \"\\nGet unspent transactions\\n\"\n             + HelpExampleCli(\"listunspent\", \"\") +\n             \"\\nView the details\\n\""
      }
    ]
  },
  {
    "sha": "fabaccf031cfac718bf05b140f1901d93ee8be67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJhY2NmMDMxY2ZhYzcxOGJmMDViMTQwZjE5MDFkOTNlZThiZTY3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-23T11:02:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-25T07:09:20Z"
      },
      "message": "rpc: Properly document scantxoutset return value\n\nCan be reviewed with --ignore-all-space",
      "tree": {
        "sha": "0e17221d8692fdef51e684b9e09e2f251ee89d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e17221d8692fdef51e684b9e09e2f251ee89d7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabaccf031cfac718bf05b140f1901d93ee8be67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjtXAv7By+fabl139M+wtVzoL0jBm2BBeAEekEFMEB7q6Mi1Ac8jnONjeHTk8ti\n1aOGVARr6qq041bRMr9uf4VLDJTCDNdjd38uU0xzMmvrUMDqMnbMDUTpFyS9GwJe\nKK/JtX9DxYleoUXq66jdcldFQChY5nySkJId9RBl31MTaYBHpAYhqJrICAKZEXPP\n0VLBvS9af1vZJ1Snm50yxU/VVb87UblIM8QARiKZ2NkCc5vMAXSuNN2ZDU4sfXFN\nDsyWCx94oKci3+fvF3FmpIbV/+4Dg2p8qDBNK3wbPvwGLLWPIfHQkwpDxDYemJCk\n7mLjsSzHNbPyTFuN8N7FIENsmig3eKodb3xuW5KERh8SsUiCzvJ5Gh0el/bvdCzH\n6ERVNSZYMXgsuZkI+fCEQWg4RdRHRg4x/i+tXvXrm8F6VvfIvAl6dNlRYLOKFQvU\nR5yMxnx3HJaovWr2RpzegS/S3NvXfqo0fHa+Y/G1S2/eXzfgD2aCppC8hLl0XZbr\nhuEGLhBq\n=LV1N\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e17221d8692fdef51e684b9e09e2f251ee89d7a\nparent faa2059547389e342991ab0d9382f8694f74fce1\nauthor MarcoFalke <falke.marco@gmail.com> 1606129340 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1614236960 +0100\n\nrpc: Properly document scantxoutset return value\n\nCan be reviewed with --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabaccf031cfac718bf05b140f1901d93ee8be67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabaccf031cfac718bf05b140f1901d93ee8be67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabaccf031cfac718bf05b140f1901d93ee8be67/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa2059547389e342991ab0d9382f8694f74fce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa2059547389e342991ab0d9382f8694f74fce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa2059547389e342991ab0d9382f8694f74fce1"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 54,
      "deletions": 49
    },
    "files": [
      {
        "sha": "a8376fbcdd583822d27e8e6b9cdbc2bcbf2dc0dc",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 49,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabaccf031cfac718bf05b140f1901d93ee8be67/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabaccf031cfac718bf05b140f1901d93ee8be67/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fabaccf031cfac718bf05b140f1901d93ee8be67",
        "patch": "@@ -2136,59 +2136,64 @@ class CoinsViewScanReserver\n static RPCHelpMan scantxoutset()\n {\n     return RPCHelpMan{\"scantxoutset\",\n-                \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n-                \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n-                \"Examples of output descriptors are:\\n\"\n-                \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n-                \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n-                \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n-                \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n-                \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n-                \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n-                \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n-                \"unhardened or hardened child keys.\\n\"\n-                \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n-                \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+        \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n+        \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n+        \"Examples of output descriptors are:\\n\"\n+        \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n+        \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+        \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n+        \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+        \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+        \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+        \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n+        \"unhardened or hardened child keys.\\n\"\n+        \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n+        \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+        {\n+            {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+                \"\\\"start\\\" for starting a scan\\n\"\n+                \"\\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+                \"\\\"status\\\" for progress report (in %) of the current scan\"},\n+            {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n+                \"Every scan object is either a string descriptor or an object:\",\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                 {\n-                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n-            \"                                      \\\"start\\\" for starting a scan\\n\"\n-            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n-            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects. Required for \\\"start\\\" action\\n\"\n-            \"                                  Every scan object is either a string descriptor or an object:\",\n-                        {\n-                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n-                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n-                                {\n-                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n-                                },\n-                            },\n-                        },\n+                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                }},\n+            },\n                         \"[scanobjects,...]\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+        },\n+        {\n+            RPCResult{\"When action=='abort'\", RPCResult::Type::BOOL, \"\", \"\"},\n+            RPCResult{\"When action=='status' and no scan is in progress\", RPCResult::Type::NONE, \"\", \"\"},\n+            RPCResult{\"When action=='status' and scan is in progress\", RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::NUM, \"progress\", \"The scan progress\"},\n+            }},\n+            RPCResult{\"When action=='start'\", RPCResult::Type::OBJ, \"\", \"\", {\n+                {RPCResult::Type::BOOL, \"success\", \"Whether the scan was completed\"},\n+                {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs scanned\"},\n+                {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n+                {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n+                {RPCResult::Type::ARR, \"unspents\", \"\",\n+                {\n+                    {RPCResult::Type::OBJ, \"\", \"\",\n                     {\n-                        {RPCResult::Type::BOOL, \"success\", \"Whether the scan was completed\"},\n-                        {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs scanned\"},\n-                        {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n-                        {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::ARR, \"unspents\", \"\",\n-                            {\n-                                {RPCResult::Type::OBJ, \"\", \"\",\n-                                    {\n-                                        {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n-                                        {RPCResult::Type::NUM, \"vout\", \"The vout value\"},\n-                                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The script key\"},\n-                                        {RPCResult::Type::STR, \"desc\", \"A specialized descriptor for the matched scriptPubKey\"},\n-                                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the unspent output\"},\n-                                        {RPCResult::Type::NUM, \"height\", \"Height of the unspent transaction output\"},\n-                                    }},\n-                            }},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of all found unspent outputs in \" + CURRENCY_UNIT},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id\"},\n+                        {RPCResult::Type::NUM, \"vout\", \"The vout value\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The script key\"},\n+                        {RPCResult::Type::STR, \"desc\", \"A specialized descriptor for the matched scriptPubKey\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" of the unspent output\"},\n+                        {RPCResult::Type::NUM, \"height\", \"Height of the unspent transaction output\"},\n                     }},\n-                RPCExamples{\"\"},\n+                }},\n+                {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of all found unspent outputs in \" + CURRENCY_UNIT},\n+            }},\n+        },\n+        RPCExamples{\"\"},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR});"
      }
    ]
  },
  {
    "sha": "fae542c28b269d4a8a39f48ef829734b1241dd4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU1NDJjMjhiMjY5ZDRhOGEzOWY0OGVmODI5NzM0YjEyNDFkZDRm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-23T10:43:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-25T07:21:26Z"
      },
      "message": "rpc: Properly document getblocktemplate return value\n\nCan be reviewed with --ignore-all-space",
      "tree": {
        "sha": "3a7bf195b4bfe403e9a96c1babf29bff8b9e70e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a7bf195b4bfe403e9a96c1babf29bff8b9e70e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae542c28b269d4a8a39f48ef829734b1241dd4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhQ1Av+NTw9wMy1FJttLzAkC76VPh21EYN7mSUZLZ6w9A9jN81dXKrC+LJfpyos\noA+pRUsU4aI3T52CifWJ9CrWeHmC98TAZ4AnOD5+VQF6miIg6LRyRkYLqRaJ2Gdh\ndEGOcRy6L69rU1etDsnWunJK5fZSikSPI/PceApltQrn4s+AGcC20vxp2hyKNSC1\n/+LDatrGZg8dqHNcawOeJakXbOVlQCLs2bW5++Y7J1bAKCJo8OGO+bYl9X5NQzIl\ntONI4yxk74JWnA92gGdAJI44PFCFQRHzZPoTSr2sciDh6oAg0fXohKLBnxT7r99J\n4Q4jBp0d+mE4sWpM4MWIxwtnwIrb4lJs3upz76rKE4ddV40adBfpV7CCqWj+87Mq\nIdsT3EPiPfPDBrS8AaXyuMbi+zmlk+ipEIPlF8Y4qGEWrdL44jOeFhv1kmuPAA7Q\nDo6j23m5G8VPiBgrd6Nr7oADIYDHSNTwWoVqjh1L2emLjMXWVhN/DoJMOez1eW/+\nesvE9B7V\n=Xr+J\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a7bf195b4bfe403e9a96c1babf29bff8b9e70e6\nparent fabaccf031cfac718bf05b140f1901d93ee8be67\nauthor MarcoFalke <falke.marco@gmail.com> 1606128193 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1614237686 +0100\n\nrpc: Properly document getblocktemplate return value\n\nCan be reviewed with --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae542c28b269d4a8a39f48ef829734b1241dd4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae542c28b269d4a8a39f48ef829734b1241dd4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae542c28b269d4a8a39f48ef829734b1241dd4f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fabaccf031cfac718bf05b140f1901d93ee8be67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabaccf031cfac718bf05b140f1901d93ee8be67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabaccf031cfac718bf05b140f1901d93ee8be67"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 72,
      "deletions": 71
    },
    "files": [
      {
        "sha": "56d4898dab2092af7c920419ff5892577d92e7c4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 71,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae542c28b269d4a8a39f48ef829734b1241dd4f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae542c28b269d4a8a39f48ef829734b1241dd4f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fae542c28b269d4a8a39f48ef829734b1241dd4f",
        "patch": "@@ -505,83 +505,84 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n static RPCHelpMan getblocktemplate()\n {\n     return RPCHelpMan{\"getblocktemplate\",\n-                \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n-                \"It returns data needed to construct a block to work on.\\n\"\n-                \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n+        \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n+        \"It returns data needed to construct a block to work on.\\n\"\n+        \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+        \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n+        {\n+            {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n+            {\n+                {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n-                        {\n-                            {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n-                            {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n-                                {\n-                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n-                                },\n-                                },\n-                            {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n-                                {\n-                                    {\"segwit\", RPCArg::Type::STR, RPCArg::Optional::NO, \"(literal) indicates client side segwit support\"},\n-                                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"other client side supported softfork deployment\"},\n-                                },\n-                                },\n-                        },\n+                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n+                }},\n+                {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n+                {\n+                    {\"segwit\", RPCArg::Type::STR, RPCArg::Optional::NO, \"(literal) indicates client side segwit support\"},\n+                    {\"str\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"other client side supported softfork deployment\"},\n+                }},\n+            },\n                         \"\\\"template_request\\\"\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+        },\n+        {\n+            RPCResult{\"If the proposal was accepted with mode=='proposal'\", RPCResult::Type::NONE, \"\", \"\"},\n+            RPCResult{\"If the proposal was not accepted with mode=='proposal'\", RPCResult::Type::STR, \"\", \"According to BIP22\"},\n+            RPCResult{\"Otherwise\", RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::NUM, \"version\", \"The preferred block version\"},\n+                {RPCResult::Type::ARR, \"rules\", \"specific block rules that are to be enforced\",\n+                {\n+                    {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 9 for format\"},\n+                }},\n+                {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n+                {\n+                    {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n+                }},\n+                {RPCResult::Type::NUM, \"vbrequired\", \"bit mask of versionbits the server requires set in submissions\"},\n+                {RPCResult::Type::STR, \"previousblockhash\", \"The hash of current highest block\"},\n+                {RPCResult::Type::ARR, \"transactions\", \"contents of non-coinbase transactions that should be included in the next block\",\n+                {\n+                    {RPCResult::Type::OBJ, \"\", \"\",\n                     {\n-                        {RPCResult::Type::NUM, \"version\", \"The preferred block version\"},\n-                        {RPCResult::Type::ARR, \"rules\", \"specific block rules that are to be enforced\",\n-                            {\n-                                {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 9 for format\"},\n-                            }},\n-                        {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n-                            {\n-                                {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n-                            }},\n-                        {RPCResult::Type::NUM, \"vbrequired\", \"bit mask of versionbits the server requires set in submissions\"},\n-                        {RPCResult::Type::STR, \"previousblockhash\", \"The hash of current highest block\"},\n-                        {RPCResult::Type::ARR, \"transactions\", \"contents of non-coinbase transactions that should be included in the next block\",\n-                            {\n-                                {RPCResult::Type::OBJ, \"\", \"\",\n-                                    {\n-                                        {RPCResult::Type::STR_HEX, \"data\", \"transaction data encoded in hexadecimal (byte-for-byte)\"},\n-                                        {RPCResult::Type::STR_HEX, \"txid\", \"transaction id encoded in little-endian hexadecimal\"},\n-                                        {RPCResult::Type::STR_HEX, \"hash\", \"hash encoded in little-endian hexadecimal (including witness data)\"},\n-                                        {RPCResult::Type::ARR, \"depends\", \"array of numbers\",\n-                                            {\n-                                                {RPCResult::Type::NUM, \"\", \"transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\"},\n-                                            }},\n-                                        {RPCResult::Type::NUM, \"fee\", \"difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\"},\n-                                        {RPCResult::Type::NUM, \"sigops\", \"total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\"},\n-                                        {RPCResult::Type::NUM, \"weight\", \"total transaction weight, as counted for purposes of block limits\"},\n-                                    }},\n-                            }},\n-                        {RPCResult::Type::OBJ_DYN, \"coinbaseaux\", \"data that should be included in the coinbase's scriptSig content\",\n+                        {RPCResult::Type::STR_HEX, \"data\", \"transaction data encoded in hexadecimal (byte-for-byte)\"},\n+                        {RPCResult::Type::STR_HEX, \"txid\", \"transaction id encoded in little-endian hexadecimal\"},\n+                        {RPCResult::Type::STR_HEX, \"hash\", \"hash encoded in little-endian hexadecimal (including witness data)\"},\n+                        {RPCResult::Type::ARR, \"depends\", \"array of numbers\",\n                         {\n-                            {RPCResult::Type::STR_HEX, \"key\", \"values must be in the coinbase (keys may be ignored)\"},\n+                            {RPCResult::Type::NUM, \"\", \"transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\"},\n                         }},\n-                        {RPCResult::Type::NUM, \"coinbasevalue\", \"maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\"},\n-                        {RPCResult::Type::STR, \"longpollid\", \"an id to include with a request to longpoll on an update to this template\"},\n-                        {RPCResult::Type::STR, \"target\", \"The hash target\"},\n-                        {RPCResult::Type::NUM_TIME, \"mintime\", \"The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME},\n-                        {RPCResult::Type::ARR, \"mutable\", \"list of ways the block template may be changed\",\n-                            {\n-                                {RPCResult::Type::STR, \"value\", \"A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\"},\n-                            }},\n-                        {RPCResult::Type::STR_HEX, \"noncerange\", \"A range of valid nonces\"},\n-                        {RPCResult::Type::NUM, \"sigoplimit\", \"limit of sigops in blocks\"},\n-                        {RPCResult::Type::NUM, \"sizelimit\", \"limit of block size\"},\n-                        {RPCResult::Type::NUM, \"weightlimit\", \"limit of block weight\"},\n-                        {RPCResult::Type::NUM_TIME, \"curtime\", \"current timestamp in \" + UNIX_EPOCH_TIME},\n-                        {RPCResult::Type::STR, \"bits\", \"compressed target of next block\"},\n-                        {RPCResult::Type::NUM, \"height\", \"The height of the next block\"},\n-                        {RPCResult::Type::STR, \"default_witness_commitment\", /* optional */ true, \"a valid witness commitment for the unmodified block template\"}\n+                        {RPCResult::Type::NUM, \"fee\", \"difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\"},\n+                        {RPCResult::Type::NUM, \"sigops\", \"total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\"},\n+                        {RPCResult::Type::NUM, \"weight\", \"total transaction weight, as counted for purposes of block limits\"},\n                     }},\n-                RPCExamples{\n+                }},\n+                {RPCResult::Type::OBJ_DYN, \"coinbaseaux\", \"data that should be included in the coinbase's scriptSig content\",\n+                {\n+                    {RPCResult::Type::STR_HEX, \"key\", \"values must be in the coinbase (keys may be ignored)\"},\n+                }},\n+                {RPCResult::Type::NUM, \"coinbasevalue\", \"maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\"},\n+                {RPCResult::Type::STR, \"longpollid\", \"an id to include with a request to longpoll on an update to this template\"},\n+                {RPCResult::Type::STR, \"target\", \"The hash target\"},\n+                {RPCResult::Type::NUM_TIME, \"mintime\", \"The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME},\n+                {RPCResult::Type::ARR, \"mutable\", \"list of ways the block template may be changed\",\n+                {\n+                    {RPCResult::Type::STR, \"value\", \"A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\"},\n+                }},\n+                {RPCResult::Type::STR_HEX, \"noncerange\", \"A range of valid nonces\"},\n+                {RPCResult::Type::NUM, \"sigoplimit\", \"limit of sigops in blocks\"},\n+                {RPCResult::Type::NUM, \"sizelimit\", \"limit of block size\"},\n+                {RPCResult::Type::NUM, \"weightlimit\", \"limit of block weight\"},\n+                {RPCResult::Type::NUM_TIME, \"curtime\", \"current timestamp in \" + UNIX_EPOCH_TIME},\n+                {RPCResult::Type::STR, \"bits\", \"compressed target of next block\"},\n+                {RPCResult::Type::NUM, \"height\", \"The height of the next block\"},\n+                {RPCResult::Type::STR, \"default_witness_commitment\", /* optional */ true, \"a valid witness commitment for the unmodified block template\"},\n+            }},\n+        },\n+        RPCExamples{\n                     HelpExampleCli(\"getblocktemplate\", \"'{\\\"rules\\\": [\\\"segwit\\\"]}'\")\n             + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n                 },"
      }
    ]
  },
  {
    "sha": "fa7ff0790ec21d187f1a32310918b0c8d66e5266",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdmZjA3OTBlYzIxZDE4N2YxYTMyMzEwOTE4YjBjOGQ2NmU1MjY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-11-23T11:16:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-02-25T07:21:28Z"
      },
      "message": "rpc: Properly document submitblock return value\n\nCan be reviewed with --ignore-all-space",
      "tree": {
        "sha": "4aca484e18ffd058274fdeb251e0c6bacccf32e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aca484e18ffd058274fdeb251e0c6bacccf32e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7ff0790ec21d187f1a32310918b0c8d66e5266",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiIBgwAlNvkmyi/XeRxFpGkG88/llM46XJXJxfWXU5RNDs8MB/6o4966+NTTghE\nkCLJroRPWpeU+6EAY1N9fwHuWSc1Cv2HPNfjdGFJH7vRbJOItg4skz06l623hMiF\ns98VORDH1RmnwFJkFCQk+lHB2niTDK6WxJxfxLc/W6isfoQnHEktT9V/0yyhyBbM\nAEIBdQryWibfkUX8Ns4aLENifXgECdkgGcRDzKIAsmtvSUMzQ+/EUfkYg3cQBDSj\nZ+UAFB32l1TbK7KcsV0JZfEQ3Letj09HO6BR1QalEuJgmnehteKThGIO21G5TU47\ng/K6PAZcqDjy5ToZDkrkh/CNK5NaBU0tUCvhkipX+iEqCjWznuRO+wsKeUPuHD8K\nzbKcNA+XYLKrfmaowrhWE4XN5+RR8twwtIM5R4Z+OJbV6cumc3+HjdYiOuCkXKTK\nwPRdbPLpOTfsnR9lhw4nVR2aPrFRyz3awuzslULOApwukSU0HPj8weobtp6Bx6Zo\nQG9G/YyB\n=FmVm\n-----END PGP SIGNATURE-----",
        "payload": "tree 4aca484e18ffd058274fdeb251e0c6bacccf32e4\nparent fae542c28b269d4a8a39f48ef829734b1241dd4f\nauthor MarcoFalke <falke.marco@gmail.com> 1606130191 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1614237688 +0100\n\nrpc: Properly document submitblock return value\n\nCan be reviewed with --ignore-all-space\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ff0790ec21d187f1a32310918b0c8d66e5266",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7ff0790ec21d187f1a32310918b0c8d66e5266",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ff0790ec21d187f1a32310918b0c8d66e5266/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae542c28b269d4a8a39f48ef829734b1241dd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae542c28b269d4a8a39f48ef829734b1241dd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae542c28b269d4a8a39f48ef829734b1241dd4f"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "54f6eeba2eb8812c3eb2befd461408b1997bf84b",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ff0790ec21d187f1a32310918b0c8d66e5266/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ff0790ec21d187f1a32310918b0c8d66e5266/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa7ff0790ec21d187f1a32310918b0c8d66e5266",
        "patch": "@@ -941,14 +941,17 @@ static RPCHelpMan submitblock()\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n     return RPCHelpMan{\"submitblock\",\n-                \"\\nAttempts to submit new block to network.\\n\"\n-                \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n-                {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block data to submit\"},\n-                    {\"dummy\", RPCArg::Type::STR, /* default */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n-                },\n-                RPCResult{RPCResult::Type::NONE, \"\", \"Returns JSON Null when valid, a string according to BIP22 otherwise\"},\n-                RPCExamples{\n+        \"\\nAttempts to submit new block to network.\\n\"\n+        \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n+        {\n+            {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block data to submit\"},\n+            {\"dummy\", RPCArg::Type::STR, /* default */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n+        },\n+        {\n+            RPCResult{\"If the block was accepted\", RPCResult::Type::NONE, \"\", \"\"},\n+            RPCResult{\"Otherwise\", RPCResult::Type::STR, \"\", \"According to BIP22\"},\n+        },\n+        RPCExamples{\n                     HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n                 },"
      }
    ]
  }
]