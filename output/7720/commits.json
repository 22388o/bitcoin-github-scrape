[
  {
    "sha": "fab3890156c849e6b04309152d7a9bfcfcb98396",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIzODkwMTU2Yzg0OWU2YjA0MzA5MTUyZDdhOWJmY2ZjYjk4Mzk2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-15T19:41:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T18:07:08Z"
      },
      "message": "[qa] rpc-test: Normalize assert()",
      "tree": {
        "sha": "6cf00c0c901bcb234d7f665ada028cce39d2199a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cf00c0c901bcb234d7f665ada028cce39d2199a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab3890156c849e6b04309152d7a9bfcfcb98396",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab3890156c849e6b04309152d7a9bfcfcb98396",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab3890156c849e6b04309152d7a9bfcfcb98396",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab3890156c849e6b04309152d7a9bfcfcb98396/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e1131c4642459349a0ed4737121fb1902f8a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e1131c4642459349a0ed4737121fb1902f8a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e1131c4642459349a0ed4737121fb1902f8a47"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 34,
      "deletions": 50
    },
    "files": [
      {
        "sha": "4458712815c5775c563174afe030f27b096af261",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 15,
        "deletions": 19,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fab3890156c849e6b04309152d7a9bfcfcb98396",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enought inputs\n+        assert(len(dec_tx['vin']) > 0) #test if we have enought inputs\n \n         ##############################\n         # simple test with two coins #\n@@ -84,7 +84,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True) #test if we have enough inputs\n+        assert(len(dec_tx['vin']) > 0) #test if we have enough inputs\n \n         ##############################\n         # simple test with two coins #\n@@ -97,7 +97,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert_equal(len(dec_tx['vin']) > 0, True)\n+        assert(len(dec_tx['vin']) > 0)\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n \n@@ -116,7 +116,7 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n \n-        assert_equal(len(dec_tx['vin']) > 0, True)\n+        assert(len(dec_tx['vin']) > 0)\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n \n@@ -130,7 +130,7 @@ def run_test(self):\n                 utx = aUtx\n                 break\n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n@@ -159,7 +159,7 @@ def run_test(self):\n                 utx = aUtx\n                 break\n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : Decimal(5.0) - fee - feeTolerance }\n@@ -189,7 +189,7 @@ def run_test(self):\n                 utx = aUtx\n                 break\n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']}]\n         outputs = { self.nodes[0].getnewaddress() : 1.0 }\n@@ -234,7 +234,7 @@ def run_test(self):\n                 utx2 = aUtx\n \n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0 }\n@@ -276,7 +276,7 @@ def run_test(self):\n                 utx2 = aUtx\n \n \n-        assert_equal(utx!=False, True)\n+        assert(utx!=False)\n \n         inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']} ]\n         outputs = { self.nodes[0].getnewaddress() : 6.0, self.nodes[0].getnewaddress() : 1.0 }\n@@ -306,14 +306,11 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        errorString = \"\"\n         try:\n             rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+            raise AssertionError(\"Spent more than available\")\n         except JSONRPCException,e:\n-            errorString = e.error['message']\n-\n-        assert(\"Insufficient\" in errorString)\n-\n+            assert(\"Insufficient\" in e.error['message'])\n \n \n         ############################################################\n@@ -462,12 +459,11 @@ def run_test(self):\n         self.is_network_split=False\n         self.sync_all()\n \n-        error = False\n         try:\n             self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.2)\n-        except:\n-            error = True\n-        assert(error)\n+            raise AssertionError(\"Wallet unlocked without passphrase\")\n+        except JSONRPCException as e:\n+            assert('walletpassphrase' in e.error['message'])\n \n         oldBalance = self.nodes[0].getbalance()\n \n@@ -580,7 +576,7 @@ def run_test(self):\n         assert_equal(len(res_dec[\"vin\"]), 1)\n         assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n \n-        assert_equal(\"fee\" in result.keys(), True)\n+        assert(\"fee\" in result.keys())\n         assert_greater_than(result[\"changepos\"], -1)\n \n         ###############################################################"
      },
      {
        "sha": "d2cb4ab8d69b9e4e0331653cc8331f1c2aeceb4f",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=fab3890156c849e6b04309152d7a9bfcfcb98396",
        "patch": "@@ -120,10 +120,7 @@ def run_test(self):\n \n         # Test 3: Truncated final tx\n         lastbyte = txlist[-1].pop()\n-        try:\n-            assert_template(node, tmpl, txlist, 'n/a')\n-        except JSONRPCException:\n-            pass  # Expected\n+        assert_raises(JSONRPCException, assert_template, node, tmpl, txlist, 'n/a')\n         txlist[-1].append(lastbyte)\n \n         # Test 4: Add an invalid tx to the end (duplicate of gen tx)\n@@ -144,10 +141,7 @@ def run_test(self):\n \n         # Test 7: Bad tx count\n         txlist.append(b'')\n-        try:\n-            assert_template(node, tmpl, txlist, 'n/a')\n-        except JSONRPCException:\n-            pass  # Expected\n+        assert_raises(JSONRPCException, assert_template, node, tmpl, txlist, 'n/a')\n         txlist.pop()\n \n         # Test 8: Bad bits"
      },
      {
        "sha": "c231676ec87d70a9d12f5c8b7bd7eadfd322e052",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=fab3890156c849e6b04309152d7a9bfcfcb98396",
        "patch": "@@ -37,14 +37,14 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1) #must also response with a correct json-rpc message\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n@@ -54,14 +54,14 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out2 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True) #must also response with a correct json-rpc message\n-        assert_equal(conn.sock!=None, True) #according to http/1.1 connection must still be open!\n+        assert('\"error\":null' in out1) #must also response with a correct json-rpc message\n+        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n@@ -71,8 +71,8 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #now the connection must be closed after the response\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock==None) #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urlparse.urlparse(self.nodes[1].url)\n@@ -83,7 +83,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n+        assert('\"error\":null' in out1)\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n@@ -94,8 +94,8 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n+        assert('\"error\":null' in out1)\n+        assert(conn.sock!=None) #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size\n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)"
      },
      {
        "sha": "f686e6be6c62d187bc7d16b0064e5cd939238c5a",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fab3890156c849e6b04309152d7a9bfcfcb98396",
        "patch": "@@ -252,15 +252,15 @@ def run_test (self):\n         except JSONRPCException,e:\n             errorString = e.error['message']\n \n-        assert_equal(\"Invalid amount\" in errorString, True)\n+        assert(\"Invalid amount\" in errorString)\n \n         errorString = \"\"\n         try:\n             self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n         except JSONRPCException,e:\n             errorString = e.error['message']\n \n-        assert_equal(\"not an integer\" in errorString, True)\n+        assert(\"not an integer\" in errorString)\n \n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()"
      },
      {
        "sha": "1ba4ded249aadf854bd1e3157ec91f50ab2c592d",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab3890156c849e6b04309152d7a9bfcfcb98396/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=fab3890156c849e6b04309152d7a9bfcfcb98396",
        "patch": "@@ -65,14 +65,8 @@ def run_test (self):\n         #restart bitcoind with zapwallettxes\n         self.nodes[0] = start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n         \n-        aException = False\n-        try:\n-            tx3 = self.nodes[0].gettransaction(txid3)\n-        except JSONRPCException,e:\n-            print e\n-            aException = True\n-        \n-        assert_equal(aException, True) #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+        assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n+        #there must be a expection because the unconfirmed wallettx0 must be gone by now\n \n         tx0 = self.nodes[0].gettransaction(txid0)\n         assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed"
      }
    ]
  }
]