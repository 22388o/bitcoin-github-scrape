[
  {
    "sha": "297e09855793feb94c3229ed989bef8b1eac864e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTdlMDk4NTU3OTNmZWI5NGMzMjI5ZWQ5ODliZWY4YjFlYWM4NjRl",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-01-17T02:23:35Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-01-17T02:25:11Z"
      },
      "message": "Fix doxygen errors\n\nIdentified via -Wdocumentation, e.g.:\n\n  ./rpc/rawtransaction_util.h:31:13: error: parameter 'prevTxs' not found in the function declaration [-Werror,-Wdocumentation]\n    * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n              ^~~~~~~\n  ./rpc/rawtransaction_util.h:31:13: note: did you mean 'prevTxsUnival'?\n    * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n              ^~~~~~~\n              prevTxsUnival\n\n  netbase.cpp:766:11: error: parameter 'outProxyConnectionFailed[out]' not found in the function declaration [-Werror,-Wdocumentation]\n   * @param outProxyConnectionFailed[out] Whether or not the connection to the\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  netbase.cpp:766:11: note: did you mean 'outProxyConnectionFailed'?\n   * @param outProxyConnectionFailed[out] Whether or not the connection to the\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n            outProxyConnectionFailed",
      "tree": {
        "sha": "dfd67793a30a23132b8f68f75806cfdd9115218a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfd67793a30a23132b8f68f75806cfdd9115218a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/297e09855793feb94c3229ed989bef8b1eac864e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJeIRsSAAoJEG7l83hfeLNFyegIAKJrnXiM+lwpQoSlQsZdVvYj\nfOklKauz50yp1BSGZRxw7gxxOOaEbWyEYNsF6oxIB6LRQKlc04qfxLyz+EVgswTf\nRHKKbKOW5uHmRS5ghPFHGPAU8Ww8AquxkTtq3c6AxBjuaTzrrD57BQjeHRvDiTQn\ny2x3wOY6KPi2l+MJ3N7b//xWHgCQOtq5QGWcCF8kYT32J3aE4+lEkXtIQtF76vIK\nDfd1NMT0ihzQgnj3xghw6BD03kOehgnIUOWpe9XjutRrMJlBpyVBGbUBRhduUiqn\nFsgxv6U0rESHKQnx+mQAhqXDYdTAMlnmQAJt0YgAm1l4YnzYoeKArDiwyXb5nPY=\n=zAxB\n-----END PGP SIGNATURE-----",
        "payload": "tree dfd67793a30a23132b8f68f75806cfdd9115218a\nparent 95ca6aeec7b8d9dbf39e3a036a5c238634ce3793\nauthor Ben Woosley <ben.woosley@gmail.com> 1579227815 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1579227911 -0800\n\nFix doxygen errors\n\nIdentified via -Wdocumentation, e.g.:\n\n  ./rpc/rawtransaction_util.h:31:13: error: parameter 'prevTxs' not found in the function declaration [-Werror,-Wdocumentation]\n    * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n              ^~~~~~~\n  ./rpc/rawtransaction_util.h:31:13: note: did you mean 'prevTxsUnival'?\n    * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n              ^~~~~~~\n              prevTxsUnival\n\n  netbase.cpp:766:11: error: parameter 'outProxyConnectionFailed[out]' not found in the function declaration [-Werror,-Wdocumentation]\n   * @param outProxyConnectionFailed[out] Whether or not the connection to the\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  netbase.cpp:766:11: note: did you mean 'outProxyConnectionFailed'?\n   * @param outProxyConnectionFailed[out] Whether or not the connection to the\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n            outProxyConnectionFailed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/297e09855793feb94c3229ed989bef8b1eac864e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/297e09855793feb94c3229ed989bef8b1eac864e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/297e09855793feb94c3229ed989bef8b1eac864e/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95ca6aeec7b8d9dbf39e3a036a5c238634ce3793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95ca6aeec7b8d9dbf39e3a036a5c238634ce3793",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95ca6aeec7b8d9dbf39e3a036a5c238634ce3793"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1e065da07ddddf280dc527819259ccfe1d330c86",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -990,7 +990,7 @@ static bool TxRelayMayResultInDisconnect(const TxValidationState& state) {\n /**\n  * Potentially ban a node based on the contents of a BlockValidationState object\n  *\n- * @param[in] via_compact_block: this bool is passed in because net_processing should\n+ * @param[in] via_compact_block this bool is passed in because net_processing should\n  * punish peers differently depending on whether the data was provided in a compact\n  * block message or not. If the compact block had a valid header, but contained invalid\n  * txs, the peer should not be punished. See BIP 152."
      },
      {
        "sha": "f0c91e0619ae736f75cd04b04b920a2da15ee5f2",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -763,7 +763,7 @@ bool IsProxy(const CNetAddr &addr) {\n  * @param hSocket The socket on which to connect to the SOCKS5 proxy.\n  * @param nTimeout Wait this many milliseconds for the connection to the SOCKS5\n  *                 proxy to be established.\n- * @param outProxyConnectionFailed[out] Whether or not the connection to the\n+ * @param[out] outProxyConnectionFailed Whether or not the connection to the\n  *                                      SOCKS5 proxy failed.\n  *\n  * @returns Whether or not the operation succeeded."
      },
      {
        "sha": "a85dfb8aced0e83fcc30d4161cdbdd901fa5de83",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -22,10 +22,10 @@ struct NodeContext;\n  *\n  * @param[in]  node reference to node context\n  * @param[in]  tx the transaction to broadcast\n- * @param[out] &err_string reference to std::string to fill with error string if available\n+ * @param[out] err_string reference to std::string to fill with error string if available\n  * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n  * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n- * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n+ * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);"
      },
      {
        "sha": "dfba2619617600083d89aacb1491ac6e78f4572e",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -584,15 +584,15 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n /**\n  * Finalizes a PSBT if possible, combining partial signatures.\n  *\n- * @param[in,out] &psbtx reference to PartiallySignedTransaction to finalize\n+ * @param[in,out] psbtx PartiallySignedTransaction to finalize\n  * return True if the PSBT is now complete, false otherwise\n  */\n bool FinalizePSBT(PartiallySignedTransaction& psbtx);\n \n /**\n  * Finalizes a PSBT if possible, and extracts it to a CMutableTransaction if it could be finalized.\n  *\n- * @param[in]  &psbtx reference to PartiallySignedTransaction\n+ * @param[in]  psbtx PartiallySignedTransaction\n  * @param[out] result CMutableTransaction representing the complete transaction, if successful\n  * @return True if we successfully extracted the transaction, false otherwise\n  */\n@@ -601,7 +601,7 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n /**\n  * Combines PSBTs with the same underlying transaction, resulting in a single PSBT with all partial signatures from each input.\n  *\n- * @param[out] &out   the combined PSBT, if successful\n+ * @param[out] out   the combined PSBT, if successful\n  * @param[in]  psbtxs the PSBTs to combine\n  * @return error (OK if we successfully combined the transactions, other error if they were not compatible)\n  */"
      },
      {
        "sha": "4750fd64ed4080b7412d4b12ac83a39fa1f0ba06",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -28,7 +28,7 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it\n   *\n-  * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n+  * @param  prevTxsUnival Array of previous txns outputs that tx depends on but may not yet be in the block chain\n   * @param  keystore      A pointer to the temporary keystore if there is one\n   * @param  coins         Map of unspent outputs - coins in mempool and current chain UTXO set, may be extended by previous txns outputs after call\n   */"
      },
      {
        "sha": "a5a41d78dd617d0c4d92b9018402b2fe6ad0786c",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -47,28 +47,28 @@ struct Descriptor {\n \n     /** Expand a descriptor at a specified position.\n      *\n-     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * @param[in] provider: The provider to query for private keys in case of hardened derivation.\n-     * @param[out] output_scripts: The expanded scriptPubKeys.\n-     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n-     * @param[out] cache: Cache data necessary to evaluate the descriptor at this point without access to private keys.\n+     * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] provider The provider to query for private keys in case of hardened derivation.\n+     * @param[out] output_scripts The expanded scriptPubKeys.\n+     * @param[out] out Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n+     * @param[out] cache Cache data necessary to evaluate the descriptor at this point without access to private keys.\n      */\n     virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position using cached expansion data.\n      *\n-     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * @param[in] cache: Cached expansion data.\n-     * @param[out] output_scripts: The expanded scriptPubKeys.\n-     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n+     * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] cache Cached expansion data.\n+     * @param[out] output_scripts The expanded scriptPubKeys.\n+     * @param[out] out Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n      */\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n \n     /** Expand the private key for a descriptor at a specified position, if possible.\n      *\n-     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * @param[in] provider: The provider to query for the private keys.\n-     * @param[out] out: Any private keys available for the specified `pos`.\n+     * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] provider The provider to query for the private keys.\n+     * @param[out] out Any private keys available for the specified `pos`.\n      */\n     virtual void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const = 0;\n };"
      },
      {
        "sha": "b35a0a58d13c7e26960e5b6ced2d5a409d58a9a7",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -15,8 +15,8 @@\n  * finalize.) Sets `error` and returns false if something goes wrong.\n  *\n  * @param[in]  pwallet pointer to a wallet\n- * @param[in]  &psbtx reference to PartiallySignedTransaction to fill in\n- * @param[out] &complete indicates whether the PSBT is now complete\n+ * @param[in]  psbtx PartiallySignedTransaction to fill in\n+ * @param[out] complete indicates whether the PSBT is now complete\n  * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n  * @param[in]  sign whether to sign or not\n  * @param[in]  bip32derivs whether to fill in bip32 derivation information if available"
      },
      {
        "sha": "b00565a823446cf09457e5661928aed40cd593e8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -915,9 +915,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * Should be called after CreateTransaction unless you want to abort\n      * broadcasting the transaction.\n      *\n-     * @param tx[in] The transaction to be broadcast.\n-     * @param mapValue[in] key-values to be set on the transaction.\n-     * @param orderForm[in] BIP 70 / BIP 21 order form details to be set on the transaction.\n+     * @param[in] tx The transaction to be broadcast.\n+     * @param[in] mapValue key-values to be set on the transaction.\n+     * @param[in] orderForm BIP 70 / BIP 21 order form details to be set on the transaction.\n      */\n     void CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm);\n "
      },
      {
        "sha": "1a6512548062a274849c0a7d7231053d85f930e4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297e09855793feb94c3229ed989bef8b1eac864e/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297e09855793feb94c3229ed989bef8b1eac864e/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=297e09855793feb94c3229ed989bef8b1eac864e",
        "patch": "@@ -124,7 +124,7 @@ class CKeyMetadata\n     std::string hdKeypath; //optional HD/bip32 keypath. Still used to determine whether a key is a seed. Also kept for backwards compatibility\n     CKeyID hd_seed_id; //id of the HD seed used to derive this key\n     KeyOriginInfo key_origin; // Key origin info with path and fingerprint\n-    bool has_key_origin = false; //< Whether the key_origin is useful\n+    bool has_key_origin = false; //!< Whether the key_origin is useful\n \n     CKeyMetadata()\n     {"
      }
    ]
  }
]