[
  {
    "sha": "b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTVmOWE2MWUwYjJhZTZjYWIwZWE1NDMxZDdlZTE4NDFiODBhOGM4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-16T07:53:56Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-16T07:54:27Z"
      },
      "message": "tests: Remove compatibility code not needed now when we're on Python 3",
      "tree": {
        "sha": "780cc6ada12835f6b4e7f6c6255df075de8655ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/780cc6ada12835f6b4e7f6c6255df075de8655ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6df0c6cb4169701193868267526eff82be0c5a42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6df0c6cb4169701193868267526eff82be0c5a42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6df0c6cb4169701193868267526eff82be0c5a42"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 14,
      "deletions": 36
    },
    "files": [
      {
        "sha": "10cf51673228a5ca50f326cec169950beda42194",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8",
        "patch": "@@ -3,7 +3,6 @@\n # Distributed under the MIT software license, see the accompanying \n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-import hashlib\n import sys\n import os\n from random import SystemRandom\n@@ -25,15 +24,9 @@\n salt = \"\".join([x[2:] for x in hexseq])\n \n #Create 32 byte b64 password\n-password = base64.urlsafe_b64encode(os.urandom(32))\n-\n-digestmod = hashlib.sha256\n-\n-if sys.version_info.major >= 3:\n-    password = password.decode('utf-8')\n-    digestmod = 'SHA256'\n+password = base64.urlsafe_b64encode(os.urandom(32)).decode(\"utf-8\")\n  \n-m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), digestmod)\n+m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), \"SHA256\")\n result = m.hexdigest()\n \n print(\"String to be appended to bitcoin.conf:\")"
      },
      {
        "sha": "1b3e510dc44228b8beeb741f61f27f67d2934fe0",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8",
        "patch": "@@ -10,7 +10,6 @@\n import ctypes\n import ctypes.util\n import hashlib\n-import sys\n \n ssl = ctypes.cdll.LoadLibrary(ctypes.util.find_library ('ssl') or 'libeay32')\n \n@@ -223,10 +222,5 @@ def __str__(self):\n         return repr(self)\n \n     def __repr__(self):\n-        # Always have represent as b'<secret>' so test cases don't have to\n-        # change for py2/3\n-        if sys.version > '3':\n-            return '%s(%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n-        else:\n-            return '%s(b%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+        return '%s(%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n "
      },
      {
        "sha": "f0082bd2a3a5dd70b1d3fae0dc93e1b3d6958c63",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 11,
        "deletions": 20,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=b95f9a61e0b2ae6cab0ea5431d7ee1841b80a8c8",
        "patch": "@@ -10,15 +10,6 @@\n from .mininode import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n from binascii import hexlify\n import hashlib\n-\n-import sys\n-bchr = chr\n-bord = ord\n-if sys.version > '3':\n-    long = int\n-    bchr = lambda x: bytes([x])\n-    bord = lambda x: x\n-\n import struct\n \n from .bignum import bn2vch\n@@ -40,9 +31,9 @@ class CScriptOp(int):\n     def encode_op_pushdata(d):\n         \"\"\"Encode a PUSHDATA op, returning bytes\"\"\"\n         if len(d) < 0x4c:\n-            return b'' + bchr(len(d)) + d # OP_PUSHDATA\n+            return b'' + bytes([len(d)]) + d # OP_PUSHDATA\n         elif len(d) <= 0xff:\n-            return b'\\x4c' + bchr(len(d)) + d # OP_PUSHDATA1\n+            return b'\\x4c' + bytes([len(d)]) + d # OP_PUSHDATA1\n         elif len(d) <= 0xffff:\n             return b'\\x4d' + struct.pack(b'<H', len(d)) + d # OP_PUSHDATA2\n         elif len(d) <= 0xffffffff:\n@@ -388,7 +379,7 @@ def encode(obj):\n             r.append(0x80 if neg else 0)\n         elif neg:\n             r[-1] |= 0x80\n-        return bytes(bchr(len(r)) + r)\n+        return bytes(bytes([len(r)]) + r)\n \n \n class CScript(bytes):\n@@ -405,17 +396,17 @@ class CScript(bytes):\n     def __coerce_instance(cls, other):\n         # Coerce other into bytes\n         if isinstance(other, CScriptOp):\n-            other = bchr(other)\n+            other = bytes([other])\n         elif isinstance(other, CScriptNum):\n             if (other.value == 0):\n-                other = bchr(CScriptOp(OP_0))\n+                other = bytes([CScriptOp(OP_0)])\n             else:\n                 other = CScriptNum.encode(other)\n         elif isinstance(other, int):\n             if 0 <= other <= 16:\n-                other = bytes(bchr(CScriptOp.encode_op_n(other)))\n+                other = bytes(bytes([CScriptOp.encode_op_n(other)]))\n             elif other == -1:\n-                other = bytes(bchr(OP_1NEGATE))\n+                other = bytes(bytes([OP_1NEGATE]))\n             else:\n                 other = CScriptOp.encode_op_pushdata(bn2vch(other))\n         elif isinstance(other, (bytes, bytearray)):\n@@ -458,7 +449,7 @@ def raw_iter(self):\n         i = 0\n         while i < len(self):\n             sop_idx = i\n-            opcode = bord(self[i])\n+            opcode = self[i]\n             i += 1\n \n             if opcode > OP_PUSHDATA4:\n@@ -474,21 +465,21 @@ def raw_iter(self):\n                     pushdata_type = 'PUSHDATA1'\n                     if i >= len(self):\n                         raise CScriptInvalidError('PUSHDATA1: missing data length')\n-                    datasize = bord(self[i])\n+                    datasize = self[i]\n                     i += 1\n \n                 elif opcode == OP_PUSHDATA2:\n                     pushdata_type = 'PUSHDATA2'\n                     if i + 1 >= len(self):\n                         raise CScriptInvalidError('PUSHDATA2: missing data length')\n-                    datasize = bord(self[i]) + (bord(self[i+1]) << 8)\n+                    datasize = self[i] + (self[i+1] << 8)\n                     i += 2\n \n                 elif opcode == OP_PUSHDATA4:\n                     pushdata_type = 'PUSHDATA4'\n                     if i + 3 >= len(self):\n                         raise CScriptInvalidError('PUSHDATA4: missing data length')\n-                    datasize = bord(self[i]) + (bord(self[i+1]) << 8) + (bord(self[i+2]) << 16) + (bord(self[i+3]) << 24)\n+                    datasize = self[i] + (self[i+1] << 8) + (self[i+2] << 16) + (self[i+3] << 24)\n                     i += 4\n \n                 else:"
      }
    ]
  }
]