[
  {
    "sha": "fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmY0ODVjOWIyYmYxZDA1NmJmZWE3NzM0NWExNWNmNTZhOWNkNzg2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-05T00:31:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-10T19:45:47Z"
      },
      "message": "Allow tr() import only when Taproot is active\n\nTo avoid issues around fund loss, only allow descriptor wallets\nto import tr() descriptors after taproot has activated.",
      "tree": {
        "sha": "3b4e510a4e0bfa9871eec7548a2505c70dc7065c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b4e510a4e0bfa9871eec7548a2505c70dc7065c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "346e52afd6d5e317c96fc506bb54cde13e87c8b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346e52afd6d5e317c96fc506bb54cde13e87c8b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/346e52afd6d5e317c96fc506bb54cde13e87c8b2"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 45,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7cac435e9632b45b28cf9667f5c01408cd8bfcd7",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
        "patch": "@@ -277,6 +277,9 @@ class Chain\n     //! to be prepared to handle this by ignoring notifications about unknown\n     //! removed transactions and already added new transactions.\n     virtual void requestMempoolTransactions(Notifications& notifications) = 0;\n+\n+    //! Check if Taproot has activated\n+    virtual bool isTaprootActive() const = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "e88594f7d6135c75b328abc338e6b0e620b7d8d0",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
        "patch": "@@ -709,6 +709,12 @@ class ChainImpl : public Chain\n             notifications.transactionAddedToMempool(entry.GetSharedTx(), 0 /* mempool_sequence */);\n         }\n     }\n+    bool isTaprootActive() const override\n+    {\n+        LOCK(::cs_main);\n+        const CBlockIndex* tip = Assert(m_node.chainman)->ActiveChain().Tip();\n+        return VersionBitsState(tip, Params().GetConsensus(), Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE;\n+    }\n     NodeContext& m_node;\n };\n } // namespace"
      },
      {
        "sha": "4e9ba83eade709f88c466363cb879bc1c05297d3",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
        "patch": "@@ -1530,6 +1530,18 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             }\n         }\n \n+        // Taproot descriptors cannot be imported if Taproot is not yet active.\n+        // Check if this is a Taproot descriptor\n+        CTxDestination dest;\n+        ExtractDestination(scripts[0], dest);\n+        if (std::holds_alternative<WitnessV1Taproot>(dest)) {\n+            // Check if Taproot is active\n+            if (!wallet.chain().isTaprootActive()) {\n+                // Taproot is not active, raise an error\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import tr() descriptor when Taproot is not active\");\n+            }\n+        }\n+\n         // If private keys are enabled, check some things.\n         if (!wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n            if (keys.keys.empty()) {"
      },
      {
        "sha": "5803c0cf54bbcd14e6797b641902eeee16e9a364",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf485c9b2bf1d056bfea77345a15cf56a9cd786/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=fbf485c9b2bf1d056bfea77345a15cf56a9cd786",
        "patch": "@@ -172,9 +172,9 @@ class WalletTaprootTest(BitcoinTestFramework):\n     \"\"\"Test generation and spending of P2TR address outputs.\"\"\"\n \n     def set_test_params(self):\n-        self.num_nodes = 2\n+        self.num_nodes = 3\n         self.setup_clean_chain = True\n-        self.extra_args = [['-keypool=100'], ['-keypool=100']]\n+        self.extra_args = [['-keypool=100'], ['-keypool=100'], [\"-vbparams=taproot:1:1\"]]\n         self.supports_cli = False\n \n     def skip_test_if_missing_module(self):\n@@ -230,12 +230,34 @@ def do_test_addr(self, comment, pattern, privmap, treefn, keys):\n                 addr_r = self.make_addr(treefn, keys, i)\n                 assert_equal(addr_g, addr_r)\n \n+        # tr descriptors cannot be imported when Taproot is not active\n+        result = self.privs_tr_enabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n+        assert(result[0][\"success\"])\n+        result = self.privs_tr_disabled.importdescriptors([{\"desc\": desc, \"timestamp\": \"now\"}])\n+        assert(not result[0][\"success\"])\n+        assert_equal(result[0][\"error\"][\"code\"], -4)\n+        assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n+        result = self.pubs_tr_enabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n+        assert(result[0][\"success\"])\n+        result = self.pubs_tr_disabled.importdescriptors([{\"desc\": desc_pub, \"timestamp\": \"now\"}])\n+        assert(not result[0][\"success\"])\n+        assert_equal(result[0][\"error\"][\"code\"], -4)\n+        assert_equal(result[0][\"error\"][\"message\"], \"Cannot import tr() descriptor when Taproot is not active\")\n+\n     def do_test(self, comment, pattern, privmap, treefn, nkeys):\n         keys = self.rand_keys(nkeys)\n         self.do_test_addr(comment, pattern, privmap, treefn, keys)\n \n     def run_test(self):\n         self.log.info(\"Creating wallets...\")\n+        self.nodes[0].createwallet(wallet_name=\"privs_tr_enabled\", descriptors=True, blank=True)\n+        self.privs_tr_enabled = self.nodes[0].get_wallet_rpc(\"privs_tr_enabled\")\n+        self.nodes[2].createwallet(wallet_name=\"privs_tr_disabled\", descriptors=True, blank=True)\n+        self.privs_tr_disabled=self.nodes[2].get_wallet_rpc(\"privs_tr_disabled\")\n+        self.nodes[0].createwallet(wallet_name=\"pubs_tr_enabled\", descriptors=True, blank=True, disable_private_keys=True)\n+        self.pubs_tr_enabled = self.nodes[0].get_wallet_rpc(\"pubs_tr_enabled\")\n+        self.nodes[2].createwallet(wallet_name=\"pubs_tr_disabled\", descriptors=True, blank=True, disable_private_keys=True)\n+        self.pubs_tr_disabled=self.nodes[2].get_wallet_rpc(\"pubs_tr_disabled\")\n         self.nodes[0].createwallet(wallet_name=\"addr_gen\", descriptors=True, disable_private_keys=True, blank=True)\n         self.addr_gen = self.nodes[0].get_wallet_rpc(\"addr_gen\")\n "
      }
    ]
  }
]