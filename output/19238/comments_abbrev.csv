hebasto,2020-06-10 15:41:34,cc @vasild :),https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642092803,642092803,
DrahtBot,2020-06-10 16:50:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21940 (refactor: Mark CAddrMan::Select const by MarcoFalke)\n* #20233 (addrman: Make consistency checks a runtime option ",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642132912,642132912,
MarcoFalke,2020-06-10 16:51:24,"Concept ACK. I think the reason that `LOCKS_EXCLUDED` isn't widely used in the code base is that it doesn't propagate up the call stack, so has a rather limited use case. Though, the new syntax claims to do that.",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642133165,642133165,
MarcoFalke,2020-06-10 16:53:02,oh wait you are not adding the annotations. Any reason for that?,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642134036,642134036,
hebasto,2020-06-10 17:01:29,"@MarcoFalke \n> oh wait you are not adding the annotations. Any reason for that?\n\nAdded :)",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642138551,642138551,
hebasto,2020-06-10 17:04:11,"@MarcoFalke probably a1071f8b9ae12bbb6f0fddae40655b3860c785f0 deserves its own PR as it blocks the similar changes in other parts of the code, right?",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642139964,642139964,
hebasto,2020-06-11 14:20:46,"Updated d9572933f1fb0201b259d9cb7b40873bdbad7b6f -> b6712ece8ada3b1c9230f1264da81cbf11fe4595 ([pr19238.02](https://github.com/hebasto/bitcoin/commits/pr19238.02) -> [pr19238.04](https://github.com/hebasto/bitcoin/commits/pr19238.04)):\n\n- the commit ""Add means to handle negative capabilities in thread safety annotations"" has been separated into #19249, and this PR has been rebased on the latter",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642690312,642690312,
hebasto,2020-06-17 11:29:07,"Updated b6712ece8ada3b1c9230f1264da81cbf11fe4595 -> 9cd0ed858c96b1052580e2044069c5cb9434628e ([pr19238.04](https://github.com/hebasto/bitcoin/commits/pr19238.04) -> [pr19238.05](https://github.com/hebasto/bitcoin/commits/pr19238.05)):\n\n- rebased due to the merging of #19249\n- all of the related code branches are covered by appropriate lock assertions to insure that the locking policy has not",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-645317642,645317642,
hebasto,2020-06-17 11:33:37,The OP has been updated.,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-645319647,645319647,
hebasto,2020-06-18 09:09:10,@sipa Mind reviewing this PR?,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-645888631,645888631,
hebasto,2020-06-18 18:14:05,"btw, how about convention to add the `_cs` suffix to the name of the function that is called from within the critical section already guarded by the locked instance of the `Mutex`?",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646226615,646226615,
vasild,2020-06-18 19:28:14,"> btw, how about convention to add the `_cs` suffix to the name of the function that is called from within the critical section already guarded by the locked instance of the `Mutex`?\n\nI like it, and it is shorter than `...NonLockHelper()`, but what about the [CamelCaseConvention](\nhttps://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L87)? A",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646262231,646262231,
hebasto,2020-06-20 13:56:42,Note for reviewers: please review #19337 at fist.,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646998921,646998921,
hebasto,2020-08-15 18:38:01,"Updated 9cd0ed858c96b1052580e2044069c5cb9434628e -> d985aeeac48114f1078980888303f34ffdb78e74 ([pr19238.05](https://github.com/hebasto/bitcoin/commits/pr19238.05) -> [pr19238.06](https://github.com/hebasto/bitcoin/commits/pr19238.06)):\n\n- rebased due to the conflict with #19658\n- implemented naming [convention](https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646226615) with :+1:  f",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-674433777,674433777,
jnewbery,2020-12-31 13:12:12,Concept ACK. Needs rebase.,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-752955434,752955434,
hebasto,2021-01-01 22:01:17,"Updated d985aeeac48114f1078980888303f34ffdb78e74 -> f1246cb12f573c4a8b32d75d6ea377eeec3b43e7 ([pr19238.06](https://github.com/hebasto/bitcoin/commits/pr19238.06) -> [pr19238.07](https://github.com/hebasto/bitcoin/commits/pr19238.07)):\n\n- rebased\n- dropped the mutex renaming commit",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753390956,753390956,
hebasto,2021-01-02 13:57:10,@jnewbery Thank you for your review. While working on this pull I had similar thoughts about points you mentioned. So I'm happy to make some improvements.,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753476817,753476817,
jnewbery,2021-01-02 14:23:36,"@hebasto Whilst you're looking at this code, do you mind taking a look at #20233. Without that PR, `CAddrMan::Check()` is basically useless, since it's enabled by a compile-time option which I expect nobody uses. That PR would make it a runtime check, so that we could enable it for the unit, functional and fuzz tests. It's obviously much more likely to catch bugs if it's being run by those tests!",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753479491,753479491,
hebasto,2021-01-02 14:34:13,"> @hebasto Whilst you're looking at this code, do you mind taking a look at #20233. Without that PR, `CAddrMan::Check()` is basically useless, since it's enabled by a compile-time option which I expect nobody uses. That PR would make it a runtime check, so that we could enable it for the unit, functional and fuzz tests. It's obviously much more likely to catch bugs if it's being run by those tests",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753480896,753480896,
vasild,2021-01-14 09:53:28,"0c0fb742ad7b686209efb627a8ec43d7f96c3754 looks good, I agree with the above suggestions from @jnewbery and @ajtowns.",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-760086594,760086594,
hebasto,2021-05-23 18:30:42,"@jnewbery @ajtowns @vasild \n\nThank you for your reviews!\n\nUpdated 0c0fb742ad7b686209efb627a8ec43d7f96c3754 -> 148a7c9454adc3e311867f3566e01d261b362f71 ([pr19238.08](https://github.com/hebasto/bitcoin/commits/pr19238.08) -> [pr19238.09](https://github.com/hebasto/bitcoin/commits/pr19238.09)):\n\n- addressed comments\n- rebased on top of the recent CI changes",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-846605462,846605462,
hebasto,2021-05-27 14:16:12,Rebased ee79105070778bd1f3f9693536e3c92801ae63a8 -> e2787fb24a675e62a82bcb43400ad8e1a68761d2 ([pr19238.10](https://github.com/hebasto/bitcoin/commits/pr19238.10) -> [pr19238.11](https://github.com/hebasto/bitcoin/commits/pr19238.11)) due to the merging of #22025.,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-849672208,849672208,
hebasto,2021-06-12 12:33:36,Rebased e2787fb24a675e62a82bcb43400ad8e1a68761d2 -> af9550561d7fa8cfa8da910db3e46993f848a0f5 ([pr19238.11](https://github.com/hebasto/bitcoin/commits/pr19238.11) -> [pr19238.12](https://github.com/hebasto/bitcoin/commits/pr19238.12)) due to the conflict with #18722.,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860047512,860047512,
jnewbery,2021-06-14 13:30:24,Code review ACK af9550561d7fa8cfa8da910db3e46993f848a0f5,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860686329,860686329,
MarcoFalke,2021-06-14 14:17:27,There might be a silent merge conflict,https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860721702,860721702,
MarcoFalke,2021-06-14 14:19:49,"```\ntest/fuzz/addrman.cpp:110:30: error: 'Check' is a private member of 'CAddrMan'\n    (void)/*const_*/addr_man.Check();\n                             ^\n./addrman.h:722:10: note: declared private here\n    void Check()\n         ^\n1 error generated.\n",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860723498,860723498,
hebasto,2021-06-14 14:24:18,"> There might be a silent merge conflict\n\nWith #21941. Rebasing.",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860726973,860726973,
hebasto,2021-06-14 14:30:28,"@MarcoFalke @jnewbery @vasild \n\nRebased af9550561d7fa8cfa8da910db3e46993f848a0f5 -> ae98aec9c0521cdcec76459c8200bd45ff6a1485 ([pr19238.12](https://github.com/hebasto/bitcoin/commits/pr19238.12) -> [pr19238.13](https://github.com/hebasto/bitcoin/commits/pr19238.13)) due to the silent merge conflict with #21941.",https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860731808,860731808,
vasild,2020-06-11 11:27:31,"It would be nice to implement that TODO comment because it would make it possible to avoid any mutex requirements from `size()`.\n\nI did so in https://github.com/vasild/bitcoin/commit/f25d8a7c6de0e45b037f91138e1b4a72e7a1653f. If you like it you can replace the commit `refactor: Prevent double lock in CAddrMan::size()` with that one. In this branch https://github.com/vasild/bitcoin/tree/200610-a",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438717497,438717497,src/addrman.h
vasild,2020-06-11 11:39:37,"Here and in `StdMutex` - I find this very confusing because it would end up with `m` being the same as `!m`. It is a huge hack imposed by clang. I would suggest to add some comment to explain what is that. Something like `Required by the clang thread safety instrumentation so that we can declare that a mutex should not be held when a function is called - EXCLUSIVE_LOCKS_REQUIRED(!m) (aka ""negative",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438722555,438722555,src/sync.h
hebasto,2020-06-11 13:46:34,The commit you [suggested](https://github.com/vasild/bitcoin/commit/f25d8a7c6de0e45b037f91138e1b4a72e7a1653f) does change `CAddrMan::size()` behavior. So I'd prefer to keep this PR as clean refactoring with no behavior changes.,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438796565,438796565,src/addrman.h
hebasto,2020-06-11 14:21:17,Done in #19249.,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438823196,438823196,src/sync.h
vasild,2020-06-11 14:50:31,ok,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438843755,438843755,src/addrman.h
vasild,2020-06-17 18:55:00,"The pattern `AssertLockNotHeld(m); LOCK(m);` seems too verbose. Following that, should we add `AssertLockNotHeld()` before every `LOCK()` in the source code?\n\nWhat about adding `AssertLockNotHeld()` inside `LOCK()`?\n\nWhat happens if we try to lock a mutex which we already own?\nhttps://en.cppreference.com/w/cpp/thread/mutex/lock says:\n> If lock is called by a thread that already owns th",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r441763265,441763265,src/addrman.h
hebasto,2020-06-17 19:48:16,"> Following that, should we add `AssertLockNotHeld()` before every `LOCK()` in the source code?\n\nOnly for `Mutex` instances, not for `RecursiveMutex` ones.\n\n> What about adding `AssertLockNotHeld()` inside `LOCK()`?\n\nNot now because the `RecursiveMutex` instance could be an argument of `LOCK()`.",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r441793261,441793261,src/addrman.h
vasild,2020-06-18 17:26:29,"What about checking, inside `LOCK()`, whether the mutex being locked is instance of `Mutex` (and not `RecursiveMutex`) and only asserting that we don't own it in that case:\n\n```diff\ndiff --git i/src/sync.h w/src/sync.h\nindex 60e5a87ae..36c348898 100644\n--- i/src/sync.h\n+++ w/src/sync.h\n@@ -10,12 +10,13 @@\n #include <util/macros.h>\n \n #include <condition_variable>\n #include <m",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442387548,442387548,src/addrman.h
hebasto,2020-06-18 17:38:55,@vasild Mind submitting a PR that it could be reviewed before this one?,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442394521,442394521,src/addrman.h
hebasto,2020-06-18 18:07:34,"Currently, it is assumed the following patterns:\n- for public interface methods:\n```\n# foo.h\nclass Foo\n{\npublic: void foo() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n}\n# foo.cpp\nvoid Foo::foo()\n{\n    AssertLockNotHeld(m_mutex);\n    LOCK(m_mutex);\n    // do magic\n}\n```\n\n- for internal methods that are called from critical sections:\n```\n# foo.h\nclass Foo\n{\npivat",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442410258,442410258,src/addrman.h
vasild,2020-06-18 19:22:52,"> Mind submitting a PR that it could be reviewed before this one?\n\nYes, I think that deserves a separate PR. I have to consider this a little bit before opening a PR. Maybe it would be possible to optimize it - the patch above would lock `lockdata.dd_mutex` and dig into the stack of locks for the current thread 2 times - once from the newly added `AssertLockNotHeld()` and a second time from `p",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442450059,442450059,src/addrman.h
vasild,2020-06-20 13:52:56,Here is a PR that would detect a double lock. With the check from inside `LOCK()` it makes unnecessary to add `AssertLockNotHeld()` calls before each `LOCK()`: https://github.com/bitcoin/bitcoin/pull/19337,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r443132584,443132584,src/addrman.h
jnewbery,2021-01-02 09:55:44,Can you consolidate all the private members and protected members to be next to each other? Multiple private and protected access specifiers make this harder to read than is necessary.,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550865131,550865131,src/addrman.h
jnewbery,2021-01-02 13:42:57,"I don't think we need to expose this as a public method just for the addrman tests. Just release the lock in that test before calling `Attempt()`:\n\n```diff\n--- a/src/test/addrman_tests.cpp\n+++ b/src/test/addrman_tests.cpp\n@@ -73,13 +73,12 @@ public:\n     // Simulates connection failure so that we can test eviction of offline nodes\n     void SimConnFail(const CService& addr)\n     {",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883088,550883088,src/addrman.h
jnewbery,2021-01-02 13:43:32,Make this (and other `Check()` functions) `const`?,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883172,550883172,src/addrman.h
jnewbery,2021-01-02 13:45:48,"It'd be good to get rid of the `Clear()` functions entirely:\n\n- the call to `Clear()` in deserialize could be replaced with an assert that size() is 0 (we should never deserialize into a populated `CAddrman`)\n- the calls in the tests can be replaced by instantiating new `CAddrman`s. Clearing then reusing an existing `CAddrman` is not a realistic usage pattern.\n\nIf you don't want to do th",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883356,550883356,src/addrman.h
jnewbery,2021-01-02 13:49:09,"It feels like this is a good opportunity to make the access patterns consistent here:\n\n```diff\n@@ -689,13 +689,10 @@ public:\n     //! Randomly select an address in tried that another address is attempting to evict.\n     CAddrInfo SelectTriedCollision()\n     {\n-        CAddrInfo ret;\n-        {\n-            LOCK(cs);\n-            CheckWithLockHeld();\n-            ret = SelectT",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883659,550883659,src/addrman.h
ajtowns,2021-01-06 03:33:18,I was expecting to see `EXCLUSIVE_LOCKS_REQUIRED(!cs)` added to these functions that lock `cs` to get compile time detection of double-locking. Any reason not to have them?,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r552349817,552349817,src/addrman.h
vasild,2021-01-14 09:44:26,":+1: This would make the `Check()` function unused, so it can be removed.",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r557265083,557265083,src/addrman.h
vasild,2021-01-14 09:54:56,"Yeah, class declaration is easier to read if there is just one instance of `public:`, `protected:` and `private:` (in that order).\n",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r557271783,557271783,src/addrman.h
hebasto,2021-05-23 12:16:12,"@jnewbery @vasild \n\nDone in #22025.",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637537333,637537333,src/addrman.h
hebasto,2021-05-23 16:59:14,"This change is not trivial due to the non-const [`std::map::operator[]`](https://en.cppreference.com/w/cpp/container/map/operator_at):\n```\naddrman.cpp:433:20: error: no viable overloaded operator[] for type 'const std::map<CNetAddr, int>'\n        if (mapAddr[info] != n)\n            ~~~~~~~^~~~~\n```",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637574215,637574215,src/addrman.h
hebasto,2021-05-23 17:56:12,"@jnewbery \n> It'd be good to get rid of the `Clear()` functions entirely:\n\nI totally agree with you.\n\n>  - the call to `Clear()` in deserialize could be replaced with an assert that size() is 0 (we should never deserialize into a populated `CAddrman`)\n\nGoing to implement this suggestion.\n\n>  - the calls in the tests can be replaced by instantiating new `CAddrman`s. Clearing then ",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637580390,637580390,src/addrman.h
hebasto,2021-05-23 18:32:17,Of course! Done in 7f01942d2d3d9d66a8932d6a1fe08281d9b52273.,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584320,637584320,src/addrman.h
hebasto,2021-05-23 18:33:53,Thanks! Done in e21c0dd57009197dfeedbc4ed4d30454b7a05cf6.,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584493,637584493,src/addrman.h
hebasto,2021-05-23 18:34:51,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-846605462).,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584595,637584595,src/addrman.h
hebasto,2021-05-23 18:35:50,Thanks! Done in bc3694a49a93b9ae6f8cacfd0d5b1def5f09b004.,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584712,637584712,src/addrman.h
vasild,2021-05-24 09:29:19,"It is a matter of taste. Personally, I find the ""classic"" easier to read:\n```cpp\nconst int err = Check_();\nif (err != 0) {\n```\nIt is also more gdb-friendly because one can set breakpoint on the first or on the second line.",https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637813423,637813423,src/addrman.h
hebasto,2021-05-24 10:14:43,Thanks! Updated.,https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637839950,637839950,src/addrman.h
