[
  {
    "sha": "1534d9a83c3648709690f8ad6af752b782a35be7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTM0ZDlhODNjMzY0ODcwOTY5MGY4YWQ2YWY3NTJiNzgyYTM1YmU3",
    "commit": {
      "author": {
        "name": "EthanHeilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2015-09-22T19:24:16Z"
      },
      "committer": {
        "name": "EthanHeilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2015-09-24T19:20:48Z"
      },
      "message": "Creates unittests for addrman, makes addrman testable.\nAdds several unittests for addrman to verify it works as expected.\nMakes small modifications to addrman to allow deterministic and targeted tests.",
      "tree": {
        "sha": "e97554f6ee564182aa1c6e09af938c39f222b684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e97554f6ee564182aa1c6e09af938c39f222b684"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1534d9a83c3648709690f8ad6af752b782a35be7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1534d9a83c3648709690f8ad6af752b782a35be7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1534d9a83c3648709690f8ad6af752b782a35be7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1534d9a83c3648709690f8ad6af752b782a35be7/comments",
    "author": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bc1b3a1f37b86014bca583f8e33a5dd75772019",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1b3a1f37b86014bca583f8e33a5dd75772019",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc1b3a1f37b86014bca583f8e33a5dd75772019"
      }
    ],
    "stats": {
      "total": 205,
      "additions": 199,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b283d97f00a64722e32c0b33489c09109cb37bc2",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1534d9a83c3648709690f8ad6af752b782a35be7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1534d9a83c3648709690f8ad6af752b782a35be7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=1534d9a83c3648709690f8ad6af752b782a35be7",
        "patch": "@@ -36,6 +36,7 @@ GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.r\n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/bignum.h \\\n+  test/addrman_tests.cpp \\\n   test/alert_tests.cpp \\\n   test/allocator_tests.cpp \\\n   test/base32_tests.cpp \\"
      },
      {
        "sha": "078b9e16817544ef9721f4009dc0533871f7b169",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1534d9a83c3648709690f8ad6af752b782a35be7/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1534d9a83c3648709690f8ad6af752b782a35be7/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=1534d9a83c3648709690f8ad6af752b782a35be7",
        "patch": "@@ -329,13 +329,17 @@ void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n     info.nAttempts++;\n }\n \n-CAddrInfo CAddrMan::Select_()\n+CAddrInfo CAddrMan::Select_(bool newOnly)\n {\n     if (size() == 0)\n         return CAddrInfo();\n \n+    if (newOnly && nNew == 0)\n+        return CAddrInfo();\n+\n     // Use a 50% chance for choosing between tried and new table entries.\n-    if (nTried > 0 && (nNew == 0 || GetRandInt(2) == 0)) {\n+    if (!newOnly &&\n+       (nTried > 0 && (nNew == 0 || GetRandInt(2) == 0))) { \n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {"
      },
      {
        "sha": "1123caabfaf601a49b7be292d97cfc5443aba4a5",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1534d9a83c3648709690f8ad6af752b782a35be7/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1534d9a83c3648709690f8ad6af752b782a35be7/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=1534d9a83c3648709690f8ad6af752b782a35be7",
        "patch": "@@ -22,6 +22,8 @@\n  */\n class CAddrInfo : public CAddress\n {\n+\n+\n public:\n     //! last try whatsoever by us (memory only)\n     int64_t nLastTry;\n@@ -230,8 +232,8 @@ class CAddrMan\n     //! Mark an entry as attempted to connect.\n     void Attempt_(const CService &addr, int64_t nTime);\n \n-    //! Select an address to connect to.\n-    CAddrInfo Select_();\n+    //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n+    CAddrInfo Select_(bool newOnly);\n \n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n@@ -532,13 +534,13 @@ class CAddrMan\n     /**\n      * Choose an address to connect to.\n      */\n-    CAddrInfo Select()\n+    CAddrInfo Select(bool newOnly = false)\n     {\n         CAddrInfo addrRet;\n         {\n             LOCK(cs);\n             Check();\n-            addrRet = Select_();\n+            addrRet = Select_(newOnly);\n             Check();\n         }\n         return addrRet;\n@@ -567,6 +569,12 @@ class CAddrMan\n             Check();\n         }\n     }\n+    \n+    //! Ensure that bucket placement is always the same for testing purposes.\n+    void MakeDeterministic(){\n+        nKey.SetNull(); //Do not use outside of tests.\n+    }\n+\n };\n \n #endif // BITCOIN_ADDRMAN_H"
      },
      {
        "sha": "cfcdd9abb272440ae83c1103316b3cf0acbec2b6",
        "filename": "src/test/addrman_tests.cpp",
        "status": "added",
        "additions": 180,
        "deletions": 0,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1534d9a83c3648709690f8ad6af752b782a35be7/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1534d9a83c3648709690f8ad6af752b782a35be7/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=1534d9a83c3648709690f8ad6af752b782a35be7",
        "patch": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"addrman.h\"\n+#include \"test/test_bitcoin.h\"\n+#include <string>\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"random.h\"\n+\n+using namespace std;\n+\n+class CAddrManTest : public CAddrMan{};\n+\n+BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(addrman_simple)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    // Test 1: Does Addrman respond correctly when empty.\n+    BOOST_CHECK(addrman.size() == 0);\n+    CAddrInfo addr_null = addrman.Select();\n+    BOOST_CHECK(addr_null.ToString() == \"[::]:0\");\n+\n+    // Test 2: Does Addrman::Add work as expected.\n+    CService addr1 = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+    CAddrInfo addr_ret1 = addrman.Select();\n+    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n+\n+    // Test 3: Does IP address deduplication work correctly. \n+    //  Expected dup IP should not be added.\n+    CService addr1_dup = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1_dup), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+\n+\n+    // Test 5: New table has one addr and we add a diff addr we should\n+    //  have two addrs.\n+    CService addr2 = CService(\"250.1.1.2:8333\");\n+    addrman.Add(CAddress(addr2), source);\n+    BOOST_CHECK(addrman.size() == 2);\n+\n+    // Test 6: AddrMan::Clear() should empty the new table. \n+    addrman.Clear();\n+    BOOST_CHECK(addrman.size() == 0);\n+    CAddrInfo addr_null2 = addrman.Select();\n+    BOOST_CHECK(addr_null2.ToString() == \"[::]:0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_ports)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    // Test 7; Addr with same IP but diff port does not replace existing addr.\n+    CService addr1 = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+\n+    CService addr1_port = CService(\"250.1.1.1:8334\");\n+    addrman.Add(CAddress(addr1_port), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+    CAddrInfo addr_ret2 = addrman.Select();\n+    BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\");\n+\n+    // Test 8: Add same IP but diff port to tried table, it doesn't get added.\n+    //  Perhaps this is not ideal behavior but it is the current behavior.\n+    addrman.Good(CAddress(addr1_port));\n+    BOOST_CHECK(addrman.size() == 1);\n+    bool newOnly = true;\n+    CAddrInfo addr_ret3 = addrman.Select(newOnly);\n+    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8333\");\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(addrman_select)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    // Test 9: Select from new with 1 addr in new.\n+    CService addr1 = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+\n+    bool newOnly = true;\n+    CAddrInfo addr_ret1 = addrman.Select(newOnly);\n+    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n+\n+\n+    // Test 10: move addr to tried, select from new expected nothing returned.\n+    addrman.Good(CAddress(addr1));\n+    BOOST_CHECK(addrman.size() == 1);\n+    CAddrInfo addr_ret2 = addrman.Select(newOnly);\n+    BOOST_CHECK(addr_ret2.ToString() == \"[::]:0\");\n+\n+    CAddrInfo addr_ret3 = addrman.Select();\n+    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8333\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    for (unsigned int i = 1; i < 4; i++){\n+        CService addr = CService(\"250.1.1.\"+boost::to_string(i));\n+        addrman.Add(CAddress(addr), source);\n+\n+        //Test 11: No collision in new table yet.\n+        BOOST_CHECK(addrman.size() == i);\n+    }\n+\n+    //Test 12: new table collision!\n+    CService addr1 = CService(\"250.1.1.4\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 3);\n+\n+    CService addr2 = CService(\"250.1.1.5\");\n+    addrman.Add(CAddress(addr2), source);\n+    BOOST_CHECK(addrman.size() == 4);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    for (unsigned int i = 1; i < 75; i++){\n+        CService addr = CService(\"250.1.1.\"+boost::to_string(i));\n+        addrman.Add(CAddress(addr), source);\n+        addrman.Good(CAddress(addr));\n+\n+        //Test 13: No collision in tried table yet.\n+        BOOST_TEST_MESSAGE(addrman.size());\n+        BOOST_CHECK(addrman.size() == i);\n+    }\n+\n+    //Test 14: tried table collision!\n+    CService addr1 = CService(\"250.1.1.76\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 74);\n+\n+    CService addr2 = CService(\"250.1.1.77\");\n+    addrman.Add(CAddress(addr2), source);\n+    BOOST_CHECK(addrman.size() == 75);\n+}\n+\n+\n+BOOST_AUTO_TEST_SUITE_END()\n\\ No newline at end of file"
      }
    ]
  }
]