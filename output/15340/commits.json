[
  {
    "sha": "810e228ed27597cd2b87dd422073e50ab18b7f51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTBlMjI4ZWQyNzU5N2NkMmI4N2RkNDIyMDczZTUwYWIxOGI3ZjUx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T10:33:05Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T21:11:22Z"
      },
      "message": "Do not translate captions in log and stderr",
      "tree": {
        "sha": "896a33652eccd675c84e242a5b6373c8cbc54be9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/896a33652eccd675c84e242a5b6373c8cbc54be9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/810e228ed27597cd2b87dd422073e50ab18b7f51",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0GsHoACgkQQQEIES5+\nqB8dBw//TmENbd+RBOS/9K+iyesgYgb6Zac+zuXf4j2corP5d+z4xAC7heUc8Tlm\nkrts8ZqUMmnCoAzArEeU6gQW/np1WoWfA3mSu8hxjjjgLeFB5vN4EA7wJTJnU207\nH+n+4oSi+G9lB7ymMAcZbem5OL3uk07ZoeVdpsioXGac8/p0MK58ExidIiRThgXi\n/y9uXy0D6jjFjesmKQDcKXcBgESUHgh0ytQnazoSl/sKMfDf8Pf9BzFI8vOexgLj\nf/Id4/LbJMzZHxo+IE6ks8T54uec6LxY4IUMHjYpCnM7W+MYkriCBwBHFKGHMb2T\nxenHO31YmDKMQsSjsMcl+XRQGH6RcifirBFEfxg/giXTREGyBiFy5hLxcJU+aPnx\nIXStcfF50rRaFAQmqq2mrb43BekLzjduDBJ530wCyF5B/ixapmUahKIjJZuFz3dH\ncx5cksxNjz5vAfhaMquevpNCLEN2jMcbnxhvwttO9V4CKOcIgFjUg1AFV09O4Cqh\nw07E9DfYkIFqKNXeDcpumKAhQZxVUhV4CKA0Njnr6fCIv2FSX34HfWTUDxMdMLTD\nUgkjmNspPUzhHKo/3Q1oduG0moho975MwX7bhZn+0URsqnZVXFaBewLC5UM/2HAh\neYNk8y/amX7vw77tx25CLveaI564qWlyXBQdmAHwQ+sGrm0XQVI=\n=24wJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 896a33652eccd675c84e242a5b6373c8cbc54be9\nparent 47d981e8273804a040d71665a4cb16038d6717e1\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560681185 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560719482 +0300\n\nDo not translate captions in log and stderr\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/810e228ed27597cd2b87dd422073e50ab18b7f51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/810e228ed27597cd2b87dd422073e50ab18b7f51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/810e228ed27597cd2b87dd422073e50ab18b7f51/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47d981e8273804a040d71665a4cb16038d6717e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d981e8273804a040d71665a4cb16038d6717e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47d981e8273804a040d71665a4cb16038d6717e1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "613680e4ad1d66101e042f43b912351abba6d2aa",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/810e228ed27597cd2b87dd422073e50ab18b7f51/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/810e228ed27597cd2b87dd422073e50ab18b7f51/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=810e228ed27597cd2b87dd422073e50ab18b7f51",
        "patch": "@@ -23,13 +23,13 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n     // Check for usage of predefined caption\n     switch (style) {\n     case CClientUIInterface::MSG_ERROR:\n-        strCaption += _(\"Error\");\n+        strCaption += \"Error\";\n         break;\n     case CClientUIInterface::MSG_WARNING:\n-        strCaption += _(\"Warning\");\n+        strCaption += \"Warning\";\n         break;\n     case CClientUIInterface::MSG_INFORMATION:\n-        strCaption += _(\"Information\");\n+        strCaption += \"Information\";\n         break;\n     default:\n         strCaption += caption; // Use supplied caption (can be empty)"
      }
    ]
  },
  {
    "sha": "fea324f90e58f74ad76045bd68db1f96f4b00200",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWEzMjRmOTBlNThmNzRhZDc2MDQ1YmQ2OGRiMWY5NmY0YjAwMjAw",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T20:40:51Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T21:13:04Z"
      },
      "message": "Do not translate extremely rare / technical errors",
      "tree": {
        "sha": "32d9ffe1a8af5d3ca7ee7dd52f1615dfe86f0ea6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32d9ffe1a8af5d3ca7ee7dd52f1615dfe86f0ea6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fea324f90e58f74ad76045bd68db1f96f4b00200",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0GsOAACgkQQQEIES5+\nqB+atRAAuQd+4MDJQpFzMggQyGDtoN1By5qal9a069UGyiv+0b/85KBHsQm3EnlY\n+EBJgv5048QHEhvFeRnuZmXOZe1VcGaPqSkMry5dJtv+3f9o4Wx6fcIq7oMytlOn\nHZ3jhlCm9+aKD2NKy155cl8MvoJz/H5EBi+GbPrF9o+Toe7QMIJdag+YLDrXeV8L\noTRbfxss1xKRJkroeD3oW/42JRXaQq1or5Eov4bNRVG60IQG8vzcBttCWz2XU3Z5\nqt2bVR70jMNOB8NpC/MzbL/H8SVSUj/PO+hC3xUoSCWaM00cIMW4pDp5CI86+dTG\nqBI3uBNAPzG9+PE84/E2vrMpzpgaLwJEnq8NWywimvL0IAJFk0zU1Xyv248FXaX4\nX7Be6244HYxJE6otYWWu6CGAAmxbdw6dMF+2sTQTNdQ/XZthd9hXxUaBrBBb/jkm\nrPuzYNM+7HbWIEmWyvKKkf2mb4/PXnG5P8MvcgpSKcdgOJDSR91uDv9Gnqxj/H//\nO7f/NMT6jTZxgK9XMUGfpWd+8jTmnRWcL+MXrDovaJs6CnWH/bmdBEW1KZempCyM\n51CKy8mlMGkuOjI73CWzTLrHMTGD5hcv+u0K2R3xDAOdJHgJzaVLf9GaW4SgrstY\n7W0LusTRJIILRLCAAEGdluGrS1QXFaFl6ll4E4+y1XIWcv/WTvs=\n=MXqB\n-----END PGP SIGNATURE-----",
        "payload": "tree 32d9ffe1a8af5d3ca7ee7dd52f1615dfe86f0ea6\nparent 810e228ed27597cd2b87dd422073e50ab18b7f51\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560717651 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560719584 +0300\n\nDo not translate extremely rare / technical errors\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea324f90e58f74ad76045bd68db1f96f4b00200",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fea324f90e58f74ad76045bd68db1f96f4b00200",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea324f90e58f74ad76045bd68db1f96f4b00200/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "810e228ed27597cd2b87dd422073e50ab18b7f51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/810e228ed27597cd2b87dd422073e50ab18b7f51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/810e228ed27597cd2b87dd422073e50ab18b7f51"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5fcd5ba183ba6c7db2dcd3a7c622d11948cde11a",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fea324f90e58f74ad76045bd68db1f96f4b00200/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fea324f90e58f74ad76045bd68db1f96f4b00200/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=fea324f90e58f74ad76045bd68db1f96f4b00200",
        "patch": "@@ -23,7 +23,8 @@ On a high level, these strings are to be translated:\n \n ### GUI strings\n \n-Anything that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n+Do not translate extremely rare or technical errors. These cases must be commented in the code explicitly.\n+Anything else that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n This includes messages passed to the GUI through the UI interface through `InitMessage`, `ThreadSafeMessageBox` or `ShowProgress`.\n \n General recommendations"
      },
      {
        "sha": "d12d7d386abd67b6cd46826912eeb5e4b319226e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fea324f90e58f74ad76045bd68db1f96f4b00200/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fea324f90e58f74ad76045bd68db1f96f4b00200/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fea324f90e58f74ad76045bd68db1f96f4b00200",
        "patch": "@@ -745,7 +745,8 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n  */\n static bool InitSanityCheck()\n {\n-    if(!ECC_InitSanityCheck()) {\n+    if (!ECC_InitSanityCheck()) {\n+        // This message is intentionally untranslated because the error is extremely rare.\n         InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n         return false;\n     }\n@@ -754,6 +755,7 @@ static bool InitSanityCheck()\n         return false;\n \n     if (!Random_SanityCheck()) {\n+        // This message is intentionally untranslated because the error is extremely rare.\n         InitError(\"OS cryptographic RNG sanity check failure. Aborting.\");\n         return false;\n     }\n@@ -915,8 +917,10 @@ bool AppInitBasicSetup()\n     SetProcessDEPPolicy(PROCESS_DEP_ENABLE);\n #endif\n \n-    if (!SetupNetworking())\n+    if (!SetupNetworking()) {\n+        // This message is intentionally untranslated because the error is extremely rare.\n         return InitError(\"Initializing networking failed\");\n+    }\n \n #ifndef WIN32\n     if (!gArgs.GetBoolArg(\"-sysperms\", false)) {"
      }
    ]
  },
  {
    "sha": "a9be63d7208e46415092feba41864abf2ef40eb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWJlNjNkNzIwOGU0NjQxNTA5MmZlYmE0MTg2NGFiZjJlZjQwZWI0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-04T13:34:57Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T21:14:05Z"
      },
      "message": "Add bilingual messages facilities",
      "tree": {
        "sha": "3e634bb82e7cab2a8db5e452941c8a713304c501",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e634bb82e7cab2a8db5e452941c8a713304c501"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9be63d7208e46415092feba41864abf2ef40eb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0GsR0ACgkQQQEIES5+\nqB9IcQ//VlBoAIYDHYpvrCW8vOg9ePPsWEnC4PkkUC6LH1syP/4N9o1hLdCzfq7X\naYfyBGiAK17RS5KnXxxRJf4GBlvtnoxpDYRP2q6Fgjeaf9yaSc3Vf4ODbj1Ubxkx\n+8xBak9O2JMku9o539Gflv3Xb6115HuOsoqP/HaNBb9mBt1xfEHF+JOSO0e/fNab\nJ3rSOD4pyB/ZaKuDLC+e+eyxRU+a3mofxlZ44/NdZ1bpBo7cCHwP5oh8COCPNoF9\nEAAAk92S3o25JIGyOL2T2YJ+ngXyMUxUICuQKNJFmBDVgMvQeOkln0A9ZRo58Xhc\nRylTR5TXCH3XbJcy9yhgxufo2oTSqcfGQNNDTCKAjnuctgGPiFYgC4+MAZF1vSqq\nWPbxAp4Mtd9cibaltK6HbItY09TOef38C0COfdnzFDnkixeQGEbs7UR9K90mYI5p\nkEAq30wBT7yLEIBbz8xf0YTb5T2xMYlBAht7EE4zfTcoIImRYuj54vfgogfgYEDd\n/bpJiwvHWOA+wYydWUpDAWOOEQSurZtt1OhoKJFNV0BaaoGoJglTOp9omg58nkiG\nw4yGIfCNS1jnbKwoovNQoKHDKJbzDpPPRWy5MXKafEk3MCFExhZ0MQ3SmWHGME2v\nPAM7ZTmmBX3ho29GzHvXrohoa+GShDVlR7BeJGxiJz7VZ8LkMF4=\n=BPUC\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e634bb82e7cab2a8db5e452941c8a713304c501\nparent fea324f90e58f74ad76045bd68db1f96f4b00200\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1549287297 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560719645 +0300\n\nAdd bilingual messages facilities\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9be63d7208e46415092feba41864abf2ef40eb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9be63d7208e46415092feba41864abf2ef40eb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9be63d7208e46415092feba41864abf2ef40eb4/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fea324f90e58f74ad76045bd68db1f96f4b00200",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea324f90e58f74ad76045bd68db1f96f4b00200",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fea324f90e58f74ad76045bd68db1f96f4b00200"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 38,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a28fb5d18989e1aaafa5093ba80a7105c37a8703",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -264,6 +264,10 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.ThreadSafeMessageBox_connect(fn));\n     }\n+    std::unique_ptr<Handler> handleBilingualMessageBox(BilingualMessageBoxFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.ThreadSafeBilingualMessageBox_connect(fn));\n+    }\n     std::unique_ptr<Handler> handleQuestion(QuestionFn fn) override\n     {\n         return MakeHandler(::uiInterface.ThreadSafeQuestion_connect(fn));"
      },
      {
        "sha": "7f8463e024d814fc1be7e40cc13bbd3e40afcfe3",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -199,9 +199,10 @@ class Node\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;\n \n     //! Register handler for message box messages.\n-    using MessageBoxFn =\n-        std::function<bool(const std::string& message, const std::string& caption, unsigned int style)>;\n+    using MessageBoxFn = std::function<bool(const std::string& message, const std::string& caption, unsigned int style)>;\n     virtual std::unique_ptr<Handler> handleMessageBox(MessageBoxFn fn) = 0;\n+    using BilingualMessageBoxFn = std::function<bool(const std::string& noui_message, const std::string& ui_message, const std::string& caption, unsigned int style)>;\n+    virtual std::unique_ptr<Handler> handleBilingualMessageBox(BilingualMessageBoxFn fn) = 0;\n \n     //! Register handler for question messages.\n     using QuestionFn = std::function<bool(const std::string& message,"
      },
      {
        "sha": "83d25f3e0fa90e7b61fc8e0827a24cc63ac3d13c",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -41,6 +41,11 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n     return false;\n }\n \n+bool noui_ThreadSafeBilingualMessageBox(const std::string& noui_message, const std::string& ui_message, const std::string& caption, unsigned int style)\n+{\n+    return noui_ThreadSafeMessageBox(noui_message, caption, style);\n+}\n+\n bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n {\n     return noui_ThreadSafeMessageBox(message, caption, style);\n@@ -54,6 +59,7 @@ void noui_InitMessage(const std::string& message)\n void noui_connect()\n {\n     uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBox);\n+    uiInterface.ThreadSafeBilingualMessageBox_connect(noui_ThreadSafeBilingualMessageBox);\n     uiInterface.ThreadSafeQuestion_connect(noui_ThreadSafeQuestion);\n     uiInterface.InitMessage_connect(noui_InitMessage);\n }"
      },
      {
        "sha": "a555dc9ed12acab01a9f9c714a8badba3d5e956b",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -9,6 +9,8 @@\n \n /** Non-GUI handler, which logs and prints messages. */\n bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style);\n+/** Non-GUI handler, which logs untranslated messages and prints bilingual ones. */\n+bool noui_ThreadSafeBilingualMessageBox(const std::string& noui_message, const std::string& ui_message, const std::string& caption, unsigned int style);\n /** Non-GUI handler, which logs and prints questions. */\n bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style);\n /** Non-GUI handler, which only logs a message. */"
      },
      {
        "sha": "7278c3a8423f120d394c19ffa6147d055cad1a08",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -427,6 +427,7 @@ int GuiMain(int argc, char* argv[])\n \n     // Subscribe to global signals from core\n     std::unique_ptr<interfaces::Handler> handler_message_box = node->handleMessageBox(noui_ThreadSafeMessageBox);\n+    std::unique_ptr<interfaces::Handler> handler_bilingual_message_box = node->handleBilingualMessageBox(noui_ThreadSafeBilingualMessageBox);\n     std::unique_ptr<interfaces::Handler> handler_question = node->handleQuestion(noui_ThreadSafeQuestion);\n     std::unique_ptr<interfaces::Handler> handler_init_message = node->handleInitMessage(noui_InitMessage);\n "
      },
      {
        "sha": "8ec2680ca6dd5145f59348a70889b1799fd1f5dc",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -1382,17 +1382,24 @@ static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, co\n     return ret;\n }\n \n+static bool ThreadSafeBilingualMessageBox(BitcoinGUI* gui, const std::string& noui_message, const std::string& ui_message, const std::string& caption, unsigned int style)\n+{\n+    return ThreadSafeMessageBox(gui, ui_message, caption, style);\n+}\n+\n void BitcoinGUI::subscribeToCoreSignals()\n {\n     // Connect signals to client\n     m_handler_message_box = m_node.handleMessageBox(std::bind(ThreadSafeMessageBox, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    m_handler_bilingual_message_box = m_node.handleBilingualMessageBox(std::bind(ThreadSafeBilingualMessageBox, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4));\n     m_handler_question = m_node.handleQuestion(std::bind(ThreadSafeMessageBox, this, std::placeholders::_1, std::placeholders::_3, std::placeholders::_4));\n }\n \n void BitcoinGUI::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from client\n     m_handler_message_box->disconnect();\n+    m_handler_bilingual_message_box->disconnect();\n     m_handler_question->disconnect();\n }\n "
      },
      {
        "sha": "679406c897e1c698b313627d04671309f60fe119",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -110,6 +110,7 @@ class BitcoinGUI : public QMainWindow\n     interfaces::Node& m_node;\n     WalletController* m_wallet_controller{nullptr};\n     std::unique_ptr<interfaces::Handler> m_handler_message_box;\n+    std::unique_ptr<interfaces::Handler> m_handler_bilingual_message_box;\n     std::unique_ptr<interfaces::Handler> m_handler_question;\n     ClientModel* clientModel = nullptr;\n     WalletFrame* walletFrame = nullptr;"
      },
      {
        "sha": "312e6b34845586d3b9da8b7fb286e2a9992e26f3",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -11,6 +11,7 @@ CClientUIInterface uiInterface;\n \n struct UISignals {\n     boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::last_value<bool>> ThreadSafeMessageBox;\n+    boost::signals2::signal<CClientUIInterface::ThreadSafeBilingualMessageBoxSig, boost::signals2::last_value<bool>> ThreadSafeBilingualMessageBox;\n     boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::last_value<bool>> ThreadSafeQuestion;\n     boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;\n     boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;\n@@ -30,6 +31,7 @@ struct UISignals {\n     }\n \n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);\n+ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeBilingualMessageBox);\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);\n ADD_SIGNALS_IMPL_WRAPPER(InitMessage);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);\n@@ -42,6 +44,7 @@ ADD_SIGNALS_IMPL_WRAPPER(NotifyHeaderTip);\n ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);\n \n bool CClientUIInterface::ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style); }\n+bool CClientUIInterface::ThreadSafeBilingualMessageBox(const std::string& noui_message, const std::string& ui_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeBilingualMessageBox(noui_message, ui_message, caption, style); }\n bool CClientUIInterface::ThreadSafeQuestion(const std::string& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style); }\n void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }"
      },
      {
        "sha": "a22320d55f5ba19b684916a393a730c364a359cd",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -85,6 +85,7 @@ class CClientUIInterface\n \n     /** Show message box. */\n     ADD_SIGNALS_DECL_WRAPPER(ThreadSafeMessageBox, bool, const std::string& message, const std::string& caption, unsigned int style);\n+    ADD_SIGNALS_DECL_WRAPPER(ThreadSafeBilingualMessageBox, bool, const std::string& noui_message, const std::string& ui_message, const std::string& caption, unsigned int style);\n \n     /** If possible, ask the user a question. If not, falls back to ThreadSafeMessageBox(noninteractive_message, caption, style) and returns false. */\n     ADD_SIGNALS_DECL_WRAPPER(ThreadSafeQuestion, bool, const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style);"
      },
      {
        "sha": "d56a9f80bed2e6032107f49ff2fdd2d08ceabb1a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9be63d7208e46415092feba41864abf2ef40eb4/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9be63d7208e46415092feba41864abf2ef40eb4/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=a9be63d7208e46415092feba41864abf2ef40eb4",
        "patch": "@@ -54,6 +54,16 @@ inline std::string _(const char* psz)\n     return G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz;\n }\n \n+struct bilingual_str {\n+    std::string original_str;\n+    std::string translated_str;\n+};\n+\n+inline bilingual_str _(const char* psz, bool translate)\n+{\n+    return bilingual_str{psz, (translate && G_TRANSLATION_FUN) ? (G_TRANSLATION_FUN)(psz) : psz};\n+}\n+\n void SetupEnvironment();\n bool SetupNetworking();\n "
      }
    ]
  },
  {
    "sha": "302806ebf54beb2508550249452a26c0a537de36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDI4MDZlYmY1NGJlYjI1MDg1NTAyNDk0NTJhMjZjMGE1MzdkZTM2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T09:33:29Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T21:23:29Z"
      },
      "message": "Add bilingual InitError() function",
      "tree": {
        "sha": "2d8339f37d9ddbfe33da19b8dd0e4cf694618a0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d8339f37d9ddbfe33da19b8dd0e4cf694618a0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/302806ebf54beb2508550249452a26c0a537de36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0Gs1MACgkQQQEIES5+\nqB+ixA//eFYlBnJEtZfT5WLBVVl//EFWRItJRDrjb7eOq2xWmXl+glPEKdEneZ9F\nOl0pbW3oN9EizqEpU08hfiuX7sIIFQSZO2r0LRIaexXpOUMjpg2KxgG5JOpWlMq+\nnSQr9NC8rwzQ64+0W2qEvvOBs383+mg4eGjt0ADsg+XyXRPb+pZP26inGAh8IDq8\nlarheIIMmqTO2sBKrq/jFyBn4u0enTDfYrMT4qb1EAfMWjhDZEi964PO6hwMULam\n389gR5BM/NCLyv9F+zlWh3erQoxmEpUks1/3vh8vcDgoIaRBoqvP+6h3C1DxPCjR\nImuW5MnSFjUb742YetrQz6IR+n/4d7jsVhMmqxJGk5/OqgMr4DTlYr9tn2PYRKis\ngjy8IbCLEN2eY/c6dTDlAzwbjUVsCjCqXg4zMGY8ucm/IFBnzc3mR3oe8nDJX+uH\nsPYGpSYaAkAaveVqfaeksZLS7woxRr3G9gI3zyz/mLecCjOfRLH1CYySCj4DS/tT\nhWNbDgKyIqHDORkm24bRw/kMOBjlrbamWiQhVgYjJwOwOIX3/qZ2DQLgSW574L+y\n7E72W2xlE3EK4megaAM6MNZLLeVk26YE1thCTx9eX2g8BDEB3Hfv5cffz1s9/hD2\nbvcQc2KQBilV/fnvmbrB7kzz8xlXpHa0Eo7DOp/Nm2zRLmO06Z4=\n=yD96\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d8339f37d9ddbfe33da19b8dd0e4cf694618a0a\nparent a9be63d7208e46415092feba41864abf2ef40eb4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560677609 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560720209 +0300\n\nAdd bilingual InitError() function\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/302806ebf54beb2508550249452a26c0a537de36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/302806ebf54beb2508550249452a26c0a537de36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/302806ebf54beb2508550249452a26c0a537de36/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9be63d7208e46415092feba41864abf2ef40eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9be63d7208e46415092feba41864abf2ef40eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9be63d7208e46415092feba41864abf2ef40eb4"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e627d3ed71b9f5e52ef2acf4beef9da65cdd882b",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/302806ebf54beb2508550249452a26c0a537de36/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/302806ebf54beb2508550249452a26c0a537de36/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=302806ebf54beb2508550249452a26c0a537de36",
        "patch": "@@ -6,6 +6,9 @@\n #ifndef BITCOIN_UI_INTERFACE_H\n #define BITCOIN_UI_INTERFACE_H\n \n+#include <tinyformat.h>\n+#include <util/system.h>\n+\n #include <functional>\n #include <memory>\n #include <stdint.h>\n@@ -131,4 +134,20 @@ bool InitError(const std::string& str);\n \n extern CClientUIInterface uiInterface;\n \n+/** Show bilingual error message **/\n+template <typename... Args>\n+bool InitError(const bilingual_str& fmt, const Args&... args)\n+{\n+    const std::string noui_message = tfm::format(fmt.original_str, args...);\n+    const std::string translated_message = tfm::format(fmt.translated_str, args...);\n+    std::string ui_message;\n+    if (noui_message == translated_message) {\n+        ui_message = noui_message;\n+    } else {\n+        ui_message = translated_message + \"\\n\\n\" + _(\"Original message:\") + \"\\n\" + noui_message;\n+    }\n+    uiInterface.ThreadSafeBilingualMessageBox(noui_message, ui_message, \"\", CClientUIInterface::MSG_ERROR);\n+    return false;\n+}\n+\n #endif // BITCOIN_UI_INTERFACE_H"
      }
    ]
  },
  {
    "sha": "8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWNhMmNmM2IxZjVlOWVhN2Y5ODUzNGI5YTNiNjVjMThmMjYyODhi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-04T22:19:58Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-16T21:27:11Z"
      },
      "message": "Use bilingual InitError() in simple cases",
      "tree": {
        "sha": "369e5ea7cc26677a4d1bbb26336ce367924fe33f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/369e5ea7cc26677a4d1bbb26336ce367924fe33f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0GtEgACgkQQQEIES5+\nqB9zrA//TaHLxZ26NMPM413tFdYGG++4S7dt+YvcwbTYb3jV/U0jwFVo6PG1Twke\nverH3hjMbu7xvqb4yhaQzo8o0Jfc6DNuIg54YvHXb+Qt4KUFRtuxnek8RUdrGcpU\n7PwYYZ4ZX4TVRZWYo83YED4tGh4UepydEHHASl8cTDgDDW6gqoVL6HfJP8u0bXdf\nlszHJ5NKEfmO9O6vZs447bVEvwT+ntZgj8bB0O4Ds64skrNqjIBgxqbz7oPtgPt3\nSiqPKFo9CUMQq8lSo+vwYki4Mw/q8O9yZhCl0tPl5xR2QKBFgv9PcHhoGfg75EfW\nU8gyvKOhBYH1IGnV96taO6ITGWesO62keK3N2BthgA38bIUNKGK6KT4TrRsBFBFF\nCQLT4/mpdOUkoilrqfS21n76hRcfWoaUj3BObJxzllHnHHM57SMg75lONVyKKFaa\n74k9nXuryE1BiGt/MIYT5LHFmZ7U5tDeGOh7swdtoLHUrfIbilJkYMsSlDfAmg+n\nTZJtFjdQHSf7z1pXIhEO04tsixFPuAlj3lHKTbFBPhUUS0qjBnUWyzpE1vkeHyJU\ntugYoBHsX9e+OfuZi1N4Wd2bGmgANMHrkngVvzkhMDa30F2BE5z7YxbmwcSCN1tQ\neYN8NmmORgrXHwXWK4KCBRA3uxhegOU07b9+WqcgNM5A6aBZDh4=\n=udEB\n-----END PGP SIGNATURE-----",
        "payload": "tree 369e5ea7cc26677a4d1bbb26336ce367924fe33f\nparent 302806ebf54beb2508550249452a26c0a537de36\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1549318798 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560720431 +0300\n\nUse bilingual InitError() in simple cases\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "302806ebf54beb2508550249452a26c0a537de36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/302806ebf54beb2508550249452a26c0a537de36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/302806ebf54beb2508550249452a26c0a537de36"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 38,
      "deletions": 40
    },
    "files": [
      {
        "sha": "3230b9b3c4b7dbd8aadebe4bfcbcd1167ca3d76b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 35,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b",
        "patch": "@@ -118,7 +118,7 @@ NODISCARD static bool CreatePidFile()\n         fclose(file);\n         return true;\n     } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n+        return InitError(_(\"Unable to create the PID file '%s': %s\", true), GetPidFile().string(), std::strerror(errno));\n     }\n }\n \n@@ -957,7 +957,7 @@ bool AppInitParameterInteraction()\n     // on the command line or in this network's section of the config file.\n     std::string network = gArgs.GetChainName();\n     for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n-        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n+        return InitError(_(\"Config setting for %s only applied on %s network when in [%s] section.\", true), arg, network, network);\n     }\n \n     // Warn if unrecognized section name are present in the config file.\n@@ -966,7 +966,7 @@ bool AppInitParameterInteraction()\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n+        return InitError(_(\"Specified blocks directory \\\"%s\\\" does not exist.\", true), gArgs.GetArg(\"-blocksdir\", \"\").c_str());\n     }\n \n     // parse and validate enabled filter types\n@@ -979,7 +979,7 @@ bool AppInitParameterInteraction()\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n-                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+                return InitError(_(\"Unknown -blockfilterindex value %s.\", true), name);\n             }\n             g_enabled_filter_types.push_back(filter_type);\n         }\n@@ -988,16 +988,16 @@ bool AppInitParameterInteraction()\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+            return InitError(_(\"Prune mode is incompatible with -txindex.\", true));\n         if (!g_enabled_filter_types.empty()) {\n-            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\", true));\n         }\n     }\n \n     // -bind and -whitebind can't be set when not listening\n     size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n-        return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n+        return InitError(_(\"Cannot set -bind or -whitebind together with -listen=0\", true));\n     }\n \n     // Make sure enough file descriptors are available\n@@ -1015,7 +1015,7 @@ bool AppInitParameterInteraction()\n #endif\n     nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\"));\n+        return InitError(_(\"Not enough file descriptors available.\", true));\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n@@ -1060,7 +1060,7 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n         const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n         if (!IsHexNumber(minChainWorkStr)) {\n-            return InitError(strprintf(\"Invalid non-hex (%s) minimum chain work value specified\", minChainWorkStr));\n+            return InitError(_(\"Invalid non-hex (%s) minimum chain work value specified\", true), minChainWorkStr);\n         }\n         nMinimumChainWork = UintToArith256(uint256S(minChainWorkStr));\n     } else {\n@@ -1075,7 +1075,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n+        return InitError(_(\"-maxmempool must be at least %d MB\", true), std::ceil(nMempoolSizeMin / 1000000.0));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n@@ -1098,7 +1098,7 @@ bool AppInitParameterInteraction()\n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n     int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n-        return InitError(_(\"Prune cannot be configured with a negative value.\"));\n+        return InitError(_(\"Prune cannot be configured with a negative value.\", true));\n     }\n     nPruneTarget = (uint64_t) nPruneArg * 1024 * 1024;\n     if (nPruneArg == 1) {  // manual pruning: -prune=1\n@@ -1107,7 +1107,7 @@ bool AppInitParameterInteraction()\n         fPruneMode = true;\n     } else if (nPruneTarget) {\n         if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\n-            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n+            return InitError(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\", true), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024);\n         }\n         LogPrintf(\"Prune configured to target %u MiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n         fPruneMode = true;\n@@ -1120,7 +1120,7 @@ bool AppInitParameterInteraction()\n \n     peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n-        return InitError(\"peertimeout cannot be configured with a negative value.\");\n+        return InitError(_(\"peertimeout cannot be configured with a negative value.\", true));\n     }\n \n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n@@ -1157,7 +1157,7 @@ bool AppInitParameterInteraction()\n \n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n-        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+        return InitError(_(\"acceptnonstdtxn is not currently supported for %s chain\", true), chainparams.NetworkIDString());\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n@@ -1173,10 +1173,10 @@ bool AppInitParameterInteraction()\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n-        return InitError(\"rpcserialversion must be non-negative.\");\n+        return InitError(_(\"rpcserialversion must be non-negative.\", true));\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n-        return InitError(\"unknown rpcserialversion requested.\");\n+        return InitError(_(\"unknown rpcserialversion requested.\", true));\n \n     nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n@@ -1197,10 +1197,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n+        return InitError(_(\"Cannot write to data directory '%s'; check permissions.\", true), datadir.string());\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), _(PACKAGE_NAME)));\n+        return InitError(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\", true), datadir.string(), _(PACKAGE_NAME));\n     }\n     return true;\n }\n@@ -1218,7 +1218,7 @@ bool AppInitSanityChecks()\n \n     // Sanity check\n     if (!InitSanityCheck())\n-        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n+        return InitError(_(\"Initialization sanity check failed. %s is shutting down.\", true), _(PACKAGE_NAME));\n \n     // Probe the data directory lock to give an early error message, if possible\n     // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n@@ -1253,8 +1253,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             LogInstance().ShrinkDebugFile();\n         }\n         if (!LogInstance().OpenDebugLog()) {\n-            return InitError(strprintf(\"Could not open debug log file %s\",\n-                LogInstance().m_file_path.string()));\n+            return InitError(_(\"Could not open debug log file %s\", true), LogInstance().m_file_path.string());\n         }\n     }\n \n@@ -1329,7 +1328,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n         if (!AppInitServers())\n-            return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n+            return InitError(_(\"Unable to start HTTP server. See debug log for details.\", true));\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n@@ -1357,21 +1356,20 @@ bool AppInitMain(InitInterfaces& interfaces)\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n+            return InitError(_(\"User Agent comment (%s) contains unsafe characters.\", true), cmt);\n         uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n-            strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n+        return InitError(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\", true), strSubVersion.size(), MAX_SUBVERSION_LENGTH);\n     }\n \n     if (gArgs.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n         for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n+                return InitError(_(\"Unknown network specified in -onlynet: '%s'\", true), snet);\n             nets.insert(net);\n         }\n         for (int n = 0; n < NET_MAX; n++) {\n@@ -1392,12 +1390,12 @@ bool AppInitMain(InitInterfaces& interfaces)\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(_(\"Invalid -proxy address or hostname: '%s'\", true), proxyArg);\n         }\n \n         proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(_(\"Invalid -proxy address or hostname: '%s'\", true), proxyArg);\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1416,11 +1414,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(_(\"Invalid -onion address or hostname: '%s'\", true), onionArg);\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n             if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(_(\"Invalid -onion address or hostname: '%s'\", true), onionArg);\n             SetProxy(NET_ONION, addrOnion);\n             SetReachable(NET_ONION, true);\n         }\n@@ -1533,7 +1531,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!mapBlockIndex.empty() && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\", true));\n                 }\n \n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n@@ -1712,11 +1710,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace(GetDataDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n+        InitError(_(\"Error: Disk space is low for %s\", true), GetDataDir());\n         return false;\n     }\n     if (!CheckDiskSpace(GetBlocksDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n+        InitError(_(\"Error: Disk space is low for %s\", true), GetBlocksDir());\n         return false;\n     }\n \n@@ -1808,7 +1806,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             return InitError(ResolveErrMsg(\"whitebind\", strBind));\n         }\n         if (addrBind.GetPort() == 0) {\n-            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+            return InitError(_(\"Need to specify a port with -whitebind: '%s'\", true), strBind);\n         }\n         connOptions.vWhiteBinds.push_back(addrBind);\n     }\n@@ -1817,7 +1815,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         CSubNet subnet;\n         LookupSubNet(net.c_str(), subnet);\n         if (!subnet.IsValid())\n-            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+            return InitError(_(\"Invalid netmask specified in -whitelist: '%s'\", true), net);\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n "
      },
      {
        "sha": "57b8ab52b49bfc90814d0ca3f9bc606e8419dc54",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=8aca2cf3b1f5e9ea7f98534b9a3b65c18f26288b",
        "patch": "@@ -86,7 +86,7 @@ bool WalletInit::ParameterInteraction() const\n \n     if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n         if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n+            return InitError(_(\"%s is only allowed with a single wallet file\", true), \"-salvagewallet\");\n         }\n         // Rewrite just private keys: rescan to find transactions\n         if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n@@ -103,7 +103,7 @@ bool WalletInit::ParameterInteraction() const\n     // -zapwallettxes implies a rescan\n     if (zapwallettxes) {\n         if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n+            return InitError(_(\"%s is only allowed with a single wallet file\", true), \"-zapwallettxes\");\n         }\n         if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -rescan=1\\n\", __func__);\n@@ -112,14 +112,14 @@ bool WalletInit::ParameterInteraction() const\n \n     if (is_multiwallet) {\n         if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-upgradewallet\"));\n+            return InitError(_(\"%s is only allowed with a single wallet file\", true), \"-upgradewallet\");\n         }\n     }\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))\n-        return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n+        return InitError(_(\"-sysperms is not allowed in combination with enabled wallet functionality\", true));\n     if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n-        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n+        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\", true));\n \n     return true;\n }"
      }
    ]
  }
]