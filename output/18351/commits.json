[
  {
    "sha": "7237f928118f3ab2df4a905304ef9141f150e2d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjM3ZjkyODExOGYzYWIyZGY0YTkwNTMwNGVmOTE0MWYxNTBlMmQ0",
    "commit": {
      "author": {
        "name": "Matt Ward",
        "email": "mattwardiom",
        "date": "2020-03-14T16:00:00Z"
      },
      "committer": {
        "name": "Matt Ward",
        "email": "mattwardiom",
        "date": "2020-03-14T16:00:00Z"
      },
      "message": "Updated text on send confirmation dialog",
      "tree": {
        "sha": "a89195fc3e030b8683d4896320dc4d7eb5f8ac7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a89195fc3e030b8683d4896320dc4d7eb5f8ac7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7237f928118f3ab2df4a905304ef9141f150e2d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7237f928118f3ab2df4a905304ef9141f150e2d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7237f928118f3ab2df4a905304ef9141f150e2d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7237f928118f3ab2df4a905304ef9141f150e2d4/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7f8176a1ebd00679596971fd01012cf61743b826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f8176a1ebd00679596971fd01012cf61743b826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f8176a1ebd00679596971fd01012cf61743b826"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e5d7a08e0e26687b8723868e7c8493a777af7d4d",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=7237f928118f3ab2df4a905304ef9141f150e2d4",
        "patch": "@@ -11,7 +11,7 @@\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n-   <string>Send Coins</string>\n+   <string>Are you sure you want to send?</string>\n   </property>\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\" stretch=\"0,1,0,0\">\n    <property name=\"bottomMargin\">"
      },
      {
        "sha": "2f94565fea15abf160a6b27a5546df160f2e5176",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=7237f928118f3ab2df4a905304ef9141f150e2d4",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -344,9 +344,9 @@ void SendCoinsDialog::on_sendButton_clicked()\n         // append RBF message according to transaction's signalling\n         questionString.append(\"<span style='font-size:10pt; font-weight:normal;'>\");\n         if (ui->optInRBF->isChecked()) {\n-            questionString.append(tr(\"You can increase the fee later (signals Replace-By-Fee, BIP-125).\"));\n+            questionString.append(tr(\"You can increase the fee later (Signaling Replace-By-Fee).\"));\n         } else {\n-            questionString.append(tr(\"Not signalling Replace-By-Fee, BIP-125.\"));\n+            questionString.append(tr(\"You cannot increase the fee later (Not signalling Replace-By-Fee)\"));\n         }\n         questionString.append(\"</span>\");\n     }\n@@ -374,7 +374,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     } else {\n         questionString = questionString.arg(\"<br /><br />\" + formatted.at(0));\n     }\n-    const QString confirmation = model->privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n+    const QString confirmation = model->privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Are you sure you want to send?\");\n     const QString confirmButtonText = model->privateKeysDisabled() ? tr(\"Copy PSBT to clipboard\") : tr(\"Send\");\n     SendConfirmationDialog confirmationDialog(confirmation, questionString, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();"
      }
    ]
  },
  {
    "sha": "0b717249d7abd1064adf2575f464bd7bd60b74bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjcxNzI0OWQ3YWJkMTA2NGFkZjI1NzVmNDY0YmQ3YmQ2MGI3NGJi",
    "commit": {
      "author": {
        "name": "Matt Ward",
        "email": "mattwardiom@gmail.com",
        "date": "2020-06-02T18:20:57Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2020-06-02T18:20:57Z"
      },
      "message": "Merge branch 'master' into Mar-20-send-confirmation-dialog",
      "tree": {
        "sha": "400ffeab1b81c40c7ece13c035cbb95438869ed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/400ffeab1b81c40c7ece13c035cbb95438869ed5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b717249d7abd1064adf2575f464bd7bd60b74bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1piJCRBK7hj4Ov3rIwAAdHIIAJG16KYJKbrRPdn12Tod0Ll+\nGRCQ0h7MT2ANnsWlhFa7gIuI7S956rWQpKfYebcKpsP0/0YzD5d6LmqkNUfyQd4y\nMtVDG6P5d+dS/L+NOCMmVtFRCvh+efYlMBgOf9jNuj8dIykBY7POdIR3vDGMU+DF\nSwQ01XkO2M03g2CLnHeVUY1TVuPFBf9GHagbQ6Q6uJVo06Wu/INdS9dlFsUAopIG\noHifUnkkaJsF5DE/zwc2ovBBO4IrQCX2UpRBzhQhOWlL5oU6lba4Qshya8Ie0Cxt\nFbowTYg162nCuGHv1/tUqAJAOFDS1AWHEs9tBDrPq0jFBXMCCHzALZeiKnDWpVw=\n=WXMY\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 400ffeab1b81c40c7ece13c035cbb95438869ed5\nparent 7237f928118f3ab2df4a905304ef9141f150e2d4\nparent 5879bfa9a541576100d939d329a2639b79d9e4f9\nauthor Matt Ward <mattwardiom@gmail.com> 1591122057 +0100\ncommitter GitHub <noreply@github.com> 1591122057 +0100\n\nMerge branch 'master' into Mar-20-send-confirmation-dialog"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b717249d7abd1064adf2575f464bd7bd60b74bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b717249d7abd1064adf2575f464bd7bd60b74bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b717249d7abd1064adf2575f464bd7bd60b74bb/comments",
    "author": {
      "login": "dannmat",
      "id": 9567098,
      "node_id": "MDQ6VXNlcjk1NjcwOTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9567098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dannmat",
      "html_url": "https://github.com/dannmat",
      "followers_url": "https://api.github.com/users/dannmat/followers",
      "following_url": "https://api.github.com/users/dannmat/following{/other_user}",
      "gists_url": "https://api.github.com/users/dannmat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dannmat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dannmat/subscriptions",
      "organizations_url": "https://api.github.com/users/dannmat/orgs",
      "repos_url": "https://api.github.com/users/dannmat/repos",
      "events_url": "https://api.github.com/users/dannmat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dannmat/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7237f928118f3ab2df4a905304ef9141f150e2d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7237f928118f3ab2df4a905304ef9141f150e2d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "5879bfa9a541576100d939d329a2639b79d9e4f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5879bfa9a541576100d939d329a2639b79d9e4f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5879bfa9a541576100d939d329a2639b79d9e4f9"
      }
    ],
    "stats": {
      "total": 106067,
      "additions": 49989,
      "deletions": 56078
    },
    "files": [
      {
        "sha": "eeb2d6590b630d5e1854169ff795785d2928a29f",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -16,10 +16,8 @@ environment:\n   VCPKG_COMMIT_ID: 'ed0df8ecc4ed7e755ea03e18aaf285fd9b4b4a74'\n cache:\n - C:\\tools\\vcpkg\\installed -> build_msvc\\vcpkg-packages.txt\n-- C:\\Users\\appveyor\\clcache -> .appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n - C:\\Qt5.9.8_x64_static_vs2019\n install:\n-- cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq\n # Powershell block below is to install the c++ dependencies via vcpkg. The pseudo code is:\n@@ -46,7 +44,6 @@ install:\n       }\n       c:\\tools\\vcpkg\\vcpkg integrate install\n before_build:\n-- ps:  clcache -M 536870912\n # Powershell block below is to download and extract the Qt static libraries. The pseudo code is:\n # 1. If the Qt destination directory exists assume it is correct and do nothing. To\n #    force a fresh install of the packages delete the job's appveyor cache.\n@@ -72,21 +69,20 @@ before_build:\n          Write-Host \"Qt binaries already present.\";\n       }\n - cmd: python build_msvc\\msvc-autogen.py\n-- ps:  Start-Process clcache-server\n-- ps:  fsutil behavior set disablelastaccess 0 # Enable Access time feature on Windows (for clcache)\n build_script:\n-- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nologo\n+- cmd: msbuild /p:TrackFileAccess=false build_msvc\\bitcoin.sln /m /v:q /nologo\n after_build:\n-- ps:  fsutil behavior set disablelastaccess 1 # Disable Access time feature on Windows (better performance)\n-- ps:  clcache -z\n #- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n test_script:\n-- cmd: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n+- cmd: src\\test_bitcoin.exe -l test_suite\n - cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n # Fee estimation test failing on appveyor with: WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted.\n-- cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n+# functional tests disabled for now. See\n+# https://github.com/bitcoin/bitcoin/pull/18626#issuecomment-613396202\n+# https://github.com/bitcoin/bitcoin/issues/18623\n+# - cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n artifacts:\n #- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n deploy: off"
      },
      {
        "sha": "fde555153170c475151787e405273c30d0d70cec",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 16,
        "deletions": 31,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,33 +1,18 @@\n-task:\n-  name: \"FreeBsd 12.0 amd64  [GOAL: install]  [no depends, only system libs]\"\n-  freebsd_instance:\n-    image: freebsd-12-0-release-amd64\n-    cpu: 8\n-    memory: 8G\n-  timeout_in: 60m\n-  env:\n-    MAKEJOBS: \"-j9\"\n-    CONFIGURE_OPTS: \"--disable-dependency-tracking\"\n-    GOAL: \"install\"\n-    TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n-    CCACHE_SIZE: \"200M\"\n-    CCACHE_COMPRESS: 1\n-    CCACHE_DIR: \"/tmp/ccache_dir\"\n-  ccache_cache:\n-    folder: \"/tmp/ccache_dir\"\n-  install_script:\n-    - pkg install -y autoconf automake boost-libs git gmake libevent libtool pkgconf python3 ccache\n-    - ./contrib/install_db4.sh $(pwd)\n-    - ccache --max-size=${CCACHE_SIZE}\n-  configure_script:\n-    - ./autogen.sh\n-    - ./configure ${CONFIGURE_OPTS} BDB_LIBS=\"-L$(pwd)/db4/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I$(pwd)/db4/include\" || ( cat config.log && false)\n-  make_script:\n-    - gmake ${MAKEJOBS} ${GOAL} || ( echo \"Build failure. Verbose build follows.\" && gmake ${GOAL} V=1 ; false )\n-  check_script:\n-    - gmake check ${MAKEJOBS} VERBOSE=1\n-  functional_test_script:\n-    - ./test/functional/test_runner.py --jobs 9 --ci --extended --exclude feature_dbcrash --combinedlogslen=1000 --quiet --failfast\n+#task:\n+#  name: \"Windows\"\n+#  windows_container:\n+#    image: cirrusci/windowsservercore:2019\n+#  env:\n+#    CIRRUS_SHELL: powershell\n+#    PATH: 'C:\\Python37;C:\\Python37\\Scripts;%PATH%'\n+#    PYTHONUTF8: 1\n+#    QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.6/Qt5.9.8_x64_static_vs2019.zip'\n+#    QT_DOWNLOAD_HASH: '9a8c6eb20967873785057fdcd329a657c7f922b0af08c5fde105cc597dd37e21'\n+#    QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n+#    VCPKG_INSTALL_PATH: 'C:\\tools\\vcpkg\\installed'\n+#    VCPKG_COMMIT_ID: 'ed0df8ecc4ed7e755ea03e18aaf285fd9b4b4a74'\n+#  install_script:\n+#    - choco install python --version=3.7.7 -y\n task:\n   name: \"x86_64 Linux  [GOAL: install]  [bionic]  [Using ./ci/ system]\"\n   container:\n@@ -37,7 +22,7 @@ task:\n   timeout_in: 60m\n   env:\n     MAKEJOBS: \"-j9\"\n-    RUN_CI_ON_HOST: \"1\"\n+    DANGER_RUN_CI_ON_HOST: \"1\"\n     TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n     CCACHE_SIZE: \"200M\"\n     CCACHE_DIR: \"/tmp/ccache_dir\""
      },
      {
        "sha": "d44ac27eb9370e0b02b241ee28e67d0d71a947e8",
        "filename": ".fuzzbuzz.yml",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/.fuzzbuzz.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/.fuzzbuzz.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.fuzzbuzz.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,16 @@\n+base: ubuntu:16.04\n+language: c++\n+engine: libFuzzer\n+environment:\n+  - CXXFLAGS=-fcoverage-mapping -fno-omit-frame-pointer -fprofile-instr-generate -gline-tables-only -O1\n+setup:\n+  - sudo apt-get update\n+  - sudo apt-get install -y autoconf bsdmainutils clang git libboost-all-dev libboost-program-options-dev libc++1 libc++abi1 libc++abi-dev libc++-dev libclang1 libclang-dev libdb5.3++ libevent-dev libllvm-ocaml-dev libomp5 libomp-dev libprotobuf-dev libqt5core5a libqt5dbus5 libqt5gui5 libssl-dev libtool llvm llvm-dev llvm-runtime pkg-config protobuf-compiler qttools5-dev qttools5-dev-tools software-properties-common\n+  - ./autogen.sh\n+  - CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+  - make\n+  - git clone https://github.com/bitcoin-core/qa-assets\n+auto_targets:\n+  find_targets_command: find src/test/fuzz/ -executable -type f ! -name \"*.cpp\" ! -name \"*.h\"\n+  base_corpus_dir: qa-assets/fuzz_seed_corpus/\n+  memory_limit: none"
      },
      {
        "sha": "8be78a1f6ec909682caa2f1762f434d06ae60d9a",
        "filename": ".github/ISSUE_TEMPLATE/good_first_issue.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/.github/ISSUE_TEMPLATE/good_first_issue.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/.github/ISSUE_TEMPLATE/good_first_issue.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE/good_first_issue.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -7,15 +7,14 @@ assignees: ''\n \n ---\n \n+<!-- A good first issue is an uncontroversial issue, that has a relatively unique and obvious solution -->\n+\n+<!-- Motivate the issue and explain the solution briefly -->\n \n #### Useful skills:\n \n <!-- (For example, \u201cC++11 std::thread\u201d, \u201cQt5 GUI and async GUI design\u201d or \u201cbasic understanding of Bitcoin mining and the Bitcoin Core RPC interface\u201d.) -->\n \n #### Want to work on this issue?\n \n-The purpose of the `good first issue` label is to highlight which issues are suitable for a new contributor without a deep understanding of the codebase.\n-\n-You do not need to request permission to start working on this. You are encouraged to comment on the issue if you are planning to work on it. This will help other contributors monitor which issues are actively being addressed and is also an effective way to request assistance if and when you need it.\n-\n For guidance on contributing, please read [CONTRIBUTING.md](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md) before opening your pull request."
      },
      {
        "sha": "5b9ec1f355a5bdd15ca2c3d8e14708dbcba68577",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -5,6 +5,8 @@\n src/bitcoin\n src/bitcoind\n src/bitcoin-cli\n+src/bitcoin-gui\n+src/bitcoin-node\n src/bitcoin-tx\n src/bitcoin-wallet\n src/test/fuzz"
      },
      {
        "sha": "1598813ed2e10f08f0b95da73ba812f0fc3998b2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 37,
        "deletions": 22,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -25,6 +25,8 @@\n # [1] https://docs.travis-ci.com/user/caching/#build-phases\n # [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts\n \n+version: ~> 1.0\n+\n dist: xenial\n os: linux\n language: minimal\n@@ -36,9 +38,6 @@ cache:\n     - $TRAVIS_BUILD_DIR/depends/sdk-sources\n     - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n     - $TRAVIS_BUILD_DIR/releases/$HOST\n-    # macOS\n-    - $HOME/Library/Caches/Homebrew\n-    - /usr/local/Homebrew\n before_cache:\n   - if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then brew cleanup; fi\n stages:\n@@ -47,7 +46,6 @@ stages:\n env:\n   global:\n     - CI_RETRY_EXE=\"travis_retry\"\n-    - CI_WAIT=\"while sleep 500; do echo .; done\"\n     - CACHE_ERR_MSG=\"Error! Initial build successful, but not enough time remains to run later build stages and tests. See https://docs.travis-ci.com/user/customizing-the-build#build-timeouts . Please manually re-run this job by using the travis restart button. The next run should not time out because the build cache has been saved.\"\n before_install:\n   - set -o errexit; source ./ci/test/00_setup_env.sh\n@@ -72,7 +70,7 @@ jobs:\n     - stage: lint\n       name: 'lint'\n       env:\n-      cache: false\n+      cache: pip\n       language: python\n       python: '3.5' # Oldest supported version according to doc/dependencies.md\n       install:\n@@ -84,19 +82,19 @@ jobs:\n \n     - stage: test\n       name: 'ARM  [GOAL: install]  [buster]  [unit tests, functional tests]'\n-      arch: arm64\n+      arch: arm64  # Can disable QEMU_USER_CMD and run the tests natively without qemu\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n-        QEMU_USER_CMD=\"\"  # Can run the tests natively without qemu\n+        QEMU_USER_CMD=\"\"\n \n # s390 build was disabled temporarily because of disk space issues on the Travis VM\n #\n #    - stage: test\n #      name: 'S390x  [GOAL: install]  [buster]  [unit tests, functional tests]'\n-#      arch: s390x\n+#      arch: s390x  # Can disable QEMU_USER_CMD and run the tests natively without qemu\n #      env: >-\n #        FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\"\n-#        QEMU_USER_CMD=\"\"  # Can run the tests natively without qemu\n+#        QEMU_USER_CMD=\"\"\n \n     - stage: test\n       name: 'Win64  [GOAL: deploy]  [unit tests, no gui, no functional tests]'\n@@ -109,35 +107,32 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_i686_centos.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [previous releases, uses qt5 dev package and some depends packages] [unsigned char]'\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [C++17, previous releases, uses qt5 dev package and some depends packages] [unsigned char]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_qt5.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n+      # Not enough memory on travis machines, so feature_block is excluded for now\n       env: >-\n+        TEST_RUNNER_EXTRA=\"--exclude feature_block\"\n         FILE_ENV=\"./ci/test/00_setup_env_native_tsan.sh\"\n-        TEST_RUNNER_EXTRA=\"--exclude feature_block\"  # Not enough memory on travis machines\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_asan.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, valgrind]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_valgrind.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: fuzzer,address,undefined]'\n+      name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, sanitizers: fuzzer,address,undefined]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_fuzz.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, fuzzers under valgrind]'\n+      name: 'x86_64 Linux [GOAL: install]  [bionic]  [multiprocess]'\n+      if: type != pull_request OR commit_message =~ /depends:|multiprocess:/ # Skip on non-depends, non-multiprocess PRs\n       env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_fuzz_with_valgrind.sh\"\n+        FILE_ENV=\"./ci/test/00_setup_env_native_multiprocess.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n@@ -153,8 +148,28 @@ jobs:\n       name: 'macOS 10.14 native [GOAL: install] [GUI] [no depends]'\n       os: osx\n       # Use the most recent version:\n-      # Xcode 11.2.1, macOS 10.14, JDK 13.0.1, SDK 10.15\n+      # Xcode 11.3.1, macOS 10.14, SDK 10.15\n       # https://docs.travis-ci.com/user/reference/osx/#macos-version\n-      osx_image: xcode11.2\n+      osx_image: xcode11.3\n+      cache:\n+        directories:\n+          - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n+          - $TRAVIS_BUILD_DIR/releases/$HOST\n+          - $HOME/Library/Caches/Homebrew\n+          - /usr/local/Homebrew\n+      addons:\n+        homebrew:\n+          packages:\n+          - libtool\n+          - berkeley-db4\n+          - boost\n+          - miniupnpc\n+          - qt\n+          - qrencode\n+          - python3\n+          - ccache\n+          - zeromq\n       env: >-\n+        DANGER_RUN_CI_ON_HOST=true\n+        CI_USE_APT_INSTALL=no\n         FILE_ENV=\"./ci/test/00_setup_env_mac_host.sh\""
      },
      {
        "sha": "cd9e237158bc91391db65221aa794d0bab450c04",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-019x]\n+[bitcoin.qt-translation-020x]\n file_filter = src/qt/locale/bitcoin_<lang>.ts\n source_file = src/qt/locale/bitcoin_en.ts\n source_lang = en"
      },
      {
        "sha": "f34b1e1e15f3e08917532c06c4996723eda2acb7",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 51,
        "deletions": 7,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -14,15 +14,49 @@ purposes. As such there are repository \"maintainers\" who are responsible for\n merging pull requests as well as a \"lead maintainer\" who is responsible for the\n release cycle, overall merging, moderation and appointment of maintainers.\n \n+Getting Started\n+---------------\n+\n+New contributors are very welcome and needed.\n+\n+Reviewing and testing is the most effective way you can contribute as a new\n+contributor, and it also will teach you much more about the code and process\n+than opening PRs. Please refer to the section [peer review](#peer-review) later\n+in this document.\n+\n+Before you start contributing, familiarize yourself with the Bitcoin Core build\n+system and tests. Refer to the documentation in the repository on how to build\n+Bitcoin Core and how to run the unit and functional tests.\n+\n+There are many open issues of varying difficulty waiting to be fixed.\n If you're looking for somewhere to start contributing, check out the\n [good first issue](https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\n-list or participate in a weekly [Bitcoin Core PR Review Club](https://bitcoincore.reviews/) meeting.\n+list or changes that are\n+[up for grabs](https://github.com/bitcoin/bitcoin/issues?utf8=%E2%9C%93&q=label%3A%22Up+for+grabs%22).\n+Some of them might no longer be applicable. So if you are interested, but\n+unsure, you might want to leave a comment on the issue first.\n+\n+You may also participate in the weekly\n+[Bitcoin Core PR Review Club](https://bitcoincore.reviews/) meeting.\n+\n+### Good First Issue Label\n+\n+The purpose of the `good first issue` label is to highlight which issues are\n+suitable for a new contributor without a deep understanding of the codebase.\n+\n+However, good first issues can be solved by anyone. If they remain unsolved\n+for a longer time, a frequent contributor might address them.\n+\n+You do not need to request permission to start working on an issue. However,\n+you are encouraged to leave a comment if you are planning to work on it. This\n+will help other contributors monitor which issues are actively being addressed\n+and is also an effective way to request assistance if and when you need it.\n \n Communication Channels\n ----------------------\n \n Most communication about Bitcoin Core development happens on IRC, in the\n-#bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\n+`#bitcoin-core-dev` channel on Freenode. The easiest way to participate on IRC is\n with the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\n history logs can be found\n on [http://www.erisian.com.au/bitcoin-core-dev/](http://www.erisian.com.au/bitcoin-core-dev/)\n@@ -33,7 +67,7 @@ requests.\n \n The developer\n [mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n-should be used to discuss complicated or controversial changes before working on\n+should be used to discuss complicated or controversial consensus or P2P protocol changes before working on\n a patch set.\n \n \n@@ -53,6 +87,8 @@ To contribute a patch, the workflow is as follows:\n The project coding conventions in the [developer notes](doc/developer-notes.md)\n must be followed.\n \n+### Committing Patches\n+\n In general, [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\n and diffs should be easy to read. For this reason, do not mix any formatting\n fixes or code moves with actual code changes.\n@@ -76,6 +112,8 @@ about Git.\n   - Push changes to your fork\n   - Create pull request\n \n+### Creating the Pull Request\n+\n The title of the pull request should be prefixed by the component or area that\n the pull request affects. Valid areas as:\n \n@@ -100,18 +138,24 @@ Examples:\n     qt: Add feed bump button\n     log: Fix typo in log message\n \n+The body of the pull request should contain enough description about what the\n+patch does together with any justification/reasoning. You should include\n+references to any discussions (for example other tickets or mailing list\n+discussions).\n+\n+### Translation changes\n+\n Note that translations should not be submitted as pull requests. Please see\n [Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md)\n for more information on helping with translations.\n \n+### Work in Progress Changes and Requests for Comments\n+\n If a pull request is not to be considered for merging (yet), please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\n in the body of the pull request to indicate tasks are pending.\n \n-The body of the pull request should contain enough description about what the\n-patch does together with any justification/reasoning. You should include\n-references to any discussions (for example other tickets or mailing list\n-discussions).\n+### Address Feedback\n \n At this stage, one should expect comments and review from other contributors. You\n can add more commits to your pull request by committing them locally and pushing"
      },
      {
        "sha": "45dab3930d622df1049cbb9495871fbbe391034d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 28,
        "deletions": 17,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Copyright (c) 2013-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -41,18 +41,9 @@ OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n-OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n-\n-DIST_DOCS = \\\n-  README.md \\\n-  $(wildcard doc/*.md) \\\n-  $(wildcard doc/release-notes/*.md)\n-DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n-\t       $(top_srcdir)/contrib/bitcoin-tx.bash-completion \\\n-\t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n-\t       $(top_srcdir)/contrib/debian/copyright \\\n-\t       $(top_srcdir)/contrib/init \\\n-\t       $(top_srcdir)/contrib/install_db4.sh \\\n+OSX_QT_TRANSLATIONS = ar,bg,ca,cs,da,de,es,fa,fi,fr,gd,gl,he,hu,it,ja,ko,lt,lv,pl,pt,ru,sk,sl,sv,uk,zh_CN,zh_TW\n+\n+DIST_CONTRIB = \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\\n \t       $(top_srcdir)/contrib/linearize/linearize-hashes.py\n \n@@ -77,7 +68,7 @@ OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n COVERAGE_INFO = baseline.info \\\n   test_bitcoin_filtered.info total_coverage.info \\\n   baseline_filtered.info functional_test.info functional_test_filtered.info \\\n-  test_bitcoin_coverage.info test_bitcoin.info\n+  test_bitcoin_coverage.info test_bitcoin.info fuzz.info fuzz_coverage.info\n \n dist-hook:\n \t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n@@ -89,7 +80,7 @@ $(BITCOIN_WIN_INSTALLER): all-recursive\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release\n-\t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n+\t@test -f $(MAKENSIS) && echo 'OutFile \"$@\"' | cat $(top_builddir)/share/setup.nsi - | $(MAKENSIS) -V2 - || \\\n \t  echo error: could not build $@\n \t@echo built $@\n \n@@ -208,6 +199,15 @@ baseline_filtered.info: baseline.info\n \t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n \t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n \n+fuzz.info: baseline_filtered.info\n+\t@TIMEOUT=15 test/fuzz/test_runner.py qa-assets/fuzz_seed_corpus -l DEBUG\n+\t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src --t fuzz-tests -o $@\n+\t$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src\n+\n+fuzz_filtered.info: fuzz.info\n+\t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n+\t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n+\n test_bitcoin.info: baseline_filtered.info\n \t$(MAKE) -C src/ check\n \t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src -t test_bitcoin -o $@\n@@ -226,12 +226,19 @@ functional_test_filtered.info: functional_test.info\n \t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n \t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n \n+fuzz_coverage.info: fuzz_filtered.info\n+\t$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a fuzz_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n+\n test_bitcoin_coverage.info: baseline_filtered.info test_bitcoin_filtered.info\n \t$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n \n total_coverage.info: test_bitcoin_filtered.info functional_test_filtered.info\n \t$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -a functional_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n \n+fuzz.coverage/.dirstamp: fuzz_coverage.info\n+\t$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)\n+\t@touch $@\n+\n test_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n \t$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)\n \t@touch $@\n@@ -240,13 +247,15 @@ total.coverage/.dirstamp: total_coverage.info\n \t$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)\n \t@touch $@\n \n+cov_fuzz: fuzz.coverage/.dirstamp\n+\n cov: test_bitcoin.coverage/.dirstamp total.coverage/.dirstamp\n \n endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n \n EXTRA_DIST += \\\n     test/functional \\\n@@ -301,6 +310,8 @@ EXTRA_DIST += \\\n     test/util/data/txcreatescript3.json \\\n     test/util/data/txcreatescript4.hex \\\n     test/util/data/txcreatescript4.json \\\n+    test/util/data/txcreatescript5.hex \\\n+    test/util/data/txcreatescript6.hex \\\n     test/util/data/txcreatesignv1.hex \\\n     test/util/data/txcreatesignv1.json \\\n     test/util/data/txcreatesignv2.hex \\\n@@ -328,6 +339,6 @@ clean-docs:\n \trm -rf doc/doxygen\n \n clean-local: clean-docs\n-\trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n+\trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ fuzz.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n \trm -rf osx_volname dist/ dpi36.background.tiff dpi72.background.tiff"
      },
      {
        "sha": "9213471c414417f64e1503581e5d521b62b7098d",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -25,7 +25,7 @@ information or see https://opensource.org/licenses/MIT.\n Development Process\n -------------------\n \n-The `master` branch is regularly built and tested, but is not guaranteed to be\n+The `master` branch is regularly built (see doc/build-*.md for instructions) and tested, but is not guaranteed to be\n completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n regularly to indicate new official, stable release versions of Bitcoin Core.\n "
      },
      {
        "sha": "2ae33f71402aaf6a4c70212f3493354ecfb01ec8",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -33,7 +33,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 47\n+#serial 48\n \n # example boost program (need to pass version)\n m4_define([_AX_BOOST_BASE_PROGRAM],\n@@ -123,6 +123,7 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n     dnl are almost assuredly the ones desired.\n     AS_CASE([${host_cpu}],\n       [i?86],[multiarch_libsubdir=\"lib/i386-${host_os}\"],\n+      [armv7l],[multiarch_libsubdir=\"lib/arm-${host_os}\"],\n       [multiarch_libsubdir=\"lib/${host_cpu}-${host_os}\"]\n     )\n "
      },
      {
        "sha": "43087b2e6889ec6f8ebd2f8ba77f4a9a716f8ac2",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "modified",
        "additions": 419,
        "deletions": 36,
        "changes": 455,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#   http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+#  https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -33,21 +33,23 @@\n #   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n #   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n #   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n+#   Copyright (c) 2016, 2018 Krzesimir Nowak <qdlacz@gmail.com>\n+#   Copyright (c) 2019 Enji Cooper <yaneurabeya@gmail.com>\n #\n #   Copying and distribution of this file, with or without modification, are\n #   permitted in any medium without royalty provided the copyright notice\n #   and this notice are preserved.  This file is offered as-is, without any\n #   warranty.\n \n-#serial 4\n+#serial 11\n \n dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n dnl  (serial version number 13).\n \n AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n-  m4_if([$1], [11], [],\n-        [$1], [14], [],\n-        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],\n+  m4_if([$1], [11], [ax_cxx_compile_alternatives=\"11 0x\"],\n+        [$1], [14], [ax_cxx_compile_alternatives=\"14 1y\"],\n+        [$1], [17], [ax_cxx_compile_alternatives=\"17 1z\"],\n         [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n   m4_if([$2], [], [],\n         [$2], [ext], [],\n@@ -57,26 +59,13 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n         [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n         [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n         [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n-  m4_if([$4], [], [ax_cxx_compile_cxx$1_try_default=true],\n-        [$4], [default], [ax_cxx_compile_cxx$1_try_default=true],\n-        [$4], [nodefault], [ax_cxx_compile_cxx$1_try_default=false],\n-        [m4_fatal([invalid fourth argument `$4' to AX_CXX_COMPILE_STDCXX])])\n   AC_LANG_PUSH([C++])dnl\n   ac_success=no\n \n-  m4_if([$4], [nodefault], [], [dnl\n-  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n-  ax_cv_cxx_compile_cxx$1,\n-  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n-    [ax_cv_cxx_compile_cxx$1=yes],\n-    [ax_cv_cxx_compile_cxx$1=no])])\n-  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n-    ac_success=yes\n-  fi])\n-\n   m4_if([$2], [noext], [], [dnl\n   if test x$ac_success = xno; then\n-    for switch in -std=gnu++$1 -std=gnu++0x; do\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      switch=\"-std=gnu++${alternative}\"\n       cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n       AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n                      $cachevar,\n@@ -102,22 +91,27 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n     dnl HP's aCC needs +std=c++11 according to:\n     dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n     dnl Cray's crayCC needs \"-h std=c++11\"\n-    for switch in -std=c++$1 -std=c++0x +std=c++$1 \"-h std=c++$1\"; do\n-      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n-      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n-                     $cachevar,\n-        [ac_save_CXX=\"$CXX\"\n-         CXX=\"$CXX $switch\"\n-         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n-          [eval $cachevar=yes],\n-          [eval $cachevar=no])\n-         CXX=\"$ac_save_CXX\"])\n-      if eval test x\\$$cachevar = xyes; then\n-        CXX=\"$CXX $switch\"\n-        if test -n \"$CXXCPP\" ; then\n-          CXXCPP=\"$CXXCPP $switch\"\n+    for alternative in ${ax_cxx_compile_alternatives}; do\n+      for switch in -std=c++${alternative} +std=c++${alternative} \"-h std=c++${alternative}\"; do\n+        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                       $cachevar,\n+          [ac_save_CXX=\"$CXX\"\n+           CXX=\"$CXX $switch\"\n+           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+            [eval $cachevar=yes],\n+            [eval $cachevar=no])\n+           CXX=\"$ac_save_CXX\"])\n+        if eval test x\\$$cachevar = xyes; then\n+          CXX=\"$CXX $switch\"\n+          if test -n \"$CXXCPP\" ; then\n+            CXXCPP=\"$CXXCPP $switch\"\n+          fi\n+          ac_success=yes\n+          break\n         fi\n-        ac_success=yes\n+      done\n+      if test x$ac_success = xyes; then\n         break\n       fi\n     done\n@@ -154,6 +148,11 @@ m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n )\n \n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_17],\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_17\n+)\n \n dnl  Tests for new features in C++11\n \n@@ -191,11 +190,13 @@ namespace cxx11\n \n     struct Base\n     {\n+      virtual ~Base() {}\n       virtual void f() {}\n     };\n \n     struct Derived : public Base\n     {\n+      virtual ~Derived() override {}\n       virtual void f() override {}\n     };\n \n@@ -524,7 +525,7 @@ namespace cxx14\n \n   }\n \n-  namespace test_digit_seperators\n+  namespace test_digit_separators\n   {\n \n     constexpr auto ten_million = 100'000'000;\n@@ -566,3 +567,385 @@ namespace cxx14\n #endif  // __cplusplus >= 201402L\n \n ]])\n+\n+\n+dnl  Tests for new features in C++17\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_17], [[\n+\n+// If the compiler admits that it is not ready for C++17, why torture it?\n+// Hopefully, this will speed up the test.\n+\n+#ifndef __cplusplus\n+\n+#error \"This is not a C++ compiler\"\n+\n+#elif __cplusplus < 201703L\n+\n+#error \"This is not a C++17 compiler\"\n+\n+#else\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <type_traits>\n+\n+namespace cxx17\n+{\n+\n+  namespace test_constexpr_lambdas\n+  {\n+\n+    constexpr int foo = [](){return 42;}();\n+\n+  }\n+\n+  namespace test::nested_namespace::definitions\n+  {\n+\n+  }\n+\n+  namespace test_fold_expression\n+  {\n+\n+    template<typename... Args>\n+    int multiply(Args... args)\n+    {\n+      return (args * ... * 1);\n+    }\n+\n+    template<typename... Args>\n+    bool all(Args... args)\n+    {\n+      return (args && ...);\n+    }\n+\n+  }\n+\n+  namespace test_extended_static_assert\n+  {\n+\n+    static_assert (true);\n+\n+  }\n+\n+  namespace test_auto_brace_init_list\n+  {\n+\n+    auto foo = {5};\n+    auto bar {5};\n+\n+    static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);\n+    static_assert(std::is_same<int, decltype(bar)>::value);\n+  }\n+\n+  namespace test_typename_in_template_template_parameter\n+  {\n+\n+    template<template<typename> typename X> struct D;\n+\n+  }\n+\n+  namespace test_fallthrough_nodiscard_maybe_unused_attributes\n+  {\n+\n+    int f1()\n+    {\n+      return 42;\n+    }\n+\n+    [[nodiscard]] int f2()\n+    {\n+      [[maybe_unused]] auto unused = f1();\n+\n+      switch (f1())\n+      {\n+      case 17:\n+        f1();\n+        [[fallthrough]];\n+      case 42:\n+        f1();\n+      }\n+      return f1();\n+    }\n+\n+  }\n+\n+  namespace test_extended_aggregate_initialization\n+  {\n+\n+    struct base1\n+    {\n+      int b1, b2 = 42;\n+    };\n+\n+    struct base2\n+    {\n+      base2() {\n+        b3 = 42;\n+      }\n+      int b3;\n+    };\n+\n+    struct derived : base1, base2\n+    {\n+        int d;\n+    };\n+\n+    derived d1 {{1, 2}, {}, 4};  // full initialization\n+    derived d2 {{}, {}, 4};      // value-initialized bases\n+\n+  }\n+\n+  namespace test_general_range_based_for_loop\n+  {\n+\n+    struct iter\n+    {\n+      int i;\n+\n+      int& operator* ()\n+      {\n+        return i;\n+      }\n+\n+      const int& operator* () const\n+      {\n+        return i;\n+      }\n+\n+      iter& operator++()\n+      {\n+        ++i;\n+        return *this;\n+      }\n+    };\n+\n+    struct sentinel\n+    {\n+      int i;\n+    };\n+\n+    bool operator== (const iter& i, const sentinel& s)\n+    {\n+      return i.i == s.i;\n+    }\n+\n+    bool operator!= (const iter& i, const sentinel& s)\n+    {\n+      return !(i == s);\n+    }\n+\n+    struct range\n+    {\n+      iter begin() const\n+      {\n+        return {0};\n+      }\n+\n+      sentinel end() const\n+      {\n+        return {5};\n+      }\n+    };\n+\n+    void f()\n+    {\n+      range r {};\n+\n+      for (auto i : r)\n+      {\n+        [[maybe_unused]] auto v = i;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_lambda_capture_asterisk_this_by_value\n+  {\n+\n+    struct t\n+    {\n+      int i;\n+      int foo()\n+      {\n+        return [*this]()\n+        {\n+          return i;\n+        }();\n+      }\n+    };\n+\n+  }\n+\n+  namespace test_enum_class_construction\n+  {\n+\n+    enum class byte : unsigned char\n+    {};\n+\n+    byte foo {42};\n+\n+  }\n+\n+  namespace test_constexpr_if\n+  {\n+\n+    template <bool cond>\n+    int f ()\n+    {\n+      if constexpr(cond)\n+      {\n+        return 13;\n+      }\n+      else\n+      {\n+        return 42;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_selection_statement_with_initializer\n+  {\n+\n+    int f()\n+    {\n+      return 13;\n+    }\n+\n+    int f2()\n+    {\n+      if (auto i = f(); i > 0)\n+      {\n+        return 3;\n+      }\n+\n+      switch (auto i = f(); i + 4)\n+      {\n+      case 17:\n+        return 2;\n+\n+      default:\n+        return 1;\n+      }\n+    }\n+\n+  }\n+\n+  namespace test_template_argument_deduction_for_class_templates\n+  {\n+\n+    template <typename T1, typename T2>\n+    struct pair\n+    {\n+      pair (T1 p1, T2 p2)\n+        : m1 {p1},\n+          m2 {p2}\n+      {}\n+\n+      T1 m1;\n+      T2 m2;\n+    };\n+\n+    void f()\n+    {\n+      [[maybe_unused]] auto p = pair{13, 42u};\n+    }\n+\n+  }\n+\n+  namespace test_non_type_auto_template_parameters\n+  {\n+\n+    template <auto n>\n+    struct B\n+    {};\n+\n+    B<5> b1;\n+    B<'a'> b2;\n+\n+  }\n+\n+  namespace test_structured_bindings\n+  {\n+\n+    int arr[2] = { 1, 2 };\n+    std::pair<int, int> pr = { 1, 2 };\n+\n+    auto f1() -> int(&)[2]\n+    {\n+      return arr;\n+    }\n+\n+    auto f2() -> std::pair<int, int>&\n+    {\n+      return pr;\n+    }\n+\n+    struct S\n+    {\n+      int x1 : 2;\n+      volatile double y1;\n+    };\n+\n+    S f3()\n+    {\n+      return {};\n+    }\n+\n+    auto [ x1, y1 ] = f1();\n+    auto& [ xr1, yr1 ] = f1();\n+    auto [ x2, y2 ] = f2();\n+    auto& [ xr2, yr2 ] = f2();\n+    const auto [ x3, y3 ] = f3();\n+\n+  }\n+\n+  namespace test_exception_spec_type_system\n+  {\n+\n+    struct Good {};\n+    struct Bad {};\n+\n+    void g1() noexcept;\n+    void g2();\n+\n+    template<typename T>\n+    Bad\n+    f(T*, T*);\n+\n+    template<typename T1, typename T2>\n+    Good\n+    f(T1*, T2*);\n+\n+    static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);\n+\n+  }\n+\n+  namespace test_inline_variables\n+  {\n+\n+    template<class T> void f(T)\n+    {}\n+\n+    template<class T> inline T g(T)\n+    {\n+      return T{};\n+    }\n+\n+    template<> inline void f<>(int)\n+    {}\n+\n+    template<> int g<>(int)\n+    {\n+      return 5;\n+    }\n+\n+  }\n+\n+}  // namespace cxx17\n+\n+#endif  // __cplusplus < 201703L\n+\n+]])"
      },
      {
        "sha": "a489fb36b29459a86909f2c407fcc524427af404",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -12,7 +12,7 @@ Quick Start\n The minimal steps required to build Bitcoin Core with the msbuild toolchain are below. More detailed instructions are contained in the following sections.\n \n ```\n-vcpkg install --triplet x64-windows-static berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n+vcpkg install --triplet x64-windows-static berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n vcpkg integrate install\n py -3 build_msvc\\msvc-autogen.py\n msbuild /m build_msvc\\bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n@@ -35,7 +35,6 @@ The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/d\n - DoubleConversion\n - libevent\n - Qt5\n-- RapidCheck\n - ZeroMQ\n \n Qt"
      },
      {
        "sha": "35ba8425b3255aebd140c535d1ae2e618baee4c9",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,7 +18,7 @@\n #define CLIENT_VERSION_MAJOR 0\n \n /* Minor version */\n-#define CLIENT_VERSION_MINOR 19\n+#define CLIENT_VERSION_MINOR 20\n \n /* Build revision */\n #define CLIENT_VERSION_REVISION 99\n@@ -41,9 +41,6 @@\n /* Define to 1 to enable ZMQ functions */\n #define ENABLE_ZMQ 1\n \n-/* parameter and return value type for __fdelt_chk */\n-/* #undef FDELT_TYPE */\n-\n /* define if the Boost library is available */\n #define HAVE_BOOST /**/\n \n@@ -304,9 +301,6 @@\n /* Define this symbol to build in assembly routines */\n //#define USE_ASM 1\n \n-/* Define this symbol if coverage is enabled */\n-/* #undef USE_COVERAGE */\n-\n /* Define if dbus support should be compiled in */\n /* #undef USE_DBUS */\n "
      },
      {
        "sha": "6ec40461c2adcd99965486308e490ed09ff8de03",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -8,6 +8,7 @@\n     <ConfigurationType>StaticLibrary</ConfigurationType>\n   </PropertyGroup>\n   <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\util\\url.cpp\" />\n @SOURCE_FILES@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />"
      },
      {
        "sha": "5fdd97dc783e587ab68c49fd5ee06a53df2ec88f",
        "filename": "build_msvc/testconsensus/testconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/testconsensus/testconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/testconsensus/testconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "307f295f089cd225a70cc2c98ae60c0b4ce1de2f",
        "filename": "build_msvc/vcpkg-packages.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/vcpkg-packages.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/build_msvc/vcpkg-packages.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg-packages.txt?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1 +1 @@\n-berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n\\ No newline at end of file\n+berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n\\ No newline at end of file"
      },
      {
        "sha": "56b8fc976e4e494fae71190b0b955c7eda8e4db6",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,14 +1,14 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n # The root dir.\n # The ci system copies this folder.\n-# This is where the build is done (depends and dist).\n+# This is where the depends build is done.\n BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n export BASE_ROOT_DIR\n \n@@ -24,7 +24,7 @@ echo \"Fallback to default values in env (if not yet set)\"\n export MAKEJOBS=${MAKEJOBS:--j4}\n # A folder for the ci system to put temporary files (ccache, datadirs for tests, ...)\n # This folder only exists on the ci host.\n-export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch/}\n+export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch}\n # What host to compile for. See also ./depends/README.md\n # Tests that need cross-compilation export the appropriate HOST.\n # Tests that run natively guess the host\n@@ -33,13 +33,15 @@ export HOST=${HOST:-$(\"$BASE_ROOT_DIR/depends/config.guess\")}\n export USE_BUSY_BOX=${USE_BUSY_BOX:-false}\n export RUN_UNIT_TESTS=${RUN_UNIT_TESTS:-true}\n export RUN_FUNCTIONAL_TESTS=${RUN_FUNCTIONAL_TESTS:-true}\n-export TEST_PREVIOUS_RELEASES=${TEST_PREVIOUS_RELEASES:-false}\n+export TEST_RUNNER_ENV=${TEST_RUNNER_ENV:-}\n export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n export CONTAINER_NAME=${CONTAINER_NAME:-ci_unnamed}\n export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n # Randomize test order.\n # See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html\n export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}\n+# See man 7 debconf\n+export DEBIAN_FRONTEND=noninteractive\n export CCACHE_SIZE=${CCACHE_SIZE:-100M}\n export CCACHE_TEMPDIR=${CCACHE_TEMPDIR:-/tmp/.ccache-temp}\n export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}\n@@ -49,13 +51,14 @@ export CCACHE_DIR=${CCACHE_DIR:-$BASE_SCRATCH_DIR/.ccache}\n # The depends dir.\n # This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n export DEPENDS_DIR=${DEPENDS_DIR:-$BASE_ROOT_DIR/depends}\n-# Folder where the build is done (bin and lib).\n+# Folder where the build result is put (bin and lib).\n export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_SCRATCH_DIR/out/$HOST}\n+# Folder where the build is done (dist and out-of-tree build).\n+export BASE_BUILD_DIR=${BASE_BUILD_DIR:-$BASE_SCRATCH_DIR/build}\n export PREVIOUS_RELEASES_DIR=${PREVIOUS_RELEASES_DIR:-$BASE_ROOT_DIR/releases/$HOST}\n export SDK_URL=${SDK_URL:-https://bitcoincore.org/depends-sources/sdks}\n-export WINEDEBUG=${WINEDEBUG:-fixme-all}\n export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps}\n export GOAL=${GOAL:-install}\n export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_SCRATCH_DIR}/qa-assets}\n export PATH=${BASE_ROOT_DIR}/ci/retry:$PATH\n-export CI_RETRY_EXE=${CI_RETRY_EXE:retry}\n+export CI_RETRY_EXE=${CI_RETRY_EXE:-\"retry --\"}"
      },
      {
        "sha": "b70a581532c1021a3505f6411c021b123de697a0",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a4dc54d1c12d3023d4198534df3bf230d70c48d9",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "982e38daee477ba36b996bb56c2c3457ea5dd860",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,19 +1,16 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export HOST=x86_64-apple-darwin16\n-export BREW_PACKAGES=\"automake berkeley-db4 libtool boost miniupnpc pkg-config qt qrencode python3 ccache zeromq\"\n export PIP_PACKAGES=\"zmq\"\n-export RUN_CI_ON_HOST=true\n-export RUN_UNIT_TESTS=true\n-export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n+export TEST_RUNNER_EXTRA=\"wallet_disable\"  # Only run wallet_disable as a smoke test, see https://github.com/bitcoin/bitcoin/pull/17240#issuecomment-546022121 why the other tests are disabled\n # Run without depends\n export NO_DEPENDS=1\n export OSX_SDK=\"\""
      },
      {
        "sha": "28c63f1cf6f5710554499609408b9a369d9786e4",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f51cbf8f3c6d862b277addc6aee3a76337fd6f2e",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,17 +1,17 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n+export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz\n-export PACKAGES=\"clang-8 llvm-8 python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=clang-8 CXX=clang++-8\"\n-# Use clang-8, instead of default clang on bionic, which is clang-6 and does not come with libfuzzer on aarch64\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined --enable-c++17 CC=clang CXX=clang++\""
      },
      {
        "sha": "fb4c27c36f7072b453de695bbceb6046941c3a14",
        "filename": "ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_valgrind.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,18 +1,18 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n+export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz_valgrind\n-export PACKAGES=\"clang-8 llvm-8 python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev valgrind\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev valgrind\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export FUZZ_TESTS_CONFIG=\"--valgrind\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer CC=clang-8 CXX=clang++-8\"\n-# Use clang-8, instead of default clang on bionic, which is clang-6 and does not come with libfuzzer on aarch64\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer --enable-c++17 CC=clang CXX=clang++\""
      },
      {
        "sha": "0fc989085c9f80b65a5ca1309a85cb1b33a05cb2",
        "filename": "ci/test/00_setup_env_native_multiprocess.sh",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_multiprocess.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export CONTAINER_NAME=ci_native_multiprocess\n+export PACKAGES=\"cmake python3\"\n+export DEP_OPTS=\"MULTIPROCESS=1\"\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"\"\n+export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\""
      },
      {
        "sha": "9c2be4cfac8e82fa6711a0c23de2e11fe9ff7ff8",
        "filename": "ci/test/00_setup_env_native_nowallet.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_nowallet.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "fa07990756024f8645d72977c5d145a2f223a156",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,7 +9,9 @@ export LC_ALL=C.UTF-8\n export CONTAINER_NAME=ci_native_qt5\n export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n-export TEST_RUNNER_EXTRA=\"--coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n+export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n+export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n+export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\"\n-export TEST_PREVIOUS_RELEASES=true\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\"\n+export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.1 v0.18.1 v0.19.1\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-c++17 --enable-debug CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\""
      },
      {
        "sha": "63d06dea64843db45346bb018ad10a0b5182a8ca",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,18 +1,14 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_tsan\n-export DOCKER_NAME_TAG=ubuntu:16.04\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export DOCKER_NAME_TAG=ubuntu:18.04\n+export PACKAGES=\"clang-9 llvm-9 python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n-\n-# xenial comes with old clang versions that can not parse the sanitizer suppressions files\n-# Remove unparseable lines as a hacky workaround\n-sed -i '/^implicit-/d' \"${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan\"\n+export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm CC=clang-9 CXX=clang++-9\""
      },
      {
        "sha": "ff7c5fe91381860a2e1db414b2a0f8891a180269",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,7 +10,6 @@ export CONTAINER_NAME=ci_native_valgrind\n export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev\"\n export USE_VALGRIND=1\n export NO_DEPENDS=1\n-export TEST_RUNNER_EXTRA=\"--exclude feature_abortnode,feature_block,rpc_bind\"  # Excluded for now\n-export RUN_FUNCTIONAL_TESTS=true\n+export TEST_RUNNER_EXTRA=\"--exclude rpc_bind --factor=2\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no CC=clang CXX=clang++\"  # TODO enable GUI"
      },
      {
        "sha": "c180d023de5e8f142b57660fa96b455ee6fa091d",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8f0c62a1a6e707ec7036793b6472f6c142630d42",
        "filename": "ci/test/00_setup_env_win64.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_win64.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/00_setup_env_win64.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_win64.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "14ab943d6899cd5ccaab72624c25b0601359fb11",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 25,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -14,39 +14,19 @@ if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n fi\n \n if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n-  set +o errexit\n-  pushd /usr/local/Homebrew || exit 1\n-  git reset --hard origin/master\n-  popd || exit 1\n-  set -o errexit\n-  ${CI_RETRY_EXE} brew unlink python@2\n-  ${CI_RETRY_EXE} brew update\n-  # brew upgrade returns an error if any of the packages is already up to date\n-  # Failure is safe to ignore, unless we really need an update.\n-  brew upgrade $BREW_PACKAGES || true\n-\n-  # install new packages (brew install returns an error if already installed)\n-  for i in $BREW_PACKAGES; do\n-    if ! brew list | grep -q $i; then\n-      ${CI_RETRY_EXE} brew install $i\n-    fi\n-  done\n-\n   export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"\n-\n   ${CI_RETRY_EXE} pip3 install $PIP_PACKAGES\n-\n fi\n \n-mkdir -p \"${BASE_SCRATCH_DIR}\"\n+# Create folders that are mounted into the docker\n mkdir -p \"${CCACHE_DIR}\"\n mkdir -p \"${PREVIOUS_RELEASES_DIR}\"\n \n export ASAN_OPTIONS=\"detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1\"\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\"\n-env | grep -E '^(BITCOIN_CONFIG|BASE_|QEMU_|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS|TEST_PREVIOUS_RELEASES|PREVIOUS_RELEASES_DIR)' | tee /tmp/env\n+env | grep -E '^(BITCOIN_CONFIG|BASE_|QEMU_|CCACHE_|LC_ALL|BOOST_TEST_RANDOM|DEBIAN_FRONTEND|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS|PREVIOUS_RELEASES_DIR)' | tee /tmp/env\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n@@ -55,7 +35,7 @@ fi\n \n export P_CI_DIR=\"$PWD\"\n \n-if [ -z \"$RUN_CI_ON_HOST\" ]; then\n+if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n   echo \"Creating $DOCKER_NAME_TAG container to run in\"\n   ${CI_RETRY_EXE} docker pull \"$DOCKER_NAME_TAG\"\n \n@@ -78,6 +58,7 @@ else\n     bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n   }\n fi\n+export -f DOCKER_EXEC\n \n if [ -n \"$DPKG_ADD_ARCH\" ]; then\n   DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\"\n@@ -86,7 +67,7 @@ fi\n if [[ $DOCKER_NAME_TAG == centos* ]]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC yum -y install epel-release\n   ${CI_RETRY_EXE} DOCKER_EXEC yum -y install $DOCKER_PACKAGES $PACKAGES\n-elif [ \"$TRAVIS_OS_NAME\" != \"osx\" ]; then\n+elif [ \"$CI_USE_APT_INSTALL\" != \"no\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n fi\n@@ -97,18 +78,21 @@ if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n else\n   DOCKER_EXEC free -m -h\n   DOCKER_EXEC echo \"Number of CPUs \\(nproc\\):\" \\$\\(nproc\\)\n+  DOCKER_EXEC echo $(lscpu | grep Endian)\n   DOCKER_EXEC echo \"Free disk space:\"\n   DOCKER_EXEC df -h\n fi\n \n if [ ! -d ${DIR_QA_ASSETS} ]; then\n+ if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n   DOCKER_EXEC git clone https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+ fi\n fi\n export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n \n DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n \n-if [ -z \"$RUN_CI_ON_HOST\" ]; then\n+if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n   echo \"Create $BASE_ROOT_DIR\"\n   DOCKER_EXEC rsync -a /ro_base/ $BASE_ROOT_DIR\n fi"
      },
      {
        "sha": "36855045241f58856249627a9e7eaa112d895559",
        "filename": "ci/test/05_before_script.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -35,8 +35,8 @@ if [ -z \"$NO_DEPENDS\" ]; then\n   fi\n   DOCKER_EXEC $SHELL_OPTS make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n fi\n-if [ \"$TEST_PREVIOUS_RELEASES\" = \"true\" ]; then\n+if [ -n \"$PREVIOUS_RELEASES_TO_DOWNLOAD\" ]; then\n   BEGIN_FOLD previous-versions\n-  DOCKER_EXEC contrib/devtools/previous_release.sh -b -t \"$PREVIOUS_RELEASES_DIR\" v0.17.1 v0.18.1 v0.19.0.1\n+  DOCKER_EXEC contrib/devtools/previous_release.sh -b -t \"$PREVIOUS_RELEASES_DIR\" \"${PREVIOUS_RELEASES_TO_DOWNLOAD}\"\n   END_FOLD\n fi"
      },
      {
        "sha": "b68cd9d3f81491b5a71f822418d596efd1a77ed7",
        "filename": "ci/test/06_script_a.sh",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_a.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,15 +1,13 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$DEPENDS_DIR/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n-if [ -z \"$NO_DEPENDS\" ]; then\n-  DOCKER_EXEC ccache --max-size=$CCACHE_SIZE\n-fi\n+DOCKER_EXEC \"ccache --zero-stats --max-size=$CCACHE_SIZE\"\n \n BEGIN_FOLD autogen\n if [ -n \"$CONFIG_SHELL\" ]; then\n@@ -19,20 +17,18 @@ else\n fi\n END_FOLD\n \n-DOCKER_EXEC mkdir -p build\n-export P_CI_DIR=\"$P_CI_DIR/build\"\n+DOCKER_EXEC mkdir -p \"${BASE_BUILD_DIR}\"\n+export P_CI_DIR=\"${BASE_BUILD_DIR}\"\n \n BEGIN_FOLD configure\n-DOCKER_EXEC ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n+DOCKER_EXEC \"${BASE_ROOT_DIR}/configure\" --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n END_FOLD\n \n BEGIN_FOLD distdir\n-# Create folder on host and docker, so that `cd` works\n-mkdir -p \"bitcoin-$HOST\"\n DOCKER_EXEC make distdir VERSION=$HOST\n END_FOLD\n \n-export P_CI_DIR=\"$P_CI_DIR/bitcoin-$HOST\"\n+export P_CI_DIR=\"${BASE_BUILD_DIR}/bitcoin-$HOST\"\n \n BEGIN_FOLD configure\n DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n@@ -44,3 +40,9 @@ trap 'DOCKER_EXEC \"cat ${BASE_SCRATCH_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n BEGIN_FOLD build\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n END_FOLD\n+\n+BEGIN_FOLD cache_stats\n+DOCKER_EXEC \"ccache --version | head -n 1 && ccache --show-stats\"\n+DOCKER_EXEC du -sh \"${DEPENDS_DIR}\"/*/\n+DOCKER_EXEC du -sh \"${PREVIOUS_RELEASES_DIR}\"\n+END_FOLD"
      },
      {
        "sha": "51d84ee39d592f1b1865b62c804ca2f61ffea898",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -21,21 +21,28 @@ if [ -n \"$USE_VALGRIND\" ]; then\n   END_FOLD\n fi\n \n+bash -c \"${CI_WAIT}\" &  # Print dots in case the tests take a long time to run\n+\n if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD unit-tests\n-  bash -c \"${CI_WAIT}\" &  # Print dots in case the unit tests take a long time to run\n   DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib make $MAKEJOBS check VERBOSE=1\n   END_FOLD\n fi\n \n+if [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n+  BEGIN_FOLD unit-tests-seq\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib \"${BASE_BUILD_DIR}/bitcoin-*/src/test/test_bitcoin*\" --catch_system_errors=no -l test_suite\n+  END_FOLD\n+fi\n+\n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD functional-tests\n-  DOCKER_EXEC test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib ${TEST_RUNNER_ENV} test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n   END_FOLD\n fi\n \n if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n   BEGIN_FOLD fuzz-tests\n-  DOCKER_EXEC test/fuzz/test_runner.py ${FUZZ_TESTS_CONFIG} -l DEBUG ${DIR_FUZZ_IN}\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib test/fuzz/test_runner.py ${FUZZ_TESTS_CONFIG} $MAKEJOBS -l DEBUG ${DIR_FUZZ_IN}\n   END_FOLD\n fi"
      },
      {
        "sha": "be7d7fcc1fe19e32e4cf54a14849fbddb14b29cf",
        "filename": "ci/test/wrap-qemu.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/wrap-qemu.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/ci/test/wrap-qemu.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-qemu.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "3d8291bf58f2429dedd57d234032b3a9f4e26def",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 184,
        "deletions": 104,
        "changes": 288,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n AC_PREREQ([2.69])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 19)\n+define(_CLIENT_VERSION_MINOR, 20)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_RC, 0)\n@@ -61,8 +61,20 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n-dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+\n+AC_ARG_ENABLE([c++17],\n+  [AS_HELP_STRING([--enable-c++17],\n+  [enable compilation in c++17 mode (disabled by default)])],\n+  [use_cxx17=$enableval],\n+  [use_cxx17=no])\n+\n+dnl Require C++11 or C++17 compiler (no GNU extensions)\n+if test \"x$use_cxx17\" = xyes; then\n+  AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n+else\n+  AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n+fi\n+\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n \n@@ -134,12 +146,6 @@ AC_ARG_ENABLE(gui-tests,\n     [use_gui_tests=$enableval],\n     [use_gui_tests=$use_tests])\n \n-AC_ARG_WITH([rapidcheck],\n-  [AS_HELP_STRING([--with-rapidcheck],\n-  [enable RapidCheck property-based tests (default is yes if librapidcheck is found)])],\n-  [use_rapidcheck=$withval],\n-  [use_rapidcheck=auto])\n-\n AC_ARG_ENABLE(bench,\n     AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n@@ -236,6 +242,24 @@ if test x$enable_bip70 != xno; then\n   AC_MSG_ERROR([BIP70 is no longer supported!])\n fi\n \n+AC_ARG_WITH([libmultiprocess],\n+  [AS_HELP_STRING([--with-libmultiprocess=yes|no|auto],\n+  [Build with libmultiprocess library. (default: auto, i.e. detect with pkg-config)])],\n+  [with_libmultiprocess=$withval],\n+  [with_libmultiprocess=auto])\n+\n+AC_ARG_WITH([mpgen],\n+  [AS_HELP_STRING([--with-mpgen=yes|no|auto|PREFIX],\n+  [Build with libmultiprocess codegen tool. Useful to specify different libmultiprocess host system library and build system codegen tool prefixes when cross-compiling (default is host system libmultiprocess prefix)])],\n+  [with_mpgen=$withval],\n+  [with_mpgen=auto])\n+\n+AC_ARG_ENABLE([multiprocess],\n+  [AS_HELP_STRING([--enable-multiprocess],\n+  [build multiprocess bitcoin-node, bitcoin-wallet, and bitcoin-gui executables in addition to monolithic bitcoind and bitcoin-qt executables. Requires libmultiprocess library. Experimental (default is no)])],\n+  [enable_multiprocess=$enableval],\n+  [enable_multiprocess=no])\n+\n AC_ARG_ENABLE(man,\n     [AS_HELP_STRING([--disable-man],\n                     [do not install man pages (default is to install)])],,\n@@ -262,7 +286,7 @@ AC_ARG_ENABLE([gprof],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n-dnl Pass compiler & liner flags that make builds deterministic\n+dnl Pass compiler & linker flags that make builds deterministic\n AC_ARG_ENABLE([determinism],\n     [AS_HELP_STRING([--enable-determinism],\n                     [Enable compilation flags that make builds deterministic (default is no)])],\n@@ -277,8 +301,30 @@ AC_ARG_ENABLE([werror],\n     [enable_werror=no])\n \n AC_LANG_PUSH([C++])\n+\n+dnl Check for a flag to turn compiler warnings into errors. This is helpful for checks which may\n+dnl appear to succeed because by default they merely emit warnings when they fail.\n+dnl\n+dnl Note that this is not necessarily a check to see if -Werror is supported, but rather to see if\n+dnl a compile with -Werror can succeed. This is important because the compiler may already be\n+dnl warning about something unrelated, for example about some path issue. If that is the case,\n+dnl -Werror cannot be used because all of those warnings would be turned into errors.\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n+dnl Check for a flag to turn linker warnings into errors. When flags are passed to linkers via the\n+dnl compiler driver using a -Wl,-foo flag, linker warnings may be swallowed rather than bubbling up.\n+dnl See note above, the same applies here as well.\n+dnl\n+dnl LDFLAG_WERROR Should only be used when testing -Wl,*\n+case $host in\n+ *darwin*)\n+    AX_CHECK_LINK_FLAG([-Wl,-fatal_warnings],[LDFLAG_WERROR=\"-Wl,-fatal_warnings\"],[LDFLAG_WERROR=\"\"])\n+    ;;\n+  *)\n+    AX_CHECK_LINK_FLAG([-Wl,--fatal-warnings],[LDFLAG_WERROR=\"-Wl,--fatal-warnings\"],[LDFLAG_WERROR=\"\"])\n+    ;;\n+esac\n+\n if test \"x$enable_debug\" = xyes; then\n   dnl Clear default -g -O2 flags\n   if test \"x$CXXFLAGS_overridden\" = xno; then\n@@ -332,26 +378,38 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n+  AX_CHECK_COMPILE_FLAG([-Werror=gnu],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=gnu\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=conditional-uninitialized],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=conditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=sign-compare],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=sign-compare\"],,[[$CXXFLAG_WERROR]])\n+  dnl -Wsuggest-override is broken with GCC before 9.2\n+  dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n+  AX_CHECK_COMPILE_FLAG([-Werror=suggest-override],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=suggest-override\"],,[[$CXXFLAG_WERROR]],\n+                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wall],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wgnu],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wswitch],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wswitch\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wthread-safety],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wsign-compare],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsign-compare\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n+                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n@@ -361,8 +419,12 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n fi\n \n+dnl Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\n+AX_CHECK_COMPILE_FLAG([-fno-extended-identifiers],[[CXXFLAGS=\"$CXXFLAGS -fno-extended-identifiers\"]],,[[$CXXFLAG_WERROR]])\n+\n enable_sse42=no\n enable_sse41=no\n enable_avx2=no\n@@ -545,9 +607,6 @@ case $host in\n      fi\n \n      CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -D_WIN32_WINNT=0x0601\"\n-     if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-       CXXFLAGS=\"$CXXFLAGS -w\"\n-     fi\n \n      dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.\n      dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override\n@@ -557,6 +616,8 @@ case $host in\n      archive_cmds_CXX=\"\\$CC -shared \\$libobjs \\$deplibs \\$compiler_flags -static -o \\$output_objdir/\\$soname \\${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker \\$lib\"\n      postdeps_CXX=\n \n+     dnl We require Windows 7 (NT 6.1) or later\n+     AX_CHECK_LINK_FLAG([[-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1]],[LDFLAGS=\"$LDFLAGS -Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1\"],,[[$LDFLAG_WERROR]])\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n@@ -604,7 +665,7 @@ case $host in\n        esac\n      fi\n \n-     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n+     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"],, [[$LDFLAG_WERROR]])\n      CPPFLAGS=\"$CPPFLAGS -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0\"\n      OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n@@ -649,7 +710,6 @@ if test x$use_lcov = xyes; then\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n-  AC_DEFINE(USE_COVERAGE, 1, [Define this symbol if coverage is enabled])\n   CXXFLAGS=\"$CXXFLAGS -Og\"\n fi\n \n@@ -687,20 +747,6 @@ AX_GCC_FUNC_ATTRIBUTE([dllexport])\n AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n-\n-  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  dnl See which one is present here.\n-  AC_MSG_CHECKING(__fdelt_chk type)\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n-                    #undef _FORTIFY_SOURCE\n-                  #endif\n-                  #define _FORTIFY_SOURCE 2\n-                  #include <sys/select.h>\n-     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n-    [ fdelt_type=\"long unsigned int\"],\n-    [ fdelt_type=\"long int\"])\n-  AC_MSG_RESULT($fdelt_type)\n-  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n   AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n else\n@@ -750,11 +796,11 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n-  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"],, [[$LDFLAG_WERROR]])\n   AX_CHECK_LINK_FLAG([[-fPIE -pie]], [PIE_FLAGS=\"-fPIE\"; HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"],, [[$CXXFLAG_WERROR]])\n \n   case $host in\n@@ -764,54 +810,23 @@ if test x$use_hardening != xno; then\n   esac\n fi\n \n-dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n+dnl These flags are specific to ld64, and may cause issues with other linkers.\n+dnl For example: GNU ld will interpret -dead_strip as -de and then try and use\n+dnl \"ad_strip\" as the symbol for the entry point.\n if test x$TARGET_OS = xdarwin; then\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"])\n-  AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n fi\n \n if test x$enable_determinism = xyes; then\n   if test x$TARGET_OS = xwindows; then\n-    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"])\n+    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"],, [[$LDFLAG_WERROR]])\n   fi\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n-dnl check that it fails to build without memcpy, then that it builds with\n-AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-    #include <cstddef>\n-    #if HAVE_SYS_SELECT_H\n-    #include <sys/select.h>\n-    #endif\n-  ]],[[\n-    #if HAVE_SYS_SELECT_H\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    #endif\n-  ]])],\n-  [ AC_MSG_RESULT(no) ],\n-  [\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-          #include <cstring>\n-          #if HAVE_SYS_SELECT_H\n-          #include <sys/select.h>\n-          #endif\n-        ]], [[\n-          #if HAVE_SYS_SELECT_H\n-          fd_set fds;\n-          FD_ZERO(&fds);\n-          #endif\n-        ]])],\n-        [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_CSTRING_DEPENDENT_FD_ZERO, 1, [Define this symbol if FD_ZERO is dependent of a memcpy declaration being available]) ],\n-        [ AC_MSG_ERROR(failed with cstring include) ]\n-      )\n-  ]\n-)\n-\n AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n     [#include <sys/types.h>\n     #include <ifaddrs.h>]\n@@ -851,6 +866,22 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [ AC_MSG_RESULT(no)]\n )\n \n+dnl Check for posix_fallocate\n+AC_MSG_CHECKING(for posix_fallocate)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+                   // same as in src/util/system.cpp\n+                   #ifdef __linux__\n+                   #ifdef _POSIX_C_SOURCE\n+                   #undef _POSIX_C_SOURCE\n+                   #endif\n+                   #define _POSIX_C_SOURCE 200112L\n+                   #endif // __linux__\n+                   #include <fcntl.h>]],\n+                   [[ int f = posix_fallocate(0, 0, 0); ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_POSIX_FALLOCATE, 1,[Define this symbol if you have posix_fallocate]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n AC_MSG_CHECKING([for visibility attribute])\n AC_LINK_IFELSE([AC_LANG_SOURCE([\n   int foo_def( void ) __attribute__((visibility(\"default\")));\n@@ -868,6 +899,9 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n+dnl thread_local is currently disabled when building with glibc back compat.\n+dnl Our minimum supported glibc is 2.17, however support for thread_local\n+dnl did not arrive in glibc until 2.18.\n if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && test \"x$use_glibc_compat\" = xno; }; then\n   TEMP_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n@@ -907,6 +941,22 @@ if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && te\n   LDFLAGS=\"$TEMP_LDFLAGS\"\n fi\n \n+dnl check for gmtime_r(), fallback to gmtime_s() if that is unavailable\n+dnl fail if neither are available.\n+AC_MSG_CHECKING(for gmtime_r)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n+  [[ gmtime_r((const time_t *) nullptr, (struct tm *) nullptr); ]])],\n+  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GMTIME_R, 1, [Define this symbol if gmtime_r is available]) ],\n+  [ AC_MSG_RESULT(no);\n+    AC_MSG_CHECKING(for gmtime_s);\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n+       [[ gmtime_s((struct tm *) nullptr, (const time_t *) nullptr); ]])],\n+       [ AC_MSG_RESULT(yes)],\n+       [ AC_MSG_RESULT(no); AC_MSG_ERROR(Both gmtime_r and gmtime_s are unavailable) ]\n+    )\n+  ]\n+)\n+\n dnl Check for different ways of gathering OS randomness\n AC_MSG_CHECKING(for Linux getrandom syscall)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n@@ -935,19 +985,21 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n AC_MSG_CHECKING(for sysctl)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/sysctl.h>]],\n- [[ static const int name[2] = {CTL_KERN, KERN_VERSION};\n-    #ifdef __linux__\n+ [[ #ifdef __linux__\n     #error \"Don't use sysctl on Linux, it's deprecated even when it works\"\n     #endif\n-    sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n+    sysctl(nullptr, 2, nullptr, nullptr, nullptr, 0); ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL, 1,[Define this symbol if the BSD sysctl() is available]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n AC_MSG_CHECKING(for sysctl KERN_ARND)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/sysctl.h>]],\n- [[ static const int name[2] = {CTL_KERN, KERN_ARND};\n+ [[ #ifdef __linux__\n+    #error \"Don't use sysctl on Linux, it's deprecated even when it works\"\n+    #endif\n+    static int name[2] = {CTL_KERN, KERN_ARND};\n     sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL_ARND, 1,[Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n  [ AC_MSG_RESULT(no)]\n@@ -1168,7 +1220,7 @@ fi\n \n if test x$use_reduce_exports = xyes; then\n     CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n-    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n+    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"],, [[$LDFLAG_WERROR]])\n fi\n \n if test x$use_tests = xyes; then\n@@ -1253,10 +1305,10 @@ if test x$use_pkgconfig = xyes; then\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n-      if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n-        PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n+      if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n+        PKG_CHECK_MODULES([EVENT], [libevent >= 2.0.21], [use_libevent=yes], [AC_MSG_ERROR(libevent version 2.0.21 or greater not found.)])\n         if test x$TARGET_OS != xwindows; then\n-          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n+          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads >= 2.0.21],, [AC_MSG_ERROR(libevent_pthreads version 2.0.21 or greater not found.)])\n         fi\n       fi\n \n@@ -1273,8 +1325,8 @@ if test x$use_pkgconfig = xyes; then\n   )\n else\n \n-  if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n-    AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n+  if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n+    AC_CHECK_HEADER([event2/event.h], [use_libevent=yes], AC_MSG_ERROR(libevent headers missing),)\n     AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n     if test x$TARGET_OS != xwindows; then\n       AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))\n@@ -1310,22 +1362,6 @@ else\n   fi\n fi\n \n-dnl RapidCheck property-based testing\n-\n-enable_property_tests=no\n-if test \"x$use_rapidcheck\" = xauto; then\n-    AC_CHECK_HEADERS([rapidcheck.h], [enable_property_tests=yes])\n-elif test \"x$use_rapidcheck\" != xno; then\n-    enable_property_tests=yes\n-fi\n-\n-RAPIDCHECK_LIBS=\n-if test \"x$enable_property_tests\" = xyes; then\n-   RAPIDCHECK_LIBS=-lrapidcheck\n-fi\n-AC_SUBST(RAPIDCHECK_LIBS)\n-AM_CONDITIONAL([ENABLE_PROPERTY_TESTS], [test x$enable_property_tests = xyes])\n-\n dnl univalue check\n \n need_bundled_univalue=yes\n@@ -1374,6 +1410,50 @@ AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n AC_SUBST(UNIVALUE_CFLAGS)\n AC_SUBST(UNIVALUE_LIBS)\n \n+dnl libmultiprocess library check\n+\n+libmultiprocess_found=no\n+if test \"x$with_libmultiprocess\" = xyes || test \"x$with_libmultiprocess\" = xauto; then\n+  if test \"x$use_pkgconfig\" = xyes; then\n+    m4_ifdef([PKG_CHECK_MODULES], [PKG_CHECK_MODULES([LIBMULTIPROCESS], [libmultiprocess], [\n+       libmultiprocess_found=yes;\n+       libmultiprocess_prefix=`$PKG_CONFIG --variable=prefix libmultiprocess`;\n+    ], [true])])\n+  fi\n+elif test \"x$with_libmultiprocess\" != xno; then\n+  AC_MSG_ERROR([--with-libmultiprocess=$with_libmultiprocess value is not yes, auto, or no])\n+fi\n+AC_SUBST(LIBMULTIPROCESS_CFLAGS)\n+AC_SUBST(LIBMULTIPROCESS_LIBS)\n+\n+dnl Enable multiprocess check\n+\n+if test \"x$enable_multiprocess\" = xyes; then\n+  if test \"x$libmultiprocess_found\" != xyes; then\n+    AC_MSG_ERROR([--enable-multiprocess=yes option specified but libmultiprocess library was not found. May need to install libmultiprocess library, or specify install path with PKG_CONFIG_PATH environment variable. Running 'pkg-config --debug libmultiprocess' may be helpful for debugging.])\n+  fi\n+  build_multiprocess=yes\n+elif test \"x$enable_multiprocess\" = xauto; then\n+  build_multiprocess=$libmultiprocess_found\n+else\n+  build_multiprocess=no\n+fi\n+\n+AM_CONDITIONAL([BUILD_MULTIPROCESS],[test \"x$build_multiprocess\" = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_NODE], [test \"x$build_multiprocess\" = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_GUI], [test \"x$build_multiprocess\" = xyes])\n+\n+dnl codegen tools check\n+\n+if test x$build_multiprocess != xno; then\n+  if test \"x$with_mpgen\" = xyes || test \"x$with_mpgen\" = xauto; then\n+    MPGEN_PREFIX=\"$libmultiprocess_prefix\"\n+  elif test \"x$with_mpgen\" != xno; then\n+    MPGEN_PREFIX=\"$with_mpgen\";\n+  fi\n+  AC_SUBST(MPGEN_PREFIX)\n+fi\n+\n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n AC_MSG_RESULT($build_bitcoind)\n@@ -1415,9 +1495,6 @@ if test \"x$use_ccache\" != \"xno\"; then\n   fi\n   AC_MSG_RESULT($use_ccache)\n fi\n-if test \"x$use_ccache\" = \"xyes\"; then\n-    AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n-fi\n \n dnl enable wallet\n AC_MSG_CHECKING([if wallet should be enabled])\n@@ -1528,6 +1605,7 @@ AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n+AM_CONDITIONAL([USE_LIBEVENT],[test x$use_libevent = xyes])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])\n@@ -1595,6 +1673,7 @@ AC_SUBST(EVENT_LIBS)\n AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n AC_SUBST(QR_LIBS)\n+AC_SUBST(HAVE_GMTIME_R)\n AC_SUBST(HAVE_FDATASYNC)\n AC_SUBST(HAVE_FULLFSYNC)\n AC_SUBST(HAVE_O_CLOEXEC)\n@@ -1607,6 +1686,7 @@ AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/spl\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n+AC_CONFIG_LINKS([test/fuzz/test_runner.py:test/fuzz/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n AC_CONFIG_LINKS([test/util/rpcauth-test.py:test/util/rpcauth-test.py])\n \n@@ -1652,6 +1732,7 @@ esac\n \n echo\n echo \"Options used to compile and link:\"\n+echo \"  multiprocess  = $build_multiprocess\"\n echo \"  with wallet   = $enable_wallet\"\n echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n@@ -1660,7 +1741,6 @@ fi\n echo \"  with zmq      = $use_zmq\"\n echo \"  with test     = $use_tests\"\n if test x$use_tests != xno; then\n-    echo \"    with prop   = $enable_property_tests\"\n     echo \"    with fuzz   = $enable_fuzz\"\n fi\n echo \"  with bench    = $use_bench\""
      },
      {
        "sha": "bdff7a84b098bd430d9e3b3ec8c58106da7bb680",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -89,12 +89,6 @@ example:\n BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n ```\n \n-optimize-pngs.py\n-================\n-\n-A script to optimize png files in the bitcoin\n-repository (requires pngcrush).\n-\n security-check.py and test-security-check.py\n ============================================\n \n@@ -109,7 +103,7 @@ certain symbols and are only linked against allowed libraries.\n For Linux this means checking for allowed gcc, glibc and libstdc++ version symbols.\n This makes sure they are still compatible with the minimum supported distribution versions.\n \n-For macOS we check that the executables are only linked against libraries we allow.\n+For macOS and Windows we check that the executables are only linked against libraries we allow.\n \n Example usage after a gitian build:\n "
      },
      {
        "sha": "bc5f09a3e260f6f02d6ea72e90b21a53e003ff0e",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "084914f11a82a7fbc22504db55c9a511645ef2ba",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Copyright (c) 2016-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e9481dbbcf54159b08f8a27daf4905826b03804e",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "removed",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=7237f928118f3ab2df4a905304ef9141f150e2d4",
        "patch": "@@ -1,76 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Run this script every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n-#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n-'''\n-import os\n-import sys\n-import subprocess\n-import hashlib\n-from PIL import Image  # pip3 install Pillow\n-\n-def file_hash(filename):\n-    '''Return hash of raw file contents'''\n-    with open(filename, 'rb') as f:\n-        return hashlib.sha256(f.read()).hexdigest()\n-\n-def content_hash(filename):\n-    '''Return hash of RGBA contents of image'''\n-    i = Image.open(filename)\n-    i = i.convert('RGBA')\n-    data = i.tobytes()\n-    return hashlib.sha256(data).hexdigest()\n-\n-pngcrush = 'pngcrush'\n-git = 'git'\n-folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"share/pixmaps\"]\n-basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel'], universal_newlines=True, encoding='utf8').rstrip('\\n')\n-totalSaveBytes = 0\n-noHashChange = True\n-\n-outputArray = []\n-for folder in folders:\n-    absFolder=os.path.join(basePath, folder)\n-    for file in os.listdir(absFolder):\n-        extension = os.path.splitext(file)[1]\n-        if extension.lower() == '.png':\n-            print(\"optimizing {}...\".format(file), end =' ')\n-            file_path = os.path.join(absFolder, file)\n-            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n-            fileMetaMap['contentHashPre'] = content_hash(file_path)\n-\n-            try:\n-                subprocess.call([pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n-                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n-            except:\n-                print(\"pngcrush is not installed, aborting...\")\n-                sys.exit(0)\n-\n-            #verify\n-            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT, universal_newlines=True, encoding='utf8'):\n-                print(\"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\")\n-                sys.exit(1)\n-\n-            fileMetaMap['sha256New'] = file_hash(file_path)\n-            fileMetaMap['contentHashPost'] = content_hash(file_path)\n-\n-            if fileMetaMap['contentHashPre'] != fileMetaMap['contentHashPost']:\n-                print(\"Image contents of PNG file {} before and after crushing don't match\".format(file))\n-                sys.exit(1)\n-\n-            fileMetaMap['psize'] = os.path.getsize(file_path)\n-            outputArray.append(fileMetaMap)\n-            print(\"done\")\n-\n-print(\"summary:\\n+++++++++++++++++\")\n-for fileDict in outputArray:\n-    oldHash = fileDict['sha256Old']\n-    newHash = fileDict['sha256New']\n-    totalSaveBytes += fileDict['osize'] - fileDict['psize']\n-    noHashChange = noHashChange and (oldHash == newHash)\n-    print(fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\")\n-\n-print(\"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\")"
      },
      {
        "sha": "b2ecc274fbb7b32cec528f5e00c14d174578e6cc",
        "filename": "contrib/devtools/previous_release.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/previous_release.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/previous_release.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/previous_release.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -139,7 +139,10 @@ pushd \"$TARGET\" || exit 1\n         fi\n         URL=\"https://bitcoin.org/$BIN_PATH/bitcoin-${tag:1}-$PLATFORM.tar.gz\"\n         echo \"Fetching: $URL\"\n-        curl -O $URL\n+        if ! curl -O -f $URL; then\n+            echo \"Download failed.\"\n+            exit 1\n+        fi\n         tar -zxf \"bitcoin-${tag:1}-$PLATFORM.tar.gz\" -C \"$tag\" --strip-components=1 \"bitcoin-${tag:1}\"\n         rm \"bitcoin-${tag:1}-$PLATFORM.tar.gz\"\n       fi"
      },
      {
        "sha": "ca587ca9e543a108b984299cf98f693d5fbf7f4d",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 90,
        "deletions": 69,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -12,33 +12,33 @@\n import sys\n import os\n \n+from typing import List, Optional\n+\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n-NONFATAL = {} # checks which are non-fatal for now but only generate a warning\n \n-def check_ELF_PIE(executable):\n+def run_command(command) -> str:\n+    p = subprocess.run(command, stdout=subprocess.PIPE, check=True, universal_newlines=True)\n+    return p.stdout\n+\n+def check_ELF_PIE(executable) -> bool:\n     '''\n     Check for position independent executable (PIE), allowing for address space randomization.\n     '''\n-    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-h', '-W', executable])\n \n     ok = False\n     for line in stdout.splitlines():\n-        line = line.split()\n-        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+        tokens = line.split()\n+        if len(line)>=2 and tokens[0] == 'Type:' and tokens[1] == 'DYN':\n             ok = True\n     return ok\n \n def get_ELF_program_headers(executable):\n     '''Return type and flags for ELF program headers'''\n-    p = subprocess.Popen([READELF_CMD, '-l', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-l', '-W', executable])\n+\n     in_headers = False\n     count = 0\n     headers = []\n@@ -62,7 +62,7 @@ def get_ELF_program_headers(executable):\n             count += 1\n     return headers\n \n-def check_ELF_NX(executable):\n+def check_ELF_NX(executable) -> bool:\n     '''\n     Check that no sections are writable and executable (including the stack)\n     '''\n@@ -75,7 +75,7 @@ def check_ELF_NX(executable):\n             have_wx = True\n     return have_gnu_stack and not have_wx\n \n-def check_ELF_RELRO(executable):\n+def check_ELF_RELRO(executable) -> bool:\n     '''\n     Check for read-only relocations.\n     GNU_RELRO program header must exist\n@@ -84,90 +84,78 @@ def check_ELF_RELRO(executable):\n     have_gnu_relro = False\n     for (typ, flags) in get_ELF_program_headers(executable):\n         # Note: not checking flags == 'R': here as linkers set the permission differently\n-        # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n+        # This does not affect security: the permission flags of the GNU_RELRO program\n+        # header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n         # See also https://marc.info/?l=binutils&m=1498883354122353\n         if typ == 'GNU_RELRO':\n             have_gnu_relro = True\n \n     have_bindnow = False\n-    p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-d', '-W', executable])\n+\n     for line in stdout.splitlines():\n         tokens = line.split()\n         if len(tokens)>1 and tokens[1] == '(BIND_NOW)' or (len(tokens)>2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n             have_bindnow = True\n     return have_gnu_relro and have_bindnow\n \n-def check_ELF_Canary(executable):\n+def check_ELF_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '--dyn-syms', '-W', executable])\n+\n     ok = False\n     for line in stdout.splitlines():\n         if '__stack_chk_fail' in line:\n             ok = True\n     return ok\n \n-def get_PE_dll_characteristics(executable):\n-    '''\n-    Get PE DllCharacteristics bits.\n-    Returns a tuple (arch,bits) where arch is 'i386:x86-64' or 'i386'\n-    and bits is the DllCharacteristics value.\n-    '''\n-    p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    arch = ''\n+def get_PE_dll_characteristics(executable) -> int:\n+    '''Get PE DllCharacteristics bits'''\n+    stdout = run_command([OBJDUMP_CMD, '-x',  executable])\n+\n     bits = 0\n     for line in stdout.splitlines():\n         tokens = line.split()\n-        if len(tokens)>=2 and tokens[0] == 'architecture:':\n-            arch = tokens[1].rstrip(',')\n         if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n             bits = int(tokens[1],16)\n-    return (arch,bits)\n+    return bits\n \n IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020\n IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n \n-def check_PE_DYNAMIC_BASE(executable):\n+def check_PE_DYNAMIC_BASE(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n-    return (bits & reqbits) == reqbits\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE) == IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n \n-# On 64 bit, must support high-entropy 64-bit address space layout randomization in addition to DYNAMIC_BASE\n-# to have secure ASLR.\n-def check_PE_HIGH_ENTROPY_VA(executable):\n+# Must support high-entropy 64-bit address space layout randomization\n+# in addition to DYNAMIC_BASE to have secure ASLR.\n+def check_PE_HIGH_ENTROPY_VA(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    if arch == 'i386:x86-64':\n-        reqbits = IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n-    else: # Unnecessary on 32-bit\n-        assert(arch == 'i386')\n-        reqbits = 0\n-    return (bits & reqbits) == reqbits\n-\n-def check_PE_NX(executable):\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA) == IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n+\n+def check_PE_RELOC_SECTION(executable) -> bool:\n+    '''Check for a reloc section. This is required for functional ASLR.'''\n+    stdout = run_command([OBJDUMP_CMD, '-h',  executable])\n+\n+    for line in stdout.splitlines():\n+        if '.reloc' in line:\n+            return True\n+    return False\n+\n+def check_PE_NX(executable) -> bool:\n     '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n+    bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n-def get_MACHO_executable_flags(executable):\n-    p = subprocess.Popen([OTOOL_CMD, '-vh', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+def get_MACHO_executable_flags(executable) -> List[str]:\n+    stdout = run_command([OTOOL_CMD, '-vh', executable])\n \n     flags = []\n     for line in stdout.splitlines():\n@@ -197,6 +185,41 @@ def check_MACHO_NOUNDEFS(executable) -> bool:\n         return True\n     return False\n \n+def check_MACHO_NX(executable) -> bool:\n+    '''\n+    Check for no stack execution\n+    '''\n+    flags = get_MACHO_executable_flags(executable)\n+    if 'ALLOW_STACK_EXECUTION' in flags:\n+        return False\n+    return True\n+\n+def check_MACHO_LAZY_BINDINGS(executable) -> bool:\n+    '''\n+    Check for no lazy bindings.\n+    We don't use or check for MH_BINDATLOAD. See #18295.\n+    '''\n+    stdout = run_command([OTOOL_CMD, '-l', executable])\n+\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if 'lazy_bind_off' in tokens or 'lazy_bind_size' in tokens:\n+            if tokens[1] != '0':\n+                return False\n+    return True\n+\n+def check_MACHO_Canary(executable) -> bool:\n+    '''\n+    Check for use of stack canary\n+    '''\n+    stdout = run_command([OTOOL_CMD, '-Iv', executable])\n+\n+    ok = False\n+    for line in stdout.splitlines():\n+        if '___stack_chk_fail' in line:\n+            ok = True\n+    return ok\n+\n CHECKS = {\n 'ELF': [\n     ('PIE', check_ELF_PIE),\n@@ -207,15 +230,19 @@ def check_MACHO_NOUNDEFS(executable) -> bool:\n 'PE': [\n     ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),\n     ('HIGH_ENTROPY_VA', check_PE_HIGH_ENTROPY_VA),\n-    ('NX', check_PE_NX)\n+    ('NX', check_PE_NX),\n+    ('RELOC_SECTION', check_PE_RELOC_SECTION)\n ],\n 'MACHO': [\n     ('PIE', check_MACHO_PIE),\n     ('NOUNDEFS', check_MACHO_NOUNDEFS),\n+    ('NX', check_MACHO_NX),\n+    ('LAZY_BINDINGS', check_MACHO_LAZY_BINDINGS),\n+    ('Canary', check_MACHO_Canary)\n ]\n }\n \n-def identify_executable(executable):\n+def identify_executable(executable) -> Optional[str]:\n     with open(filename, 'rb') as f:\n         magic = f.read(4)\n     if magic.startswith(b'MZ'):\n@@ -237,18 +264,12 @@ def identify_executable(executable):\n                 continue\n \n             failed = []\n-            warning = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n-                    if name in NONFATAL:\n-                        warning.append(name)\n-                    else:\n-                        failed.append(name)\n+                    failed.append(name)\n             if failed:\n                 print('%s: failed %s' % (filename, ' '.join(failed)))\n                 retval = 1\n-            if warning:\n-                print('%s: warning %s' % (filename, ' '.join(warning)))\n         except IOError:\n             print('%s: cannot open' % filename)\n             retval = 1"
      },
      {
        "sha": "6949cb7ced89eda0be2b24dc4de9123ae7403fb1",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 46,
        "deletions": 3,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -3,9 +3,8 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-A script to check that the (Linux) executables produced by gitian only contain\n-allowed gcc and glibc version symbols. This makes sure they are still compatible\n-with the minimum supported Linux distribution versions.\n+A script to check that the executables produced by gitian only contain\n+certain symbols and are only linked against allowed libraries.\n \n Example usage:\n \n@@ -53,6 +52,7 @@\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n+OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n \n # Allowed NEEDED libraries\n@@ -101,6 +101,26 @@\n 'libobjc.A.dylib', # Objective-C runtime library\n }\n \n+PE_ALLOWED_LIBRARIES = {\n+'ADVAPI32.dll', # security & registry\n+'IPHLPAPI.DLL', # IP helper API\n+'KERNEL32.dll', # win32 base APIs\n+'msvcrt.dll', # C standard library for MSVC\n+'SHELL32.dll', # shell API\n+'USER32.dll', # user interface\n+'WS2_32.dll', # sockets\n+# bitcoin-qt only\n+'dwmapi.dll', # desktop window manager\n+'GDI32.dll', # graphics device interface\n+'IMM32.dll', # input method editor\n+'ole32.dll', # component object model\n+'OLEAUT32.dll', # OLE Automation API\n+'SHLWAPI.dll', # light weight shell API\n+'UxTheme.dll',\n+'VERSION.dll', # version checking\n+'WINMM.dll', # WinMM audio API\n+}\n+\n class CPPFilt(object):\n     '''\n     Demangle C++ symbol names.\n@@ -218,6 +238,26 @@ def check_MACHO_libraries(filename) -> bool:\n             ok = False\n     return ok\n \n+def pe_read_libraries(filename) -> List[str]:\n+    p = subprocess.Popen([OBJDUMP_CMD, '-x', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.splitlines():\n+        if 'DLL Name:' in line:\n+            tokens = line.split(': ')\n+            libraries.append(tokens[1])\n+    return libraries\n+\n+def check_PE_libraries(filename) -> bool:\n+    ok = True\n+    for dylib in pe_read_libraries(filename):\n+        if dylib not in PE_ALLOWED_LIBRARIES:\n+            print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n+            ok = False\n+    return ok\n+\n CHECKS = {\n 'ELF': [\n     ('IMPORTED_SYMBOLS', check_imported_symbols),\n@@ -226,6 +266,9 @@ def check_MACHO_libraries(filename) -> bool:\n ],\n 'MACHO': [\n     ('DYNAMIC_LIBRARIES', check_MACHO_libraries)\n+],\n+'PE' : [\n+    ('DYNAMIC_LIBRARIES', check_PE_libraries)\n ]\n }\n "
      },
      {
        "sha": "ea70b279418f1e5be2427ec8c2c0736747646f38",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 31,
        "deletions": 6,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Copyright (c) 2015-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -43,16 +43,41 @@ def test_ELF(self):\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE']),\n                 (0, ''))\n \n-    def test_64bit_PE(self):\n+    def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n         cc = 'x86_64-w64-mingw32-gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va']), (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va']), (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va']), (1, executable+': failed HIGH_ENTROPY_VA'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va']), (0, ''))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE']),\n+            (1, executable+': failed RELOC_SECTION'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+            (0, ''))\n+\n+    def test_MACHO(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = 'clang'\n+        write_testcode(source)\n+\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fno-stack-protector']),\n+            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS Canary'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fstack-protector-all']),\n+            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-fstack-protector-all']),\n+            (1, executable+': failed PIE NOUNDEFS LAZY_BINDINGS'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-fstack-protector-all']),\n+            (1, executable+': failed PIE LAZY_BINDINGS'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-bind_at_load','-fstack-protector-all']),\n+            (1, executable+': failed PIE'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-pie','-Wl,-bind_at_load','-fstack-protector-all']),\n+            (0, ''))\n \n if __name__ == '__main__':\n     unittest.main()"
      },
      {
        "sha": "95b155321588554f0fafadd8e30aabd694184df4",
        "filename": "contrib/devtools/test_deterministic_coverage.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/test_deterministic_coverage.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/devtools/test_deterministic_coverage.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_deterministic_coverage.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019 The Bitcoin Core developers\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "e005cb96da62302ba6f099dcad1bcd13ee19e814",
        "filename": "contrib/filter-lcov.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/filter-lcov.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/filter-lcov.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/filter-lcov.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a2ca768aaa70b285d1e7b8654c1094533e6c1190",
        "filename": "contrib/gitian-descriptors/assign_DISTNAME",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/assign_DISTNAME",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/assign_DISTNAME",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/assign_DISTNAME?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,12 @@\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# A helper script to be sourced into the gitian descriptors\n+\n+if RECENT_TAG=\"$(git describe --exact-match HEAD)\"; then\n+    VERSION=\"${RECENT_TAG#v}\"\n+else\n+    VERSION=\"$(git rev-parse --short=12 HEAD)\"\n+fi\n+DISTNAME=\"bitcoin-${VERSION}\""
      },
      {
        "sha": "0ed1e16f7ea90da54382c256f2edd21846b4cf1b",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 12,
        "deletions": 25,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-linux-0.20\"\n+name: \"bitcoin-core-linux-0.21\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n@@ -46,7 +46,7 @@ script: |\n   FAKETIME_PROGS=\"date ar ranlib nm\"\n   HOST_CFLAGS=\"-O2 -g\"\n   HOST_CXXFLAGS=\"-O2 -g\"\n-  HOST_LDFLAGS_BASE=\"-static-libstdc++\"\n+  HOST_LDFLAGS_BASE=\"-static-libstdc++ -Wl,-O2\"\n \n   export QT_RCC_TEST=1\n   export QT_RCC_SOURCE_DATE_OVERRIDE=1\n@@ -140,25 +140,18 @@ script: |\n   create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n-  # Create the release tarball using (arbitrarily) the first host\n-  ./autogen.sh\n-  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n-  make dist\n-  SOURCEDIST=$(echo bitcoin-*.tar.gz)\n-  DISTNAME=${SOURCEDIST/%.tar.gz}\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  source contrib/gitian-descriptors/assign_DISTNAME\n \n-  # Correct tar file order\n-  mkdir -p temp\n-  pushd temp\n-  tar -xf ../$SOURCEDIST\n-  find bitcoin-* | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n-  popd\n+  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n \n-  # Workaround for tarball not building with the bare tag version (prep)\n-  make -C src obj/build.h\n+  # Create the source tarball\n+  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+  git archive --output=\"$GIT_ARCHIVE\" HEAD\n \n   ORIGPATH=\"$PATH\"\n-  # Extract the release tarball into a dir for each host and build\n+  # Extract the git archive into a dir for each host and build\n   for i in ${HOSTS}; do\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     if [ \"${i}\" = \"riscv64-linux-gnu\" ]; then\n@@ -172,13 +165,9 @@ script: |\n     cd distsrc-${i}\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n-    tar --strip-components=1 -xf ../$SOURCEDIST\n-\n-    # Workaround for tarball not building with the bare tag version\n-    echo '#!/bin/true' >share/genbuild.sh\n-    mkdir src/obj\n-    cp ../src/obj/build.h src/obj/\n+    tar -xf $GIT_ARCHIVE\n \n+    ./autogen.sh\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n@@ -196,5 +185,3 @@ script: |\n     cd ../../\n     rm -rf distsrc-${i}\n   done\n-  mkdir -p $OUTDIR/src\n-  mv $SOURCEDIST $OUTDIR/src"
      },
      {
        "sha": "bbae7201e5b7852ddbdb884f69fe74b21e76619d",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 12,
        "deletions": 24,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-osx-0.20\"\n+name: \"bitcoin-core-osx-0.21\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n@@ -103,38 +103,27 @@ script: |\n   create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n-  # Create the release tarball using (arbitrarily) the first host\n-  ./autogen.sh\n-  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n-  make dist\n-  SOURCEDIST=$(echo bitcoin-*.tar.gz)\n-  DISTNAME=${SOURCEDIST/%.tar.gz}\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  source contrib/gitian-descriptors/assign_DISTNAME\n \n-  # Correct tar file order\n-  mkdir -p temp\n-  pushd temp\n-  tar -xf ../$SOURCEDIST\n-  find bitcoin-* | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n-  popd\n+  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n \n-  # Workaround for tarball not building with the bare tag version (prep)\n-  make -C src obj/build.h\n+  # Create the source tarball\n+  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+  git archive --output=\"$GIT_ARCHIVE\" HEAD\n \n   ORIGPATH=\"$PATH\"\n-  # Extract the release tarball into a dir for each host and build\n+  # Extract the git archive into a dir for each host and build\n   for i in ${HOSTS}; do\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n-    tar --strip-components=1 -xf ../$SOURCEDIST\n-\n-    # Workaround for tarball not building with the bare tag version\n-    echo '#!/bin/true' >share/genbuild.sh\n-    mkdir src/obj\n-    cp ../src/obj/build.h src/obj/\n+    tar -xf $GIT_ARCHIVE\n \n+    ./autogen.sh\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n@@ -166,6 +155,5 @@ script: |\n     find ${DISTNAME} | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     cd ../../\n   done\n-  mkdir -p $OUTDIR/src\n-  mv $SOURCEDIST $OUTDIR/src\n+\n   mv ${OUTDIR}/${DISTNAME}-x86_64-*.tar.gz ${OUTDIR}/${DISTNAME}-osx64.tar.gz"
      },
      {
        "sha": "6bcd126662f3a1e04aa38735f1bcd758d7001fbb",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -8,6 +8,7 @@ architectures:\n packages:\n - \"libssl-dev\"\n - \"autoconf\"\n+- \"automake\"\n - \"libtool\"\n - \"pkg-config\"\n remotes:"
      },
      {
        "sha": "d05b6d426da5f00812e4e1d4392db0fc48c7ed25",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 15,
        "deletions": 29,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-core-win-0.20\"\n+name: \"bitcoin-core-win-0.21\"\n enable_cache: true\n distro: \"ubuntu\"\n suites:\n@@ -76,13 +76,11 @@ script: |\n   function create_per-host_compiler_wrapper {\n   # -posix variant is required for c++11 threading.\n   for i in $HOSTS; do\n-    mkdir -p ${WRAP_DIR}/${i}\n     for prog in gcc g++; do\n         echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n         echo \"REAL=\\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-        echo \"export COMPILER_PATH=${WRAP_DIR}/${i}\" >> ${WRAP_DIR}/${i}-${prog}\n         echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n         chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n@@ -110,44 +108,33 @@ script: |\n   create_per-host_compiler_wrapper \"${REFERENCE_DATETIME}\"\n   export PATH=${WRAP_DIR}:${PATH}\n \n-  # Create the release tarball using (arbitrarily) the first host\n-  ./autogen.sh\n-  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n-  make dist\n-  SOURCEDIST=$(echo bitcoin-*.tar.gz)\n-  DISTNAME=${SOURCEDIST/%.tar.gz}\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  source contrib/gitian-descriptors/assign_DISTNAME\n \n-  # Correct tar file order\n-  mkdir -p temp\n-  pushd temp\n-  tar -xf ../$SOURCEDIST\n-  find bitcoin-* | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n-  popd\n+  GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n \n-  # Workaround for tarball not building with the bare tag version (prep)\n-  make -C src obj/build.h\n+  # Create the source tarball\n+  mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+  git archive --output=\"$GIT_ARCHIVE\" HEAD\n \n   ORIGPATH=\"$PATH\"\n-  # Extract the release tarball into a dir for each host and build\n+  # Extract the git archive into a dir for each host and build\n   for i in ${HOSTS}; do\n     export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n     mkdir -p distsrc-${i}\n     cd distsrc-${i}\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p ${INSTALLPATH}\n-    tar --strip-components=1 -xf ../$SOURCEDIST\n-\n-    # Workaround for tarball not building with the bare tag version\n-    echo '#!/bin/true' >share/genbuild.sh\n-    mkdir src/obj\n-    cp ../src/obj/build.h src/obj/\n+    tar -xf $GIT_ARCHIVE\n \n+    ./autogen.sh\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n-    make deploy\n+    make ${MAKEOPTS} -C src check-symbols\n+    make deploy BITCOIN_WIN_INSTALLER=\"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n     make install DESTDIR=${INSTALLPATH}\n-    cp -f --target-directory=\"${OUTDIR}\" ./bitcoin-*-setup-unsigned.exe\n     cd installed\n     mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n     find . -name \"lib*.la\" -delete\n@@ -161,10 +148,9 @@ script: |\n     cd ../../\n     rm -rf distsrc-${i}\n   done\n-  mkdir -p $OUTDIR/src\n-  mv $SOURCEDIST $OUTDIR/src\n+\n   cp -rf contrib/windeploy $BUILD_DIR\n   cd $BUILD_DIR/windeploy\n   mkdir unsigned\n-  cp $OUTDIR/bitcoin-*setup-unsigned.exe unsigned/\n+  cp ${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe unsigned/\n   find . | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz"
      },
      {
        "sha": "0a2c1302c82f8e13cfe48ec36ff5bd0c9e07f3e6",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -13,6 +13,7 @@ D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n D1DBF2C4B96F2DEBF4C16654410108112E7EA81F Hennadii Stepanov (hebasto)\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n+82921A4B88FD454B7EB8CE3C796C4109063D4EAF Jon Atack\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n 4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n@@ -29,6 +30,7 @@ D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgiu\n 133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n A8FC55F3B04BA3146F3492E79303B33A305224CB Sebastian Kung (TheCharlatan)\n ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n+9EDAFF80E080659604F4A76B2EBB056FD847F8A7 Stephan Oeste (Emzy)\n AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami\n 79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n 71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan"
      },
      {
        "sha": "dffcf99607ae2bb997296ad1e16e124d5da70f4b",
        "filename": "contrib/guix/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -13,7 +13,6 @@ We achieve bootstrappability by using Guix as a functional package manager.\n \n Conservatively, a x86_64 machine with:\n \n-- 2 or more logical cores\n - 4GB of free disk space on the partition that /gnu/store will reside in\n - 24GB of free disk space on the partition that the Bitcoin Core git repository\n   resides in\n@@ -143,6 +142,11 @@ find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n   If non-empty, will pass `V=1` to all `make` invocations, making `make` output\n   verbose.\n \n+  Note that any given value is ignored. The variable is only checked for\n+  emptiness. More concretely, this means that `V=` (setting `V` to the empty\n+  string) is interpreted the same way as not setting `V` at all, and that `V=0`\n+  has the same effect as `V=1`.\n+\n * _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n \n   Additional flags to be passed to `guix environment`. For a fully-bootstrapped\n@@ -220,8 +224,6 @@ repository and will likely put one up soon.\n [guix/env-setup]: https://www.gnu.org/software/guix/manual/en/html_node/Build-Environment-Setup.html\n [guix/substitutes]: https://www.gnu.org/software/guix/manual/en/html_node/Substitutes.html\n [guix/substitute-server-auth]: https://www.gnu.org/software/guix/manual/en/html_node/Substitute-Server-Authorization.html\n-[guix/inferiors]: https://www.gnu.org/software/guix/manual/en/html_node/Inferiors.html\n-[guix/channels]: https://www.gnu.org/software/guix/manual/en/html_node/Channels.html\n [guix/time-machine]: https://guix.gnu.org/manual/en/html_node/Invoking-guix-time_002dmachine.html\n \n [debian/guix-package]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850644"
      },
      {
        "sha": "11d2c8b86727eb2a757bc94e532a0d4cc83c45c6",
        "filename": "contrib/guix/guix-build.sh",
        "status": "modified",
        "additions": 95,
        "deletions": 21,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/guix-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/guix-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -13,33 +13,107 @@ make -C \"${PWD}/depends\" -j\"$MAX_JOBS\" download ${V:+V=1} ${SOURCES_PATH:+SOURCE\n # Determine the reference time used for determinism (overridable by environment)\n SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git log --format=%at -1)}\"\n \n+# Execute \"$@\" in a pinned, possibly older version of Guix, for reproducibility\n+# across time.\n time-machine() {\n     guix time-machine --url=https://github.com/dongcarl/guix.git \\\n-                      --commit=b3a7c72c8b2425f8ddb0fc6e3b1caeed40f86dee \\\n+                      --commit=b066c25026f21fb57677aa34692a5034338e7ee3 \\\n                       -- \"$@\"\n }\n \n-# Deterministically build Bitcoin Core for HOSTs (overriable by environment)\n-for host in ${HOSTS=x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu}; do\n+# Function to be called when building for host ${1} and the user interrupts the\n+# build\n+int_trap() {\n+cat << EOF\n+** INT received while building ${1}, you may want to clean up the relevant\n+   output, deploy, and distsrc-* directories before rebuilding\n+\n+Hint: To blow everything away, you may want to use:\n+\n+  $ git clean -xdff --exclude='/depends/SDKs/*'\n+\n+Specifically, this will remove all files without an entry in the index,\n+excluding the SDK directory. Practically speaking, this means that all ignored\n+and untracked files and directories will be wiped, allowing you to start anew.\n+EOF\n+}\n+\n+# Deterministically build Bitcoin Core for HOSTs (overridable by environment)\n+# shellcheck disable=SC2153\n+for host in ${HOSTS=x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu x86_64-w64-mingw32}; do\n \n     # Display proper warning when the user interrupts the build\n-    trap 'echo \"** INT received while building ${host}, you may want to clean up the relevant output and distsrc-* directories before rebuilding\"' INT\n-\n-    # Run the build script 'contrib/guix/libexec/build.sh' in the build\n-    # container specified by 'contrib/guix/manifest.scm'\n-    # shellcheck disable=SC2086\n-    time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n-                             --container \\\n-                             --pure \\\n-                             --no-cwd \\\n-                             --share=\"$PWD\"=/bitcoin \\\n-                             ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n-                             ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n-                             -- env HOST=\"$host\" \\\n-                                    MAX_JOBS=\"$MAX_JOBS\" \\\n-                                    SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n-                                    ${V:+V=1} \\\n-                                    ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n-                                  bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n+    trap 'int_trap ${host}' INT\n+\n+    (\n+        # Required for 'contrib/guix/manifest.scm' to output the right manifest\n+        # for the particular $HOST we're building for\n+        export HOST=\"$host\"\n+\n+        # Run the build script 'contrib/guix/libexec/build.sh' in the build\n+        # container specified by 'contrib/guix/manifest.scm'.\n+        #\n+        # Explanation of `guix environment` flags:\n+        #\n+        #   --container        run command within an isolated container\n+        #\n+        #     Running in an isolated container minimizes build-time differences\n+        #     between machines and improves reproducibility\n+        #\n+        #   --pure             unset existing environment variables\n+        #\n+        #     Same rationale as --container\n+        #\n+        #   --no-cwd           do not share current working directory with an\n+        #                      isolated container\n+        #\n+        #     When --container is specified, the default behavior is to share\n+        #     the current working directory with the isolated container at the\n+        #     same exact path (e.g. mapping '/home/satoshi/bitcoin/' to\n+        #     '/home/satoshi/bitcoin/'). This means that the $PWD inside the\n+        #     container becomes a source of irreproducibility. --no-cwd disables\n+        #     this behaviour.\n+        #\n+        #   --share=SPEC       for containers, share writable host file system\n+        #                      according to SPEC\n+        #\n+        #   --share=\"$PWD\"=/bitcoin\n+        #\n+        #                     maps our current working directory to /bitcoin\n+        #                     inside the isolated container, which we later cd\n+        #                     into.\n+        #\n+        #     While we don't want to map our current working directory to the\n+        #     same exact path (as this introduces irreproducibility), we do want\n+        #     it to be at a _fixed_ path _somewhere_ inside the isolated\n+        #     container so that we have something to build. '/bitcoin' was\n+        #     chosen arbitrarily.\n+        #\n+        #   ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"}\n+        #\n+        #                     make the downloaded depends sources path available\n+        #                     inside the isolated container\n+        #\n+        #     The isolated container has no network access as it's in a\n+        #     different network namespace from the main machine, so we have to\n+        #     make the downloaded depends sources available to it. The sources\n+        #     should have been downloaded prior to this invocation.\n+        #\n+        # shellcheck disable=SC2086\n+        time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n+                                 --container \\\n+                                 --pure \\\n+                                 --no-cwd \\\n+                                 --share=\"$PWD\"=/bitcoin \\\n+                                 --expose=\"$(git rev-parse --git-common-dir)\" \\\n+                                 ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n+                                 ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n+                                 -- env HOST=\"$host\" \\\n+                                        MAX_JOBS=\"$MAX_JOBS\" \\\n+                                        SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n+                                        ${V:+V=1} \\\n+                                        ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                                      bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n+    )\n \n done"
      },
      {
        "sha": "5be3baeefab425c62417106499b672eb0d5696f7",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 165,
        "deletions": 58,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,6 +1,15 @@\n #!/usr/bin/env bash\n export LC_ALL=C\n set -e -o pipefail\n+export TZ=UTC\n+\n+if [ -n \"$V\" ]; then\n+    # Print both unexpanded (-v) and expanded (-x) forms of commands as they are\n+    # read from this file.\n+    set -vx\n+    # Set VERBOSE for CMake-based builds\n+    export VERBOSE=\"$V\"\n+fi\n \n # Check that environment variables assumed to be set by the environment are set\n echo \"Building for platform triple ${HOST:?not set} with reference timestamp ${SOURCE_DATE_EPOCH:?not set}...\"\n@@ -36,23 +45,41 @@ store_path() {\n               --expression='s|\"[[:space:]]*$||'\n }\n \n-# Determine output paths to use in CROSS_* environment variables\n-CROSS_GLIBC=\"$(store_path glibc-cross-${HOST})\"\n-CROSS_GLIBC_STATIC=\"$(store_path glibc-cross-${HOST} static)\"\n-CROSS_KERNEL=\"$(store_path linux-libre-headers-cross-${HOST})\"\n-CROSS_GCC=\"$(store_path gcc-cross-${HOST})\"\n-CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n-CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n-\n # Set environment variables to point Guix's cross-toolchain to the right\n # includes/libs for $HOST\n-#\n-# NOTE: CROSS_C_INCLUDE_PATH is missing ${CROSS_GCC_LIB}/include-fixed, because\n-# the limits.h in it is missing a '#include_next <limits.h>'\n-#\n-export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n-export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n-export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n+case \"$HOST\" in\n+    *mingw*)\n+        # Determine output paths to use in CROSS_* environment variables\n+        CROSS_GLIBC=\"$(store_path \"mingw-w64-x86_64-winpthreads\")\"\n+        CROSS_GCC=\"$(store_path \"gcc-cross-${HOST}\")\"\n+        CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n+        CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n+\n+        NATIVE_GCC=\"$(store_path gcc-glibc-2.27-toolchain)\"\n+        export LIBRARY_PATH=\"${NATIVE_GCC}/lib:${NATIVE_GCC}/lib64\"\n+        export CPATH=\"${NATIVE_GCC}/include\"\n+\n+        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GCC_LIB}/include-fixed:${CROSS_GLIBC}/include\"\n+        export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n+        export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib\"\n+        ;;\n+    *linux*)\n+        CROSS_GLIBC=\"$(store_path \"glibc-cross-${HOST}\")\"\n+        CROSS_GLIBC_STATIC=\"$(store_path \"glibc-cross-${HOST}\" static)\"\n+        CROSS_KERNEL=\"$(store_path \"linux-libre-headers-cross-${HOST}\")\"\n+        CROSS_GCC=\"$(store_path \"gcc-cross-${HOST}\")\"\n+        CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n+        CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n+\n+        # NOTE: CROSS_C_INCLUDE_PATH is missing ${CROSS_GCC_LIB}/include-fixed, because\n+        # the limits.h in it is missing a '#include_next <limits.h>'\n+        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n+        export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n+        export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n+        ;;\n+    *)\n+        exit 1 ;;\n+esac\n \n # Sanity check CROSS_*_PATH directories\n IFS=':' read -ra PATHS <<< \"${CROSS_C_INCLUDE_PATH}:${CROSS_CPLUS_INCLUDE_PATH}:${CROSS_LIBRARY_PATH}\"\n@@ -74,16 +101,20 @@ export GUIX_LD_WRAPPER_DISABLE_RPATH=yes\n [ -e /usr/bin/env ]  || ln -s --no-dereference \"$(command -v env)\"  /usr/bin/env\n \n # Determine the correct value for -Wl,--dynamic-linker for the current $HOST\n-glibc_dynamic_linker=$(\n-    case \"$HOST\" in\n-        i686-linux-gnu)      echo /lib/ld-linux.so.2 ;;\n-        x86_64-linux-gnu)    echo /lib64/ld-linux-x86-64.so.2 ;;\n-        arm-linux-gnueabihf) echo /lib/ld-linux-armhf.so.3 ;;\n-        aarch64-linux-gnu)   echo /lib/ld-linux-aarch64.so.1 ;;\n-        riscv64-linux-gnu)   echo /lib/ld-linux-riscv64-lp64d.so.1 ;;\n-        *)                   exit 1 ;;\n-    esac\n-)\n+case \"$HOST\" in\n+    *linux*)\n+        glibc_dynamic_linker=$(\n+            case \"$HOST\" in\n+                i686-linux-gnu)      echo /lib/ld-linux.so.2 ;;\n+                x86_64-linux-gnu)    echo /lib64/ld-linux-x86-64.so.2 ;;\n+                arm-linux-gnueabihf) echo /lib/ld-linux-armhf.so.3 ;;\n+                aarch64-linux-gnu)   echo /lib/ld-linux-aarch64.so.1 ;;\n+                riscv64-linux-gnu)   echo /lib/ld-linux-riscv64-lp64d.so.1 ;;\n+                *)                   exit 1 ;;\n+            esac\n+        )\n+        ;;\n+esac\n \n # Environment variables for determinism\n export QT_RCC_TEST=1\n@@ -118,37 +149,53 @@ make -C depends --jobs=\"$MAX_JOBS\" HOST=\"$HOST\" \\\n # Source Tarball Building #\n ###########################\n \n-# Create the source tarball and move it to \"${OUTDIR}/src\" if not already there\n-if [ -z \"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\" ]; then\n-    ./autogen.sh\n-    env CONFIG_SITE=\"${BASEPREFIX}/${HOST}/share/config.site\" ./configure --prefix=/\n-    make dist GZIP_ENV='-9n' ${V:+V=1}\n-    mkdir -p \"${OUTDIR}/src\"\n-    mv \"$(find \"${PWD}\" -name 'bitcoin-*.tar.gz')\" \"${OUTDIR}/src/\"\n-fi\n+# Define DISTNAME variable.\n+# shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+source contrib/gitian-descriptors/assign_DISTNAME\n+\n+GIT_ARCHIVE=\"${OUTDIR}/src/${DISTNAME}.tar.gz\"\n \n-# Determine the full path to our source tarball\n-SOURCEDIST=\"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\"\n-# Determine our distribution name (e.g. bitcoin-0.18.0)\n-DISTNAME=\"$(basename \"$SOURCEDIST\" '.tar.gz')\"\n+# Create the source tarball if not already there\n+if [ ! -e \"$GIT_ARCHIVE\" ]; then\n+    mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n+    git archive --output=\"$GIT_ARCHIVE\" HEAD\n+fi\n \n ###########################\n # Binary Tarball Building #\n ###########################\n \n-# Similar flags to Gitian\n-CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n-HOST_CFLAGS=\"-O2 -g -ffile-prefix-map=${PWD}=.\"\n-HOST_CXXFLAGS=\"-O2 -g -ffile-prefix-map=${PWD}=.\"\n-HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++\"\n+# CONFIGFLAGS\n+CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n+case \"$HOST\" in\n+    *linux*) CONFIGFLAGS+=\" --enable-glibc-back-compat\" ;;\n+esac\n+\n+# CFLAGS\n+HOST_CFLAGS=\"-O2 -g\"\n+case \"$HOST\" in\n+    *linux*)  HOST_CFLAGS+=\" -ffile-prefix-map=${PWD}=.\" ;;\n+    *mingw*)  HOST_CFLAGS+=\" -fno-ident\" ;;\n+esac\n+\n+# CXXFLAGS\n+HOST_CXXFLAGS=\"$HOST_CFLAGS\"\n+\n+# LDFLAGS\n+case \"$HOST\" in\n+    *linux*)  HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++ -Wl,-O2\" ;;\n+    *mingw*)  HOST_LDFLAGS=\"-Wl,--no-insert-timestamp\" ;;\n+esac\n \n # Make $HOST-specific native binaries from depends available in $PATH\n export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n (\n     cd \"$DISTSRC\"\n \n     # Extract the source tarball\n-    tar --strip-components=1 -xf \"${SOURCEDIST}\"\n+    tar -xf \"${GIT_ARCHIVE}\"\n+\n+    ./autogen.sh\n \n     # Configure this DISTSRC for $HOST\n     # shellcheck disable=SC2086\n@@ -160,7 +207,7 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n                     ${CONFIGFLAGS} \\\n                     CFLAGS=\"${HOST_CFLAGS}\" \\\n                     CXXFLAGS=\"${HOST_CXXFLAGS}\" \\\n-                    LDFLAGS=\"${HOST_LDFLAGS}\"\n+                    ${HOST_LDFLAGS:+LDFLAGS=\"${HOST_LDFLAGS}\"}\n \n     sed -i.old 's/-lstdc++ //g' config.status libtool src/univalue/config.status src/univalue/libtool\n \n@@ -169,9 +216,21 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n \n     # Perform basic ELF security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n-    # Check that executables only contain allowed gcc, glibc and libstdc++\n-    # version symbols for Linux distro back-compatibility.\n-    make -C src --jobs=1 check-symbols  ${V:+V=1}\n+\n+    case \"$HOST\" in\n+        *linux*|*mingw*)\n+            # Check that executables only contain allowed gcc, glibc and libstdc++\n+            # version symbols for Linux distro back-compatibility.\n+            make -C src --jobs=1 check-symbols  ${V:+V=1}\n+            ;;\n+    esac\n+\n+    # Make the os-specific installers\n+    case \"$HOST\" in\n+        *mingw*)\n+            make deploy ${V:+V=1} BITCOIN_WIN_INSTALLER=\"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n+            ;;\n+    esac\n \n     # Setup the directory where our Bitcoin Core build for HOST will be\n     # installed. This directory will also later serve as the input for our\n@@ -180,9 +239,16 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n     mkdir -p \"${INSTALLPATH}\"\n     # Install built Bitcoin Core to $INSTALLPATH\n     make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n+\n     (\n         cd installed\n \n+        case \"$HOST\" in\n+            *mingw*)\n+                mv --target-directory=\"$DISTNAME\"/lib/ \"$DISTNAME\"/bin/*.dll\n+                ;;\n+        esac\n+\n         # Prune libtool and object archives\n         find . -name \"lib*.la\" -delete\n         find . -name \"lib*.a\" -delete\n@@ -196,19 +262,60 @@ export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n             find \"${DISTNAME}/lib\" -type f -print0\n         } | xargs -0 -n1 -P\"$MAX_JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n \n-        cp \"${DISTSRC}/doc/README.md\" \"${DISTNAME}/\"\n+        case \"$HOST\" in\n+            *mingw*)\n+                cp \"${DISTSRC}/doc/README_windows.txt\" \"${DISTNAME}/readme.txt\"\n+                ;;\n+            *linux*)\n+                cp \"${DISTSRC}/README.md\" \"${DISTNAME}/\"\n+                ;;\n+        esac\n \n         # Finally, deterministically produce {non-,}debug binary tarballs ready\n         # for release\n-        find \"${DISTNAME}\" -not -name \"*.dbg\" -print0 \\\n-            | sort --zero-terminated \\\n-            | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-            | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" \\\n-            || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" && exit 1 )\n-        find \"${DISTNAME}\" -name \"*.dbg\" -print0 \\\n-            | sort --zero-terminated \\\n-            | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-            | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" \\\n-            || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" && exit 1 )\n+        case \"$HOST\" in\n+            *mingw*)\n+                find \"${DISTNAME}\" -not -name \"*.dbg\" -print0 \\\n+                    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\n+                find \"${DISTNAME}\" -not -name \"*.dbg\" \\\n+                    | sort \\\n+                    | zip -X@ \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}.zip\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}.zip\" && exit 1 )\n+                find \"${DISTNAME}\" -name \"*.dbg\" -print0 \\\n+                    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\n+                find \"${DISTNAME}\" -name \"*.dbg\" \\\n+                    | sort \\\n+                    | zip -X@ \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}-debug.zip\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}-debug.zip\" && exit 1 )\n+                ;;\n+            *linux*)\n+                find \"${DISTNAME}\" -not -name \"*.dbg\" -print0 \\\n+                    | sort --zero-terminated \\\n+                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" && exit 1 )\n+                find \"${DISTNAME}\" -name \"*.dbg\" -print0 \\\n+                    | sort --zero-terminated \\\n+                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" \\\n+                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" && exit 1 )\n+                ;;\n+        esac\n     )\n )\n+\n+case \"$HOST\" in\n+    *mingw*)\n+        cp -rf --target-directory=. contrib/windeploy\n+        (\n+            cd ./windeploy\n+            mkdir unsigned\n+            cp --target-directory=unsigned/ \"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n+            find . -print0 \\\n+                | sort --zero-terminated \\\n+                | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+                | gzip -9n > \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" \\\n+                || ( rm -f \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" && exit 1 )\n+        )\n+        ;;\n+esac"
      },
      {
        "sha": "5e011ea1848982e5ce5e2073ff28443b15d4f39c",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 93,
        "deletions": 41,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -10,17 +10,35 @@\n              (gnu packages file)\n              (gnu packages gawk)\n              (gnu packages gcc)\n+             (gnu packages installers)\n              (gnu packages linux)\n+             (gnu packages mingw)\n              (gnu packages perl)\n              (gnu packages pkg-config)\n              (gnu packages python)\n              (gnu packages shells)\n+             (gnu packages version-control)\n+             (guix build-system gnu)\n              (guix build-system trivial)\n              (guix gexp)\n              (guix packages)\n              (guix profiles)\n              (guix utils))\n \n+(define (make-ssp-fixed-gcc xgcc)\n+  \"Given a XGCC package, return a modified package that uses the SSP function\n+from glibc instead of from libssp.so. Our `symbol-check' script will complain if\n+we link against libssp.so, and thus will ensure that this works properly.\n+\n+Taken from:\n+http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n+  (package\n+   (inherit xgcc)\n+   (arguments\n+    (substitute-keyword-arguments (package-arguments xgcc)\n+      ((#:make-flags flags)\n+       `(cons \"gcc_cv_libc_provides_ssp=yes\" ,flags))))))\n+\n (define (make-gcc-rpath-link xgcc)\n   \"Given a XGCC package, return a modified package that replace each instance of\n -rpath in the default system spec that's inserted by Guix with -rpath-link\"\n@@ -102,45 +120,79 @@ desirable for building Bitcoin Core release binaries.\"\n                    base-libc\n                    base-gcc))\n \n+(define (make-gcc-with-pthreads gcc)\n+  (package-with-extra-configure-variable gcc \"--enable-threads\" \"posix\"))\n+\n+(define (make-mingw-pthreads-cross-toolchain target)\n+  \"Create a cross-compilation toolchain package for TARGET\"\n+  (let* ((xbinutils (cross-binutils target))\n+         (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n+         (pthreads-xgcc (make-gcc-with-pthreads\n+                         (cross-gcc target\n+                                    #:xgcc (make-ssp-fixed-gcc gcc-9)\n+                                    #:xbinutils xbinutils\n+                                    #:libc pthreads-xlibc))))\n+    ;; Define a meta-package that propagates the resulting XBINUTILS, XLIBC, and\n+    ;; XGCC\n+    (package\n+      (name (string-append target \"-posix-toolchain\"))\n+      (version (package-version pthreads-xgcc))\n+      (source #f)\n+      (build-system trivial-build-system)\n+      (arguments '(#:builder (begin (mkdir %output) #t)))\n+      (propagated-inputs\n+       `((\"binutils\" ,xbinutils)\n+         (\"libc\" ,pthreads-xlibc)\n+         (\"gcc\" ,pthreads-xgcc)))\n+      (synopsis (string-append \"Complete GCC tool chain for \" target))\n+      (description (string-append \"This package provides a complete GCC tool\n+chain for \" target \" development.\"))\n+      (home-page (package-home-page pthreads-xgcc))\n+      (license (package-license pthreads-xgcc)))))\n+\n+\n (packages->manifest\n- (list ;; The Basics\n-       bash-minimal\n-       which\n-       coreutils\n-       util-linux\n-       ;; File(system) inspection\n-       file\n-       grep\n-       diffutils\n-       findutils\n-       ;; File transformation\n-       patch\n-       gawk\n-       sed\n-       ;; Compression and archiving\n-       tar\n-       bzip2\n-       gzip\n-       xz\n-       zlib\n-       ;; Build tools\n-       gnu-make\n-       libtool\n-       autoconf\n-       automake\n-       pkg-config\n-       ;; Scripting\n-       perl\n-       python-3.7\n-       ;; Native gcc 9 toolchain targeting glibc 2.27\n-       (make-gcc-toolchain gcc-9 glibc-2.27)\n-       ;; Cross gcc 9 toolchains targeting glibc 2.27\n-       (make-bitcoin-cross-toolchain \"i686-linux-gnu\")\n-       (make-bitcoin-cross-toolchain \"x86_64-linux-gnu\")\n-       (make-bitcoin-cross-toolchain \"aarch64-linux-gnu\")\n-       (make-bitcoin-cross-toolchain \"arm-linux-gnueabihf\")\n-       ;; The glibc 2.27 for riscv64 needs gcc 7 to successfully build (see:\n-       ;; https://www.gnu.org/software/gcc/gcc-7/changes.html#riscv). The final\n-       ;; toolchain is still a gcc 9 toolchain targeting glibc 2.27.\n-       (make-bitcoin-cross-toolchain \"riscv64-linux-gnu\"\n-                                     #:base-gcc-for-libc gcc-7)))\n+ (append\n+  (list ;; The Basics\n+        bash-minimal\n+        which\n+        coreutils\n+        util-linux\n+        ;; File(system) inspection\n+        file\n+        grep\n+        diffutils\n+        findutils\n+        ;; File transformation\n+        patch\n+        gawk\n+        sed\n+        ;; Compression and archiving\n+        tar\n+        bzip2\n+        gzip\n+        xz\n+        zlib\n+        ;; Build tools\n+        gnu-make\n+        libtool\n+        autoconf\n+        automake\n+        pkg-config\n+        ;; Scripting\n+        perl\n+        python-3.7\n+        ;; Git\n+        git\n+        ;; Native gcc 9 toolchain targeting glibc 2.27\n+        (make-gcc-toolchain gcc-9 glibc-2.27))\n+  (let ((target (getenv \"HOST\")))\n+    (cond ((string-suffix? \"-mingw32\" target)\n+           ;; Windows\n+           (list zip (make-mingw-pthreads-cross-toolchain \"x86_64-w64-mingw32\") nsis-x86_64))\n+          ((string-contains target \"riscv64-linux-\")\n+           (list (make-bitcoin-cross-toolchain \"riscv64-linux-gnu\"\n+                                               #:base-gcc-for-libc gcc-7)))\n+          ((string-contains target \"-linux-\")\n+           (list (make-bitcoin-cross-toolchain target)))\n+          (else '())))))"
      },
      {
        "sha": "73f54cd4885e0168a900cc3e4663d1790fe1021a",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -2,7 +2,7 @@\n #\n # linearize-data.py: Construct a linear, no-fork version of the chain.\n #\n-# Copyright (c) 2013-2019 The Bitcoin Core developers\n+# Copyright (c) 2013-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "68ebb5def198bb79fe816c1c9f0895fdf34c75f4",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -14,6 +14,10 @@ When complete, it will have produced `Bitcoin-Qt.dmg`.\n \n ## SDK Extraction\n \n+Our current macOS SDK (`macOSX10.14.sdk`) can be extracted from\n+[Xcode_10.2.1.xip](https://download.developer.apple.com/Developer_Tools/Xcode_10.2.1/Xcode_10.2.1.xip).\n+An Apple ID is needed to download this.\n+\n `Xcode.app` is packaged in a `.xip` archive.\n This makes the SDK less-trivial to extract on non-macOS machines.\n One approach (tested on Debian Buster) is outlined below:\n@@ -38,14 +42,14 @@ xar -xf Xcode_10.2.1.xip -C .\n \n ./pbzx/pbzx -n Content | cpio -i\n \n-find Xcode.app -type d -name MacOSX.sdk -execdir sh -c 'tar -c MacOSX.sdk/ | gzip -9n > /MacOSX10.14.sdk.tar.gz' \\;\n+find Xcode.app -type d -name MacOSX.sdk -exec sh -c 'tar --transform=\"s/MacOSX.sdk/MacOSX10.14.sdk/\" -c -C$(dirname {}) MacOSX.sdk/ | gzip -9n > MacOSX10.14.sdk.tar.gz' \\;\n ```\n \n on macOS the process is more straightforward:\n \n ```bash\n xip -x Xcode_10.2.1.xip\n-tar -C Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.14.sdk.tar.gz MacOSX.sdk\n+tar -s \"/MacOSX.sdk/MacOSX10.14.sdk/\" -C Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.14.sdk.tar.gz MacOSX.sdk\n ```\n \n Our previously used macOS SDK (`MacOSX10.11.sdk`) can be extracted from"
      },
      {
        "sha": "3c7bdf4217c5c9ae13aa9dd3cff55cdb9f0e4577",
        "filename": "contrib/macdeploy/extract-osx-sdk.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/macdeploy/extract-osx-sdk.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/macdeploy/extract-osx-sdk.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/extract-osx-sdk.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Copyright (c) 2016-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e8698994f1c9d27784f3544d95abe45267096d32",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2013-2019 The Bitcoin Core developers\n+# Copyright (c) 2013-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -33,7 +33,8 @@\n     r\"0.16.(0|1|2|3|99)|\"\n     r\"0.17.(0|0.1|1|2|99)|\"\n     r\"0.18.(0|1|99)|\"\n-    r\"0.19.99\"\n+    r\"0.19.(0|1|99)|\"\n+    r\"0.20.99\"\n     r\")\")\n \n def parseline(line):"
      },
      {
        "sha": "58f6ad10b5a8aaefe4a357cd21f1401c88a23600",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 473,
        "deletions": 478,
        "changes": 951,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,645 +1,679 @@\n-2.24.141.73:8333\n+2.39.173.126:8333\n+2.57.38.133:8333\n+2.92.39.39:15426\n+2.230.146.163:8333\n+5.2.74.175:8333\n 5.8.18.29:8333\n-5.43.228.99:8333\n-5.145.10.122:8333\n-5.166.35.47:8333\n+5.39.222.39:8333\n+5.103.137.146:9333\n+5.128.87.126:8333\n+5.149.250.76:8333\n+5.182.39.200:8333\n+5.187.55.242:8333\n+5.188.62.24:8333\n+5.188.62.33:8333\n 5.188.187.130:8333\n+5.189.153.179:8333\n+5.198.20.227:8333\n 5.199.133.193:8333\n-5.206.226.216:8333\n-5.206.226.231:8333\n-13.92.254.226:8335\n-13.125.188.128:8333\n-18.228.144.20:8333\n-23.175.0.200:8333\n-23.226.90.172:8333\n-23.233.107.28:8333\n+5.254.82.130:8333\n+13.237.147.15:8333\n+18.27.79.17:8333\n+20.184.15.116:8433\n+23.17.160.159:8333\n+23.175.0.212:8333\n 23.245.24.154:8333\n-24.121.16.35:8333\n-24.150.94.79:8333\n-24.188.200.170:8333\n+24.76.122.108:8333\n+24.96.73.156:8333\n+24.96.125.57:8333\n+24.155.196.27:8333\n+24.203.88.167:8333\n+24.233.245.188:8333\n 24.246.31.205:8333\n-27.102.102.157:8333\n 31.6.98.94:8333\n-31.20.226.115:8333\n-31.21.182.79:8333\n+31.14.201.156:8333\n+31.25.241.224:8335\n 31.43.140.190:8333\n-31.132.135.134:8333\n+31.134.121.223:8333\n 31.173.48.61:8333\n-32.214.183.114:8333\n-34.231.234.150:8333\n-35.209.114.159:8333\n-35.213.18.190:8333\n-37.97.228.224:8333\n-37.116.95.41:8333\n-37.123.132.33:8333\n-37.133.140.169:8334\n-37.134.165.205:8333\n-37.191.253.125:8333\n-39.108.68.237:7781\n-40.78.19.149:8333\n-42.60.217.183:8333\n+34.203.169.172:8333\n+35.178.31.4:8333\n+35.185.172.62:8333\n+35.206.171.89:8333\n+35.208.87.203:8333\n+37.61.219.34:8333\n+37.143.210.19:8333\n+37.143.211.83:8333\n+37.235.128.11:8333\n+37.252.190.88:8333\n+38.102.134.85:8333\n+39.109.0.150:8333\n+42.200.72.205:8333\n 43.229.132.102:8333\n-45.58.126.138:8333\n+45.36.184.6:8333\n+45.58.49.35:8333\n+45.76.18.47:8333\n+45.115.239.108:8333\n+46.23.87.218:8333\n 46.28.132.34:8333\n+46.32.50.98:8333\n+46.36.97.10:8333\n+46.38.237.108:8333\n+46.39.129.82:8333\n+46.160.195.121:8333\n 46.166.162.45:20001\n-46.166.176.137:8333\n-46.227.68.104:8333\n-46.227.68.105:8333\n-47.74.32.190:8885\n-47.89.19.134:30303\n-47.97.117.250:8333\n-50.2.13.166:8333\n-50.5.163.139:8333\n-50.34.65.217:8333\n-50.66.209.54:8333\n-50.67.179.36:8333\n-51.15.166.138:8333\n-51.15.239.164:8333\n+46.188.30.118:8333\n+46.229.238.187:8333\n+46.254.217.169:8333\n+47.52.114.198:8885\n+47.88.84.126:8333\n+47.108.29.152:8333\n+47.108.30.165:8333\n+47.222.103.234:8333\n+49.245.50.224:8333\n+50.53.250.162:8333\n+50.225.198.67:6000\n 51.154.60.34:8333\n-51.154.136.60:8333\n-52.116.159.247:8333\n-54.167.232.37:8333\n-58.22.123.120:8333\n+54.242.17.7:8333\n+58.146.222.198:8333\n 58.158.0.86:8333\n-62.45.159.66:8333\n-62.75.191.166:8333\n-62.75.210.81:8333\n+59.149.205.197:8333\n+60.251.129.61:8336\n+61.155.5.4:8333\n+62.45.4.139:8333\n 62.97.244.242:8333\n-62.107.200.30:8333\n+62.109.18.23:8333\n+62.133.194.156:8333\n 62.138.0.217:8333\n-62.213.214.207:8333\n-64.98.18.21:8333\n-65.79.145.209:8333\n+62.152.58.16:9421\n+63.143.34.98:8333\n+63.211.111.122:8333\n+63.224.249.240:8333\n+64.182.119.36:8333\n+64.229.105.111:8333\n+65.27.104.112:8333\n+65.183.76.73:8333\n 66.151.242.154:8335\n-66.206.13.51:8333\n-66.248.206.86:8333\n-67.40.207.169:8333\n-67.149.252.79:8333\n-67.193.189.42:8333\n+66.206.13.70:8333\n+66.240.237.155:8333\n+66.240.237.172:8333\n+67.205.140.145:8333\n 67.210.228.203:8333\n-67.220.22.78:8333\n+67.221.193.55:8333\n 67.222.131.151:8333\n-68.168.122.2:8333\n+68.110.90.111:8333\n+68.142.33.36:8333\n+68.199.157.183:8333\n 68.202.128.19:8333\n 68.206.21.144:8333\n 69.30.215.42:8333\n+69.55.234.74:8333\n 69.59.18.22:8333\n-69.70.170.178:8333\n-69.132.150.43:8333\n 69.145.122.160:8333\n-70.26.149.104:8333\n-70.51.142.43:8333\n-70.63.170.86:8333\n-71.57.73.173:8333\n-71.237.255.140:8333\n-72.24.235.10:8333\n-72.95.104.94:8333\n-72.231.187.25:8333\n-72.253.239.246:8333\n-74.78.140.178:8333\n-74.83.234.97:8333\n+69.175.49.230:8333\n+70.64.48.41:8333\n+71.33.232.126:8333\n+71.73.18.32:8333\n+71.146.114.111:8333\n+72.53.134.182:8333\n+73.126.97.99:8333\n+74.83.126.150:8333\n 74.84.128.158:9333\n-74.197.236.58:8333\n-74.208.94.172:8333\n+74.98.242.97:8333\n+74.118.137.119:8333\n 74.220.255.190:8333\n-75.101.96.6:8333\n-75.157.77.34:8333\n-76.93.183.209:8333\n-76.174.129.203:8333\n+75.45.51.41:8333\n+75.158.39.231:8333\n+76.11.17.187:8333\n+76.84.79.211:8333\n+76.167.179.75:8333\n 77.53.158.137:8333\n-77.85.204.149:8333\n-77.120.119.27:8433\n-77.134.172.81:8333\n-78.42.12.201:8333\n-78.58.140.102:8333\n-78.108.108.162:8333\n-78.119.180.62:8333\n+77.119.229.106:8333\n+77.120.122.22:8433\n+77.120.122.114:8433\n+77.163.136.136:8333\n+77.220.140.74:8333\n+77.247.178.130:8333\n 78.128.62.52:8333\n-78.130.148.218:8885\n-78.130.161.76:8333\n+78.128.79.22:8333\n+78.141.123.99:8333\n 78.143.214.223:8333\n-79.77.33.128:8333\n+78.159.99.85:8333\n+79.77.33.131:8333\n+79.120.70.47:8333\n+79.142.129.218:8333\n 79.175.125.210:8333\n-79.175.154.228:8333\n-80.79.114.34:8333\n+80.47.156.43:8333\n 80.89.203.172:8001\n-80.100.128.128:8333\n-80.122.43.78:8333\n-80.151.124.127:8333\n-80.167.79.174:8333\n+80.93.213.246:8333\n+80.111.142.213:8333\n+80.147.82.165:8333\n 80.211.191.11:8333\n-80.229.151.187:8333\n+80.211.245.151:8333\n+80.229.28.60:8333\n+80.229.168.1:8333\n+80.253.94.252:8333\n 81.4.102.69:8333\n-81.4.102.91:8333\n-81.6.34.154:8333\n-81.7.16.182:8333\n-81.7.17.202:8333\n-81.25.71.68:8444\n+81.7.13.84:8333\n+81.10.205.21:8333\n+81.117.225.245:8333\n+81.177.157.81:39993\n 81.235.185.150:8333\n-82.23.106.56:8333\n 82.29.58.109:8333\n 82.117.166.77:8333\n-82.145.41.24:8333\n+82.118.20.37:8333\n+82.146.50.143:8333\n 82.146.153.130:8333\n 82.149.97.25:17567\n-82.150.180.30:8333\n-82.177.176.24:8333\n+82.169.130.61:8333\n+82.181.179.230:8333\n+82.181.218.229:8333\n 82.194.153.233:8333\n-82.197.215.125:8333\n+82.195.237.253:8333\n 82.197.218.97:8333\n+82.199.102.10:8333\n 82.199.102.133:8333\n-82.200.205.30:8333\n+82.202.197.224:8333\n+82.217.245.7:8333\n 82.221.111.136:8333\n-83.32.70.197:8333\n-83.58.134.138:8333\n-83.85.131.168:8333\n-83.163.211.75:8333\n+83.89.27.50:8333\n+83.89.250.69:8333\n+83.167.27.4:8333\n 83.208.254.182:8333\n-83.243.191.199:8333\n-84.46.116.71:8333\n-84.52.255.147:8333\n-84.56.105.17:8333\n-84.59.243.22:8333\n-84.197.198.167:8333\n-84.214.74.65:8333\n-84.217.160.164:8333\n-84.227.14.62:8333\n-84.246.200.122:8333\n-85.14.79.26:8333\n+83.217.8.31:44420\n+83.221.211.116:8335\n+83.243.59.41:8333\n+83.251.241.0:8333\n+84.38.3.249:8333\n+84.40.94.170:8333\n+84.192.16.234:8333\n+84.209.9.23:8333\n+84.234.96.115:8333\n+84.248.14.210:8333\n 85.119.83.25:8333\n+85.144.119.222:8333\n+85.145.238.93:8333\n+85.184.138.108:8333\n 85.190.0.5:8333\n-85.192.173.14:8333\n-85.214.80.203:8333\n-85.214.204.63:8333\n-85.229.166.15:8333\n-85.233.38.5:8333\n+85.202.11.119:8333\n+85.204.96.207:8333\n+85.208.69.13:8333\n+85.214.90.161:8333\n+85.240.233.220:8333\n+85.241.106.203:8333\n+86.15.38.61:8333\n 86.76.7.132:8333\n-86.80.62.194:8333\n-86.107.204.50:8333\n-86.139.248.102:8333\n 87.79.68.86:8333\n 87.79.94.221:8333\n-87.99.79.123:8333\n-87.104.127.153:8333\n-87.117.19.226:8333\n+87.118.116.237:8333\n 87.120.8.5:20008\n-87.224.163.66:8333\n+87.222.22.255:8333\n 87.233.181.146:8333\n+87.246.46.132:8333\n 87.249.207.89:8333\n 88.86.116.140:8333\n-88.86.116.141:8333\n-88.86.243.241:8333\n-88.87.93.52:1691\n-88.98.198.130:8333\n-88.99.109.66:8333\n-88.119.128.36:8333\n-88.129.253.46:8333\n+88.86.116.142:8333\n+88.88.13.249:8333\n+88.147.244.250:8333\n+88.150.230.95:8333\n+88.202.202.221:8333\n+88.208.3.195:8333\n 88.212.44.33:8333\n-89.23.35.9:8333\n-89.47.217.222:8333\n+89.25.80.42:8333\n+89.28.117.31:8333\n 89.106.199.38:8333\n 89.142.75.60:8333\n-89.179.126.97:8333\n+89.190.19.162:8333\n 89.212.9.96:8333\n-89.218.198.46:8333\n-89.230.96.42:8333\n-90.125.157.153:8333\n-90.146.97.100:8333\n+89.212.75.6:8333\n+89.248.250.12:8333\n+90.94.83.26:8333\n 90.182.165.18:8333\n-90.227.130.6:8333\n-91.92.128.32:8333\n-91.123.82.15:8333\n-91.135.0.187:8333\n-91.152.121.138:8333\n-91.178.131.108:8333\n 91.185.198.234:8333\n-91.193.237.88:8333\n-91.202.133.75:8885\n+91.193.237.116:8333\n 91.204.99.178:8333\n 91.204.149.5:8333\n+91.210.24.30:8333\n+91.211.88.33:8333\n 91.216.149.28:8333\n-91.219.25.232:8333\n 91.222.128.59:8333\n-92.62.231.253:8333\n-92.63.192.206:8333\n-92.63.197.243:8333\n-92.63.197.245:8333\n-92.119.112.59:8333\n-92.243.244.101:8333\n+92.18.180.225:8333\n+92.53.89.123:8333\n+92.240.69.195:8333\n+92.249.143.44:8333\n 92.255.176.109:8333\n-93.38.119.141:8333\n-93.50.177.66:8333\n-93.79.204.222:10333\n-93.115.28.30:11100\n-93.115.89.76:8333\n+93.57.81.162:8333\n+93.90.193.195:8330\n+93.90.207.46:8333\n+93.115.26.186:20004\n 93.115.240.26:8333\n 93.123.180.164:8333\n-93.126.94.192:8333\n-93.170.128.106:8333\n-93.185.103.70:8333\n-93.189.145.169:8333\n-93.190.142.127:8333\n-93.228.3.234:8333\n-94.19.128.204:8333\n-94.26.49.71:8333\n-94.63.65.127:8333\n-94.72.143.28:8333\n-94.104.217.250:8333\n-94.209.115.52:8333\n-94.237.72.166:8333\n+93.175.204.121:8333\n+93.180.178.213:8333\n+94.19.7.55:8333\n+94.52.112.227:8333\n+94.53.2.181:8333\n+94.72.143.26:8333\n+94.103.120.173:8333\n+94.237.64.138:8333\n+94.237.80.207:8333\n 94.242.255.31:8333\n 95.24.48.84:15426\n+95.42.2.113:8333\n 95.69.249.63:8333\n 95.79.35.133:8333\n 95.87.226.56:8333\n-95.91.80.140:8333\n-95.102.60.168:8333\n-95.154.90.99:8333\n+95.90.3.210:8333\n+95.110.234.93:8333\n 95.156.252.34:8333\n-95.165.175.75:8333\n-95.174.125.24:18333\n-95.183.54.101:12853\n 95.211.189.3:8333\n-95.213.143.13:8333\n-95.213.184.109:778\n+95.217.9.207:8333\n 96.9.80.109:8333\n-96.47.122.171:8333\n-97.81.244.191:8333\n-97.99.13.150:8333\n+96.245.218.247:8333\n 97.104.206.3:8333\n-98.116.105.49:8333\n-99.224.131.4:8333\n-101.92.39.116:8333\n-101.100.163.118:8327\n+98.29.195.204:8333\n+99.231.196.126:8333\n 101.100.174.24:8333\n-101.251.68.146:12337\n-102.132.229.253:8333\n+101.100.174.240:8333\n 103.14.244.190:8333\n-103.16.128.63:8333\n-103.59.144.135:8333\n-103.59.144.238:8333\n+103.37.205.47:8333\n+103.60.109.184:20008\n+103.84.84.250:8335\n+103.85.190.218:20000\n 103.99.168.100:8333\n 103.99.168.130:8333\n-103.100.220.46:8333\n-103.105.56.82:8333\n-103.106.208.207:8333\n-103.106.211.107:8333\n-103.108.228.51:8333\n-104.11.144.71:8333\n-104.128.228.252:8333\n-104.152.204.204:8333\n-104.153.30.236:8333\n-104.155.233.13:8333\n-104.198.126.116:8333\n-104.245.125.251:8333\n-106.12.57.72:8333\n-106.72.36.96:46289\n-106.163.158.127:8333\n-107.150.41.179:8333\n-107.191.116.103:8333\n-108.15.243.207:8333\n+103.214.146.86:8333\n+104.171.242.155:8333\n+104.199.184.15:8333\n+104.244.223.151:8333\n+105.29.76.194:8333\n+107.150.45.18:8333\n+107.180.77.21:8333\n 108.58.252.82:8333\n-108.160.202.208:8333\n-108.213.205.103:8333\n+108.183.77.12:8333\n 109.72.83.127:8333\n 109.99.63.159:8333\n-109.104.8.48:8333\n-109.183.251.77:8333\n-109.198.191.22:8333\n-109.236.90.122:58333\n+109.109.36.19:8333\n+109.110.81.90:8333\n+109.173.112.224:8333\n+109.202.107.125:8333\n+109.205.109.56:8333\n+109.236.84.141:8333\n 109.238.81.82:8333\n 109.248.206.13:8333\n-109.252.133.57:8333\n-111.90.145.57:8333\n-111.90.159.184:50001\n-113.35.179.149:8333\n+111.40.4.103:8333\n+111.90.140.217:8333\n+111.90.158.212:8333\n+112.213.103.98:8333\n 113.52.135.125:8333\n 115.47.141.250:8885\n 115.70.110.4:8333\n-116.58.171.67:8333\n-118.1.96.81:8333\n-118.103.126.140:28333\n-119.29.54.159:8333\n-119.207.78.152:8333\n-121.211.151.99:8333\n+116.87.15.244:8333\n+119.17.151.61:8333\n+119.171.134.87:8333\n+121.18.238.39:8333\n+121.78.223.186:8333\n+121.98.205.102:8333\n 122.112.148.153:8339\n+122.116.42.140:8333\n 124.160.119.93:8333\n-128.197.128.222:8333\n+125.236.215.133:8333\n 129.13.189.212:8333\n 129.97.243.18:8333\n 130.185.77.105:8333\n-130.255.187.86:8333\n-131.114.10.236:8333\n+131.114.10.233:8333\n 131.188.40.34:8333\n 132.249.239.163:8333\n-133.18.1.114:8333\n 134.19.186.195:8333\n-136.36.123.20:8333\n-136.56.42.119:8333\n+134.249.187.97:8333\n+136.144.215.219:8333\n 137.226.34.46:8333\n-138.68.20.137:8333\n+139.9.249.234:8333\n 141.101.8.36:8333\n-145.239.9.3:8333\n-145.249.106.103:8333\n-146.255.227.182:4033\n-147.192.18.175:8333\n-147.253.54.26:8333\n-148.66.58.58:8333\n-148.70.82.85:8333\n-149.90.34.119:8333\n-150.143.231.72:8333\n+143.89.121.207:8333\n+143.176.224.104:8333\n+144.34.161.65:18333\n+147.253.70.208:8333\n+148.66.50.82:8335\n 153.92.127.216:8333\n 153.120.115.15:8333\n-153.124.187.220:8333\n-154.209.1.138:8333\n-154.211.159.200:8333\n-155.4.52.45:8333\n+154.52.98.2:8444\n+155.4.116.169:8333\n 156.19.19.90:8333\n-157.7.211.107:8333\n+156.34.178.138:8333\n+157.13.61.66:8333\n+157.13.61.67:8333\n+158.181.226.33:8333\n+159.100.242.254:8333\n 159.100.248.234:8333\n-159.138.45.220:22235\n+159.253.98.209:8333\n 160.16.0.30:8333\n-162.154.207.147:8333\n-163.158.243.230:8333\n-166.62.82.103:32771\n+160.20.145.62:8333\n+162.62.18.226:8333\n+162.62.26.218:8333\n+162.209.88.174:8333\n+162.244.80.208:8333\n+163.158.202.112:8333\n+163.172.181.191:8333\n 166.62.100.55:8333\n-167.179.136.11:8333\n+167.114.35.12:8333\n+168.62.167.209:8200\n 168.235.74.110:8333\n-169.55.182.185:8333\n-171.33.177.9:8333\n+168.235.90.188:8333\n+170.249.37.243:8333\n 172.99.120.113:8333\n-172.105.112.233:8333\n-172.110.30.81:8333\n 173.21.218.95:8333\n-173.23.103.30:8000\n 173.51.177.2:8333\n-173.89.28.137:8333\n+173.95.72.234:8333\n 173.208.128.10:8333\n-173.249.11.207:18333\n+173.209.44.34:8333\n+173.231.57.194:8333\n+173.255.204.124:8333\n 174.65.135.60:8333\n-176.38.7.43:8333\n-176.92.150.12:8333\n+174.94.155.224:8333\n+174.115.120.186:8333\n+176.53.160.170:8333\n+176.85.188.213:8333\n 176.99.2.207:8333\n-176.126.167.10:8333\n-176.212.185.153:8333\n-176.223.136.171:8333\n-177.52.173.62:8333\n-178.33.136.162:8333\n-178.128.39.110:8333\n-178.143.50.8:8333\n-178.198.60.155:8333\n-178.236.137.63:8333\n+176.121.14.157:8333\n+176.122.157.173:8333\n+176.126.85.34:8333\n+176.198.120.197:8334\n+178.61.141.198:8333\n+178.119.183.34:8333\n+178.234.29.184:8333\n+178.255.42.126:8333\n 179.48.251.41:8333\n-180.150.52.37:8333\n+180.150.73.100:8333\n+181.47.220.242:8333\n+181.170.139.47:8333\n+183.110.220.210:30301\n 183.230.93.139:8333\n-184.80.255.250:8333\n-184.95.58.166:8336\n-184.180.129.98:8333\n-185.19.28.195:8333\n-185.25.48.184:8333\n+184.95.58.164:8663\n+184.164.147.82:41333\n+185.15.92.18:20993\n 185.25.60.199:8333\n-185.50.68.64:8333\n-185.53.158.12:8333\n-185.61.79.213:8333\n+185.52.3.185:8333\n+185.61.138.4:8333\n 185.64.116.15:8333\n+185.83.110.53:8333\n+185.83.214.123:8333\n 185.95.219.53:8333\n-185.130.215.73:8333\n-185.130.215.187:8333\n-185.141.60.127:8333\n-185.147.11.108:8333\n-185.154.159.164:9992\n-185.198.56.77:8333\n+185.96.94.24:8333\n+185.102.71.6:8333\n+185.138.35.183:8333\n+185.140.252.253:8333\n+185.143.145.113:8333\n+185.148.3.227:8333\n+185.157.160.220:8333\n+185.163.44.44:8333\n+185.176.221.32:8333\n+185.186.208.162:8333\n+185.198.58.47:8333\n 185.198.59.183:8333\n-185.216.140.33:8333\n-185.217.241.142:8333\n-185.249.199.106:8333\n+185.215.224.22:8333\n+185.232.28.254:8333\n+185.239.236.116:8333\n+185.251.161.54:8333\n 188.42.40.234:18333\n 188.65.212.138:8333\n-188.65.212.211:8333\n+188.65.212.157:8333\n 188.68.45.143:8333\n-188.120.246.125:8333\n-188.134.5.47:8333\n-188.134.6.84:8333\n-188.167.101.51:8333\n-188.175.77.16:8333\n-188.213.168.152:8333\n-188.230.245.188:8333\n-189.121.185.148:8333\n+188.127.229.105:8333\n+188.131.177.130:8333\n+188.134.8.36:8333\n+188.134.88.5:8333\n+188.138.17.92:8333\n+188.150.157.11:8333\n+188.208.111.62:8333\n+188.231.177.149:8333\n+190.2.145.177:8333\n 190.104.249.44:8333\n-190.184.198.34:8333\n-190.210.234.38:8333\n-190.218.190.85:8333\n+191.209.21.188:8333\n 192.3.11.20:8333\n 192.3.11.24:8333\n+192.34.56.59:8333\n+192.65.170.15:8333\n+192.65.170.50:8333\n+192.146.137.18:8333\n 192.166.47.32:8333\n-192.167.149.143:8333\n 192.169.94.29:8333\n-192.169.94.70:8333\n-192.198.90.98:8333\n-192.254.89.134:8333\n-192.254.89.220:8333\n-193.41.78.125:8333\n-193.46.83.8:8333\n+192.227.80.83:8333\n+192.254.65.126:8333\n+193.10.203.23:8334\n+193.29.57.4:8333\n+193.58.196.212:8333\n 193.59.41.11:8333\n-193.77.135.181:8333\n 193.84.116.22:8333\n+193.108.131.43:8333\n+193.148.71.10:8333\n+193.169.244.190:8333\n+193.194.163.35:8333\n 193.194.163.53:8333\n-194.71.225.55:8333\n+194.5.159.197:8333\n+194.14.246.205:8333\n+194.135.92.96:8333\n 194.135.135.69:8333\n 194.158.92.150:8333\n-195.13.220.165:8333\n+194.187.251.163:31239\n+195.56.63.5:8333\n 195.56.63.10:8333\n+195.67.139.54:8333\n+195.95.225.17:8333\n 195.135.194.8:8333\n-195.168.36.20:8333\n-195.201.33.0:8333\n-195.202.169.149:8333\n-195.242.93.189:8333\n+195.154.113.90:8333\n+195.206.20.114:8333\n+195.206.105.42:8333\n+195.209.249.164:8333\n+195.224.116.20:8333\n 198.1.231.6:8333\n-198.44.231.160:6333\n-198.54.113.59:8333\n 198.251.83.19:8333\n-199.68.199.4:8333\n-199.247.1.117:8333\n-199.247.10.26:8333\n+199.48.83.58:8333\n+199.96.50.211:8333\n+199.188.204.25:8333\n+199.192.20.201:8333\n 200.76.194.7:8333\n-201.241.2.85:8333\n-202.185.45.110:8333\n-203.86.207.53:8333\n+200.87.116.213:8333\n+202.28.194.82:8333\n+202.55.87.45:8333\n 203.130.48.117:8885\n+203.132.95.10:8333\n 204.14.245.180:8333\n-204.111.241.195:8333\n 204.152.203.98:8333\n-205.185.122.150:8333\n-206.124.149.66:8333\n-207.182.154.178:8333\n-208.81.1.105:8333\n-209.133.201.114:8333\n-209.173.25.140:8333\n-209.180.174.200:8333\n-209.190.36.13:8333\n-210.54.38.227:8333\n-210.54.39.99:8333\n-210.203.222.52:8223\n-211.104.154.140:8333\n-212.24.103.20:8333\n-212.33.204.190:8333\n-212.51.156.139:8333\n-212.109.198.126:8333\n-212.237.96.98:8333\n+205.209.162.98:8333\n+206.221.178.149:8333\n+208.110.99.105:8333\n+209.133.220.74:8333\n+209.151.237.71:8333\n+211.149.170.31:8333\n+212.51.132.226:8333\n 212.241.70.213:8333\n-213.37.92.163:8333\n-213.89.98.199:8333\n-213.89.150.13:8333\n-213.174.156.72:8333\n-213.209.123.165:8333\n+213.21.15.22:8333\n+213.136.83.8:8333\n 213.227.152.108:8333\n-216.38.129.164:8333\n-216.86.154.215:8333\n-216.93.139.63:8333\n-216.186.250.53:8333\n+213.254.23.116:8333\n+216.108.236.180:8333\n 216.194.165.98:8333\n-217.22.132.220:8333\n-217.43.72.105:8333\n+216.236.164.82:8333\n+217.16.185.165:8333\n+217.21.24.146:8333\n+217.26.32.10:8333\n 217.64.47.138:8333\n-217.69.145.234:8333\n-217.158.9.102:8333\n-220.130.142.178:33389\n+217.64.133.220:8333\n+217.92.55.246:8333\n+217.172.244.9:8333\n+218.75.140.45:8333\n+219.75.122.47:8333\n 220.233.138.130:8333\n-[2001:1ba8:401:32:b842:3891:5915:c68f]:8333\n+221.130.29.230:18421\n+222.122.49.40:8333\n+222.186.169.1:8333\n+222.222.43.29:8333\n+223.16.30.175:8333\n [2001:1bc0:cc::a001]:8333\n+[2001:1c02:2f18:d00:b62e:99ff:fe49:d492]:8333\n [2001:250:200:7:d6a9:fcf4:e78d:2d82]:8333\n-[2001:4128:6135:e001:5054:ff:fe37:e9eb]:8333\n-[2001:41d0:fc63:9c00:1acc:d22f:3f5c:ef7f]:8333\n+[2001:41c9:1:424::231]:8333\n+[2001:41d0:1004:19b4::]:8333\n [2001:44b8:4195:1801:5c73:5d67:d2a6:9910]:8333\n+[2001:470:88ff:2e::1]:8333\n+[2001:470:a:c13::2]:8333\n [2001:4800:7821:101:be76:4eff:fe04:9f50]:8333\n-[2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n-[2001:4801:7821:77:be76:4eff:fe10:c7f6]:8333\n+[2001:4801:7819:74:b745:b9d5:ff10:aaec]:8333\n [2001:48d0:1:2163:0:ff:febe:5a80]:8333\n-[2001:48f8:1003::3ba]:8333\n [2001:4ba0:fffa:5d::93]:8333\n-[2001:4c48:2:a328:d8a7:e0ff:fe96:403a]:8333\n-[2001:56b:dda9:4b00:49f9:121b:aa9e:de30]:8333\n [2001:638:a000:4140::ffff:191]:8333\n [2001:678:7dc:8::2]:8333\n [2001:678:ec:1:250:56ff:fea7:47e9]:8333\n+[2001:67c:10ec:2a49:8000::1082]:8333\n [2001:67c:16dc:1201:5054:ff:fe17:4dac]:8333\n [2001:67c:21ec:1000::a]:8333\n-[2001:67c:22fc:1337::5]:8333\n-[2001:67c:2824:8001:225:90ff:fe67:9830]:7777\n-[2001:67c:2b5c:101:216:3eff:fea3:5234]:8333\n-[2001:67c:2db8:13::83]:8333\n+[2001:67c:26b4:12:7ae3:b5ff:fe04:6f9c]:8333\n+[2001:67c:2db8:6::45]:8333\n+[2001:700:300:1513:29c7:2430:190e:ab59]:8333\n [2001:718:801:311:5054:ff:fe19:c483]:8333\n-[2001:8003:d136:1001::11:ffd1]:8333\n-[2001:8d8:96a:9300::ad:ae2c]:8333\n-[2001:8f1:1602:700:1b28:a3e3:bb08:a708]:9444\n-[2001:8f8:1327:1587:3f10:5ab:804d:4039]:8333\n+[2001:818:e245:f800:4df:2bdf:ecf5:eb60]:8333\n+[2001:8f1:1404:3700:8e49:715a:2e09:b634]:9444\n [2001:ba8:1f1:f069::2]:8333\n+[2001:bb8:4008:20:648c:5eff:fe74:ce4]:8333\n+[2001:da8:d800:821:a7d5:f5a7:530d:b71e]:8333\n [2001:e42:103:100::30]:8333\n-[2400:2650:480:bc00:bcaf:7c49:8c9e:7cdf]:8333\n+[2001:e68:7400:2:6854:419e:221c:82f3]:8333\n+[2002:b610:1ca3::b610:1ca3]:8333\n+[2002:b6ff:3dca::b6ff:3dca]:28364\n+[2400:2651:42e0:3300:40b4:576d:d14c:65d4]:8333\n [2400:4052:e20:4f00:69fe:bb33:7b1c:a1ca]:8333\n-[2400:8902::f03c:91ff:fea5:ebb7]:8333\n-[2401:1800:7800:102:be76:4eff:fe1c:a7d]:8333\n [2401:2500:203:184::15]:8333\n [2401:3900:2:1::2]:8333\n-[2402:7340:1:56::d0d]:8333\n-[2405:9800:ba01:251a:c53c:b80a:320d:5b41]:8333\n+[2401:a400:3200:5600:14ee:f361:4bdc:1f7c]:8333\n+[2401:d002:4402:0:8f28:591a:6ea0:c683]:8333\n+[2402:cb40:1000:504::dead]:8333\n [2405:aa00:2::40]:8333\n [2409:10:ca20:1df0:224:e8ff:fe1f:60d9]:8333\n-[2409:13:1200:d200:16da:e9ff:fee9:b19a]:8333\n-[240d:1a:3c0:ab00:e9f1:87c:93ac:7687]:8333\n-[2602:ffc5:1f::1f:9211]:8333\n-[2604:2000:ffc0:0:5862:b6f8:fe72:762f]:8333\n+[2409:8a15:4a1a:2830:7285:c2ff:fe70:60a4]:8333\n+[2409:8a1e:6938:d2c0:2e0:70ff:fe86:cb59]:8333\n+[2409:8a28:421:2580:2e0:70ff:fe8b:13e]:8333\n+[2409:8a28:421:2770:2e0:70ff:fe87:fecb]:8333\n+[240d:1a:759:6000:ddab:3141:4da0:8878]:8333\n+[2600:3c01::f03c:91ff:fecd:1b95]:8333\n+[2600:6c40:7980:27:20a:f7ff:fe69:f4d5]:8333\n+[2602:ffc5::ffc5:b844]:8333\n+[2604:2d80:c808:857b:8d6:9e1c:7131:4bea]:8333\n [2604:4300:a:2e:21b:21ff:fe11:392]:8333\n+[2604:5500:c134:4000::3fc]:32797\n [2604:5500:c2a3:7b00:cc6:373b:44a8:caa4]:8333\n-[2605:9880:201:17::4b7c]:8333\n+[2604:6000:6e85:4a01:a82d:f9ff:fef5:28b9]:8333\n+[2604:7780:303:80::80]:8333\n+[2605:4d00::50]:8333\n+[2605:9880:0:777:225:90ff:fefc:8958]:8333\n [2605:ae00:203::203]:8333\n [2605:c000:2a0a:1::102]:8333\n+[2605:e000:1127:8fc:ec63:a191:32c2:633c]:8333\n+[2605:e200:d202:300:20c:29ff:fef1:85ec]:8333\n [2605:f700:100:400::131:5b54]:8333\n [2606:c680:0:b:3830:34ff:fe66:6663]:8333\n-[2607:9280:b:73b:250:56ff:fe21:bf32]:8333\n+[2607:4480:2:1:38:102:69:70]:8333\n+[2607:9280:b:73b:250:56ff:fe21:9c2f]:8333\n [2607:f128:40:1703::2]:8333\n-[2607:f3a0:1000:9:f82a:fdff:fea1:3315]:8333\n-[2607:f470:8:1048:ae1f:6bff:fe68:5e42]:8333\n-[2607:fd70:4a:babe:b00b:1e5:1bd5:f78]:8333\n-[2607:ff50:0:71::13]:8333\n+[2607:f188:0:4:eef4:bbff:fecc:6668]:8333\n+[2607:f2c0:e1e2:11:1044:9b7a:b81e:1d74]:8333\n+[2607:f470:8:1048:ae1f:6bff:fe70:7240]:8333\n+[2620:11c:5001:1118:d267:e5ff:fee9:e673]:8333\n [2620:6e:a000:1:42:42:42:42]:8333\n+[2804:14d:baa7:9674:21e:67ff:fea8:d799]:8333\n [2804:14d:baa7:9674:3615:9eff:fe23:d610]:8333\n-[2a00:1328:e101:c00::163]:8333\n+[2804:39e8:ff85:a600:7285:c2ff:feae:9925]:8333\n+[2804:d41:aa01:1600:5a2d:3b27:3b83:2b45]:8333\n+[2a00:12d8:7001:1:46e7:6915:75be:92f9]:8333\n [2a00:1398:4:2a03:215:5dff:fed6:1033]:8333\n-[2a00:13a0:3015:1:85:14:79:26]:8333\n [2a00:1630:14::101]:8333\n [2a00:1768:2001:27::ef6a]:8333\n [2a00:1828:a004:2::666]:8333\n-[2a00:1838:36:2c::3e95]:8333\n-[2a00:1b60:2:4:40d0:eff:fe88:ebd4]:8333\n+[2a00:1838:36:142::ec73]:8333\n+[2a00:1838:36:7d::d3c6]:8333\n+[2a00:1f40:2::1126]:8333\n+[2a00:23a8:41d0:5800:20c:29ff:fe0d:6a75]:8333\n+[2a00:23c5:fd01:9f00:6317:7c02:788f:88ea]:8333\n+[2a00:6020:13c2:3800:be6a:a1c8:c9e7:65ec]:8333\n+[2a00:63c2:8:88::2]:8333\n+[2a00:7143:3::227]:8333\n [2a00:7b80:452:2000::138]:8333\n-[2a00:7b80:454:2000::101]:8333\n [2a00:8a60:e012:a00::21]:8333\n-[2a01:4240:5f52:9246::1]:8333\n+[2a00:ca8:a1f:3025:f949:e442:c940:13e8]:8333\n+[2a00:d70:0:15:f816:3eff:fe73:d819]:8333\n+[2a00:d880:5:331::3978]:8333\n+[2a01:238:420f:9200:fa5a:1a4b:1e6a:fadf]:8333\n [2a01:430:17:1::ffff:1153]:8333\n [2a01:488:66:1000:53a9:1573:0:1]:8333\n-[2a01:6f0:ffff:120::8dcb]:8333\n+[2a01:4f8:120:80cc::2]:8433\n+[2a01:5f0:beef:5:0:3:0:1]:52101\n+[2a01:79c:cebc:a630:9dd8:ef55:8374:92a1]:8333\n [2a01:7a0:2:137a::11]:8333\n-[2a01:7a7:2:131b:20c:29ff:fe9a:3922]:8333\n-[2a01:7c8:d002:318:5054:ff:febe:cbb1]:8333\n+[2a01:7a0:2:137c::3]:8333\n+[2a01:7c8:aab6:db:5054:ff:feca:cfc8]:8333\n+[2a01:8b81:6403:4700::1]:8333\n+[2a01:cb00:7cd:b000:fa1f:bd1:fe0:62a6]:8333\n [2a01:cb00:d3d:7700:227:eff:fe28:c565]:8333\n-[2a01:d0:ffff:7368::2]:8333\n-[2a01:e0a:182:1300:591e:529:b376:c654]:8333\n+[2a01:d0:bef2::12]:8333\n+[2a01:d0:f34f:1:1f67:e250:6aeb:b9c4]:8333\n [2a01:e34:ee6b:2ab0:88c2:1c12:f4eb:c26c]:8333\n-[2a02:1205:34c3:d890:c0e:741e:c45f:3605]:8333\n-[2a02:2c8:1:400:34::184]:8333\n-[2a02:2f0d:202:f900:5e9a:d8ff:fe57:8bc5]:8333\n+[2a01:e35:2fba:2e90:1:0:b:1]:8333\n+[2a02:1205:505d:eb50:beae:c5ff:fe42:a973]:8333\n+[2a02:120b:2c3f:a90:10dd:31ff:fe42:5079]:8333\n+[2a02:130:300:1520:1::2]:8333\n+[2a02:13b8:4000:1000:216:e6ff:fe92:8619]:8333\n+[2a02:180:1:1::5b8f:538c]:8333\n+[2a02:2168:8062:db00:96de:80ff:fea3:fd00]:8333\n+[2a02:2770:5:0:21a:4aff:fe44:8370]:8333\n+[2a02:2788:864:fb3:5b8a:c8f7:9fff:ae2d]:8333\n+[2a02:2f0d:607:bc00:5e9a:d8ff:fe57:8bc5]:8333\n+[2a02:348:9a:83b1::1]:8333\n [2a02:390:9000:0:218:7dff:fe10:be33]:8333\n-[2a02:4780:9:0:2:f928:f280:9a6f]:8333\n+[2a02:4780:8:6:2:354e:1256:7a04]:8333\n [2a02:578:4f07:24:76ad:cef7:93c1:b9b9]:8333\n-[2a02:7aa0:1619::590:eba2]:8333\n+[2a02:6d40:30f6:e901:89b8:bb58:25a:6050]:8333\n+[2a02:750:7:c11:5054:ff:fe43:eb81]:8333\n [2a02:7aa0:1619::adc:8de0]:8333\n+[2a02:7b40:4f62:19ae::1]:8333\n [2a02:8108:95bf:eae3:211:32ff:fe8e:b5b8]:8333\n-[2a02:c207:2014:9913::1]:18333\n [2a02:e00:fff0:23f::1]:8333\n-[2a02:f680:1:1100::5453]:8333\n+[2a02:e00:fff0:23f::a]:8333\n [2a03:1b20:1:f410:40::3e]:16463\n-[2a03:2260:11e:301::8]:8333\n-[2a03:2260:11e:302::3]:8333\n-[2a03:4000:6:416c::43]:8333\n+[2a03:6000:870:0:46:23:87:218]:8333\n+[2a03:9da0:f6:1::2]:8333\n+[2a03:e2c0:1ce::2]:8333\n+[2a04:2180:0:2::f2]:8333\n [2a04:2180:1:c:f000::15]:8333\n-[2a04:3543:1000:2310:8492:b8ff:fe91:22e8]:8333\n-[2a05:6d40:b94e:d100:225:90ff:fe0d:cfc2]:8333\n-[2a05:fc87:4::6]:8333\n+[2a04:52c0:101:97f::dcbe]:8333\n+[2a04:ee41:83:50df:d908:f71d:2a86:b337]:8333\n+[2a05:1700::100]:8333\n+[2a05:fc87:4::2]:8333\n+[2a05:fc87:4::7]:8333\n+[2a07:5741:0:69d::1]:8333\n+[2a07:5741:0:7cd::1]:8333\n [2a07:7200:ffff:c53f::e1:17]:8333\n-[2a0b:2ac0:1:0:d6ae:52ff:fe7b:741c]:8333\n-[2a0b:2ac0:1:0:d6ae:52ff:fe7b:88eb]:8333\n-25lhwv6jaqbtek5x.onion:8333\n+[2a07:b400:1:34c::2:1002]:8333\n+[2a0b:ae40:3:4a0a::15]:8333\n+[2a0e:b780::55d1:f05b]:8333\n+[2c0f:fce8:0:400:b7c::1]:8333\n 2empatdfea6vwete.onion:8333\n-2hpjn6ndxjafgoej.onion:8333\n 34aqcwnnuiqh234f.onion:8333\n-3frtobxxkgkhwjx7.onion:8333\n 3gxqibajrtysyp5o.onion:8333\n-3lf37sdzhpxh6fpv.onion:8333\n-3q5iydjrrutqjb2y.onion:8333\n-3qzrkpxduf44jqg5.onion:8333\n 3sami4tg4yhctjyc.onion:8333\n 3w77hrilg6q64opl.onion:8333\n 46xh2sbjsjiyl4fu.onion:8333\n 4ee44qsamrjpywju.onion:8333\n-4gwvtoppsaffaxg7.onion:8333\n 4haplrtkprjqhm2j.onion:8333\n 4u3y3zf2emynt6ui.onion:8333\n-4wx34hn3kybujklg.onion:8333\n-56czufbruq46sb2c.onion:8333\n 57dytizbai7o4kq7.onion:8333\n 5guaeulc7xm4g2mm.onion:8334\n 5mtvd4dk62ccdk4v.onion:8333\n-5nsfm4nqqzzprjrp.onion:8333\n 5pmjz6mmikyabaw5.onion:8333\n 6eurcxoqsa4qpiqq.onion:8333\n 6ivvkeseojsmpby4.onion:8333\n-6luc7owlbbaj52lr.onion:8333\n 6tlha6njtcuwpfa3.onion:8333\n 6ymgbvnn6d5nfmv4.onion:8333\n-6z5cyaswulhxcvhj.onion:8333\n 72y2n5rary4mywkz.onion:8333\n-7a354g25lnvry4ic.onion:8333\n 7b75ub5dapphemit.onion:8333\n 7xaqpr7exrtlnjbb.onion:8333\n a64haiqsl76l25gv.onion:8333\n@@ -650,103 +684,64 @@ akinbo7tlegsnsxn.onion:8333\n anem5aq4cr2zl7tz.onion:8333\n at3w5qisczgguije.onion:8333\n auo4zjsp44vydv6c.onion:8333\n-b6vrxhrrle7jxiua.onion:8333\n-bitcoinranliixsu.onion:8333\n-blcktrgve5vetjsk.onion:8333\n bowg4prf63givea4.onion:8333\n-cj2nexmwocyy5unq.onion:8333\n cjuek22p4vv4hzbu.onion:8333\n cklaa2xdawrb75fg.onion:8333\n coxiru76nnfw3vdj.onion:8333\n-cqwcyvvk5xnqv3yw.onion:8333\n cwq2fuc54mlp3ojc.onion:8333\n dganr7dffsacayml.onion:8333\n djbsspmvlc6ijiis.onion:8333\n dmfwov5ycnpvulij.onion:8333\n dp2ekfbxubpdfrt4.onion:8333\n dw2ufbybrgtzssts.onion:4333\n-dxv5u4xaeydpbrrp.onion:8333\n edkmfeaapvavhtku.onion:8333\n ejdoey3uay3cz7bs.onion:8333\n eladlvwflaahxomr.onion:8333\n ffhx6ttq7ejbodua.onion:8333\n-fqdzxl4kjboae35b.onion:8333\n hbnnzteon75un65y.onion:8333\n hcyxhownxdv7yybw.onion:8333\n hdfcxll2tqs2l4jc.onion:8333\n hdld2bxyvzy45ds4.onion:8333\n+hlnnhn2xj2qffqjs.onion:8333\n hnqwmqikfmnkpdja.onion:8333\n hvmjovdasoin43wn.onion:8333\n hwzcbnenp6dsp6ow.onion:8333\n-hz26wamjlbd7arrl.onion:8333\n i5ellwzndjuke242.onion:8333\n iapvpwzs4gpbl6fk.onion:8885\n if7fsvgyqwowxkcn.onion:8333\n ilukzjazxlxrbuwy.onion:8333\n-ju5duo3r6p6diznc.onion:8333\n-k3i3suxlg4w27uas.onion:8333\n-k7omfveynnjg674e.onion:8333\n-ko37ti7twplktxqu.onion:8333\n kswfyurnglm65u7b.onion:8333\n ldu2hbiorkvdymja.onion:8333\n-lftugyhf6vnouikf.onion:8333\n-ln3csnn6774nzgyn.onion:8333\n-lvh7k53s62frc6ro.onion:8333\n lvvgedppmpigudhz.onion:8333\n-mbjkotfqcn5gnsrm.onion:8333\n mk3bnep5ubou7i44.onion:8333\n muhp42ytbwi6qf62.onion:8333\n n5khsbd6whw7ooip.onion:8333\n-na6otugfitr7pnlv.onion:8333\n-nclrhbeertvin7cu.onion:8333\n ndmbrjcvu2s6jcom.onion:8333\n nf4iypnyjwfpcjm7.onion:8333\n nkdw6ywzt3dqwxuf.onion:8333\n-nqmxpgrpuysullkq.onion:8333\n-ntml2aeumyglyjlk.onion:8333\n o4sl5na6jeqgi3l6.onion:8333\n opencubebqqx3buj.onion:8333\n-oudab5q7ruclifdv.onion:8333\n ovbkvgdllk3xxeah.onion:8333\n pg2jeh62fkq3byps.onion:8333\n-pgufebhe6mt7knqz.onion:8333\n pkcgxf23ws3lwqvq.onion:8333\n-po3j2hfkmf7sh36o.onion:8333\n qdtau72ifwauot6b.onion:8333\n qidnrqy2ozz3nzqq.onion:8333\n-qpebweackyztorrm.onion:8333\n-qsl3x63225alx4bt.onion:8333\n readybit5veyche6.onion:8333\n-rjw6vpw5ffoncxuh.onion:8333\n s2epxac7ovy36ruj.onion:8333\n-srkgyv5edn2pa7il.onion:8333\n+satofxsc3xjadxsm.onion:8333\n sv5oitfnsmfoc3wu.onion:8333\n-tdlpmqnpfqehqj7c.onion:8333\n-ttx7ddwltrixannm.onion:8333\n uftbw4zi5wlzcwho.onion:8333\n-uoailgcebjuws47e.onion:8333\n-uqvucqhplwqbjrsb.onion:8333\n uz3pvdhie3372vxw.onion:8333\n v2x7gpj3shxfnl25.onion:8333\n-vdhrg3k2akmf6kek.onion:8333\n vov46htt6gyixdmb.onion:8333\n-vrfs5jwtfzj2ss6n.onion:8333\n-vwpcfguewxhky4iy.onion:8333\n wg3b3qxcwcrraq2o.onion:8333\n wgeecjm4w4ko66f7.onion:8333\n wmxc6ask4a5xyaxh.onion:8333\n wqrafn4zal3bbbhr.onion:8333\n-xagzqmjgwgdvl2di.onion:8333\n xhi5x5qc44elydk4.onion:8333\n xk6bjlmgvwojvozj.onion:8333\n xmgr7fsmp7bgburk.onion:8333\n xocvz3dzyu2kzu6f.onion:8333\n xv7pt6etwxiygss6.onion:8444\n-xz563swdjd7yqymb.onion:8333\n yumx7asj7feoozic.onion:8333\n-yzmyolvp55rydnsm.onion:8333\n-z3forfpyjyxxgfr5.onion:8333\n-z5x2wes6mhbml2t5.onion:8333\n zmaddsqelw2oywfb.onion:8444\n-zqlojwtc4lsurgie.onion:8333\n-zvwc7ad4m2dvc74x.onion:8333"
      },
      {
        "sha": "f232bb62c2c391e6cd056002951703c24b2dbac6",
        "filename": "contrib/valgrind.supp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/valgrind.supp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/valgrind.supp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/valgrind.supp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -184,16 +184,3 @@\n    ...\n    fun:_ZN5BCLog6Logger12StartLoggingEv\n }\n-{\n-   Suppress BCLog::Logger::StartLogging() still reachable memory warning\n-   Memcheck:Leak\n-   match-leak-kinds: reachable\n-   fun:malloc\n-   ...\n-   fun:_ZN5BCLog6Logger12StartLoggingEv\n-}\n-{\n-   Suppress rest_blockhash_by_height Conditional jump or move depends on uninitialised value(s)\n-   Memcheck:Cond\n-   fun:_ZL24rest_blockhash_by_heightP11HTTPRequestRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\n-}"
      },
      {
        "sha": "78873dc0c38ebe6d800ab319c0cc21b9eeb641cd",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2014-2019 The Bitcoin Core developers\n+# Copyright (c) 2014-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4023a5b638f89f9838990db0700ed9ec5a629e9b",
        "filename": "contrib/windeploy/win-codesign.cert",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/windeploy/win-codesign.cert",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/contrib/windeploy/win-codesign.cert",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/windeploy/win-codesign.cert?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,34 +1,34 @@\n -----BEGIN CERTIFICATE-----\n-MIIFcTCCBFmgAwIBAgIRALWcUnSOxv9FQW3xdaMDO6swDQYJKoZIhvcNAQELBQAw\n+MIIFdDCCBFygAwIBAgIRAL98pqZb/N9LuNaNxKsHNGQwDQYJKoZIhvcNAQELBQAw\n fDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n A1UEBxMHU2FsZm9yZDEYMBYGA1UEChMPU2VjdGlnbyBMaW1pdGVkMSQwIgYDVQQD\n-ExtTZWN0aWdvIFJTQSBDb2RlIFNpZ25pbmcgQ0EwHhcNMTkwMzI3MDAwMDAwWhcN\n-MjAwMzI2MjM1OTU5WjCBtDELMAkGA1UEBhMCQ0gxDTALBgNVBBEMBDgwMDUxCzAJ\n-BgNVBAgMAlpIMRAwDgYDVQQHDAdaw7xyaWNoMRcwFQYDVQQJDA5NYXR0ZW5nYXNz\n-ZSAyNzEuMCwGA1UECgwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3NvY2lh\n-dGlvbjEuMCwGA1UEAwwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3NvY2lh\n-dGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK04VDwiY1wxcW3E\n-WTTGmnbciCwETwC96DG4qcoH2PPNsVy3dfwGh0C02Qj2vL64IfwIGUFSgREvyjZk\n-CNhEuJO2e0nO0rKNNH5v/JO+P7/VYPZkF5a3uUz9ulmihULXioieHB/q0l6BmiJL\n-+cYaMVfidL9Y+IJwgiTqjnpRhv1Ik083SPsu6GcfQT9MJfY/+xse2EP0l4GfdFE6\n-DRcWjiC8UHpfpGYcImzSFZZpbFbqoAyhueCl28QU4f8QAbS6BqNfaAK9MMACWDcK\n-eTz3C5JK6CiUxOnGIxilXhljuybFUjR4jGl5eTRpuPWk95NTTYS36q+bx/1nYelx\n-0n4nnDMCAwEAAaOCAbMwggGvMB8GA1UdIwQYMBaAFA7hOqhTOjHVir7Bu61nGgOF\n-rTQOMB0GA1UdDgQWBBRbN7ECrPCdVvh58enwy3Dix46h2jAOBgNVHQ8BAf8EBAMC\n-B4AwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAzARBglghkgBhvhC\n-AQEEBAMCBBAwQAYDVR0gBDkwNzA1BgwrBgEEAbIxAQIBAwIwJTAjBggrBgEFBQcC\n-ARYXaHR0cHM6Ly9zZWN0aWdvLmNvbS9DUFMwQwYDVR0fBDwwOjA4oDagNIYyaHR0\n-cDovL2NybC5zZWN0aWdvLmNvbS9TZWN0aWdvUlNBQ29kZVNpZ25pbmdDQS5jcmww\n-cwYIKwYBBQUHAQEEZzBlMD4GCCsGAQUFBzAChjJodHRwOi8vY3J0LnNlY3RpZ28u\n-Y29tL1NlY3RpZ29SU0FDb2RlU2lnbmluZ0NBLmNydDAjBggrBgEFBQcwAYYXaHR0\n-cDovL29jc3Auc2VjdGlnby5jb20wKwYDVR0RBCQwIoEgam9uYXNAYml0Y29pbmNv\n-cmVjb2Rlc2lnbmluZy5vcmcwDQYJKoZIhvcNAQELBQADggEBAF/AIXcFBWCC2Red\n-SHN4Cvko5mdSkDNgzjVFc+OwAJ5RdOgbERde4PnHm3Qmrnx+uMetVnmrC8Fv1Iwb\n-kkR0bdbWBj6lF6zMsClIN6WJEfY+qfj1qi7wyucu+3OElYRC9bm5Lf0mEHQr8lJ1\n-lGvAjPh+/hmxoVNbHFMZ1Ea+BrbjVwiSznt0gzdMh0CispBZKLWCIwRwi+hFjQrw\n-Z7RLH8HeCJ5Ojl/OTDQqh6AylQ7l9w9KHsUt4Jqy/AnCCyAj2/6xjdwnuo3tCZwb\n-g/9CydiAacD/83odphEeC2iBa+0wsj9bWmyYKY7S9n0u+wm3wBfZbSVMDDPk/la1\n-3qCUDLk=\n+ExtTZWN0aWdvIFJTQSBDb2RlIFNpZ25pbmcgQ0EwHhcNMjAwMzI0MDAwMDAwWhcN\n+MjEwMzI0MjM1OTU5WjCBtzELMAkGA1UEBhMCQ0gxDTALBgNVBBEMBDgwMDUxDjAM\n+BgNVBAgMBVN0YXRlMRAwDgYDVQQHDAdaw7xyaWNoMRcwFQYDVQQJDA5NYXR0ZW5n\n+YXNzZSAyNzEuMCwGA1UECgwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3Nv\n+Y2lhdGlvbjEuMCwGA1UEAwwlQml0Y29pbiBDb3JlIENvZGUgU2lnbmluZyBBc3Nv\n+Y2lhdGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMtxC8N4r/jE\n+OGOdFy/0UtiUvEczPZf9WYZz/7paAkc75XopHIE5/ssmoEX27gG9K00tf3Q62QAx\n+inZUPWkNTh8X0l+6uSGiIBFIV7dDgztIxnPcxaqw0k7Q2TEqKJvb5qm16zX6WfXJ\n+R2r6O5utUdQ3AarHnQq9fwdM1j5+ywS5u52te74ENgDMTMKUuB2J3KH1ASg5PAtO\n+CjPqPL+ZXJ7eT3M0Z+Lbu5ISZSqZB48BcCwOo/fOO0dAiLT9FE1iVtaCpBKHqGmd\n+glRjPzZdgDv8g28etRmk8wQ5pQmfL2gBjt/LtIgMPTdHHETKLxJO5H3y0CNx1vzL\n+ql7xNMxELxkCAwEAAaOCAbMwggGvMB8GA1UdIwQYMBaAFA7hOqhTOjHVir7Bu61n\n+GgOFrTQOMB0GA1UdDgQWBBSHBbl82FUJiUkXyyYJog1awYRsxjAOBgNVHQ8BAf8E\n+BAMCB4AwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDAzARBglghkgB\n+hvhCAQEEBAMCBBAwQAYDVR0gBDkwNzA1BgwrBgEEAbIxAQIBAwIwJTAjBggrBgEF\n+BQcCARYXaHR0cHM6Ly9zZWN0aWdvLmNvbS9DUFMwQwYDVR0fBDwwOjA4oDagNIYy\n+aHR0cDovL2NybC5zZWN0aWdvLmNvbS9TZWN0aWdvUlNBQ29kZVNpZ25pbmdDQS5j\n+cmwwcwYIKwYBBQUHAQEEZzBlMD4GCCsGAQUFBzAChjJodHRwOi8vY3J0LnNlY3Rp\n+Z28uY29tL1NlY3RpZ29SU0FDb2RlU2lnbmluZ0NBLmNydDAjBggrBgEFBQcwAYYX\n+aHR0cDovL29jc3Auc2VjdGlnby5jb20wKwYDVR0RBCQwIoEgam9uYXNAYml0Y29p\n+bmNvcmVjb2Rlc2lnbmluZy5vcmcwDQYJKoZIhvcNAQELBQADggEBAAU59qJzQ2ED\n+aTMIQTsU01zIhZJ/xwQh78i0v2Mnr46RvzYrZOev+btF3SyUYD8veNnbYlY6yEYq\n+Vb+/PQnE3t1xlqR80qiTZCk/Wmxx/qKvQuWeRL5QQgvsCmWBpycQ7PNfwzOWxbPE\n+b0Hb2/VFFZfR9iltkfeInRUrzS96CJGYtm7dMf2JtnXYBcwpn1N8BSMH4nXVyN8g\n+VEE5KyjE7+/awYiSST7+e6Y7FE5AJ4f3FjqnRm+2XetTVqITwMLKZMoV283nSEeH\n+fA4FNAMGz9QeV38ol65NNqFP2vSSgVoPK79orqH9OOW2LSobt2qun+euddJIQeYV\n+CMP90b/2WPc=\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n MIIF3jCCA8agAwIBAgIQAf1tMPyjylGoG7xkDjUDLTANBgkqhkiG9w0BAQwFADCB"
      },
      {
        "sha": "3d0784cb6b78c47a461019a0b3366c7c833134fa",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 30,
        "deletions": 5,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -4,16 +4,40 @@\n print-%:\n \t@echo $* = $($*)\n \n+# When invoking a sub-make, keep only the command line variable definitions\n+# matching the pattern in the filter function.\n+#\n+# e.g. invoking:\n+#   $ make A=1 C=1 print-MAKEOVERRIDES print-MAKEFLAGS\n+#\n+# with the following in the Makefile:\n+#   MAKEOVERRIDES := $(filter A=% B=%,$(MAKEOVERRIDES))\n+#\n+# will print:\n+#   MAKEOVERRIDES = A=1\n+#   MAKEFLAGS = -- A=1\n+#\n+# this is because as the GNU make manual says:\n+#   The command line variable definitions really appear in the variable\n+#   MAKEOVERRIDES, and MAKEFLAGS contains a reference to this variable.\n+#\n+# and since the GNU make manual also says:\n+#   variables defined on the command line are passed to the sub-make through\n+#   MAKEFLAGS\n+#\n+# this means that sub-makes will be invoked as if:\n+#   $(MAKE) A=1 blah blah\n+MAKEOVERRIDES := $(filter V=%,$(MAKEOVERRIDES))\n SOURCES_PATH ?= $(BASEDIR)/sources\n WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_QR ?=\n-RAPIDCHECK ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n NO_UPNP ?=\n+MULTIPROCESS ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n \n BUILD = $(shell ./config.guess)\n@@ -108,8 +132,7 @@ qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n-\n-rapidcheck_packages_$(RAPIDCHECK) = $(rapidcheck_packages)\n+multiprocess_packages_$(MULTIPROCESS) = $(multiprocess_packages)\n \n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n@@ -118,8 +141,9 @@ ifneq ($(zmq_packages_),)\n packages += $(zmq_packages)\n endif\n \n-ifeq ($(rapidcheck_packages_),)\n-packages += $(rapidcheck_packages)\n+ifeq ($(multiprocess_packages_),)\n+packages += $(multiprocess_packages)\n+native_packages += $(multiprocess_native_packages)\n endif\n \n all_packages = $(packages) $(native_packages)\n@@ -162,6 +186,7 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@no_zmq@|$(NO_ZMQ)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n+            -e 's|@multiprocess@|$(MULTIPROCESS)|' \\\n             -e 's|@debug@|$(DEBUG)|' \\\n             $< > $@\n \t$(AT)touch $@"
      },
      {
        "sha": "c12ea8bcb3b6e2e4cdb3057d180f88d31fd29b79",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -91,8 +91,8 @@ The following can be set when running make: make FOO=bar\n     NO_ZMQ: Don't download/build/cache packages needed for enabling zeromq\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n+    MULTIPROCESS: build libmultiprocess (experimental, requires cmake)\n     DEBUG: disable some optimizations and enable more runtime checking\n-    RAPIDCHECK: build rapidcheck (experimental, requires cmake)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n "
      },
      {
        "sha": "69c394ec1dbdf2b11616014898bee1c507c5be20",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n-build_darwin_CC:=$(shell xcrun -f clang)\n-build_darwin_CXX:=$(shell xcrun -f clang++)\n+build_darwin_CC:=$(shell xcrun -f clang) --sysroot $(shell xcrun --show-sdk-path)\n+build_darwin_CXX:=$(shell xcrun -f clang++) --sysroot $(shell xcrun --show-sdk-path)\n build_darwin_AR:=$(shell xcrun -f ar)\n build_darwin_RANLIB:=$(shell xcrun -f ranlib)\n build_darwin_STRIP:=$(shell xcrun -f strip)"
      },
      {
        "sha": "103aa0d2ff1a15e3a7fc6426b0bc247d6d5bc4d7",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -16,6 +16,9 @@ fi\n if test -z $with_qt_bindir && test -z \"@no_qt@\"; then\n   with_qt_bindir=$depends_prefix/native/bin\n fi\n+if test -z $with_mpgen && test -n \"@multiprocess@\"; then\n+  with_mpgen=$depends_prefix/native\n+fi\n \n if test -z $with_qrencode && test -n \"@no_qr@\"; then\n   with_qrencode=no\n@@ -25,6 +28,10 @@ if test -z $enable_wallet && test -n \"@no_wallet@\"; then\n   enable_wallet=no\n fi\n \n+if test -z $enable_multiprocess && test -n \"@multiprocess@\"; then\n+  enable_multiprocess=yes\n+fi\n+\n if test -z $with_miniupnpc && test -n \"@no_upnp@\"; then\n   with_miniupnpc=no\n fi"
      },
      {
        "sha": "135ebba9f8b4452f1b5215fab9df9cf57f3650d0",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -130,11 +130,11 @@ $(1)_config_env+=$($(1)_config_env_$(host_arch)_$(host_os)) $($(1)_config_env_$(\n \n $(1)_config_env+=PKG_CONFIG_LIBDIR=$($($(1)_type)_prefix)/lib/pkgconfig\n $(1)_config_env+=PKG_CONFIG_PATH=$($($(1)_type)_prefix)/share/pkgconfig\n+$(1)_config_env+=CMAKE_MODULE_PATH=$($($(1)_type)_prefix)/lib/cmake\n $(1)_config_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_build_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_stage_env+=PATH=$(build_prefix)/bin:$(PATH)\n $(1)_autoconf=./configure --host=$($($(1)_type)_host) --prefix=$($($(1)_type)_prefix) $$($(1)_config_opts) CC=\"$$($(1)_cc)\" CXX=\"$$($(1)_cxx)\"\n-\n ifneq ($($(1)_nm),)\n $(1)_autoconf += NM=\"$$($(1)_nm)\"\n endif\n@@ -156,6 +156,15 @@ endif\n ifneq ($($(1)_ldflags),)\n $(1)_autoconf += LDFLAGS=\"$$($(1)_ldflags)\"\n endif\n+\n+$(1)_cmake=cmake -DCMAKE_INSTALL_PREFIX=$($($(1)_type)_prefix)\n+ifneq ($($(1)_type),build)\n+ifneq ($(host),$(build))\n+$(1)_cmake += -DCMAKE_SYSTEM_NAME=$($(host_os)_cmake_system) -DCMAKE_SYSROOT=$(host_prefix)\n+$(1)_cmake += -DCMAKE_C_COMPILER_TARGET=$(host) -DCMAKE_C_COMPILER=$(firstword $($($(1)_type)_CC)) -DCMAKE_C_FLAGS=\"$(wordlist 2,1000,$($($(1)_type)_CC))\"\n+$(1)_cmake += -DCMAKE_CXX_COMPILER_TARGET=$(host) -DCMAKE_CXX_COMPILER=$(firstword $($($(1)_type)_CXX)) -DCMAKE_CXX_FLAGS=\"$(wordlist 2,1000,$($($(1)_type)_CXX))\"\n+endif\n+endif\n endef\n \n define int_add_cmds"
      },
      {
        "sha": "eabd84bbbe1020a67273bb27de30209fbefd8b88",
        "filename": "depends/hosts/android.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/android.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/android.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/android.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -9,3 +9,4 @@ android_CXX=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang++\n android_CC=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)$(ANDROID_API_LEVEL)-clang\n android_RANLIB=$(ANDROID_TOOLCHAIN_BIN)/$(HOST)-ranlib\n endif\n+android_cmake_system=Android"
      },
      {
        "sha": "82e086a326e9a00a4444eaa8c5e2397fa1319e54",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -14,3 +14,4 @@ darwin_debug_CFLAGS=-O1\n darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)\n \n darwin_native_toolchain=native_cctools\n+darwin_cmake_system=Darwin"
      },
      {
        "sha": "258619a9d059086cb8fb25e4df37617088cc2e32",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -13,9 +13,18 @@ default_host_OTOOL = $(host_toolchain)otool\n default_host_NM = $(host_toolchain)nm\n \n define add_host_tool_func\n+ifneq ($(filter $(origin $1),undefined default),)\n+# Do not consider the well-known var $1 if it is undefined or is taking a value\n+# that is predefined by \"make\" (e.g. the make variable \"CC\" has a predefined\n+# value of \"cc\")\n $(host_os)_$1?=$$(default_host_$1)\n $(host_arch)_$(host_os)_$1?=$$($(host_os)_$1)\n $(host_arch)_$(host_os)_$(release_type)_$1?=$$($(host_os)_$1)\n+else\n+$(host_os)_$1=$(or $($1),$($(host_os)_$1),$(default_host_$1))\n+$(host_arch)_$(host_os)_$1=$(or $($1),$($(host_arch)_$(host_os)_$1),$$($(host_os)_$1))\n+$(host_arch)_$(host_os)_$(release_type)_$1=$(or $($1),$($(host_arch)_$(host_os)_$(release_type)_$1),$$($(host_os)_$1))\n+endif\n host_$1=$$($(host_arch)_$(host_os)_$1)\n endef\n "
      },
      {
        "sha": "8ab448ce5fd458be142ece6ba7a001a76d8f9033",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -29,3 +29,4 @@ i686_linux_CXX=$(default_host_CXX) -m32\n x86_64_linux_CC=$(default_host_CC) -m64\n x86_64_linux_CXX=$(default_host_CXX) -m64\n endif\n+linux_cmake_system=Linux"
      },
      {
        "sha": "be5fec570c84cec02844d0faf63bb11b36e708c3",
        "filename": "depends/hosts/mingw32.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/mingw32.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/hosts/mingw32.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/mingw32.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -8,3 +8,5 @@ mingw32_debug_CFLAGS=-O1\n mingw32_debug_CXXFLAGS=$(mingw32_debug_CFLAGS)\n \n mingw32_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC\n+\n+mingw_cmake_system=Windows"
      },
      {
        "sha": "3a7e605b4fab8bee7eb605feffd46cdef340b6bd",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,17 +1,17 @@\n package=boost\n $(package)_version=1_70_0\n $(package)_download_path=https://dl.bintray.com/boostorg/release/1.70.0/source/\n-$(package)_file_name=$(package)_$($(package)_version).tar.bz2\n+$(package)_file_name=boost_$($(package)_version).tar.bz2\n $(package)_sha256_hash=430ae8354789de4fd19ee52f3b1f739e1fba576f0aded0897c3c2bc00fb38778\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release\n $(package)_config_opts_debug=variant=debug\n $(package)_config_opts=--layout=tagged --build-type=complete --user-config=user-config.jam\n $(package)_config_opts+=threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1\n-$(package)_config_opts_linux=threadapi=pthread runtime-link=shared\n-$(package)_config_opts_darwin=--toolset=clang-darwin runtime-link=shared\n-$(package)_config_opts_mingw32=binary-format=pe target-os=windows threadapi=win32 runtime-link=static\n+$(package)_config_opts_linux=target-os=linux threadapi=pthread runtime-link=shared\n+$(package)_config_opts_darwin=target-os=darwin runtime-link=shared\n+$(package)_config_opts_mingw32=target-os=windows binary-format=pe threadapi=win32 runtime-link=static\n $(package)_config_opts_x86_64_mingw32=address-model=64\n $(package)_config_opts_i686_mingw32=address-model=32\n $(package)_config_opts_i686_linux=address-model=32 architecture=x86\n@@ -20,8 +20,11 @@ $(package)_config_opts_aarch64_android=address-model=64\n $(package)_config_opts_x86_64_android=address-model=64\n $(package)_config_opts_armv7a_android=address-model=32\n $(package)_toolset_$(host_os)=gcc\n+$(package)_toolset_darwin=clang\n+ifneq (,$(findstring clang,$($(package)_cxx)))\n+   $(package)_toolset_$(host_os)=clang\n+endif\n $(package)_archiver_$(host_os)=$($(package)_ar)\n-$(package)_toolset_darwin=clang-darwin\n $(package)_config_libraries=filesystem,system,thread,test\n $(package)_cxxflags=-std=c++11 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n@@ -33,13 +36,13 @@ define $(package)_preprocess_cmds\n endef\n \n define $(package)_config_cmds\n-  ./bootstrap.sh --without-icu --with-libraries=$($(package)_config_libraries)\n+  ./bootstrap.sh --without-icu --with-libraries=$($(package)_config_libraries) --with-toolset=$($(package)_toolset_$(host_os))\n endef\n \n define $(package)_build_cmds\n-  ./b2 -d2 -j2 -d1 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) stage\n+  ./b2 -d2 -j2 -d1 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) toolset=$($(package)_toolset_$(host_os)) stage\n endef\n \n define $(package)_stage_cmds\n-  ./b2 -d0 -j4 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) install\n+  ./b2 -d0 -j4 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) toolset=$($(package)_toolset_$(host_os)) install\n endef"
      },
      {
        "sha": "abeb26545f898e4dffdb18f1452d77197f37a35c",
        "filename": "depends/packages/capnp.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/capnp.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,18 @@\n+package=capnp\n+$(package)_version=$(native_$(package)_version)\n+$(package)_download_path=$(native_$(package)_download_path)\n+$(package)_file_name=$(native_$(package)_file_name)\n+$(package)_sha256_hash=$(native_$(package)_sha256_hash)\n+$(package)_dependencies=native_$(package)\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf) --with-external-capnp\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "3e5cf5f1603a66c0244667b909cbb0b9f6541376",
        "filename": "depends/packages/libmultiprocess.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libmultiprocess.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,18 @@\n+package=libmultiprocess\n+$(package)_version=$(native_$(package)_version)\n+$(package)_download_path=$(native_$(package)_download_path)\n+$(package)_file_name=$(native_$(package)_file_name)\n+$(package)_sha256_hash=$(native_$(package)_sha256_hash)\n+$(package)_dependencies=native_$(package) boost capnp\n+\n+define $(package)_config_cmds\n+  $($(package)_cmake)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "ed5a6deee2fdbfbd658ddff8d5aa5c129860bf6f",
        "filename": "depends/packages/native_capnp.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/native_capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/native_capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_capnp.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,18 @@\n+package=native_capnp\n+$(package)_version=0.7.0\n+$(package)_download_path=https://capnproto.org/\n+$(package)_download_file=capnproto-c++-$($(package)_version).tar.gz\n+$(package)_file_name=capnproto-cxx-$($(package)_version).tar.gz\n+$(package)_sha256_hash=c9a4c0bd88123064d483ab46ecee777f14d933359e23bff6fb4f4dbd28b4cd41\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "c50fdc3f6bae8e33cde4c361f28a4eacffd5e992",
        "filename": "depends/packages/native_libmultiprocess.mk",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/native_libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/native_libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libmultiprocess.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,18 @@\n+package=native_libmultiprocess\n+$(package)_version=5741d750a04e644a03336090d8979c6d033e32c0\n+$(package)_download_path=https://github.com/chaincodelabs/libmultiprocess/archive\n+$(package)_file_name=$($(package)_version).tar.gz\n+$(package)_sha256_hash=ac848db49a6ed53e423c62d54bd87f1f08cbb0326254a8667e10bbfe5bf032a4\n+$(package)_dependencies=native_capnp\n+\n+define $(package)_config_cmds\n+  $($(package)_cmake)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "8fe2c771c99b661c74dcd869c5a2594cbffb0931",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -7,8 +7,6 @@ qrencode_packages = qrencode\n qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n qt_android_packages=qt\n \n-rapidcheck_packages = rapidcheck\n-\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n@@ -18,6 +16,9 @@ zmq_packages=zeromq\n \n upnp_packages=miniupnpc\n \n+multiprocess_packages = libmultiprocess capnp\n+multiprocess_native_packages = native_libmultiprocess native_capnp\n+\n darwin_native_packages = native_biplist native_ds_store native_mac_alias\n \n ifneq ($(build_os),darwin)"
      },
      {
        "sha": "631851855a0bd79533d8fbab0d3f5391fa204c0d",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -10,6 +10,7 @@ $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch no-xlib.patch fix_android_qmake_conf.patch fix_android_jni_static.patch\n \n+# Update OSX_QT_TRANSLATIONS when this is updated\n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=fb5a47799754af73d3bf501fe513342cfe2fc37f64e80df5533f6110e804220c\n "
      },
      {
        "sha": "a16fee270e87a56326a3091dbdea25cdbe334648",
        "filename": "depends/packages/rapidcheck.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/depends/packages/rapidcheck.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/depends/packages/rapidcheck.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/rapidcheck.mk?ref=7237f928118f3ab2df4a905304ef9141f150e2d4",
        "patch": "@@ -1,21 +0,0 @@\n-package=rapidcheck\n-$(package)_version=d9482c683429fe79122e3dcab14c9655874aeb8e\n-$(package)_download_path=https://github.com/emil-e/rapidcheck/archive\n-$(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=b9ee8955b175fd3c0757ebd887bb075541761af08b0c28391b7c6c0685351f6b\n-\n-define $(package)_config_cmds\n-  cmake -DCMAKE_INSTALL_PREFIX=$($(package)_staging_dir)$(host_prefix) -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_ENABLE_BOOST_TEST=ON -B .\n-endef\n-\n-define $(package)_preprocess_cmds\n-  sed -i.old 's/ -Wall//' CMakeLists.txt\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) rapidcheck\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) rapidcheck install\n-endef"
      },
      {
        "sha": "19d8204d83eb7960ae0e91e04ca8404422e564df",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -30,7 +30,7 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on [#bitcoin](http://webchat.freenode.net?channels=bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net?channels=bitcoin).\n+* Ask for help on [#bitcoin](https://webchat.freenode.net/#bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin).\n * Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n@@ -66,8 +66,8 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin-core-dev).\n+* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](https://webchat.freenode.net/#bitcoin-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)"
      },
      {
        "sha": "11e9c90f49b9629d164d6d96040487fbdd882621",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -30,7 +30,7 @@ To query for a confirmed transaction, enable the transaction index via \"txindex=\n Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats.\n Responds with 404 if the block doesn't exist.\n \n-The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 2.66MB (1 MB max block, plus hex encoding) per request.\n+The HTTP request and response are both handled entirely in-memory.\n \n With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.\n "
      },
      {
        "sha": "f48855a344fde73bb7b1cab23f74ce7c137dc264",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -10,15 +10,15 @@ This guide does not contain instructions for building the GUI.\n \n You will need the following dependencies, which can be installed as root via pkg:\n \n-```shell\n+```bash\n pkg install autoconf automake boost-libs git gmake libevent libtool pkgconf\n \n git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n In order to run the test suite (recommended), you will need to have Python 3 installed:\n \n-```shell\n+```bash\n pkg install python3\n ```\n \n@@ -29,32 +29,33 @@ See [dependencies.md](dependencies.md) for a complete overview.\n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n `--disable-wallet` to `./configure` and skip to the next section.\n \n-```shell\n+```bash\n ./contrib/install_db4.sh `pwd`\n export BDB_PREFIX=\"$PWD/db4\"\n ```\n \n ## Building Bitcoin Core\n \n-**Important**: Use `gmake` (the non-GNU `make` will exit with an error):\n+**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n With wallet:\n-```shell\n+```bash\n ./autogen.sh\n ./configure --with-gui=no \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n-    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n+    MAKE=gmake\n ```\n \n Without wallet:\n-```shell\n+```bash\n ./autogen.sh\n-./configure --with-gui=no --disable-wallet\n+./configure --with-gui=no --disable-wallet MAKE=gmake\n ```\n \n followed by:\n \n-```shell\n+```bash\n gmake # use -jX here for parallelism\n gmake check # Run tests if Python 3 is available\n ```"
      },
      {
        "sha": "47049a780edef5c5e1ef87813eff17eb0060d467",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -37,13 +37,13 @@ from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n If you have to build it yourself, you can use [the installation script included\n in contrib/](/contrib/install_db4.sh) like so:\n \n-```shell\n+```bash\n ./contrib/install_db4.sh `pwd`\n ```\n \n from the root of the repository. Then set `BDB_PREFIX` for the next section:\n \n-```shell\n+```bash\n export BDB_PREFIX=\"$PWD/db4\"\n ```\n \n@@ -52,24 +52,26 @@ export BDB_PREFIX=\"$PWD/db4\"\n **Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n With wallet:\n-```\n+```bash\n ./autogen.sh\n ./configure --with-gui=no CPPFLAGS=\"-I/usr/pkg/include\" \\\n     LDFLAGS=\"-L/usr/pkg/lib\" \\\n     BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n     BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n-    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n+    MAKE=gmake\n ```\n \n Without wallet:\n-```\n+```bash\n ./autogen.sh\n ./configure --with-gui=no --disable-wallet \\\n     CPPFLAGS=\"-I/usr/pkg/include\" \\\n     LDFLAGS=\"-L/usr/pkg/lib\" \\\n     BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    MAKE=gmake\n ```\n \n Build and run the tests:"
      },
      {
        "sha": "53c647ae34b59a511ba9869b4af17372ea59a698",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -38,19 +38,19 @@ from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n If you have to build it yourself, you can use [the installation script included\n in contrib/](/contrib/install_db4.sh) like so:\n \n-```shell\n+```bash\n ./contrib/install_db4.sh `pwd` CC=cc CXX=c++\n ```\n \n from the root of the repository. Then set `BDB_PREFIX` for the next section:\n \n-```shell\n+```bash\n export BDB_PREFIX=\"$PWD/db4\"\n ```\n \n ### Building Bitcoin Core\n \n-**Important**: use `gmake`, not `make`. The non-GNU `make` will exit with a horrible error.\n+**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n Preparation:\n ```bash\n@@ -70,12 +70,14 @@ Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n To configure with wallet:\n ```bash\n ./configure --with-gui=no CC=cc CXX=c++ \\\n-    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n+    MAKE=gmake\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no CC=cc CXX=c++\n+./configure --disable-wallet --with-gui=no CC=cc CXX=c++ MAKE=gmake\n ```\n \n Build and run the tests:"
      },
      {
        "sha": "d3dc467f198031f794041698dd6359153beb5783",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -9,7 +9,7 @@ The options known to work for building Bitcoin Core on Windows are:\n and is the platform used to build the Bitcoin Core Windows release binaries.\n * On Windows, using [Windows\n Subsystem for Linux (WSL)](https://docs.microsoft.com/windows/wsl/about) and the Mingw-w64 cross compiler tool chain.\n-* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com). See [README.md](/build_msvc/README.md).\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n "
      },
      {
        "sha": "0cb5311e8b7c8a269fa5efadf54e3b7dd161a9fb",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -13,7 +13,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) (Android only) |\n | GCC |  | [4.8+](https://gcc.gnu.org/) (C++11 support) |  |  |  |\n | HarfBuzz-NG |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n-| libevent | [2.1.11-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n+| libevent | [2.1.11-stable](https://github.com/libevent/libevent/releases) | [2.0.21](https://github.com/bitcoin/bitcoin/pull/18676) | No |  |  |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk) |\n | librsvg | |  |  |  |  |\n | MiniUPnPc | [2.0.20180203](https://miniupnp.tuxfamily.org/files) |  | No |  |  |"
      },
      {
        "sha": "b33b3ad18a5b4dc9701d7aa4aaadefcf94f72a15",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 159,
        "deletions": 12,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -43,6 +43,7 @@ Developer Notes\n         - [Suggestions and examples](#suggestions-and-examples)\n     - [Release notes](#release-notes)\n     - [RPC interface guidelines](#rpc-interface-guidelines)\n+    - [Internal interface guidelines](#internal-interface-guidelines)\n \n <!-- markdown-toc end -->\n \n@@ -422,27 +423,52 @@ and its `cs_KeyStore` lock for example).\n Threads\n -------\n \n-- ThreadScriptCheck : Verifies block scripts.\n+- [Main thread (`bitcoind`)](https://doxygen.bitcoincore.org/bitcoind_8cpp.html#a0ddf1224851353fc92bfbff6f499fa97)\n+  : Started from `main()` in `bitcoind.cpp`. Responsible for starting up and\n+  shutting down the application.\n \n-- ThreadImport : Loads blocks from `blk*.dat` files or `-loadblock=<file>`.\n+- [ThreadImport (`b-loadblk`)](https://doxygen.bitcoincore.org/init_8cpp.html#ae9e290a0e829ec0198518de2eda579d1)\n+  : Loads blocks from `blk*.dat` files or `-loadblock=<file>` on startup.\n \n-- ThreadDNSAddressSeed : Loads addresses of peers from the DNS.\n+- [ThreadScriptCheck (`b-scriptch.x`)](https://doxygen.bitcoincore.org/validation_8cpp.html#a925a33e7952a157922b0bbb8dab29a20)\n+  : Parallel script validation threads for transactions in blocks.\n \n-- ThreadMapPort : Universal plug-and-play startup/shutdown.\n+- [ThreadHTTP (`b-http`)](https://doxygen.bitcoincore.org/httpserver_8cpp.html#abb9f6ea8819672bd9a62d3695070709c)\n+  : Libevent thread to listen for RPC and REST connections.\n \n-- ThreadSocketHandler : Sends/Receives data from peers on port 8333.\n+- [HTTP worker threads(`b-httpworker.x`)](https://doxygen.bitcoincore.org/httpserver_8cpp.html#aa6a7bc27265043bc0193220c5ae3a55f)\n+  : Threads to service RPC and REST requests.\n \n-- ThreadOpenAddedConnections : Opens network connections to added nodes.\n+- [Indexer threads (`b-txindex`, etc)](https://doxygen.bitcoincore.org/class_base_index.html#a96a7407421fbf877509248bbe64f8d87)\n+  : One thread per indexer.\n \n-- ThreadOpenConnections : Initiates new connections to peers.\n+- [SchedulerThread (`b-scheduler`)](https://doxygen.bitcoincore.org/class_c_scheduler.html#a14d2800815da93577858ea078aed1fba)\n+  : Does asynchronous background tasks like dumping wallet contents, dumping\n+  addrman and running asynchronous validationinterface callbacks.\n \n-- ThreadMessageHandler : Higher-level message handling (sending and receiving).\n+- [TorControlThread (`b-torcontrol`)](https://doxygen.bitcoincore.org/torcontrol_8cpp.html#a4faed3692d57a0d7bdbecf3b37f72de0)\n+  : Libevent thread for tor connections.\n \n-- DumpAddresses : Dumps IP addresses of nodes to `peers.dat`.\n+- Net threads:\n \n-- ThreadRPCServer : Remote procedure call handler, listens on port 8332 for connections and services them.\n+  - [ThreadMessageHandler (`b-msghand`)](https://doxygen.bitcoincore.org/class_c_connman.html#aacdbb7148575a31bb33bc345e2bf22a9)\n+    : Application level message handling (sending and receiving). Almost\n+    all net_processing and validation logic runs on this thread.\n \n-- Shutdown : Does an orderly shutdown of everything.\n+  - [ThreadDNSAddressSeed (`b-dnsseed`)](https://doxygen.bitcoincore.org/class_c_connman.html#aa7c6970ed98a4a7bafbc071d24897d13)\n+    : Loads addresses of peers from the DNS.\n+\n+  - [ThreadMapPort (`b-upnp`)](https://doxygen.bitcoincore.org/net_8cpp.html#a63f82a71c4169290c2db1651a9bbe249)\n+    : Universal plug-and-play startup/shutdown.\n+\n+  - [ThreadSocketHandler (`b-net`)](https://doxygen.bitcoincore.org/class_c_connman.html#a765597cbfe99c083d8fa3d61bb464e34)\n+    : Sends/Receives data from peers on port 8333.\n+\n+  - [ThreadOpenAddedConnections (`b-addcon`)](https://doxygen.bitcoincore.org/class_c_connman.html#a0b787caf95e52a346a2b31a580d60a62)\n+    : Opens network connections to added nodes.\n+\n+  - [ThreadOpenConnections (`b-opencon`)](https://doxygen.bitcoincore.org/class_c_connman.html#a55e9feafc3bab78e5c9d408c207faa45)\n+    : Initiates new connections to peers.\n \n Ignoring IDE/editor files\n --------------------------\n@@ -964,7 +990,7 @@ Some good examples of scripted-diff:\n - [scripted-diff: Rename InitInterfaces to NodeContext](https://github.com/bitcoin/bitcoin/commit/301bd41a2e6765b185bd55f4c541f9e27aeea29d)\n uses an elegant script to replace occurrences of multiple terms in all source files.\n \n-- [scripted-diff: Remove g_connman, g_banman globals](https://github.com/bitcoin/bitcoin/commit/301bd41a2e6765b185bd55f4c541f9e27aeea29d)\n+- [scripted-diff: Remove g_connman, g_banman globals](https://github.com/bitcoin/bitcoin/commit/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a)\n replaces specific terms in a list of specific source files.\n \n - [scripted-diff: Replace fprintf with tfm::format](https://github.com/bitcoin/bitcoin/commit/fac03ec43a15ad547161e37e53ea82482cc508f9)\n@@ -1100,3 +1126,124 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n   timestamps in the documentation.\n \n   - *Rationale*: User-facing consistency.\n+\n+Internal interface guidelines\n+-----------------------------\n+\n+Internal interfaces between parts of the codebase that are meant to be\n+independent (node, wallet, GUI), are defined in\n+[`src/interfaces/`](../src/interfaces/). The main interface classes defined\n+there are [`interfaces::Chain`](../src/interfaces/chain.h), used by wallet to\n+access the node's latest chain state,\n+[`interfaces::Node`](../src/interfaces/node.h), used by the GUI to control the\n+node, and [`interfaces::Wallet`](../src/interfaces/wallet.h), used by the GUI\n+to control an individual wallet. There are also more specialized interface\n+types like [`interfaces::Handler`](../src/interfaces/handler.h)\n+[`interfaces::ChainClient`](../src/interfaces/chain.h) passed to and from\n+various interface methods.\n+\n+Interface classes are written in a particular style so node, wallet, and GUI\n+code doesn't need to run in the same process, and so the class declarations\n+work more easily with tools and libraries supporting interprocess\n+communication:\n+\n+- Interface classes should be abstract and have methods that are [pure\n+  virtual](https://en.cppreference.com/w/cpp/language/abstract_class). This\n+  allows multiple implementations to inherit from the same interface class,\n+  particularly so one implementation can execute functionality in the local\n+  process, and other implementations can forward calls to remote processes.\n+\n+- Interface method definitions should wrap existing functionality instead of\n+  implementing new functionality. Any substantial new node or wallet\n+  functionality should be implemented in [`src/node/`](../src/node/) or\n+  [`src/wallet/`](../src/wallet/) and just exposed in\n+  [`src/interfaces/`](../src/interfaces/) instead of being implemented there,\n+  so it can be more modular and accessible to unit tests.\n+\n+- Interface method parameter and return types should either be serializable or\n+  be other interface classes. Interface methods shouldn't pass references to\n+  objects that can't be serialized or accessed from another process.\n+\n+  Examples:\n+\n+  ```c++\n+  // Good: takes string argument and returns interface class pointer\n+  virtual unique_ptr<interfaces::Wallet> loadWallet(std::string filename) = 0;\n+\n+  // Bad: returns CWallet reference that can't be used from another process\n+  virtual CWallet& loadWallet(std::string filename) = 0;\n+  ```\n+\n+  ```c++\n+  // Good: accepts and returns primitive types\n+  virtual bool findBlock(const uint256& hash, int& out_height, int64_t& out_time) = 0;\n+\n+  // Bad: returns pointer to internal node in a linked list inaccessible to\n+  // other processes\n+  virtual const CBlockIndex* findBlock(const uint256& hash) = 0;\n+  ```\n+\n+  ```c++\n+  // Good: takes plain callback type and returns interface pointer\n+  using TipChangedFn = std::function<void(int block_height, int64_t block_time)>;\n+  virtual std::unique_ptr<interfaces::Handler> handleTipChanged(TipChangedFn fn) = 0;\n+\n+  // Bad: returns boost connection specific to local process\n+  using TipChangedFn = std::function<void(int block_height, int64_t block_time)>;\n+  virtual boost::signals2::scoped_connection connectTipChanged(TipChangedFn fn) = 0;\n+  ```\n+\n+- For consistency and friendliness to code generation tools, interface method\n+  input and inout parameters should be ordered first and output parameters\n+  should come last.\n+\n+  Example:\n+\n+  ```c++\n+  // Good: error output param is last\n+  virtual bool broadcastTransaction(const CTransactionRef& tx, CAmount max_fee, std::string& error) = 0;\n+\n+  // Bad: error output param is between input params\n+  virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& error, CAmount max_fee) = 0;\n+  ```\n+\n+- For friendliness to code generation tools, interface methods should not be\n+  overloaded:\n+\n+  Example:\n+\n+  ```c++\n+  // Good: method names are unique\n+  virtual bool disconnectByAddress(const CNetAddr& net_addr) = 0;\n+  virtual bool disconnectById(NodeId id) = 0;\n+\n+  // Bad: methods are overloaded by type\n+  virtual bool disconnect(const CNetAddr& net_addr) = 0;\n+  virtual bool disconnect(NodeId id) = 0;\n+  ```\n+\n+- For consistency and friendliness to code generation tools, interface method\n+  names should be `lowerCamelCase` and standalone function names should be\n+  `UpperCamelCase`.\n+\n+  Examples:\n+\n+  ```c++\n+  // Good: lowerCamelCase method name\n+  virtual void blockConnected(const CBlock& block, int height) = 0;\n+\n+  // Bad: uppercase class method\n+  virtual void BlockConnected(const CBlock& block, int height) = 0;\n+  ```\n+\n+  ```c++\n+  // Good: UpperCamelCase standalone function name\n+  std::unique_ptr<Node> MakeNode(LocalInit& init);\n+\n+  // Bad: lowercase standalone function\n+  std::unique_ptr<Node> makeNode(LocalInit& init);\n+  ```\n+\n+  Note: This last convention isn't generally followed outside of\n+  [`src/interfaces/`](../src/interfaces/), though it did come up for discussion\n+  before in [#14635](https://github.com/bitcoin/bitcoin/pull/14635)."
      },
      {
        "sha": "16852bb9707c05a46daee9fd7c49efdc28ec4212",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 139,
        "deletions": 120,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,138 +1,157 @@\n-Fuzz-testing Bitcoin Core\n-==========================\n-\n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n-\n-## Preparing fuzzing\n-\n-The fuzzer needs some inputs to work on, but the inputs or seeds can be used\n-interchangeably between libFuzzer and AFL.\n-\n-Extract the example seeds (or other starting inputs) into the inputs\n-directory before starting fuzzing.\n-\n-```\n-git clone https://github.com/bitcoin-core/qa-assets\n-export DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n-```\n-\n-AFL needs an input directory with examples, and an output directory where it\n-will place examples that it found. These can be anywhere in the file system,\n-we'll define environment variables to make it easy to reference them.\n-\n-So, only for AFL you need to configure the outputs path:\n-\n-```\n-mkdir outputs\n-export AFLOUT=$PWD/outputs\n-```\n-\n-libFuzzer will use the input directory as output directory.\n-\n-## AFL\n-\n-### Building AFL\n-\n-It is recommended to always use the latest version of afl:\n-```\n-wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz\n-tar -zxvf afl-latest.tgz\n-cd afl-<version>\n-make\n-export AFLPATH=$PWD\n-```\n+# Fuzzing Bitcoin Core using libFuzzer\n+\n+## Quickstart guide\n+\n+To quickly get started fuzzing Bitcoin Core using [libFuzzer](https://llvm.org/docs/LibFuzzer.html):\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined --enable-c++17\n+# macOS users: If you have problem with this step then make sure to read \"macOS hints for\n+# libFuzzer\" on https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md#macos-hints-for-libfuzzer\n+$ make\n+$ src/test/fuzz/process_message\n+# abort fuzzing using ctrl-c\n+```\n+\n+## Fuzzing harnesses, fuzzing output and fuzzing corpora\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort fuzzing using ctrl-c\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat --show-nonprinting process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8\n+block^@M-^?M-^?M-^?M-^?M-^?nM-^?M-^?\n+```\n+\n+In this case the fuzzer managed to create a `block` message which when passed to `ProcessMessage(...)` increased coverage.\n+\n+The project's collection of seed corpora is found in the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) repo.\n+\n+To fuzz `process_message` using the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) seed corpus:\n+\n+```sh\n+$ git clone https://github.com/bitcoin-core/qa-assets\n+$ src/test/fuzz/process_message qa-assets/fuzz_seed_corpus/process_message/\n+INFO: Seed: 1346407872\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55d8a9004ab8, 0x55d8a906c3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55d8a906c3a8,0x55d8a96e5288),\n+INFO:      991 files found in qa-assets/fuzz_seed_corpus/process_message/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: seed corpus: files: 991 min: 1b max: 1858b total: 288291b rss: 150Mb\n+#993    INITED cov: 7063 ft: 8236 corp: 25/3821b exec/s: 0 rss: 181Mb\n+\u2026\n+```\n+\n+If you find coverage increasing inputs when fuzzing you are highly encouraged to submit them for inclusion in the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) repo.\n+\n+Every single pull request submitted against the Bitcoin Core repo is automatically tested against all inputs in the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) repo. Contributing new coverage increasing inputs is an easy way to help make Bitcoin Core more robust.\n+\n+## macOS hints for libFuzzer\n+\n+The default Clang/LLVM version supplied by Apple on macOS does not include\n+fuzzing libraries, so macOS users will need to install a full version, for\n+example using `brew install llvm`.\n \n-For macOS you may need to ignore x86 compilation checks when running `make`:\n-`AFL_NO_X86=1 make`.\n+Should you run into problems with the address sanitizer, it is possible you\n+may need to run `./configure` with `--disable-asm` to avoid errors\n+with certain assembly code from Bitcoin Core's code. See [developer notes on sanitizers](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#sanitizers)\n+for more information.\n \n-### Instrumentation\n+You may also need to take care of giving the correct path for `clang` and\n+`clang++`, like `CC=/path/to/clang CXX=/path/to/clang++` if the non-systems\n+`clang` does not come first in your path.\n \n-To build Bitcoin Core using AFL instrumentation (this assumes that the\n-`AFLPATH` was set as above):\n-```\n-./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n-export AFL_HARDEN=1\n-make\n-```\n+Full configure that was tested on macOS Catalina with `brew` installed `llvm`:\n \n-If you are using clang you will need to substitute `afl-gcc` with `afl-clang`\n-and `afl-g++` with `afl-clang++`, so the first line above becomes:\n-```\n-./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-clang CXX=${AFLPATH}/afl-clang++\n+```sh\n+./configure --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm --enable-c++17\n ```\n \n-We disable ccache because we don't want to pollute the ccache with instrumented\n-objects, and similarly don't want to use non-instrumented cached objects linked\n-in.\n+Read the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html) for more information. This [libFuzzer tutorial](https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md) might also be of interest.\n \n-The fuzzing can be sped up significantly (~200x) by using `afl-clang-fast` and\n-`afl-clang-fast++` in place of `afl-gcc` and `afl-g++` when compiling. When\n-compiling using `afl-clang-fast`/`afl-clang-fast++` the resulting\n-binary will be instrumented in such a way that the AFL\n-features \"persistent mode\" and \"deferred forkserver\" can be used. See\n-https://github.com/google/AFL/tree/master/llvm_mode for details.\n+# Fuzzing Bitcoin Core using american fuzzy lop (`afl-fuzz`)\n \n-### Fuzzing\n+## Quickstart guide\n \n-To start the actual fuzzing use:\n+To quickly get started fuzzing Bitcoin Core using [`afl-fuzz`](https://github.com/google/afl):\n \n-```\n-export FUZZ_TARGET=bech32  # Pick a fuzz_target\n-mkdir ${AFLOUT}/${FUZZ_TARGET}\n-$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ git clone https://github.com/google/afl\n+$ make -C afl/\n+$ make -C afl/llvm_mode/\n+$ ./autogen.sh\n+$ CC=$(pwd)/afl/afl-clang-fast CXX=$(pwd)/afl/afl-clang-fast++ ./configure --enable-fuzz --enable-c++17\n+$ make\n+# For macOS you may need to ignore x86 compilation checks when running \"make\". If so,\n+# try compiling using: AFL_NO_X86=1 make\n+$ mkdir -p inputs/ outputs/\n+$ echo A > inputs/thin-air-input\n+$ afl/afl-fuzz -i inputs/ -o outputs/ -- src/test/fuzz/bech32\n+# You may have to change a few kernel parameters to test optimally - afl-fuzz\n+# will print an error and suggestion if so.\n ```\n \n-You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n-will print an error and suggestion if so.\n+Read the [`afl-fuzz` documentation](https://github.com/google/afl) for more information.\n \n-On macOS you may need to set `AFL_NO_FORKSRV=1` to get the target to run.\n-```\n-export FUZZ_TARGET=bech32  # Pick a fuzz_target\n-mkdir ${AFLOUT}/${FUZZ_TARGET}\n-AFL_NO_FORKSRV=1 $AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n-```\n-\n-## libFuzzer\n+# Fuzzing Bitcoin Core using Honggfuzz\n \n-A recent version of `clang`, the address/undefined sanitizers (ASan/UBSan) and\n-libFuzzer is needed (all found in the `compiler-rt` runtime libraries package).\n+## Quickstart guide\n \n-To build all fuzz targets with libFuzzer, run\n+To quickly get started fuzzing Bitcoin Core using [Honggfuzz](https://github.com/google/honggfuzz):\n \n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ git clone https://github.com/google/honggfuzz\n+$ cd honggfuzz/\n+$ make\n+$ cd ..\n+$ CC=$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang CXX=$(pwd)/honggfuzz/hfuzz_cc/hfuzz-clang++ ./configure --enable-fuzz --with-sanitizers=address,undefined --enable-c++17\n+$ make\n+$ mkdir -p inputs/\n+$ honggfuzz/honggfuzz -i inputs/ -- src/test/fuzz/process_message\n ```\n-./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=clang CXX=clang++\n-make\n-```\n-\n-See https://llvm.org/docs/LibFuzzer.html#running on how to run the libFuzzer\n-instrumented executable.\n-\n-Alternatively, you can run the script through the fuzzing test harness (only\n-libFuzzer supported so far). You need to pass it the inputs directory and\n-the specific test target you want to run.\n-\n-```\n-./test/fuzz/test_runner.py ${DIR_FUZZ_IN} bech32\n-```\n-\n-### macOS hints for libFuzzer\n \n-The default clang/llvm version supplied by Apple on macOS does not include\n-fuzzing libraries, so macOS users will need to install a full version, for\n-example using `brew install llvm`.\n-\n-Should you run into problems with the address sanitizer, it is possible you\n-may need to run `./configure` with `--disable-asm` to avoid errors\n-with certain assembly code from Bitcoin Core's code. See [developer notes on sanitizers](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#sanitizers)\n-for more information.\n-\n-You may also need to take care of giving the correct path for clang and\n-clang++, like `CC=/path/to/clang CXX=/path/to/clang++` if the non-systems\n-clang does not come first in your path.\n-\n-Full configure that was tested on macOS Catalina with `brew` installed `llvm`:\n-```\n-./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm\n-```\n+Read the [Honggfuzz documentation](https://github.com/google/honggfuzz/blob/master/docs/USAGE.md) for more information."
      },
      {
        "sha": "99aa0a0def3d6b91511d53aee17f507ae1f813de",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -20,9 +20,9 @@ The macOS configuration assumes bitcoind will be set up for the current user.\n Configuration\n ---------------------------------\n \n-At a bare minimum, bitcoind requires that the rpcpassword setting be set\n-when running as a daemon.  If the configuration file does not exist or this\n-setting is not set, bitcoind will shut down promptly after startup.\n+Running bitcoind as a daemon does not require any manual configuration. You may\n+set the `rpcauth` setting in the `bitcoin.conf` configuration file to override\n+the default behaviour of using a special cookie for authentication.\n \n This password does not have to be remembered or typed as it is mostly used\n as a fixed token that bitcoind and client programs read from the configuration"
      },
      {
        "sha": "471d8561f7a27ff2aa20da9ca750b7a1a646bb72",
        "filename": "doc/multiprocess.md",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,35 @@\n+# Multiprocess Bitcoin\n+\n+On unix systems, the `--enable-multiprocess` build option can be passed to `./configure` to build new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables alongside existing `bitcoind` and `bitcoin-qt` executables.\n+\n+`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally (after [#10102](https://github.com/bitcoin/bitcoin/pull/10102)), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n+\n+## Next steps\n+\n+Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) will be:\n+\n+- [ ] Adding `-ipcbind` and `-ipcconnect` options to `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables so they can listen and connect to TCP ports and unix socket paths. This will allow separate processes to be started and stopped any time and connect to each other.\n+- [ ] Adding `-server` and `-rpcbind` options to the `bitcoin-wallet` executable so wallet processes can handle RPC requests directly without going through the node.\n+- [ ] Supporting windows, not just unix systems. The existing socket code is already cross-platform, so the only windows-specific code that needs to be written is code spawning a process and passing a socket descriptor. This can be implemented with `CreateProcess` and `WSADuplicateSocket`. Example: https://memset.wordpress.com/2010/10/13/win32-api-passing-socket-with-ipc-method/.\n+- [ ] Adding sandbox features, restricting subprocess access to resources and data. See [https://eklitzke.org/multiprocess-bitcoin](https://eklitzke.org/multiprocess-bitcoin).\n+\n+## Debugging\n+\n+After [#10102](https://github.com/bitcoin/bitcoin/pull/10102), the `-debug=ipc` command line option can be used to see requests and responses between processes.\n+\n+## Installation\n+\n+The multiprocess feature requires [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) as dependencies. A simple way to get starting using it without installing these dependencies manually is to use the [depends system](../depends) with the `MULTIPROCESS=1` [dependency option](../depends#dependency-options) passed to make:\n+\n+```\n+cd <BITCOIN_SOURCE_DIRECTORY>\n+make -C depends NO_QT=1 MULTIPROCESS=1\n+./configure --prefix=$PWD/depends/x86_64-pc-linux-gnu\n+make\n+src/bitcoin-node -regtest -printtoconsole -debug=ipc\n+BITCOIND=bitcoin-node test/functional/test_runner.py\n+```\n+\n+The configure script will pick up settings and library locations from the depends directory, so there is no need to pass `--enable-multiprocess` as a separate flag when using the depends system (it's controlled by the `MULTIPROCESS=1` option).\n+\n+Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) packages on your system, and just run `./configure --enable-multiprocess` without using the depends system. The configure script will be able to locate the installed packages via [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/). See [Installation](https://github.com/chaincodelabs/libmultiprocess#installation) section of the libmultiprocess readme for install steps. See [build-unix.md](build-unix.md) and [build-osx.md](build-osx.md) for information about installing dependencies in general."
      },
      {
        "sha": "555f0afe3c7b28d0ed88fc0632aa266bbb087497",
        "filename": "doc/productivity.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/productivity.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/productivity.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/productivity.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -12,7 +12,7 @@ Table of Contents\n    * [Multiple working directories with `git worktrees`](#multiple-working-directories-with-git-worktrees)\n    * [Interactive \"dummy rebases\" for fixups and execs with `git merge-base`](#interactive-dummy-rebases-for-fixups-and-execs-with-git-merge-base)\n * [Writing code](#writing-code)\n-   * [Format C/C++/Protobuf diffs with `clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy)\n+   * [Format C/C++ diffs with `clang-format-diff.py`](#format-cc-diffs-with-clang-format-diffpy)\n    * [Format Python diffs with `yapf-diff.py`](#format-python-diffs-with-yapf-diffpy)\n * [Rebasing/Merging code](#rebasingmerging-code)\n    * [More conflict context with `merge.conflictstyle diff3`](#more-conflict-context-with-mergeconflictstyle-diff3)\n@@ -118,13 +118,13 @@ You can also set up [upstream refspecs](#reference-prs-easily-with-refspecs) to\n Writing code\n ------------\n \n-### Format C/C++/Protobuf diffs with `clang-format-diff.py`\n+### Format C/C++ diffs with `clang-format-diff.py`\n \n See [contrib/devtools/README.md](/contrib/devtools/README.md#clang-format-diff.py).\n \n ### Format Python diffs with `yapf-diff.py`\n \n-Usage is exactly the same as [`clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy). You can get it [here](https://github.com/MarcoFalke/yapf-diff).\n+Usage is exactly the same as [`clang-format-diff.py`](#format-cc-diffs-with-clang-format-diffpy). You can get it [here](https://github.com/MarcoFalke/yapf-diff).\n \n Rebasing/Merging code\n -------------\n@@ -172,11 +172,11 @@ When looking at other's pull requests, it may make sense to add the following se\n \n ```\n [remote \"upstream-pull\"]\n-        fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n+        fetch = +refs/pull/*/head:refs/remotes/upstream-pull/*\n         url = git@github.com:bitcoin/bitcoin.git\n ```\n \n-This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all` or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`, `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all` or `git fetch upstream-pull`. It will download and store on disk quite a lot of data (all PRs, including merged and closed ones). Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`, `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n \n ### Diff the diffs with `git range-diff`\n "
      },
      {
        "sha": "397a907f17c00f64c9404f9a2d4d1810077b05e6",
        "filename": "doc/rapidcheck.md",
        "status": "removed",
        "additions": 0,
        "deletions": 84,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/doc/rapidcheck.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/doc/rapidcheck.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/rapidcheck.md?ref=7237f928118f3ab2df4a905304ef9141f150e2d4",
        "patch": "@@ -1,84 +0,0 @@\n-# RapidCheck property-based testing for Bitcoin Core\n-\n-## Concept\n-\n-Property-based testing is experimentally being added to Bitcoin Core with\n-[RapidCheck](https://github.com/emil-e/rapidcheck), a C++ framework for\n-property-based testing inspired by the Haskell library\n-[QuickCheck](https://hackage.haskell.org/package/QuickCheck).\n-\n-RapidCheck performs random testing of program properties. A specification of the\n-program is given in the form of properties which functions should satisfy, and\n-RapidCheck tests that the properties hold in a large number of randomly\n-generated cases.\n-\n-If an exception is found, RapidCheck tries to find the smallest case, for some\n-definition of smallest, for which the property is still false and displays it as\n-a counter-example. For example, if the input is an integer, RapidCheck tries to\n-find the smallest integer for which the property is false.\n-\n-## Running\n-\n-If RapidCheck is installed, Bitcoin Core will automatically run the\n-property-based tests with the unit tests during `make check`, unless the\n-`--without-rapidcheck` flag is passed when configuring.\n-\n-For more information, run `./configure --help` and see `--with-rapidcheck` under\n-Optional Packages.\n-\n-## Setup\n-\n-The following instructions have been tested with Linux Debian and macOS.\n-\n-1. Clone the RapidCheck source code and cd into the repository.\n-\n-    ```shell\n-    git clone https://github.com/emil-e/rapidcheck.git\n-    cd rapidcheck\n-    ```\n-\n-2. Build RapidCheck (requires CMake to be installed).\n-\n-    ```shell\n-    cmake -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_ENABLE_BOOST_TEST=ON $(pwd)\n-    make && make install\n-    ```\n-\n-3. Configure Bitcoin Core with RapidCheck.\n-\n-    `cd` to the directory of your local bitcoin repository and run\n-    `./configure`. In the output you should see:\n-\n-    ```shell\n-    checking rapidcheck.h usability... yes\n-    checking rapidcheck.h presence... yes\n-    checking for rapidcheck.h... yes\n-    [...]\n-    Options used to compile and link:\n-    [...]\n-      with test     = yes\n-        with prop   = yes\n-    ```\n-\n-4. Build Bitcoin Core with RapidCheck.\n-\n-    Now you can run `make` and should see the property-based tests compiled with\n-    the unit tests:\n-\n-    ```shell\n-    Making all in src\n-    [...]\n-    CXX      test/gen/test_bitcoin-crypto_gen.o\n-    CXX      test/test_bitcoin-key_properties.o\n-    ```\n-\n-5. Run the unit tests with `make check`. The property-based tests will be run\n-   with the unit tests.\n-\n-    ```shell\n-    Running tests: crypto_tests from test/crypto_tests.cpp\n-    [...]\n-    Running tests: key_properties from test/key_properties.cpp\n-    ```\n-\n-That's it! You are now running property-based tests in Bitcoin Core."
      },
      {
        "sha": "6e7a578ecc4e19bcce131626c8c1e868e678286e",
        "filename": "doc/reduce-memory.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/reduce-memory.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/reduce-memory.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-memory.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -24,8 +24,9 @@ The size of some in-memory caches can be reduced. As caches trade off memory usa\n \n ## Number of peers\n \n-- `-maxconnections=<n>` - the maximum number of connections, this defaults to `125`. Each active connection takes up some memory. Only significant if incoming\n-   connections are enabled, otherwise the number of connections will never be more than `8`.\n+- `-maxconnections=<n>` - the maximum number of connections, this defaults to 125. Each active connection takes up some\n+  memory. This option applies only if incoming connections are enabled, otherwise the number of connections will never\n+  be more than 10. Of the 10 outbound peers, there can be 8 full-relay connections and 2 block-relay-only ones.\n \n ## Thread configuration\n "
      },
      {
        "sha": "e39e43df7a8bf4f61f5878a53363ad5fcef5632e",
        "filename": "doc/reduce-traffic.md",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -3,8 +3,10 @@ Reduce Traffic\n \n Some node operators need to deal with bandwidth caps imposed by their ISPs.\n \n-By default, Bitcoin Core allows up to 125 connections to different peers, 8 of\n-which are outbound. You can therefore, have at most 117 inbound connections.\n+By default, Bitcoin Core allows up to 125 connections to different peers, 10 of\n+which are outbound. You can therefore, have at most 115 inbound connections.\n+Of the 10 outbound peers, there can be 8 full-relay connections and 2\n+block-relay-only ones.\n \n The default settings can result in relatively significant traffic consumption.\n \n@@ -26,7 +28,7 @@ calculating the target.\n \n ## 2. Disable \"listening\" (`-listen=0`)\n \n-Disabling listening will result in fewer nodes connected (remember the maximum of 8\n+Disabling listening will result in fewer nodes connected (remember the maximum of 10\n outbound peers). Fewer nodes will result in less traffic usage as you are relaying\n blocks and transactions to fewer nodes.\n \n@@ -44,7 +46,11 @@ with other peers, you can disable transaction relay.\n Be reminded of the effects of this setting.\n \n - Fee estimation will no longer work.\n-- Not relaying other's transactions could hurt your privacy if used while a\n-  wallet is loaded or if you use the node to broadcast transactions.\n+- It sets the flag \"-walletbroadcast\" to be \"0\", only if it is currently unset.\n+  Doing so disables the automatic broadcasting of transactions from wallet. Not\n+  relaying other's transactions could hurt your privacy if used while a wallet\n+  is loaded or if you use the node to broadcast transactions.\n+- If a peer is whitelisted and \"-whitelistforcerelay\" is set to \"1\" (which will\n+  also set \"whitelistrelay\" to \"1\"), we will still receive and relay their transactions.\n - It makes block propagation slower because compact block relay can only be\n   used when transaction relay is enabled."
      },
      {
        "sha": "0a7a31cc9d0f50422a38ee57b5218b323794b4d2",
        "filename": "doc/release-notes-16528.md",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-notes-16528.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-notes-16528.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16528.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,120 @@\n+Wallet\n+------\n+\n+### Experimental Descriptor Wallets\n+\n+Please note that Descriptor Wallets are still experimental and not all expected functionality\n+is available. Additionally there may be some bugs and current functions may change in the future.\n+Bugs and missing functionality can be reported to the [issue tracker](https://github.com/bitcoin/bitcoin/issues).\n+\n+0.21 introduces a new type of wallet - Descriptor Wallets. Descriptor Wallets store\n+scriptPubKey information using descriptors. This is in contrast to the Legacy Wallet\n+structure where keys are used to generate scriptPubKeys and addresses. Because of this\n+shift to being script based instead of key based, many of the confusing things that Legacy\n+Wallets do are not possible with Descriptor Wallets. Descriptor Wallets use a definition\n+of \"mine\" for scripts which is simpler and more intuitive than that used by Legacy Wallets.\n+Descriptor Wallets also uses different semantics for watch-only things and imports.\n+\n+As Descriptor Wallets are a new type of wallet, their introduction does not affect existing wallets.\n+Users who already have a Bitcoin Core wallet can continue to use it as they did before without\n+any change in behavior. Newly created Legacy Wallets (which is the default type of wallet) will\n+behave as they did in previous versions of Bitcoin Core.\n+\n+The differences between Descriptor Wallets and Legacy Wallets are largely limited to non user facing\n+things. They are intended to behave similarly except for the import/export and watchonly functionality\n+as described below.\n+\n+#### Creating Descriptor Wallets\n+\n+Descriptor Wallets are not created by default. They must be explicitly created using the\n+`createwallet` RPC or via the GUI. A `descriptors` option has been added to `createwallet`.\n+Setting `descriptors` to `true` will create a Descriptor Wallet instead of a Legacy Wallet.\n+\n+In the GUI, a checkbox has been added to the Create Wallet Dialog to indicate that a\n+Descriptor Wallet should be created.\n+\n+Without those options being set, a Legacy Wallet will be created instead. Additionally the\n+Default Wallet created upon first startup of Bitcoin Core will be a Legacy Wallet.\n+\n+#### `IsMine` Semantics\n+\n+`IsMine` refers to the function used to determine whether a script belongs to the wallet.\n+This is used to determine whether an output belongs to the wallet. `IsMine` in Legacy Wallets\n+returns true if the wallet would be able to sign an input that spends an output with that script.\n+Since keys can be involved in a variety of different scripts, this definition for `IsMine` can\n+lead to many unexpected scripts being considered part of the wallet.\n+\n+With Descriptor Wallets, descriptors explicitly specify the set of scripts that are owned by\n+the wallet. Since descriptors are deterministic and easily enumerable, users will know exactly\n+what scripts the wallet will consider to belong to it. Additionally the implementation of `IsMine`\n+in Descriptor Wallets is far simpler than for Legacy Wallets. Notably, in Legacy Wallets, `IsMine`\n+allowed for users to take one type of address (e.g. P2PKH), mutate it into another address type\n+(e.g. P2WPKH), and the wallet would still detect outputs sending to the new address type\n+even without that address being requested from the wallet. Descriptor Wallets does not\n+allow for this and will only watch for the addresses that were explicitly requested from the wallet.\n+\n+These changes to `IsMine` will make it easier to reason about what scripts the wallet will\n+actually be watching for in outputs. However for the vast majority of users, this change is\n+largely transparent and will not have noticeable effect.\n+\n+#### Imports and Exports\n+\n+In Legacy Wallets, raw scripts and keys could be imported to the wallet. Those imported scripts\n+and keys are treated separately from the keys generated by the wallet. This complicates the `IsMine`\n+logic as it has to distinguish between spendable and watchonly.\n+\n+Descriptor Wallets handle importing scripts and keys differently. Only complete descriptors can be\n+imported. These descriptors are then added to the wallet as if it were a descriptor generated by\n+the wallet itself. This simplifies the `IsMine` logic so that it no longer has to distinguish\n+between spendable and watchonly. As such, the watchonly model for Descriptor Wallets is also\n+different and described in more detail in the next section.\n+\n+To import into a Descriptor Wallet, a new `importdescriptors` RPC has been added that uses a syntax\n+similar to that of `importmulti`.\n+\n+As Legacy Wallets and Descriptor Wallets use different mechanisms for storing and importing scripts and keys\n+the existing import RPCs have been disabled for descriptor wallets.\n+New export RPCs for Descriptor Wallets have not yet been added.\n+\n+The following RPCs are disabled for Descriptor Wallets:\n+\n+* importprivkey\n+* importpubkey\n+* importaddress\n+* importwallet\n+* dumpprivkey\n+* dumpwallet\n+* importmulti\n+* addmultisigaddress\n+* sethdseed\n+\n+#### Watchonly Wallets\n+\n+A Legacy Wallet contains both private keys and scripts that were being watched.\n+Those watched scripts would not contribute to your normal balance. In order to see the watchonly\n+balance and to use watchonly things in transactions, an `include_watchonly` option was added\n+to many RPCs that would allow users to do that. However it is easy to forget to include this option.\n+\n+Descriptor Wallets move to a per-wallet watchonly model. Instead an entire wallet is considered to be\n+watchonly depending on whether it was created with private keys disabled. This eliminates the need\n+to distinguish between things that are watchonly and things that are not within a wallet itself.\n+\n+This change does have a caveat. If a Descriptor Wallet with private keys *enabled* has\n+a multiple key descriptor without all of the private keys (e.g. `multi(...)` with only one private key),\n+then the wallet will fail to sign and broadcast transactions. Such wallets would need to use the PSBT\n+workflow but the typical GUI Send, `sendtoaddress`, etc. workflows would still be available, just\n+non-functional.\n+\n+This issue is worsened if the wallet contains both single key (e.g. `wpkh(...)`) descriptors and such\n+multiple key descriptors as some transactions could be signed and broadast and others not. This is\n+due to some transactions containing only single key inputs, while others would contain both single\n+key and multiple key inputs, depending on which are available and how the coin selection algorithm\n+selects inputs. However this is not considered to be a supported use case; multisigs\n+should be in their own wallets which do not already have descriptors. Although users cannot export\n+descriptors with private keys for now as explained earlier.\n+\n+#### BIP 44/49/84 Support\n+\n+The change to using descriptors changes the default derivation paths used by Bitcoin Core\n+to adhere to BIP 44/49/84. Descriptors with different derivation paths can be imported without\n+issue."
      },
      {
        "sha": "f57a62eeb7d48370697992edec0d2cc0e72916d8",
        "filename": "doc/release-notes-18918.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-notes-18918.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-notes-18918.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18918.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,3 @@\n+# Wallet\n+\n+The `-salvagewallet` startup option has been removed. A new `salvage` command has been added to the `bitcoin-wallet` tool which performs the salvage operations that `-salvagewallet` did."
      },
      {
        "sha": "bcdc591eca2f8a9a668caf71d088d5b2142a45bd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 43,
        "deletions": 115,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -34,173 +34,101 @@ How to Upgrade\n ==============\n \n If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n+shut down (which might take a few minutes in some cases), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n Upgrading directly from a version of Bitcoin Core that has reached its EOL is\n-possible, but it might take some time if the datadir needs to be migrated. Old\n+possible, but it might take some time if the data directory needs to be migrated. Old\n wallet versions of Bitcoin Core are generally supported.\n \n Compatibility\n ==============\n \n-Bitcoin Core is supported and extensively tested on operating systems using\n-the Linux kernel, macOS 10.12+, and Windows 7 and newer. It is not recommended\n-to use Bitcoin Core on unsupported systems.\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-as frequently tested on them.\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.12+, and Windows 7 and newer.  Bitcoin\n+Core should also work on most other Unix-like systems but is not as\n+frequently tested on them.  It is not recommended to use Bitcoin Core on\n+unsupported systems.\n \n From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\n longer supported. Additionally, Bitcoin Core does not yet change appearance\n when macOS \"dark mode\" is activated.\n \n-In addition to previously supported CPU platforms, this release's pre-compiled\n-distribution provides binaries for the RISC-V platform.\n-\n Notable changes\n ===============\n \n P2P and network changes\n -----------------------\n \n-#### Removal of reject network messages from Bitcoin Core (BIP61)\n-\n-The command line option to enable BIP61 (`-enablebip61`) has been removed.\n-\n-This feature has been disabled by default since Bitcoin Core version 0.18.0.\n-Nodes on the network can not generally be trusted to send valid (\"reject\")\n-messages, so this should only ever be used when connected to a trusted node.\n-Please use the recommended alternatives if you rely on this deprecated feature:\n-\n-* Testing or debugging of implementations of the Bitcoin P2P network protocol\n-  should be done by inspecting the log messages that are produced by a recent\n-  version of Bitcoin Core. Bitcoin Core logs debug messages\n-  (`-debug=<category>`) to a stream (`-printtoconsole`) or to a file\n-  (`-debuglogfile=<debug.log>`).\n-\n-* Testing the validity of a block can be achieved by specific RPCs:\n-  - `submitblock`\n-  - `getblocktemplate` with `'mode'` set to `'proposal'` for blocks with\n-    potentially invalid POW\n-\n-* Testing the validity of a transaction can be achieved by specific RPCs:\n-  - `sendrawtransaction`\n-  - `testmempoolaccept`\n-\n-* Wallets should not use the absence of \"reject\" messages to indicate a\n-  transaction has propagated the network, nor should wallets use \"reject\"\n-  messages to set transaction fees. Wallets should rather use fee estimation\n-  to determine transaction fees and set replace-by-fee if desired. Thus, they\n-  could wait until the transaction has confirmed (taking into account the fee\n-  target they set (compare the RPC `estimatesmartfee`)) or listen for the\n-  transaction announcement by other network peers to check for propagation.\n-\n-The removal of BIP61 REJECT message support also has the following minor RPC\n-and logging implications:\n-\n-* `testmempoolaccept` and `sendrawtransaction` no longer return the P2P REJECT\n-  code when a transaction is not accepted to the mempool. They still return the\n-  verbal reject reason.\n-\n-* Log messages that previously reported the REJECT code when a transaction was\n-  not accepted to the mempool now no longer report the REJECT code. The reason\n-  for rejection is still reported.\n+- The mempool now tracks whether transactions submitted via the wallet or RPCs\n+  have been successfully broadcast. Every 10-15 minutes, the node will try to\n+  announce unbroadcast transactions until a peer requests it via a `getdata`\n+  message or the transaction is removed from the mempool for other reasons.\n+  The node will not track the broadcast status of transactions submitted to the\n+  node using P2P relay. This version reduces the initial broadcast guarantees\n+  for wallet transactions submitted via P2P to a node running the wallet. (#18038)\n \n Updated RPCs\n ------------\n \n-- `testmempoolaccept` and `sendrawtransaction` no longer return the P2P REJECT\n-  code when a transaction is not accepted to the mempool. See the Section\n-  _Removal of reject network messages from Bitcoin Core (BIP61)_ for details on\n-  the removal of BIP61 REJECT message support.\n-\n-- A new descriptor type `sortedmulti(...)` has been added to support multisig scripts where the public keys are sorted lexicographically in the resulting script.\n+- `getmempoolinfo` now returns an additional `unbroadcastcount` field. The\n+  mempool tracks locally submitted transactions until their initial broadcast\n+  is acknowledged by a peer. This field returns the count of transactions\n+  waiting for acknowledgement.\n \n-- `walletprocesspsbt` and `walletcreatefundedpsbt` now include BIP 32 derivation paths by default for public keys if we know them. This can be disabled by setting `bip32derivs` to `false`.\n+- Mempool RPCs such as `getmempoolentry` and `getrawmempool` with\n+  `verbose=true` now return an additional `unbroadcast` field. This indicates\n+  whether initial broadcast of the transaction has been acknowledged by a\n+  peer. `getmempoolancestors` and `getmempooldescendants` are also updated.\n \n-Build System\n-------------\n \n-- OpenSSL is no longer used by Bitcoin Core. The last usage of the library\n-was removed in #17265.\n-\n-- glibc 2.17 or greater is now required to run the release binaries. This\n-retains compatibility with RHEL 7, CentOS 7, Debian 8 and Ubuntu 14.04 LTS.\n-Further details can be found in #17538.\n+Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n \n New RPCs\n --------\n \n-New settings\n+Build System\n ------------\n \n-- RPC Whitelist system. It can give certain RPC users permissions to only some RPC calls.\n-It can be set with two command line arguments (`rpcwhitelist` and `rpcwhitelistdefault`). (#12763)\n-\n-- A new `-asmap` configuration option has been added to enable IP-to-ASN mapping\n-  for bucketing of the network peers to diversify the network connections. The\n-  legacy /16 prefix mapping remains the default. See [issue\n-  #16599](https://github.com/bitcoin/bitcoin/issues/16599), [PR\n-  #16702](https://github.com/bitcoin/bitcoin/pull/16702), and the `bitcoind\n-  help` for more information. This option is experimental and subject to changes\n-  or removal in future releases.\n-\n Updated settings\n ----------------\n \n-Importing blocks upon startup via the `bootstrap.dat` file no longer occurs by default. The file must now be specified with `-loadblock=<file>`.\n-\n--  The `-debug=db` logging category has been renamed to `-debug=walletdb`, to distinguish it from `coindb`.\n-   `-debug=db` has been deprecated and will be removed in the next major release.\n+Changes to Wallet or GUI related settings can be found in the GUI or Wallet  section below.\n \n-GUI changes\n------------\n-\n-- The \"Start Bitcoin Core on system login\" option has been removed on macOS.\n+New settings\n+------------\n \n Wallet\n ------\n \n-- The wallet now by default uses bech32 addresses when using RPC, and creates native segwit change outputs.\n-- The way that output trust was computed has been fixed in #16766, which impacts confirmed/unconfirmed balance status and coin selection.\n+- To improve wallet privacy, the frequency of wallet rebroadcast attempts is\n+  reduced from approximately once every 15 minutes to once every 12-36 hours.\n+  To maintain a similar level of guarantee for initial broadcast of wallet\n+  transactions, the mempool tracks these transactions as a part of the newly\n+  introduced unbroadcast set. See the \"P2P and network changes\" section for\n+  more information on the unbroadcast set. (#18038)\n \n-- The RPC gettransaction, listtransactions and listsinceblock responses now also\n-includes the height of the block that contains the wallet transaction, if any.\n+- The wallet can create a transaction without change even when the keypool is\n+  empty. Previously it failed. (#17219)\n \n-- RPC `getaddressinfo` changes:\n+#### Wallet RPC changes\n \n-  - the `label` field has been deprecated in favor of the `labels` field and\n-    will be removed in 0.21. It can be re-enabled in the interim by launching\n-    with `-deprecatedrpc=label`.\n+- The `upgradewallet` RPC replaces the `-upgradewallet` command line option.\n+  (#15761)\n+- The `settxfee` RPC will fail if the fee was set higher than the `-maxtxfee`\n+  command line setting. The wallet will already fail to create transactions\n+  with fees higher than `-maxtxfee`. (#18467)\n \n-  - the `labels` behavior of returning an array of JSON objects containing name\n-    and purpose key/value pairs has been deprecated in favor of an array of\n-    label names and will be removed in 0.21. The previous behavior can be\n-    re-enabled in the interim by launching with `-deprecatedrpc=labelspurpose`.\n+GUI changes\n+-----------\n \n Low-level changes\n =================\n \n-Command line\n-------------\n-\n-Command line options prefixed with main/test/regtest network names like\n-`-main.port=8333` `-test.server=1` previously were allowed but ignored. Now\n-they trigger \"Invalid parameter\" errors on startup.\n-\n Tests\n -----\n \n-- It is now an error to use an unqualified `walletdir=path` setting in the config file if running on testnet or regtest\n-  networks. The setting now needs to be qualified as `chain.walletdir=path` or placed in the appropriate `[chain]`\n-  section. (#17447)\n-\n-- `-fallbackfee` was 0 (disabled) by default for the main chain, but 0.0002 by default for the test chains. Now it is 0\n-  by default for all chains. Testnet and regtest users will have to add `fallbackfee=0.0002` to their configuration if\n-  they weren't setting it and they want it to keep working like before. (#16524)\n-\n Credits\n =======\n "
      },
      {
        "sha": "a61b67c35f07deb7f6c648544b03939de81b40ef",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -219,7 +219,7 @@ Codesigner only: Commit the detached codesign payloads:\n     rm -rf *\n     tar xf signature-osx.tar.gz\n     tar xf signature-win.tar.gz\n-    git add -a\n+    git add -A\n     git commit -m \"point to ${VERSION}\"\n     git tag -s v${VERSION} HEAD\n     git push the current branch and new tag"
      },
      {
        "sha": "1931302ddafdb745e72f3aeecf3674aa271cbcbe",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -23,7 +23,8 @@ On a high level, these strings are to be translated:\n \n ### GUI strings\n \n-Anything that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n+Do not translate technical or extremely rare errors.\n+Anything else that appears to the user in the GUI is to be translated. This includes labels, menu items, button texts, tooltips and window titles.\n This includes messages passed to the GUI through the UI interface through `InitMessage`, `ThreadSafeMessageBox` or `ShowProgress`.\n \n General recommendations"
      },
      {
        "sha": "3a1194de1cbd6a4b230d1a6f4732bb30266ca21e",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -96,7 +96,7 @@ ZeroMQ endpoint specifiers for TCP (and others) are documented in the\n Client side, then, the ZeroMQ subscriber socket must have the\n ZMQ_SUBSCRIBE option set to one or either of these prefixes (for\n instance, just `hash`); without doing so will result in no messages\n-arriving. Please see `contrib/zmq/zmq_sub.py` for a working example.\n+arriving. Please see [`contrib/zmq/zmq_sub.py`](/contrib/zmq/zmq_sub.py) for a working example.\n \n ## Remarks\n "
      },
      {
        "sha": "1153df933fabb52d1d408c7dbf6b52ba31ee05fd",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -18,31 +18,27 @@ else\n     exit 1\n fi\n \n-git_check_in_repo() {\n-    ! { git status --porcelain -uall --ignored \"$@\" 2>/dev/null || echo '??'; } | grep -q '?'\n-}\n-\n-DESC=\"\"\n-SUFFIX=\"\"\n-if [ \"${BITCOIN_GENBUILD_NO_GIT}\" != \"1\" ] && [ -e \"$(command -v git)\" ] && [ \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = \"true\" ] && git_check_in_repo share/genbuild.sh; then\n+GIT_TAG=\"\"\n+GIT_COMMIT=\"\"\n+if [ \"${BITCOIN_GENBUILD_NO_GIT}\" != \"1\" ] && [ -e \"$(command -v git)\" ] && [ \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = \"true\" ]; then\n     # clean 'dirty' status of touched files that haven't been modified\n     git diff >/dev/null 2>/dev/null\n \n     # if latest commit is tagged and not dirty, then override using the tag name\n     RAWDESC=$(git describe --abbrev=0 2>/dev/null)\n     if [ \"$(git rev-parse HEAD)\" = \"$(git rev-list -1 $RAWDESC 2>/dev/null)\" ]; then\n-        git diff-index --quiet HEAD -- && DESC=$RAWDESC\n+        git diff-index --quiet HEAD -- && GIT_TAG=$RAWDESC\n     fi\n \n     # otherwise generate suffix from git, i.e. string like \"59887e8-dirty\"\n-    SUFFIX=$(git rev-parse --short HEAD)\n-    git diff-index --quiet HEAD -- || SUFFIX=\"$SUFFIX-dirty\"\n+    GIT_COMMIT=$(git rev-parse --short HEAD)\n+    git diff-index --quiet HEAD -- || GIT_COMMIT=\"$GIT_COMMIT-dirty\"\n fi\n \n-if [ -n \"$DESC\" ]; then\n-    NEWINFO=\"#define BUILD_DESC \\\"$DESC\\\"\"\n-elif [ -n \"$SUFFIX\" ]; then\n-    NEWINFO=\"#define BUILD_SUFFIX $SUFFIX\"\n+if [ -n \"$GIT_TAG\" ]; then\n+    NEWINFO=\"#define BUILD_GIT_TAG \\\"$GIT_TAG\\\"\"\n+elif [ -n \"$GIT_COMMIT\" ]; then\n+    NEWINFO=\"#define BUILD_GIT_COMMIT \\\"$GIT_COMMIT\\\"\"\n else\n     NEWINFO=\"// No build information available\"\n fi"
      },
      {
        "sha": "5431909bb22d2c25b42f48ba90b2ab618a76e98f",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -2,6 +2,11 @@ Name \"@PACKAGE_NAME@ (64-bit)\"\n \n RequestExecutionLevel highest\n SetCompressor /SOLID lzma\n+SetDateSave off\n+\n+# Uncomment these lines when investigating reproducibility errors\n+#SetCompress off\n+#SetDatablockOptimize off\n \n # General Symbol Definitions\n !define REGKEY \"SOFTWARE\\$(^Name)\"\n@@ -46,7 +51,6 @@ Var StartMenuGroup\n !insertmacro MUI_LANGUAGE English\n \n # Installer attributes\n-OutFile @abs_top_srcdir@/@PACKAGE_TARNAME@-@PACKAGE_VERSION@-win64-setup-unsigned.exe\n InstallDir $PROGRAMFILES64\\Bitcoin\n CRCCheck on\n XPStyle on"
      },
      {
        "sha": "2b004691fd8569d529efc28ace7ca0c623b6e7e5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 43,
        "deletions": 31,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -85,6 +85,10 @@ if BUILD_BITCOIND\n   bin_PROGRAMS += bitcoind\n endif\n \n+if BUILD_BITCOIN_NODE\n+  bin_PROGRAMS += bitcoin-node\n+endif\n+\n if BUILD_BITCOIN_CLI\n   bin_PROGRAMS += bitcoin-cli\n endif\n@@ -215,13 +219,15 @@ BITCOIN_CORE_H = \\\n   util/check.h \\\n   util/error.h \\\n   util/fees.h \\\n+  util/golombrice.h \\\n   util/spanparsing.h \\\n   util/system.h \\\n   util/macros.h \\\n   util/memory.h \\\n   util/message.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n+  util/ref.h \\\n   util/settings.h \\\n   util/string.h \\\n   util/threadnames.h \\\n@@ -242,6 +248,7 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/rpcwallet.h \\\n+  wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -350,6 +357,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/load.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n+  wallet/salvage.cpp \\\n   wallet/scriptpubkeyman.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\\n@@ -495,7 +503,6 @@ libbitcoin_util_a_SOURCES = \\\n   support/lockedpool.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n-  compat/glibc_sanity_fdelt.cpp \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n@@ -523,9 +530,12 @@ libbitcoin_util_a_SOURCES = \\\n   util/strencodings.cpp \\\n   util/string.cpp \\\n   util/time.cpp \\\n-  util/url.cpp \\\n   $(BITCOIN_CORE_H)\n \n+if USE_LIBEVENT\n+libbitcoin_util_a_SOURCES += util/url.cpp\n+endif\n+\n if GLIBC_BACK_COMPAT\n libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n AM_LDFLAGS += $(COMPAT_LDFLAGS)\n@@ -543,22 +553,21 @@ libbitcoin_cli_a_SOURCES = \\\n nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h\n #\n \n-# bitcoind binary #\n-bitcoind_SOURCES = bitcoind.cpp\n-bitcoind_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-bitcoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+# bitcoind & bitcoin-node binaries #\n+bitcoin_daemon_sources = bitcoind.cpp\n+bitcoin_bin_cppflags = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_bin_cxxflags = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_bin_ldflags = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n if TARGET_WINDOWS\n-bitcoind_SOURCES += bitcoind-res.rc\n+bitcoin_daemon_sources += bitcoind-res.rc\n endif\n \n-bitcoind_LDADD = \\\n-  $(LIBBITCOIN_SERVER) \\\n+bitcoin_bin_ldadd = \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n-  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n@@ -567,7 +576,19 @@ bitcoind_LDADD = \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n+bitcoin_bin_ldadd += $(BOOST_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n+\n+bitcoind_SOURCES = $(bitcoin_daemon_sources)\n+bitcoind_CPPFLAGS = $(bitcoin_bin_cppflags)\n+bitcoind_CXXFLAGS = $(bitcoin_bin_cxxflags)\n+bitcoind_LDFLAGS = $(bitcoin_bin_ldflags)\n+bitcoind_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd)\n+\n+bitcoin_node_SOURCES = $(bitcoin_daemon_sources)\n+bitcoin_node_CPPFLAGS = $(bitcoin_bin_cppflags)\n+bitcoin_node_CXXFLAGS = $(bitcoin_bin_cxxflags)\n+bitcoin_node_LDFLAGS = $(bitcoin_bin_ldflags)\n+bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -611,29 +632,14 @@ bitcoin_tx_LDADD += $(BOOST_LIBS)\n \n # bitcoin-wallet binary #\n bitcoin_wallet_SOURCES = bitcoin-wallet.cpp\n-bitcoin_wallet_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-bitcoin_wallet_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-bitcoin_wallet_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+bitcoin_wallet_CPPFLAGS = $(bitcoin_bin_cppflags)\n+bitcoin_wallet_CXXFLAGS = $(bitcoin_bin_cxxflags)\n+bitcoin_wallet_LDFLAGS = $(bitcoin_bin_ldflags)\n+bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(bitcoin_bin_ldadd)\n \n if TARGET_WINDOWS\n bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n endif\n-\n-bitcoin_wallet_LDADD = \\\n-  $(LIBBITCOIN_WALLET_TOOL) \\\n-  $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_CONSENSUS) \\\n-  $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBBITCOIN_ZMQ) \\\n-  $(LIBLEVELDB) \\\n-  $(LIBLEVELDB_SSE42) \\\n-  $(LIBMEMENV) \\\n-  $(LIBSECP256K1) \\\n-  $(LIBUNIVALUE)\n-\n-bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(ZMQ_LIBS)\n #\n \n # bitcoinconsensus library #\n@@ -703,6 +709,11 @@ if TARGET_DARWIN\n \t$(AM_V_at) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n+if TARGET_WINDOWS\n+\t@echo \"Checking Windows dynamic libraries...\"\n+\t$(AM_V_at) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+endif\n+\n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\"\n \t$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n@@ -720,6 +731,7 @@ include Makefile.leveldb.include\n endif\n \n include Makefile.test_util.include\n+include Makefile.test_fuzz.include\n \n if ENABLE_TESTS\n include Makefile.test.include"
      },
      {
        "sha": "93b5156af34c005e614e0709324bff2fa0d93e5d",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -12,6 +12,7 @@ GENERATED_BENCH_FILES = $(RAW_BENCH_FILES:.raw=.raw.h)\n \n bench_bench_bitcoin_SOURCES = \\\n   $(RAW_BENCH_FILES) \\\n+  bench/addrman.cpp \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n@@ -28,6 +29,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n   bench/gcs_filter.cpp \\\n+  bench/hashpadding.cpp \\\n   bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n   bench/mempool_stress.cpp \\\n@@ -43,12 +45,11 @@ bench_bench_bitcoin_SOURCES = \\\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n \n-bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n+bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\"
      },
      {
        "sha": "8a28f4f24924eb5c74674886113744e1a7d260db",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -36,7 +36,7 @@ LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_POSIX\n endif\n \n leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)\n-leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+leveldb_libleveldb_a_CXXFLAGS = $(filter-out -Wconditional-uninitialized -Werror=conditional-uninitialized -Wsuggest-override -Werror=suggest-override, $(AM_CXXFLAGS)) $(PIE_FLAGS)\n \n leveldb_libleveldb_a_SOURCES=\n leveldb_libleveldb_a_SOURCES += leveldb/port/port_stdcxx.h"
      },
      {
        "sha": "13bfea76460632d55f6a3764f71e66ccd2ebc30a",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 31,
        "deletions": 12,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -3,6 +3,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n bin_PROGRAMS += qt/bitcoin-qt\n+\n+if BUILD_BITCOIN_GUI\n+  bin_PROGRAMS += bitcoin-gui\n+endif\n+\n EXTRA_LIBRARIES += qt/libbitcoinqt.a\n \n # bitcoin qt core #\n@@ -294,29 +299,43 @@ QT_FORMS_H=$(join $(dir $(QT_FORMS_UI)),$(addprefix ui_, $(notdir $(QT_FORMS_UI:\n # Most files will depend on the forms and moc files as includes. Generate them\n # before anything else.\n $(QT_MOC): $(QT_FORMS_H)\n-$(qt_libbitcoinqt_a_OBJECTS) $(qt_bitcoin_qt_OBJECTS) : | $(QT_MOC)\n+$(qt_libbitcoinqt_a_OBJECTS) $(qt_bitcoin_qt_OBJECTS) $(bitcoin_gui_OBJECTS) : | $(QT_MOC)\n \n-# bitcoin-qt binary #\n-qt_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n+# bitcoin-qt and bitcoin-gui binaries #\n+bitcoin_qt_cppflags = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QR_CFLAGS)\n-qt_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n+bitcoin_qt_cxxflags = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n \n-qt_bitcoin_qt_SOURCES = qt/main.cpp\n+bitcoin_qt_sources = qt/main.cpp\n if TARGET_WINDOWS\n-  qt_bitcoin_qt_SOURCES += $(BITCOIN_RC)\n+  bitcoin_qt_sources += $(BITCOIN_RC)\n endif\n-qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n+bitcoin_qt_ldadd = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n+bitcoin_qt_ldadd += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n endif\n if ENABLE_ZMQ\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n+bitcoin_qt_ldadd += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n+bitcoin_qt_ldadd += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n-qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-qt_bitcoin_qt_LIBTOOLFLAGS = $(AM_LIBTOOLFLAGS) --tag CXX\n+bitcoin_qt_ldflags = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+bitcoin_qt_libtoolflags = $(AM_LIBTOOLFLAGS) --tag CXX\n+\n+qt_bitcoin_qt_CPPFLAGS = $(bitcoin_qt_cppflags)\n+qt_bitcoin_qt_CXXFLAGS = $(bitcoin_qt_cxxflags)\n+qt_bitcoin_qt_SOURCES = $(bitcoin_qt_sources)\n+qt_bitcoin_qt_LDADD = $(bitcoin_qt_ldadd)\n+qt_bitcoin_qt_LDFLAGS = $(bitcoin_qt_ldflags)\n+qt_bitcoin_qt_LIBTOOLFLAGS = $(bitcoin_qt_libtoolflags)\n+\n+bitcoin_gui_CPPFLAGS = $(bitcoin_qt_cppflags)\n+bitcoin_gui_CXXFLAGS = $(bitcoin_qt_cxxflags)\n+bitcoin_gui_SOURCES = $(bitcoin_qt_sources)\n+bitcoin_gui_LDADD = $(bitcoin_qt_ldadd)\n+bitcoin_gui_LDFLAGS = $(bitcoin_qt_ldflags)\n+bitcoin_gui_LIBTOOLFLAGS = $(bitcoin_qt_libtoolflags)\n \n #locale/foo.ts -> locale/foo.qm\n QT_QM=$(QT_TS:.ts=.qm)"
      },
      {
        "sha": "3ac21b1326fa48da547bbed1299a07bcdb78933e",
        "filename": "src/Makefile.qt_locale.include",
        "status": "modified",
        "additions": 10,
        "deletions": 25,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.qt_locale.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.qt_locale.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt_locale.include?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,47 +1,39 @@\n QT_TS = \\\n+  qt/locale/bitcoin_af.ts \\\n+  qt/locale/bitcoin_am.ts \\\n   qt/locale/bitcoin_ar.ts \\\n-  qt/locale/bitcoin_be_BY.ts \\\n+  qt/locale/bitcoin_be.ts \\\n+  qt/locale/bitcoin_bg.ts \\\n+  qt/locale/bitcoin_bn.ts \\\n+  qt/locale/bitcoin_bs.ts \\\n   qt/locale/bitcoin_ca.ts \\\n   qt/locale/bitcoin_cs.ts \\\n-  qt/locale/bitcoin_cs_CZ.ts \\\n   qt/locale/bitcoin_cy.ts \\\n   qt/locale/bitcoin_da.ts \\\n   qt/locale/bitcoin_de.ts \\\n-  qt/locale/bitcoin_de_DE.ts \\\n   qt/locale/bitcoin_el.ts \\\n-  qt/locale/bitcoin_el_GR.ts \\\n   qt/locale/bitcoin_en.ts \\\n-  qt/locale/bitcoin_en_AU.ts \\\n   qt/locale/bitcoin_en_GB.ts \\\n   qt/locale/bitcoin_eo.ts \\\n   qt/locale/bitcoin_es.ts \\\n   qt/locale/bitcoin_es_CL.ts \\\n   qt/locale/bitcoin_es_CO.ts \\\n   qt/locale/bitcoin_es_DO.ts \\\n-  qt/locale/bitcoin_es_ES.ts \\\n   qt/locale/bitcoin_es_MX.ts \\\n   qt/locale/bitcoin_es_VE.ts \\\n   qt/locale/bitcoin_et.ts \\\n-  qt/locale/bitcoin_et_EE.ts \\\n   qt/locale/bitcoin_eu.ts \\\n   qt/locale/bitcoin_fa.ts \\\n   qt/locale/bitcoin_fi.ts \\\n   qt/locale/bitcoin_fil.ts \\\n   qt/locale/bitcoin_fr.ts \\\n-  qt/locale/bitcoin_fr_CA.ts \\\n-  qt/locale/bitcoin_fr_FR.ts \\\n-  qt/locale/bitcoin_gl.ts \\\n   qt/locale/bitcoin_he.ts \\\n-  qt/locale/bitcoin_he_IL.ts \\\n   qt/locale/bitcoin_hi.ts \\\n   qt/locale/bitcoin_hr.ts \\\n   qt/locale/bitcoin_hu.ts \\\n-  qt/locale/bitcoin_hu_HU.ts \\\n   qt/locale/bitcoin_id.ts \\\n-  qt/locale/bitcoin_id_ID.ts \\\n   qt/locale/bitcoin_is.ts \\\n   qt/locale/bitcoin_it.ts \\\n-  qt/locale/bitcoin_it_IT.ts \\\n   qt/locale/bitcoin_ja.ts \\\n   qt/locale/bitcoin_ka.ts \\\n   qt/locale/bitcoin_kk.ts \\\n@@ -52,32 +44,26 @@ QT_TS = \\\n   qt/locale/bitcoin_la.ts \\\n   qt/locale/bitcoin_lt.ts \\\n   qt/locale/bitcoin_lv.ts \\\n-  qt/locale/bitcoin_lv_LV.ts \\\n   qt/locale/bitcoin_mk.ts \\\n   qt/locale/bitcoin_ml.ts \\\n   qt/locale/bitcoin_mn.ts \\\n   qt/locale/bitcoin_mr_IN.ts \\\n   qt/locale/bitcoin_ms.ts \\\n-  qt/locale/bitcoin_ms_MY.ts \\\n+  qt/locale/bitcoin_my.ts \\\n   qt/locale/bitcoin_nb.ts \\\n   qt/locale/bitcoin_ne.ts \\\n   qt/locale/bitcoin_nl.ts \\\n-  qt/locale/bitcoin_nl_NL.ts \\\n   qt/locale/bitcoin_pam.ts \\\n   qt/locale/bitcoin_pl.ts \\\n   qt/locale/bitcoin_pt.ts \\\n   qt/locale/bitcoin_pt_BR.ts \\\n-  qt/locale/bitcoin_pt_PT.ts \\\n   qt/locale/bitcoin_ro.ts \\\n-  qt/locale/bitcoin_ro_RO.ts \\\n   qt/locale/bitcoin_ru.ts \\\n-  qt/locale/bitcoin_ru_RU.ts \\\n   qt/locale/bitcoin_si.ts \\\n   qt/locale/bitcoin_sk.ts \\\n-  qt/locale/bitcoin_sk_SK.ts \\\n   qt/locale/bitcoin_sl.ts \\\n-  qt/locale/bitcoin_sl_SI.ts \\\n   qt/locale/bitcoin_sn.ts \\\n+  qt/locale/bitcoin_sq.ts \\\n   qt/locale/bitcoin_sr.ts \\\n   qt/locale/bitcoin_sr@latin.ts \\\n   qt/locale/bitcoin_sv.ts \\\n@@ -86,15 +72,14 @@ QT_TS = \\\n   qt/locale/bitcoin_te.ts \\\n   qt/locale/bitcoin_th.ts \\\n   qt/locale/bitcoin_tr.ts \\\n-  qt/locale/bitcoin_tr_TR.ts \\\n   qt/locale/bitcoin_uk.ts \\\n-  qt/locale/bitcoin_uk_UA.ts \\\n   qt/locale/bitcoin_ur.ts \\\n   qt/locale/bitcoin_uz@Cyrl.ts \\\n+  qt/locale/bitcoin_uz@Latn.ts \\\n   qt/locale/bitcoin_vi.ts \\\n-  qt/locale/bitcoin_vi_VN.ts \\\n   qt/locale/bitcoin_yo.ts \\\n   qt/locale/bitcoin_zh-Hans.ts \\\n+  qt/locale/bitcoin_zh.ts \\\n   qt/locale/bitcoin_zh_CN.ts \\\n   qt/locale/bitcoin_zh_HK.ts \\\n   qt/locale/bitcoin_zh_TW.ts"
      },
      {
        "sha": "7909cb4a0f081f0e67acd42c3ce020d6b72e3ef8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 367,
        "deletions": 118,
        "changes": 485,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -3,18 +3,23 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n FUZZ_TARGETS = \\\n+  test/fuzz/addition_overflow \\\n   test/fuzz/addr_info_deserialize \\\n+  test/fuzz/addrdb \\\n   test/fuzz/address_deserialize \\\n   test/fuzz/addrman_deserialize \\\n   test/fuzz/asmap \\\n+  test/fuzz/asmap_direct \\\n   test/fuzz/banentry_deserialize \\\n   test/fuzz/base_encode_decode \\\n   test/fuzz/bech32 \\\n   test/fuzz/block \\\n   test/fuzz/block_deserialize \\\n   test/fuzz/block_file_info_deserialize \\\n   test/fuzz/block_filter_deserialize \\\n+  test/fuzz/block_header \\\n   test/fuzz/block_header_and_short_txids_deserialize \\\n+  test/fuzz/blockfilter \\\n   test/fuzz/blockheader_deserialize \\\n   test/fuzz/blocklocator_deserialize \\\n   test/fuzz/blockmerkleroot \\\n@@ -23,23 +28,37 @@ FUZZ_TARGETS = \\\n   test/fuzz/blockundo_deserialize \\\n   test/fuzz/bloom_filter \\\n   test/fuzz/bloomfilter_deserialize \\\n+  test/fuzz/chain \\\n+  test/fuzz/checkqueue \\\n   test/fuzz/coins_deserialize \\\n+  test/fuzz/coins_view \\\n+  test/fuzz/cuckoocache \\\n   test/fuzz/decode_tx \\\n   test/fuzz/descriptor_parse \\\n   test/fuzz/diskblockindex_deserialize \\\n   test/fuzz/eval_script \\\n+  test/fuzz/fee_rate \\\n   test/fuzz/fee_rate_deserialize \\\n+  test/fuzz/fees \\\n   test/fuzz/flat_file_pos_deserialize \\\n+  test/fuzz/flatfile \\\n   test/fuzz/float \\\n+  test/fuzz/golomb_rice \\\n   test/fuzz/hex \\\n+  test/fuzz/http_request \\\n   test/fuzz/integer \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/key \\\n   test/fuzz/key_io \\\n   test/fuzz/key_origin_info_deserialize \\\n+  test/fuzz/kitchen_sink \\\n   test/fuzz/locale \\\n   test/fuzz/merkle_block_deserialize \\\n+  test/fuzz/merkleblock \\\n+  test/fuzz/message \\\n   test/fuzz/messageheader_deserialize \\\n+  test/fuzz/multiplication_overflow \\\n+  test/fuzz/net_permissions \\\n   test/fuzz/netaddr_deserialize \\\n   test/fuzz/netaddress \\\n   test/fuzz/out_point_deserialize \\\n@@ -51,7 +70,11 @@ FUZZ_TARGETS = \\\n   test/fuzz/parse_univalue \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n+  test/fuzz/policy_estimator \\\n+  test/fuzz/pow \\\n   test/fuzz/prefilled_transaction_deserialize \\\n+  test/fuzz/prevector \\\n+  test/fuzz/primitives_transaction \\\n   test/fuzz/process_message \\\n   test/fuzz/process_message_addr \\\n   test/fuzz/process_message_block \\\n@@ -77,21 +100,35 @@ FUZZ_TARGETS = \\\n   test/fuzz/process_message_tx \\\n   test/fuzz/process_message_verack \\\n   test/fuzz/process_message_version \\\n+  test/fuzz/process_messages \\\n+  test/fuzz/protocol \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n   test/fuzz/psbt_output_deserialize \\\n   test/fuzz/pub_key_deserialize \\\n+  test/fuzz/random \\\n+  test/fuzz/rbf \\\n   test/fuzz/rolling_bloom_filter \\\n   test/fuzz/script \\\n+  test/fuzz/script_bitcoin_consensus \\\n+  test/fuzz/script_descriptor_cache \\\n   test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n+  test/fuzz/script_interpreter \\\n   test/fuzz/script_ops \\\n+  test/fuzz/script_sigcache \\\n+  test/fuzz/script_sign \\\n   test/fuzz/scriptnum_ops \\\n   test/fuzz/service_deserialize \\\n+  test/fuzz/signature_checker \\\n   test/fuzz/snapshotmetadata_deserialize \\\n+  test/fuzz/span \\\n   test/fuzz/spanparsing \\\n+  test/fuzz/string \\\n   test/fuzz/strprintf \\\n   test/fuzz/sub_net_deserialize \\\n+  test/fuzz/system \\\n+  test/fuzz/timedata \\\n   test/fuzz/transaction \\\n   test/fuzz/tx_in \\\n   test/fuzz/tx_in_deserialize \\\n@@ -130,17 +167,12 @@ BITCOIN_TEST_SUITE = \\\n   test/main.cpp \\\n   $(TEST_UTIL_H)\n \n-FUZZ_SUITE = \\\n-  test/fuzz/fuzz.cpp \\\n-  test/fuzz/fuzz.h \\\n-  test/fuzz/FuzzedDataProvider.h \\\n-  test/fuzz/util.h\n-\n FUZZ_SUITE_LD_COMMON = \\\n  $(LIBBITCOIN_SERVER) \\\n  $(LIBBITCOIN_COMMON) \\\n  $(LIBBITCOIN_UTIL) \\\n  $(LIBTEST_UTIL) \\\n+ $(LIBTEST_FUZZ) \\\n  $(LIBBITCOIN_CONSENSUS) \\\n  $(LIBBITCOIN_CRYPTO) \\\n  $(LIBBITCOIN_CLI) \\\n@@ -183,6 +215,7 @@ BITCOIN_TESTS =\\\n   test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n+  test/interfaces_tests.cpp \\\n   test/key_io_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n@@ -202,6 +235,7 @@ BITCOIN_TESTS =\\\n   test/prevector_tests.cpp \\\n   test/raii_event_tests.cpp \\\n   test/random_tests.cpp \\\n+  test/ref_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n@@ -227,18 +261,11 @@ BITCOIN_TESTS =\\\n   test/uint256_tests.cpp \\\n   test/util_tests.cpp \\\n   test/validation_block_tests.cpp \\\n+  test/validation_chainstatemanager_tests.cpp \\\n   test/validation_flush_tests.cpp \\\n+  test/validationinterface_tests.cpp \\\n   test/versionbits_tests.cpp\n \n-if ENABLE_PROPERTY_TESTS\n-BITCOIN_TESTS += \\\n-  test/key_properties.cpp\n-\n-BITCOIN_TEST_SUITE += \\\n-  test/gen/crypto_gen.cpp \\\n-  test/gen/crypto_gen.h\n-endif\n-\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   wallet/test/db_tests.cpp \\\n@@ -268,7 +295,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(BDB_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n+test_test_bitcoin_LDADD += $(BDB_LIBS) $(MINIUPNPC_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ\n@@ -277,587 +304,809 @@ endif\n \n if ENABLE_FUZZ\n \n+test_fuzz_addition_overflow_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_addition_overflow_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addition_overflow_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_addition_overflow_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addition_overflow_SOURCES = test/fuzz/addition_overflow.cpp\n+\n test_fuzz_addr_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDR_INFO_DESERIALIZE=1\n test_fuzz_addr_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_addr_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_addr_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_addr_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_addr_info_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_addrdb_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_addrdb_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addrdb_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_addrdb_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addrdb_SOURCES = test/fuzz/addrdb.cpp\n \n test_fuzz_address_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE=1\n test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_address_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_addrman_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_addrman_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_addrman_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_asmap_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_asmap_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_asmap_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_asmap_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_asmap_SOURCES = $(FUZZ_SUITE) test/fuzz/asmap.cpp\n+test_fuzz_asmap_SOURCES = test/fuzz/asmap.cpp\n+\n+test_fuzz_asmap_direct_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_asmap_direct_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_asmap_direct_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_asmap_direct_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_asmap_direct_SOURCES = test/fuzz/asmap_direct.cpp\n \n test_fuzz_banentry_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBANENTRY_DESERIALIZE=1\n test_fuzz_banentry_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_banentry_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_banentry_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_base_encode_decode_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_base_encode_decode_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_base_encode_decode_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_base_encode_decode_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_base_encode_decode_SOURCES = $(FUZZ_SUITE) test/fuzz/base_encode_decode.cpp\n+test_fuzz_base_encode_decode_SOURCES = test/fuzz/base_encode_decode.cpp\n \n test_fuzz_bech32_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_bech32_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_bech32_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_bech32_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_bech32_SOURCES = $(FUZZ_SUITE) test/fuzz/bech32.cpp\n+test_fuzz_bech32_SOURCES = test/fuzz/bech32.cpp\n \n test_fuzz_block_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_block_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_block_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_block_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_SOURCES = $(FUZZ_SUITE) test/fuzz/block.cpp\n+test_fuzz_block_SOURCES = test/fuzz/block.cpp\n \n test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_block_file_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILE_INFO_DESERIALIZE=1\n test_fuzz_block_file_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_block_file_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_block_file_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_file_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_file_info_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_block_filter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILTER_DESERIALIZE=1\n test_fuzz_block_filter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_block_filter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_block_filter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_filter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_filter_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_block_header_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_block_header_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_header_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_header_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_header_SOURCES = test/fuzz/block_header.cpp\n \n test_fuzz_block_header_and_short_txids_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE=1\n test_fuzz_block_header_and_short_txids_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_block_header_and_short_txids_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_block_header_and_short_txids_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_header_and_short_txids_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_block_header_and_short_txids_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_blockfilter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_blockfilter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockfilter_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blockfilter_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockfilter_SOURCES = test/fuzz/blockfilter.cpp\n \n test_fuzz_blockheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKHEADER_DESERIALIZE=1\n test_fuzz_blockheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_blockheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blockheader_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_blocklocator_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKLOCATOR_DESERIALIZE=1\n test_fuzz_blocklocator_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocklocator_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_blocklocator_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blocklocator_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_blockmerkleroot_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKMERKLEROOT=1\n test_fuzz_blockmerkleroot_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockmerkleroot_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_blockmerkleroot_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blockmerkleroot_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_blocktransactions_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONS_DESERIALIZE=1\n test_fuzz_blocktransactions_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocktransactions_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_blocktransactions_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blocktransactions_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_blocktransactionsrequest_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONSREQUEST_DESERIALIZE=1\n test_fuzz_blocktransactionsrequest_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocktransactionsrequest_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_blocktransactionsrequest_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blocktransactionsrequest_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_blockundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKUNDO_DESERIALIZE=1\n test_fuzz_blockundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_blockundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_blockundo_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_bloom_filter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_bloom_filter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_bloom_filter_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_bloom_filter_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_bloom_filter_SOURCES = $(FUZZ_SUITE) test/fuzz/bloom_filter.cpp\n+test_fuzz_bloom_filter_SOURCES = test/fuzz/bloom_filter.cpp\n \n test_fuzz_bloomfilter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOOMFILTER_DESERIALIZE=1\n test_fuzz_bloomfilter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_bloomfilter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_bloomfilter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_bloomfilter_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_chain_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_chain_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_chain_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_chain_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_chain_SOURCES = test/fuzz/chain.cpp\n+\n+test_fuzz_checkqueue_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_checkqueue_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_checkqueue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_checkqueue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_checkqueue_SOURCES = test/fuzz/checkqueue.cpp\n \n test_fuzz_coins_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DCOINS_DESERIALIZE=1\n test_fuzz_coins_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_coins_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_coins_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_coins_view_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_coins_view_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_coins_view_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_coins_view_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_coins_view_SOURCES = test/fuzz/coins_view.cpp\n+\n+test_fuzz_cuckoocache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_cuckoocache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_cuckoocache_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_cuckoocache_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_cuckoocache_SOURCES = test/fuzz/cuckoocache.cpp\n \n test_fuzz_decode_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_decode_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_decode_tx_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_decode_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_decode_tx_SOURCES = $(FUZZ_SUITE) test/fuzz/decode_tx.cpp\n+test_fuzz_decode_tx_SOURCES = test/fuzz/decode_tx.cpp\n \n test_fuzz_descriptor_parse_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_descriptor_parse_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_descriptor_parse_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_descriptor_parse_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_descriptor_parse_SOURCES = $(FUZZ_SUITE) test/fuzz/descriptor_parse.cpp\n+test_fuzz_descriptor_parse_SOURCES = test/fuzz/descriptor_parse.cpp\n \n test_fuzz_diskblockindex_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DDISKBLOCKINDEX_DESERIALIZE=1\n test_fuzz_diskblockindex_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_diskblockindex_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_diskblockindex_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_diskblockindex_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_eval_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_eval_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_eval_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_eval_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_eval_script_SOURCES = $(FUZZ_SUITE) test/fuzz/eval_script.cpp\n+test_fuzz_eval_script_SOURCES = test/fuzz/eval_script.cpp\n+\n+test_fuzz_fee_rate_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_fee_rate_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_fee_rate_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_fee_rate_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_fee_rate_SOURCES = test/fuzz/fee_rate.cpp\n \n test_fuzz_fee_rate_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFEE_RATE_DESERIALIZE=1\n test_fuzz_fee_rate_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_fee_rate_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_fee_rate_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_fee_rate_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_fee_rate_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_fees_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_fees_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_fees_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_fees_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_fees_SOURCES = test/fuzz/fees.cpp\n \n test_fuzz_flat_file_pos_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFLAT_FILE_POS_DESERIALIZE=1\n test_fuzz_flat_file_pos_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_flat_file_pos_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_flat_file_pos_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_flat_file_pos_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_flat_file_pos_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_flatfile_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_flatfile_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_flatfile_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_flatfile_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_flatfile_SOURCES = test/fuzz/flatfile.cpp\n \n test_fuzz_float_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_float_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_float_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_float_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_float_SOURCES = $(FUZZ_SUITE) test/fuzz/float.cpp\n+test_fuzz_float_SOURCES = test/fuzz/float.cpp\n+\n+test_fuzz_golomb_rice_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_golomb_rice_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_golomb_rice_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_golomb_rice_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_golomb_rice_SOURCES = test/fuzz/golomb_rice.cpp\n \n test_fuzz_hex_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_hex_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_hex_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_hex_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_hex_SOURCES = $(FUZZ_SUITE) test/fuzz/hex.cpp\n+test_fuzz_hex_SOURCES = test/fuzz/hex.cpp\n+\n+test_fuzz_http_request_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_http_request_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_http_request_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_http_request_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_http_request_SOURCES = test/fuzz/http_request.cpp\n \n test_fuzz_integer_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_integer_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_integer_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_integer_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_integer_SOURCES = $(FUZZ_SUITE) test/fuzz/integer.cpp\n+test_fuzz_integer_SOURCES = test/fuzz/integer.cpp\n \n test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_inv_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_inv_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_inv_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_key_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_key_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_key_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_key_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_key_SOURCES = $(FUZZ_SUITE) test/fuzz/key.cpp\n+test_fuzz_key_SOURCES = test/fuzz/key.cpp\n \n test_fuzz_key_io_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_key_io_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_key_io_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_key_io_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_key_io_SOURCES = $(FUZZ_SUITE) test/fuzz/key_io.cpp\n+test_fuzz_key_io_SOURCES = test/fuzz/key_io.cpp\n \n test_fuzz_key_origin_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DKEY_ORIGIN_INFO_DESERIALIZE=1\n test_fuzz_key_origin_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_key_origin_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_key_origin_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_key_origin_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_key_origin_info_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_kitchen_sink_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_kitchen_sink_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_kitchen_sink_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_kitchen_sink_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_kitchen_sink_SOURCES = test/fuzz/kitchen_sink.cpp\n \n test_fuzz_locale_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_locale_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_locale_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_locale_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_locale_SOURCES = $(FUZZ_SUITE) test/fuzz/locale.cpp\n+test_fuzz_locale_SOURCES = test/fuzz/locale.cpp\n \n test_fuzz_merkle_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMERKLE_BLOCK_DESERIALIZE=1\n test_fuzz_merkle_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_merkle_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_merkle_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_merkle_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_merkle_block_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_merkleblock_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_merkleblock_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_merkleblock_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_merkleblock_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_merkleblock_SOURCES = test/fuzz/merkleblock.cpp\n+\n+test_fuzz_message_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_message_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_message_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_message_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_message_SOURCES = test/fuzz/message.cpp\n \n test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_messageheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_messageheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_messageheader_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_multiplication_overflow_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_multiplication_overflow_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_multiplication_overflow_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_multiplication_overflow_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_multiplication_overflow_SOURCES = test/fuzz/multiplication_overflow.cpp\n+\n+test_fuzz_net_permissions_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_net_permissions_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_net_permissions_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_net_permissions_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_net_permissions_SOURCES = test/fuzz/net_permissions.cpp\n \n test_fuzz_netaddr_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DNETADDR_DESERIALIZE=1\n test_fuzz_netaddr_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_netaddr_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_netaddr_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_netaddress_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_netaddress_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_netaddress_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_netaddress_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_netaddress_SOURCES = $(FUZZ_SUITE) test/fuzz/netaddress.cpp\n+test_fuzz_netaddress_SOURCES = test/fuzz/netaddress.cpp\n \n test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DOUT_POINT_DESERIALIZE=1\n test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_out_point_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_out_point_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_out_point_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_p2p_transport_deserializer_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_p2p_transport_deserializer_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_p2p_transport_deserializer_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_p2p_transport_deserializer_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_p2p_transport_deserializer_SOURCES = $(FUZZ_SUITE) test/fuzz/p2p_transport_deserializer.cpp\n+test_fuzz_p2p_transport_deserializer_SOURCES = test/fuzz/p2p_transport_deserializer.cpp\n \n test_fuzz_parse_hd_keypath_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_parse_hd_keypath_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_hd_keypath_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_hd_keypath_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_hd_keypath_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_hd_keypath.cpp\n+test_fuzz_parse_hd_keypath_SOURCES = test/fuzz/parse_hd_keypath.cpp\n \n test_fuzz_parse_iso8601_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_parse_iso8601_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_iso8601_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_iso8601_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_iso8601_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_iso8601.cpp\n+test_fuzz_parse_iso8601_SOURCES = test/fuzz/parse_iso8601.cpp\n \n test_fuzz_parse_numbers_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_parse_numbers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_numbers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_numbers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_numbers_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_numbers.cpp\n+test_fuzz_parse_numbers_SOURCES = test/fuzz/parse_numbers.cpp\n \n test_fuzz_parse_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_parse_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_script_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_script.cpp\n+test_fuzz_parse_script_SOURCES = test/fuzz/parse_script.cpp\n \n test_fuzz_parse_univalue_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_parse_univalue_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_univalue_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_univalue.cpp\n+test_fuzz_parse_univalue_SOURCES = test/fuzz/parse_univalue.cpp\n+\n+test_fuzz_prevector_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_prevector_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_prevector_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_prevector_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_prevector_SOURCES = test/fuzz/prevector.cpp\n \n test_fuzz_partial_merkle_tree_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIAL_MERKLE_TREE_DESERIALIZE=1\n test_fuzz_partial_merkle_tree_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_partial_merkle_tree_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_partial_merkle_tree_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_partial_merkle_tree_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_partial_merkle_tree_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_partially_signed_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIALLY_SIGNED_TRANSACTION_DESERIALIZE=1\n test_fuzz_partially_signed_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_partially_signed_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_partially_signed_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_partially_signed_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_partially_signed_transaction_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_policy_estimator_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_policy_estimator_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_policy_estimator_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_policy_estimator_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_policy_estimator_SOURCES = test/fuzz/policy_estimator.cpp\n+\n+test_fuzz_pow_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_pow_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_pow_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_pow_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_pow_SOURCES = test/fuzz/pow.cpp\n \n test_fuzz_prefilled_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPREFILLED_TRANSACTION_DESERIALIZE=1\n test_fuzz_prefilled_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_prefilled_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_prefilled_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_prefilled_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_prefilled_transaction_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_primitives_transaction_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_primitives_transaction_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_primitives_transaction_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_primitives_transaction_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_primitives_transaction_SOURCES = test/fuzz/primitives_transaction.cpp\n+\n+test_fuzz_process_messages_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_process_messages_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_messages_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_messages_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_messages_SOURCES = test/fuzz/process_messages.cpp\n \n test_fuzz_process_message_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_process_message_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_addr_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=addr\n test_fuzz_process_message_addr_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_addr_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_addr_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_addr_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_addr_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_block_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=block\n test_fuzz_process_message_block_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_block_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_block_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_block_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_block_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_blocktxn_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=blocktxn\n test_fuzz_process_message_blocktxn_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_blocktxn_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_blocktxn_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_blocktxn_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_blocktxn_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_cmpctblock_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=cmpctblock\n test_fuzz_process_message_cmpctblock_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_cmpctblock_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_cmpctblock_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_cmpctblock_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_cmpctblock_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_feefilter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=feefilter\n test_fuzz_process_message_feefilter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_feefilter_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_feefilter_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_feefilter_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_feefilter_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_filteradd_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=filteradd\n test_fuzz_process_message_filteradd_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_filteradd_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_filteradd_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_filteradd_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_filteradd_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_filterclear_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=filterclear\n test_fuzz_process_message_filterclear_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_filterclear_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_filterclear_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_filterclear_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_filterclear_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_filterload_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=filterload\n test_fuzz_process_message_filterload_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_filterload_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_filterload_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_filterload_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_filterload_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_getaddr_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getaddr\n test_fuzz_process_message_getaddr_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_getaddr_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_getaddr_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_getaddr_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_getaddr_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_getblocks_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getblocks\n test_fuzz_process_message_getblocks_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_getblocks_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_getblocks_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_getblocks_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_getblocks_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_getblocktxn_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getblocktxn\n test_fuzz_process_message_getblocktxn_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_getblocktxn_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_getblocktxn_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_getblocktxn_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_getblocktxn_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_getdata_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getdata\n test_fuzz_process_message_getdata_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_getdata_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_getdata_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_getdata_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_getdata_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_getheaders_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=getheaders\n test_fuzz_process_message_getheaders_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_getheaders_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_getheaders_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_getheaders_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_getheaders_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_headers_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=headers\n test_fuzz_process_message_headers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_headers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_headers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_headers_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_headers_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_inv_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=inv\n test_fuzz_process_message_inv_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_inv_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_inv_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_inv_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_inv_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_mempool_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=mempool\n test_fuzz_process_message_mempool_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_mempool_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_mempool_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_mempool_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_mempool_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_notfound_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=notfound\n test_fuzz_process_message_notfound_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_notfound_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_notfound_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_notfound_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_notfound_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_ping_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=ping\n test_fuzz_process_message_ping_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_ping_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_ping_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_ping_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_ping_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_pong_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=pong\n test_fuzz_process_message_pong_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_pong_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_pong_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_pong_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_pong_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_sendcmpct_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=sendcmpct\n test_fuzz_process_message_sendcmpct_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_sendcmpct_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_sendcmpct_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_sendcmpct_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_sendcmpct_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_sendheaders_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=sendheaders\n test_fuzz_process_message_sendheaders_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_sendheaders_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_sendheaders_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_sendheaders_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_sendheaders_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=tx\n test_fuzz_process_message_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_tx_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_tx_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_tx_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_verack_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=verack\n test_fuzz_process_message_verack_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_verack_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_verack_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_verack_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_verack_SOURCES = test/fuzz/process_message.cpp\n \n test_fuzz_process_message_version_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGE_TYPE=version\n test_fuzz_process_message_version_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_version_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_process_message_version_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_process_message_version_SOURCES = $(FUZZ_SUITE) test/fuzz/process_message.cpp\n+test_fuzz_process_message_version_SOURCES = test/fuzz/process_message.cpp\n+\n+test_fuzz_protocol_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_protocol_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_protocol_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_protocol_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_protocol_SOURCES = test/fuzz/protocol.cpp\n \n test_fuzz_psbt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_psbt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_psbt_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_psbt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_psbt_SOURCES = $(FUZZ_SUITE) test/fuzz/psbt.cpp\n+test_fuzz_psbt_SOURCES = test/fuzz/psbt.cpp\n \n test_fuzz_psbt_input_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_INPUT_DESERIALIZE=1\n test_fuzz_psbt_input_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_psbt_input_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_psbt_input_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_psbt_input_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_psbt_input_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_psbt_output_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_OUTPUT_DESERIALIZE=1\n test_fuzz_psbt_output_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_psbt_output_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_psbt_output_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_psbt_output_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_psbt_output_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_pub_key_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPUB_KEY_DESERIALIZE=1\n test_fuzz_pub_key_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_pub_key_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_pub_key_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_pub_key_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_pub_key_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_random_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_random_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_random_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_random_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_random_SOURCES = test/fuzz/random.cpp\n+\n+test_fuzz_rbf_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_rbf_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_rbf_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_rbf_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_rbf_SOURCES = test/fuzz/rbf.cpp\n \n test_fuzz_rolling_bloom_filter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_rolling_bloom_filter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_rolling_bloom_filter_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_rolling_bloom_filter_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_rolling_bloom_filter_SOURCES = $(FUZZ_SUITE) test/fuzz/rolling_bloom_filter.cpp\n+test_fuzz_rolling_bloom_filter_SOURCES = test/fuzz/rolling_bloom_filter.cpp\n \n test_fuzz_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_script_SOURCES = $(FUZZ_SUITE) test/fuzz/script.cpp\n+test_fuzz_script_SOURCES = test/fuzz/script.cpp\n+\n+test_fuzz_script_bitcoin_consensus_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_bitcoin_consensus_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_bitcoin_consensus_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_bitcoin_consensus_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_bitcoin_consensus_SOURCES = test/fuzz/script_bitcoin_consensus.cpp\n+\n+test_fuzz_script_descriptor_cache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_descriptor_cache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_descriptor_cache_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_descriptor_cache_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_descriptor_cache_SOURCES = test/fuzz/script_descriptor_cache.cpp\n \n test_fuzz_script_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSCRIPT_DESERIALIZE=1\n test_fuzz_script_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_script_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_script_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_script_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_script_flags_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_script_flags_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_script_flags_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_script_flags_SOURCES = $(FUZZ_SUITE) test/fuzz/script_flags.cpp\n+test_fuzz_script_flags_SOURCES = test/fuzz/script_flags.cpp\n+\n+test_fuzz_script_interpreter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_interpreter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_interpreter_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_interpreter_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_interpreter_SOURCES = test/fuzz/script_interpreter.cpp\n \n test_fuzz_script_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_script_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_script_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_script_ops_SOURCES = $(FUZZ_SUITE) test/fuzz/script_ops.cpp\n+test_fuzz_script_ops_SOURCES = test/fuzz/script_ops.cpp\n+\n+test_fuzz_script_sigcache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_sigcache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_sigcache_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_sigcache_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_sigcache_SOURCES = test/fuzz/script_sigcache.cpp\n+\n+test_fuzz_script_sign_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_sign_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_sign_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_sign_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_sign_SOURCES = test/fuzz/script_sign.cpp\n \n test_fuzz_scriptnum_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_scriptnum_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_scriptnum_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_scriptnum_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_scriptnum_ops_SOURCES = $(FUZZ_SUITE) test/fuzz/scriptnum_ops.cpp\n+test_fuzz_scriptnum_ops_SOURCES = test/fuzz/scriptnum_ops.cpp\n \n test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_service_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_service_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_service_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_signature_checker_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_signature_checker_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_signature_checker_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_signature_checker_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_signature_checker_SOURCES = test/fuzz/signature_checker.cpp\n+\n+test_fuzz_snapshotmetadata_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSNAPSHOTMETADATA_DESERIALIZE=1\n+test_fuzz_snapshotmetadata_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_snapshotmetadata_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_snapshotmetadata_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_snapshotmetadata_deserialize_SOURCES = test/fuzz/deserialize.cpp\n+\n+test_fuzz_span_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_span_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_span_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_span_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_span_SOURCES = test/fuzz/span.cpp\n \n test_fuzz_spanparsing_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_spanparsing_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_spanparsing_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_spanparsing_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_spanparsing_SOURCES = $(FUZZ_SUITE) test/fuzz/spanparsing.cpp\n+test_fuzz_spanparsing_SOURCES = test/fuzz/spanparsing.cpp\n+\n+test_fuzz_string_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_string_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_string_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_string_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_string_SOURCES = test/fuzz/string.cpp\n \n test_fuzz_strprintf_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_strprintf_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_strprintf_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_strprintf_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_strprintf_SOURCES = $(FUZZ_SUITE) test/fuzz/strprintf.cpp\n+test_fuzz_strprintf_SOURCES = test/fuzz/strprintf.cpp\n \n test_fuzz_sub_net_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSUB_NET_DESERIALIZE=1\n test_fuzz_sub_net_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_sub_net_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_sub_net_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_sub_net_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_sub_net_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n-test_fuzz_snapshotmetadata_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSNAPSHOTMETADATA_DESERIALIZE=1\n-test_fuzz_snapshotmetadata_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_snapshotmetadata_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-test_fuzz_snapshotmetadata_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_snapshotmetadata_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_system_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_system_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_system_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_system_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_system_SOURCES = test/fuzz/system.cpp\n+\n+test_fuzz_timedata_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_timedata_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_timedata_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_timedata_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_timedata_SOURCES = test/fuzz/timedata.cpp\n \n test_fuzz_transaction_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_transaction_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_transaction_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_transaction_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_transaction_SOURCES = $(FUZZ_SUITE) test/fuzz/transaction.cpp\n+test_fuzz_transaction_SOURCES = test/fuzz/transaction.cpp\n \n test_fuzz_tx_in_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_tx_in_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_in_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_tx_in_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_tx_in_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_in.cpp\n+test_fuzz_tx_in_SOURCES = test/fuzz/tx_in.cpp\n \n test_fuzz_tx_in_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTX_IN_DESERIALIZE=1\n test_fuzz_tx_in_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_in_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_tx_in_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_tx_in_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_tx_in_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_tx_out_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_tx_out_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_tx_out_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_tx_out_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_tx_out_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_out.cpp\n+test_fuzz_tx_out_SOURCES = test/fuzz/tx_out.cpp\n \n test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_txoutcompressor_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_txoutcompressor_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_txoutcompressor_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_txundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_txundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_txundo_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_uint160_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DUINT160_DESERIALIZE=1\n test_fuzz_uint160_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_uint160_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_uint160_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_uint160_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_uint160_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n test_fuzz_uint256_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DUINT256_DESERIALIZE=1\n test_fuzz_uint256_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_uint256_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_uint256_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_uint256_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+test_fuzz_uint256_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n endif # ENABLE_FUZZ\n \n@@ -906,7 +1155,7 @@ endif\n \n %.cpp.test: %.cpp\n \t@echo Running tests: `cat $< | grep -E \"(BOOST_FIXTURE_TEST_SUITE\\\\(|BOOST_AUTO_TEST_SUITE\\\\()\" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1` from $<\n-\t$(AM_V_at)$(TEST_BINARY) --catch_system_errors=no -l test_suite -t \"`cat $< | grep -E \"(BOOST_FIXTURE_TEST_SUITE\\\\(|BOOST_AUTO_TEST_SUITE\\\\()\" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1`\" > $<.log 2>&1 || (cat $<.log && false)\n+\t$(AM_V_at)$(TEST_BINARY) --catch_system_errors=no -l test_suite -t \"`cat $< | grep -E \"(BOOST_FIXTURE_TEST_SUITE\\\\(|BOOST_AUTO_TEST_SUITE\\\\()\" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1`\" -- DEBUG_LOG_OUT > $<.log 2>&1 || (cat $<.log && false)\n \n %.json.h: %.json\n \t@$(MKDIR_P) $(@D)"
      },
      {
        "sha": "4e858979febd551284c10ebd95c0f8e3a9f51e5e",
        "filename": "src/Makefile.test_fuzz.include",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.test_fuzz.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.test_fuzz.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_fuzz.include?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,24 @@\n+# Copyright (c) 2013-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+LIBTEST_FUZZ=libtest_fuzz.a\n+\n+EXTRA_LIBRARIES += \\\n+    $(LIBTEST_FUZZ)\n+\n+TEST_FUZZ_H = \\\n+    test/fuzz/fuzz.h \\\n+    test/fuzz/FuzzedDataProvider.h \\\n+    test/fuzz/util.h\n+\n+libtest_fuzz_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n+libtest_fuzz_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libtest_fuzz_a_SOURCES = \\\n+  test/fuzz/fuzz.cpp \\\n+  $(TEST_FUZZ_H)\n+\n+LIBTEST_FUZZ += $(LIBBITCOIN_SERVER)\n+LIBTEST_FUZZ += $(LIBBITCOIN_COMMON)\n+LIBTEST_FUZZ += $(LIBBITCOIN_UTIL)\n+LIBTEST_FUZZ += $(LIBBITCOIN_CRYPTO_BASE)"
      },
      {
        "sha": "d7bc73defb4149469734cac6c8257e201fef47f3",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -11,6 +11,7 @@ TEST_UTIL_H = \\\n     test/util/blockfilter.h \\\n     test/util/logging.h \\\n     test/util/mining.h \\\n+    test/util/net.h \\\n     test/util/setup_common.h \\\n     test/util/str.h \\\n     test/util/transaction_utils.h \\\n@@ -22,6 +23,7 @@ libtest_util_a_SOURCES = \\\n   test/util/blockfilter.cpp \\\n   test/util/logging.cpp \\\n   test/util/mining.cpp \\\n+  test/util/net.cpp \\\n   test/util/setup_common.cpp \\\n   test/util/str.cpp \\\n   test/util/transaction_utils.cpp \\"
      },
      {
        "sha": "7aba340d9d9100df6feb5e767847f01d41956ded",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2012 Pieter Wuille\n-// Copyright (c) 2012-2019 The Bitcoin Core developers\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -644,5 +644,9 @@ std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n             bits.push_back((cur_byte >> bit) & 1);\n         }\n     }\n+    if (!SanityCheckASMap(bits)) {\n+        LogPrintf(\"Sanity check of asmap file %s failed\\n\", path);\n+        return {};\n+    }\n     return bits;\n }"
      },
      {
        "sha": "6bea2e75e94f072d49149ce17d085f40bb0c34b2",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -5,16 +5,19 @@\n #ifndef BITCOIN_BANMAN_H\n #define BITCOIN_BANMAN_H\n \n-#include <cstdint>\n-#include <memory>\n-\n #include <addrdb.h>\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <sync.h>\n \n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n+// How often to dump addresses to banlist.dat\n+static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n class CClientUIInterface;\n class CNetAddr;"
      },
      {
        "sha": "cc260df2b810ed57ff01087a4a8e4e72095a090a",
        "filename": "src/bench/addrman.cpp",
        "status": "added",
        "additions": 140,
        "deletions": 0,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,140 @@\n+// Copyright (c) 2020-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrman.h>\n+#include <bench/bench.h>\n+#include <random.h>\n+#include <util/time.h>\n+\n+#include <vector>\n+\n+/* A \"source\" is a source address from which we have received a bunch of other addresses. */\n+\n+static constexpr size_t NUM_SOURCES = 64;\n+static constexpr size_t NUM_ADDRESSES_PER_SOURCE = 256;\n+\n+static std::vector<CAddress> g_sources;\n+static std::vector<std::vector<CAddress>> g_addresses;\n+\n+static void CreateAddresses()\n+{\n+    if (g_sources.size() > 0) { // already created\n+        return;\n+    }\n+\n+    FastRandomContext rng(uint256(std::vector<unsigned char>(32, 123)));\n+\n+    auto randAddr = [&rng]() {\n+        in6_addr addr;\n+        memcpy(&addr, rng.randbytes(sizeof(addr)).data(), sizeof(addr));\n+\n+        uint16_t port;\n+        memcpy(&port, rng.randbytes(sizeof(port)).data(), sizeof(port));\n+        if (port == 0) {\n+            port = 1;\n+        }\n+\n+        CAddress ret(CService(addr, port), NODE_NETWORK);\n+\n+        ret.nTime = GetAdjustedTime();\n+\n+        return ret;\n+    };\n+\n+    for (size_t source_i = 0; source_i < NUM_SOURCES; ++source_i) {\n+        g_sources.emplace_back(randAddr());\n+        g_addresses.emplace_back();\n+        for (size_t addr_i = 0; addr_i < NUM_ADDRESSES_PER_SOURCE; ++addr_i) {\n+            g_addresses[source_i].emplace_back(randAddr());\n+        }\n+    }\n+}\n+\n+static void AddAddressesToAddrMan(CAddrMan& addrman)\n+{\n+    for (size_t source_i = 0; source_i < NUM_SOURCES; ++source_i) {\n+        addrman.Add(g_addresses[source_i], g_sources[source_i]);\n+    }\n+}\n+\n+static void FillAddrMan(CAddrMan& addrman)\n+{\n+    CreateAddresses();\n+\n+    AddAddressesToAddrMan(addrman);\n+}\n+\n+/* Benchmarks */\n+\n+static void AddrManAdd(benchmark::State& state)\n+{\n+    CreateAddresses();\n+\n+    CAddrMan addrman;\n+\n+    while (state.KeepRunning()) {\n+        AddAddressesToAddrMan(addrman);\n+        addrman.Clear();\n+    }\n+}\n+\n+static void AddrManSelect(benchmark::State& state)\n+{\n+    CAddrMan addrman;\n+\n+    FillAddrMan(addrman);\n+\n+    while (state.KeepRunning()) {\n+        const auto& address = addrman.Select();\n+        assert(address.GetPort() > 0);\n+    }\n+}\n+\n+static void AddrManGetAddr(benchmark::State& state)\n+{\n+    CAddrMan addrman;\n+\n+    FillAddrMan(addrman);\n+\n+    while (state.KeepRunning()) {\n+        const auto& addresses = addrman.GetAddr();\n+        assert(addresses.size() > 0);\n+    }\n+}\n+\n+static void AddrManGood(benchmark::State& state)\n+{\n+    /* Create many CAddrMan objects - one to be modified at each loop iteration.\n+     * This is necessary because the CAddrMan::Good() method modifies the\n+     * object, affecting the timing of subsequent calls to the same method and\n+     * we want to do the same amount of work in every loop iteration. */\n+\n+    const uint64_t numLoops = state.m_num_iters * state.m_num_evals;\n+\n+    std::vector<CAddrMan> addrmans(numLoops);\n+    for (auto& addrman : addrmans) {\n+        FillAddrMan(addrman);\n+    }\n+\n+    auto markSomeAsGood = [](CAddrMan& addrman) {\n+        for (size_t source_i = 0; source_i < NUM_SOURCES; ++source_i) {\n+            for (size_t addr_i = 0; addr_i < NUM_ADDRESSES_PER_SOURCE; ++addr_i) {\n+                if (addr_i % 32 == 0) {\n+                    addrman.Good(g_addresses[source_i][addr_i]);\n+                }\n+            }\n+        }\n+    };\n+\n+    uint64_t i = 0;\n+    while (state.KeepRunning()) {\n+        markSomeAsGood(addrmans.at(i));\n+        ++i;\n+    }\n+}\n+\n+BENCHMARK(AddrManAdd, 5);\n+BENCHMARK(AddrManSelect, 1000000);\n+BENCHMARK(AddrManGetAddr, 500);\n+BENCHMARK(AddrManGood, 2);"
      },
      {
        "sha": "2107840a3a49bdd3ac44e318bdeb73a7d663345e",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,8 +7,8 @@\n #include <bech32.h>\n #include <util/strencodings.h>\n \n-#include <vector>\n #include <string>\n+#include <vector>\n \n \n static void Bech32Encode(benchmark::State& state)"
      },
      {
        "sha": "7b93ef688d88deb44924d2c5a81881ea2e9dc3ea",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,7 +15,6 @@\n #include <numeric>\n #include <regex>\n \n-const RegTestingSetup* g_testing_setup = nullptr;\n const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n void benchmark::ConsolePrinter::header()\n@@ -115,18 +114,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n     printer.header();\n \n     for (const auto& p : benchmarks()) {\n-        RegTestingSetup test{};\n-        assert(g_testing_setup == nullptr);\n-        g_testing_setup = &test;\n-        {\n-            LOCK(cs_main);\n-            assert(::ChainActive().Height() == 0);\n-            const bool witness_enabled{IsWitnessEnabled(::ChainActive().Tip(), Params().GetConsensus())};\n-            assert(witness_enabled);\n-        }\n-\n         if (!std::regex_match(p.first, baseMatch, reFilter)) {\n-             g_testing_setup = nullptr;\n             continue;\n         }\n \n@@ -139,7 +127,6 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n             p.second.func(state);\n         }\n         printer.result(state);\n-        g_testing_setup = nullptr;\n     }\n \n     printer.footer();"
      },
      {
        "sha": "629bca9a73d0d506644a8cab4d03b4ea71082078",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -5,18 +5,15 @@\n #ifndef BITCOIN_BENCH_BENCH_H\n #define BITCOIN_BENCH_BENCH_H\n \n+#include <chrono>\n #include <functional>\n #include <map>\n #include <string>\n #include <vector>\n-#include <chrono>\n \n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n \n-struct RegTestingSetup;\n-extern const RegTestingSetup* g_testing_setup; //!< A pointer to the current testing setup\n-\n // Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n // framework (see https://github.com/google/benchmark)\n // Why not use the Google Benchmark framework? Because adding Yet Another Dependency"
      },
      {
        "sha": "1b75854210520936dbe3ec835c81a958b5b6eccb",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -17,39 +17,40 @@ static const char* DEFAULT_PLOT_PLOTLYURL = \"https://cdn.plot.ly/plotly-latest.m\n static const int64_t DEFAULT_PLOT_WIDTH = 1024;\n static const int64_t DEFAULT_PLOT_HEIGHT = 768;\n \n-static void SetupBenchArgs()\n+static void SetupBenchArgs(ArgsManager& argsman)\n {\n-    SetupHelpOptions(gArgs);\n+    SetupHelpOptions(argsman);\n \n-    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n }\n \n int main(int argc, char** argv)\n {\n-    SetupBenchArgs();\n+    ArgsManager argsman;\n+    SetupBenchArgs(argsman);\n     std::string error;\n-    if (!gArgs.ParseParameters(argc, argv, error)) {\n+    if (!argsman.ParseParameters(argc, argv, error)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n \n-    if (HelpRequested(gArgs)) {\n-        std::cout << gArgs.GetHelpMessage();\n+    if (HelpRequested(argsman)) {\n+        std::cout << argsman.GetHelpMessage();\n \n         return EXIT_SUCCESS;\n     }\n \n-    int64_t evaluations = gArgs.GetArg(\"-evals\", DEFAULT_BENCH_EVALUATIONS);\n-    std::string regex_filter = gArgs.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n-    std::string scaling_str = gArgs.GetArg(\"-scaling\", DEFAULT_BENCH_SCALING);\n-    bool is_list_only = gArgs.GetBoolArg(\"-list\", false);\n+    int64_t evaluations = argsman.GetArg(\"-evals\", DEFAULT_BENCH_EVALUATIONS);\n+    std::string regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);\n+    std::string scaling_str = argsman.GetArg(\"-scaling\", DEFAULT_BENCH_SCALING);\n+    bool is_list_only = argsman.GetBoolArg(\"-list\", false);\n \n     if (evaluations == 0) {\n         return EXIT_SUCCESS;\n@@ -65,12 +66,12 @@ int main(int argc, char** argv)\n     }\n \n     std::unique_ptr<benchmark::Printer> printer = MakeUnique<benchmark::ConsolePrinter>();\n-    std::string printer_arg = gArgs.GetArg(\"-printer\", DEFAULT_BENCH_PRINTER);\n+    std::string printer_arg = argsman.GetArg(\"-printer\", DEFAULT_BENCH_PRINTER);\n     if (\"plot\" == printer_arg) {\n         printer.reset(new benchmark::PlotlyPrinter(\n-            gArgs.GetArg(\"-plot-plotlyurl\", DEFAULT_PLOT_PLOTLYURL),\n-            gArgs.GetArg(\"-plot-width\", DEFAULT_PLOT_WIDTH),\n-            gArgs.GetArg(\"-plot-height\", DEFAULT_PLOT_HEIGHT)));\n+            argsman.GetArg(\"-plot-plotlyurl\", DEFAULT_PLOT_PLOTLYURL),\n+            argsman.GetArg(\"-plot-width\", DEFAULT_PLOT_WIDTH),\n+            argsman.GetArg(\"-plot-height\", DEFAULT_PLOT_HEIGHT)));\n     }\n \n     benchmark::BenchRunner::RunAll(*printer, evaluations, scaling_factor, regex_filter, is_list_only);"
      },
      {
        "sha": "268f67cadafde92ab488a7e52bb125f7d2f2e159",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -16,6 +16,14 @@\n \n static void AssembleBlock(benchmark::State& state)\n {\n+    TestingSetup test_setup{\n+        CBaseChainParams::REGTEST,\n+        /* extra_args */ {\n+            \"-nodebuglogfile\",\n+            \"-nodebug\",\n+        },\n+    };\n+\n     const std::vector<unsigned char> op_true{OP_TRUE};\n     CScriptWitness witness;\n     witness.stack.push_back(op_true);\n@@ -30,7 +38,7 @@ static void AssembleBlock(benchmark::State& state)\n     std::array<CTransactionRef, NUM_BLOCKS - COINBASE_MATURITY + 1> txs;\n     for (size_t b{0}; b < NUM_BLOCKS; ++b) {\n         CMutableTransaction tx;\n-        tx.vin.push_back(MineBlock(g_testing_setup->m_node, SCRIPT_PUB));\n+        tx.vin.push_back(MineBlock(test_setup.m_node, SCRIPT_PUB));\n         tx.vin.back().scriptWitness = witness;\n         tx.vout.emplace_back(1337, SCRIPT_PUB);\n         if (NUM_BLOCKS - b >= COINBASE_MATURITY)\n@@ -41,13 +49,13 @@ static void AssembleBlock(benchmark::State& state)\n \n         for (const auto& txr : txs) {\n             TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(::mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n+            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */, /* nAbsurdFee */ 0)};\n             assert(ret);\n         }\n     }\n \n     while (state.KeepRunning()) {\n-        PrepareBlock(g_testing_setup->m_node, SCRIPT_PUB);\n+        PrepareBlock(test_setup.m_node, SCRIPT_PUB);\n     }\n }\n "
      },
      {
        "sha": "86f9a0bf67393d2a362114d057bea2d400ab8131",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,6 +18,9 @@\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CCoinsCaching(benchmark::State& state)\n {\n+    const ECCVerifyHandle verify_handle;\n+    ECC_Start();\n+\n     FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -44,9 +47,8 @@ static void CCoinsCaching(benchmark::State& state)\n     while (state.KeepRunning()) {\n         bool success = AreInputsStandard(tx_1, coins);\n         assert(success);\n-        CAmount value = coins.GetValueIn(tx_1);\n-        assert(value == (50 + 21 + 22) * COIN);\n     }\n+    ECC_Stop();\n }\n \n BENCHMARK(CCoinsCaching, 170 * 1000);"
      },
      {
        "sha": "df10f27d03fa8ea9d717d022647d96b9bad419d8",
        "filename": "src/bench/chacha_poly_aead.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha_poly_aead.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,8 +8,8 @@\n #include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n #include <hash.h>\n \n-#include <limits>\n #include <assert.h>\n+#include <limits>\n \n /* Number of bytes to process per iteration */\n static constexpr uint64_t BUFFER_SIZE_TINY = 64;"
      },
      {
        "sha": "2b2c78905e57a5f0d4d83c9838b5ae5210e44a49",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,14 +1,14 @@\n-// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n #include <bench/data.h>\n \n #include <chainparams.h>\n-#include <validation.h>\n-#include <streams.h>\n #include <consensus/validation.h>\n+#include <streams.h>\n+#include <validation.h>\n \n // These are the two major time-sinks which happen after we have fully received\n // a block off the wire, but before we can relay the block on to peers using"
      },
      {
        "sha": "e052681181dd298570e1f85facab5c9ee5eccc39",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,14 +1,18 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n-#include <util/system.h>\n #include <checkqueue.h>\n+#include <key.h>\n #include <prevector.h>\n-#include <vector>\n-#include <boost/thread/thread.hpp>\n+#include <pubkey.h>\n #include <random.h>\n+#include <util/system.h>\n+\n+#include <boost/thread/thread.hpp>\n+\n+#include <vector>\n \n \n static const int MIN_CORES = 2;\n@@ -22,6 +26,9 @@ static const unsigned int QUEUE_BATCH_SIZE = 128;\n // and there is a little bit of work done between calls to Add.\n static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n {\n+    const ECCVerifyHandle verify_handle;\n+    ECC_Start();\n+\n     struct PrevectorJob {\n         prevector<PREVECTOR_SIZE, uint8_t> p;\n         PrevectorJob(){\n@@ -57,5 +64,6 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n     }\n     tg.interrupt_all();\n     tg.join_all();\n+    ECC_Stop();\n }\n BENCHMARK(CCheckQueueSpeedPrevectorJob, 1400);"
      },
      {
        "sha": "ddcef5121e78a34db632775891c454eae869669b",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,17 +1,17 @@\n-// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n \n #include <bench/bench.h>\n-#include <hash.h>\n-#include <random.h>\n-#include <uint256.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n #include <crypto/sha512.h>\n #include <crypto/siphash.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <uint256.h>\n \n /* Number of bytes to hash per iteration */\n static const uint64_t BUFFER_SIZE = 1000*1000;"
      },
      {
        "sha": "e87f15042bb318301dfbda6617c9a36f343a6e20",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,13 +7,21 @@\n #include <consensus/merkle.h>\n #include <consensus/validation.h>\n #include <pow.h>\n+#include <test/util/setup_common.h>\n #include <txmempool.h>\n #include <validation.h>\n \n \n-\n static void DuplicateInputs(benchmark::State& state)\n {\n+    TestingSetup test_setup{\n+        CBaseChainParams::REGTEST,\n+        /* extra_args */ {\n+            \"-nodebuglogfile\",\n+            \"-nodebug\",\n+        },\n+    };\n+\n     const CScript SCRIPT_PUB{CScript(OP_TRUE)};\n \n     const CChainParams& chainparams = Params();"
      },
      {
        "sha": "f88150200acf236e2fafa4150f875801e71236c2",
        "filename": "src/bench/examples.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/examples.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "985be8bdba585159afa1c4b08e9b2825ad3535c9",
        "filename": "src/bench/hashpadding.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/hashpadding.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/hashpadding.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/hashpadding.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+#include <hash.h>\n+#include <random.h>\n+#include <uint256.h>\n+\n+\n+static void PrePadded(benchmark::State& state)\n+{\n+\n+    CSHA256 hasher;\n+\n+    // Setup the salted hasher\n+    uint256 nonce = GetRandHash();\n+    hasher.Write(nonce.begin(), 32);\n+    hasher.Write(nonce.begin(), 32);\n+    uint256 data = GetRandHash();\n+    while (state.KeepRunning()) {\n+        unsigned char out[32];\n+        CSHA256 h = hasher;\n+        h.Write(data.begin(), 32);\n+        h.Finalize(out);\n+    }\n+}\n+\n+BENCHMARK(PrePadded, 10000);\n+\n+static void RegularPadded(benchmark::State& state)\n+{\n+    CSHA256 hasher;\n+\n+    // Setup the salted hasher\n+    uint256 nonce = GetRandHash();\n+    uint256 data = GetRandHash();\n+    while (state.KeepRunning()) {\n+        unsigned char out[32];\n+        CSHA256 h = hasher;\n+        h.Write(nonce.begin(), 32);\n+        h.Write(data.begin(), 32);\n+        h.Finalize(out);\n+    }\n+}\n+\n+BENCHMARK(RegularPadded, 10000);"
      },
      {
        "sha": "69483f29148f13a1837deddc6318f48d307215d2",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <bench/bench.h>\n #include <policy/policy.h>\n+#include <test/util/setup_common.h>\n #include <txmempool.h>\n \n \n@@ -15,15 +16,23 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n     unsigned int sigOpCost = 4;\n     LockPoints lp;\n     pool.addUnchecked(CTxMemPoolEntry(\n-                                         tx, nFee, nTime, nHeight,\n-                                         spendsCoinbase, sigOpCost, lp));\n+        tx, nFee, nTime, nHeight,\n+        spendsCoinbase, sigOpCost, lp));\n }\n \n // Right now this is only testing eviction performance in an extremely small\n // mempool. Code needs to be written to generate a much wider variety of\n // unique transactions for a more meaningful performance measurement.\n static void MempoolEviction(benchmark::State& state)\n {\n+    TestingSetup test_setup{\n+        CBaseChainParams::REGTEST,\n+        /* extra_args */ {\n+            \"-nodebuglogfile\",\n+            \"-nodebug\",\n+        },\n+    };\n+\n     CMutableTransaction tx1 = CMutableTransaction();\n     tx1.vin.resize(1);\n     tx1.vin[0].scriptSig = CScript() << OP_1;"
      },
      {
        "sha": "38d8632318441f242f8305132cf94ae4a3bf4ad5",
        "filename": "src/bench/mempool_stress.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/mempool_stress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/mempool_stress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_stress.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <bench/bench.h>\n #include <policy/policy.h>\n+#include <test/util/setup_common.h>\n #include <txmempool.h>\n \n #include <vector>\n@@ -73,6 +74,7 @@ static void ComplexMemPool(benchmark::State& state)\n         ordered_coins.emplace_back(MakeTransactionRef(tx));\n         available_coins.emplace_back(ordered_coins.back(), tx_counter++);\n     }\n+    TestingSetup test_setup;\n     CTxMemPool pool;\n     LOCK2(cs_main, pool.cs);\n     while (state.KeepRunning()) {"
      },
      {
        "sha": "e84f92feae77eaf7d31ac3f0e5d2e6d28b23d5a1",
        "filename": "src/bench/merkle_root.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/merkle_root.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/merkle_root.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/merkle_root.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,12 +1,12 @@\n-// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n \n-#include <uint256.h>\n-#include <random.h>\n #include <consensus/merkle.h>\n+#include <random.h>\n+#include <uint256.h>\n \n static void MerkleRoot(benchmark::State& state)\n {"
      },
      {
        "sha": "42b351a72d4379a5b36f9d9511b52c0df41657e4",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -20,9 +20,7 @@\n struct nontrivial_t {\n     int x;\n     nontrivial_t() :x(-1) {}\n-    ADD_SERIALIZE_METHODS\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {READWRITE(x);}\n+    SERIALIZE_METHODS(nontrivial_t, obj) { READWRITE(obj.x); }\n };\n static_assert(!IS_TRIVIALLY_CONSTRUCTIBLE<nontrivial_t>::value,\n               \"expected nontrivial_t to not be trivially constructible\");"
      },
      {
        "sha": "511573abac5c24bef4ceefee2fe3507e35281e86",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,13 +1,13 @@\n-// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n #include <bench/data.h>\n \n-#include <validation.h>\n-#include <streams.h>\n #include <rpc/blockchain.h>\n+#include <streams.h>\n+#include <validation.h>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "14bca5f7d1217e64272952f1d6526b97da3f98ac",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 1,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,6 +18,9 @@\n // modified to measure performance of other types of scripts.\n static void VerifyScriptBench(benchmark::State& state)\n {\n+    const ECCVerifyHandle verify_handle;\n+    ECC_Start();\n+\n     const int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;\n     const int witnessversion = 0;\n \n@@ -69,6 +72,30 @@ static void VerifyScriptBench(benchmark::State& state)\n         assert(csuccess == 1);\n #endif\n     }\n+    ECC_Stop();\n+}\n+\n+static void VerifyNestedIfScript(benchmark::State& state) {\n+    std::vector<std::vector<unsigned char>> stack;\n+    CScript script;\n+    for (int i = 0; i < 100; ++i) {\n+        script << OP_1 << OP_IF;\n+    }\n+    for (int i = 0; i < 1000; ++i) {\n+        script << OP_1;\n+    }\n+    for (int i = 0; i < 100; ++i) {\n+        script << OP_ENDIF;\n+    }\n+    while (state.KeepRunning()) {\n+        auto stack_copy = stack;\n+        ScriptError error;\n+        bool ret = EvalScript(stack_copy, script, 0, BaseSignatureChecker(), SigVersion::BASE, &error);\n+        assert(ret);\n+    }\n }\n \n+\n BENCHMARK(VerifyScriptBench, 6300);\n+\n+BENCHMARK(VerifyNestedIfScript, 100);"
      },
      {
        "sha": "810c344ab5e6b6d7b26a7e737753b70098e72aa6",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2012-2019 The Bitcoin Core developers\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,6 +14,14 @@\n \n static void WalletBalance(benchmark::State& state, const bool set_dirty, const bool add_watchonly, const bool add_mine)\n {\n+    TestingSetup test_setup{\n+        CBaseChainParams::REGTEST,\n+        /* extra_args */ {\n+            \"-nodebuglogfile\",\n+            \"-nodebug\",\n+        },\n+    };\n+\n     const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n \n     NodeContext node;\n@@ -23,16 +31,15 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n         wallet.SetupLegacyScriptPubKeyMan();\n         bool first_run;\n         if (wallet.LoadWallet(first_run) != DBErrors::LOAD_OK) assert(false);\n-        wallet.handleNotifications();\n     }\n-\n+    auto handler = chain->handleNotifications({&wallet, [](CWallet*) {}});\n \n     const Optional<std::string> address_mine{add_mine ? Optional<std::string>{getnewaddress(wallet)} : nullopt};\n     if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n \n     for (int i = 0; i < 100; ++i) {\n-        generatetoaddress(g_testing_setup->m_node, address_mine.get_value_or(ADDRESS_WATCHONLY));\n-        generatetoaddress(g_testing_setup->m_node, ADDRESS_WATCHONLY);\n+        generatetoaddress(test_setup.m_node, address_mine.get_value_or(ADDRESS_WATCHONLY));\n+        generatetoaddress(test_setup.m_node, ADDRESS_WATCHONLY);\n     }\n     SyncWithValidationInterfaceQueue();\n "
      },
      {
        "sha": "8d85789b4ebbb809f4095248bfac2a7a7c1ed70a",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 124,
        "deletions": 68,
        "changes": 192,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,16 +9,19 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <optional.h>\n #include <rpc/client.h>\n #include <rpc/protocol.h>\n #include <rpc/request.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <util/url.h>\n \n #include <functional>\n #include <memory>\n #include <stdio.h>\n+#include <string>\n #include <tuple>\n \n #include <event2/buffer.h>\n@@ -29,6 +32,7 @@\n #include <compat/stdin.h>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+UrlDecodeFn* const URL_DECODE = urlDecode;\n \n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n@@ -155,7 +159,7 @@ struct HTTPReply\n     std::string body;\n };\n \n-static const char *http_errorstring(int code)\n+static std::string http_errorstring(int code)\n {\n     switch(code) {\n #if LIBEVENT_VERSION_NUMBER >= 0x02010300\n@@ -228,6 +232,7 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     const int ID_NETWORKINFO = 0;\n     const int ID_BLOCKCHAININFO = 1;\n     const int ID_WALLETINFO = 2;\n+    const int ID_BALANCES = 3;\n \n     /** Create a simulated `getinfo` request. */\n     UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n@@ -239,16 +244,17 @@ class GetinfoRequestHandler: public BaseRequestHandler\n         result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n         result.push_back(JSONRPCRequestObj(\"getblockchaininfo\", NullUniValue, ID_BLOCKCHAININFO));\n         result.push_back(JSONRPCRequestObj(\"getwalletinfo\", NullUniValue, ID_WALLETINFO));\n+        result.push_back(JSONRPCRequestObj(\"getbalances\", NullUniValue, ID_BALANCES));\n         return result;\n     }\n \n     /** Collect values from the batch and form a simulated `getinfo` reply. */\n     UniValue ProcessReply(const UniValue &batch_in) override\n     {\n         UniValue result(UniValue::VOBJ);\n-        std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in, 3);\n-        // Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on\n-        // getwalletinfo() is allowed to fail in case there is no wallet.\n+        const std::vector<UniValue> batch = JSONRPCProcessBatchReply(batch_in);\n+        // Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on;\n+        // getwalletinfo() and getbalances() are allowed to fail if there is no wallet.\n         if (!batch[ID_NETWORKINFO][\"error\"].isNull()) {\n             return batch[ID_NETWORKINFO];\n         }\n@@ -265,13 +271,15 @@ class GetinfoRequestHandler: public BaseRequestHandler\n         result.pushKV(\"difficulty\", batch[ID_BLOCKCHAININFO][\"result\"][\"difficulty\"]);\n         result.pushKV(\"chain\", UniValue(batch[ID_BLOCKCHAININFO][\"result\"][\"chain\"]));\n         if (!batch[ID_WALLETINFO][\"result\"].isNull()) {\n-            result.pushKV(\"balance\", batch[ID_WALLETINFO][\"result\"][\"balance\"]);\n             result.pushKV(\"keypoolsize\", batch[ID_WALLETINFO][\"result\"][\"keypoolsize\"]);\n             if (!batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"].isNull()) {\n                 result.pushKV(\"unlocked_until\", batch[ID_WALLETINFO][\"result\"][\"unlocked_until\"]);\n             }\n             result.pushKV(\"paytxfee\", batch[ID_WALLETINFO][\"result\"][\"paytxfee\"]);\n         }\n+        if (!batch[ID_BALANCES][\"result\"].isNull()) {\n+            result.pushKV(\"balance\", batch[ID_BALANCES][\"result\"][\"mine\"][\"trusted\"]);\n+        }\n         result.pushKV(\"relayfee\", batch[ID_NETWORKINFO][\"result\"][\"relayfee\"]);\n         result.pushKV(\"warnings\", batch[ID_NETWORKINFO][\"result\"][\"warnings\"]);\n         return JSONRPCReplyObj(result, NullUniValue, 1);\n@@ -298,7 +306,7 @@ class DefaultRequestHandler: public BaseRequestHandler {\n     }\n };\n \n-static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)\n+static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n {\n     std::string host;\n     // In preference order, we choose the following for the port:\n@@ -363,14 +371,12 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n-        std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n-        char *encodedURI = evhttp_uriencode(walletName.data(), walletName.size(), false);\n+    if (rpcwallet) {\n+        char* encodedURI = evhttp_uriencode(rpcwallet->data(), rpcwallet->size(), false);\n         if (encodedURI) {\n-            endpoint = \"/wallet/\"+ std::string(encodedURI);\n+            endpoint = \"/wallet/\" + std::string(encodedURI);\n             free(encodedURI);\n-        }\n-        else {\n+        } else {\n             throw CConnectionFailed(\"uri-encode failed\");\n         }\n     }\n@@ -412,6 +418,65 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     return reply;\n }\n \n+/**\n+ * ConnectAndCallRPC wraps CallRPC with -rpcwait and an exception handler.\n+ *\n+ * @param[in] rh         Pointer to RequestHandler.\n+ * @param[in] strMethod  Reference to const string method to forward to CallRPC.\n+ * @param[in] rpcwallet  Reference to const optional string wallet name to forward to CallRPC.\n+ * @returns the RPC response as a UniValue object.\n+ * @throws a CConnectionFailed std::runtime_error if connection failed or RPC server still in warmup.\n+ */\n+static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& strMethod, const std::vector<std::string>& args, const Optional<std::string>& rpcwallet = {})\n+{\n+    UniValue response(UniValue::VOBJ);\n+    // Execute and handle connection failures with -rpcwait.\n+    const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n+    do {\n+        try {\n+            response = CallRPC(rh, strMethod, args, rpcwallet);\n+            if (fWait) {\n+                const UniValue& error = find_value(response, \"error\");\n+                if (!error.isNull() && error[\"code\"].get_int() == RPC_IN_WARMUP) {\n+                    throw CConnectionFailed(\"server in warmup\");\n+                }\n+            }\n+            break; // Connection succeeded, no need to retry.\n+        } catch (const CConnectionFailed&) {\n+            if (fWait) {\n+                UninterruptibleSleep(std::chrono::milliseconds{1000});\n+            } else {\n+                throw;\n+            }\n+        }\n+    } while (fWait);\n+    return response;\n+}\n+\n+/**\n+ * GetWalletBalances calls listwallets; if more than one wallet is loaded, it then\n+ * fetches mine.trusted balances for each loaded wallet and pushes them to `result`.\n+ *\n+ * @param result  Reference to UniValue object the wallet names and balances are pushed to.\n+ */\n+static void GetWalletBalances(UniValue& result)\n+{\n+    std::unique_ptr<BaseRequestHandler> rh{MakeUnique<DefaultRequestHandler>()};\n+    const UniValue listwallets = ConnectAndCallRPC(rh.get(), \"listwallets\", /* args=*/{});\n+    if (!find_value(listwallets, \"error\").isNull()) return;\n+    const UniValue& wallets = find_value(listwallets, \"result\");\n+    if (wallets.size() <= 1) return;\n+\n+    UniValue balances(UniValue::VOBJ);\n+    for (const UniValue& wallet : wallets.getValues()) {\n+        const std::string wallet_name = wallet.get_str();\n+        const UniValue getbalances = ConnectAndCallRPC(rh.get(), \"getbalances\", /* args=*/{}, wallet_name);\n+        const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\n+        balances.pushKV(wallet_name, balance);\n+    }\n+    result.pushKV(\"balances\", balances);\n+}\n+\n static int CommandLineRPC(int argc, char *argv[])\n {\n     std::string strPrint;\n@@ -468,9 +533,8 @@ static int CommandLineRPC(int argc, char *argv[])\n         }\n         std::unique_ptr<BaseRequestHandler> rh;\n         std::string method;\n-        if (gArgs.GetBoolArg(\"-getinfo\", false)) {\n+        if (gArgs.IsArgSet(\"-getinfo\")) {\n             rh.reset(new GetinfoRequestHandler());\n-            method = \"\";\n         } else {\n             rh.reset(new DefaultRequestHandler());\n             if (args.size() < 1) {\n@@ -479,62 +543,46 @@ static int CommandLineRPC(int argc, char *argv[])\n             method = args[0];\n             args.erase(args.begin()); // Remove trailing method name from arguments vector\n         }\n-\n-        // Execute and handle connection failures with -rpcwait\n-        const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-        do {\n-            try {\n-                const UniValue reply = CallRPC(rh.get(), method, args);\n-\n-                // Parse reply\n-                const UniValue& result = find_value(reply, \"result\");\n-                const UniValue& error  = find_value(reply, \"error\");\n-\n-                if (!error.isNull()) {\n-                    // Error\n-                    int code = error[\"code\"].get_int();\n-                    if (fWait && code == RPC_IN_WARMUP)\n-                        throw CConnectionFailed(\"server in warmup\");\n-                    strPrint = \"error: \" + error.write();\n-                    nRet = abs(code);\n-                    if (error.isObject())\n-                    {\n-                        UniValue errCode = find_value(error, \"code\");\n-                        UniValue errMsg  = find_value(error, \"message\");\n-                        strPrint = errCode.isNull() ? \"\" : \"error code: \"+errCode.getValStr()+\"\\n\";\n-\n-                        if (errMsg.isStr())\n-                            strPrint += \"error message:\\n\"+errMsg.get_str();\n-\n-                        if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n-                            strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n-                        }\n-                    }\n-                } else {\n-                    // Result\n-                    if (result.isNull())\n-                        strPrint = \"\";\n-                    else if (result.isStr())\n-                        strPrint = result.get_str();\n-                    else\n-                        strPrint = result.write(2);\n+        Optional<std::string> wallet_name{};\n+        if (gArgs.IsArgSet(\"-rpcwallet\")) wallet_name = gArgs.GetArg(\"-rpcwallet\", \"\");\n+        const UniValue reply = ConnectAndCallRPC(rh.get(), method, args, wallet_name);\n+\n+        // Parse reply\n+        UniValue result = find_value(reply, \"result\");\n+        const UniValue& error = find_value(reply, \"error\");\n+        if (!error.isNull()) {\n+            // Error\n+            strPrint = \"error: \" + error.write();\n+            nRet = abs(error[\"code\"].get_int());\n+            if (error.isObject()) {\n+                const UniValue& errCode = find_value(error, \"code\");\n+                const UniValue& errMsg = find_value(error, \"message\");\n+                strPrint = errCode.isNull() ? \"\" : (\"error code: \" + errCode.getValStr() + \"\\n\");\n+\n+                if (errMsg.isStr()) {\n+                    strPrint += (\"error message:\\n\" + errMsg.get_str());\n+                }\n+                if (errCode.isNum() && errCode.get_int() == RPC_WALLET_NOT_SPECIFIED) {\n+                    strPrint += \"\\nTry adding \\\"-rpcwallet=<filename>\\\" option to bitcoin-cli command line.\";\n                 }\n-                // Connection succeeded, no need to retry.\n-                break;\n             }\n-            catch (const CConnectionFailed&) {\n-                if (fWait)\n-                    UninterruptibleSleep(std::chrono::milliseconds{1000});\n-                else\n-                    throw;\n+        } else {\n+            if (gArgs.IsArgSet(\"-getinfo\") && !gArgs.IsArgSet(\"-rpcwallet\")) {\n+                GetWalletBalances(result); // fetch multiwallet balances and append to result\n             }\n-        } while (fWait);\n-    }\n-    catch (const std::exception& e) {\n+            // Result\n+            if (result.isNull()) {\n+                strPrint = \"\";\n+            } else if (result.isStr()) {\n+                strPrint = result.get_str();\n+            } else {\n+                strPrint = result.write(2);\n+            }\n+        }\n+    } catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;\n-    }\n-    catch (...) {\n+    } catch (...) {\n         PrintExceptionContinue(nullptr, \"CommandLineRPC()\");\n         throw;\n     }\n@@ -545,11 +593,19 @@ static int CommandLineRPC(int argc, char *argv[])\n     return nRet;\n }\n \n-int main(int argc, char* argv[])\n-{\n #ifdef WIN32\n+// Export main() and ensure working ASLR on Windows.\n+// Exporting a symbol will prevent the linker from stripping\n+// the .reloc section from the binary, which is a requirement\n+// for ASLR. This is a temporary workaround until a fixed\n+// version of binutils is used for releases.\n+__declspec(dllexport) int main(int argc, char* argv[])\n+{\n     util::WinCmdLineArgs winArgs;\n     std::tie(argc, argv) = winArgs.get();\n+#else\n+int main(int argc, char* argv[])\n+{\n #endif\n     SetupEnvironment();\n     if (!SetupNetworking()) {"
      },
      {
        "sha": "f54a299a36157caa1d126bf3a7fda6d39ecb7d28",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -20,6 +20,7 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n \n@@ -357,7 +358,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n \n     if (required < 1 || required > MAX_PUBKEYS_PER_MULTISIG || numkeys < 1 || numkeys > MAX_PUBKEYS_PER_MULTISIG || numkeys < required)\n         throw std::runtime_error(\"multisig parameter mismatch. Required \" \\\n-                            + std::to_string(required) + \" of \" + std::to_string(numkeys) + \"signatures.\");\n+                            + ToString(required) + \" of \" + ToString(numkeys) + \"signatures.\");\n \n     // extract and validate PUBKEYs\n     std::vector<CPubKey> pubkeys;"
      },
      {
        "sha": "b420463c00700efa82c7728e56add42bb0e9712e",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,11 +11,13 @@\n #include <logging.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <util/url.h>\n #include <wallet/wallettool.h>\n \n #include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+UrlDecodeFn* const URL_DECODE = nullptr;\n \n static void SetupWalletToolArgs()\n {\n@@ -29,6 +31,7 @@ static void SetupWalletToolArgs()\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "b8e87178968c7c0da15dcd550b61b23198992856",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,14 +16,17 @@\n #include <noui.h>\n #include <shutdown.h>\n #include <ui_interface.h>\n+#include <util/ref.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n+#include <util/url.h>\n \n #include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+UrlDecodeFn* const URL_DECODE = urlDecode;\n \n static void WaitForShutdown(NodeContext& node)\n {\n@@ -51,10 +54,10 @@ static bool AppInit(int argc, char* argv[])\n     // Parameters\n     //\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n-    SetupServerArgs();\n+    SetupServerArgs(node);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        return InitError(strprintf(\"Error parsing command line arguments: %s\\n\", error));\n+        return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));\n     }\n \n     // Process help and version before taking care about datadir\n@@ -75,25 +78,26 @@ static bool AppInit(int argc, char* argv[])\n         return true;\n     }\n \n+    util::Ref context{node};\n     try\n     {\n         if (!CheckDataDirOption()) {\n-            return InitError(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\")));\n+            return InitError(Untranslated(strprintf(\"Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\"))));\n         }\n         if (!gArgs.ReadConfigFiles(error, true)) {\n-            return InitError(strprintf(\"Error reading configuration file: %s\\n\", error));\n+            return InitError(Untranslated(strprintf(\"Error reading configuration file: %s\\n\", error)));\n         }\n         // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(gArgs.GetChainName());\n         } catch (const std::exception& e) {\n-            return InitError(strprintf(\"%s\\n\", e.what()));\n+            return InitError(Untranslated(strprintf(\"%s\\n\", e.what())));\n         }\n \n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {\n-                return InitError(strprintf(\"Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i]));\n+                return InitError(Untranslated(strprintf(\"Command line contains unexpected token '%s', see bitcoind -h for a list of options.\\n\", argv[i])));\n             }\n         }\n \n@@ -128,13 +132,13 @@ static bool AppInit(int argc, char* argv[])\n \n             // Daemonize\n             if (daemon(1, 0)) { // don't chdir (1), do close FDs (0)\n-                return InitError(strprintf(\"daemon() failed: %s\\n\", strerror(errno)));\n+                return InitError(Untranslated(strprintf(\"daemon() failed: %s\\n\", strerror(errno))));\n             }\n #if defined(MAC_OSX)\n #pragma GCC diagnostic pop\n #endif\n #else\n-            return InitError(\"-daemon is not supported on this operating system\\n\");\n+            return InitError(Untranslated(\"-daemon is not supported on this operating system\\n\"));\n #endif // HAVE_DECL_DAEMON\n         }\n         // Lock data directory after daemonization\n@@ -143,7 +147,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain(node);\n+        fRet = AppInitMain(context, node);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      },
      {
        "sha": "a47709cd82c81fed369c2125bdbfbac6366b433a",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -105,13 +105,12 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     std::vector<bool> have_txn(txn_available.size());\n     {\n     LOCK(pool->cs);\n-    const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n-    for (size_t i = 0; i < vTxHashes.size(); i++) {\n-        uint64_t shortid = cmpctblock.GetShortID(vTxHashes[i].first);\n+    for (size_t i = 0; i < pool->vTxHashes.size(); i++) {\n+        uint64_t shortid = cmpctblock.GetShortID(pool->vTxHashes[i].first);\n         std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n         if (idit != shorttxids.end()) {\n             if (!have_txn[idit->second]) {\n-                txn_available[idit->second] = vTxHashes[i].second->GetSharedTx();\n+                txn_available[idit->second] = pool->vTxHashes[i].second->GetSharedTx();\n                 have_txn[idit->second]  = true;\n                 mempool_count++;\n             } else {"
      },
      {
        "sha": "326db1b4a7c4745b146477e52982d741dfe09cbc",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2016-2019 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -92,12 +92,13 @@ class CBlockHeaderAndShortTxIDs {\n \n     friend class PartiallyDownloadedBlock;\n \n-    static const int SHORTTXIDS_LENGTH = 6;\n protected:\n     std::vector<uint64_t> shorttxids;\n     std::vector<PrefilledTransaction> prefilledtxn;\n \n public:\n+    static constexpr int SHORTTXIDS_LENGTH = 6;\n+\n     CBlockHeader header;\n \n     // Dummy for deserialization\n@@ -125,7 +126,7 @@ class PartiallyDownloadedBlock {\n protected:\n     std::vector<CTransactionRef> txn_available;\n     size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;\n-    CTxMemPool* pool;\n+    const CTxMemPool* pool;\n public:\n     CBlockHeader header;\n     explicit PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}"
      },
      {
        "sha": "5f5bed5bda0f4be918ac126c8ed5c7c8f032cd39",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 31,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -12,6 +12,7 @@\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <streams.h>\n+#include <util/golombrice.h>\n \n /// SerType used to serialize parameters in GCS filter encoding.\n static constexpr int GCS_SER_TYPE = SER_NETWORK;\n@@ -23,37 +24,6 @@ static const std::map<BlockFilterType, std::string> g_filter_types = {\n     {BlockFilterType::BASIC, \"basic\"},\n };\n \n-template <typename OStream>\n-static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)\n-{\n-    // Write quotient as unary-encoded: q 1's followed by one 0.\n-    uint64_t q = x >> P;\n-    while (q > 0) {\n-        int nbits = q <= 64 ? static_cast<int>(q) : 64;\n-        bitwriter.Write(~0ULL, nbits);\n-        q -= nbits;\n-    }\n-    bitwriter.Write(0, 1);\n-\n-    // Write the remainder in P bits. Since the remainder is just the bottom\n-    // P bits of x, there is no need to mask first.\n-    bitwriter.Write(x, P);\n-}\n-\n-template <typename IStream>\n-static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t P)\n-{\n-    // Read unary-encoded quotient: q 1's followed by one 0.\n-    uint64_t q = 0;\n-    while (bitreader.Read(1) == 1) {\n-        ++q;\n-    }\n-\n-    uint64_t r = bitreader.Read(P);\n-\n-    return (q << P) + r;\n-}\n-\n // Map a value x that is uniformly distributed in the range [0, 2^64) to a\n // value uniformly distributed in [0, n) by returning the upper 64 bits of\n // x * n."
      },
      {
        "sha": "96cefbf3b2f9ffb0c688eee6d00249ad1ad75cc5",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -144,8 +144,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash\n           << m_filter.GetEncoded();\n     }\n \n@@ -154,8 +154,8 @@ class BlockFilter\n         std::vector<unsigned char> encoded_filter;\n         uint8_t filter_type;\n \n-        s >> m_block_hash\n-          >> filter_type\n+        s >> filter_type\n+          >> m_block_hash\n           >> encoded_filter;\n \n         m_filter_type = static_cast<BlockFilterType>(filter_type);"
      },
      {
        "sha": "54fcf487e4736fec3f109de908f322c024464dc3",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 36,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -31,8 +31,6 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n      * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n-    isFull(false),\n-    isEmpty(true),\n     nHashFuncs(std::min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)\n@@ -47,15 +45,14 @@ inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<\n \n void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n-    if (isFull)\n+    if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return;\n     for (unsigned int i = 0; i < nHashFuncs; i++)\n     {\n         unsigned int nIndex = Hash(i, vKey);\n         // Sets bit nIndex of vData\n         vData[nIndex >> 3] |= (1 << (7 & nIndex));\n     }\n-    isEmpty = false;\n }\n \n void CBloomFilter::insert(const COutPoint& outpoint)\n@@ -74,10 +71,8 @@ void CBloomFilter::insert(const uint256& hash)\n \n bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n-    if (isFull)\n+    if (vData.empty()) // Avoid divide-by-zero (CVE-2013-5700)\n         return true;\n-    if (isEmpty)\n-        return false;\n     for (unsigned int i = 0; i < nHashFuncs; i++)\n     {\n         unsigned int nIndex = Hash(i, vKey);\n@@ -102,19 +97,6 @@ bool CBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n-void CBloomFilter::clear()\n-{\n-    vData.assign(vData.size(),0);\n-    isFull = false;\n-    isEmpty = true;\n-}\n-\n-void CBloomFilter::reset(const unsigned int nNewTweak)\n-{\n-    clear();\n-    nTweak = nNewTweak;\n-}\n-\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n@@ -125,10 +107,8 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n     bool fFound = false;\n     // Match if the filter contains the hash of tx\n     //  for finding tx when they appear in a block\n-    if (isFull)\n+    if (vData.empty()) // zero-size = \"match-all\" filter\n         return true;\n-    if (isEmpty)\n-        return false;\n     const uint256& hash = tx.GetHash();\n     if (contains(hash))\n         fFound = true;\n@@ -190,19 +170,6 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n     return false;\n }\n \n-void CBloomFilter::UpdateEmptyFull()\n-{\n-    bool full = true;\n-    bool empty = true;\n-    for (unsigned int i = 0; i < vData.size(); i++)\n-    {\n-        full &= vData[i] == 0xff;\n-        empty &= vData[i] == 0;\n-    }\n-    isFull = full;\n-    isEmpty = empty;\n-}\n-\n CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const double fpRate)\n {\n     double logFpRate = log(fpRate);"
      },
      {
        "sha": "93072578520225c6cd9b78f365f0b66ac597ca73",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 18,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -45,8 +45,6 @@ class CBloomFilter\n {\n private:\n     std::vector<unsigned char> vData;\n-    bool isFull;\n-    bool isEmpty;\n     unsigned int nHashFuncs;\n     unsigned int nTweak;\n     unsigned char nFlags;\n@@ -64,17 +62,9 @@ class CBloomFilter\n      * nFlags should be one of the BLOOM_UPDATE_* enums (not _MASK)\n      */\n     CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweak, unsigned char nFlagsIn);\n-    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n+    CBloomFilter() : nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vData);\n-        READWRITE(nHashFuncs);\n-        READWRITE(nTweak);\n-        READWRITE(nFlags);\n-    }\n+    SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const COutPoint& outpoint);\n@@ -84,18 +74,12 @@ class CBloomFilter\n     bool contains(const COutPoint& outpoint) const;\n     bool contains(const uint256& hash) const;\n \n-    void clear();\n-    void reset(const unsigned int nNewTweak);\n-\n     //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     //! (catch a filter which was just deserialized which was too big)\n     bool IsWithinSizeConstraints() const;\n \n     //! Also adds any outputs which match the filter to the filter (to match their spending txes)\n     bool IsRelevantAndUpdate(const CTransaction& tx);\n-\n-    //! Checks for empty and full filters to avoid wasting cpu\n-    void UpdateEmptyFull();\n };\n \n /**"
      },
      {
        "sha": "802e23f7759a4c9725431297f7f046b8c65baedd",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "799474fae223fb29ad66c54d62dd834e06e0ee6e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -84,10 +84,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x000000000000000000000000000000000000000008ea3cf107ae0dec57f03fe8\");\n+        consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000e1ab5ec9348e9f4b8eb8154\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x00000000000000000005f8920febd3925f8272a6a71237563d78c2edfdd09ddf\"); // 597379\n+        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000f2adce67e49b0b6bdeb9de8b7c3d7e93b21e7fc1e819d\"); // 623950\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -100,7 +100,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n-        m_assumed_blockchain_size = 280;\n+        m_assumed_blockchain_size = 320;\n         m_assumed_chain_state_size = 4;\n \n         genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n@@ -156,10 +156,10 @@ class CMainParams : public CChainParams {\n         };\n \n         chainTxData = ChainTxData{\n-            // Data from RPC: getchaintxstats 4096 00000000000000000005f8920febd3925f8272a6a71237563d78c2edfdd09ddf\n-            /* nTime    */ 1569926786,\n-            /* nTxCount */ 460596047,\n-            /* dTxRate  */ 3.77848885073875,\n+            // Data from RPC: getchaintxstats 4096 0000000000000000000f2adce67e49b0b6bdeb9de8b7c3d7e93b21e7fc1e819d\n+            /* nTime    */ 1585764811,\n+            /* nTxCount */ 517186863,\n+            /* dTxRate  */ 3.305709665792344,\n         };\n     }\n };\n@@ -192,18 +192,18 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000012b2a3a62424f21c918\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001495c1d5a01e2af8a23\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x00000000000000b7ab6ce61eb6d571003fbe5fe892da4c9b740c49a07542462d\"); // 1580000\n+        consensus.defaultAssumeValid = uint256S(\"0x000000000000056c49030c174179b52a928c870e6e8a822c75973b7970cfbd01\"); // 1692000\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n-        m_assumed_blockchain_size = 30;\n+        m_assumed_blockchain_size = 40;\n         m_assumed_chain_state_size = 2;\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n@@ -241,10 +241,10 @@ class CTestNetParams : public CChainParams {\n         };\n \n         chainTxData = ChainTxData{\n-            // Data from RPC: getchaintxstats 4096 00000000000000b7ab6ce61eb6d571003fbe5fe892da4c9b740c49a07542462d\n-            /* nTime    */ 1569741320,\n-            /* nTxCount */ 52318009,\n-            /* dTxRate  */ 0.1517002392872353,\n+            // Data from RPC: getchaintxstats 4096 000000000000056c49030c174179b52a928c870e6e8a822c75973b7970cfbd01\n+            /* nTime    */ 1585561140,\n+            /* nTxCount */ 13483,\n+            /* dTxRate  */ 0.08523187013249722,\n         };\n     }\n };"
      },
      {
        "sha": "542ef329dadef5bf9ff6e16394d05e68273c68e3",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "2aca18c1884b981679f50c01e42ea73eed3a8e31",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 474,
        "deletions": 479,
        "changes": 953,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "e3faa1dec083dbb04bc7382c7df54ce3f0fd3921",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "993967a18077882e20863a1383355c57d1ab5918",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 44,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -14,59 +14,34 @@\n  */\n const std::string CLIENT_NAME(\"Satoshi\");\n \n-/**\n- * Client version number\n- */\n-#define CLIENT_VERSION_SUFFIX \"\"\n-\n-\n-/**\n- * The following part of the code determines the CLIENT_BUILD variable.\n- * Several mechanisms are used for this:\n- * * first, if HAVE_BUILD_INFO is defined, include build.h, a file that is\n- *   generated by the build environment, possibly containing the output\n- *   of git-describe in a macro called BUILD_DESC\n- * * secondly, if this is an exported version of the code, GIT_ARCHIVE will\n- *   be defined (automatically using the export-subst git attribute), and\n- *   GIT_COMMIT will contain the commit id.\n- * * then, three options exist for determining CLIENT_BUILD:\n- *   * if BUILD_DESC is defined, use that literally (output of git-describe)\n- *   * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]\n- *   * otherwise, use v[maj].[min].[rev].[build]-unk\n- * finally CLIENT_VERSION_SUFFIX is added\n- */\n \n-//! First, include build.h if requested\n #ifdef HAVE_BUILD_INFO\n #include <obj/build.h>\n+// The <obj/build.h>, which is generated by the build environment (share/genbuild.sh),\n+// could contain only one line of the following:\n+//   - \"#define BUILD_GIT_TAG ...\", if the top commit is tagged\n+//   - \"#define BUILD_GIT_COMMIT ...\", if the top commit is not tagged\n+//   - \"// No build information available\", if proper git information is not available\n #endif\n \n-//! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n-#ifdef GIT_ARCHIVE\n-#define GIT_COMMIT_ID \"$Format:%H$\"\n-#define GIT_COMMIT_DATE \"$Format:%cD$\"\n-#endif\n-\n-#define BUILD_DESC_WITH_SUFFIX(maj, min, rev, build, suffix) \\\n-    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-\" DO_STRINGIZE(suffix)\n-\n-#define BUILD_DESC_FROM_COMMIT(maj, min, rev, build, commit) \\\n-    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-g\" commit\n+//! git will put \"#define GIT_COMMIT_ID ...\" on the next line inside archives. $Format:%n#define GIT_COMMIT_ID \"%H\"$\n \n-#define BUILD_DESC_FROM_UNKNOWN(maj, min, rev, build) \\\n-    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-unk\"\n-\n-#ifndef BUILD_DESC\n-#ifdef BUILD_SUFFIX\n-#define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)\n-#elif defined(GIT_COMMIT_ID)\n-#define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)\n+#ifdef BUILD_GIT_TAG\n+    #define BUILD_DESC BUILD_GIT_TAG\n+    #define BUILD_SUFFIX \"\"\n #else\n-#define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)\n-#endif\n+    #define BUILD_DESC \"v\" STRINGIZE(CLIENT_VERSION_MAJOR) \".\" STRINGIZE(CLIENT_VERSION_MINOR) \\\n+                       \".\" STRINGIZE(CLIENT_VERSION_REVISION) \".\" STRINGIZE(CLIENT_VERSION_BUILD)\n+    #ifdef BUILD_GIT_COMMIT\n+        #define BUILD_SUFFIX \"-\" BUILD_GIT_COMMIT\n+    #elif defined(GIT_COMMIT_ID)\n+        #define BUILD_SUFFIX \"-g\" GIT_COMMIT_ID\n+    #else\n+        #define BUILD_SUFFIX \"-unk\"\n+    #endif\n #endif\n \n-const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n+const std::string CLIENT_BUILD(BUILD_DESC BUILD_SUFFIX);\n \n static std::string FormatVersion(int nVersion)\n {"
      },
      {
        "sha": "7b76c13f98ca1f33904d3e2c5ef243f4914be94a",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 34,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -77,21 +77,34 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     }\n     if (!possible_overwrite) {\n         if (!it->second.coin.IsSpent()) {\n-            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+            throw std::logic_error(\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\");\n         }\n+        // If the coin exists in this cache as a spent coin and is DIRTY, then\n+        // its spentness hasn't been flushed to the parent cache. We're\n+        // re-adding the coin to this cache now but we can't mark it as FRESH.\n+        // If we mark it FRESH and then spend it before the cache is flushed\n+        // we would remove it from this cache and would never flush spentness\n+        // to the parent cache.\n+        //\n+        // Re-adding a spent coin can happen in the case of a re-org (the coin\n+        // is 'spent' when the block adding it is disconnected and then\n+        // re-added when it is also added in a newly connected block).\n+        //\n+        // If the coin doesn't exist in the current cache, or is spent but not\n+        // DIRTY, then it can be marked FRESH.\n         fresh = !(it->second.flags & CCoinsCacheEntry::DIRTY);\n     }\n     it->second.coin = std::move(coin);\n     it->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n     cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n }\n \n-void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check) {\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check_for_overwrite) {\n     bool fCoinbase = tx.IsCoinBase();\n     const uint256& txid = tx.GetHash();\n     for (size_t i = 0; i < tx.vout.size(); ++i) {\n-        bool overwrite = check ? cache.HaveCoin(COutPoint(txid, i)) : fCoinbase;\n-        // Always set the possible_overwrite flag to AddCoin for coinbase txn, in order to correctly\n+        bool overwrite = check_for_overwrite ? cache.HaveCoin(COutPoint(txid, i)) : fCoinbase;\n+        // Coinbase transactions can always be overwritten, in order to correctly\n         // deal with the pre-BIP30 occurrences of duplicate coinbase transactions.\n         cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), overwrite);\n     }\n@@ -152,11 +165,11 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n@@ -169,19 +182,18 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 }\n             }\n         } else {\n-            // Assert that the child cache entry was not marked FRESH if the\n-            // parent cache entry has unspent outputs. If this ever happens,\n-            // it means the FRESH flag was misapplied and there is a logic\n-            // error in the calling code.\n+            // Found the entry in the parent cache\n             if ((it->second.flags & CCoinsCacheEntry::FRESH) && !itUs->second.coin.IsSpent()) {\n-                throw std::logic_error(\"FRESH flag misapplied to cache entry for base transaction with spendable outputs\");\n+                // The coin was marked FRESH in the child cache, but the coin\n+                // exists in the parent cache. If this ever happens, it means\n+                // the FRESH flag was misapplied and there is a logic error in\n+                // the calling code.\n+                throw std::logic_error(\"FRESH flag misapplied to coin that exists in parent cache\");\n             }\n \n-            // Found the entry in the parent cache\n             if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coin.IsSpent()) {\n-                // The grandparent does not have an entry, and the child is\n-                // modified and being pruned. This means we can just delete\n-                // it from the parent.\n+                // The grandparent cache does not have an entry, and the coin\n+                // has been spent. We can just delete it from the parent cache.\n                 cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n                 cacheCoins.erase(itUs);\n             } else {\n@@ -190,11 +202,10 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 itUs->second.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n                 itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                // NOTE: It is possible the child has a FRESH flag here in\n-                // the event the entry we found in the parent is pruned. But\n-                // we must not copy that FRESH flag to the parent as that\n-                // pruned state likely still needs to be communicated to the\n-                // grandparent.\n+                // NOTE: It isn't safe to mark the coin as FRESH in the parent\n+                // cache. If it already existed and was spent in the parent\n+                // cache then marking it FRESH would prevent that spentness\n+                // from being flushed to the grandparent.\n             }\n         }\n     }\n@@ -222,18 +233,6 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    CAmount nResult = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        nResult += AccessCoin(tx.vin[i].prevout).out.nValue;\n-\n-    return nResult;\n-}\n-\n bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {"
      },
      {
        "sha": "a3f34bb0eec645c9a2ed019f426dc5d76a4217c1",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 40,
        "deletions": 24,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,16 +1,16 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_COINS_H\n #define BITCOIN_COINS_H\n \n-#include <primitives/transaction.h>\n #include <compressor.h>\n #include <core_memusage.h>\n #include <crypto/siphash.h>\n #include <memusage.h>\n+#include <primitives/transaction.h>\n #include <serialize.h>\n #include <uint256.h>\n \n@@ -25,7 +25,7 @@\n  *\n  * Serialized format:\n  * - VARINT((coinbase ? 1 : 0) | (height << 1))\n- * - the non-spent CTxOut (via CTxOutCompressor)\n+ * - the non-spent CTxOut (via TxOutCompression)\n  */\n class Coin\n {\n@@ -59,7 +59,7 @@ class Coin\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n         assert(!IsSpent());\n-        uint32_t code = nHeight * 2 + fCoinBase;\n+        uint32_t code = nHeight * uint32_t{2} + fCoinBase;\n         ::Serialize(s, VARINT(code));\n         ::Serialize(s, Using<TxOutCompression>(out));\n     }\n@@ -109,19 +109,45 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (e.g. a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (e.g. a coin changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (e.g. an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (e.g. a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (e.g. a coin is spent and spentness needs to be flushed to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n+        /**\n+         * DIRTY means the CCoinsCacheEntry is potentially different from the\n+         * version in the parent cache. Failure to mark a coin as DIRTY when\n+         * it is potentially different from the parent cache will cause a\n+         * consensus failure, since the coin's state won't get written to the\n+         * parent when the cache is flushed.\n          */\n+        DIRTY = (1 << 0),\n+        /**\n+         * FRESH means the parent cache does not have this coin or that it is a\n+         * spent coin in the parent cache. If a FRESH coin in the cache is\n+         * later spent, it can be deleted entirely and doesn't ever need to be\n+         * flushed to the parent. This is a performance optimization. Marking a\n+         * coin as FRESH when it exists unspent in the parent cache will cause a\n+         * consensus failure, since it might not be deleted from the parent\n+         * when this cache is flushed.\n+         */\n+        FRESH = (1 << 1),\n     };\n \n     CCoinsCacheEntry() : flags(0) {}\n@@ -246,7 +272,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool HaveCoinInCache(const COutPoint &outpoint) const;\n \n     /**\n-     * Return a reference to Coin in the cache, or a pruned one if not found. This is\n+     * Return a reference to Coin in the cache, or coinEmpty if not found. This is\n      * more efficient than GetCoin.\n      *\n      * Generally, do not hold the reference returned for more than a short scope.\n@@ -258,10 +284,10 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const Coin& AccessCoin(const COutPoint &output) const;\n \n     /**\n-     * Add a coin. Set potential_overwrite to true if a non-pruned version may\n-     * already exist.\n+     * Add a coin. Set possible_overwrite to true if an unspent version may\n+     * already exist in the cache.\n      */\n-    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool potential_overwrite);\n+    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n      * Spend a coin. Pass moveto in order to get the deleted data.\n@@ -289,16 +315,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Calculate the size of the cache (in bytes)\n     size_t DynamicMemoryUsage() const;\n \n-    /**\n-     * Amount of bitcoins coming in to a transaction\n-     * Note that lightweight clients may not know anything besides the hash of previous transactions,\n-     * so may not be able to calculate this.\n-     *\n-     * @param[in] tx    transaction for which we are checking input total\n-     * @return  Sum of value of all inputs (scriptSigs)\n-     */\n-    CAmount GetValueIn(const CTransaction& tx) const;\n-\n     //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;\n "
      },
      {
        "sha": "4b0b224c69be92d4396f6cd0ca702071098c7ab9",
        "filename": "src/compat/assumptions.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compat/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compat/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/assumptions.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -50,6 +50,7 @@ static_assert(sizeof(double) == 8, \"64-bit double assumed\");\n //             code.\n static_assert(sizeof(short) == 2, \"16-bit short assumed\");\n static_assert(sizeof(int) == 4, \"32-bit int assumed\");\n+static_assert(sizeof(unsigned) == 4, \"32-bit unsigned assumed\");\n \n // Assumption: We assume size_t to be 32-bit or 64-bit.\n // Example(s): size_t assumed to be at least 32-bit in ecdsa_signature_parse_der_lax(...)."
      },
      {
        "sha": "d17de33e86b48505db08ca3df6bbe0b39aaf36d0",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -9,26 +9,13 @@\n #include <cstddef>\n #include <cstdint>\n \n-#if defined(HAVE_SYS_SELECT_H)\n-#include <sys/select.h>\n-#endif\n-\n // Prior to GLIBC_2.14, memcpy was aliased to memmove.\n extern \"C\" void* memmove(void* a, const void* b, size_t c);\n extern \"C\" void* memcpy(void* a, const void* b, size_t c)\n {\n     return memmove(a, b, c);\n }\n \n-extern \"C\" void __chk_fail(void) __attribute__((__noreturn__));\n-extern \"C\" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)\n-{\n-    if (a >= FD_SETSIZE)\n-        __chk_fail();\n-    return a / __NFDBITS;\n-}\n-extern \"C\" FDELT_TYPE __fdelt_chk(FDELT_TYPE) __attribute__((weak, alias(\"__fdelt_warn\")));\n-\n #if defined(__i386__) || defined(__arm__)\n \n extern \"C\" int64_t __udivmoddi4(uint64_t u, uint64_t v, uint64_t* rp);"
      },
      {
        "sha": "0367b9a53f02ea272a7c0dbd27d0e2b59e01440e",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -8,10 +8,6 @@\n \n #include <cstddef>\n \n-#if defined(HAVE_SYS_SELECT_H)\n-bool sanity_test_fdelt();\n-#endif\n-\n extern \"C\" void* memcpy(void* a, const void* b, size_t c);\n void* memcpy_int(void* a, const void* b, size_t c)\n {\n@@ -45,9 +41,5 @@ bool sanity_test_memcpy()\n \n bool glibc_sanity_test()\n {\n-#if defined(HAVE_SYS_SELECT_H)\n-    if (!sanity_test_fdelt())\n-        return false;\n-#endif\n     return sanity_test_memcpy<1025>();\n }"
      },
      {
        "sha": "87140d0c714dc5c261d678a48ba329d2f68b8643",
        "filename": "src/compat/glibc_sanity_fdelt.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/compat/glibc_sanity_fdelt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/compat/glibc_sanity_fdelt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity_fdelt.cpp?ref=7237f928118f3ab2df4a905304ef9141f150e2d4",
        "patch": "@@ -1,26 +0,0 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#if defined(HAVE_SYS_SELECT_H)\n-#ifdef HAVE_CSTRING_DEPENDENT_FD_ZERO\n-#include <cstring>\n-#endif\n-#include <sys/select.h>\n-\n-// trigger: Call FD_SET to trigger __fdelt_chk. FORTIFY_SOURCE must be defined\n-//   as >0 and optimizations must be set to at least -O2.\n-// test: Add a file descriptor to an empty fd_set. Verify that it has been\n-//   correctly added.\n-bool sanity_test_fdelt()\n-{\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    FD_SET(0, &fds);\n-    return FD_ISSET(0, &fds);\n-}\n-#endif"
      },
      {
        "sha": "478bfff0b69da0ff847b2866dcf7801f10c53713",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "af01902c9235cd028d57772006c5436c1ecb7255",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,7 +10,7 @@\n        that the following merkle tree algorithm has a serious flaw related to\n        duplicate txids, resulting in a vulnerability (CVE-2012-2459).\n \n-       The reason is that if the number of hashes in the list at a given time\n+       The reason is that if the number of hashes in the list at a given level\n        is odd, the last one is duplicated before computing the next level (which\n        is unusual in Merkle trees). This results in certain sequences of\n        transactions leading to the same merkle root. For example, these two"
      },
      {
        "sha": "1c0a8a096dcc1480e38f4518dfb72408b3d5084a",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,6 +19,7 @@\n #include <boost/algorithm/string/split.hpp>\n \n #include <algorithm>\n+#include <string>\n \n CScript ParseScript(const std::string& s)\n {\n@@ -34,10 +35,9 @@ CScript ParseScript(const std::string& s)\n             if (op < OP_NOP && op != OP_RESERVED)\n                 continue;\n \n-            const char* name = GetOpName(static_cast<opcodetype>(op));\n-            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+            std::string strName = GetOpName(static_cast<opcodetype>(op));\n+            if (strName == \"OP_UNKNOWN\")\n                 continue;\n-            std::string strName(name);\n             mapOpNames[strName] = static_cast<opcodetype>(op);\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n@@ -59,6 +59,14 @@ CScript ParseScript(const std::string& s)\n         {\n             // Number\n             int64_t n = atoi64(*w);\n+\n+            //limit the range of numbers ParseScript accepts in decimal\n+            //since numbers outside -0xFFFFFFFF...0xFFFFFFFF are illegal in scripts\n+            if (n > int64_t{0xffffffff} || n < -1 * int64_t{0xffffffff}) {\n+                throw std::runtime_error(\"script parse error: decimal numeric value only allowed in the \"\n+                                         \"range -0xFFFFFFFF...0xFFFFFFFF\");\n+            }\n+\n             result << n;\n         }\n         else if (w->substr(0,2) == \"0x\" && w->size() > 2 && IsHex(std::string(w->begin()+2, w->end())))"
      },
      {
        "sha": "3473f6e39f3450604a3f140ffaad05bd47c2695b",
        "filename": "src/crypto/sha256_shani.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/crypto/sha256_shani.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/crypto/sha256_shani.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_shani.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -11,13 +11,11 @@\n #include <stdint.h>\n #include <immintrin.h>\n \n-\n-\n namespace {\n \n-const __m128i MASK = _mm_set_epi64x(0x0c0d0e0f08090a0bULL, 0x0405060700010203ULL);\n-const __m128i INIT0 = _mm_set_epi64x(0x6a09e667bb67ae85ull, 0x510e527f9b05688cull);\n-const __m128i INIT1 = _mm_set_epi64x(0x3c6ef372a54ff53aull, 0x1f83d9ab5be0cd19ull);\n+alignas(__m128i) const uint8_t MASK[16] = {0x03, 0x02, 0x01, 0x00, 0x07, 0x06, 0x05, 0x04, 0x0b, 0x0a, 0x09, 0x08, 0x0f, 0x0e, 0x0d, 0x0c};\n+alignas(__m128i) const uint8_t INIT0[16] = {0x8c, 0x68, 0x05, 0x9b, 0x7f, 0x52, 0x0e, 0x51, 0x85, 0xae, 0x67, 0xbb, 0x67, 0xe6, 0x09, 0x6a};\n+alignas(__m128i) const uint8_t INIT1[16] = {0x19, 0xcd, 0xe0, 0x5b, 0xab, 0xd9, 0x83, 0x1f, 0x3a, 0xf5, 0x4f, 0xa5, 0x72, 0xf3, 0x6e, 0x3c};\n \n void inline  __attribute__((always_inline)) QuadRound(__m128i& state0, __m128i& state1, uint64_t k1, uint64_t k0)\n {\n@@ -67,12 +65,12 @@ void inline __attribute__((always_inline)) Unshuffle(__m128i& s0, __m128i& s1)\n \n __m128i inline  __attribute__((always_inline)) Load(const unsigned char* in)\n {\n-    return _mm_shuffle_epi8(_mm_loadu_si128((const __m128i*)in), MASK);\n+    return _mm_shuffle_epi8(_mm_loadu_si128((const __m128i*)in), _mm_load_si128((const __m128i*)MASK));\n }\n \n void inline  __attribute__((always_inline)) Save(unsigned char* out, __m128i s)\n {\n-    _mm_storeu_si128((__m128i*)out, _mm_shuffle_epi8(s, MASK));\n+    _mm_storeu_si128((__m128i*)out, _mm_shuffle_epi8(s, _mm_load_si128((const __m128i*)MASK)));\n }\n }\n \n@@ -149,8 +147,8 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     __m128i bm0, bm1, bm2, bm3, bs0, bs1, bso0, bso1;\n \n     /* Transform 1 */\n-    bs0 = as0 = INIT0;\n-    bs1 = as1 = INIT1;\n+    bs0 = as0 = _mm_load_si128((const __m128i*)INIT0);\n+    bs1 = as1 = _mm_load_si128((const __m128i*)INIT1);\n     am0 = Load(in);\n     bm0 = Load(in + 64);\n     QuadRound(as0, as1, am0, 0xe9b5dba5b5c0fbcfull, 0x71374491428a2f98ull);\n@@ -219,10 +217,10 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     ShiftMessageC(bm1, bm2, bm3);\n     QuadRound(as0, as1, am3, 0xc67178f2bef9A3f7ull, 0xa4506ceb90befffaull);\n     QuadRound(bs0, bs1, bm3, 0xc67178f2bef9A3f7ull, 0xa4506ceb90befffaull);\n-    as0 = _mm_add_epi32(as0, INIT0);\n-    bs0 = _mm_add_epi32(bs0, INIT0);\n-    as1 = _mm_add_epi32(as1, INIT1);\n-    bs1 = _mm_add_epi32(bs1, INIT1);\n+    as0 = _mm_add_epi32(as0, _mm_load_si128((const __m128i*)INIT0));\n+    bs0 = _mm_add_epi32(bs0, _mm_load_si128((const __m128i*)INIT0));\n+    as1 = _mm_add_epi32(as1, _mm_load_si128((const __m128i*)INIT1));\n+    bs1 = _mm_add_epi32(bs1, _mm_load_si128((const __m128i*)INIT1));\n \n     /* Transform 2 */\n     aso0 = as0;\n@@ -275,8 +273,8 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     bm1 = bs1;\n \n     /* Transform 3 */\n-    bs0 = as0 = INIT0;\n-    bs1 = as1 = INIT1;\n+    bs0 = as0 = _mm_load_si128((const __m128i*)INIT0);\n+    bs1 = as1 = _mm_load_si128((const __m128i*)INIT1);\n     QuadRound(as0, as1, am0, 0xe9b5dba5B5c0fbcfull, 0x71374491428a2f98ull);\n     QuadRound(bs0, bs1, bm0, 0xe9b5dba5B5c0fbcfull, 0x71374491428a2f98ull);\n     QuadRound(as0, as1, am1, 0xab1c5ed5923f82a4ull, 0x59f111f13956c25bull);\n@@ -339,10 +337,10 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     ShiftMessageC(bm1, bm2, bm3);\n     QuadRound(as0, as1, am3, 0xc67178f2bef9a3f7ull, 0xa4506ceb90befffaull);\n     QuadRound(bs0, bs1, bm3, 0xc67178f2bef9a3f7ull, 0xa4506ceb90befffaull);\n-    as0 = _mm_add_epi32(as0, INIT0);\n-    bs0 = _mm_add_epi32(bs0, INIT0);\n-    as1 = _mm_add_epi32(as1, INIT1);\n-    bs1 = _mm_add_epi32(bs1, INIT1);\n+    as0 = _mm_add_epi32(as0, _mm_load_si128((const __m128i*)INIT0));\n+    bs0 = _mm_add_epi32(bs0, _mm_load_si128((const __m128i*)INIT0));\n+    as1 = _mm_add_epi32(as1, _mm_load_si128((const __m128i*)INIT1));\n+    bs1 = _mm_add_epi32(bs1, _mm_load_si128((const __m128i*)INIT1));\n \n     /* Extract hash into out */\n     Unshuffle(as0, as1);"
      },
      {
        "sha": "2daf676c4a6796de6f6f943771d19684d90bad00",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_CUCKOOCACHE_H\n #define BITCOIN_CUCKOOCACHE_H\n \n+#include <algorithm> // std::find\n #include <array>\n #include <atomic>\n #include <cmath>"
      },
      {
        "sha": "0f7848bae1825fba758821a6b797b8cafdc229c9",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -8,6 +8,7 @@\n \n class CWallet;\n enum class WalletCreationStatus;\n+struct bilingual_str;\n \n namespace interfaces {\n class Chain;\n@@ -72,12 +73,12 @@ std::vector<std::shared_ptr<CWallet>> GetWallets()\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }"
      },
      {
        "sha": "04f6373a24527302619c73da31c732a3547fe7ef",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,13 +16,7 @@ struct FlatFilePos\n     int nFile;\n     unsigned int nPos;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT_MODE(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nPos));\n-    }\n+    SERIALIZE_METHODS(FlatFilePos, obj) { READWRITE(VARINT_MODE(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED), VARINT(obj.nPos)); }\n \n     FlatFilePos() : nFile(-1), nPos(0) {}\n "
      },
      {
        "sha": "e68c97b3cafbbd6239203ca81b22a82972e23dee",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 8,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -6,6 +6,9 @@\n \n #ifndef WIN32\n #include <fcntl.h>\n+#include <string>\n+#include <sys/file.h>\n+#include <sys/utsname.h>\n #else\n #ifndef NOMINMAX\n #define NOMINMAX\n@@ -47,20 +50,38 @@ FileLock::~FileLock()\n     }\n }\n \n+static bool IsWSL()\n+{\n+    struct utsname uname_data;\n+    return uname(&uname_data) == 0 && std::string(uname_data.version).find(\"Microsoft\") != std::string::npos;\n+}\n+\n bool FileLock::TryLock()\n {\n     if (fd == -1) {\n         return false;\n     }\n-    struct flock lock;\n-    lock.l_type = F_WRLCK;\n-    lock.l_whence = SEEK_SET;\n-    lock.l_start = 0;\n-    lock.l_len = 0;\n-    if (fcntl(fd, F_SETLK, &lock) == -1) {\n-        reason = GetErrorReason();\n-        return false;\n+\n+    // Exclusive file locking is broken on WSL using fcntl (issue #18622)\n+    // This workaround can be removed once the bug on WSL is fixed\n+    static const bool is_wsl = IsWSL();\n+    if (is_wsl) {\n+        if (flock(fd, LOCK_EX | LOCK_NB) == -1) {\n+            reason = GetErrorReason();\n+            return false;\n+        }\n+    } else {\n+        struct flock lock;\n+        lock.l_type = F_WRLCK;\n+        lock.l_whence = SEEK_SET;\n+        lock.l_start = 0;\n+        lock.l_len = 0;\n+        if (fcntl(fd, F_SETLK, &lock) == -1) {\n+            reason = GetErrorReason();\n+            return false;\n+        }\n     }\n+\n     return true;\n }\n #else"
      },
      {
        "sha": "f1b99973711d0cc0d88b4e466932e15ed4aee251",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,7 +9,6 @@\n #include <httpserver.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n-#include <ui_interface.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -151,7 +150,7 @@ static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUserna\n     return multiUserAuthorized(strUserPass);\n }\n \n-static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+static bool HTTPReq_JSONRPC(const util::Ref& context, HTTPRequest* req)\n {\n     // JSONRPC handles only POST\n     if (req->GetRequestMethod() != HTTPRequest::POST) {\n@@ -166,7 +165,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRPCRequest jreq;\n+    JSONRPCRequest jreq(context);\n     jreq.peerAddr = req->GetPeer().ToString();\n     if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", jreq.peerAddr);\n@@ -249,11 +248,8 @@ static bool InitRPCAuthentication()\n {\n     if (gArgs.GetArg(\"-rpcpassword\", \"\") == \"\")\n     {\n-        LogPrintf(\"No rpcpassword set - using random cookie authentication.\\n\");\n+        LogPrintf(\"Using random cookie authentication.\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n-            uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occurred, see debug.log for details\").translated, // Same message as AbortNode\n-                \"\", CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n     } else {\n@@ -288,15 +284,16 @@ static bool InitRPCAuthentication()\n     return true;\n }\n \n-bool StartHTTPRPC()\n+bool StartHTTPRPC(const util::Ref& context)\n {\n     LogPrint(BCLog::RPC, \"Starting HTTP RPC server\\n\");\n     if (!InitRPCAuthentication())\n         return false;\n \n-    RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n+    auto handle_rpc = [&context](HTTPRequest* req, const std::string&) { return HTTPReq_JSONRPC(context, req); };\n+    RegisterHTTPHandler(\"/\", true, handle_rpc);\n     if (g_wallet_init_interface.HasWalletSupport()) {\n-        RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n+        RegisterHTTPHandler(\"/wallet/\", false, handle_rpc);\n     }\n     struct event_base* eventBase = EventBase();\n     assert(eventBase);"
      },
      {
        "sha": "a6a38fc95ae8c8b945177f91075b3fe91f82541c",
        "filename": "src/httprpc.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -5,11 +5,14 @@\n #ifndef BITCOIN_HTTPRPC_H\n #define BITCOIN_HTTPRPC_H\n \n+namespace util {\n+class Ref;\n+} // namespace util\n \n /** Start HTTP RPC subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-bool StartHTTPRPC();\n+bool StartHTTPRPC(const util::Ref& context);\n /** Interrupt HTTP RPC subsystem.\n  */\n void InterruptHTTPRPC();\n@@ -21,7 +24,7 @@ void StopHTTPRPC();\n /** Start HTTP REST subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-void StartREST();\n+void StartREST(const util::Ref& context);\n /** Interrupt RPC REST subsystem.\n  */\n void InterruptREST();"
      },
      {
        "sha": "5e78fd1d71de82880c104d0d18018f4137db2c79",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,19 +1,20 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <httpserver.h>\n \n #include <chainparamsbase.h>\n #include <compat.h>\n-#include <util/threadnames.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n #include <netbase.h>\n #include <rpc/protocol.h> // For HTTP status codes\n #include <shutdown.h>\n #include <sync.h>\n #include <ui_interface.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/threadnames.h>\n+#include <util/translation.h>\n \n #include <deque>\n #include <memory>\n@@ -175,7 +176,7 @@ static bool InitHTTPAllowList()\n         LookupSubNet(strAllow, subnet);\n         if (!subnet.IsValid()) {\n             uiInterface.ThreadSafeMessageBox(\n-                strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                strprintf(Untranslated(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\"), strAllow),\n                 \"\", CClientUIInterface::MSG_ERROR);\n             return false;\n         }\n@@ -189,7 +190,7 @@ static bool InitHTTPAllowList()\n }\n \n /** HTTP request method as string - use for logging only */\n-static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n+std::string RequestMethodString(HTTPRequest::RequestMethod m)\n {\n     switch (m) {\n     case HTTPRequest::GET:\n@@ -420,15 +421,15 @@ bool UpdateHTTPServerLogging(bool enable) {\n #endif\n }\n \n-static std::thread threadHTTP;\n+static std::thread g_thread_http;\n static std::vector<std::thread> g_thread_http_workers;\n \n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n-    threadHTTP = std::thread(ThreadHTTP, eventBase);\n+    g_thread_http = std::thread(ThreadHTTP, eventBase);\n \n     for (int i = 0; i < rpcThreads; i++) {\n         g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue, i);\n@@ -466,7 +467,7 @@ void StopHTTPServer()\n     boundSockets.clear();\n     if (eventBase) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        threadHTTP.join();\n+        if (g_thread_http.joinable()) g_thread_http.join();\n     }\n     if (eventHTTP) {\n         evhttp_free(eventHTTP);\n@@ -510,10 +511,10 @@ void HTTPEvent::trigger(struct timeval* tv)\n     else\n         evtimer_add(ev, tv); // trigger after timeval passed\n }\n-HTTPRequest::HTTPRequest(struct evhttp_request* _req) : req(_req),\n-                                                       replySent(false)\n+HTTPRequest::HTTPRequest(struct evhttp_request* _req, bool _replySent) : req(_req), replySent(_replySent)\n {\n }\n+\n HTTPRequest::~HTTPRequest()\n {\n     if (!replySent) {"
      },
      {
        "sha": "97cd63778a0adacd8489f546a585d142685d3bde",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -60,7 +60,7 @@ class HTTPRequest\n     bool replySent;\n \n public:\n-    explicit HTTPRequest(struct evhttp_request* req);\n+    explicit HTTPRequest(struct evhttp_request* req, bool replySent = false);\n     ~HTTPRequest();\n \n     enum RequestMethod {"
      },
      {
        "sha": "74ea421e139e6ee0aac42ce0b9a6d3a86a76e9e9",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,6 +8,7 @@\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <validation.h>\n #include <warnings.h>\n \n@@ -23,7 +24,7 @@ static void FatalError(const char* fmt, const Args&... args)\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n     uiInterface.ThreadSafeMessageBox(\n-        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        Untranslated(\"Error: A fatal internal error occurred, see debug.log for details\"),\n         \"\", CClientUIInterface::MSG_ERROR);\n     StartShutdown();\n }\n@@ -188,8 +189,7 @@ bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_ti\n     return true;\n }\n \n-void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n-                               const std::vector<CTransactionRef>& txn_conflicted)\n+void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex)\n {\n     if (!m_synced) {\n         return;"
      },
      {
        "sha": "3fab810bb23075f0cbde1382223bcace89171c59",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -64,8 +64,7 @@ class BaseIndex : public CValidationInterface\n     bool Commit();\n \n protected:\n-    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n-                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex) override;\n \n     void ChainStateFlushed(const CBlockLocator& locator) override;\n "
      },
      {
        "sha": "65a5f03a8e70e44ae0000a360775f070d8459bc8",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 14,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -31,6 +31,12 @@ constexpr char DB_FILTER_POS = 'P';\n constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for fltr?????.dat files */\n constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+/** Maximum size of the cfheaders cache\n+ *  We have a limit to prevent a bug in filling this cache\n+ *  potentially turning into an OOM. At 2000 entries, this cache\n+ *  is big enough for a 2,000,000 length block chain, which\n+ *  we should be enough until ~2047. */\n+constexpr size_t CF_HEADERS_CACHE_MAX_SZ{2000};\n \n namespace {\n \n@@ -39,14 +45,7 @@ struct DBVal {\n     uint256 header;\n     FlatFilePos pos;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(hash);\n-        READWRITE(header);\n-        READWRITE(pos);\n-    }\n+    SERIALIZE_METHODS(DBVal, obj) { READWRITE(obj.hash, obj.header, obj.pos); }\n };\n \n struct DBHeightKey {\n@@ -78,17 +77,14 @@ struct DBHashKey {\n \n     explicit DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(DBHashKey, obj) {\n         char prefix = DB_BLOCK_HASH;\n         READWRITE(prefix);\n         if (prefix != DB_BLOCK_HASH) {\n             throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n         }\n \n-        READWRITE(hash);\n+        READWRITE(obj.hash);\n     }\n };\n \n@@ -387,13 +383,32 @@ bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter&\n     return ReadFilterFromDisk(entry.pos, filter_out);\n }\n \n-bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out)\n {\n+    LOCK(m_cs_headers_cache);\n+\n+    bool is_checkpoint{block_index->nHeight % CFCHECKPT_INTERVAL == 0};\n+\n+    if (is_checkpoint) {\n+        // Try to find the block in the headers cache if this is a checkpoint height.\n+        auto header = m_headers_cache.find(block_index->GetBlockHash());\n+        if (header != m_headers_cache.end()) {\n+            header_out = header->second;\n+            return true;\n+        }\n+    }\n+\n     DBVal entry;\n     if (!LookupOne(*m_db, block_index, entry)) {\n         return false;\n     }\n \n+    if (is_checkpoint &&\n+        m_headers_cache.size() < CF_HEADERS_CACHE_MAX_SZ) {\n+        // Add to the headers cache if this is a checkpoint height.\n+        m_headers_cache.emplace(block_index->GetBlockHash(), entry.header);\n+    }\n+\n     header_out = entry.header;\n     return true;\n }"
      },
      {
        "sha": "317f8c0e40fe71019b05d815d02e0b07cd768ef3",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -10,6 +10,14 @@\n #include <flatfile.h>\n #include <index/base.h>\n \n+/** Interval between compact filter checkpoints. See BIP 157. */\n+static constexpr int CFCHECKPT_INTERVAL = 1000;\n+\n+struct FilterHeaderHasher\n+{\n+    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n+};\n+\n /**\n  * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n  * blocks by height. An index is constructed for each supported filter type with its own database\n@@ -30,6 +38,10 @@ class BlockFilterIndex final : public BaseIndex\n     bool ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const;\n     size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n \n+    Mutex m_cs_headers_cache;\n+    /** cache of block hash to filter header, to avoid disk access when responding to getcfcheckpt. */\n+    std::unordered_map<uint256, uint256, FilterHeaderHasher> m_headers_cache GUARDED_BY(m_cs_headers_cache);\n+\n protected:\n     bool Init() override;\n \n@@ -54,7 +66,7 @@ class BlockFilterIndex final : public BaseIndex\n     bool LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const;\n \n     /** Get a single filter header by block. */\n-    bool LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const;\n+    bool LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out);\n \n     /** Get a range of filters between two heights on a chain. */\n     bool LookupFilterRange(int start_height, const CBlockIndex* stop_index,"
      },
      {
        "sha": "4626395ef0595e4182780a93db7122c444d07b86",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -21,12 +21,10 @@ struct CDiskTxPos : public FlatFilePos\n {\n     unsigned int nTxOffset; // after header\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(FlatFilePos, *this);\n-        READWRITE(VARINT(nTxOffset));\n+    SERIALIZE_METHODS(CDiskTxPos, obj)\n+    {\n+        READWRITEAS(FlatFilePos, obj);\n+        READWRITE(VARINT(obj.nTxOffset));\n     }\n \n     CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {"
      },
      {
        "sha": "a9f4b0b9f2993882f1c6f2a847fb39f201302375",
        "filename": "src/indirectmap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/indirectmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/indirectmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/indirectmap.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2016 The Bitcoin Core developers\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "37e625129550f70921f7d94b4caf36574226d6b0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 274,
        "deletions": 186,
        "changes": 460,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -59,9 +59,10 @@\n #include <validationinterface.h>\n #include <walletinitinterface.h>\n \n+#include <functional>\n+#include <set>\n #include <stdint.h>\n #include <stdio.h>\n-#include <set>\n \n #ifndef WIN32\n #include <attributes.h>\n@@ -73,6 +74,7 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n+#include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n \n #if ENABLE_ZMQ\n@@ -86,10 +88,6 @@ static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n-// Dump addresses to banlist.dat every 15 minutes (900s)\n-static constexpr int DUMP_BANS_INTERVAL = 60 * 15;\n-\n-\n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n // accessing block files don't count towards the fd_set size limit\n@@ -124,7 +122,7 @@ NODISCARD static bool CreatePidFile()\n #endif\n         return true;\n     } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\").translated, GetPidFile().string(), std::strerror(errno)));\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n     }\n }\n \n@@ -200,7 +198,20 @@ void Shutdown(NodeContext& node)\n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n     if (node.peer_logic) UnregisterValidationInterface(node.peer_logic.get());\n-    if (node.connman) node.connman->Stop();\n+    // Follow the lock order requirements:\n+    // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraOutboundCount\n+    //   which locks cs_vNodes.\n+    // * ProcessMessage locks cs_main and g_cs_orphans before indirectly calling ForEachNode which\n+    //   locks cs_vNodes.\n+    // * CConnman::Stop calls DeleteNode, which calls FinalizeNode, which locks cs_main and calls\n+    //   EraseOrphansFor, which locks g_cs_orphans.\n+    //\n+    // Thus the implicit locking order requirement is: (1) cs_main, (2) g_cs_orphans, (3) cs_vNodes.\n+    if (node.connman) {\n+        node.connman->StopThreads();\n+        LOCK2(::cs_main, ::g_cs_orphans);\n+        node.connman->StopNodes();\n+    }\n \n     StopTorControl();\n \n@@ -233,13 +244,12 @@ void Shutdown(NodeContext& node)\n     }\n \n     // FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing\n-    //\n-    // g_chainstate is referenced here directly (instead of ::ChainstateActive()) because it\n-    // may not have been initialized yet.\n-    {\n+    if (node.chainman) {\n         LOCK(cs_main);\n-        if (g_chainstate && g_chainstate->CanFlushToDisk()) {\n-            g_chainstate->ForceFlushStateToDisk();\n+        for (CChainState* chainstate : node.chainman->GetAll()) {\n+            if (chainstate->CanFlushToDisk()) {\n+                chainstate->ForceFlushStateToDisk();\n+            }\n         }\n     }\n \n@@ -261,11 +271,13 @@ void Shutdown(NodeContext& node)\n     // up with our current chain to avoid any strange pruning edge cases and make\n     // next startup faster by avoiding rescan.\n \n-    {\n+    if (node.chainman) {\n         LOCK(cs_main);\n-        if (g_chainstate && g_chainstate->CanFlushToDisk()) {\n-            g_chainstate->ForceFlushStateToDisk();\n-            g_chainstate->ResetCoinsViews();\n+        for (CChainState* chainstate : node.chainman->GetAll()) {\n+            if (chainstate->CanFlushToDisk()) {\n+                chainstate->ForceFlushStateToDisk();\n+                chainstate->ResetCoinsViews();\n+            }\n         }\n         pblocktree.reset();\n     }\n@@ -281,20 +293,24 @@ void Shutdown(NodeContext& node)\n     }\n #endif\n \n+    node.chain_clients.clear();\n+    UnregisterAllValidationInterfaces();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    globalVerifyHandle.reset();\n+    ECC_Stop();\n+    node.args = nullptr;\n+    node.mempool = nullptr;\n+    node.chainman = nullptr;\n+    node.scheduler.reset();\n+\n     try {\n         if (!fs::remove(GetPidFile())) {\n             LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n         }\n     } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n     }\n-    node.chain_clients.clear();\n-    UnregisterAllValidationInterfaces();\n-    GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    globalVerifyHandle.reset();\n-    ECC_Stop();\n-    if (node.mempool) node.mempool = nullptr;\n-    node.scheduler.reset();\n+\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n \n@@ -336,19 +352,22 @@ static void registerSignalHandler(int signal, void(*handler)(int))\n static boost::signals2::connection rpc_notify_block_change_connection;\n static void OnRPCStarted()\n {\n-    rpc_notify_block_change_connection = uiInterface.NotifyBlockTip_connect(&RPCNotifyBlockChange);\n+    rpc_notify_block_change_connection = uiInterface.NotifyBlockTip_connect(std::bind(RPCNotifyBlockChange, std::placeholders::_2));\n }\n \n static void OnRPCStopped()\n {\n     rpc_notify_block_change_connection.disconnect();\n-    RPCNotifyBlockChange(false, nullptr);\n+    RPCNotifyBlockChange(nullptr);\n     g_best_block_cv.notify_all();\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-void SetupServerArgs()\n+void SetupServerArgs(NodeContext& node)\n {\n+    assert(!node.args);\n+    node.args = &gArgs;\n+\n     SetupHelpOptions(gArgs);\n     gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n \n@@ -375,7 +394,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #endif\n     gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Transactions from the wallet, RPC and relay whitelisted inbound peers are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless '-whitelistforcerelay' is '1', in which case whitelisted peers' transactions will be relayed. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n@@ -429,6 +448,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -503,11 +523,16 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n-        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \".\",\n+        ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+#ifdef HAVE_THREAD_LOCAL\n     gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+#else\n+    hidden_args.emplace_back(\"-logthreadnames\");\n+#endif\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -564,13 +589,12 @@ void SetupServerArgs()\n std::string LicenseInfo()\n {\n     const std::string URL_SOURCE_CODE = \"<https://github.com/bitcoin/bitcoin>\";\n-    const std::string URL_WEBSITE = \"<https://bitcoincore.org>\";\n \n     return CopyrightHolders(strprintf(_(\"Copyright (C) %i-%i\").translated, 2009, COPYRIGHT_YEAR) + \" \") + \"\\n\" +\n            \"\\n\" +\n            strprintf(_(\"Please contribute if you find %s useful. \"\n                        \"Visit %s for further information about the software.\").translated,\n-               PACKAGE_NAME, URL_WEBSITE) +\n+               PACKAGE_NAME, \"<\" PACKAGE_URL \">\") +\n            \"\\n\" +\n            strprintf(_(\"The source code is available from %s.\").translated,\n                URL_SOURCE_CODE) +\n@@ -582,9 +606,9 @@ std::string LicenseInfo()\n }\n \n #if HAVE_SYSTEM\n-static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)\n+static void BlockNotifyCallback(SynchronizationState sync_state, const CBlockIndex* pBlockIndex)\n {\n-    if (initialSync || !pBlockIndex)\n+    if (sync_state != SynchronizationState::POST_INIT || !pBlockIndex)\n         return;\n \n     std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n@@ -600,7 +624,7 @@ static bool fHaveGenesis = false;\n static Mutex g_genesis_wait_mutex;\n static std::condition_variable g_genesis_wait_cv;\n \n-static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n+static void BlockNotifyGenesisWait(const CBlockIndex* pBlockIndex)\n {\n     if (pBlockIndex != nullptr) {\n         {\n@@ -666,7 +690,7 @@ static void CleanupBlockRevFiles()\n     }\n }\n \n-static void ThreadImport(std::vector<fs::path> vImportFiles)\n+static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     util::ThreadRename(\"loadblk\");\n@@ -687,6 +711,10 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n             LoadExternalBlockFile(chainparams, file, &pos);\n+            if (ShutdownRequested()) {\n+                LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n+                return;\n+            }\n             nFile++;\n         }\n         pblocktree->WriteReindexing(false);\n@@ -702,17 +730,27 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(chainparams, file);\n+            if (ShutdownRequested()) {\n+                LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n+                return;\n+            }\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n-        StartShutdown();\n-        return;\n+\n+    // We can't hold cs_main during ActivateBestChain even though we're accessing\n+    // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+    // the relevant pointers before the ABC call.\n+    for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+        BlockValidationState state;\n+        if (!chainstate->ActivateBestChain(state, chainparams, nullptr)) {\n+            LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n+            StartShutdown();\n+            return;\n+        }\n     }\n \n     if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n@@ -733,32 +771,30 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n  */\n static bool InitSanityCheck()\n {\n-    if(!ECC_InitSanityCheck()) {\n-        InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n-        return false;\n+    if (!ECC_InitSanityCheck()) {\n+        return InitError(Untranslated(\"Elliptic curve cryptography sanity check failure. Aborting.\"));\n     }\n \n     if (!glibc_sanity_test() || !glibcxx_sanity_test())\n         return false;\n \n     if (!Random_SanityCheck()) {\n-        InitError(\"OS cryptographic RNG sanity check failure. Aborting.\");\n-        return false;\n+        return InitError(Untranslated(\"OS cryptographic RNG sanity check failure. Aborting.\"));\n     }\n \n     return true;\n }\n \n-static bool AppInitServers()\n+static bool AppInitServers(const util::Ref& context)\n {\n     RPCServer::OnStarted(&OnRPCStarted);\n     RPCServer::OnStopped(&OnRPCStopped);\n     if (!InitHTTPServer())\n         return false;\n     StartRPC();\n-    if (!StartHTTPRPC())\n+    if (!StartHTTPRPC(context))\n         return false;\n-    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST();\n+    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(context);\n     StartHTTPServer();\n     return true;\n }\n@@ -840,7 +876,9 @@ void InitLogging()\n     LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n     LogInstance().m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     LogInstance().m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n+#ifdef HAVE_THREAD_LOCAL\n     LogInstance().m_log_threadnames = gArgs.GetBoolArg(\"-logthreadnames\", DEFAULT_LOGTHREADNAMES);\n+#endif\n \n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n \n@@ -892,8 +930,9 @@ bool AppInitBasicSetup()\n     HeapSetInformation(nullptr, HeapEnableTerminationOnCorruption, nullptr, 0);\n #endif\n \n-    if (!SetupNetworking())\n-        return InitError(\"Initializing networking failed\");\n+    if (!SetupNetworking()) {\n+        return InitError(Untranslated(\"Initializing networking failed.\"));\n+    }\n \n #ifndef WIN32\n     if (!gArgs.GetBoolArg(\"-sysperms\", false)) {\n@@ -930,16 +969,16 @@ bool AppInitParameterInteraction()\n     // on the command line or in this network's section of the config file.\n     std::string network = gArgs.GetChainName();\n     for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n-        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\").translated, arg, network, network));\n+        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n     }\n \n     // Warn if unrecognized section name are present in the config file.\n     for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\").translated, section.m_file, section.m_line, section.m_name));\n+        InitWarning(strprintf(Untranslated(\"%s:%i \") + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\")));\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\")));\n     }\n \n     // parse and validate enabled filter types\n@@ -951,25 +990,32 @@ bool AppInitParameterInteraction()\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n-                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\").translated, name));\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n             }\n             g_enabled_filter_types.insert(filter_type);\n         }\n     }\n \n+    // Basic filters are the only supported filters. The basic filters index must be enabled\n+    // to serve compact filters\n+    if (gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS) &&\n+        g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n+        return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\").translated);\n+            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (!g_enabled_filter_types.empty()) {\n-            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\").translated);\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n         }\n     }\n \n     // -bind and -whitebind can't be set when not listening\n     size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n-        return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n+        return InitError(Untranslated(\"Cannot set -bind or -whitebind together with -listen=0\"));\n     }\n \n     // Make sure enough file descriptors are available\n@@ -987,11 +1033,11 @@ bool AppInitParameterInteraction()\n #endif\n     nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\").translated);\n+        return InitError(_(\"Not enough file descriptors available.\"));\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n-        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\").translated, nUserMaxConnections, nMaxConnections));\n+        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n     if (gArgs.IsArgSet(\"-debug\")) {\n@@ -1002,7 +1048,7 @@ bool AppInitParameterInteraction()\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n                 if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debug\", cat));\n+                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n                 }\n             }\n         }\n@@ -1011,7 +1057,7 @@ bool AppInitParameterInteraction()\n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n         if (!LogInstance().DisableCategory(cat)) {\n-            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debugexclude\", cat));\n+            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n         }\n     }\n \n@@ -1032,7 +1078,7 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n         const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n         if (!IsHexNumber(minChainWorkStr)) {\n-            return InitError(strprintf(\"Invalid non-hex (%s) minimum chain work value specified\", minChainWorkStr));\n+            return InitError(strprintf(Untranslated(\"Invalid non-hex (%s) minimum chain work value specified\"), minChainWorkStr));\n         }\n         nMinimumChainWork = UintToArith256(uint256S(minChainWorkStr));\n     } else {\n@@ -1047,21 +1093,21 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\").translated, std::ceil(nMempoolSizeMin / 1000000.0)));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-incrementalrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")));\n         incrementalRelayFee = CFeeRate(n);\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n     int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n-        return InitError(_(\"Prune cannot be configured with a negative value.\").translated);\n+        return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n     nPruneTarget = (uint64_t) nPruneArg * 1024 * 1024;\n     if (nPruneArg == 1) {  // manual pruning: -prune=1\n@@ -1070,7 +1116,7 @@ bool AppInitParameterInteraction()\n         fPruneMode = true;\n     } else if (nPruneTarget) {\n         if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\n-            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\").translated, MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n+            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n         }\n         LogPrintf(\"Prune configured to target %u MiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n         fPruneMode = true;\n@@ -1083,13 +1129,13 @@ bool AppInitParameterInteraction()\n \n     peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n-        return InitError(\"peertimeout cannot be configured with a negative value.\");\n+        return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n \n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")));\n         }\n         // High fee check is done afterward in CWallet::CreateWalletFromFile()\n         ::minRelayTxFee = CFeeRate(n);\n@@ -1105,7 +1151,7 @@ bool AppInitParameterInteraction()\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"blockmintxfee\", gArgs.GetArg(\"-blockmintxfee\", \"\")));\n     }\n \n     // Feerate used to define dust.  Shouldn't be changed lightly as old\n@@ -1114,13 +1160,13 @@ bool AppInitParameterInteraction()\n     {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n))\n-            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")).translated);\n+            return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")));\n         dustRelayFee = CFeeRate(n);\n     }\n \n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n-        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+        return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n@@ -1137,10 +1183,10 @@ bool AppInitParameterInteraction()\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n-        return InitError(\"rpcserialversion must be non-negative.\");\n+        return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n-        return InitError(\"unknown rpcserialversion requested.\");\n+        return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n     nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n@@ -1152,10 +1198,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\").translated, datadir.string()));\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\").translated, datadir.string(), PACKAGE_NAME));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), PACKAGE_NAME));\n     }\n     return true;\n }\n@@ -1173,7 +1219,7 @@ bool AppInitSanityChecks()\n \n     // Sanity check\n     if (!InitSanityCheck())\n-        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\").translated, PACKAGE_NAME));\n+        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), PACKAGE_NAME));\n \n     // Probe the data directory lock to give an early error message, if possible\n     // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n@@ -1193,7 +1239,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain(NodeContext& node)\n+bool AppInitMain(const util::Ref& context, NodeContext& node)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n@@ -1209,7 +1255,7 @@ bool AppInitMain(NodeContext& node)\n         }\n     }\n     if (!LogInstance().StartLogging()) {\n-            return InitError(strprintf(\"Could not open debug log file %s\",\n+            return InitError(strprintf(Untranslated(\"Could not open debug log file %s\"),\n                 LogInstance().m_file_path.string()));\n     }\n \n@@ -1224,7 +1270,7 @@ bool AppInitMain(NodeContext& node)\n         LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n     } else if (gArgs.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n-        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\").translated, config_file_path.string()));\n+        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n     } else {\n         // Not categorizing as \"Warning\" because it's the default behavior\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n@@ -1278,7 +1324,7 @@ bool AppInitMain(NodeContext& node)\n     // Gather some entropy once per minute.\n     node.scheduler->scheduleEvery([]{\n         RandAddPeriodic();\n-    }, 60000);\n+    }, std::chrono::minutes{1});\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n@@ -1295,7 +1341,6 @@ bool AppInitMain(NodeContext& node)\n     for (const auto& client : node.chain_clients) {\n         client->registerRpcs();\n     }\n-    g_rpc_node = &node;\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n #endif\n@@ -1308,8 +1353,8 @@ bool AppInitMain(NodeContext& node)\n     if (gArgs.GetBoolArg(\"-server\", false))\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n-        if (!AppInitServers())\n-            return InitError(_(\"Unable to start HTTP server. See debug log for details.\").translated);\n+        if (!AppInitServers(context))\n+            return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n@@ -1329,20 +1374,27 @@ bool AppInitMain(NodeContext& node)\n     node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n+    // Make mempool generally available in the node context. For example the connection manager, wallet, or RPC threads,\n+    // which are all started after this, may use it from the node context.\n+    assert(!node.mempool);\n+    node.mempool = &::mempool;\n+    assert(!node.chainman);\n+    node.chainman = &g_chainman;\n+    ChainstateManager& chainman = EnsureChainman(node);\n \n-    node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler));\n+    node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.chainman, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\").translated, cmt));\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n         uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\").translated,\n+        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n@@ -1351,7 +1403,7 @@ bool AppInitMain(NodeContext& node)\n         for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\").translated, snet));\n+                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n             nets.insert(net);\n         }\n         for (int n = 0; n < NET_MAX; n++) {\n@@ -1372,12 +1424,12 @@ bool AppInitMain(NodeContext& node)\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg, proxyAddr, 9050, fNameLookup)) {\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n         }\n \n         proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1396,11 +1448,11 @@ bool AppInitMain(NodeContext& node)\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg, onionProxy, 9050, fNameLookup)) {\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n             if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n             SetProxy(NET_ONION, addrOnion);\n             SetReachable(NET_ONION, true);\n         }\n@@ -1416,7 +1468,7 @@ bool AppInitMain(NodeContext& node)\n         if (Lookup(strAddr, addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n         else\n-            return InitError(ResolveErrMsg(\"externalip\", strAddr));\n+            return InitError(Untranslated(ResolveErrMsg(\"externalip\", strAddr)));\n     }\n \n     // Read asmap file if configured\n@@ -1429,12 +1481,12 @@ bool AppInitMain(NodeContext& node)\n             asmap_path = GetDataDir() / asmap_path;\n         }\n         if (!fs::exists(asmap_path)) {\n-            InitError(strprintf(_(\"Could not find asmap file %s\").translated, asmap_path));\n+            InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n             return false;\n         }\n         std::vector<bool> asmap = CAddrMan::DecodeAsmap(asmap_path);\n         if (asmap.size() == 0) {\n-            InitError(strprintf(_(\"Could not parse asmap file %s\").translated, asmap_path));\n+            InitError(strprintf(_(\"Could not parse asmap file %s\"), asmap_path));\n             return false;\n         }\n         const uint256 asmap_version = SerializeHash(asmap);\n@@ -1498,17 +1550,18 @@ bool AppInitMain(NodeContext& node)\n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         bool fReset = fReindex;\n-        std::string strLoadError;\n+        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+        };\n+        bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index...\").translated);\n \n         do {\n             const int64_t load_block_index_start_time = GetTimeMillis();\n-            bool is_coinsview_empty;\n             try {\n                 LOCK(cs_main);\n-                // This statement makes ::ChainstateActive() usable.\n-                g_chainstate = MakeUnique<CChainState>();\n+                chainman.InitializeChainstate();\n                 UnloadBlockIndex();\n \n                 // new CBlockTreeDB tries to delete the existing file, which\n@@ -1529,23 +1582,23 @@ bool AppInitMain(NodeContext& node)\n                 // block file from disk.\n                 // Note that it also sets fReindex based on the disk flag!\n                 // From here on out fReindex and fReset mean something different!\n-                if (!LoadBlockIndex(chainparams)) {\n+                if (!chainman.LoadBlockIndex(chainparams)) {\n                     if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\").translated;\n+                    strLoadError = _(\"Error loading block database\");\n                     break;\n                 }\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!::BlockIndex().empty() &&\n                         !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\").translated);\n+                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\").translated;\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n                     break;\n                 }\n \n@@ -1554,108 +1607,145 @@ bool AppInitMain(NodeContext& node)\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n                 if (!fReindex && !LoadGenesisBlock(chainparams)) {\n-                    strLoadError = _(\"Error initializing block database\").translated;\n+                    strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n \n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\"),\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\");\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    if (!is_coinsview_empty(chainstate)) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\");\n+                            failed_chainstate_init = true;\n+                            break; // out of the per-chainstate loop\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    break; // out of the chainstate activation do-while\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\").translated;\n+                strLoadError = _(\"Error opening block database\");\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            bool failed_rewind{false};\n+            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n+            // chainstates beforehand.\n+            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on the chainstate, and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\");\n+                        failed_rewind = true;\n+                        break; // out of the per-chainstate loop\n+                    }\n                 }\n             }\n \n+            if (failed_rewind) {\n+                break; // out of the chainstate activation do-while\n+            }\n+\n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n \n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n-\n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : chainman.GetAll()) {\n+                    if (!is_coinsview_empty(chainstate)) {\n+                        uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n+                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                                MIN_BLOCKS_TO_KEEP);\n+                        }\n+\n+                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                        RPCNotifyBlockChange(tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                            failed_verification = true;\n+                            break;\n+                        }\n+\n+                        // Only verify the DB of the active chainstate. This is fixed in later\n+                        // work when we allow VerifyDB to be parameterized by chainstate.\n+                        if (&::ChainstateActive() == chainstate &&\n+                                !CVerifyDB().VerifyDB(\n+                                chainparams, &chainstate->CoinsDB(),\n+                                gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                            strLoadError = _(\"Corrupted block database detected\");\n+                            failed_verification = true;\n+                            break;\n+                        }\n                     }\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\").translated;\n+                strLoadError = _(\"Error opening block database\");\n+                failed_verification = true;\n                 break;\n             }\n \n-            fLoaded = true;\n-            LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n+            if (!failed_verification) {\n+                fLoaded = true;\n+                LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n+            }\n         } while(false);\n \n         if (!fLoaded && !ShutdownRequested()) {\n             // first suggest a reindex\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion(\n-                    strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\").translated,\n-                    strLoadError + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n+                    strLoadError + Untranslated(\".\\n\\n\") + _(\"Do you want to rebuild the block database now?\"),\n+                    strLoadError.original + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n                     \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n                 if (fRet) {\n                     fReindex = true;\n@@ -1678,11 +1768,6 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n-    // Now that the chain state is loaded, make mempool generally available in the node context. For example the\n-    // connection manager, wallet, or RPC threads, which are all started after this, may use it from the node context.\n-    assert(!node.mempool);\n-    node.mempool = &::mempool;\n-\n     fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n@@ -1716,8 +1801,11 @@ bool AppInitMain(NodeContext& node)\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n         nLocalServices = ServiceFlags(nLocalServices & ~NODE_NETWORK);\n         if (!fReindex) {\n-            uiInterface.InitMessage(_(\"Pruning blockstore...\").translated);\n-            ::ChainstateActive().PruneAndFlush();\n+            LOCK(cs_main);\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                uiInterface.InitMessage(_(\"Pruning blockstore...\").translated);\n+                chainstate->PruneAndFlush();\n+            }\n         }\n     }\n \n@@ -1730,19 +1818,19 @@ bool AppInitMain(NodeContext& node)\n     // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace(GetDataDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetDataDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n         return false;\n     }\n     if (!CheckDiskSpace(GetBlocksDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetBlocksDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n         return false;\n     }\n \n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     boost::signals2::connection block_notify_genesis_wait_connection;\n     if (::ChainActive().Tip() == nullptr) {\n-        block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(BlockNotifyGenesisWait);\n+        block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(std::bind(BlockNotifyGenesisWait, std::placeholders::_2));\n     } else {\n         fHaveGenesis = true;\n     }\n@@ -1757,7 +1845,7 @@ bool AppInitMain(NodeContext& node)\n         vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(std::bind(&ThreadImport, vImportFiles));\n+    threadGroup.create_thread([=, &chainman] { ThreadImport(chainman, vImportFiles); });\n \n     // Wait for genesis block to be processed\n     {\n@@ -1803,7 +1891,7 @@ bool AppInitMain(NodeContext& node)\n     connOptions.m_max_outbound_full_relay = std::min(MAX_OUTBOUND_FULL_RELAY_CONNECTIONS, connOptions.nMaxConnections);\n     connOptions.m_max_outbound_block_relay = std::min(MAX_BLOCKS_ONLY_CONNECTIONS, connOptions.nMaxConnections-connOptions.m_max_outbound_full_relay);\n     connOptions.nMaxAddnode = MAX_ADDNODE_CONNECTIONS;\n-    connOptions.nMaxFeeler = 1;\n+    connOptions.nMaxFeeler = MAX_FEELER_CONNECTIONS;\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n@@ -1819,21 +1907,21 @@ bool AppInitMain(NodeContext& node)\n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n         if (!Lookup(strBind, addrBind, GetListenPort(), false)) {\n-            return InitError(ResolveErrMsg(\"bind\", strBind));\n+            return InitError(Untranslated(ResolveErrMsg(\"bind\", strBind)));\n         }\n         connOptions.vBinds.push_back(addrBind);\n     }\n     for (const std::string& strBind : gArgs.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n         std::string error;\n-        if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n+        if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(Untranslated(error));\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n     for (const auto& net : gArgs.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         std::string error;\n-        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(error);\n+        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(Untranslated(error));\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n@@ -1863,7 +1951,7 @@ bool AppInitMain(NodeContext& node)\n     BanMan* banman = node.banman.get();\n     node.scheduler->scheduleEvery([banman]{\n         banman->DumpBanlist();\n-    }, DUMP_BANS_INTERVAL * 1000);\n+    }, DUMP_BANS_INTERVAL);\n \n     return true;\n }"
      },
      {
        "sha": "33fe96e8ea49fa2262e1820e99a961c59baaa9aa",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,6 +14,9 @@ struct NodeContext;\n namespace boost {\n class thread_group;\n } // namespace boost\n+namespace util {\n+class Ref;\n+} // namespace util\n \n /** Interrupt threads */\n void Interrupt(NodeContext& node);\n@@ -51,12 +54,12 @@ bool AppInitLockDataDirectory();\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(NodeContext& node);\n+bool AppInitMain(const util::Ref& context, NodeContext& node);\n \n /**\n- * Setup the arguments for gArgs\n+ * Register all arguments with the ArgsManager\n  */\n-void SetupServerArgs();\n+void SetupServerArgs(NodeContext& node);\n \n /** Returns licensing information (for -version) */\n std::string LicenseInfo();"
      },
      {
        "sha": "d8e459a8e8d480897f6ca66baf720e7b8f5b1764",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 170,
        "deletions": 162,
        "changes": 332,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -38,157 +38,68 @@\n namespace interfaces {\n namespace {\n \n-class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n+bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<RecursiveMutex>& lock)\n {\n-    Optional<int> getHeight() override\n-    {\n-        LockAssertion lock(::cs_main);\n-        int height = ::ChainActive().Height();\n-        if (height >= 0) {\n-            return height;\n-        }\n-        return nullopt;\n-    }\n-    Optional<int> getBlockHeight(const uint256& hash) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = LookupBlockIndex(hash);\n-        if (block && ::ChainActive().Contains(block)) {\n-            return block->nHeight;\n-        }\n-        return nullopt;\n-    }\n-    uint256 getBlockHash(int height) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n-        assert(block != nullptr);\n-        return block->GetBlockHash();\n-    }\n-    int64_t getBlockTime(int height) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n-        assert(block != nullptr);\n-        return block->GetBlockTime();\n-    }\n-    int64_t getBlockMedianTimePast(int height) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n-        assert(block != nullptr);\n-        return block->GetMedianTimePast();\n-    }\n-    bool haveBlockOnDisk(int height) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n-        return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n-    }\n-    Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = ::ChainActive().FindEarliestAtLeast(time, height);\n-        if (block) {\n-            if (hash) *hash = block->GetBlockHash();\n-            return block->nHeight;\n-        }\n-        return nullopt;\n-    }\n-    Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n+    if (!index) return false;\n+    if (block.m_hash) *block.m_hash = index->GetBlockHash();\n+    if (block.m_height) *block.m_height = index->nHeight;\n+    if (block.m_time) *block.m_time = index->GetBlockTime();\n+    if (block.m_max_time) *block.m_max_time = index->GetBlockTimeMax();\n+    if (block.m_mtp_time) *block.m_mtp_time = index->GetMedianTimePast();\n+    if (block.m_data) {\n+        REVERSE_LOCK(lock);\n+        if (!ReadBlockFromDisk(*block.m_data, index, Params().GetConsensus())) block.m_data->SetNull();\n+    }\n+    return true;\n+}\n+\n+class NotificationsProxy : public CValidationInterface\n+{\n+public:\n+    explicit NotificationsProxy(std::shared_ptr<Chain::Notifications> notifications)\n+        : m_notifications(std::move(notifications)) {}\n+    virtual ~NotificationsProxy() = default;\n+    void TransactionAddedToMempool(const CTransactionRef& tx) override\n     {\n-        LockAssertion lock(::cs_main);\n-        if (::fPruneMode) {\n-            CBlockIndex* block = stop_height ? ::ChainActive()[*stop_height] : ::ChainActive().Tip();\n-            while (block && block->nHeight >= start_height) {\n-                if ((block->nStatus & BLOCK_HAVE_DATA) == 0) {\n-                    return block->nHeight;\n-                }\n-                block = block->pprev;\n-            }\n-        }\n-        return nullopt;\n+        m_notifications->transactionAddedToMempool(tx);\n     }\n-    Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx) override\n     {\n-        LockAssertion lock(::cs_main);\n-        const CBlockIndex* block = LookupBlockIndex(hash);\n-        const CBlockIndex* fork = block ? ::ChainActive().FindFork(block) : nullptr;\n-        if (height) {\n-            if (block) {\n-                *height = block->nHeight;\n-            } else {\n-                height->reset();\n-            }\n-        }\n-        if (fork) {\n-            return fork->nHeight;\n-        }\n-        return nullopt;\n+        m_notifications->transactionRemovedFromMempool(tx);\n     }\n-    CBlockLocator getTipLocator() override\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        LockAssertion lock(::cs_main);\n-        return ::ChainActive().GetLocator();\n+        m_notifications->blockConnected(*block, index->nHeight);\n     }\n-    Optional<int> findLocatorFork(const CBlockLocator& locator) override\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        LockAssertion lock(::cs_main);\n-        if (CBlockIndex* fork = FindForkInGlobalIndex(::ChainActive(), locator)) {\n-            return fork->nHeight;\n-        }\n-        return nullopt;\n+        m_notifications->blockDisconnected(*block, index->nHeight);\n     }\n-    bool checkFinalTx(const CTransaction& tx) override\n+    void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n     {\n-        LockAssertion lock(::cs_main);\n-        return CheckFinalTx(tx);\n+        m_notifications->updatedBlockTip();\n     }\n-\n-    using UniqueLock::UniqueLock;\n+    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->chainStateFlushed(locator); }\n+    std::shared_ptr<Chain::Notifications> m_notifications;\n };\n \n-class NotificationsHandlerImpl : public Handler, CValidationInterface\n+class NotificationsHandlerImpl : public Handler\n {\n public:\n-    explicit NotificationsHandlerImpl(Chain& chain, Chain::Notifications& notifications)\n-        : m_chain(chain), m_notifications(&notifications)\n+    explicit NotificationsHandlerImpl(std::shared_ptr<Chain::Notifications> notifications)\n+        : m_proxy(std::make_shared<NotificationsProxy>(std::move(notifications)))\n     {\n-        RegisterValidationInterface(this);\n+        RegisterSharedValidationInterface(m_proxy);\n     }\n     ~NotificationsHandlerImpl() override { disconnect(); }\n     void disconnect() override\n     {\n-        if (m_notifications) {\n-            m_notifications = nullptr;\n-            UnregisterValidationInterface(this);\n+        if (m_proxy) {\n+            UnregisterSharedValidationInterface(m_proxy);\n+            m_proxy.reset();\n         }\n     }\n-    void TransactionAddedToMempool(const CTransactionRef& tx) override\n-    {\n-        m_notifications->TransactionAddedToMempool(tx);\n-    }\n-    void TransactionRemovedFromMempool(const CTransactionRef& tx) override\n-    {\n-        m_notifications->TransactionRemovedFromMempool(tx);\n-    }\n-    void BlockConnected(const std::shared_ptr<const CBlock>& block,\n-        const CBlockIndex* index,\n-        const std::vector<CTransactionRef>& tx_conflicted) override\n-    {\n-        m_notifications->BlockConnected(*block, tx_conflicted, index->nHeight);\n-    }\n-    void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n-    {\n-        m_notifications->BlockDisconnected(*block, index->nHeight);\n-    }\n-    void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n-    {\n-        m_notifications->UpdatedBlockTip();\n-    }\n-    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->ChainStateFlushed(locator); }\n-    Chain& m_chain;\n-    Chain::Notifications* m_notifications;\n+    std::shared_ptr<NotificationsProxy> m_proxy;\n };\n \n class RpcHandlerImpl : public Handler\n@@ -216,7 +127,7 @@ class RpcHandlerImpl : public Handler\n         ::tableRPC.appendCommand(m_command.name, &m_command);\n     }\n \n-    void disconnect() override final\n+    void disconnect() final\n     {\n         if (m_wrapped_command) {\n             m_wrapped_command = nullptr;\n@@ -234,41 +145,135 @@ class ChainImpl : public Chain\n {\n public:\n     explicit ChainImpl(NodeContext& node) : m_node(node) {}\n-    std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n-    {\n-        auto result = MakeUnique<LockImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n-        if (try_lock && result && !*result) return {};\n-        // std::move necessary on some compilers due to conversion from\n-        // LockImpl to Lock pointer\n-        return std::move(result);\n-    }\n-    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n-    {\n-        CBlockIndex* index;\n-        {\n-            LOCK(cs_main);\n-            index = LookupBlockIndex(hash);\n-            if (!index) {\n-                return false;\n-            }\n-            if (time) {\n-                *time = index->GetBlockTime();\n-            }\n-            if (time_max) {\n-                *time_max = index->GetBlockTimeMax();\n-            }\n+    Optional<int> getHeight() override\n+    {\n+        LOCK(::cs_main);\n+        int height = ::ChainActive().Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        LOCK(::cs_main);\n+        CBlockIndex* block = LookupBlockIndex(hash);\n+        if (block && ::ChainActive().Contains(block)) {\n+            return block->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    uint256 getBlockHash(int height) override\n+    {\n+        LOCK(::cs_main);\n+        CBlockIndex* block = ::ChainActive()[height];\n+        assert(block);\n+        return block->GetBlockHash();\n+    }\n+    bool haveBlockOnDisk(int height) override\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* block = ::ChainActive()[height];\n+        return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n+    }\n+    Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* block = ::ChainActive().FindEarliestAtLeast(time, height);\n+        if (block) {\n+            if (hash) *hash = block->GetBlockHash();\n+            return block->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    CBlockLocator getTipLocator() override\n+    {\n+        LOCK(cs_main);\n+        return ::ChainActive().GetLocator();\n+    }\n+    bool checkFinalTx(const CTransaction& tx) override\n+    {\n+        LOCK(cs_main);\n+        return CheckFinalTx(tx);\n+    }\n+    Optional<int> findLocatorFork(const CBlockLocator& locator) override\n+    {\n+        LOCK(cs_main);\n+        if (CBlockIndex* fork = FindForkInGlobalIndex(::ChainActive(), locator)) {\n+            return fork->nHeight;\n         }\n-        if (block && !ReadBlockFromDisk(*block, index, Params().GetConsensus())) {\n-            block->SetNull();\n+        return nullopt;\n+    }\n+    bool findBlock(const uint256& hash, const FoundBlock& block) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        return FillBlock(LookupBlockIndex(hash), block, lock);\n+    }\n+    bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        return FillBlock(ChainActive().FindEarliestAtLeast(min_time, min_height), block, lock);\n+    }\n+    bool findNextBlock(const uint256& block_hash, int block_height, const FoundBlock& next, bool* reorg) override {\n+        WAIT_LOCK(cs_main, lock);\n+        CBlockIndex* block = ChainActive()[block_height];\n+        if (block && block->GetBlockHash() != block_hash) block = nullptr;\n+        if (reorg) *reorg = !block;\n+        return FillBlock(block ? ChainActive()[block_height + 1] : nullptr, next, lock);\n+    }\n+    bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        if (const CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+            if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n+                return FillBlock(ancestor, ancestor_out, lock);\n+            }\n         }\n-        return true;\n+        return FillBlock(nullptr, ancestor_out, lock);\n+    }\n+    bool findAncestorByHash(const uint256& block_hash, const uint256& ancestor_hash, const FoundBlock& ancestor_out) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        const CBlockIndex* block = LookupBlockIndex(block_hash);\n+        const CBlockIndex* ancestor = LookupBlockIndex(ancestor_hash);\n+        if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n+        return FillBlock(ancestor, ancestor_out, lock);\n+    }\n+    bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n+        const CBlockIndex* block2 = LookupBlockIndex(block_hash2);\n+        const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n+        // Using & instead of && below to avoid short circuiting and leaving\n+        // output uninitialized.\n+        return FillBlock(ancestor, ancestor_out, lock) & FillBlock(block1, block1_out, lock) & FillBlock(block2, block2_out, lock);\n     }\n     void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n         return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n     }\n+    bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n+    {\n+        // hasBlocks returns true if all ancestors of block_hash in specified\n+        // range have block data (are not pruned), false if any ancestors in\n+        // specified range are missing data.\n+        //\n+        // For simplicity and robustness, min_height and max_height are only\n+        // used to limit the range, and passing min_height that's too low or\n+        // max_height that's too high will not crash or change the result.\n+        LOCK(::cs_main);\n+        if (CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+            if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n+            for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n+                // Check pprev to not segfault if min_height is too low\n+                if (block->nHeight <= min_height || !block->pprev) return true;\n+            }\n+        }\n+        return false;\n+    }\n     RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n     {\n         LOCK(::mempool.cs);\n@@ -280,7 +285,10 @@ class ChainImpl : public Chain\n         auto it = ::mempool.GetIter(txid);\n         return it && (*it)->GetCountWithDescendants() > 1;\n     }\n-    bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) override\n+    bool broadcastTransaction(const CTransactionRef& tx,\n+        const CAmount& max_tx_fee,\n+        bool relay,\n+        std::string& err_string) override\n     {\n         const TransactionError err = BroadcastTransaction(m_node, tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n         // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures.\n@@ -336,15 +344,15 @@ class ChainImpl : public Chain\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n-    void initWarning(const std::string& message) override { InitWarning(message); }\n-    void initError(const std::string& message) override { InitError(message); }\n+    void initWarning(const bilingual_str& message) override { InitWarning(message); }\n+    void initError(const bilingual_str& message) override { InitError(message); }\n     void showProgress(const std::string& title, int progress, bool resume_possible) override\n     {\n         ::uiInterface.ShowProgress(title, progress, resume_possible);\n     }\n-    std::unique_ptr<Handler> handleNotifications(Notifications& notifications) override\n+    std::unique_ptr<Handler> handleNotifications(std::shared_ptr<Notifications> notifications) override\n     {\n-        return MakeUnique<NotificationsHandlerImpl>(*this, notifications);\n+        return MakeUnique<NotificationsHandlerImpl>(std::move(notifications));\n     }\n     void waitForNotificationsIfTipChanged(const uint256& old_tip) override\n     {\n@@ -368,7 +376,7 @@ class ChainImpl : public Chain\n     {\n         LOCK2(::cs_main, ::mempool.cs);\n         for (const CTxMemPoolEntry& entry : ::mempool.mapTx) {\n-            notifications.TransactionAddedToMempool(entry.GetSharedTx());\n+            notifications.transactionAddedToMempool(entry.GetSharedTx());\n         }\n     }\n     NodeContext& m_node;"
      },
      {
        "sha": "7dfc77db7b8caf5dde20103fdb7136296599753b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 119,
        "deletions": 92,
        "changes": 211,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -21,6 +21,7 @@ class CScheduler;\n class Coin;\n class uint256;\n enum class RBFTransactionState;\n+struct bilingual_str;\n struct CBlockLocator;\n struct FeeCalculation;\n struct NodeContext;\n@@ -30,6 +31,27 @@ namespace interfaces {\n class Handler;\n class Wallet;\n \n+//! Helper for findBlock to selectively return pieces of block data.\n+class FoundBlock\n+{\n+public:\n+    FoundBlock& hash(uint256& hash) { m_hash = &hash; return *this; }\n+    FoundBlock& height(int& height) { m_height = &height; return *this; }\n+    FoundBlock& time(int64_t& time) { m_time = &time; return *this; }\n+    FoundBlock& maxTime(int64_t& max_time) { m_max_time = &max_time; return *this; }\n+    FoundBlock& mtpTime(int64_t& mtp_time) { m_mtp_time = &mtp_time; return *this; }\n+    //! Read block data from disk. If the block exists but doesn't have data\n+    //! (for example due to pruning), the CBlock variable will be set to null.\n+    FoundBlock& data(CBlock& data) { m_data = &data; return *this; }\n+\n+    uint256* m_hash = nullptr;\n+    int* m_height = nullptr;\n+    int64_t* m_time = nullptr;\n+    int64_t* m_max_time = nullptr;\n+    int64_t* m_mtp_time = nullptr;\n+    CBlock* m_data = nullptr;\n+};\n+\n //! Interface giving clients (wallet processes, maybe other analysis tools in\n //! the future) ability to access to the chain state, receive notifications,\n //! estimate fees, and submit transactions.\n@@ -38,103 +60,94 @@ class Wallet;\n //! internal workings of the bitcoin node, and not being very convenient to use.\n //! Chain methods should be cleaned up and simplified over time. Examples:\n //!\n-//! * The Chain::lock() method, which lets clients delay chain tip updates\n-//!   should be removed when clients are able to respond to updates\n-//!   asynchronously\n-//!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n-//!\n-//! * The initMessage() and showProgress() methods which the wallet uses to send\n+//! * The initMessages() and showProgress() methods which the wallet uses to send\n //!   notifications to the GUI should go away when GUI and wallet can directly\n //!   communicate with each other without going through the node\n //!   (https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253321096).\n //!\n //! * The handleRpc, registerRpcs, rpcEnableDeprecated methods and other RPC\n //!   methods can go away if wallets listen for HTTP requests on their own\n //!   ports instead of registering to handle requests on the node HTTP port.\n+//!\n+//! * Move fee estimation queries to an asynchronous interface and let the\n+//!   wallet cache it, fee estimation being driven by node mempool, wallet\n+//!   should be the consumer.\n+//!\n+//! * The `guessVerificationProgress`, `getBlockHeight`, `getBlockHash`, etc\n+//!   methods can go away if rescan logic is moved on the node side, and wallet\n+//!   only register rescan request.\n class Chain\n {\n public:\n     virtual ~Chain() {}\n \n-    //! Interface for querying locked chain state, used by legacy code that\n-    //! assumes state won't change between calls. New code should avoid using\n-    //! the Lock interface and instead call higher-level Chain methods\n-    //! that return more information so the chain doesn't need to stay locked\n-    //! between calls.\n-    class Lock\n-    {\n-    public:\n-        virtual ~Lock() {}\n-\n-        //! Get current chain height, not including genesis block (returns 0 if\n-        //! chain only contains genesis block, nullopt if chain does not contain\n-        //! any blocks).\n-        virtual Optional<int> getHeight() = 0;\n-\n-        //! Get block height above genesis block. Returns 0 for genesis block,\n-        //! 1 for following block, and so on. Returns nullopt for a block not\n-        //! included in the current chain.\n-        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n-\n-        //! Get block hash. Height must be valid or this function will abort.\n-        virtual uint256 getBlockHash(int height) = 0;\n-\n-        //! Get block time. Height must be valid or this function will abort.\n-        virtual int64_t getBlockTime(int height) = 0;\n-\n-        //! Get block median time past. Height must be valid or this function\n-        //! will abort.\n-        virtual int64_t getBlockMedianTimePast(int height) = 0;\n-\n-        //! Check that the block is available on disk (i.e. has not been\n-        //! pruned), and contains transactions.\n-        virtual bool haveBlockOnDisk(int height) = 0;\n-\n-        //! Return height of the first block in the chain with timestamp equal\n-        //! or greater than the given time and height equal or greater than the\n-        //! given height, or nullopt if there is no block with a high enough\n-        //! timestamp and height. Also return the block hash as an optional output parameter\n-        //! (to avoid the cost of a second lookup in case this information is needed.)\n-        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) = 0;\n-\n-        //! Return height of last block in the specified range which is pruned, or\n-        //! nullopt if no block in the range is pruned. Range is inclusive.\n-        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n-\n-        //! Return height of the specified block if it is on the chain, otherwise\n-        //! return the height of the highest block on chain that's an ancestor\n-        //! of the specified block, or nullopt if there is no common ancestor.\n-        //! Also return the height of the specified block as an optional output\n-        //! parameter (to avoid the cost of a second hash lookup in case this\n-        //! information is desired).\n-        virtual Optional<int> findFork(const uint256& hash, Optional<int>* height) = 0;\n-\n-        //! Get locator for the current chain tip.\n-        virtual CBlockLocator getTipLocator() = 0;\n-\n-        //! Return height of the highest block on chain in common with the locator,\n-        //! which will either be the original block used to create the locator,\n-        //! or one of its ancestors.\n-        virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n-\n-        //! Check if transaction will be final given chain height current time.\n-        virtual bool checkFinalTx(const CTransaction& tx) = 0;\n-    };\n+    //! Get current chain height, not including genesis block (returns 0 if\n+    //! chain only contains genesis block, nullopt if chain does not contain\n+    //! any blocks)\n+    virtual Optional<int> getHeight() = 0;\n \n-    //! Return Lock interface. Chain is locked when this is called, and\n-    //! unlocked when the returned interface is freed.\n-    virtual std::unique_ptr<Lock> lock(bool try_lock = false) = 0;\n+    //! Get block height above genesis block. Returns 0 for genesis block,\n+    //! 1 for following block, and so on. Returns nullopt for a block not\n+    //! included in the current chain.\n+    virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+    //! Get block hash. Height must be valid or this function will abort.\n+    virtual uint256 getBlockHash(int height) = 0;\n+\n+    //! Check that the block is available on disk (i.e. has not been\n+    //! pruned), and contains transactions.\n+    virtual bool haveBlockOnDisk(int height) = 0;\n+\n+    //! Return height of the first block in the chain with timestamp equal\n+    //! or greater than the given time and height equal or greater than the\n+    //! given height, or nullopt if there is no block with a high enough\n+    //! timestamp and height. Also return the block hash as an optional output parameter\n+    //! (to avoid the cost of a second lookup in case this information is needed.)\n+    virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) = 0;\n+\n+    //! Get locator for the current chain tip.\n+    virtual CBlockLocator getTipLocator() = 0;\n+\n+    //! Return height of the highest block on chain in common with the locator,\n+    //! which will either be the original block used to create the locator,\n+    //! or one of its ancestors.\n+    virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+\n+    //! Check if transaction will be final given chain height current time.\n+    virtual bool checkFinalTx(const CTransaction& tx) = 0;\n \n     //! Return whether node has the block and optionally return block metadata\n     //! or contents.\n-    //!\n-    //! If a block pointer is provided to retrieve the block contents, and the\n-    //! block exists but doesn't have data (for example due to pruning), the\n-    //! block will be empty and all fields set to null.\n-    virtual bool findBlock(const uint256& hash,\n-        CBlock* block = nullptr,\n-        int64_t* time = nullptr,\n-        int64_t* max_time = nullptr) = 0;\n+    virtual bool findBlock(const uint256& hash, const FoundBlock& block={}) = 0;\n+\n+    //! Find first block in the chain with timestamp >= the given time\n+    //! and height >= than the given height, return false if there is no block\n+    //! with a high enough timestamp and height. Optionally return block\n+    //! information.\n+    virtual bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block={}) = 0;\n+\n+    //! Find next block if block is part of current chain. Also flag if\n+    //! there was a reorg and the specified block hash is no longer in the\n+    //! current chain, and optionally return block information.\n+    virtual bool findNextBlock(const uint256& block_hash, int block_height, const FoundBlock& next={}, bool* reorg=nullptr) = 0;\n+\n+    //! Find ancestor of block at specified height and optionally return\n+    //! ancestor information.\n+    virtual bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out={}) = 0;\n+\n+    //! Return whether block descends from a specified ancestor, and\n+    //! optionally return ancestor information.\n+    virtual bool findAncestorByHash(const uint256& block_hash,\n+        const uint256& ancestor_hash,\n+        const FoundBlock& ancestor_out={}) = 0;\n+\n+    //! Find most recent common ancestor between two blocks and optionally\n+    //! return block information.\n+    virtual bool findCommonAncestor(const uint256& block_hash1,\n+        const uint256& block_hash2,\n+        const FoundBlock& ancestor_out={},\n+        const FoundBlock& block1_out={},\n+        const FoundBlock& block2_out={}) = 0;\n \n     //! Look up unspent output information. Returns coins in the mempool and in\n     //! the current chain UTXO set. Iterates through all the keys in the map and\n@@ -145,6 +158,11 @@ class Chain\n     //! the specified block hash are verified.\n     virtual double guessVerificationProgress(const uint256& block_hash) = 0;\n \n+    //! Return true if data is available for all blocks in the specified range\n+    //! of blocks. This checks all blocks that are ancestors of block_hash in\n+    //! the height range from min_height to max_height, inclusive.\n+    virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, Optional<int> max_height = {}) = 0;\n+\n     //! Check if transaction is RBF opt in.\n     virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n \n@@ -154,7 +172,10 @@ class Chain\n     //! Transaction is added to memory pool, if the transaction fee is below the\n     //! amount specified by max_tx_fee, and broadcast to all peers if relay is set to true.\n     //! Return false if the transaction could not be added due to the fee or for another reason.\n-    virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) = 0;\n+    virtual bool broadcastTransaction(const CTransactionRef& tx,\n+        const CAmount& max_tx_fee,\n+        bool relay,\n+        std::string& err_string) = 0;\n \n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n@@ -204,10 +225,10 @@ class Chain\n     virtual void initMessage(const std::string& message) = 0;\n \n     //! Send init warning.\n-    virtual void initWarning(const std::string& message) = 0;\n+    virtual void initWarning(const bilingual_str& message) = 0;\n \n     //! Send init error.\n-    virtual void initError(const std::string& message) = 0;\n+    virtual void initError(const bilingual_str& message) = 0;\n \n     //! Send progress indicator.\n     virtual void showProgress(const std::string& title, int progress, bool resume_possible) = 0;\n@@ -217,16 +238,16 @@ class Chain\n     {\n     public:\n         virtual ~Notifications() {}\n-        virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}\n-        virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}\n-        virtual void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& tx_conflicted, int height) {}\n-        virtual void BlockDisconnected(const CBlock& block, int height) {}\n-        virtual void UpdatedBlockTip() {}\n-        virtual void ChainStateFlushed(const CBlockLocator& locator) {}\n+        virtual void transactionAddedToMempool(const CTransactionRef& tx) {}\n+        virtual void transactionRemovedFromMempool(const CTransactionRef& ptx) {}\n+        virtual void blockConnected(const CBlock& block, int height) {}\n+        virtual void blockDisconnected(const CBlock& block, int height) {}\n+        virtual void updatedBlockTip() {}\n+        virtual void chainStateFlushed(const CBlockLocator& locator) {}\n     };\n \n     //! Register handler for notifications.\n-    virtual std::unique_ptr<Handler> handleNotifications(Notifications& notifications) = 0;\n+    virtual std::unique_ptr<Handler> handleNotifications(std::shared_ptr<Notifications> notifications) = 0;\n \n     //! Wait for pending notifications to be processed unless block hash points to the current\n     //! chain tip.\n@@ -245,7 +266,7 @@ class Chain\n     //! Current RPC serialization flags.\n     virtual int rpcSerializationFlags() = 0;\n \n-    //! Synchronously send TransactionAddedToMempool notifications about all\n+    //! Synchronously send transactionAddedToMempool notifications about all\n     //! current mempool transactions to the specified handler and return after\n     //! the last one is sent. These notifications aren't coordinated with async\n     //! notifications sent by handleNotifications, so out of date async\n@@ -280,6 +301,12 @@ class ChainClient\n \n     //! Shut down client.\n     virtual void stop() = 0;\n+\n+    //! Set mock time.\n+    virtual void setMockTime(int64_t time) = 0;\n+\n+    //! Return interfaces for accessing wallets (if any).\n+    virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n };\n \n //! Return implementation of Chain interface."
      },
      {
        "sha": "4134a4527f153473aaea05bead8cff55244da93f",
        "filename": "src/interfaces/handler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "11baf9dd65d188d5f3feabd1aef55f47b821a7b1",
        "filename": "src/interfaces/handler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/handler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/handler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "bd1b36fea509b0ac676f7fbe13e822af6fcc1b43",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 20,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -27,7 +27,9 @@\n #include <sync.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n+#include <util/ref.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <validation.h>\n #include <warnings.h>\n \n@@ -37,12 +39,14 @@\n \n #include <univalue.h>\n \n+#include <boost/signals2/signal.hpp>\n+\n class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings);\n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(interfaces::Node::LoadWalletFn load_wallet);\n \n namespace interfaces {\n@@ -52,7 +56,7 @@ namespace {\n class NodeImpl : public Node\n {\n public:\n-    void initError(const std::string& message) override { InitError(message); }\n+    void initError(const std::string& message) override { InitError(Untranslated(message)); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n         return gArgs.ParseParameters(argc, argv, error);\n@@ -77,14 +81,22 @@ class NodeImpl : public Node\n     bool appInitMain() override\n     {\n         m_context.chain = MakeChain(m_context);\n-        return AppInitMain(m_context);\n+        return AppInitMain(m_context_ref, m_context);\n     }\n     void appShutdown() override\n     {\n         Interrupt(m_context);\n         Shutdown(m_context);\n     }\n-    void startShutdown() override { StartShutdown(); }\n+    void startShutdown() override\n+    {\n+        StartShutdown();\n+        // Stop RPC for clean shutdown if any of waitfor* commands is executed.\n+        if (gArgs.GetBoolArg(\"-server\", false)) {\n+            InterruptRPC();\n+            StopRPC();\n+        }\n+    }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     void mapPort(bool use_upnp) override\n     {\n@@ -95,7 +107,7 @@ class NodeImpl : public Node\n             StopMapPort();\n         }\n     }\n-    void setupServerArgs() override { return SetupServerArgs(); }\n+    void setupServerArgs() override { return SetupServerArgs(m_context); }\n     bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n     size_t getNodeCount(CConnman::NumConnections flags) override\n     {\n@@ -150,14 +162,14 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    bool disconnect(const CNetAddr& net_addr) override\n+    bool disconnectByAddress(const CNetAddr& net_addr) override\n     {\n         if (m_context.connman) {\n             return m_context.connman->DisconnectNode(net_addr);\n         }\n         return false;\n     }\n-    bool disconnect(NodeId id) override\n+    bool disconnectById(NodeId id) override\n     {\n         if (m_context.connman) {\n             return m_context.connman->DisconnectNode(id);\n@@ -183,6 +195,11 @@ class NodeImpl : public Node\n         LOCK(::cs_main);\n         return ::ChainActive().Height();\n     }\n+    uint256 getBestBlockHash() override\n+    {\n+        const CBlockIndex* tip = WITH_LOCK(::cs_main, return ::ChainActive().Tip());\n+        return tip ? tip->GetBlockHash() : Params().GenesisBlock().GetHash();\n+    }\n     int64_t getLastBlockTime() override\n     {\n         LOCK(::cs_main);\n@@ -222,7 +239,7 @@ class NodeImpl : public Node\n     CFeeRate getDustRelayFee() override { return ::dustRelayFee; }\n     UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n     {\n-        JSONRPCRequest req;\n+        JSONRPCRequest req(m_context_ref);\n         req.params = params;\n         req.strMethod = command;\n         req.URI = uri;\n@@ -251,21 +268,21 @@ class NodeImpl : public Node\n     std::vector<std::unique_ptr<Wallet>> getWallets() override\n     {\n         std::vector<std::unique_ptr<Wallet>> wallets;\n-        for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n-            wallets.emplace_back(MakeWallet(wallet));\n+        for (auto& client : m_context.chain_clients) {\n+            auto client_wallets = client->getWallets();\n+            std::move(client_wallets.begin(), client_wallets.end(), std::back_inserter(wallets));\n         }\n         return wallets;\n     }\n-    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) override\n+    std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n         return MakeWallet(LoadWallet(*m_context.chain, name, error, warnings));\n     }\n-    WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) override\n+    std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, WalletCreationStatus& status) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n-        result = MakeWallet(wallet);\n-        return status;\n+        status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n+        return MakeWallet(wallet);\n     }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n@@ -305,21 +322,22 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyBlockTip_connect([fn](bool initial_download, const CBlockIndex* block) {\n-            fn(initial_download, block->nHeight, block->GetBlockTime(),\n+        return MakeHandler(::uiInterface.NotifyBlockTip_connect([fn](SynchronizationState sync_state, const CBlockIndex* block) {\n+            fn(sync_state, BlockTip{block->nHeight, block->GetBlockTime(), block->GetBlockHash()},\n                 GuessVerificationProgress(Params().TxData(), block));\n         }));\n     }\n     std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) override\n     {\n         return MakeHandler(\n-            ::uiInterface.NotifyHeaderTip_connect([fn](bool initial_download, const CBlockIndex* block) {\n-                fn(initial_download, block->nHeight, block->GetBlockTime(),\n+            ::uiInterface.NotifyHeaderTip_connect([fn](SynchronizationState sync_state, const CBlockIndex* block) {\n+                fn(sync_state, BlockTip{block->nHeight, block->GetBlockTime(), block->GetBlockHash()},\n                     /* verification progress is unused when a header was received */ 0);\n             }));\n     }\n     NodeContext* context() override { return &m_context; }\n     NodeContext m_context;\n+    util::Ref m_context_ref{m_context};\n };\n \n } // namespace"
      },
      {
        "sha": "0b7fb6736acf04a893028ef30cd3acbf98ce0e57",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -27,13 +27,16 @@ class Coin;\n class RPCTimerInterface;\n class UniValue;\n class proxyType;\n+enum class SynchronizationState;\n+enum class WalletCreationStatus;\n struct CNodeStateStats;\n struct NodeContext;\n-enum class WalletCreationStatus;\n+struct bilingual_str;\n \n namespace interfaces {\n class Handler;\n class Wallet;\n+struct BlockTip;\n \n //! Top-level interface for a bitcoin node (bitcoind process).\n class Node\n@@ -124,10 +127,10 @@ class Node\n     virtual bool unban(const CSubNet& ip) = 0;\n \n     //! Disconnect node by address.\n-    virtual bool disconnect(const CNetAddr& net_addr) = 0;\n+    virtual bool disconnectByAddress(const CNetAddr& net_addr) = 0;\n \n     //! Disconnect node by id.\n-    virtual bool disconnect(NodeId id) = 0;\n+    virtual bool disconnectById(NodeId id) = 0;\n \n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;\n@@ -147,6 +150,9 @@ class Node\n     //! Get num blocks.\n     virtual int getNumBlocks() = 0;\n \n+    //! Get best block hash.\n+    virtual uint256 getBestBlockHash() = 0;\n+\n     //! Get last block time.\n     virtual int64_t getLastBlockTime() = 0;\n \n@@ -201,22 +207,22 @@ class Node\n     //! Attempts to load a wallet from file or directory.\n     //! The loaded wallet is also notified to handlers previously registered\n     //! with handleLoadWallet.\n-    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) = 0;\n+    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n \n     //! Create a wallet from file\n-    virtual WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) = 0;\n+    virtual std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, WalletCreationStatus& status) = 0;\n \n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;\n \n     //! Register handler for message box messages.\n     using MessageBoxFn =\n-        std::function<bool(const std::string& message, const std::string& caption, unsigned int style)>;\n+        std::function<bool(const bilingual_str& message, const std::string& caption, unsigned int style)>;\n     virtual std::unique_ptr<Handler> handleMessageBox(MessageBoxFn fn) = 0;\n \n     //! Register handler for question messages.\n-    using QuestionFn = std::function<bool(const std::string& message,\n+    using QuestionFn = std::function<bool(const bilingual_str& message,\n         const std::string& non_interactive_message,\n         const std::string& caption,\n         unsigned int style)>;\n@@ -248,12 +254,12 @@ class Node\n \n     //! Register handler for block tip messages.\n     using NotifyBlockTipFn =\n-        std::function<void(bool initial_download, int height, int64_t block_time, double verification_progress)>;\n+        std::function<void(SynchronizationState, interfaces::BlockTip tip, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) = 0;\n \n     //! Register handler for header tip messages.\n     using NotifyHeaderTipFn =\n-        std::function<void(bool initial_download, int height, int64_t block_time, double verification_progress)>;\n+        std::function<void(SynchronizationState, interfaces::BlockTip tip, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n \n     //! Return pointer to internal chain interface, useful for testing.\n@@ -263,6 +269,13 @@ class Node\n //! Return implementation of Node interface.\n std::unique_ptr<Node> MakeNode();\n \n+//! Block tip (could be a header or not, depends on the subscribed signal).\n+struct BlockTip {\n+    int block_height;\n+    int64_t block_time;\n+    uint256 block_hash;\n+};\n+\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_NODE_H"
      },
      {
        "sha": "cec75030add7e40301033cdc733ba54c6de07048",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 65,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,6 +14,7 @@\n #include <sync.h>\n #include <ui_interface.h>\n #include <uint256.h>\n+#include <util/check.h>\n #include <util/system.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n@@ -59,16 +60,16 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n+WalletTxStatus MakeWalletTxStatus(CWallet& wallet, const CWalletTx& wtx)\n {\n     WalletTxStatus result;\n-    result.block_height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock).get_value_or(std::numeric_limits<int>::max());\n+    result.block_height = wtx.m_confirm.block_height > 0 ? wtx.m_confirm.block_height : std::numeric_limits<int>::max();\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n     result.depth_in_main_chain = wtx.GetDepthInMainChain();\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n-    result.is_final = locked_chain.checkFinalTx(*wtx.tx);\n-    result.is_trusted = wtx.IsTrusted(locked_chain);\n+    result.is_final = wallet.chain().checkFinalTx(*wtx.tx);\n+    result.is_trusted = wtx.IsTrusted();\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();\n     result.is_in_main_chain = wtx.IsInMainChain();\n@@ -151,12 +152,12 @@ class WalletImpl : public Wallet\n         std::string* purpose) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        auto it = m_wallet->mapAddressBook.find(dest);\n-        if (it == m_wallet->mapAddressBook.end()) {\n+        auto it = m_wallet->m_address_book.find(dest);\n+        if (it == m_wallet->m_address_book.end() || it->second.IsChange()) {\n             return false;\n         }\n         if (name) {\n-            *name = it->second.name;\n+            *name = it->second.GetLabel();\n         }\n         if (is_mine) {\n             *is_mine = m_wallet->IsMine(dest);\n@@ -170,8 +171,9 @@ class WalletImpl : public Wallet\n     {\n         LOCK(m_wallet->cs_wallet);\n         std::vector<WalletAddress> result;\n-        for (const auto& item : m_wallet->mapAddressBook) {\n-            result.emplace_back(item.first, m_wallet->IsMine(item.first), item.second.name, item.second.purpose);\n+        for (const auto& item : m_wallet->m_address_book) {\n+            if (item.second.IsChange()) continue;\n+            result.emplace_back(item.first, m_wallet->IsMine(item.first), item.second.GetLabel(), item.second.purpose);\n         }\n         return result;\n     }\n@@ -194,25 +196,21 @@ class WalletImpl : public Wallet\n     }\n     void lockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->LockCoin(output);\n     }\n     void unlockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->UnlockCoin(output);\n     }\n     bool isLockedCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->IsLockedCoin(output.hash, output.n);\n     }\n     void listLockedCoins(std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->ListLockedCoins(outputs);\n     }\n@@ -221,12 +219,11 @@ class WalletImpl : public Wallet\n         bool sign,\n         int& change_pos,\n         CAmount& fee,\n-        std::string& fail_reason) override\n+        bilingual_str& fail_reason) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         CTransactionRef tx;\n-        if (!m_wallet->CreateTransaction(*locked_chain, recipients, tx, fee, change_pos,\n+        if (!m_wallet->CreateTransaction(recipients, tx, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }\n@@ -236,14 +233,12 @@ class WalletImpl : public Wallet\n         WalletValueMap value_map,\n         WalletOrderForm order_form) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         m_wallet->CommitTransaction(std::move(tx), std::move(value_map), std::move(order_form));\n     }\n     bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet->TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->AbandonTransaction(txid);\n     }\n@@ -253,32 +248,24 @@ class WalletImpl : public Wallet\n     }\n     bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n-        CAmount total_fee,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n-        if (total_fee > 0) {\n-            return feebumper::CreateTotalBumpTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n-                feebumper::Result::OK;\n-        } else {\n-            return feebumper::CreateRateBumpTransaction(*m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) ==\n-                feebumper::Result::OK;\n-        }\n+        return feebumper::CreateRateBumpTransaction(*m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) == feebumper::Result::OK;\n     }\n     bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(*m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,\n         CMutableTransaction&& mtx,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         uint256& bumped_txid) override\n     {\n         return feebumper::CommitTransaction(*m_wallet.get(), txid, std::move(mtx), errors, bumped_txid) ==\n                feebumper::Result::OK;\n     }\n     CTransactionRef getTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         auto mi = m_wallet->mapWallet.find(txid);\n         if (mi != m_wallet->mapWallet.end()) {\n@@ -288,7 +275,6 @@ class WalletImpl : public Wallet\n     }\n     WalletTx getWalletTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         auto mi = m_wallet->mapWallet.find(txid);\n         if (mi != m_wallet->mapWallet.end()) {\n@@ -298,7 +284,6 @@ class WalletImpl : public Wallet\n     }\n     std::vector<WalletTx> getWalletTxs() override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         std::vector<WalletTx> result;\n         result.reserve(m_wallet->mapWallet.size());\n@@ -312,10 +297,6 @@ class WalletImpl : public Wallet\n         int& num_blocks,\n         int64_t& block_time) override\n     {\n-        auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n-        if (!locked_chain) {\n-            return false;\n-        }\n         TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n@@ -324,14 +305,10 @@ class WalletImpl : public Wallet\n         if (mi == m_wallet->mapWallet.end()) {\n             return false;\n         }\n-        if (Optional<int> height = locked_chain->getHeight()) {\n-            num_blocks = *height;\n-            block_time = locked_chain->getBlockTime(*height);\n-        } else {\n-            num_blocks = -1;\n-            block_time = -1;\n-        }\n-        tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n+        num_blocks = m_wallet->GetLastBlockHeight();\n+        block_time = -1;\n+        CHECK_NONFATAL(m_wallet->chain().findBlock(m_wallet->GetLastBlockHash(), FoundBlock().time(block_time)));\n+        tx_status = MakeWalletTxStatus(*m_wallet, mi->second);\n         return true;\n     }\n     WalletTx getWalletTxDetails(const uint256& txid,\n@@ -340,23 +317,22 @@ class WalletImpl : public Wallet\n         bool& in_mempool,\n         int& num_blocks) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         auto mi = m_wallet->mapWallet.find(txid);\n         if (mi != m_wallet->mapWallet.end()) {\n-            num_blocks = locked_chain->getHeight().get_value_or(-1);\n+            num_blocks = m_wallet->GetLastBlockHeight();\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n-            tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n+            tx_status = MakeWalletTxStatus(*m_wallet, mi->second);\n             return MakeWalletTx(*m_wallet, mi->second);\n         }\n         return {};\n     }\n-    TransactionError fillPSBT(PartiallySignedTransaction& psbtx,\n-        bool& complete,\n-        int sighash_type = 1 /* SIGHASH_ALL */,\n-        bool sign = true,\n-        bool bip32derivs = false) const override\n+    TransactionError fillPSBT(int sighash_type,\n+        bool sign,\n+        bool bip32derivs,\n+        PartiallySignedTransaction& psbtx,\n+        bool& complete) override\n     {\n         return m_wallet->FillPSBT(psbtx, complete, sighash_type, sign, bip32derivs);\n     }\n@@ -375,16 +351,14 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n+    bool tryGetBalances(WalletBalances& balances, uint256& block_hash) override\n     {\n-        auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n-        if (!locked_chain) return false;\n         TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n+        block_hash = m_wallet->GetLastBlockHash();\n         balances = getBalances();\n-        num_blocks = locked_chain->getHeight().get_value_or(-1);\n         return true;\n     }\n     CAmount getBalance() override { return m_wallet->GetBalance().m_mine_trusted; }\n@@ -394,34 +368,29 @@ class WalletImpl : public Wallet\n     }\n     isminetype txinIsMine(const CTxIn& txin) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->IsMine(txin);\n     }\n     isminetype txoutIsMine(const CTxOut& txout) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->IsMine(txout);\n     }\n     CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->GetDebit(txin, filter);\n     }\n     CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->GetCredit(txout, filter);\n     }\n     CoinsList listCoins() override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         CoinsList result;\n-        for (const auto& entry : m_wallet->ListCoins(*locked_chain)) {\n+        for (const auto& entry : m_wallet->ListCoins()) {\n             auto& group = result[entry.first];\n             for (const auto& coin : entry.second) {\n                 group.emplace_back(COutPoint(coin.tx->GetHash(), coin.i),\n@@ -432,7 +401,6 @@ class WalletImpl : public Wallet\n     }\n     std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet->chain().lock();\n         LOCK(m_wallet->cs_wallet);\n         std::vector<WalletTxOut> result;\n         result.reserve(outputs.size());\n@@ -463,15 +431,16 @@ class WalletImpl : public Wallet\n     }\n     unsigned int getConfirmTarget() override { return m_wallet->m_confirm_target; }\n     bool hdEnabled() override { return m_wallet->IsHDEnabled(); }\n-    bool canGetAddresses() const override { return m_wallet->CanGetAddresses(); }\n-    bool IsWalletFlagSet(uint64_t flag) override { return m_wallet->IsWalletFlagSet(flag); }\n+    bool canGetAddresses() override { return m_wallet->CanGetAddresses(); }\n+    bool privateKeysDisabled() override { return m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS); }\n     OutputType getDefaultAddressType() override { return m_wallet->m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet->m_default_change_type; }\n     CAmount getDefaultMaxTxFee() override { return m_wallet->m_default_max_tx_fee; }\n     void remove() override\n     {\n         RemoveWallet(m_wallet);\n     }\n+    bool isLegacy() override { return m_wallet->IsLegacy(); }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyUnload.connect(fn));\n@@ -503,6 +472,7 @@ class WalletImpl : public Wallet\n     {\n         return MakeHandler(m_wallet->NotifyCanGetAddressesChanged.connect(fn));\n     }\n+    CWallet* wallet() override { return m_wallet.get(); }\n \n     std::shared_ptr<CWallet> m_wallet;\n };\n@@ -524,6 +494,15 @@ class WalletClientImpl : public ChainClient\n     void start(CScheduler& scheduler) override { return StartWallets(scheduler); }\n     void flush() override { return FlushWallets(); }\n     void stop() override { return StopWallets(); }\n+    void setMockTime(int64_t time) override { return SetMockTime(time); }\n+    std::vector<std::unique_ptr<Wallet>> getWallets() override\n+    {\n+        std::vector<std::unique_ptr<Wallet>> wallets;\n+        for (const auto& wallet : GetWallets()) {\n+            wallets.emplace_back(MakeWallet(wallet));\n+        }\n+        return wallets;\n+    }\n     ~WalletClientImpl() override { UnloadWallets(); }\n \n     Chain& m_chain;"
      },
      {
        "sha": "67569a3e555a4dce4184d22a521d324bbb85db69",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,7 +15,6 @@\n #include <functional>\n #include <map>\n #include <memory>\n-#include <psbt.h>\n #include <stdint.h>\n #include <string>\n #include <tuple>\n@@ -26,12 +25,14 @@ class CCoinControl;\n class CFeeRate;\n class CKey;\n class CWallet;\n-enum isminetype : unsigned int;\n enum class FeeReason;\n-typedef uint8_t isminefilter;\n-\n enum class OutputType;\n+enum class TransactionError;\n+enum isminetype : unsigned int;\n struct CRecipient;\n+struct PartiallySignedTransaction;\n+struct bilingual_str;\n+typedef uint8_t isminefilter;\n \n namespace interfaces {\n \n@@ -136,7 +137,7 @@ class Wallet\n         bool sign,\n         int& change_pos,\n         CAmount& fee,\n-        std::string& fail_reason) = 0;\n+        bilingual_str& fail_reason) = 0;\n \n     //! Commit transaction.\n     virtual void commitTransaction(CTransactionRef tx,\n@@ -155,8 +156,7 @@ class Wallet\n     //! Create bump transaction.\n     virtual bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n-        CAmount total_fee,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,\n         CMutableTransaction& mtx) = 0;\n@@ -167,7 +167,7 @@ class Wallet\n     //! Commit bump transaction.\n     virtual bool commitBumpTransaction(const uint256& txid,\n         CMutableTransaction&& mtx,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         uint256& bumped_txid) = 0;\n \n     //! Get a transaction.\n@@ -193,17 +193,17 @@ class Wallet\n         int& num_blocks) = 0;\n \n     //! Fill PSBT.\n-    virtual TransactionError fillPSBT(PartiallySignedTransaction& psbtx,\n-        bool& complete,\n-        int sighash_type = 1 /* SIGHASH_ALL */,\n-        bool sign = true,\n-        bool bip32derivs = false) const = 0;\n+    virtual TransactionError fillPSBT(int sighash_type,\n+        bool sign,\n+        bool bip32derivs,\n+        PartiallySignedTransaction& psbtx,\n+        bool& complete) = 0;\n \n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;\n \n     //! Get balances if possible without blocking.\n-    virtual bool tryGetBalances(WalletBalances& balances, int& num_blocks) = 0;\n+    virtual bool tryGetBalances(WalletBalances& balances, uint256& block_hash) = 0;\n \n     //! Get balance.\n     virtual CAmount getBalance() = 0;\n@@ -247,10 +247,10 @@ class Wallet\n     virtual bool hdEnabled() = 0;\n \n     // Return whether the wallet is blank.\n-    virtual bool canGetAddresses() const = 0;\n+    virtual bool canGetAddresses() = 0;\n \n-    // check if a certain wallet flag is set.\n-    virtual bool IsWalletFlagSet(uint64_t flag) = 0;\n+    // Return whether private keys enabled.\n+    virtual bool privateKeysDisabled() = 0;\n \n     // Get default address type.\n     virtual OutputType getDefaultAddressType() = 0;\n@@ -264,6 +264,9 @@ class Wallet\n     // Remove wallet.\n     virtual void remove() = 0;\n \n+    //! Return whether is a legacy wallet\n+    virtual bool isLegacy() = 0;\n+\n     //! Register handler for unload message.\n     using UnloadFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;\n@@ -295,6 +298,9 @@ class Wallet\n     //! Register handler for keypool changed messages.\n     using CanGetAddressesChangedFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleCanGetAddressesChanged(CanGetAddressesChangedFn fn) = 0;\n+\n+    //! Return pointer to internal wallet class, useful for testing.\n+    virtual CWallet* wallet() { return nullptr; }\n };\n \n //! Information about one wallet address."
      },
      {
        "sha": "fe58ae9e73e47bf1dab3783b43748c24c67bcd85",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 24,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -22,8 +22,8 @@ BCLog::Logger& LogInstance()\n  * access the logger. When the shutdown sequence is fully audited and tested,\n  * explicit destruction of these objects can be implemented by changing this\n  * from a raw pointer to a std::unique_ptr.\n- * Since the destructor is never called, the logger and all its members must\n- * have a trivial destructor.\n+ * Since the ~Logger() destructor is never called, the Logger class and all\n+ * its subclasses must have implicitly-defined destructors.\n  *\n  * This method of initialization was originally introduced in\n  * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c.\n@@ -41,7 +41,7 @@ static int FileWriteStr(const std::string &str, FILE *fp)\n \n bool BCLog::Logger::StartLogging()\n {\n-    std::lock_guard<std::mutex> scoped_lock(m_cs);\n+    StdLockGuard scoped_lock(m_cs);\n \n     assert(m_buffering);\n     assert(m_fileout == nullptr);\n@@ -80,7 +80,7 @@ bool BCLog::Logger::StartLogging()\n \n void BCLog::Logger::DisconnectTestLogger()\n {\n-    std::lock_guard<std::mutex> scoped_lock(m_cs);\n+    StdLockGuard scoped_lock(m_cs);\n     m_buffering = true;\n     if (m_fileout != nullptr) fclose(m_fileout);\n     m_fileout = nullptr;\n@@ -182,30 +182,15 @@ bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)\n     return false;\n }\n \n-std::string ListLogCategories()\n+std::vector<LogCategory> BCLog::Logger::LogCategoriesList()\n {\n-    std::string ret;\n-    int outcount = 0;\n+    std::vector<LogCategory> ret;\n     for (const CLogCategoryDesc& category_desc : LogCategories) {\n         // Omit the special cases.\n         if (category_desc.flag != BCLog::NONE && category_desc.flag != BCLog::ALL) {\n-            if (outcount != 0) ret += \", \";\n-            ret += category_desc.category;\n-            outcount++;\n-        }\n-    }\n-    return ret;\n-}\n-\n-std::vector<CLogCategoryActive> ListActiveLogCategories()\n-{\n-    std::vector<CLogCategoryActive> ret;\n-    for (const CLogCategoryDesc& category_desc : LogCategories) {\n-        // Omit the special cases.\n-        if (category_desc.flag != BCLog::NONE && category_desc.flag != BCLog::ALL) {\n-            CLogCategoryActive catActive;\n+            LogCategory catActive;\n             catActive.category = category_desc.category;\n-            catActive.active = LogAcceptCategory(category_desc.flag);\n+            catActive.active = WillLogCategory(category_desc.flag);\n             ret.push_back(catActive);\n         }\n     }\n@@ -261,7 +246,7 @@ namespace BCLog {\n \n void BCLog::Logger::LogPrintStr(const std::string& str)\n {\n-    std::lock_guard<std::mutex> scoped_lock(m_cs);\n+    StdLockGuard scoped_lock(m_cs);\n     std::string str_prefixed = LogEscapeMessage(str);\n \n     if (m_log_threadnames && m_started_new_line) {"
      },
      {
        "sha": "7e646ef67a619fa9159220e0756b692a39a5faea",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -8,6 +8,8 @@\n \n #include <fs.h>\n #include <tinyformat.h>\n+#include <threadsafety.h>\n+#include <util/string.h>\n \n #include <atomic>\n #include <cstdint>\n@@ -24,8 +26,7 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n-struct CLogCategoryActive\n-{\n+struct LogCategory {\n     std::string category;\n     bool active;\n };\n@@ -61,10 +62,11 @@ namespace BCLog {\n     class Logger\n     {\n     private:\n-        mutable std::mutex m_cs;                   // Can not use Mutex from sync.h because in debug mode it would cause a deadlock when a potential deadlock was detected\n-        FILE* m_fileout = nullptr;                 // GUARDED_BY(m_cs)\n-        std::list<std::string> m_msgs_before_open; // GUARDED_BY(m_cs)\n-        bool m_buffering{true};                    //!< Buffer messages before logging can be started. GUARDED_BY(m_cs)\n+        mutable StdMutex m_cs; // Can not use Mutex from sync.h because in debug mode it would cause a deadlock when a potential deadlock was detected\n+\n+        FILE* m_fileout GUARDED_BY(m_cs) = nullptr;\n+        std::list<std::string> m_msgs_before_open GUARDED_BY(m_cs);\n+        bool m_buffering GUARDED_BY(m_cs) = true; //!< Buffer messages before logging can be started.\n \n         /**\n          * m_started_new_line is a state variable that will suppress printing of\n@@ -79,7 +81,7 @@ namespace BCLog {\n         std::string LogTimestampStr(const std::string& str);\n \n         /** Slots that connect to the print signal */\n-        std::list<std::function<void(const std::string&)>> m_print_callbacks /* GUARDED_BY(m_cs) */ {};\n+        std::list<std::function<void(const std::string&)>> m_print_callbacks GUARDED_BY(m_cs) {};\n \n     public:\n         bool m_print_to_console = false;\n@@ -98,22 +100,22 @@ namespace BCLog {\n         /** Returns whether logs will be written to any output */\n         bool Enabled() const\n         {\n-            std::lock_guard<std::mutex> scoped_lock(m_cs);\n+            StdLockGuard scoped_lock(m_cs);\n             return m_buffering || m_print_to_console || m_print_to_file || !m_print_callbacks.empty();\n         }\n \n         /** Connect a slot to the print signal and return the connection */\n         std::list<std::function<void(const std::string&)>>::iterator PushBackCallback(std::function<void(const std::string&)> fun)\n         {\n-            std::lock_guard<std::mutex> scoped_lock(m_cs);\n+            StdLockGuard scoped_lock(m_cs);\n             m_print_callbacks.push_back(std::move(fun));\n             return --m_print_callbacks.end();\n         }\n \n         /** Delete a connection */\n         void DeleteCallback(std::list<std::function<void(const std::string&)>>::iterator it)\n         {\n-            std::lock_guard<std::mutex> scoped_lock(m_cs);\n+            StdLockGuard scoped_lock(m_cs);\n             m_print_callbacks.erase(it);\n         }\n \n@@ -132,6 +134,13 @@ namespace BCLog {\n         bool DisableCategory(const std::string& str);\n \n         bool WillLogCategory(LogFlags category) const;\n+        /** Returns a vector of the log categories */\n+        std::vector<LogCategory> LogCategoriesList();\n+        /** Returns a string with the log categories */\n+        std::string LogCategoriesString()\n+        {\n+            return Join(LogCategoriesList(), \", \", [&](const LogCategory& i) { return i.category; });\n+        };\n \n         bool DefaultShrinkDebugFile() const;\n     };\n@@ -146,12 +155,6 @@ static inline bool LogAcceptCategory(BCLog::LogFlags category)\n     return LogInstance().WillLogCategory(category);\n }\n \n-/** Returns a string with the log categories. */\n-std::string ListLogCategories();\n-\n-/** Returns a vector of the active log categories. */\n-std::vector<CLogCategoryActive> ListActiveLogCategories();\n-\n /** Return true if str parses as a log category and set the flag */\n bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n "
      },
      {
        "sha": "159920e3972052087a6d894b72880d469529080b",
        "filename": "src/logging/timer.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/logging/timer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/logging/timer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging/timer.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -93,12 +93,10 @@ class Timer\n } // namespace BCLog\n \n \n-#define LOG_TIME_MICROS(end_msg, ...) \\\n-    BCLog::Timer<std::chrono::microseconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)\n-#define LOG_TIME_MILLIS(end_msg, ...) \\\n-    BCLog::Timer<std::chrono::milliseconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)\n-#define LOG_TIME_SECONDS(end_msg, ...) \\\n-    BCLog::Timer<std::chrono::seconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)\n+#define LOG_TIME_MILLIS_WITH_CATEGORY(end_msg, log_category) \\\n+    BCLog::Timer<std::chrono::milliseconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, log_category)\n+#define LOG_TIME_SECONDS(end_msg) \\\n+    BCLog::Timer<std::chrono::seconds> PASTE2(logging_timer, __COUNTER__)(__func__, end_msg)\n \n \n #endif // BITCOIN_LOGGING_TIMER_H"
      },
      {
        "sha": "a6e894129aa29bd8d97d87998bd7361936089e35",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8072b12119f41767f2214a01a0864aeadad95c99",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -9,6 +9,24 @@\n #include <consensus/consensus.h>\n \n \n+std::vector<unsigned char> BitsToBytes(const std::vector<bool>& bits)\n+{\n+    std::vector<unsigned char> ret((bits.size() + 7) / 8);\n+    for (unsigned int p = 0; p < bits.size(); p++) {\n+        ret[p / 8] |= bits[p] << (p % 8);\n+    }\n+    return ret;\n+}\n+\n+std::vector<bool> BytesToBits(const std::vector<unsigned char>& bytes)\n+{\n+    std::vector<bool> ret(bytes.size() * 8);\n+    for (unsigned int p = 0; p < ret.size(); p++) {\n+        ret[p] = (bytes[p / 8] & (1 << (p % 8))) != 0;\n+    }\n+    return ret;\n+}\n+\n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)\n {\n     header = block.GetBlockHeader();"
      },
      {
        "sha": "b2d28287847c01c51fc41e0433333a120528a433",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 13,
        "deletions": 28,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -13,6 +13,10 @@\n \n #include <vector>\n \n+// Helper functions for serialization.\n+std::vector<unsigned char> BitsToBytes(const std::vector<bool>& bits);\n+std::vector<bool> BytesToBits(const std::vector<unsigned char>& bytes);\n+\n /** Data structure that represents a partial merkle tree.\n  *\n  * It represents a subset of the txid's of a known block, in a way that\n@@ -81,27 +85,14 @@ class CPartialMerkleTree\n \n public:\n \n-    /** serialization implementation */\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nTransactions);\n-        READWRITE(vHash);\n-        std::vector<unsigned char> vBytes;\n-        if (ser_action.ForRead()) {\n-            READWRITE(vBytes);\n-            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(this));\n-            us.vBits.resize(vBytes.size() * 8);\n-            for (unsigned int p = 0; p < us.vBits.size(); p++)\n-                us.vBits[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;\n-            us.fBad = false;\n-        } else {\n-            vBytes.resize((vBits.size()+7)/8);\n-            for (unsigned int p = 0; p < vBits.size(); p++)\n-                vBytes[p / 8] |= vBits[p] << (p % 8);\n-            READWRITE(vBytes);\n-        }\n+    SERIALIZE_METHODS(CPartialMerkleTree, obj)\n+    {\n+        READWRITE(obj.nTransactions, obj.vHash);\n+        std::vector<unsigned char> bytes;\n+        SER_WRITE(obj, bytes = BitsToBytes(obj.vBits));\n+        READWRITE(bytes);\n+        SER_READ(obj, obj.vBits = BytesToBits(bytes));\n+        SER_READ(obj, obj.fBad = false);\n     }\n \n     /** Construct a partial merkle tree from a list of transaction ids, and a mask that selects a subset of them */\n@@ -157,13 +148,7 @@ class CMerkleBlock\n \n     CMerkleBlock() {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(txn);\n-    }\n+    SERIALIZE_METHODS(CMerkleBlock, obj) { READWRITE(obj.header, obj.txn); }\n \n private:\n     // Combined constructor to consolidate code"
      },
      {
        "sha": "d9dcbe8a70bba7923e02dd07482fbf7abc908364",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -39,6 +39,17 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n+void RegenerateCommitments(CBlock& block)\n+{\n+    CMutableTransaction tx{*block.vtx.at(0)};\n+    tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n+    block.vtx.at(0) = MakeTransactionRef(tx);\n+\n+    GenerateCoinbaseCommitment(block, WITH_LOCK(cs_main, return LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n+\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+}\n+\n BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;"
      },
      {
        "sha": "69296f907866ccf32d2c3ffaf231061e3fbc4c0b",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -203,4 +203,7 @@ class BlockAssembler\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n+/** Update an old GenerateCoinbaseCommitment from CreateNewBlock after the block txs have changed */\n+void RegenerateCommitments(CBlock& block);\n+\n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "707412bb32ebfac42839d02439f54adf7489b82a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 45,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -16,6 +16,7 @@\n #include <crypto/sha256.h>\n #include <netbase.h>\n #include <net_permissions.h>\n+#include <protocol.h>\n #include <random.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n@@ -45,12 +46,18 @@ static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\"\n \n #include <math.h>\n \n-// Dump addresses to peers.dat every 15 minutes (900s)\n-static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;\n+// How often to dump addresses to peers.dat\n+static constexpr std::chrono::minutes DUMP_PEERS_INTERVAL{15};\n \n /** Number of DNS seeds to query when the number of connections is low. */\n static constexpr int DNSSEEDS_TO_QUERY_AT_ONCE = 3;\n \n+/** How long to delay before querying DNS seeds\n+ */\n+static constexpr std::chrono::seconds DNSSEEDS_DELAY_FEW_PEERS{11}; // 11sec\n+static constexpr std::chrono::seconds DNSSEEDS_DELAY_MANY_PEERS{300}; // 5min\n+static constexpr int DNSSEEDS_DELAY_PEER_THRESHOLD = 1000; // \"many\" vs \"few\" peers -- you should only get this many if you've been on the live network\n+\n // We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n #define FEELER_SLEEP_WINDOW 1\n \n@@ -631,14 +638,14 @@ int CNode::GetSendVersion() const\n int V1TransportDeserializer::readHeader(const char *pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer\n-    unsigned int nRemaining = 24 - nHdrPos;\n+    unsigned int nRemaining = CMessageHeader::HEADER_SIZE - nHdrPos;\n     unsigned int nCopy = std::min(nRemaining, nBytes);\n \n     memcpy(&hdrbuf[nHdrPos], pch, nCopy);\n     nHdrPos += nCopy;\n \n     // if header incomplete, exit\n-    if (nHdrPos < 24)\n+    if (nHdrPos < CMessageHeader::HEADER_SIZE)\n         return nCopy;\n \n     // deserialize to CMessageHeader\n@@ -1454,7 +1461,7 @@ void CConnman::ThreadSocketHandler()\n void CConnman::WakeMessageHandler()\n {\n     {\n-        std::lock_guard<std::mutex> lock(mutexMsgProc);\n+        LOCK(mutexMsgProc);\n         fMsgProcWake = true;\n     }\n     condMsgProc.notify_one();\n@@ -1586,31 +1593,67 @@ void CConnman::ThreadDNSAddressSeed()\n     if (gArgs.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED)) {\n         // When -forcednsseed is provided, query all.\n         seeds_right_now = seeds.size();\n+    } else if (addrman.size() == 0) {\n+        // If we have no known peers, query all.\n+        seeds_right_now = seeds.size();\n     }\n \n+    // goal: only query DNS seed if address need is acute\n+    // * If we have a reasonable number of peers in addrman, spend\n+    //   some time trying them first. This improves user privacy by\n+    //   creating fewer identifying DNS requests, reduces trust by\n+    //   giving seeds less influence on the network topology, and\n+    //   reduces traffic to the seeds.\n+    // * When querying DNS seeds query a few at once, this ensures\n+    //   that we don't give DNS seeds the ability to eclipse nodes\n+    //   that query them.\n+    // * If we continue having problems, eventually query all the\n+    //   DNS seeds, and if that fails too, also try the fixed seeds.\n+    //   (done in ThreadOpenConnections)\n+    const std::chrono::seconds seeds_wait_time = (addrman.size() >= DNSSEEDS_DELAY_PEER_THRESHOLD ? DNSSEEDS_DELAY_MANY_PEERS : DNSSEEDS_DELAY_FEW_PEERS);\n+\n     for (const std::string& seed : seeds) {\n-        // goal: only query DNS seed if address need is acute\n-        // Avoiding DNS seeds when we don't need them improves user privacy by\n-        // creating fewer identifying DNS requests, reduces trust by giving seeds\n-        // less influence on the network topology, and reduces traffic to the seeds.\n-        if (addrman.size() > 0 && seeds_right_now == 0) {\n-            if (!interruptNet.sleep_for(std::chrono::seconds(11))) return;\n+        if (seeds_right_now == 0) {\n+            seeds_right_now += DNSSEEDS_TO_QUERY_AT_ONCE;\n \n-            LOCK(cs_vNodes);\n-            int nRelevant = 0;\n-            for (const CNode* pnode : vNodes) {\n-                nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n-            }\n-            if (nRelevant >= 2) {\n-                LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n-                return;\n+            if (addrman.size() > 0) {\n+                LogPrintf(\"Waiting %d seconds before querying DNS seeds.\\n\", seeds_wait_time.count());\n+                std::chrono::seconds to_wait = seeds_wait_time;\n+                while (to_wait.count() > 0) {\n+                    std::chrono::seconds w = std::min(DNSSEEDS_DELAY_FEW_PEERS, to_wait);\n+                    if (!interruptNet.sleep_for(w)) return;\n+                    to_wait -= w;\n+\n+                    int nRelevant = 0;\n+                    {\n+                        LOCK(cs_vNodes);\n+                        for (const CNode* pnode : vNodes) {\n+                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                        }\n+                    }\n+                    if (nRelevant >= 2) {\n+                        if (found > 0) {\n+                            LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n+                            LogPrintf(\"P2P peers available. Finished DNS seeding.\\n\");\n+                        } else {\n+                            LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n+                        }\n+                        return;\n+                    }\n+                }\n             }\n-            seeds_right_now += DNSSEEDS_TO_QUERY_AT_ONCE;\n         }\n \n-        if (interruptNet) {\n-            return;\n+        if (interruptNet) return;\n+\n+        // hold off on querying seeds if p2p network deactivated\n+        if (!fNetworkActive) {\n+            LogPrintf(\"Waiting for network to be reactivated before querying DNS seeds.\\n\");\n+            do {\n+                if (!interruptNet.sleep_for(std::chrono::seconds{1})) return;\n+            } while (!fNetworkActive);\n         }\n+\n         LogPrintf(\"Loading addresses from DNS seed %s\\n\", seed);\n         if (HaveNameProxy()) {\n             AddOneShot(seed);\n@@ -2057,7 +2100,7 @@ void CConnman::ThreadMessageHandler()\n \n         WAIT_LOCK(mutexMsgProc, lock);\n         if (!fMoreWork) {\n-            condMsgProc.wait_until(lock, std::chrono::steady_clock::now() + std::chrono::milliseconds(100), [this] { return fMsgProcWake; });\n+            condMsgProc.wait_until(lock, std::chrono::steady_clock::now() + std::chrono::milliseconds(100), [this]() EXCLUSIVE_LOCKS_REQUIRED(mutexMsgProc) { return fMsgProcWake; });\n         }\n         fMsgProcWake = false;\n     }\n@@ -2068,26 +2111,25 @@ void CConnman::ThreadMessageHandler()\n \n \n \n-bool CConnman::BindListenPort(const CService& addrBind, std::string& strError, NetPermissionFlags permissions)\n+bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError, NetPermissionFlags permissions)\n {\n-    strError = \"\";\n     int nOne = 1;\n \n     // Create socket for listening for incoming connections\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     if (!addrBind.GetSockAddr((struct sockaddr*)&sockaddr, &len))\n     {\n-        strError = strprintf(\"Error: Bind address family for %s not supported\", addrBind.ToString());\n-        LogPrintf(\"%s\\n\", strError);\n+        strError = strprintf(Untranslated(\"Error: Bind address family for %s not supported\"), addrBind.ToString());\n+        LogPrintf(\"%s\\n\", strError.original);\n         return false;\n     }\n \n     SOCKET hListenSocket = CreateSocket(addrBind);\n     if (hListenSocket == INVALID_SOCKET)\n     {\n-        strError = strprintf(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\", NetworkErrorString(WSAGetLastError()));\n-        LogPrintf(\"%s\\n\", strError);\n+        strError = strprintf(Untranslated(\"Error: Couldn't open socket for incoming connections (socket returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"%s\\n\", strError.original);\n         return false;\n     }\n \n@@ -2111,10 +2153,10 @@ bool CConnman::BindListenPort(const CService& addrBind, std::string& strError, N\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\").translated, addrBind.ToString(), PACKAGE_NAME);\n+            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"), addrBind.ToString(), PACKAGE_NAME);\n         else\n-            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\").translated, addrBind.ToString(), NetworkErrorString(nErr));\n-        LogPrintf(\"%s\\n\", strError);\n+            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"), addrBind.ToString(), NetworkErrorString(nErr));\n+        LogPrintf(\"%s\\n\", strError.original);\n         CloseSocket(hListenSocket);\n         return false;\n     }\n@@ -2123,8 +2165,8 @@ bool CConnman::BindListenPort(const CService& addrBind, std::string& strError, N\n     // Listen for incoming connections\n     if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n     {\n-        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\").translated, NetworkErrorString(WSAGetLastError()));\n-        LogPrintf(\"%s\\n\", strError);\n+        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"%s\\n\", strError.original);\n         CloseSocket(hListenSocket);\n         return false;\n     }\n@@ -2218,7 +2260,7 @@ NodeId CConnman::GetNewNodeId()\n bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags permissions) {\n     if (!(flags & BF_EXPLICIT) && !IsReachable(addr))\n         return false;\n-    std::string strError;\n+    bilingual_str strError;\n     if (!BindListenPort(addr, strError, permissions)) {\n         if ((flags & BF_REPORT_ERROR) && clientInterface) {\n             clientInterface->ThreadSafeMessageBox(strError, \"\", CClientUIInterface::MSG_ERROR);\n@@ -2265,7 +2307,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Failed to listen on any port. Use -listen=0 if you want this.\").translated,\n+                _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;\n@@ -2331,7 +2373,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\").translated,\n+                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\"),\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;\n@@ -2343,7 +2385,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     threadMessageHandler = std::thread(&TraceThread<std::function<void()> >, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n \n     // Dump network addresses\n-    scheduler.scheduleEvery(std::bind(&CConnman::DumpAddresses, this), DUMP_PEERS_INTERVAL * 1000);\n+    scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n     return true;\n }\n@@ -2366,7 +2408,7 @@ static CNetCleanup instance_of_cnetcleanup;\n void CConnman::Interrupt()\n {\n     {\n-        std::lock_guard<std::mutex> lock(mutexMsgProc);\n+        LOCK(mutexMsgProc);\n         flagInterruptMsgProc = true;\n     }\n     condMsgProc.notify_all();\n@@ -2387,7 +2429,7 @@ void CConnman::Interrupt()\n     }\n }\n \n-void CConnman::Stop()\n+void CConnman::StopThreads()\n {\n     if (threadMessageHandler.joinable())\n         threadMessageHandler.join();\n@@ -2399,14 +2441,17 @@ void CConnman::Stop()\n         threadDNSAddressSeed.join();\n     if (threadSocketHandler.joinable())\n         threadSocketHandler.join();\n+}\n \n-    if (fAddressesInitialized)\n-    {\n+void CConnman::StopNodes()\n+{\n+    if (fAddressesInitialized) {\n         DumpAddresses();\n         fAddressesInitialized = false;\n     }\n \n     // Close sockets\n+    LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes)\n         pnode->CloseSocketDisconnect();\n     for (ListenSocket& hListenSocket : vhListenSocket)\n@@ -2415,10 +2460,10 @@ void CConnman::Stop()\n                 LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     // clean up some globals (to help leak detection)\n-    for (CNode *pnode : vNodes) {\n+    for (CNode* pnode : vNodes) {\n         DeleteNode(pnode);\n     }\n-    for (CNode *pnode : vNodesDisconnected) {\n+    for (CNode* pnode : vNodesDisconnected) {\n         DeleteNode(pnode);\n     }\n     vNodes.clear();\n@@ -2433,7 +2478,7 @@ void CConnman::DeleteNode(CNode* pnode)\n     assert(pnode);\n     bool fUpdateConnectionTime = false;\n     m_msgproc->FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n-    if(fUpdateConnectionTime) {\n+    if (fUpdateConnectionTime) {\n         addrman.Connected(pnode->addr);\n     }\n     delete pnode;"
      },
      {
        "sha": "517445e8f456c5a0487f4eaa78b6cfc97f1e79de",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 19,
        "deletions": 23,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -21,8 +21,8 @@\n #include <random.h>\n #include <streams.h>\n #include <sync.h>\n-#include <uint256.h>\n #include <threadinterrupt.h>\n+#include <uint256.h>\n \n #include <atomic>\n #include <deque>\n@@ -39,22 +39,17 @@\n class CScheduler;\n class CNode;\n class BanMan;\n+struct bilingual_str;\n \n /** Default for -whitelistrelay. */\n static const bool DEFAULT_WHITELISTRELAY = true;\n /** Default for -whitelistforcerelay. */\n static const bool DEFAULT_WHITELISTFORCERELAY = false;\n \n-/** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n-static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n /** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n static const int FEELER_INTERVAL = 120;\n-/** The maximum number of entries in an 'inv' protocol message */\n-static const unsigned int MAX_INV_SZ = 50000;\n-/** The maximum number of entries in a locator */\n-static const unsigned int MAX_LOCATOR_SZ = 101;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n@@ -67,6 +62,8 @@ static const int MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 8;\n static const int MAX_ADDNODE_CONNECTIONS = 8;\n /** Maximum number of block-relay-only outgoing connections */\n static const int MAX_BLOCKS_ONLY_CONNECTIONS = 2;\n+/** Maximum number of feeler connections */\n+static const int MAX_FEELER_CONNECTIONS = 1;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -188,16 +185,13 @@ class CConnman\n     ~CConnman();\n     bool Start(CScheduler& scheduler, const Options& options);\n \n-    // TODO: Remove NO_THREAD_SAFETY_ANALYSIS. Lock cs_vNodes before reading the variable vNodes.\n-    //\n-    // When removing NO_THREAD_SAFETY_ANALYSIS be aware of the following lock order requirements:\n-    // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraOutboundCount\n-    //   which locks cs_vNodes.\n-    // * ProcessMessage locks cs_main and g_cs_orphans before indirectly calling ForEachNode which\n-    //   locks cs_vNodes.\n-    //\n-    // Thus the implicit locking order requirement is: (1) cs_main, (2) g_cs_orphans, (3) cs_vNodes.\n-    void Stop() NO_THREAD_SAFETY_ANALYSIS;\n+    void StopThreads();\n+    void StopNodes();\n+    void Stop()\n+    {\n+        StopThreads();\n+        StopNodes();\n+    };\n \n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n@@ -343,7 +337,7 @@ class CConnman\n         NetPermissionFlags m_permissions;\n     };\n \n-    bool BindListenPort(const CService& bindAddr, std::string& strError, NetPermissionFlags permissions);\n+    bool BindListenPort(const CService& bindAddr, bilingual_str& strError, NetPermissionFlags permissions);\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n     bool InitBinds(const std::vector<CService>& binds, const std::vector<NetWhitebindPermissions>& whiteBinds);\n     void ThreadOpenAddedConnections();\n@@ -460,7 +454,7 @@ class CConnman\n     const uint64_t nSeed0, nSeed1;\n \n     /** flag for waking the message processor. */\n-    bool fMsgProcWake;\n+    bool fMsgProcWake GUARDED_BY(mutexMsgProc);\n \n     std::condition_variable condMsgProc;\n     Mutex mutexMsgProc;\n@@ -482,6 +476,7 @@ class CConnman\n     std::atomic<int64_t> m_next_send_inv_to_incoming{0};\n \n     friend struct CConnmanTest;\n+    friend struct ConnmanTestMsg;\n };\n void Discover();\n void StartMapPort();\n@@ -721,6 +716,8 @@ class V1TransportSerializer  : public TransportSerializer {\n class CNode\n {\n     friend class CConnman;\n+    friend struct ConnmanTestMsg;\n+\n public:\n     std::unique_ptr<TransportDeserializer> m_deserializer;\n     std::unique_ptr<TransportSerializer> m_serializer;\n@@ -797,8 +794,8 @@ class CNode\n     std::vector<CAddress> vAddrToSend;\n     const std::unique_ptr<CRollingBloomFilter> m_addr_known;\n     bool fGetAddr{false};\n-    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing){0};\n-    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing){0};\n+    std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\n+    std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};\n \n     bool IsAddrRelayPeer() const { return m_addr_known != nullptr; }\n \n@@ -809,14 +806,13 @@ class CNode\n     RecursiveMutex cs_inventory;\n \n     struct TxRelay {\n-        TxRelay() { pfilter = MakeUnique<CBloomFilter>(); }\n         mutable RecursiveMutex cs_filter;\n         // We use fRelayTxes for two purposes -\n         // a) it allows us to not relay tx invs before receiving the peer's version message\n         // b) the peer may tell us in its version message that we should not relay tx invs\n         //    unless it loads a bloom filter.\n         bool fRelayTxes GUARDED_BY(cs_filter){false};\n-        std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter) GUARDED_BY(cs_filter);\n+        std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter) GUARDED_BY(cs_filter){nullptr};\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};"
      },
      {
        "sha": "962a2159fcb4d93494cf1fcf80eb2cea43828fc7",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "404b33a9776f8f7cdd00858dcac27b10997b63d6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 465,
        "deletions": 152,
        "changes": 617,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -8,9 +8,11 @@\n #include <addrman.h>\n #include <banman.h>\n #include <blockencodings.h>\n+#include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n #include <hash.h>\n+#include <index/blockfilterindex.h>\n #include <validation.h>\n #include <merkleblock.h>\n #include <netmessagemaker.h>\n@@ -64,6 +66,12 @@ static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// Age after which a block is considered historical for purposes of rate\n /// limiting block relay. Set to one week, denominated in seconds.\n static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n+/** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n+static const int PING_INTERVAL = 2 * 60;\n+/** The maximum number of entries in a locator */\n+static const unsigned int MAX_LOCATOR_SZ = 101;\n+/** The maximum number of entries in an 'inv' protocol message */\n+static const unsigned int MAX_INV_SZ = 50000;\n /** Maximum number of in-flight transactions from a peer */\n static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;\n /** Maximum number of announced transactions from a peer */\n@@ -80,7 +88,51 @@ static_assert(INBOUND_PEER_TX_DELAY >= MAX_GETDATA_RANDOM_DELAY,\n \"To preserve security, MAX_GETDATA_RANDOM_DELAY should not exceed INBOUND_PEER_DELAY\");\n /** Limit to avoid sending big packets. Not used in processing incoming GETDATA for compatibility */\n static const unsigned int MAX_GETDATA_SZ = 1000;\n-\n+/** Number of blocks that can be requested at any given time from a single peer. */\n+static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n+/** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n+static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n+/** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n+ *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n+static const unsigned int MAX_HEADERS_RESULTS = 2000;\n+/** Maximum depth of blocks we're willing to serve as compact blocks to peers\n+ *  when requested. For older blocks, a regular BLOCK response will be sent. */\n+static const int MAX_CMPCTBLOCK_DEPTH = 5;\n+/** Maximum depth of blocks we're willing to respond to GETBLOCKTXN requests for. */\n+static const int MAX_BLOCKTXN_DEPTH = 10;\n+/** Size of the \"block download window\": how far ahead of our current height do we fetch?\n+ *  Larger windows tolerate larger download speed differences between peer, but increase the potential\n+ *  degree of disordering of blocks on disk (which make reindexing and pruning harder). We'll probably\n+ *  want to make this a per-peer adaptive value at some point. */\n+static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n+/** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n+static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n+/** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n+static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n+/** Maximum number of headers to announce when relaying blocks with headers message.*/\n+static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n+/** Maximum number of unconnecting headers announcements before DoS score */\n+static const int MAX_UNCONNECTING_HEADERS = 10;\n+/** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n+static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n+/** Average delay between local address broadcasts */\n+static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n+/** Average delay between peer address broadcasts */\n+static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n+/** Average delay between trickled inventory transmissions in seconds.\n+ *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Maximum number of inventory items to send per transmission.\n+ *  Limits the impact of low-fee transaction floods. */\n+static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n+/** Average delay between feefilter broadcasts in seconds. */\n+static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n+/** Maximum feefilter broadcast delay after significant change. */\n+static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n+/** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -97,21 +149,6 @@ void EraseOrphansFor(NodeId peer);\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\") EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Average delay between local address broadcasts in seconds. */\n-static constexpr unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 60 * 60;\n-/** Average delay between peer address broadcasts in seconds. */\n-static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n-/** Average delay between trickled inventory transmissions in seconds.\n- *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n-/** Maximum number of inventory items to send per transmission.\n- *  Limits the impact of low-fee transaction floods. */\n-static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n-/** Average delay between feefilter broadcasts in seconds. */\n-static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n-/** Maximum feefilter broadcast delay after significant change. */\n-static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n-\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -465,7 +502,7 @@ static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs\n \n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-static bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+static bool MarkBlockAsInFlight(CTxMemPool& mempool, NodeId nodeid, const uint256& hash, const CBlockIndex* pindex = nullptr, std::list<QueuedBlock>::iterator** pit = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n \n@@ -779,6 +816,25 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        // Sanity check: all unbroadcast txns should exist in the mempool\n+        if (m_mempool.exists(txid)) {\n+            RelayTransaction(txid, *connman);\n+        } else {\n+            m_mempool.RemoveUnbroadcastTx(txid, true);\n+        }\n+    }\n+\n+    // Schedule next run for 10-15 minutes in the future.\n+    // We add randomness on every cycle to avoid the possibility of P2P fingerprinting.\n+    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n+}\n+\n void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n     fUpdateConnectionTime = false;\n     LOCK(cs_main);\n@@ -1102,8 +1158,12 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler& scheduler)\n-    : connman(connmanIn), m_banman(banman), m_stale_tip_check_time(0)\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool)\n+    : connman(connmanIn),\n+      m_banman(banman),\n+      m_chainman(chainman),\n+      m_mempool(pool),\n+      m_stale_tip_check_time(0)\n {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n@@ -1124,14 +1184,18 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n-    scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n+    scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n }\n \n /**\n  * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n  * block. Also save the time of the last tip update.\n  */\n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted)\n+void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n     {\n         LOCK(g_cs_orphans);\n@@ -1314,7 +1378,7 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const BlockValidatio\n //\n \n \n-bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool static AlreadyHave(const CInv& inv, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     switch (inv.type)\n     {\n@@ -1362,15 +1426,15 @@ void RelayTransaction(const uint256& txid, const CConnman& connman)\n     });\n }\n \n-static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connman)\n+static void RelayAddress(const CAddress& addr, bool fReachable, const CConnman& connman)\n {\n     unsigned int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n \n     // Relay to a limited number of other nodes\n     // Use deterministic randomness to send to the same nodes for 24 hours\n     // at a time so the m_addr_knowns of the chosen nodes prevent repeats\n     uint64_t hashAddr = addr.GetHash();\n-    const CSipHasher hasher = connman->GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+    const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24 * 60 * 60));\n     FastRandomContext insecure_rand;\n \n     std::array<std::pair<uint64_t, CNode*>,2> best{{{0, nullptr}, {0, nullptr}}};\n@@ -1395,7 +1459,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n         }\n     };\n \n-    connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n+    connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, const CInv& inv, CConnman* connman)\n@@ -1553,74 +1617,88 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n-void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)\n+//! Determine whether or not a peer can request a transaction, and return it (or nullptr if not found or not allowed).\n+CTransactionRef static FindTxForGetData(CNode* peer, const uint256& txid, const std::chrono::seconds mempool_req, const std::chrono::seconds longlived_mempool_time) LOCKS_EXCLUDED(cs_main)\n+{\n+    // Check if the requested transaction is so recent that we're just\n+    // about to announce it to the peer; if so, they certainly shouldn't\n+    // know we already have it.\n+    {\n+        LOCK(peer->m_tx_relay->cs_tx_inventory);\n+        if (peer->m_tx_relay->setInventoryTxToSend.count(txid)) return {};\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        // Look up transaction in relay pool\n+        auto mi = mapRelay.find(txid);\n+        if (mi != mapRelay.end()) return mi->second;\n+    }\n+\n+    auto txinfo = mempool.info(txid);\n+    if (txinfo.tx) {\n+        // To protect privacy, do not answer getdata using the mempool when\n+        // that TX couldn't have been INVed in reply to a MEMPOOL request,\n+        // or when it's too recent to have expired from mapRelay.\n+        if ((mempool_req.count() && txinfo.m_time <= mempool_req) || txinfo.m_time <= longlived_mempool_time) {\n+            return txinfo.tx;\n+        }\n+    }\n+\n+    return {};\n+}\n+\n+void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)\n {\n     AssertLockNotHeld(cs_main);\n \n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n-    // Note that if we receive a getdata for a MSG_TX or MSG_WITNESS_TX from a\n-    // block-relay-only outbound peer, we will stop processing further getdata\n-    // messages from this peer (likely resulting in our peer eventually\n-    // disconnecting us).\n-    if (pfrom->m_tx_relay != nullptr) {\n-        // mempool entries added before this time have likely expired from mapRelay\n-        const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n-        const std::chrono::seconds mempool_req = pfrom->m_tx_relay->m_last_mempool_req.load();\n+    // mempool entries added before this time have likely expired from mapRelay\n+    const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n+    // Get last mempool request time\n+    const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n+                                                                          : std::chrono::seconds::min();\n \n-        LOCK(cs_main);\n+    // Process as many TX items from the front of the getdata queue as\n+    // possible, since they're common and it's efficient to batch process\n+    // them.\n+    while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n+        if (interruptMsgProc) return;\n+        // The send buffer provides backpressure. If there's no space in\n+        // the buffer, pause processing until the next call.\n+        if (pfrom->fPauseSend) break;\n \n-        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n-            if (interruptMsgProc)\n-                return;\n-            // Don't bother if send buffer is too full to respond anyway\n-            if (pfrom->fPauseSend)\n-                break;\n+        const CInv &inv = *it++;\n \n-            const CInv &inv = *it;\n-            it++;\n+        if (pfrom->m_tx_relay == nullptr) {\n+            // Ignore GETDATA requests for transactions from blocks-only peers.\n+            continue;\n+        }\n \n-            // Send stream from relay memory\n-            bool push = false;\n-            auto mi = mapRelay.find(inv.hash);\n+        CTransactionRef tx = FindTxForGetData(pfrom, inv.hash, mempool_req, longlived_mempool_time);\n+        if (tx) {\n             int nSendFlags = (inv.type == MSG_TX ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);\n-            if (mi != mapRelay.end()) {\n-                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n-                push = true;\n-            } else {\n-                auto txinfo = mempool.info(inv.hash);\n-                // To protect privacy, do not answer getdata using the mempool when\n-                // that TX couldn't have been INVed in reply to a MEMPOOL request,\n-                // or when it's too recent to have expired from mapRelay.\n-                if (txinfo.tx && (\n-                     (mempool_req.count() && txinfo.m_time <= mempool_req)\n-                      || (txinfo.m_time <= longlived_mempool_time)))\n-                {\n-                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n-                    push = true;\n-                }\n-            }\n-            if (!push) {\n-                vNotFound.push_back(inv);\n-            }\n+            connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *tx));\n+            mempool.RemoveUnbroadcastTx(inv.hash);\n+        } else {\n+            vNotFound.push_back(inv);\n         }\n-    } // release cs_main\n+    }\n \n+    // Only process one BLOCK item per call, since they're uncommon and can be\n+    // expensive to process.\n     if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n-        const CInv &inv = *it;\n+        const CInv &inv = *it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n-            it++;\n             ProcessGetBlockData(pfrom, chainparams, inv, connman);\n         }\n+        // else: If the first item on the queue is an unknown type, we erase it\n+        // and continue processing the queue on the next call.\n     }\n \n-    // Unknown types in the GetData stay in vRecvGetData and block any future\n-    // message from this peer, see vRecvGetData check in ProcessMessages().\n-    // Depending on future p2p changes, we might either drop unknown getdata on\n-    // the floor or disconnect the peer.\n-\n     pfrom->vRecvGetData.erase(pfrom->vRecvGetData.begin(), it);\n \n     if (!vNotFound.empty()) {\n@@ -1666,7 +1744,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)\n+bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, ChainstateManager& chainman, CTxMemPool& mempool, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)\n {\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     size_t nCount = headers.size();\n@@ -1726,7 +1804,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     }\n \n     BlockValidationState state;\n-    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n+    if (!chainman.ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n         if (state.IsInvalid()) {\n             MaybePunishNodeForBlock(pfrom->GetId(), state, via_compact_block, \"invalid header received\");\n             return false;\n@@ -1794,7 +1872,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n                     }\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom);\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n+                    MarkBlockAsInFlight(mempool, pfrom->GetId(), pindex->GetBlockHash(), pindex);\n                     LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->GetId());\n                 }\n@@ -1848,7 +1926,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     return true;\n }\n \n-void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n+void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uint256>& orphan_work_set, std::list<CTransactionRef>& removed_txn) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(g_cs_orphans);\n@@ -1908,9 +1986,226 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n-bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n+/**\n+ * Validation logic for compact filters request handling.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   start_height    The start height for the request\n+ * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[in]   max_height_diff The maximum number of items permitted to request, as specified in BIP 157\n+ * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n+ * @param[out]  filter_index    The filter index, if the request can be serviced.\n+ * @return                      True if the request can be serviced.\n+ */\n+static bool PrepareBlockFilterRequest(CNode& pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      const uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    const bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unsupported block filter type: %d\\n\",\n+                 pfrom.GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom.fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and the peer would be allowed to fetch it.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom.GetId(), stop_hash.ToString());\n+            pfrom.fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom.GetId(), start_height, stop_height);\n+        pfrom.fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom.GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom.fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Handle a cfilters request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFilters(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman& connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<BlockFilter> filters;\n+\n+    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman.PushMessage(&pfrom, std::move(msg));\n+    }\n+}\n+\n+/**\n+ * Handle a cfheaders request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFHeaders(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman& connman)\n {\n-    LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* const prev_block =\n+            stop_index->GetAncestor(static_cast<int>(start_height - 1));\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            LogPrint(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    if (!filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman.PushMessage(&pfrom, std::move(msg));\n+}\n+\n+/**\n+ * Handle a getcfcheckpt request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFCheckPt(CNode& pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman& connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+\n+    // Populate headers.\n+    const CBlockIndex* block_index = stop_index;\n+    for (int i = headers.size() - 1; i >= 0; i--) {\n+        int height = (i + 1) * CFCHECKPT_INTERVAL;\n+        block_index = block_index->GetAncestor(height);\n+\n+        if (!filter_index->LookupFilterHeader(block_index, headers[i])) {\n+            LogPrint(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\n+                         BlockFilterTypeName(filter_type), block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom.GetSendVersion())\n+        .Make(NetMsgType::CFCHECKPT,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              headers);\n+    connman.PushMessage(&pfrom, std::move(msg));\n+}\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, ChainstateManager& chainman, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n+{\n+    LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -1919,8 +2214,8 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n \n \n     if (!(pfrom->GetLocalServices() & NODE_BLOOM) &&\n-              (strCommand == NetMsgType::FILTERLOAD ||\n-               strCommand == NetMsgType::FILTERADD))\n+              (msg_type == NetMsgType::FILTERLOAD ||\n+               msg_type == NetMsgType::FILTERADD))\n     {\n         if (pfrom->nVersion >= NO_BLOOM_VERSION) {\n             LOCK(cs_main);\n@@ -1932,7 +2227,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         }\n     }\n \n-    if (strCommand == NetMsgType::VERSION) {\n+    if (msg_type == NetMsgType::VERSION) {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n@@ -2104,7 +2399,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n     // At this point, the outgoing message serialization version can't change.\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n-    if (strCommand == NetMsgType::VERACK)\n+    if (msg_type == NetMsgType::VERACK)\n     {\n         pfrom->SetRecvVersion(std::min(pfrom->nVersion.load(), PROTOCOL_VERSION));\n \n@@ -2149,7 +2444,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return false;\n     }\n \n-    if (strCommand == NetMsgType::ADDR) {\n+    if (msg_type == NetMsgType::ADDR) {\n         std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n@@ -2189,7 +2484,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n             {\n                 // Relay to a limited number of other nodes\n-                RelayAddress(addr, fReachable, connman);\n+                RelayAddress(addr, fReachable, *connman);\n             }\n             // Do not store addresses outside our network\n             if (fReachable)\n@@ -2203,13 +2498,13 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::SENDHEADERS) {\n+    if (msg_type == NetMsgType::SENDHEADERS) {\n         LOCK(cs_main);\n         State(pfrom->GetId())->fPreferHeaders = true;\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::SENDCMPCT) {\n+    if (msg_type == NetMsgType::SENDCMPCT) {\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n@@ -2232,7 +2527,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::INV) {\n+    if (msg_type == NetMsgType::INV) {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -2254,13 +2549,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n         const auto current_time = GetTime<std::chrono::microseconds>();\n+        uint256* best_block{nullptr};\n \n         for (CInv &inv : vInv)\n         {\n             if (interruptMsgProc)\n                 return true;\n \n-            bool fAlreadyHave = AlreadyHave(inv);\n+            bool fAlreadyHave = AlreadyHave(inv, mempool);\n             LogPrint(BCLog::NET, \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->GetId());\n \n             if (inv.type == MSG_TX) {\n@@ -2270,17 +2566,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n-                    // We used to request the full block here, but since headers-announcements are now the\n-                    // primary method of announcement on the network, and since, in the case that a node\n-                    // fell back to inv we probably have a reorg which we should get the headers for first,\n-                    // we now only provide a getheaders response here. When we receive the headers, we will\n-                    // then ask for the blocks we need.\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), inv.hash));\n-                    LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->GetId());\n+                    // Headers-first is the primary method of announcement on\n+                    // the network. If a node fell back to sending blocks by inv,\n+                    // it's probably for a re-org. The final block hash\n+                    // provided should be the highest, so send a getheaders and\n+                    // then fetch the blocks we need to catch up.\n+                    best_block = &inv.hash;\n                 }\n-            }\n-            else\n-            {\n+            } else {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n@@ -2291,10 +2584,16 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n                 }\n             }\n         }\n+\n+        if (best_block != nullptr) {\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), *best_block));\n+            LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, best_block->ToString(), pfrom->GetId());\n+        }\n+\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETDATA) {\n+    if (msg_type == NetMsgType::GETDATA) {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -2311,11 +2610,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         }\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom, chainparams, connman, interruptMsgProc);\n+        ProcessGetData(pfrom, chainparams, connman, mempool, interruptMsgProc);\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETBLOCKS) {\n+    if (msg_type == NetMsgType::GETBLOCKS) {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2383,7 +2682,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETBLOCKTXN) {\n+    if (msg_type == NetMsgType::GETBLOCKTXN) {\n         BlockTransactionsRequest req;\n         vRecv >> req;\n \n@@ -2432,7 +2731,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETHEADERS) {\n+    if (msg_type == NetMsgType::GETHEADERS) {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2499,10 +2798,10 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::TX) {\n+    if (msg_type == NetMsgType::TX) {\n         // Stop processing the transaction early if\n-        // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n-        // or if this peer is supposed to be a block-relay-only peer\n+        // 1) We are in blocks only mode and peer has no relay permission\n+        // 2) This peer is a block-relay-only peer\n         if ((!g_relay_txes && !pfrom->HasPermission(PF_RELAY)) || (pfrom->m_tx_relay == nullptr))\n         {\n             LogPrint(BCLog::NET, \"transaction sent in violation of protocol peer=%d\\n\", pfrom->GetId());\n@@ -2528,7 +2827,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (!AlreadyHave(inv) &&\n+        if (!AlreadyHave(inv, mempool) &&\n             AcceptToMemoryPool(mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\n             mempool.check(&::ChainstateActive().CoinsTip());\n             RelayTransaction(tx.GetHash(), *connman);\n@@ -2549,7 +2848,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            ProcessOrphanTx(connman, pfrom->orphan_work_set, lRemovedTxn);\n+            ProcessOrphanTx(connman, mempool, pfrom->orphan_work_set, lRemovedTxn);\n         }\n         else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\n         {\n@@ -2567,7 +2866,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n                 for (const CTxIn& txin : tx.vin) {\n                     CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                     pfrom->AddInventoryKnown(_inv);\n-                    if (!AlreadyHave(_inv)) RequestTx(State(pfrom->GetId()), _inv.hash, current_time);\n+                    if (!AlreadyHave(_inv, mempool)) RequestTx(State(pfrom->GetId()), _inv.hash, current_time);\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n \n@@ -2641,7 +2940,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::CMPCTBLOCK)\n+    if (msg_type == NetMsgType::CMPCTBLOCK)\n     {\n         // Ignore cmpctblock received while importing\n         if (fImporting || fReindex) {\n@@ -2671,7 +2970,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n \n         const CBlockIndex *pindex = nullptr;\n         BlockValidationState state;\n-        if (!ProcessNewBlockHeaders({cmpctblock.header}, state, chainparams, &pindex)) {\n+        if (!chainman.ProcessNewBlockHeaders({cmpctblock.header}, state, chainparams, &pindex)) {\n             if (state.IsInvalid()) {\n                 MaybePunishNodeForBlock(pfrom->GetId(), state, /*via_compact_block*/ true, \"invalid header via cmpctblock\");\n                 return true;\n@@ -2742,7 +3041,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n                  (fAlreadyInFlight && blockInFlightIt->second.first == pfrom->GetId())) {\n                 std::list<QueuedBlock>::iterator* queuedBlockIt = nullptr;\n-                if (!MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex, &queuedBlockIt)) {\n+                if (!MarkBlockAsInFlight(mempool, pfrom->GetId(), pindex->GetBlockHash(), pindex, &queuedBlockIt)) {\n                     if (!(*queuedBlockIt)->partialBlock)\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n                     else {\n@@ -2815,15 +3114,15 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, banman, interruptMsgProc);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, chainman, mempool, connman, banman, interruptMsgProc);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n             // relayed before full validation (see BIP 152), so we don't want to disconnect\n             // the peer if the header turns out to be for an invalid block.\n             // Note that if a peer tries to build on an invalid chain, that\n             // will be detected and the peer will be banned.\n-            return ProcessHeadersMessage(pfrom, connman, {cmpctblock.header}, chainparams, /*via_compact_block=*/true);\n+            return ProcessHeadersMessage(pfrom, connman, chainman, mempool, {cmpctblock.header}, chainparams, /*via_compact_block=*/true);\n         }\n \n         if (fBlockReconstructed) {\n@@ -2843,7 +3142,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2862,7 +3161,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::BLOCKTXN)\n+    if (msg_type == NetMsgType::BLOCKTXN)\n     {\n         // Ignore blocktxn received while importing\n         if (fImporting || fReindex) {\n@@ -2933,7 +3232,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2944,7 +3243,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::HEADERS)\n+    if (msg_type == NetMsgType::HEADERS)\n     {\n         // Ignore headers received while importing\n         if (fImporting || fReindex) {\n@@ -2967,10 +3266,10 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        return ProcessHeadersMessage(pfrom, connman, headers, chainparams, /*via_compact_block=*/false);\n+        return ProcessHeadersMessage(pfrom, connman, chainman, mempool, headers, chainparams, /*via_compact_block=*/false);\n     }\n \n-    if (strCommand == NetMsgType::BLOCK)\n+    if (msg_type == NetMsgType::BLOCK)\n     {\n         // Ignore block received while importing\n         if (fImporting || fReindex) {\n@@ -2996,7 +3295,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        chainman.ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {\n@@ -3006,7 +3305,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::GETADDR) {\n+    if (msg_type == NetMsgType::GETADDR) {\n         // This asymmetric behavior for inbound and outbound connections was introduced\n         // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n         // to users' AddrMan and later request them by sending getaddr messages.\n@@ -3040,7 +3339,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::MEMPOOL) {\n+    if (msg_type == NetMsgType::MEMPOOL) {\n         if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->HasPermission(PF_MEMPOOL))\n         {\n             if (!pfrom->HasPermission(PF_NOBAN))\n@@ -3068,7 +3367,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::PING) {\n+    if (msg_type == NetMsgType::PING) {\n         if (pfrom->nVersion > BIP0031_VERSION)\n         {\n             uint64_t nonce = 0;\n@@ -3089,7 +3388,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::PONG) {\n+    if (msg_type == NetMsgType::PONG) {\n         int64_t pingUsecEnd = nTimeReceived;\n         uint64_t nonce = 0;\n         size_t nAvail = vRecv.in_avail();\n@@ -3145,7 +3444,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERLOAD) {\n+    if (msg_type == NetMsgType::FILTERLOAD) {\n         CBloomFilter filter;\n         vRecv >> filter;\n \n@@ -3159,13 +3458,12 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         {\n             LOCK(pfrom->m_tx_relay->cs_filter);\n             pfrom->m_tx_relay->pfilter.reset(new CBloomFilter(filter));\n-            pfrom->m_tx_relay->pfilter->UpdateEmptyFull();\n             pfrom->m_tx_relay->fRelayTxes = true;\n         }\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERADD) {\n+    if (msg_type == NetMsgType::FILTERADD) {\n         std::vector<unsigned char> vData;\n         vRecv >> vData;\n \n@@ -3189,19 +3487,19 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERCLEAR) {\n+    if (msg_type == NetMsgType::FILTERCLEAR) {\n         if (pfrom->m_tx_relay == nullptr) {\n             return true;\n         }\n         LOCK(pfrom->m_tx_relay->cs_filter);\n         if (pfrom->GetLocalServices() & NODE_BLOOM) {\n-            pfrom->m_tx_relay->pfilter.reset(new CBloomFilter());\n+            pfrom->m_tx_relay->pfilter = nullptr;\n         }\n         pfrom->m_tx_relay->fRelayTxes = true;\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::FEEFILTER) {\n+    if (msg_type == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;\n         if (MoneyRange(newFeeFilter)) {\n@@ -3214,7 +3512,22 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::NOTFOUND) {\n+    if (msg_type == NetMsgType::GETCFILTERS) {\n+        ProcessGetCFilters(*pfrom, vRecv, chainparams, *connman);\n+        return true;\n+    }\n+\n+    if (msg_type == NetMsgType::GETCFHEADERS) {\n+        ProcessGetCFHeaders(*pfrom, vRecv, chainparams, *connman);\n+        return true;\n+    }\n+\n+    if (msg_type == NetMsgType::GETCFCHECKPT) {\n+        ProcessGetCFCheckPt(*pfrom, vRecv, chainparams, *connman);\n+        return true;\n+    }\n+\n+    if (msg_type == NetMsgType::NOTFOUND) {\n         // Remove the NOTFOUND transactions from the peer\n         LOCK(cs_main);\n         CNodeState *state = State(pfrom->GetId());\n@@ -3240,7 +3553,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\n     }\n \n     // Ignore unknown commands for extensibility\n-    LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->GetId());\n+    LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(msg_type), pfrom->GetId());\n     return true;\n }\n \n@@ -3285,12 +3598,12 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fMoreWork = false;\n \n     if (!pfrom->vRecvGetData.empty())\n-        ProcessGetData(pfrom, chainparams, connman, interruptMsgProc);\n+        ProcessGetData(pfrom, chainparams, connman, m_mempool, interruptMsgProc);\n \n     if (!pfrom->orphan_work_set.empty()) {\n         std::list<CTransactionRef> removed_txn;\n         LOCK2(cs_main, g_cs_orphans);\n-        ProcessOrphanTx(connman, pfrom->orphan_work_set, removed_txn);\n+        ProcessOrphanTx(connman, m_mempool, pfrom->orphan_work_set, removed_txn);\n         for (const CTransactionRef& removedTx : removed_txn) {\n             AddToCompactExtraTransactions(removedTx);\n         }\n@@ -3335,7 +3648,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n         LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(msg.m_command), pfrom->GetId());\n         return fMoreWork;\n     }\n-    const std::string& strCommand = msg.m_command;\n+    const std::string& msg_type = msg.m_command;\n \n     // Message size\n     unsigned int nMessageSize = msg.m_message_size;\n@@ -3345,27 +3658,27 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (!msg.m_valid_checksum)\n     {\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR peer=%d\\n\", __func__,\n-           SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n+           SanitizeString(msg_type), nMessageSize, pfrom->GetId());\n         return fMoreWork;\n     }\n \n     // Process message\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.m_time, chainparams, connman, m_banman, interruptMsgProc);\n+        fRet = ProcessMessage(pfrom, msg_type, vRecv, msg.m_time, chainparams, m_chainman, m_mempool, connman, m_banman, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())\n             fMoreWork = true;\n     } catch (const std::exception& e) {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what(), typeid(e).name());\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(msg_type), nMessageSize, e.what(), typeid(e).name());\n     } catch (...) {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Unknown exception caught\\n\", __func__, SanitizeString(strCommand), nMessageSize);\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Unknown exception caught\\n\", __func__, SanitizeString(msg_type), nMessageSize);\n     }\n \n     if (!fRet) {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->GetId());\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(msg_type), nMessageSize, pfrom->GetId());\n     }\n \n     LOCK(cs_main);\n@@ -3580,16 +3893,16 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         int64_t nNow = GetTimeMicros();\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n-        if (pto->IsAddrRelayPeer() && !::ChainstateActive().IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n+        if (pto->IsAddrRelayPeer() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n             AdvertiseLocal(pto);\n-            pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n+            pto->m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n \n         //\n         // Message: addr\n         //\n-        if (pto->IsAddrRelayPeer() && pto->nNextAddrSend < nNow) {\n-            pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n+        if (pto->IsAddrRelayPeer() && pto->m_next_addr_send < current_time) {\n+            pto->m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n             std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n             assert(pto->m_addr_known);\n@@ -3819,7 +4132,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n                 // Respond to BIP35 mempool requests\n                 if (fSendTrickle && pto->m_tx_relay->fSendMempool) {\n-                    auto vtxinfo = mempool.infoAll();\n+                    auto vtxinfo = m_mempool.infoAll();\n                     pto->m_tx_relay->fSendMempool = false;\n                     CFeeRate filterrate;\n                     {\n@@ -3865,7 +4178,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                     // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n                     // A heap is used so that not all items need sorting if only a few are being sent.\n-                    CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n+                    CompareInvMempoolOrder compareInvMempoolOrder(&m_mempool);\n                     std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n@@ -3884,7 +4197,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                             continue;\n                         }\n                         // Not in the mempool anymore? don't bother sending it.\n-                        auto txinfo = mempool.info(hash);\n+                        auto txinfo = m_mempool.info(hash);\n                         if (!txinfo.tx) {\n                             continue;\n                         }\n@@ -3996,7 +4309,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             for (const CBlockIndex *pindex : vToDownload) {\n                 uint32_t nFetchFlags = GetFetchFlags(pto);\n                 vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), pindex);\n+                MarkBlockAsInFlight(m_mempool, pto->GetId(), pindex->GetBlockHash(), pindex);\n                 LogPrint(BCLog::NET, \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->GetId());\n             }\n@@ -4039,7 +4352,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             // processing at a later time, see below)\n             tx_process_time.erase(tx_process_time.begin());\n             CInv inv(MSG_TX | GetFetchFlags(pto), txid);\n-            if (!AlreadyHave(inv)) {\n+            if (!AlreadyHave(inv, m_mempool)) {\n                 // If this transaction was last requested more than 1 minute ago,\n                 // then request.\n                 const auto last_request_time = GetTxRequestTime(inv.hash);\n@@ -4077,7 +4390,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n         if (pto->m_tx_relay != nullptr && pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !pto->HasPermission(PF_FORCERELAY)) {\n-            CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+            CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n             if (timeNow > pto->m_tx_relay->nextSendTimeFeeFilter) {\n                 static CFeeRate default_feerate(DEFAULT_MIN_RELAY_TX_FEE);"
      },
      {
        "sha": "ec758c7537d66922761f444324ebd2a5fc8195a5",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -6,33 +6,40 @@\n #ifndef BITCOIN_NET_PROCESSING_H\n #define BITCOIN_NET_PROCESSING_H\n \n-#include <net.h>\n-#include <validationinterface.h>\n #include <consensus/params.h>\n+#include <net.h>\n #include <sync.h>\n+#include <validationinterface.h>\n+\n+class CTxMemPool;\n+class ChainstateManager;\n \n extern RecursiveMutex cs_main;\n+extern RecursiveMutex g_cs_orphans;\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n static const bool DEFAULT_PEERBLOOMFILTERS = false;\n+static const bool DEFAULT_PEERBLOCKFILTERS = false;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n     CConnman* const connman;\n     BanMan* const m_banman;\n+    ChainstateManager& m_chainman;\n+    CTxMemPool& m_mempool;\n \n     bool CheckIfBanned(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n public:\n-    PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler);\n+    PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n \n     /**\n      * Overridden from CValidationInterface.\n      */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n     /**\n      * Overridden from CValidationInterface.\n@@ -72,6 +79,8 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n+    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n \n private:\n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip"
      },
      {
        "sha": "f79425a52eae3a41d66cb2a2c29e55cdc9113293",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -894,3 +894,8 @@ bool operator<(const CSubNet& a, const CSubNet& b)\n {\n     return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));\n }\n+\n+bool SanityCheckASMap(const std::vector<bool>& asmap)\n+{\n+    return SanityCheckASMap(asmap, 128); // For IP address lookups, the input is 128 bits\n+}"
      },
      {
        "sha": "e640c07d3229c49668ceb579fe4c80542eb34979",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 6,
        "deletions": 22,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -99,12 +99,7 @@ class CNetAddr\n         friend bool operator!=(const CNetAddr& a, const CNetAddr& b) { return !(a == b); }\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n-        }\n+        SERIALIZE_METHODS(CNetAddr, obj) { READWRITE(obj.ip); }\n \n         friend class CSubNet;\n };\n@@ -136,14 +131,7 @@ class CSubNet\n         friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }\n         friend bool operator<(const CSubNet& a, const CSubNet& b);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(network);\n-            READWRITE(netmask);\n-            READWRITE(valid);\n-        }\n+        SERIALIZE_METHODS(CSubNet, obj) { READWRITE(obj.network, obj.netmask, obj.valid); }\n };\n \n /** A combination of a network address (CNetAddr) and a (TCP) port */\n@@ -171,13 +159,9 @@ class CService : public CNetAddr\n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n         explicit CService(const struct sockaddr_in6& addr);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n-            READWRITE(WrapBigEndian(port));\n-        }\n+        SERIALIZE_METHODS(CService, obj) { READWRITE(obj.ip, Using<BigEndianFormatter<2>>(obj.port)); }\n };\n \n+bool SanityCheckASMap(const std::vector<bool>& asmap);\n+\n #endif // BITCOIN_NETADDRESS_H"
      },
      {
        "sha": "e3c4c828b65759dbfeb8116093ebccb420c39b60",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -33,7 +33,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n }\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void()>& interruption_point)\n {\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n@@ -49,6 +49,7 @@ bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     uint256 prevkey;\n     std::map<uint32_t, Coin> outputs;\n     while (pcursor->Valid()) {\n+        interruption_point();\n         COutPoint key;\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {"
      },
      {
        "sha": "d9cdaa30360649c000d7998be7d49c68d021e387",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -10,6 +10,7 @@\n #include <uint256.h>\n \n #include <cstdint>\n+#include <functional>\n \n class CCoinsView;\n \n@@ -29,6 +30,6 @@ struct CCoinsStats\n };\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats);\n+bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void()>& interruption_point = {});\n \n #endif // BITCOIN_NODE_COINSTATS_H"
      },
      {
        "sha": "0238aab0d98ca44bb87beea61dfb8311ea254f54",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c45d9e66893f2285b008c8aaf212bca46d646b90",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,17 +1,20 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_NODE_CONTEXT_H\n #define BITCOIN_NODE_CONTEXT_H\n \n+#include <cassert>\n #include <memory>\n #include <vector>\n \n+class ArgsManager;\n class BanMan;\n class CConnman;\n class CScheduler;\n class CTxMemPool;\n+class ChainstateManager;\n class PeerLogicValidation;\n namespace interfaces {\n class Chain;\n@@ -32,7 +35,9 @@ struct NodeContext {\n     std::unique_ptr<CConnman> connman;\n     CTxMemPool* mempool{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<PeerLogicValidation> peer_logic;\n+    ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<BanMan> banman;\n+    ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n     std::unique_ptr<CScheduler> scheduler;\n@@ -44,4 +49,10 @@ struct NodeContext {\n     ~NodeContext();\n };\n \n+inline ChainstateManager& EnsureChainman(const NodeContext& node)\n+{\n+    assert(node.chainman);\n+    return *node.chainman;\n+}\n+\n #endif // BITCOIN_NODE_CONTEXT_H"
      },
      {
        "sha": "c189018268063566349f28373c4aff9063e1e9b4",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "3841d8687db45018d0c3ef4cf6b77e144229b84c",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -78,6 +78,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool tracks locally submitted transactions to make a\n+        // best-effort of initial broadcast\n+        node.mempool->AddUnbroadcastTx(hashTx);\n+\n         RelayTransaction(hashTx, *node.connman);\n     }\n "
      },
      {
        "sha": "6491700d442c8ce1c39b20bc7a45cce9bc13b082",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,16 +1,24 @@\n-// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_NODE_TRANSACTION_H\n #define BITCOIN_NODE_TRANSACTION_H\n \n #include <attributes.h>\n+#include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <util/error.h>\n \n struct NodeContext;\n \n+/** Maximum fee rate for sendrawtransaction and testmempoolaccept RPC calls.\n+ * Also used by the GUI when broadcasting a completed PSBT.\n+ * By default, a transaction with a fee rate higher than this will be rejected\n+ * by these RPCs and the GUI. This can be overridden with the maxfeerate argument.\n+ */\n+static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n+\n /**\n  * Submit a transaction to the mempool and (optionally) relay it to all P2P peers.\n  *"
      },
      {
        "sha": "c8b4d60fd0026600c74477715cf5874da39cb404",
        "filename": "src/node/utxo_snapshot.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/utxo_snapshot.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/node/utxo_snapshot.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/utxo_snapshot.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -35,16 +35,7 @@ class SnapshotMetadata\n             m_coins_count(coins_count),\n             m_nchaintx(nchaintx) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(m_base_blockhash);\n-        READWRITE(m_coins_count);\n-        READWRITE(m_nchaintx);\n-    }\n-\n+    SERIALIZE_METHODS(SnapshotMetadata, obj) { READWRITE(obj.m_base_blockhash, obj.m_coins_count, obj.m_nchaintx); }\n };\n \n #endif // BITCOIN_NODE_UTXO_SNAPSHOT_H"
      },
      {
        "sha": "ddb3a50ff70eada48f548a16c4c4314bd803231d",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -5,8 +5,9 @@\n \n #include <noui.h>\n \n+#include <logging.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n+#include <util/translation.h>\n \n #include <string>\n \n@@ -18,7 +19,7 @@ boost::signals2::connection noui_ThreadSafeMessageBoxConn;\n boost::signals2::connection noui_ThreadSafeQuestionConn;\n boost::signals2::connection noui_InitMessageConn;\n \n-bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style)\n {\n     bool fSecure = style & CClientUIInterface::SECURE;\n     style &= ~CClientUIInterface::SECURE;\n@@ -43,15 +44,15 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n     }\n \n     if (!fSecure) {\n-        LogPrintf(\"%s%s\\n\", strCaption, message);\n+        LogPrintf(\"%s%s\\n\", strCaption, message.original);\n     }\n-    tfm::format(std::cerr, \"%s%s\\n\", strCaption, message);\n+    tfm::format(std::cerr, \"%s%s\\n\", strCaption, message.original);\n     return false;\n }\n \n-bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeQuestion(const bilingual_str& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n {\n-    return noui_ThreadSafeMessageBox(message, caption, style);\n+    return noui_ThreadSafeMessageBox(Untranslated(message), caption, style);\n }\n \n void noui_InitMessage(const std::string& message)\n@@ -66,13 +67,13 @@ void noui_connect()\n     noui_InitMessageConn = uiInterface.InitMessage_connect(noui_InitMessage);\n }\n \n-bool noui_ThreadSafeMessageBoxRedirect(const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeMessageBoxRedirect(const bilingual_str& message, const std::string& caption, unsigned int style)\n {\n-    LogPrintf(\"%s: %s\\n\", caption, message);\n+    LogPrintf(\"%s: %s\\n\", caption, message.original);\n     return false;\n }\n \n-bool noui_ThreadSafeQuestionRedirect(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n+bool noui_ThreadSafeQuestionRedirect(const bilingual_str& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n {\n     LogPrintf(\"%s: %s\\n\", caption, message);\n     return false;"
      },
      {
        "sha": "8ec5708328bf8e669e91427f6dc2ad728da081fa",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -7,10 +7,12 @@\n \n #include <string>\n \n+struct bilingual_str;\n+\n /** Non-GUI handler, which logs and prints messages. */\n-bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style);\n+bool noui_ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style);\n /** Non-GUI handler, which logs and prints questions. */\n-bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style);\n+bool noui_ThreadSafeQuestion(const bilingual_str& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style);\n /** Non-GUI handler, which only logs a message. */\n void noui_InitMessage(const std::string& message);\n "
      },
      {
        "sha": "ea7a86d6d661c313d477810ad1f3df9a20dd2bd4",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "61fa80c13033ffc9f26db264297a5bd42a43c7bd",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -48,12 +48,7 @@ class CFeeRate\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nSatoshisPerK);\n-    }\n+    SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.nSatoshisPerK); }\n };\n \n #endif //  BITCOIN_POLICY_FEERATE_H"
      },
      {
        "sha": "aa20efaaa7b64c204670f7fb43b291d39fe19a82",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -152,7 +152,7 @@ class prevector {\n         struct {\n             char* indirect;\n             size_type capacity;\n-        };\n+        } indirect_contents;\n     };\n #pragma pack(pop)\n     alignas(char*) direct_or_indirect _union = {};\n@@ -163,8 +163,8 @@ class prevector {\n \n     T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }\n     const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }\n-    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }\n-    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }\n+    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect_contents.indirect) + pos; }\n+    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect_contents.indirect) + pos; }\n     bool is_direct() const { return _size <= N; }\n \n     void change_capacity(size_type new_capacity) {\n@@ -182,17 +182,17 @@ class prevector {\n                 /* FIXME: Because malloc/realloc here won't call new_handler if allocation fails, assert\n                     success. These should instead use an allocator or new/delete so that handlers\n                     are called as necessary, but performance would be slightly degraded by doing so. */\n-                _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\n-                assert(_union.indirect);\n-                _union.capacity = new_capacity;\n+                _union.indirect_contents.indirect = static_cast<char*>(realloc(_union.indirect_contents.indirect, ((size_t)sizeof(T)) * new_capacity));\n+                assert(_union.indirect_contents.indirect);\n+                _union.indirect_contents.capacity = new_capacity;\n             } else {\n                 char* new_indirect = static_cast<char*>(malloc(((size_t)sizeof(T)) * new_capacity));\n                 assert(new_indirect);\n                 T* src = direct_ptr(0);\n                 T* dst = reinterpret_cast<T*>(new_indirect);\n                 memcpy(dst, src, size() * sizeof(T));\n-                _union.indirect = new_indirect;\n-                _union.capacity = new_capacity;\n+                _union.indirect_contents.indirect = new_indirect;\n+                _union.indirect_contents.capacity = new_capacity;\n                 _size += N + 1;\n             }\n         }\n@@ -301,7 +301,7 @@ class prevector {\n         if (is_direct()) {\n             return N;\n         } else {\n-            return _union.capacity;\n+            return _union.indirect_contents.capacity;\n         }\n     }\n \n@@ -468,8 +468,8 @@ class prevector {\n             clear();\n         }\n         if (!is_direct()) {\n-            free(_union.indirect);\n-            _union.indirect = nullptr;\n+            free(_union.indirect_contents.indirect);\n+            _union.indirect_contents.indirect = nullptr;\n         }\n     }\n \n@@ -521,7 +521,7 @@ class prevector {\n         if (is_direct()) {\n             return 0;\n         } else {\n-            return ((size_t)(sizeof(T))) * _union.capacity;\n+            return ((size_t)(sizeof(T))) * _union.indirect_contents.capacity;\n         }\n     }\n "
      },
      {
        "sha": "fd8fc8b868c0f2bda5a3a265935d8b0018d1668f",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 8,
        "deletions": 22,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -33,17 +33,7 @@ class CBlockHeader\n         SetNull();\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrevBlock);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n-    }\n+    SERIALIZE_METHODS(CBlockHeader, obj) { READWRITE(obj.nVersion, obj.hashPrevBlock, obj.hashMerkleRoot, obj.nTime, obj.nBits, obj.nNonce); }\n \n     void SetNull()\n     {\n@@ -89,12 +79,10 @@ class CBlock : public CBlockHeader\n         *(static_cast<CBlockHeader*>(this)) = header;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CBlockHeader, *this);\n-        READWRITE(vtx);\n+    SERIALIZE_METHODS(CBlock, obj)\n+    {\n+        READWRITEAS(CBlockHeader, obj);\n+        READWRITE(obj.vtx);\n     }\n \n     void SetNull()\n@@ -131,14 +119,12 @@ struct CBlockLocator\n \n     explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(CBlockLocator, obj)\n+    {\n         int nVersion = s.GetVersion();\n         if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(vHave);\n+        READWRITE(obj.vHave);\n     }\n \n     void SetNull()"
      },
      {
        "sha": "e6183cf2f42df7806ba66ae6fe841f07467f6aaf",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,6 +9,8 @@\n #include <tinyformat.h>\n #include <util/strencodings.h>\n \n+#include <assert.h>\n+\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n@@ -84,10 +86,11 @@ CAmount CTransaction::GetValueOut() const\n {\n     CAmount nValueOut = 0;\n     for (const auto& tx_out : vout) {\n-        nValueOut += tx_out.nValue;\n-        if (!MoneyRange(tx_out.nValue) || !MoneyRange(nValueOut))\n+        if (!MoneyRange(tx_out.nValue) || !MoneyRange(nValueOut + tx_out.nValue))\n             throw std::runtime_error(std::string(__func__) + \": value out of range\");\n+        nValueOut += tx_out.nValue;\n     }\n+    assert(MoneyRange(nValueOut));\n     return nValueOut;\n }\n "
      },
      {
        "sha": "4514db578a534da013dc807b9035dc338612c54a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 24,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -26,13 +26,7 @@ class COutPoint\n     COutPoint(): n(NULL_INDEX) { }\n     COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(hash);\n-        READWRITE(n);\n-    }\n+    SERIALIZE_METHODS(COutPoint, obj) { READWRITE(obj.hash, obj.n); }\n \n     void SetNull() { hash.SetNull(); n = NULL_INDEX; }\n     bool IsNull() const { return (hash.IsNull() && n == NULL_INDEX); }\n@@ -103,14 +97,7 @@ class CTxIn\n     explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n     CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(prevout);\n-        READWRITE(scriptSig);\n-        READWRITE(nSequence);\n-    }\n+    SERIALIZE_METHODS(CTxIn, obj) { READWRITE(obj.prevout, obj.scriptSig, obj.nSequence); }\n \n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n     {\n@@ -143,13 +130,7 @@ class CTxOut\n \n     CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n-    }\n+    SERIALIZE_METHODS(CTxOut, obj) { READWRITE(obj.nValue, obj.scriptPubKey); }\n \n     void SetNull()\n     {\n@@ -324,8 +305,6 @@ class CTransaction\n \n     // Return sum of txouts.\n     CAmount GetValueOut() const;\n-    // GetValueIn() is a method on CCoinsViewCache, because\n-    // inputs must be known to compute value in.\n \n     /**\n      * Get the total transaction size in bytes, including witness data."
      },
      {
        "sha": "83a24b9d95d5b0c913cb2ba0709736044a867377",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 21,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -40,6 +40,12 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFILTERS=\"getcfilters\";\n+const char *CFILTER=\"cfilter\";\n+const char *GETCFHEADERS=\"getcfheaders\";\n+const char *CFHEADERS=\"cfheaders\";\n+const char *GETCFCHECKPT=\"getcfcheckpt\";\n+const char *CFCHECKPT=\"cfcheckpt\";\n } // namespace NetMsgType\n \n /** All known message types. Keep this in the same order as the list of\n@@ -71,6 +77,12 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CMPCTBLOCK,\n     NetMsgType::GETBLOCKTXN,\n     NetMsgType::BLOCKTXN,\n+    NetMsgType::GETCFILTERS,\n+    NetMsgType::CFILTER,\n+    NetMsgType::GETCFHEADERS,\n+    NetMsgType::CFHEADERS,\n+    NetMsgType::GETCFCHECKPT,\n+    NetMsgType::CFCHECKPT,\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n \n@@ -85,8 +97,13 @@ CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\n {\n     memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n-    memset(pchCommand, 0, sizeof(pchCommand));\n-    strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n+\n+    // Copy the command name, zero-padding to COMMAND_SIZE bytes\n+    size_t i = 0;\n+    for (; i < COMMAND_SIZE && pszCommand[i] != 0; ++i) pchCommand[i] = pszCommand[i];\n+    assert(pszCommand[i] == 0); // Assert that the command name passed in is not longer than COMMAND_SIZE\n+    for (; i < COMMAND_SIZE; ++i) pchCommand[i] = 0;\n+\n     nMessageSize = nMessageSizeIn;\n     memset(pchChecksum, 0, CHECKSUM_SIZE);\n }\n@@ -138,24 +155,6 @@ void SetServiceFlagsIBDCache(bool state) {\n     g_initial_block_download_completed = state;\n }\n \n-\n-CAddress::CAddress() : CService()\n-{\n-    Init();\n-}\n-\n-CAddress::CAddress(CService ipIn, ServiceFlags nServicesIn) : CService(ipIn)\n-{\n-    Init();\n-    nServices = nServicesIn;\n-}\n-\n-void CAddress::Init()\n-{\n-    nServices = NODE_NONE;\n-    nTime = 100000000;\n-}\n-\n CInv::CInv()\n {\n     type = 0;\n@@ -199,3 +198,46 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+/**\n+ * Convert a service flag (NODE_*) to a human readable string.\n+ * It supports unknown service flags which will be returned as \"UNKNOWN[...]\".\n+ * @param[in] bit the service flag is calculated as (1 << bit)\n+ */\n+static std::string serviceFlagToStr(size_t bit)\n+{\n+    const uint64_t service_flag = 1ULL << bit;\n+    switch ((ServiceFlags)service_flag) {\n+    case NODE_NONE: abort();  // impossible\n+    case NODE_NETWORK:         return \"NETWORK\";\n+    case NODE_GETUTXO:         return \"GETUTXO\";\n+    case NODE_BLOOM:           return \"BLOOM\";\n+    case NODE_WITNESS:         return \"WITNESS\";\n+    case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n+    // Not using default, so we get warned when a case is missing\n+    }\n+\n+    std::ostringstream stream;\n+    stream.imbue(std::locale::classic());\n+    stream << \"UNKNOWN[\";\n+    if (bit < 8) {\n+        stream << service_flag;\n+    } else {\n+        stream << \"2^\" << bit;\n+    }\n+    stream << \"]\";\n+    return stream.str();\n+}\n+\n+std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n+{\n+    std::vector<std::string> str_flags;\n+\n+    for (size_t i = 0; i < sizeof(flags) * 8; ++i) {\n+        if (flags & (1ULL << i)) {\n+            str_flags.emplace_back(serviceFlagToStr(i));\n+        }\n+    }\n+\n+    return str_flags;\n+}"
      },
      {
        "sha": "985f44640bdec1f6a83e037642fe2341e8d61848",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 100,
        "deletions": 76,
        "changes": 176,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -37,21 +37,16 @@ class CMessageHeader\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n     explicit CMessageHeader(const MessageStartChars& pchMessageStartIn);\n+\n+    /** Construct a P2P message header from message-start characters, a command and the size of the message.\n+     * @note Passing in a `pszCommand` longer than COMMAND_SIZE will result in a run-time assertion error.\n+     */\n     CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn);\n \n     std::string GetCommand() const;\n     bool IsValid(const MessageStartChars& messageStart) const;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(pchMessageStart);\n-        READWRITE(pchCommand);\n-        READWRITE(nMessageSize);\n-        READWRITE(pchChecksum);\n-    }\n+    SERIALIZE_METHODS(CMessageHeader, obj) { READWRITE(obj.pchMessageStart, obj.pchCommand, obj.nMessageSize, obj.pchChecksum); }\n \n     char pchMessageStart[MESSAGE_START_SIZE];\n     char pchCommand[COMMAND_SIZE];\n@@ -70,100 +65,100 @@ namespace NetMsgType {\n  * receiving node at the beginning of a connection.\n  * @see https://bitcoin.org/en/developer-reference#version\n  */\n-extern const char *VERSION;\n+extern const char* VERSION;\n /**\n  * The verack message acknowledges a previously-received version message,\n  * informing the connecting node that it can begin to send other messages.\n  * @see https://bitcoin.org/en/developer-reference#verack\n  */\n-extern const char *VERACK;\n+extern const char* VERACK;\n /**\n  * The addr (IP address) message relays connection information for peers on the\n  * network.\n  * @see https://bitcoin.org/en/developer-reference#addr\n  */\n-extern const char *ADDR;\n+extern const char* ADDR;\n /**\n  * The inv message (inventory message) transmits one or more inventories of\n  * objects known to the transmitting peer.\n  * @see https://bitcoin.org/en/developer-reference#inv\n  */\n-extern const char *INV;\n+extern const char* INV;\n /**\n  * The getdata message requests one or more data objects from another node.\n  * @see https://bitcoin.org/en/developer-reference#getdata\n  */\n-extern const char *GETDATA;\n+extern const char* GETDATA;\n /**\n  * The merkleblock message is a reply to a getdata message which requested a\n  * block using the inventory type MSG_MERKLEBLOCK.\n  * @since protocol version 70001 as described by BIP37.\n  * @see https://bitcoin.org/en/developer-reference#merkleblock\n  */\n-extern const char *MERKLEBLOCK;\n+extern const char* MERKLEBLOCK;\n /**\n  * The getblocks message requests an inv message that provides block header\n  * hashes starting from a particular point in the block chain.\n  * @see https://bitcoin.org/en/developer-reference#getblocks\n  */\n-extern const char *GETBLOCKS;\n+extern const char* GETBLOCKS;\n /**\n  * The getheaders message requests a headers message that provides block\n  * headers starting from a particular point in the block chain.\n  * @since protocol version 31800.\n  * @see https://bitcoin.org/en/developer-reference#getheaders\n  */\n-extern const char *GETHEADERS;\n+extern const char* GETHEADERS;\n /**\n  * The tx message transmits a single transaction.\n  * @see https://bitcoin.org/en/developer-reference#tx\n  */\n-extern const char *TX;\n+extern const char* TX;\n /**\n  * The headers message sends one or more block headers to a node which\n  * previously requested certain headers with a getheaders message.\n  * @since protocol version 31800.\n  * @see https://bitcoin.org/en/developer-reference#headers\n  */\n-extern const char *HEADERS;\n+extern const char* HEADERS;\n /**\n  * The block message transmits a single serialized block.\n  * @see https://bitcoin.org/en/developer-reference#block\n  */\n-extern const char *BLOCK;\n+extern const char* BLOCK;\n /**\n  * The getaddr message requests an addr message from the receiving node,\n  * preferably one with lots of IP addresses of other receiving nodes.\n  * @see https://bitcoin.org/en/developer-reference#getaddr\n  */\n-extern const char *GETADDR;\n+extern const char* GETADDR;\n /**\n  * The mempool message requests the TXIDs of transactions that the receiving\n  * node has verified as valid but which have not yet appeared in a block.\n  * @since protocol version 60002.\n  * @see https://bitcoin.org/en/developer-reference#mempool\n  */\n-extern const char *MEMPOOL;\n+extern const char* MEMPOOL;\n /**\n  * The ping message is sent periodically to help confirm that the receiving\n  * peer is still connected.\n  * @see https://bitcoin.org/en/developer-reference#ping\n  */\n-extern const char *PING;\n+extern const char* PING;\n /**\n  * The pong message replies to a ping message, proving to the pinging node that\n  * the ponging node is still alive.\n  * @since protocol version 60001 as described by BIP31.\n  * @see https://bitcoin.org/en/developer-reference#pong\n  */\n-extern const char *PONG;\n+extern const char* PONG;\n /**\n  * The notfound message is a reply to a getdata message which requested an\n  * object the receiving node does not have available for relay.\n  * @since protocol version 70001.\n  * @see https://bitcoin.org/en/developer-reference#notfound\n  */\n-extern const char *NOTFOUND;\n+extern const char* NOTFOUND;\n /**\n  * The filterload message tells the receiving peer to filter all relayed\n  * transactions and requested merkle blocks through the provided filter.\n@@ -172,7 +167,7 @@ extern const char *NOTFOUND;\n  *   70011 as described by BIP111.\n  * @see https://bitcoin.org/en/developer-reference#filterload\n  */\n-extern const char *FILTERLOAD;\n+extern const char* FILTERLOAD;\n /**\n  * The filteradd message tells the receiving peer to add a single element to a\n  * previously-set bloom filter, such as a new public key.\n@@ -181,7 +176,7 @@ extern const char *FILTERLOAD;\n  *   70011 as described by BIP111.\n  * @see https://bitcoin.org/en/developer-reference#filteradd\n  */\n-extern const char *FILTERADD;\n+extern const char* FILTERADD;\n /**\n  * The filterclear message tells the receiving peer to remove a previously-set\n  * bloom filter.\n@@ -190,54 +185,90 @@ extern const char *FILTERADD;\n  *   70011 as described by BIP111.\n  * @see https://bitcoin.org/en/developer-reference#filterclear\n  */\n-extern const char *FILTERCLEAR;\n+extern const char* FILTERCLEAR;\n /**\n  * Indicates that a node prefers to receive new block announcements via a\n  * \"headers\" message rather than an \"inv\".\n  * @since protocol version 70012 as described by BIP130.\n  * @see https://bitcoin.org/en/developer-reference#sendheaders\n  */\n-extern const char *SENDHEADERS;\n+extern const char* SENDHEADERS;\n /**\n  * The feefilter message tells the receiving peer not to inv us any txs\n  * which do not meet the specified min fee rate.\n  * @since protocol version 70013 as described by BIP133\n  */\n-extern const char *FEEFILTER;\n+extern const char* FEEFILTER;\n /**\n  * Contains a 1-byte bool and 8-byte LE version number.\n  * Indicates that a node is willing to provide blocks via \"cmpctblock\" messages.\n  * May indicate that a node prefers to receive new block announcements via a\n  * \"cmpctblock\" message rather than an \"inv\", depending on message contents.\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *SENDCMPCT;\n+extern const char* SENDCMPCT;\n /**\n  * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n  * list of \"short txids\".\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *CMPCTBLOCK;\n+extern const char* CMPCTBLOCK;\n /**\n  * Contains a BlockTransactionsRequest\n  * Peer should respond with \"blocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *GETBLOCKTXN;\n+extern const char* GETBLOCKTXN;\n /**\n  * Contains a BlockTransactions.\n  * Sent in response to a \"getblocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n-extern const char *BLOCKTXN;\n-};\n+extern const char* BLOCKTXN;\n+/**\n+ * getcfilters requests compact filters for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char* GETCFILTERS;\n+/**\n+ * cfilter is a response to a getcfilters request containing a single compact\n+ * filter.\n+ */\n+extern const char* CFILTER;\n+/**\n+ * getcfheaders requests a compact filter header and the filter hashes for a\n+ * range of blocks, which can then be used to reconstruct the filter headers\n+ * for those blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char* GETCFHEADERS;\n+/**\n+ * cfheaders is a response to a getcfheaders request containing a filter header\n+ * and a vector of filter hashes for each subsequent block in the requested range.\n+ */\n+extern const char* CFHEADERS;\n+/**\n+ * getcfcheckpt requests evenly spaced compact filter headers, enabling\n+ * parallelized download and validation of the headers between them.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char* GETCFCHECKPT;\n+/**\n+ * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n+ * evenly spaced filter headers for blocks on the requested chain.\n+ */\n+extern const char* CFCHECKPT;\n+}; // namespace NetMsgType\n \n /* Get a vector of all valid message types (see above) */\n-const std::vector<std::string> &getAllNetMessageTypes();\n+const std::vector<std::string>& getAllNetMessageTypes();\n \n /** nServices flags */\n enum ServiceFlags : uint64_t {\n-    // NOTE: When adding here, be sure to update qt/guiutil.cpp's formatServicesStr too\n+    // NOTE: When adding here, be sure to update serviceFlagToStr too\n     // Nothing\n     NODE_NONE = 0,\n     // NODE_NETWORK means that the node is capable of serving the complete block chain. It is currently\n@@ -268,6 +299,13 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n+/**\n+ * Convert service flags (a bitmask of NODE_*) to human readable strings.\n+ * It supports unknown service flags which will be returned as \"UNKNOWN[...]\".\n+ * @param[in] flags multiple NODE_* bitwise-OR-ed together\n+ */\n+std::vector<std::string> serviceFlagsToStr(uint64_t flags);\n+\n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer.\n  *\n@@ -302,70 +340,64 @@ void SetServiceFlagsIBDCache(bool status);\n  * == GetDesirableServiceFlags(services), ie determines whether the given\n  * set of service flags are sufficient for a peer to be \"relevant\".\n  */\n-static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n+static inline bool HasAllDesirableServiceFlags(ServiceFlags services)\n+{\n     return !(GetDesirableServiceFlags(services) & (~services));\n }\n \n /**\n  * Checks if a peer with the given service flags may be capable of having a\n  * robust address-storage DB.\n  */\n-static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n+static inline bool MayHaveUsefulAddressDB(ServiceFlags services)\n+{\n     return (services & NODE_NETWORK) || (services & NODE_NETWORK_LIMITED);\n }\n \n /** A CService with information about it as peer */\n class CAddress : public CService\n {\n-public:\n-    CAddress();\n-    explicit CAddress(CService ipIn, ServiceFlags nServicesIn);\n-\n-    void Init();\n+    static constexpr uint32_t TIME_INIT{100000000};\n \n-    ADD_SERIALIZE_METHODS;\n+public:\n+    CAddress() : CService{} {};\n+    explicit CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(CAddress, obj)\n     {\n-        if (ser_action.ForRead())\n-            Init();\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n         int nVersion = s.GetVersion();\n-        if (s.GetType() & SER_DISK)\n+        if (s.GetType() & SER_DISK) {\n             READWRITE(nVersion);\n+        }\n         if ((s.GetType() & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n-            READWRITE(nTime);\n-        uint64_t nServicesInt = nServices;\n-        READWRITE(nServicesInt);\n-        nServices = static_cast<ServiceFlags>(nServicesInt);\n-        READWRITEAS(CService, *this);\n+            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            READWRITE(obj.nTime);\n+        }\n+        READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n+        READWRITEAS(CService, obj);\n     }\n \n-    // TODO: make private (improves encapsulation)\n-public:\n-    ServiceFlags nServices;\n-\n+    ServiceFlags nServices{NODE_NONE};\n     // disk and network only\n-    unsigned int nTime;\n+    uint32_t nTime{TIME_INIT};\n };\n \n /** getdata message type flags */\n const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n-const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n+const uint32_t MSG_TYPE_MASK = 0xffffffff >> 2;\n \n /** getdata / inv message types.\n  * These numbers are defined by the protocol. When adding a new value, be sure\n  * to mention it in the respective BIP.\n  */\n-enum GetDataMsg\n-{\n+enum GetDataMsg {\n     UNDEFINED = 0,\n     MSG_TX = 1,\n     MSG_BLOCK = 2,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n-    MSG_FILTERED_BLOCK = 3,  //!< Defined in BIP37\n-    MSG_CMPCT_BLOCK = 4,     //!< Defined in BIP152\n+    MSG_FILTERED_BLOCK = 3,                           //!< Defined in BIP37\n+    MSG_CMPCT_BLOCK = 4,                              //!< Defined in BIP152\n     MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, //!< Defined in BIP144\n     MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       //!< Defined in BIP144\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,\n@@ -378,21 +410,13 @@ class CInv\n     CInv();\n     CInv(int typeIn, const uint256& hashIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(type);\n-        READWRITE(hash);\n-    }\n+    SERIALIZE_METHODS(CInv, obj) { READWRITE(obj.type, obj.hash); }\n \n     friend bool operator<(const CInv& a, const CInv& b);\n \n     std::string GetCommand() const;\n     std::string ToString() const;\n \n-public:\n     int type;\n     uint256 hash;\n };"
      },
      {
        "sha": "ef9781817ab045b966f9328708c0718e9081e8f1",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "888e0fd1194001805ff6abc99fb603c6a0fa7541",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -40,6 +40,10 @@ static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n // as a 0 length key which indicates that this is the separator. The separator has no value.\n static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n \n+// BIP 174 does not specify a maximum file size, but we set a limit anyway\n+// to prevent reading a stream indefinitely and running out of memory.\n+const std::streamsize MAX_FILE_SIZE_PSBT = 100000000; // 100 MiB\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {"
      },
      {
        "sha": "261842b7f7f10835aa169a5da3e1491797ffd7f3",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -219,6 +219,11 @@ struct CExtPubKey {\n             a.pubkey == b.pubkey;\n     }\n \n+    friend bool operator!=(const CExtPubKey &a, const CExtPubKey &b)\n+    {\n+        return !(a == b);\n+    }\n+\n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;"
      },
      {
        "sha": "aa4ec04497aedb8781c15dd338ada91eae65e3bd",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -35,7 +35,7 @@ class AddressBookSortFilterProxyModel final : public QSortFilterProxyModel\n     }\n \n protected:\n-    bool filterAcceptsRow(int row, const QModelIndex& parent) const\n+    bool filterAcceptsRow(int row, const QModelIndex& parent) const override\n     {\n         auto model = sourceModel();\n         auto label = model->index(row, AddressTableModel::Label, parent);\n@@ -106,7 +106,7 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n         ui->newAddress->setVisible(true);\n         break;\n     case ReceivingTab:\n-        ui->labelExplanation->setText(tr(\"These are your Bitcoin addresses for receiving payments. Use the 'Create new receiving address' button in the receive tab to create new addresses.\"));\n+        ui->labelExplanation->setText(tr(\"These are your Bitcoin addresses for receiving payments. Use the 'Create new receiving address' button in the receive tab to create new addresses.\\nSigning is only possible with addresses of the type 'legacy'.\"));\n         ui->deleteAddress->setVisible(false);\n         ui->newAddress->setVisible(false);\n         break;\n@@ -136,6 +136,8 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n     connect(ui->tableView, &QWidget::customContextMenuRequested, this, &AddressBookPage::contextualMenu);\n \n     connect(ui->closeButton, &QPushButton::clicked, this, &QDialog::accept);\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n }\n \n AddressBookPage::~AddressBookPage()"
      },
      {
        "sha": "3d303a6f682564a5f2e4ff57e6aeab88fdc9f5f1",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -45,7 +45,7 @@ class AddressBookPage : public QDialog\n     const QString &getReturnValue() const { return returnValue; }\n \n public Q_SLOTS:\n-    void done(int retval);\n+    void done(int retval) override;\n \n private:\n     Ui::AddressBookPage *ui;"
      },
      {
        "sha": "665c8e60532293c33ced94ccf265dde91b47e3e5",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,6 +11,7 @@\n #include <wallet/wallet.h>\n \n #include <algorithm>\n+#include <typeinfo>\n \n #include <QFont>\n #include <QDebug>\n@@ -55,7 +56,7 @@ struct AddressTableEntryLessThan\n static AddressTableEntry::Type translateTransactionType(const QString &strPurpose, bool isMine)\n {\n     AddressTableEntry::Type addressType = AddressTableEntry::Hidden;\n-    // \"refund\" addresses aren't shown, and change addresses aren't in mapAddressBook at all.\n+    // \"refund\" addresses aren't shown, and change addresses aren't returned by getAddresses at all.\n     if (strPurpose == \"send\")\n         addressType = AddressTableEntry::Sending;\n     else if (strPurpose == \"receive\")\n@@ -75,12 +76,14 @@ class AddressTablePriv\n     explicit AddressTablePriv(AddressTableModel *_parent):\n         parent(_parent) {}\n \n-    void refreshAddressTable(interfaces::Wallet& wallet)\n+    void refreshAddressTable(interfaces::Wallet& wallet, bool pk_hash_only = false)\n     {\n         cachedAddressTable.clear();\n         {\n             for (const auto& address : wallet.getAddresses())\n             {\n+                if (pk_hash_only && address.dest.type() != typeid(PKHash))\n+                    continue;\n                 AddressTableEntry::Type addressType = translateTransactionType(\n                         QString::fromStdString(address.purpose), address.is_mine);\n                 cachedAddressTable.append(AddressTableEntry(addressType,\n@@ -159,12 +162,12 @@ class AddressTablePriv\n     }\n };\n \n-AddressTableModel::AddressTableModel(WalletModel *parent) :\n+AddressTableModel::AddressTableModel(WalletModel *parent, bool pk_hash_only) :\n     QAbstractTableModel(parent), walletModel(parent)\n {\n     columns << tr(\"Label\") << tr(\"Address\");\n     priv = new AddressTablePriv(this);\n-    priv->refreshAddressTable(parent->wallet());\n+    priv->refreshAddressTable(parent->wallet(), pk_hash_only);\n }\n \n AddressTableModel::~AddressTableModel()"
      },
      {
        "sha": "73316cadc4e155114650b4ed42bdf996d984ebc2",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -25,7 +25,7 @@ class AddressTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit AddressTableModel(WalletModel *parent = nullptr);\n+    explicit AddressTableModel(WalletModel *parent = nullptr, bool pk_hash_only = false);\n     ~AddressTableModel();\n \n     enum ColumnIndex {\n@@ -52,14 +52,14 @@ class AddressTableModel : public QAbstractTableModel\n \n     /** @name Methods overridden from QAbstractTableModel\n         @{*/\n-    int rowCount(const QModelIndex &parent) const;\n-    int columnCount(const QModelIndex &parent) const;\n-    QVariant data(const QModelIndex &index, int role) const;\n-    bool setData(const QModelIndex &index, const QVariant &value, int role);\n-    QVariant headerData(int section, Qt::Orientation orientation, int role) const;\n-    QModelIndex index(int row, int column, const QModelIndex &parent) const;\n-    bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());\n-    Qt::ItemFlags flags(const QModelIndex &index) const;\n+    int rowCount(const QModelIndex &parent) const override;\n+    int columnCount(const QModelIndex &parent) const override;\n+    QVariant data(const QModelIndex &index, int role) const override;\n+    bool setData(const QModelIndex &index, const QVariant &value, int role) override;\n+    QVariant headerData(int section, Qt::Orientation orientation, int role) const override;\n+    QModelIndex index(int row, int column, const QModelIndex &parent) const override;\n+    bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex()) override;\n+    Qt::ItemFlags flags(const QModelIndex &index) const override;\n     /*@}*/\n \n     /* Add an address to the model."
      },
      {
        "sha": "3d1963b6e64802ad228a3644a764850e59fe36a7",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -10,6 +10,7 @@\n #include <qt/forms/ui_askpassphrasedialog.h>\n \n #include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n #include <qt/walletmodel.h>\n \n #include <support/allocators/secure.h>\n@@ -75,6 +76,8 @@ AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent, SecureStri\n     connect(ui->passEdit1, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n     connect(ui->passEdit2, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n     connect(ui->passEdit3, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n }\n \n AskPassphraseDialog::~AskPassphraseDialog()"
      },
      {
        "sha": "9557e72936e3ab3eeca3e3e1dc9c85fb1955cce8",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -32,7 +32,7 @@ class AskPassphraseDialog : public QDialog\n     explicit AskPassphraseDialog(Mode mode, QWidget *parent, SecureString* passphrase_out = nullptr);\n     ~AskPassphraseDialog();\n \n-    void accept();\n+    void accept() override;\n \n     void setModel(WalletModel *model);\n \n@@ -49,8 +49,8 @@ private Q_SLOTS:\n     void toggleShowPassword(bool);\n \n protected:\n-    bool event(QEvent *event);\n-    bool eventFilter(QObject *object, QEvent *event);\n+    bool event(QEvent *event) override;\n+    bool eventFilter(QObject *object, QEvent *event) override;\n };\n \n #endif // BITCOIN_QT_ASKPASSPHRASEDIALOG_H"
      },
      {
        "sha": "2739b21a9d5b4484ce911a087da1c1ce7053d28e",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "57f559fc14c77c17adf787c0a011c148efe7d0d5",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -56,16 +56,17 @@ class BanTableModel : public QAbstractTableModel\n \n     /** @name Methods overridden from QAbstractTableModel\n         @{*/\n-    int rowCount(const QModelIndex &parent) const;\n-    int columnCount(const QModelIndex &parent) const;\n-    QVariant data(const QModelIndex &index, int role) const;\n-    QVariant headerData(int section, Qt::Orientation orientation, int role) const;\n-    QModelIndex index(int row, int column, const QModelIndex &parent) const;\n-    Qt::ItemFlags flags(const QModelIndex &index) const;\n-    void sort(int column, Qt::SortOrder order);\n-    bool shouldShow();\n+    int rowCount(const QModelIndex &parent) const override;\n+    int columnCount(const QModelIndex &parent) const override;\n+    QVariant data(const QModelIndex &index, int role) const override;\n+    QVariant headerData(int section, Qt::Orientation orientation, int role) const override;\n+    QModelIndex index(int row, int column, const QModelIndex &parent) const override;\n+    Qt::ItemFlags flags(const QModelIndex &index) const override;\n+    void sort(int column, Qt::SortOrder order) override;\n     /*@}*/\n \n+    bool shouldShow();\n+\n public Q_SLOTS:\n     void refresh();\n "
      },
      {
        "sha": "f8cdb5df232c44afb2e90de7353c203a4b6b967a",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -34,6 +34,7 @@\n #include <uint256.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n+#include <validation.h>\n \n #include <memory>\n \n@@ -61,8 +62,26 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n // Declare meta types used for QMetaObject::invokeMethod\n Q_DECLARE_METATYPE(bool*)\n Q_DECLARE_METATYPE(CAmount)\n+Q_DECLARE_METATYPE(SynchronizationState)\n Q_DECLARE_METATYPE(uint256)\n \n+static void RegisterMetaTypes()\n+{\n+    // Register meta types used for QMetaObject::invokeMethod and Qt::QueuedConnection\n+    qRegisterMetaType<bool*>();\n+    qRegisterMetaType<SynchronizationState>();\n+  #ifdef ENABLE_WALLET\n+    qRegisterMetaType<WalletModel*>();\n+  #endif\n+    // Register typedefs (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n+    // IMPORTANT: if CAmount is no longer a typedef use the normal variant above (see https://doc.qt.io/qt-5/qmetatype.html#qRegisterMetaType-1)\n+    qRegisterMetaType<CAmount>(\"CAmount\");\n+    qRegisterMetaType<size_t>(\"size_t\");\n+\n+    qRegisterMetaType<std::function<void()>>(\"std::function<void()>\");\n+    qRegisterMetaType<QMessageBox::Icon>(\"QMessageBox::Icon\");\n+}\n+\n static QString GetLangTerritory()\n {\n     QSettings settings;\n@@ -182,6 +201,7 @@ BitcoinApplication::BitcoinApplication(interfaces::Node& node):\n     returnValue(0),\n     platformStyle(nullptr)\n {\n+    RegisterMetaTypes();\n     setQuitOnLastWindowClosed(false);\n }\n \n@@ -210,8 +230,6 @@ BitcoinApplication::~BitcoinApplication()\n \n     delete window;\n     window = nullptr;\n-    delete optionsModel;\n-    optionsModel = nullptr;\n     delete platformStyle;\n     platformStyle = nullptr;\n }\n@@ -225,7 +243,7 @@ void BitcoinApplication::createPaymentServer()\n \n void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel(m_node, nullptr, resetSettings);\n+    optionsModel = new OptionsModel(m_node, this, resetSettings);\n }\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n@@ -336,7 +354,7 @@ void BitcoinApplication::initializeResult(bool success)\n         window->setClientModel(clientModel);\n #ifdef ENABLE_WALLET\n         if (WalletModel::isWalletEnabled()) {\n-            m_wallet_controller = new WalletController(m_node, platformStyle, optionsModel, this);\n+            m_wallet_controller = new WalletController(*clientModel, platformStyle, this);\n             window->setWalletController(m_wallet_controller);\n             if (paymentServer) {\n                 paymentServer->setOptionsModel(optionsModel);\n@@ -381,7 +399,7 @@ void BitcoinApplication::shutdownResult()\n \n void BitcoinApplication::handleRunawayException(const QString &message)\n {\n-    QMessageBox::critical(nullptr, \"Runaway exception\", BitcoinGUI::tr(\"A fatal error occurred. Bitcoin can no longer continue safely and will quit.\") + QString(\"\\n\\n\") + message);\n+    QMessageBox::critical(nullptr, \"Runaway exception\", BitcoinGUI::tr(\"A fatal error occurred. %1 can no longer continue safely and will quit.\").arg(PACKAGE_NAME) + QString(\"\\n\\n\") + message);\n     ::exit(EXIT_FAILURE);\n }\n \n@@ -433,19 +451,6 @@ int GuiMain(int argc, char* argv[])\n \n     BitcoinApplication app(*node);\n \n-    // Register meta types used for QMetaObject::invokeMethod and Qt::QueuedConnection\n-    qRegisterMetaType<bool*>();\n-#ifdef ENABLE_WALLET\n-    qRegisterMetaType<WalletModel*>();\n-#endif\n-    // Register typedefs (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n-    // IMPORTANT: if CAmount is no longer a typedef use the normal variant above (see https://doc.qt.io/qt-5/qmetatype.html#qRegisterMetaType-1)\n-    qRegisterMetaType<CAmount>(\"CAmount\");\n-    qRegisterMetaType<size_t>(\"size_t\");\n-\n-    qRegisterMetaType<std::function<void()>>(\"std::function<void()>\");\n-    qRegisterMetaType<QMessageBox::Icon>(\"QMessageBox::Icon\");\n-\n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n     node->setupServerArgs();"
      },
      {
        "sha": "a35ca15d62c0ae48f364e472f0eae77edcdccf4d",
        "filename": "src/qt/bitcoin_locale.qrc",
        "status": "modified",
        "additions": 10,
        "deletions": 25,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoin_locale.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoin_locale.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin_locale.qrc?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,48 +1,40 @@\n <!DOCTYPE RCC><RCC version=\"1.0\">\n     <qresource prefix=\"/translations\">\n+        <file alias=\"af\">locale/bitcoin_af.qm</file>\n+        <file alias=\"am\">locale/bitcoin_am.qm</file>\n         <file alias=\"ar\">locale/bitcoin_ar.qm</file>\n-        <file alias=\"be_BY\">locale/bitcoin_be_BY.qm</file>\n+        <file alias=\"be\">locale/bitcoin_be.qm</file>\n+        <file alias=\"bg\">locale/bitcoin_bg.qm</file>\n+        <file alias=\"bn\">locale/bitcoin_bn.qm</file>\n+        <file alias=\"bs\">locale/bitcoin_bs.qm</file>\n         <file alias=\"ca\">locale/bitcoin_ca.qm</file>\n         <file alias=\"cs\">locale/bitcoin_cs.qm</file>\n-        <file alias=\"cs_CZ\">locale/bitcoin_cs_CZ.qm</file>\n         <file alias=\"cy\">locale/bitcoin_cy.qm</file>\n         <file alias=\"da\">locale/bitcoin_da.qm</file>\n         <file alias=\"de\">locale/bitcoin_de.qm</file>\n-        <file alias=\"de_DE\">locale/bitcoin_de_DE.qm</file>\n         <file alias=\"el\">locale/bitcoin_el.qm</file>\n-        <file alias=\"el_GR\">locale/bitcoin_el_GR.qm</file>\n         <file alias=\"en\">locale/bitcoin_en.qm</file>\n-        <file alias=\"en_AU\">locale/bitcoin_en_AU.qm</file>\n         <file alias=\"en_GB\">locale/bitcoin_en_GB.qm</file>\n         <file alias=\"eo\">locale/bitcoin_eo.qm</file>\n         <file alias=\"es\">locale/bitcoin_es.qm</file>\n         <file alias=\"es_CL\">locale/bitcoin_es_CL.qm</file>\n         <file alias=\"es_CO\">locale/bitcoin_es_CO.qm</file>\n         <file alias=\"es_DO\">locale/bitcoin_es_DO.qm</file>\n-        <file alias=\"es_ES\">locale/bitcoin_es_ES.qm</file>\n         <file alias=\"es_MX\">locale/bitcoin_es_MX.qm</file>\n         <file alias=\"es_VE\">locale/bitcoin_es_VE.qm</file>\n         <file alias=\"et\">locale/bitcoin_et.qm</file>\n-        <file alias=\"et_EE\">locale/bitcoin_et_EE.qm</file>\n         <file alias=\"eu\">locale/bitcoin_eu.qm</file>\n         <file alias=\"fa\">locale/bitcoin_fa.qm</file>\n         <file alias=\"fi\">locale/bitcoin_fi.qm</file>\n         <file alias=\"fil\">locale/bitcoin_fil.qm</file>\n         <file alias=\"fr\">locale/bitcoin_fr.qm</file>\n-        <file alias=\"fr_CA\">locale/bitcoin_fr_CA.qm</file>\n-        <file alias=\"fr_FR\">locale/bitcoin_fr_FR.qm</file>\n-        <file alias=\"gl\">locale/bitcoin_gl.qm</file>\n         <file alias=\"he\">locale/bitcoin_he.qm</file>\n-        <file alias=\"he_IL\">locale/bitcoin_he_IL.qm</file>\n         <file alias=\"hi\">locale/bitcoin_hi.qm</file>\n         <file alias=\"hr\">locale/bitcoin_hr.qm</file>\n         <file alias=\"hu\">locale/bitcoin_hu.qm</file>\n-        <file alias=\"hu_HU\">locale/bitcoin_hu_HU.qm</file>\n         <file alias=\"id\">locale/bitcoin_id.qm</file>\n-        <file alias=\"id_ID\">locale/bitcoin_id_ID.qm</file>\n         <file alias=\"is\">locale/bitcoin_is.qm</file>\n         <file alias=\"it\">locale/bitcoin_it.qm</file>\n-        <file alias=\"it_IT\">locale/bitcoin_it_IT.qm</file>\n         <file alias=\"ja\">locale/bitcoin_ja.qm</file>\n         <file alias=\"ka\">locale/bitcoin_ka.qm</file>\n         <file alias=\"kk\">locale/bitcoin_kk.qm</file>\n@@ -53,32 +45,26 @@\n         <file alias=\"la\">locale/bitcoin_la.qm</file>\n         <file alias=\"lt\">locale/bitcoin_lt.qm</file>\n         <file alias=\"lv\">locale/bitcoin_lv.qm</file>\n-        <file alias=\"lv_LV\">locale/bitcoin_lv_LV.qm</file>\n         <file alias=\"mk\">locale/bitcoin_mk.qm</file>\n         <file alias=\"ml\">locale/bitcoin_ml.qm</file>\n         <file alias=\"mn\">locale/bitcoin_mn.qm</file>\n         <file alias=\"mr_IN\">locale/bitcoin_mr_IN.qm</file>\n         <file alias=\"ms\">locale/bitcoin_ms.qm</file>\n-        <file alias=\"ms_MY\">locale/bitcoin_ms_MY.qm</file>\n+        <file alias=\"my\">locale/bitcoin_my.qm</file>\n         <file alias=\"nb\">locale/bitcoin_nb.qm</file>\n         <file alias=\"ne\">locale/bitcoin_ne.qm</file>\n         <file alias=\"nl\">locale/bitcoin_nl.qm</file>\n-        <file alias=\"nl_NL\">locale/bitcoin_nl_NL.qm</file>\n         <file alias=\"pam\">locale/bitcoin_pam.qm</file>\n         <file alias=\"pl\">locale/bitcoin_pl.qm</file>\n         <file alias=\"pt\">locale/bitcoin_pt.qm</file>\n         <file alias=\"pt_BR\">locale/bitcoin_pt_BR.qm</file>\n-        <file alias=\"pt_PT\">locale/bitcoin_pt_PT.qm</file>\n         <file alias=\"ro\">locale/bitcoin_ro.qm</file>\n-        <file alias=\"ro_RO\">locale/bitcoin_ro_RO.qm</file>\n         <file alias=\"ru\">locale/bitcoin_ru.qm</file>\n-        <file alias=\"ru_RU\">locale/bitcoin_ru_RU.qm</file>\n         <file alias=\"si\">locale/bitcoin_si.qm</file>\n         <file alias=\"sk\">locale/bitcoin_sk.qm</file>\n-        <file alias=\"sk_SK\">locale/bitcoin_sk_SK.qm</file>\n         <file alias=\"sl\">locale/bitcoin_sl.qm</file>\n-        <file alias=\"sl_SI\">locale/bitcoin_sl_SI.qm</file>\n         <file alias=\"sn\">locale/bitcoin_sn.qm</file>\n+        <file alias=\"sq\">locale/bitcoin_sq.qm</file>\n         <file alias=\"sr\">locale/bitcoin_sr.qm</file>\n         <file alias=\"sr@latin\">locale/bitcoin_sr@latin.qm</file>\n         <file alias=\"sv\">locale/bitcoin_sv.qm</file>\n@@ -87,15 +73,14 @@\n         <file alias=\"te\">locale/bitcoin_te.qm</file>\n         <file alias=\"th\">locale/bitcoin_th.qm</file>\n         <file alias=\"tr\">locale/bitcoin_tr.qm</file>\n-        <file alias=\"tr_TR\">locale/bitcoin_tr_TR.qm</file>\n         <file alias=\"uk\">locale/bitcoin_uk.qm</file>\n-        <file alias=\"uk_UA\">locale/bitcoin_uk_UA.qm</file>\n         <file alias=\"ur\">locale/bitcoin_ur.qm</file>\n         <file alias=\"uz@Cyrl\">locale/bitcoin_uz@Cyrl.qm</file>\n+        <file alias=\"uz@Latn\">locale/bitcoin_uz@Latn.qm</file>\n         <file alias=\"vi\">locale/bitcoin_vi.qm</file>\n-        <file alias=\"vi_VN\">locale/bitcoin_vi_VN.qm</file>\n         <file alias=\"yo\">locale/bitcoin_yo.qm</file>\n         <file alias=\"zh-Hans\">locale/bitcoin_zh-Hans.qm</file>\n+        <file alias=\"zh\">locale/bitcoin_zh.qm</file>\n         <file alias=\"zh_CN\">locale/bitcoin_zh_CN.qm</file>\n         <file alias=\"zh_HK\">locale/bitcoin_zh_HK.qm</file>\n         <file alias=\"zh_TW\">locale/bitcoin_zh_TW.qm</file>"
      },
      {
        "sha": "52c06828a3d534f886454b8349741e24732dc48a",
        "filename": "src/qt/bitcoinaddressvalidator.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinaddressvalidator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinaddressvalidator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -17,7 +17,7 @@ class BitcoinAddressEntryValidator : public QValidator\n public:\n     explicit BitcoinAddressEntryValidator(QObject *parent);\n \n-    State validate(QString &input, int &pos) const;\n+    State validate(QString &input, int &pos) const override;\n };\n \n /** Bitcoin address widget validator, checks for a valid bitcoin address.\n@@ -29,7 +29,7 @@ class BitcoinAddressCheckValidator : public QValidator\n public:\n     explicit BitcoinAddressCheckValidator(QObject *parent);\n \n-    State validate(QString &input, int &pos) const;\n+    State validate(QString &input, int &pos) const override;\n };\n \n #endif // BITCOIN_QT_BITCOINADDRESSVALIDATOR_H"
      },
      {
        "sha": "4c57f1e35240105e6c3c60e875900f572e3fe896",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -31,7 +31,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         connect(lineEdit(), &QLineEdit::textEdited, this, &AmountSpinBox::valueChanged);\n     }\n \n-    QValidator::State validate(QString &text, int &pos) const\n+    QValidator::State validate(QString &text, int &pos) const override\n     {\n         if(text.isEmpty())\n             return QValidator::Intermediate;\n@@ -41,7 +41,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         return valid ? QValidator::Intermediate : QValidator::Invalid;\n     }\n \n-    void fixup(QString &input) const\n+    void fixup(QString &input) const override\n     {\n         bool valid;\n         CAmount val;\n@@ -87,7 +87,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         m_max_amount = value;\n     }\n \n-    void stepBy(int steps)\n+    void stepBy(int steps) override\n     {\n         bool valid = false;\n         CAmount val = value(&valid);\n@@ -114,7 +114,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         singleStep = step;\n     }\n \n-    QSize minimumSizeHint() const\n+    QSize minimumSizeHint() const override\n     {\n         if(cachedMinimumSizeHint.isEmpty())\n         {\n@@ -175,7 +175,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     }\n \n protected:\n-    bool event(QEvent *event)\n+    bool event(QEvent *event) override\n     {\n         if (event->type() == QEvent::KeyPress || event->type() == QEvent::KeyRelease)\n         {\n@@ -190,7 +190,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         return QAbstractSpinBox::event(event);\n     }\n \n-    StepEnabled stepEnabled() const\n+    StepEnabled stepEnabled() const override\n     {\n         if (isReadOnly()) // Disable steps when AmountSpinBox is read-only\n             return StepNone;"
      },
      {
        "sha": "d3e61aac29386812d71db1952d17e0b1c2b55b8b",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -70,7 +70,7 @@ class BitcoinAmountField: public QWidget\n \n protected:\n     /** Intercept focus-in event and ',' key presses */\n-    bool eventFilter(QObject *object, QEvent *event);\n+    bool eventFilter(QObject *object, QEvent *event) override;\n \n private:\n     AmountSpinBox *amount;"
      },
      {
        "sha": "6192013e5fe0eaa4221be8103e784119c3b7854d",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 11,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -36,6 +36,8 @@\n #include <interfaces/node.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n+#include <validation.h>\n \n #include <QAction>\n #include <QApplication>\n@@ -211,6 +213,8 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n #ifdef Q_OS_MAC\n     m_app_nap_inhibitor = new CAppNapInhibitor;\n #endif\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n }\n \n BitcoinGUI::~BitcoinGUI()\n@@ -317,6 +321,8 @@ void BitcoinGUI::createActions()\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n     verifyMessageAction = new QAction(tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n+    m_load_psbt_action = new QAction(tr(\"Load PSBT...\"), this);\n+    m_load_psbt_action->setStatusTip(tr(\"Load Partially Signed Bitcoin Transaction\"));\n \n     openRPCConsoleAction = new QAction(tr(\"Node window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open node debugging and diagnostic console\"));\n@@ -348,6 +354,11 @@ void BitcoinGUI::createActions()\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(PACKAGE_NAME));\n \n+    m_mask_values_action = new QAction(tr(\"&Mask values\"), this);\n+    m_mask_values_action->setShortcut(QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_M));\n+    m_mask_values_action->setStatusTip(tr(\"Mask the values in the Overview tab\"));\n+    m_mask_values_action->setCheckable(true);\n+\n     connect(quitAction, &QAction::triggered, qApp, QApplication::quit);\n     connect(aboutAction, &QAction::triggered, this, &BitcoinGUI::aboutClicked);\n     connect(aboutQtAction, &QAction::triggered, qApp, QApplication::aboutQt);\n@@ -366,6 +377,7 @@ void BitcoinGUI::createActions()\n         connect(changePassphraseAction, &QAction::triggered, walletFrame, &WalletFrame::changePassphrase);\n         connect(signMessageAction, &QAction::triggered, [this]{ showNormalIfMinimized(); });\n         connect(signMessageAction, &QAction::triggered, [this]{ gotoSignMessageTab(); });\n+        connect(m_load_psbt_action, &QAction::triggered, [this]{ gotoLoadPSBT(); });\n         connect(verifyMessageAction, &QAction::triggered, [this]{ showNormalIfMinimized(); });\n         connect(verifyMessageAction, &QAction::triggered, [this]{ gotoVerifyMessageTab(); });\n         connect(usedSendingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedSendingAddresses);\n@@ -409,6 +421,8 @@ void BitcoinGUI::createActions()\n             connect(activity, &CreateWalletActivity::finished, activity, &QObject::deleteLater);\n             activity->create();\n         });\n+\n+        connect(m_mask_values_action, &QAction::toggled, this, &BitcoinGUI::setPrivacy);\n     }\n #endif // ENABLE_WALLET\n \n@@ -438,6 +452,7 @@ void BitcoinGUI::createMenuBar()\n         file->addAction(backupWalletAction);\n         file->addAction(signMessageAction);\n         file->addAction(verifyMessageAction);\n+        file->addAction(m_load_psbt_action);\n         file->addSeparator();\n     }\n     file->addAction(quitAction);\n@@ -448,6 +463,8 @@ void BitcoinGUI::createMenuBar()\n         settings->addAction(encryptWalletAction);\n         settings->addAction(changePassphraseAction);\n         settings->addSeparator();\n+        settings->addAction(m_mask_values_action);\n+        settings->addSeparator();\n     }\n     settings->addAction(optionsAction);\n \n@@ -456,7 +473,7 @@ void BitcoinGUI::createMenuBar()\n     QAction* minimize_action = window_menu->addAction(tr(\"Minimize\"));\n     minimize_action->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_M));\n     connect(minimize_action, &QAction::triggered, [] {\n-        qApp->focusWindow()->showMinimized();\n+        QApplication::activeWindow()->showMinimized();\n     });\n     connect(qApp, &QApplication::focusWindowChanged, [minimize_action] (QWindow* window) {\n         minimize_action->setEnabled(window != nullptr && (window->flags() & Qt::Dialog) != Qt::Dialog && window->windowState() != Qt::WindowMinimized);\n@@ -560,7 +577,7 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         connect(_clientModel, &ClientModel::networkActiveChanged, this, &BitcoinGUI::setNetworkActive);\n \n         modalOverlay->setKnownBestHeight(_clientModel->getHeaderTipHeight(), QDateTime::fromTime_t(_clientModel->getHeaderTipTime()));\n-        setNumBlocks(m_node.getNumBlocks(), QDateTime::fromTime_t(m_node.getLastBlockTime()), m_node.getVerificationProgress(), false);\n+        setNumBlocks(m_node.getNumBlocks(), QDateTime::fromTime_t(m_node.getLastBlockTime()), m_node.getVerificationProgress(), false, SynchronizationState::INIT_DOWNLOAD);\n         connect(_clientModel, &ClientModel::numBlocksChanged, this, &BitcoinGUI::setNumBlocks);\n \n         // Receive and report messages from client model\n@@ -854,6 +871,10 @@ void BitcoinGUI::gotoVerifyMessageTab(QString addr)\n {\n     if (walletFrame) walletFrame->gotoVerifyMessageTab(addr);\n }\n+void BitcoinGUI::gotoLoadPSBT()\n+{\n+    if (walletFrame) walletFrame->gotoLoadPSBT();\n+}\n #endif // ENABLE_WALLET\n \n void BitcoinGUI::updateNetworkState()\n@@ -915,11 +936,15 @@ void BitcoinGUI::openOptionsDialogWithTab(OptionsDialog::Tab tab)\n     dlg.exec();\n }\n \n-void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header)\n+void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool header, SynchronizationState sync_state)\n {\n // Disabling macOS App Nap on initial sync, disk and reindex operations.\n #ifdef Q_OS_MAC\n-    (m_node.isInitialBlockDownload() || m_node.getReindex() || m_node.getImporting()) ? m_app_nap_inhibitor->disableAppNap() : m_app_nap_inhibitor->enableAppNap();\n+    if (sync_state == SynchronizationState::POST_INIT) {\n+        m_app_nap_inhibitor->enableAppNap();\n+    } else {\n+        m_app_nap_inhibitor->disableAppNap();\n+    }\n #endif\n \n     if (modalOverlay)\n@@ -1029,7 +1054,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::message(const QString& title, QString message, unsigned int style, bool* ret)\n+void BitcoinGUI::message(const QString& title, QString message, unsigned int style, bool* ret, const QString& detailed_message)\n {\n     // Default title. On macOS, the window title is ignored (as required by the macOS Guidelines).\n     QString strTitle{PACKAGE_NAME};\n@@ -1083,6 +1108,7 @@ void BitcoinGUI::message(const QString& title, QString message, unsigned int sty\n         showNormalIfMinimized();\n         QMessageBox mBox(static_cast<QMessageBox::Icon>(nMBoxIcon), strTitle, message, buttons, this);\n         mBox.setTextFormat(Qt::PlainText);\n+        mBox.setDetailedText(detailed_message);\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;\n@@ -1234,15 +1260,15 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         labelWalletEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>unlocked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n-        encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n+        encryptWalletAction->setEnabled(false);\n         break;\n     case WalletModel::Locked:\n         labelWalletEncryptionIcon->show();\n         labelWalletEncryptionIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n         labelWalletEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>locked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n-        encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n+        encryptWalletAction->setEnabled(false);\n         break;\n     }\n }\n@@ -1258,7 +1284,7 @@ void BitcoinGUI::updateWalletStatus()\n     }\n     WalletModel * const walletModel = walletView->getWalletModel();\n     setEncryptionStatus(walletModel->getEncryptionStatus());\n-    setHDStatus(walletModel->privateKeysDisabled(), walletModel->wallet().hdEnabled());\n+    setHDStatus(walletModel->wallet().privateKeysDisabled(), walletModel->wallet().hdEnabled());\n }\n #endif // ENABLE_WALLET\n \n@@ -1358,20 +1384,27 @@ void BitcoinGUI::showModalOverlay()\n         modalOverlay->toggleVisibility();\n }\n \n-static bool ThreadSafeMessageBox(BitcoinGUI* gui, const std::string& message, const std::string& caption, unsigned int style)\n+static bool ThreadSafeMessageBox(BitcoinGUI* gui, const bilingual_str& message, const std::string& caption, unsigned int style)\n {\n     bool modal = (style & CClientUIInterface::MODAL);\n     // The SECURE flag has no effect in the Qt GUI.\n     // bool secure = (style & CClientUIInterface::SECURE);\n     style &= ~CClientUIInterface::SECURE;\n     bool ret = false;\n+\n+    QString detailed_message; // This is original message, in English, for googling and referencing.\n+    if (message.original != message.translated) {\n+        detailed_message = BitcoinGUI::tr(\"Original message:\") + \"\\n\" + QString::fromStdString(message.original);\n+    }\n+\n     // In case of modal message, use blocking connection to wait for user to click a button\n     bool invoked = QMetaObject::invokeMethod(gui, \"message\",\n                                modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                Q_ARG(QString, QString::fromStdString(caption)),\n-                               Q_ARG(QString, QString::fromStdString(message)),\n+                               Q_ARG(QString, QString::fromStdString(message.translated)),\n                                Q_ARG(unsigned int, style),\n-                               Q_ARG(bool*, &ret));\n+                               Q_ARG(bool*, &ret),\n+                               Q_ARG(QString, detailed_message));\n     assert(invoked);\n     return ret;\n }\n@@ -1390,6 +1423,12 @@ void BitcoinGUI::unsubscribeFromCoreSignals()\n     m_handler_question->disconnect();\n }\n \n+bool BitcoinGUI::isPrivacyModeActivated() const\n+{\n+    assert(m_mask_values_action);\n+    return m_mask_values_action->isChecked();\n+}\n+\n UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :\n     optionsModel(nullptr),\n     menu(nullptr)"
      },
      {
        "sha": "c0198dd1688d971aa209de3a197087eb83460089",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 24,
        "deletions": 15,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -38,6 +38,7 @@ class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n class ModalOverlay;\n+enum class SynchronizationState;\n \n namespace interfaces {\n class Handler;\n@@ -98,13 +99,15 @@ class BitcoinGUI : public QMainWindow\n     /** Disconnect core signals from GUI client */\n     void unsubscribeFromCoreSignals();\n \n+    bool isPrivacyModeActivated() const;\n+\n protected:\n-    void changeEvent(QEvent *e);\n-    void closeEvent(QCloseEvent *event);\n-    void showEvent(QShowEvent *event);\n-    void dragEnterEvent(QDragEnterEvent *event);\n-    void dropEvent(QDropEvent *event);\n-    bool eventFilter(QObject *object, QEvent *event);\n+    void changeEvent(QEvent *e) override;\n+    void closeEvent(QCloseEvent *event) override;\n+    void showEvent(QShowEvent *event) override;\n+    void dragEnterEvent(QDragEnterEvent *event) override;\n+    void dropEvent(QDropEvent *event) override;\n+    bool eventFilter(QObject *object, QEvent *event) override;\n \n private:\n     interfaces::Node& m_node;\n@@ -135,6 +138,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* usedReceivingAddressesAction = nullptr;\n     QAction* signMessageAction = nullptr;\n     QAction* verifyMessageAction = nullptr;\n+    QAction* m_load_psbt_action = nullptr;\n     QAction* aboutAction = nullptr;\n     QAction* receiveCoinsAction = nullptr;\n     QAction* receiveCoinsMenuAction = nullptr;\n@@ -153,6 +157,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* m_close_wallet_action{nullptr};\n     QAction* m_wallet_selector_label_action = nullptr;\n     QAction* m_wallet_selector_action = nullptr;\n+    QAction* m_mask_values_action{nullptr};\n \n     QLabel *m_wallet_selector_label = nullptr;\n     QComboBox* m_wallet_selector = nullptr;\n@@ -205,23 +210,25 @@ class BitcoinGUI : public QMainWindow\n     void receivedURI(const QString &uri);\n     /** Signal raised when RPC console shown */\n     void consoleShown(RPCConsole* console);\n+    void setPrivacy(bool privacy);\n \n public Q_SLOTS:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set network state shown in the UI */\n     void setNetworkActive(bool networkActive);\n     /** Set number of blocks and last block date shown in the UI */\n-    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers);\n+    void setNumBlocks(int count, const QDateTime& blockDate, double nVerificationProgress, bool headers, SynchronizationState sync_state);\n \n     /** Notify the user of an event from the core network or transaction handling code.\n-       @param[in] title     the message box / notification title\n-       @param[in] message   the displayed text\n-       @param[in] style     modality and style definitions (icon and used buttons - buttons only for message boxes)\n-                            @see CClientUIInterface::MessageBoxFlags\n-       @param[in] ret       pointer to a bool that will be modified to whether Ok was clicked (modal only)\n+       @param[in] title             the message box / notification title\n+       @param[in] message           the displayed text\n+       @param[in] style             modality and style definitions (icon and used buttons - buttons only for message boxes)\n+                                    @see CClientUIInterface::MessageBoxFlags\n+       @param[in] ret               pointer to a bool that will be modified to whether Ok was clicked (modal only)\n+       @param[in] detailed_message  the text to be displayed in the details area\n     */\n-    void message(const QString& title, QString message, unsigned int style, bool* ret = nullptr);\n+    void message(const QString& title, QString message, unsigned int style, bool* ret = nullptr, const QString& detailed_message = QString());\n \n #ifdef ENABLE_WALLET\n     void setCurrentWallet(WalletModel* wallet_model);\n@@ -270,6 +277,8 @@ public Q_SLOTS:\n     void gotoSignMessageTab(QString addr = \"\");\n     /** Show Sign/Verify Message dialog and switch to verify message tab */\n     void gotoVerifyMessageTab(QString addr = \"\");\n+    /** Show load Partially Signed Bitcoin Transaction dialog */\n+    void gotoLoadPSBT();\n \n     /** Show open dialog */\n     void openClicked();\n@@ -321,7 +330,7 @@ class UnitDisplayStatusBarControl : public QLabel\n \n protected:\n     /** So that it responds to left-button clicks */\n-    void mousePressEvent(QMouseEvent *event);\n+    void mousePressEvent(QMouseEvent *event) override;\n \n private:\n     OptionsModel *optionsModel;"
      },
      {
        "sha": "64900a434363b0ec1899c07c1d28a8ff4c22bb3a",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -51,9 +51,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Prune: last wallet synchronisation goes beyond pruned data. You need to -\"\n \"reindex (download the whole blockchain again in case of pruned node)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Rescans are not possible in pruned mode. You will need to use -reindex which \"\n-\"will download the whole blockchain again.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"The block database contains a block which appears to be from the future. \"\n \"This may be due to your computer's date and time being set incorrectly. Only \"\n \"rebuild the block database if you are sure that your computer's date and \"\n@@ -69,10 +66,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"This is the transaction fee you may pay when fee estimates are not available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"This product includes software developed by the OpenSSL Project for use in \"\n-\"the OpenSSL Toolkit %s and cryptographic software written by Eric Young and \"\n-\"UPnP software written by Thomas Bernard.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Total length of network version string (%i) exceeds maximum length (%i). \"\n \"Reduce the number or size of uacomments.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n@@ -107,6 +100,8 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Change index out of range\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Config setting for %s only applied on %s network when in [%s] section.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Copyright (C) %i-%i\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Corrupted block database detected\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Could not find asmap file %s\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Could not parse asmap file %s\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Do you want to rebuild the block database now?\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Done loading\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error initializing block database\"),"
      },
      {
        "sha": "318a6dcbfdb1976dac9e0db48bb8b66ae7c88f08",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -6,6 +6,8 @@\n \n #include <QStringList>\n \n+#include <cassert>\n+\n BitcoinUnits::BitcoinUnits(QObject *parent):\n         QAbstractListModel(parent),\n         unitlist(availableUnits())\n@@ -94,7 +96,7 @@ int BitcoinUnits::decimals(int unit)\n     }\n }\n \n-QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators)\n+QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators, bool justify)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -106,6 +108,7 @@ QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, Separator\n     qint64 n_abs = (n > 0 ? n : -n);\n     qint64 quotient = n_abs / coin;\n     QString quotient_str = QString::number(quotient);\n+    if (justify) quotient_str = quotient_str.rightJustified(16 - num_decimals, ' ');\n \n     // Use SI-style thin space separators as these are locale independent and can't be\n     // confused with the decimal marker.\n@@ -150,6 +153,17 @@ QString BitcoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool p\n     return QString(\"<span style='white-space: nowrap;'>%1</span>\").arg(str);\n }\n \n+QString BitcoinUnits::formatWithPrivacy(int unit, const CAmount& amount, SeparatorStyle separators, bool privacy)\n+{\n+    assert(amount >= 0);\n+    QString value;\n+    if (privacy) {\n+        value = format(unit, 0, false, separators, true).replace('0', '#');\n+    } else {\n+        value = format(unit, amount, false, separators, true);\n+    }\n+    return value + QString(\" \") + shortName(unit);\n+}\n \n bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)\n {"
      },
      {
        "sha": "dac5484393043001d6f43d06be1f07342a7457b9",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -72,11 +72,13 @@ class BitcoinUnits: public QAbstractListModel\n     //! Number of decimals left\n     static int decimals(int unit);\n     //! Format as string\n-    static QString format(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString format(int unit, const CAmount& amount, bool plussign = false, SeparatorStyle separators = separatorStandard, bool justify = false);\n     //! Format as string (with unit)\n     static QString formatWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Format as HTML string (with unit)\n     static QString formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    //! Format as string (with unit) of fixed length to preserve privacy, if it is set.\n+    static QString formatWithPrivacy(int unit, const CAmount& amount, SeparatorStyle separators, bool privacy);\n     //! Parse string to coin amount\n     static bool parse(int unit, const QString &value, CAmount *val_out);\n     //! Gets title for amount column including current display unit if optionsModel reference available */\n@@ -90,8 +92,8 @@ class BitcoinUnits: public QAbstractListModel\n         /** Unit identifier */\n         UnitRole = Qt::UserRole\n     };\n-    int rowCount(const QModelIndex &parent) const;\n-    QVariant data(const QModelIndex &index, int role) const;\n+    int rowCount(const QModelIndex &parent) const override;\n+    QVariant data(const QModelIndex &index, int role) const override;\n     ///@}\n \n     static QString removeSpaces(QString text)"
      },
      {
        "sha": "f15921c5bcb938ee955d9d68d4c6b1fb01545765",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 25,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,6 +15,7 @@\n #include <net.h>\n #include <netbase.h>\n #include <util/system.h>\n+#include <validation.h>\n \n #include <stdint.h>\n \n@@ -105,6 +106,23 @@ int64_t ClientModel::getHeaderTipTime() const\n     return cachedBestHeaderTime;\n }\n \n+int ClientModel::getNumBlocks() const\n+{\n+    if (m_cached_num_blocks == -1) {\n+        m_cached_num_blocks = m_node.getNumBlocks();\n+    }\n+    return m_cached_num_blocks;\n+}\n+\n+uint256 ClientModel::getBestBlockHash()\n+{\n+    LOCK(m_cached_tip_mutex);\n+    if (m_cached_tip_blocks.IsNull()) {\n+        m_cached_tip_blocks = m_node.getBestBlockHash();\n+    }\n+    return m_cached_tip_blocks;\n+}\n+\n void ClientModel::updateNumConnections(int numConnections)\n {\n     Q_EMIT numConnectionsChanged(numConnections);\n@@ -226,34 +244,33 @@ static void BannedListChanged(ClientModel *clientmodel)\n     assert(invoked);\n }\n \n-static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int height, int64_t blockTime, double verificationProgress, bool fHeader)\n+static void BlockTipChanged(ClientModel* clientmodel, SynchronizationState sync_state, interfaces::BlockTip tip, double verificationProgress, bool fHeader)\n {\n-    // lock free async UI updates in case we have a new block tip\n-    // during initial sync, only update the UI if the last update\n-    // was > 250ms (MODEL_UPDATE_DELAY) ago\n-    int64_t now = 0;\n-    if (initialSync)\n-        now = GetTimeMillis();\n-\n-    int64_t& nLastUpdateNotification = fHeader ? nLastHeaderTipUpdateNotification : nLastBlockTipUpdateNotification;\n-\n     if (fHeader) {\n         // cache best headers time and height to reduce future cs_main locks\n-        clientmodel->cachedBestHeaderHeight = height;\n-        clientmodel->cachedBestHeaderTime = blockTime;\n+        clientmodel->cachedBestHeaderHeight = tip.block_height;\n+        clientmodel->cachedBestHeaderTime = tip.block_time;\n+    } else {\n+        clientmodel->m_cached_num_blocks = tip.block_height;\n+        WITH_LOCK(clientmodel->m_cached_tip_mutex, clientmodel->m_cached_tip_blocks = tip.block_hash;);\n     }\n \n-    // During initial sync, block notifications, and header notifications from reindexing are both throttled.\n-    if (!initialSync || (fHeader && !clientmodel->node().getReindex()) || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n-        //pass an async signal to the UI thread\n-        bool invoked = QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n-                                  Q_ARG(int, height),\n-                                  Q_ARG(QDateTime, QDateTime::fromTime_t(blockTime)),\n-                                  Q_ARG(double, verificationProgress),\n-                                  Q_ARG(bool, fHeader));\n-        assert(invoked);\n-        nLastUpdateNotification = now;\n+    // Throttle GUI notifications about (a) blocks during initial sync, and (b) both blocks and headers during reindex.\n+    const bool throttle = (sync_state != SynchronizationState::POST_INIT && !fHeader) || sync_state == SynchronizationState::INIT_REINDEX;\n+    const int64_t now = throttle ? GetTimeMillis() : 0;\n+    int64_t& nLastUpdateNotification = fHeader ? nLastHeaderTipUpdateNotification : nLastBlockTipUpdateNotification;\n+    if (throttle && now < nLastUpdateNotification + MODEL_UPDATE_DELAY) {\n+        return;\n     }\n+\n+    bool invoked = QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n+        Q_ARG(int, tip.block_height),\n+        Q_ARG(QDateTime, QDateTime::fromTime_t(tip.block_time)),\n+        Q_ARG(double, verificationProgress),\n+        Q_ARG(bool, fHeader),\n+        Q_ARG(SynchronizationState, sync_state));\n+    assert(invoked);\n+    nLastUpdateNotification = now;\n }\n \n void ClientModel::subscribeToCoreSignals()\n@@ -264,8 +281,8 @@ void ClientModel::subscribeToCoreSignals()\n     m_handler_notify_network_active_changed = m_node.handleNotifyNetworkActiveChanged(std::bind(NotifyNetworkActiveChanged, this, std::placeholders::_1));\n     m_handler_notify_alert_changed = m_node.handleNotifyAlertChanged(std::bind(NotifyAlertChanged, this));\n     m_handler_banned_list_changed = m_node.handleBannedListChanged(std::bind(BannedListChanged, this));\n-    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, false));\n-    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, true));\n+    m_handler_notify_block_tip = m_node.handleNotifyBlockTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, false));\n+    m_handler_notify_header_tip = m_node.handleNotifyHeaderTip(std::bind(BlockTipChanged, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, true));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()"
      },
      {
        "sha": "7f12cce1d91a6dffb6d1864aa356ac24f0904594",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -10,12 +10,14 @@\n \n #include <atomic>\n #include <memory>\n+#include <sync.h>\n+#include <uint256.h>\n \n class BanTableModel;\n+class CBlockIndex;\n class OptionsModel;\n class PeerTableModel;\n-\n-class CBlockIndex;\n+enum class SynchronizationState;\n \n namespace interfaces {\n class Handler;\n@@ -56,6 +58,8 @@ class ClientModel : public QObject\n \n     //! Return number of connections, default is in- and outbound (total)\n     int getNumConnections(unsigned int flags = CONNECTIONS_ALL) const;\n+    int getNumBlocks() const;\n+    uint256 getBestBlockHash();\n     int getHeaderTipHeight() const;\n     int64_t getHeaderTipTime() const;\n \n@@ -73,9 +77,13 @@ class ClientModel : public QObject\n \n     bool getProxyInfo(std::string& ip_port) const;\n \n-    // caches for the best header\n+    // caches for the best header: hash, number of blocks and block time\n     mutable std::atomic<int> cachedBestHeaderHeight;\n     mutable std::atomic<int64_t> cachedBestHeaderTime;\n+    mutable std::atomic<int> m_cached_num_blocks{-1};\n+\n+    Mutex m_cached_tip_mutex;\n+    uint256 m_cached_tip_blocks GUARDED_BY(m_cached_tip_mutex){};\n \n private:\n     interfaces::Node& m_node;\n@@ -98,7 +106,7 @@ class ClientModel : public QObject\n \n Q_SIGNALS:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress, bool header);\n+    void numBlocksChanged(int count, const QDateTime& blockDate, double nVerificationProgress, bool header, SynchronizationState sync_state);\n     void mempoolSizeChanged(long count, size_t mempoolSizeInBytes);\n     void networkActiveChanged(bool networkActive);\n     void alertsChanged(const QString &warnings);"
      },
      {
        "sha": "db77c17df0b3c2b69dd601146b884fc1d52b45d7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 42,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -41,10 +41,11 @@ bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {\n     return QTreeWidgetItem::operator<(other);\n }\n \n-CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidget *parent) :\n+CoinControlDialog::CoinControlDialog(CCoinControl& coin_control, WalletModel* _model, const PlatformStyle *_platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::CoinControlDialog),\n-    model(nullptr),\n+    m_coin_control(coin_control),\n+    model(_model),\n     platformStyle(_platformStyle)\n {\n     ui->setupUi(this);\n@@ -134,6 +135,15 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n         ui->radioTreeMode->click();\n     if (settings.contains(\"nCoinControlSortColumn\") && settings.contains(\"nCoinControlSortOrder\"))\n         sortView(settings.value(\"nCoinControlSortColumn\").toInt(), (static_cast<Qt::SortOrder>(settings.value(\"nCoinControlSortOrder\").toInt())));\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n+\n+    if(_model->getOptionsModel() && _model->getAddressTableModel())\n+    {\n+        updateView();\n+        updateLabelLocked();\n+        CoinControlDialog::updateLabels(m_coin_control, _model, this);\n+    }\n }\n \n CoinControlDialog::~CoinControlDialog()\n@@ -146,18 +156,6 @@ CoinControlDialog::~CoinControlDialog()\n     delete ui;\n }\n \n-void CoinControlDialog::setModel(WalletModel *_model)\n-{\n-    this->model = _model;\n-\n-    if(_model && _model->getOptionsModel() && _model->getAddressTableModel())\n-    {\n-        updateView();\n-        updateLabelLocked();\n-        CoinControlDialog::updateLabels(_model, this);\n-    }\n-}\n-\n // ok button\n void CoinControlDialog::buttonBoxClicked(QAbstractButton* button)\n {\n@@ -183,8 +181,8 @@ void CoinControlDialog::buttonSelectAllClicked()\n                 ui->treeWidget->topLevelItem(i)->setCheckState(COLUMN_CHECKBOX, state);\n     ui->treeWidget->setEnabled(true);\n     if (state == Qt::Unchecked)\n-        coinControl()->UnSelectAll(); // just to be sure\n-    CoinControlDialog::updateLabels(model, this);\n+        m_coin_control.UnSelectAll(); // just to be sure\n+    CoinControlDialog::updateLabels(m_coin_control, model, this);\n }\n \n // context menu\n@@ -369,23 +367,15 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n         COutPoint outpt(uint256S(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), item->data(COLUMN_ADDRESS, VOutRole).toUInt());\n \n         if (item->checkState(COLUMN_CHECKBOX) == Qt::Unchecked)\n-            coinControl()->UnSelect(outpt);\n+            m_coin_control.UnSelect(outpt);\n         else if (item->isDisabled()) // locked (this happens if \"check all\" through parent node)\n             item->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         else\n-            coinControl()->Select(outpt);\n+            m_coin_control.Select(outpt);\n \n         // selection changed -> update labels\n         if (ui->treeWidget->isEnabled()) // do not update on every click for (un)select all\n-            CoinControlDialog::updateLabels(model, this);\n-    }\n-\n-    // TODO: Remove this temporary qt5 fix after Qt5.3 and Qt5.4 are no longer used.\n-    //       Fixed in Qt5.5 and above: https://bugreports.qt.io/browse/QTBUG-43473\n-    else if (column == COLUMN_CHECKBOX && item->childCount() > 0)\n-    {\n-        if (item->checkState(COLUMN_CHECKBOX) == Qt::PartiallyChecked && item->child(0)->checkState(COLUMN_CHECKBOX) == Qt::PartiallyChecked)\n-            item->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n+            CoinControlDialog::updateLabels(m_coin_control, model, this);\n     }\n }\n \n@@ -402,7 +392,7 @@ void CoinControlDialog::updateLabelLocked()\n     else ui->labelLocked->setVisible(false);\n }\n \n-void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n+void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *model, QDialog* dialog)\n {\n     if (!model)\n         return;\n@@ -434,7 +424,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n-    coinControl()->ListSelected(vCoinControl);\n+    m_coin_control.ListSelected(vCoinControl);\n \n     size_t i = 0;\n     for (const auto& out : model->wallet().getCoins(vCoinControl)) {\n@@ -445,7 +435,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         const COutPoint& outpt = vCoinControl[i++];\n         if (out.is_spent)\n         {\n-            coinControl()->UnSelect(outpt);\n+            m_coin_control.UnSelect(outpt);\n             continue;\n         }\n \n@@ -498,7 +488,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = model->wallet().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);\n+        nPayFee = model->wallet().getMinimumFee(nBytes, m_coin_control, nullptr /* returned_target */, nullptr /* reason */);\n \n         if (nPayAmount > 0)\n         {\n@@ -590,12 +580,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         label->setVisible(nChange < 0);\n }\n \n-CCoinControl* CoinControlDialog::coinControl()\n-{\n-    static CCoinControl coin_control;\n-    return &coin_control;\n-}\n-\n void CoinControlDialog::updateView()\n {\n     if (!model || !model->getOptionsModel() || !model->getAddressTableModel())\n@@ -612,8 +596,7 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n     for (const auto& coins : model->wallet().listCoins()) {\n-        CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n-        itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n+        CCoinControlWidgetItem* itemWalletAddress{nullptr};\n         QString sWalletAddress = QString::fromStdString(EncodeDestination(coins.first));\n         QString sWalletLabel = model->getAddressTableModel()->labelForAddress(sWalletAddress);\n         if (sWalletLabel.isEmpty())\n@@ -622,7 +605,7 @@ void CoinControlDialog::updateView()\n         if (treeMode)\n         {\n             // wallet address\n-            ui->treeWidget->addTopLevelItem(itemWalletAddress);\n+            itemWalletAddress = new CCoinControlWidgetItem(ui->treeWidget);\n \n             itemWalletAddress->setFlags(flgTristate);\n             itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n@@ -696,13 +679,13 @@ void CoinControlDialog::updateView()\n              // disable locked coins\n             if (model->wallet().isLockedCoin(output))\n             {\n-                coinControl()->UnSelect(output); // just to be sure\n+                m_coin_control.UnSelect(output); // just to be sure\n                 itemOutput->setDisabled(true);\n                 itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox\n-            if (coinControl()->IsSelected(output))\n+            if (m_coin_control.IsSelected(output))\n                 itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n         }\n "
      },
      {
        "sha": "3de7fd6d549f6711db5d9ddc9f2a71e3d659cdbe",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -31,10 +31,9 @@ class CCoinControlWidgetItem : public QTreeWidgetItem\n {\n public:\n     explicit CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n-    explicit CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}\n     explicit CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n \n-    bool operator<(const QTreeWidgetItem &other) const;\n+    bool operator<(const QTreeWidgetItem &other) const override;\n };\n \n \n@@ -43,20 +42,18 @@ class CoinControlDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n+    explicit CoinControlDialog(CCoinControl& coin_control, WalletModel* model, const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n     ~CoinControlDialog();\n \n-    void setModel(WalletModel *model);\n-\n     // static because also called from sendcoinsdialog\n-    static void updateLabels(WalletModel*, QDialog*);\n+    static void updateLabels(CCoinControl& m_coin_control, WalletModel*, QDialog*);\n \n     static QList<CAmount> payAmounts;\n-    static CCoinControl *coinControl();\n     static bool fSubtractFeeFromAmount;\n \n private:\n     Ui::CoinControlDialog *ui;\n+    CCoinControl& m_coin_control;\n     WalletModel *model;\n     int sortColumn;\n     Qt::SortOrder sortOrder;"
      },
      {
        "sha": "ac03a409c120987d31ee83cf612cbc0a2a2f8b23",
        "filename": "src/qt/coincontroltreewidget.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/coincontroltreewidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/coincontroltreewidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,7 +16,7 @@ class CoinControlTreeWidget : public QTreeWidget\n     explicit CoinControlTreeWidget(QWidget *parent = nullptr);\n \n protected:\n-    virtual void keyPressEvent(QKeyEvent *event);\n+    virtual void keyPressEvent(QKeyEvent *event) override;\n };\n \n #endif // BITCOIN_QT_COINCONTROLTREEWIDGET_H"
      },
      {
        "sha": "5056e487fcce66baeb8832604a76e9b4e4fda7cf",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -60,3 +60,8 @@ bool CreateWalletDialog::isMakeBlankWalletChecked() const\n {\n     return ui->blank_wallet_checkbox->isChecked();\n }\n+\n+bool CreateWalletDialog::isDescriptorWalletChecked() const\n+{\n+    return ui->descriptor_checkbox->isChecked();\n+}"
      },
      {
        "sha": "20cce937c834e01a5698208c604c58173c727bb3",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -27,6 +27,7 @@ class CreateWalletDialog : public QDialog\n     bool isEncryptWalletChecked() const;\n     bool isDisablePrivateKeysChecked() const;\n     bool isMakeBlankWalletChecked() const;\n+    bool isDescriptorWalletChecked() const;\n \n private:\n     Ui::CreateWalletDialog *ui;"
      },
      {
        "sha": "ad247b6859b8d8cfcc7cd3fb8c2a9c2ab7277708",
        "filename": "src/qt/csvmodelwriter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/csvmodelwriter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/csvmodelwriter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e0af9a20a8c5827d186edf80b0a9f51df72122e5",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -43,6 +43,8 @@ EditAddressDialog::EditAddressDialog(Mode _mode, QWidget *parent) :\n     GUIUtil::ItemDelegate* delegate = new GUIUtil::ItemDelegate(mapper);\n     connect(delegate, &GUIUtil::ItemDelegate::keyEscapePressed, this, &EditAddressDialog::reject);\n     mapper->setItemDelegate(delegate);\n+\n+    GUIUtil::handleCloseWindowShortcut(this);\n }\n \n EditAddressDialog::~EditAddressDialog()"
      },
      {
        "sha": "3be63156fd06fc7b082b75f224dc322022c0e7b0",
        "filename": "src/qt/editaddressdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/editaddressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/editaddressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -40,7 +40,7 @@ class EditAddressDialog : public QDialog\n     void setAddress(const QString &address);\n \n public Q_SLOTS:\n-    void accept();\n+    void accept() override;\n \n private:\n     bool saveCurrentRow();"
      },
      {
        "sha": "b592140dd7bf2cb5d2457bd033c2513d1e52c67e",
        "filename": "src/qt/forms/createwalletdialog.ui",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/createwalletdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/createwalletdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/createwalletdialog.ui?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>364</width>\n-    <height>185</height>\n+    <height>213</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -17,7 +17,7 @@\n    <property name=\"geometry\">\n     <rect>\n      <x>10</x>\n-     <y>140</y>\n+     <y>170</y>\n      <width>341</width>\n      <height>32</height>\n     </rect>\n@@ -106,6 +106,22 @@\n     <string>Make Blank Wallet</string>\n    </property>\n   </widget>\n+  <widget class=\"QCheckBox\" name=\"descriptor_checkbox\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>140</y>\n+     <width>171</width>\n+     <height>22</height>\n+    </rect>\n+   </property>\n+   <property name=\"toolTip\">\n+    <string>Use descriptors for scriptPubKey management</string>\n+   </property>\n+   <property name=\"text\">\n+    <string>Descriptor Wallet</string>\n+   </property>\n+  </widget>\n  </widget>\n  <tabstops>\n   <tabstop>wallet_name_line_edit</tabstop>"
      },
      {
        "sha": "8b70800838d98533eafd54b026a12d20972bcb07",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 43,
        "deletions": 17,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -216,17 +216,17 @@\n         </widget>\n        </item>\n        <item row=\"7\" column=\"0\">\n-           <widget class=\"QLabel\" name=\"labelNetwork\">\n-               <property name=\"font\">\n-                   <font>\n-                       <weight>75</weight>\n-                       <bold>true</bold>\n-                   </font>\n-               </property>\n-               <property name=\"text\">\n-                   <string>Network</string>\n-               </property>\n-           </widget>\n+        <widget class=\"QLabel\" name=\"labelNetwork\">\n+         <property name=\"font\">\n+          <font>\n+           <weight>75</weight>\n+           <bold>true</bold>\n+          </font>\n+         </property>\n+         <property name=\"text\">\n+          <string>Network</string>\n+         </property>\n+        </widget>\n        </item>\n        <item row=\"8\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_8\">\n@@ -503,12 +503,12 @@\n              <height>24</height>\n             </size>\n            </property>\n-           <property name=\"text\">\n-            <string/>\n-           </property>\n            <property name=\"toolTip\">\n             <string>Decrease font size</string>\n            </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n            <property name=\"icon\">\n             <iconset resource=\"../bitcoin.qrc\">\n              <normaloff>:/icons/fontsmaller</normaloff>:/icons/fontsmaller</iconset>\n@@ -652,12 +652,12 @@\n          </item>\n          <item>\n           <widget class=\"QLineEdit\" name=\"lineEdit\">\n-           <property name=\"placeholderText\">\n-            <string/>\n-           </property>\n            <property name=\"enabled\">\n             <bool>false</bool>\n            </property>\n+           <property name=\"placeholderText\">\n+            <string/>\n+           </property>\n           </widget>\n          </item>\n         </layout>\n@@ -1503,6 +1503,32 @@\n                 </widget>\n                </item>\n                <item row=\"18\" column=\"0\">\n+                <widget class=\"QLabel\" name=\"peerMappedASLabel\">\n+                 <property name=\"toolTip\">\n+                  <string>The mapped Autonomous System used for diversifying peer selection.</string>\n+                 </property>\n+                 <property name=\"text\">\n+                  <string>Mapped AS</string>\n+                 </property>\n+                </widget>\n+               </item>\n+               <item row=\"18\" column=\"1\">\n+                <widget class=\"QLabel\" name=\"peerMappedAS\">\n+                 <property name=\"cursor\">\n+                  <cursorShape>IBeamCursor</cursorShape>\n+                 </property>\n+                 <property name=\"text\">\n+                  <string>N/A</string>\n+                 </property>\n+                 <property name=\"textFormat\">\n+                  <enum>Qt::PlainText</enum>\n+                 </property>\n+                 <property name=\"textInteractionFlags\">\n+                  <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+                 </property>\n+                </widget>\n+               </item>\n+               <item row=\"19\" column=\"0\">\n                 <spacer name=\"verticalSpacer_3\">\n                  <property name=\"orientation\">\n                   <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "4d3f90c484800218db4e61eb6cf8201666e3bd36",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -6,8 +6,8 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>596</width>\n-    <height>342</height>\n+    <width>798</width>\n+    <height>318</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -118,6 +118,7 @@\n              <widget class=\"QLabel\" name=\"labelWatchPending\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -129,7 +130,7 @@\n                <string>Unconfirmed transactions to watch-only addresses</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -143,6 +144,7 @@\n              <widget class=\"QLabel\" name=\"labelUnconfirmed\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -154,7 +156,7 @@\n                <string>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -168,6 +170,7 @@\n              <widget class=\"QLabel\" name=\"labelWatchImmature\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -179,7 +182,7 @@\n                <string>Mined balance in watch-only addresses that has not yet matured</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -226,6 +229,7 @@\n              <widget class=\"QLabel\" name=\"labelImmature\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -237,7 +241,7 @@\n                <string>Mined balance that has not yet matured</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -271,6 +275,7 @@\n              <widget class=\"QLabel\" name=\"labelTotal\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -282,7 +287,7 @@\n                <string>Your current total balance</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">21 000 000.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -296,6 +301,7 @@\n              <widget class=\"QLabel\" name=\"labelWatchTotal\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -307,7 +313,7 @@\n                <string>Current total balance in watch-only addresses</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">21 000 000.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -338,6 +344,7 @@\n              <widget class=\"QLabel\" name=\"labelBalance\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -349,7 +356,7 @@\n                <string>Your current spendable balance</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">21 000 000.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -363,6 +370,7 @@\n              <widget class=\"QLabel\" name=\"labelWatchAvailable\">\n               <property name=\"font\">\n                <font>\n+                <family>Monospace</family>\n                 <weight>75</weight>\n                 <bold>true</bold>\n                </font>\n@@ -374,7 +382,7 @@\n                <string>Your current balance in watch-only addresses</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">21 000 000.00000000 BTC</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>"
      },
      {
        "sha": "f6d47234655e5c4890ebf4fcf3a446a8bdaf5e49",
        "filename": "src/qt/forms/receiverequestdialog.ui",
        "status": "modified",
        "additions": 223,
        "deletions": 65,
        "changes": 288,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/receiverequestdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/forms/receiverequestdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receiverequestdialog.ui?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -6,68 +6,233 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>487</width>\n-    <height>597</height>\n+    <width>413</width>\n+    <height>229</height>\n    </rect>\n   </property>\n-  <layout class=\"QVBoxLayout\" name=\"verticalLayout_3\">\n-   <item>\n-    <widget class=\"QRImageWidget\" name=\"lblQRCode\">\n-     <property name=\"sizePolicy\">\n-      <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Fixed\">\n-       <horstretch>0</horstretch>\n-       <verstretch>0</verstretch>\n-      </sizepolicy>\n-     </property>\n-     <property name=\"minimumSize\">\n-      <size>\n-       <width>300</width>\n-       <height>320</height>\n-      </size>\n-     </property>\n-     <property name=\"toolTip\">\n-      <string>QR Code</string>\n+  <property name=\"windowTitle\">\n+   <string>Request payment to ...</string>\n+  </property>\n+  <layout class=\"QGridLayout\" name=\"gridLayout\" columnstretch=\"0,1\">\n+   <property name=\"sizeConstraint\">\n+    <enum>QLayout::SetFixedSize</enum>\n+   </property>\n+   <item row=\"0\" column=\"0\" colspan=\"2\" alignment=\"Qt::AlignHCenter\">\n+    <widget class=\"QRImageWidget\" name=\"qr_code\">\n+     <property name=\"text\">\n+      <string notr=\"true\">QR image</string>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"1\" column=\"0\" colspan=\"2\">\n+    <widget class=\"QLabel\" name=\"payment_header\">\n+     <property name=\"font\">\n+      <font>\n+       <weight>75</weight>\n+       <bold>true</bold>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Payment information</string>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"2\" column=\"0\" alignment=\"Qt::AlignRight|Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"uri_tag\">\n+     <property name=\"font\">\n+      <font>\n+       <weight>75</weight>\n+       <bold>true</bold>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string notr=\"true\">URI:</string>\n      </property>\n      <property name=\"textFormat\">\n       <enum>Qt::PlainText</enum>\n      </property>\n-     <property name=\"alignment\">\n-      <set>Qt::AlignCenter</set>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"2\" column=\"1\" alignment=\"Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"uri_content\">\n+     <property name=\"text\">\n+      <string notr=\"true\">bitcoin:BC1...</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::RichText</enum>\n      </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>\n      </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"3\" column=\"0\" alignment=\"Qt::AlignRight|Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"address_tag\">\n+     <property name=\"font\">\n+      <font>\n+       <weight>75</weight>\n+       <bold>true</bold>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Address:</string>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n     </widget>\n    </item>\n-   <item>\n-    <widget class=\"QTextEdit\" name=\"outUri\">\n-     <property name=\"sizePolicy\">\n-      <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Expanding\">\n-       <horstretch>0</horstretch>\n-       <verstretch>0</verstretch>\n-      </sizepolicy>\n-     </property>\n-     <property name=\"minimumSize\">\n-      <size>\n-       <width>0</width>\n-       <height>50</height>\n-      </size>\n-     </property>\n-     <property name=\"frameShape\">\n-      <enum>QFrame::NoFrame</enum>\n-     </property>\n-     <property name=\"frameShadow\">\n-      <enum>QFrame::Plain</enum>\n-     </property>\n-     <property name=\"tabChangesFocus\">\n+   <item row=\"3\" column=\"1\" alignment=\"Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"address_content\">\n+     <property name=\"text\">\n+      <string notr=\"true\">bc1...</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::PlainText</enum>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"4\" column=\"0\" alignment=\"Qt::AlignRight|Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"amount_tag\">\n+     <property name=\"font\">\n+      <font>\n+       <weight>75</weight>\n+       <bold>true</bold>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Amount:</string>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"4\" column=\"1\" alignment=\"Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"amount_content\">\n+     <property name=\"text\">\n+      <string notr=\"true\">0.00000000 BTC</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::PlainText</enum>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"5\" column=\"0\" alignment=\"Qt::AlignRight|Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"label_tag\">\n+     <property name=\"font\">\n+      <font>\n+       <weight>75</weight>\n+       <bold>true</bold>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Label:</string>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"5\" column=\"1\" alignment=\"Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"label_content\">\n+     <property name=\"text\">\n+      <string notr=\"true\">label content</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::PlainText</enum>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"6\" column=\"0\" alignment=\"Qt::AlignRight|Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"message_tag\">\n+     <property name=\"font\">\n+      <font>\n+       <weight>75</weight>\n+       <bold>true</bold>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Message:</string>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"6\" column=\"1\" alignment=\"Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"message_content\">\n+     <property name=\"text\">\n+      <string notr=\"true\">message content</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::PlainText</enum>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"7\" column=\"0\" alignment=\"Qt::AlignRight|Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"wallet_tag\">\n+     <property name=\"font\">\n+      <font>\n+       <weight>75</weight>\n+       <bold>true</bold>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Wallet:</string>\n+     </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::NoTextInteraction</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item row=\"7\" column=\"1\" alignment=\"Qt::AlignTop\">\n+    <widget class=\"QLabel\" name=\"wallet_content\">\n+     <property name=\"text\">\n+      <string notr=\"true\">wallet name</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::PlainText</enum>\n+     </property>\n+     <property name=\"wordWrap\">\n       <bool>true</bool>\n      </property>\n      <property name=\"textInteractionFlags\">\n-      <set>Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+      <set>Qt::TextSelectableByMouse</set>\n      </property>\n     </widget>\n    </item>\n-   <item>\n+   <item row=\"8\" column=\"0\" colspan=\"2\">\n     <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n      <item>\n       <widget class=\"QPushButton\" name=\"btnCopyURI\">\n@@ -114,8 +279,11 @@\n      </item>\n      <item>\n       <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+       <property name=\"focusPolicy\">\n+        <enum>Qt::StrongFocus</enum>\n+       </property>\n        <property name=\"standardButtons\">\n-        <set>QDialogButtonBox::Close</set>\n+        <set>QDialogButtonBox::Ok</set>\n        </property>\n       </widget>\n      </item>\n@@ -130,37 +298,27 @@\n    <header>qt/qrimagewidget.h</header>\n   </customwidget>\n  </customwidgets>\n+ <tabstops>\n+  <tabstop>buttonBox</tabstop>\n+  <tabstop>btnCopyURI</tabstop>\n+  <tabstop>btnCopyAddress</tabstop>\n+  <tabstop>btnSaveAs</tabstop>\n+ </tabstops>\n  <resources/>\n  <connections>\n-  <connection>\n-   <sender>buttonBox</sender>\n-   <signal>rejected()</signal>\n-   <receiver>ReceiveRequestDialog</receiver>\n-   <slot>reject()</slot>\n-   <hints>\n-    <hint type=\"sourcelabel\">\n-     <x>452</x>\n-     <y>573</y>\n-    </hint>\n-    <hint type=\"destinationlabel\">\n-     <x>243</x>\n-     <y>298</y>\n-    </hint>\n-   </hints>\n-  </connection>\n   <connection>\n    <sender>buttonBox</sender>\n    <signal>accepted()</signal>\n    <receiver>ReceiveRequestDialog</receiver>\n    <slot>accept()</slot>\n    <hints>\n     <hint type=\"sourcelabel\">\n-     <x>452</x>\n-     <y>573</y>\n+     <x>135</x>\n+     <y>230</y>\n     </hint>\n     <hint type=\"destinationlabel\">\n-     <x>243</x>\n-     <y>298</y>\n+     <x>135</x>\n+     <y>126</y>\n     </hint>\n    </hints>\n   </connection>"
      },
      {
        "sha": "ce44d4f3a5be5087e5d8047ffbce36e98eda8521",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -48,10 +48,12 @@\n #include <QKeyEvent>\n #include <QLineEdit>\n #include <QList>\n+#include <QMenu>\n #include <QMouseEvent>\n #include <QProgressDialog>\n #include <QScreen>\n #include <QSettings>\n+#include <QShortcut>\n #include <QSize>\n #include <QString>\n #include <QTextDocument> // for Qt::mightBeRichText\n@@ -230,7 +232,7 @@ QString HtmlEscape(const std::string& str, bool fMultiLine)\n     return HtmlEscape(QString::fromStdString(str), fMultiLine);\n }\n \n-void copyEntryData(QAbstractItemView *view, int column, int role)\n+void copyEntryData(const QAbstractItemView *view, int column, int role)\n {\n     if(!view || !view->selectionModel())\n         return;\n@@ -243,13 +245,20 @@ void copyEntryData(QAbstractItemView *view, int column, int role)\n     }\n }\n \n-QList<QModelIndex> getEntryData(QAbstractItemView *view, int column)\n+QList<QModelIndex> getEntryData(const QAbstractItemView *view, int column)\n {\n     if(!view || !view->selectionModel())\n         return QList<QModelIndex>();\n     return view->selectionModel()->selectedRows(column);\n }\n \n+bool hasEntryData(const QAbstractItemView *view, int column, int role)\n+{\n+    QModelIndexList selection = getEntryData(view, column);\n+    if (selection.isEmpty()) return false;\n+    return !selection.at(0).data(role).toString().isEmpty();\n+}\n+\n QString getDefaultDataDirectory()\n {\n     return boostPathToQString(GetDefaultDataDir());\n@@ -378,6 +387,11 @@ void bringToFront(QWidget* w)\n     }\n }\n \n+void handleCloseWindowShortcut(QWidget* w)\n+{\n+    QObject::connect(new QShortcut(QKeySequence(Qt::CTRL + Qt::Key_W), w), &QShortcut::activated, w, &QWidget::close);\n+}\n+\n void openDebugLogfile()\n {\n     fs::path pathDebug = GetDataDir() / \"debug.log\";\n@@ -737,34 +751,12 @@ QString formatDurationStr(int secs)\n     return strList.join(\" \");\n }\n \n-QString serviceFlagToStr(const quint64 mask, const int bit)\n-{\n-    switch (ServiceFlags(mask)) {\n-    case NODE_NONE: abort();  // impossible\n-    case NODE_NETWORK:         return \"NETWORK\";\n-    case NODE_GETUTXO:         return \"GETUTXO\";\n-    case NODE_BLOOM:           return \"BLOOM\";\n-    case NODE_WITNESS:         return \"WITNESS\";\n-    case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n-    // Not using default, so we get warned when a case is missing\n-    }\n-    if (bit < 8) {\n-        return QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(mask);\n-    } else {\n-        return QString(\"%1[2^%2]\").arg(\"UNKNOWN\").arg(bit);\n-    }\n-}\n-\n QString formatServicesStr(quint64 mask)\n {\n     QStringList strList;\n \n-    for (int i = 0; i < 64; i++) {\n-        uint64_t check = 1LL << i;\n-        if (mask & check)\n-        {\n-            strList.append(serviceFlagToStr(check, i));\n-        }\n+    for (const auto& flag : serviceFlagsToStr(mask)) {\n+        strList.append(QString::fromStdString(flag));\n     }\n \n     if (strList.size())\n@@ -904,4 +896,11 @@ void LogQtInfo()\n     }\n }\n \n+void PopupMenu(QMenu* menu, const QPoint& point, QAction* at_action)\n+{\n+    // The qminimal plugin does not provide window system integration.\n+    if (QApplication::platformName() == \"minimal\") return;\n+    menu->popup(point, at_action);\n+}\n+\n } // namespace GUIUtil"
      },
      {
        "sha": "8741d901023b42c021127b44eec63fc580e379fd",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "patch": "@@ -28,9 +28,12 @@ namespace interfaces\n \n QT_BEGIN_NAMESPACE\n class QAbstractItemView;\n+class QAction;\n class QDateTime;\n class QFont;\n class QLineEdit;\n+class QMenu;\n+class QPoint;\n class QProgressDialog;\n class QUrl;\n class QWidget;\n@@ -68,14 +71,21 @@ namespace GUIUtil\n        @param[in] role    Data role to extract from the model\n        @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress\n      */\n-    void copyEntryData(QAbstractItemView *view, int column, int role=Qt::EditRole);\n+    void copyEntryData(const QAbstractItemView *view, int column, int role=Qt::EditRole);\n \n     /** Return a field of the currently selected entry as a QString. Does nothing if nothing\n         is selected.\n        @param[in] column  Data column to extract from the model\n        @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress\n      */\n-    QList<QModelIndex> getEntryData(QAbstractItemView *view, int column);\n+    QList<QModelIndex> getEntryData(const QAbstractItemView *view, int column);\n+\n+    /** Returns true if the specified field of the currently selected view entry is not empty.\n+       @param[in] column  Data column to extract from the model\n+       @param[in] role    Data role to extract from the model\n+       @see  TransactionView::contextualMenu\n+     */\n+    bool hasEntryData(const QAbstractItemView *view, int column, int role);\n \n     void setClipboard(const QString& str);\n \n@@ -124,6 +134,9 @@ namespace GUIUtil\n     // Activate, show and raise the widget\n     void bringToFront(QWidget* w);\n \n+    // Set shortcut to close window\n+    void handleCloseWindowShortcut(QWidget* w);\n+\n     // Open debug.log\n     void openDebugLogfile();\n \n@@ -142,7 +155,7 @@ namespace GUIUtil\n         explicit ToolTipToRichTextFilter(int size_threshold, QObject *parent = nullptr);\n \n     protected:\n-        bool eventFilter(QObject *obj, QEvent *evt);\n+        bool eventFilter(QObject *obj, QEvent *evt) override;\n \n     private:\n         int size_threshold;\n@@ -224,7 +237,7 @@ namespace GUIUtil\n          */\n         void clicked(const QPoint& point);\n     protected:\n-        void mouseReleaseEvent(QMouseEvent *event);\n+        void mouseReleaseEvent(QMouseEvent *event) override;\n     };\n \n     class ClickableProgressBar : public QProgressBar\n@@ -237,7 +250,7 @@ namespace GUIUtil\n          */\n         void clicked(const QPoint& point);\n     protected:\n-        void mouseReleaseEvent(QMouseEvent *event);\n+        void mouseReleaseEvent(QMouseEvent *event) override;\n     };\n \n     typedef ClickableProgressBar ProgressBar;\n@@ -252,7 +265,7 @@ namespace GUIUtil\n         void keyEscapePressed();\n \n     private:\n-        bool eventFilter(QObject *object, QEvent *event);\n+        bool eventFilter(QObject *object, QEvent *event) override;\n     };\n \n     // Fix known bugs in QProgressDialog class.\n@@ -270,6 +283,11 @@ namespace GUIUtil\n      * Writes to debug.log short info about the used Qt and the host system.\n      */\n     void LogQtInfo();\n+\n+    /**\n+     * Call QMenu::popup() only on supported QT_QPA_PLATFORM.\n+     */\n+    void PopupMenu(QMenu* menu, const QPoint& point, QAction* at_action = nullptr);\n } // namespace GUIUtil\n \n #endif // BITCOIN_QT_GUIUTIL_H"
      },
      {
        "sha": "23d0f609d7e9aa9a04917f96de230af37e0e52e6",
        "filename": "src/qt/locale/bitcoin_af.ts",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_af.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_af.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_af.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "f78d4b970ce1db11453a3f131da40ecaf6849d6f",
        "filename": "src/qt/locale/bitcoin_am.ts",
        "status": "added",
        "additions": 434,
        "deletions": 0,
        "changes": 434,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_am.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_am.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_am.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "0d138d353ca45ffbd7336a170205db6a05a43daa",
        "filename": "src/qt/locale/bitcoin_ar.ts",
        "status": "modified",
        "additions": 3010,
        "deletions": 143,
        "changes": 3153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_ar.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_ar.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ar.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "bb0c17901f9fe6249e2f9b7581b950dd480b52dd",
        "filename": "src/qt/locale/bitcoin_be.ts",
        "status": "renamed",
        "additions": 14,
        "deletions": 99,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_be.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_be.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_be.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "previous_filename": "src/qt/locale/bitcoin_be_BY.ts"
      },
      {
        "sha": "694c1b10080d45a948407c8997d911297bd6eb45",
        "filename": "src/qt/locale/bitcoin_bg.ts",
        "status": "added",
        "additions": 2328,
        "deletions": 0,
        "changes": 2328,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_bg.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_bg.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bg.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "3a68e2847c848890f8efe677bbc164ae271f469e",
        "filename": "src/qt/locale/bitcoin_bn.ts",
        "status": "added",
        "additions": 186,
        "deletions": 0,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_bn.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_bn.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bn.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "ef97da747ab5c6a81146994b6ce40e620184d1bb",
        "filename": "src/qt/locale/bitcoin_bs.ts",
        "status": "renamed",
        "additions": 105,
        "deletions": 66,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_bs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_bs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bs.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb",
        "previous_filename": "src/qt/locale/bitcoin_he_IL.ts"
      },
      {
        "sha": "e14fc3097e980b77bef75dcdc841ce7450c43249",
        "filename": "src/qt/locale/bitcoin_ca.ts",
        "status": "modified",
        "additions": 3061,
        "deletions": 164,
        "changes": 3225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_ca.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_ca.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "70334087e8f6659528a503d97dbb5a5db999ad3b",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 44,
        "deletions": 139,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "f53e12bd110eca65f747e91bf151d3a12e39ba6a",
        "filename": "src/qt/locale/bitcoin_cs_CZ.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 691,
        "changes": 691,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_cs_CZ.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_cs_CZ.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs_CZ.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "3f053f7be6b7664f3cac5635fab5d6db3b288a57",
        "filename": "src/qt/locale/bitcoin_cy.ts",
        "status": "modified",
        "additions": 86,
        "deletions": 27,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_cy.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_cy.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cy.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "0fb4d104aa0258057953a90717725f3d58787ebf",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 114,
        "deletions": 141,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "ff763b002c80c3daf6668b63d70f3fdcc488d70c",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 245,
        "deletions": 136,
        "changes": 381,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "8813c796fe7b910ed25ca054b6c61f5e36580278",
        "filename": "src/qt/locale/bitcoin_de_DE.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 929,
        "changes": 929,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_de_DE.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_de_DE.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de_DE.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "d903e2f85d411893e58902eb8816fcf7e99a60c2",
        "filename": "src/qt/locale/bitcoin_el.ts",
        "status": "modified",
        "additions": 1786,
        "deletions": 87,
        "changes": 1873,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_el.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_el.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "85d5c62c91264563d58cc29ecac129f903983e2c",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 2095,
        "changes": 2095,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "6b4174f313753aedc72efb0c46b3895c6d4bfc45",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 308,
        "deletions": 334,
        "changes": 642,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "4a63994b8a6ff933cac96835a8dac8f61265beff",
        "filename": "src/qt/locale/bitcoin_en_AU.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 187,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_en_AU.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_en_AU.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_AU.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "ab674f0c7d7d47bb7bfd1a65d575157f58529314",
        "filename": "src/qt/locale/bitcoin_en_GB.ts",
        "status": "modified",
        "additions": 274,
        "deletions": 133,
        "changes": 407,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_en_GB.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_en_GB.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_GB.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "f4ce75f428fa1ddb7b1a98652c3217bd7a3063f1",
        "filename": "src/qt/locale/bitcoin_eo.ts",
        "status": "modified",
        "additions": 89,
        "deletions": 44,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_eo.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_eo.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_eo.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "b681cff011e4d9565682418e6b67653723cd8e33",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 523,
        "deletions": 489,
        "changes": 1012,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "4b864f4e74216aaf0c9333008e7e6855a0bd0bd8",
        "filename": "src/qt/locale/bitcoin_es_CL.ts",
        "status": "modified",
        "additions": 9,
        "deletions": 136,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_CL.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_CL.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_CL.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "5c83f25286edbe7f9b6d94d68f1fa748146ac9ef",
        "filename": "src/qt/locale/bitcoin_es_CO.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 133,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_CO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_CO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_CO.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "af7b5189b6734afa98e5ec8e5aeee8aa357effaa",
        "filename": "src/qt/locale/bitcoin_es_DO.ts",
        "status": "modified",
        "additions": 577,
        "deletions": 52,
        "changes": 629,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_DO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_DO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_DO.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "1b196cb13f9b0915bcfbd4aae6a8c369bee4902f",
        "filename": "src/qt/locale/bitcoin_es_ES.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 3185,
        "changes": 3185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_es_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_es_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_ES.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "acb7f0dc3dde4a82d66329f7f0fb08160756f4b1",
        "filename": "src/qt/locale/bitcoin_es_MX.ts",
        "status": "modified",
        "additions": 361,
        "deletions": 29,
        "changes": 390,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_MX.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_MX.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_MX.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "2dd3247a5f31400e480a1dc6387f3fe0191fd540",
        "filename": "src/qt/locale/bitcoin_es_VE.ts",
        "status": "modified",
        "additions": 192,
        "deletions": 47,
        "changes": 239,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_VE.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_es_VE.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_VE.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "f055141fc3db22ef1ed3be4f36e0908c9407e196",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 14,
        "deletions": 49,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "4778e9492badd78510363270db1a727538a69782",
        "filename": "src/qt/locale/bitcoin_et_EE.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 779,
        "changes": 779,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_et_EE.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_et_EE.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et_EE.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "7aca604eeb4fa13b36c66a500bba101103ea59a6",
        "filename": "src/qt/locale/bitcoin_eu.ts",
        "status": "modified",
        "additions": 409,
        "deletions": 14,
        "changes": 423,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_eu.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_eu.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_eu.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "b19bb00160284fc515708bb3f731557ca67662df",
        "filename": "src/qt/locale/bitcoin_fa.ts",
        "status": "modified",
        "additions": 73,
        "deletions": 96,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fa.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fa.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fa.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "28b455d13c14ee38c7d66c934966c37f065d3542",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 162,
        "deletions": 145,
        "changes": 307,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "f7b8000439eff430ebf949c444375d68a7b7d643",
        "filename": "src/qt/locale/bitcoin_fil.ts",
        "status": "modified",
        "additions": 13,
        "deletions": 152,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fil.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fil.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fil.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "1cddb413ef5653f90f71a1426da78749f9b3fb51",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 183,
        "deletions": 202,
        "changes": 385,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "10582127c4efd6b16752a3c2a098c40ffbe3d3f0",
        "filename": "src/qt/locale/bitcoin_fr_FR.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 2314,
        "changes": 2314,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_fr_FR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_fr_FR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr_FR.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "851b111fd60a1c7bab8e64a247b714c102c8367e",
        "filename": "src/qt/locale/bitcoin_gl.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 1349,
        "changes": 1349,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_gl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_gl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_gl.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "78570e8bbf6c8b770a95038020fece4413874d46",
        "filename": "src/qt/locale/bitcoin_he.ts",
        "status": "modified",
        "additions": 17,
        "deletions": 143,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_he.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_he.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_he.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "bf67fd01f5fb158de59e0f580a0fd152bebd9322",
        "filename": "src/qt/locale/bitcoin_hi.ts",
        "status": "modified",
        "additions": 18,
        "deletions": 13,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_hi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_hi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hi.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "0d0a2e67659f98b03bdb310dd4756b75f0767f51",
        "filename": "src/qt/locale/bitcoin_hr.ts",
        "status": "modified",
        "additions": 178,
        "deletions": 137,
        "changes": 315,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_hr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_hr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hr.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "34c8b9184460aa391999d34c10c2721c7056135c",
        "filename": "src/qt/locale/bitcoin_hu.ts",
        "status": "modified",
        "additions": 410,
        "deletions": 161,
        "changes": 571,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_hu.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_hu.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hu.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "a0bd9aa43b113b8168b12ca600d5e4bb9b20cf22",
        "filename": "src/qt/locale/bitcoin_hu_HU.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 2685,
        "changes": 2685,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_hu_HU.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_hu_HU.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hu_HU.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      },
      {
        "sha": "e7be7825fc59d462efd319570aad3973b88c87c4",
        "filename": "src/qt/locale/bitcoin_id.ts",
        "status": "modified",
        "additions": 717,
        "deletions": 124,
        "changes": 841,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_id.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b717249d7abd1064adf2575f464bd7bd60b74bb/src/qt/locale/bitcoin_id.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_id.ts?ref=0b717249d7abd1064adf2575f464bd7bd60b74bb"
      },
      {
        "sha": "a487936fd25e5751e420a147e541cf3c815f50a2",
        "filename": "src/qt/locale/bitcoin_id_ID.ts",
        "status": "removed",
        "additions": 0,
        "deletions": 2137,
        "changes": 2137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_id_ID.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7237f928118f3ab2df4a905304ef9141f150e2d4/src/qt/locale/bitcoin_id_ID.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_id_ID.ts?ref=7237f928118f3ab2df4a905304ef9141f150e2d4"
      }
    ]
  }
]