[
  {
    "sha": "29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWM1NGUzMDI2ZDA4MWVlYWU4MmY5MWRkMzc0OGIwYzBhMjdkZDdi",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-05T10:05:32Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-17T05:50:17Z"
      },
      "message": "Remove Optional from GetMessage\n\nGetMesage no longer returns an optional.\n\nAdditionally, we now access mapRecvBytesPerMsgCmd with `.at` not\n`.find`.\n\nThis is shorter and more clear.\nThis throws an error if COMMAND_OTHER doesn't exist, which should never\nhappen.  `.find` instead just accessed the last element, which could\nmake debugging more difficult.\n\nFor this part, I think this is a definite improvement, but I'm not sure\nit's the best solution.  Open to suggestions.",
      "tree": {
        "sha": "5368e90c5d62d8db81d897ba20d86ae4745c1a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5368e90c5d62d8db81d897ba20d86ae4745c1a39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c54e3026d081eeae82f91dd3748b0c0a27dd7b/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c48e788246fcced78cb4eb1d4bd09cb41a9ff09b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c48e788246fcced78cb4eb1d4bd09cb41a9ff09b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c48e788246fcced78cb4eb1d4bd09cb41a9ff09b"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 27,
      "deletions": 30
    },
    "files": [
      {
        "sha": "e536675cd4cbc2d053393599ec9e8a1ebfe6fb9e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c54e3026d081eeae82f91dd3748b0c0a27dd7b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c54e3026d081eeae82f91dd3748b0c0a27dd7b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
        "patch": "@@ -659,25 +659,25 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n \n         if (m_deserializer->Complete()) {\n             // decompose a transport agnostic CNetMessage from the deserializer\n-            uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{m_deserializer->GetMessage(time, out_err_raw_size)};\n-            if (!result) {\n+            bool reject_message{false};\n+            CNetMessage msg = m_deserializer->GetMessage(time, reject_message);\n+            if (reject_message) {\n                 // Message deserialization failed.  Drop the message but don't disconnect the peer.\n                 // store the size of the corrupt message\n-                mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER)->second += out_err_raw_size;\n+                mapRecvBytesPerMsgCmd.at(NET_MESSAGE_COMMAND_OTHER) += msg.m_raw_message_size;\n                 continue;\n             }\n \n             //store received bytes per message command\n             //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(result->m_command);\n+            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg.m_command);\n             if (i == mapRecvBytesPerMsgCmd.end())\n                 i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n             assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += result->m_raw_message_size;\n+            i->second += msg.m_raw_message_size;\n \n             // push the message to the process queue,\n-            vRecvMsg.push_back(std::move(*result));\n+            vRecvMsg.push_back(std::move(msg));\n \n             complete = true;\n         }\n@@ -751,16 +751,18 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n     return data_hash;\n }\n \n-Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, uint32_t& out_err_raw_size)\n+CNetMessage V1TransportDeserializer::GetMessage(const std::chrono::microseconds time, bool& reject_message)\n {\n+    // Initialize out parameter\n+    reject_message = false;\n     // decompose a single CNetMessage from the TransportDeserializer\n-    Optional<CNetMessage> msg(std::move(vRecv));\n+    CNetMessage msg(std::move(vRecv));\n \n     // store command string, time, and sizes\n-    msg->m_command = hdr.GetCommand();\n-    msg->m_time = time;\n-    msg->m_message_size = hdr.nMessageSize;\n-    msg->m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+    msg.m_command = hdr.GetCommand();\n+    msg.m_time = time;\n+    msg.m_message_size = hdr.nMessageSize;\n+    msg.m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n     uint256 hash = GetMessageHash();\n \n@@ -770,17 +772,15 @@ Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::mic\n     // Check checksum and header command string\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n         LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s, peer=%d\\n\",\n-                 SanitizeString(msg->m_command), msg->m_message_size,\n+                 SanitizeString(msg.m_command), msg.m_message_size,\n                  HexStr(Span<uint8_t>(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE)),\n                  HexStr(hdr.pchChecksum),\n                  m_node_id);\n-        out_err_raw_size = msg->m_raw_message_size;\n-        msg = nullopt;\n+        reject_message = true;\n     } else if (!hdr.IsCommandValid()) {\n         LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n-                 hdr.GetCommand(), msg->m_message_size, m_node_id);\n-        out_err_raw_size = msg->m_raw_message_size;\n-        msg = nullopt;\n+                 hdr.GetCommand(), msg.m_message_size, m_node_id);\n+        reject_message = true;\n     }\n \n     // Always reset the network deserializer (prepare for the next message)"
      },
      {
        "sha": "0ec319e936f1fc32555befe19894b4936cfd4efe",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c54e3026d081eeae82f91dd3748b0c0a27dd7b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c54e3026d081eeae82f91dd3748b0c0a27dd7b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
        "patch": "@@ -16,7 +16,6 @@\n #include <hash.h>\n #include <net_permissions.h>\n #include <netaddress.h>\n-#include <optional.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n #include <random.h>\n@@ -760,7 +759,7 @@ class TransportDeserializer {\n     // read and deserialize data\n     virtual int Read(const char *data, unsigned int bytes) = 0;\n     // decomposes a message from the context\n-    virtual Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err) = 0;\n+    virtual CNetMessage GetMessage(std::chrono::microseconds time, bool& reject_message) = 0;\n     virtual ~TransportDeserializer() {}\n };\n \n@@ -819,7 +818,7 @@ class V1TransportDeserializer final : public TransportDeserializer\n         if (ret < 0) Reset();\n         return ret;\n     }\n-    Optional<CNetMessage> GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size) override;\n+    CNetMessage GetMessage(std::chrono::microseconds time, bool& reject_message) override;\n };\n \n /** The TransportSerializer prepares messages for the network transport"
      },
      {
        "sha": "204e27f246d9d306e344fad038ad428fdbe1b8a1",
        "filename": "src/test/fuzz/p2p_transport_deserializer.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c54e3026d081eeae82f91dd3748b0c0a27dd7b/src/test/fuzz/p2p_transport_deserializer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c54e3026d081eeae82f91dd3748b0c0a27dd7b/src/test/fuzz/p2p_transport_deserializer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/p2p_transport_deserializer.cpp?ref=29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
        "patch": "@@ -32,14 +32,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         n_bytes -= handled;\n         if (deserializer.Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n-            uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n-            if (result) {\n-                assert(result->m_command.size() <= CMessageHeader::COMMAND_SIZE);\n-                assert(result->m_raw_message_size <= buffer.size());\n-                assert(result->m_raw_message_size == CMessageHeader::HEADER_SIZE + result->m_message_size);\n-                assert(result->m_time == m_time);\n-            }\n+            bool reject_message{false};\n+            CNetMessage msg = deserializer.GetMessage(m_time, reject_message);\n+            assert(msg.m_command.size() <= CMessageHeader::COMMAND_SIZE);\n+            assert(msg.m_raw_message_size <= buffer.size());\n+            assert(msg.m_raw_message_size == CMessageHeader::HEADER_SIZE + msg.m_message_size);\n+            assert(msg.m_time == m_time);\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "b9f66231d862ae0fda4a63322c67baa1a00e718a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWY2NjIzMWQ4NjJhZTBmZGE0YTYzMzIyYzY3YmFhMWEwMGU3MThh",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-05T10:05:37Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-17T05:50:47Z"
      },
      "message": "Replace GetID() with id in TransportDeserializer constructor",
      "tree": {
        "sha": "f5103698a65bcf1214b9c442c68aab36c8087a48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5103698a65bcf1214b9c442c68aab36c8087a48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9f66231d862ae0fda4a63322c67baa1a00e718a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f66231d862ae0fda4a63322c67baa1a00e718a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f66231d862ae0fda4a63322c67baa1a00e718a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f66231d862ae0fda4a63322c67baa1a00e718a/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c54e3026d081eeae82f91dd3748b0c0a27dd7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c54e3026d081eeae82f91dd3748b0c0a27dd7b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4aafcbc764ca74b0dc1b8a7941843b0d595a36cd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9f66231d862ae0fda4a63322c67baa1a00e718a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9f66231d862ae0fda4a63322c67baa1a00e718a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b9f66231d862ae0fda4a63322c67baa1a00e718a",
        "patch": "@@ -2980,7 +2980,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         LogPrint(BCLog::NET, \"Added connection peer=%d\\n\", id);\n     }\n \n-    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params(), GetId(), SER_NETWORK, INIT_PROTO_VERSION));\n+    m_deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params(), id, SER_NETWORK, INIT_PROTO_VERSION));\n     m_serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n }\n "
      }
    ]
  },
  {
    "sha": "78fb468c7a1e5942cb1dc16864a4bbf8c85381ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGZiNDY4YzdhMWU1OTQyY2IxZGMxNjg2NGE0YmJmOGM4NTM4MWJh",
    "commit": {
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-05T10:05:46Z"
      },
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-11-17T05:52:08Z"
      },
      "message": "Make error log messages more descriptive",
      "tree": {
        "sha": "573e780e0073395a711fb69f0403d83a47d62d08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/573e780e0073395a711fb69f0403d83a47d62d08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba/comments",
    "author": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygiorshev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9f66231d862ae0fda4a63322c67baa1a00e718a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f66231d862ae0fda4a63322c67baa1a00e718a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f66231d862ae0fda4a63322c67baa1a00e718a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9c2a79b809c2a3b693e5086163b25ea25a21c9d0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=78fb468c7a1e5942cb1dc16864a4bbf8c85381ba",
        "patch": "@@ -710,13 +710,13 @@ int V1TransportDeserializer::readHeader(const char *pch, unsigned int nBytes)\n \n     // Check start string, network magic\n     if (memcmp(hdr.pchMessageStart, m_chain_params.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - MESSAGESTART (%s, %u bytes), received %s, peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, HexStr(hdr.pchMessageStart), m_node_id);\n+        LogPrint(BCLog::NET, \"HEADER ERROR - WRONG MESSAGESTART (%s, %u bytes), received %s, peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, HexStr(hdr.pchMessageStart), m_node_id);\n         return -1;\n     }\n \n     // reject messages larger than MAX_SIZE or MAX_PROTOCOL_MESSAGE_LENGTH\n     if (hdr.nMessageSize > MAX_SIZE || hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - SIZE (%s, %u bytes), peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, m_node_id);\n+        LogPrint(BCLog::NET, \"HEADER ERROR - PAYLOAD TOO LARGE (%s, %u bytes), peer=%d\\n\", hdr.GetCommand(), hdr.nMessageSize, m_node_id);\n         return -1;\n     }\n \n@@ -778,7 +778,7 @@ CNetMessage V1TransportDeserializer::GetMessage(const std::chrono::microseconds\n                  m_node_id);\n         reject_message = true;\n     } else if (!hdr.IsCommandValid()) {\n-        LogPrint(BCLog::NET, \"HEADER ERROR - COMMAND (%s, %u bytes), peer=%d\\n\",\n+        LogPrint(BCLog::NET, \"HEADER ERROR - INVALID MSGTYPE (%s, %u bytes), peer=%d\\n\",\n                  hdr.GetCommand(), msg.m_message_size, m_node_id);\n         reject_message = true;\n     }"
      },
      {
        "sha": "d41f0cc1da8f971e57791090233555707eeef7ae",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78fb468c7a1e5942cb1dc16864a4bbf8c85381ba/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=78fb468c7a1e5942cb1dc16864a4bbf8c85381ba",
        "patch": "@@ -95,7 +95,7 @@ def test_buffer(self):\n     def test_magic_bytes(self):\n         self.log.info(\"Test message with invalid magic bytes disconnects peer\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['HEADER ERROR - MESSAGESTART (badmsg, 2 bytes), received ffffffff']):\n+        with self.nodes[0].assert_debug_log(['HEADER ERROR - WRONG MESSAGESTART (badmsg, 2 bytes), received ffffffff']):\n             msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n             # modify magic bytes\n             msg = b'\\xff' * 4 + msg[4:]\n@@ -121,7 +121,7 @@ def test_checksum(self):\n     def test_size(self):\n         self.log.info(\"Test message with oversized payload disconnects peer\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['HEADER ERROR - SIZE (badmsg, 4000001 bytes)']):\n+        with self.nodes[0].assert_debug_log(['HEADER ERROR - PAYLOAD TOO LARGE (badmsg, 4000001 bytes)']):\n             msg = msg_unrecognized(str_data=\"d\" * (VALID_DATA_LIMIT + 1))\n             msg = conn.build_message(msg)\n             conn.send_raw_message(msg)\n@@ -131,7 +131,7 @@ def test_size(self):\n     def test_msgtype(self):\n         self.log.info(\"Test message with invalid message type logs an error\")\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n-        with self.nodes[0].assert_debug_log(['HEADER ERROR - COMMAND']):\n+        with self.nodes[0].assert_debug_log(['HEADER ERROR - INVALID MSGTYPE']):\n             msg = msg_unrecognized(str_data=\"d\")\n             msg = conn.build_message(msg)\n             # Modify msgtype"
      }
    ]
  }
]