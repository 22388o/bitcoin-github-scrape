[
  {
    "sha": "29850008085811fc93b71b345fb2da4146d695e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTg1MDAwODA4NTgxMWZjOTNiNzFiMzQ1ZmIyZGE0MTQ2ZDY5NWU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-03T11:18:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-03T11:18:53Z"
      },
      "message": "Bump version to 0.12.0\n\nBump version from 0.11.99 to 0.12.0 so that we don't forget to do this\nwhen rc1 is released.",
      "tree": {
        "sha": "1efd9c593ddd4049830916338a866237aaa2adc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1efd9c593ddd4049830916338a866237aaa2adc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29850008085811fc93b71b345fb2da4146d695e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWYCVfAAoJEHSBCwEjRsmmhdEIALCj3aWkqYfu6WLInpnoGq5C\n1NzEnmtc0oJ26zO1C2JDpHwLhywmwR0czIfpK62rVHlSCJyehfXIoyRDlHaEhSOS\nlQFUYr8v57UYCQtCVuQn4aWWtLcnhyCRhTf4O5UAC9PRYvokks6kvpmPstS5unoi\ngbRsmsDuOCILX/20OpQt5i5zz9roZIDcZLJaBn6ND1/muXVMYIH7mfef8GDl23/X\nkHlZI070sScdlXXc9HPsVTHu6UVkxnVqgNW3JaU1xnClwTpSthCTBBsAlWHqfd8b\nJ6Pg4WWTw0kuxm92c8MNcywM95JmrC8ca83J6TCbRqHWY1m8aecJdfZ+3y8zp+w=\n=P6FI\n-----END PGP SIGNATURE-----",
        "payload": "tree 1efd9c593ddd4049830916338a866237aaa2adc3\nparent 3cd836c1d855b92e7c73ab31979f471c4f8dad68\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1449141533 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449141533 +0100\n\nBump version to 0.12.0\n\nBump version from 0.11.99 to 0.12.0 so that we don't forget to do this\nwhen rc1 is released.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29850008085811fc93b71b345fb2da4146d695e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29850008085811fc93b71b345fb2da4146d695e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29850008085811fc93b71b345fb2da4146d695e4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "962f311651d893497b226bde46a2685dce183d0c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29850008085811fc93b71b345fb2da4146d695e4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29850008085811fc93b71b345fb2da4146d695e4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=29850008085811fc93b71b345fb2da4146d695e4",
        "patch": "@@ -1,10 +1,10 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 11)\n-define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_MINOR, 12)\n+define(_CLIENT_VERSION_REVISION, 0)\n define(_CLIENT_VERSION_BUILD, 0)\n-define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2015)\n AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin])\n AC_CONFIG_SRCDIR([src/main.cpp])"
      },
      {
        "sha": "386be8e7d87ab93a5590c4f7a9793e7b404890cf",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29850008085811fc93b71b345fb2da4146d695e4/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29850008085811fc93b71b345fb2da4146d695e4/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=29850008085811fc93b71b345fb2da4146d695e4",
        "patch": "@@ -34,7 +34,7 @@ PROJECT_NAME           = Bitcoin\n # This could be handy for archiving the generated documentation or \n # if some version control system is used.\n \n-PROJECT_NUMBER         = 0.11.99\n+PROJECT_NUMBER         = 0.12.0\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description \n # for a project that appears at the top of each page and should give viewer "
      },
      {
        "sha": "79523d9c9c61653ef5193938c20c11b2a4e7f0b3",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29850008085811fc93b71b345fb2da4146d695e4/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29850008085811fc93b71b345fb2da4146d695e4/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=29850008085811fc93b71b345fb2da4146d695e4",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.11.99\n+Bitcoin Core 0.12.0\n =====================\n \n Setup"
      },
      {
        "sha": "171c4078d2db805df9162bbbff2f358f3c4ffe2c",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29850008085811fc93b71b345fb2da4146d695e4/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29850008085811fc93b71b345fb2da4146d695e4/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=29850008085811fc93b71b345fb2da4146d695e4",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.11.99\r\n+Bitcoin Core 0.12.0\r\n =====================\r\n \r\n Intro\r"
      },
      {
        "sha": "25d9d3106c358905d72e9a2118c66fc513e8dbbd",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29850008085811fc93b71b345fb2da4146d695e4/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29850008085811fc93b71b345fb2da4146d695e4/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=29850008085811fc93b71b345fb2da4146d695e4",
        "patch": "@@ -15,12 +15,12 @@\n \n //! These need to be macros, as clientversion.cpp's and bitcoin*-res.rc's voodoo requires it\n #define CLIENT_VERSION_MAJOR 0\n-#define CLIENT_VERSION_MINOR 11\n-#define CLIENT_VERSION_REVISION 99\n+#define CLIENT_VERSION_MINOR 12\n+#define CLIENT_VERSION_REVISION 0\n #define CLIENT_VERSION_BUILD 0\n \n //! Set to true for release, false for prerelease or test build\n-#define CLIENT_VERSION_IS_RELEASE false\n+#define CLIENT_VERSION_IS_RELEASE true\n \n /**\n  * Copyright year (2009-this)"
      }
    ]
  },
  {
    "sha": "cfb44ce97a939cb9b6db96f4b273c2a618e11d88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmI0NGNlOTdhOTM5Y2I5YjZkYjk2ZjRiMjczYzJhNjE4ZTExZDg4",
    "commit": {
      "author": {
        "name": "Matt Bogosian",
        "email": "mtb19@columbia.edu",
        "date": "2015-12-02T06:49:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-03T12:57:51Z"
      },
      "message": "Add missing automake package to deb-based UNIX install instructions.\n\nRebased-From: b4404090259be4e34ef5dba33e47a41e7d9acc03\nGithub-Pull: #7152",
      "tree": {
        "sha": "931a8e57cd5e6fea5df88dc9cd342d43a8f3a251",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931a8e57cd5e6fea5df88dc9cd342d43a8f3a251"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfb44ce97a939cb9b6db96f4b273c2a618e11d88",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWYDxQAAoJEHSBCwEjRsmmPicIAK7GfH4oltKgP514CV/XWo8Y\na6ODNzdKqlQgyQ9KgiM3nt67kR6P4mdU0AF1YFZvlgPWXctgkgKc0PcIo4Uys0Vf\nUz8ePtLvImUovzusmPMFsT2WBzxfUdCZHyVAF4GJc7UHu4H9V1DuxDo2t9hKb6Ic\n8fmqvFLxHEBooF8HgoqW1KiAN6JpqBbDPf/rpQt6lO/k8PuopOP20FMIawdUVaWm\nKJu0jsJI0GntH7yybsRJkm2G8524hVi2+OwI4ZIX+Jfhi8TErJbZKeH0X2tHp4s/\n5yWi/8r4iGa+JL+1fUsrYHEK8WOrHfj6Nz+TmFlsOFxjgAi329zl0/TjyKk876s=\n=wKhB\n-----END PGP SIGNATURE-----",
        "payload": "tree 931a8e57cd5e6fea5df88dc9cd342d43a8f3a251\nparent 29850008085811fc93b71b345fb2da4146d695e4\nauthor Matt Bogosian <mtb19@columbia.edu> 1449038991 -0800\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449147471 +0100\n\nAdd missing automake package to deb-based UNIX install instructions.\n\nRebased-From: b4404090259be4e34ef5dba33e47a41e7d9acc03\nGithub-Pull: #7152\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb44ce97a939cb9b6db96f4b273c2a618e11d88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb44ce97a939cb9b6db96f4b273c2a618e11d88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb44ce97a939cb9b6db96f4b273c2a618e11d88/comments",
    "author": {
      "login": "posita",
      "id": 222581,
      "node_id": "MDQ6VXNlcjIyMjU4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/222581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/posita",
      "html_url": "https://github.com/posita",
      "followers_url": "https://api.github.com/users/posita/followers",
      "following_url": "https://api.github.com/users/posita/following{/other_user}",
      "gists_url": "https://api.github.com/users/posita/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/posita/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/posita/subscriptions",
      "organizations_url": "https://api.github.com/users/posita/orgs",
      "repos_url": "https://api.github.com/users/posita/repos",
      "events_url": "https://api.github.com/users/posita/events{/privacy}",
      "received_events_url": "https://api.github.com/users/posita/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29850008085811fc93b71b345fb2da4146d695e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29850008085811fc93b71b345fb2da4146d695e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29850008085811fc93b71b345fb2da4146d695e4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "31bbab7f0f90d60077793fff94d3c03c47227190",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfb44ce97a939cb9b6db96f4b273c2a618e11d88/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfb44ce97a939cb9b6db96f4b273c2a618e11d88/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=cfb44ce97a939cb9b6db96f4b273c2a618e11d88",
        "patch": "@@ -61,7 +61,7 @@ Dependency Build Instructions: Ubuntu & Debian\n ----------------------------------------------\n Build requirements:\n \n-    sudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libevent-dev bsdmainutils\n+    sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils\n \n On at least Ubuntu 14.04+ and Debian 7+ there are generic names for the\n individual boost development packages, so the following can be used to only"
      }
    ]
  },
  {
    "sha": "6ba25d28868146d5d6dbd671881db3a58f549567",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmEyNWQyODg2ODE0NmQ1ZDZkYmQ2NzE4ODFkYjNhNThmNTQ5NTY3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-12-03T20:13:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-04T08:44:24Z"
      },
      "message": "Disconnect on mempool requests from peers when over the upload limit.\n\nMempool requests use a fair amount of bandwidth when the mempool is large,\n disconnecting peers using them follows the same logic as disconnecting\n peers fetching historical blocks.\n\nRebased-From: 6aadc7557823b7673b8f661b3d41cf867e2936a3\nGithub-Pull: #7166",
      "tree": {
        "sha": "2a6ab36950d3daf79049feb1090693bceeef1b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a6ab36950d3daf79049feb1090693bceeef1b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ba25d28868146d5d6dbd671881db3a58f549567",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWYVJ0AAoJEHSBCwEjRsmm4nwIALW85wEvp5YC0lgTObJ4JyPT\npmZeFEFC8xSBwxGkXWengKfoVFfe8LwQgxZJr4Mj7jdNfxytRarEG4DJo+lgmHkQ\ny4GeFGsbaOYkw1Jp1btF48EAZLu3SJt3D5MbLJcmzMJ8zQSVXp1TbFqmbJJ8M0SI\nKnmQQ7gVcWX44lVZo85Gvxeu+2ELYSzm+7CcJxMuDJEIxZ+yeIZY9OdsrppfDI1f\nq+KQbI2pA9bsJVnjXl6Sfei0eA5A8Ljc0QibVTPsuurFF6OlcHzSQpk+gCmF+mLO\nmoUMv1zzqU2ZX+puPj2CSQT0/05LkmdSK0Cgt41GigoOHWRwsoe5aQ+kK0dmZsQ=\n=/US8\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a6ab36950d3daf79049feb1090693bceeef1b3f\nparent cfb44ce97a939cb9b6db96f4b273c2a618e11d88\nauthor Gregory Maxwell <greg@xiph.org> 1449173590 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449218664 +0100\n\nDisconnect on mempool requests from peers when over the upload limit.\n\nMempool requests use a fair amount of bandwidth when the mempool is large,\n disconnecting peers using them follows the same logic as disconnecting\n peers fetching historical blocks.\n\nRebased-From: 6aadc7557823b7673b8f661b3d41cf867e2936a3\nGithub-Pull: #7166\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba25d28868146d5d6dbd671881db3a58f549567",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba25d28868146d5d6dbd671881db3a58f549567",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba25d28868146d5d6dbd671881db3a58f549567/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfb44ce97a939cb9b6db96f4b273c2a618e11d88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb44ce97a939cb9b6db96f4b273c2a618e11d88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb44ce97a939cb9b6db96f4b273c2a618e11d88"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b200109a6ab6dc163d2b127cdedeae5f5b49c7df",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba25d28868146d5d6dbd671881db3a58f549567/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba25d28868146d5d6dbd671881db3a58f549567/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6ba25d28868146d5d6dbd671881db3a58f549567",
        "patch": "@@ -4982,6 +4982,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == \"mempool\")\n     {\n+        if (CNode::OutboundTargetReached(false) && !pfrom->fWhitelisted)\n+        {\n+            LogPrint(\"net\", \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+            pfrom->fDisconnect = true;\n+            return true;\n+        }\n         LOCK2(cs_main, pfrom->cs_filter);\n \n         std::vector<uint256> vtxid;"
      }
    ]
  },
  {
    "sha": "f31955d9da152e5e849575f0297f8fe1904cbfbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzE5NTVkOWRhMTUyZTVlODQ5NTc1ZjAyOTdmOGZlMTkwNGNiZmJj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-26T05:25:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-04T14:01:09Z"
      },
      "message": "Replace setInventoryKnown with a rolling bloom filter.\n\nGithub-Pull: #7133\nRebased-From: ec73ef37eccfeda76de55c4ff93ea54d4e69e1ec e20672479ef7f2048c2e27494397641d47a4d88d 6b849350ab074a7ccb80ecbef387f59e1271ded6 b6a0da45db8d534e7a77d1cebe382cd5d83ba9b8 d41e44c9accb3df84e0abbc602cc76b72754d382 aa4b0c26b0a94ca6164c441aae723e118554d214",
      "tree": {
        "sha": "773fb64fc9c15b0000acb9e71ae1fd1c5145f245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/773fb64fc9c15b0000acb9e71ae1fd1c5145f245"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f31955d9da152e5e849575f0297f8fe1904cbfbc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWYZymAAoJEHSBCwEjRsmmI9kH/RP17Wc5394x1lEly8S69yeC\nz8UeOJ9aExSyA5O9PUuzAXNFE15du3SJt52GtLvN92rCZXZv6HAEL/ZguFfXDwj7\nRvtgxxnPRJj1/8RlwiEtYrwRB9tv30JGsooArNF9MtOlsebsXRuAZyHMTL7Bncrq\ndHQZuM25Lvsz+Ls+3xhsFrAObeyccaFMzHA2rQban60RP78ymXrrUS/ELSj0aCVc\nQ40f+97Y3oU4smUif9+j/qvA/Nxasu1cRY9VPrO8hYi6g+fnUPzPRKMcnRMXQktZ\nHfpJ8QktGtvzbo6vUzW9Wngb0Jlb6ijXkAU/DeAKgdI/+5/2RNIoKTJ5sL0hjxI=\n=VSWs\n-----END PGP SIGNATURE-----",
        "payload": "tree 773fb64fc9c15b0000acb9e71ae1fd1c5145f245\nparent 6ba25d28868146d5d6dbd671881db3a58f549567\nauthor Gregory Maxwell <greg@xiph.org> 1448515530 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449237669 +0100\n\nReplace setInventoryKnown with a rolling bloom filter.\n\nGithub-Pull: #7133\nRebased-From: ec73ef37eccfeda76de55c4ff93ea54d4e69e1ec e20672479ef7f2048c2e27494397641d47a4d88d 6b849350ab074a7ccb80ecbef387f59e1271ded6 b6a0da45db8d534e7a77d1cebe382cd5d83ba9b8 d41e44c9accb3df84e0abbc602cc76b72754d382 aa4b0c26b0a94ca6164c441aae723e118554d214\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f31955d9da152e5e849575f0297f8fe1904cbfbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f31955d9da152e5e849575f0297f8fe1904cbfbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f31955d9da152e5e849575f0297f8fe1904cbfbc/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ba25d28868146d5d6dbd671881db3a58f549567",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba25d28868146d5d6dbd671881db3a58f549567",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba25d28868146d5d6dbd671881db3a58f549567"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 16,
      "deletions": 166
    },
    "files": [
      {
        "sha": "63e071805afdf18758410592b7283623b7d713d6",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31955d9da152e5e849575f0297f8fe1904cbfbc/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31955d9da152e5e849575f0297f8fe1904cbfbc/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "patch": "@@ -389,7 +389,7 @@ def run_test(self):\n \n             # Use getblocks/getdata\n             test_node.send_getblocks(locator = [fork_point])\n-            assert_equal(test_node.check_last_announcement(inv=new_block_hashes[0:-1]), True)\n+            assert_equal(test_node.check_last_announcement(inv=new_block_hashes), True)\n             test_node.get_data(new_block_hashes)\n             test_node.wait_for_block(new_block_hashes[-1])\n "
      },
      {
        "sha": "5da1a873de5e59b5f5df852e40b94a014e680e9d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "patch": "@@ -117,7 +117,6 @@ BITCOIN_CORE_H = \\\n   memusage.h \\\n   merkleblock.h \\\n   miner.h \\\n-  mruset.h \\\n   net.h \\\n   netbase.h \\\n   noui.h \\"
      },
      {
        "sha": "d89132f8066076da70d909684578391ae4595253",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "patch": "@@ -59,7 +59,6 @@ BITCOIN_TESTS =\\\n   test/mempool_tests.cpp \\\n   test/merkle_tests.cpp \\\n   test/miner_tests.cpp \\\n-  test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\\n   test/pmt_tests.cpp \\"
      },
      {
        "sha": "f7b9d073ed27c97d4c48613d547c3c937cec7d84",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "patch": "@@ -4187,8 +4187,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n                             BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n-                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                                pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n                         }\n                         // else\n                             // no response\n@@ -5568,7 +5567,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n-                if (pto->setInventoryKnown.count(inv))\n+                if (inv.type == MSG_TX && pto->filterInventoryKnown.contains(inv.hash))\n                     continue;\n \n                 // trickle out tx inv to protect privacy\n@@ -5589,15 +5588,13 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     }\n                 }\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n+                pto->filterInventoryKnown.insert(inv.hash);\n+\n+                vInv.push_back(inv);\n+                if (vInv.size() >= 1000)\n                 {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n-                    {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n-                    }\n+                    pto->PushMessage(\"inv\", vInv);\n+                    vInv.clear();\n                 }\n             }\n             pto->vInventoryToSend = vInvWait;"
      },
      {
        "sha": "398aa173bf1e3c788e35a388116becc16d7ba201",
        "filename": "src/mruset.h",
        "status": "removed",
        "additions": 0,
        "deletions": 65,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba25d28868146d5d6dbd671881db3a58f549567/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba25d28868146d5d6dbd671881db3a58f549567/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=6ba25d28868146d5d6dbd671881db3a58f549567",
        "patch": "@@ -1,65 +0,0 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_MRUSET_H\n-#define BITCOIN_MRUSET_H\n-\n-#include <set>\n-#include <vector>\n-#include <utility>\n-\n-/** STL-like set container that only keeps the most recent N elements. */\n-template <typename T>\n-class mruset\n-{\n-public:\n-    typedef T key_type;\n-    typedef T value_type;\n-    typedef typename std::set<T>::iterator iterator;\n-    typedef typename std::set<T>::const_iterator const_iterator;\n-    typedef typename std::set<T>::size_type size_type;\n-\n-protected:\n-    std::set<T> set;\n-    std::vector<iterator> order;\n-    size_type first_used;\n-    size_type first_unused;\n-    const size_type nMaxSize;\n-\n-public:\n-    mruset(size_type nMaxSizeIn = 1) : nMaxSize(nMaxSizeIn) { clear(); }\n-    iterator begin() const { return set.begin(); }\n-    iterator end() const { return set.end(); }\n-    size_type size() const { return set.size(); }\n-    bool empty() const { return set.empty(); }\n-    iterator find(const key_type& k) const { return set.find(k); }\n-    size_type count(const key_type& k) const { return set.count(k); }\n-    void clear()\n-    {\n-        set.clear();\n-        order.assign(nMaxSize, set.end());\n-        first_used = 0;\n-        first_unused = 0;\n-    }\n-    bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }\n-    bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }\n-    bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }\n-    std::pair<iterator, bool> insert(const key_type& x)\n-    {\n-        std::pair<iterator, bool> ret = set.insert(x);\n-        if (ret.second) {\n-            if (set.size() == nMaxSize + 1) {\n-                set.erase(order[first_used]);\n-                order[first_used] = set.end();\n-                if (++first_used == nMaxSize) first_used = 0;\n-            }\n-            order[first_unused] = ret.first;\n-            if (++first_unused == nMaxSize) first_unused = 0;\n-        }\n-        return ret;\n-    }\n-    size_type max_size() const { return nMaxSize; }\n-};\n-\n-#endif // BITCOIN_MRUSET_H"
      },
      {
        "sha": "a8aa97feec10457c3f3c0236a577ad13f814bc43",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "patch": "@@ -2342,7 +2342,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAX\n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addrKnown(5000, 0.001),\n-    setInventoryKnown(SendBufferSize() / 1000)\n+    filterInventoryKnown(50000, 0.000001)\n {\n     nServices = 0;\n     hSocket = hSocketIn;\n@@ -2369,6 +2369,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nSendOffset = 0;\n     hashContinue = uint256();\n     nStartingHeight = -1;\n+    filterInventoryKnown.reset();\n     fGetAddr = false;\n     fRelayTxes = false;\n     pfilter = new CBloomFilter();"
      },
      {
        "sha": "6886d070bf5f1822eb3e65c9679e2b641ffb2725",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f31955d9da152e5e849575f0297f8fe1904cbfbc/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "patch": "@@ -9,7 +9,6 @@\n #include \"bloom.h\"\n #include \"compat.h\"\n #include \"limitedmap.h\"\n-#include \"mruset.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n #include \"random.h\"\n@@ -388,7 +387,7 @@ class CNode\n     std::set<uint256> setKnown;\n \n     // inventory based relay\n-    mruset<CInv> setInventoryKnown;\n+    CRollingBloomFilter filterInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n@@ -497,16 +496,17 @@ class CNode\n     {\n         {\n             LOCK(cs_inventory);\n-            setInventoryKnown.insert(inv);\n+            filterInventoryKnown.insert(inv.hash);\n         }\n     }\n \n     void PushInventory(const CInv& inv)\n     {\n         {\n             LOCK(cs_inventory);\n-            if (!setInventoryKnown.count(inv))\n-                vInventoryToSend.push_back(inv);\n+            if (inv.type == MSG_TX && filterInventoryKnown.contains(inv.hash))\n+                return;\n+            vInventoryToSend.push_back(inv);\n         }\n     }\n "
      },
      {
        "sha": "2b68f8899eea83a3eee676deaf7a62e549aeb290",
        "filename": "src/test/mruset_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 81,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba25d28868146d5d6dbd671881db3a58f549567/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba25d28868146d5d6dbd671881db3a58f549567/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=6ba25d28868146d5d6dbd671881db3a58f549567",
        "patch": "@@ -1,81 +0,0 @@\n-// Copyright (c) 2012-2013 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"mruset.h\"\n-\n-#include \"random.h\"\n-#include \"util.h\"\n-#include \"test/test_bitcoin.h\"\n-\n-#include <set>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-#define NUM_TESTS 16\n-#define MAX_SIZE 100\n-\n-using namespace std;\n-\n-BOOST_FIXTURE_TEST_SUITE(mruset_tests, BasicTestingSetup)\n-\n-BOOST_AUTO_TEST_CASE(mruset_test)\n-{\n-    // The mruset being tested.\n-    mruset<int> mru(5000);\n-\n-    // Run the test 10 times.\n-    for (int test = 0; test < 10; test++) {\n-        // Reset mru.\n-        mru.clear();\n-\n-        // A deque + set to simulate the mruset.\n-        std::deque<int> rep;\n-        std::set<int> all;\n-\n-        // Insert 10000 random integers below 15000.\n-        for (int j=0; j<10000; j++) {\n-            int add = GetRandInt(15000);\n-            mru.insert(add);\n-\n-            // Add the number to rep/all as well.\n-            if (all.count(add) == 0) {\n-               all.insert(add);\n-               rep.push_back(add);\n-               if (all.size() == 5001) {\n-                   all.erase(rep.front());\n-                   rep.pop_front();\n-               }\n-            }\n-\n-            // Do a full comparison between mru and the simulated mru every 1000 and every 5001 elements.\n-            if (j % 1000 == 0 || j % 5001 == 0) {\n-                mruset<int> mru2 = mru; // Also try making a copy\n-\n-                // Check that all elements that should be in there, are in there.\n-                BOOST_FOREACH(int x, rep) {\n-                    BOOST_CHECK(mru.count(x));\n-                    BOOST_CHECK(mru2.count(x));\n-                }\n-\n-                // Check that all elements that are in there, should be in there.\n-                BOOST_FOREACH(int x, mru) {\n-                    BOOST_CHECK(all.count(x));\n-                }\n-\n-                // Check that all elements that are in there, should be in there.\n-                BOOST_FOREACH(int x, mru2) {\n-                    BOOST_CHECK(all.count(x));\n-                }\n-\n-                for (int t = 0; t < 10; t++) {\n-                    int r = GetRandInt(15000);\n-                    BOOST_CHECK(all.count(r) == mru.count(r));\n-                    BOOST_CHECK(all.count(r) == mru2.count(r));\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "82aff880d32f73bae28aa2cc071348ada603159b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmFmZjg4MGQzMmY3M2JhZTI4YWEyY2MwNzEzNDhhZGE2MDMxNTli",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-05T09:45:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-07T11:35:20Z"
      },
      "message": "Don't do mempool lookups for \"mempool\" command without a filter\n\nGithub-Pull: #7174\nRebased-From: 96918a2f0990a8207d7631b8de73af8ae5d24aeb",
      "tree": {
        "sha": "1bb98065cd832afa6a9a35ec828a53d35580abcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb98065cd832afa6a9a35ec828a53d35580abcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82aff880d32f73bae28aa2cc071348ada603159b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWZW76AAoJEHSBCwEjRsmmNlgH/3cMKD3oefRCNkZGps5gkTuW\nAjcPsab98wPdggG4pqFsuxes49FSMbWSChx0FAPcoeH/3I1+cWmXYUsJHFttntkS\njn6uTAJs6DjIPOfiDgEgJ7A9/RzExxflkfIW5cjiiI3G91540nav8GCkJQF0ye7A\n5Uo/OTcrzjZpovN7zpc+SRrLKwjzjnHI3mFYLIFGNPMbQPHDnF9QHjHpL0qwCQBx\n93Pck7zLyTAttbu3H3vXyZawE8NHUNO8eopX7CycH0/kNaBgYZKTNXO1K+a9cr8z\nOsbYwY4pjNeS+zWP6UZ+iL4k2/IYDPV/Bf7f3EcKjwwb0wNFmeeNNTXpfEt72qA=\n=5UKI\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bb98065cd832afa6a9a35ec828a53d35580abcc\nparent f31955d9da152e5e849575f0297f8fe1904cbfbc\nauthor Matt Corallo <git@bluematt.me> 1449308744 +0800\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449488120 +0100\n\nDon't do mempool lookups for \"mempool\" command without a filter\n\nGithub-Pull: #7174\nRebased-From: 96918a2f0990a8207d7631b8de73af8ae5d24aeb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82aff880d32f73bae28aa2cc071348ada603159b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82aff880d32f73bae28aa2cc071348ada603159b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82aff880d32f73bae28aa2cc071348ada603159b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f31955d9da152e5e849575f0297f8fe1904cbfbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f31955d9da152e5e849575f0297f8fe1904cbfbc"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "20e59b9dd447162409beb7bd465b75699f3a73d8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82aff880d32f73bae28aa2cc071348ada603159b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82aff880d32f73bae28aa2cc071348ada603159b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=82aff880d32f73bae28aa2cc071348ada603159b",
        "patch": "@@ -4994,12 +4994,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<CInv> vInv;\n         BOOST_FOREACH(uint256& hash, vtxid) {\n             CInv inv(MSG_TX, hash);\n-            CTransaction tx;\n-            bool fInMemPool = mempool.lookup(hash, tx);\n-            if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n-            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx)) ||\n-               (!pfrom->pfilter))\n-                vInv.push_back(inv);\n+            if (pfrom->pfilter) {\n+                CTransaction tx;\n+                bool fInMemPool = mempool.lookup(hash, tx);\n+                if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n+                if (!pfrom->pfilter->IsRelevantAndUpdate(tx)) continue;\n+            }\n+            vInv.push_back(inv);\n             if (vInv.size() == MAX_INV_SZ) {\n                 pfrom->PushMessage(\"inv\", vInv);\n                 vInv.clear();"
      }
    ]
  },
  {
    "sha": "b2d7ada3727f026ccd83d3d64c75aab660d8053e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmQ3YWRhMzcyN2YwMjZjY2Q4M2QzZDY0Yzc1YWFiNjYwZDgwNTNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-04T12:10:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-07T11:45:14Z"
      },
      "message": "test: remove necessity to call create_callback_map\n\nRemove necessity to call create_callback_map (as well as the function\nitself) from the Python P2P test framework. Invoke the appropriate\nmethods directly.\n\n- Easy to forget to call it and wonder why it doesn't work\n- Simplifies the code\n- This makes it easier to handle new messages in subclasses\n\nGithub-Pull: #7171\nRebased-From: 2f601d215da1683ae99ab9973219044c32fa2093",
      "tree": {
        "sha": "142613073843d1f0f9ba82a3a56a116734081513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142613073843d1f0f9ba82a3a56a116734081513"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2d7ada3727f026ccd83d3d64c75aab660d8053e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWZXFLAAoJEHSBCwEjRsmmQukH/2vQLf5t0Iy6N+cGnN0SqkzL\nXugHgDfH7nAIcGXuMUspaz0DPUO4plaIeEab/yw8zBG33R8DYDjC2+SQKXbNbqIO\noatsAwc8t0+P3XtYdwzxASzpTQWB5JtJShmL7uxV097IYbVrwsPJicrYmU0D6bX3\nM3tZ+V1xjR/EVjYELO7/1ibCk4MtFyBC+4jtV2yyvgdzbCscISGH6ISQ4guMLp2k\n7UBwpszT0NCUY2c0xZgh8zQKMPjz0d9wleYSbIFve4zvp7UFzI8qceLUFanNYd7X\nBqWk+NcVGfvcfb2nIiHbdbMTVRLptTnftV5NxiPKYjjc2ds+9X5t05wpWVmBFAE=\n=oWgj\n-----END PGP SIGNATURE-----",
        "payload": "tree 142613073843d1f0f9ba82a3a56a116734081513\nparent 82aff880d32f73bae28aa2cc071348ada603159b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1449231058 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449488714 +0100\n\ntest: remove necessity to call create_callback_map\n\nRemove necessity to call create_callback_map (as well as the function\nitself) from the Python P2P test framework. Invoke the appropriate\nmethods directly.\n\n- Easy to forget to call it and wonder why it doesn't work\n- Simplifies the code\n- This makes it easier to handle new messages in subclasses\n\nGithub-Pull: #7171\nRebased-From: 2f601d215da1683ae99ab9973219044c32fa2093\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2d7ada3727f026ccd83d3d64c75aab660d8053e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2d7ada3727f026ccd83d3d64c75aab660d8053e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2d7ada3727f026ccd83d3d64c75aab660d8053e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82aff880d32f73bae28aa2cc071348ada603159b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82aff880d32f73bae28aa2cc071348ada603159b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82aff880d32f73bae28aa2cc071348ada603159b"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 2,
      "deletions": 32
    },
    "files": [
      {
        "sha": "651b01f18a4711b1dacc8b9e7408fbc896e1be48",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "patch": "@@ -47,10 +47,7 @@ implements the test logic.\n * ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n a callback class that derives from ```NodeConnCB``` and pass that to the\n ```NodeConn``` object, your code will receive the appropriate callbacks when\n-events of interest arrive.  NOTE: be sure to call\n-```self.create_callback_map()``` in your derived classes' ```__init__```\n-function, so that the correct mappings are set up between p2p messages and your\n-callback functions.\n+events of interest arrive.\n \n * You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n different ones to each -- whatever makes the most sense for your test."
      },
      {
        "sha": "1a9ae480abffd77fad8e7a8620c7b2329f7bf631",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "patch": "@@ -34,7 +34,6 @@ def on_close(self, conn):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n         self.log = logging.getLogger(\"BlockRelayTest\")\n-        self.create_callback_map()\n \n     def add_new_connection(self, connection):\n         self.connection = connection"
      },
      {
        "sha": "249663779c3c9e488fd92ccb518b437967411048",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "patch": "@@ -25,7 +25,6 @@\n class TestNode(NodeConnCB):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "23872d8494a7c3d310c00532358be2cfb4357259",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "patch": "@@ -62,7 +62,6 @@\n class TestNode(NodeConnCB):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.connection = None\n         self.ping_counter = 1\n         self.last_pong = msg_pong()"
      },
      {
        "sha": "e6e26dbce3c82820b5c0632763789fc234e53a54",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "patch": "@@ -70,7 +70,6 @@\n class BaseNode(NodeConnCB):\n     def __init__(self):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.connection = None\n         self.last_inv = None\n         self.last_headers = None"
      },
      {
        "sha": "9444424dcf633e8303e8d1893d92b4f0df26104a",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "patch": "@@ -45,7 +45,6 @@ class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n         NodeConnCB.__init__(self)\n-        self.create_callback_map()\n         self.conn = None\n         self.bestblockhash = None\n         self.block_store = block_store"
      },
      {
        "sha": "9d0fb713a13925f274d0b853d7a08c98156c93d8",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d7ada3727f026ccd83d3d64c75aab660d8053e/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "patch": "@@ -1015,32 +1015,10 @@ def wait_for_verack(self):\n                     return\n             time.sleep(0.05)\n \n-    # Derived classes should call this function once to set the message map\n-    # which associates the derived classes' functions to incoming messages\n-    def create_callback_map(self):\n-        self.cbmap = {\n-            \"version\": self.on_version,\n-            \"verack\": self.on_verack,\n-            \"addr\": self.on_addr,\n-            \"alert\": self.on_alert,\n-            \"inv\": self.on_inv,\n-            \"getdata\": self.on_getdata,\n-            \"getblocks\": self.on_getblocks,\n-            \"tx\": self.on_tx,\n-            \"block\": self.on_block,\n-            \"getaddr\": self.on_getaddr,\n-            \"ping\": self.on_ping,\n-            \"pong\": self.on_pong,\n-            \"headers\": self.on_headers,\n-            \"getheaders\": self.on_getheaders,\n-            \"reject\": self.on_reject,\n-            \"mempool\": self.on_mempool\n-        }\n-\n     def deliver(self, conn, message):\n         with mininode_lock:\n             try:\n-                self.cbmap[message.command](conn, message)\n+                getattr(self, 'on_' + message.command)(conn, message)\n             except:\n                 print \"ERROR delivering %s (%s)\" % (repr(message),\n                                                     sys.exc_info()[0])"
      }
    ]
  },
  {
    "sha": "96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmU4ZDEyMDMzNmNmNDMxMmNkNWY0MmJhMmY5YWZmMTdkNGFkNDE0",
    "commit": {
      "author": {
        "name": "AlSzacrel",
        "email": "alszacrel@web.de",
        "date": "2014-09-13T00:09:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-08T09:25:58Z"
      },
      "message": "Coinselection prunes extraneous inputs from ApproximateBestSubset\n\nThis is a combination of 3 commits.\n\n- Coinselection prunes extraneous inputs from ApproximateBestSubset\n  A further pass over the available inputs has been added to ApproximateBestSubset after a candidate set has been found. It will prune any extraneous inputs in the selected subset, in order to decrease the number of input and the resulting change.\n- Moved set reduction to the end of ApproximateBestSubset to reduce performance impact\n- Added a test for the pruning of extraneous inputs after ApproximateBestSet\n\nGithub-Pull: #4906\nRebased-From: 5c03483e26ab414d22ef192691b2336c1bb3cb02 af9510e0374443b093d633a91c4f1f8bf5071292 fc0f52d78085b6ef97d6821fc7592326c2d9b495",
      "tree": {
        "sha": "9b2702948b636f36f5472dac8519771ac265ee2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b2702948b636f36f5472dac8519771ac265ee2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWZqInAAoJEHSBCwEjRsmmS5UH/3IwWqstmOqXTvmoZiUld2iY\nrLpZBKrlYQ/9ftQZBLhrwUr02arfofDZdpe314NS9xqXQIt0joiw6EgIZL8jgMv0\nA4PsBivqj8jLpglMrd6x7Q576VgCsBDcHjNXhYetGisiy9p3LdtJ4S5Eex4ZyFI2\nIO9tM4PF9KiPYu+R/KnuHknPjFDekr97HDWtCEx/TLTyx2GKYk9UBNR64GwaIjuM\nBSai1fIJXY8HavJJARG+HmBkZKMYEGBiiA6Gh/QzG9vXHXm0ISaVxbZtundl2D/q\nONnG79VCSIPE0+p5QvWfzoIyVGsFVKLYGlHAx/8pqJnmrwegfk8HSgqob0AoVWo=\n=3IB1\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b2702948b636f36f5472dac8519771ac265ee2a\nparent b2d7ada3727f026ccd83d3d64c75aab660d8053e\nauthor AlSzacrel <alszacrel@web.de> 1410566958 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449566758 +0100\n\nCoinselection prunes extraneous inputs from ApproximateBestSubset\n\nThis is a combination of 3 commits.\n\n- Coinselection prunes extraneous inputs from ApproximateBestSubset\n  A further pass over the available inputs has been added to ApproximateBestSubset after a candidate set has been found. It will prune any extraneous inputs in the selected subset, in order to decrease the number of input and the resulting change.\n- Moved set reduction to the end of ApproximateBestSubset to reduce performance impact\n- Added a test for the pruning of extraneous inputs after ApproximateBestSet\n\nGithub-Pull: #4906\nRebased-From: 5c03483e26ab414d22ef192691b2336c1bb3cb02 af9510e0374443b093d633a91c4f1f8bf5071292 fc0f52d78085b6ef97d6821fc7592326c2d9b495\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96e8d120336cf4312cd5f42ba2f9aff17d4ad414/comments",
    "author": {
      "login": "Xekyo",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Xekyo",
      "html_url": "https://github.com/Xekyo",
      "followers_url": "https://api.github.com/users/Xekyo/followers",
      "following_url": "https://api.github.com/users/Xekyo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Xekyo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
      "organizations_url": "https://api.github.com/users/Xekyo/orgs",
      "repos_url": "https://api.github.com/users/Xekyo/repos",
      "events_url": "https://api.github.com/users/Xekyo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Xekyo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2d7ada3727f026ccd83d3d64c75aab660d8053e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2d7ada3727f026ccd83d3d64c75aab660d8053e"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5e8ccd90ab1ec87f5e1303dc3bbedb92a81bf1a2",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96e8d120336cf4312cd5f42ba2f9aff17d4ad414/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96e8d120336cf4312cd5f42ba2f9aff17d4ad414/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
        "patch": "@@ -328,4 +328,22 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n     empty_wallet();\n }\n \n+BOOST_AUTO_TEST_CASE(pruning_in_ApproximateBestSet)\n+{\n+    CoinSet setCoinsRet;\n+    CAmount nValueRet;\n+\n+    LOCK(wallet.cs_wallet);\n+\n+    empty_wallet();\n+    for (int i = 0; i < 12; i++) \n+    {\n+        add_coin(10*CENT);\n+    }\n+    add_coin(100*CENT);\n+    add_coin(100*CENT);\n+    BOOST_CHECK(wallet.SelectCoinsMinConf(221*CENT, 1, 6, vCoins, setCoinsRet, nValueRet));\n+    BOOST_CHECK_EQUAL(nValueRet, 230*CENT);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a262769c4d791735d79cf55d8818c9a327326ffb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96e8d120336cf4312cd5f42ba2f9aff17d4ad414/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96e8d120336cf4312cd5f42ba2f9aff17d4ad414/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
        "patch": "@@ -1632,6 +1632,16 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n             }\n         }\n     }\n+\n+    //Reduces the approximate best subset by removing any inputs that are smaller than the surplus of nTotal beyond nTargetValue. \n+    for (unsigned int i = 0; i < vValue.size(); i++)\n+    {                        \n+        if (vfBest[i] && (nBest - vValue[i].first) >= nTargetValue )\n+        {\n+            vfBest[i] = false;\n+            nBest -= vValue[i].first;\n+        }\n+    }\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,"
      }
    ]
  },
  {
    "sha": "44fef99e666e85caa7616765412d7becf97ab673",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGZlZjk5ZTY2NmU4NWNhYTc2MTY3NjU0MTJkN2JlY2Y5N2FiNjcz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-07T13:47:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-10T10:59:34Z"
      },
      "message": "net: Fix sent reject messages for blocks and transactions\n\nEver since we #5913 have been sending invalid reject messages\nfor transactions and blocks.\n\ntest: Add basic test for `reject` code\n\nExtend P2P test framework to make it possible to expect reject\ncodes for transactions and blocks.\n\nGithub-Pull: #7179\nRebased-From: 9fc6ed6003da42f035309240c715ce0fd063ec03 20411903d7b356ebb174df2daad1dcd5d6117f79",
      "tree": {
        "sha": "f0be071118b4b847463f12458347d8bd8577dca7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0be071118b4b847463f12458347d8bd8577dca7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44fef99e666e85caa7616765412d7becf97ab673",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44fef99e666e85caa7616765412d7becf97ab673",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44fef99e666e85caa7616765412d7becf97ab673",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44fef99e666e85caa7616765412d7becf97ab673/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96e8d120336cf4312cd5f42ba2f9aff17d4ad414",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96e8d120336cf4312cd5f42ba2f9aff17d4ad414"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 123,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0cb721b033ae0db81a30ccd0566b4c2d15640dfb",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fef99e666e85caa7616765412d7becf97ab673/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fef99e666e85caa7616765412d7becf97ab673/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=44fef99e666e85caa7616765412d7becf97ab673",
        "patch": "@@ -100,6 +100,8 @@\n     'sendheaders.py',\n     'keypool.py',\n     'prioritise_transaction.py',\n+    'invalidblockrequest.py',\n+    'invalidtxrequest.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',\n@@ -116,7 +118,6 @@\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n     'smartfees.py',\n     'maxblocksinflight.py',\n-    'invalidblockrequest.py',\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n     'maxuploadtarget.py',"
      },
      {
        "sha": "a74ecb1288ba203b11367edc80ff47638befbeac",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fef99e666e85caa7616765412d7becf97ab673/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fef99e666e85caa7616765412d7becf97ab673/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=44fef99e666e85caa7616765412d7becf97ab673",
        "patch": "@@ -6,7 +6,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance\n+from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.mininode import *\n from test_framework.blocktools import *\n import logging\n@@ -97,7 +97,7 @@ def get_tests(self):\n         assert(block2_orig.vtx != block2.vtx)\n \n         self.tip = block2.sha256\n-        yield TestInstance([[block2, False], [block2_orig, True]])\n+        yield TestInstance([[block2, RejectResult(16,'bad-txns-duplicate')], [block2_orig, True]])\n         height += 1\n \n         '''\n@@ -112,7 +112,7 @@ def get_tests(self):\n         block3.rehash()\n         block3.solve()\n \n-        yield TestInstance([[block3, False]])\n+        yield TestInstance([[block3, RejectResult(16,'bad-cb-amount')]])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "d17b3d0980b505436685fe5e82ae21a99fbba362",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fef99e666e85caa7616765412d7becf97ab673/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fef99e666e85caa7616765412d7becf97ab673/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=44fef99e666e85caa7616765412d7becf97ab673",
        "patch": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.comptool import TestManager, TestInstance, RejectResult\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+import logging\n+import copy\n+import time\n+\n+\n+'''\n+In this test we connect to one node over p2p, and test tx requests.\n+'''\n+\n+# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n+class InvalidTxRequestTest(ComparisonTestFramework):\n+\n+    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n+        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        self.tip = None\n+        self.block_time = None\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def get_tests(self):\n+        if self.tip is None:\n+            self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.block_time = int(time.time())+1\n+\n+        '''\n+        Create a new block with an anyone-can-spend coinbase\n+        '''\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height), self.block_time)\n+        self.block_time += 1\n+        block.solve()\n+        # Save the coinbase for later\n+        self.block1 = block\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Now we need that block to mature so we can spend the coinbase.\n+        '''\n+        test = TestInstance(sync_every_block=False)\n+        for i in xrange(100):\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n+            block.solve()\n+            self.tip = block.sha256\n+            self.block_time += 1\n+            test.blocks_and_transactions.append([block, True])\n+            height += 1\n+        yield test\n+\n+        # chr(100) is OP_NOTIF\n+        # Transaction will be rejected with code 16 (REJECT_INVALID)\n+        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50*100000000)\n+        yield TestInstance([[tx1, RejectResult(16, 'mandatory-script-verify-flag-failed')]])\n+\n+        # TODO: test further transactions...\n+\n+if __name__ == '__main__':\n+    InvalidTxRequestTest().main()"
      },
      {
        "sha": "badbc0a1fbcdea76c45e811b2c5ec2c317c72b9c",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fef99e666e85caa7616765412d7becf97ab673/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fef99e666e85caa7616765412d7becf97ab673/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=44fef99e666e85caa7616765412d7becf97ab673",
        "patch": "@@ -41,6 +41,20 @@ def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n \n     return False\n \n+class RejectResult(object):\n+    '''\n+    Outcome that expects rejection of a transaction or block.\n+    '''\n+    def __init__(self, code, reason=''):\n+        self.code = code\n+        self.reason = reason\n+    def match(self, other):\n+        if self.code != other.code:\n+            return False\n+        return other.reason.startswith(self.reason)\n+    def __repr__(self):\n+        return '%i:%s' % (self.code,self.reason or '*')\n+\n class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n@@ -51,6 +65,8 @@ def __init__(self, block_store, tx_store):\n         self.block_request_map = {}\n         self.tx_store = tx_store\n         self.tx_request_map = {}\n+        self.block_reject_map = {}\n+        self.tx_reject_map = {}\n \n         # When the pingmap is non-empty we're waiting for \n         # a response\n@@ -94,6 +110,12 @@ def on_pong(self, conn, message):\n         except KeyError:\n             raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n \n+    def on_reject(self, conn, message):\n+        if message.message == 'tx':\n+            self.tx_reject_map[message.data] = RejectResult(message.code, message.reason)\n+        if message.message == 'block':\n+            self.block_reject_map[message.data] = RejectResult(message.code, message.reason)\n+\n     def send_inv(self, obj):\n         mtype = 2 if isinstance(obj, CBlock) else 1\n         self.conn.send_message(msg_inv([CInv(mtype, obj.sha256)]))\n@@ -243,6 +265,15 @@ def check_results(self, blockhash, outcome):\n                 if outcome is None:\n                     if c.cb.bestblockhash != self.connections[0].cb.bestblockhash:\n                         return False\n+                elif isinstance(outcome, RejectResult): # Check that block was rejected w/ code\n+                    if c.cb.bestblockhash == blockhash:\n+                        return False\n+                    if blockhash not in c.cb.block_reject_map:\n+                        print 'Block not in reject map: %064x' % (blockhash)\n+                        return False\n+                    if not outcome.match(c.cb.block_reject_map[blockhash]):\n+                        print 'Block rejected with %s instead of expected %s: %064x' % (c.cb.block_reject_map[blockhash], outcome, blockhash)\n+                        return False\n                 elif ((c.cb.bestblockhash == blockhash) != outcome):\n                     # print c.cb.bestblockhash, blockhash, outcome\n                     return False\n@@ -262,6 +293,15 @@ def check_mempool(self, txhash, outcome):\n                     if c.cb.lastInv != self.connections[0].cb.lastInv:\n                         # print c.rpc.getrawmempool()\n                         return False\n+                elif isinstance(outcome, RejectResult): # Check that tx was rejected w/ code\n+                    if txhash in c.cb.lastInv:\n+                        return False\n+                    if txhash not in c.cb.tx_reject_map:\n+                        print 'Tx not in reject map: %064x' % (txhash)\n+                        return False\n+                    if not outcome.match(c.cb.tx_reject_map[txhash]):\n+                        print 'Tx rejected with %s instead of expected %s: %064x' % (c.cb.tx_reject_map[txhash], outcome, txhash)\n+                        return False\n                 elif ((txhash in c.cb.lastInv) != outcome):\n                     # print c.rpc.getrawmempool(), c.cb.lastInv\n                     return False"
      },
      {
        "sha": "d6fadd10b2f457b1e499dd94b0b53e5614d9ebd6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fef99e666e85caa7616765412d7becf97ab673/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fef99e666e85caa7616765412d7becf97ab673/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=44fef99e666e85caa7616765412d7becf97ab673",
        "patch": "@@ -4824,7 +4824,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 pfrom->id,\n                 FormatStateMessage(state));\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n-                pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                pfrom->PushMessage(\"reject\", strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n@@ -4954,7 +4954,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+            pfrom->PushMessage(\"reject\", strCommand, (unsigned char)state.GetRejectCode(),\n                                state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {\n                 LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "8fc174aae64882d43549ad57bece0c23805e567b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmMxNzRhYWU2NDg4MmQ0MzU0OWFkNTdiZWNlMGMyMzgwNWU1Njdi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-07T14:31:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-11T10:18:50Z"
      },
      "message": "net: Add and document network messages in protocol.h\n\n- Avoids string typos (by making the compiler check)\n- Makes it easier to grep for handling/generation of a certain message type\n- Refer directly to documentation by following the symbol in IDE\n- Move list of valid message types to protocol.cpp:\n    protocol.cpp is a more appropriate place for this, and having\n    the array there makes it easier to keep things consistent.\n\nGithub-Pull: #7181\nRebased-From: 9bbe71b641e2fc985daf127988a14a67c99da50a",
      "tree": {
        "sha": "8355916a07305d3b08bd9ec83c1309821901bd02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8355916a07305d3b08bd9ec83c1309821901bd02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fc174aae64882d43549ad57bece0c23805e567b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWaqMYAAoJEHSBCwEjRsmmcdQIAMvK2eWokKU8ZxJkwzUGBupz\n0BhvakbGC/UtSX+gOgTrVQbTgu/D4SWXmHTqbLnUFaTkeEXkukGTi1tpd9DvIDUJ\nG2I9e06sTGVaqNSzT4sXXNla0ewtVihBQH8ovvbkx7AQ5AQFG4P2xrlqTp+8oKH4\nmjlI5MHizJ6D8jr6/JEd4/Duj0lNrvEHg0HjNEl6wudgiW+vmYppsjcYFhWD+ff/\nKQ1fvKr7Cp344dKswulszLkJu4mY+Ke79yI7Lx04CSeheatXmABG8GcqKX1IL1St\ni93PqnstMW7iy/fJQ+dALzq1lCBClJsp5qCvzQetMV5B50X+MgR+vBXR9/OsVSY=\n=lACb\n-----END PGP SIGNATURE-----",
        "payload": "tree 8355916a07305d3b08bd9ec83c1309821901bd02\nparent 44fef99e666e85caa7616765412d7becf97ab673\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1449498692 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1449829130 +0100\n\nnet: Add and document network messages in protocol.h\n\n- Avoids string typos (by making the compiler check)\n- Makes it easier to grep for handling/generation of a certain message type\n- Refer directly to documentation by following the symbol in IDE\n- Move list of valid message types to protocol.cpp:\n    protocol.cpp is a more appropriate place for this, and having\n    the array there makes it easier to keep things consistent.\n\nGithub-Pull: #7181\nRebased-From: 9bbe71b641e2fc985daf127988a14a67c99da50a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc174aae64882d43549ad57bece0c23805e567b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc174aae64882d43549ad57bece0c23805e567b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc174aae64882d43549ad57bece0c23805e567b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44fef99e666e85caa7616765412d7becf97ab673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44fef99e666e85caa7616765412d7becf97ab673",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44fef99e666e85caa7616765412d7becf97ab673"
      }
    ],
    "stats": {
      "total": 344,
      "additions": 281,
      "deletions": 63
    },
    "files": [
      {
        "sha": "b705069407e54e7162b5bd4cc01bd7d6ef923ba0",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc174aae64882d43549ad57bece0c23805e567b/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc174aae64882d43549ad57bece0c23805e567b/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=8fc174aae64882d43549ad57bece0c23805e567b",
        "patch": "@@ -138,7 +138,7 @@ bool CAlert::RelayTo(CNode* pnode) const\n             AppliesToMe() ||\n             GetAdjustedTime() < nRelayUntil)\n         {\n-            pnode->PushMessage(\"alert\", *this);\n+            pnode->PushMessage(NetMsgType::ALERT, *this);\n             return true;\n         }\n     }"
      },
      {
        "sha": "d965f67a7b0b058e826d5fe4bb87176bdeef62ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 57,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc174aae64882d43549ad57bece0c23805e567b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc174aae64882d43549ad57bece0c23805e567b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8fc174aae64882d43549ad57bece0c23805e567b",
        "patch": "@@ -4171,14 +4171,14 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     if (!ReadBlockFromDisk(block, (*mi).second, consensusParams))\n                         assert(!\"cannot load block from disk\");\n                     if (inv.type == MSG_BLOCK)\n-                        pfrom->PushMessage(\"block\", block);\n+                        pfrom->PushMessage(NetMsgType::BLOCK, block);\n                     else // MSG_FILTERED_BLOCK)\n                     {\n                         LOCK(pfrom->cs_filter);\n                         if (pfrom->pfilter)\n                         {\n                             CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n-                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n+                            pfrom->PushMessage(NetMsgType::MERKLEBLOCK, merkleBlock);\n                             // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n                             // This avoids hurting performance by pointlessly requiring a round-trip\n                             // Note that there is currently no way for a node to request any single transactions we didn't send here -\n@@ -4187,7 +4187,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n                             BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                                pfrom->PushMessage(NetMsgType::TX, block.vtx[pair.first]);\n                         }\n                         // else\n                             // no response\n@@ -4201,7 +4201,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // wait for other stuff first.\n                         vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n-                        pfrom->PushMessage(\"inv\", vInv);\n+                        pfrom->PushMessage(NetMsgType::INV, vInv);\n                         pfrom->hashContinue.SetNull();\n                     }\n                 }\n@@ -4224,7 +4224,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n                         ss << tx;\n-                        pfrom->PushMessage(\"tx\", ss);\n+                        pfrom->PushMessage(NetMsgType::TX, ss);\n                         pushed = true;\n                     }\n                 }\n@@ -4251,7 +4251,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         // do that because they want to know about (and store and rebroadcast and\n         // risk analyze) the dependencies of transactions relevant to them, without\n         // having to download the entire memory pool.\n-        pfrom->PushMessage(\"notfound\", vNotFound);\n+        pfrom->PushMessage(NetMsgType::NOTFOUND, vNotFound);\n     }\n }\n \n@@ -4268,9 +4268,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n \n     if (!(nLocalServices & NODE_BLOOM) &&\n-              (strCommand == \"filterload\" ||\n-               strCommand == \"filteradd\" ||\n-               strCommand == \"filterclear\"))\n+              (strCommand == NetMsgType::FILTERLOAD ||\n+               strCommand == NetMsgType::FILTERADD ||\n+               strCommand == NetMsgType::FILTERCLEAR))\n     {\n         if (pfrom->nVersion >= NO_BLOOM_VERSION) {\n             Misbehaving(pfrom->GetId(), 100);\n@@ -4282,12 +4282,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    if (strCommand == \"version\")\n+    if (strCommand == NetMsgType::VERSION)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n         }\n@@ -4301,7 +4301,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             // disconnect from peers older than this proto version\n             LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_OBSOLETE,\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n             pfrom->fDisconnect = true;\n             return false;\n@@ -4346,7 +4346,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n \n         // Change version\n-        pfrom->PushMessage(\"verack\");\n+        pfrom->PushMessage(NetMsgType::VERACK);\n         pfrom->ssSend.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound)\n@@ -4369,7 +4369,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Get recent addresses\n             if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n             {\n-                pfrom->PushMessage(\"getaddr\");\n+                pfrom->PushMessage(NetMsgType::GETADDR);\n                 pfrom->fGetAddr = true;\n             }\n             addrman.Good(pfrom->addr);\n@@ -4413,7 +4413,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"verack\")\n+    else if (strCommand == NetMsgType::VERACK)\n     {\n         pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n \n@@ -4428,12 +4428,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // We send this to non-NODE NETWORK peers as well, because even\n             // non-NODE NETWORK peers can announce blocks (such as pruning\n             // nodes)\n-            pfrom->PushMessage(\"sendheaders\");\n+            pfrom->PushMessage(NetMsgType::SENDHEADERS);\n         }\n     }\n \n \n-    else if (strCommand == \"addr\")\n+    else if (strCommand == NetMsgType::ADDR)\n     {\n         vector<CAddress> vAddr;\n         vRecv >> vAddr;\n@@ -4499,14 +4499,14 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->fDisconnect = true;\n     }\n \n-    else if (strCommand == \"sendheaders\")\n+    else if (strCommand == NetMsgType::SENDHEADERS)\n     {\n         LOCK(cs_main);\n         State(pfrom->GetId())->fPreferHeaders = true;\n     }\n \n \n-    else if (strCommand == \"inv\")\n+    else if (strCommand == NetMsgType::INV)\n     {\n         vector<CInv> vInv;\n         vRecv >> vInv;\n@@ -4547,7 +4547,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // time the block arrives, the header chain leading up to it is already validated. Not\n                     // doing this will result in the received block being rejected as an orphan in case it is\n                     // not a direct successor.\n-                    pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexBestHeader), inv.hash);\n+                    pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n@@ -4577,11 +4577,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         if (!vToFetch.empty())\n-            pfrom->PushMessage(\"getdata\", vToFetch);\n+            pfrom->PushMessage(NetMsgType::GETDATA, vToFetch);\n     }\n \n \n-    else if (strCommand == \"getdata\")\n+    else if (strCommand == NetMsgType::GETDATA)\n     {\n         vector<CInv> vInv;\n         vRecv >> vInv;\n@@ -4602,7 +4602,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"getblocks\")\n+    else if (strCommand == NetMsgType::GETBLOCKS)\n     {\n         CBlockLocator locator;\n         uint256 hashStop;\n@@ -4646,7 +4646,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"getheaders\")\n+    else if (strCommand == NetMsgType::GETHEADERS)\n     {\n         CBlockLocator locator;\n         uint256 hashStop;\n@@ -4691,11 +4691,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // headers message). In both cases it's safe to update\n         // pindexBestHeaderSent to be our tip.\n         nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n-        pfrom->PushMessage(\"headers\", vHeaders);\n+        pfrom->PushMessage(NetMsgType::HEADERS, vHeaders);\n     }\n \n \n-    else if (strCommand == \"tx\")\n+    else if (strCommand == NetMsgType::TX)\n     {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistalwaysrelay is off\n@@ -4824,7 +4824,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 pfrom->id,\n                 FormatStateMessage(state));\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n-                pfrom->PushMessage(\"reject\", strCommand, (unsigned char)state.GetRejectCode(),\n+                pfrom->PushMessage(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n@@ -4833,7 +4833,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"headers\" && !fImporting && !fReindex) // Ignore headers received while importing\n+    else if (strCommand == NetMsgType::HEADERS && !fImporting && !fReindex) // Ignore headers received while importing\n     {\n         std::vector<CBlockHeader> headers;\n \n@@ -4881,7 +4881,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n-            pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256());\n+            pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());\n         }\n \n         bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n@@ -4926,15 +4926,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n-                    pfrom->PushMessage(\"getdata\", vGetData);\n+                    pfrom->PushMessage(NetMsgType::GETDATA, vGetData);\n                 }\n             }\n         }\n \n         CheckBlockIndex(chainparams.GetConsensus());\n     }\n \n-    else if (strCommand == \"block\" && !fImporting && !fReindex) // Ignore blocks received while importing\n+    else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlock block;\n         vRecv >> block;\n@@ -4954,7 +4954,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-            pfrom->PushMessage(\"reject\", strCommand, (unsigned char)state.GetRejectCode(),\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {\n                 LOCK(cs_main);\n@@ -4970,7 +4970,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     // to users' AddrMan and later request them by sending getaddr messages.\n     // Making nodes which are behind NAT and can only make outgoing connections ignore\n     // the getaddr message mitigates the attack.\n-    else if ((strCommand == \"getaddr\") && (pfrom->fInbound))\n+    else if ((strCommand == NetMsgType::GETADDR) && (pfrom->fInbound))\n     {\n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = addrman.GetAddr();\n@@ -4979,7 +4979,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"mempool\")\n+    else if (strCommand == NetMsgType::MEMPOOL)\n     {\n         if (CNode::OutboundTargetReached(false) && !pfrom->fWhitelisted)\n         {\n@@ -5002,16 +5002,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n             vInv.push_back(inv);\n             if (vInv.size() == MAX_INV_SZ) {\n-                pfrom->PushMessage(\"inv\", vInv);\n+                pfrom->PushMessage(NetMsgType::INV, vInv);\n                 vInv.clear();\n             }\n         }\n         if (vInv.size() > 0)\n-            pfrom->PushMessage(\"inv\", vInv);\n+            pfrom->PushMessage(NetMsgType::INV, vInv);\n     }\n \n \n-    else if (strCommand == \"ping\")\n+    else if (strCommand == NetMsgType::PING)\n     {\n         if (pfrom->nVersion > BIP0031_VERSION)\n         {\n@@ -5028,12 +5028,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // it, if the remote node sends a ping once per second and this node takes 5\n             // seconds to respond to each, the 5th ping the remote sends would appear to\n             // return very quickly.\n-            pfrom->PushMessage(\"pong\", nonce);\n+            pfrom->PushMessage(NetMsgType::PONG, nonce);\n         }\n     }\n \n \n-    else if (strCommand == \"pong\")\n+    else if (strCommand == NetMsgType::PONG)\n     {\n         int64_t pingUsecEnd = nTimeReceived;\n         uint64_t nonce = 0;\n@@ -5090,7 +5090,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (fAlerts && strCommand == \"alert\")\n+    else if (fAlerts && strCommand == NetMsgType::ALERT)\n     {\n         CAlert alert;\n         vRecv >> alert;\n@@ -5121,7 +5121,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"filterload\")\n+    else if (strCommand == NetMsgType::FILTERLOAD)\n     {\n         CBloomFilter filter;\n         vRecv >> filter;\n@@ -5140,7 +5140,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"filteradd\")\n+    else if (strCommand == NetMsgType::FILTERADD)\n     {\n         vector<unsigned char> vData;\n         vRecv >> vData;\n@@ -5160,7 +5160,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"filterclear\")\n+    else if (strCommand == NetMsgType::FILTERCLEAR)\n     {\n         LOCK(pfrom->cs_filter);\n         delete pfrom->pfilter;\n@@ -5169,7 +5169,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == \"reject\")\n+    else if (strCommand == NetMsgType::REJECT)\n     {\n         if (fDebug) {\n             try {\n@@ -5179,7 +5179,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 ostringstream ss;\n                 ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n-                if (strMsg == \"block\" || strMsg == \"tx\")\n+                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n                 {\n                     uint256 hash;\n                     vRecv >> hash;\n@@ -5287,7 +5287,7 @@ bool ProcessMessages(CNode* pfrom)\n         }\n         catch (const std::ios_base::failure& e)\n         {\n-            pfrom->PushMessage(\"reject\", strCommand, REJECT_MALFORMED, string(\"error parsing message\"));\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, string(\"error parsing message\"));\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n@@ -5355,11 +5355,11 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->nPingUsecStart = GetTimeMicros();\n             if (pto->nVersion > BIP0031_VERSION) {\n                 pto->nPingNonceSent = nonce;\n-                pto->PushMessage(\"ping\", nonce);\n+                pto->PushMessage(NetMsgType::PING, nonce);\n             } else {\n                 // Peer is too old to support ping command with nonce, pong will never arrive.\n                 pto->nPingNonceSent = 0;\n-                pto->PushMessage(\"ping\");\n+                pto->PushMessage(NetMsgType::PING);\n             }\n         }\n \n@@ -5401,14 +5401,14 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     // receiver rejects addr messages larger than 1000\n                     if (vAddr.size() >= 1000)\n                     {\n-                        pto->PushMessage(\"addr\", vAddr);\n+                        pto->PushMessage(NetMsgType::ADDR, vAddr);\n                         vAddr.clear();\n                     }\n                 }\n             }\n             pto->vAddrToSend.clear();\n             if (!vAddr.empty())\n-                pto->PushMessage(\"addr\", vAddr);\n+                pto->PushMessage(NetMsgType::ADDR, vAddr);\n         }\n \n         CNodeState &state = *State(pto->GetId());\n@@ -5428,7 +5428,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         }\n \n         BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            pto->PushMessage(\"reject\", (string)\"block\", reject.chRejectCode, reject.strRejectReason, reject.hashBlock);\n+            pto->PushMessage(NetMsgType::REJECT, (string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock);\n         state.rejects.clear();\n \n         // Start block sync\n@@ -5451,7 +5451,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n-                pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256());\n+                pto->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256());\n             }\n         }\n \n@@ -5551,7 +5551,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     LogPrint(\"net\", \"%s: sending header %s to peer=%d\\n\", __func__,\n                             vHeaders.front().GetHash().ToString(), pto->id);\n                 }\n-                pto->PushMessage(\"headers\", vHeaders);\n+                pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n                 state.pindexBestHeaderSent = pBestIndex;\n             }\n             pto->vBlockHashesToAnnounce.clear();\n@@ -5594,14 +5594,14 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 vInv.push_back(inv);\n                 if (vInv.size() >= 1000)\n                 {\n-                    pto->PushMessage(\"inv\", vInv);\n+                    pto->PushMessage(NetMsgType::INV, vInv);\n                     vInv.clear();\n                 }\n             }\n             pto->vInventoryToSend = vInvWait;\n         }\n         if (!vInv.empty())\n-            pto->PushMessage(\"inv\", vInv);\n+            pto->PushMessage(NetMsgType::INV, vInv);\n \n         // Detect whether we're stalling\n         int64_t nNow = GetTimeMicros();\n@@ -5670,7 +5670,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {\n-                    pto->PushMessage(\"getdata\", vGetData);\n+                    pto->PushMessage(NetMsgType::GETDATA, vGetData);\n                     vGetData.clear();\n                 }\n             } else {\n@@ -5680,7 +5680,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())\n-            pto->PushMessage(\"getdata\", vGetData);\n+            pto->PushMessage(NetMsgType::GETDATA, vGetData);\n \n     }\n     return true;"
      },
      {
        "sha": "e4db60aec4450e32151b3dd24ab122e37d31d239",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc174aae64882d43549ad57bece0c23805e567b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc174aae64882d43549ad57bece0c23805e567b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8fc174aae64882d43549ad57bece0c23805e567b",
        "patch": "@@ -459,7 +459,7 @@ void CNode::PushVersion()\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n-    PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n+    PushMessage(NetMsgType::VERSION, PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n                 nLocalHostNonce, strSubVersion, nBestHeight, !GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY));\n }\n "
      },
      {
        "sha": "5d3ae87de8bd8ea48a3ec49c4885e68d3f87d35f",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 4,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc174aae64882d43549ad57bece0c23805e567b/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc174aae64882d43549ad57bece0c23805e567b/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=8fc174aae64882d43549ad57bece0c23805e567b",
        "patch": "@@ -12,13 +12,67 @@\n # include <arpa/inet.h>\n #endif\n \n+namespace NetMsgType {\n+const char *VERSION=\"version\";\n+const char *VERACK=\"verack\";\n+const char *ADDR=\"addr\";\n+const char *INV=\"inv\";\n+const char *GETDATA=\"getdata\";\n+const char *MERKLEBLOCK=\"merkleblock\";\n+const char *GETBLOCKS=\"getblocks\";\n+const char *GETHEADERS=\"getheaders\";\n+const char *TX=\"tx\";\n+const char *HEADERS=\"headers\";\n+const char *BLOCK=\"block\";\n+const char *GETADDR=\"getaddr\";\n+const char *MEMPOOL=\"mempool\";\n+const char *PING=\"ping\";\n+const char *PONG=\"pong\";\n+const char *ALERT=\"alert\";\n+const char *NOTFOUND=\"notfound\";\n+const char *FILTERLOAD=\"filterload\";\n+const char *FILTERADD=\"filteradd\";\n+const char *FILTERCLEAR=\"filterclear\";\n+const char *REJECT=\"reject\";\n+const char *SENDHEADERS=\"sendheaders\";\n+};\n+\n static const char* ppszTypeName[] =\n {\n-    \"ERROR\",\n-    \"tx\",\n-    \"block\",\n-    \"filtered block\"\n+    \"ERROR\", // Should never occur\n+    NetMsgType::TX,\n+    NetMsgType::BLOCK,\n+    \"filtered block\" // Should never occur\n+};\n+\n+/** All known message types. Keep this in the same order as the list of\n+ * messages above and in protocol.h.\n+ */\n+const static std::string allNetMessageTypes[] = {\n+    NetMsgType::VERSION,\n+    NetMsgType::VERACK,\n+    NetMsgType::ADDR,\n+    NetMsgType::INV,\n+    NetMsgType::GETDATA,\n+    NetMsgType::MERKLEBLOCK,\n+    NetMsgType::GETBLOCKS,\n+    NetMsgType::GETHEADERS,\n+    NetMsgType::TX,\n+    NetMsgType::HEADERS,\n+    NetMsgType::BLOCK,\n+    NetMsgType::GETADDR,\n+    NetMsgType::MEMPOOL,\n+    NetMsgType::PING,\n+    NetMsgType::PONG,\n+    NetMsgType::ALERT,\n+    NetMsgType::NOTFOUND,\n+    NetMsgType::FILTERLOAD,\n+    NetMsgType::FILTERADD,\n+    NetMsgType::FILTERCLEAR,\n+    NetMsgType::REJECT,\n+    NetMsgType::SENDHEADERS\n };\n+const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n \n CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n {\n@@ -140,3 +194,8 @@ std::string CInv::ToString() const\n {\n     return strprintf(\"%s %s\", GetCommand(), hash.ToString());\n }\n+\n+const std::vector<std::string> &getAllNetMessageTypes()\n+{\n+    return allNetMessageTypesVec;\n+}"
      },
      {
        "sha": "b84c78baca41d251b866063e6528d7d57ece2db2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 159,
        "deletions": 0,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc174aae64882d43549ad57bece0c23805e567b/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc174aae64882d43549ad57bece0c23805e567b/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=8fc174aae64882d43549ad57bece0c23805e567b",
        "patch": "@@ -65,6 +65,165 @@ class CMessageHeader\n     unsigned int nChecksum;\n };\n \n+/**\n+ * Bitcoin protocol message types. When adding new message types, don't forget\n+ * to update allNetMessageTypes in protocol.cpp.\n+ */\n+namespace NetMsgType {\n+\n+/**\n+ * The version message provides information about the transmitting node to the\n+ * receiving node at the beginning of a connection.\n+ * @see https://bitcoin.org/en/developer-reference#version\n+ */\n+extern const char *VERSION;\n+/**\n+ * The verack message acknowledges a previously-received version message,\n+ * informing the connecting node that it can begin to send other messages.\n+ * @see https://bitcoin.org/en/developer-reference#verack\n+ */\n+extern const char *VERACK;\n+/**\n+ * The addr (IP address) message relays connection information for peers on the\n+ * network.\n+ * @see https://bitcoin.org/en/developer-reference#addr\n+ */\n+extern const char *ADDR;\n+/**\n+ * The inv message (inventory message) transmits one or more inventories of\n+ * objects known to the transmitting peer.\n+ * @see https://bitcoin.org/en/developer-reference#inv\n+ */\n+extern const char *INV;\n+/**\n+ * The getdata message requests one or more data objects from another node.\n+ * @see https://bitcoin.org/en/developer-reference#getdata\n+ */\n+extern const char *GETDATA;\n+/**\n+ * The merkleblock message is a reply to a getdata message which requested a\n+ * block using the inventory type MSG_MERKLEBLOCK.\n+ * @since protocol version 70001 as described by BIP37.\n+ * @see https://bitcoin.org/en/developer-reference#merkleblock\n+ */\n+extern const char *MERKLEBLOCK;\n+/**\n+ * The getblocks message requests an inv message that provides block header\n+ * hashes starting from a particular point in the block chain.\n+ * @see https://bitcoin.org/en/developer-reference#getblocks\n+ */\n+extern const char *GETBLOCKS;\n+/**\n+ * The getheaders message requests a headers message that provides block\n+ * headers starting from a particular point in the block chain.\n+ * @since protocol version 31800.\n+ * @see https://bitcoin.org/en/developer-reference#getheaders\n+ */\n+extern const char *GETHEADERS;\n+/**\n+ * The tx message transmits a single transaction.\n+ * @see https://bitcoin.org/en/developer-reference#tx\n+ */\n+extern const char *TX;\n+/**\n+ * The headers message sends one or more block headers to a node which\n+ * previously requested certain headers with a getheaders message.\n+ * @since protocol version 31800.\n+ * @see https://bitcoin.org/en/developer-reference#headers\n+ */\n+extern const char *HEADERS;\n+/**\n+ * The block message transmits a single serialized block.\n+ * @see https://bitcoin.org/en/developer-reference#block\n+ */\n+extern const char *BLOCK;\n+/**\n+ * The getaddr message requests an addr message from the receiving node,\n+ * preferably one with lots of IP addresses of other receiving nodes.\n+ * @see https://bitcoin.org/en/developer-reference#getaddr\n+ */\n+extern const char *GETADDR;\n+/**\n+ * The mempool message requests the TXIDs of transactions that the receiving\n+ * node has verified as valid but which have not yet appeared in a block.\n+ * @since protocol version 60002.\n+ * @see https://bitcoin.org/en/developer-reference#mempool\n+ */\n+extern const char *MEMPOOL;\n+/**\n+ * The ping message is sent periodically to help confirm that the receiving\n+ * peer is still connected.\n+ * @see https://bitcoin.org/en/developer-reference#ping\n+ */\n+extern const char *PING;\n+/**\n+ * The pong message replies to a ping message, proving to the pinging node that\n+ * the ponging node is still alive.\n+ * @since protocol version 60001 as described by BIP31.\n+ * @see https://bitcoin.org/en/developer-reference#pong\n+ */\n+extern const char *PONG;\n+/**\n+ * The alert message warns nodes of problems that may affect them or the rest\n+ * of the network.\n+ * @since protocol version 311.\n+ * @see https://bitcoin.org/en/developer-reference#alert\n+ */\n+extern const char *ALERT;\n+/**\n+ * The notfound message is a reply to a getdata message which requested an\n+ * object the receiving node does not have available for relay.\n+ * @ince protocol version 70001.\n+ * @see https://bitcoin.org/en/developer-reference#notfound\n+ */\n+extern const char *NOTFOUND;\n+/**\n+ * The filterload message tells the receiving peer to filter all relayed\n+ * transactions and requested merkle blocks through the provided filter.\n+ * @since protocol version 70001 as described by BIP37.\n+ *   Only available with service bit NODE_BLOOM since protocol version\n+ *   70011 as described by BIP111.\n+ * @see https://bitcoin.org/en/developer-reference#filterload\n+ */\n+extern const char *FILTERLOAD;\n+/**\n+ * The filteradd message tells the receiving peer to add a single element to a\n+ * previously-set bloom filter, such as a new public key.\n+ * @since protocol version 70001 as described by BIP37.\n+ *   Only available with service bit NODE_BLOOM since protocol version\n+ *   70011 as described by BIP111.\n+ * @see https://bitcoin.org/en/developer-reference#filteradd\n+ */\n+extern const char *FILTERADD;\n+/**\n+ * The filterclear message tells the receiving peer to remove a previously-set\n+ * bloom filter.\n+ * @since protocol version 70001 as described by BIP37.\n+ *   Only available with service bit NODE_BLOOM since protocol version\n+ *   70011 as described by BIP111.\n+ * @see https://bitcoin.org/en/developer-reference#filterclear\n+ */\n+extern const char *FILTERCLEAR;\n+/**\n+ * The reject message informs the receiving node that one of its previous\n+ * messages has been rejected.\n+ * @since protocol version 70002 as described by BIP61.\n+ * @see https://bitcoin.org/en/developer-reference#reject\n+ */\n+extern const char *REJECT;\n+/**\n+ * Indicates that a node prefers to receive new block announcements via a\n+ * \"headers\" message rather than an \"inv\".\n+ * @since protocol version 70012 as described by BIP130.\n+ * @see https://bitcoin.org/en/developer-reference#sendheaders\n+ */\n+extern const char *SENDHEADERS;\n+\n+};\n+\n+/* Get a vector of all valid message types (see above) */\n+const std::vector<std::string> &getAllNetMessageTypes();\n+\n /** nServices flags */\n enum {\n     // NODE_NETWORK means that the node is capable of serving the block chain. It is currently"
      }
    ]
  },
  {
    "sha": "f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDNjMmY5YThhMzA3NjBjMzRkZDQ2OTFkZTRlZDRkN2E3Yjk5Njll",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-12-14T00:20:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-14T08:54:56Z"
      },
      "message": "Add \"NODE_BLOOM\" to guiutil so that peers don't get UNKNOWN[4]\n\nRebased-From: daf6466330d9d3e4d9034fd316cded192d2a7d67\nGithub-Pull: #7206",
      "tree": {
        "sha": "275946e63f916ddce00f967199433cefa4e46fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/275946e63f916ddce00f967199433cefa4e46fa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWboPvAAoJEHSBCwEjRsmmODwIAL0pRxjzXGkaaR+JkOMAZ85u\nW3NnQ4Lzj+2N5Ko1K5Jrcf8AxeXO/2Z2DsAy2CbrwXnxTWiLmijFe1wR2SyCqLZY\nLZKrCMxQTWWwNFSTwlvTfvBnWZqMmQMzzF7duhu9i4Sn2cSCtfgGyDbeJYbcXB1r\ngwR++q9OEhJ6vw/gvXQcAdN95gf04kM5qozSVJMuGnldX+TulWABlz5UamymBMqP\n3tDa/SoucGIQERlK+8HhquHSX51t1jD6Jk6cstobA1f6K+Y3ST6/TagfLb1im3hZ\nLQPCtKTeWIi71IHxgFwf0vlcrHTlOURI64hTA7f8YQcc1L/OAUDXYO6uagzOR8c=\n=EDvL\n-----END PGP SIGNATURE-----",
        "payload": "tree 275946e63f916ddce00f967199433cefa4e46fa0\nparent 8fc174aae64882d43549ad57bece0c23805e567b\nauthor Matt Corallo <git@bluematt.me> 1450052408 -0800\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450083296 +0100\n\nAdd \"NODE_BLOOM\" to guiutil so that peers don't get UNKNOWN[4]\n\nRebased-From: daf6466330d9d3e4d9034fd316cded192d2a7d67\nGithub-Pull: #7206\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fc174aae64882d43549ad57bece0c23805e567b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc174aae64882d43549ad57bece0c23805e567b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc174aae64882d43549ad57bece0c23805e567b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43cfba63d6dcfcb7ca6f6f29401ce0d12858a84f",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e",
        "patch": "@@ -898,6 +898,9 @@ QString formatServicesStr(quint64 mask)\n             case NODE_GETUTXO:\n                 strList.append(\"GETUTXO\");\n                 break;\n+            case NODE_BLOOM:\n+                strList.append(\"BLOOM\");\n+                break;\n             default:\n                 strList.append(QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(check));\n             }"
      }
    ]
  },
  {
    "sha": "06c6a584635bb42c511baf505cebd7cdf77b89e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmM2YTU4NDYzNWJiNDJjNTExYmFmNTA1Y2ViZDdjZGY3N2I4OWU5",
    "commit": {
      "author": {
        "name": "accraze",
        "email": "accraze@gmail.com",
        "date": "2015-12-12T02:07:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-14T12:10:02Z"
      },
      "message": "Checks for null data transaction before issuing error to debug.log\n\nCWalletTx::GetAmounts could not find output address for null data transactions, thus issuing an error in debug.log. This change checks to see if the transaction is OP_RETURN before issuing error.\n\nresolves #6142\n\nGithub-Pull: #7200\nRebased-From: b6915b82398d2e1d1f888b3816adfaf06d9a450e c611acc38a95d336a824b632823aa1b652e570df d812daf967ba4173bfa1c37eeb4ab7a0ccc4df25",
      "tree": {
        "sha": "43c2543235d3ffee87f4f046f8c8044e876a652e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43c2543235d3ffee87f4f046f8c8044e876a652e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06c6a584635bb42c511baf505cebd7cdf77b89e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWbrGbAAoJEHSBCwEjRsmmOSMIAIM2UkKVccKl6v0PHdCGa551\nGy+W/wRRQKXb3Pu/idMf9RN97OtWMy1J8qC2TxqwXoqBLPAQoDpPmi/6cA8lxoRk\naCLm491brDU8pBGRTrmLDf3hPZpYoBIqqSAyynwsvvjfckDeLFox4MNo6PCQAarD\nyeqn8QjE1VrDA4h5pg0UJD6CAEAUqtwZk4lck51vKL2tLQqaXDKJvrD100zjhoZF\nj95OsmjXcFvoWUser8GU0d8G99eq8zKAuIbkgMLNjfFi3BbPHaTUefKBwE2z3Dox\n9OysVohJyDA4YEz28YLE774ytXKRJw3klFNgqgyKndTRuyiU4AW8aZJpyS5TUnI=\n=LYYw\n-----END PGP SIGNATURE-----",
        "payload": "tree 43c2543235d3ffee87f4f046f8c8044e876a652e\nparent f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e\nauthor accraze <accraze@gmail.com> 1449886031 -0800\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450095002 +0100\n\nChecks for null data transaction before issuing error to debug.log\n\nCWalletTx::GetAmounts could not find output address for null data transactions, thus issuing an error in debug.log. This change checks to see if the transaction is OP_RETURN before issuing error.\n\nresolves #6142\n\nGithub-Pull: #7200\nRebased-From: b6915b82398d2e1d1f888b3816adfaf06d9a450e c611acc38a95d336a824b632823aa1b652e570df d812daf967ba4173bfa1c37eeb4ab7a0ccc4df25\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c6a584635bb42c511baf505cebd7cdf77b89e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06c6a584635bb42c511baf505cebd7cdf77b89e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c6a584635bb42c511baf505cebd7cdf77b89e9/comments",
    "author": {
      "login": "accraze",
      "id": 989447,
      "node_id": "MDQ6VXNlcjk4OTQ0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/989447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/accraze",
      "html_url": "https://github.com/accraze",
      "followers_url": "https://api.github.com/users/accraze/followers",
      "following_url": "https://api.github.com/users/accraze/following{/other_user}",
      "gists_url": "https://api.github.com/users/accraze/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/accraze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/accraze/subscriptions",
      "organizations_url": "https://api.github.com/users/accraze/orgs",
      "repos_url": "https://api.github.com/users/accraze/repos",
      "events_url": "https://api.github.com/users/accraze/events{/privacy}",
      "received_events_url": "https://api.github.com/users/accraze/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f43c2f9a8a30760c34dd4691de4ed4d7a7b9969e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "06f1b0f45055307fdb1dac6669cdf1e3388a6591",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06c6a584635bb42c511baf505cebd7cdf77b89e9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06c6a584635bb42c511baf505cebd7cdf77b89e9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=06c6a584635bb42c511baf505cebd7cdf77b89e9",
        "patch": "@@ -1034,7 +1034,8 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n \n         // In either case, we need to get the destination address\n         CTxDestination address;\n-        if (!ExtractDestination(txout.scriptPubKey, address))\n+\n+        if (!ExtractDestination(txout.scriptPubKey, address) && !txout.scriptPubKey.IsUnspendable())\n         {\n             LogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n                      this->GetHash().ToString());"
      }
    ]
  },
  {
    "sha": "10b88be79856ee7ee66f69705c16b335941e396e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGI4OGJlNzk4NTZlZTdlZTY2ZjY5NzA1YzE2YjMzNTk0MWUzOTZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-08T18:20:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-14T12:43:53Z"
      },
      "message": "Replace trickle nodes with per-node/message Poisson delays\n\nWe used to have a trickle node, a node which was chosen in each iteration of\nthe send loop that was privileged and allowed to send out queued up non-time\ncritical messages. Since the removal of the fixed sleeps in the network code,\nthis resulted in fast and attackable treatment of such broadcasts.\n\nThis pull request changes the 3 remaining trickle use cases by random delays:\n* Local address broadcast (while also removing the the wiping of the seen filter)\n* Address relay\n* Inv relay (for transactions; blocks are always relayed immediately)\n\nThe code is based on older commits by Patrick Strateman.\n\nGithub-Pull: #7125\nRebased-From: 5400ef6bcb9d243b2b21697775aa6491115420f3",
      "tree": {
        "sha": "29766c79315ae9c569321e2ee607107be948dd5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29766c79315ae9c569321e2ee607107be948dd5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10b88be79856ee7ee66f69705c16b335941e396e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWbrmLAAoJEHSBCwEjRsmmnEMH/2MJa4U0pl5MBmhSGL7ltZHM\n9lnRIHQ7KVzuiKy/hiZhovytUIfN59NavY0lwG4+R2e4SdDsXrY1O3av8bFabl0n\naUWR2/f8T1OaZ77eHS0Y3OR89wHzlEwQWFtM2XtzwcFarO1Cck83iiB6B/Mz/Ues\nBaea7XGz+KzG7aGgRau432ubDcLvBgGuGbCAUGtxNVymItqBK3Eo5AXP12sb6XX5\nmG1zrBBG+9DkBRJ8VwlpCh3t/7G1+uwv6gNcup4VRLNvb+GVFFkDWpIMMJ3y/DLA\nXsjp0HayLxmrTvXkS6sIwty8eLrpmspklzitdeM1dSp/hetkH/EV6xmNCkBjQhs=\n=KV0Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 29766c79315ae9c569321e2ee607107be948dd5d\nparent 06c6a584635bb42c511baf505cebd7cdf77b89e9\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1428517200 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450097033 +0100\n\nReplace trickle nodes with per-node/message Poisson delays\n\nWe used to have a trickle node, a node which was chosen in each iteration of\nthe send loop that was privileged and allowed to send out queued up non-time\ncritical messages. Since the removal of the fixed sleeps in the network code,\nthis resulted in fast and attackable treatment of such broadcasts.\n\nThis pull request changes the 3 remaining trickle use cases by random delays:\n* Local address broadcast (while also removing the the wiping of the seen filter)\n* Address relay\n* Inv relay (for transactions; blocks are always relayed immediately)\n\nThe code is based on older commits by Patrick Strateman.\n\nGithub-Pull: #7125\nRebased-From: 5400ef6bcb9d243b2b21697775aa6491115420f3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b88be79856ee7ee66f69705c16b335941e396e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10b88be79856ee7ee66f69705c16b335941e396e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b88be79856ee7ee66f69705c16b335941e396e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06c6a584635bb42c511baf505cebd7cdf77b89e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c6a584635bb42c511baf505cebd7cdf77b89e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06c6a584635bb42c511baf505cebd7cdf77b89e9"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 47,
      "deletions": 36
    },
    "files": [
      {
        "sha": "9e29fad978a77e280b512199fbe59acf57132b7f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b88be79856ee7ee66f69705c16b335941e396e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b88be79856ee7ee66f69705c16b335941e396e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=10b88be79856ee7ee66f69705c16b335941e396e",
        "patch": "@@ -5326,7 +5326,7 @@ bool ProcessMessages(CNode* pfrom)\n }\n \n \n-bool SendMessages(CNode* pto, bool fSendTrickle)\n+bool SendMessages(CNode* pto)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n@@ -5368,28 +5368,17 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             return true;\n \n         // Address refresh broadcast\n-        static int64_t nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n-        {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-            {\n-                // Periodically clear addrKnown to allow refresh broadcasts\n-                if (nLastRebroadcast)\n-                    pnode->addrKnown.reset();\n-\n-                // Rebroadcast our address\n-                AdvertizeLocal(pnode);\n-            }\n-            if (!vNodes.empty())\n-                nLastRebroadcast = GetTime();\n+        int64_t nNow = GetTimeMicros();\n+        if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {\n+            AdvertizeLocal(pto);\n+            pto->nNextLocalAddrSend = PoissonNextSend(nNow, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n \n         //\n         // Message: addr\n         //\n-        if (fSendTrickle)\n-        {\n+        if (pto->nNextAddrSend < nNow) {\n+            pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n             vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n             BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n@@ -5563,8 +5552,13 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         vector<CInv> vInv;\n         vector<CInv> vInvWait;\n         {\n+            bool fSendTrickle = pto->fWhitelisted;\n+            if (pto->nNextInvSend < nNow) {\n+                fSendTrickle = true;\n+                pto->nNextInvSend = PoissonNextSend(nNow, AVG_INVENTORY_BROADCAST_INTERVAL);\n+            }\n             LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n+            vInv.reserve(std::min<size_t>(1000, pto->vInventoryToSend.size()));\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n@@ -5604,7 +5598,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pto->PushMessage(NetMsgType::INV, vInv);\n \n         // Detect whether we're stalling\n-        int64_t nNow = GetTimeMicros();\n+        nNow = GetTimeMicros();\n         if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection"
      },
      {
        "sha": "25a006387353d32b0af672c7a4b9cddbcf78fe71",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b88be79856ee7ee66f69705c16b335941e396e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b88be79856ee7ee66f69705c16b335941e396e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=10b88be79856ee7ee66f69705c16b335941e396e",
        "patch": "@@ -87,6 +87,14 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n+/** Average delay between local address broadcasts in seconds. */\n+static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 24 * 60;\n+/** Average delay between peer address broadcasts in seconds. */\n+static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n+/** Average delay between trickled inventory broadcasts in seconds.\n+ *  Blocks, whitelisted receivers, and a random 25% of transactions bypass this. */\n+static const unsigned int AVG_INVENTORY_BROADCAST_INTERVAL = 5;\n+\n static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n static const bool DEFAULT_RELAYPRIORITY = true;\n \n@@ -197,9 +205,8 @@ bool ProcessMessages(CNode* pfrom);\n  * Send queued protocol messages to be sent to a give node.\n  *\n  * @param[in]   pto             The node which we are sending messages to.\n- * @param[in]   fSendTrickle    When true send the trickled data, otherwise trickle the data until true.\n  */\n-bool SendMessages(CNode* pto, bool fSendTrickle);\n+bool SendMessages(CNode* pto);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Try to detect Partition (network isolation) attacks against us */"
      },
      {
        "sha": "3796256b4d1584bbea4bc36210cfa781860e21e2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b88be79856ee7ee66f69705c16b335941e396e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b88be79856ee7ee66f69705c16b335941e396e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=10b88be79856ee7ee66f69705c16b335941e396e",
        "patch": "@@ -36,6 +36,8 @@\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n+#include <math.h>\n+\n // Dump addresses to peers.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900\n \n@@ -1720,11 +1722,6 @@ void ThreadMessageHandler()\n             }\n         }\n \n-        // Poll the connected nodes for messages\n-        CNode* pnodeTrickle = NULL;\n-        if (!vNodesCopy.empty())\n-            pnodeTrickle = vNodesCopy[GetRand(vNodesCopy.size())];\n-\n         bool fSleep = true;\n \n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n@@ -1755,7 +1752,7 @@ void ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    g_signals.SendMessages(pnode, pnode == pnodeTrickle || pnode->fWhitelisted);\n+                    g_signals.SendMessages(pnode);\n             }\n             boost::this_thread::interruption_point();\n         }\n@@ -2371,6 +2368,9 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nStartingHeight = -1;\n     filterInventoryKnown.reset();\n     fGetAddr = false;\n+    nNextLocalAddrSend = 0;\n+    nNextAddrSend = 0;\n+    nNextInvSend = 0;\n     fRelayTxes = false;\n     pfilter = new CBloomFilter();\n     nPingNonceSent = 0;\n@@ -2615,3 +2615,7 @@ void DumpBanlist()\n     LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n              banmap.size(), GetTimeMillis() - nStart);\n }\n+\n+int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n+    return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+}"
      },
      {
        "sha": "1c52efd5e2c7839e93e3a4ef6c843ee0501271ed",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b88be79856ee7ee66f69705c16b335941e396e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b88be79856ee7ee66f69705c16b335941e396e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=10b88be79856ee7ee66f69705c16b335941e396e",
        "patch": "@@ -113,7 +113,7 @@ struct CNodeSignals\n {\n     boost::signals2::signal<int ()> GetHeight;\n     boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, bool), CombinerAll> SendMessages;\n+    boost::signals2::signal<bool (CNode*), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n     boost::signals2::signal<void (NodeId)> FinalizeNode;\n };\n@@ -385,13 +385,16 @@ class CNode\n     CRollingBloomFilter addrKnown;\n     bool fGetAddr;\n     std::set<uint256> setKnown;\n+    int64_t nNextAddrSend;\n+    int64_t nNextLocalAddrSend;\n \n     // inventory based relay\n     CRollingBloomFilter filterInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n+    int64_t nNextInvSend;\n     // Used for headers announcements - unfiltered blocks to relay\n     // Also protected by cs_inventory\n     std::vector<uint256> vBlockHashesToAnnounce;\n@@ -785,4 +788,7 @@ class CBanDB\n \n void DumpBanlist();\n \n+/** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n+int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);\n+\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "51d296502e47ca1ec88d7deeabdff7f73d761da7",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10b88be79856ee7ee66f69705c16b335941e396e/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10b88be79856ee7ee66f69705c16b335941e396e/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=10b88be79856ee7ee66f69705c16b335941e396e",
        "patch": "@@ -49,19 +49,19 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002));\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, false);\n+    SendMessages(&dummyNode2);\n     BOOST_CHECK(!CNode::IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(CNode::IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, false);\n+    SendMessages(&dummyNode2);\n     BOOST_CHECK(CNode::IsBanned(addr2));\n }\n \n@@ -73,13 +73,13 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1, false);\n+    SendMessages(&dummyNode1);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     mapArgs.erase(\"-banscore\");\n }\n@@ -95,7 +95,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode, false);\n+    SendMessages(&dummyNode);\n     BOOST_CHECK(CNode::IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      }
    ]
  },
  {
    "sha": "9572e4944a6130640477690f2158d373af8017cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTcyZTQ5NDRhNjEzMDY0MDQ3NzY5MGYyMTU4ZDM3M2FmODAxN2Nj",
    "commit": {
      "author": {
        "name": "Elias Rohrer",
        "email": "rohrer@informatik.hu-berlin.de",
        "date": "2015-12-15T13:53:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-17T09:40:50Z"
      },
      "message": "Removed offline testnet DNSSeed 'alexykot.me'.\n\nGithub-Pull: #7216\nRebased-From: e18378e53fb71c39236db35ab2d560b43602b1be",
      "tree": {
        "sha": "222820a05edae3b7e451a8406a84e1ed621ed741",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/222820a05edae3b7e451a8406a84e1ed621ed741"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9572e4944a6130640477690f2158d373af8017cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWcoMzAAoJEHSBCwEjRsmmKawH/3MNptYejJvSFJ+xWKx+Ppjt\nOCi6JfsXEaXIRNP+v4nayKeernf8FqXCoKdON6QEzfYok5LVUypGgN/3YmictjuX\nwwexyw8aFOOJOKqMItPopHWBICIFaqOj4mE1VuziP94x6lgJpWDx9RAyKMLuievV\n/gygZFRsCFLS/TWz0hnV0yDVZJOt4q2CWfoB+DpCG/lhJaLinoiNAHKFWvuq0xia\nFbwMqt5pMSMXlbCjwAZatPGSeDncph7yz81c7LHAlGGLUq3UvZMLAhnuR18um1+l\niqJMd5tvIF32oMBzKUxDlh28BmB7C+gRK5Pkh0GE9AoH890GMKfwZh6WmHpmxXg=\n=oT16\n-----END PGP SIGNATURE-----",
        "payload": "tree 222820a05edae3b7e451a8406a84e1ed621ed741\nparent 10b88be79856ee7ee66f69705c16b335941e396e\nauthor Elias Rohrer <rohrer@informatik.hu-berlin.de> 1450187595 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450345250 +0100\n\nRemoved offline testnet DNSSeed 'alexykot.me'.\n\nGithub-Pull: #7216\nRebased-From: e18378e53fb71c39236db35ab2d560b43602b1be\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9572e4944a6130640477690f2158d373af8017cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9572e4944a6130640477690f2158d373af8017cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9572e4944a6130640477690f2158d373af8017cc/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10b88be79856ee7ee66f69705c16b335941e396e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10b88be79856ee7ee66f69705c16b335941e396e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10b88be79856ee7ee66f69705c16b335941e396e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "abeaaf927c56c5429f3edaafb28310e747c805c4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9572e4944a6130640477690f2158d373af8017cc/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9572e4944a6130640477690f2158d373af8017cc/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9572e4944a6130640477690f2158d373af8017cc",
        "patch": "@@ -179,7 +179,6 @@ class CTestNetParams : public CChainParams {\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n-        vSeeds.push_back(CDNSSeedData(\"alexykot.me\", \"testnet-seed.alexykot.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"));\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));"
      }
    ]
  },
  {
    "sha": "f3ad81220850a4158ab329f5279f7530cbb70a87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2FkODEyMjA4NTBhNDE1OGFiMzI5ZjUyNzlmNzUzMGNiYjcwYTg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-14T13:18:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-17T09:58:33Z"
      },
      "message": "test: don't override BITCOIND and BITCOINCLI if they're set\n\nIn rpc-tests.py, don't override BITCOIND and BITCOINCLI if they're\nalready set. Makes it possible to run the tests with either another tree\nor the GUI.\n\nGithub-Pull: #7209\nRebased-From: 83cdcbdca41583a5a754a89f45b04b56cd0df627",
      "tree": {
        "sha": "35386645b58364732c7e8e000899ff5b32628ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35386645b58364732c7e8e000899ff5b32628ef2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3ad81220850a4158ab329f5279f7530cbb70a87",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWcodZAAoJEHSBCwEjRsmmx4oH/RVpNFDgBcQRR4XBnmveuGis\n99cLiBdNARJmyI6T2ItHxabrjQxU6+Jf86kN+avNE+Eo/aIToz3SXoM0BKw9XlVJ\nclUyOyotcg3OshENO7Sj5KUClWM1kYGqw/kz87BQBPhVU7bcNfzNugfLj4n4H3+K\ncFqCSkkiX72Ev7A94SH06zOZAycAY81dEOG3jeUM7aZtvcB44e2qkGgjvaFqm82+\nzII8xX4LNuoRPQZ9WPw98sJO16NdqDSJjG/5NuNkWc/7asrS5Q0Oa7wWwPARCNMq\nBjedp2YcbMQpGGaZUFrCN4bt/u6UEWw3h+UJVdgFcZMijwZb1gpuY/N8J94I19A=\n=KzM9\n-----END PGP SIGNATURE-----",
        "payload": "tree 35386645b58364732c7e8e000899ff5b32628ef2\nparent 9572e4944a6130640477690f2158d373af8017cc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1450099092 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450346313 +0100\n\ntest: don't override BITCOIND and BITCOINCLI if they're set\n\nIn rpc-tests.py, don't override BITCOIND and BITCOINCLI if they're\nalready set. Makes it possible to run the tests with either another tree\nor the GUI.\n\nGithub-Pull: #7209\nRebased-From: 83cdcbdca41583a5a754a89f45b04b56cd0df627\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ad81220850a4158ab329f5279f7530cbb70a87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ad81220850a4158ab329f5279f7530cbb70a87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ad81220850a4158ab329f5279f7530cbb70a87/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9572e4944a6130640477690f2158d373af8017cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9572e4944a6130640477690f2158d373af8017cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9572e4944a6130640477690f2158d373af8017cc"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "57b42334495757a0e76a1b38d54563a414bae5b4",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3ad81220850a4158ab329f5279f7530cbb70a87/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3ad81220850a4158ab329f5279f7530cbb70a87/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=f3ad81220850a4158ab329f5279f7530cbb70a87",
        "patch": "@@ -62,8 +62,10 @@\n \n #Set env vars\n buildDir = BUILDDIR\n-os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n-os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n+if \"BITCOIND\" not in os.environ:\n+    os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n+if \"BITCOINCLI\" not in os.environ:\n+    os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n \n #Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:"
      }
    ]
  },
  {
    "sha": "eccd67106d7ebfcb1d0913c2036848f57ba344fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2NkNjcxMDZkN2ViZmNiMWQwOTEzYzIwMzY4NDhmNTdiYTM0NGZi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-11-10T15:23:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-18T08:42:09Z"
      },
      "message": "[Depends] Bump Boost, miniupnpc, ccache & zeromq\n\nBring dependencies up to date with master:\n[depends] Boost 1.59.0\n[depends] miniupnpc 1.9.20151026\n[depends] native ccache 3.2.4\n[depends] zeromq 4.0.7\n[depends] Latest config.guess & config.sub\n[depends] Fix miniupnpc compilation on osx\n\nGithub-Pull: #6980\nRebased-From: 9e940fa4c650dd31c39dbc8ed4038e131c19d59c 17ad964c2ff8f9be62a6826012b565843d3d72ba 26f8ea5342994bc3dcc22163b86f086328b50769 10d3c77644d894338a02b05f64ba822f3a516401 23a3c47f95c9c7c1778c488be6ea9ebbef2311ea e0769e1928f892fb16f851991d8e09a90587a1f4",
      "tree": {
        "sha": "1b3e2af9514e3b0a64df3d3008271d406f91217c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b3e2af9514e3b0a64df3d3008271d406f91217c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eccd67106d7ebfcb1d0913c2036848f57ba344fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWc8bjAAoJEHSBCwEjRsmmWpIH/RIOOIdAao+mbTadUxgaXZDA\nfa4i6B+J7DZXhmgE80M9Uno84WTaZiJTWySU1LwuYZYEry6O2BVflVVWAv7U0Xcf\nERSj6TWUkT436ZYv34f/5PkNe7oHEXbJkP+CXn6oo6iLNCrm4zdBoeFLx42sqSkB\nCda3Vxqc2RX8vn7bBaFtF7lzX9jCxOpw/eZ4rxCtk4FTwpiCotx5HALo9Wnl7f+q\nyhuSKPUbV9Sme5qEM72zrKYfMS8cAtlXoQ6r0V1W7+JcotTG6UKIJ1Jm56OiSfcO\n64jgpafhyg/Brt49IMewTH7SB/m5XhbhKgZC3NDr78bAWL2PA55q1WiTAfjUmbo=\n=fcFq\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b3e2af9514e3b0a64df3d3008271d406f91217c\nparent f3ad81220850a4158ab329f5279f7530cbb70a87\nauthor fanquake <fanquake@gmail.com> 1447169013 +0800\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450428129 +0100\n\n[Depends] Bump Boost, miniupnpc, ccache & zeromq\n\nBring dependencies up to date with master:\n[depends] Boost 1.59.0\n[depends] miniupnpc 1.9.20151026\n[depends] native ccache 3.2.4\n[depends] zeromq 4.0.7\n[depends] Latest config.guess & config.sub\n[depends] Fix miniupnpc compilation on osx\n\nGithub-Pull: #6980\nRebased-From: 9e940fa4c650dd31c39dbc8ed4038e131c19d59c 17ad964c2ff8f9be62a6826012b565843d3d72ba 26f8ea5342994bc3dcc22163b86f086328b50769 10d3c77644d894338a02b05f64ba822f3a516401 23a3c47f95c9c7c1778c488be6ea9ebbef2311ea e0769e1928f892fb16f851991d8e09a90587a1f4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd67106d7ebfcb1d0913c2036848f57ba344fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eccd67106d7ebfcb1d0913c2036848f57ba344fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd67106d7ebfcb1d0913c2036848f57ba344fb/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3ad81220850a4158ab329f5279f7530cbb70a87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3ad81220850a4158ab329f5279f7530cbb70a87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3ad81220850a4158ab329f5279f7530cbb70a87"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "fba6e87a0f87a01f14d45bd3b61266c11139eef1",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "patch": "@@ -2,7 +2,7 @@\n # Attempt to guess a canonical system name.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-10-21'\n+timestamp='2015-11-19'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -1393,6 +1393,9 @@ EOF\n     x86_64:VMkernel:*:*)\n \techo ${UNAME_MACHINE}-unknown-esx\n \texit ;;\n+    amd64:Isilon\\ OneFS:*:*)\n+        echo x86_64-unknown-onefs\n+\texit ;;\n esac\n \n cat >&2 <<EOF"
      },
      {
        "sha": "ea8747d30fffb35e8a766b533f5a701f53f8a4dd",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "patch": "@@ -2,7 +2,7 @@\n # Configuration validation subroutine script.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-08-20'\n+timestamp='2015-11-22'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -53,8 +53,7 @@ timestamp='2015-08-20'\n me=`echo \"$0\" | sed -e 's,.*/,,'`\n \n usage=\"\\\n-Usage: $0 [OPTION] CPU-MFR-OPSYS\n-       $0 [OPTION] ALIAS\n+Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n \n Canonicalize a configuration name.\n \n@@ -1399,7 +1398,8 @@ case $os in\n \t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n \t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n-\t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* | -tirtos*)\n+\t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n+\t      | -onefs* | -tirtos*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)"
      },
      {
        "sha": "215c694b6b82b498abe773f8c19b34835978909e",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "patch": "@@ -1,8 +1,8 @@\n package=boost\n-$(package)_version=1_58_0\n-$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.58.0\n+$(package)_version=1_59_0\n+$(package)_download_path=http://sourceforge.net/projects/boost/files/boost/1.59.0\n $(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fdfc204fc33ec79c99b9a74944c3e54bd78be4f7f15e260c0e2700a36dc7d3e5\n+$(package)_sha256_hash=727a932322d94287b62abb1bd2d41723eec4356a7728909e38adb65ca25241ca\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release"
      },
      {
        "sha": "3d5a6df974bf1f25e5aa7db4c36e4e37bd127b8e",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "patch": "@@ -1,12 +1,12 @@\n package=miniupnpc\n-$(package)_version=1.9.20151008\n+$(package)_version=1.9.20151026\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=e444ac3b587ce82709c4d0cfca1fe71f44f9fc433e9f946b12b9e1bfe667a633\n+$(package)_sha256_hash=f3cf9a5a31588a917d4d9237e5bc50f84d00c5aa48e27ed50d9b88dfa6a25d47\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n-$(package)_build_opts_darwin=OS=Darwin\n+$(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n endef"
      },
      {
        "sha": "cc76f9a7946558be79b9511fbf48f850eb677a1f",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.2.3\n+$(package)_version=3.2.4\n $(package)_download_path=http://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=b07165d4949d107d17f2f84b90b52953617bf1abbf249d5cc20636f43337c98c\n+$(package)_sha256_hash=ffeb967edb549e67da0bd5f44f729a2022de9fdde65dfd80d2a7204d7f75332e\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "7b866e9c0f66237433d229d7c1652308dd72b5a1",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eccd67106d7ebfcb1d0913c2036848f57ba344fb/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "patch": "@@ -1,8 +1,8 @@\n package=zeromq\n-$(package)_version=4.0.4\n+$(package)_version=4.0.7\n $(package)_download_path=http://download.zeromq.org\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=1ef71d46e94f33e27dd5a1661ed626cd39be4d2d6967792a275040e34457d399\n+$(package)_sha256_hash=e00b2967e074990d0538361cc79084a0a92892df2c6e7585da34e4c61ee47b03\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-documentation --disable-shared"
      }
    ]
  },
  {
    "sha": "12c469b236aa9b31b3744e5c529b9236dda27b27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmM0NjliMjM2YWE5YjMxYjM3NDRlNWM1MjliOTIzNmRkYTI3YjI3",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-11-19T16:18:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-21T16:19:53Z"
      },
      "message": "[Mempool] Fix mempool limiting and replace-by-fee for PrioritiseTransaction\n\n1) Fix mempool limiting for PrioritiseTransaction\n\nRedo the feerate index to be based on mining score, rather than fee.\n\nUpdate mempool_packages.py to test prioritisetransaction's effect on\npackage scores.\n\n2) Update replace-by-fee logic to use fee deltas\n\n3) Use fee deltas for determining mempool acceptance\n\n4) Remove GetMinRelayFee\n\nOne test in AcceptToMemoryPool was to compare a transaction's fee\nagains the value returned by GetMinRelayFee. This value was zero for\nall small transactions.  For larger transactions (between\nDEFAULT_BLOCK_PRIORITY_SIZE and MAX_STANDARD_TX_SIZE), this function\nwas preventing low fee transactions from ever being accepted.\n\nWith this function removed, we will now allow transactions in that range\nwith fees (including modifications via PrioritiseTransaction) below\nthe minRelayTxFee, provided that they have sufficient priority.\n\nGithub-Pull: #7062\nRebased-From: eb306664e786ae43d539fde66f0fbe2a3e89d910 9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3 27fae3484cdb21b0d24face833b966fce5926be5 901b01d674031f9aca717deeb372bafa160a24af",
      "tree": {
        "sha": "77569facae72f92502391b0cafc89c3f50f4c470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77569facae72f92502391b0cafc89c3f50f4c470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12c469b236aa9b31b3744e5c529b9236dda27b27",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWeCasAAoJEHSBCwEjRsmm9i8IAJmUfm0WQmk6myc9Q/LV33kH\nc7R4SM6ntjo3XFFCQJ7vJLeTgnSBhaQ+TuZMJOUEx+UWdIriJmFr8Zb3fdoc8Rdd\nHn0/E4toaqnzRPXKCUaDDA7Vg0YdrtLL8cEj5gzIzKcau0q5w+UEC2NvW85sc5/s\nhozIhPcIGGMRlC4dXDUN9rfIFKlkuQHKtHmZ/Wqxmhxj/r1l6qPSsS8V1pSdL+7v\nvYsmUeuRXGwDokT4O8ezENhqhnauZyOw2d7JjNU3L1j1Ajv1u8DB0tgaZikgboyr\nI/FESUfb2Zq1Do/Dl1TbCwO10zSHcXhiwESrxxNcf1bJi+J07763eMHuK+z9Cf0=\n=9Nq3\n-----END PGP SIGNATURE-----",
        "payload": "tree 77569facae72f92502391b0cafc89c3f50f4c470\nparent eccd67106d7ebfcb1d0913c2036848f57ba344fb\nauthor Suhas Daftuar <sdaftuar@gmail.com> 1447949908 -0500\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450714793 +0100\n\n[Mempool] Fix mempool limiting and replace-by-fee for PrioritiseTransaction\n\n1) Fix mempool limiting for PrioritiseTransaction\n\nRedo the feerate index to be based on mining score, rather than fee.\n\nUpdate mempool_packages.py to test prioritisetransaction's effect on\npackage scores.\n\n2) Update replace-by-fee logic to use fee deltas\n\n3) Use fee deltas for determining mempool acceptance\n\n4) Remove GetMinRelayFee\n\nOne test in AcceptToMemoryPool was to compare a transaction's fee\nagains the value returned by GetMinRelayFee. This value was zero for\nall small transactions.  For larger transactions (between\nDEFAULT_BLOCK_PRIORITY_SIZE and MAX_STANDARD_TX_SIZE), this function\nwas preventing low fee transactions from ever being accepted.\n\nWith this function removed, we will now allow transactions in that range\nwith fees (including modifications via PrioritiseTransaction) below\nthe minRelayTxFee, provided that they have sufficient priority.\n\nGithub-Pull: #7062\nRebased-From: eb306664e786ae43d539fde66f0fbe2a3e89d910 9ef2a25603c9ec4e44c4f45c6a5d4e4386ec86d3 27fae3484cdb21b0d24face833b966fce5926be5 901b01d674031f9aca717deeb372bafa160a24af\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c469b236aa9b31b3744e5c529b9236dda27b27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12c469b236aa9b31b3744e5c529b9236dda27b27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c469b236aa9b31b3744e5c529b9236dda27b27/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eccd67106d7ebfcb1d0913c2036848f57ba344fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eccd67106d7ebfcb1d0913c2036848f57ba344fb"
      }
    ],
    "stats": {
      "total": 303,
      "additions": 211,
      "deletions": 92
    },
    "files": [
      {
        "sha": "063308d39430ee48ebfc5831d660f1e7ed6e50c0",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -64,17 +64,41 @@ def run_test(self):\n         for x in reversed(chain):\n             assert_equal(mempool[x]['descendantcount'], descendant_count)\n             descendant_fees += mempool[x]['fee']\n+            assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee'])\n             assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees)\n             descendant_size += mempool[x]['size']\n             assert_equal(mempool[x]['descendantsize'], descendant_size)\n             descendant_count += 1\n \n+        # Check that descendant modified fees includes fee deltas from\n+        # prioritisetransaction\n+        self.nodes[0].prioritisetransaction(chain[-1], 0, 1000)\n+        mempool = self.nodes[0].getrawmempool(True)\n+\n+        descendant_fees = 0\n+        for x in reversed(chain):\n+            descendant_fees += mempool[x]['fee']\n+            assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees+1000)\n+\n         # Adding one more transaction on to the chain should fail.\n         try:\n             self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n         except JSONRPCException as e:\n             print \"too-long-ancestor-chain successfully rejected\"\n \n+        # Check that prioritising a tx before it's added to the mempool works\n+        self.nodes[0].generate(1)\n+        self.nodes[0].prioritisetransaction(chain[-1], 0, 2000)\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        mempool = self.nodes[0].getrawmempool(True)\n+\n+        descendant_fees = 0\n+        for x in reversed(chain):\n+            descendant_fees += mempool[x]['fee']\n+            if (x == chain[-1]):\n+                assert_equal(mempool[x]['modifiedfee'], mempool[x]['fee']+satoshi_round(0.00002))\n+            assert_equal(mempool[x]['descendantfees'], SATOSHIS*descendant_fees+2000)\n+\n         # TODO: check that node1's mempool is as expected\n \n         # TODO: test ancestor size limits"
      },
      {
        "sha": "d9492f27a40858ed0a9074e238d9319093bb573d",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -143,5 +143,45 @@ def run_test(self):\n             if (x != high_fee_tx):\n                 assert(x not in mempool)\n \n+        # Create a free, low priority transaction.  Should be rejected.\n+        utxo_list = self.nodes[0].listunspent()\n+        assert(len(utxo_list) > 0)\n+        utxo = utxo_list[0]\n+\n+        inputs = []\n+        outputs = {}\n+        inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n+        outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"] - self.relayfee\n+        raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+        txid = self.nodes[0].sendrawtransaction(tx_hex)\n+\n+        # A tx that spends an in-mempool tx has 0 priority, so we can use it to\n+        # test the effect of using prioritise transaction for mempool acceptance\n+        inputs = []\n+        inputs.append({\"txid\": txid, \"vout\": 0})\n+        outputs = {}\n+        outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"] - self.relayfee\n+        raw_tx2 = self.nodes[0].createrawtransaction(inputs, outputs)\n+        tx2_hex = self.nodes[0].signrawtransaction(raw_tx2)[\"hex\"]\n+        tx2_id = self.nodes[0].decoderawtransaction(tx2_hex)[\"txid\"]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(tx2_hex)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26) # insufficient fee\n+            assert(tx2_id not in self.nodes[0].getrawmempool())\n+        else:\n+            assert(False)\n+\n+        # This is a less than 1000-byte transaction, so just set the fee\n+        # to be the minimum for a 1000 byte transaction and check that it is\n+        # accepted.\n+        self.nodes[0].prioritisetransaction(tx2_id, 0, int(self.relayfee*COIN))\n+\n+        print \"Assert that prioritised free transaction is accepted to mempool\"\n+        assert_equal(self.nodes[0].sendrawtransaction(tx2_hex), tx2_id)\n+        assert(tx2_id in self.nodes[0].getrawmempool())\n+\n if __name__ == '__main__':\n     PrioritiseTransactionTest().main()"
      },
      {
        "sha": "734db33b5125d71da4064c058d4cc9dfaa86817c",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 78,
        "deletions": 2,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -63,16 +63,22 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     # If requested, ensure txouts are confirmed.\n     if confirmed:\n-        while len(node.getrawmempool()):\n+        mempool_size = len(node.getrawmempool())\n+        while mempool_size > 0:\n             node.generate(1)\n+            new_size = len(node.getrawmempool())\n+            # Error out if we have something stuck in the mempool, as this\n+            # would likely be a bug.\n+            assert(new_size < mempool_size)\n+            mempool_size = new_size\n \n     return COutPoint(int(txid, 16), 0)\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\", \"-debug\",\n                                                               \"-relaypriority=0\", \"-whitelist=127.0.0.1\",\n                                                               \"-limitancestorcount=50\",\n                                                               \"-limitancestorsize=101\",\n@@ -108,6 +114,9 @@ def run_test(self):\n         print \"Running test opt-in...\"\n         self.test_opt_in()\n \n+        print \"Running test prioritised transactions...\"\n+        self.test_prioritised_transactions()\n+\n         print \"Passed\\n\"\n \n     def test_simple_doublespend(self):\n@@ -513,5 +522,72 @@ def test_opt_in(self):\n         # but make sure it is accepted anyway\n         self.nodes[0].sendrawtransaction(tx3c_hex, True)\n \n+    def test_prioritised_transactions(self):\n+        # Ensure that fee deltas used via prioritisetransaction are\n+        # correctly used by replacement logic\n+\n+        # 1. Check that feeperkb uses modified fees\n+        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        tx1a = CTransaction()\n+        tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a_hex = txToHex(tx1a)\n+        tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n+\n+        # Higher fee, but the actual fee per KB is much lower.\n+        tx1b = CTransaction()\n+        tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n+        tx1b.vout = [CTxOut(0.001*COIN, CScript([b'a'*740000]))]\n+        tx1b_hex = txToHex(tx1b)\n+\n+        # Verify tx1b cannot replace tx1a.\n+        try:\n+            tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+        # Use prioritisetransaction to set tx1a's fee to 0.\n+        self.nodes[0].prioritisetransaction(tx1a_txid, 0, int(-0.1*COIN))\n+\n+        # Now tx1b should be able to replace tx1a\n+        tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n+\n+        assert(tx1b_txid in self.nodes[0].getrawmempool())\n+\n+        # 2. Check that absolute fee checks use modified fee.\n+        tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+\n+        tx2a = CTransaction()\n+        tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n+        tx2a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx2a_hex = txToHex(tx2a)\n+        tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, True)\n+\n+        # Lower fee, but we'll prioritise it\n+        tx2b = CTransaction()\n+        tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n+        tx2b.vout = [CTxOut(1.01*COIN, CScript([b'a']))]\n+        tx2b.rehash()\n+        tx2b_hex = txToHex(tx2b)\n+\n+        # Verify tx2b cannot replace tx2a.\n+        try:\n+            tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error['code'], -26)\n+        else:\n+            assert(False)\n+\n+        # Now prioritise tx2b to have a higher modified fee\n+        self.nodes[0].prioritisetransaction(tx2b.hash, 0, int(0.1*COIN))\n+\n+        # tx2b should now be accepted\n+        tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)\n+\n+        assert(tx2b_txid in self.nodes[0].getrawmempool())\n+\n if __name__ == '__main__':\n     ReplaceByFeeTest().main()"
      },
      {
        "sha": "7bc025308b7d83c4645a83072c63df1c3ec6684d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 42,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -800,32 +800,6 @@ void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n         pcoinsTip->Uncache(removed);\n }\n \n-CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned int nBytes, bool fAllowFree)\n-{\n-    uint256 hash = tx.GetHash();\n-    double dPriorityDelta = 0;\n-    CAmount nFeeDelta = 0;\n-    pool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-    if (dPriorityDelta > 0 || nFeeDelta > 0)\n-        return 0;\n-\n-    CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n-\n-    if (fAllowFree)\n-    {\n-        // There is a free transaction area in blocks created by most miners,\n-        // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n-        //   to be considered to fall into this category. We don't want to encourage sending\n-        //   multiple transactions instead of one big transaction to avoid fees.\n-        if (nBytes < (DEFAULT_BLOCK_PRIORITY_SIZE - 1000))\n-            nMinFee = 0;\n-    }\n-\n-    if (!MoneyRange(nMinFee))\n-        nMinFee = MAX_MONEY;\n-    return nMinFee;\n-}\n-\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state)\n {\n@@ -968,6 +942,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n+        // nModifiedFees includes any fee deltas from PrioritiseTransaction\n+        CAmount nModifiedFees = nFees;\n+        double nPriorityDummy = 0;\n+        pool.ApplyDeltas(hash, nPriorityDummy, nModifiedFees);\n+\n         CAmount inChainInputValue;\n         double dPriority = view.GetPriority(tx, chainActive.Height(), inChainInputValue);\n \n@@ -985,24 +964,18 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n         unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, pool, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n-                strprintf(\"%d < %d\", nFees, txMinFee));\n-\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n-        if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n+        if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n+        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize))\n         {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n@@ -1067,7 +1040,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         LOCK(pool.cs);\n         if (setConflicts.size())\n         {\n-            CFeeRate newFeeRate(nFees, nSize);\n+            CFeeRate newFeeRate(nModifiedFees, nSize);\n             set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n@@ -1110,7 +1083,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n                 // ignored when deciding whether or not to replace, we do\n                 // require the replacement to pay more overall fees too,\n                 // mitigating most cases.\n-                CFeeRate oldFeeRate(mi->GetFee(), mi->GetTxSize());\n+                CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n                 if (newFeeRate <= oldFeeRate)\n                 {\n                     return state.DoS(0,\n@@ -1138,7 +1111,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n                     pool.CalculateDescendants(it, allConflicting);\n                 }\n                 BOOST_FOREACH(CTxMemPool::txiter it, allConflicting) {\n-                    nConflictingFees += it->GetFee();\n+                    nConflictingFees += it->GetModifiedFee();\n                     nConflictingSize += it->GetTxSize();\n                 }\n             } else {\n@@ -1171,16 +1144,16 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             // The replacement must pay greater fees than the transactions it\n             // replaces - if we did the bandwidth used by those conflicting\n             // transactions would not be paid for.\n-            if (nFees < nConflictingFees)\n+            if (nModifiedFees < nConflictingFees)\n             {\n                 return state.DoS(0, error(\"AcceptToMemoryPool: rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                                          hash.ToString(), FormatMoney(nFees), FormatMoney(nConflictingFees)),\n+                                          hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)),\n                                  REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n             }\n \n             // Finally in addition to paying more fees than the conflicts the\n             // new transaction must pay for its own bandwidth.\n-            CAmount nDeltaFees = nFees - nConflictingFees;\n+            CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n             if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n             {\n                 return state.DoS(0,\n@@ -1218,7 +1191,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n                     it->GetTx().GetHash().ToString(),\n                     hash.ToString(),\n-                    FormatMoney(nFees - nConflictingFees),\n+                    FormatMoney(nModifiedFees - nConflictingFees),\n                     (int)nSize - (int)nConflictingSize);\n         }\n         pool.RemoveStaged(allConflicting);"
      },
      {
        "sha": "7ae4893e0799e3484d49c382906efae2db125a28",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -300,8 +300,6 @@ struct CDiskTxPos : public CDiskBlockPos\n };\n \n \n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n-\n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent"
      },
      {
        "sha": "73e6f8029b8a15694afe15051e9e791382172f7e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -197,7 +197,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n             info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n             info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n             info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n-            info.push_back(Pair(\"descendantfees\", e.GetFeesWithDescendants()));\n+            info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));\n             const CTransaction& tx = e.GetTx();\n             set<string> setDepends;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n@@ -255,7 +255,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n             \"    \\\"descendantcount\\\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n             \"    \\\"descendantsize\\\" : n,   (numeric) size of in-mempool descendants (including this one)\\n\"\n-            \"    \\\"descendantfees\\\" : n,   (numeric) fees of in-mempool descendants (including this one)\\n\"\n+            \"    \\\"descendantfees\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one)\\n\"\n             \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n             \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n             \"       ... ]\\n\""
      },
      {
        "sha": "c72a1e8c19da4cfebde2df37c713aecf849d6014",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 23,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -33,7 +33,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n \n     nCountWithDescendants = 1;\n     nSizeWithDescendants = nTxSize;\n-    nFeesWithDescendants = nFee;\n+    nModFeesWithDescendants = nFee;\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n \n@@ -57,6 +57,7 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n \n void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n {\n+    nModFeesWithDescendants += newFeeDelta - feeDelta;\n     feeDelta = newFeeDelta;\n }\n \n@@ -114,7 +115,7 @@ bool CTxMemPool::UpdateForDescendants(txiter updateIt, int maxDescendantsToVisit\n     BOOST_FOREACH(txiter cit, setAllDescendants) {\n         if (!setExclude.count(cit->GetTx().GetHash())) {\n             modifySize += cit->GetTxSize();\n-            modifyFee += cit->GetFee();\n+            modifyFee += cit->GetModifiedFee();\n             modifyCount++;\n             cachedDescendants[updateIt].insert(cit);\n         }\n@@ -244,7 +245,7 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n     }\n     const int64_t updateCount = (add ? 1 : -1);\n     const int64_t updateSize = updateCount * it->GetTxSize();\n-    const CAmount updateFee = updateCount * it->GetFee();\n+    const CAmount updateFee = updateCount * it->GetModifiedFee();\n     BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n         mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n     }\n@@ -304,16 +305,15 @@ void CTxMemPoolEntry::SetDirty()\n {\n     nCountWithDescendants = 0;\n     nSizeWithDescendants = nTxSize;\n-    nFeesWithDescendants = nFee;\n+    nModFeesWithDescendants = GetModifiedFee();\n }\n \n void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n {\n     if (!IsDirty()) {\n         nSizeWithDescendants += modifySize;\n         assert(int64_t(nSizeWithDescendants) > 0);\n-        nFeesWithDescendants += modifyFee;\n-        assert(nFeesWithDescendants >= 0);\n+        nModFeesWithDescendants += modifyFee;\n         nCountWithDescendants += modifyCount;\n         assert(int64_t(nCountWithDescendants) > 0);\n     }\n@@ -372,6 +372,17 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n     mapLinks.insert(make_pair(newit, TxLinks()));\n \n+    // Update transaction for any feeDelta created by PrioritiseTransaction\n+    // TODO: refactor so that the fee delta is calculated before inserting\n+    // into mapTx.\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n+    if (pos != mapDeltas.end()) {\n+        const std::pair<double, CAmount> &deltas = pos->second;\n+        if (deltas.second) {\n+            mapTx.modify(newit, update_fee_delta(deltas.second));\n+        }\n+    }\n+\n     // Update cachedInnerUsage to include contained transaction's usage.\n     // (When we update the entry for in-mempool parents, memory usage will be\n     // further updated.)\n@@ -399,15 +410,6 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     }\n     UpdateAncestorsOf(true, newit, setAncestors);\n \n-    // Update transaction's score for any feeDelta created by PrioritiseTransaction\n-    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n-    if (pos != mapDeltas.end()) {\n-        const std::pair<double, CAmount> &deltas = pos->second;\n-        if (deltas.second) {\n-            mapTx.modify(newit, update_fee_delta(deltas.second));\n-        }\n-    }\n-\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n@@ -644,27 +646,24 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         CTxMemPool::setEntries setChildrenCheck;\n         std::map<COutPoint, CInPoint>::const_iterator iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n         int64_t childSizes = 0;\n-        CAmount childFees = 0;\n+        CAmount childModFee = 0;\n         for (; iter != mapNextTx.end() && iter->first.hash == it->GetTx().GetHash(); ++iter) {\n             txiter childit = mapTx.find(iter->second.ptx->GetHash());\n             assert(childit != mapTx.end()); // mapNextTx points to in-mempool transactions\n             if (setChildrenCheck.insert(childit).second) {\n                 childSizes += childit->GetTxSize();\n-                childFees += childit->GetFee();\n+                childModFee += childit->GetModifiedFee();\n             }\n         }\n         assert(setChildrenCheck == GetMemPoolChildren(it));\n-        // Also check to make sure size/fees is greater than sum with immediate children.\n+        // Also check to make sure size is greater than sum with immediate children.\n         // just a sanity check, not definitive that this calc is correct...\n-        // also check that the size is less than the size of the entire mempool.\n         if (!it->IsDirty()) {\n             assert(it->GetSizeWithDescendants() >= childSizes + it->GetTxSize());\n-            assert(it->GetFeesWithDescendants() >= childFees + it->GetFee());\n         } else {\n             assert(it->GetSizeWithDescendants() == it->GetTxSize());\n-            assert(it->GetFeesWithDescendants() == it->GetFee());\n+            assert(it->GetModFeesWithDescendants() == it->GetModifiedFee());\n         }\n-        assert(it->GetFeesWithDescendants() >= 0);\n \n         if (fDependsWait)\n             waitingOnDependants.push_back(&(*it));\n@@ -788,6 +787,14 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n         txiter it = mapTx.find(hash);\n         if (it != mapTx.end()) {\n             mapTx.modify(it, update_fee_delta(deltas.second));\n+            // Now update all ancestors' modified fees with descendants\n+            setEntries setAncestors;\n+            uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n+            std::string dummy;\n+            CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+            BOOST_FOREACH(txiter ancestorIt, setAncestors) {\n+                mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n+            }\n         }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n@@ -956,7 +963,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n-        CFeeRate removed(it->GetFeesWithDescendants(), it->GetSizeWithDescendants());\n+        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n         removed += minReasonableRelayFee;\n         trackPackageRemoved(removed);\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);"
      },
      {
        "sha": "4b726cc902d24009a945f4c1d796de36c95255ad",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12c469b236aa9b31b3744e5c529b9236dda27b27/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12c469b236aa9b31b3744e5c529b9236dda27b27/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=12c469b236aa9b31b3744e5c529b9236dda27b27",
        "patch": "@@ -44,12 +44,12 @@ class CTxMemPool;\n  * (\"descendant\" transactions).\n  *\n  * When a new entry is added to the mempool, we update the descendant state\n- * (nCountWithDescendants, nSizeWithDescendants, and nFeesWithDescendants) for\n+ * (nCountWithDescendants, nSizeWithDescendants, and nModFeesWithDescendants) for\n  * all ancestors of the newly added transaction.\n  *\n  * If updating the descendant state is skipped, we can mark the entry as\n- * \"dirty\", and set nSizeWithDescendants/nFeesWithDescendants to equal nTxSize/\n- * nTxFee. (This can potentially happen during a reorg, where we limit the\n+ * \"dirty\", and set nSizeWithDescendants/nModFeesWithDescendants to equal nTxSize/\n+ * nFee+feeDelta. (This can potentially happen during a reorg, where we limit the\n  * amount of work we're willing to do to avoid consuming too much CPU.)\n  *\n  */\n@@ -74,11 +74,11 @@ class CTxMemPoolEntry\n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n     // descendants as well.  if nCountWithDescendants is 0, treat this entry as\n-    // dirty, and nSizeWithDescendants and nFeesWithDescendants will not be\n+    // dirty, and nSizeWithDescendants and nModFeesWithDescendants will not be\n     // correct.\n     uint64_t nCountWithDescendants; //! number of descendant transactions\n     uint64_t nSizeWithDescendants;  //! ... and size\n-    CAmount nFeesWithDescendants;  //! ... and total fees (all including us)\n+    CAmount nModFeesWithDescendants;  //! ... and total fees (all including us)\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n@@ -104,7 +104,8 @@ class CTxMemPoolEntry\n \n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n-    // Updates the fee delta used for mining priority score\n+    // Updates the fee delta used for mining priority score, and the\n+    // modified fees with descendants.\n     void UpdateFeeDelta(int64_t feeDelta);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n@@ -116,7 +117,7 @@ class CTxMemPoolEntry\n \n     uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n     uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n-    CAmount GetFeesWithDescendants() const { return nFeesWithDescendants; }\n+    CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }\n \n     bool GetSpendsCoinbase() const { return spendsCoinbase; }\n };\n@@ -163,39 +164,39 @@ struct mempoolentry_txid\n     }\n };\n \n-/** \\class CompareTxMemPoolEntryByFee\n+/** \\class CompareTxMemPoolEntryByDescendantScore\n  *\n- *  Sort an entry by max(feerate of entry's tx, feerate with all descendants).\n+ *  Sort an entry by max(score/size of entry's tx, score/size with all descendants).\n  */\n-class CompareTxMemPoolEntryByFee\n+class CompareTxMemPoolEntryByDescendantScore\n {\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n     {\n-        bool fUseADescendants = UseDescendantFeeRate(a);\n-        bool fUseBDescendants = UseDescendantFeeRate(b);\n+        bool fUseADescendants = UseDescendantScore(a);\n+        bool fUseBDescendants = UseDescendantScore(b);\n \n-        double aFees = fUseADescendants ? a.GetFeesWithDescendants() : a.GetFee();\n+        double aModFee = fUseADescendants ? a.GetModFeesWithDescendants() : a.GetModifiedFee();\n         double aSize = fUseADescendants ? a.GetSizeWithDescendants() : a.GetTxSize();\n \n-        double bFees = fUseBDescendants ? b.GetFeesWithDescendants() : b.GetFee();\n+        double bModFee = fUseBDescendants ? b.GetModFeesWithDescendants() : b.GetModifiedFee();\n         double bSize = fUseBDescendants ? b.GetSizeWithDescendants() : b.GetTxSize();\n \n         // Avoid division by rewriting (a/b > c/d) as (a*d > c*b).\n-        double f1 = aFees * bSize;\n-        double f2 = aSize * bFees;\n+        double f1 = aModFee * bSize;\n+        double f2 = aSize * bModFee;\n \n         if (f1 == f2) {\n             return a.GetTime() >= b.GetTime();\n         }\n         return f1 < f2;\n     }\n \n-    // Calculate which feerate to use for an entry (avoiding division).\n-    bool UseDescendantFeeRate(const CTxMemPoolEntry &a)\n+    // Calculate which score to use for an entry (avoiding division).\n+    bool UseDescendantScore(const CTxMemPoolEntry &a)\n     {\n-        double f1 = (double)a.GetFee() * a.GetSizeWithDescendants();\n-        double f2 = (double)a.GetFeesWithDescendants() * a.GetTxSize();\n+        double f1 = (double)a.GetModifiedFee() * a.GetSizeWithDescendants();\n+        double f2 = (double)a.GetModFeesWithDescendants() * a.GetTxSize();\n         return f2 > f1;\n     }\n };\n@@ -350,7 +351,7 @@ class CTxMemPool\n             // sorted by fee rate\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n-                CompareTxMemPoolEntryByFee\n+                CompareTxMemPoolEntryByDescendantScore\n             >,\n             // sorted by entry time\n             boost::multi_index::ordered_non_unique<"
      }
    ]
  },
  {
    "sha": "301f16ad1ca518c0873cd1bb99a26df36b46838b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDFmMTZhZDFjYTUxOGMwODczY2QxYmI5OWEyNmRmMzZiNDY4Mzhi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-12-15T20:53:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-12-22T08:54:52Z"
      },
      "message": "Add more tests to p2p-fullblocktest\n\nGithub-Pull: #7226\nRebased-From: 9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a",
      "tree": {
        "sha": "f8fcd97c10cdc22790a8f1c6622d97dd32d3eb1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8fcd97c10cdc22790a8f1c6622d97dd32d3eb1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/301f16ad1ca518c0873cd1bb99a26df36b46838b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWeQ/sAAoJEHSBCwEjRsmmD7AIAL4KRDYjx8FEpnHTeMtjfCnP\nvDjMCdflcEQa323dtDKOULYTfUkqhvUX1UdBJO5gQw9obEh2l/7mYWzzkYPJDbvi\n2IWHNqskZiqGGMd2rGwmFWWiv8kpl3KVuhCqQ9/YhNjrXaEWtN6RiyPv+ZUp5Ogy\nwDFrtahJOaNyjk3FeNbH4Gozs/YPPUk2m0taJbSozC4rsxTrWgGpHE1r4gNLHmlS\nrUESg+MKDEufnjczHhGCuYPs21I2oO+NVhW1FoEdAlx8J16pOz7LrqjuAxeISzt5\n69gBnN0cvc7ZhpCctXkDU3E8v37THXryt9gqFmMvBxyiLvGHPCpt8YXZ9OCCH4g=\n=ZMV5\n-----END PGP SIGNATURE-----",
        "payload": "tree f8fcd97c10cdc22790a8f1c6622d97dd32d3eb1d\nparent 12c469b236aa9b31b3744e5c529b9236dda27b27\nauthor Suhas Daftuar <sdaftuar@gmail.com> 1450212790 -0500\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1450774492 +0100\n\nAdd more tests to p2p-fullblocktest\n\nGithub-Pull: #7226\nRebased-From: 9b41a5fba278e9ab56a9b86e7a5fe195dcad0b7a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301f16ad1ca518c0873cd1bb99a26df36b46838b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/301f16ad1ca518c0873cd1bb99a26df36b46838b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301f16ad1ca518c0873cd1bb99a26df36b46838b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12c469b236aa9b31b3744e5c529b9236dda27b27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12c469b236aa9b31b3744e5c529b9236dda27b27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12c469b236aa9b31b3744e5c529b9236dda27b27"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 146,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a6525e679383bead768b3c441d6db61ae931b09a",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 145,
        "deletions": 12,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301f16ad1ca518c0873cd1bb99a26df36b46838b/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301f16ad1ca518c0873cd1bb99a26df36b46838b/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=301f16ad1ca518c0873cd1bb99a26df36b46838b",
        "patch": "@@ -7,15 +7,15 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance\n+from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.mininode import *\n from test_framework.blocktools import *\n import logging\n import copy\n import time\n import numbers\n from test_framework.key import CECKey\n-from test_framework.script import CScript, CScriptOp, SignatureHash, SIGHASH_ALL, OP_TRUE\n+from test_framework.script import CScript, CScriptOp, SignatureHash, SIGHASH_ALL, OP_TRUE, OP_FALSE\n \n class PreviousSpendableOutput(object):\n     def __init__(self, tx = CTransaction(), n = -1):\n@@ -122,13 +122,29 @@ def accepted():\n             return TestInstance([[self.tip, True]])\n \n         # returns a test case that asserts that the current tip was rejected\n-        def rejected():\n-            return TestInstance([[self.tip, False]])\n+        def rejected(reject = None):\n+            if reject is None:\n+                return TestInstance([[self.tip, False]])\n+            else:\n+                return TestInstance([[self.tip, reject]])\n        \n         # move the tip back to a previous block\n         def tip(number):\n             self.tip = self.blocks[number]\n \n+        # add transactions to a block produced by next_block\n+        def update_block(block_number, new_transactions):\n+            block = self.blocks[block_number]\n+            old_hash = block.sha256\n+            self.add_transactions_to_block(block, new_transactions)\n+            block.solve()\n+            # Update the internal state just like in next_block\n+            self.tip = block\n+            self.block_heights[block.sha256] = self.block_heights[old_hash]\n+            del self.block_heights[old_hash]\n+            self.blocks[block_number] = block\n+            return block\n+\n         # creates a new block and advances the tip to that block\n         block = self.next_block\n \n@@ -141,23 +157,23 @@ def tip(number):\n \n         # Now we need that block to mature so we can spend the coinbase.\n         test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n+        for i in range(99):\n             block(1000 + i)\n             test.blocks_and_transactions.append([self.tip, True])\n             save_spendable_output()\n         yield test\n \n \n-        # Start by bulding a couple of blocks on top (which output is spent is in parentheses):\n+        # Start by building a couple of blocks on top (which output is spent is\n+        # in parentheses):\n         #     genesis -> b1 (0) -> b2 (1)\n         out0 = get_spendable_output()\n         block(1, spend=out0)\n         save_spendable_output()\n         yield accepted()\n \n         out1 = get_spendable_output()\n-        block(2, spend=out1)\n-        # Inv again, then deliver twice (shouldn't break anything).\n+        b2 = block(2, spend=out1)\n         yield accepted()\n \n \n@@ -168,8 +184,8 @@ def tip(number):\n         # \n         # Nothing should happen at this point. We saw b2 first so it takes priority.\n         tip(1)\n-        block(3, spend=out1)\n-        # Deliver twice (should still not break anything)\n+        b3 = block(3, spend=out1)\n+        txout_b3 = PreviousSpendableOutput(b3.vtx[1], 1)\n         yield rejected()\n \n \n@@ -214,7 +230,7 @@ def tip(number):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(6)\n         block(9, spend=out4, additional_coinbase_value=1)\n-        yield rejected()\n+        yield rejected(RejectResult(16, 'bad-cb-amount'))\n \n         \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n@@ -226,7 +242,7 @@ def tip(number):\n         yield rejected()\n \n         block(11, spend=out4, additional_coinbase_value=1)\n-        yield rejected()\n+        yield rejected(RejectResult(16, 'bad-cb-amount'))\n \n \n         # Try again, but with a valid fork first\n@@ -252,6 +268,10 @@ def tip(number):\n \n         yield TestInstance([[b12, True, b13.sha256]]) # New tip should be b13.\n \n+        # Add a block with MAX_BLOCK_SIGOPS and one with one more sigop\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b16 (6)\n+        #                      \\-> b3 (1) -> b4 (2)\n         \n         # Test that a block with a lot of checksigs is okay\n         lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50 - 1))\n@@ -264,8 +284,121 @@ def tip(number):\n         out6 = get_spendable_output()\n         too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50))\n         block(16, spend=out6, script=too_many_checksigs)\n+        yield rejected(RejectResult(16, 'bad-blk-sigops'))\n+\n+\n+        # Attempt to spend a transaction created on a different fork\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b17 (b3.vtx[1])\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        block(17, spend=txout_b3)\n+        yield rejected(RejectResult(16, 'bad-txns-inputs-missingorspent'))\n+\n+        # Attempt to spend a transaction created on a different fork (on a fork this time)\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5)\n+        #                                                                \\-> b18 (b3.vtx[1]) -> b19 (6)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(13)\n+        block(18, spend=txout_b3)\n+        yield rejected()\n+\n+        block(19, spend=out6)\n         yield rejected()\n \n+        # Attempt to spend a coinbase at depth too low\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b20 (7)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        out7 = get_spendable_output()\n+        block(20, spend=out7)\n+        yield rejected(RejectResult(16, 'bad-txns-premature-spend-of-coinbase'))\n+\n+        # Attempt to spend a coinbase at depth too low (on a fork this time)\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5)\n+        #                                                                \\-> b21 (6) -> b22 (5)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(13)\n+        block(21, spend=out6)\n+        yield rejected()\n+\n+        block(22, spend=out5)\n+        yield rejected()\n+\n+        # Create a block on either side of MAX_BLOCK_SIZE and make sure its accepted/rejected\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b23 (6)\n+        #                                                                           \\-> b24 (6) -> b25 (7)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        b23 = block(23, spend=out6)\n+        old_hash = b23.sha256\n+        tx = CTransaction()\n+        script_length = MAX_BLOCK_SIZE - len(b23.serialize()) - 69\n+        script_output = CScript([chr(0)*script_length])\n+        tx.vout.append(CTxOut(0, script_output))\n+        tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 1)))\n+        b23 = update_block(23, [tx])\n+        # Make sure the math above worked out to produce a max-sized block\n+        assert_equal(len(b23.serialize()), MAX_BLOCK_SIZE)\n+        yield accepted()\n+\n+        # Make the next block one byte bigger and check that it fails\n+        tip(15)\n+        b24 = block(24, spend=out6)\n+        script_length = MAX_BLOCK_SIZE - len(b24.serialize()) - 69\n+        script_output = CScript([chr(0)*(script_length+1)])\n+        tx.vout = [CTxOut(0, script_output)]\n+        b24 = update_block(24, [tx])\n+        assert_equal(len(b24.serialize()), MAX_BLOCK_SIZE+1)\n+        yield rejected(RejectResult(16, 'bad-blk-length'))\n+\n+        b25 = block(25, spend=out7)\n+        yield rejected()\n+\n+        # Create blocks with a coinbase input script size out of range\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b15 (5) -> b23 (6) -> b30 (7)\n+        #                                                                           \\-> ... (6) -> ... (7)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(15)\n+        b26 = block(26, spend=out6)\n+        b26.vtx[0].vin[0].scriptSig = chr(0)\n+        b26.vtx[0].rehash()\n+        # update_block causes the merkle root to get updated, even with no new\n+        # transactions, and updates the required state.\n+        b26 = update_block(26, [])\n+        yield rejected(RejectResult(16, 'bad-cb-length'))\n+\n+        # Extend the b26 chain to make sure bitcoind isn't accepting b26\n+        b27 = block(27, spend=out7)\n+        yield rejected()\n+\n+        # Now try a too-large-coinbase script\n+        tip(15)\n+        b28 = block(28, spend=out6)\n+        b28.vtx[0].vin[0].scriptSig = chr(0)*101\n+        b28.vtx[0].rehash()\n+        b28 = update_block(28, [])\n+        yield rejected(RejectResult(16, 'bad-cb-length'))\n+\n+        # Extend the b28 chain to make sure bitcoind isn't accepted b28\n+        b29 = block(29, spend=out7)\n+        # TODO: Should get a reject message back with \"bad-prevblk\", except\n+        # there's a bug that prevents this from being detected.  Just note\n+        # failure for now, and add the reject result later.\n+        yield rejected()\n+\n+        # b30 has a max-sized coinbase scriptSig.\n+        tip(23)\n+        b30 = block(30)\n+        b30.vtx[0].vin[0].scriptSig = chr(0)*100\n+        b30.vtx[0].rehash()\n+        b30 = update_block(30, [])\n+        yield accepted()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "8e49b5656563fadf766e1bf2cefe932be38f8f39",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301f16ad1ca518c0873cd1bb99a26df36b46838b/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301f16ad1ca518c0873cd1bb99a26df36b46838b/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=301f16ad1ca518c0873cd1bb99a26df36b46838b",
        "patch": "@@ -36,6 +36,7 @@\n MY_SUBVERSION = \"/python-mininode-tester:0.0.1/\"\n \n MAX_INV_SZ = 50000\n+MAX_BLOCK_SIZE = 1000000\n \n # Keep our own socket map for asyncore, so that we can track disconnects\n # ourselves (to workaround an issue with closing an asyncore socket when "
      }
    ]
  }
]