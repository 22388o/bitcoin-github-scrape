[
  {
    "sha": "86edf4a2a502416ba8d6cebbce61030992f7ff6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmVkZjRhMmE1MDI0MTZiYThkNmNlYmJjZTYxMDMwOTkyZjdmZjZm",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-06-12T20:39:29Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-06-13T14:20:50Z"
      },
      "message": "expose CBlockIndex::nTx in getblock(header)",
      "tree": {
        "sha": "285ddbff2bb0788387d60cd3c364973cd67a273f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/285ddbff2bb0788387d60cd3c364973cd67a273f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86edf4a2a502416ba8d6cebbce61030992f7ff6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86edf4a2a502416ba8d6cebbce61030992f7ff6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86edf4a2a502416ba8d6cebbce61030992f7ff6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86edf4a2a502416ba8d6cebbce61030992f7ff6f/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a607d23ae82ee374799d21d02932d945c1ce9616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607d23ae82ee374799d21d02932d945c1ce9616",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a607d23ae82ee374799d21d02932d945c1ce9616"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "68279d7ffd9e51feb76287998e8030ddf363fde7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86edf4a2a502416ba8d6cebbce61030992f7ff6f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86edf4a2a502416ba8d6cebbce61030992f7ff6f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=86edf4a2a502416ba8d6cebbce61030992f7ff6f",
        "patch": "@@ -95,6 +95,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n     result.pushKV(\"bits\", strprintf(\"%08x\", blockindex->nBits));\n     result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n     result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n+    result.pushKV(\"nTx\", (uint64_t)blockindex->nTx);\n \n     if (blockindex->pprev)\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n@@ -140,6 +141,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n     result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n     result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n+    result.pushKV(\"nTx\", (uint64_t)blockindex->nTx);\n \n     if (blockindex->pprev)\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n@@ -694,6 +696,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n             \"  \\\"chainwork\\\" : \\\"0000...1f3\\\"     (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\",      (string) The hash of the next block\\n\"\n             \"}\\n\"\n@@ -782,6 +785,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n             \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n             \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n             \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n             \"}\\n\""
      },
      {
        "sha": "d400507a66bb411d7ebfd670b7322709f8ebc9f7",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86edf4a2a502416ba8d6cebbce61030992f7ff6f/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86edf4a2a502416ba8d6cebbce61030992f7ff6f/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=86edf4a2a502416ba8d6cebbce61030992f7ff6f",
        "patch": "@@ -260,10 +260,17 @@ def has_block(index):\n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n         assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n+        # Save block transaction count before pruning, assert value\n+        block1_details = node.getblock(node.getblockhash(1))\n+        assert_equal(block1_details[\"nTx\"], len(block1_details[\"tx\"]))\n+\n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n+        # Pruned block should still know the number of transactions\n+        assert_equal(node.getblockheader(node.getblockhash(1))[\"nTx\"], block1_details[\"nTx\"])\n+\n         # negative heights should raise an exception\n         assert_raises_rpc_error(-8, \"Negative\", node.pruneblockchain, -10)\n "
      },
      {
        "sha": "7acc59c2c622e1d0565e159627ecef9b29f76694",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86edf4a2a502416ba8d6cebbce61030992f7ff6f/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86edf4a2a502416ba8d6cebbce61030992f7ff6f/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=86edf4a2a502416ba8d6cebbce61030992f7ff6f",
        "patch": "@@ -217,6 +217,7 @@ def _test_getblockheader(self):\n         assert_equal(header['confirmations'], 1)\n         assert_equal(header['previousblockhash'], secondbesthash)\n         assert_is_hex_string(header['chainwork'])\n+        assert_equal(header['nTx'], 1)\n         assert_is_hash_string(header['hash'])\n         assert_is_hash_string(header['previousblockhash'])\n         assert_is_hash_string(header['merkleroot'])"
      }
    ]
  }
]