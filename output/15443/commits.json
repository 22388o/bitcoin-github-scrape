[
  {
    "sha": "cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmYyZDc1ZDhmNDliN2IxZTMyYWNiNTM3M2IzMTJiNDg0ZjNmYTZh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-19T15:14:27Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-03-10T08:14:04Z"
      },
      "message": "qa: Add getdescriptorinfo functional test",
      "tree": {
        "sha": "0615363e636a2c18d642fbe185403bd80a7ca79f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0615363e636a2c18d642fbe185403bd80a7ca79f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fb4bbfb0e5f1885bd8c4fea652facfbe3de5299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fb4bbfb0e5f1885bd8c4fea652facfbe3de5299",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fb4bbfb0e5f1885bd8c4fea652facfbe3de5299"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "977dc805ef1c2ec8ace6b8642cd41bdc17e37241",
        "filename": "test/functional/rpc_getdescriptorinfo.py",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a/test/functional/rpc_getdescriptorinfo.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a/test/functional/rpc_getdescriptorinfo.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getdescriptorinfo.py?ref=cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a",
        "patch": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test getdescriptorinfo RPC.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class DescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-disablewallet\"]]\n+\n+    def test_desc(self, desc, isrange, issolvable, hasprivatekeys):\n+        info = self.nodes[0].getdescriptorinfo(desc)\n+        assert_equal(info, self.nodes[0].getdescriptorinfo(descsum_create(desc)))\n+        assert_equal(info['descriptor'], descsum_create(desc))\n+        assert_equal(info['isrange'], isrange)\n+        assert_equal(info['issolvable'], issolvable)\n+        assert_equal(info['hasprivatekeys'], hasprivatekeys)\n+\n+    def run_test(self):\n+        assert_raises_rpc_error(-1, 'getdescriptorinfo', self.nodes[0].getdescriptorinfo)\n+        assert_raises_rpc_error(-3, 'Expected type string', self.nodes[0].getdescriptorinfo, 1)\n+        assert_raises_rpc_error(-5, 'is not a valid descriptor function', self.nodes[0].getdescriptorinfo, '')\n+\n+        # P2PK output with the specified public key.\n+        self.test_desc('pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # P2PKH output with the specified public key.\n+        self.test_desc('pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # P2WPKH output with the specified public key.\n+        self.test_desc('wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # P2SH-P2WPKH output with the specified public key.\n+        self.test_desc('sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # Any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+        self.test_desc('combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # An (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+        self.test_desc('sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # A bare *1-of-2* multisig output with keys in the specified order.\n+        self.test_desc('multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # A P2SH *2-of-2* multisig output with keys in the specified order.\n+        self.test_desc('sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # A P2WSH *2-of-3* multisig output with keys in the specified order.\n+        self.test_desc('wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # A P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+        self.test_desc('sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # A P2PK output with the public key of the specified xpub.\n+        self.test_desc('pk(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B)', isrange=False, issolvable=True, hasprivatekeys=False)\n+        # A P2PKH output with child key *1'/2* of the specified xpub.\n+        self.test_desc(\"pkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1'/2)\", isrange=False, issolvable=True, hasprivatekeys=False)\n+        # A set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint `d34db33f`, and derived using path `44'/0'/0'`.\n+        self.test_desc(\"pkh([d34db33f/44'/0'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/*)\", isrange=True, issolvable=True, hasprivatekeys=False)\n+        # A set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n+        self.test_desc(\"wsh(multi(1,tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/0/*,tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/0/0/*))\", isrange=True, issolvable=True, hasprivatekeys=False)\n+\n+\n+if __name__ == '__main__':\n+    DescriptorTest().main()"
      },
      {
        "sha": "7edb36c151434175812d96af2e458b4b34a22e39",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=cbf2d75d8f49b7b1e32acb5373b312b484f3fa6a",
        "patch": "@@ -217,6 +217,7 @@\n     'feature_config_args.py',\n     'rpc_getaddressinfo_labels_purpose_deprecation.py',\n     'rpc_getaddressinfo_label_deprecation.py',\n+    'rpc_getdescriptorinfo.py',\n     'rpc_help.py',\n     'feature_help.py',\n     'feature_shutdown.py',"
      }
    ]
  }
]