[
  {
    "sha": "9e037c27008cf0a6590759d64f2db53cdcc0cc94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTAzN2MyNzAwOGNmMGE2NTkwNzU5ZDY0ZjJkYjUzY2RjYzBjYzk0",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-08-16T14:38:23Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-08-16T14:38:23Z"
      },
      "message": "RPC: Remove 'getwork' deprecated mining protocol\n\nUse getblocktemplate instead.",
      "tree": {
        "sha": "f67ec2792bd1d8aed00a04b9c0f443a921ce9f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f67ec2792bd1d8aed00a04b9c0f443a921ce9f59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e037c27008cf0a6590759d64f2db53cdcc0cc94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e037c27008cf0a6590759d64f2db53cdcc0cc94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e037c27008cf0a6590759d64f2db53cdcc0cc94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e037c27008cf0a6590759d64f2db53cdcc0cc94/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "317f57ec87da566ee2ae648853a9105a4136efef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/317f57ec87da566ee2ae648853a9105a4136efef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/317f57ec87da566ee2ae648853a9105a4136efef"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 7,
      "deletions": 131
    },
    "files": [
      {
        "sha": "cf6622e966880ca4745d175f4f452b76f0718307",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "patch": "@@ -237,7 +237,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,     false },\n     { \"signmessage\",            &signmessage,            false,     false },\n     { \"verifymessage\",          &verifymessage,          false,     false },\n-    { \"getwork\",                &getwork,                true,      false },\n     { \"listaccounts\",           &listaccounts,           false,     false },\n     { \"settxfee\",               &settxfee,               false,     false },\n     { \"getblocktemplate\",       &getblocktemplate,       true,      false },\n@@ -900,7 +899,7 @@ void JSONRequest::parse(const Value& valRequest)\n     if (valMethod.type() != str_type)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n+    if (strMethod != \"getblocktemplate\")\n         printf(\"ThreadRPCServer method=%s\\n\", strMethod.c_str());\n \n     // Parse params"
      },
      {
        "sha": "7ac6949055d6f13a544f776faecb7c8add16e694",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "patch": "@@ -155,7 +155,6 @@ extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHe\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getwork(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value submitblock(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "90f437022e9931e73a8a5f2d5a3ca7d77203ddcf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "patch": "@@ -982,7 +982,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     StartNode(threadGroup);\n \n-    // InitRPCMining is needed here so getwork/getblocktemplate in the GUI debug console works properly.\n+    // InitRPCMining is needed here so getblocktemplate in the GUI debug console works properly.\n     InitRPCMining();\n     if (fServer)\n         StartRPCThreads();"
      },
      {
        "sha": "3d3c89a40c5987ab5891258e381abfd5523095b7",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "patch": "@@ -10,9 +10,6 @@\n \n \n \n-\n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner\n@@ -384,7 +381,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n }\n \n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+static void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -402,7 +399,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n }\n \n \n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n+static void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n {\n     //\n     // Pre-build hash buffers\n@@ -448,7 +445,7 @@ void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash\n }\n \n \n-bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n+static bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n {\n     uint256 hash = pblock->GetHash();\n     uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();"
      },
      {
        "sha": "3fed3892e9f3ebf68dd8758b450a0a120ab22004",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "patch": "@@ -12,12 +12,6 @@\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(CReserveKey& reservekey);\n-/** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-/** Do mining precalculation */\n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n-/** Check mined block */\n-bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n /** Base sha256 mining transform */\n void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n "
      },
      {
        "sha": "4b320e8a6691497d437081c70bd549492f93f48f",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 115,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e037c27008cf0a6590759d64f2db53cdcc0cc94/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "patch": "@@ -12,13 +12,13 @@\n using namespace json_spirit;\n using namespace std;\n \n-// Key used by getwork/getblocktemplate miners.\n+// Key used by getblocktemplate miners.\n // Allocated in InitRPCMining, free'd in ShutdownRPCMining\n static CReserveKey* pMiningKey = NULL;\n \n void InitRPCMining()\n {\n-    // getwork/getblocktemplate mining rewards paid here:\n+    // getblocktemplate mining rewards paid here:\n     pMiningKey = new CReserveKey(pwalletMain);\n }\n \n@@ -99,119 +99,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n }\n \n \n-Value getwork(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() > 1)\n-        throw runtime_error(\n-            \"getwork [data]\\n\"\n-            \"If [data] is not specified, returns formatted hash data to work on:\\n\"\n-            \"  \\\"midstate\\\" : precomputed hash state after hashing the first half of the data (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"data\\\" : block data\\n\"\n-            \"  \\\"hash1\\\" : formatted hash buffer for second hash (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"target\\\" : little endian hash target\\n\"\n-            \"If [data] is specified, tries to solve the block and returns true if it was successful.\");\n-\n-    if (vNodes.empty())\n-        throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n-\n-    if (IsInitialBlockDownload())\n-        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n-\n-    typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n-    static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n-    static vector<CBlockTemplate*> vNewBlockTemplate;\n-\n-    if (params.size() == 0)\n-    {\n-        // Update block\n-        static unsigned int nTransactionsUpdatedLast;\n-        static CBlockIndex* pindexPrev;\n-        static int64 nStart;\n-        static CBlockTemplate* pblocktemplate;\n-        if (pindexPrev != pindexBest ||\n-            (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60))\n-        {\n-            if (pindexPrev != pindexBest)\n-            {\n-                // Deallocate old blocks since they're obsolete now\n-                mapNewBlock.clear();\n-                BOOST_FOREACH(CBlockTemplate* pblocktemplate, vNewBlockTemplate)\n-                    delete pblocktemplate;\n-                vNewBlockTemplate.clear();\n-            }\n-\n-            // Clear pindexPrev so future getworks make a new block, despite any failures from here on\n-            pindexPrev = NULL;\n-\n-            // Store the pindexBest used before CreateNewBlock, to avoid races\n-            nTransactionsUpdatedLast = nTransactionsUpdated;\n-            CBlockIndex* pindexPrevNew = pindexBest;\n-            nStart = GetTime();\n-\n-            // Create new block\n-            pblocktemplate = CreateNewBlock(*pMiningKey);\n-            if (!pblocktemplate)\n-                throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n-            vNewBlockTemplate.push_back(pblocktemplate);\n-\n-            // Need to update only after we know CreateNewBlock succeeded\n-            pindexPrev = pindexPrevNew;\n-        }\n-        CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n-\n-        // Update nTime\n-        UpdateTime(*pblock, pindexPrev);\n-        pblock->nNonce = 0;\n-\n-        // Update nExtraNonce\n-        static unsigned int nExtraNonce = 0;\n-        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n-\n-        // Save\n-        mapNewBlock[pblock->hashMerkleRoot] = make_pair(pblock, pblock->vtx[0].vin[0].scriptSig);\n-\n-        // Pre-build hash buffers\n-        char pmidstate[32];\n-        char pdata[128];\n-        char phash1[64];\n-        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n-\n-        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-\n-        Object result;\n-        result.push_back(Pair(\"midstate\", HexStr(BEGIN(pmidstate), END(pmidstate)))); // deprecated\n-        result.push_back(Pair(\"data\",     HexStr(BEGIN(pdata), END(pdata))));\n-        result.push_back(Pair(\"hash1\",    HexStr(BEGIN(phash1), END(phash1)))); // deprecated\n-        result.push_back(Pair(\"target\",   HexStr(BEGIN(hashTarget), END(hashTarget))));\n-        return result;\n-    }\n-    else\n-    {\n-        // Parse parameters\n-        vector<unsigned char> vchData = ParseHex(params[0].get_str());\n-        if (vchData.size() != 128)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n-        CBlock* pdata = (CBlock*)&vchData[0];\n-\n-        // Byte reverse\n-        for (int i = 0; i < 128/4; i++)\n-            ((unsigned int*)pdata)[i] = ByteReverse(((unsigned int*)pdata)[i]);\n-\n-        // Get saved block\n-        if (!mapNewBlock.count(pdata->hashMerkleRoot))\n-            return false;\n-        CBlock* pblock = mapNewBlock[pdata->hashMerkleRoot].first;\n-\n-        pblock->nTime = pdata->nTime;\n-        pblock->nNonce = pdata->nNonce;\n-        pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;\n-        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-\n-        return CheckWork(pblock, *pwalletMain, *pMiningKey);\n-    }\n-}\n-\n-\n Value getblocktemplate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)"
      }
    ]
  },
  {
    "sha": "e527bab9e84ba597e438bd5af1468cda018d4483",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTI3YmFiOWU4NGJhNTk3ZTQzOGJkNWFmMTQ2OGNkYTAxOGQ0NDgz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-08-20T13:14:06Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-08-20T13:14:06Z"
      },
      "message": "Remove mentions of 4way miner in debian bitcoin.conf example/manpage",
      "tree": {
        "sha": "1d6ae71db112b1e493acf68fc7a398680a0e0283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d6ae71db112b1e493acf68fc7a398680a0e0283"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e527bab9e84ba597e438bd5af1468cda018d4483",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e527bab9e84ba597e438bd5af1468cda018d4483",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e527bab9e84ba597e438bd5af1468cda018d4483",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e527bab9e84ba597e438bd5af1468cda018d4483/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e037c27008cf0a6590759d64f2db53cdcc0cc94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e037c27008cf0a6590759d64f2db53cdcc0cc94"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "87f596c516798f3f714007adc3178c1994d3813e",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e527bab9e84ba597e438bd5af1468cda018d4483/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e527bab9e84ba597e438bd5af1468cda018d4483/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=e527bab9e84ba597e438bd5af1468cda018d4483",
        "patch": "@@ -59,9 +59,6 @@ rpcsslprivatekeyfile=server.pem\n # Set gen=1 to attempt to generate bitcoins\n gen=0\n \n-# Use SSE instructions to try to generate bitcoins faster.\n-#4way=1\n-\n # Pre-generate this many public/private key pairs, so wallet backups will be valid for\n # both prior transactions and several dozen future transactions.\n keypool=100"
      },
      {
        "sha": "72838ffa4ddaec098cb6d7402de3fa3017c29a49",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e527bab9e84ba597e438bd5af1468cda018d4483/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e527bab9e84ba597e438bd5af1468cda018d4483/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=e527bab9e84ba597e438bd5af1468cda018d4483",
        "patch": "@@ -64,9 +64,6 @@ Acceptable ciphers (default: TLSv1+HIGH:\\:!SSLv2:\\:!aNULL:\\:!eNULL:\\:!AH:\\:!3DES\n \\fBgen=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n Enable or disable attempt to generate bitcoins.\n .TP\n-\\fB4way=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n-Enable or disable use SSE instructions to try to generate bitcoins faster.\n-.TP\n \\fBkeypool=\\fR\\fI'100'\\fR\n Pre-generate this many public/private key pairs, so wallet backups will be valid for both prior transactions and several dozen future transactions.\n .TP"
      }
    ]
  },
  {
    "sha": "8dfdc25ed56c7982e88ab0057f28ccd081431808",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGZkYzI1ZWQ1NmM3OTgyZTg4YWIwMDU3ZjI4Y2NkMDgxNDMxODA4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-08-20T13:14:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-08-20T13:14:48Z"
      },
      "message": "Remove embedded BitcoinMiner",
      "tree": {
        "sha": "18b9245adf6e11ebc132129ad6632b4bb4c4aa69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18b9245adf6e11ebc132129ad6632b4bb4c4aa69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dfdc25ed56c7982e88ab0057f28ccd081431808",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dfdc25ed56c7982e88ab0057f28ccd081431808",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dfdc25ed56c7982e88ab0057f28ccd081431808",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dfdc25ed56c7982e88ab0057f28ccd081431808/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e527bab9e84ba597e438bd5af1468cda018d4483",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e527bab9e84ba597e438bd5af1468cda018d4483",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e527bab9e84ba597e438bd5af1468cda018d4483"
      }
    ],
    "stats": {
      "total": 488,
      "additions": 0,
      "deletions": 488
    },
    "files": [
      {
        "sha": "1328fd42ef996bad57e01297373eea0abe1b48f2",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -56,9 +56,6 @@ rpcsslprivatekeyfile=server.pem\n \n # Miscellaneous options\n \n-# Set gen=1 to attempt to generate bitcoins\n-gen=0\n-\n # Pre-generate this many public/private key pairs, so wallet backups will be valid for\n # both prior transactions and several dozen future transactions.\n keypool=100"
      },
      {
        "sha": "4706ef6fe95b78d4e420d1ce3e24bf01af9c0fbc",
        "filename": "contrib/debian/manpages/bitcoin-qt.1",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/manpages/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/manpages/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-qt.1?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -16,12 +16,6 @@ Specify configuration file (default: bitcoin.conf)\n \\fB\\-pid=\\fR<file>\n Specify pid file (default: bitcoind.pid)\n .TP\n-\\fB\\-gen\\fR\n-Generate coins\n-.TP\n-\\fB\\-gen\\fR=\\fI0\\fR\n-Don't generate coins\n-.TP\n \\fB\\-datadir=\\fR<dir>\n Specify data directory\n .TP"
      },
      {
        "sha": "529ce09b511e965d34be430d91b7e1a3cd413b61",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -61,9 +61,6 @@ Acceptable ciphers (default: TLSv1+HIGH:\\:!SSLv2:\\:!aNULL:\\:!eNULL:\\:!AH:\\:!3DES\n .TP\n .SH MISCELLANEOUS OPTIONS\n .TP\n-\\fBgen=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n-Enable or disable attempt to generate bitcoins.\n-.TP\n \\fBkeypool=\\fR\\fI'100'\\fR\n Pre-generate this many public/private key pairs, so wallet backups will be valid for both prior transactions and several dozen future transactions.\n .TP"
      },
      {
        "sha": "8e1839989061adebcbb120358f1f114be490e6e2",
        "filename": "contrib/debian/manpages/bitcoind.1",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/manpages/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/contrib/debian/manpages/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoind.1?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -15,12 +15,6 @@ Bitcoins can be sent easily through the Internet, without having to trust middle\n \\fB\\-conf=\\fR<file>\n Specify configuration file (default: bitcoin.conf)\n .TP\n-\\fB\\-gen\\fR\n-Generate coins\n-.TP\n-\\fB\\-gen\\fR=\\fI0\\fR\n-Don't generate coins\n-.TP\n \\fB\\-min\\fR\n Start minimized\n .TP\n@@ -108,18 +102,6 @@ Returns the block number of the latest block in the longest block chain.\n \\fBgetconnectioncount\\fR\n Returns the number of connections to other nodes.\n .TP\n-\\fBgetdifficulty\\fR\n-Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\n-.TP\n-\\fBgetgenerate\\fR\n-Returns boolean true if server is trying to generate bitcoins, false otherwise.\n-.TP\n-\\fBsetgenerate 'generate' ['genproclimit']\\fR\n-Generation is limited to ['genproclimit'] processors, \\-1 is unlimited.\n-.TP\n-\\fBgethashespersec\\fR\n-Returns a recent hashes per second performance measurement while generating.\n-.TP\n \\fBgetinfo\\fR\n Returns an object containing server information.\n .TP"
      },
      {
        "sha": "d3c1f5a972a0fb9647d2ba3a57bf62898d750e9d",
        "filename": "doc/coding.md",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/doc/coding.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/doc/coding.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/coding.md?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -85,8 +85,6 @@ Threads\n  \n - ThreadRPCServer : Remote procedure call handler, listens on port 8332 for connections and services them.\n  \n-- ThreadBitcoinMiner : Generates bitcoins\n-  \n - ThreadMapPort : Universal plug-and-play startup/shutdown\n  \n - Shutdown : Does an orderly shutdown of everything"
      },
      {
        "sha": "02445cc5f9097245a41fa6ddf709db7659c21b7b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -201,9 +201,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"addnode\",                &addnode,                true,      true },\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true },\n     { \"getdifficulty\",          &getdifficulty,          true,      false },\n-    { \"getgenerate\",            &getgenerate,            true,      false },\n-    { \"setgenerate\",            &setgenerate,            true,      false },\n-    { \"gethashespersec\",        &gethashespersec,        true,      false },\n     { \"getinfo\",                &getinfo,                true,      false },\n     { \"getmininginfo\",          &getmininginfo,          true,      false },\n     { \"getnewaddress\",          &getnewaddress,          true,      false },"
      },
      {
        "sha": "7ebd7aa3e22be6b60ead5ae6eabe8d7ddf6b3bd5",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -151,9 +151,6 @@ extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool f\n extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n \n-extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n-extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value submitblock(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "297a0034cbbe0ef18cf7424f4376f8723bb01538",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -105,7 +105,6 @@ void Shutdown()\n     StopRPCThreads();\n     ShutdownRPCMining();\n     bitdb.Flush(false);\n-    GenerateBitcoins(false, NULL);\n     StopNode();\n     {\n         LOCK(cs_main);\n@@ -169,7 +168,6 @@ std::string HelpMessage()\n     strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n     strUsage += \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\";\n     strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n-    strUsage += \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\";\n     strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n     strUsage += \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\";\n@@ -987,9 +985,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (fServer)\n         StartRPCThreads();\n \n-    // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain);\n-\n     // ********************************************************* Step 12: finished\n \n     uiInterface.InitMessage(_(\"Done loading\"));"
      },
      {
        "sha": "15cc25405c42bfd6f93f9a03237e6224b3302eb4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -67,9 +67,6 @@ CScript COINBASE_FLAGS;\n \n const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n-double dHashesPerSec = 0.0;\n-int64 nHPSTimerStart = 0;\n-\n // Settings\n int64 nTransactionFee = 0;\n "
      },
      {
        "sha": "201605d8c94b4ed2026044e15fd219772ab8676c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -82,8 +82,6 @@ extern unsigned int nTransactionsUpdated;\n extern uint64 nLastBlockTx;\n extern uint64 nLastBlockSize;\n extern const std::string strMessageMagic;\n-extern double dHashesPerSec;\n-extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;"
      },
      {
        "sha": "79a76938a6f1ae879e36f660c8517e308ccacd09",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 356,
        "changes": 356,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -9,83 +9,6 @@\n #include \"main.h\"\n \n \n-\n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// BitcoinMiner\n-//\n-\n-int static FormatHashBlocks(void* pbuffer, unsigned int len)\n-{\n-    unsigned char* pdata = (unsigned char*)pbuffer;\n-    unsigned int blocks = 1 + ((len + 8) / 64);\n-    unsigned char* pend = pdata + 64 * blocks;\n-    memset(pdata + len, 0, 64 * blocks - len);\n-    pdata[len] = 0x80;\n-    unsigned int bits = len * 8;\n-    pend[-1] = (bits >> 0) & 0xff;\n-    pend[-2] = (bits >> 8) & 0xff;\n-    pend[-3] = (bits >> 16) & 0xff;\n-    pend[-4] = (bits >> 24) & 0xff;\n-    return blocks;\n-}\n-\n-static const unsigned int pSHA256InitState[8] =\n-{0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};\n-\n-void SHA256Transform(void* pstate, void* pinput, const void* pinit)\n-{\n-    SHA256_CTX ctx;\n-    unsigned char data[64];\n-\n-    SHA256_Init(&ctx);\n-\n-    for (int i = 0; i < 16; i++)\n-        ((uint32_t*)data)[i] = ByteReverse(((uint32_t*)pinput)[i]);\n-\n-    for (int i = 0; i < 8; i++)\n-        ctx.h[i] = ((uint32_t*)pinit)[i];\n-\n-    SHA256_Update(&ctx, data, sizeof(data));\n-    for (int i = 0; i < 8; i++)\n-        ((uint32_t*)pstate)[i] = ctx.h[i];\n-}\n-\n-//\n-// ScanHash scans nonces looking for a hash with at least some zero bits.\n-// It operates on big endian data.  Caller does the byte reversing.\n-// All input buffers are 16-byte aligned.  nNonce is usually preserved\n-// between calls, but periodically or if nNonce is 0xffff0000 or above,\n-// the block is rebuilt and nNonce starts over at zero.\n-//\n-unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n-{\n-    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n-    for (;;)\n-    {\n-        // Crypto++ SHA256\n-        // Hash pdata using pmidstate as the starting state into\n-        // pre-formatted buffer phash1, then hash phash1 into phash\n-        nNonce++;\n-        SHA256Transform(phash1, pdata, pmidstate);\n-        SHA256Transform(phash, phash1, pSHA256InitState);\n-\n-        // Return the nonce if the hash has at least some zero bits,\n-        // caller will check if it has enough to reach the target\n-        if (((unsigned short*)phash)[14] == 0)\n-            return nNonce;\n-\n-        // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n-        {\n-            nHashesDone = 0xffff+1;\n-            return (unsigned int) -1;\n-        }\n-        if ((nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n-    }\n-}\n-\n // Some explaining would be appreciated\n class COrphan\n {\n@@ -379,282 +302,3 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n \n     return pblocktemplate.release();\n }\n-\n-\n-static void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n-{\n-    // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n-    {\n-        nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n-    }\n-    ++nExtraNonce;\n-    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n-    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n-    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n-\n-    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-}\n-\n-\n-static void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n-{\n-    //\n-    // Pre-build hash buffers\n-    //\n-    struct\n-    {\n-        struct unnamed2\n-        {\n-            int nVersion;\n-            uint256 hashPrevBlock;\n-            uint256 hashMerkleRoot;\n-            unsigned int nTime;\n-            unsigned int nBits;\n-            unsigned int nNonce;\n-        }\n-        block;\n-        unsigned char pchPadding0[64];\n-        uint256 hash1;\n-        unsigned char pchPadding1[64];\n-    }\n-    tmp;\n-    memset(&tmp, 0, sizeof(tmp));\n-\n-    tmp.block.nVersion       = pblock->nVersion;\n-    tmp.block.hashPrevBlock  = pblock->hashPrevBlock;\n-    tmp.block.hashMerkleRoot = pblock->hashMerkleRoot;\n-    tmp.block.nTime          = pblock->nTime;\n-    tmp.block.nBits          = pblock->nBits;\n-    tmp.block.nNonce         = pblock->nNonce;\n-\n-    FormatHashBlocks(&tmp.block, sizeof(tmp.block));\n-    FormatHashBlocks(&tmp.hash1, sizeof(tmp.hash1));\n-\n-    // Byte swap all the input buffer\n-    for (unsigned int i = 0; i < sizeof(tmp)/4; i++)\n-        ((unsigned int*)&tmp)[i] = ByteReverse(((unsigned int*)&tmp)[i]);\n-\n-    // Precalc the first half of the first hash, which stays constant\n-    SHA256Transform(pmidstate, &tmp.block, pSHA256InitState);\n-\n-    memcpy(pdata, &tmp.block, 128);\n-    memcpy(phash1, &tmp.hash1, 64);\n-}\n-\n-\n-static bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n-{\n-    uint256 hash = pblock->GetHash();\n-    uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-\n-    if (hash > hashTarget)\n-        return false;\n-\n-    //// debug print\n-    printf(\"BitcoinMiner:\\n\");\n-    printf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex().c_str(), hashTarget.GetHex().c_str());\n-    pblock->print();\n-    printf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue).c_str());\n-\n-    // Found a solution\n-    {\n-        LOCK(cs_main);\n-        if (pblock->hashPrevBlock != hashBestChain)\n-            return error(\"BitcoinMiner : generated block is stale\");\n-\n-        // Remove key from key pool\n-        reservekey.KeepKey();\n-\n-        // Track how many getdata requests this block gets\n-        {\n-            LOCK(wallet.cs_wallet);\n-            wallet.mapRequestCount[pblock->GetHash()] = 0;\n-        }\n-\n-        // Process this block the same as if we had received it from another node\n-        CValidationState state;\n-        if (!ProcessBlock(state, NULL, pblock))\n-            return error(\"BitcoinMiner : ProcessBlock, block not accepted\");\n-    }\n-\n-    return true;\n-}\n-\n-void static BitcoinMiner(CWallet *pwallet)\n-{\n-    printf(\"BitcoinMiner started\\n\");\n-    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-    RenameThread(\"bitcoin-miner\");\n-\n-    // Each thread has its own key and counter\n-    CReserveKey reservekey(pwallet);\n-    unsigned int nExtraNonce = 0;\n-\n-    try { while (true) {\n-        if (Params().NetworkID() != CChainParams::REGTEST) {\n-            // Busy-wait for the network to come online so we don't waste time mining\n-            // on an obsolete chain. In regtest mode we expect to fly solo.\n-            while (vNodes.empty())\n-                MilliSleep(1000);\n-        }\n-\n-        //\n-        // Create new block\n-        //\n-        unsigned int nTransactionsUpdatedLast = nTransactionsUpdated;\n-        CBlockIndex* pindexPrev = pindexBest;\n-\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(reservekey));\n-        if (!pblocktemplate.get())\n-            return;\n-        CBlock *pblock = &pblocktemplate->block;\n-        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n-\n-        printf(\"Running BitcoinMiner with %\"PRIszu\" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n-               ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n-\n-        //\n-        // Pre-build hash buffers\n-        //\n-        char pmidstatebuf[32+16]; char* pmidstate = alignup<16>(pmidstatebuf);\n-        char pdatabuf[128+16];    char* pdata     = alignup<16>(pdatabuf);\n-        char phash1buf[64+16];    char* phash1    = alignup<16>(phash1buf);\n-\n-        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n-\n-        unsigned int& nBlockTime = *(unsigned int*)(pdata + 64 + 4);\n-        unsigned int& nBlockBits = *(unsigned int*)(pdata + 64 + 8);\n-        unsigned int& nBlockNonce = *(unsigned int*)(pdata + 64 + 12);\n-\n-\n-        //\n-        // Search\n-        //\n-        int64 nStart = GetTime();\n-        uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-        uint256 hashbuf[2];\n-        uint256& hash = *alignup<16>(hashbuf);\n-        while (true)\n-        {\n-            unsigned int nHashesDone = 0;\n-            unsigned int nNonceFound;\n-\n-            // Crypto++ SHA256\n-            nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1,\n-                                            (char*)&hash, nHashesDone);\n-\n-            // Check if something found\n-            if (nNonceFound != (unsigned int) -1)\n-            {\n-                for (unsigned int i = 0; i < sizeof(hash)/4; i++)\n-                    ((unsigned int*)&hash)[i] = ByteReverse(((unsigned int*)&hash)[i]);\n-\n-                if (hash <= hashTarget)\n-                {\n-                    // Found a solution\n-                    pblock->nNonce = ByteReverse(nNonceFound);\n-                    assert(hash == pblock->GetHash());\n-\n-                    SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                    CheckWork(pblock, *pwallet, reservekey);\n-                    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-\n-                    // In regression test mode, stop mining after a block is found. This\n-                    // allows developers to controllably generate a block on demand.\n-                    if (Params().NetworkID() == CChainParams::REGTEST)\n-                        throw boost::thread_interrupted();\n-\n-                    break;\n-                }\n-            }\n-\n-            // Meter hashes/sec\n-            static int64 nHashCounter;\n-            if (nHPSTimerStart == 0)\n-            {\n-                nHPSTimerStart = GetTimeMillis();\n-                nHashCounter = 0;\n-            }\n-            else\n-                nHashCounter += nHashesDone;\n-            if (GetTimeMillis() - nHPSTimerStart > 4000)\n-            {\n-                static CCriticalSection cs;\n-                {\n-                    LOCK(cs);\n-                    if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                    {\n-                        dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                        nHPSTimerStart = GetTimeMillis();\n-                        nHashCounter = 0;\n-                        static int64 nLogTime;\n-                        if (GetTime() - nLogTime > 30 * 60)\n-                        {\n-                            nLogTime = GetTime();\n-                            printf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n-                        }\n-                    }\n-                }\n-            }\n-\n-            // Check for stop or if block needs to be rebuilt\n-            boost::this_thread::interruption_point();\n-            if (vNodes.empty() && Params().NetworkID() != CChainParams::REGTEST)\n-                break;\n-            if (nBlockNonce >= 0xffff0000)\n-                break;\n-            if (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n-                break;\n-            if (pindexPrev != pindexBest)\n-                break;\n-\n-            // Update nTime every few seconds\n-            UpdateTime(*pblock, pindexPrev);\n-            nBlockTime = ByteReverse(pblock->nTime);\n-            if (TestNet())\n-            {\n-                // Changing pblock->nTime can change work required on testnet:\n-                nBlockBits = ByteReverse(pblock->nBits);\n-                hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n-            }\n-        }\n-    } }\n-    catch (boost::thread_interrupted)\n-    {\n-        printf(\"BitcoinMiner terminated\\n\");\n-        throw;\n-    }\n-}\n-\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n-{\n-    static boost::thread_group* minerThreads = NULL;\n-\n-    int nThreads = GetArg(\"-genproclimit\", -1);\n-    if (nThreads < 0) {\n-        if (Params().NetworkID() == CChainParams::REGTEST)\n-            nThreads = 1;\n-        else\n-            nThreads = boost::thread::hardware_concurrency();\n-    }\n-\n-    if (minerThreads != NULL)\n-    {\n-        minerThreads->interrupt_all();\n-        delete minerThreads;\n-        minerThreads = NULL;\n-    }\n-\n-    if (nThreads == 0 || !fGenerate)\n-        return;\n-\n-    minerThreads = new boost::thread_group();\n-    for (int i = 0; i < nThreads; i++)\n-        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n-}\n-\n-\n-"
      },
      {
        "sha": "9dfabedea7fa5b8c34905e2217ac7486b13209e2",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -8,11 +8,7 @@\n #include \"core.h\"\n #include \"wallet.h\"\n \n-/** Run the miner threads */\n-void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(CReserveKey& reservekey);\n-/** Base sha256 mining transform */\n-void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "5a9de14979814222d2e7e41a6b9425655b2fbd2f",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -27,55 +27,6 @@ void ShutdownRPCMining()\n     delete pMiningKey; pMiningKey = NULL;\n }\n \n-Value getgenerate(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"getgenerate\\n\"\n-            \"Returns true or false.\");\n-\n-    return GetBoolArg(\"-gen\", false);\n-}\n-\n-\n-Value setgenerate(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n-        throw runtime_error(\n-            \"setgenerate <generate> [genproclimit]\\n\"\n-            \"<generate> is true or false to turn generation on or off.\\n\"\n-            \"Generation is limited to [genproclimit] processors, -1 is unlimited.\");\n-\n-    bool fGenerate = true;\n-    if (params.size() > 0)\n-        fGenerate = params[0].get_bool();\n-\n-    if (params.size() > 1)\n-    {\n-        int nGenProcLimit = params[1].get_int();\n-        mapArgs[\"-genproclimit\"] = itostr(nGenProcLimit);\n-        if (nGenProcLimit == 0)\n-            fGenerate = false;\n-    }\n-    mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n-\n-    GenerateBitcoins(fGenerate, pwalletMain);\n-    return Value::null;\n-}\n-\n-\n-Value gethashespersec(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"gethashespersec\\n\"\n-            \"Returns a recent hashes per second performance measurement while generating.\");\n-\n-    if (GetTimeMillis() - nHPSTimerStart > 8000)\n-        return (boost::int64_t)0;\n-    return (boost::int64_t)dHashesPerSec;\n-}\n-\n \n Value getmininginfo(const Array& params, bool fHelp)\n {\n@@ -90,9 +41,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"generate\",         GetBoolArg(\"-gen\", false)));\n-    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n-    obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          TestNet()));\n     return obj;"
      },
      {
        "sha": "64aa6fd85fde12516cf139fbc06bd68723f8c898",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dfdc25ed56c7982e88ab0057f28ccd081431808/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "patch": "@@ -7,8 +7,6 @@\n #include \"miner.h\"\n #include \"wallet.h\"\n \n-extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n-\n BOOST_AUTO_TEST_SUITE(miner_tests)\n \n static\n@@ -202,30 +200,4 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     pindexBest->nHeight = nHeight;\n }\n \n-BOOST_AUTO_TEST_CASE(sha256transform_equality)\n-{\n-    unsigned int pSHA256InitState[8] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};\n-\n-\n-    // unsigned char pstate[32];\n-    unsigned char pinput[64];\n-\n-    int i;\n-\n-    for (i = 0; i < 32; i++) {\n-        pinput[i] = i;\n-        pinput[i+32] = 0;\n-    }\n-\n-    uint256 hash;\n-\n-    SHA256Transform(&hash, pinput, pSHA256InitState);\n-\n-    BOOST_TEST_MESSAGE(hash.GetHex());\n-\n-    uint256 hash_reference(\"0x2df5e1c65ef9f8cde240d23cae2ec036d31a15ec64bc68f64be242b1da6631f3\");\n-\n-    BOOST_CHECK(hash == hash_reference);\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2MxODkxYzNiMmJjZWNkMTIxMWI2Yjg5OTY5NmFlMWU1ZTMwYWNh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-08-20T13:22:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2013-08-20T13:22:51Z"
      },
      "message": "CreateNewBlock: Remove CReserveKey dependency",
      "tree": {
        "sha": "1ea56eb8442018ae55c56a2f7e1f97968ba4e7bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ea56eb8442018ae55c56a2f7e1f97968ba4e7bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dfdc25ed56c7982e88ab0057f28ccd081431808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dfdc25ed56c7982e88ab0057f28ccd081431808"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 15,
      "deletions": 39
    },
    "files": [
      {
        "sha": "1de97cdbfb9d3f15348fa7705ccf2bcaa4dd3109",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
        "patch": "@@ -103,7 +103,6 @@ void Shutdown()\n     RenameThread(\"bitcoin-shutoff\");\n     nTransactionsUpdated++;\n     StopRPCThreads();\n-    ShutdownRPCMining();\n     bitdb.Flush(false);\n     StopNode();\n     {\n@@ -980,8 +979,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     StartNode(threadGroup);\n \n-    // InitRPCMining is needed here so getblocktemplate in the GUI debug console works properly.\n-    InitRPCMining();\n     if (fServer)\n         StartRPCThreads();\n "
      },
      {
        "sha": "c7405577d084d0c26a9c25bf8c27e8c4d5a03257",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
        "patch": "@@ -61,7 +61,7 @@ class TxPriorityCompare\n     }\n };\n \n-CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n+CBlockTemplate* CreateNewBlock()\n {\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n@@ -74,15 +74,11 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n     txNew.vin.resize(1);\n     txNew.vin[0].prevout.SetNull();\n     txNew.vout.resize(1);\n-    CPubKey pubkey;\n-    if (!reservekey.GetReservedKey(pubkey))\n-        return NULL;\n-    txNew.vout[0].scriptPubKey << pubkey << OP_CHECKSIG;\n \n     // Add our coinbase tx as first transaction\n     pblock->vtx.push_back(txNew);\n     pblocktemplate->vTxFees.push_back(-1); // updated at end\n-    pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOps.push_back(0);\n \n     // Largest block you're willing to create:\n     unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", MAX_BLOCK_SIZE_GEN/2);\n@@ -289,7 +285,6 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n         pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;\n-        pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CBlockIndex indexDummy(*pblock);\n         indexDummy.pprev = pindexPrev;"
      },
      {
        "sha": "500920aeb1ce3c1c51dc64488488766c3796133b",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
        "patch": "@@ -9,6 +9,6 @@\n #include \"wallet.h\"\n \n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(CReserveKey& reservekey);\n+CBlockTemplate* CreateNewBlock();\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "cb64e39aacc4c7a5d4aee656240179666c958b08",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
        "patch": "@@ -12,21 +12,6 @@\n using namespace json_spirit;\n using namespace std;\n \n-// Key used by getblocktemplate miners.\n-// Allocated in InitRPCMining, free'd in ShutdownRPCMining\n-static CReserveKey* pMiningKey = NULL;\n-\n-void InitRPCMining()\n-{\n-    // getblocktemplate mining rewards paid here:\n-    pMiningKey = new CReserveKey(pwalletMain);\n-}\n-\n-void ShutdownRPCMining()\n-{\n-    delete pMiningKey; pMiningKey = NULL;\n-}\n-\n \n Value getmininginfo(const Array& params, bool fHelp)\n {\n@@ -115,7 +100,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             delete pblocktemplate;\n             pblocktemplate = NULL;\n         }\n-        pblocktemplate = CreateNewBlock(*pMiningKey);\n+        pblocktemplate = CreateNewBlock();\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "dc91c6d5fb7e4d7b715fbb9ef54efe13d784a6c0",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcc1891c3b2bcecd1211b6b899696ae1e5e30aca/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=dcc1891c3b2bcecd1211b6b899696ae1e5e30aca",
        "patch": "@@ -47,14 +47,13 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    CReserveKey reservekey(pwalletMain);\n     CBlockTemplate *pblocktemplate;\n     CTransaction tx;\n     CScript script;\n     uint256 hash;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -80,7 +79,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n     tx.vin.resize(1);\n@@ -97,7 +96,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, tx);\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -117,14 +116,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, tx);\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -142,7 +141,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -153,7 +152,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -171,7 +170,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash,tx);\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -185,17 +184,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = pindexBest->nHeight;\n     pindexBest->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     pindexBest->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock());\n     delete pblocktemplate;\n     pindexBest->nHeight = nHeight;\n }"
      }
    ]
  }
]