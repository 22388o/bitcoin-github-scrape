[
  {
    "sha": "c169ab6d30cfbc20d8856c7be1d271c1322d44da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTY5YWI2ZDMwY2ZiYzIwZDg4NTZjN2JlMWQyNzFjMTMyMmQ0NGRh",
    "commit": {
      "author": {
        "name": "Kristaps Kaupe",
        "email": "kristaps@blogiem.lv",
        "date": "2018-06-13T23:21:35Z"
      },
      "committer": {
        "name": "Kristaps Kaupe",
        "email": "kristaps@blogiem.lv",
        "date": "2018-06-13T23:21:35Z"
      },
      "message": "Allow to specify rescan start timestamp\n\nfor importaddress, importprivkey and importpubkey",
      "tree": {
        "sha": "3b2abce7605fe9ea6f29a5ab401c99089e7531e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b2abce7605fe9ea6f29a5ab401c99089e7531e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c169ab6d30cfbc20d8856c7be1d271c1322d44da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c169ab6d30cfbc20d8856c7be1d271c1322d44da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c169ab6d30cfbc20d8856c7be1d271c1322d44da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c169ab6d30cfbc20d8856c7be1d271c1322d44da/comments",
    "author": {
      "login": "kristapsk",
      "id": 4500994,
      "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kristapsk",
      "html_url": "https://github.com/kristapsk",
      "followers_url": "https://api.github.com/users/kristapsk/followers",
      "following_url": "https://api.github.com/users/kristapsk/following{/other_user}",
      "gists_url": "https://api.github.com/users/kristapsk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
      "organizations_url": "https://api.github.com/users/kristapsk/orgs",
      "repos_url": "https://api.github.com/users/kristapsk/repos",
      "events_url": "https://api.github.com/users/kristapsk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kristapsk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kristapsk",
      "id": 4500994,
      "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kristapsk",
      "html_url": "https://github.com/kristapsk",
      "followers_url": "https://api.github.com/users/kristapsk/followers",
      "following_url": "https://api.github.com/users/kristapsk/following{/other_user}",
      "gists_url": "https://api.github.com/users/kristapsk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
      "organizations_url": "https://api.github.com/users/kristapsk/orgs",
      "repos_url": "https://api.github.com/users/kristapsk/repos",
      "events_url": "https://api.github.com/users/kristapsk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kristapsk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a7e64fc85461a205f2b51da52d1455795d43b91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a7e64fc85461a205f2b51da52d1455795d43b91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a7e64fc85461a205f2b51da52d1455795d43b91"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 36,
      "deletions": 17
    },
    "files": [
      {
        "sha": "ba9cce86fcccbf370f6937743963c120a2fe9efc",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c169ab6d30cfbc20d8856c7be1d271c1322d44da/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c169ab6d30cfbc20d8856c7be1d271c1322d44da/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=c169ab6d30cfbc20d8856c7be1d271c1322d44da",
        "patch": "@@ -115,9 +115,12 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n     { \"importprivkey\", 2, \"rescan\" },\n+    { \"importprivkey\", 3, \"timestamp\" },\n     { \"importaddress\", 2, \"rescan\" },\n     { \"importaddress\", 3, \"p2sh\" },\n+    { \"importaddress\", 4, \"timestamp\" },\n     { \"importpubkey\", 2, \"rescan\" },\n+    { \"importpubkey\", 3, \"timestamp\" },\n     { \"importmulti\", 0, \"requests\" },\n     { \"importmulti\", 1, \"options\" },\n     { \"verifychain\", 0, \"checklevel\" },"
      },
      {
        "sha": "8d8b9c969da3a900fb2ebae83d26f039b1eb304a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 17,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c169ab6d30cfbc20d8856c7be1d271c1322d44da/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c169ab6d30cfbc20d8856c7be1d271c1322d44da/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c169ab6d30cfbc20d8856c7be1d271c1322d44da",
        "patch": "@@ -17,6 +17,7 @@\n \n #include <wallet/rpcwallet.h>\n \n+#include <algorithm>\n #include <fstream>\n #include <stdint.h>\n \n@@ -95,21 +96,22 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n+            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan ) ( timestamp )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n             \"Hint: use importmulti to import more than one private key.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. timestamp            (numeric, optional, default=0) If set, rescan will be limited to a time period from a specified absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump a private key\\n\"\n             + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\") +\n-            \"\\nImport the private key with rescan\\n\"\n+            \"\\nImport the private key with full rescan\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n             \"\\nImport using a label and without rescan\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\" \\\"testing\\\" false\") +\n@@ -122,6 +124,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     WalletRescanReserver reserver(pwallet);\n     bool fRescan = true;\n+    int64_t nRescanFromTimestamp = TIMESTAMP_MIN;\n     {\n         LOCK2(cs_main, pwallet->cs_wallet);\n \n@@ -136,6 +139,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!request.params[2].isNull())\n             fRescan = request.params[2].get_bool();\n \n+        if (!request.params[3].isNull())\n+            nRescanFromTimestamp = request.params[3].get_int64();\n+\n         if (fRescan && fPruneMode)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n@@ -161,9 +167,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n                 return NullUniValue;\n             }\n \n-            // whenever a key is imported, we need to scan the whole chain\n-            pwallet->UpdateTimeFirstKey(1);\n-            pwallet->mapKeyMetadata[vchAddress].nCreateTime = 1;\n+            // whenever a key is imported, we may need to scan the whole chain\n+            pwallet->UpdateTimeFirstKey(std::max<int64_t>(1, nRescanFromTimestamp));\n+            pwallet->mapKeyMetadata[vchAddress].nCreateTime = std::max<int64_t>(1, nRescanFromTimestamp);\n \n             if (!pwallet->AddKeyPubKey(key, pubkey)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n@@ -172,11 +178,11 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         }\n     }\n     if (fRescan) {\n-        int64_t scanned_time = pwallet->RescanFromTime(TIMESTAMP_MIN, reserver, true /* update */);\n+        int64_t scanned_time = pwallet->RescanFromTime(nRescanFromTimestamp, reserver, true /* update */);\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n         }\n-        if (scanned_time > TIMESTAMP_MIN) {\n+        if (scanned_time > nRescanFromTimestamp) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\");\n         }\n     }\n@@ -254,22 +260,23 @@ UniValue importaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 5)\n         throw std::runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh timestamp )\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n+            \"5. timestamp            (numeric, optional, default=0) If set, rescan will be limited to a time period from a specified absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n             \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n             \"as change, and not show up in many RPCs.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nImport a script with rescan\\n\"\n+            \"\\nImport a script with full rescan\\n\"\n             + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n             + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\" \\\"testing\\\" false\") +\n@@ -300,6 +307,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[3].isNull())\n         fP2SH = request.params[3].get_bool();\n \n+    int64_t nRescanFromTimestamp = TIMESTAMP_MIN;\n+    if (!request.params[4].isNull())\n+        nRescanFromTimestamp = request.params[4].get_int64();\n+\n     {\n         LOCK2(cs_main, pwallet->cs_wallet);\n \n@@ -318,11 +329,11 @@ UniValue importaddress(const JSONRPCRequest& request)\n     }\n     if (fRescan)\n     {\n-        int64_t scanned_time = pwallet->RescanFromTime(TIMESTAMP_MIN, reserver, true /* update */);\n+        int64_t scanned_time = pwallet->RescanFromTime(nRescanFromTimestamp, reserver, true /* update */);\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n         }\n-        if (scanned_time > TIMESTAMP_MIN) {\n+        if (scanned_time > nRescanFromTimestamp) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\");\n         }\n         pwallet->ReacceptWalletTransactions();\n@@ -443,16 +454,17 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan timestamp )\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. timestamp            (numeric, optional, default=0) If set, rescan will be limited to a time period from a specified absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nImport a public key with rescan\\n\"\n+            \"\\nImport a public key with full rescan\\n\"\n             + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n             + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\" \\\"testing\\\" false\") +\n@@ -470,6 +482,10 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n+    int64_t nRescanFromTimestamp = TIMESTAMP_MIN;\n+    if (!request.params[3].isNull())\n+        nRescanFromTimestamp = request.params[3].get_int64();\n+\n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n@@ -496,11 +512,11 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     }\n     if (fRescan)\n     {\n-        int64_t scanned_time = pwallet->RescanFromTime(TIMESTAMP_MIN, reserver, true /* update */);\n+        int64_t scanned_time = pwallet->RescanFromTime(nRescanFromTimestamp, reserver, true /* update */);\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n         }\n-        if (scanned_time > TIMESTAMP_MIN) {\n+        if (scanned_time > nRescanFromTimestamp) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\");\n         }\n         pwallet->ReacceptWalletTransactions();"
      }
    ]
  }
]