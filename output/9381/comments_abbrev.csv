ryanofsky,2017-01-25T18:30:33Z,Rebased ed457a39ebaa672cce21622d3af422fe50730580 -> b1ac3cff00a51c0b8965b7a85fa489c98409ddff to resolve merge conflicts with bumpfee (#8456).,https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275191822,275191822,
ryanofsky,2017-01-25T18:48:42Z,"I'm thinking of splitting this up into two commits to make it easier to review. First commit would change CreateTransaction to return a CTransactionRef instead of CWalletTx. Second commit would change AddToWallet to accept a CTransactionRef instead of a CWalletTx.\n\nIf any reviewers would prefer this you can let me know.",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275196684,275196684,
TheBlueMatt,2017-01-25T19:26:39Z,"Splitting commits into logical breaks is always appreciated.\n\nOn 01/25/17 18:48, Russell Yanofsky wrote:\n> I'm thinking of splitting this up into two commits to make it easier to\n> review. First commit would change CreateTransaction to return a\n> CTransactionRef instead of CWalletTx. Second commit would change\n> AddToWallet to accept a CTransactionRef instead of a CWalletTx.\n> \n> If any re",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275207263,275207263,
TheBlueMatt,2017-01-25T22:17:34Z,"Hum, reading this (finally) now, I'm not sure if I'm a big fan of this approach. The call-function-which-callsback-to-let-you-fill-in-things-that-really-should-have-been-arguments pattern really sucks. On the flip side, passing in CWalletTxes, and copying those into mapWallet can also lead to issues if you try to do anything to the object you just passed in thinking it is what got stored in the wa",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-275250693,275250693,
ryanofsky,2017-02-02T23:51:36Z,"> The call-function-which-callsback-to-let-you-fill-in-things-that-really-should-have-been-arguments pattern really sucks.\n\nIf you are adamant about this, could you say more about why it sucks? I think a callback is exactly the thing you want when you are doing an in-place update to a data structure.\n\nIn any case, I agree that CommitTransaction shouldn't take a callback, so I changed it to",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-277122702,277122702,
TheBlueMatt,2017-02-03T18:46:10Z,"I'm just generally not a fan of callbacks making ownership models inconsistent. eg this kind of thing is where people always fuck up lockordering (though admittedly less so in this particular case, more the general case of callbacks going in both directions between modules).\n\nSo I do like this version much better, but still not sure the call back is required to be publicly exposed...Can we jus",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-277328482,277328482,
ryanofsky,2017-02-03T19:10:56Z,"> Can we just leave MarkReplaced and add a similar function for importpruned funds to use\n\nWill try that. In the meantime I moved the non-AddToWallet cleanup to #9680 so it can be considered separately. By the way #9369 is another PR which significantly simplifies AddToWallet.",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-277335035,277335035,
ryanofsky,2017-12-01T22:31:12Z,"> Can we just leave MarkReplaced and add a similar function for importpruned funds to use\n\nImplemented this suggestion. (New function is `CWallet::AddTransaction`). I also went ahead and disabled the CWalletTx copy constructor. Interestingly this uncovered a bunch of cases where we were unwittingly copying wallet transactions in loops due to writing:\n```c++\nfor (const std::pair<uint256, CW",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-348631717,348631717,
MarcoFalke,2018-03-08T15:21:26Z,Needs rebase to fix travis (sorry),https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-371519076,371519076,
ryanofsky,2018-03-12T18:55:25Z,"> Needs rebase to fix travis (sorry)\n\nRebased 71bce6b0f4aee487026afd31ada41a4e6028abd3 -> 31297f007b2424ab5036258ed782aacc70237a7f ([pr/atw-nomerge.33](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.33) -> [pr/atw-nomerge.34](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.34)) for #12607.",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-372424339,372424339,
kallewoof,2018-03-13T23:27:29Z,Re-slight-utACK 8a6ec70,https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-372853226,372853226,
ryanofsky,2018-03-15T19:41:47Z,Rebased e15246fc310599770332021d14b96ce3f213a82b -> d62357a7c7c8c34a55580a31ddbfd04a9fa72591 ([pr/atw-nomerge.37](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.37) -> [pr/atw-nomerge.38](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.38)) due to conflict with #12681 and after merge of base PR #9680.,https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-373499190,373499190,
ryanofsky,2018-06-19T21:22:47Z,"> Needs rebase \n\nRebased cad8b14857d8e310ebad8a850c9e6450e13360fc -> a494d2a4472ea63620b1f6cce20cb726590eb75b ([pr/atw-nomerge.42](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.42) -> [pr/atw-nomerge.43](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.43)) due to minor conflict with #13437.\nRebased a494d2a4472ea63620b1f6cce20cb726590eb75b -> 497f8a035ca2788564266f42",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-398550587,398550587,
sipa,2018-06-27T01:24:16Z,"utACK a494d2a4472ea63620b1f6cce20cb726590eb75b. I think the ""callback"" approach is perfectly fine here; they're not actual callbacks (in that they're not invoked at a different time or from a different thread); they're just functions to fill in values at the time the object is created.",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-400513131,400513131,
DrahtBot,2018-09-21T13:34:09Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18592 (rpc: replace raw pointers with shared_ptrs by brakmic)\n* #16910 (wallet: reduce loading time by using unordered m",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-423532570,423532570,
achow101,2019-08-15T18:15:14Z,"> @achow101 how does this jive with wallet boxes #16341?\n\nAFAICT They don't interact at all. The only part of #16341 that touches transactions is a small section in `AddToWalletIfInvolvingMe` which this PR does not touch.",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-521741857,521741857,
Sjors,2019-08-15T18:44:07Z,"re-ACK 825a514481dd69dc7038c7f4c974a76cb2becd87, but Travis is in a state of despair, perhaps due to #16582 (@MarcoFalke?)",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-521751666,521751666,
meshcollider,2019-11-22T21:15:58Z,"Sorry about all the rebases, Concept ACK",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-557697310,557697310,
laanwj,2019-12-04T13:17:24Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-561640984,561640984,
ryanofsky,2020-02-25T17:40:14Z,"Rebased dff3c12515773bef07756bb2420da5a1ac8e1438 -> 93510bcfe80385203880d1211cb94f621411839e ([`pr/atw-nomerge.74`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.74) -> [`pr/atw-nomerge.75`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.75), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/atw-nomerge.74-rebase..pr/atw-nomerge.75)) due to minor conflict with #1",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-590983096,590983096,
ryanofsky,2020-03-24T20:34:06Z,"Rebased fc4df9dc2910c4a57d5e81573faf7952e1c3ee42 -> f1fc7892608fb258da86017c79ffb4b1a477014a ([`pr/atw-nomerge.76`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.76) -> [`pr/atw-nomerge.77`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.77), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/atw-nomerge.76-rebase..pr/atw-nomerge.77)) due to conflict with #18278",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-603490263,603490263,
Sjors,2020-03-31T15:16:44Z,utACK f1fc7892608fb258da86017c79ffb4b1a477014a,https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-606691829,606691829,
ryanofsky,2020-04-15T21:41:54Z,"Rebased f1fc7892608fb258da86017c79ffb4b1a477014a -> ece5d1cf46cf8c335dee4bb6affe514d7b33f306 ([`pr/atw-nomerge.77`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.77) -> [`pr/atw-nomerge.78`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.78), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/atw-nomerge.77-rebase..pr/atw-nomerge.78)) due to conflict with #17954",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-614294739,614294739,
Sjors,2020-04-19T14:17:23Z,re-utACK ece5d1c (rebased),https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-616145342,616145342,
ryanofsky,2020-05-01T15:00:34Z,"Rebased ece5d1cf46cf8c335dee4bb6affe514d7b33f306 -> f2892d8eb5404a34f3b09d3b9ac65d58c965e362 ([`pr/atw-nomerge.78`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.78) -> [`pr/atw-nomerge.79`](https://github.com/ryanofsky/bitcoin/commits/pr/atw-nomerge.79), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/atw-nomerge.78-rebase..pr/atw-nomerge.79)) due to conflict with #16426\",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-622422795,622422795,
Sjors,2020-05-04T10:21:31Z,"Light re-utACK f2892d8eb5404a34f3b09d3b9ac65d58c965e362, looks like a reasonably straight-forward rebase.",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-623381605,623381605,
MarcoFalke,2020-05-05T17:29:37Z,"Ah sorry, no need to revert your changes. If the wallet can't write to disk, a simple `CHECK_NONFATAL(wtx)` should be sufficient",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-624197882,624197882,
ryanofsky,2020-05-05T17:54:24Z,"> Ah sorry, no need to revert your changes. If the wallet can't write to disk, a simple `CHECK_NONFATAL(wtx)` should be sufficient\n\nI don't think CHECK_NONFATAL would be right, because this is checking a runtime error, not an internal assertion about how code works. I can go back to the earlier version and add this if that's your preference. But actually I like the update better because it mak",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-624210794,624210794,
MarcoFalke,2020-05-05T17:58:36Z,"Well, our assumption in the code is that the wallet can write to disk. If that assumption is violated it seems fine to assert or do that `CHECK` thingy. But I also see your point to make it a separate runtime error.\n\nAnyway, re-ACK 28b112e9bd3fd1181c0720306051ba7efca8b436",https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-624212989,624212989,
meshcollider,2020-05-05T23:37:03Z,re-utACK 28b112e9bd3fd1181c0720306051ba7efca8b436,https://github.com/bitcoin/bitcoin/pull/9381#issuecomment-624361292,624361292,
kallewoof,2018-02-22T08:33:12Z,"`CTransactionRef` is itself a pointer, so unless you intend for the caller to be able to modify what it points to, I think simply returning a `CTransactionRef` is better here. Every use case also seems to `*`-dereference it.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r169884033,169884033,src/qt/walletmodeltransaction.cpp
ryanofsky,2018-03-13T19:39:49Z,"https://github.com/bitcoin/bitcoin/pull/9381#discussion_r169884033\n\n> CTransactionRef is itself a pointer, so unless you intend for the caller to be able to modify what it points to, I think simply returning a CTransactionRef is better here. Every use case also seems to *-dereference it.\n\nGood idea, done in 64f182fa587f35081ed8026b44e2a36010364153.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r174259437,174259437,src/qt/walletmodeltransaction.cpp
promag,2018-03-15T22:59:45Z,"In commit ""Disable CWalletTx copy constructor"",\n\nCould add an empty constructor (or add default values)? I believe that would allow keeping `vWtx` as vector?",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r174957667,174957667,src/wallet/walletdb.cpp
promag,2018-03-15T23:02:38Z,"In commit ""Avoid copying CWalletTx in LoadToWallet"",\n\nThis and the `Init()` change could be in a different (trivial) commit.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r174958125,174958125,src/wallet/wallet.h
promag,2018-03-15T23:18:14Z,"In commit ""Remove CWalletTx merging logic from AddToWallet"",\n\nShould stay? Related to #12681.\n\nLooks like [this code](https://github.com/bitcoin/bitcoin/pull/12681/files#diff-b2bb174788c7409b671c46ccc86034bdR3816) is not hit, otherwise the lock held assertion in `LookupBlockIndex` would cause travis failure here?",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r174960713,174960713,src/wallet/test/wallet_tests.cpp
ryanofsky,2018-03-16T16:49:17Z,"https://github.com/bitcoin/bitcoin/pull/9381#discussion_r174957667\n\nIn commit ""Disable CWalletTx copy constructor"",\n\n> Could add an empty constructor (or add default values)? I believe that would allow keeping vWtx as vector?\n\nIt isn't enough because a vector needs its elements to be copyable or movable (otherwise it couldn't reallocate during expansion).",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r175151138,175151138,src/wallet/walletdb.cpp
ryanofsky,2018-03-16T16:49:52Z,"https://github.com/bitcoin/bitcoin/pull/9381#discussion_r174958125\n\nIn commit ""Avoid copying CWalletTx in LoadToWallet"",\n\n> This and the Init() change could be in a different (trivial) commit.\n\nGood catch, split 62afca0ac31ee6db6beab800cc349157809e87da into 5f10dfceef542ec19030e02d4954295bc0fa0428 and 9b178932e532bc507bc4e825a404e42deab726f9",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r175151371,175151371,src/wallet/wallet.h
ryanofsky,2018-03-16T16:51:09Z,"https://github.com/bitcoin/bitcoin/pull/9381#discussion_r174960713\n\nIn commit ""Remove CWalletTx merging logic from AddToWallet"",\n\n> Should stay? Related to #12681.\n\nIt's not needed because of the lock above:\n\nhttps://github.com/bitcoin/bitcoin/blob/98ff78d5a272f9fef0057ebd8a4553cd2bead5ee/src/wallet/test/wallet_tests.cpp#L543\n\nThis is the reason there's no assert failure on tra",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r175151774,175151774,src/wallet/test/wallet_tests.cpp
practicalswift,2018-09-02T18:36:06Z,Typo found by `codespell`: tranaction,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r214549286,214549286,src/wallet/wallet.cpp
practicalswift,2018-09-21T08:45:08Z,"```\n2018-09-20 06:04:29 clang-tidy(pr=9381): src/wallet/wallet.cpp:843:64: warning: the parameter 'update_wtx' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]\n2018-09-20 06:04:29 clang-tidy(pr=9381): src/wallet/wallet.cpp:903:66: warning: the parameter 'update_wtx' is copied for each invocation but onl",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r219424559,219424559,src/wallet/wallet.cpp
practicalswift,2018-09-21T08:45:57Z,"Seems like `SetMerkleBranch` can be removed.\n\n```\n2018-09-20 06:29:02 cppcheck(pr=9381): [src/wallet/wallet.cpp:4237]: (style) The function 'SetMerkleBranch' is never used.\n```",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r219424779,219424779,src/wallet/test/wallet_tests.cpp
practicalswift,2018-09-26T05:47:44Z,`new_tx` not used?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r220432539,220432539,src/wallet/walletdb.cpp
practicalswift,2018-09-26T05:48:07Z,`new_tx` not used?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r220432586,220432586,src/wallet/wallet.cpp
practicalswift,2018-09-26T05:48:23Z,`new_tx` not used?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r220432616,220432616,src/wallet/wallet.cpp
meshcollider,2018-11-12T01:47:00Z,Which TODO is this referring to?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r232517780,232517780,src/wallet/wallet.cpp
meshcollider,2018-11-12T01:48:54Z,Should this flush on close? Default is true but previously it didn't,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r232517928,232517928,src/wallet/wallet.cpp
ryanofsky,2018-11-12T17:17:35Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r232517780\n\n> Which TODO is this referring to?\n\nThis is referring to the abandoned transaction TODO in AddToWalletIfInvolvingMe:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/wallet/wallet.h#L654-L658\n\nThe TODO was moved in #13651 to where it doesn't really make a lot of sense, so I'm moving it back here in 845345c70",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r232743997,232743997,src/wallet/wallet.cpp
ryanofsky,2018-11-12T17:18:17Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r232517928\n\n> Should this flush on close? Default is true but previously it didn't\n\nGood catch. It should be safe to flush on close, but this change was not intentional. It's now set back to false in 845345c70c42411373a480406686b67870a235ad.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r232744206,232744206,src/wallet/wallet.cpp
Sjors,2019-08-15T13:10:34Z,Maybe make `AddToWallet(` private to avoid exposing the `update_wtx` callback stuff?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r314299889,314299889,src/wallet/wallet.h
ryanofsky,2019-08-15T15:52:55Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r314299889\n\n> Maybe make `AddToWallet(` private to avoid exposing the `update_wtx` callback stuff?\n\nI [added a doxygen comment](https://github.com/ryanofsky/bitcoin/compare/pr/atw-nomerge.61..pr/atw-nomerge.62) to avoid confusion around the update_wtx callback (which is also used in a later commit by LoadToWallet, not just AddWall",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r314376966,314376966,src/wallet/wallet.h
ariard,2019-08-16T16:49:49Z,"If tx isn't already in mapWallet, it's going to be a fInsertedNew one, if it's already there we surely want to get them fUpdated on disk, and I think both callback return true, excepts for a transaction being disconnected ? Maybe all this flags could be simplified in a further work.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r314803066,314803066,src/wallet/wallet.cpp
ariard,2019-08-16T17:18:04Z,"Hmmm new execution flow doesn't make it easier to understand. Maybe mapWallet should be access directly in `ReadKeyValue`, when as you said in another comment wallet components are broken up in smaller classes. I think, but need to test, that `MarkConflicted` and its loop is useless here.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r314813155,314813155,src/wallet/wallet.cpp
ryanofsky,2019-09-10T19:24:58Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r314803066\n\n> If tx isn't already in mapWallet, it's going to be a fInsertedNew one, if it's already there we surely want to get them fUpdated on disk, and I think both callback return true, excepts for a transaction being disconnected ? Maybe all this flags could be simplified in a further work.\n\nI think this is basically never f",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r322920662,322920662,src/wallet/wallet.cpp
ryanofsky,2019-09-10T19:25:05Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r314813155\n\n> Hmmm new execution flow doesn't make it easier to understand. Maybe mapWallet should be access directly in `ReadKeyValue`, when as you said in another comment wallet components are broken up in smaller classes. I think, but need to test, that `MarkConflicted` and its loop is useless here.\n\nThese improvements seem lik",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r322920715,322920715,src/wallet/wallet.cpp
Sjors,2020-02-26T09:23:30Z,"In 03c5ac045f94ab965d79300712a70a0357397d5e `Remove CWalletTx merging logic from AddToWallet`: it might make sense to have a seperate commit that adds the `confirm` argument.\n(maybe not worth confusing existing reviewers)",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384365942,384365942,src/wallet/wallet.cpp
Sjors,2020-02-26T09:37:39Z,"Nit: ""false _if_ it""",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384374046,384374046,src/wallet/wallet.h
Sjors,2020-02-26T09:54:32Z,Why the `/* Continued */` comment?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384384050,384384050,src/wallet/wallet.cpp
Sjors,2020-02-26T10:06:34Z,"Make this a runtime exception? Perhaps there's some weird edge case, I haven't tried, where a user restores their wallet from a backup on a node with a fresh mempool. The user then recreates the same* transaction in the UI and as they look at the confirmation screen, the transaction re-enters the mempool. Once they click OK this assert should be hit.\n\n`*` = IIUC it's only a duplicate if they u",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384391256,384391256,src/wallet/wallet.cpp
Sjors,2020-02-26T10:57:18Z,"In 754eb2112aac4729805dcc547bef1de956c3c14d `Avoid copying CWalletTx in LoadToWallet`\n\nThe ""result"" of (formerly `void`) `LoadToWallet` has always been ignored. Perhaps that's because before https://github.com/bitcoin/bitcoin/pull/3671/files#diff-3b5a9b7d780ff672241548edf2888fcdL385 we just updated the transaction map directly.\n\nCan you think of any silent failures that would now result in",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384419297,384419297,src/wallet/walletdb.cpp
Sjors,2020-02-26T11:19:12Z,"In 754eb2112aac4729805dcc547bef1de956c3c14d `Avoid copying CWalletTx in LoadToWallet`\n\nMaybe add a comment here that `LoadToWallet` creates a fresh `CWalletTx` and that we fill it with `ssValue` (hence my rename to `fill_wtx` suggestion above).\n\nSince a wallet doesn't (shouldn't? otherwise add `assert(new_tx)`) have duplicate transactions `new_tx` should be `true`, but if some reason a wal",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384430073,384430073,src/wallet/walletdb.cpp
Sjors,2020-02-26T11:27:10Z,Maybe rename `update_wtx` to `fill_wtx `.,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384433800,384433800,src/wallet/wallet.cpp
Sjors,2020-02-26T11:48:52Z,"Maybe briefly mention this in the commit message, as the change from `std::vector` to `std::list` looks a bit out of the blue (until you try compiling without).",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384443528,384443528,src/wallet/walletdb.cpp
ryanofsky,2020-02-26T14:43:57Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384365942\n\n> In [03c5ac0](https://github.com/bitcoin/bitcoin/commit/03c5ac045f94ab965d79300712a70a0357397d5e) `Remove CWalletTx merging logic from AddToWallet`: it might make sense to have a seperate commit that adds the `confirm` argument.\n> (maybe not worth confusing existing reviewers)\n\nThis is a good thought, and I started ",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384536100,384536100,src/wallet/wallet.cpp
ryanofsky,2020-02-26T14:44:04Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384384050\n\n> Why the `/* Continued */` comment?\n\nThis is unchanged from previous code, but it's needed to print a lint error since the log format string doesn't end in `\n`",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384536183,384536183,src/wallet/wallet.cpp
ryanofsky,2020-02-26T14:44:14Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384391256\n\n> Make this a runtime exception? Perhaps there's some weird edge case, I haven't tried, where a user restores their wallet from a backup on a node with a fresh mempool. The user then recreates the same* transaction in the UI and as they look at the confirmation screen, the transaction re-enters the mempool. Once they click",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384536300,384536300,src/wallet/wallet.cpp
ryanofsky,2020-02-26T14:44:21Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384374046\n\n> Nit: ""false _if_ it""\n\nThank you, fixed!",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384536374,384536374,src/wallet/wallet.h
ryanofsky,2020-02-26T14:44:39Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384433800\n\n> Maybe rename `update_wtx` to `fill_wtx `.\n\nDone",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384536559,384536559,src/wallet/wallet.cpp
ryanofsky,2020-02-26T14:44:50Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384430073\n\n> In [754eb21](https://github.com/bitcoin/bitcoin/commit/754eb2112aac4729805dcc547bef1de956c3c14d) `Avoid copying CWalletTx in LoadToWallet`\n> \n> Maybe add a comment here that `LoadToWallet` creates a fresh `CWalletTx` and that we fill it with `ssValue` (hence my rename to `fill_wtx` suggestion above).\n> \n> Since a",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384536681,384536681,src/wallet/walletdb.cpp
ryanofsky,2020-02-26T14:44:58Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384419297\n\n> In [754eb21](https://github.com/bitcoin/bitcoin/commit/754eb2112aac4729805dcc547bef1de956c3c14d) `Avoid copying CWalletTx in LoadToWallet`\n> \n> The ""result"" of (formerly `void`) `LoadToWallet` has always been ignored. Perhaps that's because before https://github.com/bitcoin/bitcoin/pull/3671/files#diff-3b5a9b7d780ff6",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r384536761,384536761,src/wallet/walletdb.cpp
MarcoFalke,2020-05-05T15:12:48Z,Does the `std::move` still work after going through a lambda capture by reference?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420187394,420187394,src/wallet/wallet.cpp
MarcoFalke,2020-05-05T15:13:25Z,Doesn't this line crash the node when the wallet can not write the tx to disk?,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420187836,420187836,src/wallet/wallet.cpp
sipa,2020-05-05T16:22:51Z,Yes. mapValue is a reference to the same thing it was outside of the lambda. std::move casts it to an rvalue reference.,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420238473,420238473,src/wallet/wallet.cpp
ryanofsky,2020-05-05T16:30:13Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420187836\n\n> Doesn't this line crash the node when the wallet can not write the tx to disk?\n\nWow, good catch! I'm not sure current behavior is ideal either but it wasn't my intention to change it. Updated PR",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420243391,420243391,src/wallet/wallet.cpp
MarcoFalke,2020-05-05T16:33:50Z,"Oh, this has nothing to do with lambdas. I didn't know that references (as long as they are not const) can be moved.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420245998,420245998,src/wallet/wallet.cpp
ryanofsky,2020-05-05T16:39:28Z,"re: https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420187394\n\n> Oh, this has nothing to do with lambdas. I didn't know that references (as long as they are not const) can be moved.\n\nYep, `std::move` isn't affected by outside things like this. `std::move(mapValue)` is only a type cast from `mapValue_t&` to `mapValue_t&&` that makes the compiler favor the `operator=(mapValue_t&&)` ",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420249813,420249813,src/wallet/wallet.cpp
sipa,2020-05-05T16:41:39Z,"Even const ones, actually - though unless they have mutable fields, there is no effect.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420251260,420251260,src/wallet/wallet.cpp
MarcoFalke,2020-05-05T17:34:27Z,"With ""no effect"" you mean `const&` will stay `const&`, right? See also the example, which does not compile, because the `const&` copy constructor is deleted:\n\n```cpp\n#include <memory>\n\nstruct Test{\n    const std::unique_ptr<int>b;\n    Test(const std::unique_ptr<int>& a):b{std::move(a)}{}\n};",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420286577,420286577,src/wallet/wallet.cpp
sipa,2020-05-05T17:37:56Z,"`std::move(a)` where a is `const T&`, returns something of type `const T&&`. If T has for example a `operator=(const T&&)`, then that one would be selected in assignment. If there is no such operator, `operator=(const T&)` will be selected instead. In general a `const T&&` assignment/constructor operator only makes sense if a class has mutable fields.",https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420288613,420288613,src/wallet/wallet.cpp
MarcoFalke,2020-05-05T17:43:18Z,TIL that `const T&&` exists.,https://github.com/bitcoin/bitcoin/pull/9381#discussion_r420291853,420291853,src/wallet/wallet.cpp
