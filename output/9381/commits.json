[
  {
    "sha": "2b9cba206594bfbcefcef0c88a0bf793819643bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjljYmEyMDY1OTRiZmJjZWZjZWYwYzg4YTBiZjc5MzgxOTY0M2Jk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-19T16:25:15Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-01T10:59:09Z"
      },
      "message": "Remove CWalletTx merging logic from AddToWallet\n\nInstead of AddToWallet taking a temporary CWalletTx object and then potentially\nmerging it with a pre-existing CWalletTx, have it take a callback so callers\ncan update the pre-existing CWalletTx directly.\n\nThis makes AddToWallet simpler because now it is only has to be concerned with\nsaving CWalletTx objects and not merging them.\n\nThis makes AddToWallet calls clearer because they can now make direct updates to\nCWalletTx entries without having to make temporary objects and then worry about\nhow they will be merged.\n\nThis is a pure refactoring, no behavior is changing.",
      "tree": {
        "sha": "b2a2f7ffb44094dd43e234f87cf6da579d315c89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2a2f7ffb44094dd43e234f87cf6da579d315c89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b9cba206594bfbcefcef0c88a0bf793819643bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b9cba206594bfbcefcef0c88a0bf793819643bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b9cba206594bfbcefcef0c88a0bf793819643bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b9cba206594bfbcefcef0c88a0bf793819643bd/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "608359b071dac82a9cf33a6c9e01f87abfcb90eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608359b071dac82a9cf33a6c9e01f87abfcb90eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/608359b071dac82a9cf33a6c9e01f87abfcb90eb"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 53,
      "deletions": 64
    },
    "files": [
      {
        "sha": "7bf3d169c3b5f306b855ea925e4c29d525f06bc4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=2b9cba206594bfbcefcef0c88a0bf793819643bd",
        "patch": "@@ -345,7 +345,6 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n-    CWalletTx wtx(pwallet, MakeTransactionRef(std::move(tx)));\n \n     CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;\n@@ -372,10 +371,10 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     unsigned int txnIndex = vIndex[it - vMatch.begin()];\n \n     CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, merkleBlock.header.GetHash(), txnIndex);\n-    wtx.m_confirm = confirm;\n \n-    if (pwallet->IsMine(*wtx.tx)) {\n-        pwallet->AddToWallet(wtx, false);\n+    CTransactionRef tx_ref = MakeTransactionRef(tx);\n+    if (pwallet->IsMine(*tx_ref)) {\n+        pwallet->AddToWallet(std::move(tx_ref), confirm);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "657d0828f255d5fed1c792606214eb2bacaffef6",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=2b9cba206594bfbcefcef0c88a0bf793819643bd",
        "patch": "@@ -24,8 +24,6 @@ BOOST_FIXTURE_TEST_SUITE(coinselector_tests, WalletTestingSetup)\n // we repeat those tests this many times and only complain if all iterations of the test fail\n #define RANDOM_REPEATS 5\n \n-std::vector<std::unique_ptr<CWalletTx>> wtxn;\n-\n typedef std::set<CInputCoin> CoinSet;\n \n static std::vector<COutput> vCoins;\n@@ -74,16 +72,14 @@ static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bo\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx)));\n+    CWalletTx* wtx = wallet.AddToWallet(MakeTransactionRef(std::move(tx)), /* confirm= */ {});\n     if (fIsFromMe)\n     {\n         wtx->m_amounts[CWalletTx::DEBIT].Set(ISMINE_SPENDABLE, 1);\n         wtx->m_is_cache_empty = false;\n     }\n-    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);\n-    wallet.AddToWallet(*wtx.get());\n-    wtxn.emplace_back(std::move(wtx));\n }\n static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n {\n@@ -93,7 +89,6 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n static void empty_wallet(void)\n {\n     vCoins.clear();\n-    wtxn.clear();\n     balance = 0;\n }\n "
      },
      {
        "sha": "f6273bcecdf76962c5f42825afbdf4d21386817b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 12,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2b9cba206594bfbcefcef0c88a0bf793819643bd",
        "patch": "@@ -331,6 +331,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)\n {\n     CMutableTransaction tx;\n+    CWalletTx::Confirmation confirm;\n     tx.nLockTime = lockTime;\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n@@ -341,23 +342,15 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         block = inserted.first->second;\n         block->nTime = blockTime;\n         block->phashBlock = &hash;\n+        confirm = {CWalletTx::Status::CONFIRMED, block->nHeight, hash, 0};\n     }\n \n-    CWalletTx wtx(&wallet, MakeTransactionRef(tx));\n-    LOCK(wallet.cs_wallet);\n     // If transaction is already in map, to avoid inconsistencies, unconfirmation\n     // is needed before confirm again with different block.\n-    std::map<uint256, CWalletTx>::iterator it = wallet.mapWallet.find(wtx.GetHash());\n-    if (it != wallet.mapWallet.end()) {\n+    return wallet.AddToWallet(MakeTransactionRef(tx), confirm, [&](CWalletTx& wtx, bool /* new_tx */) {\n         wtx.setUnconfirmed();\n-        wallet.AddToWallet(wtx);\n-    }\n-    if (block) {\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, block->nHeight, block->GetBlockHash(), 0);\n-        wtx.m_confirm = confirm;\n-    }\n-    wallet.AddToWallet(wtx);\n-    return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n+        return true;\n+    })->nTimeSmart;\n }\n \n // Simple test to verify assignment of CWalletTx::nSmartTime value. Could be"
      },
      {
        "sha": "9c60b62a163082fd0963145f317342074b64c5d2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 40,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2b9cba206594bfbcefcef0c88a0bf793819643bd",
        "patch": "@@ -783,19 +783,19 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n     return false;\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n+CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx, bool fFlushOnClose)\n {\n     LOCK(cs_wallet);\n \n     WalletBatch batch(*database, \"r+\", fFlushOnClose);\n \n-    uint256 hash = wtxIn.GetHash();\n+    uint256 hash = tx->GetHash();\n \n     if (IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n         // Mark used destinations\n         std::set<CTxDestination> tx_destinations;\n \n-        for (const CTxIn& txin : wtxIn.tx->vin) {\n+        for (const CTxIn& txin : tx->vin) {\n             const COutPoint& op = txin.prevout;\n             SetSpentKeyState(batch, op.hash, op.n, true, tx_destinations);\n         }\n@@ -804,55 +804,51 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     }\n \n     // Inserts only if not already there, returns tx inserted or tx found\n-    std::pair<std::map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(std::make_pair(hash, wtxIn));\n+    auto ret = mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(hash), std::forward_as_tuple(this, tx));\n     CWalletTx& wtx = (*ret.first).second;\n     wtx.BindWallet(this);\n     bool fInsertedNew = ret.second;\n+    bool fUpdated = update_wtx && update_wtx(wtx, fInsertedNew);\n     if (fInsertedNew) {\n+        wtx.m_confirm = confirm;\n         wtx.nTimeReceived = chain().getAdjustedTime();\n         wtx.nOrderPos = IncOrderPosNext(&batch);\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         wtx.nTimeSmart = ComputeTimeSmart(wtx);\n         AddToSpends(hash);\n     }\n \n-    bool fUpdated = false;\n     if (!fInsertedNew)\n     {\n-        if (wtxIn.m_confirm.status != wtx.m_confirm.status) {\n-            wtx.m_confirm.status = wtxIn.m_confirm.status;\n-            wtx.m_confirm.nIndex = wtxIn.m_confirm.nIndex;\n-            wtx.m_confirm.hashBlock = wtxIn.m_confirm.hashBlock;\n-            wtx.m_confirm.block_height = wtxIn.m_confirm.block_height;\n+        if (confirm.status != wtx.m_confirm.status) {\n+            wtx.m_confirm.status = confirm.status;\n+            wtx.m_confirm.nIndex = confirm.nIndex;\n+            wtx.m_confirm.hashBlock = confirm.hashBlock;\n+            wtx.m_confirm.block_height = confirm.block_height;\n             fUpdated = true;\n         } else {\n-            assert(wtx.m_confirm.nIndex == wtxIn.m_confirm.nIndex);\n-            assert(wtx.m_confirm.hashBlock == wtxIn.m_confirm.hashBlock);\n-            assert(wtx.m_confirm.block_height == wtxIn.m_confirm.block_height);\n-        }\n-        if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n-        {\n-            wtx.fFromMe = wtxIn.fFromMe;\n-            fUpdated = true;\n+            assert(wtx.m_confirm.nIndex == confirm.nIndex);\n+            assert(wtx.m_confirm.hashBlock == confirm.hashBlock);\n+            assert(wtx.m_confirm.block_height == confirm.block_height);\n         }\n         // If we have a witness-stripped version of this transaction, and we\n         // see a new version with a witness, then we must be upgrading a pre-segwit\n         // wallet.  Store the new version of the transaction with the witness,\n         // as the stripped-version must be invalid.\n         // TODO: Store all versions of the transaction, instead of just one.\n-        if (wtxIn.tx->HasWitness() && !wtx.tx->HasWitness()) {\n-            wtx.SetTx(wtxIn.tx);\n+        if (tx->HasWitness() && !wtx.tx->HasWitness()) {\n+            wtx.SetTx(tx);\n             fUpdated = true;\n         }\n     }\n \n     //// debug print\n-    WalletLogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+    WalletLogPrintf(\"AddToWallet %s  %s%s\\n\", hash.ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n     // Write to disk\n     if (fInsertedNew || fUpdated)\n         if (!batch.WriteTx(wtx))\n-            return false;\n+            return nullptr;\n \n     // Break debit/credit balance caches:\n     wtx.MarkDirty();\n@@ -866,7 +862,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n     if (!strCmd.empty())\n     {\n-        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+        boost::replace_all(strCmd, \"%s\", hash.GetHex());\n #ifndef WIN32\n         // Substituting the wallet name isn't currently supported on windows\n         // because windows shell escaping has not been implemented yet:\n@@ -880,7 +876,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     }\n #endif\n \n-    return true;\n+    return &wtx;\n }\n \n void CWallet::LoadToWallet(CWalletTx& wtxIn)\n@@ -960,13 +956,9 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n                 }\n             }\n \n-            CWalletTx wtx(this, ptx);\n-\n             // Block disconnection override an abandoned tx as unconfirmed\n             // which means user may have to call abandontransaction again\n-            wtx.m_confirm = confirm;\n-\n-            return AddToWallet(wtx, false);\n+            return AddToWallet(MakeTransactionRef(tx), confirm, /* update_wtx= */ nullptr, /* fFlushOnClose= */ false);\n         }\n     }\n     return false;\n@@ -3007,29 +2999,30 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm)\n {\n     LOCK(cs_wallet);\n-\n-    CWalletTx wtxNew(this, std::move(tx));\n-    wtxNew.mapValue = std::move(mapValue);\n-    wtxNew.vOrderForm = std::move(orderForm);\n-    wtxNew.fTimeReceivedIsTxTime = true;\n-    wtxNew.fFromMe = true;\n-\n-    WalletLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString()); /* Continued */\n+    WalletLogPrintf(\"CommitTransaction:\\n%s\", tx->ToString()); /* Continued */\n \n     // Add tx to wallet, because if it has change it's also ours,\n     // otherwise just for transaction history.\n-    AddToWallet(wtxNew);\n+    AddToWallet(tx, {}, [&](CWalletTx& wtx, bool new_tx) {\n+        CHECK_NONFATAL(wtx.mapValue.empty());\n+        CHECK_NONFATAL(wtx.vOrderForm.empty());\n+        wtx.mapValue = std::move(mapValue);\n+        wtx.vOrderForm = std::move(orderForm);\n+        wtx.fTimeReceivedIsTxTime = true;\n+        wtx.fFromMe = true;\n+        return true;\n+    });\n \n     // Notify that old coins are spent\n-    for (const CTxIn& txin : wtxNew.tx->vin) {\n+    for (const CTxIn& txin : tx->vin) {\n         CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n         coin.BindWallet(this);\n         NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n     }\n \n     // Get the inserted-CWalletTx from mapWallet so that the\n     // fInMempool flag is cached properly\n-    CWalletTx& wtx = mapWallet.at(wtxNew.GetHash());\n+    CWalletTx& wtx = mapWallet.at(tx->GetHash());\n \n     if (!fBroadcastTransactions) {\n         // Don't submit tx to the mempool"
      },
      {
        "sha": "b1ae975bd80b5374647d7e415e614bf5e883e987",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b9cba206594bfbcefcef0c88a0bf793819643bd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2b9cba206594bfbcefcef0c88a0bf793819643bd",
        "patch": "@@ -886,7 +886,16 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     DBErrors ReorderTransactions();\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n+\n+    //! Callback for updating transaction metadata in mapWallet.\n+    //!\n+    //! @param wtx - reference to mapWallet transaction to update\n+    //! @param new_tx - true if wtx is newly inserted, false if it previously existed\n+    //!\n+    //! @return true if wtx is changed and needs to be saved to disk, otherwise false\n+    using UpdateWalletTxFn = std::function<bool(CWalletTx& wtx, bool new_tx)>;\n+\n+    CWalletTx* AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx=nullptr, bool fFlushOnClose=true);\n     void LoadToWallet(CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void transactionAddedToMempool(const CTransactionRef& tx) override;\n     void blockConnected(const CBlock& block, int height) override;"
      }
    ]
  },
  {
    "sha": "bd2fbc7cdbec46400341209f4cb7e69e5b2cee19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDJmYmM3Y2RiZWM0NjQwMDM0MTIwOWY0Y2I3ZTY5ZTViMmNlZTE5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-20T17:49:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-01T10:59:09Z"
      },
      "message": "Get rid of unneeded CWalletTx::Init parameter",
      "tree": {
        "sha": "79367858dc9bbc847f8304df49cdbe4dce317dfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79367858dc9bbc847f8304df49cdbe4dce317dfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b9cba206594bfbcefcef0c88a0bf793819643bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b9cba206594bfbcefcef0c88a0bf793819643bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b9cba206594bfbcefcef0c88a0bf793819643bd"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "39f5e304aeecc8a2150c0fe85841dd60f45c85d0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bd2fbc7cdbec46400341209f4cb7e69e5b2cee19",
        "patch": "@@ -338,15 +338,15 @@ class CWalletTx\n     mutable bool fInMempool;\n     mutable CAmount nChangeCached;\n \n-    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg)\n-        : tx(std::move(arg))\n+    CWalletTx(const CWallet* wallet, CTransactionRef arg)\n+        : pwallet(wallet),\n+          tx(std::move(arg))\n     {\n-        Init(pwalletIn);\n+        Init();\n     }\n \n-    void Init(const CWallet* pwalletIn)\n+    void Init()\n     {\n-        pwallet = pwalletIn;\n         mapValue.clear();\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n@@ -414,7 +414,7 @@ class CWalletTx\n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        Init(nullptr);\n+        Init();\n \n         std::vector<uint256> dummy_vector1; //!< Used to be vMerkleBranch\n         std::vector<CMerkleTx> dummy_vector2; //!< Used to be vtxPrev"
      }
    ]
  },
  {
    "sha": "65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWI5ZDhmOGRkYjVhODM4NDU0ZWZjOGJkZDY1NzZmMGRlYjY1ZjZk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-08T14:03:51Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-01T10:59:09Z"
      },
      "message": "Avoid copying CWalletTx in LoadToWallet\n\nThe change in walletdb.cpp is easier to review ignoring whitespace.\n\nThis change is need to get rid of CWalletTx copy constructor.",
      "tree": {
        "sha": "5ba19fa384fcb08dd2486b2a656e3bf843fe65c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ba19fa384fcb08dd2486b2a656e3bf843fe65c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd2fbc7cdbec46400341209f4cb7e69e5b2cee19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2fbc7cdbec46400341209f4cb7e69e5b2cee19"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 47,
      "deletions": 38
    },
    "files": [
      {
        "sha": "505e394aa1254a117bc5104b211576291b58c49f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
        "patch": "@@ -879,32 +879,33 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n     return &wtx;\n }\n \n-void CWallet::LoadToWallet(CWalletTx& wtxIn)\n+bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx)\n {\n+    const auto& ins = mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(hash), std::forward_as_tuple(this, nullptr));\n+    CWalletTx& wtx = ins.first->second;\n+    if (!fill_wtx(wtx, ins.second)) {\n+        return false;\n+    }\n     // If wallet doesn't have a chain (e.g wallet-tool), don't bother to update txn.\n     if (HaveChain()) {\n-        Optional<int> block_height = chain().getBlockHeight(wtxIn.m_confirm.hashBlock);\n+        Optional<int> block_height = chain().getBlockHeight(wtx.m_confirm.hashBlock);\n         if (block_height) {\n             // Update cached block height variable since it not stored in the\n             // serialized transaction.\n-            wtxIn.m_confirm.block_height = *block_height;\n-        } else if (wtxIn.isConflicted() || wtxIn.isConfirmed()) {\n+            wtx.m_confirm.block_height = *block_height;\n+        } else if (wtx.isConflicted() || wtx.isConfirmed()) {\n             // If tx block (or conflicting block) was reorged out of chain\n             // while the wallet was shutdown, change tx status to UNCONFIRMED\n             // and reset block height, hash, and index. ABANDONED tx don't have\n             // associated blocks and don't need to be updated. The case where a\n             // transaction was reorged out while online and then reconfirmed\n             // while offline is covered by the rescan logic.\n-            wtxIn.setUnconfirmed();\n-            wtxIn.m_confirm.hashBlock = uint256();\n-            wtxIn.m_confirm.block_height = 0;\n-            wtxIn.m_confirm.nIndex = 0;\n+            wtx.setUnconfirmed();\n+            wtx.m_confirm.hashBlock = uint256();\n+            wtx.m_confirm.block_height = 0;\n+            wtx.m_confirm.nIndex = 0;\n         }\n     }\n-    uint256 hash = wtxIn.GetHash();\n-    const auto& ins = mapWallet.emplace(hash, wtxIn);\n-    CWalletTx& wtx = ins.first->second;\n-    wtx.BindWallet(this);\n     if (/* insertion took place */ ins.second) {\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n     }\n@@ -918,6 +919,7 @@ void CWallet::LoadToWallet(CWalletTx& wtxIn)\n             }\n         }\n     }\n+    return true;\n }\n \n bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate)"
      },
      {
        "sha": "82f45e3d33a97782b3acae4343cdfb7d2c680ae2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
        "patch": "@@ -896,7 +896,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     using UpdateWalletTxFn = std::function<bool(CWalletTx& wtx, bool new_tx)>;\n \n     CWalletTx* AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx=nullptr, bool fFlushOnClose=true);\n-    void LoadToWallet(CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void transactionAddedToMempool(const CTransactionRef& tx) override;\n     void blockConnected(const CBlock& block, int height) override;\n     void blockDisconnected(const CBlock& block, int height) override;"
      },
      {
        "sha": "303570e320a2ac6a67663efddf461efaf8c49677",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 25,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
        "patch": "@@ -272,36 +272,43 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::TX) {\n             uint256 hash;\n             ssKey >> hash;\n-            CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n-            ssValue >> wtx;\n-            if (wtx.GetHash() != hash)\n-                return false;\n+            // LoadToWallet call below creates a new CWalletTx that fill_wtx\n+            // callback fills with transaction metadata.\n+            auto fill_wtx = [&](CWalletTx& wtx, bool new_tx) {\n+                assert(new_tx);\n+                ssValue >> wtx;\n+                if (wtx.GetHash() != hash)\n+                    return false;\n \n-            // Undo serialize changes in 31600\n-            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-            {\n-                if (!ssValue.empty())\n+                // Undo serialize changes in 31600\n+                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n                 {\n-                    char fTmp;\n-                    char fUnused;\n-                    std::string unused_string;\n-                    ssValue >> fTmp >> fUnused >> unused_string;\n-                    strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n-                                       wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n-                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                    if (!ssValue.empty())\n+                    {\n+                        char fTmp;\n+                        char fUnused;\n+                        std::string unused_string;\n+                        ssValue >> fTmp >> fUnused >> unused_string;\n+                        strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d %s\",\n+                                           wtx.fTimeReceivedIsTxTime, fTmp, hash.ToString());\n+                        wtx.fTimeReceivedIsTxTime = fTmp;\n+                    }\n+                    else\n+                    {\n+                        strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                        wtx.fTimeReceivedIsTxTime = 0;\n+                    }\n+                    wss.vWalletUpgrade.push_back(hash);\n                 }\n-                else\n-                {\n-                    strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                    wtx.fTimeReceivedIsTxTime = 0;\n-                }\n-                wss.vWalletUpgrade.push_back(hash);\n-            }\n \n-            if (wtx.nOrderPos == -1)\n-                wss.fAnyUnordered = true;\n+                if (wtx.nOrderPos == -1)\n+                    wss.fAnyUnordered = true;\n \n-            pwallet->LoadToWallet(wtx);\n+                return true;\n+            };\n+            if (!pwallet->LoadToWallet(hash, fill_wtx)) {\n+                return false;\n+            }\n         } else if (strType == DBKeys::WATCHS) {\n             wss.nWatchKeys++;\n             CScript script;"
      }
    ]
  },
  {
    "sha": "d002f9d15d938e78360ad906f2d74a249c7e923e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDAyZjlkMTVkOTM4ZTc4MzYwYWQ5MDZmMmQ3NGEyNDljN2U5MjNl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-20T17:51:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-01T10:59:09Z"
      },
      "message": "Disable CWalletTx copy constructor\n\nDisable copying of CWalletTx objects to prevent bugs where instances get copied\nin and out of the mapWallet map and fields are updated in the wrong copy.",
      "tree": {
        "sha": "63b347af7ca319e9ddc40fa8320b352b9af59788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63b347af7ca319e9ddc40fa8320b352b9af59788"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d002f9d15d938e78360ad906f2d74a249c7e923e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d002f9d15d938e78360ad906f2d74a249c7e923e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d002f9d15d938e78360ad906f2d74a249c7e923e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d002f9d15d938e78360ad906f2d74a249c7e923e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65b9d8f8ddb5a838454efc8bdd6576f0deb65f6d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 19,
      "deletions": 18
    },
    "files": [
      {
        "sha": "677b799d06752f0c1276d930dbab30d16fa44299",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d002f9d15d938e78360ad906f2d74a249c7e923e",
        "patch": "@@ -1582,7 +1582,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     UniValue transactions(UniValue::VARR);\n \n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n-        CWalletTx tx = pairWtx.second;\n+        const CWalletTx& tx = pairWtx.second;\n \n         if (depth == -1 || abs(tx.GetDepthInMainChain()) < depth) {\n             ListTransactions(pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);"
      },
      {
        "sha": "b4c65a866545d406952a3c2af04a171797c52af4",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=d002f9d15d938e78360ad906f2d74a249c7e923e",
        "patch": "@@ -22,14 +22,12 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     CDataStream s_prev_tx1(ParseHex(\"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     CTransactionRef prev_tx1;\n     s_prev_tx1 >> prev_tx1;\n-    CWalletTx prev_wtx1(&m_wallet, prev_tx1);\n-    m_wallet.mapWallet.emplace(prev_wtx1.GetHash(), std::move(prev_wtx1));\n+    m_wallet.mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(prev_tx1->GetHash()), std::forward_as_tuple(&m_wallet, prev_tx1));\n \n     CDataStream s_prev_tx2(ParseHex(\"0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     CTransactionRef prev_tx2;\n     s_prev_tx2 >> prev_tx2;\n-    CWalletTx prev_wtx2(&m_wallet, prev_tx2);\n-    m_wallet.mapWallet.emplace(prev_wtx2.GetHash(), std::move(prev_wtx2));\n+    m_wallet.mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(prev_tx2->GetHash()), std::forward_as_tuple(&m_wallet, prev_tx2));\n \n     // Add scripts\n     CScript rs1;"
      },
      {
        "sha": "36f00b89595539857a64a3adc7045883ae40afad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d002f9d15d938e78360ad906f2d74a249c7e923e",
        "patch": "@@ -3096,7 +3096,7 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n+DBErrors CWallet::ZapWalletTx(std::list<CWalletTx>& vWtx)\n {\n     DBErrors nZapWalletTxRet = WalletBatch(*database,\"cr+\").ZapWalletTx(vWtx);\n     if (nZapWalletTxRet == DBErrors::NEED_REWRITE)\n@@ -3708,7 +3708,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n     // needed to restore wallet transaction meta data after -zapwallettxes\n-    std::vector<CWalletTx> vWtx;\n+    std::list<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);"
      },
      {
        "sha": "932e1a28b876ff4e3f64c5d18fccd12d63de639a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d002f9d15d938e78360ad906f2d74a249c7e923e",
        "patch": "@@ -553,6 +553,12 @@ class CWalletTx\n     const uint256& GetHash() const { return tx->GetHash(); }\n     bool IsCoinBase() const { return tx->IsCoinBase(); }\n     bool IsImmatureCoinBase() const;\n+\n+    // Disable copying of CWalletTx objects to prevent bugs where instances get\n+    // copied in and out of the mapWallet map, and fields are updated in the\n+    // wrong copy.\n+    CWalletTx(CWalletTx const &) = delete;\n+    void operator=(CWalletTx const &x) = delete;\n };\n \n class COutput\n@@ -1057,7 +1063,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     void chainStateFlushed(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n-    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n+    DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);"
      },
      {
        "sha": "d4f060410b91a22edeb6a6b768d35ac32ac699a0",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d002f9d15d938e78360ad906f2d74a249c7e923e",
        "patch": "@@ -738,7 +738,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n-DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)\n+DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx)\n {\n     DBErrors result = DBErrors::LOAD_OK;\n \n@@ -776,12 +776,9 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CW\n             if (strType == DBKeys::TX) {\n                 uint256 hash;\n                 ssKey >> hash;\n-\n-                CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n-                ssValue >> wtx;\n-\n                 vTxHash.push_back(hash);\n-                vWtx.push_back(wtx);\n+                vWtx.emplace_back(nullptr /* wallet */, nullptr /* tx */);\n+                ssValue >> vWtx.back();\n             }\n         }\n         pcursor->close();\n@@ -800,7 +797,7 @@ DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<u\n {\n     // build list of wallet TXs and hashes\n     std::vector<uint256> vTxHash;\n-    std::vector<CWalletTx> vWtx;\n+    std::list<CWalletTx> vWtx;\n     DBErrors err = FindWalletTx(vTxHash, vWtx);\n     if (err != DBErrors::LOAD_OK) {\n         return err;\n@@ -834,7 +831,7 @@ DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<u\n     return DBErrors::LOAD_OK;\n }\n \n-DBErrors WalletBatch::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n+DBErrors WalletBatch::ZapWalletTx(std::list<CWalletTx>& vWtx)\n {\n     // build list of wallet TXs\n     std::vector<uint256> vTxHash;"
      },
      {
        "sha": "681ca10bb1bf398a24f3899ed9cc548e5e373fc7",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d002f9d15d938e78360ad906f2d74a249c7e923e/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d002f9d15d938e78360ad906f2d74a249c7e923e",
        "patch": "@@ -260,8 +260,8 @@ class WalletBatch\n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n \n     DBErrors LoadWallet(CWallet* pwallet);\n-    DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n-    DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n+    DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n+    DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n     static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);"
      }
    ]
  },
  {
    "sha": "28b112e9bd3fd1181c0720306051ba7efca8b436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGIxMTJlOWJkM2ZkMTE4MWMwNzIwMzA2MDUxYmE3ZWZjYThiNDM2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-20T17:52:47Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-01T10:59:09Z"
      },
      "message": "Get rid of BindWallet\n\nCWalletTx initialization has been fixed so it's no longer necessary to change\nwhich wallet a transaction is bound to.",
      "tree": {
        "sha": "f492ede76f4813985b7c219b74c73e6475895c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f492ede76f4813985b7c219b74c73e6475895c50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28b112e9bd3fd1181c0720306051ba7efca8b436",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b112e9bd3fd1181c0720306051ba7efca8b436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28b112e9bd3fd1181c0720306051ba7efca8b436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b112e9bd3fd1181c0720306051ba7efca8b436/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d002f9d15d938e78360ad906f2d74a249c7e923e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d002f9d15d938e78360ad906f2d74a249c7e923e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d002f9d15d938e78360ad906f2d74a249c7e923e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5b489749bf2a196a791a6ff86d8e4bb256c30697",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b112e9bd3fd1181c0720306051ba7efca8b436/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b112e9bd3fd1181c0720306051ba7efca8b436/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=28b112e9bd3fd1181c0720306051ba7efca8b436",
        "patch": "@@ -806,7 +806,6 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n     // Inserts only if not already there, returns tx inserted or tx found\n     auto ret = mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(hash), std::forward_as_tuple(this, tx));\n     CWalletTx& wtx = (*ret.first).second;\n-    wtx.BindWallet(this);\n     bool fInsertedNew = ret.second;\n     bool fUpdated = update_wtx && update_wtx(wtx, fInsertedNew);\n     if (fInsertedNew) {\n@@ -3018,7 +3017,7 @@ void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n     // Notify that old coins are spent\n     for (const CTxIn& txin : tx->vin) {\n         CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n-        coin.BindWallet(this);\n+        coin.MarkDirty();\n         NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n     }\n "
      },
      {
        "sha": "c681b8475006b407f17b5ec4992e195a0807a647",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b112e9bd3fd1181c0720306051ba7efca8b436/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b112e9bd3fd1181c0720306051ba7efca8b436/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=28b112e9bd3fd1181c0720306051ba7efca8b436",
        "patch": "@@ -463,12 +463,6 @@ class CWalletTx\n         m_is_cache_empty = true;\n     }\n \n-    void BindWallet(CWallet *pwalletIn)\n-    {\n-        pwallet = pwalletIn;\n-        MarkDirty();\n-    }\n-\n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n     CAmount GetCredit(const isminefilter& filter) const;"
      }
    ]
  }
]