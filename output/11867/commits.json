[
  {
    "sha": "12853120484e19bbd9cf90574d5eaa9cb46255a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjg1MzEyMDQ4NGUxOWJiZDljZjkwNTc0ZDVlYWE5Y2I0NjI1NWE1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T16:55:54Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-19T16:19:55Z"
      },
      "message": "[tests] fix flake8 warnings in node_network_limited.py",
      "tree": {
        "sha": "6f233a64ae8ae9db9d0303c93de56b3a9866f05b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f233a64ae8ae9db9d0303c93de56b3a9866f05b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12853120484e19bbd9cf90574d5eaa9cb46255a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12853120484e19bbd9cf90574d5eaa9cb46255a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12853120484e19bbd9cf90574d5eaa9cb46255a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12853120484e19bbd9cf90574d5eaa9cb46255a5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdd6bbf10a818d243f973f628e465cc1df98691a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd6bbf10a818d243f973f628e465cc1df98691a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdd6bbf10a818d243f973f628e465cc1df98691a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5229dfc99bb2446ef968df9124aa9267c0b57807",
        "filename": "test/functional/node_network_limited.py",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12853120484e19bbd9cf90574d5eaa9cb46255a5/test/functional/node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12853120484e19bbd9cf90574d5eaa9cb46255a5/test/functional/node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/node_network_limited.py?ref=12853120484e19bbd9cf90574d5eaa9cb46255a5",
        "patch": "@@ -2,9 +2,10 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+from test_framework.messages import CInv, msg_getdata, msg_verack\n+from test_framework.mininode import NetworkThread, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n+from test_framework.util import assert_equal\n \n class BaseNode(P2PInterface):\n     nServices = 0\n@@ -17,7 +18,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-prune=550']]\n \n-    def getSignaledServiceFlags(self):\n+    def get_signalled_service_flags(self):\n         node = self.nodes[0].add_p2p_connection(BaseNode())\n         NetworkThread().start()\n         node.wait_for_verack()\n@@ -26,7 +27,7 @@ def getSignaledServiceFlags(self):\n         node.wait_for_disconnect()\n         return services\n \n-    def tryGetBlockViaGetData(self, blockhash, must_disconnect):\n+    def try_get_block_via_getdata(self, blockhash, must_disconnect):\n         node = self.nodes[0].add_p2p_connection(BaseNode())\n         NetworkThread().start()\n         node.wait_for_verack()\n@@ -36,7 +37,7 @@ def tryGetBlockViaGetData(self, blockhash, must_disconnect):\n         node.send_message(getdata_request)\n \n         if (must_disconnect):\n-            #ensure we get disconnected\n+            # Ensure we get disconnected\n             node.wait_for_disconnect(5)\n         else:\n             # check if the peer sends us the requested block\n@@ -45,36 +46,36 @@ def tryGetBlockViaGetData(self, blockhash, must_disconnect):\n             node.wait_for_disconnect()\n \n     def run_test(self):\n-        #NODE_BLOOM & NODE_WITNESS & NODE_NETWORK_LIMITED must now be signaled\n-        assert_equal(self.getSignaledServiceFlags(), 1036) #1036 == 0x40C == 0100 0000 1100\n-#                                                                              |        ||\n-#                                                                              |        |^--- NODE_BLOOM\n-#                                                                              |        ^---- NODE_WITNESS\n-#                                                                              ^-- NODE_NETWORK_LIMITED\n+        # NODE_BLOOM & NODE_WITNESS & NODE_NETWORK_LIMITED must now be signaled\n+        assert_equal(self.get_signalled_service_flags(), 1036)  # 1036 == 0x40C == 0100 0000 1100\n+#                                                                                   |        ||\n+#                                                                                   |        |^--- NODE_BLOOM\n+#                                                                                   |        ^---- NODE_WITNESS\n+#                                                                                   ^-- NODE_NETWORK_LIMITED\n \n-        #now mine some blocks over the NODE_NETWORK_LIMITED + 2(racy buffer ext.) target\n+        # Now mine some blocks over the NODE_NETWORK_LIMITED + 2(racy buffer ext.) target\n         firstblock = self.nodes[0].generate(1)[0]\n         blocks = self.nodes[0].generate(292)\n-        blockWithinLimitedRange = blocks[-1]\n+        block_within_limited_range = blocks[-1]\n \n-        #make sure we can max retrive block at tip-288\n-        #requesting block at height 2 (tip-289) must fail (ignored)\n-        self.tryGetBlockViaGetData(firstblock, True) #first block must lead to disconnect\n-        self.tryGetBlockViaGetData(blocks[1], False) #last block in valid range\n-        self.tryGetBlockViaGetData(blocks[0], True) #first block outside of the 288+2 limit\n+        # Make sure we can max retrive block at tip-288\n+        # requesting block at height 2 (tip-289) must fail (ignored)\n+        self.try_get_block_via_getdata(firstblock, True)  # first block must lead to disconnect\n+        self.try_get_block_via_getdata(blocks[1], False)  # last block in valid range\n+        self.try_get_block_via_getdata(blocks[0], True)  # first block outside of the 288+2 limit\n \n-        #NODE_NETWORK_LIMITED must still be signaled after restart\n+        # NODE_NETWORK_LIMITED must still be signaled after restart\n         self.restart_node(0)\n-        assert_equal(self.getSignaledServiceFlags(), 1036)\n+        assert_equal(self.get_signalled_service_flags(), 1036)\n \n-        #test the RPC service flags\n+        # Test the RPC service flags\n         assert_equal(self.nodes[0].getnetworkinfo()['localservices'], \"000000000000040c\")\n \n         # getdata a block above the NODE_NETWORK_LIMITED threshold must be possible\n-        self.tryGetBlockViaGetData(blockWithinLimitedRange, False)\n+        self.try_get_block_via_getdata(block_within_limited_range, False)\n \n         # getdata a block below the NODE_NETWORK_LIMITED threshold must be ignored\n-        self.tryGetBlockViaGetData(firstblock, True)\n+        self.try_get_block_via_getdata(firstblock, True)\n \n if __name__ == '__main__':\n     NodeNetworkLimitedTest().main()"
      }
    ]
  },
  {
    "sha": "dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmZlMjk0ODA1YTA5NGJhNGVkNjE3OGE1NmQwYTc1ODhmY2Q4YzI3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T16:56:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-19T16:19:55Z"
      },
      "message": "[tests] define NODE_NETWORK_LIMITED in test framework",
      "tree": {
        "sha": "23de54a5ac77f2c470e1b58e93e107a848b3a0dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23de54a5ac77f2c470e1b58e93e107a848b3a0dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfe294805a094ba4ed6178a56d0a7588fcd8c27/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12853120484e19bbd9cf90574d5eaa9cb46255a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12853120484e19bbd9cf90574d5eaa9cb46255a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12853120484e19bbd9cf90574d5eaa9cb46255a5"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1e7c61b44c8018a97d626e093172e87f08fb76da",
        "filename": "test/functional/node_network_limited.py",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfe294805a094ba4ed6178a56d0a7588fcd8c27/test/functional/node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfe294805a094ba4ed6178a56d0a7588fcd8c27/test/functional/node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/node_network_limited.py?ref=dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
        "patch": "@@ -3,7 +3,7 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from test_framework.messages import CInv, msg_getdata, msg_verack\n-from test_framework.mininode import NetworkThread, P2PInterface\n+from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, NetworkThread, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -47,11 +47,7 @@ def try_get_block_via_getdata(self, blockhash, must_disconnect):\n \n     def run_test(self):\n         # NODE_BLOOM & NODE_WITNESS & NODE_NETWORK_LIMITED must now be signaled\n-        assert_equal(self.get_signalled_service_flags(), 1036)  # 1036 == 0x40C == 0100 0000 1100\n-#                                                                                   |        ||\n-#                                                                                   |        |^--- NODE_BLOOM\n-#                                                                                   |        ^---- NODE_WITNESS\n-#                                                                                   ^-- NODE_NETWORK_LIMITED\n+        assert_equal(self.get_signalled_service_flags(), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n \n         # Now mine some blocks over the NODE_NETWORK_LIMITED + 2(racy buffer ext.) target\n         firstblock = self.nodes[0].generate(1)[0]\n@@ -66,10 +62,10 @@ def run_test(self):\n \n         # NODE_NETWORK_LIMITED must still be signaled after restart\n         self.restart_node(0)\n-        assert_equal(self.get_signalled_service_flags(), 1036)\n+        assert_equal(self.get_signalled_service_flags(), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n \n         # Test the RPC service flags\n-        assert_equal(self.nodes[0].getnetworkinfo()['localservices'], \"000000000000040c\")\n+        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n \n         # getdata a block above the NODE_NETWORK_LIMITED threshold must be possible\n         self.try_get_block_via_getdata(block_within_limited_range, False)"
      },
      {
        "sha": "d8032e4430cbadae81afde066c106cc5ecea8b37",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfe294805a094ba4ed6178a56d0a7588fcd8c27/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfe294805a094ba4ed6178a56d0a7588fcd8c27/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
        "patch": "@@ -38,10 +38,11 @@\n \n NODE_NETWORK = (1 << 0)\n # NODE_GETUTXO = (1 << 1)\n-# NODE_BLOOM = (1 << 2)\n+NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n+NODE_NETWORK_LIMITED = (1 << 10)\n \n # Serialization/deserialization tools\n def sha256(s):"
      }
    ]
  },
  {
    "sha": "2e029845919eedcb4c4ff5f951cc85d95da68ad1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTAyOTg0NTkxOWVlZGNiNGM0ZmY1Zjk1MWNjODVkOTVkYTY4YWQx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T17:08:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-19T16:20:12Z"
      },
      "message": "[tests] node_network_limited - remove race condition\n\nnode_network_limited had a race condition, since wait_for_block()\ndoesn't do what you might expect. It only checks the most recent block\nreceived over the P2P interface (perhaps we should rename the method\nwait_for_most_recent_block() to avoid future confusion). The test can\nfail if the node sends us invs for other blocks, we respond with a\ngetdata, and the node sends us one of those blocks in the 0.05 second\nwait_until loop window.\n\nFix this by not responding to inv messages with getdata messages.",
      "tree": {
        "sha": "feac4789f1ca03f23b8a5f7e31c4bd0b81e99994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/feac4789f1ca03f23b8a5f7e31c4bd0b81e99994"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e029845919eedcb4c4ff5f951cc85d95da68ad1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e029845919eedcb4c4ff5f951cc85d95da68ad1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e029845919eedcb4c4ff5f951cc85d95da68ad1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e029845919eedcb4c4ff5f951cc85d95da68ad1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfe294805a094ba4ed6178a56d0a7588fcd8c27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbfe294805a094ba4ed6178a56d0a7588fcd8c27"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6f1c60eec93cdeb328dae8d18c2e7b8a7deafb9b",
        "filename": "test/functional/node_network_limited.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e029845919eedcb4c4ff5f951cc85d95da68ad1/test/functional/node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e029845919eedcb4c4ff5f951cc85d95da68ad1/test/functional/node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/node_network_limited.py?ref=2e029845919eedcb4c4ff5f951cc85d95da68ad1",
        "patch": "@@ -2,15 +2,15 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-from test_framework.messages import CInv, msg_getdata, msg_verack\n+from test_framework.messages import CInv, msg_getdata\n from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, NetworkThread, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-class BaseNode(P2PInterface):\n-    nServices = 0\n-    def on_version(self, message):\n-        self.nServices = message.nServices\n+class P2PIgnoreInv(P2PInterface):\n+    def on_inv(self, message):\n+        # The node will send us invs for other blocks. Ignore them.\n+        pass\n \n class NodeNetworkLimitedTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -19,7 +19,7 @@ def set_test_params(self):\n         self.extra_args = [['-prune=550']]\n \n     def get_signalled_service_flags(self):\n-        node = self.nodes[0].add_p2p_connection(BaseNode())\n+        node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n         NetworkThread().start()\n         node.wait_for_verack()\n         services = node.nServices\n@@ -28,10 +28,9 @@ def get_signalled_service_flags(self):\n         return services\n \n     def try_get_block_via_getdata(self, blockhash, must_disconnect):\n-        node = self.nodes[0].add_p2p_connection(BaseNode())\n+        node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n         NetworkThread().start()\n         node.wait_for_verack()\n-        node.send_message(msg_verack())\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n         node.send_message(getdata_request)"
      }
    ]
  },
  {
    "sha": "b425131f5ace294f0d8be579f5ef596907cf1e16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDI1MTMxZjVhY2UyOTRmMGQ4YmU1NzlmNWVmNTk2OTA3Y2YxZTE2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T17:38:50Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-19T16:20:12Z"
      },
      "message": "[tests] remove redundant duplicate tests from node_network_limited",
      "tree": {
        "sha": "0d086c947ef53976a59d6ed952fd338d1832c17d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d086c947ef53976a59d6ed952fd338d1832c17d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b425131f5ace294f0d8be579f5ef596907cf1e16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b425131f5ace294f0d8be579f5ef596907cf1e16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b425131f5ace294f0d8be579f5ef596907cf1e16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b425131f5ace294f0d8be579f5ef596907cf1e16/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e029845919eedcb4c4ff5f951cc85d95da68ad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e029845919eedcb4c4ff5f951cc85d95da68ad1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e029845919eedcb4c4ff5f951cc85d95da68ad1"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 3,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9313e3d35cc39934f432e7e2cd66ca3a6cdbb97d",
        "filename": "test/functional/node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b425131f5ace294f0d8be579f5ef596907cf1e16/test/functional/node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b425131f5ace294f0d8be579f5ef596907cf1e16/test/functional/node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/node_network_limited.py?ref=b425131f5ace294f0d8be579f5ef596907cf1e16",
        "patch": "@@ -48,29 +48,16 @@ def run_test(self):\n         # NODE_BLOOM & NODE_WITNESS & NODE_NETWORK_LIMITED must now be signaled\n         assert_equal(self.get_signalled_service_flags(), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n \n+        # Test the RPC service flags\n+        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n+\n         # Now mine some blocks over the NODE_NETWORK_LIMITED + 2(racy buffer ext.) target\n-        firstblock = self.nodes[0].generate(1)[0]\n         blocks = self.nodes[0].generate(292)\n-        block_within_limited_range = blocks[-1]\n \n         # Make sure we can max retrive block at tip-288\n         # requesting block at height 2 (tip-289) must fail (ignored)\n-        self.try_get_block_via_getdata(firstblock, True)  # first block must lead to disconnect\n         self.try_get_block_via_getdata(blocks[1], False)  # last block in valid range\n         self.try_get_block_via_getdata(blocks[0], True)  # first block outside of the 288+2 limit\n \n-        # NODE_NETWORK_LIMITED must still be signaled after restart\n-        self.restart_node(0)\n-        assert_equal(self.get_signalled_service_flags(), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n-\n-        # Test the RPC service flags\n-        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n-\n-        # getdata a block above the NODE_NETWORK_LIMITED threshold must be possible\n-        self.try_get_block_via_getdata(block_within_limited_range, False)\n-\n-        # getdata a block below the NODE_NETWORK_LIMITED threshold must be ignored\n-        self.try_get_block_via_getdata(firstblock, True)\n-\n if __name__ == '__main__':\n     NodeNetworkLimitedTest().main()"
      }
    ]
  },
  {
    "sha": "ee5efad6cfb60d8efe678b1a9285a73d265ea79b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTVlZmFkNmNmYjYwZDhlZmU2NzhiMWE5Mjg1YTczZDI2NWVhNzli",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T17:51:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-19T16:20:12Z"
      },
      "message": "[tests] refactor node_network_limited",
      "tree": {
        "sha": "8f21a28d3972bae91079518caf3be0de87fd6205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f21a28d3972bae91079518caf3be0de87fd6205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee5efad6cfb60d8efe678b1a9285a73d265ea79b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5efad6cfb60d8efe678b1a9285a73d265ea79b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee5efad6cfb60d8efe678b1a9285a73d265ea79b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee5efad6cfb60d8efe678b1a9285a73d265ea79b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b425131f5ace294f0d8be579f5ef596907cf1e16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b425131f5ace294f0d8be579f5ef596907cf1e16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b425131f5ace294f0d8be579f5ef596907cf1e16"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 25,
      "deletions": 31
    },
    "files": [
      {
        "sha": "70415e0168dcf2fb34399d9102929640a4ae5039",
        "filename": "test/functional/node_network_limited.py",
        "status": "modified",
        "additions": 25,
        "deletions": 31,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee5efad6cfb60d8efe678b1a9285a73d265ea79b/test/functional/node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee5efad6cfb60d8efe678b1a9285a73d265ea79b/test/functional/node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/node_network_limited.py?ref=ee5efad6cfb60d8efe678b1a9285a73d265ea79b",
        "patch": "@@ -2,6 +2,12 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_NETWORK_LIMITED.\n+\n+Tests that a node configured with -prune=550 signals NODE_NETWORK_LIMITED correctly\n+and that it responds to getdata requests for blocks correctly:\n+    - send a block within 288 + 2 of the tip\n+    - disconnect peers who request blocks older than that.\"\"\"\n from test_framework.messages import CInv, msg_getdata\n from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, NetworkThread, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n@@ -12,52 +18,40 @@ def on_inv(self, message):\n         # The node will send us invs for other blocks. Ignore them.\n         pass\n \n+    def send_getdata_for_block(self, blockhash):\n+        getdata_request = msg_getdata()\n+        getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n+        self.send_message(getdata_request)\n+\n class NodeNetworkLimitedTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [['-prune=550']]\n \n-    def get_signalled_service_flags(self):\n-        node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n-        NetworkThread().start()\n-        node.wait_for_verack()\n-        services = node.nServices\n-        self.nodes[0].disconnect_p2ps()\n-        node.wait_for_disconnect()\n-        return services\n-\n-    def try_get_block_via_getdata(self, blockhash, must_disconnect):\n+    def run_test(self):\n         node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n         NetworkThread().start()\n         node.wait_for_verack()\n-        getdata_request = msg_getdata()\n-        getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n-        node.send_message(getdata_request)\n \n-        if (must_disconnect):\n-            # Ensure we get disconnected\n-            node.wait_for_disconnect(5)\n-        else:\n-            # check if the peer sends us the requested block\n-            node.wait_for_block(int(blockhash, 16), 3)\n-            self.nodes[0].disconnect_p2ps()\n-            node.wait_for_disconnect()\n+        expected_services = NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED\n \n-    def run_test(self):\n-        # NODE_BLOOM & NODE_WITNESS & NODE_NETWORK_LIMITED must now be signaled\n-        assert_equal(self.get_signalled_service_flags(), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n+        self.log.info(\"Check that node has signalled expected services.\")\n+        assert_equal(node.nServices, expected_services)\n \n-        # Test the RPC service flags\n-        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED)\n+        self.log.info(\"Check that the localservices is as expected.\")\n+        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n-        # Now mine some blocks over the NODE_NETWORK_LIMITED + 2(racy buffer ext.) target\n+        self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n         blocks = self.nodes[0].generate(292)\n \n-        # Make sure we can max retrive block at tip-288\n-        # requesting block at height 2 (tip-289) must fail (ignored)\n-        self.try_get_block_via_getdata(blocks[1], False)  # last block in valid range\n-        self.try_get_block_via_getdata(blocks[0], True)  # first block outside of the 288+2 limit\n+        self.log.info(\"Make sure we can max retrive block at tip-288.\")\n+        node.send_getdata_for_block(blocks[1])  # last block in valid range\n+        node.wait_for_block(int(blocks[1], 16), timeout=3)\n+\n+        self.log.info(\"Requesting block at height 2 (tip-289) must fail (ignored).\")\n+        node.send_getdata_for_block(blocks[0])  # first block outside of the 288+2 limit\n+        node.wait_for_disconnect(5)\n \n if __name__ == '__main__':\n     NodeNetworkLimitedTest().main()"
      }
    ]
  }
]