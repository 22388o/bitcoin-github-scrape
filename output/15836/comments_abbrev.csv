DrahtBot,2019-04-18T15:14:45Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17564](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17564.html) (rpc: Use mempool from node context instead ",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-484552109,484552109,
kristapsk,2019-05-14T21:06:39Z,Concept ACK / tACK 9ef932513f0c606d019524983a238def3a300810,https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-492409851,492409851,
laanwj,2019-06-07T13:34:04Z,"Concept ACK. This gives me a new warning on build:\n```\n/home/user/src/bitcoin/src/rpc/blockchain.cpp:1550:9: warning: acquiring mutex 'pool.cs' that is already held [-Wthread-safety-analysis]\n        LOCK(pool.cs);\n        ^\n/home/user/src/bitcoin/src/sync.h:182:42: note: expanded from macro 'LOCK'\n#define LOCK(cs) DebugLock<decltype(cs)> PASTE2(criticalblock, __COUNTER__)(cs, #cs, __F",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-499886548,499886548,
jonasschnelli,2019-07-17T09:43:45Z,"Fixed the lock issue.\nRebased.",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-512182997,512182997,
DrahtBot,2019-12-16T21:54:53Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-566261646,566261646,
NicolasDorier,2020-10-12T09:55:46Z,"Concept ACK, it would be super useful",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-707016447,707016447,
shesek,2021-01-19T18:20:49Z,"Concept ACK, I will be using this if available for both [bwt](https://github.com/bwt-dev/bwt) and [esplora/electrs](https://github.com/blockstream/esplora). Electrum Personal Server can [also benefit from it](https://github.com/chris-belcher/electrum-personal-server/issues/96).",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-763030901,763030901,
kiminuo,2021-03-06T21:57:14Z,"@jonasschnelli This https://github.com/kiminuo/bitcoin/tree/feature/2021-03-Feerate-histogram is an attempt to do the rebase work and apply a few review comments:\n\n**Applied review comments**\n\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304327165 - ""Remove these files and maybe update .gitignore?""\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304346834 - ""Th",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-792070533,792070533,
kiminuo,2021-03-12T14:58:36Z,I have forked this PR: #21422 and I'm willing to continue working on that.,https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-797543170,797543170,
kiminuo,2021-04-14T14:41:39Z,"I'm chasing ""concept ACK""s for the reborn version of this PR - namely #21422. \n\nAny other feedback is welcome, I have time to do modifications if needed to increase the chance of getting the PR to be merged.",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-819572017,819572017,
rebroad,2021-04-18T20:20:06Z,@jonasschnelli the simple plot example doesn't display (seems the website is down).,https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-822054599,822054599,
kiminuo,2021-04-18T20:23:12Z,"@rebroad The link redirects to https://bitcoin.jonasschnelli.ch/mempool-histogram/ but there is a bug (missing slash). Anyway, there are no data at the moment.",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-822055018,822055018,
fanquake,2021-08-18T07:51:25Z,"Closing this, given it's been taken over in #21422.",https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-900899200,900899200,
promag,2019-04-17T13:24:14Z,"Instead of this parameter, it could have `fee_histogram_bins` (that defaults to `[]` which means no histogram is included in the response). This would replace the above `feelimits` and also avoids breaking clients implementation.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276238077,276238077,src/rpc/blockchain.cpp
promag,2019-04-17T13:26:29Z,I believe we should move this up (done in #15474).,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239167,276239167,src/rpc/blockchain.cpp
promag,2019-04-17T13:27:48Z,Can't we just start to use query parameters?,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239801,276239801,src/rest.cpp
promag,2019-04-17T13:40:36Z,Correct me if I'm wrong but if `feelimits` is sorted then `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` is not necessary.,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246250,276246250,src/rpc/blockchain.cpp
promag,2019-04-17T13:41:36Z,"Beside, it could avoid linear search by using `std::find`.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246713,276246713,src/rpc/blockchain.cpp
jonatack,2019-04-17T14:13:04Z,"Would it be efficient to memoize `feelimits.size() - 1` ? (if the compiler doesn't optimize it automatically, my C++ is rusty)",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276262032,276262032,src/rpc/blockchain.cpp
jonatack,2019-04-17T14:15:32Z,"If `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` can be removed, the dependency on `feelimits` being sorted would need a regression test.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276263273,276263273,src/rpc/blockchain.cpp
promag,2019-04-17T15:18:52Z,"That pull was merged, please rebase and remove this lock.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276296561,276296561,src/rpc/blockchain.cpp
jonasschnelli,2019-04-17T15:22:32Z,Would eventually be better but not scope of this PR (following the current scheme).,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276298339,276298339,src/rest.cpp
promag,2019-04-18T18:57:20Z,"> Would it be efficient to memoize `feelimits.size() - 1` ? (if the compiler doesn't optimize it automatically, my C++ is rusty)\n\nIt shouldn't impact performance either way.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276792640,276792640,src/rpc/blockchain.cpp
luke-jr,2019-04-18T21:07:29Z,Maybe move this directly into `getmempoolinfo`? Or another helper?,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276834438,276834438,src/rpc/blockchain.cpp
luke-jr,2019-04-18T21:08:42Z,Nit: braces or single line,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276834809,276834809,src/rpc/blockchain.cpp
jonasschnelli,2019-04-24T07:50:14Z,"I thought about another call, but extending `mempoolinfo` with an option for ""more data"" seems to be most allied with other calls where one can get more extended infos on option.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r277994666,277994666,src/rpc/blockchain.cpp
jonasschnelli,2019-04-24T07:54:44Z,Fixed,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r277996292,277996292,src/rpc/blockchain.cpp
luke-jr,2019-04-24T09:13:17Z,I mean just have the code outside this function. The RPC would then call both `MempoolInfoToJSON` and also `JSONMempoolInfoAddHistogram` (or whatever this code gets called),https://github.com/bitcoin/bitcoin/pull/15836#discussion_r278028394,278028394,src/rpc/blockchain.cpp
laanwj,2019-06-07T13:29:22Z,"Still voting against query parameters. With REST the general preference seems to be to turn parameters into URL segments, and query parameters tend to be avoided because they look ugly and are hard to remember.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r291592001,291592001,src/rest.cpp
promag,2019-06-07T13:44:21Z,"I don't think there's a ""standard"" here but with REST usually the URL path identifies a resource, a collection of resources, or an action - the verb is also relevant. But parameters are usually set in the URL query, order independent and can be optional. I also think this is more flexible, for instance, you could support `...?verbose=true` in all endpoints (just an example).",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r291598239,291598239,src/rest.cpp
promag,2019-07-17T10:22:07Z,Remove these files and maybe update .gitignore?,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304327165,304327165,Bitcoin-Qt.config
promag,2019-07-17T11:15:43Z,This must be before the above line (order is important) otherwise `rest_mempool_info_with_fee_histogram ` is never called.,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304346834,304346834,src/rest.cpp
luke-jr,2020-06-10T00:07:08Z,Should change this to use `ToString`,https://github.com/bitcoin/bitcoin/pull/15836#discussion_r437788703,437788703,src/rpc/blockchain.cpp
dergoegge,2020-11-22T15:40:40Z,"JSON objects are unordered collections, so maybe using an array for ""fee_histogram"" would make more sense since it would always stay sorted.",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r528352743,528352743,src/rpc/blockchain.cpp
kiminuo,2021-03-06T21:28:06Z,"> Correct me if I'm wrong but if `feelimits` is sorted then `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` is not necessary.\n\nYes, but then then for loop on line 1532 should be in reverse order: `for (int i = feelimits.size() - 1; i >= 0; i--) {`",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r588933214,588933214,src/rpc/blockchain.cpp
rebroad,2021-04-06T20:29:47Z,"what is sizes? I've noticed that when adding up all the sizes when the mempool is full, that the number doesn't stay fixed as I would have expected when the mempool is full - so it's not the number of bytes used in memory to store the tx - so, what is it?",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r608159325,608159325,src/rpc/blockchain.cpp
kiminuo,2021-04-07T13:58:32Z,"So the histogram is based on fee rates intervals. The histogram is modeled using three vectors:\n\n```cpp\n        std::vector<uint64_t> sizes(feelimits.size(), 0);\n        std::vector<uint64_t> count(feelimits.size(), 0);\n        std::vector<uint64_t> fees(feelimits.size(), 0);\n```\n\nwhere `sizes[0]` represents cumulative size of txs belonging to the first fee rate interval `[1, 2)`, ",https://github.com/bitcoin/bitcoin/pull/15836#discussion_r608680611,608680611,src/rpc/blockchain.cpp
