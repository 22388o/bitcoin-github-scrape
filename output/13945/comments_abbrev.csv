isghe,2018-08-12T00:06:54Z,"CI failed because of tabs instead o spaces, sorry I am not a python (which version?!) developer; going to solve",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412309451,412309451,
isghe,2018-08-12T01:03:05Z,"now CI it is failing because of:\n```\n0.04s$ test/lint/check-rpc-mappings.py .\nTraceback (most recent call last):\n  File ""test/lint/check-rpc-mappings.py"", line 158, in <module>\n    main()\n  File ""test/lint/check-rpc-mappings.py"", line 98, in main\n    cmds += process_commands(os.path.join(root, fname))\n  File ""test/lint/check-rpc-mappings.py"", line 58, in process_commands\n    asse",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412311352,412311352,
DrahtBot,2018-08-12T01:19:59Z,<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14121 (Index for BIP 157 block filters by jimpo)\n* #14053 (Add address-based index (attempt 4?) by marcinja)\n* #14035 (Utxoscriptindex by mgrychow)\n* #13932 (Additional utility RPCs for PSBT by achow101)\n* #13926 ([WIP] [Tools] bitcoin-wallet-tool by jnewbery)\n* #13836 (RPC: Ad,https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412311873,412311873,
laanwj,2018-08-12T11:40:15Z,"A drawback of this is that it centralizes knowledge of the command categories in the source code; right now, a module such as the wallet can register its own commands in its own category, without having to update a central file. This is a good form of decoupling.\n\nThis is not as bad for categories as it would be for, say, commands themselves, but still.",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412336993,412336993,
isghe,2018-08-12T17:07:33Z,"> A drawback of this is that it centralizes knowledge of the command categories in the source code; right now, a module such as the wallet can register its own commands in its own category, without having to update a central file. This is a good form of decoupling.\n> \n> This is not as bad for categories as it would be for, say, commands themselves, but still.\n\n@laanwj the target of this re",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412356961,412356961,
isghe,2018-08-12T18:45:34Z,"I am going to squash commits, let me know if everything is ok",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412363458,412363458,
isghe,2018-08-12T22:50:40Z,wip: please don't merge,https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412377330,412377330,
isghe,2018-08-13T01:01:30Z,"wip: waiting more suggestions, before new squash ",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412384662,412384662,
isghe,2018-08-13T01:10:15Z,"Now I don't understand why CI is failing. But I have to go to sleep\n\nEDIT: it was for missing `#include <cassert>` https://github.com/bitcoin/bitcoin/pull/13945/commits/c1418aa41c9df3e2fe7019146c2a2d4785e40eaf",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412385315,412385315,
isghe,2018-08-13T15:54:20Z,"I am going to squash commits.\nI think there is only one open point: the compile time constants in enum class RPCCategory, are lowercase instead of (should use to be) uppercase.\n\nThe point is that if, I’ll make those identifiers uppercase, I have to make them lowercase in same place; and I have these options:\n1. Hard coding lowercase in the source code, in the function `rpccategory::Label`;",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412567594,412567594,
isghe,2018-08-13T17:05:40Z,squashed,https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412591326,412591326,
ken2812221,2018-08-14T09:50:52Z,utACK 4eec7a1c3421acc9d31c4c0f93ca6ec376e0847a,https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-412817717,412817717,
ken2812221,2018-08-15T16:50:54Z,"Please cherry-pick your commits on master, not just merge master branch.",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-413260610,413260610,
isghe,2018-08-15T17:57:23Z,"> Please cherry-pick your commits on master, not just merge master branch.\n\ndone ",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-413281385,413281385,
l2a5b1,2018-08-19T20:44:38Z,"Thanks for the update @isghe!\n\nI am leaning towards NACK because it seems that what it is you want to lay the foundation for can also be achieved without `rpccategory`. \n\nPer your motivation:\n> I am doing this, in preparation to add attributes, likes visibility and state to CRPCCommand structure, to avoid using category names, for overridden informations like visibility or deprecation.\",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414154547,414154547,
isghe,2018-08-19T22:32:03Z,"Thanks for your attention @251Labs!\n\nFor simplicity, just speaking about `""hidden""` category and `visibility` property:\n\nWithout enum RPCCategory, how will I proceed to add the visible property?\nFirst I will add the property `visibility` field to the structure CRPCCommand, then \nI will search for the the string ""hidden"":\nin the last commit df660aa7717a6f4784e90535a13a95d82244565a on ",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414160706,414160706,
isghe,2018-08-20T22:48:50Z,"Hi @251Labs, thanks for your attention :-)\n\nLet's see the last 3 commits:\n1. `std::string category to RPCCategory category` 3a61034793287b1d23655d32fe55d14aba768a91\n2. `remove src/rpc/server.cpp*to_upper` d8e5619c9242943e2ae1cfba9c96230965d17c0b\n3. `class CRPCCommand to struct CRPCCommand` 7f997989bc63fe14ada94094751c8b4551a4178c\n\nMine considerations:\n* I think this PR should be cl",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414488587,414488587,
isghe,2018-08-21T20:38:25Z,"waiting for more reviews before squashing, thanks :-)",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414813948,414813948,
promag,2018-08-21T22:03:38Z,"The performance gain is not a that much beside the fact that it's not the main motivation.\n\n> I am doing this, in preparation to add attributes, likes `visibility` and `state` to `CRPCCommand` structure, to avoid using category names, for overridden informations like visibility or deprecation.\n\nLike @251Labs said, this change is not required for that.\n\nRegarding visibility and state, I",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414836820,414836820,
isghe,2018-08-21T23:45:48Z,"Hi @promag thanks for your review.\n\nI would say, the only place where I spoke about performance, were together with the adjective `irrelevant` in this PR: this PR should be related only on the organisation, of the informations, related to the actual `CRPCCommand::category`, and now (without this PR) is sparse and not measurable (it's a string…).\n\nThis PR, title starts  with `Refactoring` a",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414857671,414857671,
promag,2018-08-21T23:56:33Z,"> Without this PR; how Bitcoin will handle the next ""blockhain"" category? (take care about the typo).\n> Or, security reasons, how Bitcoin will handle a category (now it's just a string) sendtoaddress…?\n\nYou can write a test that asserts the possible categories.",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414859779,414859779,
promag,2018-08-21T23:58:32Z,"> Actually it's not easy to respond in deterministic way to the above question; maybe the only way, is to run ./bitcoin-cli help and parsing the results!\n\nAnd documentation. Or the above test.",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414860130,414860130,
isghe,2018-08-22T00:54:17Z,"@promag do you really think that adding a PR documentation similar to this, will help?\n```\nJoking-Bitcoin documentation:\njust for developer: please take care on writing the string field of `CRPCCommand::category`; take care about typos, and  [SQL, script, bash, awk , regex or others] injections.\nAlso take care that categories should be in space definition, we don't know how to determinate;",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-414869918,414869918,
isghe,2018-08-22T20:47:21Z,"Another consideration from another perspective: right now in branch master 271b379e636afa419c5208cb462c07090490266c searching for the hard coded string `""wallet""` we have `61 occurrences found`, and are all (we are lucky) related to CRPCCommand. So a good programming practice, I think should be to use a constant, instead of 61 hard coded strings, e.g.:\n```c++\nnamespace rpccommand\n{\n    con",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-415174196,415174196,
promag,2018-09-01T08:03:05Z,"> and substitute the 61 hard coded ""wallet"" with rpccommand::WALLET\n\n@isghe that's unrelated to this PR, and IMO this can be closed.",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-417841461,417841461,
laanwj,2018-09-01T08:31:58Z,"Sorry, there seems to be no agreement to do this, in which case we prefer not making a change to the code.\nClosing.",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-417842912,417842912,
isghe,2018-09-02T00:25:33Z,"Thanks for your reviews; I am happy because this PR, inspired https://github.com/bitcoin/bitcoin/pull/14020 , and I did learn new things on C++ programming (emplace and optional), and about test in python.\nBut I think that `Refactoring CRPCCommand with enum category` (this PR) should help (at compile time) security for Bitcoin.\nIf don't you see that, it's not my problem.\n",https://github.com/bitcoin/bitcoin/pull/13945#issuecomment-417896369,417896369,
promag,2018-08-12T00:07:05Z,Use `enum class`.,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209440088,209440088,src/rpc/server.h
promag,2018-08-12T00:07:20Z,Don't use tabs.,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209440092,209440092,src/rpc/server.h
domob1812,2018-08-12T09:31:12Z,This implementation means that the list here has to be in sync with the enum definition.  I think it would be much more robust and readable if you had here a big `switch` instead.,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209449104,209449104,src/rpc/server.cpp
domob1812,2018-08-12T09:32:17Z,"Also, if you use `enum class`, get rid of the `eRPCCategory_` prefix (since then it will be namespaced already).",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209449131,209449131,src/rpc/server.h
laanwj,2018-08-12T11:38:26Z,"Please don't add bitcoin-specific things (such as these categories) in `rpc/server.h`, the base RPC code is supposed to be independent of any specific use.",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209452048,209452048,src/rpc/server.h
isghe,2018-08-12T16:38:49Z,Done https://github.com/bitcoin/bitcoin/pull/13945/commits/cf190f57a078df1d37bd1822e3fa69ba0d9c90e6,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209461089,209461089,src/rpc/server.cpp
isghe,2018-08-12T16:40:02Z,Using `enum class` in https://github.com/bitcoin/bitcoin/pull/13945/commits/cf190f57a078df1d37bd1822e3fa69ba0d9c90e6,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209461123,209461123,src/rpc/server.h
ken2812221,2018-08-12T21:31:02Z,Remove this line,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468515,209468515,src/rpc/rpccategory.cpp
ken2812221,2018-08-12T21:32:55Z,remove extern,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468554,209468554,src/rpc/rpccategory.h
ken2812221,2018-08-12T21:33:42Z,Please remove extra space between `Label` and `(`. There are many other places need to do this.,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468570,209468570,src/rpc/rpccategory.cpp
ken2812221,2018-08-12T21:35:21Z,I don't think this is necessary,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468620,209468620,src/rpc/rpccategory.cpp
ken2812221,2018-08-12T21:40:04Z,I think we don't need to undef this,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468707,209468707,src/rpc/rpccategory.cpp
ken2812221,2018-08-12T21:40:47Z,`// Copyright (c) 2018 The Bitcoin Core developers`,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468725,209468725,src/rpc/rpccategory.h
ken2812221,2018-08-12T21:41:20Z,`// Copyright (c) 2018 The Bitcoin Core developers`,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468736,209468736,src/rpc/rpccategory.cpp
ken2812221,2018-08-12T21:41:58Z,nit: emplace_back,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468750,209468750,src/rpc/server.cpp
ken2812221,2018-08-12T21:42:36Z,Move this after ` #include <rpc/protocol.h>`,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209468778,209468778,src/rpc/server.h
MarcoFalke,2018-08-12T21:53:04Z,"I don't think you have to set this to `0`, also compile time constants should be `ALL_UPPER_CASE`.",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209469015,209469015,src/rpc/rpccategory.h
isghe,2018-08-12T22:24:27Z,"yes, it's not necessary infact, I am going to remove the zero initialization (it was necessary before, when I was using an array to transform enum to std::string);\n(done in https://github.com/bitcoin/bitcoin/pull/13945/commits/7659882f3e64582cb404d6c7ed129cbc06a0011c)\n\nAbout `ALL_UPPER_CASE` for compile time constants, `should be` doesn't mean `must` and as it is written in https://github.co",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209469714,209469714,src/rpc/rpccategory.h
isghe,2018-08-12T22:34:03Z,"doing in the next commit, thanks",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209469922,209469922,src/rpc/server.h
isghe,2018-08-13T00:39:10Z,do you mean the empty line (line 10) between `{` and `std::string`?,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209474116,209474116,src/rpc/rpccategory.cpp
isghe,2018-08-13T00:43:43Z,"hm… `extern` (ok I'm old style C developer) means `declared elsewhere`, infact the prototype is declared in `src/rpc/rpccategory.cpp`, and the definition also in `src/rpc/rpccategory.cpp`. What's wrong?",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209474367,209474367,src/rpc/rpccategory.h
isghe,2018-08-13T00:45:27Z,can you explain better? thanks ,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209474446,209474446,src/rpc/server.cpp
isghe,2018-08-13T00:49:17Z,"you will miss it, in case of unpredictable mistakes ;-)",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209474601,209474601,src/rpc/rpccategory.cpp
isghe,2018-08-13T00:51:45Z,"ok right now, it's not necessary, but i meant to define a local MACRO: define and use as you like, and undefined when you don't need anymore.",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209474694,209474694,src/rpc/rpccategory.cpp
ken2812221,2018-08-13T00:52:21Z,"No, I mean removing `std::string Label (const RPCCategory category);`, you already declare it at `rpccategory.h`",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209474722,209474722,src/rpc/rpccategory.cpp
ken2812221,2018-08-13T00:58:59Z,"Since you're touching this line, you can use c++11 emplace_back to have better performance: `vCommands.emplace_back(rpccategory::Label(entry.second->category) + entry.first, entry.second);`",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209475037,209475037,src/rpc/server.cpp
isghe,2018-08-13T01:05:23Z,done in https://github.com/bitcoin/bitcoin/pull/13945/commits/c9f15c12b24fbe39ea89a5b9d53f958923fc2ef4,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209475332,209475332,src/rpc/rpccategory.h
isghe,2018-08-13T01:05:36Z,done in https://github.com/bitcoin/bitcoin/pull/13945/commits/c9f15c12b24fbe39ea89a5b9d53f958923fc2ef4,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209475345,209475345,src/rpc/rpccategory.cpp
ken2812221,2018-08-13T01:10:05Z,"`extern` on function is redundant, it is already `extern` if you don't implement it.",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209475505,209475505,src/rpc/rpccategory.h
ken2812221,2018-08-13T01:13:52Z,You need to `#include <cassert>`,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209475725,209475725,src/rpc/rpccategory.cpp
isghe,2018-08-13T14:18:52Z,done https://github.com/bitcoin/bitcoin/pull/13945/commits/c1418aa41c9df3e2fe7019146c2a2d4785e40eaf,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209626232,209626232,src/rpc/rpccategory.cpp
isghe,2018-08-13T14:20:49Z,done https://github.com/bitcoin/bitcoin/pull/13945/commits/189bdaed7b8e3709bc1a104346b92c4e59d2fa16,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209626966,209626966,src/rpc/rpccategory.cpp
isghe,2018-08-13T14:21:04Z,"done https://github.com/bitcoin/bitcoin/pull/13945/commits/189bdaed7b8e3709bc1a104346b92c4e59d2fa16\n",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209627055,209627055,src/rpc/rpccategory.h
isghe,2018-08-13T14:21:55Z,done https://github.com/bitcoin/bitcoin/pull/13945/commits/477b083ad47f03d961c972e4861354106ea82fa6,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209627395,209627395,src/rpc/rpccategory.cpp
isghe,2018-08-13T14:22:46Z,done https://github.com/bitcoin/bitcoin/pull/13945/commits/c13fe258e8e311092e64563b43c10a3582a2f1d1,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209627717,209627717,src/rpc/server.cpp
isghe,2018-08-13T14:23:52Z,"done https://github.com/bitcoin/bitcoin/pull/13945/commits/7e5453d4e1a43edc11ff7e1e49c227868afc0ff0\n",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r209628146,209628146,src/rpc/server.h
isghe,2018-08-18T01:55:00Z,"This is the volta stone of this refactoring: avoiding a strange behavior in the semantics of category identifiers.\nE.g. the hidden property shouldn't  be in the name of its  category, but elsewhere; after this merge a new ones will come removing the `RPCCategory::hidden`, and \nwill introducing  the appropriate property/attribute.\n\nI suppose that in the future the above instruction will be ",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211061515,211061515,src/rpc/server.cpp
l2a5b1,2018-08-19T13:53:07Z,"I would prefer a more straightforward implementation like the one below if we include a category label function:\n\n```c++\nstd::string Label(const RPCCategory category)\n{\n    switch (category) {\n        case RPCCategory::blockchain: return ""Blockchain"";\n        case RPCCategory::control: return ""Control"";\n        case RPCCategory::generating: return ""Generating"";\n        case RPCCa",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211103907,211103907,src/rpc/rpccategory.cpp
isghe,2018-08-19T18:45:43Z,"Yes and now we can see how much is important this refactoring, before making any others modifications, in this area: try figuring out how would be hard now and prone to errors, without this refactoring, to capitalise the category's identifiers to remove that unwanted `boost::to_upper`.\nConsider that without this refactoring, there is no easy way, to know wich and how many categories we have in t",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211111677,211111677,src/rpc/rpccategory.cpp
l2a5b1,2018-08-20T10:11:36Z,"If we introduce a freestanding utility function that returns category labels, I think we should at least make it return the correct labels:\n\n```c++\n        case RPCCategory::BLOCKCHAIN: return ""Blockchain"";\n        case RPCCategory::CONTROL: return ""Control"";\n        case RPCCategory::GENERATING: return ""Generating"";\n        case RPCCategory::HIDDEN: return ""Hidden"";\n        case RPC",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211208914,211208914,src/rpc/rpccategory.cpp
l2a5b1,2018-08-20T10:11:54Z,nit: remove comment?,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211208971,211208971,src/rpc/rpccategory.cpp
l2a5b1,2018-08-20T10:12:11Z,To what extend are `RPCCategory` and `OptionsCategory` in `util.h` redundant?,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211209034,211209034,src/rpc/rpccategory.h
l2a5b1,2018-08-20T10:12:25Z,"If we introduce RPC category enumerations, I think we should also use them and not map their values back to labels.\n\nBy declaring `std::string category` as `RPCCategory category` and making `rpccategory::Label` return the correct labels you will be able to optimize this `if` statement:\n\n```c++\n                if (category != rpccategory::Label(pcmd->category))\n                {\n     ",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211209108,211209108,src/rpc/server.cpp
l2a5b1,2018-08-20T10:19:17Z,"nit: while we are here, maybe make `CRPCCommand` a struct and remove the `public` access modifier?",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211211013,211211013,src/rpc/server.h
isghe,2018-08-20T19:50:04Z,done in d8e5619c9242943e2ae1cfba9c96230965d17c0b,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211385952,211385952,src/rpc/rpccategory.cpp
isghe,2018-08-20T19:50:52Z,done in fa6d149eb264e8594eabbe1f6bd31b7ca5dd0a66,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211386164,211386164,src/rpc/rpccategory.cpp
isghe,2018-08-20T19:56:03Z,"done in two steps: the first in 3a61034793287b1d23655d32fe55d14aba768a91 and the second in d8e5619c9242943e2ae1cfba9c96230965d17c0b, because I consider the first a refactoring, and the second a fix. I had to handle the uninitialized state of `RPCCategory category` and I left the output exactly the same we had before of this refactoring (not adding a new empty line at the beginning)\n```\n$ ./src",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211387629,211387629,src/rpc/server.cpp
isghe,2018-08-20T20:06:09Z,"done in 7f997989bc63fe14ada94094751c8b4551a4178c, but consider that usually, old style C++ developer prefer `class public` to `struct` for portability (struct forward declarations were a  little bit tricky). In the same file `server.h` there are others `class public`",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211390457,211390457,src/rpc/server.h
isghe,2018-08-20T20:13:19Z,"In the way they are implemented and used, there seems to be no relationship between `RPCCategory` and` OptionsCategory`.",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211392472,211392472,src/rpc/rpccategory.h
l2a5b1,2018-08-20T23:14:48Z,Create enumerator `RPCCategory::NONE` and initialize category with that constant as a replacement for `uninitializedCategory`?,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211435800,211435800,src/rpc/server.cpp
l2a5b1,2018-08-20T23:16:28Z,nit: space between `::Label` and `(category)`,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211436094,211436094,src/rpc/server.cpp
isghe,2018-08-21T20:09:06Z,done,https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211742385,211742385,src/rpc/server.cpp
isghe,2018-08-21T20:17:29Z,"I solved using:\n```\nboost::optional<RPCCategory> category;\n```\nwithout adding `RPCCategory::NONE`; what do you think about using `boost::optional` in these situations? For what I know anyway `std::optional` will be available in C++17 without using `boost`.",https://github.com/bitcoin/bitcoin/pull/13945#discussion_r211744895,211744895,src/rpc/server.cpp
