[
  {
    "sha": "116419e58dddef8fe3ff9806a1d8ceebe64ae3e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTY0MTllNThkZGRlZjhmZTNmZjk4MDZhMWQ4Y2VlYmU2NGFlM2U2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-10T21:53:10Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-10T21:53:10Z"
      },
      "message": "Don't overwrite validation state with corruption check\n\nAcceptToMemoryPool has several classes of return false statements.\n- return state.Invalid or state.DoS directly itself\n- return false and set fMissingInputs (state is valid)\n- return false and state is set by failed CheckTransaction\n- return false and state is set by failed CheckInputs.\n\nThis commit patches the last case where the state variable was reused for additional calls to CheckInputs to identify witness stripping as cause of validation failure.  After this commit, it should be the case that if !fMissingInputs, state is always Invalid if AcceptToMemoryPool returns false.",
      "tree": {
        "sha": "9e20acef8fdad52ff5671eb80574756196840b35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e20acef8fdad52ff5671eb80574756196840b35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5754e0341b7c033d4caf99534aca47e9981bd7ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5754e0341b7c033d4caf99534aca47e9981bd7ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5754e0341b7c033d4caf99534aca47e9981bd7ed"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9c06a3d9401591c900f9187d802c179002d53e00",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/116419e58dddef8fe3ff9806a1d8ceebe64ae3e6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=116419e58dddef8fe3ff9806a1d8ceebe64ae3e6",
        "patch": "@@ -919,12 +919,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (!tx.HasWitness() && CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n-                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n+            CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n+            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n+                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n                 // Only the witness is missing, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }\n-            return false;\n+            return false; // state filled in by CheckInputs\n         }\n \n         // Check again against just the consensus-critical mandatory script"
      }
    ]
  }
]