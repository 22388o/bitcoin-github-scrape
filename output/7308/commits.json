[
  {
    "sha": "82a0ce09b45ab9c09ce4f516be5b9b413dcec470",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmEwY2UwOWI0NWFiOWMwOWNlNGY1MTZiZTViOWI0MTNkY2VjNDcw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-01-07T14:22:20Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-01-07T14:22:20Z"
      },
      "message": "Add race-condition debugging tool to mininode",
      "tree": {
        "sha": "a5729c6a5122f5a98852d1ff2f1f33de20cf15e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5729c6a5122f5a98852d1ff2f1f33de20cf15e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82a0ce09b45ab9c09ce4f516be5b9b413dcec470",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a0ce09b45ab9c09ce4f516be5b9b413dcec470",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82a0ce09b45ab9c09ce4f516be5b9b413dcec470",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a0ce09b45ab9c09ce4f516be5b9b413dcec470/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "605c17844ea32b6d237db6d83871164dc7d59dab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605c17844ea32b6d237db6d83871164dc7d59dab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/605c17844ea32b6d237db6d83871164dc7d59dab"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca65fb6e795a7e692115c854930227aac9099d4f",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a0ce09b45ab9c09ce4f516be5b9b413dcec470/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a0ce09b45ab9c09ce4f516be5b9b413dcec470/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=82a0ce09b45ab9c09ce4f516be5b9b413dcec470",
        "patch": "@@ -1004,6 +1004,18 @@ def __repr__(self):\n class NodeConnCB(object):\n     def __init__(self):\n         self.verack_received = False\n+        # deliver_sleep_time is helpful for debugging race conditions in p2p\n+        # tests; it causes message delivery to sleep for the specified time\n+        # before acquiring the global lock and delivering the next message.\n+        self.deliver_sleep_time = None\n+\n+    def set_deliver_sleep_time(self, value):\n+        with mininode_lock:\n+            self.deliver_sleep_time = value\n+\n+    def get_deliver_sleep_time(self):\n+        with mininode_lock:\n+            return self.deliver_sleep_time\n \n     # Spin until verack message is received from the node.\n     # Tests may want to use this as a signal that the test can begin.\n@@ -1017,6 +1029,9 @@ def wait_for_verack(self):\n             time.sleep(0.05)\n \n     def deliver(self, conn, message):\n+        deliver_sleep = self.get_deliver_sleep_time()\n+        if deliver_sleep is not None:\n+            time.sleep(deliver_sleep)\n         with mininode_lock:\n             try:\n                 getattr(self, 'on_' + message.command)(conn, message)"
      }
    ]
  },
  {
    "sha": "168915e6dec88b31793d4ee4b60b94d4149de36c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjg5MTVlNmRlYzg4YjMxNzkzZDRlZTRiNjBiOTRkNDE0OWRlMzZj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-01-07T14:23:05Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-01-07T14:23:05Z"
      },
      "message": "Eliminate race condition in sendheaders.py test\n\nClear the last block announcement before mining new blocks.",
      "tree": {
        "sha": "d6a8d4ab5883156102f9b72cffda789c5b2b129d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6a8d4ab5883156102f9b72cffda789c5b2b129d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168915e6dec88b31793d4ee4b60b94d4149de36c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168915e6dec88b31793d4ee4b60b94d4149de36c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168915e6dec88b31793d4ee4b60b94d4149de36c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168915e6dec88b31793d4ee4b60b94d4149de36c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82a0ce09b45ab9c09ce4f516be5b9b413dcec470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a0ce09b45ab9c09ce4f516be5b9b413dcec470",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82a0ce09b45ab9c09ce4f516be5b9b413dcec470"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7572bc277619f635c59c229a9d4106551bbec889",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168915e6dec88b31793d4ee4b60b94d4149de36c/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168915e6dec88b31793d4ee4b60b94d4149de36c/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=168915e6dec88b31793d4ee4b60b94d4149de36c",
        "patch": "@@ -220,18 +220,20 @@ def setup_network(self):\n \n     # mine count blocks and return the new tip\n     def mine_blocks(self, count):\n+        # Clear out last block announcement from each p2p listener\n+        [ x.clear_last_announcement() for x in self.p2p_connections ]\n         self.nodes[0].generate(count)\n         return int(self.nodes[0].getbestblockhash(), 16)\n \n     # mine a reorg that invalidates length blocks (replacing them with\n     # length+1 blocks).\n-    # peers is the p2p nodes we're using; we clear their state after the\n+    # Note: we clear the state of our p2p connections after the\n     # to-be-reorged-out blocks are mined, so that we don't break later tests.\n     # return the list of block hashes newly mined\n-    def mine_reorg(self, length, peers):\n+    def mine_reorg(self, length):\n         self.nodes[0].generate(length) # make sure all invalidated blocks are node0's\n         sync_blocks(self.nodes, wait=0.1)\n-        [x.clear_last_announcement() for x in peers]\n+        [x.clear_last_announcement() for x in self.p2p_connections]\n \n         tip_height = self.nodes[1].getblockcount()\n         hash_to_invalidate = self.nodes[1].getblockhash(tip_height-(length-1))\n@@ -245,6 +247,8 @@ def run_test(self):\n         inv_node = InvNode()\n         test_node = TestNode()\n \n+        self.p2p_connections = [inv_node, test_node]\n+\n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], inv_node))\n         # Set nServices to 0 for test_node, so no block download will occur outside of\n@@ -303,7 +307,6 @@ def run_test(self):\n         prev_tip = int(self.nodes[0].getbestblockhash(), 16)\n         test_node.get_headers(locator=[prev_tip], hashstop=0L)\n         test_node.sync_with_ping()\n-        test_node.clear_last_announcement() # Clear out empty headers response\n \n         # Now that we've synced headers, headers announcements should work\n         tip = self.mine_blocks(1)\n@@ -352,8 +355,6 @@ def run_test(self):\n                 # broadcast it)\n                 assert_equal(inv_node.last_inv, None)\n                 assert_equal(inv_node.last_headers, None)\n-                inv_node.clear_last_announcement()\n-                test_node.clear_last_announcement()\n                 tip = self.mine_blocks(1)\n                 assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n                 assert_equal(test_node.check_last_announcement(headers=[tip]), True)\n@@ -368,15 +369,15 @@ def run_test(self):\n         # getheaders or inv from peer.\n         for j in xrange(2):\n             # First try mining a reorg that can propagate with header announcement\n-            new_block_hashes = self.mine_reorg(length=7, peers=[test_node, inv_node])\n+            new_block_hashes = self.mine_reorg(length=7)\n             tip = new_block_hashes[-1]\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n             assert_equal(test_node.check_last_announcement(headers=new_block_hashes), True)\n \n             block_time += 8 \n \n             # Mine a too-large reorg, which should be announced with a single inv\n-            new_block_hashes = self.mine_reorg(length=8, peers=[test_node, inv_node])\n+            new_block_hashes = self.mine_reorg(length=8)\n             tip = new_block_hashes[-1]\n             assert_equal(inv_node.check_last_announcement(inv=[tip]), True)\n             assert_equal(test_node.check_last_announcement(inv=[tip]), True)\n@@ -407,7 +408,6 @@ def run_test(self):\n                     test_node.get_headers(locator=[fork_point], hashstop=new_block_hashes[1])\n                     test_node.get_data([tip])\n                     test_node.wait_for_block(tip)\n-                    test_node.clear_last_announcement()\n                 elif i == 2:\n                     test_node.get_data([tip])\n                     test_node.wait_for_block(tip)"
      }
    ]
  }
]