[
  {
    "sha": "f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMThiMmMxZGQzNTZiODdlMWJlNDEwZTdiNTI2YjhmZTgxZTVmYTky",
    "commit": {
      "author": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-02T19:48:01Z"
      },
      "committer": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-02T19:48:01Z"
      },
      "message": "Add from_me and bip125-replaceable to listunspent and gettransaction\n\n* Added ```from_me``` to ```listunspent``` and ```gettransaction```. This field indicates whether the source of the transaction was an address on the current node\n* Added ```source``` query filter to ```listunspent```. Using this filter a user can list transactions from all sources (all), only from the current node (from_me) or from external sources (external)\n* Added ```bip125-replaceable``` to ```listunspent```. This field indicates whether the transactions was marked as bip125-replaceable",
      "tree": {
        "sha": "41be1485168891254d280eaa2e27aea8c8f0b136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41be1485168891254d280eaa2e27aea8c8f0b136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/comments",
    "author": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "243c9bb79a3ce81532d6ec884012728669aa40b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/243c9bb79a3ce81532d6ec884012728669aa40b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/243c9bb79a3ce81532d6ec884012728669aa40b3"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 94,
      "deletions": 22
    },
    "files": [
      {
        "sha": "fbeff447946f78b6fbb1b1f17f4a583536d03f97",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "patch": "@@ -18,9 +18,9 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n     CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n-\n+    bool fromMe = wtx->fFromMe == 1;\n     int nAge = 6 * 24;\n-    COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, fromMe, true /* safe */);\n     vCoins.push_back(output);\n }\n "
      },
      {
        "sha": "fb9858364f594f0040326cfcd137e291e17698a9",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "patch": "@@ -582,7 +582,8 @@ void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vect\n         if (it == wallet->mapWallet.end()) continue;\n         int nDepth = it->second.GetDepthInMainChain();\n         if (nDepth < 0) continue;\n-        COutput out(&it->second, outpoint.n, nDepth, true /* spendable */, true /* solvable */, true /* safe */);\n+        bool fFromMe = it->second.fFromMe == 1;        \n+        COutput out(&it->second, outpoint.n, nDepth, true /* spendable */, true /* solvable */, fFromMe, true /* safe */);\n         vOutputs.push_back(out);\n     }\n }"
      },
      {
        "sha": "6a5247cd95eb970cdcd97111ad61510f8ef1f546",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 11,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "patch": "@@ -85,6 +85,20 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n+std::string GetRBFStatusString(const int confirms, const CTransaction &tx, CTxMemPool &pool)\n+{\n+    std::string rbfStatus = \"no\";\n+    if (confirms <= 0) {\n+        LOCK(mempool.cs);\n+        RBFTransactionState rbfState = IsRBFOptIn(tx, pool);\n+        if (rbfState == RBFTransactionState::UNKNOWN)\n+            rbfStatus = \"unknown\";\n+        else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)\n+            rbfStatus = \"yes\";\n+    }\n+    return rbfStatus;\n+}\n+\n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n@@ -109,16 +123,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n-    std::string rbfStatus = \"no\";\n-    if (confirms <= 0) {\n-        LOCK(mempool.cs);\n-        RBFTransactionState rbfState = IsRBFOptIn(*wtx.tx, mempool);\n-        if (rbfState == RBFTransactionState::UNKNOWN)\n-            rbfStatus = \"unknown\";\n-        else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)\n-            rbfStatus = \"yes\";\n-    }\n-    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n+    entry.pushKV(\"bip125-replaceable\", GetRBFStatusString(confirms, *wtx.tx, mempool));\n \n     for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n         entry.pushKV(item.first, item.second);\n@@ -2139,6 +2144,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id.\\n\"\n             \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n+            \"  \\\"from_me\\\" : \\\"yes|no\\\",  (string) Whether this transaction was sent from wallet on this node\\n\"\n             \"  \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n             \"                                                   may be unknown for unconfirmed transactions not in the mempool\\n\"\n             \"  \\\"details\\\" : [\\n\"\n@@ -2192,12 +2198,14 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n+    bool fFromMe = wtx.IsFromMe(ISMINE_SPENDABLE); // Ignoring include_watchonly for transaction source\n \n     entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n     if (wtx.IsFromMe(filter))\n         entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n     WalletTxToJSON(wtx, entry);\n+    entry.pushKV(\"from_me\", fFromMe? \"yes\" : \"no\");\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n@@ -2894,6 +2902,20 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n     return result;\n }\n \n+bool TransactionSourceFromString(const std::string& source_string, TransactionSource& transaction_source) {\n+    static const std::map<std::string, TransactionSource> sources = {\n+        {\"all\", TransactionSource::ALL},\n+        {\"from_me\", TransactionSource::FROM_ME},\n+        {\"external\", TransactionSource::EXTERNAL},\n+    };\n+    auto source = sources.find(source_string);\n+\n+    if (source == sources.end()) return false;\n+\n+    transaction_source = source->second;\n+    return true;\n+}\n+\n UniValue listunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -2923,6 +2945,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"      \\\"maximumAmount\\\"    (numeric or string, default=unlimited) Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"maximumCount\\\"     (numeric or string, default=unlimited) Maximum number of UTXOs\\n\"\n             \"      \\\"minimumSumAmount\\\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"      \\\"source\\\"           (string, default=\\\"all\\\") Output source, must be one of:\\n\"\n+            \"           \\\"all\\\"\"\n+            \"           \\\"from_me\\\"\"\n+            \"           \\\"external\\\"\"\n             \"    }\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n@@ -2938,6 +2964,8 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n+            \"    \\\"from_me\\\" : xxx,          (bool) Whether output was created by wallet on this node\\n\"\n+            \"    \\\"bip125-replaceable\\\": xxx,   (string) Whether transaction of this output is marked as BIP125 replaceable (yes|no|unknown)\\n\"\n             \"    \\\"safe\\\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n             \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n             \"                              and are not eligible for spending by fundrawtransaction and sendtoaddress.\\n\"\n@@ -2993,6 +3021,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n     CAmount nMaximumAmount = MAX_MONEY;\n     CAmount nMinimumSumAmount = MAX_MONEY;\n     uint64_t nMaximumCount = 0;\n+    TransactionSource source = TransactionSource::ALL;\n \n     if (!request.params[4].isNull()) {\n         const UniValue& options = request.params[4].get_obj();\n@@ -3008,6 +3037,12 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n         if (options.exists(\"maximumCount\"))\n             nMaximumCount = options[\"maximumCount\"].get_int64();\n+\n+        if (options.exists(\"source\")) {\n+            if (!TransactionSourceFromString(options[\"source\"].get_str(), source)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid source parameter\");\n+            }\n+        }\n     }\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -3018,7 +3053,8 @@ UniValue listunspent(const JSONRPCRequest& request)\n     std::vector<COutput> vecOutputs;\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    pwallet->AvailableCoins(vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth);\n+    pwallet->AvailableCoins(vecOutputs, !include_unsafe, nullptr, nMinimumAmount, nMaximumAmount,\n+        nMinimumSumAmount, nMaximumCount, nMinDepth, nMaxDepth, source);\n     for (const COutput& out : vecOutputs) {\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n@@ -3053,6 +3089,8 @@ UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"confirmations\", out.nDepth);\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n+        entry.pushKV(\"from_me\", out.fFromMe);\n+        entry.pushKV(\"bip125-replaceable\", GetRBFStatusString(out.nDepth, *out.tx->tx, mempool));\n         entry.pushKV(\"safe\", out.fSafe);\n         results.push_back(entry);\n     }"
      },
      {
        "sha": "9269898c411a5ad7a7585ceaeed26459b96539de",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "patch": "@@ -71,7 +71,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }\n-    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, fIsFromMe, true /* safe */);\n     vCoins.push_back(output);\n     testWallet.AddToWallet(*wtx.get());\n     wtxn.emplace_back(std::move(wtx));"
      },
      {
        "sha": "393e7c047f32a7286ddec1f497c38d694ffa44fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "patch": "@@ -2253,7 +2253,9 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n     return balance;\n }\n \n-void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n+void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl,\n+    const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount,\n+    const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth, const TransactionSource source) const\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(cs_wallet);\n@@ -2321,6 +2323,21 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n         if (nDepth < nMinDepth || nDepth > nMaxDepth)\n             continue;\n \n+        bool fFromMe = pcoin->fFromMe == 1;\n+        switch (source)\n+        {\n+        case TransactionSource::FROM_ME:\n+            if (!fFromMe)\n+                continue;\n+            break;\n+        case TransactionSource::EXTERNAL:\n+            if (fFromMe)\n+                continue;\n+            break;\n+        default:\n+            break;\n+        }\n+\n         for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n             if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n@@ -2342,8 +2359,8 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n \n             bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n             bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n-\n-            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+            \n+            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, fFromMe, safeTx));\n \n             // Checks the sum amount of all UTXO's.\n             if (nMinimumSumAmount != MAX_MONEY) {\n@@ -2399,7 +2416,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n                 CTxDestination address;\n                 if (ExtractDestination(FindNonChangeParentOutput(*it->second.tx, output.n).scriptPubKey, address)) {\n                     result[address].emplace_back(\n-                        &it->second, output.n, depth, true /* spendable */, true /* solvable */, false /* safe */);\n+                        &it->second, output.n, depth, true /* spendable */, true /* solvable */, true /*from me*/, false /* safe */);\n                 }\n             }\n         }"
      },
      {
        "sha": "f41ce03661262d3b6548c220a4929efe40b5aec9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 19,
        "deletions": 3,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "patch": "@@ -104,6 +104,12 @@ enum class OutputType {\n     BECH32,\n };\n \n+enum class TransactionSource {\n+    ALL,\n+    FROM_ME,\n+    EXTERNAL\n+};\n+\n //! Default for -addresstype\n constexpr OutputType DEFAULT_ADDRESS_TYPE{OutputType::P2SH_SEGWIT};\n \n@@ -504,9 +510,19 @@ class COutput\n      */\n     bool fSafe;\n \n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn)\n+    /** Whether this output belongs to a transaction that was sent from wallet in this node */\n+    bool fFromMe;\n+\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fFromMeIn, bool fSafeIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn; fSafe = fSafeIn; nInputBytes = -1;\n+        tx = txIn;\n+        i = iIn;\n+        nDepth = nDepthIn;\n+        fSpendable = fSpendableIn;\n+        fSolvable = fSolvableIn;\n+        fFromMe = fFromMeIn;\n+        fSafe = fSafeIn;\n+        nInputBytes = -1;\n         // If known and signable by the given wallet, compute nInputBytes\n         // Failure will keep this value -1\n         if (fSpendable && tx) {\n@@ -834,7 +850,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999, const TransactionSource source = TransactionSource::ALL) const;\n \n     /**\n      * Return list of available coins and locked coins grouped by non-change output address."
      }
    ]
  },
  {
    "sha": "087c59a546596b56d50fe67baf9dc84297c6ecdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODdjNTlhNTQ2NTk2YjU2ZDUwZmU2N2JhZjlkYzg0Mjk3YzZlY2Rk",
    "commit": {
      "author": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-02T19:50:31Z"
      },
      "committer": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-02T19:50:31Z"
      },
      "message": "Merge branch 'master' into 11613-rpc-transaction-expose-source",
      "tree": {
        "sha": "f6d3ab895037f638e41e6cfc6c22a25d52a1dedd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6d3ab895037f638e41e6cfc6c22a25d52a1dedd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/087c59a546596b56d50fe67baf9dc84297c6ecdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087c59a546596b56d50fe67baf9dc84297c6ecdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/087c59a546596b56d50fe67baf9dc84297c6ecdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087c59a546596b56d50fe67baf9dc84297c6ecdd/comments",
    "author": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f18b2c1dd356b87e1be410e7b526b8fe81e5fa92"
      },
      {
        "sha": "18815b4bfb20c9c1112e547217662529d81e4393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18815b4bfb20c9c1112e547217662529d81e4393",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18815b4bfb20c9c1112e547217662529d81e4393"
      }
    ],
    "stats": {
      "total": 1238,
      "additions": 848,
      "deletions": 390
    },
    "files": [
      {
        "sha": "9c666673cf25e7d43ba6fa8ace0276c9f7546612",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -46,7 +46,7 @@ def git_config_get(option, default=None):\n     '''\n     try:\n         return subprocess.check_output([GIT,'config','--get',option]).rstrip().decode('utf-8')\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         return default\n \n def retrieve_pr_info(repo,pull):\n@@ -193,23 +193,23 @@ def main():\n     devnull = open(os.devnull,'w')\n     try:\n         subprocess.check_call([GIT,'checkout','-q',branch])\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot check out branch %s.\" % (branch), file=stderr)\n         sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'fetch','-q',host_repo,'+refs/pull/'+pull+'/*:refs/heads/pull/'+pull+'/*',\n                                                           '+refs/heads/'+branch+':refs/heads/'+base_branch])\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot find pull request #%s or branch %s on %s.\" % (pull,branch,host_repo), file=stderr)\n         sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+head_branch], stdout=devnull, stderr=stdout)\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot find head of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n         sys.exit(3)\n     try:\n         subprocess.check_call([GIT,'log','-q','-1','refs/heads/'+merge_branch], stdout=devnull, stderr=stdout)\n-    except subprocess.CalledProcessError as e:\n+    except subprocess.CalledProcessError:\n         print(\"ERROR: Cannot find merge of pull request #%s on %s.\" % (pull,host_repo), file=stderr)\n         sys.exit(3)\n     subprocess.check_call([GIT,'checkout','-q',base_branch])\n@@ -230,7 +230,7 @@ def main():\n         message += '\\n\\nPull request description:\\n\\n  ' + body.replace('\\n', '\\n  ') + '\\n'\n         try:\n             subprocess.check_call([GIT,'merge','-q','--commit','--no-edit','--no-ff','-m',message.encode('utf-8'),head_branch])\n-        except subprocess.CalledProcessError as e:\n+        except subprocess.CalledProcessError:\n             print(\"ERROR: Cannot be merged cleanly.\",file=stderr)\n             subprocess.check_call([GIT,'merge','--abort'])\n             sys.exit(4)\n@@ -249,12 +249,12 @@ def main():\n         try:\n             first_sha512 = tree_sha512sum()\n             message += '\\n\\nTree-SHA512: ' + first_sha512\n-        except subprocess.CalledProcessError as e:\n+        except subprocess.CalledProcessError:\n             print(\"ERROR: Unable to compute tree hash\")\n             sys.exit(4)\n         try:\n             subprocess.check_call([GIT,'commit','--amend','-m',message.encode('utf-8')])\n-        except subprocess.CalledProcessError as e:\n+        except subprocess.CalledProcessError:\n             print(\"ERROR: Cannot update message.\", file=stderr)\n             sys.exit(4)\n \n@@ -299,7 +299,7 @@ def main():\n                 try:\n                     subprocess.check_call([GIT,'commit','-q','--gpg-sign','--amend','--no-edit'])\n                     break\n-                except subprocess.CalledProcessError as e:\n+                except subprocess.CalledProcessError:\n                     print(\"Error while signing, asking again.\",file=stderr)\n             elif reply == 'x':\n                 print(\"Not signing off on merge, exiting.\",file=stderr)"
      },
      {
        "sha": "6a0dd556bbd76343941aaf8953bf855c64cde817",
        "filename": "contrib/devtools/lint-include-guards.sh",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/lint-include-guards.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/lint-include-guards.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-include-guards.sh?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -0,0 +1,29 @@\n+#!/bin/bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check include guards.\n+\n+HEADER_ID_PREFIX=\"BITCOIN_\"\n+HEADER_ID_SUFFIX=\"_H\"\n+\n+REGEXP_EXCLUDE_FILES_WITH_PREFIX=\"src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\"\n+\n+EXIT_CODE=0\n+for HEADER_FILE in $(git ls-files -- \"*.h\" | grep -vE \"^${REGEXP_EXCLUDE_FILES_WITH_PREFIX}\")\n+do\n+    HEADER_ID_BASE=$(cut -f2- -d/ <<< \"${HEADER_FILE}\" | sed \"s/\\.h$//g\" | tr / _ | tr \"[:lower:]\" \"[:upper:]\")\n+    HEADER_ID=\"${HEADER_ID_PREFIX}${HEADER_ID_BASE}${HEADER_ID_SUFFIX}\"\n+    if [[ $(grep -cE \"^#(ifndef|define) ${HEADER_ID}\" \"${HEADER_FILE}\") != 2 ]]; then\n+        echo \"${HEADER_FILE} seems to be missing the expected include guard:\"\n+        echo \"  #ifndef ${HEADER_ID}\"\n+        echo \"  #define ${HEADER_ID}\"\n+        echo \"  ...\"\n+        echo \"  #endif // ${HEADER_ID}\"\n+        echo\n+        EXIT_CODE=1\n+    fi\n+done\n+exit ${EXIT_CODE}"
      },
      {
        "sha": "1469ce1640487434af75d2e7d0ed3de6a9cb23a3",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -52,6 +52,7 @@\n # F822 undefined name name in __all__\n # F823 local variable name \u2026 referenced before assignment\n # F831 duplicate argument name in function definition\n+# F841 local variable 'foo' is assigned to but never used\n # W292 no newline at end of file\n # W504 line break after binary operator\n # W601 .has_key() is deprecated, use \"in\"\n@@ -60,4 +61,4 @@\n # W604 backticks are deprecated, use \"repr()\"\n # W605 invalid escape sequence \"x\"\n \n-flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,W292,W504,W601,W602,W603,W604,W605 .\n+flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,F841,W292,W504,W601,W602,W603,W604,W605 ."
      },
      {
        "sha": "dd1a3ebdc4a959b512fbdbbe506014b9d41ae29f",
        "filename": "contrib/devtools/lint-tests.sh",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/lint-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/contrib/devtools/lint-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-tests.sh?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -0,0 +1,19 @@\n+#!/bin/bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check the test suite naming convention\n+\n+NAMING_INCONSISTENCIES=$(git grep -E '^BOOST_FIXTURE_TEST_SUITE\\(' -- \\\n+    \"src/test/**.cpp\" \"src/wallet/test/**.cpp\" | \\\n+    grep -vE '/(.*?)\\.cpp:BOOST_FIXTURE_TEST_SUITE\\(\\1, .*\\)$')\n+if [[ ${NAMING_INCONSISTENCIES} != \"\" ]]; then\n+    echo \"The test suite in file src/test/foo_tests.cpp should be named\"\n+    echo \"\\\"foo_tests\\\". Please make sure the following test suites follow\"\n+    echo \"that convention:\"\n+    echo\n+    echo \"${NAMING_INCONSISTENCIES}\"\n+    exit 1\n+fi"
      },
      {
        "sha": "540f2e8b8478eef82c9aa8999d858bdc9b2fd2bc",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -71,6 +71,8 @@ code.\n   - Constant names are all uppercase, and use `_` to separate words.\n   - Class names, function names and method names are UpperCamelCase\n     (PascalCase). Do not prefix class names with `C`.\n+  - Test suite naming convention: The Boost test suite in file\n+    `src/test/foo_tests.cpp` should be named `foo_tests`.\n \n - **Miscellaneous**\n   - `++i` is preferred over `i++`.\n@@ -604,6 +606,16 @@ namespace {\n     source file into account. This allows quoted includes to stand out more when\n     the location of the source file actually is relevant.\n \n+- Use include guards to avoid the problem of double inclusion. The header file\n+  `foo/bar.h` should use the include guard identifier `BITCOIN_FOO_BAR_H`, e.g.\n+\n+```c++\n+#ifndef BITCOIN_FOO_BAR_H\n+#define BITCOIN_FOO_BAR_H\n+...\n+#endif // BITCOIN_FOO_BAR_H\n+```\n+\n GUI\n -----\n "
      },
      {
        "sha": "2e2823e974ef81b92859c6c02a778c2f1916f4a7",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -9,6 +9,9 @@\n //\n // For more information, see BIP 173.\n \n+#ifndef BITCOIN_BECH32_H\n+#define BITCOIN_BECH32_H\n+\n #include <stdint.h>\n #include <string>\n #include <vector>\n@@ -23,3 +26,5 @@ std::string Encode(const std::string& hrp, const std::vector<uint8_t>& values);\n std::pair<std::string, std::vector<uint8_t>> Decode(const std::string& str);\n \n } // namespace bech32\n+\n+#endif // BITCOIN_BECH32_H"
      },
      {
        "sha": "73ea8b964752f8b3783f242939a37b5d4de5c525",
        "filename": "src/bench/perf.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/bench/perf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/bench/perf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -3,8 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n /** Functions for measurement of CPU cycles */\n-#ifndef H_PERF\n-#define H_PERF\n+#ifndef BITCOIN_BENCH_PERF_H\n+#define BITCOIN_BENCH_PERF_H\n \n #include <stdint.h>\n \n@@ -34,4 +34,4 @@ uint64_t perf_cpucycles(void);\n void perf_init(void);\n void perf_fini(void);\n \n-#endif // H_PERF\n+#endif // BITCOIN_BENCH_PERF_H"
      },
      {
        "sha": "3a0828b307f0eebbc8db041f08cc9a1d53429fd0",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_BLOCK_ENCODINGS_H\n-#define BITCOIN_BLOCK_ENCODINGS_H\n+#ifndef BITCOIN_BLOCKENCODINGS_H\n+#define BITCOIN_BLOCKENCODINGS_H\n \n #include <primitives/block.h>\n \n@@ -206,4 +206,4 @@ class PartiallyDownloadedBlock {\n     ReadStatus FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing);\n };\n \n-#endif\n+#endif // BITCOIN_BLOCKENCODINGS_H"
      },
      {
        "sha": "0afb73adb5c1b8caa07dd2dd2216f4a8203adc09",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_MERKLE\n-#define BITCOIN_MERKLE\n+#ifndef BITCOIN_CONSENSUS_MERKLE_H\n+#define BITCOIN_CONSENSUS_MERKLE_H\n \n #include <stdint.h>\n #include <vector>\n@@ -35,4 +35,4 @@ uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated = nullptr);\n  */\n std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position);\n \n-#endif\n+#endif // BITCOIN_CONSENSUS_MERKLE_H"
      },
      {
        "sha": "d75b5b31c82d70eb8e8e28587b720f60c0bec305",
        "filename": "src/key_io.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/key_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/key_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_KEYIO_H\n-#define BITCOIN_KEYIO_H\n+#ifndef BITCOIN_KEY_IO_H\n+#define BITCOIN_KEY_IO_H\n \n #include <chainparams.h>\n #include <key.h>\n@@ -26,4 +26,4 @@ CTxDestination DecodeDestination(const std::string& str);\n bool IsValidDestinationString(const std::string& str);\n bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n \n-#endif // BITCOIN_KEYIO_H\n+#endif // BITCOIN_KEY_IO_H"
      },
      {
        "sha": "afb4746def4c2e85b8c0c812d1322d031b596814",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Copyright (c) 2009-2017 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef BITCOIN_POLICYESTIMATOR_H\n-#define BITCOIN_POLICYESTIMATOR_H\n+#ifndef BITCOIN_POLICY_FEES_H\n+#define BITCOIN_POLICY_FEES_H\n \n #include <amount.h>\n #include <policy/feerate.h>\n@@ -294,4 +294,4 @@ class FeeFilterRounder\n     FastRandomContext insecure_rand;\n };\n \n-#endif /*BITCOIN_POLICYESTIMATOR_H */\n+#endif // BITCOIN_POLICY_FEES_H"
      },
      {
        "sha": "8e5a259f68ea9a45ee4ade5335cafa79cd7c1923",
        "filename": "src/qt/test/paymentrequestdata.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/qt/test/paymentrequestdata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/qt/test/paymentrequestdata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentrequestdata.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,6 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#ifndef BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H\n+#define BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H\n+\n //\n // Data for paymentservertests.cpp\n //\n@@ -458,3 +461,5 @@ iEBFUrBDJZU+UEezGwr7/zoECjo5ZY3PmtZcM2sILNjyweJF6XVzGqTxUw6pN6sW\\\n XR2T3Gy2LzRvhVA25QgGqpz0/juS2BtmNbsZPkN9gMMwKimgzc+PuCzmEKwPK9cQ\\\n YQ==\\\n \";\n+\n+#endif // BITCOIN_QT_TEST_PAYMENTREQUESTDATA_H"
      },
      {
        "sha": "7b3b38f62e3914c1d2b7c13c3dc7229e9f560b10",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_QT_TEST_RPC_NESTED_TESTS_H\n-#define BITCOIN_QT_TEST_RPC_NESTED_TESTS_H\n+#ifndef BITCOIN_QT_TEST_RPCNESTEDTESTS_H\n+#define BITCOIN_QT_TEST_RPCNESTEDTESTS_H\n \n #include <QObject>\n #include <QTest>\n@@ -19,4 +19,4 @@ class RPCNestedTests : public QObject\n     void rpcNestedTests();\n };\n \n-#endif // BITCOIN_QT_TEST_RPC_NESTED_TESTS_H\n+#endif // BITCOIN_QT_TEST_RPCNESTEDTESTS_H"
      },
      {
        "sha": "01f932dbb4bb2a136ce75248a2ec8101d726a1ed",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -103,6 +103,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n     { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n+    { \"testmempoolaccept\", 0, \"rawtxs\" },\n+    { \"testmempoolaccept\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },\n     { \"fundrawtransaction\", 2, \"iswitness\" },"
      },
      {
        "sha": "e09e1dedf37ac9ee69617a7d01ec9a8e52b4661b",
        "filename": "src/rpc/client.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/client.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/client.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_RPCCLIENT_H\n-#define BITCOIN_RPCCLIENT_H\n+#ifndef BITCOIN_RPC_CLIENT_H\n+#define BITCOIN_RPC_CLIENT_H\n \n #include <univalue.h>\n \n@@ -19,4 +19,4 @@ UniValue RPCConvertNamedValues(const std::string& strMethod, const std::vector<s\n  */\n UniValue ParseNonRFCJSONValue(const std::string& strVal);\n \n-#endif // BITCOIN_RPCCLIENT_H\n+#endif // BITCOIN_RPC_CLIENT_H"
      },
      {
        "sha": "4a265735d25089176aad6b5885733331322b86bd",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_RPCPROTOCOL_H\n-#define BITCOIN_RPCPROTOCOL_H\n+#ifndef BITCOIN_RPC_PROTOCOL_H\n+#define BITCOIN_RPC_PROTOCOL_H\n \n #include <fs.h>\n \n@@ -104,4 +104,4 @@ void DeleteAuthCookie();\n /** Parse JSON-RPC batch reply into a vector */\n std::vector<UniValue> JSONRPCProcessBatchReply(const UniValue &in, size_t num);\n \n-#endif // BITCOIN_RPCPROTOCOL_H\n+#endif // BITCOIN_RPC_PROTOCOL_H"
      },
      {
        "sha": "9d7aa588947a9c1cbd1ae4cfe40e8df30638548d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -1134,6 +1134,87 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n     return hashTx.GetHex();\n }\n \n+UniValue testmempoolaccept(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            // clang-format off\n+            \"testmempoolaccept [\\\"rawtxs\\\"] ( allowhighfees )\\n\"\n+            \"\\nReturns if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+            \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n+            \"\\nSee sendrawtransaction call.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. [\\\"rawtxs\\\"]       (array, required) An array of hex strings of raw transactions.\\n\"\n+            \"                                        Length must be one for now.\\n\"\n+            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n+            \"                            Length is exactly one for now.\\n\"\n+            \" {\\n\"\n+            \"  \\\"txid\\\"           (string) The transaction hash in hex\\n\"\n+            \"  \\\"allowed\\\"        (boolean) If the mempool allows this tx to be inserted\\n\"\n+            \"  \\\"reject-reason\\\"  (string) Rejection string (only present when 'allowed' is false)\\n\"\n+            \" }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nCreate a transaction\\n\"\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+            \"Sign the transaction, and get back the hex\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+            \"\\nTest acceptance of the transaction (signed hex)\\n\"\n+            + HelpExampleCli(\"testmempoolaccept\", \"\\\"signedhex\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n+            // clang-format on\n+            );\n+    }\n+\n+    ObserveSafeMode();\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VBOOL});\n+    if (request.params[0].get_array().size() != 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    }\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+    const uint256& tx_hash = tx->GetHash();\n+\n+    CAmount max_raw_tx_fee = ::maxTxFee;\n+    if (!request.params[1].isNull() && request.params[1].get_bool()) {\n+        max_raw_tx_fee = 0;\n+    }\n+\n+    UniValue result(UniValue::VARR);\n+    UniValue result_0(UniValue::VOBJ);\n+    result_0.pushKV(\"txid\", tx_hash.GetHex());\n+\n+    CValidationState state;\n+    bool missing_inputs;\n+    bool test_accept_res;\n+    {\n+        LOCK(cs_main);\n+        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx), &missing_inputs,\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accpet */ true);\n+    }\n+    result_0.pushKV(\"allowed\", test_accept_res);\n+    if (!test_accept_res) {\n+        if (state.IsInvalid()) {\n+            result_0.pushKV(\"reject-reason\", strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+        } else if (missing_inputs) {\n+            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        } else {\n+            result_0.pushKV(\"reject-reason\", state.GetRejectReason());\n+        }\n+    }\n+\n+    result.push_back(std::move(result_0));\n+    return result;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n   //  --------------------- ------------------------        -----------------------     ----------\n@@ -1145,6 +1226,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n     { \"rawtransactions\",    \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n     { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n+    { \"rawtransactions\",    \"testmempoolaccept\",            &testmempoolaccept,         {\"rawtxs\",\"allowhighfees\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "b68974068194b33bf2414e34c4492cbd3e678238",
        "filename": "src/rpc/register.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/register.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/register.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/register.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_RPCREGISTER_H\n-#define BITCOIN_RPCREGISTER_H\n+#ifndef BITCOIN_RPC_REGISTER_H\n+#define BITCOIN_RPC_REGISTER_H\n \n /** These are in one header file to avoid creating tons of single-function\n  * headers for everything under src/rpc/ */\n@@ -29,4 +29,4 @@ static inline void RegisterAllCoreRPCCommands(CRPCTable &t)\n     RegisterRawTransactionRPCCommands(t);\n }\n \n-#endif\n+#endif // BITCOIN_RPC_REGISTER_H"
      },
      {
        "sha": "373914885c17ef78daaff5f078288200e86aeab6",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_RPCSERVER_H\n-#define BITCOIN_RPCSERVER_H\n+#ifndef BITCOIN_RPC_SERVER_H\n+#define BITCOIN_RPC_SERVER_H\n \n #include <amount.h>\n #include <rpc/protocol.h>\n@@ -206,4 +206,4 @@ std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);\n // Retrieves any serialization flags requested in command line argument\n int RPCSerializationFlags();\n \n-#endif // BITCOIN_RPCSERVER_H\n+#endif // BITCOIN_RPC_SERVER_H"
      },
      {
        "sha": "5973808fa58fe42c6edb339f28a52018e6dba8b0",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_BITCOINCONSENSUS_H\n-#define BITCOIN_BITCOINCONSENSUS_H\n+#ifndef BITCOIN_SCRIPT_BITCOINCONSENSUS_H\n+#define BITCOIN_SCRIPT_BITCOINCONSENSUS_H\n \n #include <stdint.h>\n \n@@ -80,4 +80,4 @@ EXPORT_SYMBOL unsigned int bitcoinconsensus_version();\n \n #undef EXPORT_SYMBOL\n \n-#endif // BITCOIN_BITCOINCONSENSUS_H\n+#endif // BITCOIN_SCRIPT_BITCOINCONSENSUS_H"
      },
      {
        "sha": "32b408838c01488711d526b4b71f29c95789cf6e",
        "filename": "src/test/blockchain_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/test/blockchain_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/test/blockchain_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockchain_tests.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -54,7 +54,7 @@ void TestDifficulty(uint32_t nbits, double expected_difficulty)\n     RejectDifficultyMismatch(difficulty, expected_difficulty);\n }\n \n-BOOST_FIXTURE_TEST_SUITE(blockchain_difficulty_tests, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(blockchain_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(get_difficulty_for_very_low_target)\n {"
      },
      {
        "sha": "fe6f10d845b7d3a3e95cb33dc08bd9b39b30e398",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -13,7 +13,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(PrevectorTests, TestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(prevector_tests, TestingSetup)\n \n template<unsigned int N, typename T>\n class prevector_tester {"
      },
      {
        "sha": "d03429ca818734e06c4316ec769f188345c57148",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -447,7 +447,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n // Also assumes that if an entry is in setDescendants already, then all\n // in-mempool descendants of it are already in setDescendants as well, so that we\n // can save time by not iterating over those entries.\n-void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants)\n+void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const\n {\n     setEntries stage;\n     if (setDescendants.count(entryit) == 0) {"
      },
      {
        "sha": "a1cde6f77920b3806657a03eb8307248c348da41",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -600,7 +600,7 @@ class CTxMemPool\n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything\n      *  already in it.  */\n-    void CalculateDescendants(txiter it, setEntries &setDescendants);\n+    void CalculateDescendants(txiter it, setEntries& setDescendants) const;\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions."
      },
      {
        "sha": "df8729e3823407af1151ea2048875a8ad1a31359",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -543,7 +543,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -935,6 +935,11 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             }\n         }\n \n+        if (test_accept) {\n+            // Tx was accepted, but not added\n+            return true;\n+        }\n+\n         // Remove conflicting transactions from the mempool\n         for (const CTxMemPool::txiter it : allConflicting)\n         {\n@@ -974,10 +979,10 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache);\n+    bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n     if (!res) {\n         for (const COutPoint& hashTx : coins_to_uncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -990,10 +995,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n }\n \n /**\n@@ -4640,7 +4645,8 @@ bool LoadMempool(void)\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */);\n+                                           nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n+                                           false /* test_accept */);\n                 if (state.IsValid()) {\n                     ++count;\n                 } else {"
      },
      {
        "sha": "95c31bf0fc65e54977a7c487001a0684cb369802",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -308,7 +308,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "8962a65057dcab89af3dbd7da99078c1a0c71134",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_CONSENSUS_VERSIONBITS\n-#define BITCOIN_CONSENSUS_VERSIONBITS\n+#ifndef BITCOIN_VERSIONBITS_H\n+#define BITCOIN_VERSIONBITS_H\n \n #include <chain.h>\n #include <map>\n@@ -77,4 +77,4 @@ BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-#endif\n+#endif // BITCOIN_VERSIONBITS_H"
      },
      {
        "sha": "2b185879c6ce277e70b4d4a125d2b77a5a7a0b59",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_COINSELECTION_H\n-#define BITCOIN_COINSELECTION_H\n+#ifndef BITCOIN_WALLET_COINSELECTION_H\n+#define BITCOIN_WALLET_COINSELECTION_H\n \n #include <amount.h>\n #include <primitives/transaction.h>\n@@ -51,4 +51,4 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n \n // Original coin selection algorithm as a fallback\n bool KnapsackSolver(const CAmount& nTargetValue, std::vector<CInputCoin>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n-#endif // BITCOIN_COINSELECTION_H\n+#endif // BITCOIN_WALLET_COINSELECTION_H"
      },
      {
        "sha": "fdeb4cfee088f14960eda3b54211b83d7ee0e5a1",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -67,15 +67,15 @@ class CMasterKey\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n \n-namespace wallet_crypto\n+namespace crypto_tests\n {\n     class TestCrypter;\n }\n \n /** Encryption/decryption context with key information */\n class CCrypter\n {\n-friend class wallet_crypto::TestCrypter; // for test access to chKey/chIV\n+friend class crypto_tests::TestCrypter; // for test access to chKey/chIV\n private:\n     std::vector<unsigned char, secure_allocator<unsigned char>> vchKey;\n     std::vector<unsigned char, secure_allocator<unsigned char>> vchIV;"
      },
      {
        "sha": "9146f38b7a8a99f0d430167fd53899c8d3f91084",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -14,7 +14,7 @@\n #include <boost/test/unit_test.hpp>\n #include <random>\n \n-BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(coinselector_tests, WalletTestingSetup)\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n #define RUN_TESTS 100"
      },
      {
        "sha": "d8c0cdf0f98c0f9987d1bd642a58882d20d284bc",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(wallet_crypto, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(crypto_tests, BasicTestingSetup)\n \n class TestCrypter\n {"
      },
      {
        "sha": "23575391c4972cd32d3f359794ecb88396496c0b",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_WALLET_TEST_FIXTURE_H\n-#define BITCOIN_WALLET_TEST_FIXTURE_H\n+#ifndef BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H\n+#define BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H\n \n #include <test/test_bitcoin.h>\n \n@@ -18,5 +18,4 @@ struct WalletTestingSetup: public TestingSetup {\n     CWallet m_wallet;\n };\n \n-#endif\n-\n+#endif // BITCOIN_WALLET_TEST_WALLET_TEST_FIXTURE_H"
      },
      {
        "sha": "f12acacd009b0bd7a132d748f8b18bfb5d55ade5",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_WALLET_UTIL_H\n-#define BITCOIN_WALLET_UTIL_H\n+#ifndef BITCOIN_WALLET_WALLETUTIL_H\n+#define BITCOIN_WALLET_WALLETUTIL_H\n \n #include <chainparamsbase.h>\n #include <util.h>\n \n //! Get the path of the wallet directory.\n fs::path GetWalletDir();\n \n-#endif // BITCOIN_WALLET_UTIL_H\n+#endif // BITCOIN_WALLET_WALLETUTIL_H"
      },
      {
        "sha": "a7b52685dd8972dec91e8d47074eec4be4351035",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef WALLETINITINTERFACE_H\n-#define WALLETINITINTERFACE_H\n+#ifndef BITCOIN_WALLETINITINTERFACE_H\n+#define BITCOIN_WALLETINITINTERFACE_H\n \n #include <string>\n \n@@ -48,4 +48,4 @@ class DummyWalletInit : public WalletInitInterface {\n     void Close() override {}\n };\n \n-#endif // WALLETINITINTERFACE_H\n+#endif // BITCOIN_WALLETINITINTERFACE_H"
      },
      {
        "sha": "37d60aad61f3ccad68400de3e8ea79b525b4f774",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 263,
        "deletions": 303,
        "changes": 566,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -42,98 +42,131 @@\n bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n bip112tx_special - test negative argument to OP_CSV\n \"\"\"\n-\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, network_thread_start\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import *\n+from decimal import Decimal\n+from itertools import product\n from io import BytesIO\n import time\n \n-base_relative_locktime = 10\n-seq_disable_flag = 1<<31\n-seq_random_high_bit = 1<<25\n-seq_type_flag = 1<<22\n-seq_random_low_bit = 1<<18\n-\n-# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n-# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n-relative_locktimes = []\n-for b31 in range(2):\n-    b25times = []\n-    for b25 in range(2):\n-        b22times = []\n-        for b22 in range(2):\n-            b18times = []\n-            for b18 in range(2):\n-                rlt = base_relative_locktime\n-                if (b31):\n-                    rlt = rlt | seq_disable_flag\n-                if (b25):\n-                    rlt = rlt | seq_random_high_bit\n-                if (b22):\n-                    rlt = rlt | seq_type_flag\n-                if (b18):\n-                    rlt = rlt | seq_random_low_bit\n-                b18times.append(rlt)\n-            b22times.append(b18times)\n-        b25times.append(b22times)\n-    relative_locktimes.append(b25times)\n-\n-def all_rlt_txs(txarray):\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.messages import ToHex, CTransaction\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.script import (\n+    CScript,\n+    OP_CHECKSEQUENCEVERIFY,\n+    OP_DROP,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    get_bip9_status,\n+    hex_str_to_bytes,\n+)\n+\n+BASE_RELATIVE_LOCKTIME = 10\n+SEQ_DISABLE_FLAG = 1 << 31\n+SEQ_RANDOM_HIGH_BIT = 1 << 25\n+SEQ_TYPE_FLAG = 1 << 22\n+SEQ_RANDOM_LOW_BIT = 1 << 18\n+\n+def relative_locktime(sdf, srhb, stf, srlb):\n+    \"\"\"Returns a locktime with certain bits set.\"\"\"\n+\n+    locktime = BASE_RELATIVE_LOCKTIME\n+    if sdf:\n+        locktime |= SEQ_DISABLE_FLAG\n+    if srhb:\n+        locktime |= SEQ_RANDOM_HIGH_BIT\n+    if stf:\n+        locktime |= SEQ_TYPE_FLAG\n+    if srlb:\n+        locktime |= SEQ_RANDOM_LOW_BIT\n+    return locktime\n+\n+def all_rlt_txs(txs):\n+    return [tx['tx'] for tx in txs]\n+\n+def create_transaction(node, txid, to_address, amount):\n+    inputs = [{\"txid\": txid, \"vout\": 0}]\n+    outputs = {to_address: amount}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(rawtx))\n+    tx.deserialize(f)\n+    return tx\n+\n+def sign_transaction(node, unsignedtx):\n+    rawtx = ToHex(unsignedtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n+    tx = CTransaction()\n+    f = BytesIO(hex_str_to_bytes(signresult['hex']))\n+    tx.deserialize(f)\n+    return tx\n+\n+def create_bip112special(node, input, txversion, address):\n+    tx = create_transaction(node, input, address, Decimal(\"49.98\"))\n+    tx.nVersion = txversion\n+    signtx = sign_transaction(node, tx)\n+    signtx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+    return signtx\n+\n+def send_generic_input_tx(node, coinbases, address):\n+    amount = Decimal(\"49.99\")\n+    return node.sendrawtransaction(ToHex(sign_transaction(node, create_transaction(node, node.getblock(coinbases.pop())['tx'][0], address, amount))))\n+\n+def create_bip68txs(node, bip68inputs, txversion, address, locktime_delta=0):\n+    \"\"\"Returns a list of bip68 transactions with different bits set.\"\"\"\n     txs = []\n-    for b31 in range(2):\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    txs.append(txarray[b31][b25][b22][b18])\n+    assert(len(bip68inputs) >= 16)\n+    for i, (sdf, srhb, stf, srlb) in enumerate(product(*[[True, False]] * 4)):\n+        locktime = relative_locktime(sdf, srhb, stf, srlb)\n+        tx = create_transaction(node, bip68inputs[i], address, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        tx.vin[0].nSequence = locktime + locktime_delta\n+        tx = sign_transaction(node, tx)\n+        tx.rehash()\n+        txs.append({'tx': tx, 'sdf': sdf, 'stf': stf})\n+\n     return txs\n \n-class BIP68_112_113Test(ComparisonTestFramework):\n+def create_bip112txs(node, bip112inputs, varyOP_CSV, txversion, address, locktime_delta=0):\n+    \"\"\"Returns a list of bip68 transactions with different bits set.\"\"\"\n+    txs = []\n+    assert(len(bip112inputs) >= 16)\n+    for i, (sdf, srhb, stf, srlb) in enumerate(product(*[[True, False]] * 4)):\n+        locktime = relative_locktime(sdf, srhb, stf, srlb)\n+        tx = create_transaction(node, bip112inputs[i], address, Decimal(\"49.98\"))\n+        if (varyOP_CSV):  # if varying OP_CSV, nSequence is fixed\n+            tx.vin[0].nSequence = BASE_RELATIVE_LOCKTIME + locktime_delta\n+        else:  # vary nSequence instead, OP_CSV is fixed\n+            tx.vin[0].nSequence = locktime + locktime_delta\n+        tx.nVersion = txversion\n+        signtx = sign_transaction(node, tx)\n+        if (varyOP_CSV):\n+            signtx.vin[0].scriptSig = CScript([locktime, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        else:\n+            signtx.vin[0].scriptSig = CScript([BASE_RELATIVE_LOCKTIME, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        tx.rehash()\n+        txs.append({'tx': signtx, 'sdf': sdf, 'stf': stf})\n+    return txs\n+\n+class BIP68_112_113Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n-    def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        network_thread_start()\n-        test.run()\n-\n-    def send_generic_input_tx(self, node, coinbases):\n-        amount = Decimal(\"49.99\")\n-        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n-\n-    def create_transaction(self, node, txid, to_address, amount):\n-        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n-        outputs = { to_address : amount }\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-        tx = CTransaction()\n-        f = BytesIO(hex_str_to_bytes(rawtx))\n-        tx.deserialize(f)\n-        return tx\n-\n-    def sign_transaction(self, node, unsignedtx):\n-        rawtx = ToHex(unsignedtx)\n-        signresult = node.signrawtransactionwithwallet(rawtx)\n-        tx = CTransaction()\n-        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n-        tx.deserialize(f)\n-        return tx\n-\n-    def generate_blocks(self, number, version, test_blocks = []):\n+    def generate_blocks(self, number, version, test_blocks=None):\n+        if test_blocks is None:\n+            test_blocks = []\n         for i in range(number):\n             block = self.create_test_block([], version)\n-            test_blocks.append([block, True])\n+            test_blocks.append(block)\n             self.last_block_time += 600\n             self.tip = block.sha256\n             self.tipheight += 1\n         return test_blocks\n \n-    def create_test_block(self, txs, version = 536870912):\n+    def create_test_block(self, txs, version=536870912):\n         block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n         block.nVersion = version\n         block.vtx.extend(txs)\n@@ -142,184 +175,148 @@ def create_test_block(self, txs, version = 536870912):\n         block.solve()\n         return block\n \n-    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n-        txs = []\n-        assert(len(bip68inputs) >= 16)\n-        i = 0\n-        for b31 in range(2):\n-            b25txs = []\n-            for b25 in range(2):\n-                b22txs = []\n-                for b22 in range(2):\n-                    b18txs = []\n-                    for b18 in range(2):\n-                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n-                        i += 1\n-                        tx.nVersion = txversion\n-                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n-                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n-                    b22txs.append(b18txs)\n-                b25txs.append(b22txs)\n-            txs.append(b25txs)\n-        return txs\n-\n-    def create_bip112special(self, input, txversion):\n-        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n-        tx.nVersion = txversion\n-        signtx = self.sign_transaction(self.nodes[0], tx)\n-        signtx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-        return signtx\n-\n-    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n-        txs = []\n-        assert(len(bip112inputs) >= 16)\n-        i = 0\n-        for b31 in range(2):\n-            b25txs = []\n-            for b25 in range(2):\n-                b22txs = []\n-                for b22 in range(2):\n-                    b18txs = []\n-                    for b18 in range(2):\n-                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n-                        i += 1\n-                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n-                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n-                        else: # vary nSequence instead, OP_CSV is fixed\n-                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n-                        tx.nVersion = txversion\n-                        signtx = self.sign_transaction(self.nodes[0], tx)\n-                        if (varyOP_CSV):\n-                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-                        else:\n-                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-                        b18txs.append(signtx)\n-                    b22txs.append(b18txs)\n-                b25txs.append(b22txs)\n-            txs.append(b25txs)\n-        return txs\n-\n-    def get_tests(self):\n-        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n-        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n-        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n-        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n-        self.tipheight = 82 # height of the next block to build\n+    def sync_blocks(self, blocks, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n+\n+        Call with success = False if the tip shouldn't advance to the most recent block.\"\"\"\n+        self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_code=reject_code, reject_reason=reject_reason, request_block=request_block)\n+\n+    def run_test(self):\n+        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        network_thread_start()\n+        self.nodes[0].p2p.wait_for_verack()\n+\n+        self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n+        long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100)  # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2 * 32 + 1)  # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0)  # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82  # height of the next block to build\n         self.last_block_time = long_past_time\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.tip = int(self.nodes[0].getbestblockhash(), 16)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n+        self.log.info(\"Test that the csv softfork is DEFINED\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n         test_blocks = self.generate_blocks(61, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 1\n-        # Advanced from DEFINED to STARTED, height = 143\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"Advance from DEFINED to STARTED, height = 143\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n \n-        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n-        # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 2\n-        # Failed to advance past STARTED, height = 287\n+        self.log.info(\"Fail to achieve LOCKED_IN\")\n+        # 100 out of 144 signal bit 0. Use a variety of bits to simulate multiple parallel softforks\n+\n+        test_blocks = self.generate_blocks(50, 536870913)  # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks)  # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks)  # 0x20010000 (signalling not)\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"Failed to advance past STARTED, height = 287\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n \n+        self.log.info(\"Generate blocks to achieve LOCK-IN\")\n         # 108 out of 144 signal bit 0 to achieve lock-in\n         # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 3\n-        # Advanced from STARTED to LOCKED_IN, height = 431\n+        test_blocks = self.generate_blocks(58, 536870913)  # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks)  # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks)  # 0x20010000 (signalling not)\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"Advanced from STARTED to LOCKED_IN, height = 431\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n-        # 140 more version 4 blocks\n+        # Generate 140 more version 4 blocks\n         test_blocks = self.generate_blocks(140, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+        self.sync_blocks(test_blocks)\n \n-        ### Inputs at height = 572\n+        # Inputs at height = 572\n+        #\n         # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n         # Note we reuse inputs for v1 and v2 txs so must test these separately\n         # 16 normal inputs\n         bip68inputs = []\n         for i in range(16):\n-            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip68inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n+\n         # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112basicinputs = []\n         for j in range(2):\n             inputs = []\n             for i in range(16):\n-                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+                inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n             bip112basicinputs.append(inputs)\n+\n         # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112diverseinputs = []\n         for j in range(2):\n             inputs = []\n             for i in range(16):\n-                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+                inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n             bip112diverseinputs.append(inputs)\n+\n         # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n-        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        bip112specialinput = send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress)\n+\n         # 1 normal input\n-        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        bip113input = send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress)\n \n         self.nodes[0].setmocktime(self.last_block_time + 600)\n-        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        inputblockhash = self.nodes[0].generate(1)[0]  # 1 block generated for inputs to be in chain at height 572\n         self.nodes[0].setmocktime(0)\n-        self.tip = int(\"0x\" + inputblockhash, 0)\n+        self.tip = int(inputblockhash, 16)\n         self.tipheight += 1\n         self.last_block_time += 600\n-        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash, True)[\"tx\"]), 82 + 1)\n \n         # 2 more version 4 blocks\n         test_blocks = self.generate_blocks(2, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 5\n-        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n         # Test both version 1 and version 2 transactions for all tests\n         # BIP113 test transaction will be modified before each use to put in appropriate block time\n-        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1 = create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n         bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n         bip113tx_v1.nVersion = 1\n-        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2 = create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n         bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n         bip113tx_v2.nVersion = 2\n \n         # For BIP68 test all 16 relative sequence locktimes\n-        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n-        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+        bip68txs_v1 = create_bip68txs(self.nodes[0], bip68inputs, 1, self.nodeaddress)\n+        bip68txs_v2 = create_bip68txs(self.nodes[0], bip68inputs, 2, self.nodeaddress)\n \n         # For BIP112 test:\n         # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n-        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n-        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        bip112txs_vary_nSequence_v1 = create_bip112txs(self.nodes[0], bip112basicinputs[0], False, 1, self.nodeaddress)\n+        bip112txs_vary_nSequence_v2 = create_bip112txs(self.nodes[0], bip112basicinputs[0], False, 2, self.nodeaddress)\n         # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n-        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n-        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        bip112txs_vary_nSequence_9_v1 = create_bip112txs(self.nodes[0], bip112basicinputs[1], False, 1, self.nodeaddress, -1)\n+        bip112txs_vary_nSequence_9_v2 = create_bip112txs(self.nodes[0], bip112basicinputs[1], False, 2, self.nodeaddress, -1)\n         # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n-        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n-        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        bip112txs_vary_OP_CSV_v1 = create_bip112txs(self.nodes[0], bip112diverseinputs[0], True, 1, self.nodeaddress)\n+        bip112txs_vary_OP_CSV_v2 = create_bip112txs(self.nodes[0], bip112diverseinputs[0], True, 2, self.nodeaddress)\n         # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n-        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n-        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        bip112txs_vary_OP_CSV_9_v1 = create_bip112txs(self.nodes[0], bip112diverseinputs[1], True, 1, self.nodeaddress, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = create_bip112txs(self.nodes[0], bip112diverseinputs[1], True, 2, self.nodeaddress, -1)\n         # -1 OP_CSV OP_DROP input\n-        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n-        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+        bip112tx_special_v1 = create_bip112special(self.nodes[0], bip112specialinput, 1, self.nodeaddress)\n+        bip112tx_special_v2 = create_bip112special(self.nodes[0], bip112specialinput, 2, self.nodeaddress)\n+\n+        self.log.info(\"TESTING\")\n \n+        self.log.info(\"Pre-Soft Fork Tests. All txs should pass.\")\n+        self.log.info(\"Test version 1 txs\")\n \n-        ### TESTING ###\n-        ##################################\n-        ### Before Soft Forks Activate ###\n-        ##################################\n-        # All txs should pass\n-        ### Version 1 txs ###\n         success_txs = []\n         # add BIP113 tx and -1 CSV tx\n-        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n-        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = sign_transaction(self.nodes[0], bip113tx_v1)\n         success_txs.append(bip113signed1)\n         success_txs.append(bip112tx_special_v1)\n         # add BIP 68 txs\n@@ -330,14 +327,15 @@ def get_tests(self):\n         # try BIP 112 with seq=9 txs\n         success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n         success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.sync_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n-        ### Version 2 txs ###\n+        self.log.info(\"Test version 2 txs\")\n+\n         success_txs = []\n         # add BIP113 tx and -1 CSV tx\n-        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n-        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = sign_transaction(self.nodes[0], bip113tx_v2)\n         success_txs.append(bip113signed2)\n         success_txs.append(bip112tx_special_v2)\n         # add BIP 68 txs\n@@ -348,187 +346,149 @@ def get_tests(self):\n         # try BIP 112 with seq=9 txs\n         success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n         success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.sync_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n-\n         # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n         test_blocks = self.generate_blocks(1, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        self.sync_blocks(test_blocks)\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'active')\n \n+        self.log.info(\"Post-Soft Fork Tests.\")\n \n-        #################################\n-        ### After Soft Forks Activate ###\n-        #################################\n-        ### BIP 113 ###\n+        self.log.info(\"BIP 113 tests\")\n         # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n-        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n-        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n-        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n-        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5  # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n-            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+            self.sync_blocks([self.create_test_block([bip113tx])], success=False)\n         # BIP 113 tests should now pass if the locktime is < MTP\n-        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n-        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n-        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n-        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1  # < MTP of prior block\n+        bip113signed1 = sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1  # < MTP of prior block\n+        bip113signed2 = sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n-            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.sync_blocks([self.create_test_block([bip113tx])])\n             self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Next block height = 580 after 4 blocks of random version\n         test_blocks = self.generate_blocks(4, 1234)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"BIP 68 tests\")\n+        self.log.info(\"Test version 1 txs - all should still pass\")\n \n-        ### BIP 68 ###\n-        ### Version 1 txs ###\n-        # All still pass\n         success_txs = []\n         success_txs.extend(all_rlt_txs(bip68txs_v1))\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.sync_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n-        ### Version 2 txs ###\n-        bip68success_txs = []\n+        self.log.info(\"Test version 2 txs\")\n+\n         # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n-        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        bip68success_txs = [tx['tx'] for tx in bip68txs_v2 if tx['sdf']]\n+        self.sync_blocks([self.create_test_block(bip68success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n         # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n-        bip68timetxs = []\n-        for b25 in range(2):\n-            for b18 in range(2):\n-                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        bip68timetxs = [tx['tx'] for tx in bip68txs_v2 if not tx['sdf'] and tx['stf']]\n         for tx in bip68timetxs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n-        bip68heighttxs = []\n-        for b25 in range(2):\n-            for b18 in range(2):\n-                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+            self.sync_blocks([self.create_test_block([tx])], success=False)\n+\n+        bip68heighttxs = [tx['tx'] for tx in bip68txs_v2 if not tx['sdf'] and not tx['stf']]\n         for tx in bip68heighttxs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+            self.sync_blocks([self.create_test_block([tx])], success=False)\n \n         # Advance one block to 581\n         test_blocks = self.generate_blocks(1, 1234)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+        self.sync_blocks(test_blocks)\n \n         # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n         bip68success_txs.extend(bip68timetxs)\n-        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.sync_blocks([self.create_test_block(bip68success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n         for tx in bip68heighttxs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+            self.sync_blocks([self.create_test_block([tx])], success=False)\n \n         # Advance one block to 582\n         test_blocks = self.generate_blocks(1, 1234)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+        self.sync_blocks(test_blocks)\n \n         # All BIP 68 txs should pass\n         bip68success_txs.extend(bip68heighttxs)\n-        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.sync_blocks([self.create_test_block(bip68success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n+        self.log.info(\"BIP 112 tests\")\n+        self.log.info(\"Test version 1 txs\")\n \n-        ### BIP 112 ###\n-        ### Version 1 txs ###\n         # -1 OP_CSV tx should fail\n-        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        self.sync_blocks([self.create_test_block([bip112tx_special_v1])], success=False)\n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n-        success_txs = []\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n-                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+\n+        success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v1 if tx['sdf']]\n+        success_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if tx['sdf']]\n+        self.sync_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n-        fail_txs = []\n-        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n-        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n-                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n-\n+        fail_txs = all_rlt_txs(bip112txs_vary_nSequence_v1)\n+        fail_txs += all_rlt_txs(bip112txs_vary_nSequence_9_v1)\n+        fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if not tx['sdf']]\n+        fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v1 if not tx['sdf']]\n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+            self.sync_blocks([self.create_test_block([tx])], success=False)\n+\n+        self.log.info(\"Test version 2 txs\")\n \n-        ### Version 2 txs ###\n         # -1 OP_CSV tx should fail\n-        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+        self.sync_blocks([self.create_test_block([bip112tx_special_v2])], success=False)\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n-        success_txs = []\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n-                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+        success_txs = [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if tx['sdf']]\n+        success_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v2 if tx['sdf']]\n \n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.sync_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n-        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n-        # All txs with nSequence 9 should fail either due to earlier mismatch or failing the CSV check\n-        fail_txs = []\n-        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n+        # SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n \n+        # All txs with nSequence 9 should fail either due to earlier mismatch or failing the CSV check\n+        fail_txs = all_rlt_txs(bip112txs_vary_nSequence_9_v2)\n+        fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_9_v2 if not tx['sdf']]\n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n+            self.sync_blocks([self.create_test_block([tx])], success=False)\n \n         # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n-        fail_txs = []\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n+        fail_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if tx['sdf']]\n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n+            self.sync_blocks([self.create_test_block([tx])], success=False)\n \n         # If sequencelock types mismatch, tx should fail\n-        fail_txs = []\n-        for b25 in range(2):\n-            for b18 in range(2):\n-                fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n-                fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n+        fail_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if not tx['sdf'] and tx['stf']]\n+        fail_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if not tx['sdf'] and tx['stf']]\n         for tx in fail_txs:\n-            yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n+            self.sync_blocks([self.create_test_block([tx])], success=False)\n \n         # Remaining txs should pass, just test masking works properly\n-        success_txs = []\n-        for b25 in range(2):\n-            for b18 in range(2):\n-                success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n-                success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV\n-        yield TestInstance([[self.create_test_block(success_txs), True]]) # 124\n+        success_txs = [tx['tx'] for tx in bip112txs_vary_nSequence_v2 if not tx['sdf'] and not tx['stf']]\n+        success_txs += [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if not tx['sdf'] and not tx['stf']]\n+        self.sync_blocks([self.create_test_block(success_txs)])\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         # Additional test, of checking that comparison of two time types works properly\n         time_txs = []\n-        for b25 in range(2):\n-            for b18 in range(2):\n-                tx = bip112txs_vary_OP_CSV_v2[0][b25][1][b18]\n-                tx.vin[0].nSequence = base_relative_locktime | seq_type_flag\n-                signtx = self.sign_transaction(self.nodes[0], tx)\n-                time_txs.append(signtx)\n-        yield TestInstance([[self.create_test_block(time_txs), True]]) # 125\n-        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in [tx['tx'] for tx in bip112txs_vary_OP_CSV_v2 if not tx['sdf'] and tx['stf']]:\n+            tx.vin[0].nSequence = BASE_RELATIVE_LOCKTIME | SEQ_TYPE_FLAG\n+            signtx = sign_transaction(self.nodes[0], tx)\n+            time_txs.append(signtx)\n \n-        ### Missing aspects of test\n-        ##  Testing empty stack fails\n+        self.sync_blocks([self.create_test_block(time_txs)])\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n+        # TODO: Test empty stack fails\n \n if __name__ == '__main__':\n     BIP68_112_113Test().main()"
      },
      {
        "sha": "1e62d7a4092af012d2940ca10c61b4d7a973f396",
        "filename": "test/functional/feature_help.py",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/feature_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/feature_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_help.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Verify that starting bitcoin with -h works as expected.\"\"\"\n+import subprocess\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class HelpTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.add_nodes(self.num_nodes)\n+        # Don't start the node\n+\n+    def run_test(self):\n+        self.log.info(\"Start bitcoin with -h for help text\")\n+        self.nodes[0].start(extra_args=['-h'], stderr=subprocess.PIPE, stdout=subprocess.PIPE)\n+        # Node should exit immediately and output help to stdout.\n+        ret_code = self.nodes[0].process.wait(timeout=1)\n+        assert_equal(ret_code, 0)\n+        output = self.nodes[0].process.stdout.read()\n+        assert b'Options' in output\n+        self.log.info(\"Help text received: {} (...)\".format(output[0:60]))\n+        self.nodes[0].running = False\n+\n+        self.log.info(\"Start bitcoin with -version for version information\")\n+        self.nodes[0].start(extra_args=['-version'], stderr=subprocess.PIPE, stdout=subprocess.PIPE)\n+        # Node should exit immediately and output version to stdout.\n+        ret_code = self.nodes[0].process.wait(timeout=1)\n+        assert_equal(ret_code, 0)\n+        output = self.nodes[0].process.stdout.read()\n+        assert b'version' in output\n+        self.log.info(\"Version text received: {} (...)\".format(output[0:60]))\n+        self.nodes[0].running = False\n+\n+if __name__ == '__main__':\n+    HelpTest().main()"
      },
      {
        "sha": "7cdb24c6a5c44d9e6a550dd62cd792e8d752f4c9",
        "filename": "test/functional/mempool_accept.py",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool acceptance of raw transactions.\"\"\"\n+\n+from io import BytesIO\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxOut,\n+    MAX_BLOCK_BASE_SIZE,\n+)\n+from test_framework.script import (\n+    hash160,\n+    CScript,\n+    OP_0,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_RETURN,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    bytes_to_hex_str,\n+    hex_str_to_bytes,\n+    wait_until,\n+)\n+\n+\n+class MempoolAcceptanceTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-checkmempool',\n+            '-txindex',\n+            '-reindex',  # Need reindex for txindex\n+            '-acceptnonstdtxn=0',  # Try to mimic main-net\n+        ]] * self.num_nodes\n+\n+    def check_mempool_result(self, result_expected, *args, **kwargs):\n+        \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n+        result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)\n+        assert_equal(result_expected, result_test)\n+        assert_equal(self.nodes[0].getmempoolinfo()['size'], self.mempool_size)  # Must not change mempool state\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info('Start with empty mempool, and 200 blocks')\n+        self.mempool_size = 0\n+        wait_until(lambda: node.getblockcount() == 200)\n+        assert_equal(node.getmempoolinfo()['size'], self.mempool_size)\n+\n+        self.log.info('Should not accept garbage to testmempoolaccept')\n+        assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n+        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))\n+        assert_raises_rpc_error(-22, 'TX decode failed', lambda: node.testmempoolaccept(rawtxs=['ff00baar']))\n+\n+        self.log.info('A transaction already in the blockchain')\n+        coin = node.listunspent()[0]  # Pick a random coin(base) to spend\n+        raw_tx_in_block = node.signrawtransactionwithwallet(node.createrawtransaction(\n+            inputs=[{'txid': coin['txid'], 'vout': coin['vout']}],\n+            outputs=[{node.getnewaddress(): 0.3}, {node.getnewaddress(): 49}],\n+        ))['hex']\n+        txid_in_block = node.sendrawtransaction(hexstring=raw_tx_in_block, allowhighfees=True)\n+        node.generate(1)\n+        self.check_mempool_result(\n+            result_expected=[{'txid': txid_in_block, 'allowed': False, 'reject-reason': '18: txn-already-known'}],\n+            rawtxs=[raw_tx_in_block],\n+        )\n+\n+        self.log.info('A transaction not in the mempool')\n+        fee = 0.00000700\n+        raw_tx_0 = node.signrawtransactionwithwallet(node.createrawtransaction(\n+            inputs=[{\"txid\": txid_in_block, \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}],  # RBF is used later\n+            outputs=[{node.getnewaddress(): 0.3 - fee}],\n+        ))['hex']\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        txid_0 = tx.rehash()\n+        self.check_mempool_result(\n+            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            rawtxs=[raw_tx_0],\n+        )\n+\n+        self.log.info('A transaction in the mempool')\n+        node.sendrawtransaction(hexstring=raw_tx_0)\n+        self.mempool_size = 1\n+        self.check_mempool_result(\n+            result_expected=[{'txid': txid_0, 'allowed': False, 'reject-reason': '18: txn-already-in-mempool'}],\n+            rawtxs=[raw_tx_0],\n+        )\n+\n+        self.log.info('A transaction that replaces a mempool transaction')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx.vout[0].nValue -= int(fee * COIN)  # Double the fee\n+        tx.vin[0].nSequence = BIP125_SEQUENCE_NUMBER + 1  # Now, opt out of RBF\n+        raw_tx_0 = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))['hex']\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        txid_0 = tx.rehash()\n+        self.check_mempool_result(\n+            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            rawtxs=[raw_tx_0],\n+        )\n+\n+        self.log.info('A transaction that conflicts with an unconfirmed tx')\n+        # Send the transaction that replaces the mempool transaction and opts out of replaceability\n+        node.sendrawtransaction(hexstring=bytes_to_hex_str(tx.serialize()), allowhighfees=True)\n+        # take original raw_tx_0\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx.vout[0].nValue -= int(4 * fee * COIN)  # Set more fee\n+        # skip re-signing the tx\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '18: txn-mempool-conflict'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            allowhighfees=True,\n+        )\n+\n+        self.log.info('A transaction with missing inputs, that never existed')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx.vin[0].prevout = COutPoint(hash=int('ff' * 32, 16), n=14)\n+        # skip re-signing the tx\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'missing-inputs'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A transaction with missing inputs, that existed once in the past')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n+        tx.vin[0].prevout.n = 1  # Set vout to 1, to spend the other outpoint (49 coins) of the in-chain-tx we want to double spend\n+        raw_tx_1 = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))['hex']\n+        txid_1 = node.sendrawtransaction(hexstring=raw_tx_1, allowhighfees=True)\n+        # Now spend both to \"clearly hide\" the outputs, ie. remove the coins from the utxo set by spending them\n+        raw_tx_spend_both = node.signrawtransactionwithwallet(node.createrawtransaction(\n+            inputs=[\n+                {'txid': txid_0, 'vout': 0},\n+                {'txid': txid_1, 'vout': 0},\n+            ],\n+            outputs=[{node.getnewaddress(): 0.1}]\n+        ))['hex']\n+        txid_spend_both = node.sendrawtransaction(hexstring=raw_tx_spend_both, allowhighfees=True)\n+        node.generate(1)\n+        self.mempool_size = 0\n+        # Now see if we can add the coins back to the utxo set by sending the exact txs again\n+        self.check_mempool_result(\n+            result_expected=[{'txid': txid_0, 'allowed': False, 'reject-reason': 'missing-inputs'}],\n+            rawtxs=[raw_tx_0],\n+        )\n+        self.check_mempool_result(\n+            result_expected=[{'txid': txid_1, 'allowed': False, 'reject-reason': 'missing-inputs'}],\n+            rawtxs=[raw_tx_1],\n+        )\n+\n+        self.log.info('Create a signed \"reference\" tx for later use')\n+        raw_tx_reference = node.signrawtransactionwithwallet(node.createrawtransaction(\n+            inputs=[{'txid': txid_spend_both, 'vout': 0}],\n+            outputs=[{node.getnewaddress(): 0.05}],\n+        ))['hex']\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        # Reference tx should be valid on itself\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A transaction with no outputs')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vout = []\n+        # Skip re-signing the transaction for context independent checks from now on\n+        # tx.deserialize(BytesIO(hex_str_to_bytes(node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))['hex'])))\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-empty'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A really large transaction')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vin = [tx.vin[0]] * (MAX_BLOCK_BASE_SIZE // len(tx.vin[0].serialize()))\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-oversize'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A transaction with negative output value')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vout[0].nValue *= -1\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-negative'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A transaction with too large output value')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vout[0].nValue = 21000000 * COIN + 1\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-toolarge'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A transaction with too large sum of output values')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vout = [tx.vout[0]] * 2\n+        tx.vout[0].nValue = 21000000 * COIN\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-txouttotal-toolarge'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A transaction with duplicate inputs')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vin = [tx.vin[0]] * 2\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-inputs-duplicate'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A coinbase transaction')\n+        # Pick the input of the first tx we signed, so it has to be a coinbase tx\n+        raw_tx_coinbase_spent = node.getrawtransaction(txid=node.decoderawtransaction(hexstring=raw_tx_in_block)['vin'][0]['txid'])\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_coinbase_spent)))\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: coinbase'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('Some nonstandard transactions')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.nVersion = 3  # A version currently non-standard\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: version'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vout[0].scriptPubKey = CScript([OP_0])  # Some non-standard script\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: scriptpubkey'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vin[0].scriptSig = CScript([OP_HASH160])  # Some not-pushonly scriptSig\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: scriptsig-not-pushonly'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=CScript([OP_HASH160, hash160(b'burn'), OP_EQUAL]))\n+        num_scripts = 100000 // len(output_p2sh_burn.serialize())  # Use enough outputs to make the tx too large for our policy\n+        tx.vout = [output_p2sh_burn] * num_scripts\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: tx-size'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vout[0] = output_p2sh_burn\n+        tx.vout[0].nValue -= 1  # Make output smaller, such that it is dust for our policy\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: dust'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'\\xff'])\n+        tx.vout = [tx.vout[0]] * 2\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: multi-op-return'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A timelocked transaction')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vin[0].nSequence -= 1  # Should be non-max, so locktime is not ignored\n+        tx.nLockTime = node.getblockcount() + 1\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: non-final'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+        )\n+\n+        self.log.info('A transaction that is locked by BIP68 sequence logic')\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        tx.vin[0].nSequence = 2  # We could include it in the second block mined from now, but not the very next one\n+        # Can skip re-signing the tx because of early rejection\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: non-BIP68-final'}],\n+            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            allowhighfees=True,\n+        )\n+\n+\n+if __name__ == '__main__':\n+    MempoolAcceptanceTest().main()"
      },
      {
        "sha": "5546bf6b2921a8144489d43f26312d3a364568a2",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -833,7 +833,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n             self.test_node.announce_tx_and_wait_for_getdata(tx, timeout=2)\n             self.log.error(\"Error: duplicate tx getdata!\")\n             assert(False)\n-        except AssertionError as e:\n+        except AssertionError:\n             pass\n \n         # Delivering this transaction with witness should fail (no matter who"
      },
      {
        "sha": "900090bb668d0a416b3c5fa89d256add239f6098",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -151,7 +151,7 @@ def _get_response(self):\n         req_start_time = time.time()\n         try:\n             http_response = self.__conn.getresponse()\n-        except socket.timeout as e:\n+        except socket.timeout:\n             raise JSONRPCException({\n                 'code': -344,\n                 'message': '%r RPC took longer than %f seconds. Consider '"
      },
      {
        "sha": "6073285a6cfa514e900e4e13f24ae17683c9969b",
        "filename": "test/functional/test_framework/blockstore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blockstore.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -87,7 +87,7 @@ def add_block(self, block):\n         block.calc_sha256()\n         try:\n             self.blockDB[repr(block.sha256)] = bytes(block.serialize())\n-        except TypeError as e:\n+        except TypeError:\n             logger.exception(\"Unexpected error\")\n         self.currentBlock = block.sha256\n         self.headers_map[block.sha256] = CBlockHeader(block)\n@@ -147,7 +147,7 @@ def add_transaction(self, tx):\n         tx.calc_sha256()\n         try:\n             self.txDB[repr(tx.sha256)] = bytes(tx.serialize())\n-        except TypeError as e:\n+        except TypeError:\n             logger.exception(\"Unexpected error\")\n \n     def get_transactions(self, inv):"
      },
      {
        "sha": "ca2e425bd658710af8b110ef7e0b0439dec40c34",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -34,7 +34,9 @@\n MAX_INV_SZ = 50000\n MAX_BLOCK_BASE_SIZE = 1000000\n \n-COIN = 100000000 # 1 btc in satoshis\n+COIN = 100000000  # 1 btc in satoshis\n+\n+BIP125_SEQUENCE_NUMBER = 0xfffffffd  # Sequence number that is BIP 125 opt-in and BIP 68-opt-out\n \n NODE_NETWORK = (1 << 0)\n # NODE_GETUTXO = (1 << 1)\n@@ -470,6 +472,7 @@ def serialize(self):\n     def rehash(self):\n         self.sha256 = None\n         self.calc_sha256()\n+        return self.hash\n \n     # We will only cache the serialization without witness in\n     # self.sha256 and self.hash -- those are expected to be the txid."
      },
      {
        "sha": "3cae4b1df3ca7306c7cb519351f0d198b6f962e5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -55,7 +55,7 @@\n # 20 minutes represented in seconds\n TRAVIS_TIMEOUT_DURATION = 20 * 60\n \n-BASE_SCRIPTS= [\n+BASE_SCRIPTS = [\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n     'wallet_hd.py',\n@@ -118,6 +118,7 @@\n     'wallet_importprunedfunds.py',\n     'rpc_signmessage.py',\n     'feature_nulldummy.py',\n+    'mempool_accept.py',\n     'wallet_import_rescan.py',\n     'mining_basic.py',\n     'wallet_bumpfee.py',\n@@ -138,6 +139,7 @@\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'feature_help.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time\n ]"
      },
      {
        "sha": "5efc846b6e64023990f0d63281582bc1f0a8c0b9",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -17,14 +17,12 @@\n from test_framework.blocktools import send_to_witness\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework import blocktools\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER\n from test_framework.mininode import CTransaction\n from test_framework.util import *\n \n import io\n \n-# Sequence number that is BIP 125 opt-in and BIP 68-compliant\n-BIP125_SEQUENCE_NUMBER = 0xfffffffd\n-\n WALLET_PASSPHRASE = \"test\"\n WALLET_PASSPHRASE_TIMEOUT = 3600\n "
      },
      {
        "sha": "91acdb01d06424edaa36dc8d300a6efd96d2ebed",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087c59a546596b56d50fe67baf9dc84297c6ecdd/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "patch": "@@ -230,7 +230,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n@@ -257,7 +257,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n@@ -284,7 +284,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n@@ -311,7 +311,7 @@ def run_test (self):\n         sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n-        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n "
      }
    ]
  },
  {
    "sha": "64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGMzNDAyZGIxNTY3YmE3YTZlYzBmYzJlMGUwNjhlNGVmMGJhMWZh",
    "commit": {
      "author": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-03T19:19:37Z"
      },
      "committer": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-03T19:19:37Z"
      },
      "message": "Merge branch 'master' of https://github.com/bitcoin/bitcoin into 11613-rpc-transaction-expose-source",
      "tree": {
        "sha": "16233c63260a067c79747f2733e1290a8ab01f6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16233c63260a067c79747f2733e1290a8ab01f6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/comments",
    "author": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087c59a546596b56d50fe67baf9dc84297c6ecdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/087c59a546596b56d50fe67baf9dc84297c6ecdd"
      },
      {
        "sha": "ad960f5771dc251c8e1198dd8a82e18df4562171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad960f5771dc251c8e1198dd8a82e18df4562171",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad960f5771dc251c8e1198dd8a82e18df4562171"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1d878835221020981c0491d62ce8a0c5bc2c9601",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -27,7 +27,7 @@ main(int argc, char** argv)\n {\n     gArgs.ParseParameters(argc, argv);\n \n-    if (gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") || gArgs.IsArgSet(\"-help\")) {\n+    if (HelpRequested(gArgs)) {\n         std::cout << HelpMessageGroup(_(\"Options:\"))\n                   << HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"))\n                   << HelpMessageOpt(\"-list\", _(\"List benchmarks without executing them. Can be combined with -scaling and -filter\"))"
      },
      {
        "sha": "263520ee4e22d0d910383914ddb2ef2245e3a7c0",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -82,7 +82,7 @@ static int AppInitRPC(int argc, char* argv[])\n     // Parameters\n     //\n     gArgs.ParseParameters(argc, argv);\n-    if (argc<2 || gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") || gArgs.IsArgSet(\"-help\") || gArgs.IsArgSet(\"-version\")) {\n+    if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n         std::string strUsage = strprintf(_(\"%s RPC client version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\";\n         if (!gArgs.IsArgSet(\"-version\")) {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +"
      },
      {
        "sha": "76a6f94899ba356dbf50fea5d09a6d4d4714ba38",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -51,8 +51,7 @@ static int AppInitRawTx(int argc, char* argv[])\n \n     fCreateBlank = gArgs.GetBoolArg(\"-create\", false);\n \n-    if (argc<2 || gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") || gArgs.IsArgSet(\"-help\"))\n-    {\n+    if (argc < 2 || HelpRequested(gArgs)) {\n         // First part of help message is specific to this utility\n         std::string strUsage = strprintf(_(\"%s bitcoin-tx utility version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n             _(\"Usage:\") + \"\\n\" +"
      },
      {
        "sha": "58518d611fafd0e1a8c22b0af785ed236842ed24",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -76,8 +76,7 @@ bool AppInit(int argc, char* argv[])\n     gArgs.ParseParameters(argc, argv);\n \n     // Process help and version before taking care about datadir\n-    if (gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") ||  gArgs.IsArgSet(\"-help\") || gArgs.IsArgSet(\"-version\"))\n-    {\n+    if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n         std::string strUsage = strprintf(_(\"%s Daemon\"), _(PACKAGE_NAME)) + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n \n         if (gArgs.IsArgSet(\"-version\"))"
      },
      {
        "sha": "140e56123fb779b80c772b4d6d92b4cf041aff63",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -613,8 +613,7 @@ int main(int argc, char *argv[])\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n-    if (gArgs.IsArgSet(\"-?\") || gArgs.IsArgSet(\"-h\") || gArgs.IsArgSet(\"-help\") || gArgs.IsArgSet(\"-version\"))\n-    {\n+    if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n         HelpMessageDialog help(nullptr, gArgs.IsArgSet(\"-version\"));\n         help.showOrPrint();\n         return EXIT_SUCCESS;"
      },
      {
        "sha": "46054f50255047c951a2b3eba3eb41c1a29ca1e0",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -584,7 +584,10 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     mapMultiArgs[strArg] = {strValue};\n }\n \n-\n+bool HelpRequested(const ArgsManager& args)\n+{\n+    return args.IsArgSet(\"-?\") || args.IsArgSet(\"-h\") || args.IsArgSet(\"-help\");\n+}\n \n static const int screenWidth = 79;\n static const int optIndent = 2;"
      },
      {
        "sha": "17881ff3b60d20292dbbbb6adaab0fa46068d72f",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -313,6 +313,11 @@ class ArgsManager\n \n extern ArgsManager gArgs;\n \n+/**\n+ * @return true if help has been requested via a command-line arg\n+ */\n+bool HelpRequested(const ArgsManager& args);\n+\n /**\n  * Format a string to be used as group of options in help messages\n  *"
      },
      {
        "sha": "aba28416824638eb70e3ec7b60013d384c5e7865",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "patch": "@@ -498,7 +498,7 @@ def on_getheaders(self, message):\n             # as we go.\n             prev_block_hash = headers_list[-1].hashPrevBlock\n             if prev_block_hash in self.block_store:\n-                prev_block_header = self.block_store[prev_block_hash]\n+                prev_block_header = CBlockHeader(self.block_store[prev_block_hash])\n                 headers_list.append(prev_block_header)\n                 if prev_block_header.sha256 == hash_stop:\n                     # if this is the hashstop header, stop here\n@@ -539,7 +539,7 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n                 self.block_store[block.sha256] = block\n                 self.last_block_hash = block.sha256\n \n-        self.send_message(msg_headers([blocks[-1]]))\n+        self.send_message(msg_headers([CBlockHeader(blocks[-1])]))\n \n         if request_block:\n             wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)"
      }
    ]
  },
  {
    "sha": "0f984fe3af3ff84fffcca4bb68cca43973387664",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjk4NGZlM2FmM2ZmODRmZmZjY2E0YmI2OGNjYTQzOTczMzg3NjY0",
    "commit": {
      "author": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-03T19:40:26Z"
      },
      "committer": {
        "name": "Gabriel Davidian",
        "email": "gabrielius.dav@gmail.com",
        "date": "2018-04-03T19:40:26Z"
      },
      "message": "Change 'gettransaction' 'from_me' to return bool instead of yes|no",
      "tree": {
        "sha": "afc242f2d74569a46092eb72fc91b2fa9eabd050",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afc242f2d74569a46092eb72fc91b2fa9eabd050"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f984fe3af3ff84fffcca4bb68cca43973387664",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f984fe3af3ff84fffcca4bb68cca43973387664",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f984fe3af3ff84fffcca4bb68cca43973387664",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f984fe3af3ff84fffcca4bb68cca43973387664/comments",
    "author": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "GabrielDav",
      "id": 6910086,
      "node_id": "MDQ6VXNlcjY5MTAwODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6910086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GabrielDav",
      "html_url": "https://github.com/GabrielDav",
      "followers_url": "https://api.github.com/users/GabrielDav/followers",
      "following_url": "https://api.github.com/users/GabrielDav/following{/other_user}",
      "gists_url": "https://api.github.com/users/GabrielDav/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GabrielDav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GabrielDav/subscriptions",
      "organizations_url": "https://api.github.com/users/GabrielDav/orgs",
      "repos_url": "https://api.github.com/users/GabrielDav/repos",
      "events_url": "https://api.github.com/users/GabrielDav/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GabrielDav/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64c3402db1567ba7a6ec0fc2e0e068e4ef0ba1fa"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d80e5cd6d8e8001efb788f0f40f7deacd462e258",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f984fe3af3ff84fffcca4bb68cca43973387664/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f984fe3af3ff84fffcca4bb68cca43973387664/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0f984fe3af3ff84fffcca4bb68cca43973387664",
        "patch": "@@ -2144,7 +2144,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id.\\n\"\n             \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n-            \"  \\\"from_me\\\" : \\\"yes|no\\\",  (string) Whether this transaction was sent from wallet on this node\\n\"\n+            \"  \\\"from_me\\\" : \\\"xxx\\\",  (bool) Whether this transaction was sent from wallet on this node\\n\"\n             \"  \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n             \"                                                   may be unknown for unconfirmed transactions not in the mempool\\n\"\n             \"  \\\"details\\\" : [\\n\"\n@@ -2205,7 +2205,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n         entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n     WalletTxToJSON(wtx, entry);\n-    entry.pushKV(\"from_me\", fFromMe? \"yes\" : \"no\");\n+    entry.pushKV(\"from_me\", fFromMe);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);"
      }
    ]
  }
]