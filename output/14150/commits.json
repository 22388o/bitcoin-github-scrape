[
  {
    "sha": "2c6281f18042da197a49c6a59b04279829cbbbc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzYyODFmMTgwNDJkYTE5N2E0OWM2YTU5YjA0Mjc5ODI5Y2JiYmM2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-18T19:24:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-21T03:29:02Z"
      },
      "message": "Add key origin support to descriptors",
      "tree": {
        "sha": "e6edbc3c14df340d07c94812365de1a5e51d9d26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6edbc3c14df340d07c94812365de1a5e51d9d26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c6281f18042da197a49c6a59b04279829cbbbc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c6281f18042da197a49c6a59b04279829cbbbc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c6281f18042da197a49c6a59b04279829cbbbc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c6281f18042da197a49c6a59b04279829cbbbc6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c25409d6851182c5e351720cee36812c229b77a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c25409d6851182c5e351720cee36812c229b77a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c25409d6851182c5e351720cee36812c229b77a"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 100,
      "deletions": 27
    },
    "files": [
      {
        "sha": "478797e95873d3b55b40b878ba40902c7043546d",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 26,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c6281f18042da197a49c6a59b04279829cbbbc6/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c6281f18042da197a49c6a59b04279829cbbbc6/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=2c6281f18042da197a49c6a59b04279829cbbbc6",
        "patch": "@@ -41,7 +41,7 @@ struct PubkeyProvider\n     virtual ~PubkeyProvider() = default;\n \n     /** Derive a public key. */\n-    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& out) const = 0;\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info) const = 0;\n \n     /** Whether this represent multiple public keys at different positions. */\n     virtual bool IsRange() const = 0;\n@@ -56,16 +56,50 @@ struct PubkeyProvider\n     virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n };\n \n+class OriginPubkeyProvider final : public PubkeyProvider\n+{\n+    KeyOriginInfo m_origin;\n+    std::unique_ptr<PubkeyProvider> m_provider;\n+\n+    std::string OriginString() const\n+    {\n+        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatKeyPath(m_origin.path);\n+    }\n+\n+public:\n+    OriginPubkeyProvider(KeyOriginInfo info, std::unique_ptr<PubkeyProvider> provider) : m_origin(std::move(info)), m_provider(std::move(provider)) {}\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info) const override\n+    {\n+        if (!m_provider->GetPubKey(pos, arg, key, info)) return false;\n+        std::copy(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint), info.fingerprint);\n+        info.path.insert(info.path.begin(), m_origin.path.begin(), m_origin.path.end());\n+        return true;\n+    }\n+    bool IsRange() const override { return m_provider->IsRange(); }\n+    size_t GetSize() const override { return m_provider->GetSize(); }\n+    std::string ToString() const override { return \"[\" + OriginString() + \"]\" + m_provider->ToString(); }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& ret) const override\n+    {\n+        std::string sub;\n+        if (!m_provider->ToPrivateString(arg, sub)) return false;\n+        ret = \"[\" + OriginString() + \"]\" + std::move(sub);\n+        return true;\n+    }\n+};\n+\n /** An object representing a parsed constant public key in a descriptor. */\n class ConstPubkeyProvider final : public PubkeyProvider\n {\n     CPubKey m_pubkey;\n \n public:\n     ConstPubkeyProvider(const CPubKey& pubkey) : m_pubkey(pubkey) {}\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& out) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info) const override\n     {\n-        out = m_pubkey;\n+        key = m_pubkey;\n+        info.path.clear();\n+        CKeyID keyid = m_pubkey.GetID();\n+        std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n         return true;\n     }\n     bool IsRange() const override { return false; }\n@@ -98,7 +132,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         CKey key;\n         if (!arg.GetKey(m_extkey.pubkey.GetID(), key)) return false;\n         ret.nDepth = m_extkey.nDepth;\n-        std::copy(m_extkey.vchFingerprint, m_extkey.vchFingerprint + 4, ret.vchFingerprint);\n+        std::copy(m_extkey.vchFingerprint, m_extkey.vchFingerprint + sizeof(ret.vchFingerprint), ret.vchFingerprint);\n         ret.nChild = m_extkey.nChild;\n         ret.chaincode = m_extkey.chaincode;\n         ret.key = key;\n@@ -118,27 +152,32 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     BIP32PubkeyProvider(const CExtPubKey& extkey, KeyPath path, DeriveType derive) : m_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n     bool IsRange() const override { return m_derive != DeriveType::NO; }\n     size_t GetSize() const override { return 33; }\n-    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& out) const override\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& key, KeyOriginInfo& info) const override\n     {\n         if (IsHardened()) {\n-            CExtKey key;\n-            if (!GetExtKey(arg, key)) return false;\n+            CExtKey extkey;\n+            if (!GetExtKey(arg, extkey)) return false;\n             for (auto entry : m_path) {\n-                key.Derive(key, entry);\n+                extkey.Derive(extkey, entry);\n             }\n-            if (m_derive == DeriveType::UNHARDENED) key.Derive(key, pos);\n-            if (m_derive == DeriveType::HARDENED) key.Derive(key, pos | 0x80000000UL);\n-            out = key.Neuter().pubkey;\n+            if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n+            if (m_derive == DeriveType::HARDENED) extkey.Derive(extkey, pos | 0x80000000UL);\n+            key = extkey.Neuter().pubkey;\n         } else {\n             // TODO: optimize by caching\n-            CExtPubKey key = m_extkey;\n+            CExtPubKey extkey = m_extkey;\n             for (auto entry : m_path) {\n-                key.Derive(key, entry);\n+                extkey.Derive(extkey, entry);\n             }\n-            if (m_derive == DeriveType::UNHARDENED) key.Derive(key, pos);\n+            if (m_derive == DeriveType::UNHARDENED) extkey.Derive(extkey, pos);\n             assert(m_derive != DeriveType::HARDENED);\n-            out = key.pubkey;\n+            key = extkey.pubkey;\n         }\n+        CKeyID keyid = m_extkey.pubkey.GetID();\n+        std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+        info.path = m_path;\n+        if (m_derive == DeriveType::UNHARDENED) info.path.push_back((uint32_t)pos);\n+        if (m_derive == DeriveType::HARDENED) info.path.push_back(((uint32_t)pos) | 0x80000000L);\n         return true;\n     }\n     std::string ToString() const override\n@@ -221,9 +260,11 @@ class SingleKeyDescriptor final : public Descriptor\n     bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n     {\n         CPubKey key;\n-        if (!m_provider->GetPubKey(pos, arg, key)) return false;\n+        KeyOriginInfo info;\n+        if (!m_provider->GetPubKey(pos, arg, key, info)) return false;\n         output_scripts = std::vector<CScript>{m_script_fn(key)};\n-        out.pubkeys.emplace(key.GetID(), std::move(key));\n+        out.origins.emplace(key.GetID(), std::move(info));\n+        out.pubkeys.emplace(key.GetID(), key);\n         return true;\n     }\n };\n@@ -272,15 +313,19 @@ class MultisigDescriptor : public Descriptor\n \n     bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n     {\n-        std::vector<CPubKey> pubkeys;\n-        pubkeys.reserve(m_providers.size());\n+        std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n+        entries.reserve(m_providers.size());\n+        // Construct temporary data in `entries`, to avoid producing output in case of failure.\n         for (const auto& p : m_providers) {\n-            CPubKey key;\n-            if (!p->GetPubKey(pos, arg, key)) return false;\n-            pubkeys.push_back(key);\n+            entries.emplace_back();\n+            if (!p->GetPubKey(pos, arg, entries.back().first, entries.back().second)) return false;\n         }\n-        for (const CPubKey& key : pubkeys) {\n-            out.pubkeys.emplace(key.GetID(), std::move(key));\n+        std::vector<CPubKey> pubkeys;\n+        pubkeys.reserve(entries.size());\n+        for (auto& entry : entries) {\n+            pubkeys.push_back(entry.first);\n+            out.origins.emplace(entry.first.GetID(), std::move(entry.second));\n+            out.pubkeys.emplace(entry.first.GetID(), entry.first);\n         }\n         output_scripts = std::vector<CScript>{GetScriptForMultisig(m_threshold, pubkeys)};\n         return true;\n@@ -343,13 +388,15 @@ class ComboDescriptor final : public Descriptor\n     bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n     {\n         CPubKey key;\n-        if (!m_provider->GetPubKey(pos, arg, key)) return false;\n+        KeyOriginInfo info;\n+        if (!m_provider->GetPubKey(pos, arg, key, info)) return false;\n         CKeyID keyid = key.GetID();\n         {\n             CScript p2pk = GetScriptForRawPubKey(key);\n             CScript p2pkh = GetScriptForDestination(keyid);\n             output_scripts = std::vector<CScript>{std::move(p2pk), std::move(p2pkh)};\n             out.pubkeys.emplace(keyid, key);\n+            out.origins.emplace(keyid, std::move(info));\n         }\n         if (key.IsCompressed()) {\n             CScript p2wpkh = GetScriptForDestination(WitnessV0KeyHash(keyid));\n@@ -447,7 +494,8 @@ bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)\n     return true;\n }\n \n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+/** Parse a public key that excludes origin information. */\n+std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n {\n     auto split = Split(sp, '/');\n     std::string str(split[0].begin(), split[0].end());\n@@ -484,6 +532,28 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool per\n     return MakeUnique<BIP32PubkeyProvider>(extpubkey, std::move(path), type);\n }\n \n+/** Parse a public key including origin information (if enabled). */\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+{\n+    auto origin_split = Split(sp, ']');\n+    if (origin_split.size() > 2) return nullptr;\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    auto slash_split = Split(origin_split[0].subspan(1), '/');\n+    if (slash_split[0].size() != 8) return nullptr;\n+    std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n+    if (!IsHex(fpr_hex)) return nullptr;\n+    auto fpr_bytes = ParseHex(fpr_hex);\n+    KeyOriginInfo info;\n+    static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n+    assert(fpr_bytes.size() == 4);\n+    std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n+    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!provider) return nullptr;\n+    return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n+}\n+\n /** Parse a script in a particular context. */\n std::unique_ptr<Descriptor> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n {"
      },
      {
        "sha": "c721b20ced88396e85f2bba390722ff15a1f6c7f",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c6281f18042da197a49c6a59b04279829cbbbc6/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c6281f18042da197a49c6a59b04279829cbbbc6/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=2c6281f18042da197a49c6a59b04279829cbbbc6",
        "patch": "@@ -686,6 +686,7 @@ bool HidingSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& inf\n \n bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n+bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return LookupHelper(origins, keyid, info); }\n bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n \n FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)"
      },
      {
        "sha": "689501269d05de68fd172e85b833f9c233c6cb24",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c6281f18042da197a49c6a59b04279829cbbbc6/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c6281f18042da197a49c6a59b04279829cbbbc6/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=2c6281f18042da197a49c6a59b04279829cbbbc6",
        "patch": "@@ -34,7 +34,7 @@ class SigningProvider\n     virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }\n     virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }\n     virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n-    virtual bool GetKeyOrigin(const CKeyID& id, KeyOriginInfo& info) const { return false; }\n+    virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n };\n \n extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n@@ -58,10 +58,12 @@ struct FlatSigningProvider final : public SigningProvider\n {\n     std::map<CScriptID, CScript> scripts;\n     std::map<CKeyID, CPubKey> pubkeys;\n+    std::map<CKeyID, KeyOriginInfo> origins;\n     std::map<CKeyID, CKey> keys;\n \n     bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n     bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n };\n "
      }
    ]
  },
  {
    "sha": "ff37459abc663403bdd1f9457d1580b188412c4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjM3NDU5YWJjNjYzNDAzYmRkMWY5NDU3ZDE1ODBiMTg4NDEyYzRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-09-03T21:04:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-21T03:29:02Z"
      },
      "message": "Add tests for key origin support",
      "tree": {
        "sha": "7533da962906f07fbb1a591586879b888dbfe0f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7533da962906f07fbb1a591586879b888dbfe0f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff37459abc663403bdd1f9457d1580b188412c4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff37459abc663403bdd1f9457d1580b188412c4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff37459abc663403bdd1f9457d1580b188412c4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff37459abc663403bdd1f9457d1580b188412c4c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c6281f18042da197a49c6a59b04279829cbbbc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c6281f18042da197a49c6a59b04279829cbbbc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c6281f18042da197a49c6a59b04279829cbbbc6"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 31,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f3083bab4a446ae5500beb09084da5749065baac",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 12,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff37459abc663403bdd1f9457d1580b188412c4c/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff37459abc663403bdd1f9457d1580b188412c4c/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=ff37459abc663403bdd1f9457d1580b188412c4c",
        "patch": "@@ -43,9 +43,12 @@ std::string MaybeUseHInsteadOfApostrophy(std::string ret)\n     return ret;\n }\n \n-void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts)\n+const std::set<std::vector<uint32_t>> ONLY_EMPTY{{}};\n+\n+void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts, const std::set<std::vector<uint32_t>>& paths = ONLY_EMPTY)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n+    std::set<std::vector<uint32_t>> left_paths = paths;\n \n     // Check that parsing succeeds.\n     auto parse_priv = Parse(MaybeUseHInsteadOfApostrophy(prv), keys_priv);\n@@ -84,7 +87,7 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n     for (size_t i = 0; i < max; ++i) {\n         const auto& ref = scripts[(flags & RANGE) ? i : 0];\n         for (int t = 0; t < 2; ++t) {\n-            FlatSigningProvider key_provider = (flags & HARDENED) ? keys_priv : keys_pub;\n+            const FlatSigningProvider& key_provider = (flags & HARDENED) ? keys_priv : keys_pub;\n             FlatSigningProvider script_provider;\n             std::vector<CScript> spks;\n             BOOST_CHECK((t ? parse_priv : parse_pub)->Expand(i, key_provider, spks, script_provider));\n@@ -100,9 +103,16 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n                     BOOST_CHECK_MESSAGE(SignSignature(Merge(keys_priv, script_provider), spks[n], spend, 0, 1, SIGHASH_ALL), prv);\n                 }\n             }\n-\n+            // Test whether the observed key path is present in the 'paths' variable (which contains expected, unobserved paths),\n+            // and then remove it from that set.\n+            for (const auto& origin : script_provider.origins) {\n+                BOOST_CHECK_MESSAGE(paths.count(origin.second.path), \"Unexpected key path: \" + prv);\n+                left_paths.erase(origin.second.path);\n+            }\n         }\n     }\n+    // Verify no expected paths remain that were not observed.\n+    BOOST_CHECK_MESSAGE(left_paths.empty(), \"Not all expected key paths found: \" + prv);\n }\n \n }\n@@ -114,7 +124,7 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     // Basic single-key compressed\n     Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n     Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n-    Check(\"pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}});\n+    Check(\"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}}, {{1,0x80000002UL,3,0x80000004UL}});\n     Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n     Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n \n@@ -135,20 +145,26 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n \n     // Versions with BIP32 derivations\n-    Check(\"combo(xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo(xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}});\n-    Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}});\n-    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}});\n-    Check(\"wpkh(xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh(xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}});\n-    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}});\n-    Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}});\n+    Check(\"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}});\n+    Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}}, {{0}});\n+    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}}, {{0xFFFFFFFFUL,0}});\n+    Check(\"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}}, {{0x8000000DUL, 1, 2, 0}, {0x8000000DUL, 1, 2, 1}, {0x8000000DUL, 1, 2, 2}});\n+    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}}, {{10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n+    Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}}, {{0}, {1}});\n+    CheckUnparsable(\"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\"); // Too long key fingerprint\n     CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\"); // BIP 32 path element overflow\n \n     // Multisig constructions\n     Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n-    Check(\"sh(multi(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}});\n-    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}}, {{0xFFFFFFFFUL,0}, {1,2,0}, {1,2,1}, {1,2,2}, {10, 20, 30, 40, 0x80000000UL}, {10, 20, 30, 40, 0x80000001UL}, {10, 20, 30, 40, 0x80000002UL}});\n     Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n     CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Double key origin descriptor\n+    CheckUnparsable(\"wsh(multi(2,[aaaagaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaagaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Non hex fingerprint\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaaa],xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaa],xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // No public key with origin\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Too short fingerprint\n+    CheckUnparsable(\"wsh(multi(2,[aaaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,[aaaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\"); // Too long fingerprint\n \n     // Check for invalid nesting of structures\n     CheckUnparsable(\"sh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\"); // P2SH needs a script, not a key"
      },
      {
        "sha": "881b839a4e259a575f63d5f85e270b8cda99e6da",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff37459abc663403bdd1f9457d1580b188412c4c/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff37459abc663403bdd1f9457d1580b188412c4c/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=ff37459abc663403bdd1f9457d1580b188412c4c",
        "patch": "@@ -65,6 +65,8 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.007\"))\n \n         self.log.info(\"Test extended key derivation.\")\n+        # Run various scans, and verify that the sum of the amounts of the matches corresponds to the expected subset.\n+        # Note that all amounts in the UTXO set are powers of 2 multiplied by 0.001 BTC, so each amounts uniquely identifies a subset.\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0h/0h)\"])['total_amount'], Decimal(\"0.008\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1h)\"])['total_amount'], Decimal(\"0.016\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/1500')\"])['total_amount'], Decimal(\"0.032\"))\n@@ -82,7 +84,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1)\"])['total_amount'], Decimal(\"8.192\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1500)\"])['total_amount'], Decimal(\"16.384\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"])['total_amount'], Decimal(\"4.096\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\"])['total_amount'], Decimal(\"8.192\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo([abcdef88/1/2'/3/4h]tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\"])['total_amount'], Decimal(\"8.192\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1500)\"])['total_amount'], Decimal(\"16.384\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*')\", \"range\": 1499}])['total_amount'], Decimal(\"1.536\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*')\", \"range\": 1500}])['total_amount'], Decimal(\"3.584\"))"
      }
    ]
  },
  {
    "sha": "8afb166875ffa2c6fcc32068437588ab1e1d109c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWZiMTY2ODc1ZmZhMmM2ZmNjMzIwNjg0Mzc1ODhhYjFlMWQxMDlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-12T23:17:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-21T03:31:19Z"
      },
      "message": "Update documentation to incude origin information",
      "tree": {
        "sha": "910983934b111544f4b98ce543fe00818db246ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/910983934b111544f4b98ce543fe00818db246ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8afb166875ffa2c6fcc32068437588ab1e1d109c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afb166875ffa2c6fcc32068437588ab1e1d109c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8afb166875ffa2c6fcc32068437588ab1e1d109c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afb166875ffa2c6fcc32068437588ab1e1d109c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff37459abc663403bdd1f9457d1580b188412c4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff37459abc663403bdd1f9457d1580b188412c4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff37459abc663403bdd1f9457d1580b188412c4c"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 43,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b25678e06aac878e2ee7a14621c79c0685faaf42",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 43,
        "deletions": 9,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afb166875ffa2c6fcc32068437588ab1e1d109c/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afb166875ffa2c6fcc32068437588ab1e1d109c/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=8afb166875ffa2c6fcc32068437588ab1e1d109c",
        "patch": "@@ -34,6 +34,7 @@ Output descriptors currently support:\n - `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n - `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n - `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)` describes a set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint `d34db33f`, and derived using path `44'/0'/0'`.\n - `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n@@ -52,14 +53,20 @@ Descriptors consist of several types of expressions. The top level expression is\n - `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n \n `KEY` expressions:\n-- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n-  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n-- [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n--`xpub` encoded extended public key or `xprv` encoded private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n-  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n-  - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n-  - The usage of hardened derivation steps requires providing the private key.\n-  - Instead of a `'`, the suffix `h` can be used to denote hardened derivation.\n+- Optionally, key origin information, consisting of:\n+  - An open bracket `[`\n+  - Exactly 8 hex characters for the fingerprint of the key where the derivation starts (see BIP32 for details)\n+  - Followed by zero or more `/NUM` or `/NUM'` path elements to indicate unhardened or hardened derivation steps between the fingerprint and the key or xpub/xprv root that follows\n+  - A closing bracket `]`\n+- Followed by the actual key, which is either:\n+  - Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+    - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+  - [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+  -`xpub` encoded extended public key or `xprv` encoded private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n+    - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+    - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n+    - The usage of hardened derivation steps requires providing the private key.\n+- Anywhere a `'` suffix is permitted to denote hardened derivation, the suffix `h` can be used instead.\n \n `ADDR` expressions are any type of supported address:\n - P2PKH addresses (base58, of the form `1...`). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n@@ -116,6 +123,33 @@ Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n key.\n \n+### Key origin identification\n+\n+In order to describe scripts whose signing keys reside on another device,\n+it may be necessary to identify the master key and derivation path an\n+xpub was derived with.\n+\n+For example, when following BIP44, it would be useful to describe a\n+change chain directly as `xpub.../44'/0'/0'/1/*` where `xpub...`\n+corresponds with the master key `m`. Unfortunately, since there are\n+hardened derivation steps that follow the xpub, this descriptor does not\n+let you compute scripts without access to the corresponding private keys.\n+Instead, it should be written as `xpub.../1/*`, where xpub corresponds to\n+`m/44'/0'/0'`.\n+\n+When interacting with a hardware device, it may be necessary to include\n+the entire path from the master down. BIP174 standardizes this by\n+providing the master key *fingerprint* (first 32 bit of the Hash160 of\n+the master pubkey), plus all derivation steps. To support constructing\n+these, we permit providing this key origin information inside the\n+descriptor language, even though it does not affect the actual\n+scriptPubKeys it refers to.\n+\n+Every public key can be prefixed by an 8-character hexadecimal\n+fingerprint plus optional derivation steps (hardened and unhardened)\n+surrounded by brackets, identifying the master and derivation path the key or xpub\n+that follows was derived with.\n+\n ### Including private keys\n \n Often it is useful to communicate a description of scripts along with the\n@@ -130,4 +164,4 @@ In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, the set only includes P2PK and P2PKH scripts.\n\\ No newline at end of file\n+uncompressed, the set only includes P2PK and P2PKH scripts."
      }
    ]
  }
]