jonasschnelli,2018-09-06T20:24:59Z,utACK e11d7ea24b7c67793ab8e84b5ad05d233f43e7da,https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-419229227,419229227,
Sjors,2018-09-13T19:12:19Z,Perhaps @achow101 can use this in #14021?,https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-421119443,421119443,
achow101,2018-09-13T23:53:43Z,@Sjors I don't think this would be useful there. Instead we should have some new command that lets us import descriptors into the wallet.,https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-421187863,421187863,
sipa,2018-10-12T23:20:40Z,"Rebased, and expanded documentation to include key origin information.",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-429487788,429487788,
ryanofsky,2018-10-16T19:06:05Z,"Was there a problem with the last rebase? It seems like some changes that were previously made, like https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215631128, have been reverted.",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430359968,430359968,
meshcollider,2018-10-16T21:46:05Z,"Concept ACK, will wait for the rebase to be fixed before reviewing then",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430412503,430412503,
sipa,2018-10-17T01:18:25Z,"@ryanofsky Wow, indeed, thanks for pointing that out. I don't know how that happened.\n\nI went through all comments again, and reapplied the fixed I made earlier where necessary. I've also expanded the documentation change a bit.",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430455453,430455453,
sipa,2018-10-17T21:12:57Z,"@ryanofsky Addressed all your comments except the syntax issue, which we should probably discuss at the PR level rather than buried inside a code comment.\n\nI agree that `fpr/path:key/path` doesn't perfectly map with intuition about precedence of operation. On the other hand, I'd prefer to keep ""key operations"" as pure syntax, separated from ""script operations"" which are functions.\n\nAfter t",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430791765,430791765,
ryanofsky,2018-10-17T22:24:52Z,"> Longer term this feature helps with a potential descriptors-based walletless PSBT updater, or for importing hardware wallet xpubs (once the wallet can import descriptors).\n\nCould you explain how these use-cases benefit from having origin information embedded inside descriptor expressions? It seems like it might be simpler if the descriptor language only described how things should be signed,",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430810840,430810840,
sipa,2018-10-17T22:27:48Z,"@ryanofsky A PSBT updater needs to add key origin information to the PSBT file, or future signers may not be able to find the key to sign with.\n\nI really think this information needs to be part of descriptors for them to be generally useful. Just listing the public keys is useless if those using the information don't know how to find the private key corresponding to said public key. In a way, ",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430811515,430811515,
sipa,2018-10-17T22:52:56Z,"Switched to the `[fpr/path]key/path` notation, updating the parser, serializer, tests, and documentation.\n\nAs far as other attributes go, I'm not sure descriptors are the right place (this may be getting philosophical, though):\n* a timestamp is more a descriptor-level property than a key specific thing (you care about when any output generated by the descriptor can be used at the earliest, n",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430816866,430816866,
instagibbs,2018-10-18T15:50:30Z,"~~concept ACK, if rebase is fixed I'll review further~~",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431062031,431062031,
ryanofsky,2018-10-18T16:09:24Z,"> if rebase is fixed I'll review further\n\nI don't think there's a problem with current version of this PR (cfc812992da86d00406072fe8d3e7e2611c67882). The earlier comment https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-430359968 was referring to 605367580b582a6e9510a06670cfd4898168cea5.\n",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431068876,431068876,
instagibbs,2018-10-18T16:16:02Z,"Oops, I reviewed 2 days ago and didn't refresh this page to see updates!",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431071175,431071175,
sipa,2018-10-18T23:13:37Z,"Addressed further comments in separate commits, will squash when ready.",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431194475,431194475,
instagibbs,2018-10-18T23:29:27Z,re-ACK,https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431197256,431197256,
ryanofsky,2018-10-19T16:18:23Z,"utACK 91cff98264ba5c6a86ca5d18b2591f759cffe793, just documentation fixes and two variable cleanups",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431418156,431418156,
DrahtBot,2018-10-20T10:29:27Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14505 (Make all single parameter constructors explicit (C++11) by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431568609,431568609,
sipa,2018-10-21T01:34:36Z,"Squashed fixups, no tree changes.",https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431631126,431631126,
sipa,2018-10-21T03:32:52Z,Rebased afa9224b14 -> 8afb166875,https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431635998,431635998,
instagibbs,2018-10-22T13:51:01Z,utACK https://github.com/bitcoin/bitcoin/commit/8afb166875ffa2c6fcc32068437588ab1e1d109c,https://github.com/bitcoin/bitcoin/pull/14150#issuecomment-431841623,431841623,
promag,2018-09-06T13:46:10Z,"IMO could be `..., CPubKey& pubkey, KeyOriginInfo& origin)`. The code below is not very clear:\n```cpp\n        for (auto& entry : entries) {\n            pubkeys.push_back(entry.first);\n            out.origins.emplace(entry.first.GetID(), std::move(entry.second));\n            out.pubkeys.emplace(entry.first.GetID(), std::move(entry.first));\n        }\n```",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215631128,215631128,src/script/descriptor.cpp
promag,2018-09-06T13:57:48Z,"Why 2 iterations? Couldn't this be:\n```cpp\nstd::vector<CPubKey> pubkeys;\npubkeys.reserve(m_providers.size());\nfor (const auto& p : m_providers) {\n    CPubKey pubkey;\n    KeyOriginInfo origin;\n    if (!p->GetPubKey(pos, arg, pubkey, origin)) return false;\n    pubkeys.push_back(pubkey);\n    out.origins.emplace(pubkey.GetID(), std::move(origin));\n    out.pubkeys.emplace(pubkey.Get",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215635478,215635478,src/script/descriptor.cpp
sipa,2018-09-06T16:45:34Z,"Agree, that's actually simpler. Done.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215698327,215698327,src/script/descriptor.cpp
sipa,2018-09-06T16:45:55Z,I don't like interfaces that populate output argument when failure occurs.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215698452,215698452,src/script/descriptor.cpp
promag,2018-09-06T16:52:09Z,Ah agree on that.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215700406,215700406,src/script/descriptor.cpp
Sjors,2018-09-07T14:15:07Z,"Maybe add a comment:\n`// Check if origin information (master key fingerprint, derivation path) is present`\n\nIt's actually not obvious to me how this test checks that an origin string passed into the test is actually stored correctly.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215972949,215972949,src/test/descriptor_tests.cpp
Sjors,2018-09-07T14:21:32Z,In BIP32 this test vector is `m/0/2147483647'/1/2147483646'` derived from master seed `fffcf9f...`. It would be better to use that for the origin info.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r215975087,215975087,src/test/descriptor_tests.cpp
practicalswift,2018-09-09T22:47:31Z,"```\nwarning: 'ONLY_EMPTY' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]\n```",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216172902,216172902,src/test/descriptor_tests.cpp
practicalswift,2018-09-09T22:48:36Z,"```\nwarning: function 'FlatSigningProvider::GetKeyOrigin' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]\n```",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216172936,216172936,src/script/sign.h
practicalswift,2018-09-09T22:51:35Z,"```\nwarning: std::move of the variable 'key' of the trivially-copyable type 'CPubKey' has no effect; remove std::move() [hicpp-move-const-arg]\n```",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216173046,216173046,src/script/descriptor.cpp
practicalswift,2018-09-09T22:52:06Z,"```\nwarning: std::move of the expression of the trivially-copyable type 'CPubKey' has no effect; remove std::move() [performance-move-const-arg]\n```",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216173061,216173061,src/script/descriptor.cpp
sipa,2018-09-10T01:37:14Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216180833,216180833,src/test/descriptor_tests.cpp
sipa,2018-09-10T01:37:23Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216180843,216180843,src/script/descriptor.cpp
sipa,2018-09-10T01:37:30Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216180850,216180850,src/script/descriptor.cpp
sipa,2018-09-10T01:37:39Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r216180863,216180863,src/script/sign.h
practicalswift,2018-09-25T19:31:43Z,"```\n2018-09-25 20:23:55 clang(pr=14150): script/descriptor.cpp:179:69: warning: implicit conversion changes signedness: 'int' to 'std::vector<unsigned int, std::allocator<unsigned int> >::value_type' (aka 'unsigned int') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r220325702,220325702,src/script/descriptor.cpp
sipa,2018-10-12T22:11:43Z,Added some comments.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r224927810,224927810,src/test/descriptor_tests.cpp
sipa,2018-10-12T22:12:54Z,"Meh.\n\nThis is not testing BIP32; it's just reusing the BIP32 tests because that was an easy place to find example xpubs/xprvs.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r224927997,224927997,src/test/descriptor_tests.cpp
sipa,2018-10-12T22:13:03Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r224928027,224928027,src/script/descriptor.cpp
ryanofsky,2018-10-17T18:03:59Z,"Maybe `assert(fpr_bytes.size() == sizeof(info.fingerprint))` here. Or `static_assert(sizeof(info.fingerprint) == 4)`. It's clear this is correct right now, but since this is copying into a raw array, you could imagine small changes that would lead this code to silently corrupt memory in the future.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226037532,226037532,src/script/descriptor.cpp
ryanofsky,2018-10-17T18:10:44Z,"Could maybe simplify and avoid a copy with:\n\n```c++\nentries.emplace_back();\nif (!p->GetPubKey(pos, arg, entries.back().first, entries.back().second)) return false;\n```",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226039853,226039853,src/script/descriptor.cpp
ryanofsky,2018-10-17T18:13:39Z,"I also couldn't see why the code was written this way. Maybe add comment for `entries` like `/* Temporary entries, to avoid modifying out in case of failure */`. ",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226040868,226040868,src/script/descriptor.cpp
ryanofsky,2018-10-17T18:23:30Z,"Ignore this comment if you just have a different style preference, but the hardcoded `+ 4`'s in this PR do not seem like the safest thing to me. (I also don't love the raw `0x80000000UL` constants.)\n\nWould you consider using `HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint))` here? begin/end could also work in the `std::copy` calls.\n\nAnother option could be to add a ",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226044323,226044323,src/script/descriptor.cpp
ryanofsky,2018-10-17T19:31:56Z,"This syntax is slightly weird to me because if you're looking at an expression like:\n\n`fingerprint/path1:xpub/path2`\n\nThe `fingerprint:path1` part only describes `xpub`, not `xpub/path2`, but there's no logical precedence of `:` and `/` operators that would lead me to see:\n\n(`fingerprint/path1:xpub`)`/path2`\n\ninstead of:\n\n(`fingerprint/path1`):(`xpub/path2`)\n\nMaybe this is ",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226066149,226066149,doc/descriptors.md
ryanofsky,2018-10-17T19:38:23Z,Could add CheckUnparsable checks for this condition and the !IsHex one below. Also maybe the !provider one.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226067945,226067945,src/script/descriptor.cpp
sipa,2018-10-17T21:07:06Z,Done.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226095143,226095143,src/script/descriptor.cpp
sipa,2018-10-17T21:08:14Z,"I've added `std::begin`/`std::end` in a number of places, and replaced the other 4s with `sizeof(info.fingerprint)`. In C++17 we can use `std::size(info.fingerprint)` which would remain correct if the elements of the fingerprint weren't `sizeof()==1`, but that's too much work now.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226095520,226095520,src/script/descriptor.cpp
sipa,2018-10-17T21:08:43Z,Done.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226095670,226095670,src/script/descriptor.cpp
sipa,2018-10-17T21:08:53Z,"Done, both.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226095721,226095721,src/script/descriptor.cpp
ryanofsky,2018-10-18T14:47:57Z,"It would be good to rename `colon_split`, since colon is no longer used. Maybe `origin_split`.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226336422,226336422,src/script/descriptor.cpp
ryanofsky,2018-10-18T14:55:29Z,"It might be more accurate to replace ""key that follows"" with ""key or xpub/xprv root that follows"" since the derivation steps are just for the root, not the full `KEY` expression.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226339676,226339676,doc/descriptors.md
ryanofsky,2018-10-18T15:00:56Z,"Would it be clearer to replace ""fingerprint"" with ""extended key identifier""? Could also link to https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#key-identifiers if so.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226341925,226341925,doc/descriptors.md
instagibbs,2018-10-18T16:24:28Z,"It's specifically ""The first 32 bits of the identifier are called the key fingerprint."", not the entire identifier.\n\nI think ""master fingerprint"" is more specific if we're going to change this. ",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226375490,226375490,doc/descriptors.md
instagibbs,2018-10-18T16:30:29Z,"ultra-micro nit: you used `i` earlier in the paragraph, and now `*` to describe the chain.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226377604,226377604,doc/descriptors.md
instagibbs,2018-10-18T16:34:03Z,Could there be a comment to point out what it's doing? As a reader of the test this is basically lost in the pile.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226379316,226379316,test/functional/rpc_scantxoutset.py
sipa,2018-10-18T19:14:03Z,"It isn't required to be the master fingerprint; just whatever key the device with the private key is on needs to derivate from. I guess most commonly that will be the master, but it could be a child key as well.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226431714,226431714,doc/descriptors.md
instagibbs,2018-10-18T19:27:11Z,"right, good point, I retract and ACK current language",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226435535,226435535,doc/descriptors.md
sipa,2018-10-18T23:10:14Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226493259,226493259,src/script/descriptor.cpp
sipa,2018-10-18T23:10:24Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226493280,226493280,doc/descriptors.md
sipa,2018-10-18T23:10:43Z,I've expanded the comment slightly anyway.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226493335,226493335,doc/descriptors.md
sipa,2018-10-18T23:11:01Z,"Fixed, this was from a much earlier version.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226493387,226493387,doc/descriptors.md
sipa,2018-10-18T23:12:19Z,"Not sure what you're asking. I've added 2 lines of comment on this block of tests.\n\nOr is it specifically about this including of the key origin in the test? It has no effect, as for now key origins are not observable anyway. So this is just testing that you can in fact specify one, and nothing breaks.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226493607,226493607,test/functional/rpc_scantxoutset.py
instagibbs,2018-10-18T23:18:02Z,"I meant to a reader of the entire test itself, not the diff.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226494548,226494548,test/functional/rpc_scantxoutset.py
sipa,2018-10-18T23:21:45Z,"Ok, is what I added sufficient?",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226495195,226495195,test/functional/rpc_scantxoutset.py
meshcollider,2018-10-19T00:18:49Z,I think you meant to use this below,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226503620,226503620,src/script/descriptor.cpp
meshcollider,2018-10-19T00:27:45Z,"Using backticks (`) rather than quotes around /NUM and /NUM' is better for clarity, like below\n\nAlso tiny nit, typo in commit message.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226504682,226504682,doc/descriptors.md
sipa,2018-10-19T01:21:53Z,Fixed; removed it.,https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226511037,226511037,src/script/descriptor.cpp
sipa,2018-10-19T01:22:05Z,"Fixed.\n\nWill fix typo when squashing.",https://github.com/bitcoin/bitcoin/pull/14150#discussion_r226511053,226511053,doc/descriptors.md
