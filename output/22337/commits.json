[
  {
    "sha": "9571c69b51115454c6a699be9492024f7b46c2b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTcxYzY5YjUxMTE1NDU0YzZhNjk5YmU5NDkyMDI0ZjdiNDZjMmI0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T20:34:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-01T16:57:12Z"
      },
      "message": "Add bilingual_str::clear()",
      "tree": {
        "sha": "c5b4a8bd466d4141108b729605a022cf0103e7f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b4a8bd466d4141108b729605a022cf0103e7f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9571c69b51115454c6a699be9492024f7b46c2b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9571c69b51115454c6a699be9492024f7b46c2b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9571c69b51115454c6a699be9492024f7b46c2b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9571c69b51115454c6a699be9492024f7b46c2b4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a926d6dfd291da5578d8af422bde03fd17456d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a926d6dfd291da5578d8af422bde03fd17456d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a926d6dfd291da5578d8af422bde03fd17456d96"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "62388b568c37e9b6746e7c6527b41cf3d4a288f7",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9571c69b51115454c6a699be9492024f7b46c2b4/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9571c69b51115454c6a699be9492024f7b46c2b4/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=9571c69b51115454c6a699be9492024f7b46c2b4",
        "patch": "@@ -28,6 +28,12 @@ struct bilingual_str {\n     {\n         return original.empty();\n     }\n+\n+    void clear()\n+    {\n+        original.clear();\n+        translated.clear();\n+    }\n };\n \n inline bilingual_str operator+(bilingual_str lhs, const bilingual_str& rhs)"
      }
    ]
  },
  {
    "sha": "171366e89b828a557f8262d9dc14ff7a03f813f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzEzNjZlODliODI4YTU1N2Y4MjYyZDlkYzE0ZmY3YTAzZjgxM2Y3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T20:54:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-01T16:57:51Z"
      },
      "message": "Use bilingual_str for address fetching functions\n\nFor GetNewDestination, GetNewChangeDestination, and\nGetReservedDestination, use bilingual_str for\nerrors",
      "tree": {
        "sha": "c8f8f19149131309d1df93a1c98048696206350f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8f8f19149131309d1df93a1c98048696206350f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/171366e89b828a557f8262d9dc14ff7a03f813f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171366e89b828a557f8262d9dc14ff7a03f813f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/171366e89b828a557f8262d9dc14ff7a03f813f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171366e89b828a557f8262d9dc14ff7a03f813f7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9571c69b51115454c6a699be9492024f7b46c2b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9571c69b51115454c6a699be9492024f7b46c2b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9571c69b51115454c6a699be9492024f7b46c2b4"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 39,
      "deletions": 36
    },
    "files": [
      {
        "sha": "061659818f1332a53f6f7a8a57918d0c9dde50f5",
        "filename": "src/test/util/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/test/util/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/test/util/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -8,6 +8,7 @@\n #include <outputtype.h>\n #include <script/standard.h>\n #ifdef ENABLE_WALLET\n+#include <util/translation.h>\n #include <wallet/wallet.h>\n #endif\n \n@@ -18,7 +19,7 @@ std::string getnewaddress(CWallet& w)\n {\n     constexpr auto output_type = OutputType::BECH32;\n     CTxDestination dest;\n-    std::string error;\n+    bilingual_str error;\n     if (!w.GetNewDestination(output_type, \"\", dest, error)) assert(false);\n \n     return EncodeDestination(dest);"
      },
      {
        "sha": "2c891c3c1ec60dce22ab551823416b3b46996a30",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -16,6 +16,7 @@\n #include <uint256.h>\n #include <util/check.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <util/ui_change_type.h>\n #include <wallet/context.h>\n #include <wallet/feebumper.h>\n@@ -130,7 +131,7 @@ class WalletImpl : public Wallet\n     bool getNewDestination(const OutputType type, const std::string label, CTxDestination& dest) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        std::string error;\n+        bilingual_str error;\n         return m_wallet->GetNewDestination(type, label, dest, error);\n     }\n     bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) override"
      },
      {
        "sha": "2ac87ea211c7ef7449c568043d43dccdef42b932",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -275,9 +275,9 @@ static RPCHelpMan getnewaddress()\n     }\n \n     CTxDestination dest;\n-    std::string error;\n+    bilingual_str error;\n     if (!pwallet->GetNewDestination(output_type, label, dest, error)) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error);\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error.original);\n     }\n \n     return EncodeDestination(dest);\n@@ -322,9 +322,9 @@ static RPCHelpMan getrawchangeaddress()\n     }\n \n     CTxDestination dest;\n-    std::string error;\n+    bilingual_str error;\n     if (!pwallet->GetNewChangeDestination(output_type, dest, error)) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error);\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error.original);\n     }\n     return EncodeDestination(dest);\n },"
      },
      {
        "sha": "54707cc569a68e687fba878eb7e7dc2defa1d664",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -20,10 +20,10 @@\n //! Value for the first BIP 32 hardened derivation. Can be used as a bit mask and as a value. See BIP 32 for more details.\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n-bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, bilingual_str& error)\n {\n     if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n-        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\");\n         return false;\n     }\n     assert(type != OutputType::BECH32M);\n@@ -34,7 +34,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n     // Generate a new key that is added to wallet\n     CPubKey new_key;\n     if (!GetKeyFromPool(new_key, type)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\");\n         return false;\n     }\n     LearnRelatedScripts(new_key, type);\n@@ -295,22 +295,22 @@ bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBat\n     return true;\n }\n \n-bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, bilingual_str& error)\n {\n     if (LEGACY_OUTPUT_TYPES.count(type) == 0) {\n-        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\").translated;\n+        error = _(\"Error: Legacy wallets only support the \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\" address types\");\n         return false;\n     }\n     assert(type != OutputType::BECH32M);\n \n     LOCK(cs_KeyStore);\n     if (!CanGetAddresses(internal)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\");\n         return false;\n     }\n \n     if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\");\n         return false;\n     }\n     address = GetDestinationForKey(keypool.vchPubKey, type);\n@@ -1613,11 +1613,11 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     return set_address;\n }\n \n-bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, bilingual_str& error)\n {\n     // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n     if (!CanGetAddresses()) {\n-        error = \"No addresses available\";\n+        error = _(\"No addresses available\");\n         return false;\n     }\n     {\n@@ -1636,12 +1636,12 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n         std::vector<CScript> scripts_temp;\n         if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n             // We can't generate anymore keys\n-            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            error = _(\"Error: Keypool ran out, please call keypoolrefill first\");\n             return false;\n         }\n         if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n             // We can't generate anymore keys\n-            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            error = _(\"Error: Keypool ran out, please call keypoolrefill first\");\n             return false;\n         }\n \n@@ -1721,7 +1721,7 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n     return true;\n }\n \n-bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error)\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, bilingual_str& error)\n {\n     LOCK(cs_desc_man);\n     bool result = GetNewDestination(type, address, error);"
      },
      {
        "sha": "c9c35bea329674cfffe5f75ca174bfa5ea493991",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -174,14 +174,14 @@ class ScriptPubKeyMan\n public:\n     explicit ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage) {}\n     virtual ~ScriptPubKeyMan() {};\n-    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, bilingual_str& error) { return false; }\n     virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n \n     //! Check that the given decryption key is valid for this ScriptPubKeyMan, i.e. it decrypts all of the keys handled by it.\n     virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n     virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n \n-    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) { return false; }\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, bilingual_str& error) { return false; }\n     virtual void KeepDestination(int64_t index, const OutputType& type) {}\n     virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n \n@@ -355,13 +355,13 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n-    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, bilingual_str& error) override;\n     isminetype IsMine(const CScript& script) const override;\n \n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, bilingual_str& error) override;\n     void KeepDestination(int64_t index, const OutputType& type) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination&) override;\n \n@@ -559,13 +559,13 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     mutable RecursiveMutex cs_desc_man;\n \n-    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, bilingual_str& error) override;\n     isminetype IsMine(const CScript& script) const override;\n \n     bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n     bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n \n-    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, std::string& error) override;\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool, bilingual_str& error) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n \n     // Tops up the descriptor cache and m_map_script_pub_keys. The cache is stored in the wallet file"
      },
      {
        "sha": "cd51ead539d84c1f45d74c5893c3f2b69b49ce86",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -618,9 +618,9 @@ bool CWallet::CreateTransactionInternal(\n         // Reserve a new key pair from key pool. If it fails, provide a dummy\n         // destination in case we don't need change.\n         CTxDestination dest;\n-        std::string dest_err;\n+        bilingual_str dest_err;\n         if (!reservedest.GetReservedDestination(dest, true, dest_err)) {\n-            error = strprintf(_(\"Transaction needs a change address, but we can't generate it. %s\"), dest_err);\n+            error = _(\"Transaction needs a change address, but we can't generate it.\") + Untranslated(\" \") + dest_err;\n         }\n         scriptChange = GetScriptForDestination(dest);\n         // A valid destination implies a change script (and"
      },
      {
        "sha": "3488ae3526d77761d283881f3541de6a7943d59e",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -7,6 +7,7 @@\n #include <primitives/transaction.h>\n #include <random.h>\n #include <test/util/setup_common.h>\n+#include <util/translation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/coinselection.h>\n #include <wallet/test/wallet_test_fixture.h>\n@@ -66,7 +67,7 @@ static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bo\n     tx.vout[nInput].nValue = nValue;\n     if (spendable) {\n         CTxDestination dest;\n-        std::string error;\n+        bilingual_str error;\n         const bool destination_ok = wallet.GetNewDestination(OutputType::BECH32, \"\", dest, error);\n         assert(destination_ok);\n         tx.vout[nInput].scriptPubKey = GetScriptForDestination(dest);"
      },
      {
        "sha": "2a4361047d09f1a4c0b3d70b47262ea107772bd8",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -601,7 +601,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n     CTxDestination dest;\n-    std::string error;\n+    bilingual_str error;\n     BOOST_CHECK(!wallet->GetNewDestination(OutputType::BECH32, \"\", dest, error));\n }\n "
      },
      {
        "sha": "a8e0765a589b8d8d2213e152ef5a1d817839df93",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -2128,7 +2128,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return res;\n }\n \n-bool CWallet::GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error)\n+bool CWallet::GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, bilingual_str& error)\n {\n     LOCK(cs_wallet);\n     error.clear();\n@@ -2138,7 +2138,7 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n         spk_man->TopUp();\n         result = spk_man->GetNewDestination(type, dest, error);\n     } else {\n-        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type));\n     }\n     if (result) {\n         SetAddressBook(dest, label, \"receive\");\n@@ -2147,7 +2147,7 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n     return result;\n }\n \n-bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& dest, bilingual_str& error)\n {\n     LOCK(cs_wallet);\n     error.clear();\n@@ -2200,11 +2200,11 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n-bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal, std::string& error)\n+bool ReserveDestination::GetReservedDestination(CTxDestination& dest, bool internal, bilingual_str& error)\n {\n     m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n     if (!m_spk_man) {\n-        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type)).translated;\n+        error = strprintf(_(\"Error: No %s addresses available.\"), FormatOutputType(type));\n         return false;\n     }\n "
      },
      {
        "sha": "6403215b3be583a310eab8175ea71dc43b273b34",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171366e89b828a557f8262d9dc14ff7a03f813f7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=171366e89b828a557f8262d9dc14ff7a03f813f7",
        "patch": "@@ -183,7 +183,7 @@ class ReserveDestination\n     }\n \n     //! Reserve an address\n-    bool GetReservedDestination(CTxDestination& pubkey, bool internal, std::string& error);\n+    bool GetReservedDestination(CTxDestination& pubkey, bool internal, bilingual_str& error);\n     //! Return reserved address\n     void ReturnDestination();\n     //! Keep the address. Do not return it's key to the keypool when this object goes out of scope\n@@ -665,8 +665,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     void MarkDestinationsDirty(const std::set<CTxDestination>& destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n-    bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error);\n+    bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, bilingual_str& error);\n+    bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, bilingual_str& error);\n \n     isminetype IsMine(const CTxDestination& dest) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     isminetype IsMine(const CScript& script) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  },
  {
    "sha": "92993aa5cf37995e65e68dfd6f129ecaf418e01c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Mjk5M2FhNWNmMzc5OTVlNjVlNjhkZmQ2ZjEyOWVjYWY0MThlMDFj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-23T21:28:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-01T16:57:53Z"
      },
      "message": "Change SignTransaction's input_errors to use bilingual_str",
      "tree": {
        "sha": "006dbee203ef5a34530fcecec66de68e087fe45e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/006dbee203ef5a34530fcecec66de68e087fe45e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92993aa5cf37995e65e68dfd6f129ecaf418e01c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92993aa5cf37995e65e68dfd6f129ecaf418e01c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92993aa5cf37995e65e68dfd6f129ecaf418e01c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92993aa5cf37995e65e68dfd6f129ecaf418e01c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "171366e89b828a557f8262d9dc14ff7a03f813f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171366e89b828a557f8262d9dc14ff7a03f813f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/171366e89b828a557f8262d9dc14ff7a03f813f7"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 29,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f21eddf56cd8bb35eb977682d52e33f47f10d760",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -18,6 +18,7 @@\n #include <univalue.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n+#include <util/translation.h>\n \n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, bool rbf)\n {\n@@ -280,22 +281,22 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n     int nHashType = ParseSighashString(hashType);\n \n     // Script verification errors\n-    std::map<int, std::string> input_errors;\n+    std::map<int, bilingual_str> input_errors;\n \n     bool complete = SignTransaction(mtx, keystore, coins, nHashType, input_errors);\n     SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n }\n \n-void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, const std::map<int, std::string>& input_errors, UniValue& result)\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, const std::map<int, bilingual_str>& input_errors, UniValue& result)\n {\n     // Make errors UniValue\n     UniValue vErrors(UniValue::VARR);\n     for (const auto& err_pair : input_errors) {\n-        if (err_pair.second == \"Missing amount\") {\n+        if (err_pair.second.original == \"Missing amount\") {\n             // This particular error needs to be an exception for some reason\n             throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coins.at(mtx.vin.at(err_pair.first).prevout).out.ToString()));\n         }\n-        TxInErrorToJSON(mtx.vin.at(err_pair.first), vErrors, err_pair.second);\n+        TxInErrorToJSON(mtx.vin.at(err_pair.first), vErrors, err_pair.second.original);\n     }\n \n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));"
      },
      {
        "sha": "d2e116f7ee5d1b1d599841f282f8990d35534887",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -8,6 +8,7 @@\n #include <map>\n #include <string>\n \n+struct bilingual_str;\n class FillableSigningProvider;\n class UniValue;\n struct CMutableTransaction;\n@@ -25,7 +26,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n-void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, const std::map<int, std::string>& input_errors, UniValue& result);\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, const std::map<int, bilingual_str>& input_errors, UniValue& result);\n \n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it"
      },
      {
        "sha": "19129a884e8d8876b4efeddf7519fbca928956b0",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -11,6 +11,7 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <util/translation.h>\n #include <util/vector.h>\n \n typedef std::vector<unsigned char> valtype;\n@@ -626,7 +627,7 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n-bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, std::string>& input_errors)\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, bilingual_str>& input_errors)\n {\n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n \n@@ -658,7 +659,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         CTxIn& txin = mtx.vin[i];\n         auto coin = coins.find(txin.prevout);\n         if (coin == coins.end() || coin->second.IsSpent()) {\n-            input_errors[i] = \"Input not found or already spent\";\n+            input_errors[i] = _(\"Input not found or already spent\");\n             continue;\n         }\n         const CScript& prevPubKey = coin->second.out.scriptPubKey;\n@@ -674,20 +675,20 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n \n         // amount must be specified for valid segwit signature\n         if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n-            input_errors[i] = \"Missing amount\";\n+            input_errors[i] = _(\"Missing amount\");\n             continue;\n         }\n \n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount, txdata, MissingDataBehavior::FAIL), &serror)) {\n             if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n                 // Unable to sign input and verification failed (possible attempt to partially sign).\n-                input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";\n+                input_errors[i] = Untranslated(\"Unable to sign input, invalid stack size (possibly missing key)\");\n             } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n                 // Verification failed (possibly due to insufficient signatures).\n-                input_errors[i] = \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\";\n+                input_errors[i] = Untranslated(\"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\");\n             } else {\n-                input_errors[i] = ScriptErrorString(serror);\n+                input_errors[i] = Untranslated(ScriptErrorString(serror));\n             }\n         } else {\n             // If this input succeeds, make sure there is no error set for it"
      },
      {
        "sha": "b8fcac2e3cf3c0ed8690ef79184327c6afd2ff63",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -21,6 +21,7 @@ class CScript;\n class CTransaction;\n class SigningProvider;\n \n+struct bilingual_str;\n struct CMutableTransaction;\n \n /** Interface for signature creators. */\n@@ -178,6 +179,6 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script);\n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script);\n \n /** Sign the CMutableTransaction */\n-bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors);\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "684324c36ea060bc3fee07c1f56a1b04449bdddc",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -13,6 +13,7 @@\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <util/translation.h>\n \n #include <cassert>\n #include <cstdint>\n@@ -135,7 +136,7 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n                 }\n                 coins[*outpoint] = *coin;\n             }\n-            std::map<int, std::string> input_errors;\n+            std::map<int, bilingual_str> input_errors;\n             (void)SignTransaction(sign_transaction_tx_to, &provider, coins, fuzzed_data_provider.ConsumeIntegral<int>(), input_errors);\n         }\n     }"
      },
      {
        "sha": "2ff1f938d3895f8a02dad8ee80df7db0ca1861a8",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -294,7 +294,7 @@ CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactio\n     input_coins.insert({outpoint_to_spend, utxo_to_spend});\n     // - Default signature hashing type\n     int nHashType = SIGHASH_ALL;\n-    std::map<int, std::string> input_errors;\n+    std::map<int, bilingual_str> input_errors;\n     assert(SignTransaction(mempool_txn, &keystore, input_coins, nHashType, input_errors));\n \n     // If submit=true, add transaction to the mempool."
      },
      {
        "sha": "9c4f075605f6a70e2980def9a6360b5c5d8b7084",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -3389,7 +3389,7 @@ RPCHelpMan signrawtransactionwithwallet()\n     int nHashType = ParseSighashString(request.params[2]);\n \n     // Script verification errors\n-    std::map<int, std::string> input_errors;\n+    std::map<int, bilingual_str> input_errors;\n \n     bool complete = pwallet->SignTransaction(mtx, coins, nHashType, input_errors);\n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "b2e07a83079ef42ea5ba9787f779642ffde32d82",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -592,7 +592,7 @@ bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sig\n     }\n }\n \n-bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const\n {\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n@@ -2046,7 +2046,7 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n     return IsMine(script);\n }\n \n-bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const\n {\n     std::unique_ptr<FlatSigningProvider> keys = std::make_unique<FlatSigningProvider>();\n     for (const auto& coin_pair : coins) {"
      },
      {
        "sha": "5a28458abbe49c287223cb2adfb880e7c90ac373",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -230,7 +230,7 @@ class ScriptPubKeyMan\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n     /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n-    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const { return false; }\n     /** Sign a message with the given script */\n     virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n@@ -396,7 +396,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n-    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n     TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n \n@@ -601,7 +601,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n-    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n     TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n "
      },
      {
        "sha": "f30f50db773a05c656265999e4fe35dc5e267acd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -68,7 +68,7 @@ static CMutableTransaction TestSimpleSpend(const CTransaction& from, uint32_t in\n     keystore.AddKey(key);\n     std::map<COutPoint, Coin> coins;\n     coins[mtx.vin[0].prevout].out = from.vout[index];\n-    std::map<int, std::string> input_errors;\n+    std::map<int, bilingual_str> input_errors;\n     BOOST_CHECK(SignTransaction(mtx, &keystore, coins, SIGHASH_ALL, input_errors));\n     return mtx;\n }"
      },
      {
        "sha": "d16baf60e44a2ac0ec2f2ff70472193b0c481a8a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -1822,11 +1822,11 @@ bool CWallet::SignTransaction(CMutableTransaction& tx) const\n         const CWalletTx& wtx = mi->second;\n         coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n     }\n-    std::map<int, std::string> input_errors;\n+    std::map<int, bilingual_str> input_errors;\n     return SignTransaction(tx, coins, SIGHASH_DEFAULT, input_errors);\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const\n {\n     // Try to sign with all ScriptPubKeyMans\n     for (ScriptPubKeyMan* spk_man : GetAllScriptPubKeyMans()) {"
      },
      {
        "sha": "25f89e8ea473c35f2d26ed33c926d824c573aead",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92993aa5cf37995e65e68dfd6f129ecaf418e01c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=92993aa5cf37995e65e68dfd6f129ecaf418e01c",
        "patch": "@@ -563,7 +563,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     /** Fetch the inputs and sign with SIGHASH_ALL. */\n     bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     /** Sign the tx given the input coins and sighash. */\n-    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const;\n \n     /**"
      }
    ]
  }
]