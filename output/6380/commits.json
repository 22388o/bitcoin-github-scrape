[
  {
    "sha": "614601be8f30852a04214b652db45c20d920c70f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTQ2MDFiZThmMzA4NTJhMDQyMTRiNjUyZGI0NWMyMGQ5MjBjNzBm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-06T09:43:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:55:46Z"
      },
      "message": "rpc: Accept strings in AmountFromValue\n\nAccept strings containing decimal values, in addition to bare values.\n\nUseful from JSON-RPC implementations where it's not possible to have\ndirect control over the text of numbers (e.g. where numbers are always\ndoubles), and it's still desired to send an exact value.\n\nThis would allow users to post JSON content with numbers encoded like\n`{\"value\": \"0.00000001\"}` instead of `{\"value\": 0.00000001}` which some\nphp/python encoders wrap into 1e-8, or worse.",
      "tree": {
        "sha": "b38b3729b4db65068f7b8ac316d2575c3b4817fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b38b3729b4db65068f7b8ac316d2575c3b4817fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614601be8f30852a04214b652db45c20d920c70f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614601be8f30852a04214b652db45c20d920c70f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/614601be8f30852a04214b652db45c20d920c70f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614601be8f30852a04214b652db45c20d920c70f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d43297c5ba951df535df704e321a883f97475c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d43297c5ba951df535df704e321a883f97475c35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d43297c5ba951df535df704e321a883f97475c35"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "03c123a361ac8f83d55145fe3cf22c6cd3c1bad4",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614601be8f30852a04214b652db45c20d920c70f/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614601be8f30852a04214b652db45c20d920c70f/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=614601be8f30852a04214b652db45c20d920c70f",
        "patch": "@@ -120,8 +120,8 @@ void RPCTypeCheckObj(const UniValue& o,\n \n CAmount AmountFromValue(const UniValue& value)\n {\n-    if (!value.isNum())\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n+    if (!value.isNum() && !value.isStr())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number or string\");\n     CAmount amount;\n     if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");"
      }
    ]
  },
  {
    "sha": "7d226b7ca0516c349c73bd79df197a1a14922a1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDIyNmI3Y2EwNTE2YzM0OWM3M2JkNzlkZjE5N2ExYTE0OTIyYTFk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-14T19:13:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:55:46Z"
      },
      "message": "[QA] add testcases for parsing strings as values",
      "tree": {
        "sha": "3f3df372b4092c1db25f646151afde91d28a3a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f3df372b4092c1db25f646151afde91d28a3a05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d226b7ca0516c349c73bd79df197a1a14922a1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "614601be8f30852a04214b652db45c20d920c70f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614601be8f30852a04214b652db45c20d920c70f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/614601be8f30852a04214b652db45c20d920c70f"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 49,
      "deletions": 17
    },
    "files": [
      {
        "sha": "f9ec6f429bac5f3a11203c58e26b01eb36d08568",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 49,
        "deletions": 17,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d226b7ca0516c349c73bd79df197a1a14922a1d/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d226b7ca0516c349c73bd79df197a1a14922a1d/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=7d226b7ca0516c349c73bd79df197a1a14922a1d",
        "patch": "@@ -4,11 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Exercise the wallet.  Ported from wallet.sh.  \n+# Exercise the wallet.  Ported from wallet.sh.\n # Does the following:\n #   a) creates 3 nodes, with an empty chain (no blocks).\n #   b) node0 mines a block\n-#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none. \n+#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none.\n #   d) node0 sends 21 btc to node2, in two transactions (11 btc, then 10 btc).\n #   e) node0 mines a block, collects the fee on the second transaction\n #   f) node1 mines 100 blocks, to mature node0's just-mined block\n@@ -75,14 +75,14 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 21)\n \n         # Node0 should have two unspent outputs.\n-        # Create a couple of transactions to send them to node2, submit them through \n-        # node1, and make sure both node0 and node2 pick them up properly: \n+        # Create a couple of transactions to send them to node2, submit them through\n+        # node1, and make sure both node0 and node2 pick them up properly:\n         node0utxos = self.nodes[0].listunspent(1)\n         assert_equal(len(node0utxos), 2)\n \n         # create both transactions\n         txns_to_send = []\n-        for utxo in node0utxos: \n+        for utxo in node0utxos:\n             inputs = []\n             outputs = {}\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n@@ -149,35 +149,35 @@ def run_test (self):\n         sync_mempools(self.nodes)\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n-        \n+\n         #check if we can list zero value tx as available coins\n         #1. create rawtx\n-        #2. hex-changed one output to 0.0 \n+        #2. hex-changed one output to 0.0\n         #3. sign and send\n         #4. check if recipient (node0) can list the zero value tx\n         usp = self.nodes[1].listunspent()\n         inputs = [{\"txid\":usp[0]['txid'], \"vout\":usp[0]['vout']}]\n         outputs = {self.nodes[1].getnewaddress(): 49.998, self.nodes[0].getnewaddress(): 11.11}\n-        \n+\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n         signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         sendResp = self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n-        \n+\n         self.sync_all()\n         self.nodes[1].generate(1) #mine a block\n         self.sync_all()\n-        \n+\n         unspentTxs = self.nodes[0].listunspent() #zero value tx must be in listunspents output\n         found = False\n         for uTx in unspentTxs:\n             if uTx['txid'] == zeroValueTxid:\n                 found = True\n                 assert_equal(uTx['amount'], Decimal('0.00000000'));\n         assert(found)\n-        \n+\n         #do some -walletbroadcast tests\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -192,17 +192,17 @@ def run_test (self):\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n-        \n+\n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n-        \n+\n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n-        \n+\n         #restart the nodes with -walletbroadcast=1\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -211,12 +211,44 @@ def run_test (self):\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         sync_blocks(self.nodes)\n-        \n+\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n-        \n+\n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n         assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n-        \n+\n+        #send a tx with value in a string (PR#6380 +)\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-2.00000000'))\n+\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"0.0001\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #check if JSON parser can handle scientific notation in strings\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1e-4\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #this should fail\n+        errorString = \"\"\n+        try:\n+            txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"Invalid amount\" in errorString, True);\n+\n+        errorString = \"\"\n+        try:\n+            self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"not an integer\" in errorString, True);\n+\n+\n if __name__ == '__main__':\n     WalletTest ().main ()"
      }
    ]
  },
  {
    "sha": "9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTI3ZTk3NjZhN2U4ZTkxNzNiYTlkYWNjNTUxZWRhYTllMjQzZjRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:56:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:57:24Z"
      },
      "message": "doc: Mention RPC strings for monetary amounts in release notes\n\nAdd a section \"low level RPC API changes\" so that the changes with\nregard to error codes can be added later.",
      "tree": {
        "sha": "33746478cdca8fbb0523c864f8e51c8ab29dcf4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33746478cdca8fbb0523c864f8e51c8ab29dcf4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127e9766a7e8e9173ba9dacc551edaa9e243f4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d226b7ca0516c349c73bd79df197a1a14922a1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d226b7ca0516c349c73bd79df197a1a14922a1d"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7480a7cd216da0b246a0c8bf86323f88dd18a765",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9127e9766a7e8e9173ba9dacc551edaa9e243f4c/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9127e9766a7e8e9173ba9dacc551edaa9e243f4c/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
        "patch": "@@ -19,10 +19,13 @@ https://www.torproject.org/docs/tor-manual.html.en\n \n This allows running bitcoind without having to do any manual configuration.\n \n-Example header\n-----------------------\n+Low-level RPC API changes\n+--------------------------\n \n-Example content.\n+- Monetary amounts can be provided as strings. This means that for example the\n+  argument to sendtoaddress can be \"0.0001\" instead of 0.0001. This can be an\n+  advantage if a JSON library insists on using a lossy floating point type for\n+  numbers, which would be dangerous for monetary amounts.\n \n 0.12.0 Change log\n ================="
      }
    ]
  }
]