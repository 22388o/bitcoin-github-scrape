gmaxwell,2016-04-16T13:01:56Z,"meta-concept-ack.  A reasonable separation of concerns in the migration off of openssl is time of use addition of OS entropy, a replacement CSPRNG, and replacement seeding. Each of these can be done independently    Taking OS entropy at time of use for long term keys is a basic, sensible thing to do and protects users against flaws in the either the OS rng or the process CSPRNG. \n\nThe specific c",https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-210811528,210811528,
kirkalx,2016-04-17T04:30:32Z,Concept ACK. Minor point though: should use of /dev/urandom be protected by a HAVE_URANDOM or similar? Or is support for it universal on supported non-Windows systems?\n,https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-210955077,210955077,
sipa,2016-04-23T16:10:36Z,"Added a commit that uses LogPrintf + abort() in case of randomness failure. Adding the ability to install an error handler seems reasonable, but doing it correctly would require locking primitives~~, which would cause libconsensus to end up depending on boost again~~. After the C++11 switchover this will be much easier, and I'd prefer to do that in a separate PR then.\n\nEDIT: I'm wrong, libconsen",https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-213772997,213772997,
kirkalx,2016-04-24T03:33:22Z,"Perhaps RandFailure() could take a reason param (which would cover my concern above about relying on /dev/urandom to be present), but as you say, error handling for another PR...\n",https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-213876707,213876707,
laanwj,2016-04-25T10:53:34Z,"> Adding the ability to install an error handler seems reasonable, but doing it correctly would require locking primitives\n\nCouldn't you just require that the error handler is set from initialization before use of any of the functions? (e.g. AppInit2).\nYou don't have to support the scenario where the error handler is changed while your function is being called.\nFor example http and httprpc als",https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-214263060,214263060,
sipa,2016-04-25T14:31:38Z,On OSX /dev/urandom exists but does the same as /dev/random\n,https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-214361795,214361795,
sipa,2016-05-05T17:07:53Z,Anything left to do here?\n,https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-217212564,217212564,
gmaxwell,2016-05-20T01:11:46Z,ACK  (but someone should test on Windows).\n,https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-220493347,220493347,
paveljanik,2016-05-20T05:58:09Z,ACK https://github.com/bitcoin/bitcoin/pull/7891/commits/ecc71103fe9266ae42cb12853a258150c9e36249\n\nCan't test on Windows though.\n,https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-220523893,220523893,
paveljanik,2016-05-24T09:17:32Z,RfM\n,https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-221212401,221212401,
sipa,2016-05-24T14:14:02Z,@paveljanik ?\n,https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-221284243,221284243,
paveljanik,2016-05-24T14:17:17Z,"Ready for Merge\n\nHmm, but no testing yet on Windows.\n",https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-221285245,221285245,
sipa,2016-05-28T23:41:50Z,"Tested by compiling using depends/ for win64, and then running bitcoin-qt.exe on native Windows 7 64-bit, and typing `getnewaddress` few times in the debug console. The resulting addresses were all different.\n",https://github.com/bitcoin/bitcoin/pull/7891#issuecomment-222334749,222334749,
luke-jr,2016-04-16T10:56:55Z,"This doesn't look safe without a retry. read() doesn't guarantee the entire buffer gets filled ever, afaik.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r59965911,59965911,src/random.cpp
sipa,2016-04-16T11:06:44Z,"I believe there are some guarantees for reading from /dev/urandom always providing at least up to some number of bytes when requested, but it's better to be safe. I've replaced it with a loop.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r59966007,59966007,src/random.cpp
gmaxwell,2016-04-17T19:32:01Z,"We should be doing something stronger than assert here. If the code is compiled with assertions disabled, this code would be incorrect. Assertions should be used for invariants, not error handling.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r59990802,59990802,src/random.cpp
sipa,2016-04-19T18:09:57Z,"Agree, will fix.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r60281457,60281457,src/random.cpp
sipa,2016-04-19T18:16:43Z,Hmm... abort() or raise a C++ exception or depend on ui_interface.h (yuck) to call ThreadSafeMessageBox?\n,https://github.com/bitcoin/bitcoin/pull/7891#discussion_r60282687,60282687,src/random.cpp
laanwj,2016-04-20T12:48:18Z,"There's not really a good way to do a global abort at the moment from this place.\n`AbortNode()` is the closest, it shows a message and does a more graceful shutdown, but that would introduce a dependency on main.cpp.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r60400131,60400131,src/random.cpp
laanwj,2016-04-20T12:49:04Z,"To avoid the main dependency, and if you want to structure this as a library, maybe add a function to register a fatal error handler? (which we would point to AbortNode, then raise an exception to kill the current thread). It could still call `abort()` if nothing registered.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r60400219,60400219,src/random.cpp
dcousens,2016-04-21T03:47:07Z,"Raise an exception is the most appropriate action here.\nIf it isn't thorough enough, maybe catch it at a higher level and then call `AbortNode`?\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r60522713,60522713,src/random.cpp
sipa,2016-04-21T04:39:12Z,"My worry about exceptions is that it may be caught somewhere without\ncausing a shutdown, and it is hard to verify this for all call sites.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r60525405,60525405,src/random.cpp
laanwj,2016-04-22T06:30:53Z,"Exceptions should be for reasonably-normal problems which the application could, in principle, handle (it may still AbortNode of them, obviously). This is not one of them.\nReally this is more territory for a fatal error handler routine.\n",https://github.com/bitcoin/bitcoin/pull/7891#discussion_r60696036,60696036,src/random.cpp
