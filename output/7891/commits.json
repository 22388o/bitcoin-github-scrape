[
  {
    "sha": "fa2637a3beb8677067015df3d9d7b394fa837c2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI2MzdhM2JlYjg2NzcwNjcwMTVkZjNkOWQ3YjM5NGZhODM3YzJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-16T10:25:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-28T23:52:17Z"
      },
      "message": "Always require OS randomness when generating secret keys",
      "tree": {
        "sha": "9325bb10a5fe3e220d040827b82f7da5b42fc346",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9325bb10a5fe3e220d040827b82f7da5b42fc346"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2637a3beb8677067015df3d9d7b394fa837c2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2637a3beb8677067015df3d9d7b394fa837c2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2637a3beb8677067015df3d9d7b394fa837c2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2637a3beb8677067015df3d9d7b394fa837c2f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a80de15113166354cdf208e3d8b6e25f4511a591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80de15113166354cdf208e3d8b6e25f4511a591",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a80de15113166354cdf208e3d8b6e25f4511a591"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 59,
      "deletions": 17
    },
    "files": [
      {
        "sha": "f630ad4aa1bb11c4341dc36f5c8f9ba9015f2c7c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "patch": "@@ -374,7 +374,8 @@ endif\n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBUNIVALUE) \\\n-  $(LIBBITCOIN_UTIL)\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO)\n \n bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #"
      },
      {
        "sha": "98c0894122783be6a50e49e66609df9104c07977",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "patch": "@@ -1401,8 +1401,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (!strErrors.str().empty())\n         return InitError(strErrors.str());\n \n-    RandAddSeedPerfmon();\n-\n     //// debug print\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());"
      },
      {
        "sha": "79023566c3e61fb6e1f1ef1f01c52cfec6273bd6",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "patch": "@@ -124,9 +124,8 @@ bool CKey::Check(const unsigned char *vch) {\n }\n \n void CKey::MakeNewKey(bool fCompressedIn) {\n-    RandAddSeedPerfmon();\n     do {\n-        GetRandBytes(vch, sizeof(vch));\n+        GetStrongRandBytes(vch, sizeof(vch));\n     } while (!Check(vch));\n     fValid = true;\n     fCompressed = fCompressedIn;"
      },
      {
        "sha": "ffc57d48be973eb1c7068880e4eec69edf2af8f0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "patch": "@@ -4547,7 +4547,6 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n \n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams)\n {\n-    RandAddSeedPerfmon();\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {"
      },
      {
        "sha": "8ad0a9b007b4b04134c864a7fa792415e7b9c435",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 1,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "patch": "@@ -5,9 +5,11 @@\n \n #include \"random.h\"\n \n+#include \"crypto/sha512.h\"\n #include \"support/cleanse.h\"\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n+#include <wincrypt.h>\n #endif\n #include \"serialize.h\"        // for begin_ptr(vec)\n #include \"util.h\"             // for LogPrint()\n@@ -43,7 +45,7 @@ void RandAddSeed()\n     memory_cleanse((void*)&nCounter, sizeof(nCounter));\n }\n \n-void RandAddSeedPerfmon()\n+static void RandAddSeedPerfmon()\n {\n     RandAddSeed();\n \n@@ -83,6 +85,29 @@ void RandAddSeedPerfmon()\n #endif\n }\n \n+/** Get 32 bytes of system entropy. */\n+static void GetOSRand(unsigned char *ent32)\n+{\n+#ifdef WIN32\n+    HCRYPTPROV hProvider;\n+    int ret = CryptAcquireContextW(&hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);\n+    assert(ret);\n+    ret = CryptGenRandom(hProvider, 32, ent32);\n+    assert(ret);\n+    CryptReleaseContext(hProvider, 0);\n+#else\n+    int f = open(\"/dev/urandom\", O_RDONLY);\n+    assert(f != -1);\n+    int have = 0;\n+    do {\n+        ssize_t n = read(f, ent32 + have, 32 - have);\n+        assert(n > 0 && n <= 32 - have);\n+        have += n;\n+    } while (have < 32);\n+    close(f);\n+#endif\n+}\n+\n void GetRandBytes(unsigned char* buf, int num)\n {\n     if (RAND_bytes(buf, num) != 1) {\n@@ -91,6 +116,27 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+void GetStrongRandBytes(unsigned char* out, int num)\n+{\n+    assert(num <= 32);\n+    CSHA512 hasher;\n+    unsigned char buf[64];\n+\n+    // First source: OpenSSL's RNG\n+    RandAddSeedPerfmon();\n+    GetRandBytes(buf, 32);\n+    hasher.Write(buf, 32);\n+\n+    // Second source: OS RNG\n+    GetOSRand(buf);\n+    hasher.Write(buf, 32);\n+\n+    // Produce output\n+    hasher.Finalize(buf);\n+    memcpy(out, buf, num);\n+    memory_cleanse(buf, 64);\n+}\n+\n uint64_t GetRand(uint64_t nMax)\n {\n     if (nMax == 0)"
      },
      {
        "sha": "31b80bd565bdc2ce0b11d3ee648b49a56b6fa5b9",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "patch": "@@ -10,11 +10,8 @@\n \n #include <stdint.h>\n \n-/**\n- * Seed OpenSSL PRNG with additional entropy data\n- */\n+/* Seed OpenSSL PRNG with additional entropy data */\n void RandAddSeed();\n-void RandAddSeedPerfmon();\n \n /**\n  * Functions to gather random data via the OpenSSL PRNG\n@@ -24,6 +21,12 @@ uint64_t GetRand(uint64_t nMax);\n int GetRandInt(int nMax);\n uint256 GetRandHash();\n \n+/**\n+ * Function to gather random data from multiple sources, failing whenever any\n+ * of those source fail to provide a result.\n+ */\n+void GetStrongRandBytes(unsigned char* buf, int num);\n+\n /**\n  * Seed insecure_rand using the random pool.\n  * @param Deterministic Use a deterministic seed"
      },
      {
        "sha": "da0d6f272bfef6d281a67429fc69ab237045a419",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2637a3beb8677067015df3d9d7b394fa837c2f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "patch": "@@ -509,16 +509,14 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         return false;\n \n     CKeyingMaterial vMasterKey;\n-    RandAddSeedPerfmon();\n \n     vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n-    GetRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n+    GetStrongRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n \n     CMasterKey kMasterKey;\n-    RandAddSeedPerfmon();\n \n     kMasterKey.vchSalt.resize(WALLET_CRYPTO_SALT_SIZE);\n-    GetRandBytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n+    GetStrongRandBytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n \n     CCrypter crypter;\n     int64_t nStartTime = GetTimeMillis();\n@@ -3147,8 +3145,6 @@ bool CWallet::InitLoadWallet()\n     if (fFirstRun)\n     {\n         // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {\n             walletInstance->SetDefaultKey(newDefaultKey);"
      }
    ]
  },
  {
    "sha": "628cf1440aca8b5b259458a4ed41cc138cae34fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjhjZjE0NDBhY2E4YjViMjU5NDU4YTRlZDQxY2MxMzhjYWUzNGZh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-23T16:07:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-28T23:52:25Z"
      },
      "message": "Don't use assert for catching randomness failures",
      "tree": {
        "sha": "4d328aef976f66accf6879dd57988bf1bb3a0cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d328aef976f66accf6879dd57988bf1bb3a0cbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/628cf1440aca8b5b259458a4ed41cc138cae34fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/628cf1440aca8b5b259458a4ed41cc138cae34fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/628cf1440aca8b5b259458a4ed41cc138cae34fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/628cf1440aca8b5b259458a4ed41cc138cae34fa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2637a3beb8677067015df3d9d7b394fa837c2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2637a3beb8677067015df3d9d7b394fa837c2f"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d9a8cc145ea918c5162bba68922c42bcaf86b936",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/628cf1440aca8b5b259458a4ed41cc138cae34fa/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/628cf1440aca8b5b259458a4ed41cc138cae34fa/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=628cf1440aca8b5b259458a4ed41cc138cae34fa",
        "patch": "@@ -15,6 +15,7 @@\n #include \"util.h\"             // for LogPrint()\n #include \"utilstrencodings.h\" // for GetTime()\n \n+#include <stdlib.h>\n #include <limits>\n \n #ifndef WIN32\n@@ -24,6 +25,12 @@\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n+static void RandFailure()\n+{\n+    LogPrintf(\"Failed to read randomness, aborting\\n\");\n+    abort();\n+}\n+\n static inline int64_t GetPerformanceCounter()\n {\n     int64_t nCounter = 0;\n@@ -91,17 +98,25 @@ static void GetOSRand(unsigned char *ent32)\n #ifdef WIN32\n     HCRYPTPROV hProvider;\n     int ret = CryptAcquireContextW(&hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);\n-    assert(ret);\n+    if (!ret) {\n+        RandFailure();\n+    }\n     ret = CryptGenRandom(hProvider, 32, ent32);\n-    assert(ret);\n+    if (!ret) {\n+        RandFailure();\n+    }\n     CryptReleaseContext(hProvider, 0);\n #else\n     int f = open(\"/dev/urandom\", O_RDONLY);\n-    assert(f != -1);\n+    if (f == -1) {\n+        RandFailure();\n+    }\n     int have = 0;\n     do {\n         ssize_t n = read(f, ent32 + have, 32 - have);\n-        assert(n > 0 && n <= 32 - have);\n+        if (n <= 0 || n + have > 32) {\n+            RandFailure();\n+        }\n         have += n;\n     } while (have < 32);\n     close(f);\n@@ -111,8 +126,7 @@ static void GetOSRand(unsigned char *ent32)\n void GetRandBytes(unsigned char* buf, int num)\n {\n     if (RAND_bytes(buf, num) != 1) {\n-        LogPrintf(\"%s: OpenSSL RAND_bytes() failed with error: %s\\n\", __func__, ERR_error_string(ERR_get_error(), NULL));\n-        assert(false);\n+        RandFailure();\n     }\n }\n "
      }
    ]
  }
]