[
  {
    "sha": "159597a2b8967c8bc8106d98705d68932500b58a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTk1OTdhMmI4OTY3YzhiYzgxMDZkOTg3MDVkNjg5MzI1MDBiNThh",
    "commit": {
      "author": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2016-09-08T01:21:41Z"
      },
      "committer": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2016-09-10T20:58:42Z"
      },
      "message": "[devtools] script support for managing source file copyright headers\n\nThree subcommands to this script:\n\n1) ./copyright_header.py report\n\nExamines git-tracked files with extensions that match:\n\nINCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']\n\nHelps to:\n\n-> Identify source files without copyright\n-> Identify source files added with something other than \"The Bitcoin Core\ndevelopers\" holder so we can be sure it is appropriate\n-> Identify unintentional typos in the copyright line\n\n2) ./copyright_header.py update\n\nReplaces fix-copyright-headers.py. It does file editing in native python\nrather than subprocessing out to perl as was the case with\nfix-copyright-headers.py. It also shares code with the 'report' functions.\n\n3) ./copyright_header.py insert\n\nInserts a copyright header into a source file with the proper format and\ndates.",
      "tree": {
        "sha": "d6a6cbe1b7c1fb4fdba74c4ba5a59b2e0731bff9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6a6cbe1b7c1fb4fdba74c4ba5a59b2e0731bff9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159597a2b8967c8bc8106d98705d68932500b58a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159597a2b8967c8bc8106d98705d68932500b58a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/159597a2b8967c8bc8106d98705d68932500b58a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159597a2b8967c8bc8106d98705d68932500b58a/comments",
    "author": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ea44405e76fadb6459e8913e708bf5f39cbf4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ea44405e76fadb6459e8913e708bf5f39cbf4c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ea44405e76fadb6459e8913e708bf5f39cbf4c7"
      }
    ],
    "stats": {
      "total": 738,
      "additions": 662,
      "deletions": 76
    },
    "files": [
      {
        "sha": "b13dc6d3f0fc7666cbb829e0f08a9ccd93996398",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 52,
        "deletions": 9,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159597a2b8967c8bc8106d98705d68932500b58a/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159597a2b8967c8bc8106d98705d68932500b58a/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=159597a2b8967c8bc8106d98705d68932500b58a",
        "patch": "@@ -24,21 +24,64 @@ the script should be called from the git root folder as follows.\n ```\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n+copyright\\_header.py\n+====================\n \n-fix-copyright-headers.py\n-========================\n+Provides utilities for managing copyright headers of `The Bitcoin Core\n+developers` in repository source files. It has three subcommands:\n \n-Every year newly updated files need to have its copyright headers updated to reflect the current year.\n-If you run this script from the root folder it will automatically update the year on the copyright header for all\n-source files if these have a git commit from the current year.\n+```\n+$ ./copyright_header.py report <base_directory> [verbose]\n+$ ./copyright_header.py update <base_directory>\n+$ ./copyright_header.py insert <file>\n+```\n+Running these subcommands without arguments displays a usage string.\n \n-For example a file changed in 2015 (with 2015 being the current year):\n+copyright\\_header.py report \\<base\\_directory\\> [verbose]\n+---------------------------------------------------------\n \n-```// Copyright (c) 2009-2013 The Bitcoin Core developers```\n+Produces a report of all copyright header notices found inside the source files\n+of a repository. Useful to quickly visualize the state of the headers.\n+Specifying `verbose` will list the full filenames of files of each category.\n \n-would be changed to:\n+copyright\\_header.py update \\<base\\_directory\\> [verbose]\n+---------------------------------------------------------\n+Updates all the copyright headers of `The Bitcoin Core developers` which were\n+changed in a year more recent than is listed. For example:\n+```\n+// Copyright (c) <firstYear>-<lastYear> The Bitcoin Core developers\n+```\n+will be updated to:\n+```\n+// Copyright (c) <firstYear>-<lastModifiedYear> The Bitcoin Core developers\n+```\n+where `<lastModifiedYear>` is obtained from the `git log` history.\n \n-```// Copyright (c) 2009-2015 The Bitcoin Core developers```\n+This subcommand also handles copyright headers that have only a single year. In\n+those cases:\n+```\n+// Copyright (c) <year> The Bitcoin Core developers\n+```\n+will be updated to:\n+```\n+// Copyright (c) <year>-<lastModifiedYear> The Bitcoin Core developers\n+```\n+where the update is appropriate.\n+\n+copyright\\_header.py insert \\<file\\>\n+------------------------------------\n+Inserts a copyright header for `The Bitcoin Core developers` at the top of the\n+file in either Python or C++ style as determined by the file extension. If the\n+file is a Python file and it has  `#!` starting the first line, the header is\n+inserted in the line below it.\n+\n+The copyright dates will be set to be `<year_introduced>-<current_year>` where\n+`<year_introduced>` is according to the `git log` history. If\n+`<year_introduced>` is equal to `<current_year>`, it will be set as a single\n+year rather than two hyphenated years.\n+\n+If the file already has a copyright for `The Bitcoin Core developers`, the\n+script will exit.\n \n git-subtree-check.sh\n ===================="
      },
      {
        "sha": "9f35c378bf54fa6ceed30069bcfb7116d11f9b29",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "added",
        "additions": 610,
        "deletions": 0,
        "changes": 610,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159597a2b8967c8bc8106d98705d68932500b58a/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159597a2b8967c8bc8106d98705d68932500b58a/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=159597a2b8967c8bc8106d98705d68932500b58a",
        "patch": "@@ -0,0 +1,610 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+import fnmatch\n+import sys\n+import subprocess\n+import datetime\n+import os\n+\n+################################################################################\n+# file filtering\n+################################################################################\n+\n+EXCLUDE = [\n+    # libsecp256k1:\n+    'src/secp256k1/include/secp256k1.h',\n+    'src/secp256k1/include/secp256k1_ecdh.h',\n+    'src/secp256k1/include/secp256k1_recovery.h',\n+    'src/secp256k1/include/secp256k1_schnorr.h',\n+    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c',\n+    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.h',\n+    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c',\n+    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.h',\n+    # auto generated:\n+    'src/univalue/lib/univalue_escapes.h',\n+    'src/qt/bitcoinstrings.cpp',\n+    'src/chainparamsseeds.h',\n+    # other external copyrights:\n+    'src/tinyformat.h',\n+    'src/leveldb/util/env_win.cc',\n+    'src/crypto/ctaes/bench.c',\n+    'qa/rpc-tests/test_framework/bignum.py',\n+    # python init:\n+    '*__init__.py',\n+]\n+EXCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in EXCLUDE]))\n+\n+INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']\n+INCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in INCLUDE]))\n+\n+def applies_to_file(filename):\n+    return ((EXCLUDE_COMPILED.match(filename) is None) and\n+            (INCLUDE_COMPILED.match(filename) is not None))\n+\n+################################################################################\n+# obtain list of files in repo according to INCLUDE and EXCLUDE\n+################################################################################\n+\n+GIT_LS_CMD = 'git ls-files'\n+\n+def call_git_ls():\n+    out = subprocess.check_output(GIT_LS_CMD.split(' '))\n+    return [f for f in out.decode(\"utf-8\").split('\\n') if f != '']\n+\n+def get_filenames_to_examine():\n+    filenames = call_git_ls()\n+    return sorted([filename for filename in filenames if\n+                   applies_to_file(filename)])\n+\n+################################################################################\n+# define and compile regexes for the patterns we are looking for\n+################################################################################\n+\n+\n+COPYRIGHT_WITH_C = 'Copyright \\(c\\)'\n+COPYRIGHT_WITHOUT_C = 'Copyright'\n+ANY_COPYRIGHT_STYLE = '(%s|%s)' % (COPYRIGHT_WITH_C, COPYRIGHT_WITHOUT_C)\n+\n+YEAR = \"20[0-9][0-9]\"\n+YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n+YEAR_LIST = '(%s)(, %s)+' % (YEAR, YEAR)\n+ANY_YEAR_STYLE = '(%s|%s)' % (YEAR_RANGE, YEAR_LIST)\n+ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE = (\"%s %s\" % (ANY_COPYRIGHT_STYLE,\n+                                                ANY_YEAR_STYLE))\n+\n+ANY_COPYRIGHT_COMPILED = re.compile(ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE)\n+\n+def compile_copyright_regex(copyright_style, year_style, name):\n+    return re.compile('%s %s %s' % (copyright_style, year_style, name))\n+\n+EXPECTED_HOLDER_NAMES = [\n+    \"Satoshi Nakamoto\\n\",\n+    \"The Bitcoin Core developers\\n\",\n+    \"The Bitcoin Core developers \\n\",\n+    \"Bitcoin Core Developers\\n\",\n+    \"the Bitcoin Core developers\\n\",\n+    \"The Bitcoin developers\\n\",\n+    \"The LevelDB Authors\\. All rights reserved\\.\\n\",\n+    \"BitPay Inc\\.\\n\",\n+    \"BitPay, Inc\\.\\n\",\n+    \"University of Illinois at Urbana-Champaign\\.\\n\",\n+    \"MarcoFalke\\n\",\n+    \"Pieter Wuille\\n\",\n+    \"Pieter Wuille +\\*\\n\",\n+    \"Pieter Wuille, Gregory Maxwell +\\*\\n\",\n+    \"Pieter Wuille, Andrew Poelstra +\\*\\n\",\n+    \"Andrew Poelstra +\\*\\n\",\n+    \"Wladimir J. van der Laan\\n\",\n+    \"Jeff Garzik\\n\",\n+    \"Diederik Huys, Pieter Wuille +\\*\\n\",\n+    \"Thomas Daede, Cory Fields +\\*\\n\",\n+    \"Jan-Klaas Kollhof\\n\",\n+    \"Sam Rushing\\n\",\n+    \"ArtForz -- public domain half-a-node\\n\",\n+]\n+\n+DOMINANT_STYLE_COMPILED = {}\n+YEAR_LIST_STYLE_COMPILED = {}\n+WITHOUT_C_STYLE_COMPILED = {}\n+\n+for holder_name in EXPECTED_HOLDER_NAMES:\n+    DOMINANT_STYLE_COMPILED[holder_name] = (\n+        compile_copyright_regex(COPYRIGHT_WITH_C, YEAR_RANGE, holder_name))\n+    YEAR_LIST_STYLE_COMPILED[holder_name] = (\n+        compile_copyright_regex(COPYRIGHT_WITH_C, YEAR_LIST, holder_name))\n+    WITHOUT_C_STYLE_COMPILED[holder_name] = (\n+        compile_copyright_regex(COPYRIGHT_WITHOUT_C, ANY_YEAR_STYLE,\n+                                holder_name))\n+\n+################################################################################\n+# search file contents for copyright message of particular category\n+################################################################################\n+\n+def get_count_of_copyrights_of_any_style_any_holder(contents):\n+    return len(ANY_COPYRIGHT_COMPILED.findall(contents))\n+\n+def file_has_dominant_style_copyright_for_holder(contents, holder_name):\n+    match = DOMINANT_STYLE_COMPILED[holder_name].search(contents)\n+    return match is not None\n+\n+def file_has_year_list_style_copyright_for_holder(contents, holder_name):\n+    match = YEAR_LIST_STYLE_COMPILED[holder_name].search(contents)\n+    return match is not None\n+\n+def file_has_without_c_style_copyright_for_holder(contents, holder_name):\n+    match = WITHOUT_C_STYLE_COMPILED[holder_name].search(contents)\n+    return match is not None\n+\n+################################################################################\n+# get file info\n+################################################################################\n+\n+def read_file(filename):\n+    return open(os.path.abspath(filename), 'r').read()\n+\n+def gather_file_info(filename):\n+    info = {}\n+    info['filename'] = filename\n+    c = read_file(filename)\n+    info['contents'] = c\n+\n+    info['all_copyrights'] = get_count_of_copyrights_of_any_style_any_holder(c)\n+\n+    info['classified_copyrights'] = 0\n+    info['dominant_style'] = {}\n+    info['year_list_style'] = {}\n+    info['without_c_style'] = {}\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        has_dominant_style = (\n+            file_has_dominant_style_copyright_for_holder(c, holder_name))\n+        has_year_list_style = (\n+            file_has_year_list_style_copyright_for_holder(c, holder_name))\n+        has_without_c_style = (\n+            file_has_without_c_style_copyright_for_holder(c, holder_name))\n+        info['dominant_style'][holder_name] = has_dominant_style\n+        info['year_list_style'][holder_name] = has_year_list_style\n+        info['without_c_style'][holder_name] = has_without_c_style\n+        if has_dominant_style or has_year_list_style or has_without_c_style:\n+            info['classified_copyrights'] = info['classified_copyrights'] + 1\n+    return info\n+\n+################################################################################\n+# report execution\n+################################################################################\n+\n+SEPARATOR = '-'.join(['' for _ in range(80)])\n+\n+def print_filenames(filenames, verbose):\n+    if not verbose:\n+        return\n+    for filename in filenames:\n+        print(\"\\t%s\" % filename)\n+\n+def print_report(file_infos, verbose):\n+    print(SEPARATOR)\n+    examined = [i['filename'] for i in file_infos]\n+    print(\"%d files examined according to INCLUDE and EXCLUDE fnmatch rules\" %\n+          len(examined))\n+    print_filenames(examined, verbose)\n+\n+    print(SEPARATOR)\n+    print('')\n+    zero_copyrights = [i['filename'] for i in file_infos if\n+                       i['all_copyrights'] == 0]\n+    print(\"%4d with zero copyrights\" % len(zero_copyrights))\n+    print_filenames(zero_copyrights, verbose)\n+    one_copyright = [i['filename'] for i in file_infos if\n+                     i['all_copyrights'] == 1]\n+    print(\"%4d with one copyright\" % len(one_copyright))\n+    print_filenames(one_copyright, verbose)\n+    two_copyrights = [i['filename'] for i in file_infos if\n+                      i['all_copyrights'] == 2]\n+    print(\"%4d with two copyrights\" % len(two_copyrights))\n+    print_filenames(two_copyrights, verbose)\n+    three_copyrights = [i['filename'] for i in file_infos if\n+                        i['all_copyrights'] == 3]\n+    print(\"%4d with three copyrights\" % len(three_copyrights))\n+    print_filenames(three_copyrights, verbose)\n+    four_or_more_copyrights = [i['filename'] for i in file_infos if\n+                               i['all_copyrights'] >= 4]\n+    print(\"%4d with four or more copyrights\" % len(four_or_more_copyrights))\n+    print_filenames(four_or_more_copyrights, verbose)\n+    print('')\n+    print(SEPARATOR)\n+    print('Copyrights with dominant style:\\ne.g. \"Copyright (c)\" and '\n+          '\"<year>\" or \"<startYear>-<endYear>\":\\n')\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        dominant_style = [i['filename'] for i in file_infos if\n+                          i['dominant_style'][holder_name]]\n+        if len(dominant_style) > 0:\n+            print(\"%4d with '%s'\" % (len(dominant_style),\n+                                     holder_name.replace('\\n', '\\\\n')))\n+            print_filenames(dominant_style, verbose)\n+    print('')\n+    print(SEPARATOR)\n+    print('Copyrights with year list style:\\ne.g. \"Copyright (c)\" and '\n+          '\"<year1>, <year2>, ...\":\\n')\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        year_list_style = [i['filename'] for i in file_infos if\n+                           i['year_list_style'][holder_name]]\n+        if len(year_list_style) > 0:\n+            print(\"%4d with '%s'\" % (len(year_list_style),\n+                                     holder_name.replace('\\n', '\\\\n')))\n+            print_filenames(year_list_style, verbose)\n+    print('')\n+    print(SEPARATOR)\n+    print('Copyrights with no \"(c)\" style:\\ne.g. \"Copyright\" and \"<year>\" or '\n+          '\"<startYear>-<endYear>\":\\n')\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        without_c_style = [i['filename'] for i in file_infos if\n+                           i['without_c_style'][holder_name]]\n+        if len(without_c_style) > 0:\n+            print(\"%4d with '%s'\" % (len(without_c_style),\n+                                     holder_name.replace('\\n', '\\\\n')))\n+            print_filenames(without_c_style, verbose)\n+\n+    print('')\n+    print(SEPARATOR)\n+\n+    unclassified_copyrights = [i['filename'] for i in file_infos if\n+                               i['classified_copyrights'] < i['all_copyrights']]\n+    print(\"%d with unexpected copyright holder names\" %\n+          len(unclassified_copyrights))\n+    print_filenames(unclassified_copyrights, verbose)\n+    print(SEPARATOR)\n+\n+def exec_report(base_directory, verbose):\n+    original_cwd = os.getcwd()\n+    os.chdir(base_directory)\n+    filenames = get_filenames_to_examine()\n+    file_infos = [gather_file_info(f) for f in filenames]\n+    print_report(file_infos, verbose)\n+    os.chdir(original_cwd)\n+\n+################################################################################\n+# report cmd\n+################################################################################\n+\n+REPORT_USAGE = \"\"\"\n+Produces a report of all copyright header notices found inside the source files\n+of a repository.\n+\n+Usage:\n+    $ ./copyright_header.py report <base_directory> [verbose]\n+\n+Arguments:\n+    <base_directory> - The base directory of a bitcoin source code repository.\n+    [verbose] - Includes a list of every file of each subcategory in the report.\n+\"\"\"\n+\n+def report_cmd(argv):\n+    if len(argv) == 2:\n+        sys.exit(REPORT_USAGE)\n+        \n+    base_directory = argv[2]\n+    if not os.path.exists(base_directory):\n+        sys.exit(\"*** bad <base_directory>: %s\" % base_directory)\n+\n+    if len(argv) == 3:\n+        verbose = False\n+    elif argv[3] == 'verbose':\n+        verbose = True\n+    else:\n+        sys.exit(\"*** unknown argument: %s\" % argv[2])\n+\n+    exec_report(base_directory, verbose)\n+\n+################################################################################\n+# query git for year of last change\n+################################################################################\n+\n+GIT_LOG_CMD = \"git log --pretty=format:%%ai %s\"\n+\n+def call_git_log(filename):\n+    out = subprocess.check_output((GIT_LOG_CMD % filename).split(' '))\n+    return out.decode(\"utf-8\").split('\\n')\n+\n+def get_git_change_years(filename):\n+    git_log_lines = call_git_log(filename)\n+    if len(git_log_lines) == 0:\n+        return [datetime.date.today().year]\n+    # timestamp is in ISO 8601 format. e.g. \"2016-09-05 14:25:32 -0600\"\n+    return [line.split(' ')[0].split('-')[0] for line in git_log_lines]\n+\n+def get_most_recent_git_change_year(filename):\n+    return max(get_git_change_years(filename))\n+\n+################################################################################\n+# read and write to file\n+################################################################################\n+\n+def read_file_lines(filename):\n+    f = open(os.path.abspath(filename), 'r')\n+    file_lines = f.readlines()\n+    f.close()\n+    return file_lines\n+\n+def write_file_lines(filename, file_lines):\n+    f = open(os.path.abspath(filename), 'w')\n+    f.write(''.join(file_lines))\n+    f.close()\n+\n+################################################################################\n+# update header years execution\n+################################################################################\n+\n+COPYRIGHT = 'Copyright \\(c\\)'\n+YEAR = \"20[0-9][0-9]\"\n+YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n+HOLDER = 'The Bitcoin Core developers'\n+UPDATEABLE_LINE_COMPILED = re.compile(' '.join([COPYRIGHT, YEAR_RANGE, HOLDER]))\n+\n+def get_updatable_copyright_line(file_lines):\n+    index = 0\n+    for line in file_lines:\n+        if UPDATEABLE_LINE_COMPILED.search(line) is not None:\n+            return index, line\n+        index = index + 1\n+    return None, None\n+\n+def parse_year_range(year_range):\n+    year_split = year_range.split('-')\n+    start_year = year_split[0]\n+    if len(year_split) == 1:\n+        return start_year, start_year\n+    return start_year, year_split[1]\n+\n+def year_range_to_str(start_year, end_year):\n+    if start_year == end_year:\n+        return start_year\n+    return \"%s-%s\" % (start_year, end_year)\n+\n+def create_updated_copyright_line(line, last_git_change_year):\n+    copyright_splitter = 'Copyright (c) '\n+    copyright_split = line.split(copyright_splitter)\n+    # Preserve characters on line that are ahead of the start of the copyright\n+    # notice - they are part of the comment block and vary from file-to-file.\n+    before_copyright = copyright_split[0]\n+    after_copyright = copyright_split[1]\n+\n+    space_split = after_copyright.split(' ')\n+    year_range = space_split[0]\n+    start_year, end_year = parse_year_range(year_range)\n+    if end_year == last_git_change_year:\n+        return line\n+    return (before_copyright + copyright_splitter +\n+            year_range_to_str(start_year, last_git_change_year) + ' ' +\n+            ' '.join(space_split[1:]))\n+\n+def update_updatable_copyright(filename):\n+    file_lines = read_file_lines(filename)\n+    index, line = get_updatable_copyright_line(file_lines)\n+    if not line:\n+        print_file_action_message(filename, \"No updatable copyright.\")\n+        return\n+    last_git_change_year = get_most_recent_git_change_year(filename)\n+    new_line = create_updated_copyright_line(line, last_git_change_year)\n+    if line == new_line:\n+        print_file_action_message(filename, \"Copyright up-to-date.\")\n+        return\n+    file_lines[index] = new_line\n+    write_file_lines(filename, file_lines)\n+    print_file_action_message(filename,\n+                              \"Copyright updated! -> %s\" % last_git_change_year)\n+\n+def exec_update_header_year(base_directory):\n+    original_cwd = os.getcwd()\n+    os.chdir(base_directory)\n+    for filename in get_filenames_to_examine():\n+        update_updatable_copyright(filename)\n+    os.chdir(original_cwd)\n+\n+################################################################################\n+# update cmd\n+################################################################################\n+\n+UPDATE_USAGE = \"\"\"\n+Updates all the copyright headers of \"The Bitcoin Core developers\" which were\n+changed in a year more recent than is listed. For example:\n+\n+// Copyright (c) <firstYear>-<lastYear> The Bitcoin Core developers\n+\n+will be updated to:\n+\n+// Copyright (c) <firstYear>-<lastModifiedYear> The Bitcoin Core developers\n+\n+where <lastModifiedYear> is obtained from the 'git log' history.\n+\n+This subcommand also handles copyright headers that have only a single year. In those cases:\n+\n+// Copyright (c) <year> The Bitcoin Core developers\n+\n+will be updated to:\n+\n+// Copyright (c) <year>-<lastModifiedYear> The Bitcoin Core developers\n+\n+where the update is appropriate.\n+\n+Usage:\n+    $ ./copyright_header.py update <base_directory>\n+\n+Arguments:\n+    <base_directory> - The base directory of a bitcoin source code repository.\n+\"\"\"\n+\n+def print_file_action_message(filename, action):\n+    print(\"%-52s %s\" % (filename, action))\n+\n+def update_cmd(argv):\n+    if len(argv) != 3:\n+        sys.exit(UPDATE_USAGE)\n+    \n+    base_directory = argv[2]\n+    if not os.path.exists(base_directory):\n+        sys.exit(\"*** bad base_directory: %s\" % base_directory)\n+    exec_update_header_year(base_directory)\n+\n+################################################################################\n+# inserted copyright header format\n+################################################################################\n+\n+def get_header_lines(header, start_year, end_year):\n+    lines = header.split('\\n')[1:-1]\n+    lines[0] = lines[0] % year_range_to_str(start_year, end_year)\n+    return [line + '\\n' for line in lines]\n+\n+CPP_HEADER = '''\n+// Copyright (c) %s The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+\n+def get_cpp_header_lines_to_insert(start_year, end_year):\n+    return reversed(get_header_lines(CPP_HEADER, start_year, end_year))\n+\n+PYTHON_HEADER = '''\n+# Copyright (c) %s The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+\n+def get_python_header_lines_to_insert(start_year, end_year):\n+    return reversed(get_header_lines(PYTHON_HEADER, start_year, end_year))\n+\n+################################################################################\n+# query git for year of last change\n+################################################################################\n+\n+def get_git_change_year_range(filename):\n+    years = get_git_change_years(filename)\n+    return min(years), max(years)\n+\n+################################################################################\n+# check for existing core copyright\n+################################################################################\n+\n+def file_already_has_core_copyright(file_lines):\n+    index, _ = get_updatable_copyright_line(file_lines)\n+    return index != None\n+\n+################################################################################\n+# insert header execution\n+################################################################################\n+\n+def file_has_hashbang(file_lines):\n+    if len(file_lines) < 1:\n+        return False\n+    if len(file_lines[0]) <= 2:\n+        return False\n+    return file_lines[0][:2] == '#!'\n+\n+def insert_python_header(filename, file_lines, start_year, end_year):\n+    if file_has_hashbang(file_lines):\n+        insert_idx = 1 \n+    else:\n+        insert_idx = 0\n+    header_lines = get_python_header_lines_to_insert(start_year, end_year)\n+    for line in header_lines:\n+        file_lines.insert(insert_idx, line)\n+    write_file_lines(filename, file_lines)\n+\n+def insert_cpp_header(filename, file_lines, start_year, end_year):\n+    header_lines = get_cpp_header_lines_to_insert(start_year, end_year)\n+    for line in header_lines:\n+        file_lines.insert(0, line)\n+    write_file_lines(filename, file_lines)\n+\n+def exec_insert_header(filename, style):\n+    file_lines = read_file_lines(filename)\n+    if file_already_has_core_copyright(file_lines):\n+        sys.exit('*** %s already has a copyright by The Bitcoin Core developers'\n+                 % (filename))\n+    start_year, end_year = get_git_change_year_range(filename)\n+    if style == 'python':\n+        insert_python_header(filename, file_lines, start_year, end_year)\n+    else:\n+        insert_cpp_header(filename, file_lines, start_year, end_year)\n+\n+################################################################################\n+# insert cmd\n+################################################################################\n+\n+INSERT_USAGE = \"\"\"\n+Inserts a copyright header for \"The Bitcoin Core developers\" at the top of the\n+file in either Python or C++ style as determined by the file extension. If the\n+file is a Python file and it has a '#!' starting the first line, the header is\n+inserted in the line below it.\n+\n+The copyright dates will be set to be:\n+\n+\"<year_introduced>-<current_year>\"\n+\n+where <year_introduced> is according to the 'git log' history. If\n+<year_introduced> is equal to <current_year>, the date will be set to be:\n+\n+\"<current_year>\"\n+\n+If the file already has a copyright for \"The Bitcoin Core developers\", the\n+script will exit.\n+\n+Usage:\n+    $ ./copyright_header.py insert <file>\n+\n+Arguments:\n+    <file> - A source file in the bitcoin repository.\n+\"\"\"\n+\n+def insert_cmd(argv):\n+    if len(argv) != 3:\n+        sys.exit(INSERT_USAGE)\n+\n+    filename = argv[2]\n+    if not os.path.isfile(filename):\n+        sys.exit(\"*** bad filename: %s\" % filename)\n+    _, extension = os.path.splitext(filename)\n+    if extension not in ['.h', '.cpp', '.cc', '.c', '.py']:\n+        sys.exit(\"*** cannot insert for file extension %s\" % extension)\n+   \n+    if extension == '.py': \n+        style = 'python'\n+    else:\n+        style = 'cpp'\n+    exec_insert_header(filename, style)\n+         \n+################################################################################\n+# UI\n+################################################################################\n+\n+USAGE = \"\"\"\n+copyright_header.py - utilities for managing copyright headers of 'The Bitcoin\n+Core developers' in repository source files.\n+\n+Usage:\n+    $ ./copyright_header <subcommand>\n+\n+Subcommands:\n+    report\n+    update\n+    insert\n+\n+To see subcommand usage, run them without arguments.\n+\"\"\"\n+\n+SUBCOMMANDS = ['report', 'update', 'insert']\n+\n+if __name__ == \"__main__\":\n+    if len(sys.argv) == 1:\n+        sys.exit(USAGE)\n+    subcommand = sys.argv[1]\n+    if subcommand not in SUBCOMMANDS:\n+        sys.exit(USAGE)\n+    if subcommand == 'report':\n+        report_cmd(sys.argv)\n+    elif subcommand == 'update':\n+        update_cmd(sys.argv)\n+    elif subcommand == 'insert':\n+        insert_cmd(sys.argv)"
      },
      {
        "sha": "54836bd83f592964296ce8a8b6bce2281f069b4f",
        "filename": "contrib/devtools/fix-copyright-headers.py",
        "status": "removed",
        "additions": 0,
        "deletions": 67,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ea44405e76fadb6459e8913e708bf5f39cbf4c7/contrib/devtools/fix-copyright-headers.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ea44405e76fadb6459e8913e708bf5f39cbf4c7/contrib/devtools/fix-copyright-headers.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/fix-copyright-headers.py?ref=8ea44405e76fadb6459e8913e708bf5f39cbf4c7",
        "patch": "@@ -1,67 +0,0 @@\n-#!/usr/bin/env python3\n-\"\"\"\n-Run this script to update all the copyright headers of files\n-that were changed this year.\n-\n-For example:\n-\n-// Copyright (c) 2009-2012 The Bitcoin Core developers\n-\n-it will change it to\n-\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-\"\"\"\n-import subprocess\n-import time\n-import re\n-\n-CMD_GIT_LIST_FILES = ['git', 'ls-files']\n-CMD_GIT_DATE = ['git', 'log', '--format=%ad', '--date=short', '-1']\n-CMD_PERL_REGEX = ['perl', '-pi', '-e']\n-REGEX_TEMPLATE = 's/(20\\\\d\\\\d)(?:-20\\\\d\\\\d)? The Bitcoin/$1-%s The Bitcoin/'\n-\n-FOLDERS = [\"qa/\", \"src/\"]\n-EXTENSIONS = [\".cpp\",\".h\", \".py\"]\n-\n-\n-def get_git_date(file_path):\n-    d = subprocess.run(CMD_GIT_DATE + [file_path],\n-                       stdout=subprocess.PIPE,\n-                       check=True,\n-                       universal_newlines=True).stdout\n-    # yyyy-mm-dd\n-    return d.split('-')[0]\n-\n-\n-def skip_file(file_path):\n-    for ext in EXTENSIONS:\n-        if file_path.endswith(ext):\n-            return False\n-    else:\n-        return True\n-\n-if __name__ == \"__main__\":\n-    year = str(time.gmtime()[0])\n-    regex_current = re.compile(\"%s The Bitcoin\" % year)\n-    n = 1\n-    for folder in FOLDERS:\n-        for file_path in subprocess.run(\n-            CMD_GIT_LIST_FILES + [folder],\n-            stdout=subprocess.PIPE,\n-            check=True,\n-            universal_newlines=True\n-        ).stdout.split(\"\\n\"):\n-            if skip_file(file_path):\n-                # print(file_path, \"(skip)\")\n-                continue\n-            git_date = get_git_date(file_path)\n-            if not year == git_date:\n-                # print(file_path, year, \"(skip)\")\n-                continue\n-            if regex_current.search(open(file_path, \"r\").read()) is not None:\n-                # already up to date\n-                # print(file_path, year, \"(skip)\")\n-                continue\n-            print(n, file_path, \"(update to %s)\" % year)\n-            subprocess.run(CMD_PERL_REGEX + [REGEX_TEMPLATE % year, file_path], check=True)\n-            n = n + 1"
      }
    ]
  }
]