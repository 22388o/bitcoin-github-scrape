[
  {
    "sha": "a90689ff9880cc76668d04beda5a5d97f2f4a76b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTA2ODlmZjk4ODBjYzc2NjY4ZDA0YmVkYTVhNWQ5N2YyZjRhNzZi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-06-25T18:21:29Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-06-25T18:57:21Z"
      },
      "message": "Remove timing-based signature cache unit test\n\nTwo changes:\n\nFirst removes a unit test that fails in my development environment\n(OSX, compiled -g3 with clang).\n\nsipa says that's not terribly surprising; the CMutableTransaction change\nmakes signing a little more expensive but verification quicker. The unit\ntest timed sign+verify-uncached versus verify-cached-five-times.\n\nHe also says the test will be invalid when libsec256kp1 is integrated\n(because validation is super-optimized over signing).\n\ncore.h change fixes a compiler warning (clang -Wall : CMutableTransaction defined\nas struct, declared as class in script.h).",
      "tree": {
        "sha": "a8f6c15ea2958e956db9ea76ff7d30c3b44b3f83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8f6c15ea2958e956db9ea76ff7d30c3b44b3f83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a90689ff9880cc76668d04beda5a5d97f2f4a76b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlOrG6EACgkQdYgkL74406jJ4wCdGpuaA2j5DlPrWcfV6kx0GjJw\nPiIAnjtXzBAp7Po+Y6r3OqcHODjEW4RG\n=F0XX\n-----END PGP SIGNATURE-----",
        "payload": "tree a8f6c15ea2958e956db9ea76ff7d30c3b44b3f83\nparent 343feecf562a39e7d898ece2fd745fcb9d4c90e9\nauthor Gavin Andresen <gavinandresen@gmail.com> 1403720489 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1403722641 -0400\n\nRemove timing-based signature cache unit test\n\nTwo changes:\n\nFirst removes a unit test that fails in my development environment\n(OSX, compiled -g3 with clang).\n\nsipa says that's not terribly surprising; the CMutableTransaction change\nmakes signing a little more expensive but verification quicker. The unit\ntest timed sign+verify-uncached versus verify-cached-five-times.\n\nHe also says the test will be invalid when libsec256kp1 is integrated\n(because validation is super-optimized over signing).\n\ncore.h change fixes a compiler warning (clang -Wall : CMutableTransaction defined\nas struct, declared as class in script.h).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a90689ff9880cc76668d04beda5a5d97f2f4a76b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a90689ff9880cc76668d04beda5a5d97f2f4a76b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a90689ff9880cc76668d04beda5a5d97f2f4a76b/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/343feecf562a39e7d898ece2fd745fcb9d4c90e9"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 1,
      "deletions": 88
    },
    "files": [
      {
        "sha": "7ab471f6e63bbcd2e65ea4e563c91958c529c89c",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a90689ff9880cc76668d04beda5a5d97f2f4a76b/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a90689ff9880cc76668d04beda5a5d97f2f4a76b/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=a90689ff9880cc76668d04beda5a5d97f2f4a76b",
        "patch": "@@ -20,7 +20,7 @@\n class CCoins;\n class CKeyStore;\n class CTransaction;\n-class CMutableTransaction;\n+struct CMutableTransaction;\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes"
      },
      {
        "sha": "5e17555e7a8fc05e812527ae60882078b29789a0",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 87,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a90689ff9880cc76668d04beda5a5d97f2f4a76b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a90689ff9880cc76668d04beda5a5d97f2f4a76b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a90689ff9880cc76668d04beda5a5d97f2f4a76b",
        "patch": "@@ -231,91 +231,4 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(mapOrphanTransactionsByPrev.empty());\n }\n \n-BOOST_AUTO_TEST_CASE(DoS_checkSig)\n-{\n-    // Test signature caching code (see key.cpp Verify() methods)\n-\n-    CKey key;\n-    key.MakeNewKey(true);\n-    CBasicKeyStore keystore;\n-    keystore.AddKey(key);\n-    unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n-\n-    // 100 orphan transactions:\n-    static const int NPREV=100;\n-    CMutableTransaction orphans[NPREV];\n-    for (int i = 0; i < NPREV; i++)\n-    {\n-        CMutableTransaction& tx = orphans[i];\n-        tx.vin.resize(1);\n-        tx.vin[0].prevout.n = 0;\n-        tx.vin[0].prevout.hash = GetRandHash();\n-        tx.vin[0].scriptSig << OP_1;\n-        tx.vout.resize(1);\n-        tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n-\n-        AddOrphanTx(tx);\n-    }\n-\n-    // Create a transaction that depends on orphans:\n-    CMutableTransaction tx;\n-    tx.vout.resize(1);\n-    tx.vout[0].nValue = 1*CENT;\n-    tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n-    tx.vin.resize(NPREV);\n-    for (unsigned int j = 0; j < tx.vin.size(); j++)\n-    {\n-        tx.vin[j].prevout.n = 0;\n-        tx.vin[j].prevout.hash = orphans[j].GetHash();\n-    }\n-    // Creating signatures primes the cache:\n-    boost::posix_time::ptime mst1 = boost::posix_time::microsec_clock::local_time();\n-    for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        BOOST_CHECK(SignSignature(keystore, orphans[j], tx, j));\n-    boost::posix_time::ptime mst2 = boost::posix_time::microsec_clock::local_time();\n-    boost::posix_time::time_duration msdiff = mst2 - mst1;\n-    long nOneValidate = msdiff.total_milliseconds();\n-    if (fDebug) printf(\"DoS_Checksig sign: %ld\\n\", nOneValidate);\n-\n-    // ... now validating repeatedly should be quick:\n-    // 2.8GHz machine, -g build: Sign takes ~760ms,\n-    // uncached Verify takes ~250ms, cached Verify takes ~50ms\n-    // (for 100 single-signature inputs)\n-    mst1 = boost::posix_time::microsec_clock::local_time();\n-    for (unsigned int i = 0; i < 5; i++)\n-        for (unsigned int j = 0; j < tx.vin.size(); j++)\n-            BOOST_CHECK(VerifySignature(CCoins(orphans[j], MEMPOOL_HEIGHT), tx, j, flags, SIGHASH_ALL));\n-    mst2 = boost::posix_time::microsec_clock::local_time();\n-    msdiff = mst2 - mst1;\n-    long nManyValidate = msdiff.total_milliseconds();\n-    if (fDebug) printf(\"DoS_Checksig five: %ld\\n\", nManyValidate);\n-\n-    BOOST_CHECK_MESSAGE(nManyValidate < nOneValidate, \"Signature cache timing failed\");\n-\n-    // Empty a signature, validation should fail:\n-    CScript save = tx.vin[0].scriptSig;\n-    tx.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!VerifySignature(CCoins(orphans[0], MEMPOOL_HEIGHT), tx, 0, flags, SIGHASH_ALL));\n-    tx.vin[0].scriptSig = save;\n-\n-    // Swap signatures, validation should fail:\n-    std::swap(tx.vin[0].scriptSig, tx.vin[1].scriptSig);\n-    BOOST_CHECK(!VerifySignature(CCoins(orphans[0], MEMPOOL_HEIGHT), tx, 0, flags, SIGHASH_ALL));\n-    BOOST_CHECK(!VerifySignature(CCoins(orphans[1], MEMPOOL_HEIGHT), tx, 1, flags, SIGHASH_ALL));\n-    std::swap(tx.vin[0].scriptSig, tx.vin[1].scriptSig);\n-\n-    // Exercise -maxsigcachesize code:\n-    mapArgs[\"-maxsigcachesize\"] = \"10\";\n-    // Generate a new, different signature for vin[0] to trigger cache clear:\n-    CScript oldSig = tx.vin[0].scriptSig;\n-    BOOST_CHECK(SignSignature(keystore, orphans[0], tx, 0));\n-    BOOST_CHECK(tx.vin[0].scriptSig != oldSig);\n-    for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        BOOST_CHECK(VerifySignature(CCoins(orphans[j], MEMPOOL_HEIGHT), tx, j, flags, SIGHASH_ALL));\n-    mapArgs.erase(\"-maxsigcachesize\");\n-\n-    LimitOrphanTxSize(0);\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]