[
  {
    "sha": "873beca6deda119077f53921f0d19c3ebfc7cc44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzNiZWNhNmRlZGExMTkwNzdmNTM5MjFmMGQxOWMzZWJmYzdjYzQ0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-10-17T20:16:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-29T22:14:48Z"
      },
      "message": "[tests] Rename NodeConn and NodeConnCB\n\nNodeConn -> P2PConnection\nNodeConnCB -> P2PInterface",
      "tree": {
        "sha": "426d8ecde39b8bf44612d5a9b4098d676a5c5917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/426d8ecde39b8bf44612d5a9b4098d676a5c5917"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/873beca6deda119077f53921f0d19c3ebfc7cc44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/873beca6deda119077f53921f0d19c3ebfc7cc44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/873beca6deda119077f53921f0d19c3ebfc7cc44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/873beca6deda119077f53921f0d19c3ebfc7cc44/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2c2dba21855b8cb9b193b1819be73fa4a23a99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f2c2dba21855b8cb9b193b1819be73fa4a23a99"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 50,
      "deletions": 55
    },
    "files": [
      {
        "sha": "193ca947bc662db0fb69bf050cd81be5ef15cb62",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -63,12 +63,12 @@ wrappers for them, `msg_block`, `msg_tx`, etc).\n with the bitcoind(s) being tested (using python's asyncore package); the other\n implements the test logic.\n \n-- `NodeConn` is the class used to connect to a bitcoind.  If you implement\n-a callback class that derives from `NodeConnCB` and pass that to the\n-`NodeConn` object, your code will receive the appropriate callbacks when\n-events of interest arrive.\n+- `P2PConnection` is the class used to connect to a bitcoind.  `P2PInterface`\n+contains the higher level logic for processing P2P payloads and connecting to\n+the Bitcoin Core node application logic. For custom behaviour, subclass the\n+P2PInterface object and override the callback methods.\n \n-- Call `NetworkThread.start()` after all `NodeConn` objects are created to\n+- Call `NetworkThread.start()` after all `P2PInterface` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n "
      },
      {
        "sha": "13104f71bc8a5eb218b9aef46cdc598a7d1a63d5",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -39,14 +39,14 @@\n                                      CTxIn,\n                                      CTxOut,\n                                      NetworkThread,\n-                                     NodeConnCB,\n+                                     P2PInterface,\n                                      msg_block,\n                                      msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n         headers_message.headers = [CBlockHeader(b) for b in new_blocks]"
      },
      {
        "sha": "2af5eb275fc5665ada71d2d63395a6ee7f409d70",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -66,7 +66,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "7a3e565e2c7cd59955bfddc4d6323836a3da54ad",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -54,7 +54,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n "
      },
      {
        "sha": "289fa248e0dbc1b3e48209730311387be2173586",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -18,10 +18,11 @@\n from test_framework.mininode import (\n     CInv,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    NODE_NETWORK,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -30,15 +31,15 @@\n     wait_until,\n )\n \n-# NodeConnCB is a class containing callbacks to be executed when a P2P\n-# message is received from the node-under-test. Subclass NodeConnCB and\n+# P2PInterface is a class containing callbacks to be executed when a P2P\n+# message is received from the node-under-test. Subclass P2PInterface and\n # override the on_*() methods if you need custom behaviour.\n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def __init__(self):\n-        \"\"\"Initialize the NodeConnCB\n+        \"\"\"Initialize the P2PInterface\n \n         Used to inialize custom properties for the Node that aren't\n-        included by default in the base class. Be aware that the NodeConnCB\n+        included by default in the base class. Be aware that the P2PInterface\n         base class already stores a counter for each P2P message type and the\n         last received message of each type, which should be sufficient for the\n         needs of most tests.\n@@ -174,7 +175,7 @@ def run_test(self):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             block_message = msg_block(block)\n-            # Send message is used to send a P2P message to the node over our NodeConn connection\n+            # Send message is used to send a P2P message to the node over our P2PInterface\n             self.nodes[0].p2p.send_message(block_message)\n             self.tip = block.sha256\n             blocks.append(self.tip)\n@@ -199,12 +200,12 @@ def run_test(self):\n         self.nodes[2].p2p.send_message(getdata_request)\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n-        # NodeConnCB objects.\n+        # P2PInterface objects.\n         wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=mininode_lock)\n \n         self.log.info(\"Check that each block was received only once\")\n-        # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving\n-        # messages. The test thread should acquire the global lock before accessing any NodeConn data to avoid locking\n+        # The network thread uses a global lock on data access to the P2PConnection objects when sending and receiving\n+        # messages. The test thread should acquire the global lock before accessing any P2PConnection data to avoid locking\n         # and synchronization issues. Note wait_until() acquires this global lock when testing the predicate.\n         with mininode_lock:\n             for block in self.nodes[2].p2p.block_receive_map.values():"
      },
      {
        "sha": "5ef71c93cf925db53771fcfb564f6b3702f82383",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.block_receive_map = defaultdict(int)"
      },
      {
        "sha": "d9d7c24416555c2119939138b86afd850865be21",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -7,7 +7,7 @@\n Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-We have one NodeConn connection to node0 called test_node, and one to node1\n+We have one P2PInterface connection to node0 called test_node, and one to node1\n called min_work_node.\n \n The test:\n@@ -79,9 +79,9 @@ def setup_network(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # test_node connects to node0 (not whitelisted)\n-        test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n-        # min_work_node connects to node1\n-        min_work_node = self.nodes[1].add_p2p_connection(NodeConnCB())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        # min_work_node connects to node1 (whitelisted)\n+        min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start() # Start up network handling in another thread\n \n@@ -207,7 +207,7 @@ def run_test(self):\n         # disconnect/reconnect first\n \n         self.nodes[0].disconnect_p2ps()\n-        test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n         test_node.wait_for_verack()\n         test_node.send_message(msg_block(block_h1f))\n@@ -292,7 +292,7 @@ def run_test(self):\n             test_node.wait_for_disconnect()\n \n             self.nodes[0].disconnect_p2ps()\n-            test_node = self.nodes[0].add_p2p_connection(NodeConnCB())\n+            test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n             NetworkThread().start() # Start up network handling in another thread\n             test_node.wait_for_verack()"
      },
      {
        "sha": "c43744328c07f0009def00f038d6ccea16ddcfa6",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.script import CScript, OP_TRUE\n \n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.last_sendcmpct = []"
      },
      {
        "sha": "ac55336e3d25c12434a87c548d096208cd1f1a16",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -22,7 +22,7 @@ def allInvsMatch(invsExpected, testnode):\n         time.sleep(1)\n     return False\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.txinvs = []"
      },
      {
        "sha": "209c789f2284589d25be1641ff89af446ac8b67d",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -14,7 +14,7 @@\n from test_framework.mininode import (\n     CInv,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     msg_headers,\n     msg_block,\n     msg_getdata,\n@@ -75,7 +75,7 @@ def last_header_equals(self, expected_hash, node):\n     # This does not currently test that stale blocks timestamped within the\n     # last month but that have over a month's worth of work are also withheld.\n     def run_test(self):\n-        node0 = self.nodes[0].add_p2p_connection(NodeConnCB())\n+        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n \n         NetworkThread().start()\n         node0.wait_for_verack()"
      },
      {
        "sha": "b469a9a47a21b2bf9ec3171d8fbd65046bcac043",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -20,7 +20,7 @@\n \n banscore = 10\n \n-class CLazyNode(NodeConnCB):\n+class CLazyNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.unexpected_msg = False\n@@ -139,10 +139,10 @@ def run_test(self):\n         self.log.info(\"Service bits 5 and 7 are allowed after August 1st 2018\")\n         self.nodes[0].setmocktime(1533168000)  # August 2nd 2018\n \n-        allowed_service_bit5_node = self.nodes[0].add_p2p_connection(NodeConnCB(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n-        allowed_service_bit7_node = self.nodes[0].add_p2p_connection(NodeConnCB(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n+        allowed_service_bit5_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n+        allowed_service_bit7_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Network thread stopped when all previous NodeConnCBs disconnected. Restart it\n+        NetworkThread().start()  # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n \n         wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n         wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)"
      },
      {
        "sha": "d24dbac51db7fc87a0d23f5ceb292dd0855ab424",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -20,7 +20,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Add a p2p connection\n-        self.nodes[0].add_p2p_connection(NodeConnCB())\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n         NetworkThread().start()\n         self.nodes[0].p2p.wait_for_verack()\n "
      },
      {
        "sha": "a240d79013c22fb58c7a21364f15798ed8fdf998",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -59,7 +59,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True):\n     p2p.sync_with_ping()\n     assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.getdataset = set()"
      },
      {
        "sha": "b2f3a861cfbcb7619d2017040361751b92986f40",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -27,7 +27,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def on_version(self, message):\n         # Don't send a verack in response\n         pass"
      },
      {
        "sha": "be137381d0190e4c1d44631b873a5a857970b8b6",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -23,7 +23,7 @@\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n VB_PATTERN = re.compile(\"^Warning.*versionbit\")\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n     def on_inv(self, message):\n         pass\n "
      },
      {
        "sha": "99b7f6b99ed2465ee288753a36f6783a546d4c2a",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -91,7 +91,7 @@\n     CInv,\n     NODE_WITNESS,\n     NetworkThread,\n-    NodeConnCB,\n+    P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getblocks,\n@@ -110,7 +110,7 @@\n \n DIRECT_FETCH_RESPONSE_TIME = 0.05\n \n-class BaseNode(NodeConnCB):\n+class BaseNode(P2PInterface):\n     def __init__(self):\n         super().__init__()\n "
      },
      {
        "sha": "f0f5c847ca8da6d805e5456a7d2d24cbff3c3093",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -39,7 +39,7 @@ def match(self, other):\n     def __repr__(self):\n         return '%i:%s' % (self.code,self.reason or '*')\n \n-class TestNode(NodeConnCB):\n+class TestNode(P2PInterface):\n \n     def __init__(self, block_store, tx_store):\n         super().__init__()"
      },
      {
        "sha": "9e92a70da15102cbabca2b1aafce908fa849f2bc",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/873beca6deda119077f53921f0d19c3ebfc7cc44/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=873beca6deda119077f53921f0d19c3ebfc7cc44",
        "patch": "@@ -9,10 +9,8 @@\n This python code was modified from ArtForz' public domain  half-a-node, as\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n-NodeConn: an object which manages p2p connectivity to a bitcoin node\n-NodeConnCB: a base class that describes the interface for receiving\n-            callbacks with network messages from a NodeConn\n-\"\"\"\n+P2PConnection: A low-level connection object to a node's P2P interface\n+P2PInterface: A high-level interface object for communicating to a node over P2P\"\"\"\n import asyncore\n from collections import defaultdict\n from io import BytesIO\n@@ -57,7 +55,7 @@\n     \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n }\n \n-class NodeConn(asyncore.dispatcher):\n+class P2PConnection(asyncore.dispatcher):\n     \"\"\"A low-level connection object to a node's P2P interface.\n \n     This class is responsible for:\n@@ -68,9 +66,7 @@ class NodeConn(asyncore.dispatcher):\n     - logging messages as they are sent and received\n \n     This class contains no logic for handing the P2P message payloads. It must be\n-    sub-classed and the on_message() callback overridden.\n-\n-    TODO: rename this class P2PConnection.\"\"\"\n+    sub-classed and the on_message() callback overridden.\"\"\"\n \n     def __init__(self):\n         super().__init__(map=mininode_socket_map)\n@@ -244,17 +240,15 @@ def _log_message(self, direction, msg):\n         logger.debug(log_message)\n \n \n-class NodeConnCB(NodeConn):\n+class P2PInterface(P2PConnection):\n     \"\"\"A high-level P2P interface class for communicating with a Bitcoin node.\n \n     This class provides high-level callbacks for processing P2P message\n     payloads, as well as convenience methods for interacting with the\n     node over P2P.\n \n     Individual testcases should subclass this and override the on_* methods\n-    if they want to alter message handling behaviour.\n-\n-    TODO: rename this class P2PInterface\"\"\"\n+    if they want to alter message handling behaviour.\"\"\"\n     def __init__(self):\n         super().__init__()\n \n@@ -399,10 +393,10 @@ def sync_with_ping(self, timeout=60):\n \n # One lock for synchronizing all data access between the networking thread (see\n # NetworkThread below) and the thread running the test logic.  For simplicity,\n-# NodeConn acquires this lock whenever delivering a message to a NodeConnCB,\n+# P2PConnection acquires this lock whenever delivering a message to a P2PInterface,\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n-# access to any data shared with the NodeConnCB or NodeConn.\n+# access to any data shared with the P2PInterface or P2PConnection.\n mininode_lock = RLock()\n \n class NetworkThread(Thread):"
      }
    ]
  }
]