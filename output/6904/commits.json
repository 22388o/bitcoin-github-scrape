[
  {
    "sha": "791e70fba76b24209eeb06c0ea2251e6390c1fc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTFlNzBmYmE3NmIyNDIwOWVlYjA2YzBlYTIyNTFlNjM5MGMxZmMw",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-23T13:16:29Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T13:16:29Z"
      },
      "message": "dbwrapper: switch from leveldb to sqlite for bitcoind backend database",
      "tree": {
        "sha": "77306195a3733a90927fc1f42c020952e8489edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77306195a3733a90927fc1f42c020952e8489edf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/791e70fba76b24209eeb06c0ea2251e6390c1fc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791e70fba76b24209eeb06c0ea2251e6390c1fc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/791e70fba76b24209eeb06c0ea2251e6390c1fc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791e70fba76b24209eeb06c0ea2251e6390c1fc0/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 374,
      "additions": 246,
      "deletions": 128
    },
    "files": [
      {
        "sha": "c69659d2c390ed6084de91b380bb5e88a6bf2621",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791e70fba76b24209eeb06c0ea2251e6390c1fc0/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791e70fba76b24209eeb06c0ea2251e6390c1fc0/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "patch": "@@ -729,6 +729,9 @@ else\n   fi\n fi\n \n+AC_CHECK_HEADER([sqlite3.h],,AC_MSG_ERROR(sqlite3 headers missing))\n+AC_CHECK_LIB([sqlite3],      [sqlite3_open],SQLITE3_LIBS=-lsqlite3, AC_MSG_ERROR(libsqlite3 missing))\n+\n CXXFLAGS_TEMP=\"$CXXFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n@@ -913,6 +916,7 @@ AC_SUBST(BUILD_QT)\n AC_SUBST(BUILD_TEST_QT)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n+AC_SUBST(SQLITE3_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])"
      },
      {
        "sha": "7a059af6fbc60eb64fce043435eadbbbf632d8b0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "patch": "@@ -331,14 +331,15 @@ bitcoind_LDADD = \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBLEVELDB) \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n if ENABLE_ZMQ\n bitcoind_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n+bitcoind_LDADD += $(SQLITE3_LIBS)\n+\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif"
      },
      {
        "sha": "7a3fb6baba6f62a35a73c144dd06da950c95fea2",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "patch": "@@ -367,7 +367,8 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(SQLITE3_LIBS)\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "bfea16c444377d1f0f221c1909783cb0fb90cde3",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "patch": "@@ -33,7 +33,8 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(SQLITE3_LIBS)\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "f192171a9e9887629c12388c5df4d84156f048d5",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "patch": "@@ -101,6 +101,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n \n test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+test_test_bitcoin_LDADD += $(SQLITE3_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ"
      },
      {
        "sha": "2c54e6527f93e2c09ea830447d8554994aaacbfe",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 64,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "patch": "@@ -9,66 +9,77 @@\n \n #include <boost/filesystem.hpp>\n \n-#include <leveldb/cache.h>\n-#include <leveldb/env.h>\n-#include <leveldb/filter_policy.h>\n #include <memenv.h>\n+#include <stdio.h>\n #include <stdint.h>\n \n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error)\n-{\n-    if (status.ok())\n-        return;\n-    LogPrintf(\"%s\\n\", status.ToString());\n-    if (status.IsCorruption())\n-        throw dbwrapper_error(\"Database corrupted\");\n-    if (status.IsIOError())\n-        throw dbwrapper_error(\"Database I/O error\");\n-    if (status.IsNotFound())\n-        throw dbwrapper_error(\"Database entry missing\");\n-    throw dbwrapper_error(\"Unknown database error\");\n-}\n+static const char *sql_db_init[] = {\n+    \"CREATE TABLE tab(k BLOB PRIMARY KEY, v BLOB)\",\n+};\n \n-static leveldb::Options GetOptions(size_t nCacheSize)\n-{\n-    leveldb::Options options;\n-    options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n-    options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n-    options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n-    options.compression = leveldb::kNoCompression;\n-    options.max_open_files = 64;\n-    if (leveldb::kMajorVersion > 1 || (leveldb::kMajorVersion == 1 && leveldb::kMinorVersion >= 16)) {\n-        // LevelDB versions before 1.16 consider short writes to be corruption. Only trigger error\n-        // on corruption in later versions.\n-        options.paranoid_checks = true;\n-    }\n-    return options;\n-}\n+static const char *sql_stmt_text[] = {\n+    \"REPLACE INTO tab(k, v) VALUES(:k, :v)\",\n+    \"SELECT v FROM tab WHERE k = :k\",\n+    \"DELETE FROM tab WHERE k = :k\",\n+    \"BEGIN TRANSACTION\",\n+    \"COMMIT TRANSACTION\",\n+    \"SELECT COUNT(*) FROM tab\",\n+    \"SELECT k, v FROM tab WHERE k >= :k ORDER BY k\",\n+};\n \n CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n-    penv = NULL;\n-    readoptions.verify_checksums = true;\n-    iteroptions.verify_checksums = true;\n-    iteroptions.fill_cache = false;\n-    syncoptions.sync = true;\n-    options = GetOptions(nCacheSize);\n-    options.create_if_missing = true;\n+    std::string fp;\n+    const char *filename = NULL;\n+\n     if (fMemory) {\n-        penv = leveldb::NewMemEnv(leveldb::Env::Default());\n-        options.env = penv;\n+            filename = \":memory:\";\n     } else {\n+        fp = path.string();\n+        fp = fp + \"/db\";\n+\n         if (fWipe) {\n-            LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n-            HandleError(result);\n+            LogPrintf(\"Wiping DB %s\\n\", fp);\n+            boost::filesystem::remove(fp);\n         }\n         TryCreateDirectory(path);\n-        LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n+        LogPrintf(\"Opening DB in %s\\n\", path.string());\n+\n+        filename = fp.c_str();\n+    }\n+\n+    // open existing sqlite db\n+    int orc = sqlite3_open_v2(filename, &psql, SQLITE_OPEN_READWRITE | SQLITE_OPEN_NOMUTEX, NULL);\n+\n+    // if open-existing failed, attempt to create & init new db\n+    if (orc != SQLITE_OK) {\n+        orc = sqlite3_open_v2(filename, &psql, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_NOMUTEX, NULL);\n+        if (orc != SQLITE_OK)\n+                throw(dbwrapper_error(\"DB open failed\"));\n+\n+        for (unsigned int i = 0; i < ARRAYLEN(sql_db_init); i++)\n+            if (sqlite3_exec(psql, sql_db_init[i], NULL, NULL, NULL) != SQLITE_OK)\n+                throw(dbwrapper_error(\"DB one-time setup failed\"));\n+    }\n+\n+    // pre-compile SQL statements\n+    for (unsigned sqlidx = 0; sqlidx < ARRAYLEN(sql_stmt_text); sqlidx++) {\n+        sqlite3_stmt *pstmt = NULL;\n+\n+        int src = sqlite3_prepare_v2(psql,\n+                               sql_stmt_text[sqlidx],\n+                               strlen(sql_stmt_text[sqlidx]),\n+                               &pstmt, NULL);\n+        if (src != SQLITE_OK) {\n+            char numstr[32];\n+            snprintf(numstr, sizeof(numstr), \"(%d)\", src);\n+            throw(dbwrapper_error(\"DB compile failed\" + std::string(numstr) + \": \" + std::string(sql_stmt_text[sqlidx])));\n+        }\n+\n+        stmts.push_back(pstmt);\n     }\n-    leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n-    HandleError(status);\n-    LogPrintf(\"Opened LevelDB successfully\\n\");\n+\n+    LogPrintf(\"Opened DB successfully\\n\");\n \n     // The base-case obfuscation key, which is a noop.\n     obfuscate_key = std::vector<unsigned char>(OBFUSCATE_KEY_NUM_BYTES, '\\000');\n@@ -92,20 +103,58 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n \n CDBWrapper::~CDBWrapper()\n {\n-    delete pdb;\n-    pdb = NULL;\n-    delete options.filter_policy;\n-    options.filter_policy = NULL;\n-    delete options.block_cache;\n-    options.block_cache = NULL;\n-    delete penv;\n-    options.env = NULL;\n+    for (unsigned int i = 0; i < stmts.size(); i++)\n+        sqlite3_finalize(stmts[i]);\n+    stmts.clear();\n+\n+    sqlite3_close(psql);\n+    psql = NULL;\n }\n \n bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n {\n-    leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n-    HandleError(status);\n+    // begin DB transaction\n+    int src = sqlite3_step(stmts[DBW_BEGIN]);\n+    int rrc = sqlite3_reset(stmts[DBW_BEGIN]);\n+\n+    if ((src != SQLITE_DONE) || (rrc != SQLITE_OK))\n+        throw dbwrapper_error(\"DB cannot begin transaction\");\n+\n+    for (unsigned int wr = 0; wr < batch.entries.size(); wr++) {\n+        BatchEntry& be = batch.entries[wr];\n+        sqlite3_stmt *stmt = NULL;\n+\n+        // get the SQL stmt to exec\n+        if (be.isErase)\n+            stmt = stmts[DBW_DELETE];\n+        else\n+            stmt = stmts[DBW_PUT];\n+\n+        // bind column 0: key\n+        if (sqlite3_bind_blob(stmt, 0, be.key.c_str(), be.key.size(),\n+                              SQLITE_TRANSIENT) != SQLITE_OK)\n+            throw dbwrapper_error(\"DB cannot bind blob key\");\n+\n+        // if inserting, bind column 1: value\n+        if (!be.isErase)\n+            if (sqlite3_bind_blob(stmt, 1, be.value.c_str(), be.value.size(),\n+                                  SQLITE_TRANSIENT) != SQLITE_OK)\n+                throw dbwrapper_error(\"DB cannot bind blob value\");\n+\n+        // exec INSERT/DELETE\n+        src = sqlite3_step(stmt);\n+        rrc = sqlite3_reset(stmt);\n+\n+        if ((src != SQLITE_DONE) || (rrc != SQLITE_OK))\n+            throw dbwrapper_error(\"DB failed update\");\n+    }\n+\n+    src = sqlite3_step(stmts[DBW_COMMIT]);\n+    rrc = sqlite3_reset(stmts[DBW_COMMIT]);\n+\n+    if ((src != SQLITE_DONE) || (rrc != SQLITE_OK))\n+        throw dbwrapper_error(\"DB cannot commit transaction\");\n+\n     return true;\n }\n \n@@ -131,9 +180,16 @@ std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const\n \n bool CDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<CDBIterator> it(NewIterator());\n-    it->SeekToFirst();\n-    return !(it->Valid());\n+    int src = sqlite3_step(stmts[DBW_GET_ALL_COUNT]);\n+    if (src != SQLITE_ROW) {\n+        sqlite3_reset(stmts[DBW_GET_ALL_COUNT]);\n+        throw dbwrapper_error(\"DB read count failure\");\n+    }\n+\n+    int64_t count = sqlite3_column_int64(stmts[DBW_GET_ALL_COUNT], 0);\n+    sqlite3_reset(stmts[DBW_GET_ALL_COUNT]);\n+\n+    return (count == 0);\n }\n \n const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n@@ -146,7 +202,5 @@ std::string CDBWrapper::GetObfuscateKeyHex() const\n     return HexStr(obfuscate_key);\n }\n \n-CDBIterator::~CDBIterator() { delete piter; }\n-bool CDBIterator::Valid() { return piter->Valid(); }\n-void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CDBIterator::Next() { piter->Next(); }\n+CDBIterator::~CDBIterator() { sqlite3_reset(pstmt); }\n+"
      },
      {
        "sha": "5d697d3dd9bd8f3cef7377b551048eee6f593a24",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 117,
        "deletions": 61,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791e70fba76b24209eeb06c0ea2251e6390c1fc0/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "patch": "@@ -14,24 +14,42 @@\n \n #include <boost/filesystem/path.hpp>\n \n-#include <leveldb/db.h>\n-#include <leveldb/write_batch.h>\n+#include <sqlite3.h>\n+\n+enum {\n+        DBW_PUT,\n+        DBW_GET,\n+        DBW_DELETE,\n+        DBW_BEGIN,\n+        DBW_COMMIT,\n+        DBW_GET_ALL_COUNT,\n+        DBW_SEEK_SORTED,\n+};\n \n class dbwrapper_error : public std::runtime_error\n {\n public:\n     dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error);\n+class BatchEntry {\n+public:\n+    bool           isErase;\n+    std::string    key;\n+    std::string    value;\n+\n+    BatchEntry(bool isErase_, const std::string& key_,\n+               const std::string& value_) : isErase(isErase_), key(key_), value(value_) { }\n+    BatchEntry(bool isErase_, const std::string& key_) : isErase(isErase_), key(key_) { }\n+};\n \n /** Batch of changes queued to be written to a CDBWrapper */\n class CDBBatch\n {\n     friend class CDBWrapper;\n \n private:\n-    leveldb::WriteBatch batch;\n+    std::vector<BatchEntry> entries;\n     const std::vector<unsigned char> *obfuscate_key;\n \n public:\n@@ -46,15 +64,18 @@ class CDBBatch\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+\n+        std::string rawKey(&ssKey[0], ssKey.size());\n \n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n         ssValue.Xor(*obfuscate_key);\n-        leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n-        batch.Put(slKey, slValue);\n+        std::string rawValue(&ssValue[0], ssValue.size());\n+\n+        BatchEntry be(false, rawKey, rawValue);\n+        entries.push_back(be);\n     }\n \n     template <typename K>\n@@ -63,46 +84,74 @@ class CDBBatch\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n-        batch.Delete(slKey);\n+        std::string rawKey(&ssKey[0], ssKey.size());\n+\n+        BatchEntry be(true, rawKey);\n+        entries.push_back(be);\n     }\n };\n \n class CDBIterator\n {\n private:\n-    leveldb::Iterator *piter;\n+    sqlite3_stmt *pstmt;\n     const std::vector<unsigned char> *obfuscate_key;\n+    bool valid;\n \n public:\n \n     /**\n      * @param[in] piterIn          The original leveldb iterator.\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n-        piter(piterIn), obfuscate_key(obfuscate_key) { };\n+    CDBIterator(sqlite3_stmt *pstmt_, const std::vector<unsigned char>* obfuscate_key) :\n+        pstmt(pstmt_), obfuscate_key(obfuscate_key), valid(false) { };\n     ~CDBIterator();\n \n-    bool Valid();\n-\n-    void SeekToFirst();\n+    bool Valid() { return valid; };\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n-        piter->Seek(slKey);\n+\n+        valid = false;\n+\n+        int rrc = sqlite3_reset(pstmt);\n+        if (rrc != SQLITE_OK)\n+            throw dbwrapper_error(\"DB reset failure\");\n+\n+        std::string rawKey(&ssKey[0], ssKey.size());\n+\n+        if (sqlite3_bind_blob(pstmt, 0, rawKey.c_str(), rawKey.size(),\n+                              SQLITE_TRANSIENT) != SQLITE_OK)\n+            throw dbwrapper_error(\"DB find failure\");\n+\n+        int src = sqlite3_step(pstmt);\n+        if (src == SQLITE_ROW)\n+            valid = true;\n     }\n \n-    void Next();\n+    void Next() {\n+        if (!valid)\n+            return;\n+\n+        int src = sqlite3_step(pstmt);\n+        if (src == SQLITE_ROW)\n+            valid = true;\n+        else\n+            valid = false;\n+    }\n \n     template<typename K> bool GetKey(K& key) {\n-        leveldb::Slice slKey = piter->key();\n+        if (!valid)\n+            return false;\n+\n+        std::string strCol((const char *) sqlite3_column_blob(pstmt, 0),\n+                           (size_t) sqlite3_column_bytes(pstmt, 0));\n         try {\n-            CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n+            CDataStream ssKey(&strCol[0], &strCol[0] + strCol.size(), SER_DISK, CLIENT_VERSION);\n             ssKey >> key;\n         } catch(std::exception &e) {\n             return false;\n@@ -111,13 +160,19 @@ class CDBIterator\n     }\n \n     unsigned int GetKeySize() {\n-        return piter->key().size();\n+        if (!valid)\n+            return 0;\n+        return sqlite3_column_bytes(pstmt, 0);\n     }\n \n     template<typename V> bool GetValue(V& value) {\n-        leveldb::Slice slValue = piter->value();\n+        if (!valid)\n+            return false;\n+\n+        std::string strCol((const char *) sqlite3_column_blob(pstmt, 1),\n+                           (size_t) sqlite3_column_bytes(pstmt, 1));\n         try {\n-            CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(&strCol[0], &strCol[0] + strCol.size(), SER_DISK, CLIENT_VERSION);\n             ssValue.Xor(*obfuscate_key);\n             ssValue >> value;\n         } catch(std::exception &e) {\n@@ -127,34 +182,20 @@ class CDBIterator\n     }\n \n     unsigned int GetValueSize() {\n-        return piter->value().size();\n+        if (!valid)\n+            return 0;\n+        return sqlite3_column_bytes(pstmt, 1);\n     }\n \n };\n \n class CDBWrapper\n {\n private:\n-    //! custom environment this database is using (may be NULL in case of default environment)\n-    leveldb::Env* penv;\n-\n-    //! database options used\n-    leveldb::Options options;\n-\n-    //! options used when reading from the database\n-    leveldb::ReadOptions readoptions;\n-\n-    //! options used when iterating over values of the database\n-    leveldb::ReadOptions iteroptions;\n-\n-    //! options used when writing to the database\n-    leveldb::WriteOptions writeoptions;\n-\n-    //! options used when sync writing to the database\n-    leveldb::WriteOptions syncoptions;\n-\n     //! the database itself\n-    leveldb::DB* pdb;\n+    sqlite3* psql;\n+\n+    std::vector<sqlite3_stmt*> stmts;\n \n     //! a key used for optional XOR-obfuscation of the database\n     std::vector<unsigned char> obfuscate_key;\n@@ -185,16 +226,28 @@ class CDBWrapper\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n-        std::string strValue;\n-        leveldb::Status status = pdb->Get(readoptions, slKey, &strValue);\n-        if (!status.ok()) {\n-            if (status.IsNotFound())\n+        if (sqlite3_bind_blob(stmts[DBW_GET], 0, &ssKey[0], ssKey.size(),\n+                              SQLITE_TRANSIENT) != SQLITE_OK)\n+            throw dbwrapper_error(\"DB find failure\");\n+\n+        int src = sqlite3_step(stmts[DBW_GET]);\n+        if (src != SQLITE_ROW) {\n+            sqlite3_reset(stmts[DBW_GET]);\n+\n+            if (src == SQLITE_DONE)                // success; 0 results\n                 return false;\n-            LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n+\n+            // exceptional error\n+            throw dbwrapper_error(\"DB read failure\");\n         }\n+\n+        // SQLITE_ROW - we have a result\n+        int col_size = sqlite3_column_bytes(stmts[DBW_GET], 0);\n+        std::string strValue((const char *) sqlite3_column_blob(stmts[DBW_GET], 0), col_size);\n+\n+        sqlite3_reset(stmts[DBW_GET]);\n+\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n             ssValue.Xor(obfuscate_key);\n@@ -219,17 +272,19 @@ class CDBWrapper\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n \n-        std::string strValue;\n-        leveldb::Status status = pdb->Get(readoptions, slKey, &strValue);\n-        if (!status.ok()) {\n-            if (status.IsNotFound())\n-                return false;\n-            LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n-        }\n-        return true;\n+        if (sqlite3_bind_blob(stmts[DBW_GET], 0, &ssKey[0], ssKey.size(),\n+                              SQLITE_TRANSIENT) != SQLITE_OK)\n+            throw dbwrapper_error(\"DB find failure\");\n+\n+        int src = sqlite3_step(stmts[DBW_GET]);\n+        sqlite3_reset(stmts[DBW_GET]);\n+        if (src == SQLITE_DONE)                // zero results; not found\n+            return false;\n+        else if (src == SQLITE_ROW)\n+            return true;\n+        else\n+            throw dbwrapper_error(\"DB read failure\");\n     }\n \n     template <typename K>\n@@ -256,7 +311,8 @@ class CDBWrapper\n \n     CDBIterator *NewIterator()\n     {\n-        return new CDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n+        unsigned int stmt_idx = DBW_SEEK_SORTED;\n+        return new CDBIterator(stmts[stmt_idx], &obfuscate_key);\n     }\n \n     /**"
      }
    ]
  },
  {
    "sha": "65f95b42346f979f19ff251ed672033c7e62fc81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWY5NWI0MjM0NmY5NzlmMTlmZjI1MWVkNjcyMDMzYzdlNjJmYzgx",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-24T07:57:38Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T07:57:38Z"
      },
      "message": "dbwrapper: sqlite bug fixes",
      "tree": {
        "sha": "c261ee5d924040f23f8baea703abc4c011f60e44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c261ee5d924040f23f8baea703abc4c011f60e44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f95b42346f979f19ff251ed672033c7e62fc81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f95b42346f979f19ff251ed672033c7e62fc81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f95b42346f979f19ff251ed672033c7e62fc81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f95b42346f979f19ff251ed672033c7e62fc81/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791e70fba76b24209eeb06c0ea2251e6390c1fc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/791e70fba76b24209eeb06c0ea2251e6390c1fc0"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 20,
      "deletions": 12
    },
    "files": [
      {
        "sha": "8d6d7eeb4de35f5236cff6afde955aba088273a2",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f95b42346f979f19ff251ed672033c7e62fc81/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f95b42346f979f19ff251ed672033c7e62fc81/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=65f95b42346f979f19ff251ed672033c7e62fc81",
        "patch": "@@ -31,9 +31,11 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n {\n     std::string fp;\n     const char *filename = NULL;\n+    bool need_init = false;\n \n     if (fMemory) {\n-            filename = \":memory:\";\n+        filename = \":memory:\";\n+        need_init = true;\n     } else {\n         fp = path.string();\n         fp = fp + \"/db\";\n@@ -51,12 +53,17 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n     // open existing sqlite db\n     int orc = sqlite3_open_v2(filename, &psql, SQLITE_OPEN_READWRITE | SQLITE_OPEN_NOMUTEX, NULL);\n \n-    // if open-existing failed, attempt to create & init new db\n+    // if open-existing failed, attempt to create new db\n     if (orc != SQLITE_OK) {\n         orc = sqlite3_open_v2(filename, &psql, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_NOMUTEX, NULL);\n         if (orc != SQLITE_OK)\n-                throw(dbwrapper_error(\"DB open failed\"));\n+            throw(dbwrapper_error(\"DB open failed\"));\n \n+        need_init = true;\n+    }\n+\n+    // initialize new db\n+    if (need_init) {\n         for (unsigned int i = 0; i < ARRAYLEN(sql_db_init); i++)\n             if (sqlite3_exec(psql, sql_db_init[i], NULL, NULL, NULL) != SQLITE_OK)\n                 throw(dbwrapper_error(\"DB one-time setup failed\"));\n@@ -131,13 +138,13 @@ bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n             stmt = stmts[DBW_PUT];\n \n         // bind column 0: key\n-        if (sqlite3_bind_blob(stmt, 0, be.key.c_str(), be.key.size(),\n+        if (sqlite3_bind_blob(stmt, 1, be.key.c_str(), be.key.size(),\n                               SQLITE_TRANSIENT) != SQLITE_OK)\n             throw dbwrapper_error(\"DB cannot bind blob key\");\n \n         // if inserting, bind column 1: value\n         if (!be.isErase)\n-            if (sqlite3_bind_blob(stmt, 1, be.value.c_str(), be.value.size(),\n+            if (sqlite3_bind_blob(stmt, 2, be.value.c_str(), be.value.size(),\n                                   SQLITE_TRANSIENT) != SQLITE_OK)\n                 throw dbwrapper_error(\"DB cannot bind blob value\");\n "
      },
      {
        "sha": "9e978fd6c3c15d2715b9b937beae58c8c39adc01",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f95b42346f979f19ff251ed672033c7e62fc81/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f95b42346f979f19ff251ed672033c7e62fc81/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=65f95b42346f979f19ff251ed672033c7e62fc81",
        "patch": "@@ -124,9 +124,9 @@ class CDBIterator\n \n         std::string rawKey(&ssKey[0], ssKey.size());\n \n-        if (sqlite3_bind_blob(pstmt, 0, rawKey.c_str(), rawKey.size(),\n+        if (sqlite3_bind_blob(pstmt, 1, rawKey.c_str(), rawKey.size(),\n                               SQLITE_TRANSIENT) != SQLITE_OK)\n-            throw dbwrapper_error(\"DB find failure\");\n+            throw dbwrapper_error(\"DB seek failure\");\n \n         int src = sqlite3_step(pstmt);\n         if (src == SQLITE_ROW)\n@@ -227,9 +227,10 @@ class CDBWrapper\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n \n-        if (sqlite3_bind_blob(stmts[DBW_GET], 0, &ssKey[0], ssKey.size(),\n-                              SQLITE_TRANSIENT) != SQLITE_OK)\n-            throw dbwrapper_error(\"DB find failure\");\n+        int brc = sqlite3_bind_blob(stmts[DBW_GET], 1, &ssKey[0], ssKey.size(),\n+                                    SQLITE_TRANSIENT);\n+        if (brc != SQLITE_OK)\n+            throw dbwrapper_error(\"DB find-read failure\");\n \n         int src = sqlite3_step(stmts[DBW_GET]);\n         if (src != SQLITE_ROW) {\n@@ -273,9 +274,9 @@ class CDBWrapper\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n \n-        if (sqlite3_bind_blob(stmts[DBW_GET], 0, &ssKey[0], ssKey.size(),\n+        if (sqlite3_bind_blob(stmts[DBW_GET], 1, &ssKey[0], ssKey.size(),\n                               SQLITE_TRANSIENT) != SQLITE_OK)\n-            throw dbwrapper_error(\"DB find failure\");\n+            throw dbwrapper_error(\"DB find-exists failure\");\n \n         int src = sqlite3_step(stmts[DBW_GET]);\n         sqlite3_reset(stmts[DBW_GET]);"
      }
    ]
  },
  {
    "sha": "03765433afd62fbff5a0afaca36439719a73e257",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzc2NTQzM2FmZDYyZmJmZjVhMGFmYWNhMzY0Mzk3MTlhNzNlMjU3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T08:26:13Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T08:26:13Z"
      },
      "message": "dbwrapper: adjust db page size, cache size parameters",
      "tree": {
        "sha": "29fec2dc37eea58c184a5dc09b4aac9b591b7a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29fec2dc37eea58c184a5dc09b4aac9b591b7a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03765433afd62fbff5a0afaca36439719a73e257",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03765433afd62fbff5a0afaca36439719a73e257",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03765433afd62fbff5a0afaca36439719a73e257",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03765433afd62fbff5a0afaca36439719a73e257/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65f95b42346f979f19ff251ed672033c7e62fc81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f95b42346f979f19ff251ed672033c7e62fc81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65f95b42346f979f19ff251ed672033c7e62fc81"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2ac6708a66b7f57298f015ab7e13e13fd5fa912a",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03765433afd62fbff5a0afaca36439719a73e257/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03765433afd62fbff5a0afaca36439719a73e257/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=03765433afd62fbff5a0afaca36439719a73e257",
        "patch": "@@ -14,6 +14,8 @@\n #include <stdint.h>\n \n static const char *sql_db_init[] = {\n+    \"PRAGMA page_size=4096\",\n+    \"PRAGMA cache_size=-4000\",    // max cache size; negative = # of kibibytes\n     \"CREATE TABLE tab(k BLOB PRIMARY KEY, v BLOB)\",\n };\n "
      }
    ]
  },
  {
    "sha": "4d2e72900de85a1e2ffbc9470df05794242b82b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDJlNzI5MDBkZTg1YTFlMmZmYmM5NDcwZGYwNTc5NDI0MmI4MmI5",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-24T14:43:55Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T14:43:55Z"
      },
      "message": "dbwrapper: sqlite db init bug fixes, better errors",
      "tree": {
        "sha": "7a82520e6881d919c53bbf7eddf1ebfbc170b7bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a82520e6881d919c53bbf7eddf1ebfbc170b7bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d2e72900de85a1e2ffbc9470df05794242b82b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2e72900de85a1e2ffbc9470df05794242b82b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2e72900de85a1e2ffbc9470df05794242b82b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2e72900de85a1e2ffbc9470df05794242b82b9/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03765433afd62fbff5a0afaca36439719a73e257",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03765433afd62fbff5a0afaca36439719a73e257",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03765433afd62fbff5a0afaca36439719a73e257"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 15,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d9eedb2240f75eef0cfc2b15b4197be48759dab4",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2e72900de85a1e2ffbc9470df05794242b82b9/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2e72900de85a1e2ffbc9470df05794242b82b9/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=4d2e72900de85a1e2ffbc9470df05794242b82b9",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"util.h\"\n #include \"random.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/filesystem.hpp>\n \n@@ -14,9 +15,12 @@\n #include <stdint.h>\n \n static const char *sql_db_init[] = {\n+    \"CREATE TABLE tab(k BLOB PRIMARY KEY, v BLOB)\",\n+};\n+\n+static const char *sql_db_configure[] = {\n     \"PRAGMA page_size=4096\",\n     \"PRAGMA cache_size=-4000\",    // max cache size; negative = # of kibibytes\n-    \"CREATE TABLE tab(k BLOB PRIMARY KEY, v BLOB)\",\n };\n \n static const char *sql_stmt_text[] = {\n@@ -64,11 +68,18 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n         need_init = true;\n     }\n \n+    // configure database params\n+    if (need_init) {\n+        for (unsigned int i = 0; i < ARRAYLEN(sql_db_init); i++)\n+            if (sqlite3_exec(psql, sql_db_configure[i], NULL, NULL, NULL) != SQLITE_OK)\n+                throw(dbwrapper_error(\"DB configuration failed, stmt \" + itostr(i)));\n+    }\n+\n     // initialize new db\n     if (need_init) {\n         for (unsigned int i = 0; i < ARRAYLEN(sql_db_init); i++)\n             if (sqlite3_exec(psql, sql_db_init[i], NULL, NULL, NULL) != SQLITE_OK)\n-                throw(dbwrapper_error(\"DB one-time setup failed\"));\n+                throw(dbwrapper_error(\"DB one-time setup failed, stmt \" + itostr(i)));\n     }\n \n     // pre-compile SQL statements\n@@ -79,11 +90,8 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n                                sql_stmt_text[sqlidx],\n                                strlen(sql_stmt_text[sqlidx]),\n                                &pstmt, NULL);\n-        if (src != SQLITE_OK) {\n-            char numstr[32];\n-            snprintf(numstr, sizeof(numstr), \"(%d)\", src);\n-            throw(dbwrapper_error(\"DB compile failed\" + std::string(numstr) + \": \" + std::string(sql_stmt_text[sqlidx])));\n-        }\n+        if (src != SQLITE_OK)\n+            throw(dbwrapper_error(\"DB compile failed(\" + itostr(src) + \"): \" + std::string(sql_stmt_text[sqlidx])));\n \n         stmts.push_back(pstmt);\n     }"
      }
    ]
  },
  {
    "sha": "cbd5412a678062d20efe6dd180050f1fb0cbf13e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmQ1NDEyYTY3ODA2MmQyMGVmZTZkZDE4MDA1MGYxZmIwY2JmMTNl",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-24T15:32:32Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T15:32:32Z"
      },
      "message": "dbwrapper: improve sqlite comments, error diagnostics",
      "tree": {
        "sha": "a1702dc75dfff8f86a7de560143e25ab9d5d8997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1702dc75dfff8f86a7de560143e25ab9d5d8997"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbd5412a678062d20efe6dd180050f1fb0cbf13e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd5412a678062d20efe6dd180050f1fb0cbf13e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbd5412a678062d20efe6dd180050f1fb0cbf13e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd5412a678062d20efe6dd180050f1fb0cbf13e/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d2e72900de85a1e2ffbc9470df05794242b82b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2e72900de85a1e2ffbc9470df05794242b82b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2e72900de85a1e2ffbc9470df05794242b82b9"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "37fa89424e6a05af62c93726a6a64c31871184bc",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbd5412a678062d20efe6dd180050f1fb0cbf13e/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbd5412a678062d20efe6dd180050f1fb0cbf13e/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=cbd5412a678062d20efe6dd180050f1fb0cbf13e",
        "patch": "@@ -24,13 +24,13 @@ static const char *sql_db_configure[] = {\n };\n \n static const char *sql_stmt_text[] = {\n-    \"REPLACE INTO tab(k, v) VALUES(:k, :v)\",\n-    \"SELECT v FROM tab WHERE k = :k\",\n-    \"DELETE FROM tab WHERE k = :k\",\n-    \"BEGIN TRANSACTION\",\n-    \"COMMIT TRANSACTION\",\n-    \"SELECT COUNT(*) FROM tab\",\n-    \"SELECT k, v FROM tab WHERE k >= :k ORDER BY k\",\n+    \"REPLACE INTO tab(k, v) VALUES(:k, :v)\",            // DBW_PUT\n+    \"SELECT v FROM tab WHERE k = :k\",                   // DBW_GET\n+    \"DELETE FROM tab WHERE k = :k\",                     // DBW_DELETE\n+    \"BEGIN TRANSACTION\",                                // DBW_BEGIN\n+    \"COMMIT TRANSACTION\",                               // DBW_COMMIT\n+    \"SELECT COUNT(*) FROM tab\",                         // DBW_GET_ALL_COUNT\n+    \"SELECT k, v FROM tab WHERE k >= :k ORDER BY k\",    // DBW_SEEK_SORTED\n };\n \n CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n@@ -63,7 +63,7 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n     if (orc != SQLITE_OK) {\n         orc = sqlite3_open_v2(filename, &psql, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_NOMUTEX, NULL);\n         if (orc != SQLITE_OK)\n-            throw(dbwrapper_error(\"DB open failed\"));\n+            throw(dbwrapper_error(\"DB open failed, err \" + itostr(orc)));\n \n         need_init = true;\n     }\n@@ -75,7 +75,7 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n                 throw(dbwrapper_error(\"DB configuration failed, stmt \" + itostr(i)));\n     }\n \n-    // initialize new db\n+    // first time: initialize new db schema\n     if (need_init) {\n         for (unsigned int i = 0; i < ARRAYLEN(sql_db_init); i++)\n             if (sqlite3_exec(psql, sql_db_init[i], NULL, NULL, NULL) != SQLITE_OK)\n@@ -91,7 +91,7 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n                                strlen(sql_stmt_text[sqlidx]),\n                                &pstmt, NULL);\n         if (src != SQLITE_OK)\n-            throw(dbwrapper_error(\"DB compile failed(\" + itostr(src) + \"): \" + std::string(sql_stmt_text[sqlidx])));\n+            throw(dbwrapper_error(\"DB compile failed, err \" + itostr(src) + \": \" + std::string(sql_stmt_text[sqlidx])));\n \n         stmts.push_back(pstmt);\n     }\n@@ -135,7 +135,7 @@ bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n     int rrc = sqlite3_reset(stmts[DBW_BEGIN]);\n \n     if ((src != SQLITE_DONE) || (rrc != SQLITE_OK))\n-        throw dbwrapper_error(\"DB cannot begin transaction\");\n+        throw dbwrapper_error(\"DB cannot begin transaction, err \" + itostr(src) + \",\" + itostr(rrc));\n \n     for (unsigned int wr = 0; wr < batch.entries.size(); wr++) {\n         BatchEntry& be = batch.entries[wr];\n@@ -163,14 +163,14 @@ bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n         rrc = sqlite3_reset(stmt);\n \n         if ((src != SQLITE_DONE) || (rrc != SQLITE_OK))\n-            throw dbwrapper_error(\"DB failed update\");\n+            throw dbwrapper_error(\"DB failed update, err \" + itostr(src) + \",\" + itostr(rrc));\n     }\n \n     src = sqlite3_step(stmts[DBW_COMMIT]);\n     rrc = sqlite3_reset(stmts[DBW_COMMIT]);\n \n     if ((src != SQLITE_DONE) || (rrc != SQLITE_OK))\n-        throw dbwrapper_error(\"DB cannot commit transaction\");\n+        throw dbwrapper_error(\"DB cannot commit transaction, err\" + itostr(src) + \",\" + itostr(rrc));\n \n     return true;\n }"
      },
      {
        "sha": "8130860c66056938c85a1d65bcd9d62f2826ae25",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbd5412a678062d20efe6dd180050f1fb0cbf13e/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbd5412a678062d20efe6dd180050f1fb0cbf13e/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=cbd5412a678062d20efe6dd180050f1fb0cbf13e",
        "patch": "@@ -120,7 +120,7 @@ class CDBIterator\n \n         int rrc = sqlite3_reset(pstmt);\n         if (rrc != SQLITE_OK)\n-            throw dbwrapper_error(\"DB reset failure\");\n+            throw dbwrapper_error(\"DB reset failure, err \" + itostr(rrc));\n \n         std::string rawKey(&ssKey[0], ssKey.size());\n \n@@ -230,7 +230,7 @@ class CDBWrapper\n         int brc = sqlite3_bind_blob(stmts[DBW_GET], 1, &ssKey[0], ssKey.size(),\n                                     SQLITE_TRANSIENT);\n         if (brc != SQLITE_OK)\n-            throw dbwrapper_error(\"DB find-read failure\");\n+            throw dbwrapper_error(\"DB find-read failure, err \" + itostr(brc));\n \n         int src = sqlite3_step(stmts[DBW_GET]);\n         if (src != SQLITE_ROW) {\n@@ -240,7 +240,7 @@ class CDBWrapper\n                 return false;\n \n             // exceptional error\n-            throw dbwrapper_error(\"DB read failure\");\n+            throw dbwrapper_error(\"DB read failure, err \" + itostr(src));\n         }\n \n         // SQLITE_ROW - we have a result\n@@ -285,7 +285,7 @@ class CDBWrapper\n         else if (src == SQLITE_ROW)\n             return true;\n         else\n-            throw dbwrapper_error(\"DB read failure\");\n+            throw dbwrapper_error(\"DB read failure, err \" + itostr(src));\n     }\n \n     template <typename K>"
      }
    ]
  },
  {
    "sha": "0fdb5cebedc245b0df9334e92c9f6ee9f94465c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmRiNWNlYmVkYzI0NWIwZGY5MzM0ZTkyYzlmNmVlOWY5NDQ2NWM4",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-24T15:41:36Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T15:41:36Z"
      },
      "message": "dbwrapper: enable write-ahead journalling (credit: wumpus)",
      "tree": {
        "sha": "425a3b6290291fb6c3675f179a6a67f06735cc77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/425a3b6290291fb6c3675f179a6a67f06735cc77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbd5412a678062d20efe6dd180050f1fb0cbf13e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbd5412a678062d20efe6dd180050f1fb0cbf13e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbd5412a678062d20efe6dd180050f1fb0cbf13e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e27c3b56e17eed0bf13306af4eadbb2097d90382",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=0fdb5cebedc245b0df9334e92c9f6ee9f94465c8",
        "patch": "@@ -21,6 +21,8 @@ static const char *sql_db_init[] = {\n static const char *sql_db_configure[] = {\n     \"PRAGMA page_size=4096\",\n     \"PRAGMA cache_size=-4000\",    // max cache size; negative = # of kibibytes\n+    \"PRAGMA journal_mode=WAL\",\n+    \"PRAGMA wal_autocheckpoint=0\",\n };\n \n static const char *sql_stmt_text[] = {"
      }
    ]
  },
  {
    "sha": "0172e8d37b6433c4121692b71727513d7699ddf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTcyZThkMzdiNjQzM2M0MTIxNjkyYjcxNzI3NTEzZDc2OTlkZGYz",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-24T16:21:34Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T16:21:34Z"
      },
      "message": "dbwrapper: enable sqlite WAL auto-checkpointing",
      "tree": {
        "sha": "a68013d967f2dfe9296c37260ab7c0a4c6cd7c67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a68013d967f2dfe9296c37260ab7c0a4c6cd7c67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0172e8d37b6433c4121692b71727513d7699ddf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0172e8d37b6433c4121692b71727513d7699ddf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0172e8d37b6433c4121692b71727513d7699ddf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0172e8d37b6433c4121692b71727513d7699ddf3/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fdb5cebedc245b0df9334e92c9f6ee9f94465c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdb5cebedc245b0df9334e92c9f6ee9f94465c8"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6c8ec0f65b3bf29e7c6a33b623563a2ab6a21c78",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0172e8d37b6433c4121692b71727513d7699ddf3/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0172e8d37b6433c4121692b71727513d7699ddf3/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=0172e8d37b6433c4121692b71727513d7699ddf3",
        "patch": "@@ -22,7 +22,6 @@ static const char *sql_db_configure[] = {\n     \"PRAGMA page_size=4096\",\n     \"PRAGMA cache_size=-4000\",    // max cache size; negative = # of kibibytes\n     \"PRAGMA journal_mode=WAL\",\n-    \"PRAGMA wal_autocheckpoint=0\",\n };\n \n static const char *sql_stmt_text[] = {"
      }
    ]
  },
  {
    "sha": "159934199f345e6bfa620c9bad6822acada0a940",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTk5MzQxOTlmMzQ1ZTZiZmE2MjBjOWJhZDY4MjJhY2FkYTBhOTQw",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-24T16:33:08Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-24T16:33:08Z"
      },
      "message": "dbwrapper: sqlite WAL auto checkpoint at 10,000 pages",
      "tree": {
        "sha": "0108a7342ae531216609e05effde52a6b259ca22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0108a7342ae531216609e05effde52a6b259ca22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159934199f345e6bfa620c9bad6822acada0a940",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159934199f345e6bfa620c9bad6822acada0a940",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/159934199f345e6bfa620c9bad6822acada0a940",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159934199f345e6bfa620c9bad6822acada0a940/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0172e8d37b6433c4121692b71727513d7699ddf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0172e8d37b6433c4121692b71727513d7699ddf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0172e8d37b6433c4121692b71727513d7699ddf3"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7c48d70d302f3b7c8885baa55392947713b315c4",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159934199f345e6bfa620c9bad6822acada0a940/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159934199f345e6bfa620c9bad6822acada0a940/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=159934199f345e6bfa620c9bad6822acada0a940",
        "patch": "@@ -22,6 +22,7 @@ static const char *sql_db_configure[] = {\n     \"PRAGMA page_size=4096\",\n     \"PRAGMA cache_size=-4000\",    // max cache size; negative = # of kibibytes\n     \"PRAGMA journal_mode=WAL\",\n+    \"PRAGMA wal_autocheckpoint=10000\",\n };\n \n static const char *sql_stmt_text[] = {"
      }
    ]
  }
]