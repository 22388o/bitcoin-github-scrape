[
  {
    "sha": "8b9171ccf0a90583b5f3802ac3b4b212c230e0ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjkxNzFjY2YwYTkwNTgzYjVmMzgwMmFjM2I0YjIxMmMyMzBlMGVk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-12-14T07:18:54Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-12-17T21:07:12Z"
      },
      "message": "wallet: Initialize stop_block to nullptr in CWallet::ScanForWalletTransactions\n\nPreviously the argument would be untouched if the first block scan failed. This\nmakes the behavior predictable, and consistent with the documentation.",
      "tree": {
        "sha": "b45ed4e118ce80793ab6eff2bd6240cd46d9d54f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b45ed4e118ce80793ab6eff2bd6240cd46d9d54f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJcGBAEAAoJEG7l83hfeLNFKYYH/3L+aAa2+dufao/aXLahgsKO\nNSZZ6dhgeGCcSGUUCy7PtNcVG8DT8rYaV4zPAxWeSKij6thcUWAFb7+bgDf/4d4Z\nfpRvmxh9VH/seeptt9AOupbAVVMdkUeD3dujYZyGHSTYGh+HFsVEGyhhRhk69TLp\nao+MmpQEF1UBxukWp308HEZLZmImedOJvtuDpbUxlTEPP+T8Q5Z30puJALVZM9lL\ns58E6NkZdXDT4TR/INkfdhTb9m/vS/psi+oDfZNbs5TVBwFRKzu3HlcYh8803qiI\nH/p8R2GumFGhH1bbgNyXrE9hTwvqvcvi2J7zakiC5zc60dzGgR7y2rn66lRVyeM=\n=SeBA\n-----END PGP SIGNATURE-----",
        "payload": "tree b45ed4e118ce80793ab6eff2bd6240cd46d9d54f\nparent 34241716852df6ea6a3543822f3bf6f886519d4b\nauthor Ben Woosley <ben.woosley@gmail.com> 1544771934 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1545080832 -0800\n\nwallet: Initialize stop_block to nullptr in CWallet::ScanForWalletTransactions\n\nPreviously the argument would be untouched if the first block scan failed. This\nmakes the behavior predictable, and consistent with the documentation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34241716852df6ea6a3543822f3bf6f886519d4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34241716852df6ea6a3543822f3bf6f886519d4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34241716852df6ea6a3543822f3bf6f886519d4b"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 52,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1ed1926af2471118cb2f9c26c3eaaa79bb24080d",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 4,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=8b9171ccf0a90583b5f3802ac3b4b212c230e0ed",
        "patch": "@@ -34,7 +34,7 @@ static void AddKey(CWallet& wallet, const CKey& key)\n     wallet.AddKeyPubKey(key, key.GetPubKey());\n }\n \n-BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n \n@@ -47,14 +47,27 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n \n     auto locked_chain = chain->lock();\n \n+    // Verify ScanForWalletTransactions accomodates a null start block.\n+    {\n+        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        AddKey(wallet, coinbaseKey);\n+        WalletRescanReserver reserver(&wallet);\n+        reserver.reserve();\n+        const CBlockIndex *stop_block = null_block + 1, *failed_block = null_block + 1;\n+        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(nullptr, nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::SUCCESS);\n+        BOOST_CHECK_EQUAL(failed_block, null_block);\n+        BOOST_CHECK_EQUAL(stop_block, null_block);\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 0);\n+    }\n+\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n         CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        const CBlockIndex *stop_block, *failed_block;\n+        const CBlockIndex *stop_block = null_block + 1, *failed_block = null_block + 1;\n         BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::SUCCESS);\n         BOOST_CHECK_EQUAL(failed_block, null_block);\n         BOOST_CHECK_EQUAL(stop_block, newTip);\n@@ -72,13 +85,47 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        const CBlockIndex *stop_block, *failed_block;\n+        const CBlockIndex *stop_block = null_block + 1, *failed_block = null_block + 1;\n         BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::FAILURE);\n         BOOST_CHECK_EQUAL(failed_block, oldTip);\n         BOOST_CHECK_EQUAL(stop_block, newTip);\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n+    // Prune the remaining block file.\n+    PruneOneBlockFile(newTip->GetBlockPos().nFile);\n+    UnlinkPrunedFiles({newTip->GetBlockPos().nFile});\n+\n+    // Verify ScanForWalletTransactions scans no blocks.\n+    {\n+        CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+        AddKey(wallet, coinbaseKey);\n+        WalletRescanReserver reserver(&wallet);\n+        reserver.reserve();\n+        const CBlockIndex *stop_block = null_block + 1, *failed_block = null_block + 1;\n+        BOOST_CHECK_EQUAL(wallet.ScanForWalletTransactions(oldTip, nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::FAILURE);\n+        BOOST_CHECK_EQUAL(failed_block, newTip);\n+        BOOST_CHECK_EQUAL(stop_block, null_block);\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 0);\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n+{\n+    auto chain = interfaces::MakeChain();\n+\n+    // Cap last block file size, and mine new block in a new block file.\n+    CBlockIndex* oldTip = chainActive.Tip();\n+    GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n+    CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    CBlockIndex* newTip = chainActive.Tip();\n+\n+    auto locked_chain = chain->lock();\n+\n+    // Prune the older block file.\n+    PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n+    UnlinkPrunedFiles({oldTip->GetBlockPos().nFile});\n+\n     // Verify importmulti RPC returns failure for a key whose creation time is\n     // before the missing block, and success for a key whose creation time is\n     // after.\n@@ -294,7 +341,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n         const CBlockIndex* const null_block = nullptr;\n-        const CBlockIndex *stop_block, *failed_block;\n+        const CBlockIndex *stop_block = null_block + 1, *failed_block = null_block + 1;\n         BOOST_CHECK_EQUAL(wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, failed_block, stop_block), CWallet::ScanResult::SUCCESS);\n         BOOST_CHECK_EQUAL(stop_block, chainActive.Tip());\n         BOOST_CHECK_EQUAL(failed_block, null_block);"
      },
      {
        "sha": "109f8e6da0e176d76b69660f7e578dfc8a80f277",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8b9171ccf0a90583b5f3802ac3b4b212c230e0ed",
        "patch": "@@ -1601,6 +1601,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const\n \n     const CBlockIndex* pindex = pindexStart;\n     failed_block = nullptr;\n+    stop_block = nullptr;\n \n     if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n "
      }
    ]
  }
]