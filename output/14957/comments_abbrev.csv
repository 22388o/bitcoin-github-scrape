MarcoFalke,2018-12-14T19:01:36Z,"Bug fixes should come with test coverage, so that they wouldn't break again in the future.",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447422048,447422048,
MarcoFalke,2018-12-14T20:48:16Z,"utACK b5c2099. I assumed it would segfault when there is a reorg during rescan, not sure how easy it is to write a test for that.",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447475094,447475094,
ryanofsky,2018-12-14T21:05:38Z,"I don't think even a reorg would be enough to cause a segfault with `rescanblockchain` unless the reorg happened in a racy way before even a single block could be read.\n\nBut alternately, it would be simple to write a c++ unit test that directly called `ScanForWalletTransactions` with an empty range and checked the value of `stop_block` afterwards. It would just be kind of a boring test.",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447479197,447479197,
MarcoFalke,2018-12-14T21:10:38Z,Isn't the start block inclusive in the range? In that case an empty range couldn't be passed.,https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447480311,447480311,
ryanofsky,2018-12-14T21:21:56Z,"Passing null pindexStart might work, or using `PruneOneBlockFile` like the existing rescan tests: \n\nhttps://github.com/bitcoin/bitcoin/blob/9133227298ad97bbb10c44ac038f614c0bd7f7c7/src/wallet/test/wallet_tests.cpp#L65",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447482957,447482957,
Empact,2018-12-14T21:49:45Z,"Thanks @ryanofsky, added the two cases you mention, both fail without the initialization. Looking into the importmulti test that follows immediately after...",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447489401,447489401,
Empact,2018-12-14T22:03:54Z,Split the importmulti test into its own case for independence.,https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447492608,447492608,
MarcoFalke,2018-12-17T18:20:58Z,utACK 1c19a0b4812ba3b9e0a21985d8064801ca25e334,https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-447945969,447945969,
Empact,2018-12-17T21:10:59Z,"Thanks, fixed the nits - many of these had been fixed in https://github.com/bitcoin/bitcoin/commit/b5de045b78dd3c2a9f12eb45f4ac2f44754de9f0 but I accidentally overwrote it on a second machine rebasing yesterday.\n\nHere's the `diff -w` with 1c19a0b4812ba3b9e0a21985d8064801ca25e334:\n```patch\ndiff --git a/src/wallet/test/wallet_tests.cpp b/src/wallet/test/wallet_tests.cpp\nindex 28200123f..1e",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-448000105,448000105,
MarcoFalke,2018-12-17T21:59:37Z,re-utACK  8b9171ccf0a90583b5f3802ac3b4b212c230e0ed,https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-448014410,448014410,
meshcollider,2018-12-18T01:11:19Z,"@ryanofsky is `null_block + 1` defined behavior? `null_block` is a nullptr, doesn't feel like arithmetic on a nullptr should be defined. @practicalswift might know",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-448058931,448058931,
DrahtBot,2018-12-18T01:11:45Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14711](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14711.html) (Remove uses of chainActive and mapBlockInde",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-448059021,448059021,
Empact,2018-12-18T02:06:47Z,"""There exist implicit conversions from nullptr to null pointer value of any pointer type and any pointer to member type."" so the arithmetic is on a 0-initialized const CBlockIndex*, so it's regular pointer math.\nhttps://en.cppreference.com/w/cpp/language/nullptr\nhttps://github.com/llvm-mirror/libcxx/blob/master/include/__nullptr\n\nThat said, I don't know how much less likely the value 1 is ",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-448069770,448069770,
meshcollider,2018-12-18T02:32:48Z,"Ok, utACK https://github.com/bitcoin/bitcoin/pull/14957/commits/8b9171ccf0a90583b5f3802ac3b4b212c230e0ed",https://github.com/bitcoin/bitcoin/pull/14957#issuecomment-448074667,448074667,
ryanofsky,2018-12-14T22:02:23Z,"Maybe set these to null_block + 1, since it's possible they could be null initially by coincidence.",https://github.com/bitcoin/bitcoin/pull/14957#discussion_r241903918,241903918,src/wallet/test/wallet_tests.cpp
ryanofsky,2018-12-14T22:08:50Z,"Looks like this should say ""does not pick up transactions"" instead of ""only picks transactions""",https://github.com/bitcoin/bitcoin/pull/14957#discussion_r241905347,241905347,src/wallet/test/wallet_tests.cpp
promag,2018-12-17T15:14:26Z,Irrelevant for this test case?,https://github.com/bitcoin/bitcoin/pull/14957#discussion_r242185936,242185936,src/wallet/test/wallet_tests.cpp
promag,2018-12-17T15:14:32Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/14957#discussion_r242185982,242185982,src/wallet/test/wallet_tests.cpp
MarcoFalke,2018-12-17T18:17:50Z,Shouldn't hurt either,https://github.com/bitcoin/bitcoin/pull/14957#discussion_r242259564,242259564,src/wallet/test/wallet_tests.cpp
MarcoFalke,2018-12-17T18:20:21Z,micro-nit: no need to flatten this scope. (Keeping it makes it easier to write additional tests in the future),https://github.com/bitcoin/bitcoin/pull/14957#discussion_r242260342,242260342,src/wallet/test/wallet_tests.cpp
ryanofsky,2019-01-04T15:47:58Z,"This seems to trigger a lint warning from `test/lint/lint-all.sh` on master:\n\n```\nsrc/wallet/test/wallet_tests.cpp:50: accomodates  ==> accommodates\n^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in test/lint/lint-spelling.ignore-words.txt\n```",https://github.com/bitcoin/bitcoin/pull/14957#discussion_r245335785,245335785,src/wallet/test/wallet_tests.cpp
fanquake,2019-01-04T15:49:14Z,Should be fixed in #15102.,https://github.com/bitcoin/bitcoin/pull/14957#discussion_r245336187,245336187,src/wallet/test/wallet_tests.cpp
