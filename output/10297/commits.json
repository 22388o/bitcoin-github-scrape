[
  {
    "sha": "db994b2de93f52c9e7bed8529ca925de5064a46f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjk5NGIyZGU5M2Y1MmM5ZTdiZWQ4NTI5Y2E5MjVkZTUwNjRhNDZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-04-28T23:08:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-04-28T23:15:01Z"
      },
      "message": "Simplify DisconnectBlock arguments/return value\n\nDisconnectBlock currently has a complicated interface:\n\n  Situation       Return value\n                  pfClean != nullptr   pfClean == nullptr\n\n  All good:       true                 true\n  Failure:        false                false\n  Unclean rewind: true                 false\n                  with *pfClean=false\n\nChange this to return a tristate enum instead. As an added bonus,\nremove the ValidationState& argument which was unused.",
      "tree": {
        "sha": "37d6a59445bc81c6652afd4e162e66ab0db8793b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37d6a59445bc81c6652afd4e162e66ab0db8793b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db994b2de93f52c9e7bed8529ca925de5064a46f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db994b2de93f52c9e7bed8529ca925de5064a46f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db994b2de93f52c9e7bed8529ca925de5064a46f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db994b2de93f52c9e7bed8529ca925de5064a46f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c924011f535c46b3bc02bef8b7e2a8ad559d78d"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 33,
      "deletions": 26
    },
    "files": [
      {
        "sha": "a2435926b7ba5db8a38ecfa565d30983992c68e3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 26,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db994b2de93f52c9e7bed8529ca925de5064a46f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db994b2de93f52c9e7bed8529ca925de5064a46f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=db994b2de93f52c9e7bed8529ca925de5064a46f",
        "patch": "@@ -1526,28 +1526,36 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     return fClean;\n }\n \n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n- *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n- *  will be true if no problems were found. Otherwise, the return value will be false in case\n- *  of problems. Note that in any case, coins may be modified. */\n-static bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean = NULL)\n+ *  When UNCLEAN or FAILED is returned, view is left in an indeterminate state. */\n+static DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n-    if (pfClean)\n-        *pfClean = false;\n-\n     bool fClean = true;\n \n     CBlockUndo blockUndo;\n     CDiskBlockPos pos = pindex->GetUndoPos();\n-    if (pos.IsNull())\n-        return error(\"DisconnectBlock(): no undo data available\");\n-    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n-        return error(\"DisconnectBlock(): failure reading undo data\");\n+    if (pos.IsNull()) {\n+        error(\"DisconnectBlock(): no undo data available\");\n+        return DISCONNECT_FAILED;\n+    }\n+    if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash())) {\n+        error(\"DisconnectBlock(): failure reading undo data\");\n+        return DISCONNECT_FAILED;\n+    }\n \n-    if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n-        return error(\"DisconnectBlock(): block and undo data inconsistent\");\n+    if (blockUndo.vtxundo.size() + 1 != block.vtx.size()) {\n+        error(\"DisconnectBlock(): block and undo data inconsistent\");\n+        return DISCONNECT_FAILED;\n+    }\n \n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n@@ -1576,8 +1584,10 @@ static bool DisconnectBlock(const CBlock& block, CValidationState& state, const\n         // restore inputs\n         if (i > 0) { // not coinbases\n             const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n-            if (txundo.vprevout.size() != tx.vin.size())\n-                return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n+            if (txundo.vprevout.size() != tx.vin.size()) {\n+                error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n+                return DISCONNECT_FAILED;\n+            }\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n@@ -1590,12 +1600,7 @@ static bool DisconnectBlock(const CBlock& block, CValidationState& state, const\n     // move best block pointer to prevout block\n     view.SetBestBlock(pindex->pprev->GetBlockHash());\n \n-    if (pfClean) {\n-        *pfClean = fClean;\n-        return true;\n-    }\n-\n-    return fClean;\n+    return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n void static FlushBlockFile(bool fFinalize = false)\n@@ -2131,7 +2136,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     int64_t nStart = GetTimeMicros();\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        if (!DisconnectBlock(block, state, pindexDelete, view))\n+        if (DisconnectBlock(block, pindexDelete, view) != DISCONNECT_OK)\n             return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         bool flushed = view.Flush();\n         assert(flushed);\n@@ -3656,15 +3661,17 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n-            bool fClean = true;\n-            if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n+            DisconnectResult res = DisconnectBlock(block, pindex, coins);\n+            if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            }\n             pindexState = pindex->pprev;\n-            if (!fClean) {\n+            if (res == DISCONNECT_UNCLEAN) {\n                 nGoodTransactions = 0;\n                 pindexFailure = pindex;\n-            } else\n+            } else {\n                 nGoodTransactions += block.vtx.size();\n+            }\n         }\n         if (ShutdownRequested())\n             return true;"
      }
    ]
  }
]