DrahtBot,2018-09-04T10:45:23Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17261](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17261.html) (Make ScriptPubKeyMan an actual interface an",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-418322103,418322103,
MarcoFalke,2018-09-20T20:14:25Z,"Still need rebase, so closing for now. Let me know when you want to work on this again, so I can reopen.",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-423317719,423317719,
domob1812,2018-09-24T19:19:18Z,"Sorry, I was on vacation without proper internet access and am still travelling now (but with perhaps better options to work on this).  So please reopen, or feel free to wait until I've rebased it (should happen this or next week at the latest) and reopen then.",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-424093087,424093087,
domob1812,2018-09-25T06:08:51Z,"Thanks for reopening, I've now rebased.",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-424218539,424218539,
domob1812,2018-10-24T11:06:14Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-432612793,432612793,
meshcollider,2018-11-10T12:45:34Z,utACK https://github.com/bitcoin/bitcoin/pull/14144/commits/77a2ff44596c64c0d4a12885e46b68a1dc1e7984,https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-437581439,437581439,
domob1812,2018-12-14T07:48:44Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-447243419,447243419,
domob1812,2019-01-15T18:55:33Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-454508264,454508264,
domob1812,2019-07-13T08:09:29Z,Rebased,https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-511100894,511100894,
Sjors,2019-08-15T16:27:05Z,"@achow101 maybe rebase #16341 on this, so there's more clarity before the major box refactor?",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-521705463,521705463,
DrahtBot,2019-10-29T13:21:56Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-547416308,547416308,
domob1812,2019-11-14T14:52:36Z,"Since this has not been merged in over a year, it seems there's no interest.  Thus I won't invest any more time trying to keep it rebased, especially with the recent refactoring.  I'm still happy to revive this if there is clear interest (then please let me know).",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-553922081,553922081,
ryanofsky,2019-11-14T15:38:13Z,"This also overlaps with current PR #17369. `WithScopedValue` could help remove some of the cleanup code that PR adds to `LegacyScriptPubKeyMan::Encrypt`, which I think it would an improvement. And it might help with the descriptor wallets PR #15764 if there is encryption code there (I haven't looked).\n\nI think more ideally, we could get rid of `encrypted_batch` member, and just add a generic b",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-553942789,553942789,
ryanofsky,2019-11-14T15:47:08Z,"To summarize comment above, it's a concept ACK for this PR and extending it to current and future signing providers, since I think it's an improvement even though a more comprehensive solution may be possible.\n\nCan't say whether the PR should be reopened though. The biggest challenge for wallet code is always getting review, and there is a **lot** of related code still needing review https://g",https://github.com/bitcoin/bitcoin/pull/14144#issuecomment-553947019,553947019,
practicalswift,2018-09-30T15:32:07Z,Why is `set_encrypted_batch` created in the case of `encrypted_batch != nullptr`?,https://github.com/bitcoin/bitcoin/pull/14144#discussion_r221463265,221463265,src/wallet/wallet.cpp
domob1812,2018-10-01T06:20:25Z,"I don't see a way to get the required construction/destruction points with RAII without having this variable (a local variable just inside the conditional block won't work as it will get destructed too soon).  Note that the code as it is creates an empty `std::unique_ptr` unconditionally (here), and only creates the `WithScopedValue` object if `encrypted_batch == nullptr`.  That gives us the desir",https://github.com/bitcoin/bitcoin/pull/14144#discussion_r221503135,221503135,src/wallet/wallet.cpp
practicalswift,2018-10-01T06:43:05Z,Thanks for clarifying!,https://github.com/bitcoin/bitcoin/pull/14144#discussion_r221506040,221506040,src/wallet/wallet.cpp
practicalswift,2018-11-12T21:52:34Z,~~Nit: `explicit` is redundant here?~~,https://github.com/bitcoin/bitcoin/pull/14144#discussion_r232824855,232824855,src/wallet/wallet.cpp
domob1812,2018-11-13T10:23:36Z,"In C++11, there [are situations](https://stackoverflow.com/questions/39122101/explicit-constructor-taking-multiple-arguments#39122237) where this prevents a potentially unwanted implicit conversion.  But I'm happy to remove the `explicit` in case there's an agreement that we do not want to consider those (or actually want to allow them).",https://github.com/bitcoin/bitcoin/pull/14144#discussion_r232976848,232976848,src/wallet/wallet.cpp
practicalswift,2018-11-13T10:27:43Z,"Oh, didn't think about the initializer list case. Thanks for clarifying. Keep it there!",https://github.com/bitcoin/bitcoin/pull/14144#discussion_r232978403,232978403,src/wallet/wallet.cpp
