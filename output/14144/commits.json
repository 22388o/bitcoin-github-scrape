[
  {
    "sha": "610ee17dc9a24eede847a1043569bc18bfb13915",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTBlZTE3ZGM5YTI0ZWVkZTg0N2ExMDQzNTY5YmMxOGJmYjEzOTE1",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-09-04T09:00:39Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-07-13T07:09:39Z"
      },
      "message": "Clarify code related to CWallet::encrypted_batch.\n\nThis is a pure refactor (no functional changes) that clarifies the usage\nand code around CWallet::encrypted_batch.  For the rationale, see\nhttps://github.com/bitcoin/bitcoin/issues/14139#issue-356554677.",
      "tree": {
        "sha": "4d7af370d77b1b033e2d2305a2cbabd6da87fc6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d7af370d77b1b033e2d2305a2cbabd6da87fc6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/610ee17dc9a24eede847a1043569bc18bfb13915",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610ee17dc9a24eede847a1043569bc18bfb13915",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/610ee17dc9a24eede847a1043569bc18bfb13915",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610ee17dc9a24eede847a1043569bc18bfb13915/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536590f358dc3d3e5821eba7f1009452ea93b205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536590f358dc3d3e5821eba7f1009452ea93b205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536590f358dc3d3e5821eba7f1009452ea93b205"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 31,
      "deletions": 29
    },
    "files": [
      {
        "sha": "e0cf7b48b62975691fc8fc289a2d3f6d9b1c9b0c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610ee17dc9a24eede847a1043569bc18bfb13915/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610ee17dc9a24eede847a1043569bc18bfb13915/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=610ee17dc9a24eede847a1043569bc18bfb13915",
        "patch": "@@ -361,7 +361,7 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const C\n     // FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey\n     // which is overridden below.  To avoid flushes, the database handle is\n     // tunneled through to it.\n-    bool needsDB = !encrypted_batch;\n+    const bool needsDB = (encrypted_batch == nullptr);\n     if (needsDB) {\n         encrypted_batch = &batch;\n     }\n@@ -887,39 +887,38 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     {\n         LOCK(cs_wallet);\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-        assert(!encrypted_batch);\n-        encrypted_batch = new WalletBatch(*database);\n-        if (!encrypted_batch->TxnBegin()) {\n-            delete encrypted_batch;\n-            encrypted_batch = nullptr;\n-            return false;\n-        }\n-        encrypted_batch->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n+        assert(encrypted_batch == nullptr);\n \n-        if (!EncryptKeys(_vMasterKey))\n         {\n-            encrypted_batch->TxnAbort();\n-            delete encrypted_batch;\n-            encrypted_batch = nullptr;\n-            // We now probably have half of our keys encrypted in memory, and half not...\n-            // die and let the user reload the unencrypted wallet.\n-            assert(false);\n-        }\n+            std::unique_ptr<WalletBatch> batch(new WalletBatch(*database));\n+            encrypted_batch = batch.get();\n+\n+            if (!batch->TxnBegin()) {\n+                encrypted_batch = nullptr;\n+                return false;\n+            }\n+            batch->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n+\n+            if (!EncryptKeys(_vMasterKey))\n+            {\n+                batch->TxnAbort();\n+                // We now probably have half of our keys encrypted in memory, and half not...\n+                // die and let the user reload the unencrypted wallet.\n+                assert(false);\n+            }\n \n-        // Encryption was introduced in version 0.4.0\n-        SetMinVersion(FEATURE_WALLETCRYPT, encrypted_batch, true);\n+            // Encryption was introduced in version 0.4.0\n+            SetMinVersion(FEATURE_WALLETCRYPT, batch.get(), true);\n+\n+            if (!batch->TxnCommit()) {\n+                // We now have keys encrypted in memory, but not on disk...\n+                // die to avoid confusion and let the user reload the unencrypted wallet.\n+                assert(false);\n+            }\n \n-        if (!encrypted_batch->TxnCommit()) {\n-            delete encrypted_batch;\n             encrypted_batch = nullptr;\n-            // We now have keys encrypted in memory, but not on disk...\n-            // die to avoid confusion and let the user reload the unencrypted wallet.\n-            assert(false);\n         }\n \n-        delete encrypted_batch;\n-        encrypted_batch = nullptr;\n-\n         Lock();\n         Unlock(strWalletPassphrase);\n "
      },
      {
        "sha": "4faaf57a3194d87fc1a1ebc34cb7c4b67c028b9f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610ee17dc9a24eede847a1043569bc18bfb13915/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610ee17dc9a24eede847a1043569bc18bfb13915/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=610ee17dc9a24eede847a1043569bc18bfb13915",
        "patch": "@@ -757,6 +757,11 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     std::mutex mutexScanning;\n     friend class WalletRescanReserver;\n \n+    /**\n+     * The current wallet batch for encrypted keys; only set temporarily while\n+     * certain member functions are executing.  The memory is not owned by the\n+     * CWallet instance.\n+     */\n     WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n@@ -933,8 +938,6 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     {\n         // Should not have slots connected at this point.\n         assert(NotifyUnload.empty());\n-        delete encrypted_batch;\n-        encrypted_batch = nullptr;\n     }\n \n     bool IsCrypted() const { return fUseCrypto; }"
      }
    ]
  },
  {
    "sha": "10d8b984d6a3a736052a58d4864db170069548b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGQ4Yjk4NGQ2YTNhNzM2MDUyYTU4ZDQ4NjRkYjE3MDA2OTU0OGIy",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2018-09-04T09:25:27Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-07-13T08:08:57Z"
      },
      "message": "Use RAII to set and reset encrypted_batch.\n\nInstead of explicitly resetting CWallet::encrypted_batch where it was\nchanged locally, use an RAII helper class to do it reliably.  This\nensures that the cleanup happens on all code paths, and corresponds to\nthe corresponding recommendation in the developer guidelines.\n\nThis implements the second part of the proposal made in\nhttps://github.com/bitcoin/bitcoin/issues/14139.",
      "tree": {
        "sha": "78590059759629e7fcc29ac98c92a20dddebed20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78590059759629e7fcc29ac98c92a20dddebed20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10d8b984d6a3a736052a58d4864db170069548b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10d8b984d6a3a736052a58d4864db170069548b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10d8b984d6a3a736052a58d4864db170069548b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10d8b984d6a3a736052a58d4864db170069548b2/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "610ee17dc9a24eede847a1043569bc18bfb13915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610ee17dc9a24eede847a1043569bc18bfb13915",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/610ee17dc9a24eede847a1043569bc18bfb13915"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 37,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ee425c16f16d8f5fa154ed6d4230b7aae3233167",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 12,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10d8b984d6a3a736052a58d4864db170069548b2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10d8b984d6a3a736052a58d4864db170069548b2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=10d8b984d6a3a736052a58d4864db170069548b2",
        "patch": "@@ -250,6 +250,34 @@ std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& p\n     return ret;\n }\n \n+namespace {\n+\n+/**\n+ * A class that utilises RAII to change a value temporarily and reset it\n+ * to the previous value when it goes out of scope.\n+ */\n+template<typename T>\n+class WithScopedValue\n+{\n+private:\n+    T& m_reference;\n+    const T m_old_value;\n+\n+public:\n+    explicit WithScopedValue(T& reference, const T& new_value)\n+        : m_reference(reference), m_old_value(reference)\n+    {\n+        m_reference = new_value;\n+    }\n+\n+    ~WithScopedValue()\n+    {\n+        m_reference = m_old_value;\n+    }\n+};\n+\n+} // anonymous namespace\n+\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);\n@@ -361,15 +389,15 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const C\n     // FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey\n     // which is overridden below.  To avoid flushes, the database handle is\n     // tunneled through to it.\n-    const bool needsDB = (encrypted_batch == nullptr);\n-    if (needsDB) {\n-        encrypted_batch = &batch;\n-    }\n-    if (!AddKeyPubKeyInner(secret, pubkey)) {\n-        if (needsDB) encrypted_batch = nullptr;\n-        return false;\n+    {\n+        std::unique_ptr<WithScopedValue<WalletBatch*>> set_encrypted_batch;\n+        if (encrypted_batch == nullptr) {\n+            set_encrypted_batch.reset(new WithScopedValue<WalletBatch*>(encrypted_batch, &batch));\n+        }\n+        if (!AddKeyPubKeyInner(secret, pubkey)) {\n+            return false;\n+        }\n     }\n-    if (needsDB) encrypted_batch = nullptr;\n \n     // check if we need to remove from watch-only\n     CScript script;\n@@ -891,10 +919,9 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         {\n             std::unique_ptr<WalletBatch> batch(new WalletBatch(*database));\n-            encrypted_batch = batch.get();\n+            WithScopedValue<WalletBatch*> set_encrypted_batch(encrypted_batch, batch.get());\n \n             if (!batch->TxnBegin()) {\n-                encrypted_batch = nullptr;\n                 return false;\n             }\n             batch->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n@@ -915,8 +942,6 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n                 // die to avoid confusion and let the user reload the unencrypted wallet.\n                 assert(false);\n             }\n-\n-            encrypted_batch = nullptr;\n         }\n \n         Lock();"
      }
    ]
  }
]