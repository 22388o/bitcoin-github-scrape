[
  {
    "sha": "3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
    "node_id": "C_kwDOABII59oAKDNlMjZiYTVlMDY0ZTU2YmM4N2FjOTcwZDFkNDRmYzMwYzlkYTRiYzY",
    "commit": {
      "author": {
        "name": "Emma Wu",
        "email": "wuemma@protonmail.com",
        "date": "2021-11-17T08:03:14Z"
      },
      "committer": {
        "name": "Emma Wu",
        "email": "wuemma@protonmail.com",
        "date": "2021-11-17T08:03:14Z"
      },
      "message": "Tx fee burn prototype",
      "tree": {
        "sha": "0dfce553397bfb09c03aeeb593e917433231bcd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dfce553397bfb09c03aeeb593e917433231bcd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/comments",
    "author": {
      "login": "wu-emma",
      "id": 63286384,
      "node_id": "MDQ6VXNlcjYzMjg2Mzg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/63286384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wu-emma",
      "html_url": "https://github.com/wu-emma",
      "followers_url": "https://api.github.com/users/wu-emma/followers",
      "following_url": "https://api.github.com/users/wu-emma/following{/other_user}",
      "gists_url": "https://api.github.com/users/wu-emma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wu-emma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wu-emma/subscriptions",
      "organizations_url": "https://api.github.com/users/wu-emma/orgs",
      "repos_url": "https://api.github.com/users/wu-emma/repos",
      "events_url": "https://api.github.com/users/wu-emma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wu-emma/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "wu-emma",
      "id": 63286384,
      "node_id": "MDQ6VXNlcjYzMjg2Mzg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/63286384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wu-emma",
      "html_url": "https://github.com/wu-emma",
      "followers_url": "https://api.github.com/users/wu-emma/followers",
      "following_url": "https://api.github.com/users/wu-emma/following{/other_user}",
      "gists_url": "https://api.github.com/users/wu-emma/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wu-emma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wu-emma/subscriptions",
      "organizations_url": "https://api.github.com/users/wu-emma/orgs",
      "repos_url": "https://api.github.com/users/wu-emma/repos",
      "events_url": "https://api.github.com/users/wu-emma/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wu-emma/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb2392c5fbd8216a7783c7cf8c15b507ec1420be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb2392c5fbd8216a7783c7cf8c15b507ec1420be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb2392c5fbd8216a7783c7cf8c15b507ec1420be"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 59,
      "deletions": 2
    },
    "files": [
      {
        "sha": "06bf0aa409ef8c4809051d7e07cdac5e348375cd",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
        "patch": "@@ -73,6 +73,7 @@ class CMainParams : public CChainParams {\n         consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n         consensus.MinBIP9WarningHeight = 483840; // segwit activation height + miner confirmation window\n+        consensus.BurnFeeHeight = 749952;\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -192,6 +193,7 @@ class CTestNetParams : public CChainParams {\n         consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n         consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n         consensus.MinBIP9WarningHeight = 836640; // segwit activation height + miner confirmation window\n+        consensus.BurnFeeHeight = 949536;\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -337,6 +339,7 @@ class SigNetParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1815; // 90% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.MinBIP9WarningHeight = 0;\n+        consensus.BurnFeeHeight = 2016;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\n@@ -399,6 +402,7 @@ class CRegTestParams : public CChainParams {\n         consensus.CSVHeight = 1;    // Always active unless overridden\n         consensus.SegwitHeight = 1; // Always active unless overridden\n         consensus.MinBIP9WarningHeight = 0;\n+        consensus.BurnFeeHeight = 2016;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;"
      },
      {
        "sha": "8614c7e4801a1be7ed073474c6ed637ddec3a100",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
        "patch": "@@ -93,6 +93,7 @@ struct Params {\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n      */\n+    int BurnFeeHeight;\n     uint32_t nRuleChangeActivationThreshold;\n     uint32_t nMinerConfirmationWindow;\n     BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];"
      },
      {
        "sha": "fca0dc7fa1b8a50430a98b65e0f3410d963ebc46",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
        "patch": "@@ -160,7 +160,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     coinbaseTx.vin[0].prevout.SetNull();\n     coinbaseTx.vout.resize(1);\n     coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;\n-    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    unsigned int burnFeeRate = GetBurnRate(pindexPrev, chainparams.GetConsensus());\n+    coinbaseTx.vout[0].nValue = nFees*(100-burnFeeRate)/100 + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n     coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n     pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));\n     pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());"
      },
      {
        "sha": "d3f731181870061c3a0ec955234bb0447460e48a",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
        "patch": "@@ -46,6 +46,55 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     return CalculateNextWorkRequired(pindexLast, pindexFirst->GetBlockTime(), params);\n }\n \n+unsigned int GetBurnRate(const CBlockIndex* pindexLast, const Consensus::Params& params)\n+{\n+    assert(pindexLast != nullptr);\n+    // return 0 for blocks befare hardfork\n+    if ((pindexLast->nHeight+1)<params.BurnFeeHeight) {\n+        return 0;\n+    }\n+\n+    unsigned int minBurnFeeRate = 10;\n+    unsigned int maxBurnFeeRate = 90;\n+    unsigned int step=10;\n+    unsigned int multiplicator=4;\n+\n+    if ((pindexLast->nHeight+1) % params.DifficultyAdjustmentInterval() == 0) {\n+        //return minBurnFeeRate at the start of new difficulty epoch\n+        return minBurnFeeRate;\n+    }\n+\n+    int nHeightFirst = (pindexLast->nHeight/params.DifficultyAdjustmentInterval())*params.DifficultyAdjustmentInterval();\n+    assert(nHeightFirst >= 0);\n+    const CBlockIndex* pindexFirst = pindexLast->GetAncestor(nHeightFirst);\n+    assert(pindexFirst);\n+\n+    if (params.fPowNoRetargeting)\n+        return minBurnFeeRate;\n+\n+    int blocksToRetarget = params.DifficultyAdjustmentInterval() - pindexLast->nHeight % params.DifficultyAdjustmentInterval();\n+\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() + blocksToRetarget*params.nPowTargetSpacing - pindexFirst->GetBlockTime();\n+\n+    if (nActualTimespan < params.nPowTargetTimespan/4)\n+        nActualTimespan = params.nPowTargetTimespan/4;\n+    if (nActualTimespan > params.nPowTargetTimespan*4)\n+        nActualTimespan = params.nPowTargetTimespan*4;\n+\n+    if (nActualTimespan >= params.nPowTargetTimespan) {\n+          //return minBurnFeeRate if current block time<= target\n+          return minBurnFeeRate;\n+    } else {\n+        unsigned int burnFeeRate = 100*(params.nPowTargetTimespan-nActualTimespan)*multiplicator/params.nPowTargetTimespan;\n+        burnFeeRate = burnFeeRate/step*step;\n+        if (burnFeeRate<minBurnFeeRate)\n+            burnFeeRate=minBurnFeeRate;\n+        if (burnFeeRate>maxBurnFeeRate)\n+            burnFeeRate=maxBurnFeeRate;\n+        return burnFeeRate;\n+    }\n+}\n+\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n     if (params.fPowNoRetargeting)"
      },
      {
        "sha": "079afcec3f324b135c7c6734063f221f92c2ce1d",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
        "patch": "@@ -15,6 +15,7 @@ class CBlockIndex;\n class uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n+unsigned int GetBurnRate(const CBlockIndex* pindexLast, const Consensus::Params&);\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */"
      },
      {
        "sha": "7d02ff12a6f02f868cf1e9408807ad110dde4dd1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3e26ba5e064e56bc87ac970d1d44fc30c9da4bc6",
        "patch": "@@ -1902,7 +1902,8 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n \n-    CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, m_params.GetConsensus());\n+    unsigned int burnFeeRate = GetBurnRate(pindex, m_params.GetConsensus());\n+    CAmount blockReward =  nFees*(100-burnFeeRate)/100 + GetBlockSubsidy(pindex->nHeight, m_params.GetConsensus());\n     if (block.vtx[0]->GetValueOut() > blockReward) {\n         LogPrintf(\"ERROR: ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\\n\", block.vtx[0]->GetValueOut(), blockReward);\n         return state.Invalid(BlockValidationResult::BLOCK_CONSENSUS, \"bad-cb-amount\");"
      }
    ]
  }
]