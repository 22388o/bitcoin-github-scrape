[
  {
    "sha": "ce024b1c0ef2dcd307023aaaab40373c8bf17db1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTAyNGIxYzBlZjJkY2QzMDcwMjNhYWFhYjQwMzczYzhiZjE3ZGIx",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-27T16:09:07Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-08T17:38:17Z"
      },
      "message": "test: MiniWallet: force P2PK signature to have fixed size (71 bytes)\n\nIn order to enable exact fee calculation for transactions that spend\nP2PK outputs in the MiniWallet, we enforce the created signatures to\nhave a fixed length (>49.89% probability) by default. With that it is\neasier to check the created transactions vsize and avoid flaky tests\nthat would appear whenever the signatures R- or S-values are smaller\n(due to leading zero bytes).\n\nNote that to get the total scriptSig size one has to add another\n2 bytes, as there is also the OP_PUSHx instruction on the front and\nthe sighash type byte on the back, leading to a final scriptSig size\nof 73 bytes.",
      "tree": {
        "sha": "5a50efb7ba833b954e43e7ffadb400ab78668702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a50efb7ba833b954e43e7ffadb400ab78668702"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce024b1c0ef2dcd307023aaaab40373c8bf17db1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce024b1c0ef2dcd307023aaaab40373c8bf17db1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce024b1c0ef2dcd307023aaaab40373c8bf17db1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce024b1c0ef2dcd307023aaaab40373c8bf17db1/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82bc7faec8079b50f248655a97950087948f065d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bc7faec8079b50f248655a97950087948f065d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82bc7faec8079b50f248655a97950087948f065d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4b761128ee59a0e09534f6df950319bd26ea53de",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce024b1c0ef2dcd307023aaaab40373c8bf17db1/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce024b1c0ef2dcd307023aaaab40373c8bf17db1/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=ce024b1c0ef2dcd307023aaaab40373c8bf17db1",
        "patch": "@@ -88,12 +88,20 @@ def scan_tx(self, tx):\n             if out['scriptPubKey']['hex'] == self._scriptPubKey.hex():\n                 self._utxos.append({'txid': tx['txid'], 'vout': out['n'], 'value': out['value']})\n \n-    def sign_tx(self, tx):\n+    def sign_tx(self, tx, fixed_length=True):\n         \"\"\"Sign tx that has been created by MiniWallet in P2PK mode\"\"\"\n         assert self._priv_key is not None\n         (sighash, err) = LegacySignatureHash(CScript(self._scriptPubKey), tx, 0, SIGHASH_ALL)\n         assert err is None\n-        tx.vin[0].scriptSig = CScript([self._priv_key.sign_ecdsa(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n+        # for exact fee calculation, create only signatures with fixed size by default (>49.89% probability):\n+        # 65 bytes: high-R val (33 bytes) + low-S val (32 bytes)\n+        # with the DER header/skeleton data of 6 bytes added, this leads to a target size of 71 bytes\n+        der_sig = b''\n+        while not len(der_sig) == 71:\n+            der_sig = self._priv_key.sign_ecdsa(sighash)\n+            if not fixed_length:\n+                break\n+        tx.vin[0].scriptSig = CScript([der_sig + bytes(bytearray([SIGHASH_ALL]))])\n \n     def generate(self, num_blocks):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\""
      }
    ]
  },
  {
    "sha": "d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmQyYWI5ODQ1NDdiZTRhOWY3YmE4NTlhMmE0YzlhYzliZmJmMjA2",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-05-27T18:15:02Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-06-08T17:38:43Z"
      },
      "message": "test: MiniWallet: fix fee calculation for P2PK and check tx vsize",
      "tree": {
        "sha": "bb8431b7c3ddbe1757526f4e9269cae01137ef84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb8431b7c3ddbe1757526f4e9269cae01137ef84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce024b1c0ef2dcd307023aaaab40373c8bf17db1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce024b1c0ef2dcd307023aaaab40373c8bf17db1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce024b1c0ef2dcd307023aaaab40373c8bf17db1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "19628c07914327e5fb46050ea9e8600f513f5ce3",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=d6d2ab984547be4a9f7ba859a2a4c9ac9bfbf206",
        "patch": "@@ -142,7 +142,10 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         \"\"\"Create and return a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n         utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n-        vsize = Decimal(96)\n+        if self._priv_key is None:\n+            vsize = Decimal(96)  # anyone-can-spend\n+        else:\n+            vsize = Decimal(168)  # P2PK (73 bytes scriptSig + 35 bytes scriptPubKey + 60 bytes other)\n         send_value = satoshi_round(utxo_to_spend['value'] - fee_rate * (vsize / 1000))\n         fee = utxo_to_spend['value'] - send_value\n         assert send_value > 0\n@@ -167,10 +170,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         tx_info = from_node.testmempoolaccept([tx_hex])[0]\n         assert_equal(mempool_valid, tx_info['allowed'])\n         if mempool_valid:\n-            # TODO: for P2PK, vsize is not constant due to varying scriptSig length,\n-            # so only check this for anyone-can-spend outputs right now\n-            if self._priv_key is None:\n-                assert_equal(tx_info['vsize'], vsize)\n+            assert_equal(tx_info['vsize'], vsize)\n             assert_equal(tx_info['fees']['base'], fee)\n         return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex, 'tx': tx}\n "
      }
    ]
  }
]