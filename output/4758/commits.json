[
  {
    "sha": "65f3fa8d11a9b2e139d4963514fdc1beb04dfb68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYzZmE4ZDExYTliMmUxMzlkNDk2MzUxNGZkYzFiZWIwNGRmYjY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-05-30T23:14:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-08-23T19:24:42Z"
      },
      "message": "build: osx: Fix incomplete framework packaging for codesigning\n\nStarting with 10.9, Framework versions must be signed individually, rather\nthan as a single bundle version, in order to be properly codesigned. This\nchange ensures that the proper plist files and symlinks are present prior to\npackaging.",
      "tree": {
        "sha": "7c55c0b09f739ba1b73f922b86ede23523a21612",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c55c0b09f739ba1b73f922b86ede23523a21612"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f3fa8d11a9b2e139d4963514fdc1beb04dfb68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f3fa8d11a9b2e139d4963514fdc1beb04dfb68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f3fa8d11a9b2e139d4963514fdc1beb04dfb68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f3fa8d11a9b2e139d4963514fdc1beb04dfb68/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57fe1eaadc7c404b199239351e7bd80f48f3bcba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57fe1eaadc7c404b199239351e7bd80f48f3bcba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57fe1eaadc7c404b199239351e7bd80f48f3bcba"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ab6a222dd4e21c533c4fe3724bef0854998e54c",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3fa8d11a9b2e139d4963514fdc1beb04dfb68/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3fa8d11a9b2e139d4963514fdc1beb04dfb68/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=65f3fa8d11a9b2e139d4963514fdc1beb04dfb68",
        "patch": "@@ -37,7 +37,10 @@ class FrameworkInfo(object):\n         self.sourceFilePath = \"\"\n         self.destinationDirectory = \"\"\n         self.sourceResourcesDirectory = \"\"\n+        self.sourceVersionContentsDirectory = \"\"\n+        self.sourceContentsDirectory = \"\"\n         self.destinationResourcesDirectory = \"\"\n+        self.destinationVersionContentsDirectory = \"\"\n     \n     def __eq__(self, other):\n         if self.__class__ == other.__class__:\n@@ -141,7 +144,11 @@ class FrameworkInfo(object):\n             info.destinationDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, info.binaryDirectory)\n             \n             info.sourceResourcesDirectory = os.path.join(info.frameworkPath, \"Resources\")\n+            info.sourceContentsDirectory = os.path.join(info.frameworkPath, \"Contents\")\n+            info.sourceVersionContentsDirectory = os.path.join(info.frameworkPath, \"Versions\", info.version, \"Contents\")\n             info.destinationResourcesDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Resources\")\n+            info.destinationContentsDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Contents\")\n+            info.destinationVersionContentsDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, \"Versions\", info.version, \"Contents\")\n         \n         return info\n \n@@ -275,13 +282,35 @@ def copyFramework(framework, path, verbose):\n       os.chmod(toPath, permissions.st_mode | stat.S_IWRITE)\n \n     if not framework.isDylib(): # Copy resources for real frameworks\n+\n+        linkfrom = os.path.join(path, \"Contents/Frameworks/\", framework.frameworkName, framework.binaryName)\n+        linkto = os.path.join(framework.binaryPath)\n+        if not os.path.exists(linkfrom):\n+            os.symlink(linkto, linkfrom)\n+            if verbose >= 2:\n+                print \"Linked:\", linkfrom, \"->\", linkto\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n             shutil.copytree(fromResourcesDir, toResourcesDir)\n             if verbose >= 3:\n                 print \"Copied resources:\", fromResourcesDir\n                 print \" to:\", toResourcesDir\n+        fromContentsDir = framework.sourceVersionContentsDirectory\n+        if not os.path.exists(fromContentsDir):\n+            fromContentsDir = framework.sourceContentsDirectory\n+        if os.path.exists(fromContentsDir):\n+            toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n+            shutil.copytree(fromContentsDir, toContentsDir)\n+            contentslinkfrom = os.path.join(path, framework.destinationContentsDirectory)\n+            if not os.path.exists(contentslinkfrom):\n+                contentslinkto = os.path.join(\"Versions/\", framework.version, \"Contents\")\n+                os.symlink(contentslinkto, contentslinkfrom)\n+                if verbose >= 3:\n+                    print \"Linked:\", contentslinkfrom, \"->\", contentslinkto\n+            if verbose >= 3:\n+                print \"Copied Contents:\", fromContentsDir\n+                print \" to:\", toContentsDir\n     elif framework.frameworkName.startswith(\"libQtGui\"): # Copy qt_menu.nib (applies to non-framework layout)\n         qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n         qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")"
      }
    ]
  }
]