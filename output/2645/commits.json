[
  {
    "sha": "f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTg1N2U1Y2I1ZmIwM2JlZTljMDVkMWRkNmJhMjYyMWNhYzQ5MTc5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-05-04T17:32:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-09-28T16:37:00Z"
      },
      "message": "Inline signature serializer\n\nInstead of building a full copy of a CTransaction being signed, and\nthen modifying bits and pieces until its fits the form necessary\nfor computing the signature hash, use a wrapper serializer that\nonly serializes the necessary bits on-the-fly.\n\nThis makes it easier to see which data is actually being hash,\nreduces load on the heap, and also marginally improves performances\n(around 3-4us/sigcheck here). The performance improvements are much\nlarger for large transactions, though.\n\nThe old implementation of SignatureHash is moved to a unit tests,\nto test whether the old and new algorithm result in the same value\nfor randomly-constructed transactions.",
      "tree": {
        "sha": "6d5347773c08f057b056de27a79fe890023db872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d5347773c08f057b056de27a79fe890023db872"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b41fa66ba7eaf3e56ce43bfb28114f59a7ea58ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b41fa66ba7eaf3e56ce43bfb28114f59a7ea58ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b41fa66ba7eaf3e56ce43bfb28114f59a7ea58ac"
      }
    ],
    "stats": {
      "total": 272,
      "additions": 224,
      "deletions": 48
    },
    "files": [
      {
        "sha": "ad2d35d94c4bc1c66e1ef0cb92a2729fb5b9d225",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 45,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
        "patch": "@@ -971,62 +971,118 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n \n \n+namespace {\n+/** Wrapper that serializes like CTransaction, but with the modifications\n+ *  required for the signature hash done in-place\n+ */\n+class CTransactionSignatureSerializer {\n+private:\n+    const CTransaction &txTo;  // reference to the spending transaction (the one being serialized)\n+    const CScript &scriptCode; // output script being consumed\n+    const unsigned int nIn;    // input index of txTo being signed\n+    const bool fAnyoneCanPay;  // whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n+    const bool fHashSingle;    // whether the hashtype is SIGHASH_SINGLE\n+    const bool fHashNone;      // whether the hashtype is SIGHASH_NONE\n \n-\n-uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n-{\n-    if (nIn >= txTo.vin.size())\n-    {\n-        LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n-        return 1;\n+public:\n+    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :\n+        txTo(txToIn), scriptCode(scriptCodeIn), nIn(nInIn),\n+        fAnyoneCanPay(!!(nHashTypeIn & SIGHASH_ANYONECANPAY)),\n+        fHashSingle((nHashTypeIn & 0x1f) == SIGHASH_SINGLE),\n+        fHashNone((nHashTypeIn & 0x1f) == SIGHASH_NONE) {}\n+\n+    /** Serialize the passed scriptCode, skipping OP_CODESEPARATORs */\n+    template<typename S>\n+    void SerializeScriptCode(S &s, int nType, int nVersion) const {\n+        CScript::const_iterator it = scriptCode.begin();\n+        CScript::const_iterator itBegin = it;\n+        opcodetype opcode;\n+        unsigned int nCodeSeparators = 0;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR)\n+                nCodeSeparators++;\n+        }\n+        ::WriteCompactSize(s, scriptCode.size() - nCodeSeparators);\n+        it = itBegin;\n+        while (scriptCode.GetOp(it, opcode)) {\n+            if (opcode == OP_CODESEPARATOR) {\n+                s.write((char*)&itBegin[0], it-itBegin-1);\n+                itBegin = it;\n+            }\n+        }\n+        s.write((char*)&itBegin[0], it-itBegin);\n     }\n-    CTransaction txTmp(txTo);\n \n-    // In case concatenating two scripts ends up with two codeseparators,\n-    // or an extra one at the end, this prevents all those possible incompatibilities.\n-    scriptCode.FindAndDelete(CScript(OP_CODESEPARATOR));\n+    /** Serialize an input of txTo */\n+    template<typename S>\n+    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {\n+        // In case of SIGHASH_ANYONECANPAY, only the input being signed is serialized\n+        if (fAnyoneCanPay)\n+            nInput = nIn;\n+        // Serialize the prevout\n+        ::Serialize(s, txTo.vin[nInput].prevout, nType, nVersion);\n+        // Serialize the script\n+        if (nInput != nIn)\n+            // Blank out other inputs' signatures\n+            ::Serialize(s, CScript(), nType, nVersion);\n+        else\n+            SerializeScriptCode(s, nType, nVersion);\n+        // Serialize the nSequence\n+        if (nInput != nIn && (fHashSingle || fHashNone))\n+            // let the others update at will\n+            ::Serialize(s, (int)0, nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vin[nInput].nSequence, nType, nVersion);\n+    }\n \n-    // Blank out other inputs' signatures\n-    for (unsigned int i = 0; i < txTmp.vin.size(); i++)\n-        txTmp.vin[i].scriptSig = CScript();\n-    txTmp.vin[nIn].scriptSig = scriptCode;\n+    /** Serialize an output of txTo */\n+    template<typename S>\n+    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {\n+        if (fHashSingle && nOutput != nIn)\n+            // Do not lock-in the txout payee at other indices as txin\n+            ::Serialize(s, CTxOut(), nType, nVersion);\n+        else\n+            ::Serialize(s, txTo.vout[nOutput], nType, nVersion);\n+    }\n \n-    // Blank out some of the outputs\n-    if ((nHashType & 0x1f) == SIGHASH_NONE)\n-    {\n-        // Wildcard payee\n-        txTmp.vout.clear();\n+    /** Serialize txTo */\n+    template<typename S>\n+    void Serialize(S &s, int nType, int nVersion) const {\n+        // Serialize nVersion\n+        ::Serialize(s, txTo.nVersion, nType, nVersion);\n+        // Serialize vin\n+        unsigned int nInputs = fAnyoneCanPay ? 1 : txTo.vin.size();\n+        ::WriteCompactSize(s, nInputs);\n+        for (unsigned int nInput = 0; nInput < nInputs; nInput++)\n+             SerializeInput(s, nInput, nType, nVersion);\n+        // Serialize vout\n+        unsigned int nOutputs = fHashNone ? 0 : (fHashSingle ? nIn+1 : txTo.vout.size());\n+        ::WriteCompactSize(s, nOutputs);\n+        for (unsigned int nOutput = 0; nOutput < nOutputs; nOutput++)\n+             SerializeOutput(s, nOutput, nType, nVersion);\n+        // Serialie nLockTime\n+        ::Serialize(s, txTo.nLockTime, nType, nVersion);\n+    }\n+};\n+}\n \n-        // Let the others update at will\n-        for (unsigned int i = 0; i < txTmp.vin.size(); i++)\n-            if (i != nIn)\n-                txTmp.vin[i].nSequence = 0;\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    if (nIn >= txTo.vin.size()) {\n+        LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        return 1;\n     }\n-    else if ((nHashType & 0x1f) == SIGHASH_SINGLE)\n-    {\n-        // Only lock-in the txout payee at same index as txin\n-        unsigned int nOut = nIn;\n-        if (nOut >= txTmp.vout.size())\n-        {\n-            LogPrintf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n+\n+    // Check for invalid use of SIGHASH_SINGLE\n+    if ((nHashType & 0x1f) == SIGHASH_SINGLE) {\n+        if (nIn >= txTo.vout.size()) {\n+            LogPrintf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nIn);\n             return 1;\n         }\n-        txTmp.vout.resize(nOut+1);\n-        for (unsigned int i = 0; i < nOut; i++)\n-            txTmp.vout[i].SetNull();\n-\n-        // Let the others update at will\n-        for (unsigned int i = 0; i < txTmp.vin.size(); i++)\n-            if (i != nIn)\n-                txTmp.vin[i].nSequence = 0;\n     }\n \n-    // Blank out other inputs completely, not recommended for open transactions\n-    if (nHashType & SIGHASH_ANYONECANPAY)\n-    {\n-        txTmp.vin[0] = txTmp.vin[nIn];\n-        txTmp.vin.resize(1);\n-    }\n+    // Wrapper to serialize only the necessary parts of the transaction being signed\n+    CTransactionSignatureSerializer txTmp(txTo, scriptCode, nIn, nHashType);\n \n     // Serialize and hash\n     CHashWriter ss(SER_GETHASH, 0);"
      },
      {
        "sha": "bedc5d0c299d3a4f2a730fd3a2107c706cefcf50",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
        "patch": "@@ -34,7 +34,7 @@ test_bitcoin_SOURCES = accounting_tests.cpp alert_tests.cpp \\\n   netbase_tests.cpp pmt_tests.cpp rpc_tests.cpp script_P2SH_tests.cpp \\\n   script_tests.cpp serialize_tests.cpp sigopcount_tests.cpp test_bitcoin.cpp \\\n   transaction_tests.cpp uint160_tests.cpp uint256_tests.cpp util_tests.cpp \\\n-  wallet_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n+  wallet_tests.cpp sighash_tests.cpp $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n \n nodist_test_bitcoin_SOURCES = $(BUILT_SOURCES)\n "
      },
      {
        "sha": "7f6f141c6292b5f89b48ec9b206f7fad511e3be1",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
        "patch": "@@ -19,7 +19,7 @@ using namespace boost::assign;\n \n typedef vector<unsigned char> valtype;\n \n-extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n BOOST_AUTO_TEST_SUITE(multisig_tests)\n "
      },
      {
        "sha": "32be914414c18bacc42d3233dd0e9799fe8fda24",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
        "patch": "@@ -21,7 +21,7 @@ using namespace std;\n using namespace json_spirit;\n using namespace boost::algorithm;\n \n-extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n "
      },
      {
        "sha": "f098d461861f631eba7818aec350aa5b42caa8c0",
        "filename": "src/test/sighash_tests.cpp",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5857e5cb5fb03bee9c05d1dd6ba2621cac49179/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=f5857e5cb5fb03bee9c05d1dd6ba2621cac49179",
        "patch": "@@ -0,0 +1,120 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+extern uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+\n+// Old script.cpp SignatureHash function\n+uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+{\n+    if (nIn >= txTo.vin.size())\n+    {\n+        printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        return 1;\n+    }\n+    CTransaction txTmp(txTo);\n+\n+    // In case concatenating two scripts ends up with two codeseparators,\n+    // or an extra one at the end, this prevents all those possible incompatibilities.\n+    scriptCode.FindAndDelete(CScript(OP_CODESEPARATOR));\n+\n+    // Blank out other inputs' signatures\n+    for (unsigned int i = 0; i < txTmp.vin.size(); i++)\n+        txTmp.vin[i].scriptSig = CScript();\n+    txTmp.vin[nIn].scriptSig = scriptCode;\n+\n+    // Blank out some of the outputs\n+    if ((nHashType & 0x1f) == SIGHASH_NONE)\n+    {\n+        // Wildcard payee\n+        txTmp.vout.clear();\n+\n+        // Let the others update at will\n+        for (unsigned int i = 0; i < txTmp.vin.size(); i++)\n+            if (i != nIn)\n+                txTmp.vin[i].nSequence = 0;\n+    }\n+    else if ((nHashType & 0x1f) == SIGHASH_SINGLE)\n+    {\n+        // Only lock-in the txout payee at same index as txin\n+        unsigned int nOut = nIn;\n+        if (nOut >= txTmp.vout.size())\n+        {\n+            printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n+            return 1;\n+        }\n+        txTmp.vout.resize(nOut+1);\n+        for (unsigned int i = 0; i < nOut; i++)\n+            txTmp.vout[i].SetNull();\n+\n+        // Let the others update at will\n+        for (unsigned int i = 0; i < txTmp.vin.size(); i++)\n+            if (i != nIn)\n+                txTmp.vin[i].nSequence = 0;\n+    }\n+\n+    // Blank out other inputs completely, not recommended for open transactions\n+    if (nHashType & SIGHASH_ANYONECANPAY)\n+    {\n+        txTmp.vin[0] = txTmp.vin[nIn];\n+        txTmp.vin.resize(1);\n+    }\n+\n+    // Serialize and hash\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << txTmp << nHashType;\n+    return ss.GetHash();\n+}\n+\n+void static RandomScript(CScript &script) {\n+    static const opcodetype oplist[] = {OP_FALSE, OP_1, OP_2, OP_3, OP_CHECKSIG, OP_IF, OP_VERIF, OP_RETURN, OP_CODESEPARATOR};\n+    script = CScript();\n+    int ops = (insecure_rand() % 10);\n+    for (int i=0; i<ops; i++)\n+        script << oplist[insecure_rand() % (sizeof(oplist)/sizeof(oplist[0]))];\n+}\n+\n+void static RandomTransaction(CTransaction &tx, bool fSingle) {\n+    tx.nVersion = insecure_rand();\n+    tx.vin.clear();\n+    tx.vout.clear();\n+    tx.nLockTime = (insecure_rand() % 2) ? insecure_rand() : 0;\n+    int ins = (insecure_rand() % 4) + 1;\n+    int outs = fSingle ? ins : (insecure_rand() % 4) + 1;\n+    for (int in = 0; in < ins; in++) {\n+        tx.vin.push_back(CTxIn());\n+        CTxIn &txin = tx.vin.back();\n+        txin.prevout.hash = GetRandHash();\n+        txin.prevout.n = insecure_rand() % 4;\n+        RandomScript(txin.scriptSig);\n+        txin.nSequence = (insecure_rand() % 2) ? insecure_rand() : (unsigned int)-1;\n+    }\n+    for (int out = 0; out < outs; out++) {\n+        tx.vout.push_back(CTxOut());\n+        CTxOut &txout = tx.vout.back();\n+        txout.nValue = insecure_rand() % 100000000;\n+        RandomScript(txout.scriptPubKey);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE(sighash_tests)\n+\n+BOOST_AUTO_TEST_CASE(sighash_test)\n+{\n+    seed_insecure_rand(false);\n+\n+    for (int i=0; i<50000; i++) {\n+        int nHashType = insecure_rand();\n+        CTransaction txTo;\n+        RandomTransaction(txTo, (nHashType & 0x1f) == SIGHASH_SINGLE);\n+        CScript scriptCode;\n+        RandomScript(scriptCode);\n+        int nIn = insecure_rand() % txTo.vin.size();\n+        BOOST_CHECK(SignatureHash(scriptCode, txTo, nIn, nHashType) ==\n+        SignatureHashOld(scriptCode, txTo, nIn, nHashType));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      }
    ]
  }
]