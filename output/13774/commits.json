[
  {
    "sha": "d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzhhOGRjM2U4MjU2NGNhOGU1NmI4MWY5ZjIxYWY5Mjk1YjAxM2Rk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-27T06:22:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-27T11:19:03Z"
      },
      "message": "Return void instead of bool for functions that cannot fail\n\n* CBlockTreeDB::ReadReindexing(...)\n* CChainState::ResetBlockFailureFlags(...)\n* CTxMemPool::addUnchecked(...)\n* CWallet::LoadDestData(...)\n* CWallet::LoadKeyMetadata(...)\n* CWallet::LoadScriptMetadata(...)\n* CWallet::LoadToWallet(...)\n* CWallet::SetHDChain(...)\n* CWallet::SetHDSeed(...)\n* RemoveLocal(...)\n* SetMinVersion(...)\n* StartHTTPServer(...)\n* StartRPC(...)\n* TorControlConnection::Disconnect(...)",
      "tree": {
        "sha": "9092fdf9c11cc633313b6c33e0882d361dab7f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9092fdf9c11cc633313b6c33e0882d361dab7f5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f58674a20a127f104409e11c5c11591533ddf360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f58674a20a127f104409e11c5c11591533ddf360",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f58674a20a127f104409e11c5c11591533ddf360"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 41,
      "deletions": 74
    },
    "files": [
      {
        "sha": "3a3a26b7db619069571532dc097cc94d838cbdaf",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -423,7 +423,7 @@ std::thread threadHTTP;\n std::future<bool> threadResult;\n static std::vector<std::thread> g_thread_http_workers;\n \n-bool StartHTTPServer()\n+void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n@@ -435,7 +435,6 @@ bool StartHTTPServer()\n     for (int i = 0; i < rpcThreads; i++) {\n         g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue);\n     }\n-    return true;\n }\n \n void InterruptHTTPServer()"
      },
      {
        "sha": "8a3adaf91f4e797c02248711194a903330ad6b5e",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -26,7 +26,7 @@ bool InitHTTPServer();\n  * This is separate from InitHTTPServer to give users race-condition-free time\n  * to register their handlers between InitHTTPServer and StartHTTPServer.\n  */\n-bool StartHTTPServer();\n+void StartHTTPServer();\n /** Interrupt HTTP server threads */\n void InterruptHTTPServer();\n /** Stop HTTP server */"
      },
      {
        "sha": "36b094df0748ae327938c5d21f55de665d334620",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -731,14 +731,12 @@ static bool AppInitServers()\n     RPCServer::OnStopped(&OnRPCStopped);\n     if (!InitHTTPServer())\n         return false;\n-    if (!StartRPC())\n-        return false;\n+    StartRPC();\n     if (!StartHTTPRPC())\n         return false;\n     if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n         return false;\n-    if (!StartHTTPServer())\n-        return false;\n+    StartHTTPServer();\n     return true;\n }\n "
      },
      {
        "sha": "0ebfefa757b16d8f347928c9001c5e19c4a20bbf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -235,12 +235,11 @@ bool AddLocal(const CNetAddr &addr, int nScore)\n     return AddLocal(CService(addr, GetListenPort()), nScore);\n }\n \n-bool RemoveLocal(const CService& addr)\n+void RemoveLocal(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);\n     LogPrintf(\"RemoveLocal(%s)\\n\", addr.ToString());\n     mapLocalHost.erase(addr);\n-    return true;\n }\n \n /** Make a particular network entirely off-limits (no automatic connects to it) */"
      },
      {
        "sha": "36c2a4b8f50d331fcf03b39cbede2a44a9d47a51",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -505,7 +505,7 @@ bool IsLimited(enum Network net);\n bool IsLimited(const CNetAddr& addr);\n bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n-bool RemoveLocal(const CService& addr);\n+void RemoveLocal(const CService& addr);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = nullptr);"
      },
      {
        "sha": "e46bf2f765cd894e5a3c8d02846cdb8d45ce4799",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -301,12 +301,11 @@ bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n     return true;\n }\n \n-bool StartRPC()\n+void StartRPC()\n {\n     LogPrint(BCLog::RPC, \"Starting RPC\\n\");\n     fRPCRunning = true;\n     g_rpcSignals.Started();\n-    return true;\n }\n \n void InterruptRPC()"
      },
      {
        "sha": "a9dbfbd21f4bd0de72d0000a562d7578d1075559",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -198,7 +198,7 @@ extern CAmount AmountFromValue(const UniValue& value);\n extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n-bool StartRPC();\n+void StartRPC();\n void InterruptRPC();\n void StopRPC();\n std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);"
      },
      {
        "sha": "fbc193c2cfc84da19e7f809a60553709d552502b",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -91,7 +91,7 @@ class TorControlConnection\n     /**\n      * Disconnect from Tor control port.\n      */\n-    bool Disconnect();\n+    void Disconnect();\n \n     /** Send a command, register a handler for the reply.\n      * A trailing CRLF is automatically added.\n@@ -223,12 +223,11 @@ bool TorControlConnection::Connect(const std::string &target, const ConnectionCB\n     return true;\n }\n \n-bool TorControlConnection::Disconnect()\n+void TorControlConnection::Disconnect()\n {\n     if (b_conn)\n         bufferevent_free(b_conn);\n     b_conn = nullptr;\n-    return true;\n }\n \n bool TorControlConnection::Command(const std::string &cmd, const ReplyHandlerCB& reply_handler)"
      },
      {
        "sha": "cbea550739d16501c1fe23b8e56997d5329550e4",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -160,9 +160,8 @@ bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n         return Erase(DB_REINDEX_FLAG);\n }\n \n-bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n+void CBlockTreeDB::ReadReindexing(bool &fReindexing) {\n     fReindexing = Exists(DB_REINDEX_FLAG);\n-    return true;\n }\n \n bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {"
      },
      {
        "sha": "84011097ce0967435146421076b06717b56c89c1",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -92,7 +92,7 @@ class CBlockTreeDB : public CDBWrapper\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &info);\n     bool ReadLastBlockFile(int &nFile);\n     bool WriteReindexing(bool fReindexing);\n-    bool ReadReindexing(bool &fReindexing);\n+    void ReadReindexing(bool &fReindexing);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);"
      },
      {
        "sha": "9d705e3d23d479acdaa6f1304012a27a579a4bb1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -357,7 +357,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n     nTransactionsUpdated += n;\n }\n \n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n+void CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n@@ -412,8 +412,6 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n \n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n-\n-    return true;\n }\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n@@ -933,7 +931,7 @@ int CTxMemPool::Expire(int64_t time) {\n     return stage.size();\n }\n \n-bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool validFeeEstimate)\n+void CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n     LOCK(cs);\n     setEntries setAncestors;"
      },
      {
        "sha": "bb676cf05dfab385809eaaf11635f0efa11e17a2",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -539,8 +539,8 @@ class CTxMemPool\n     // Note that addUnchecked is ONLY called from ATMP outside of tests\n     // and any other callers may break wallet's in-mempool tracking (due to\n     // lack of CValidationInterface::TransactionAddedToMempool callbacks).\n-    bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n-    bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n+    void addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n+    void addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n \n     void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);"
      },
      {
        "sha": "702a8d7e058f7ec8a912f29b0431d8eb31f04dad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -178,7 +178,7 @@ class CChainState {\n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n     bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n     bool RewindBlockIndex(const CChainParams& params);\n@@ -2882,7 +2882,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n     return g_chainstate.InvalidateBlock(state, chainparams, pindex);\n }\n \n-bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n+void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     AssertLockHeld(cs_main);\n \n     int nHeight = pindex->nHeight;\n@@ -2914,9 +2914,9 @@ bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n         }\n         pindex = pindex->pprev;\n     }\n-    return true;\n }\n-bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+\n+void ResetBlockFailureFlags(CBlockIndex *pindex) {\n     return g_chainstate.ResetBlockFailureFlags(pindex);\n }\n "
      },
      {
        "sha": "ce46a5a782844d711c6ebf349ccb516ef9319d81",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -449,7 +449,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain& chainActive;"
      },
      {
        "sha": "15139c98178d93e12bd5ccf43ae5058ea406180a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 27,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -304,20 +304,18 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     }\n }\n \n-bool CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &meta)\n+void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[keyID] = meta;\n-    return true;\n }\n \n-bool CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &meta)\n+void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // m_script_metadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n     m_script_metadata[script_id] = meta;\n-    return true;\n }\n \n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n@@ -470,11 +468,11 @@ void CWallet::ChainStateFlushed(const CBlockLocator& loc)\n     batch.WriteBestBlock(loc);\n }\n \n-bool CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in, bool fExplicit)\n+void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in, bool fExplicit)\n {\n     LOCK(cs_wallet); // nWalletVersion\n     if (nWalletVersion >= nVersion)\n-        return true;\n+        return;\n \n     // when doing an explicit upgrade, if we pass the max version permitted, upgrade all the way\n     if (fExplicit && nVersion > nWalletMaxVersion)\n@@ -492,8 +490,6 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in,\n         if (!batch_in)\n             delete batch;\n     }\n-\n-    return true;\n }\n \n bool CWallet::SetMaxVersion(int nVersion)\n@@ -703,9 +699,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // if we are using HD, replace the HD seed with a new one\n         if (IsHDEnabled()) {\n-            if (!SetHDSeed(GenerateNewSeed())) {\n-                return false;\n-            }\n+            SetHDSeed(GenerateNewSeed());\n         }\n \n         NewKeyPool();\n@@ -1006,7 +1000,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     return true;\n }\n \n-bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n+void CWallet::LoadToWallet(const CWalletTx& wtxIn)\n {\n     uint256 hash = wtxIn.GetHash();\n     const auto& ins = mapWallet.emplace(hash, wtxIn);\n@@ -1025,8 +1019,6 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n             }\n         }\n     }\n-\n-    return true;\n }\n \n bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n@@ -1478,7 +1470,7 @@ CPubKey CWallet::DeriveNewSeed(const CKey& key)\n     return seed;\n }\n \n-bool CWallet::SetHDSeed(const CPubKey& seed)\n+void CWallet::SetHDSeed(const CPubKey& seed)\n {\n     LOCK(cs_wallet);\n     // store the keyid (hash160) together with\n@@ -1488,18 +1480,15 @@ bool CWallet::SetHDSeed(const CPubKey& seed)\n     newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n     newHdChain.seed_id = seed.GetID();\n     SetHDChain(newHdChain, false);\n-\n-    return true;\n }\n \n-bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n+void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n     if (!memonly && !WalletBatch(*database).WriteHDChain(chain))\n         throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n \n     hdChain = chain;\n-    return true;\n }\n \n bool CWallet::IsHDEnabled() const\n@@ -3899,10 +3888,9 @@ bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)\n     return WalletBatch(*database).EraseDestData(EncodeDestination(dest), key);\n }\n \n-bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n+void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n {\n     mapAddressBook[dest].destdata.insert(std::make_pair(key, value));\n-    return true;\n }\n \n bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const\n@@ -4091,9 +4079,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n \n             // generate a new master key\n             CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n-            if (!walletInstance->SetHDSeed(masterPubKey)) {\n-                throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n-            }\n+            walletInstance->SetHDSeed(masterPubKey);\n             hd_upgrade = true;\n         }\n         // Upgrade to HD chain split if necessary\n@@ -4130,9 +4116,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n         } else {\n             // generate a new seed\n             CPubKey seed = walletInstance->GenerateNewSeed();\n-            if (!walletInstance->SetHDSeed(seed)) {\n-                throw std::runtime_error(std::string(__func__) + \": Storing HD seed failed\");\n-            }\n+            walletInstance->SetHDSeed(seed);\n         }\n \n         // Top up the keypool"
      },
      {
        "sha": "9f9501cf72a19e89ba4f590882db12019774d347",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -885,8 +885,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -903,7 +903,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Erases a destination data tuple in the store and on disk\n     bool EraseDestData(const CTxDestination &dest, const std::string &key);\n     //! Adds a destination data tuple to the store, without saving it to disk\n-    bool LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    void LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n     //! Look up a destination data tuple in the store, return true if found false otherwise\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n     //! Get all destination values matching a prefix.\n@@ -936,7 +936,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n-    bool LoadToWallet(const CWalletTx& wtxIn);\n+    void LoadToWallet(const CWalletTx& wtxIn);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n@@ -1075,7 +1075,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     }\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n-    bool SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false);\n+    void SetMinVersion(enum WalletFeature, WalletBatch* batch_in = nullptr, bool fExplicit = false);\n \n     //! change which version we're allowed to upgrade to (note that this does not immediately imply upgrading to that format)\n     bool SetMaxVersion(int nVersion);\n@@ -1146,7 +1146,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool BackupWallet(const std::string& strDest);\n \n     /* Set the HD chain model (chain child index counters) */\n-    bool SetHDChain(const CHDChain& chain, bool memonly);\n+    void SetHDChain(const CHDChain& chain, bool memonly);\n     const CHDChain& GetHDChain() const { return hdChain; }\n \n     /* Returns true if HD is enabled */\n@@ -1162,7 +1162,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n        Sets the seed's version based on the current wallet version (so the\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n-    bool SetHDSeed(const CPubKey& key);\n+    void SetHDSeed(const CPubKey& key);\n \n     /**\n      * Blocks until the wallet state is up-to-date to /at least/ the current"
      },
      {
        "sha": "43e47473173c6b3737066f3ebb4846f78e94b6d1",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a8dc3e82564ca8e56b81f9f21af9295b013dd/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d78a8dc3e82564ca8e56b81f9f21af9295b013dd",
        "patch": "@@ -495,21 +495,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> strAddress;\n             ssKey >> strKey;\n             ssValue >> strValue;\n-            if (!pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue))\n-            {\n-                strErr = \"Error reading wallet database: LoadDestData failed\";\n-                return false;\n-            }\n+            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n         }\n         else if (strType == \"hdchain\")\n         {\n             CHDChain chain;\n             ssValue >> chain;\n-            if (!pwallet->SetHDChain(chain, true))\n-            {\n-                strErr = \"Error reading wallet database: SetHDChain failed\";\n-                return false;\n-            }\n+            pwallet->SetHDChain(chain, true);\n         } else if (strType == \"flags\") {\n             uint64_t flags;\n             ssValue >> flags;"
      }
    ]
  }
]