MarcoFalke,2018-07-26T22:03:04Z,"Hmm, could you do the same for all other functions that qualify (e.g. `CTxMemPool::addUnchecked`)? Would be nice if we could avoid a flood of pulls that do the same. See also #13412.",https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408249142,408249142,
practicalswift,2018-07-27T09:34:36Z,@MarcoFalke Done! :-),https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408366776,408366776,
DrahtBot,2018-07-27T10:00:50Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13792 (tx pool: Avoid passing redundant hash into addUnchecked by MarcoFalke)\n* #13786 (refactor: Avoid locking tx pool cs thrice by MarcoFalke)\n* #9381 (Remove CWalletTx merging logic from AddToWallet by ryanofsky)\n\nIf you consider this pull request important, please also help ",https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408373041,408373041,
MarcoFalke,2018-07-27T11:06:59Z,"Also, could just squash into one commit?",https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408387352,408387352,
practicalswift,2018-07-27T11:19:34Z,@MarcoFalke Thanks for reviewing! Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408389945,408389945,
MarcoFalke,2018-07-27T11:25:21Z,utACK d78a8dc3e82564ca8e56b81f9f21af9295b013dd,https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408391103,408391103,
promag,2018-07-27T13:27:02Z,utACK d78a8dc.,https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408417970,408417970,
MarcoFalke,2018-07-27T15:04:08Z,"@Empact I agree with the feedback, but this should be addressed in a separate pull request, if deemed important enough.",https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408446270,408446270,
practicalswift,2018-07-27T16:42:54Z,@Empact Does d78a8dc have your ACK? :-),https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408474573,408474573,
Empact,2018-07-28T17:49:04Z,utACK d78a8dc,https://github.com/bitcoin/bitcoin/pull/13774#issuecomment-408624286,408624286,
MarcoFalke,2018-07-27T11:02:18Z,"nit: Can keep the `return g_ch...` here, no?",https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205739262,205739262,src/validation.cpp
MarcoFalke,2018-07-27T11:05:25Z,"`CommitTransaction` only temporarily returns `true` in all cases. This is about to change soonTM. Better leave this as is for now, since we pass in a `state`, which would be confusing if the return type was `void`",https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205739874,205739874,src/interfaces/wallet.cpp
Empact,2018-07-27T14:07:43Z,How about return this instead?,https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205785288,205785288,src/txdb.cpp
Empact,2018-07-27T14:12:21Z,`return` in a `void` context,https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205787499,205787499,src/validation.cpp
Empact,2018-07-27T14:14:12Z,nit: could inline,https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205788117,205788117,src/wallet/wallet.cpp
Empact,2018-07-27T14:14:20Z,nit: could inline,https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205788174,205788174,src/wallet/wallet.cpp
MarcoFalke,2018-07-27T15:03:10Z,"We want to assert that the return code type is the same for both functions, so this looks correct as is.",https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205804624,205804624,src/validation.cpp
Empact,2018-07-27T16:55:57Z,So this is pending future use? If not I don't follow.,https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205836514,205836514,src/validation.cpp
MarcoFalke,2018-07-27T18:07:57Z,"Imagine that `Chainstate::ResetBlockFailureFlags` returns `bool` in the future. This prevents the code from compiling, whereas removing the return would happily compile and hide a potential bug, no?\n\nAlso, changing it to something else in the future keeps the future diff smaller while keeping the return.",https://github.com/bitcoin/bitcoin/pull/13774#discussion_r205856166,205856166,src/validation.cpp
