[
  {
    "sha": "0a50019fde7781263e0c8f041d1d9dcb0dee77e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTUwMDE5ZmRlNzc4MTI2M2UwYzhmMDQxZDFkOWRjYjBkZWU3N2U4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-09-26T22:02:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-30T17:33:48Z"
      },
      "message": "Walk pindexBestHeader back to ChainActive().Tip() if it is invalid\n\nInstead of keeping pindexBestHeader set to the best header we've\never seen, reset it back to our validated tip if we find an ancestor\nof it turns out to be invalid. While the name is now a bit confusing,\nthis matches much better with how it is used in practice, see below.\nFurther, this opens up more use-cases for it in the future, namely\naggressively searching for new peers in case we have discovered\n(possibly via some covert channel) headers which we do not know to be\ninvalid, but which we cannot find block data for.\n\nPlaces pindexBestHeader is used:\n\n * Various GUI displays of the best header and getblockchaininfo[\"headers\"],\n   I don't think changing this is bad, and if anything this is less confusing\n   in the presence of an invalid block.\n * IsCurrentForFeeEstimation(): If anything I think ensuring pindexBestHeader\n   isn't some crazy invalid chain is better than the alternative, even in the\n   case where you are rejecting the current chain due to hardware error (since\n   hopefully in that case you won't get any new blocks anyway).\n * ConnectBlock assumevalid checks: We use pindexBestHeader to check that the\n   block we're connecting leads to something with nMinimumChainWork (preventing\n   a user-set assumevalid from having bogus work) and that the block we're\n   connecting leads to pindexBestHeader (I'm not too worried about this one -\n   it's nice to \"disable\" assumevalid if we have a long invalid headers chain,\n   but I don't see it as a critical protection).\n * BlockRequestAllowed() uses pindexBestHeader as its target to ensure the\n   requested block is within a month of the \"current chain\". I don't think this\n   is a meaningful difference, if we're rejecting the current tip we're\n   trivially fingerprintable anyway, and if the chain really does have a bunch\n   of invalid crap near the tip, using the best not-invalid header is likely a\n   better criteria.\n * ProcessGetBlockData uses pindexBestHeader as the \"current chain\" definition\n   of whether a block request is \"historical\" for the purpose of bandwidth\n   limiting. Similarly, I don't see why this is a meaningful change.\n * We use pindexBestHeader for requesting missing headers on receipt of a\n   headers/compact block message or block inv as well as for initial getheaders.\n   I think this is definitely wrong, using the best not-invalid header for such\n   requests is much better.\n * We use pindexBestHeader to define the \"current chain\" for deciding when\n   we're close to done with initial headers sync. I don't think this is a\n   meaningful change.\n * We use pindexBestHeader to decide if initial headers sync has timed out. If\n   we're rejecting the chain due to hardware error this may result in\n   additional cases where we ban a peer, but this is already true, so I think\n   its fine.",
      "tree": {
        "sha": "4fdd341e82cc1dac433a08eda9e61405ba264226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fdd341e82cc1dac433a08eda9e61405ba264226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a50019fde7781263e0c8f041d1d9dcb0dee77e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a50019fde7781263e0c8f041d1d9dcb0dee77e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a50019fde7781263e0c8f041d1d9dcb0dee77e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a50019fde7781263e0c8f041d1d9dcb0dee77e8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6abc94e9307ea05972ef69732bb148acbfa870a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6abc94e9307ea05972ef69732bb148acbfa870a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6abc94e9307ea05972ef69732bb148acbfa870a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f5c84f72c11e1a01b0eae369e25b3c8d7f95ef4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a50019fde7781263e0c8f041d1d9dcb0dee77e8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a50019fde7781263e0c8f041d1d9dcb0dee77e8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0a50019fde7781263e0c8f041d1d9dcb0dee77e8",
        "patch": "@@ -1393,10 +1393,14 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) E\n     CheckForkWarningConditions();\n }\n \n+// Called both upon regular invalid block discovery *and* InvalidateBlock\n void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n         pindexBestInvalid = pindexNew;\n+    if (pindexBestHeader != nullptr && pindexBestHeader->GetAncestor(pindexNew->nHeight) == pindexNew) {\n+        pindexBestHeader = ::ChainActive().Tip();\n+    }\n \n     LogPrintf(\"%s: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n@@ -1409,6 +1413,8 @@ void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(c\n     CheckForkWarningConditions();\n }\n \n+// Same as InvalidChainFound, above, except not called directly from InvalidateBlock,\n+// which does its own setBlockIndexCandidates manageent.\n void CChainState::InvalidBlockFound(CBlockIndex *pindex, const BlockValidationState &state) {\n     if (state.GetResult() != BlockValidationResult::BLOCK_MUTATED) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;"
      }
    ]
  }
]