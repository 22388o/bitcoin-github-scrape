[
  {
    "sha": "a679109be40491222c458fdbef58f68509dae0bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjc5MTA5YmU0MDQ5MTIyMmM0NThmZGJlZjU4ZjY4NTA5ZGFlMGJk",
    "commit": {
      "author": {
        "name": "lucash.dev@gmail.com",
        "email": "lucash.dev@gmail.com",
        "date": "2018-05-12T16:06:38Z"
      },
      "committer": {
        "name": "lucash-dev",
        "email": "lucash.dev@gmail.com",
        "date": "2018-08-11T01:33:47Z"
      },
      "message": "Speed up knapsack_solver_test by not recreating wallet 100 times.\n\nMoved the code for creating the wallet out of the 100-times repetition loop, for the most time-consuming tests.",
      "tree": {
        "sha": "8df7a29ed62e7664465175390d47d06fab408b9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8df7a29ed62e7664465175390d47d06fab408b9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a679109be40491222c458fdbef58f68509dae0bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a679109be40491222c458fdbef58f68509dae0bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a679109be40491222c458fdbef58f68509dae0bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a679109be40491222c458fdbef58f68509dae0bd/comments",
    "author": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucash-dev",
      "id": 31627588,
      "node_id": "MDQ6VXNlcjMxNjI3NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31627588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucash-dev",
      "html_url": "https://github.com/lucash-dev",
      "followers_url": "https://api.github.com/users/lucash-dev/followers",
      "following_url": "https://api.github.com/users/lucash-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucash-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucash-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucash-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/lucash-dev/orgs",
      "repos_url": "https://api.github.com/users/lucash-dev/repos",
      "events_url": "https://api.github.com/users/lucash-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucash-dev/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48bf8ff5b161e77079bf00a7a452b3f2fe511f84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48bf8ff5b161e77079bf00a7a452b3f2fe511f84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48bf8ff5b161e77079bf00a7a452b3f2fe511f84"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 36,
      "deletions": 25
    },
    "files": [
      {
        "sha": "c04a50c12bd58a35aba3e1de39ddd32d67b3bfac",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 25,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a679109be40491222c458fdbef58f68509dae0bd/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a679109be40491222c458fdbef58f68509dae0bd/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=a679109be40491222c458fdbef58f68509dae0bd",
        "patch": "@@ -452,14 +452,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n         BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+      }\n \n-        // test with many inputs\n-        for (CAmount amt=1500; amt < COIN; amt*=10) {\n-             empty_wallet();\n-             // Create 676 inputs (=  (old MAX_STANDARD_TX_SIZE == 100000)  / 148 bytes per input)\n-             for (uint16_t j = 0; j < 676; j++)\n-                 add_coin(amt);\n+      // test with many inputs\n+      for (CAmount amt=1500; amt < COIN; amt*=10) {\n+           empty_wallet();\n+           // Create 676 inputs (=  (old MAX_STANDARD_TX_SIZE == 100000)  / 148 bytes per input)\n+           for (uint16_t j = 0; j < 676; j++)\n+               add_coin(amt);\n+\n+           // We only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n+           for (int i = 0; i < RUN_TESTS; i++) {\n              BOOST_CHECK(testWallet.SelectCoinsMinConf(2000, filter_confirmed, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+\n              if (amt - 2000 < MIN_CHANGE) {\n                  // needs more than one input:\n                  uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n@@ -471,14 +476,17 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n                  BOOST_CHECK_EQUAL(nValueRet, amt);\n                  BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n              }\n-        }\n+           }\n+      }\n \n-        // test randomness\n-        {\n-            empty_wallet();\n-            for (int i2 = 0; i2 < 100; i2++)\n-                add_coin(COIN);\n+      // test randomness\n+      {\n+          empty_wallet();\n+          for (int i2 = 0; i2 < 100; i2++)\n+              add_coin(COIN);\n \n+          // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n+          for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n             BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n@@ -496,17 +504,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n-\n-            // add 75 cents in small change.  not enough to make 90 cents,\n-            // then try making 90 cents.  there are multiple competing \"smallest bigger\" coins,\n-            // one of which should be picked at random\n-            add_coin(5 * CENT);\n-            add_coin(10 * CENT);\n-            add_coin(15 * CENT);\n-            add_coin(20 * CENT);\n-            add_coin(25 * CENT);\n-\n-            fails = 0;\n+          }\n+\n+          // add 75 cents in small change.  not enough to make 90 cents,\n+          // then try making 90 cents.  there are multiple competing \"smallest bigger\" coins,\n+          // one of which should be picked at random\n+          add_coin(5 * CENT);\n+          add_coin(10 * CENT);\n+          add_coin(15 * CENT);\n+          add_coin(20 * CENT);\n+          add_coin(25 * CENT);\n+\n+          for (int i = 0; i < RUN_TESTS; i++) {\n+            int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n@@ -517,8 +527,9 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n-        }\n-    }\n+          }\n+      }\n+\n     empty_wallet();\n }\n "
      }
    ]
  }
]