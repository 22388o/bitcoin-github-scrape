[
  {
    "sha": "8f6f92c72bc560ecf8d12fc7235a3e2222d7c033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjZmOTJjNzJiYzU2MGVjZjhkMTJmYzcyMzVhM2UyMjIyZDdjMDMz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-02T05:50:04Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-02T05:50:04Z"
      },
      "message": "Revert \"Truncate oversize 'tx' messages before relaying/storing.\"\n\nThis reverts commit c40a5aaaf484855a4350fd702e8e72fd21a68155.",
      "tree": {
        "sha": "7bd15d4a8943435e448c424c7dc0e0e8d184ec7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bd15d4a8943435e448c424c7dc0e0e8d184ec7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d89611c3aaa85798c4d70d20e35e6bcb7bdd5c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d89611c3aaa85798c4d70d20e35e6bcb7bdd5c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d89611c3aaa85798c4d70d20e35e6bcb7bdd5c0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 0,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d9ddb166cbb480d388c92397654719d6bbdd4863",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8f6f92c72bc560ecf8d12fc7235a3e2222d7c033",
        "patch": "@@ -3598,16 +3598,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        // Truncate messages to the size of the tx in them\n-        unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-        unsigned int oldSize = vMsg.size();\n-        if (nSize < oldSize) {\n-            vMsg.resize(nSize);\n-            printf(\"truncating oversized TX %s (%u -> %u)\\n\",\n-                   tx.GetHash().ToString().c_str(),\n-                   oldSize, nSize);\n-        }\n-\n         bool fMissingInputs = false;\n         CValidationState state;\n         if (mempool.accept(state, tx, true, &fMissingInputs))"
      }
    ]
  },
  {
    "sha": "159bc4819304c4394a92230c9e7b9f3416abe877",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTliYzQ4MTkzMDRjNDM5NGE5MjIzMGM5ZTdiOWYzNDE2YWJlODc3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-02T05:14:44Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-02T06:10:25Z"
      },
      "message": "Simplify storage of orphan transactions\n\nOrphan transactions were stored as a CDataStream pointer;\nthis changes the mapOrphanTransactions data structures to\nstore orphans as a CTransaction.\n\nThis also fixes CVE-2013-4627 by always re-serializing\ntransactions before relaying them.",
      "tree": {
        "sha": "98515232dcc38c2d019597289bfbd601045760b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98515232dcc38c2d019597289bfbd601045760b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159bc4819304c4394a92230c9e7b9f3416abe877",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159bc4819304c4394a92230c9e7b9f3416abe877",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/159bc4819304c4394a92230c9e7b9f3416abe877",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159bc4819304c4394a92230c9e7b9f3416abe877/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f6f92c72bc560ecf8d12fc7235a3e2222d7c033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6f92c72bc560ecf8d12fc7235a3e2222d7c033"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 39,
      "deletions": 60
    },
    "files": [
      {
        "sha": "d006d83bf5dad7e86a4d45ad776aac104997d513",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 38,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159bc4819304c4394a92230c9e7b9f3416abe877/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159bc4819304c4394a92230c9e7b9f3416abe877/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=159bc4819304c4394a92230c9e7b9f3416abe877",
        "patch": "@@ -59,8 +59,8 @@ CMedianFilter<int> cPeerBlockCounts(8, 0); // Amount of blocks that other nodes\n map<uint256, CBlock*> mapOrphanBlocks;\n multimap<uint256, CBlock*> mapOrphanBlocksByPrev;\n \n-map<uint256, CDataStream*> mapOrphanTransactions;\n-map<uint256, map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;\n+map<uint256, CTransaction> mapOrphanTransactions;\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n \n // Constant stuff for coinbase transactions we create:\n CScript COINBASE_FLAGS;\n@@ -399,33 +399,29 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CDataStream& vMsg)\n+bool AddOrphanTx(const CTransaction& tx)\n {\n-    CTransaction tx;\n-    CDataStream(vMsg) >> tx;\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n         return false;\n \n-    CDataStream* pvMsg = new CDataStream(vMsg);\n-\n     // Ignore big transactions, to avoid a\n     // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n     // large transaction with a missing parent then we assume\n     // it will rebroadcast it later, after the parent transaction(s)\n     // have been mined or received.\n     // 10,000 orphans, each of which is at most 5,000 bytes big is\n     // at most 500 megabytes of orphans:\n-    if (pvMsg->size() > 5000)\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz > 5000)\n     {\n-        printf(\"ignoring large orphan tx (size: %\"PRIszu\", hash: %s)\\n\", pvMsg->size(), hash.ToString().c_str());\n-        delete pvMsg;\n+        printf(\"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString().c_str());\n         return false;\n     }\n \n-    mapOrphanTransactions[hash] = pvMsg;\n+    mapOrphanTransactions[hash] = tx;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n \n     printf(\"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString().c_str(),\n         mapOrphanTransactions.size());\n@@ -436,16 +432,13 @@ void static EraseOrphanTx(uint256 hash)\n {\n     if (!mapOrphanTransactions.count(hash))\n         return;\n-    const CDataStream* pvMsg = mapOrphanTransactions[hash];\n-    CTransaction tx;\n-    CDataStream(*pvMsg) >> tx;\n+    const CTransaction& tx = mapOrphanTransactions[hash];\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n         if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n             mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n     }\n-    delete pvMsg;\n     mapOrphanTransactions.erase(hash);\n }\n \n@@ -456,7 +449,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, CDataStream*>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -793,7 +786,7 @@ void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n     }\n }\n \n-bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFree,\n+bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs)\n {\n     if (pfMissingInputs)\n@@ -960,7 +953,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n }\n \n \n-bool CTxMemPool::addUnchecked(const uint256& hash, CTransaction &tx)\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTransaction &tx)\n {\n     // Add to memory pool without checking anything.  Don't call this directly,\n     // call CTxMemPool::accept to properly check the transaction first.\n@@ -3602,7 +3595,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CValidationState state;\n         if (mempool.accept(state, tx, true, &fMissingInputs))\n         {\n-            RelayTransaction(tx, inv.hash, vMsg);\n+            RelayTransaction(tx, inv.hash);\n             mapAlreadyAskedFor.erase(inv);\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n@@ -3611,31 +3604,31 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n             {\n                 uint256 hashPrev = vWorkQueue[i];\n-                for (map<uint256, CDataStream*>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n+                for (set<uint256>::iterator mi = mapOrphanTransactionsByPrev[hashPrev].begin();\n                      mi != mapOrphanTransactionsByPrev[hashPrev].end();\n                      ++mi)\n                 {\n-                    const CDataStream& vMsg = *((*mi).second);\n-                    CTransaction tx;\n-                    CDataStream(vMsg) >> tx;\n-                    CInv inv(MSG_TX, tx.GetHash());\n+                    const uint256& orphanHash = *mi;\n+                    const CTransaction& orphanTx = mapOrphanTransactions[orphanHash];\n                     bool fMissingInputs2 = false;\n-                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get anyone relaying LegitTxX banned)\n+                    // Use a dummy CValidationState so someone can't setup nodes to counter-DoS based on orphan\n+                    // resolution (that is, feeding people an invalid transaction based on LegitTxX in order to get\n+                    // anyone relaying LegitTxX banned)\n                     CValidationState stateDummy;\n \n-                    if (mempool.accept(stateDummy, tx, true, &fMissingInputs2))\n+                    if (mempool.accept(stateDummy, orphanTx, true, &fMissingInputs2))\n                     {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().c_str());\n-                        RelayTransaction(tx, inv.hash, vMsg);\n-                        mapAlreadyAskedFor.erase(inv);\n-                        vWorkQueue.push_back(inv.hash);\n-                        vEraseQueue.push_back(inv.hash);\n+                        printf(\"   accepted orphan tx %s\\n\", orphanHash.ToString().c_str());\n+                        RelayTransaction(orphanTx, orphanHash);\n+                        mapAlreadyAskedFor.erase(CInv(MSG_TX, orphanHash));\n+                        vWorkQueue.push_back(orphanHash);\n+                        vEraseQueue.push_back(orphanHash);\n                     }\n                     else if (!fMissingInputs2)\n                     {\n                         // invalid or too-little-fee orphan\n-                        vEraseQueue.push_back(inv.hash);\n-                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().c_str());\n+                        vEraseQueue.push_back(orphanHash);\n+                        printf(\"   removed orphan tx %s\\n\", orphanHash.ToString().c_str());\n                     }\n                 }\n             }\n@@ -3645,7 +3638,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n         else if (fMissingInputs)\n         {\n-            AddOrphanTx(vMsg);\n+            AddOrphanTx(tx);\n \n             // DoS prevention: do not allow mapOrphanTransactions to grow unbounded\n             unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n@@ -4132,9 +4125,6 @@ class CMainCleanup\n         mapOrphanBlocks.clear();\n \n         // orphan transactions\n-        std::map<uint256, CDataStream*>::iterator it3 = mapOrphanTransactions.begin();\n-        for (; it3 != mapOrphanTransactions.end(); it3++)\n-            delete (*it3).second;\n         mapOrphanTransactions.clear();\n     }\n } instance_of_cmaincleanup;"
      },
      {
        "sha": "ea86a2bcc08005607cfb452b025b41e0850008be",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159bc4819304c4394a92230c9e7b9f3416abe877/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159bc4819304c4394a92230c9e7b9f3416abe877/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=159bc4819304c4394a92230c9e7b9f3416abe877",
        "patch": "@@ -1081,8 +1081,8 @@ class CTxMemPool\n     std::map<uint256, CTransaction> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n-    bool accept(CValidationState &state, CTransaction &tx, bool fLimitFree, bool* pfMissingInputs);\n-    bool addUnchecked(const uint256& hash, CTransaction &tx);\n+    bool accept(CValidationState &state, const CTransaction &tx, bool fLimitFree, bool* pfMissingInputs);\n+    bool addUnchecked(const uint256& hash, const CTransaction &tx);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n     bool removeConflicts(const CTransaction &tx);\n     void clear();"
      },
      {
        "sha": "c7f968da7ce8a80350b623eea895fc6b6124cbbf",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 20,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159bc4819304c4394a92230c9e7b9f3416abe877/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159bc4819304c4394a92230c9e7b9f3416abe877/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=159bc4819304c4394a92230c9e7b9f3416abe877",
        "patch": "@@ -17,10 +17,10 @@\n #include <stdint.h>\n \n // Tests this internal-to-main.cpp method:\n-extern bool AddOrphanTx(const CDataStream& vMsg);\n+extern bool AddOrphanTx(const CTransaction& tx);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-extern std::map<uint256, CDataStream*> mapOrphanTransactions;\n-extern std::map<uint256, std::map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;\n+extern std::map<uint256, CTransaction> mapOrphanTransactions;\n+extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n \n CService ip(uint32_t i)\n {\n@@ -134,14 +134,11 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n CTransaction RandomOrphan()\n {\n-    std::map<uint256, CDataStream*>::iterator it;\n+    std::map<uint256, CTransaction>::iterator it;\n     it = mapOrphanTransactions.lower_bound(GetRandHash());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n-    const CDataStream* pvMsg = it->second;\n-    CTransaction tx;\n-    CDataStream(*pvMsg) >> tx;\n-    return tx;\n+    return it->second;\n }\n \n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n@@ -163,9 +160,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // ... and 50 that depend on other orphans:\n@@ -182,9 +177,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // This really-big orphan should be ignored:\n@@ -208,9 +201,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         for (unsigned int j = 1; j < tx.vin.size(); j++)\n             tx.vin[j].scriptSig = tx.vin[0].scriptSig;\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        BOOST_CHECK(!AddOrphanTx(ds));\n+        BOOST_CHECK(!AddOrphanTx(tx));\n     }\n \n     // Test LimitOrphanTxSize() function:\n@@ -247,9 +238,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n         tx.vout[0].nValue = 1*CENT;\n         tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n-        CDataStream ds(SER_DISK, CLIENT_VERSION);\n-        ds << tx;\n-        AddOrphanTx(ds);\n+        AddOrphanTx(tx);\n     }\n \n     // Create a transaction that depends on orphans:"
      }
    ]
  }
]