[
  {
    "sha": "fa0f4157098ea68169ced44730986d0ed2c3a5aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBmNDE1NzA5OGVhNjgxNjljZWQ0NDczMDk4NmQwZWQyYzNhNWFh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-10-12T20:57:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-12-04T10:19:15Z"
      },
      "message": "net: Assume that SetCommonVersion is called at most once per peer",
      "tree": {
        "sha": "91a520e33681c8809c360c9f44429d88dd7670dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91a520e33681c8809c360c9f44429d88dd7670dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0f4157098ea68169ced44730986d0ed2c3a5aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiEzAv+Ki+RFHU/bw9igB3lXv4FNzhmulRLWR9UDaCF7QvfLz6VW6QEAGvV2v4C\nxCz1ayDhyT9rNzUtluOzlawVPvQWoF/Q4OuF+RdcSFwYH28H5P/6wL7Z1rM3GrnB\n3hNj2n2CZ+AH2q1oARSjzYpCcX9uO9czTnQlO+bJJPvx3zhyza6fbuwOYtaPBx/q\n7s+VL9sX/wYasin1eOzeK0u6Ff2bFOsqnf0V/b8QDMJNST2LNKCfCYUQe26sHoNS\n+yk0naRF1ntqAacgxdeW6fMDFg6/fxkH81umkYHCDfuq+Qfys/cm5Zx07Z0k7B4F\nM82yt/ucIAjrqOH1GCsjrJWkKHe8b4Q8h6zwvMd0fkuqKbxhsz3h7/nSnCargCy6\ntffyqpSsA9ypUjPBu3jjKKPUPgSxVhhxWQXPJIgxPHkeyS90o6CPWeT8UV1g2qcc\nx/CQKUkBcet87GYKkSandc/PV+l/ijzsngNRB/XTa/bsBbgp93uuNoVP0fsxnFZy\nNi7y7Ehy\n=/VQj\n-----END PGP SIGNATURE-----",
        "payload": "tree 91a520e33681c8809c360c9f44429d88dd7670dd\nparent dca80ffb45fcc8e6eedb6dc481d500dedab4248b\nauthor MarcoFalke <falke.marco@gmail.com> 1602536257 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1607077155 +0100\n\nnet: Assume that SetCommonVersion is called at most once per peer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0f4157098ea68169ced44730986d0ed2c3a5aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0f4157098ea68169ced44730986d0ed2c3a5aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0f4157098ea68169ced44730986d0ed2c3a5aa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dca80ffb45fcc8e6eedb6dc481d500dedab4248b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca80ffb45fcc8e6eedb6dc481d500dedab4248b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dca80ffb45fcc8e6eedb6dc481d500dedab4248b"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 14,
      "deletions": 15
    },
    "files": [
      {
        "sha": "77aaaac5b148328097d3db7e184d8baacaa65360",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0f4157098ea68169ced44730986d0ed2c3a5aa/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0f4157098ea68169ced44730986d0ed2c3a5aa/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fa0f4157098ea68169ced44730986d0ed2c3a5aa",
        "patch": "@@ -24,14 +24,15 @@\n #include <sync.h>\n #include <threadinterrupt.h>\n #include <uint256.h>\n+#include <util/check.h>\n \n #include <atomic>\n+#include <condition_variable>\n #include <cstdint>\n #include <deque>\n #include <map>\n-#include <thread>\n #include <memory>\n-#include <condition_variable>\n+#include <thread>\n \n class CScheduler;\n class CNode;\n@@ -1131,6 +1132,7 @@ class CNode\n \n     void SetCommonVersion(int greatest_common_version)\n     {\n+        Assume(m_greatest_common_version == INIT_PROTO_VERSION);\n         m_greatest_common_version = greatest_common_version;\n     }\n     int GetCommonVersion() const"
      },
      {
        "sha": "81e36b3f06017958ee06fe5808fec1944b5476af",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0f4157098ea68169ced44730986d0ed2c3a5aa/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0f4157098ea68169ced44730986d0ed2c3a5aa/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=fa0f4157098ea68169ced44730986d0ed2c3a5aa",
        "patch": "@@ -48,8 +48,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                fuzzed_data_provider.ConsumeRandomLengthString(32),\n                fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH}),\n                fuzzed_data_provider.ConsumeBool()};\n+    node.SetCommonVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n     while (fuzzed_data_provider.ConsumeBool()) {\n-        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 10)) {\n         case 0: {\n             node.CloseSocketDisconnect();\n             break;\n@@ -59,10 +60,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             break;\n         }\n         case 2: {\n-            node.SetCommonVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n-            break;\n-        }\n-        case 3: {\n             const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n             if (!SanityCheckASMap(asmap)) {\n                 break;\n@@ -71,18 +68,18 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             node.copyStats(stats, asmap);\n             break;\n         }\n-        case 4: {\n+        case 3: {\n             const CNode* add_ref_node = node.AddRef();\n             assert(add_ref_node == &node);\n             break;\n         }\n-        case 5: {\n+        case 4: {\n             if (node.GetRefCount() > 0) {\n                 node.Release();\n             }\n             break;\n         }\n-        case 6: {\n+        case 5: {\n             if (node.m_addr_known == nullptr) {\n                 break;\n             }\n@@ -93,7 +90,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             node.AddAddressKnown(*addr_opt);\n             break;\n         }\n-        case 7: {\n+        case 6: {\n             if (node.m_addr_known == nullptr) {\n                 break;\n             }\n@@ -105,27 +102,27 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             node.PushAddress(*addr_opt, fast_random_context);\n             break;\n         }\n-        case 8: {\n+        case 7: {\n             const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n             if (!inv_opt) {\n                 break;\n             }\n             node.AddKnownTx(inv_opt->hash);\n             break;\n         }\n-        case 9: {\n+        case 8: {\n             node.PushTxInventory(ConsumeUInt256(fuzzed_data_provider));\n             break;\n         }\n-        case 10: {\n+        case 9: {\n             const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\n             if (!service_opt) {\n                 break;\n             }\n             node.SetAddrLocal(*service_opt);\n             break;\n         }\n-        case 11: {\n+        case 10: {\n             const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n             bool complete;\n             node.ReceiveMsgBytes(b, complete);"
      }
    ]
  }
]