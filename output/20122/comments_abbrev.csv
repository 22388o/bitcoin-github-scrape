DrahtBot,2020-10-13 14:11:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20138 (net: Assume that SetCommonVersion is called at most once per peer by MarcoFalke)\n\nIf you consider this pull requ",https://github.com/bitcoin/bitcoin/pull/20122#issuecomment-707766231,707766231,
practicalswift,2020-10-19 20:45:49,"@ajtowns I'm leaving this one as up for grabs now that the first commit is included in #20138 :)\n\n> They look like they're making errors go away more than making it clear why the code is safe.\n\nThey won't make any error go away, but they guarantee we get an assertion failure in case of an error (instead of UB) :)",https://github.com/bitcoin/bitcoin/pull/20122#issuecomment-712432109,712432109,
ajtowns,2020-10-21 01:19:35,"@practicalswift Sorry, I meant ""making complaints from automated tools go away, without fixing any underlying bugs or making it easier for people to see why the code is safe"" :) I think adding asserts should be making it clearer for people to see why the code is safe as well as automated tools. (If you are getting this from an automated tool, are there reports from it around? I remember there were",https://github.com/bitcoin/bitcoin/pull/20122#issuecomment-713230943,713230943,
practicalswift,2020-10-21 08:53:27,"> I think adding asserts should be making it clearer for people to see why the code is safe as well as automated tools.\n\nI agree about that statement :)\n\nIn _addition_ to that use I _also_ think assertions can be useful to get deterministic termination in case where we otherwise would get a null pointer dereference (if our assumption of non-null turns out to be false).\n\nWhy is that des",https://github.com/bitcoin/bitcoin/pull/20122#issuecomment-713417072,713417072,
ajtowns,2020-10-15 01:57:54,"Introducing the non-null attribute for the `pindex` argument might be a useful addition here?\n\nI tried converting this to `CBlockIndex& index` and it has some flow-on effects (to `CChain::Next`, `CChain::FindFork`, and others) that look like they might be worth investigating and cleaning up.",https://github.com/bitcoin/bitcoin/pull/20122#discussion_r505119093,505119093,src/chain.h
ajtowns,2020-10-15 02:03:12,"Might be clearer to have:\n\n```diff\n             if (!fRevertToInv && !vHeaders.empty()) {\n+                assert(pBestIndex != nullptr); // was assigned to non-null pindex in order for vHeaders to be populated\n                 if (vHeaders.size() == 1 && state.fPreferHeaderAndIDs) {\n```\n\ninstead? (prior related PR #13548)",https://github.com/bitcoin/bitcoin/pull/20122#discussion_r505120472,505120472,src/net_processing.cpp
ajtowns,2020-10-15 02:23:49,"I think this assertion is effectively testing if `::ChainActive().Tip() == nullptr` as the other ways of setting `pindex` all seem to be `pindex = pindex->pprev` after testing `pindex->pprev`. Might be better to put the `Assert` there?\n\nThere are other places where we assume `ChainActive().Tip()` is non-null (ie, we immediately dereference it), but at a quick glance I couldn't assure myself th",https://github.com/bitcoin/bitcoin/pull/20122#discussion_r505125790,505125790,src/validation.cpp
