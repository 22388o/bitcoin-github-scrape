[
  {
    "sha": "62a09a30772141ef4add2f10d29927211abf57eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmEwOWEzMDc3MjE0MWVmNGFkZDJmMTBkMjk5MjcyMTFhYmY1N2Vi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-28T17:06:43Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-17T08:05:15Z"
      },
      "message": "refactor: remove ::vpwallets and related global variables\n\nMove global wallet variables to WalletContext struct",
      "tree": {
        "sha": "7158ee4508efa9696316741cafcddad9a507b7cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7158ee4508efa9696316741cafcddad9a507b7cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62a09a30772141ef4add2f10d29927211abf57eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62a09a30772141ef4add2f10d29927211abf57eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62a09a30772141ef4add2f10d29927211abf57eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62a09a30772141ef4add2f10d29927211abf57eb/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdd80b0a53b4af0b29cb6e03118e2456d053a757"
      }
    ],
    "stats": {
      "total": 294,
      "additions": 167,
      "deletions": 127
    },
    "files": [
      {
        "sha": "a85db04b8b7529df2ea459efad4617d4da6c4e41",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -332,6 +332,9 @@ class WalletClient : public ChainClient\n    //! loaded at startup or by RPC.\n    using LoadWalletFn = std::function<void(std::unique_ptr<Wallet> wallet)>;\n    virtual std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) = 0;\n+\n+   //! Return pointer to internal context, useful for testing.\n+   virtual WalletContext* context() { return nullptr; }\n };\n \n //! Information about one wallet address.\n@@ -410,7 +413,7 @@ struct WalletTxOut\n \n //! Return implementation of Wallet interface. This function is defined in\n //! dummywallet.cpp and throws if the wallet component is not compiled.\n-std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet);\n+std::unique_ptr<Wallet> MakeWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet);\n \n //! Return implementation of ChainClient interface for a wallet client. This\n //! function will be undefined in builds where ENABLE_WALLET is false."
      },
      {
        "sha": "022f3674224f0832216c094d4bd598fb51b43bf8",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -109,9 +109,10 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     OptionsModel optionsModel;\n     ClientModel clientModel(node, &optionsModel);\n-    AddWallet(wallet);\n-    WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet, std::nullopt);\n+    WalletContext& context = *node.walletClient().context();\n+    AddWallet(context, wallet);\n+    WalletModel walletModel(interfaces::MakeWallet(context, wallet), clientModel, platformStyle.get());\n+    RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n "
      },
      {
        "sha": "1976bee74b8befd0333019e5205652421aa7456b",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -164,9 +164,10 @@ void TestGUI(interfaces::Node& node)\n     TransactionView transactionView(platformStyle.get());\n     OptionsModel optionsModel;\n     ClientModel clientModel(node, &optionsModel);\n-    AddWallet(wallet);\n-    WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet, std::nullopt);\n+    WalletContext& context = *node.walletClient().context();\n+    AddWallet(context, wallet);\n+    WalletModel walletModel(interfaces::MakeWallet(context, wallet), clientModel, platformStyle.get());\n+    RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n "
      },
      {
        "sha": "a382fb902148eaf892ef18c0ad18f12eae09f020",
        "filename": "src/wallet/context.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/context.h?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -5,11 +5,22 @@\n #ifndef BITCOIN_WALLET_CONTEXT_H\n #define BITCOIN_WALLET_CONTEXT_H\n \n+#include <sync.h>\n+\n+#include <functional>\n+#include <list>\n+#include <memory>\n+#include <vector>\n+\n class ArgsManager;\n+class CWallet;\n namespace interfaces {\n class Chain;\n+class Wallet;\n } // namespace interfaces\n \n+using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n+\n //! WalletContext struct containing references to state shared between CWallet\n //! instances, like the reference to the chain interface, and the list of opened\n //! wallets.\n@@ -22,7 +33,10 @@ class Chain;\n //! behavior.\n struct WalletContext {\n     interfaces::Chain* chain{nullptr};\n-    ArgsManager* args{nullptr};\n+    ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n+    Mutex wallets_mutex;\n+    std::vector<std::shared_ptr<CWallet>> wallets GUARDED_BY(wallets_mutex);\n+    std::list<LoadWalletFn> wallet_load_fns GUARDED_BY(wallets_mutex);\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the WalletContext struct doesn't need to #include class"
      },
      {
        "sha": "0d4b98ecafb7cc9063e95a87e6115834c393114a",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -110,7 +110,7 @@ WalletTxOut MakeWalletTxOut(const CWallet& wallet,\n class WalletImpl : public Wallet\n {\n public:\n-    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_wallet(wallet) {}\n+    explicit WalletImpl(WalletContext& context, const std::shared_ptr<CWallet>& wallet) : m_context(context), m_wallet(wallet) {}\n \n     bool encryptWallet(const SecureString& wallet_passphrase) override\n     {\n@@ -458,7 +458,7 @@ class WalletImpl : public Wallet\n     CAmount getDefaultMaxTxFee() override { return m_wallet->m_default_max_tx_fee; }\n     void remove() override\n     {\n-        RemoveWallet(m_wallet, false /* load_on_start */);\n+        RemoveWallet(m_context, m_wallet, false /* load_on_start */);\n     }\n     bool isLegacy() override { return m_wallet->IsLegacy(); }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n@@ -494,6 +494,7 @@ class WalletImpl : public Wallet\n     }\n     CWallet* wallet() override { return m_wallet.get(); }\n \n+    WalletContext& m_context;\n     std::shared_ptr<CWallet> m_wallet;\n };\n \n@@ -505,7 +506,7 @@ class WalletClientImpl : public WalletClient\n         m_context.chain = &chain;\n         m_context.args = &args;\n     }\n-    ~WalletClientImpl() override { UnloadWallets(); }\n+    ~WalletClientImpl() override { UnloadWallets(m_context); }\n \n     //! ChainClient methods\n     void registerRpcs() override\n@@ -519,11 +520,11 @@ class WalletClientImpl : public WalletClient\n             m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n         }\n     }\n-    bool verify() override { return VerifyWallets(*m_context.chain); }\n-    bool load() override { return LoadWallets(*m_context.chain); }\n-    void start(CScheduler& scheduler) override { return StartWallets(scheduler, *Assert(m_context.args)); }\n-    void flush() override { return FlushWallets(); }\n-    void stop() override { return StopWallets(); }\n+    bool verify() override { return VerifyWallets(m_context); }\n+    bool load() override { return LoadWallets(m_context); }\n+    void start(CScheduler& scheduler) override { return StartWallets(m_context, scheduler); }\n+    void flush() override { return FlushWallets(m_context); }\n+    void stop() override { return StopWallets(m_context); }\n     void setMockTime(int64_t time) override { return SetMockTime(time); }\n \n     //! WalletClient methods\n@@ -535,14 +536,14 @@ class WalletClientImpl : public WalletClient\n         options.require_create = true;\n         options.create_flags = wallet_creation_flags;\n         options.create_passphrase = passphrase;\n-        return MakeWallet(CreateWallet(*m_context.chain, name, true /* load_on_start */, options, status, error, warnings));\n+        return MakeWallet(m_context, CreateWallet(m_context, name, true /* load_on_start */, options, status, error, warnings));\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n         DatabaseOptions options;\n         DatabaseStatus status;\n         options.require_existing = true;\n-        return MakeWallet(LoadWallet(*m_context.chain, name, true /* load_on_start */, options, status, error, warnings));\n+        return MakeWallet(m_context, LoadWallet(m_context, name, true /* load_on_start */, options, status, error, warnings));\n     }\n     std::string getWalletDir() override\n     {\n@@ -559,15 +560,16 @@ class WalletClientImpl : public WalletClient\n     std::vector<std::unique_ptr<Wallet>> getWallets() override\n     {\n         std::vector<std::unique_ptr<Wallet>> wallets;\n-        for (const auto& wallet : GetWallets()) {\n-            wallets.emplace_back(MakeWallet(wallet));\n+        for (const auto& wallet : GetWallets(m_context)) {\n+            wallets.emplace_back(MakeWallet(m_context, wallet));\n         }\n         return wallets;\n     }\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n-        return HandleLoadWallet(std::move(fn));\n+        return HandleLoadWallet(m_context, std::move(fn));\n     }\n+    WalletContext* context() override  { return &m_context; }\n \n     WalletContext m_context;\n     const std::vector<std::string> m_wallet_filenames;\n@@ -578,7 +580,7 @@ class WalletClientImpl : public WalletClient\n } // namespace wallet\n \n namespace interfaces {\n-std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? std::make_unique<wallet::WalletImpl>(wallet) : nullptr; }\n+std::unique_ptr<Wallet> MakeWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet) { return wallet ? std::make_unique<wallet::WalletImpl>(context, wallet) : nullptr; }\n \n std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args)\n {"
      },
      {
        "sha": "9009f93dbc7b0efd6421dbea54aff67bad8b33aa",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -11,13 +11,15 @@\n #include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <wallet/context.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n \n #include <univalue.h>\n \n-bool VerifyWallets(interfaces::Chain& chain)\n+bool VerifyWallets(WalletContext& context)\n {\n+    interfaces::Chain& chain = *context.chain;\n     if (gArgs.IsArgSet(\"-walletdir\")) {\n         fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n         boost::system::error_code error;\n@@ -87,8 +89,9 @@ bool VerifyWallets(interfaces::Chain& chain)\n     return true;\n }\n \n-bool LoadWallets(interfaces::Chain& chain)\n+bool LoadWallets(WalletContext& context)\n {\n+    interfaces::Chain& chain = *context.chain;\n     try {\n         std::set<fs::path> wallet_paths;\n         for (const std::string& name : gArgs.GetArgs(\"-wallet\")) {\n@@ -106,13 +109,13 @@ bool LoadWallets(interfaces::Chain& chain)\n                 continue;\n             }\n             chain.initMessage(_(\"Loading wallet\u2026\").translated);\n-            std::shared_ptr<CWallet> pwallet = database ? CWallet::Create(&chain, name, std::move(database), options.create_flags, error, warnings) : nullptr;\n+            std::shared_ptr<CWallet> pwallet = database ? CWallet::Create(context, name, std::move(database), options.create_flags, error, warnings) : nullptr;\n             if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n             if (!pwallet) {\n                 chain.initError(error);\n                 return false;\n             }\n-            AddWallet(pwallet);\n+            AddWallet(context, pwallet);\n         }\n         return true;\n     } catch (const std::runtime_error& e) {\n@@ -121,41 +124,41 @@ bool LoadWallets(interfaces::Chain& chain)\n     }\n }\n \n-void StartWallets(CScheduler& scheduler, const ArgsManager& args)\n+void StartWallets(WalletContext& context, CScheduler& scheduler)\n {\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context)) {\n         pwallet->postInitProcess();\n     }\n \n     // Schedule periodic wallet flushes and tx rebroadcasts\n-    if (args.GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET)) {\n-        scheduler.scheduleEvery(MaybeCompactWalletDB, std::chrono::milliseconds{500});\n+    if (context.args->GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET)) {\n+        scheduler.scheduleEvery([&context] { MaybeCompactWalletDB(context); }, std::chrono::milliseconds{500});\n     }\n-    scheduler.scheduleEvery(MaybeResendWalletTxs, std::chrono::milliseconds{1000});\n+    scheduler.scheduleEvery([&context] { MaybeResendWalletTxs(context); }, std::chrono::milliseconds{1000});\n }\n \n-void FlushWallets()\n+void FlushWallets(WalletContext& context)\n {\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context)) {\n         pwallet->Flush();\n     }\n }\n \n-void StopWallets()\n+void StopWallets(WalletContext& context)\n {\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context)) {\n         pwallet->Close();\n     }\n }\n \n-void UnloadWallets()\n+void UnloadWallets(WalletContext& context)\n {\n-    auto wallets = GetWallets();\n+    auto wallets = GetWallets(context);\n     while (!wallets.empty()) {\n         auto wallet = wallets.back();\n         wallets.pop_back();\n         std::vector<bilingual_str> warnings;\n-        RemoveWallet(wallet, std::nullopt, warnings);\n+        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt, warnings);\n         UnloadWallet(std::move(wallet));\n     }\n }"
      },
      {
        "sha": "e207bc2e09521990148f2d9e01193607fbbbad8e",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -11,27 +11,28 @@\n \n class ArgsManager;\n class CScheduler;\n+struct WalletContext;\n \n namespace interfaces {\n class Chain;\n } // namespace interfaces\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-bool VerifyWallets(interfaces::Chain& chain);\n+bool VerifyWallets(WalletContext& context);\n \n //! Load wallet databases.\n-bool LoadWallets(interfaces::Chain& chain);\n+bool LoadWallets(WalletContext& context);\n \n //! Complete startup of wallets.\n-void StartWallets(CScheduler& scheduler, const ArgsManager& args);\n+void StartWallets(WalletContext& context, CScheduler& scheduler);\n \n //! Flush all wallets in preparation for shutdown.\n-void FlushWallets();\n+void FlushWallets(WalletContext& context);\n \n //! Stop all wallets. Wallets will be flushed first.\n-void StopWallets();\n+void StopWallets(WalletContext& context);\n \n //! Close all wallets.\n-void UnloadWallets();\n+void UnloadWallets(WalletContext& context);\n \n #endif // BITCOIN_WALLET_LOAD_H"
      },
      {
        "sha": "916f811f9b7743f9aa72a1a2e3fd0676898c3ea4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -96,14 +96,16 @@ bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string&\n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n     CHECK_NONFATAL(request.mode == JSONRPCRequest::EXECUTE);\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n     std::string wallet_name;\n     if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n-        std::shared_ptr<CWallet> pwallet = GetWallet(wallet_name);\n+        std::shared_ptr<CWallet> pwallet = GetWallet(context, wallet_name);\n         if (!pwallet) throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n         return pwallet;\n     }\n \n-    std::vector<std::shared_ptr<CWallet>> wallets = GetWallets();\n+    std::vector<std::shared_ptr<CWallet>> wallets = GetWallets(context);\n     if (wallets.size() == 1) {\n         return wallets[0];\n     }\n@@ -2562,7 +2564,8 @@ static RPCHelpMan listwallets()\n {\n     UniValue obj(UniValue::VARR);\n \n-    for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n+    WalletContext& context = EnsureWalletContext(request.context);\n+    for (const std::shared_ptr<CWallet>& wallet : GetWallets(context)) {\n         LOCK(wallet->cs_wallet);\n         obj.push_back(wallet->GetName());\n     }\n@@ -2580,7 +2583,7 @@ static std::tuple<std::shared_ptr<CWallet>, std::vector<bilingual_str>> LoadWall\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n     std::optional<bool> load_on_start = load_on_start_param.isNull() ? std::nullopt : std::optional<bool>(load_on_start_param.get_bool());\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, wallet_name, load_on_start, options, status, error, warnings);\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(context, wallet_name, load_on_start, options, status, error, warnings);\n \n     if (!wallet) {\n         // Map bad format to not found, since bad format is returned when the\n@@ -2788,7 +2791,7 @@ static RPCHelpMan createwallet()\n     options.create_passphrase = passphrase;\n     bilingual_str error;\n     std::optional<bool> load_on_start = request.params[6].isNull() ? std::nullopt : std::optional<bool>(request.params[6].get_bool());\n-    std::shared_ptr<CWallet> wallet = CreateWallet(*context.chain, request.params[0].get_str(), load_on_start, options, status, error, warnings);\n+    std::shared_ptr<CWallet> wallet = CreateWallet(context, request.params[0].get_str(), load_on_start, options, status, error, warnings);\n     if (!wallet) {\n         RPCErrorCode code = status == DatabaseStatus::FAILED_ENCRYPT ? RPC_WALLET_ENCRYPTION_FAILED : RPC_WALLET_ERROR;\n         throw JSONRPCError(code, error.original);\n@@ -2892,7 +2895,8 @@ static RPCHelpMan unloadwallet()\n         wallet_name = request.params[0].get_str();\n     }\n \n-    std::shared_ptr<CWallet> wallet = GetWallet(wallet_name);\n+    WalletContext& context = EnsureWalletContext(request.context);\n+    std::shared_ptr<CWallet> wallet = GetWallet(context, wallet_name);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n     }\n@@ -2902,7 +2906,7 @@ static RPCHelpMan unloadwallet()\n     // is destroyed (see CheckUniqueFileid).\n     std::vector<bilingual_str> warnings;\n     std::optional<bool> load_on_start = request.params[1].isNull() ? std::nullopt : std::optional<bool>(request.params[1].get_bool());\n-    if (!RemoveWallet(wallet, load_on_start, warnings)) {\n+    if (!RemoveWallet(context, wallet, load_on_start, warnings)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Requested wallet already unloaded\");\n     }\n "
      },
      {
        "sha": "9fcea5826bea6c07f74a6d5214d596eec576d486",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 19,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -20,6 +20,7 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n+#include <wallet/context.h>\n #include <wallet/test/util.h>\n #include <wallet/test/wallet_test_fixture.h>\n \n@@ -30,24 +31,22 @@ RPCHelpMan importmulti();\n RPCHelpMan dumpwallet();\n RPCHelpMan importwallet();\n \n-extern RecursiveMutex cs_wallets;\n-\n // Ensure that fee levels defined in the wallet are at least as high\n // as the default levels for node policy.\n static_assert(DEFAULT_TRANSACTION_MINFEE >= DEFAULT_MIN_RELAY_TX_FEE, \"wallet minimum fee is smaller than default relay fee\");\n static_assert(WALLET_INCREMENTAL_RELAY_FEE >= DEFAULT_INCREMENTAL_RELAY_FEE, \"wallet incremental fee is smaller than default incremental relay fee\");\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n-static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain* chain)\n+static std::shared_ptr<CWallet> TestLoadWallet(WalletContext& context)\n {\n     DatabaseOptions options;\n     DatabaseStatus status;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n     auto database = MakeWalletDatabase(\"\", options, status, error);\n-    auto wallet = CWallet::Create(chain, \"\", std::move(database), options.create_flags, error, warnings);\n-    if (chain) {\n+    auto wallet = CWallet::Create(context, \"\", std::move(database), options.create_flags, error, warnings);\n+    if (context.chain) {\n         wallet->postInitProcess();\n     }\n     return wallet;\n@@ -200,7 +199,8 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n-        AddWallet(wallet);\n+        WalletContext context;\n+        AddWallet(context, wallet);\n         UniValue keys;\n         keys.setArray();\n         UniValue key;\n@@ -218,6 +218,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         key.pushKV(\"internal\", UniValue(true));\n         keys.push_back(key);\n         JSONRPCRequest request;\n+        request.context = &context;\n         request.params.setArray();\n         request.params.push_back(keys);\n \n@@ -231,7 +232,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n                       \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n                       \"options).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        RemoveWallet(wallet, std::nullopt);\n+        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n     }\n }\n \n@@ -258,22 +259,24 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n+        WalletContext context;\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n             LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n             spk_man->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n             spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n-            AddWallet(wallet);\n+            AddWallet(context, wallet);\n             wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         JSONRPCRequest request;\n+        request.context = &context;\n         request.params.setArray();\n         request.params.push_back(backup_file);\n \n         ::dumpwallet().HandleRequest(request);\n-        RemoveWallet(wallet, std::nullopt);\n+        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n@@ -283,13 +286,15 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n+        WalletContext context;\n         JSONRPCRequest request;\n+        request.context = &context;\n         request.params.setArray();\n         request.params.push_back(backup_file);\n-        AddWallet(wallet);\n+        AddWallet(context, wallet);\n         wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         ::importwallet().HandleRequest(request);\n-        RemoveWallet(wallet, std::nullopt);\n+        RemoveWallet(context, wallet, /* load_on_startup= */ std::nullopt);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n         BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);\n@@ -679,7 +684,9 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n {\n     gArgs.ForceSetArg(\"-unsafesqlitesync\", \"1\");\n     // Create new wallet with known key and unload it.\n-    auto wallet = TestLoadWallet(m_node.chain.get());\n+    WalletContext context;\n+    context.chain = m_node.chain.get();\n+    auto wallet = TestLoadWallet(context);\n     CKey key;\n     key.MakeNewKey(true);\n     AddKey(*wallet, key);\n@@ -719,7 +726,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n \n     // Reload wallet and make sure new transactions are detected despite events\n     // being blocked\n-    wallet = TestLoadWallet(m_node.chain.get());\n+    wallet = TestLoadWallet(context);\n     BOOST_CHECK(rescan_completed);\n     BOOST_CHECK_EQUAL(addtx_count, 2);\n     {\n@@ -746,20 +753,20 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n     // deadlock during the sync and simulates a new block notification happening\n     // as soon as possible.\n     addtx_count = 0;\n-    auto handler = HandleLoadWallet([&](std::unique_ptr<interfaces::Wallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->wallet()->cs_wallet, cs_wallets) {\n+    auto handler = HandleLoadWallet(context, [&](std::unique_ptr<interfaces::Wallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->wallet()->cs_wallet, context.wallets_mutex) {\n             BOOST_CHECK(rescan_completed);\n             m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n             block_tx = TestSimpleSpend(*m_coinbase_txns[2], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n             m_coinbase_txns.push_back(CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n             mempool_tx = TestSimpleSpend(*m_coinbase_txns[3], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n             BOOST_CHECK(m_node.chain->broadcastTransaction(MakeTransactionRef(mempool_tx), DEFAULT_TRANSACTION_MAXFEE, false, error));\n-            LEAVE_CRITICAL_SECTION(cs_wallets);\n+            LEAVE_CRITICAL_SECTION(context.wallets_mutex);\n             LEAVE_CRITICAL_SECTION(wallet->wallet()->cs_wallet);\n             SyncWithValidationInterfaceQueue();\n             ENTER_CRITICAL_SECTION(wallet->wallet()->cs_wallet);\n-            ENTER_CRITICAL_SECTION(cs_wallets);\n+            ENTER_CRITICAL_SECTION(context.wallets_mutex);\n         });\n-    wallet = TestLoadWallet(m_node.chain.get());\n+    wallet = TestLoadWallet(context);\n     BOOST_CHECK_EQUAL(addtx_count, 4);\n     {\n         LOCK(wallet->cs_wallet);\n@@ -773,15 +780,18 @@ BOOST_FIXTURE_TEST_CASE(CreateWallet, TestChain100Setup)\n \n BOOST_FIXTURE_TEST_CASE(CreateWalletWithoutChain, BasicTestingSetup)\n {\n-    auto wallet = TestLoadWallet(nullptr);\n+    WalletContext context;\n+    auto wallet = TestLoadWallet(context);\n     BOOST_CHECK(wallet);\n     UnloadWallet(std::move(wallet));\n }\n \n BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n {\n     gArgs.ForceSetArg(\"-unsafesqlitesync\", \"1\");\n-    auto wallet = TestLoadWallet(m_node.chain.get());\n+    WalletContext context;\n+    context.chain = m_node.chain.get();\n+    auto wallet = TestLoadWallet(context);\n     CKey key;\n     key.MakeNewKey(true);\n     AddKey(*wallet, key);"
      },
      {
        "sha": "cf869fac0cc51f812b9488d028d99a26a4945d89",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 44,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -33,6 +33,7 @@\n #include <util/string.h>\n #include <util/translation.h>\n #include <wallet/coincontrol.h>\n+#include <wallet/context.h>\n #include <wallet/fees.h>\n #include <wallet/external_signer_scriptpubkeyman.h>\n \n@@ -54,10 +55,6 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n     },\n };\n \n-RecursiveMutex cs_wallets;\n-static std::vector<std::shared_ptr<CWallet>> vpwallets GUARDED_BY(cs_wallets);\n-static std::list<LoadWalletFn> g_load_wallet_fns GUARDED_BY(cs_wallets);\n-\n bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name)\n {\n     util::SettingsValue setting_value = chain.getRwSetting(\"wallet\");\n@@ -104,19 +101,19 @@ static void RefreshMempoolStatus(CWalletTx& tx, interfaces::Chain& chain)\n     tx.fInMempool = chain.isInMempool(tx.GetHash());\n }\n \n-bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n+bool AddWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet)\n {\n-    LOCK(cs_wallets);\n+    LOCK(context.wallets_mutex);\n     assert(wallet);\n-    std::vector<std::shared_ptr<CWallet>>::const_iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n-    if (i != vpwallets.end()) return false;\n-    vpwallets.push_back(wallet);\n+    std::vector<std::shared_ptr<CWallet>>::const_iterator i = std::find(context.wallets.begin(), context.wallets.end(), wallet);\n+    if (i != context.wallets.end()) return false;\n+    context.wallets.push_back(wallet);\n     wallet->ConnectScriptPubKeyManNotifiers();\n     wallet->NotifyCanGetAddressesChanged();\n     return true;\n }\n \n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings)\n+bool RemoveWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings)\n {\n     assert(wallet);\n \n@@ -125,43 +122,43 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> lo\n \n     // Unregister with the validation interface which also drops shared ponters.\n     wallet->m_chain_notifications_handler.reset();\n-    LOCK(cs_wallets);\n-    std::vector<std::shared_ptr<CWallet>>::iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n-    if (i == vpwallets.end()) return false;\n-    vpwallets.erase(i);\n+    LOCK(context.wallets_mutex);\n+    std::vector<std::shared_ptr<CWallet>>::iterator i = std::find(context.wallets.begin(), context.wallets.end(), wallet);\n+    if (i == context.wallets.end()) return false;\n+    context.wallets.erase(i);\n \n     // Write the wallet setting\n     UpdateWalletSetting(chain, name, load_on_start, warnings);\n \n     return true;\n }\n \n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start)\n+bool RemoveWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start)\n {\n     std::vector<bilingual_str> warnings;\n-    return RemoveWallet(wallet, load_on_start, warnings);\n+    return RemoveWallet(context, wallet, load_on_start, warnings);\n }\n \n-std::vector<std::shared_ptr<CWallet>> GetWallets()\n+std::vector<std::shared_ptr<CWallet>> GetWallets(WalletContext& context)\n {\n-    LOCK(cs_wallets);\n-    return vpwallets;\n+    LOCK(context.wallets_mutex);\n+    return context.wallets;\n }\n \n-std::shared_ptr<CWallet> GetWallet(const std::string& name)\n+std::shared_ptr<CWallet> GetWallet(WalletContext& context, const std::string& name)\n {\n-    LOCK(cs_wallets);\n-    for (const std::shared_ptr<CWallet>& wallet : vpwallets) {\n+    LOCK(context.wallets_mutex);\n+    for (const std::shared_ptr<CWallet>& wallet : context.wallets) {\n         if (wallet->GetName() == name) return wallet;\n     }\n     return nullptr;\n }\n \n-std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet)\n+std::unique_ptr<interfaces::Handler> HandleLoadWallet(WalletContext& context, LoadWalletFn load_wallet)\n {\n-    LOCK(cs_wallets);\n-    auto it = g_load_wallet_fns.emplace(g_load_wallet_fns.end(), std::move(load_wallet));\n-    return interfaces::MakeHandler([it] { LOCK(cs_wallets); g_load_wallet_fns.erase(it); });\n+    LOCK(context.wallets_mutex);\n+    auto it = context.wallet_load_fns.emplace(context.wallet_load_fns.end(), std::move(load_wallet));\n+    return interfaces::MakeHandler([&context, it] { LOCK(context.wallets_mutex); context.wallet_load_fns.erase(it); });\n }\n \n static Mutex g_loading_wallet_mutex;\n@@ -213,7 +210,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n }\n \n namespace {\n-std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWalletInternal(WalletContext& context, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n         std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n@@ -222,18 +219,18 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std:\n             return nullptr;\n         }\n \n-        chain.initMessage(_(\"Loading wallet\u2026\").translated);\n-        std::shared_ptr<CWallet> wallet = CWallet::Create(&chain, name, std::move(database), options.create_flags, error, warnings);\n+        context.chain->initMessage(_(\"Loading wallet\u2026\").translated);\n+        std::shared_ptr<CWallet> wallet = CWallet::Create(context, name, std::move(database), options.create_flags, error, warnings);\n         if (!wallet) {\n             error = Untranslated(\"Wallet loading failed.\") + Untranslated(\" \") + error;\n             status = DatabaseStatus::FAILED_LOAD;\n             return nullptr;\n         }\n-        AddWallet(wallet);\n+        AddWallet(context, wallet);\n         wallet->postInitProcess();\n \n         // Write the wallet setting\n-        UpdateWalletSetting(chain, name, load_on_start, warnings);\n+        UpdateWalletSetting(*context.chain, name, load_on_start, warnings);\n \n         return wallet;\n     } catch (const std::runtime_error& e) {\n@@ -244,20 +241,20 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const std:\n }\n } // namespace\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(WalletContext& context, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(name));\n     if (!result.second) {\n         error = Untranslated(\"Wallet already loading.\");\n         status = DatabaseStatus::FAILED_LOAD;\n         return nullptr;\n     }\n-    auto wallet = LoadWalletInternal(chain, name, load_on_start, options, status, error, warnings);\n+    auto wallet = LoadWalletInternal(context, name, load_on_start, options, status, error, warnings);\n     WITH_LOCK(g_loading_wallet_mutex, g_loading_wallet_set.erase(result.first));\n     return wallet;\n }\n \n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CreateWallet(WalletContext& context, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     uint64_t wallet_creation_flags = options.create_flags;\n     const SecureString& passphrase = options.create_passphrase;\n@@ -302,8 +299,8 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n     }\n \n     // Make the wallet\n-    chain.initMessage(_(\"Loading wallet\u2026\").translated);\n-    std::shared_ptr<CWallet> wallet = CWallet::Create(&chain, name, std::move(database), wallet_creation_flags, error, warnings);\n+    context.chain->initMessage(_(\"Loading wallet\u2026\").translated);\n+    std::shared_ptr<CWallet> wallet = CWallet::Create(context, name, std::move(database), wallet_creation_flags, error, warnings);\n     if (!wallet) {\n         error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n         status = DatabaseStatus::FAILED_CREATE;\n@@ -345,11 +342,11 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n             wallet->Lock();\n         }\n     }\n-    AddWallet(wallet);\n+    AddWallet(context, wallet);\n     wallet->postInitProcess();\n \n     // Write the wallet settings\n-    UpdateWalletSetting(chain, name, load_on_start, warnings);\n+    UpdateWalletSetting(*context.chain, name, load_on_start, warnings);\n \n     status = DatabaseStatus::SUCCESS;\n     return wallet;\n@@ -1802,9 +1799,9 @@ void CWallet::ResendWalletTransactions()\n \n /** @} */ // end of mapWallet\n \n-void MaybeResendWalletTxs()\n+void MaybeResendWalletTxs(WalletContext& context)\n {\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context)) {\n         pwallet->ResendWalletTransactions();\n     }\n }\n@@ -2509,8 +2506,9 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n     return MakeDatabase(wallet_path, options, status, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n+    interfaces::Chain* chain = context.chain;\n     const std::string& walletFile = database->Filename();\n \n     int64_t nStart = GetTimeMillis();\n@@ -2722,9 +2720,9 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain* chain, const std::st\n     }\n \n     {\n-        LOCK(cs_wallets);\n-        for (auto& load_wallet : g_load_wallet_fns) {\n-            load_wallet(interfaces::MakeWallet(walletInstance));\n+        LOCK(context.wallets_mutex);\n+        for (auto& load_wallet : context.wallet_load_fns) {\n+            load_wallet(interfaces::MakeWallet(context, walletInstance));\n         }\n     }\n "
      },
      {
        "sha": "a1bbf661367076e578584986a11f3f5a2e380dd6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -42,6 +42,8 @@\n \n #include <boost/signals2/signal.hpp>\n \n+struct WalletContext;\n+\n using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n \n struct bilingual_str;\n@@ -53,14 +55,14 @@ struct bilingual_str;\n //! by the shared pointer deleter.\n void UnloadWallet(std::shared_ptr<CWallet>&& wallet);\n \n-bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings);\n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start);\n-std::vector<std::shared_ptr<CWallet>> GetWallets();\n-std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n-std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n-std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n+bool AddWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet);\n+bool RemoveWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start, std::vector<bilingual_str>& warnings);\n+bool RemoveWallet(WalletContext& context, const std::shared_ptr<CWallet>& wallet, std::optional<bool> load_on_start);\n+std::vector<std::shared_ptr<CWallet>> GetWallets(WalletContext& context);\n+std::shared_ptr<CWallet> GetWallet(WalletContext& context, const std::string& name);\n+std::shared_ptr<CWallet> LoadWallet(WalletContext& context, const std::string& name, std::optional<bool> load_on_start, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> CreateWallet(WalletContext& context, const std::string& name, std::optional<bool> load_on_start, DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::unique_ptr<interfaces::Handler> HandleLoadWallet(WalletContext& context, LoadWalletFn load_wallet);\n std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, const DatabaseOptions& options, DatabaseStatus& status, bilingual_str& error);\n \n //! -paytxfee default\n@@ -772,7 +774,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> Create(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+    static std::shared_ptr<CWallet> Create(WalletContext& context, const std::string& name, std::unique_ptr<WalletDatabase> database, uint64_t wallet_creation_flags, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n     /**\n      * Wallet post-init setup\n@@ -919,7 +921,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n  * Called periodically by the schedule thread. Prompts individual wallets to resend\n  * their transactions. Actual rebroadcast schedule is managed by the wallets themselves.\n  */\n-void MaybeResendWalletTxs();\n+void MaybeResendWalletTxs(WalletContext& context);\n \n /** RAII object to check and reserve a wallet rescan */\n class WalletRescanReserver"
      },
      {
        "sha": "2fabe65a931f03b2cd7c9bbe4c4a6ba856d75044",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -1004,14 +1004,14 @@ DBErrors WalletBatch::ZapSelectTx(std::vector<uint256>& vTxHashIn, std::vector<u\n     return DBErrors::LOAD_OK;\n }\n \n-void MaybeCompactWalletDB()\n+void MaybeCompactWalletDB(WalletContext& context)\n {\n     static std::atomic<bool> fOneThread(false);\n     if (fOneThread.exchange(true)) {\n         return;\n     }\n \n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context)) {\n         WalletDatabase& dbh = pwallet->GetDatabase();\n \n         unsigned int nUpdateCounter = dbh.nUpdateCounter;"
      },
      {
        "sha": "25c2ec5909251fa292f9da9eeacfcc4a202f8ab7",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62a09a30772141ef4add2f10d29927211abf57eb/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=62a09a30772141ef4add2f10d29927211abf57eb",
        "patch": "@@ -31,6 +31,7 @@\n static const bool DEFAULT_FLUSHWALLET = true;\n \n struct CBlockLocator;\n+struct WalletContext;\n class CKeyPool;\n class CMasterKey;\n class CScript;\n@@ -279,7 +280,7 @@ class WalletBatch\n };\n \n //! Compacts BDB state so that wallet.dat is self-contained (if there are changes)\n-void MaybeCompactWalletDB();\n+void MaybeCompactWalletDB(WalletContext& context);\n \n //! Callback for filtering key types to deserialize in ReadKeyValue\n using KeyFilterFn = std::function<bool(const std::string&)>;"
      }
    ]
  }
]