DrahtBot,2020-05-29 06:45:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22100](https://github.com/bitcoin/bitcoin/pull/22100) (refactor: Clean up new wallet spend, receive files added #21207 b",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-635792670,635792670,
ryanofsky,2020-05-29 13:08:31,"Rebased 197a40317f1240d2d94a6092ccb51bbf51b9e3b1 -> 7272686491f39b31e59d9d56d93ba1c57f7a732f ([`pr/novp.1`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.1) -> [`pr/novp.2`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/novp.1-rebase..pr/novp.2)) with updated base prs and fixed walletcontroller lifetime bug in test\nRebas",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-635962953,635962953,
promag,2020-05-31 23:38:44,"Concept ACK, need to update commits in OP.",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-636548255,636548255,
ryanofsky,2020-09-28 11:08:07,"Rebased 3df8f4480bf3dec79c2acbd1068554ed513d918c -> 22efdc8bccbe0c050eaa3b3dd19b274b0bb35489 ([`pr/novp.15`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.15) -> [`pr/novp.16`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/novp.15-rebase..pr/novp.16)) due to conflict with #19619\nRebased 22efdc8bccbe0c050eaa3b3dd19b274b0",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-699939653,699939653,
kiminuo,2021-06-09 13:44:49,"@ryanofsky I find your PR good. It's easier to follow for me than the code in master branch. Concept ACK.\n\nI can see that #15638 of yours added `load.h` and `load.cpp` with functions like `VerifyWallets(..)`, `LoadWallets(..)`, etc. Now this PR adds `WalletContext` struct and `WalletClient` now contains `WalletContext* context()` function. \n\nI had a look where the functions from `load.h` a",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-857707241,857707241,
ryanofsky,2021-06-09 16:09:00,"You could merge `WalletContext` and `interfaces::WalletClientImpl` and move code from `load.cpp` to `interfaces.cpp`. If anything though, I'd like to do the opposite and make `interfaces.cpp` contain as little functionality as possible so `interfaces::Wallet` just serves the limited purpose of exposing a well-defined interface to the wallet from external GUI code, and `interfaces::WalletClient` is",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-857836270,857836270,
kiminuo,2021-06-09 20:01:15,"> I think ideally internal wallet would remain more modular (database code separate from key management code separate from syncing code separate from balance tracking code), and not reference these interfaces which tie everything together.\n\nI certainly do not suggest to make code worse from modularity point of view. I wrote my comment to understand better how/why you implemented this PR as you",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-858053384,858053384,
ryanofsky,2021-06-09 22:39:33,"Thanks for asking these questions! I'm very happy to answer them, and I hope I didn't give the impression that I was disagreeing with anything. I was trying to answer ""Is it necessary to have the context struct?"" and say I don't think it's necessary, but I do think it's good because I think it's more lightweight than `WalletClient` and shouldn't get in the way of modularity.",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-858147400,858147400,
ryanofsky,2021-08-13 14:54:18,"Base PR bitcoin-core/gui#360 is now merged so this PR doesn't have any dependencies\n\n---\n\nRebased df609b1a44bad295f44bdbda3fa32a49fd745233 -> 6e6a7e1fe874f0d93de7254d0884a1b9a95f6b19 ([`pr/novp.27`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.27) -> [`pr/novp.28`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.28), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/no",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-898513745,898513745,
ryanofsky,2021-08-17 22:28:13,"Rebased 6e6a7e1fe874f0d93de7254d0884a1b9a95f6b19 -> 62a09a30772141ef4add2f10d29927211abf57eb ([`pr/novp.28`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.28) -> [`pr/novp.29`](https://github.com/ryanofsky/bitcoin/commits/pr/novp.29), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/novp.28-rebase..pr/novp.29)) due to conflict with #22541",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-900672885,900672885,
achow101,2021-08-19 01:13:29,ACK 62a09a30772141ef4add2f10d29927211abf57eb,https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-901533525,901533525,
fanquake,2021-08-19 01:45:34,@kiminuo maybe you'll want to follow up here given some of the comments up thread?,https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-901544183,901544183,
kiminuo,2021-08-19 07:22:51,"> @kiminuo maybe you'll want to follow up here given some of the comments up thread?\n\nYes, will do. Thanks for the notification.",https://github.com/bitcoin/bitcoin/pull/19101#issuecomment-901674084,901674084,
promag,2021-06-07 20:43:51,"fe45c379898e1a418af3847974a55f936814ca2a\n\n> instead of relying on Qt reference counting.\n\nWhat Qt reference counting?",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646927022,646927022,src/qt/bitcoin.cpp
promag,2021-06-07 20:44:38,"fe45c379898e1a418af3847974a55f936814ca2a\n\nJust noting that its not necessary to check for `WalletModel::isWalletEnabled())`, `delete nullptr` is safe.",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646927491,646927491,src/qt/bitcoin.cpp
promag,2021-06-07 21:17:26,"4be544c7ec08a81952fd3f4349151cbb8bdb60e8\n\nIt seems this can be a `Mutex`, just a suggestion for follow-up.",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646946660,646946660,src/wallet/context.h
ryanofsky,2021-06-07 22:00:06,"re: https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646927022\n\n> [fe45c37](https://github.com/bitcoin/bitcoin/commit/fe45c379898e1a418af3847974a55f936814ca2a)\n> \n> > instead of relying on Qt reference counting.\n> \n> What Qt reference counting?\n\nThanks, changed ""reference counting"" to ""object tracking"" and linked to https://doc.qt.io/qt-5/objecttrees.html",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646969689,646969689,src/qt/bitcoin.cpp
ryanofsky,2021-06-07 22:18:33,"re: https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646946660\n\n> [4be544c](https://github.com/bitcoin/bitcoin/commit/4be544c7ec08a81952fd3f4349151cbb8bdb60e8)\n> \n> It seems this can be a `Mutex`, just a suggestion for follow-up.\n\nThanks went ahead and made the change here. It's not an immediately obvious change because the mutex is held while calling wallet_load_fns callbacks",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646977950,646977950,src/wallet/context.h
promag,2021-06-07 22:37:23,"I also tested `Mutex` and built it with TSAN, LGTM",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r646986103,646986103,src/wallet/context.h
kiminuo,2021-06-10 20:00:46,"nit: If this needs to be touched, may be useful for consistency:\n\n```suggestion\n    RemoveWallet(context, wallet, std::nullopt /* load_on_start */);\n```\n\n(It is on more places but I don't want to spam.)",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649488690,649488690,src/qt/test/addressbooktests.cpp
kiminuo,2021-06-10 20:22:52,(This snippet is exactly the same as in `src/qt/test/addressbooktests.cpp` but I must say I rather double checked with my editor's text search.),https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649501575,649501575,src/qt/test/wallettests.cpp
kiminuo,2021-06-10 20:53:44,"Would it be possible to pass `WalletContext` via constructor to `WalletClientImpl`? It seems that in that case, this function may not be necessary and a test can still create `WalletClientImpl`.\n\n",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649524997,649524997,src/wallet/interfaces.cpp
kiminuo,2021-06-10 21:14:14,"off topic: I noticed a very nice comment https://github.com/bitcoin/bitcoin/blob/1704bbf2263f16c720604cfab4ccb775315df690/src/node/context.h#L49 in `src/node/context.h`. Would it make sense to add the comment on L36, too?",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649537068,649537068,src/wallet/context.h
ryanofsky,2021-06-10 22:27:56,"re: https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649488690\n\n> nit: If this needs to be touched, may be useful for consistency:\n> \n> (It is on more places but I don't want to spam.)\n\nThanks! Added change all places",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649572794,649572794,src/qt/test/addressbooktests.cpp
ryanofsky,2021-06-10 22:34:10,"re: https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649537068\n\n> off topic: I noticed a very nice comment\n> \n> https://github.com/bitcoin/bitcoin/blob/1704bbf2263f16c720604cfab4ccb775315df690/src/node/context.h#L49\n> in `src/node/context.h`. Would it make sense to add the comment on L36, too?\n\nSure, added this for consistency",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649575348,649575348,src/wallet/context.h
ryanofsky,2021-06-10 22:45:03,"re: https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649524997\n\n> Would it be possible to pass `WalletContext` via constructor to `WalletClientImpl`? It seems that in that case, this function may not be necessary and a test can still create `WalletClientImpl`.\n\nI think that could work but it seems a little better to me if instead of passing around `WalletClient` / `WalletContext` ",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649579446,649579446,src/wallet/interfaces.cpp
ryanofsky,2021-06-10 22:47:43,"re: https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649501575\n\n> (This snippet is exactly the same as in `src/qt/test/addressbooktests.cpp` but I must say I rather double checked with my editor's text search.)\n\nDuplication is good to note, but it precedes this PR, and I think trying to simplify or dedup here would be more invasive and make more sense as a separate change. (This P",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649580437,649580437,src/qt/test/wallettests.cpp
kiminuo,2021-06-11 06:53:09,"Yes, that was just an observation. I agree that it is better to address that in another PR if at all.",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649734116,649734116,src/qt/test/wallettests.cpp
kiminuo,2021-06-11 06:53:44,Thanks!,https://github.com/bitcoin/bitcoin/pull/19101#discussion_r649734440,649734440,src/wallet/context.h
MarcoFalke,2021-08-19 13:15:07,"Previously this was an `Assert`, now it is UB. Obviously doesn't matter, but I wanted to point out the difference.",https://github.com/bitcoin/bitcoin/pull/19101#discussion_r692098975,692098975,src/wallet/load.cpp
