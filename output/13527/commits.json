[
  {
    "sha": "faa24441ec047ec336b86f586016b9d318c1c0ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWEyNDQ0MWVjMDQ3ZWMzMzZiODZmNTg2MDE2YjlkMzE4YzFjMGFk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-23T20:16:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-06-23T21:02:52Z"
      },
      "message": "policy: Remove promiscuousmempoolflags",
      "tree": {
        "sha": "659d9cc2737a388a465b3c6b0543ec0b34dcba52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/659d9cc2737a388a465b3c6b0543ec0b34dcba52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa24441ec047ec336b86f586016b9d318c1c0ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbLrV8AAoJEM4rdWl+aaVIkBUL/iAPIG1UpUsGe6xbFdMt0MT0\nwJ31VevkzkWsj2F3RbUu3uM9O0WrzXggDUJmijeC/C89jBO6aNiKePjVhwi8B18w\nzK6jFEXPi1N5JFKKtJISQ6HfwiMe6imLm3A6Vd2tOxWbeAdjunoBgX6ZWyHSTSuU\njRBl0HJUBd6UH/5GK6gJT3snT6FHGZCLpNFfIN1EUSVvSjd3UBj1UYr6ikC5mp4V\nHB4rmiPbuqMlL2L1gAfZyPE9rH7CoDmYLqvKF7Ge5QPVYm77nNeTDo0oplf+YIkC\nlz0ZHnEDWDbskGZDo2oH2haYqIzTCiGUgc/xrbfRX+QisHgFReukMt8JfIm1W1AT\nLk2ygCJFtt99a+52tsOTl9UWc4qeDbV6QyhKTCkzEQYlD1PWe9UFfkoi0FVUHVLH\nER1mxaDRawJ4JQwT9UlYD4GlzubGpWUwwCWojOU/n573spw9tT28csiZKZ6WczSi\nMwUA9U8JS1lHM9f2ZQlG3dZjFVN77hnNYFBbyg0Y5g==\n=jeoW\n-----END PGP SIGNATURE-----",
        "payload": "tree 659d9cc2737a388a465b3c6b0543ec0b34dcba52\nparent 6579d80572d2d33aceabbd3db45a6a9f809aa5e3\nauthor MarcoFalke <falke.marco@gmail.com> 1529785014 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1529787772 -0400\n\npolicy: Remove promiscuousmempoolflags\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa24441ec047ec336b86f586016b9d318c1c0ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa24441ec047ec336b86f586016b9d318c1c0ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa24441ec047ec336b86f586016b9d318c1c0ad/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6579d80572d2d33aceabbd3db45a6a9f809aa5e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6579d80572d2d33aceabbd3db45a6a9f809aa5e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6579d80572d2d33aceabbd3db45a6a9f809aa5e3"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 29,
      "deletions": 42
    },
    "files": [
      {
        "sha": "db618f88f58ee6cb10c50b6aaa5c3dceb5ad20e7",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa24441ec047ec336b86f586016b9d318c1c0ad/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa24441ec047ec336b86f586016b9d318c1c0ad/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=faa24441ec047ec336b86f586016b9d318c1c0ad",
        "patch": "@@ -133,8 +133,11 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     // Decide whether to include witness transactions\n     // This is only needed in case the witness softfork activation is reverted\n-    // (which would require a very deep reorganization) or when\n-    // -promiscuousmempoolflags is used.\n+    // (which would require a very deep reorganization).\n+    // Note that the mempool would accept transactions with witness data before\n+    // IsWitnessEnabled, but we would only ever mine blocks after IsWitnessEnabled\n+    // unless there is a massive block reorganization with the witness softfork\n+    // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n     fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;"
      },
      {
        "sha": "7312be3abce0dc1bab3b310e52a8726df6209cd4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa24441ec047ec336b86f586016b9d318c1c0ad/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa24441ec047ec336b86f586016b9d318c1c0ad/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=faa24441ec047ec336b86f586016b9d318c1c0ad",
        "patch": "@@ -897,10 +897,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             }\n         }\n \n-        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n-        if (!chainparams.RequireStandard()) {\n-            scriptVerifyFlags = gArgs.GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n-        }\n+        constexpr unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n@@ -935,20 +932,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // transactions into the mempool can be exploited as a DoS attack.\n         unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(chainActive.Tip(), Params().GetConsensus());\n         if (!CheckInputsFromMempoolAndCache(tx, state, view, pool, currentBlockScriptVerifyFlags, true, txdata)) {\n-            // If we're using promiscuousmempoolflags, we may hit this normally\n-            // Check if current block has some flags that scriptVerifyFlags\n-            // does not before printing an ominous warning\n-            if (!(~scriptVerifyFlags & currentBlockScriptVerifyFlags)) {\n-                return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against latest-block but not STANDARD flags %s, %s\",\n+            return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputs failed against latest-block but not STANDARD flags %s, %s\",\n                     __func__, hash.ToString(), FormatStateMessage(state));\n-            } else {\n-                if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, false, txdata)) {\n-                    return error(\"%s: ConnectInputs failed against MANDATORY but not STANDARD flags due to promiscuous mempool %s, %s\",\n-                        __func__, hash.ToString(), FormatStateMessage(state));\n-                } else {\n-                    LogPrintf(\"Warning: -promiscuousmempool flags set to not include currently enforced soft forks, this may break mining or otherwise cause instability!\\n\");\n-                }\n-            }\n         }\n \n         if (test_accept) {"
      },
      {
        "sha": "b0ea4ae6fe46b3e9174884d13f9fc5a20a05e246",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa24441ec047ec336b86f586016b9d318c1c0ad/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa24441ec047ec336b86f586016b9d318c1c0ad/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=faa24441ec047ec336b86f586016b9d318c1c0ad",
        "patch": "@@ -62,7 +62,7 @@ def create_transaction(node, coinbase, to_address, amount):\n class BIP65Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n+        self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n     def run_test(self):\n@@ -120,12 +120,13 @@ def run_test(self):\n         spendtx.rehash()\n \n         # First we show that this tx is valid except for CLTV by getting it\n-        # accepted to the mempool (which we can achieve with\n-        # -promiscuousmempoolflags).\n-        self.nodes[0].p2p.send_and_ping(msg_tx(spendtx))\n-        assert spendtx.hash in self.nodes[0].getrawmempool()\n+        # rejected from the mempool for exactly that reason.\n+        assert_equal(\n+            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Negative locktime)'}],\n+            self.nodes[0].testmempoolaccept(rawtxs=[bytes_to_hex_str(spendtx.serialize())], allowhighfees=True)\n+        )\n \n-        # Now we verify that a block with this transaction is invalid.\n+        # Now we verify that a block with this transaction is also invalid.\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()"
      },
      {
        "sha": "d5a5ea6889989f96c8f919eeed9e8b14a0b94c3d",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa24441ec047ec336b86f586016b9d318c1c0ad/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa24441ec047ec336b86f586016b9d318c1c0ad/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=faa24441ec047ec336b86f586016b9d318c1c0ad",
        "patch": "@@ -47,10 +47,11 @@ def create_transaction(node, coinbase, to_address, amount):\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx\n \n+\n class BIP66Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n+        self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n     def run_test(self):\n@@ -110,12 +111,13 @@ def run_test(self):\n         spendtx.rehash()\n \n         # First we show that this tx is valid except for DERSIG by getting it\n-        # accepted to the mempool (which we can achieve with\n-        # -promiscuousmempoolflags).\n-        self.nodes[0].p2p.send_and_ping(msg_tx(spendtx))\n-        assert spendtx.hash in self.nodes[0].getrawmempool()\n+        # rejected from the mempool for exactly that reason.\n+        assert_equal(\n+            [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Non-canonical DER signature)'}],\n+            self.nodes[0].testmempoolaccept(rawtxs=[bytes_to_hex_str(spendtx.serialize())], allowhighfees=True)\n+        )\n \n-        # Now we verify that a block with this transaction is invalid.\n+        # Now we verify that a block with this transaction is also invalid.\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()"
      },
      {
        "sha": "99ad2d5222da5535284a4f9fdc282956042929e3",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa24441ec047ec336b86f586016b9d318c1c0ad/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa24441ec047ec336b86f586016b9d318c1c0ad/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=faa24441ec047ec336b86f586016b9d318c1c0ad",
        "patch": "@@ -43,8 +43,8 @@ def set_test_params(self):\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n+                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n \n     def setup_network(self):\n         super().setup_network()\n@@ -64,12 +64,8 @@ def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n         sync_blocks(self.nodes)\n \n     def fail_accept(self, node, error_msg, txid, sign, redeem_script=\"\"):\n-        assert_raises_rpc_error(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        assert_raises_rpc_error(-26, error_msg, send_to_witness, use_p2wsh=1, node=node, utxo=getutxo(txid), pubkey=self.pubkey[0], encode_p2sh=False, amount=Decimal(\"49.998\"), sign=sign, insert_redeem_script=redeem_script)\n \n-    def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n-        send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n-        assert_raises_rpc_error(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n-        sync_blocks(self.nodes)\n \n     def run_test(self):\n         self.nodes[0].generate(161) #block 161\n@@ -171,10 +167,10 @@ def run_test(self):\n             assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) == bytes_to_hex_str(tx.serialize_without_witness()))\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n-        self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V0][2], False)\n-        self.fail_mine(self.nodes[2], wit_ids[NODE_2][WIT_V1][2], False)\n-        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V0][2], False, witness_script(False, self.pubkey[2]))\n-        self.fail_mine(self.nodes[2], p2sh_ids[NODE_2][WIT_V1][2], False, witness_script(True, self.pubkey[2]))\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)', wit_ids[NODE_2][WIT_V1][2], sign=False)\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', p2sh_ids[NODE_2][WIT_V0][2], sign=False, redeem_script=witness_script(False, self.pubkey[2]))\n+        self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program was passed an empty witness) (code 64)', p2sh_ids[NODE_2][WIT_V1][2], sign=False, redeem_script=witness_script(True, self.pubkey[2]))\n \n         self.log.info(\"Verify default node can now use witness txs\")\n         self.success_mine(self.nodes[0], wit_ids[NODE_0][WIT_V0][0], True) #block 432"
      }
    ]
  }
]