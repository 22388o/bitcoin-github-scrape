[
  {
    "sha": "22f816ef4dd57785627d801c247714cace7fc5b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmY4MTZlZjRkZDU3Nzg1NjI3ZDgwMWMyNDc3MTRjYWNlN2ZjNWI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-23T08:36:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-26T14:00:14Z"
      },
      "message": "net: Improve and document SOCKS code\n\nMake the SOCKS code more consistent, and document the constants used.",
      "tree": {
        "sha": "eae65c49d1361f195a80a8a79a417dfa91d5bd00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eae65c49d1361f195a80a8a79a417dfa91d5bd00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22f816ef4dd57785627d801c247714cace7fc5b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22f816ef4dd57785627d801c247714cace7fc5b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22f816ef4dd57785627d801c247714cace7fc5b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22f816ef4dd57785627d801c247714cace7fc5b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10a20bf7700e3d59f8e2ce3d4eaebf472d1754ce"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 89,
      "deletions": 36
    },
    "files": [
      {
        "sha": "914124cb178183bd7ae726e610d97cdc6b410c74",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 36,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22f816ef4dd57785627d801c247714cace7fc5b5/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22f816ef4dd57785627d801c247714cace7fc5b5/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=22f816ef4dd57785627d801c247714cace7fc5b5",
        "patch": "@@ -184,6 +184,48 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+/** SOCKS version */\n+enum SOCKSVersion: uint8_t {\n+    SOCKS4 = 0x04,\n+    SOCKS5 = 0x05\n+};\n+\n+/** Values defined for METHOD in RFC1928 */\n+enum SOCKS5Method: uint8_t {\n+    NOAUTH = 0x00,        //! No authentication required\n+    GSSAPI = 0x01,        //! GSSAPI\n+    USER_PASS = 0x02,     //! Username/password\n+    NO_ACCEPTABLE = 0xff, //! No acceptable methods\n+};\n+\n+/** Values defined for CMD in RFC1928 */\n+enum SOCKS5Command: uint8_t {\n+    CONNECT = 0x01,\n+    BIND = 0x02,\n+    UDP_ASSOCIATE = 0x03\n+};\n+\n+/** Values defined for REP in RFC1928 */\n+enum SOCKS5Reply: uint8_t {\n+    SUCCEEDED = 0x00,        //! Succeeded\n+    GENFAILURE = 0x01,       //! General failure\n+    NOTALLOWED = 0x02,       //! Connection not allowed by ruleset\n+    NETUNREACHABLE = 0x03,   //! Network unreachable\n+    HOSTUNREACHABLE = 0x04,  //! Network unreachable\n+    CONNREFUSED = 0x05,      //! Connection refused\n+    TTLEXPIRED = 0x06,       //! TTL expired\n+    CMDUNSUPPORTED = 0x07,   //! Command not supported\n+    ATYPEUNSUPPORTED = 0x08, //! Address type not supported\n+};\n+\n+/** Values defined for ATYPE in RFC1928 */\n+enum SOCKS5Atyp: uint8_t {\n+    IPV4 = 0x01,\n+    DOMAINNAME = 0x03,\n+    IPV6 = 0x04,\n+};\n+\n+/** Status codes that can be returned by InterruptibleRecv */\n enum class IntrRecvError {\n     OK,\n     Timeout,\n@@ -203,15 +245,15 @@ enum class IntrRecvError {\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, const SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n     // Maximum time to wait in one select call. It will take up until this time (in millis)\n     // to break off in case of an interruption.\n     const int64_t maxWait = 1000;\n     while (len > 0 && curTime < endTime) {\n-        ssize_t ret = recv(hSocket, data, len, 0); // Optimistically try the recv first\n+        ssize_t ret = recv(hSocket, (char*)data, len, 0); // Optimistically try the recv first\n         if (ret > 0) {\n             len -= ret;\n             data += ret;\n@@ -242,24 +284,35 @@ static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, cons\n     return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n+/** Credentials for proxy authentication */\n struct ProxyCredentials\n {\n     std::string username;\n     std::string password;\n };\n \n-std::string Socks5ErrorString(int err)\n+/** Convert SOCKS5 reply to a an error message */\n+std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {\n-        case 0x01: return \"general failure\";\n-        case 0x02: return \"connection not allowed\";\n-        case 0x03: return \"network unreachable\";\n-        case 0x04: return \"host unreachable\";\n-        case 0x05: return \"connection refused\";\n-        case 0x06: return \"TTL expired\";\n-        case 0x07: return \"protocol error\";\n-        case 0x08: return \"address type not supported\";\n-        default:   return \"unknown\";\n+        case SOCKS5Reply::GENFAILURE:\n+            return \"general failure\";\n+        case SOCKS5Reply::NOTALLOWED:\n+            return \"connection not allowed\";\n+        case SOCKS5Reply::NETUNREACHABLE:\n+            return \"network unreachable\";\n+        case SOCKS5Reply::HOSTUNREACHABLE:\n+            return \"host unreachable\";\n+        case SOCKS5Reply::CONNREFUSED:\n+            return \"connection refused\";\n+        case SOCKS5Reply::TTLEXPIRED:\n+            return \"TTL expired\";\n+        case SOCKS5Reply::CMDUNSUPPORTED:\n+            return \"protocol error\";\n+        case SOCKS5Reply::ATYPEUNSUPPORTED:\n+            return \"address type not supported\";\n+        default:\n+            return \"unknown\";\n     }\n }\n \n@@ -274,34 +327,34 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     }\n     // Accepted authentication methods\n     std::vector<uint8_t> vSocks5Init;\n-    vSocks5Init.push_back(0x05);\n+    vSocks5Init.push_back(SOCKSVersion::SOCKS5);\n     if (auth) {\n-        vSocks5Init.push_back(0x02); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n-        vSocks5Init.push_back(0x02); // X'02' USERNAME/PASSWORD (RFC1929)\n+        vSocks5Init.push_back(0x02); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n+        vSocks5Init.push_back(SOCKS5Method::USER_PASS);\n     } else {\n-        vSocks5Init.push_back(0x01); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n+        vSocks5Init.push_back(0x01); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet1[2];\n+    uint8_t pchRet1[2];\n     if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n-    if (pchRet1[0] != 0x05) {\n+    if (pchRet1[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n-    if (pchRet1[1] == 0x02 && auth) {\n+    if (pchRet1[1] == SOCKS5Method::USER_PASS && auth) {\n         // Perform username/password authentication (as described in RFC1929)\n         std::vector<uint8_t> vAuth;\n-        vAuth.push_back(0x01);\n+        vAuth.push_back(0x01); // Current (and only) version of user/pass subnegotiation\n         if (auth->username.size() > 255 || auth->password.size() > 255)\n             return error(\"Proxy username or password too long\");\n         vAuth.push_back(auth->username.size());\n@@ -314,7 +367,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error sending authentication to proxy\");\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n-        char pchRetA[2];\n+        uint8_t pchRetA[2];\n         if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n@@ -323,17 +376,17 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             CloseSocket(hSocket);\n             return error(\"Proxy authentication unsuccessful\");\n         }\n-    } else if (pchRet1[1] == 0x00) {\n+    } else if (pchRet1[1] == SOCKS5Method::NOAUTH) {\n         // Perform no authentication\n     } else {\n         CloseSocket(hSocket);\n         return error(\"Proxy requested wrong authentication method %02x\", pchRet1[1]);\n     }\n     std::vector<uint8_t> vSocks5;\n-    vSocks5.push_back(0x05); // VER protocol version\n-    vSocks5.push_back(0x01); // CMD CONNECT\n-    vSocks5.push_back(0x00); // RSV Reserved\n-    vSocks5.push_back(0x03); // ATYP DOMAINNAME\n+    vSocks5.push_back(SOCKSVersion::SOCKS5); // VER protocol version\n+    vSocks5.push_back(SOCKS5Command::CONNECT); // CMD CONNECT\n+    vSocks5.push_back(0x00); // RSV Reserved must be 0\n+    vSocks5.push_back(SOCKS5Atyp::DOMAINNAME); // ATYP DOMAINNAME\n     vSocks5.push_back(strDest.size()); // Length<=255 is checked at beginning of function\n     vSocks5.insert(vSocks5.end(), strDest.begin(), strDest.end());\n     vSocks5.push_back((port >> 8) & 0xFF);\n@@ -343,7 +396,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet2[4];\n+    uint8_t pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         if (recvr == IntrRecvError::Timeout) {\n@@ -355,26 +408,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error while reading proxy response\");\n         }\n     }\n-    if (pchRet2[0] != 0x05) {\n+    if (pchRet2[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n-    if (pchRet2[1] != 0x00) {\n+    if (pchRet2[1] != SOCKS5Reply::SUCCEEDED) {\n         // Failures to connect to a peer that are not proxy errors\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n-    if (pchRet2[2] != 0x00) {\n+    if (pchRet2[2] != 0x00) { // Reserved field must be 0\n         CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n-    char pchRet3[256];\n+    uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x03:\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::DOMAINNAME:\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n             if (recvr != IntrRecvError::OK) {"
      }
    ]
  }
]