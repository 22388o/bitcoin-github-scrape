[
  {
    "sha": "efac91e65452dd89a9b891e79bdd191208d2b44d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmFjOTFlNjU0NTJkZDg5YTliODkxZTc5YmRkMTkxMjA4ZDJiNDRk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-23T17:29:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-01T20:35:02Z"
      },
      "message": "Always wait for threadGroup to exit in bitcoind shutdown\n\nThis resolves a possible-assert-on-shutdown race introduced in\n1f668b646806f94acd851acdbd9939c24e0492d3 when early shutdown\noccurs.\n\nPreviously this was not done to avoid any cases where the\nthreadGroup might not exit due to a blocking thread, but at this\npoint the threadGroup isn't used all that much, plus Qt already\ndoes this, and its good to keep their init/shutdown consistent.\n\nFor those curious, the threadGroup is only used in a few places:\n * Its used to run the CCheckQueues in script validation, but these\n   use the boost mutex/condition variable primitives, so they\n   respect the interrupt pretty trivially.\n * Its used for the import thread, which should exit rather quickly\n   as mostly it just calls LoadExternalBlockFile, which has an\n   interruption_point right before each block loaded.\n * Its used in the scheduler thread, which is only used for:\n   * validationinterface has an effectively-dummy reference to it.\n   * wallet compaction, which should not last long\n   * addr/banlist dumping from CConnman, which should also be fast",
      "tree": {
        "sha": "e630961bac6c0763c637faf915935fd0d0274462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e630961bac6c0763c637faf915935fd0d0274462"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efac91e65452dd89a9b891e79bdd191208d2b44d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efac91e65452dd89a9b891e79bdd191208d2b44d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efac91e65452dd89a9b891e79bdd191208d2b44d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efac91e65452dd89a9b891e79bdd191208d2b44d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f66c59650527022b4f7abd98ff0a1a4e4741bd34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66c59650527022b4f7abd98ff0a1a4e4741bd34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66c59650527022b4f7abd98ff0a1a4e4741bd34"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ff61b9065be2f971288a54b104a94af7327c821e",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efac91e65452dd89a9b891e79bdd191208d2b44d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efac91e65452dd89a9b891e79bdd191208d2b44d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=efac91e65452dd89a9b891e79bdd191208d2b44d",
        "patch": "@@ -176,9 +176,7 @@ bool AppInit(int argc, char* argv[])\n     if (!fRet)\n     {\n         Interrupt(threadGroup);\n-        // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n-        // the startup-failure cases to make sure they don't result in a hang due to some\n-        // thread-blocking-waiting-for-another-thread-during-startup case\n+        threadGroup.join_all();\n     } else {\n         WaitForShutdown(&threadGroup);\n     }"
      }
    ]
  },
  {
    "sha": "fce3f4f4920714187616e76fdecbec306e8d7a8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2UzZjRmNDkyMDcxNDE4NzYxNmU3NmZkZWNiZWMzMDZlOGQ3YThm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-23T22:08:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-01T20:35:02Z"
      },
      "message": "Fix resume-of-reindex-after-restart\n\nThis more clearly uses fReindex vs fReset to make sure we're not\nclearing our coinsdb needlessly when restarting after a reindex.\nIt also makes it so that restarting after shutting down mid-reindex\nisn't treates specially at all during txdb loading code, as it\nshouldn't be.",
      "tree": {
        "sha": "6008c3df1bd65bf60577106f8bfbbde1fe6f56ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6008c3df1bd65bf60577106f8bfbbde1fe6f56ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fce3f4f4920714187616e76fdecbec306e8d7a8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fce3f4f4920714187616e76fdecbec306e8d7a8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fce3f4f4920714187616e76fdecbec306e8d7a8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fce3f4f4920714187616e76fdecbec306e8d7a8f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efac91e65452dd89a9b891e79bdd191208d2b44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efac91e65452dd89a9b891e79bdd191208d2b44d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efac91e65452dd89a9b891e79bdd191208d2b44d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5cc45c52fa0946e82ba61eec03969698b4c30bab",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fce3f4f4920714187616e76fdecbec306e8d7a8f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fce3f4f4920714187616e76fdecbec306e8d7a8f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fce3f4f4920714187616e76fdecbec306e8d7a8f",
        "patch": "@@ -1400,9 +1400,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 delete pcoinscatcher;\n                 delete pblocktree;\n \n-                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n+                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReset);\n \n-                if (fReindex) {\n+                if (fReset) {\n                     pblocktree->WriteReindexing(true);\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n                     if (fPruneMode)\n@@ -1414,6 +1414,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // LoadBlockIndex will load fTxIndex from the db, or set it if\n                 // we're reindexing. It will also load fHavePruned if we've\n                 // ever removed a block file from disk.\n+                // Note that it also sets fReindex based on the disk flag!\n+                // From here on out fReindex and fReset mean something different!\n                 if (!LoadBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error loading block database\");\n                     break;\n@@ -1448,7 +1450,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into mapBlockIndex!\n \n-                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex || fReindexChainState);\n+                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReset || fReindexChainState);\n                 pcoinscatcher = new CCoinsViewErrorCatcher(pcoinsdbview);\n \n                 // If necessary, upgrade from older database format.\n@@ -1467,7 +1469,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // The on-disk coinsdb is now in a good state, create the cache\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n-                if (!fReindex && !fReindexChainState) {\n+                if (!fReset && !fReindexChainState) {\n                     // LoadChainTip sets chainActive based on pcoinsTip's best block\n                     if (!LoadChainTip(chainparams)) {\n                         strLoadError = _(\"Error initializing block database\");\n@@ -1476,7 +1478,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     assert(chainActive.Tip() != NULL);\n                 }\n \n-                if (!fReindex) {\n+                if (!fReset) {\n                     // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n                     // It both disconnects blocks based on chainActive, and drops block data in\n                     // mapBlockIndex based on lack of available witness data.\n@@ -1487,7 +1489,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!fReindex && !fReindexChainState) {\n+                if (!fReset && !fReindexChainState) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                         LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\","
      }
    ]
  },
  {
    "sha": "13ab353829bfcf928a0dd88cc9841e6515eea111",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2FiMzUzODI5YmZjZjkyOGEwZGQ4OGNjOTg0MWU2NTE1ZWVhMTEx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-26T18:41:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-01T20:35:02Z"
      },
      "message": "Check for empty coinsview instead of just-reset coinsview in init\n\nThis fixes a few cases where we should be treating a restart-after-\ncoinsviewdb-reset identically to a just-reset-coinsviewdb.\n\nThanks to @morcos for identifying the bug.",
      "tree": {
        "sha": "326f61f279b5470e48648ee7275bd103f65f159f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/326f61f279b5470e48648ee7275bd103f65f159f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13ab353829bfcf928a0dd88cc9841e6515eea111",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13ab353829bfcf928a0dd88cc9841e6515eea111",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13ab353829bfcf928a0dd88cc9841e6515eea111",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13ab353829bfcf928a0dd88cc9841e6515eea111/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fce3f4f4920714187616e76fdecbec306e8d7a8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fce3f4f4920714187616e76fdecbec306e8d7a8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fce3f4f4920714187616e76fdecbec306e8d7a8f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ae84e49cd8ebb83842acd6b2b98d25020504b441",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13ab353829bfcf928a0dd88cc9841e6515eea111/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13ab353829bfcf928a0dd88cc9841e6515eea111/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=13ab353829bfcf928a0dd88cc9841e6515eea111",
        "patch": "@@ -1469,7 +1469,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 // The on-disk coinsdb is now in a good state, create the cache\n                 pcoinsTip = new CCoinsViewCache(pcoinscatcher);\n \n-                if (!fReset && !fReindexChainState) {\n+                bool is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n+                if (!is_coinsview_empty) {\n                     // LoadChainTip sets chainActive based on pcoinsTip's best block\n                     if (!LoadChainTip(chainparams)) {\n                         strLoadError = _(\"Error initializing block database\");\n@@ -1489,7 +1490,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!fReset && !fReindexChainState) {\n+                if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                         LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\","
      }
    ]
  },
  {
    "sha": "e7539f864984740b80efc44e1a8970f4353ff066",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzUzOWY4NjQ5ODQ3NDBiODBlZmM0NGUxYTg5NzBmNDM1M2ZmMDY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-01T21:02:10Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-01T21:02:10Z"
      },
      "message": "Fix some broken init-time prints/constants",
      "tree": {
        "sha": "5528c6baf4a2a9e588abb4d45f527bc8f81fec35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5528c6baf4a2a9e588abb4d45f527bc8f81fec35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7539f864984740b80efc44e1a8970f4353ff066",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7539f864984740b80efc44e1a8970f4353ff066",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7539f864984740b80efc44e1a8970f4353ff066",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7539f864984740b80efc44e1a8970f4353ff066/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13ab353829bfcf928a0dd88cc9841e6515eea111",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13ab353829bfcf928a0dd88cc9841e6515eea111",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13ab353829bfcf928a0dd88cc9841e6515eea111"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ca62d3e7cc3395c3a9c20689686d24d9601dd834",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7539f864984740b80efc44e1a8970f4353ff066/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7539f864984740b80efc44e1a8970f4353ff066/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e7539f864984740b80efc44e1a8970f4353ff066",
        "patch": "@@ -1440,8 +1440,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk.\n-                // This is called again in ThreadImport in the reindex completes.\n+                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n+                // (otherwise we use the one already on disk).\n+                // This is called again in ThreadImport after the reindex completes.\n                 if (!fReindex && !LoadGenesisBlock(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;"
      },
      {
        "sha": "e2e0a9668fd93befde1403559426a90b5494b55d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7539f864984740b80efc44e1a8970f4353ff066/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7539f864984740b80efc44e1a8970f4353ff066/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e7539f864984740b80efc44e1a8970f4353ff066",
        "patch": "@@ -75,7 +75,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         if (!LoadGenesisBlock(chainparams)) {\n-            throw std::runtime_error(\"InitBlockIndex failed.\");\n+            throw std::runtime_error(\"LoadGenesisBlock failed.\");\n         }\n         {\n             CValidationState state;"
      },
      {
        "sha": "405ff356f50a376172d84cd5d3bb0ec975727c03",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7539f864984740b80efc44e1a8970f4353ff066/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7539f864984740b80efc44e1a8970f4353ff066/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e7539f864984740b80efc44e1a8970f4353ff066",
        "patch": "@@ -3916,7 +3916,6 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     if (mapBlockIndex.count(chainparams.GenesisBlock().GetHash()))\n         return true;\n \n-    // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     try {\n         CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n         // Start new block file"
      }
    ]
  }
]