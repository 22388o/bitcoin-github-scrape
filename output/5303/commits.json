[
  {
    "sha": "6392f40a49b759b1165699c6cb880b8d2c8beb07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzkyZjQwYTQ5Yjc1OWIxMTY1Njk5YzZjYjg4MGI4ZDJjOGJlYjA3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-11-18T17:06:32Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-11-18T17:06:32Z"
      },
      "message": "Add ZMQ support.  Report blocks and transactions via ZMQ.\n\nContinues Johnathan Corgan's work.",
      "tree": {
        "sha": "53e87a0553d04cca12eb71eebf0ff040f0003977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53e87a0553d04cca12eb71eebf0ff040f0003977"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6392f40a49b759b1165699c6cb880b8d2c8beb07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6392f40a49b759b1165699c6cb880b8d2c8beb07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6392f40a49b759b1165699c6cb880b8d2c8beb07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6392f40a49b759b1165699c6cb880b8d2c8beb07/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7715c847472f565ca79429db0d8505f126617878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7715c847472f565ca79429db0d8505f126617878",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7715c847472f565ca79429db0d8505f126617878"
      }
    ],
    "stats": {
      "total": 450,
      "additions": 448,
      "deletions": 2
    },
    "files": [
      {
        "sha": "624f765c7a6f636fd566e2e38e779a17822eb20b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -144,6 +144,12 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([zmq],\n+  [AC_HELP_STRING([--disable-zmq],\n+  [Disable ZMQ notifications])],\n+  [use_zmq=no],\n+  [use_zmq=yes])\n+\n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n # Enable debug \n@@ -754,6 +760,22 @@ if test x$bitcoin_enable_qt != xno; then\n   fi\n fi\n \n+# conditional search for and use libzmq\n+AC_MSG_CHECKING([whether to build ZMQ support])\n+if test \"x$use_zmq\" == \"xyes\"; then\n+  AC_MSG_RESULT([yes])\n+  PKG_CHECK_MODULES([ZMQ],[libzmq],\n+    [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+    [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+     AC_MSG_WARN([libzmq not found, disabling])\n+     use_zmq=no])\n+else\n+  AC_MSG_RESULT([no, --disable-zmq used])\n+  AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+fi\n+\n+AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n+\n AC_MSG_CHECKING([whether to build test_bitcoin])\n if test x$use_tests = xyes; then\n   AC_MSG_RESULT([yes])"
      },
      {
        "sha": "22527e476e9d2bd9e1f175b5e3dbff6d4a33b5f8",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -0,0 +1,40 @@\n+#!/usr/bin/env python2\n+\n+import zmq\n+import binascii\n+\n+port = 28332\n+topic1 = \"BLK\"\n+topic2 = \"TXN\"\n+topic_len = len(topic1)\n+\n+zmqContext = zmq.Context()\n+zmqSubSocket = zmqContext.socket(zmq.SUB)\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, topic1)\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, topic2)\n+zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+\n+def handleBLK(blk):\n+    print \"-BLKHDR-\"\n+    print binascii.hexlify(blk[:80])\n+\n+\n+def handleTX(tx):\n+    print \"-TX-\"\n+    print binascii.hexlify(tx)\n+\n+\n+try:\n+    while True:\n+        msg = zmqSubSocket.recv()\n+        msg_topic = msg[:topic_len]\n+        msg_data  = msg[topic_len:]\n+\n+        if msg_topic == \"TXN\":\n+            handleTX(msg_data)\n+        elif msg_topic == \"BLK\":\n+            handleBLK(msg_data)\n+\n+except KeyboardInterrupt:\n+    zmqContext.destroy()"
      },
      {
        "sha": "f90c47f71c0ebf0560547d7080aaeba8a326de66",
        "filename": "doc/zmq.md",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -0,0 +1,145 @@\n+# Block and Transaction Broadcasting With ZeroMQ\n+\n+[ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n+connections, inter-process communications, and shared-memory,\n+providing various message-oriented semantics such as publish/subcribe,\n+request/reply, and push/pull.\n+\n+The Bitcoin Core daemon can be configured to act as a trusted \"border\n+router\", implementing the bitcoin wire protocol and relay, making\n+consensus decisions, maintaining the local blockchain database,\n+broadcasting locally generated transactions into the network, and\n+providing a queryable RPC interface to interact on a polled basis for\n+requesting blockchain related data.  However, there exists only a\n+limited service to notify external software of events like the arrival\n+of new blocks or transactions.\n+\n+The ZeroMQ facility binds a \"publish\" port that broadcasts all newly\n+arrived *and validated* blocks and transactions to one or more\n+connected subscribers.  This read-only facility requires only the\n+connection of a corresponding ZeroMQ subscriber port in receiving\n+software; it is not authenticated nor is there any two-way protocol\n+involvement.\n+\n+In this fashion, external software can use a trusted Bitcoin Core\n+daemon to do the heavy lifting of communicating with the P2P network,\n+while still receiving network information asynchronously in real\n+time. As transactions and blocks arrive via the P2P network, Bitcoin\n+Core will apply all the validation and standardization rules to this\n+data, only passing along through ZeroMQ those items that pass.\n+\n+ZeroMQ sockets are self-connecting and self-healing; that is, connects\n+made between two endpoints will be automatically restored after an\n+outage, and either end may be freely started or stopped in any order.\n+\n+Because ZeroMQ is message oriented, subscribers receive transactions\n+and blocks all-at-once and do not need to implement any sort of\n+buffering or reassembly.\n+\n+## Prerequisites\n+\n+The ZeroMQ feature in Bitcoin Core uses only a very small part of the\n+ZeroMQ C API, and is thus compatible with any version of ZeroMQ\n+from 2.1 onward, including all versions in the 3.x and 4.x release\n+series.  Typically, it is packaged by distributions as something like\n+*libzmq-dev*.\n+\n+The C++ wrapper for ZeroMQ is *not* needed.\n+\n+## Enabling\n+\n+By default, the ZeroMQ port functionality is disabled.  Two steps are\n+required to enable--compiling in the ZeroMQ code, and configuring\n+runtime operation on the command-line or configuration file.\n+\n+    $ ./configure --enable-zmq (other options)\n+\n+This will produce a binary that is capable of providing the ZeroMQ\n+facility, but will not do so until also configured properly.\n+\n+## Configuration\n+\n+Currently, the ZeroMQ facility only needs to have the ZeroMQ endpoint\n+specified:\n+\n+    $ bitcoind -zmqpub=tcp://127.0.0.1/28332\n+\n+This will cause bitcoind to establish a PUB listening socket at the\n+specified host address and port number.  The endpoint specifier may\n+also be provided as the equivalent line item in bitcoin.conf.\n+\n+ZeroMQ endpoint specifiers for TCP (and others) are documented in the\n+[ZeroMQ API](http://api.zeromq.org).\n+\n+## Operation\n+\n+ZeroMQ publish sockets prepend each data item with an arbitrary topic\n+prefix that allows subscriber clients to request only those items with\n+a matching prefix.  When publishing, bitcoind will prepend the topic\n+\"TXN\" (no quotes, no null terminator) to the binary, serialized form\n+of a published transaction, and \"BLK\" to the binary, serialized form\n+of a published block.\n+\n+Client side, then, the ZeroMQ subscriber socket must have the\n+ZMQ_SUBSCRIBE option set to one or either of these prefixes; without\n+doing so will result in no messages arriving.\n+\n+Here is a small example, in the Python language, using the\n+*python-zmq* wrapper:\n+\n+    import zmq\n+    import binascii\n+\n+    port = 28332\n+    topic1 = \"BLK\"\n+    topic2 = \"TXN\"\n+    topic_len = len(topic1)\n+\n+    zmqContext = zmq.Context()\n+    zmqSubSocket = zmqContext.socket(zmq.SUB)\n+    zmqSubSocket.setsockopt(zmq.SUBSCRIBE, topic1)\n+    zmqSubSocket.setsockopt(zmq.SUBSCRIBE, topic2)\n+    zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+    def handleBLK(blk):\n+        print \"-BLKHDR-\"\n+        print binascii.hexlify(blk[:80])\n+\n+    def handleTX(tx):\n+        print \"-TX-\"\n+        print binascii.hexlify(tx)\n+\n+    try:\n+        while True:\n+            msg = zmqSubSocket.recv()\n+            msg_topic = msg[:topic_len]\n+            msg_data  = msg[topic_len:]\n+\n+            if msg_topic == \"TXN\":\n+                handleTX(msg_data)\n+            elif msg_topic == \"BLK\":\n+                handleBLK(msg_data)\n+\n+    except KeyboardInterrupt:\n+        zmqContext.destroy()\n+\n+\n+This example is provided in the contrib/zmq directory of the source\n+code.\n+\n+## Security Considerations\n+\n+From the perspective of bitcoind, the ZeroMQ socket is write-only; PUB\n+sockets don't even have a read function.  Thus, there is no state\n+introduced into bitcoind directly.  Furthermore, no information is\n+broadcast that wasn't already received from the public P2P network.\n+\n+No authentication or authorization is done on connecting clients; it\n+is assumed that the ZeroMQ port is exposed only to trusted entities,\n+using other means such as firewalling.\n+\n+Transactions and blocks are broadcast in their serialized form\n+directly as received and validated by bitcoind.  External software may\n+assume that these have passed all validity/consensus/standard checks,\n+but of course is free to perform these functions again in part or in\n+whole."
      },
      {
        "sha": "3fe76136b33fd57df83add6f8b330025e5d16db3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   wallet.h \\\n   wallet_ismine.h \\\n   walletdb.h \\\n+  zmqports.h \\\n   compat/sanity.h\n \n JSON_H = \\\n@@ -177,6 +178,7 @@ libbitcoin_server_a_SOURCES = \\\n   timedata.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n+  zmqports.cpp \\\n   $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n \n@@ -293,6 +295,10 @@ endif\n bitcoind_SOURCES = bitcoind.cpp\n #\n \n+if ENABLE_ZMQ\n+bitcoind_LDADD += $(ZMQ_LIBS)\n+endif\n+\n if TARGET_WINDOWS\n bitcoind_SOURCES += bitcoind-res.rc\n endif"
      },
      {
        "sha": "a1c2d48119de6fc2e7aed1aee85776594cc28312",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -359,6 +359,9 @@ qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n+if ENABLE_ZMQ\n+qt_bitcoin_qt_LDADD += $(ZMQ_LIBS)\n+endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n if USE_LIBSECP256K1"
      },
      {
        "sha": "969ebd070985003d03d5d71ac09acb63255584cc",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -30,6 +30,9 @@ qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n+if ENABLE_ZMQ\n+qt_test_test_bitcoin_qt_LDADD += $(ZMQ_LIBS)\n+endif\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)"
      },
      {
        "sha": "26767a135e6335b8b0b71354d8f404705c94ebcc",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -85,6 +85,10 @@ if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n \n+if ENABLE_ZMQ\n+test_test_bitcoin_LDADD += $(ZMQ_LIBS)\n+endif\n+\n if USE_LIBSECP256K1\n   test_test_bitcoin_LDADD += secp256k1/libsecp256k1.la\n endif"
      },
      {
        "sha": "840da5b39b5d745e569c688bb2ac44019c07a32d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -28,6 +28,7 @@\n #include \"wallet.h\"\n #include \"walletdb.h\"\n #endif\n+#include \"zmqports.h\"\n \n #include <stdint.h>\n #include <stdio.h>\n@@ -169,6 +170,9 @@ void Shutdown()\n     if (pwalletMain)\n         bitdb.Flush(true);\n #endif\n+\n+    ZMQShutdown();\n+\n #ifndef WIN32\n     boost::filesystem::remove(GetPidFile());\n #endif\n@@ -298,7 +302,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n     strUsage += \"                         \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n #endif\n-\n+    strUsage += \"  -zmqpub=<endpoint>     \" + _(\"Publish blocks and transactions on ZMQ port 'endpoint'\") + \"\\n\";\n     strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n@@ -919,6 +923,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n     BOOST_FOREACH(string strDest, mapMultiArgs[\"-seednode\"])\n         AddOneShot(strDest);\n \n+    if (mapArgs.count(\"-zmqpub\"))\n+      ZMQInitialize(mapArgs[\"-zmqpub\"]);\n+\n+\n     // ********************************************************* Step 7: load block chain\n \n     fReindex = GetBoolArg(\"-reindex\", false);"
      },
      {
        "sha": "e348bec6c65bd76d27ded7c48ee8171637a591fb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -2462,6 +2462,8 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return state.Abort(std::string(\"System error: \") + e.what());\n     }\n \n+    uiInterface.NotifyAcceptBlock(block);\n+\n     return true;\n }\n "
      },
      {
        "sha": "18492333caa7d5c23387059d7d64a8e3c545cefe",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -1753,6 +1753,8 @@ void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n         } else\n             pnode->PushInventory(inv);\n     }\n+\n+    uiInterface.NotifyRelayTx(tx);\n }\n \n void CNode::RecordBytesRecv(uint64_t bytes)"
      },
      {
        "sha": "28f5e30dc8b282be4e33a02c8c1463fd8739478f",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -256,6 +256,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n     { \"network\",            \"ping\",                   &ping,                   true,      false,      false },\n \n+    /* ZMQ notification */\n+    { \"zmq\",                \"getzmqurl\",              &getzmqurl,              true,      true,       false },\n+\n     /* Block chain and UTXO */\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true,      false,      false },\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true,      false,      false },"
      },
      {
        "sha": "3252f971e38b968232108c96cb6a9979758de32c",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -194,7 +194,7 @@ extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getwalletinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblockchaininfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnetworkinfo(const json_spirit::Array& params, bool fHelp);\n-\n+extern json_spirit::Value getzmqurl(const json_spirit::Array &params, bool fHelp);\n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "9c42390477dc6c9477118a8683d9aa69a12d5c06",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -15,6 +15,8 @@\n class CBasicKeyStore;\n class CWallet;\n class uint256;\n+class CTransaction;\n+class CBlock;\n \n /** General change type (added, updated, removed). */\n enum ChangeType\n@@ -98,6 +100,12 @@ class CClientUIInterface\n \n     /** New block has been accepted */\n     boost::signals2::signal<void (const uint256& hash)> NotifyBlockTip;\n+\n+    /** New block has been accepted */\n+    boost::signals2::signal<void (const CBlock& block)> NotifyAcceptBlock;\n+\n+    /** New transaction to relay */\n+    boost::signals2::signal<void (const CTransaction& tx)> NotifyRelayTx;\n };\n \n extern CClientUIInterface uiInterface;"
      },
      {
        "sha": "13600e87fae96cbd03d981195a53f6acb98ad31e",
        "filename": "src/zmqports.cpp",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/zmqports.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/zmqports.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmqports.cpp?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -0,0 +1,175 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"zmqports.h\"\n+\n+#if ENABLE_ZMQ\n+#include <zmq.h>\n+#endif\n+\n+#include \"core/block.h\"\n+#include \"core/transaction.h\"\n+#include \"version.h\"\n+#include \"streams.h\"\n+#include \"util.h\"\n+#include \"netbase.h\"\n+#include \"ui_interface.h\"\n+#include \"json/json_spirit_value.h\"\n+\n+using namespace json_spirit;\n+using namespace std;\n+\n+// Global state\n+bool fZMQPub = false;\n+\n+#if ENABLE_ZMQ\n+\n+// ZMQ related file scope variables\n+static void *zmqContext;\n+static void *zmqPubSocket;\n+\n+// Internal utility functions\n+static void ZMQPublishBlock(const CBlock &blk);\n+static void ZMQPublishTransaction(const CTransaction &tx);\n+\n+static void zmqError(const char *str)\n+{\n+  LogPrint(\"ZMQ error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n+}\n+\n+// Called at startup to conditionally set up ZMQ socket(s)\n+void ZMQInitialize(const std::string &endp)\n+{\n+  zmqContext = zmq_init(1);\n+  if (!zmqContext) {\n+    zmqError(\"Unable to initialize ZMQ context\");\n+    return;\n+  }\n+\n+  zmqPubSocket = zmq_socket(zmqContext, ZMQ_PUB);\n+  if (!zmqPubSocket) {\n+    zmqError(\"Unable to open ZMQ pub socket\");\n+    return;\n+  }\n+\n+  int rc = zmq_bind(zmqPubSocket, endp.c_str());\n+  if (rc != 0) {\n+    zmqError(\"Unable to bind ZMQ socket\");\n+    zmq_close(zmqPubSocket);\n+    zmqPubSocket = 0;\n+    return;\n+  }\n+\n+  uiInterface.NotifyAcceptBlock.connect(ZMQPublishBlock);\n+  uiInterface.NotifyRelayTx.connect(ZMQPublishTransaction);\n+\n+  fZMQPub = true;\n+  LogPrint(\"zmq\", \"PUB socket listening at %s\\n\", endp);\n+}\n+\n+// Internal function to publish a serialized data stream on a given\n+// topic\n+//\n+// Note: assumes topic is a valid null terminated C string\n+static void zmqPublish(const char *topic, const CDataStream &ss)\n+{\n+  zmq_msg_t msg;\n+  const unsigned int topiclen = strlen(topic);\n+  const unsigned int msglen = ss.size() + topiclen;\n+\n+  // Initialize a new zmq_msg_t to hold serialized content\n+  int rc = zmq_msg_init_size(&msg, msglen);\n+  if (rc) {\n+    zmqError(\"Unable to initialize ZMQ msg\");\n+    return;\n+  }\n+\n+  // Copy topic and serialized TX into message buffer\n+  unsigned char *buf = (unsigned char *)zmq_msg_data(&msg);\n+  memcpy(&buf[0], topic, topiclen); // omits null trailer\n+  memcpy(&buf[topiclen], &ss[0], ss.size());\n+\n+  // Fire-and-forget\n+  rc = zmq_msg_send(&msg, zmqPubSocket, 0);\n+  if (rc == -1) {\n+    zmqError(\"Unable to send ZMQ message\");\n+    return;\n+  }\n+\n+  LogPrint(\"zmq\", \"Published to topic %s\\n\", topic);\n+}\n+\n+// Called after all transaction relay checks are completed\n+static void ZMQPublishTransaction(const CTransaction &tx)\n+{\n+  if (!zmqPubSocket)\n+    return;\n+\n+  // Serialize transaction\n+  CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+  ss.reserve(10000); // FIXME used defined constant\n+  ss << tx;\n+\n+  zmqPublish(\"TXN\", ss);\n+}\n+\n+// Called after all block checks completed and successfully added to\n+// disk index\n+static void ZMQPublishBlock(const CBlock &blk)\n+{\n+  if (!zmqPubSocket)\n+    return;\n+\n+  // Serialize block\n+  CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+  ss.reserve(1000000); // FIXME use defined constant\n+  ss << blk;\n+\n+  zmqPublish(\"BLK\", ss);\n+}\n+\n+// Called during shutdown sequence\n+void ZMQShutdown()\n+{\n+  if (!fZMQPub)\n+    return;\n+\n+  if (zmqContext) {\n+    if (zmqPubSocket) {\n+      // Discard any unread messages and close socket\n+      int linger = 0;\n+      zmq_setsockopt(zmqPubSocket, ZMQ_LINGER, &linger, sizeof(linger));\n+      zmq_close(zmqPubSocket);\n+      zmqPubSocket = 0;\n+    }\n+\n+    zmq_ctx_destroy(zmqContext);\n+    zmqContext = 0;\n+  }\n+\n+  fZMQPub = false;\n+}\n+\n+#endif // ENABLE_ZMQ\n+\n+Value getzmqurl(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"getzmqurl\\n\"\n+            \"Returns an object containing ZMQ notification endpoint.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"zmqurl\\\": \\\"tcp//xxx:xx\\\",   (string) the ZMQ endpoint specifier\\n\"\n+            \"}\\n\"\n+        );\n+\n+    proxyType proxy;\n+    GetProxy(NET_IPV4, proxy);\n+\n+    Object obj;\n+    obj.push_back(Pair(\"zmqurl\", mapArgs[\"-zmqpub\"]));\n+    return obj;\n+}"
      },
      {
        "sha": "74ffd22f061691642710b4221c8cd96baa57c2d3",
        "filename": "src/zmqports.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/zmqports.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6392f40a49b759b1165699c6cb880b8d2c8beb07/src/zmqports.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmqports.h?ref=6392f40a49b759b1165699c6cb880b8d2c8beb07",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef ZMQPORTS_H\n+#define ZMQPORTS_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include <string>\n+\n+// Global state\n+extern bool fZMQPub;\n+\n+#if ENABLE_ZMQ\n+void ZMQShutdown();\n+void ZMQInitialize(const std::string &endp);\n+#else\n+static inline void ZMQInitialize(const std::string &endp) {}\n+static inline void ZMQShutdown() {}\n+#endif // ENABLE_ZMQ\n+\n+#endif // ZMQPORTS_H"
      }
    ]
  }
]