[
  {
    "sha": "652e156951c501638aebb73f8861b2ff83b51e1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTJlMTU2OTUxYzUwMTYzOGFlYmI3M2Y4ODYxYjJmZjgzYjUxZTFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:01:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:03:16Z"
      },
      "message": "add new RPC implementation file `rpcmisc.cpp`",
      "tree": {
        "sha": "522566a40fefda09320b61bc2a48bdb2ee1cf1f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/522566a40fefda09320b61bc2a48bdb2ee1cf1f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/652e156951c501638aebb73f8861b2ff83b51e1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652e156951c501638aebb73f8861b2ff83b51e1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/652e156951c501638aebb73f8861b2ff83b51e1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652e156951c501638aebb73f8861b2ff83b51e1e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bfaf2ac37c24b61e56c63cb2c4c9dfefdd6df42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bfaf2ac37c24b61e56c63cb2c4c9dfefdd6df42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bfaf2ac37c24b61e56c63cb2c4c9dfefdd6df42"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ce1c8e1b630f9d8ff4a9e0f001a5fb734e7ae61",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/652e156951c501638aebb73f8861b2ff83b51e1e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/652e156951c501638aebb73f8861b2ff83b51e1e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=652e156951c501638aebb73f8861b2ff83b51e1e",
        "patch": "@@ -53,6 +53,7 @@ libbitcoin_server_a_SOURCES = \\\n   noui.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\\n+  rpcmisc.cpp \\\n   rpcnet.cpp \\\n   rpcrawtransaction.cpp \\\n   txdb.cpp \\"
      },
      {
        "sha": "8635e385cfe9db7090f9a0a5bc879eb42ed5436c",
        "filename": "src/rpcmisc.cpp",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/652e156951c501638aebb73f8861b2ff83b51e1e/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/652e156951c501638aebb73f8861b2ff83b51e1e/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=652e156951c501638aebb73f8861b2ff83b51e1e",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"rpcserver.h\"\n+#include \"init.h\"\n+#include \"main.h\"\n+#include \"net.h\"\n+#include \"netbase.h\"\n+#include \"util.h\"\n+#ifdef ENABLE_WALLET\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_value.h\"\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::assign;\n+using namespace json_spirit;\n+"
      }
    ]
  },
  {
    "sha": "16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmJjOWFhZjhhNjJlMTkwNTA1MmFjMmFjZDI0NzBlNWIxOGUyMDlm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:03:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:03:57Z"
      },
      "message": "Move `getinfo` from rpcnet to rpcmisc\n\n`getinfo` is a general info method which shows information\nfrom multiple sources, it doesn't belong in rpcnet.cpp or\nany of the other current RPC implementation files.",
      "tree": {
        "sha": "9ea4e0e79b3ac3cbd039f136abbefc936adb181c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ea4e0e79b3ac3cbd039f136abbefc936adb181c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16bc9aaf8a62e1905052ac2acd2470e5b18e209f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "652e156951c501638aebb73f8861b2ff83b51e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/652e156951c501638aebb73f8861b2ff83b51e1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/652e156951c501638aebb73f8861b2ff83b51e1e"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 63,
      "deletions": 62
    },
    "files": [
      {
        "sha": "6cccc93c72f1e541c1d676d8ad323f4904ce07cf",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16bc9aaf8a62e1905052ac2acd2470e5b18e209f/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16bc9aaf8a62e1905052ac2acd2470e5b18e209f/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
        "patch": "@@ -26,3 +26,66 @@ using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n \n+Value getinfo(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"getinfo\\n\"\n+            \"Returns an object containing various state info.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n+            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet\\n\"\n+            \"  \\\"blocks\\\": xxxxxx,           (numeric) the current number of blocks processed in the server\\n\"\n+            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n+            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n+            \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n+            \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n+            \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getinfo\", \"\")\n+            + HelpExampleRpc(\"getinfo\", \"\")\n+        );\n+\n+    proxyType proxy;\n+    GetProxy(NET_IPV4, proxy);\n+\n+    Object obj;\n+    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n+#ifdef ENABLE_WALLET\n+    if (pwalletMain) {\n+        obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n+        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n+    }\n+#endif\n+    obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n+    obj.push_back(Pair(\"timeoffset\",    (boost::int64_t)GetTimeOffset()));\n+    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n+    obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n+    obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n+    obj.push_back(Pair(\"testnet\",       TestNet()));\n+#ifdef ENABLE_WALLET\n+    if (pwalletMain) {\n+        obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n+        obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n+    }\n+#endif\n+    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+#ifdef ENABLE_WALLET\n+    if (pwalletMain && pwalletMain->IsCrypted())\n+        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n+#endif\n+    obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n+    return obj;\n+}\n+\n+"
      },
      {
        "sha": "06ae7070c3d3b45127ca263294aabbfa1c192df3",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16bc9aaf8a62e1905052ac2acd2470e5b18e209f/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16bc9aaf8a62e1905052ac2acd2470e5b18e209f/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
        "patch": "@@ -338,65 +338,3 @@ Value getnettotals(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"timemillis\", static_cast<boost::int64_t>(GetTimeMillis())));\n     return obj;\n }\n-\n-Value getinfo(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 0)\n-        throw runtime_error(\n-            \"getinfo\\n\"\n-            \"Returns an object containing various state info.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n-            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,           (numeric) the current number of blocks processed in the server\\n\"\n-            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n-            \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n-            \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n-            \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getinfo\", \"\")\n-            + HelpExampleRpc(\"getinfo\", \"\")\n-        );\n-\n-    proxyType proxy;\n-    GetProxy(NET_IPV4, proxy);\n-\n-    Object obj;\n-    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n-    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain) {\n-        obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n-    }\n-#endif\n-    obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n-    obj.push_back(Pair(\"timeoffset\",    (boost::int64_t)GetTimeOffset()));\n-    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n-    obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n-    obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       TestNet()));\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain) {\n-        obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n-        obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n-    }\n-#endif\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain && pwalletMain->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n-#endif\n-    obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n-    return obj;\n-}"
      }
    ]
  },
  {
    "sha": "a943bde6f067567e47c6e12b16c541bb1fea575a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTQzYmRlNmYwNjc1NjdlNDdjNmUxMmIxNmM1NDFiYjFmZWE1NzVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:06:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:06:32Z"
      },
      "message": "Move `settxfee` from rpcblockchain to rpcwallet\n\n`settxfee` only affects the wallet, not the block chain.",
      "tree": {
        "sha": "1b553547b8c2b02bbde4f5fafb47a5d6e15a6233",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b553547b8c2b02bbde4f5fafb47a5d6e15a6233"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a943bde6f067567e47c6e12b16c541bb1fea575a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a943bde6f067567e47c6e12b16c541bb1fea575a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a943bde6f067567e47c6e12b16c541bb1fea575a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a943bde6f067567e47c6e12b16c541bb1fea575a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16bc9aaf8a62e1905052ac2acd2470e5b18e209f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16bc9aaf8a62e1905052ac2acd2470e5b18e209f"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 26,
      "deletions": 25
    },
    "files": [
      {
        "sha": "661deffb195304d3537d2925e70a4456d56398ce",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a943bde6f067567e47c6e12b16c541bb1fea575a/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a943bde6f067567e47c6e12b16c541bb1fea575a/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=a943bde6f067567e47c6e12b16c541bb1fea575a",
        "patch": "@@ -127,30 +127,6 @@ Value getdifficulty(const Array& params, bool fHelp)\n }\n \n \n-Value settxfee(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() < 1 || params.size() > 1)\n-        throw runtime_error(\n-            \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee. 'amount' is a real and is rounded to the nearest 0.00000001\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. amount         (numeric, required) The transaction fee in btc rounded to the nearest 0.00000001\\n\"\n-            \"\\nResult\\n\"\n-            \"true|false        (boolean) Returns true if successful\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"settxfee\", \"0.00001\")\n-            + HelpExampleRpc(\"settxfee\", \"0.00001\")\n-        );\n-\n-    // Amount\n-    int64_t nAmount = 0;\n-    if (params[0].get_real() != 0.0)\n-        nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n-\n-    nTransactionFee = nAmount;\n-    return true;\n-}\n-\n Value getrawmempool(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)"
      },
      {
        "sha": "49a61d10d2a9df02106aa07d6234fea27cc41cfe",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a943bde6f067567e47c6e12b16c541bb1fea575a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a943bde6f067567e47c6e12b16c541bb1fea575a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a943bde6f067567e47c6e12b16c541bb1fea575a",
        "patch": "@@ -237,7 +237,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getrawmempool\",          &getrawmempool,          true,      false,      false },\n     { \"getblock\",               &getblock,               false,     false,      false },\n     { \"getblockhash\",           &getblockhash,           false,     false,      false },\n-    { \"settxfee\",               &settxfee,               false,     false,      true },\n     { \"getrawtransaction\",      &getrawtransaction,      false,     false,      false },\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false,      false },\n     { \"decoderawtransaction\",   &decoderawtransaction,   false,     false,      false },\n@@ -294,6 +293,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listunspent\",            &listunspent,            false,     false,      true },\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n+    { \"settxfee\",               &settxfee,               false,     false,      true },\n \n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },"
      },
      {
        "sha": "a2a12c824315535c231d3a5b26f782bd59d475b4",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a943bde6f067567e47c6e12b16c541bb1fea575a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a943bde6f067567e47c6e12b16c541bb1fea575a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a943bde6f067567e47c6e12b16c541bb1fea575a",
        "patch": "@@ -2066,3 +2066,28 @@ Value listlockunspent(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value settxfee(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"settxfee amount\\n\"\n+            \"\\nSet the transaction fee. 'amount' is a real and is rounded to the nearest 0.00000001\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. amount         (numeric, required) The transaction fee in btc rounded to the nearest 0.00000001\\n\"\n+            \"\\nResult\\n\"\n+            \"true|false        (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"settxfee\", \"0.00001\")\n+            + HelpExampleRpc(\"settxfee\", \"0.00001\")\n+        );\n+\n+    // Amount\n+    int64_t nAmount = 0;\n+    if (params[0].get_real() != 0.0)\n+        nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n+\n+    nTransactionFee = nAmount;\n+    return true;\n+}\n+\n+"
      }
    ]
  },
  {
    "sha": "cd7fa8bb437267db2502415e4fb035d60bda860c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDdmYThiYjQzNzI2N2RiMjUwMjQxNWU0ZmIwMzVkNjBiZGE4NjBj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:14:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:34:57Z"
      },
      "message": "Move `nTransactionFee` from main.cpp to wallet.cpp\n\nTransaction fee is only used by the wallet.\nNo need for it to be in main.cpp.",
      "tree": {
        "sha": "ebb78a41255c9c75f84b19eb59a985444848c093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebb78a41255c9c75f84b19eb59a985444848c093"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd7fa8bb437267db2502415e4fb035d60bda860c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7fa8bb437267db2502415e4fb035d60bda860c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd7fa8bb437267db2502415e4fb035d60bda860c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7fa8bb437267db2502415e4fb035d60bda860c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a943bde6f067567e47c6e12b16c541bb1fea575a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a943bde6f067567e47c6e12b16c541bb1fea575a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a943bde6f067567e47c6e12b16c541bb1fea575a"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7b14ccbf13851d8e741367966038035307349a79",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -534,6 +534,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"].c_str()));\n     }\n \n+#ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nTransactionFee))\n@@ -542,7 +543,6 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n     }\n \n-#ifdef ENABLE_WALLET\n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log"
      },
      {
        "sha": "e3f9fdd84325d2ba2b61d134954ad7dcfedac0b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -67,9 +67,6 @@ CScript COINBASE_FLAGS;\n \n const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n-// Settings\n-int64_t nTransactionFee = 0;\n-\n // Internal stuff\n namespace {\n struct CBlockIndexWorkComparator"
      },
      {
        "sha": "f3f9acb6390301bacf3ad854b7c37418c425a444",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -96,9 +96,6 @@ extern bool fTxIndex;\n extern unsigned int nCoinCacheSize;\n extern bool fHaveGUI;\n \n-// Settings\n-extern int64_t nTransactionFee;\n-\n // Minimum disk space required - used in CheckDiskSpace()\n static const uint64_t nMinDiskSpace = 52428800;\n "
      },
      {
        "sha": "b69a732a853a6934eba906e250236b7772721243",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -17,6 +17,7 @@\n #include \"main.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"wallet.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "363f432d6272d43cd658b9d7f43067097cd58e20",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -14,6 +14,7 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"wallet.h\"\n #include \"walletdb.h\"\n \n #include <QSettings>"
      },
      {
        "sha": "0a22b103c3cdc04de8e25ce9f888a02403794869",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -78,9 +78,7 @@ Value getinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n         obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     }\n-#endif\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n-#ifdef ENABLE_WALLET\n     if (pwalletMain && pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n #endif"
      },
      {
        "sha": "f9adbf73b3349005cec4318b32367ee8d05bf516",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -16,6 +16,8 @@\n \n using namespace std;\n \n+// Settings\n+int64_t nTransactionFee = 0;\n \n //////////////////////////////////////////////////////////////////////////////\n //"
      },
      {
        "sha": "8cd2e021e612afd8685f644a37f8562a4dc30b69",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7fa8bb437267db2502415e4fb035d60bda860c/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7fa8bb437267db2502415e4fb035d60bda860c/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=cd7fa8bb437267db2502415e4fb035d60bda860c",
        "patch": "@@ -23,6 +23,9 @@\n #include <utility>\n #include <vector>\n \n+// Settings\n+extern int64_t nTransactionFee;\n+\n class CAccountingEntry;\n class CCoinControl;\n class COutput;"
      }
    ]
  },
  {
    "sha": "452955f5be9dbd4397ca6425150923521cbee4ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTI5NTVmNWJlOWRiZDQzOTdjYTY0MjUxNTA5MjM1MjFjYmVlNGFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:18:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:34:57Z"
      },
      "message": "Move `validateaddress` from rpcwallet to rpcmisc\n\nEnables it in --disable-wallet compiles.\nDelimit wallet-using part using #ifdef ENABLE_WALLET.",
      "tree": {
        "sha": "39e0e07f97f6818b4deb0fc466c1025b30ca2060",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39e0e07f97f6818b4deb0fc466c1025b30ca2060"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/452955f5be9dbd4397ca6425150923521cbee4ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/452955f5be9dbd4397ca6425150923521cbee4ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/452955f5be9dbd4397ca6425150923521cbee4ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/452955f5be9dbd4397ca6425150923521cbee4ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd7fa8bb437267db2502415e4fb035d60bda860c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7fa8bb437267db2502415e4fb035d60bda860c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd7fa8bb437267db2502415e4fb035d60bda860c"
      }
    ],
    "stats": {
      "total": 168,
      "additions": 86,
      "deletions": 82
    },
    "files": [
      {
        "sha": "240bd68ba4568c9fd75e4d504fed53fe85be62c7",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/452955f5be9dbd4397ca6425150923521cbee4ae/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/452955f5be9dbd4397ca6425150923521cbee4ae/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=452955f5be9dbd4397ca6425150923521cbee4ae",
        "patch": "@@ -86,4 +86,89 @@ Value getinfo(const Array& params, bool fHelp)\n     return obj;\n }\n \n+#ifdef ENABLE_WALLET\n+class DescribeAddressVisitor : public boost::static_visitor<Object>\n+{\n+public:\n+    Object operator()(const CNoDestination &dest) const { return Object(); }\n+\n+    Object operator()(const CKeyID &keyID) const {\n+        Object obj;\n+        CPubKey vchPubKey;\n+        pwalletMain->GetPubKey(keyID, vchPubKey);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+        obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        return obj;\n+    }\n+\n+    Object operator()(const CScriptID &scriptID) const {\n+        Object obj;\n+        obj.push_back(Pair(\"isscript\", true));\n+        CScript subscript;\n+        pwalletMain->GetCScript(scriptID, subscript);\n+        std::vector<CTxDestination> addresses;\n+        txnouttype whichType;\n+        int nRequired;\n+        ExtractDestinations(subscript, whichType, addresses, nRequired);\n+        obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+        obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+        Array a;\n+        BOOST_FOREACH(const CTxDestination& addr, addresses)\n+            a.push_back(CBitcoinAddress(addr).ToString());\n+        obj.push_back(Pair(\"addresses\", a));\n+        if (whichType == TX_MULTISIG)\n+            obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        return obj;\n+    }\n+};\n+#endif\n+\n+Value validateaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"isvalid\\\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n+            \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n+            \"  \\\"ismine\\\" : true|false,          (boolean) If the address is yours or not\\n\"\n+            \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    bool isValid = address.IsValid();\n+\n+    Object ret;\n+    ret.push_back(Pair(\"isvalid\", isValid));\n+    if (isValid)\n+    {\n+        CTxDestination dest = address.Get();\n+        string currentAddress = address.ToString();\n+        ret.push_back(Pair(\"address\", currentAddress));\n+#ifdef ENABLE_WALLET\n+        bool fMine = pwalletMain ? IsMine(*pwalletMain, dest) : false;\n+        ret.push_back(Pair(\"ismine\", fMine));\n+        if (fMine) {\n+            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+            ret.insert(ret.end(), detail.begin(), detail.end());\n+        }\n+        if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n+            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n+#endif\n+    }\n+    return ret;\n+}\n+\n "
      },
      {
        "sha": "9de84fccd8724902d513ab2d7f42e3f3996798d7",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/452955f5be9dbd4397ca6425150923521cbee4ae/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/452955f5be9dbd4397ca6425150923521cbee4ae/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=452955f5be9dbd4397ca6425150923521cbee4ae",
        "patch": "@@ -252,6 +252,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getmininginfo\",          &getmininginfo,          true,      false,      false },\n     { \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n     { \"submitblock\",            &submitblock,            false,     false,      false },\n+    { \"validateaddress\",        &validateaddress,        true,      false,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n@@ -272,7 +273,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"walletpassphrasechange\", &walletpassphrasechange, false,     false,      true },\n     { \"walletlock\",             &walletlock,             true,      false,      true },\n     { \"encryptwallet\",          &encryptwallet,          false,     false,      true },\n-    { \"validateaddress\",        &validateaddress,        true,      false,      false },\n     { \"getbalance\",             &getbalance,             false,     false,      true },\n     { \"move\",                   &movecmd,                false,     false,      true },\n     { \"sendfrom\",               &sendfrom,               false,     false,      true },"
      },
      {
        "sha": "a81c9bbc4c1ffa16e6a127cd4ff71360b91cb391",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 81,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/452955f5be9dbd4397ca6425150923521cbee4ae/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/452955f5be9dbd4397ca6425150923521cbee4ae/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=452955f5be9dbd4397ca6425150923521cbee4ae",
        "patch": "@@ -1862,87 +1862,6 @@ Value encryptwallet(const Array& params, bool fHelp)\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.\";\n }\n \n-class DescribeAddressVisitor : public boost::static_visitor<Object>\n-{\n-public:\n-    Object operator()(const CNoDestination &dest) const { return Object(); }\n-\n-    Object operator()(const CKeyID &keyID) const {\n-        Object obj;\n-        CPubKey vchPubKey;\n-        pwalletMain->GetPubKey(keyID, vchPubKey);\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-        obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n-        return obj;\n-    }\n-\n-    Object operator()(const CScriptID &scriptID) const {\n-        Object obj;\n-        obj.push_back(Pair(\"isscript\", true));\n-        CScript subscript;\n-        pwalletMain->GetCScript(scriptID, subscript);\n-        std::vector<CTxDestination> addresses;\n-        txnouttype whichType;\n-        int nRequired;\n-        ExtractDestinations(subscript, whichType, addresses, nRequired);\n-        obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-        obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        Array a;\n-        BOOST_FOREACH(const CTxDestination& addr, addresses)\n-            a.push_back(CBitcoinAddress(addr).ToString());\n-        obj.push_back(Pair(\"addresses\", a));\n-        if (whichType == TX_MULTISIG)\n-            obj.push_back(Pair(\"sigsrequired\", nRequired));\n-        return obj;\n-    }\n-};\n-\n-Value validateaddress(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 1)\n-        throw runtime_error(\n-            \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n-            \"\\nReturn information about the given bitcoin address.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"isvalid\\\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n-            \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n-            \"  \\\"ismine\\\" : true|false,          (boolean) If the address is yours or not\\n\"\n-            \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-            + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n-        );\n-\n-    CBitcoinAddress address(params[0].get_str());\n-    bool isValid = address.IsValid();\n-\n-    Object ret;\n-    ret.push_back(Pair(\"isvalid\", isValid));\n-    if (isValid)\n-    {\n-        CTxDestination dest = address.Get();\n-        string currentAddress = address.ToString();\n-        ret.push_back(Pair(\"address\", currentAddress));\n-        bool fMine = pwalletMain ? IsMine(*pwalletMain, dest) : false;\n-        ret.push_back(Pair(\"ismine\", fMine));\n-        if (fMine) {\n-            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n-            ret.insert(ret.end(), detail.begin(), detail.end());\n-        }\n-        if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n-            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n-    }\n-    return ret;\n-}\n-\n Value lockunspent(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)"
      }
    ]
  },
  {
    "sha": "723a03d2deb742e5462218ffdc96d3063dd979fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjNhMDNkMmRlYjc0MmU1NDYyMjE4ZmZkYzk2ZDMwNjNkZDk3OWZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:21:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:34:57Z"
      },
      "message": "Move `createmultisig` from rpcwallet to rpcmisc\n\nEnables it in --disable-wallet compiles.",
      "tree": {
        "sha": "222ca07371df465f35978fb06ec6e3e0c76ec4af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/222ca07371df465f35978fb06ec6e3e0c76ec4af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723a03d2deb742e5462218ffdc96d3063dd979fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723a03d2deb742e5462218ffdc96d3063dd979fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/723a03d2deb742e5462218ffdc96d3063dd979fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723a03d2deb742e5462218ffdc96d3063dd979fd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "452955f5be9dbd4397ca6425150923521cbee4ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/452955f5be9dbd4397ca6425150923521cbee4ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/452955f5be9dbd4397ca6425150923521cbee4ae"
      }
    ],
    "stats": {
      "total": 203,
      "additions": 104,
      "deletions": 99
    },
    "files": [
      {
        "sha": "df68bdf3376d33e3bc81ec1d866d2552357ffcbe",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723a03d2deb742e5462218ffdc96d3063dd979fd/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723a03d2deb742e5462218ffdc96d3063dd979fd/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=723a03d2deb742e5462218ffdc96d3063dd979fd",
        "patch": "@@ -171,4 +171,105 @@ Value validateaddress(const Array& params, bool fHelp)\n     return ret;\n }\n \n+//\n+// Used by addmultisigaddress / createmultisig:\n+//\n+CScript _createmultisig(const Array& params)\n+{\n+    int nRequired = params[0].get_int();\n+    const Array& keys = params[1].get_array();\n+\n+    // Gather public keys\n+    if (nRequired < 1)\n+        throw runtime_error(\"a multisignature address must require at least one key to redeem\");\n+    if ((int)keys.size() < nRequired)\n+        throw runtime_error(\n+            strprintf(\"not enough keys supplied \"\n+                      \"(got %\"PRIszu\" keys, but need at least %d to redeem)\", keys.size(), nRequired));\n+    std::vector<CPubKey> pubkeys;\n+    pubkeys.resize(keys.size());\n+    for (unsigned int i = 0; i < keys.size(); i++)\n+    {\n+        const std::string& ks = keys[i].get_str();\n+#ifdef ENABLE_WALLET\n+        // Case 1: Bitcoin address and we have full public key:\n+        CBitcoinAddress address(ks);\n+        if (pwalletMain && address.IsValid())\n+        {\n+            CKeyID keyID;\n+            if (!address.GetKeyID(keyID))\n+                throw runtime_error(\n+                    strprintf(\"%s does not refer to a key\",ks.c_str()));\n+            CPubKey vchPubKey;\n+            if (!pwalletMain->GetPubKey(keyID, vchPubKey))\n+                throw runtime_error(\n+                    strprintf(\"no full public key for address %s\",ks.c_str()));\n+            if (!vchPubKey.IsFullyValid())\n+                throw runtime_error(\" Invalid public key: \"+ks);\n+            pubkeys[i] = vchPubKey;\n+        }\n+\n+        // Case 2: hex public key\n+        else\n+#endif\n+        if (IsHex(ks))\n+        {\n+            CPubKey vchPubKey(ParseHex(ks));\n+            if (!vchPubKey.IsFullyValid())\n+                throw runtime_error(\" Invalid public key: \"+ks);\n+            pubkeys[i] = vchPubKey;\n+        }\n+        else\n+        {\n+            throw runtime_error(\" Invalid public key: \"+ks);\n+        }\n+    }\n+    CScript result;\n+    result.SetMultisig(nRequired, pubkeys);\n+    return result;\n+}\n+\n+Value createmultisig(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2 || params.size() > 2)\n+    {\n+        string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n+            \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n+            \"It returns a json object with the address and redeemScript.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n+            \"2. \\\"keys\\\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys\\n\"\n+            \"     [\\n\"\n+            \"       \\\"key\\\"    (string) bitcoin address or hex-encoded public key\\n\"\n+            \"       ,...\\n\"\n+            \"     ]\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n+            \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            \"\\nCreate a multisig address from 2 addresses\\n\"\n+            + HelpExampleCli(\"createmultisig\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"icreatemultisig\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    // Construct using pay-to-script-hash:\n+    CScript inner = _createmultisig(params);\n+    CScriptID innerID = inner.GetID();\n+    CBitcoinAddress address(innerID);\n+\n+    Object result;\n+    result.push_back(Pair(\"address\", address.ToString()));\n+    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n+\n+    return result;\n+}\n+\n "
      },
      {
        "sha": "9d2ff9652bd8c37d295b847b1be46d66bfd6521a",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723a03d2deb742e5462218ffdc96d3063dd979fd/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723a03d2deb742e5462218ffdc96d3063dd979fd/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=723a03d2deb742e5462218ffdc96d3063dd979fd",
        "patch": "@@ -253,6 +253,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },\n     { \"submitblock\",            &submitblock,            false,     false,      false },\n     { \"validateaddress\",        &validateaddress,        true,      false,      false },\n+    { \"createmultisig\",         &createmultisig,         true,      true ,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n@@ -278,7 +279,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"sendfrom\",               &sendfrom,               false,     false,      true },\n     { \"sendmany\",               &sendmany,               false,     false,      true },\n     { \"addmultisigaddress\",     &addmultisigaddress,     false,     false,      true },\n-    { \"createmultisig\",         &createmultisig,         true,      true ,      false },\n     { \"gettransaction\",         &gettransaction,         false,     false,      true },\n     { \"listtransactions\",       &listtransactions,       false,     false,      true },\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },"
      },
      {
        "sha": "eea75ce972d6568f005d5b6393bae7f6598fc58c",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 98,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723a03d2deb742e5462218ffdc96d3063dd979fd/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723a03d2deb742e5462218ffdc96d3063dd979fd/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=723a03d2deb742e5462218ffdc96d3063dd979fd",
        "patch": "@@ -907,61 +907,8 @@ Value sendmany(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-//\n-// Used by addmultisigaddress / createmultisig:\n-//\n-static CScript _createmultisig(const Array& params)\n-{\n-    int nRequired = params[0].get_int();\n-    const Array& keys = params[1].get_array();\n-\n-    // Gather public keys\n-    if (nRequired < 1)\n-        throw runtime_error(\"a multisignature address must require at least one key to redeem\");\n-    if ((int)keys.size() < nRequired)\n-        throw runtime_error(\n-            strprintf(\"not enough keys supplied \"\n-                      \"(got %\"PRIszu\" keys, but need at least %d to redeem)\", keys.size(), nRequired));\n-    std::vector<CPubKey> pubkeys;\n-    pubkeys.resize(keys.size());\n-    for (unsigned int i = 0; i < keys.size(); i++)\n-    {\n-        const std::string& ks = keys[i].get_str();\n-\n-        // Case 1: Bitcoin address and we have full public key:\n-        CBitcoinAddress address(ks);\n-        if (pwalletMain && address.IsValid())\n-        {\n-            CKeyID keyID;\n-            if (!address.GetKeyID(keyID))\n-                throw runtime_error(\n-                    strprintf(\"%s does not refer to a key\",ks.c_str()));\n-            CPubKey vchPubKey;\n-            if (!pwalletMain->GetPubKey(keyID, vchPubKey))\n-                throw runtime_error(\n-                    strprintf(\"no full public key for address %s\",ks.c_str()));\n-            if (!vchPubKey.IsFullyValid())\n-                throw runtime_error(\" Invalid public key: \"+ks);\n-            pubkeys[i] = vchPubKey;\n-        }\n-\n-        // Case 2: hex public key\n-        else if (IsHex(ks))\n-        {\n-            CPubKey vchPubKey(ParseHex(ks));\n-            if (!vchPubKey.IsFullyValid())\n-                throw runtime_error(\" Invalid public key: \"+ks);\n-            pubkeys[i] = vchPubKey;\n-        }\n-        else\n-        {\n-            throw runtime_error(\" Invalid public key: \"+ks);\n-        }\n-    }\n-    CScript result;\n-    result.SetMultisig(nRequired, pubkeys);\n-    return result;\n-}\n+// Defined in rpcmisc.cpp\n+extern CScript _createmultisig(const Array& params);\n \n Value addmultisigaddress(const Array& params, bool fHelp)\n {\n@@ -1006,49 +953,6 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n     return CBitcoinAddress(innerID).ToString();\n }\n \n-Value createmultisig(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() < 2 || params.size() > 2)\n-    {\n-        string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n-            \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n-            \"It returns a json object with the address and redeemScript.\\n\"\n-\n-            \"\\nArguments:\\n\"\n-            \"1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n-            \"2. \\\"keys\\\"       (string, required) A json array of keys which are bitcoin addresses or hex-encoded public keys\\n\"\n-            \"     [\\n\"\n-            \"       \\\"key\\\"    (string) bitcoin address or hex-encoded public key\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n-            \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            \"\\nCreate a multisig address from 2 addresses\\n\"\n-            + HelpExampleCli(\"createmultisig\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n-            \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"icreatemultisig\", \"2, \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\")\n-        ;\n-        throw runtime_error(msg);\n-    }\n-\n-    // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig(params);\n-    CScriptID innerID = inner.GetID();\n-    CBitcoinAddress address(innerID);\n-\n-    Object result;\n-    result.push_back(Pair(\"address\", address.ToString()));\n-    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n-\n-    return result;\n-}\n-\n \n struct tallyitem\n {"
      }
    ]
  },
  {
    "sha": "c3a7f516e7ba9f39537ded149d8eb756c836fa2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2E3ZjUxNmU3YmE5ZjM5NTM3ZGVkMTQ5ZDhlYjc1NmM4MzZmYTJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:23:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-12-13T15:34:57Z"
      },
      "message": "Move `verifymessage` from rpcwallet to rpcmisc\n\nEnables it in --disable-wallet compiles.",
      "tree": {
        "sha": "8d198d88571212179d71751683b162c8d395bb1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d198d88571212179d71751683b162c8d395bb1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3a7f516e7ba9f39537ded149d8eb756c836fa2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3a7f516e7ba9f39537ded149d8eb756c836fa2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3a7f516e7ba9f39537ded149d8eb756c836fa2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3a7f516e7ba9f39537ded149d8eb756c836fa2e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "723a03d2deb742e5462218ffdc96d3063dd979fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723a03d2deb742e5462218ffdc96d3063dd979fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723a03d2deb742e5462218ffdc96d3063dd979fd"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 52,
      "deletions": 54
    },
    "files": [
      {
        "sha": "c61cc4192b6c7ebd4eb88d52900efc3fa67c669a",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3a7f516e7ba9f39537ded149d8eb756c836fa2e/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3a7f516e7ba9f39537ded149d8eb756c836fa2e/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=c3a7f516e7ba9f39537ded149d8eb756c836fa2e",
        "patch": "@@ -272,4 +272,55 @@ Value createmultisig(const Array& params, bool fHelp)\n     return result;\n }\n \n+Value verifymessage(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 3)\n+        throw runtime_error(\n+            \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n+            \"\\nVerify a signed message\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the signature.\\n\"\n+            \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n+            \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false   (boolean) If the signature is verified or not.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nUnlock the wallet for 30 seconds\\n\"\n+            + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n+            \"\\nCreate the signature\\n\"\n+            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n+            \"\\nVerify the signature\\n\"\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            \"\\nAs json rpc\\n\"\n+            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n+        );\n+\n+    string strAddress  = params[0].get_str();\n+    string strSign     = params[1].get_str();\n+    string strMessage  = params[2].get_str();\n+\n+    CBitcoinAddress addr(strAddress);\n+    if (!addr.IsValid())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n+\n+    CKeyID keyID;\n+    if (!addr.GetKeyID(keyID))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n+\n+    bool fInvalid = false;\n+    vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n+\n+    if (fInvalid)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n+\n+    CHashWriter ss(SER_GETHASH, 0);\n+    ss << strMessageMagic;\n+    ss << strMessage;\n+\n+    CPubKey pubkey;\n+    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n+        return false;\n+\n+    return (pubkey.GetID() == keyID);\n+}\n "
      },
      {
        "sha": "d1fa81628c25f5f97c431ff98994d755e25f6fbb",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3a7f516e7ba9f39537ded149d8eb756c836fa2e/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3a7f516e7ba9f39537ded149d8eb756c836fa2e/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=c3a7f516e7ba9f39537ded149d8eb756c836fa2e",
        "patch": "@@ -254,6 +254,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"submitblock\",            &submitblock,            false,     false,      false },\n     { \"validateaddress\",        &validateaddress,        true,      false,      false },\n     { \"createmultisig\",         &createmultisig,         true,      true ,      false },\n+    { \"verifymessage\",          &verifymessage,          false,     false,      false },\n \n #ifdef ENABLE_WALLET\n     /* Wallet */\n@@ -283,7 +284,6 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listtransactions\",       &listtransactions,       false,     false,      true },\n     { \"listaddressgroupings\",   &listaddressgroupings,   false,     false,      true },\n     { \"signmessage\",            &signmessage,            false,     false,      true },\n-    { \"verifymessage\",          &verifymessage,          false,     false,      false },\n     { \"listaccounts\",           &listaccounts,           false,     false,      true },\n     { \"listsinceblock\",         &listsinceblock,         false,     false,      true },\n     { \"dumpprivkey\",            &dumpprivkey,            true,      false,      true },"
      },
      {
        "sha": "32db0b46aa0ae01f3dcabf651db25b9c402fd3cd",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 53,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3a7f516e7ba9f39537ded149d8eb756c836fa2e/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3a7f516e7ba9f39537ded149d8eb756c836fa2e/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=c3a7f516e7ba9f39537ded149d8eb756c836fa2e",
        "patch": "@@ -441,59 +441,6 @@ Value signmessage(const Array& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-Value verifymessage(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() != 3)\n-        throw runtime_error(\n-            \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n-            \"\\nVerify a signed message\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to use for the signature.\\n\"\n-            \"2. \\\"signature\\\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\\n\"\n-            \"3. \\\"message\\\"         (string, required) The message that was signed.\\n\"\n-            \"\\nResult:\\n\"\n-            \"true|false   (boolean) If the signature is verified or not.\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nUnlock the wallet for 30 seconds\\n\"\n-            + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n-            \"\\nCreate the signature\\n\"\n-            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n-            \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n-            \"\\nAs json rpc\\n\"\n-            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n-        );\n-\n-    string strAddress  = params[0].get_str();\n-    string strSign     = params[1].get_str();\n-    string strMessage  = params[2].get_str();\n-\n-    CBitcoinAddress addr(strAddress);\n-    if (!addr.IsValid())\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n-\n-    CKeyID keyID;\n-    if (!addr.GetKeyID(keyID))\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n-\n-    bool fInvalid = false;\n-    vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n-\n-    if (fInvalid)\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n-\n-    CHashWriter ss(SER_GETHASH, 0);\n-    ss << strMessageMagic;\n-    ss << strMessage;\n-\n-    CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n-        return false;\n-\n-    return (pubkey.GetID() == keyID);\n-}\n-\n-\n Value getreceivedbyaddress(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)"
      }
    ]
  }
]