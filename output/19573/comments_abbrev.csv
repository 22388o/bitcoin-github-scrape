DrahtBot,2020-07-24 03:31:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21401 (Refactor versionbits deployments to avoid potential uninitialized variables by achow101)\n* #21391 ([Bundle 5/n] P",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-663332066,663332066,
luke-jr,2020-10-15 18:30:28,"Rebased and updated with some of @ajtowns 's changes to BIP 8.\n\nThis is probably still not the final form of BIP 8 (see https://github.com/bitcoin/bips/pull/950), but merging this sooner means we have fewer changes to backport together with the activation parameters later on.\n\n(It also means the RPC interfaces are updated now instead of later)",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-709512644,709512644,
michaelfolkson,2021-02-01 10:14:38,"Concept ACK. \n\nSince revised BIP 8 is a strict improvement on BIP 9 it doesn't hurt to replace BIP 9 logic with revised BIP 8 logic. AJ has [highlighted](https://github.com/bitcoin/bitcoin/pull/19573#pullrequestreview-511393873) some bugs, improvements that haven't been addressed yet. I also don't know if you are waiting for revised BIP 8 to be finalized at this point before a rebased version ",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-770742005,770742005,
luke-jr,2021-02-08 04:45:16,"Rebased, merged in @ajtowns's fixes and other changes, and got CI passing.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-774861919,774861919,
luke-jr,2021-02-19 17:04:06,"Addressed review comments & added @ajtowns 's new test.\n\nIntentionally left threshold at 95% for now - that is best left for a future PR to change (when defining a softfork to use BIP8)",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-782206718,782206718,
TheBlueMatt,2021-02-22 07:03:47,I'm a little dubious that forced-signaling logic shouldn't come with code to handle the network forking (ie more aggressive peer-searching via protocol magic or quicker new connections when the chain has stalled). It seems like forced-signaling (which happily forks itself off the network in many of the ways people are talking about using the code today) probably isn't something that should be merg,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-783141614,783141614,
lucasmoten,2021-02-23 20:32:15,utACK,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-784491594,784491594,
prayank23,2021-02-23 20:50:58,Concept ACK. Need to do more research and test everything soon.,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-784502751,784502751,
michaelfolkson,2021-02-23 21:22:20,"Based on today's code review [session](http://gnusha.org/taproot-activation/2021-02-23.log) on IRC I think I can ACK the non-test commits.\n\nI've got an assertion error on the feature_bip8.py functional test when run locally which I will look into tomorrow. \n\n`AssertionError: [node 3] Expected messages ""['bad-vbit-unset-testdummy']"" does not partially match log:`\n\n> I'm a little dubious",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-784521620,784521620,
Sjors,2021-02-24 15:01:27,"This or a followup might be a good opportunity to test p2p behavior against older versions, see `feature_backwards_compatibility.py` for inspiration. You can also use this framework to test the interaction between `lockinontimeout` `true/false` nodes. Though I agree with @TheBlueMatt that this PR would be simpler is we only support `false` for now.\n\nSome commits like bae9a452191a7a83478f7d508a",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-785136756,785136756,
benthecarman,2021-02-24 19:17:21,ACK 977280c5f04c70c2610ef5fcfde57e5256171f65,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-785311978,785311978,
AnthonyRonning,2021-02-25 04:29:19,ACK 977280c5f04c70c2610ef5fcfde57e5256171f65 based on the discussions in yesterday's IRC chat and some additional code review & running the tests locally.,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-785603140,785603140,
michaelfolkson,2021-02-27 13:48:26,In light of a [project](https://github.com/BitcoinActivation/bitcoin) set up to implement a default of lot=true I think Core should implement a default of lot=false with no user configuration option. I also think there should be signposting (comments etc) of where lot=true logic would go in the Core codebase (and referring to the lot parameter in BIP 8) but I don't think it makes sense to have any,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787075472,787075472,
luke-jr,2021-02-27 15:19:31,"No, the alternative is Core release LOT=true and stay consensus-compatible instead of intentionally harming Core's users. The latter would be highly inappropriate.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787088844,787088844,
JeremyRubin,2021-02-27 16:06:37,"I think that it is a really bad idea to release LOT=false without the ability to trivially set LOT=true. Should LOT=true become widespread, doing things with less time creates risk of a 'forced error' on activation. It's entirely possible that miners will have proprietary mining software that they would need to rebase onto a recompiled client, and that might be a bottleneck. I suppose that LOT=fal",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787095515,787095515,
luke-jr,2021-02-27 16:44:56,"Also, as a reminder, this PR is not about setting activation parameters, only merging BIP 8 code.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787100483,787100483,
michaelfolkson,2021-02-27 16:48:15,"> Also, as a reminder, this PR is not about setting activation parameters, only merging BIP 8 code.\n\nThat's true but we do have Matt and Sjors both commenting that this PR should perhaps only include lot=false code hence the reason for my comment. I wouldn't seek to add noise for no reason.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787100947,787100947,
luke-jr,2021-02-27 17:04:24,"There is no reason to include LOT=False code and not LOT=True code also. In any case, this PR has sufficient ACKs and is ready to merge today.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787103150,787103150,
TheBlueMatt,2021-02-27 19:54:52,"Let's keep this discussion to code-level - broad debates about what Core should or shouldn't include and philosophical debates probably belong on the ML. My comment was that it doesn't make sense to include highly feature-incomplete code for LOT=true (which is the case in this PR). It may make sense to just merge a LOT=false PR, or to delay this until there is code to properly handle the network s",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787126580,787126580,
JeremyRubin,2021-02-27 22:27:40,"@luke-jr / @TheBlueMatt  do you have any insight on how urgent improving peer selection is in any case? Are the usual mechanisms for dealing with nodes which mine an invalid tip (from the pov of a lot=true) or nodes which send stale headers (pov of lot=false) insufficient?\n\nIt's not immediately obvious to me that the network as-is wouldn't be tolerably resilient to this sort of issue.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787197367,787197367,
luke-jr,2021-02-28 01:17:35,"LOT=True does not differ from any other softfork in respect to handling network divergence. Perhaps the latter can be improved, but it is out of scope to this PR.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787215200,787215200,
benthecarman,2021-02-28 01:31:14,"> LOT=True does not differ from any other softfork in respect to handling network divergence. Perhaps the latter can be improved, but it is out of scope to this PR.\n\nAgree with luke-jr here, if you are running a lot=true client then you deem the old chain invalid",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787216598,787216598,
TheBlueMatt,2021-02-28 02:44:03,"An option for LOT=true and an expectation that nodes on the network will be running different consensus rules implies something very, very different from any previous fork, even if the code, naively, does not. Indeed, during the Segwit2x/etc debacle some emergency changes were rushed in to hopefully make the P2P network slightly more robust against such things, but they're fare from an ideal scena",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787223126,787223126,
luke-jr,2021-02-28 03:02:37,"This PR does not add such a (user-accessible) option, nor does it set any expectation for divergent rules.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787224659,787224659,
TheBlueMatt,2021-02-28 03:03:25,I wasn't leaning on the PR's current code for my expectation of divergent rules :).,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787224725,787224725,
michaelfolkson,2021-03-01 10:07:40,"ACK 977280c5f04c70c2610ef5fcfde57e5256171f65\n\nI'm getting a little concerned that some individuals will continuously shift the goalposts in search of a philosopher's stone for an activation mechanism that has 100 percent consensus or a philosopher's stone to magic away the (unlikely but still possible) risks of a chain split after a year of miners failing to activate. \n\nAnyone who doesn't ",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-787826064,787826064,
TheBlueMatt,2021-03-01 15:09:17,"> This question needs to be answered with more specifics than just ""they should be improved significantly.""\n\nI did, read above :) More broadly, it seems the discussion on the mailing list and elsewhere is moving beyond BIP 8 as the only option, so probably good to put this on ice until there's more consensus around what is worth reviewing/merging so there isn't unused consensus code in Bitcoin",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-788021534,788021534,
michaelfolkson,2021-03-01 16:04:05,"> More broadly, it seems the discussion on the mailing list and elsewhere is moving beyond BIP 8\n\nI guess if you don't engage in the discussion for 6 months as the alternatives are outlined, discussed and narrowed down it might seem that way. From what I see a UASF LOT=true release effort is beginning. But you are free to start the 6 month long activation discussion from scratch in search for ",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-788065990,788065990,
Sjors,2021-03-02 10:31:16,"I'm not opposed to `LOT=True` _code_, but I'm (currently) not interested in developing, reviewing or testing it. I might be, if there was a PR specifically dedicated to adding such functionality. But this PR holds back `LOT=False` support, by making it a package deal.\n\nI'm also opposed to merging this without said review. The ACKs so far are not from people with sufficient expertise to judge s",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-788804392,788804392,
michaelfolkson,2021-03-02 10:45:27,"> I'm also opposed to merging this without said review. The ACKs so far are not from people with sufficient expertise to judge soft-fork activation code (I don't consider myself qualified either).\n\nTotally agree. This (or an alternative PR) desperately needs long term contributors reviewing the code. I suspect the reason why they are delaying reviewing the code (or opening an alternative PR) i",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-788813176,788813176,
Sjors,2021-03-02 13:39:58,"Some additional notes:\n@TheBlueMatt [wrote](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018450.html) on the mailinglist:\n\n> Bitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with uasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to enable s",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-788916253,788916253,
TheBlueMatt,2021-03-02 17:55:19,"> I guess if you don't engage in the discussion for 6 months as the alternatives are outlined, discussed and narrowed down it might seem that way.\n\nLets keep the debates to the ML. I'm not gonna spam this PR with responses to personal attacks.\n\n> This scenario can be tested by stopping the -vbparams=testdummy:@{start}:@{stop}:1 node in feature_bip8.py and then restarting it with -vbparams=",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-789095265,789095265,
luke-jr,2021-03-02 17:58:06,Fixed the bugs @ajtowns and @Sjors  found,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-789097034,789097034,
sdaftuar,2021-03-02 21:32:31,"I'm a Concept NACK on BIP 8 as drafted.  I think the MUST_SIGNAL period is needlessly risky for maintaining consensus (as I wrote back in 2017 on the mailing list, responding to a similar proposal at the time); if that part of BIP 8 were dropped I'd be fine with an implementation of the rest, though I haven't reviewed the code here.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-789231494,789231494,
michaelfolkson,2021-03-02 21:44:23,"@sdaftuar: I'm sure you already know this but just to ensure clarity. BIP 8 (LOT = false) does not have the MUST_SIGNAL period and hence an implementation of BIP 8 (LOT = false) does not have the MUST_SIGNAL period.\n\nIf you want MUST_SIGNAL or the LOT parameter stripped from the actual BIP you'll need to open a BIP PR. I don't personally see what that would achieve unless you think LOT=true an",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-789241719,789241719,
Sjors,2021-03-03 13:02:00,"@TheBlueMatt wrote:\n> there's not a good way to test the P2P aspects of a network split\n\nWe can now test using binaries of earlier releases, so this might be more feasible. But I'd rather see that in a PR that's specifically focussed on LOT. (my other objections aside)",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-789698354,789698354,
michaelfolkson,2021-03-03 13:03:04,"It appears this PR doesn't have much (any?) chance of being merged in its current form (ie whilst it has any LOT=true code). Hence I (and others I have discussed it with) think it is best if this PR is closed.\n\nAn approach like Sjors' recent PR https://github.com/bitcoin/bitcoin/pull/21334 stripping out particular commits seem the best way forward.\n\nI'll reiterate my view (and I know Luke ",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-789698978,789698978,
ProofOfKeags,2021-03-05 22:58:45,"@michaelfolkson Are you saying that the LOT=true code can't even exist, or just that it can't be enabled for any SF proposals (specifically Taproot)?\n\nSeems like a bizarre requirement considering it is actually in the BIP, but perhaps theres a reason.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-791773311,791773311,
michaelfolkson,2021-03-06 13:21:21,@ProofOfKeags: I think it is just semantics. It appears some people don't want LOT=true code in the Core codebase. Obviously it would be dead code if Core implemented the equivalent of LOT=false so it really doesn't matter. The Core codebase and the BIP (BIP 8) are separate objects. I can't see LOT=true code being merged into Core but I also can't see LOT or MUST_SIGNAL getting taken out of the BI,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-791938020,791938020,
achow101,2021-03-06 21:23:23,"If 31eac50c721dd3b0bd2347e76196bf16913e9be9 (from #21055) is backported to 0.21, then this PR rebased on master will also backport to 0.21 cleanly.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-792057139,792057139,
jtimon,2021-03-08 15:47:48,"If I'm understanding the code correctly at a glance, this also gets rid of the LOT=false option and instead provides an option to never activate the change regardless of signaling, which in my opinion makes more sense as it gives users a more meaningful option than ""do you want to allow miners to have veto powers over the change and potentially fork off from other users who like you also want this",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-792844778,792844778,
luke-jr,2021-03-14 04:26:33,"This is being split up and merged in pieces (some modified), so closing it.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-798830821,798830821,
luke-jr,2021-04-07 22:13:57,Rebased (CI failure appears unrelated),https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-815297332,815297332,
DrahtBot,2021-04-15 04:00:53,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-820070732,820070732,
achow101,2021-04-15 05:38:05,Note that we may still want to use this in the future. Merging #21377 now does not preclude the use of BIP 8 in a future deployment.,https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-820128624,820128624,
MarcoFalke,2021-04-15 06:03:47,"Ok, let me know when to reopen, but I don't think this needs to stay in ""High-priority for review""",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-820139865,820139865,
Sjors,2021-04-15 07:12:04,"Agreed, it's probably a good idea to keep working on BIP 8 between now and the next soft fork attempt (especially the LOT=false part). That seems better than to develop these mechanisms only just in time.\n\nBut in order to keep backporting easy, I suggest we don't merge a BIP 8 implementation until Speedy Trial expires or locks in.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-820177032,820177032,
luke-jr,2021-04-15 15:22:40,"Thinking about it, it doesn't make sense to continue this PR here. This has LOT=True support and such, and what is needed right now is simply heights.\n\nWhen/if the folks impeding progress of BIP 8 change their mind, I can do that. But not sure there's any point rebasing until then.",https://github.com/bitcoin/bitcoin/pull/19573#issuecomment-820515605,820515605,
ajtowns,2020-10-19 03:44:17,Maybe `DeploymentParams` ? Might be good to do as many of the renames as possible via scripted-diff.,https://github.com/bitcoin/bitcoin/pull/19573#discussion_r507418503,507418503,src/consensus/params.h
ajtowns,2020-10-19 04:15:43,Maybe both startheight and timeoutheight should be set to ALWAYS_ACTIVE in the same way they are for NEVER_ACTIVE.,https://github.com/bitcoin/bitcoin/pull/19573#discussion_r507435498,507435498,src/consensus/params.h
ajtowns,2020-10-19 09:35:04,This is no longer `mainnet` params...,https://github.com/bitcoin/bitcoin/pull/19573#discussion_r507607219,507607219,src/test/versionbits_tests.cpp
ajtowns,2020-10-21 07:09:33,"Not sure why it's a new error, but clang insists that these need to be initialised, and is causing travis to fail.",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r509038469,509038469,src/chainparams.cpp
ajtowns,2020-10-21 07:10:15,Need to also special case `NEVER_ACTIVE` here.,https://github.com/bitcoin/bitcoin/pull/19573#discussion_r509038840,509038840,src/versionbits.cpp
ajtowns,2020-10-21 12:07:28,"`startheight = 144` would be more accurate, it can't actually start at height 0.\n\n(This caused a weird bug in `validation_blocks_tests` when I tried implementing bitcoin/bips#1023 and it was able to go to STARTED in the first block; didn't track down exactly what the issue was though)",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r509222807,509222807,src/chainparams.cpp
ajtowns,2021-02-09 04:05:52,"Test should be `thresholdState != ThresholdState::LOCKED_IN` -- now that https://github.com/bitcoin/bips/pull/1021/ is merged, threshold is still relevant during MUST_SIGNAL phase.",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r572579383,572579383,src/rpc/blockchain.cpp
benthecarman,2021-02-10 00:47:02,shouldn't this be v0.21.1?,https://github.com/bitcoin/bitcoin/pull/19573#discussion_r573361013,573361013,doc/bips.md
benthecarman,2021-02-10 01:04:01,this log should probably include the `timeoutheight`,https://github.com/bitcoin/bitcoin/pull/19573#discussion_r573367289,573367289,src/chainparams.cpp
benthecarman,2021-02-10 01:06:10,">  Should be a retarget block\n\nIn BIP 8, it defines these as a *must*\n\n\n> startheight and timeoutheight must be an exact multiple of 2016 (ie, at a retarget boundary), and timeoutheight must be at least 4096 blocks (2 retarget intervals) after startheight.",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r573368033,573368033,src/consensus/params.h
benthecarman,2021-02-10 01:08:32,"> sed\n\nset",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r573368887,573368887,src/rpc/mining.cpp
benthecarman,2021-02-10 01:10:04,Couldn't this use a `switch` statement?,https://github.com/bitcoin/bitcoin/pull/19573#discussion_r573369426,573369426,src/test/versionbits_tests.cpp
luke-jr,2021-02-19 16:54:26,"You mean `lockinontimeout`, I assume?",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r579329781,579329781,src/chainparams.cpp
luke-jr,2021-02-19 17:01:32,"This PR is intended to merge cleanly to 0.21, which only requires C++11. (`switch` inside `constexpr` functions requires C++14)",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r579334677,579334677,src/test/versionbits_tests.cpp
benthecarman,2021-02-19 17:24:26,"Yes, sorry",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r579349520,579349520,src/chainparams.cpp
prayank23,2021-02-23 19:37:58,"nit: _""the minimum height of a block at which the bit gains its meaning""_ can be changed to one of the below\n\n_""the minimum height of a block at which the 'bit' gains its meaning""_\n_""the minimum height of a block at which the 'bit' becomes relevant""_\n_""the minimum height of a block at which the 'bit' used for signaling gains its meaning""_",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r581333835,581333835,src/rpc/blockchain.cpp
ajtowns,2021-03-01 14:11:55,"I don't think the `++stats.count` there is correct -- if the final block in the MUST_SIGNAL period does not signal, and the total number of blocks signalling in the period is `threshold-1`, this will cause lockinontimeout=true nodes to transition from MUST_SIGNAL to LOCKED_IN (and later to ACTIVE) while lockinontimeout=false nodes transition from STARTED to FAILED.\n\nSetting `N=107` instead of ",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r584741118,584741118,src/validation.cpp
Sjors,2021-03-02 11:30:07,"bae9a452191a7a83478f7d508a54f4a04d385505  and bd715ff894344408df2345d9bd75a08bd7c9c6f6 : why the `+ 1`? The log will show `0` for the genesis block, but 2 the block at height 1.",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r585486781,585486781,src/test/versionbits_tests.cpp
ajtowns,2021-03-03 11:05:45,"`height` here is the height of the next block -- if `vpblock` is empty, the next (ie first) block should be the genesis block with `nHeight == 0`. Note that when populating `vpblock` in `VersionBitsTester::Mine()` we set `nHeight=vblock.size()` so the first entry will have `nHeight == 0` and act as the genesis block; at which point `1+vpblock.back().nHeight` will evaluate to `1+0` giving the heigh",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r586323690,586323690,src/test/versionbits_tests.cpp
ajtowns,2021-03-03 11:06:59,"Note that `GetStateFor(block)` is telling you what the state should be for the *next* block to be mined, not the last block that was mined.",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r586324465,586324465,src/test/versionbits_tests.cpp
Sjors,2021-03-03 13:06:46,"I see, I'll add a comment to that effect in my PR.",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r586400702,586400702,src/test/versionbits_tests.cpp
ajtowns,2021-03-07 09:45:21,"Sorry, I think this change is wrong and it should be the other way around -- `AbstractThresholdConditionChecker::GetStateStatisticsFor` should be expecting `pindexPrev` not `pindex`. I believe that gives the right behaviour for MUST_SIGNAL. I'd suggest just dropping this commit.",https://github.com/bitcoin/bitcoin/pull/19573#discussion_r589002908,589002908,src/versionbits.cpp
