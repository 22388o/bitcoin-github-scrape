[
  {
    "sha": "0a072164b1bc53b1918a8e816acb9f5652c129a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTA3MjE2NGIxYmM1M2IxOTE4YThlODE2YWNiOWY1NjUyYzEyOWE4",
    "commit": {
      "author": {
        "name": "reorder",
        "email": "reorder@users.noreply.github.com",
        "date": "2014-12-12T20:48:45Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-01-03T21:01:23Z"
      },
      "message": "Port of addrindex patch https://github.com/jmcorgan/bitcoin/commit/4790f3c823a33fae44b82ef7962372e38b1b0131",
      "tree": {
        "sha": "5bfe7297f8eabbbcb4760b69ead6e39ad55f4544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bfe7297f8eabbbcb4760b69ead6e39ad55f4544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a072164b1bc53b1918a8e816acb9f5652c129a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a072164b1bc53b1918a8e816acb9f5652c129a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a072164b1bc53b1918a8e816acb9f5652c129a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a072164b1bc53b1918a8e816acb9f5652c129a8/comments",
    "author": {
      "login": "reorder",
      "id": 6259730,
      "node_id": "MDQ6VXNlcjYyNTk3MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6259730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reorder",
      "html_url": "https://github.com/reorder",
      "followers_url": "https://api.github.com/users/reorder/followers",
      "following_url": "https://api.github.com/users/reorder/following{/other_user}",
      "gists_url": "https://api.github.com/users/reorder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reorder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reorder/subscriptions",
      "organizations_url": "https://api.github.com/users/reorder/orgs",
      "repos_url": "https://api.github.com/users/reorder/repos",
      "events_url": "https://api.github.com/users/reorder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reorder/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94b362dbd64ca39c642400cbae45743ef597a9b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94b362dbd64ca39c642400cbae45743ef597a9b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94b362dbd64ca39c642400cbae45743ef597a9b7"
      }
    ],
    "stats": {
      "total": 273,
      "additions": 265,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3867d5027e8cecdc5a2934fe3299e21e5916681d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -965,7 +965,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     else if (nTotalCache > (nMaxDbCache << 20))\n         nTotalCache = (nMaxDbCache << 20); // total cache cannot be greater than nMaxDbCache\n     size_t nBlockTreeDBCache = nTotalCache / 8;\n-    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n+    if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false) && !GetBoolArg(\"-addrindex\", false))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n     size_t nCoinDBCache = nTotalCache / 2; // use half of the remaining cache for coindb cache\n@@ -1016,6 +1016,12 @@ bool AppInit2(boost::thread_group& threadGroup)\n                     break;\n                 }\n \n+                // Check for changed -addrindex state\n+                if (fAddrIndex != GetBoolArg(\"-addrindex\", false)) {\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to change -addrindex\");\n+                    break;\n+                }\n+\n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                 if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n                               GetArg(\"-checkblocks\", 288))) {"
      },
      {
        "sha": "2fe4845bb531260d79fa221a0cb57dfa82b5c763",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 6,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"base58.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n@@ -50,6 +51,7 @@ int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n bool fTxIndex = false;\n+bool fAddrIndex = false;\n bool fIsBareMultisigStd = true;\n unsigned int nCoinCacheSize = 5000;\n \n@@ -1081,6 +1083,43 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n+bool ReadTransaction(CTransaction& tx, const CDiskTxPos &pos, uint256 &hashBlock) {\n+    CAutoFile file(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), pos.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (std::exception &e) {\n+        return error(\"%s() : deserialize or I/O error\", __PRETTY_FUNCTION__);\n+    }\n+    hashBlock = header.GetHash();\n+    return true;\n+}\n+\n+bool FindTransactionsByDestination(const CTxDestination &dest, std::set<CExtDiskTxPos> &setpos) {\n+    uint160 addrid = 0;\n+    const CKeyID *pkeyid = boost::get<CKeyID>(&dest);\n+    if (pkeyid)\n+        addrid = static_cast<uint160>(*pkeyid);\n+    if (!addrid) {\n+        const CScriptID *pscriptid = boost::get<CScriptID>(&dest);\n+        if (pscriptid)\n+            addrid = static_cast<uint160>(*pscriptid);\n+    }\n+    if (!addrid)\n+        return false;\n+\n+    LOCK(cs_main);\n+    if (!fAddrIndex)\n+        return false;\n+    std::vector<CExtDiskTxPos> vPos;\n+    if (!pblocktree->ReadAddrIndex(addrid, vPos))\n+        return false;\n+    setpos.insert(vPos.begin(), vPos.end());\n+    return true;\n+}\n+\n /** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, bool fAllowSlow)\n {\n@@ -1097,6 +1136,8 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n         if (fTxIndex) {\n             CDiskTxPos postx;\n             if (pblocktree->ReadTxIndex(hash, postx)) {\n+                if (!ReadTransaction(txOut, postx, hashBlock))\n+                    return false;\n                 CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n                 if (file.IsNull())\n                     return error(\"%s: OpenBlockFile failed\", __func__);\n@@ -1623,6 +1664,33 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n+// Index either: a) every data push >=8 bytes,  b) if no such pushes, the entire script\n+void static BuildAddrIndex(const CScript &script, const CExtDiskTxPos &pos, std::vector<std::pair<uint160, CExtDiskTxPos> > &out)\n+{\n+    CScript::const_iterator pc = script.begin();\n+    CScript::const_iterator pend = script.end();\n+    std::vector<unsigned char> data;\n+    opcodetype opcode;\n+    bool fHaveData = false;\n+    while (pc < pend) {\n+        script.GetOp(pc, opcode, data);\n+        if (0 <= opcode && opcode <= OP_PUSHDATA4 && data.size() >= 8) { // data element\n+            uint160 addrid = 0;\n+            if (data.size() <= 20) {\n+                memcpy(&addrid, &data[0], data.size());\n+            } else {\n+                addrid = Hash160(data);\n+            }\n+            out.push_back(std::make_pair(addrid, pos));\n+            fHaveData = true;\n+        }\n+    }\n+    if (!fHaveData) {\n+        uint160 addrid = Hash160(script);\n+        out.push_back(std::make_pair(addrid, pos));\n+    }\n+}\n+\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n@@ -1681,9 +1749,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(block.vtx.size());\n+    CExtDiskTxPos pos(CDiskTxPos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size())), pindex->nHeight);\n+    std::vector<std::pair<uint256, CDiskTxPos> > vPosTxid;\n+    std::vector<std::pair<uint160, CExtDiskTxPos> > vPosAddrid;\n+    if (fTxIndex)\n+        vPosTxid.reserve(block.vtx.size());\n+    if (fAddrIndex)\n+        vPosAddrid.reserve(4*block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n@@ -1720,13 +1792,26 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             control.Add(vChecks);\n         }\n \n+        if (fTxIndex)\n+            vPosTxid.push_back(std::make_pair(tx.GetHash(), pos));\n+        if (fAddrIndex) {\n+            if (!tx.IsCoinBase()) {\n+                BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+                    CCoins coins;\n+                    view.GetCoins(txin.prevout.hash, coins);\n+                    BuildAddrIndex(coins.vout[txin.prevout.n].scriptPubKey, pos, vPosAddrid);\n+                }\n+            }\n+            BOOST_FOREACH(const CTxOut &txout, tx.vout)\n+            BuildAddrIndex(txout.scriptPubKey, pos, vPosAddrid);\n+        }\n+\n         CTxUndo undoDummy;\n         if (i > 0) {\n             blockundo.vtxundo.push_back(CTxUndo());\n         }\n         UpdateCoins(tx, state, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n \n-        vPos.push_back(std::make_pair(tx.GetHash(), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime1 = GetTimeMicros(); nTimeConnect += nTime1 - nTimeStart;\n@@ -1766,9 +1851,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     }\n \n     if (fTxIndex)\n-        if (!pblocktree->WriteTxIndex(vPos))\n+        if (!pblocktree->WriteTxIndex(vPosTxid))\n             return state.Abort(\"Failed to write transaction index\");\n-\n+    if (fAddrIndex)\n+        if (!pblocktree->AddAddrIndex(vPosAddrid))\n+            return state.Abort(_(\"Failed to write address index\"));\n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n \n@@ -2908,6 +2995,9 @@ bool static LoadBlockIndexDB()\n     pblocktree->ReadFlag(\"txindex\", fTxIndex);\n     LogPrintf(\"LoadBlockIndexDB(): transaction index %s\\n\", fTxIndex ? \"enabled\" : \"disabled\");\n \n+    pblocktree->ReadFlag(\"addrindex\", fAddrIndex);\n+    LogPrintf(\"LoadBlockIndexDB(): address index %s\\n\", fAddrIndex ? \"enabled\" : \"disabled\");\n+\n     // Load pointer to end of best chain\n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     if (it == mapBlockIndex.end())\n@@ -3038,6 +3128,8 @@ bool InitBlockIndex() {\n     // Use the provided setting for -txindex in the new database\n     fTxIndex = GetBoolArg(\"-txindex\", false);\n     pblocktree->WriteFlag(\"txindex\", fTxIndex);\n+    fAddrIndex = GetBoolArg(\"-addrindex\", false);\n+    pblocktree->WriteFlag(\"addrindex\", fAddrIndex);\n     LogPrintf(\"Initializing databases...\\n\");\n \n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)"
      },
      {
        "sha": "85783907eec8c94586cdf9837bbd036cc8179f9d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 47,
        "deletions": 1,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -125,6 +125,7 @@ extern bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n+extern bool fAddrIndex;\n extern bool fIsBareMultisigStd;\n extern unsigned int nCoinCacheSize;\n extern CFeeRate minRelayTxFee;\n@@ -240,8 +241,52 @@ struct CDiskTxPos : public CDiskBlockPos\n         CDiskBlockPos::SetNull();\n         nTxOffset = 0;\n     }\n+\n+    friend bool operator<(const CDiskTxPos &a, const CDiskTxPos &b) {\n+        return  (a.nFile < b.nFile || (\n+                (a.nFile == b.nFile) && (a.nPos < b.nPos || (\n+                        (a.nPos == b.nPos) && (a.nTxOffset < b.nTxOffset)))));\n+    }\n };\n \n+struct CExtDiskTxPos : public CDiskTxPos\n+{\n+    unsigned int nHeight;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(*(CDiskTxPos*)this);\n+        READWRITE(VARINT(nHeight));\n+    }\n+\n+    CExtDiskTxPos(const CDiskTxPos &pos, int nHeightIn) : CDiskTxPos(pos), nHeight(nHeightIn) {\n+    }\n+\n+    CExtDiskTxPos() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        CDiskTxPos::SetNull();\n+        nHeight = 0;\n+    }\n+\n+    friend bool operator==(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        return (a.nHeight == b.nHeight && a.nFile == b.nFile && a.nPos == b.nPos && a.nTxOffset == b.nTxOffset);\n+    }\n+\n+    friend bool operator!=(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        return !(a == b);\n+    }\n+\n+    friend bool operator<(const CExtDiskTxPos &a, const CExtDiskTxPos &b) {\n+        if (a.nHeight < b.nHeight) return true;\n+        if (a.nHeight > b.nHeight) return false;\n+        return ((const CDiskTxPos)a < (const CDiskTxPos)b);\n+    }\n+};\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n@@ -359,7 +404,8 @@ class CScriptCheck\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n-\n+bool ReadTransaction(CTransaction& tx, const CDiskTxPos &pos, uint256 &hashBlock);\n+bool FindTransactionsByDestination(const CTxDestination &dest, std::set<CExtDiskTxPos> &setpos);\n \n /** Functions for validating blocks and updating the block tree */\n "
      },
      {
        "sha": "5faa227e21605db087b0a8f1380452b74856ae77",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -73,6 +73,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createrawtransaction\", 1 },\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n+    { \"searchrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },\n     { \"gettxout\", 1 },\n     { \"gettxout\", 2 },"
      },
      {
        "sha": "9406c313013d3c93576ac2c216bba802d7a9dc5d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -105,6 +105,65 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)\n     }\n }\n \n+Value searchrawtransactions(const Array &params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\"searchrawtransactions <address> [verbose=1] [skip=0] [count=100]\\n\");\n+\n+    if (!fAddrIndex)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Address index not enabled\");\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    CTxDestination dest = address.Get();\n+\n+    std::set<CExtDiskTxPos> setpos;\n+    if (!FindTransactionsByDestination(dest, setpos))\n+        throw JSONRPCError(RPC_DATABASE_ERROR, \"Cannot search for address\");\n+\n+    int nSkip = 0;\n+    int nCount = 100;\n+    bool fVerbose = true;\n+    if (params.size() > 1)\n+        fVerbose = (params[1].get_int() != 0);\n+    if (params.size() > 2)\n+        nSkip = params[2].get_int();\n+    if (params.size() > 3)\n+        nCount = params[3].get_int();\n+\n+    if (nSkip < 0)\n+        nSkip += setpos.size();\n+    if (nSkip < 0)\n+        nSkip = 0;\n+    if (nCount < 0)\n+        nCount = 0;\n+\n+    std::set<CExtDiskTxPos>::const_iterator it = setpos.begin();\n+    while (it != setpos.end() && nSkip--) it++;\n+\n+    Array result;\n+    while (it != setpos.end() && nCount--) {\n+        CTransaction tx;\n+        uint256 hashBlock;\n+        if (!ReadTransaction(tx, *it, hashBlock))\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Cannot read transaction from disk\");\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << tx;\n+        string strHex = HexStr(ssTx.begin(), ssTx.end());\n+        if (fVerbose) {\n+            Object object;\n+            TxToJSON(tx, hashBlock, object);\n+            object.push_back(Pair(\"hex\", strHex));\n+            result.push_back(object);\n+        } else {\n+            result.push_back(strHex);\n+        }\n+        it++;\n+    }\n+    return result;\n+}\n+\n Value getrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)"
      },
      {
        "sha": "f811fa4cd930d3758d5c4bb3ef13370d545534c0",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -291,6 +291,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,      false,      false },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,      false,      false },\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true,      false,      false },\n+    { \"rawtransactions\",    \"searchrawtransactions\",  &searchrawtransactions,  true,      false,      false },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false,     false,      false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false,     false,      false }, /* uses wallet if enabled */\n "
      },
      {
        "sha": "e9790b4bb600fe179c1cd3faa61f58de247f5f47",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -201,6 +201,7 @@ extern json_spirit::Value getnetworkinfo(const json_spirit::Array& params, bool\n extern json_spirit::Value setmocktime(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n+extern json_spirit::Value searchrawtransactions(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value lockunspent(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listlockunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "a47c40ec3bef1dd2f22fffbd2518edd5edd600ae",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -64,6 +64,10 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n }\n \n CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+    if (!Read('S', salt)) {\n+        salt = GetRandHash();\n+        Write('S', salt);\n+    }\n }\n \n bool CBlockTreeDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)\n@@ -163,6 +167,50 @@ bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos>\n     return WriteBatch(batch);\n }\n \n+bool CBlockTreeDB::ReadAddrIndex(uint160 addrid, std::vector<CExtDiskTxPos> &list) {\n+    boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n+    uint64_t lookupid;\n+    {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << salt;\n+        ss << addrid;\n+        lookupid = ss.GetHash().GetLow64();\n+    }\n+    CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n+    ssKeySet << make_pair('a', lookupid);\n+    pcursor->Seek(ssKeySet.str());\n+\n+    while (pcursor->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CExtDiskTxPos> key;\n+        leveldb::Slice slKey = pcursor->key();\n+        try {\n+            CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n+            ssKey >> key;\n+        } catch(std::exception &e) {\n+            break;\n+        }\n+        if (key.first.first == 'a' && key.first.second == lookupid) {\n+            list.push_back(key.second);\n+        } else {\n+            break;\n+        }\n+        pcursor->Next();\n+    }\n+    return true;\n+}\n+\n+bool CBlockTreeDB::AddAddrIndex(const std::vector<std::pair<uint160, CExtDiskTxPos> > &list) {\n+    unsigned char foo[0];\n+    CLevelDBBatch batch;\n+    for (std::vector<std::pair<uint160, CExtDiskTxPos> >::const_iterator it=list.begin(); it!=list.end(); it++) {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << salt;\n+        ss << it->first;\n+        batch.Write(make_pair(make_pair('a', ss.GetHash().GetLow64()), it->second), FLATDATA(foo));\n+    }\n+    return WriteBatch(batch, true);\n+}\n+\n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n     return Write(std::make_pair('F', name), fValue ? '1' : '0');\n }"
      },
      {
        "sha": "71196a8e24ae8f8d3accecd2e0515904c0a1b597",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a072164b1bc53b1918a8e816acb9f5652c129a8/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=0a072164b1bc53b1918a8e816acb9f5652c129a8",
        "patch": "@@ -45,6 +45,7 @@ class CBlockTreeDB : public CLevelDBWrapper\n public:\n     CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n private:\n+    uint256 salt;\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);\n public:\n@@ -57,6 +58,8 @@ class CBlockTreeDB : public CLevelDBWrapper\n     bool ReadReindexing(bool &fReindex);\n     bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n+    bool ReadAddrIndex(uint160 addrid, std::vector<CExtDiskTxPos> &list);\n+    bool AddAddrIndex(const std::vector<std::pair<uint160, CExtDiskTxPos> > &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts();"
      }
    ]
  }
]