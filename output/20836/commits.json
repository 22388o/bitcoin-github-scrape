[
  {
    "sha": "6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDBiYzVlNDEwYTZlYTBiOTdhYWQ0NmY3ZDhiYThjODdhMmFmYjFi",
    "commit": {
      "author": {
        "name": "Peter Yordanov",
        "email": "ppyordanov@yahoo.com",
        "date": "2021-01-03T17:09:16Z"
      },
      "committer": {
        "name": "Peter Yordanov",
        "email": "ppyordanov@yahoo.com",
        "date": "2021-01-03T17:09:16Z"
      },
      "message": "doc: Addressing review comments, excluded:\n\ngenerated files\nhistorical release notes\nsubtrees\ntranslations.",
      "tree": {
        "sha": "685cf7fe31dc520790444e136812775af03da5b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/685cf7fe31dc520790444e136812775af03da5b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/comments",
    "author": {
      "login": "ppyordanov",
      "id": 5113984,
      "node_id": "MDQ6VXNlcjUxMTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5113984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppyordanov",
      "html_url": "https://github.com/ppyordanov",
      "followers_url": "https://api.github.com/users/ppyordanov/followers",
      "following_url": "https://api.github.com/users/ppyordanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppyordanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppyordanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppyordanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ppyordanov/orgs",
      "repos_url": "https://api.github.com/users/ppyordanov/repos",
      "events_url": "https://api.github.com/users/ppyordanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppyordanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ppyordanov",
      "id": 5113984,
      "node_id": "MDQ6VXNlcjUxMTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5113984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppyordanov",
      "html_url": "https://github.com/ppyordanov",
      "followers_url": "https://api.github.com/users/ppyordanov/followers",
      "following_url": "https://api.github.com/users/ppyordanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppyordanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppyordanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppyordanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ppyordanov/orgs",
      "repos_url": "https://api.github.com/users/ppyordanov/repos",
      "events_url": "https://api.github.com/users/ppyordanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppyordanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c3765ad7cee5b4344a28c06fdb8cc56c465d277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c3765ad7cee5b4344a28c06fdb8cc56c465d277",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3765ad7cee5b4344a28c06fdb8cc56c465d277"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "350ac638554e5e5930792f35f2f3c477132fd4a3",
        "filename": ".style.yapf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/.style.yapf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/.style.yapf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.style.yapf?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -107,7 +107,7 @@ each_dict_entry_on_separate_line=True\n i18n_comment=\n \n # The i18n function call names. The presence of this function stops\n-# reformattting on that line, because the string it has cannot be moved\n+# reformatting on that line, because the string it has cannot be moved\n # away from the i18n comment.\n i18n_function_call=\n "
      },
      {
        "sha": "ae42b041d51f5ad8f3a4ccf08900a653463405d9",
        "filename": "doc/psbt.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/doc/psbt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/doc/psbt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/psbt.md?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -1,4 +1,4 @@\n-# PSBT Howto for Bitcoin Core\n+# PSBT How-to for Bitcoin Core\n \n Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n Transactions (PSBTs, as specified in"
      },
      {
        "sha": "8ac0f32d4015d32c5db45f9fa7d91a4f303e47fe",
        "filename": "src/bench/nanobench.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/bench/nanobench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/bench/nanobench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/nanobench.h?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -170,7 +170,7 @@ class BigO;\n  *    Apart from these tags, it is also possible to use some mathematical operations on the measurement data. The operations\n  *    are of the form `{{command(name)}}`.  Currently `name` can be one of `elapsed`, `iterations`. If performance counters\n  *    are available (currently only on current Linux systems), you also have `pagefaults`, `cpucycles`,\n- *    `contextswitches`, `instructions`, `branchinstructions`, and `branchmisses`. All the measuers (except `iterations`) are\n+ *    `contextswitches`, `instructions`, `branchinstructions`, and `branchmisses`. All the measures (except `iterations`) are\n  *    provided for a single iteration (so `elapsed` is the time a single iteration took). The following tags are available:\n  *\n  *    * `{{median(<name>>)}}` Calculate median of a measurement data set, e.g. `{{median(elapsed)}}`."
      },
      {
        "sha": "5469a760eec250388c991744a10ef8e21540c7e5",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -30,7 +30,7 @@ bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n /**\n  * Parse a hex string into 256 bits\n  * @param[in] strHex a hex-formatted, 64-character string\n- * @param[out] result the result of the parasing\n+ * @param[out] result the result of the parsing\n  * @returns true if successful, false if not\n  *\n  * @see ParseHashV for an RPC-oriented version of this"
      },
      {
        "sha": "b5fc93886df774da20e156e0bdd98e6046243227",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -128,7 +128,7 @@ static bool DecodeTx(CMutableTransaction& tx, const std::vector<unsigned char>&\n {\n     // General strategy:\n     // - Decode both with extended serialization (which interprets the 0x0001 tag as a marker for\n-    //   the presense of witnesses) and with legacy serialization (which interprets the tag as a\n+    //   the presence of witnesses) and with legacy serialization (which interprets the tag as a\n     //   0-input 1-output incomplete transaction).\n     //   - Restricted by try_no_witness (which disables legacy if false) and try_witness (which\n     //     disables extended if false)."
      },
      {
        "sha": "288d44696d1f70517e0a48f524dfab430c0a89ae",
        "filename": "src/crc32c/.ycm_extra_conf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/crc32c/.ycm_extra_conf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/crc32c/.ycm_extra_conf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crc32c/.ycm_extra_conf.py?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -3,7 +3,7 @@\n # found in the LICENSE file.\n \"\"\"YouCompleteMe configuration that interprets a .clang_complete file.\n \n-This module implementes the YouCompleteMe configuration API documented at:\n+This module implements the YouCompleteMe configuration API documented at:\n https://github.com/Valloric/ycmd#ycm_extra_confpy-specification\n \n The implementation loads and processes a .clang_complete file, documented at:"
      },
      {
        "sha": "817bb7ba111a2cc965bcaa6d783653c7b120932a",
        "filename": "src/leveldb/db/snapshot.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/leveldb/db/snapshot.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/leveldb/db/snapshot.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/snapshot.h?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -25,7 +25,7 @@ class SnapshotImpl : public Snapshot {\n   friend class SnapshotList;\n \n   // SnapshotImpl is kept in a doubly-linked circular list. The SnapshotList\n-  // implementation operates on the next/previous fields direcly.\n+  // implementation operates on the next/previous fields directly.\n   SnapshotImpl* prev_;\n   SnapshotImpl* next_;\n "
      },
      {
        "sha": "3ffe1465da5982449b04402fa02fc59720e6f54d",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -59,7 +59,7 @@ uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::ve\n     //if we do not have this assert, we can hit a memory access violation when indexing into vTxid\n     assert(vTxid.size() != 0);\n     if (height == 0) {\n-        // hash at height 0 is the txids themself\n+        // hash at height 0 is the txids themselves\n         return vTxid[pos];\n     } else {\n         // calculate left hash"
      },
      {
        "sha": "322fabbe1150916a2ab0fbebf83d71c429f6cf55",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -64,7 +64,7 @@ struct Peer {\n \n     /** Protects block inventory data members */\n     Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n+    /** List of blocks that we'll announce via an `inv` message.\n      * There is no final sorting before sending, as they are always sent\n      * immediately and in the order requested. */\n     std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);"
      },
      {
        "sha": "cf878fe3748982d01fbad7e078dfc63edbbdffd2",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -483,7 +483,7 @@ class CSubNet\n             READWRITE(obj.network);\n             if (obj.network.IsIPv4()) {\n                 // Before commit 102867c587f5f7954232fb8ed8e85cda78bb4d32, CSubNet used the last 4 bytes of netmask\n-                // to store the relevant bytes for an IPv4 mask. For compatiblity reasons, keep doing so in\n+                // to store the relevant bytes for an IPv4 mask. For compatibility reasons, keep doing so in\n                 // serialized form.\n                 unsigned char dummy[12] = {0};\n                 READWRITE(dummy);"
      },
      {
        "sha": "24d7735447c35c48811d67d08cd033634632cb82",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -127,10 +127,10 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n     (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n-    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()()()\")); //tolerate non command brackets\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tolerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tolerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tolerate empty arguments when using ,\n }"
      },
      {
        "sha": "7a89325ddf44b0fc7508ced1a4d6f34797aad7f5",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -152,7 +152,7 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n \n     connect(wallet_model, &WalletModel::unload, this, [this, wallet_model] {\n         // Defer removeAndDeleteWallet when no modal widget is active.\n-        // TODO: remove this workaround by removing usage of QDiallog::exec.\n+        // TODO: remove this workaround by removing usage of QDialog::exec.\n         if (QApplication::activeModalWidget()) {\n             connect(qApp, &QApplication::focusWindowChanged, wallet_model, [this, wallet_model]() {\n                 if (!QApplication::activeModalWidget()) {"
      },
      {
        "sha": "344d28b412bf261401af3c913049dc589e8a54de",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -43,7 +43,7 @@ extern \"C\" {\n  */\n typedef struct secp256k1_context_struct secp256k1_context;\n \n-/** Opaque data structure that holds rewriteable \"scratch space\"\n+/** Opaque data structure that holds rewritable \"scratch space\"\n  *\n  *  The purpose of this structure is to replace dynamic memory allocations,\n  *  because we target architectures where this may not be available. It is"
      },
      {
        "sha": "8ec53bdaeb5ad0f2676744a81d626ec81f8c51f5",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_too_easy_target)\n     BOOST_CHECK(!CheckProofOfWork(hash, nBits, consensus));\n }\n \n-BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_biger_hash_than_target)\n+BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_bigger_hash_than_target)\n {\n     const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n     uint256 hash;"
      },
      {
        "sha": "70ab4f797a720a603290a4ccf144f456d1d5d989",
        "filename": "src/wallet/sqlite.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/wallet/sqlite.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/wallet/sqlite.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.h?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -37,7 +37,7 @@ class SQLiteBatch : public DatabaseBatch\n     explicit SQLiteBatch(SQLiteDatabase& database);\n     ~SQLiteBatch() override { Close(); }\n \n-    /* No-op. See commeng on SQLiteDatabase::Flush */\n+    /* No-op. See comment on SQLiteDatabase::Flush */\n     void Flush() override {}\n \n     void Close() override;"
      },
      {
        "sha": "4e6270220e0b9656b6e3f34926ff7cdbe563f90b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -426,7 +426,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 uint256 checksum;\n                 ssValue >> checksum;\n                 if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n-                    strErr = \"Error reading wallet database: Crypted key corrupt\";\n+                    strErr = \"Error reading wallet database: Encrypted key corrupt\";\n                     return false;\n                 }\n             }"
      },
      {
        "sha": "bdbfa5aed1161e26bdafb58df4d9bf5924d2581d",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -60,7 +60,7 @@ def run_test(self):\n         self.wit_address = w0.getnewaddress(address_type='p2sh-segwit')\n         self.wit_ms_address = wmulti.addmultisigaddress(1, [self.pubkey], '', 'p2sh-segwit')['address']\n         if not self.options.descriptors:\n-            # Legacy wallets need to import these so that they are watched by the wallet. This is unnecssary (and does not need to be tested) for descriptor wallets\n+            # Legacy wallets need to import these so that they are watched by the wallet. This is unnecessary (and does not need to be tested) for descriptor wallets\n             wmulti.importaddress(self.ms_address)\n             wmulti.importaddress(self.wit_ms_address)\n "
      },
      {
        "sha": "fd317c312e8f229331812a185f155e5e0faf0154",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -94,7 +94,7 @@ def run_test(self):\n         for node in self.nodes:\n             node.invalidateblock(last_block[0])\n         # Time-locked transaction is now too immature and has been removed from the mempool\n-        # spend_103_1 has been re-orged out of the chain and is back in the mempool\n+        # spend_103_1 has been reorged out of the chain and is back in the mempool\n         assert_equal(set(self.nodes[0].getrawmempool()), {spend_101_id, spend_102_1_id, spend_103_1_id})\n \n         # Use invalidateblock to re-org back and make all those coinbase spends"
      },
      {
        "sha": "cca7390ae38a2377b25a92a7cc44bbad3a065ddc",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "patch": "@@ -143,7 +143,7 @@ def run_test(self):\n         }\n         # Transactions that do not end up in the mempool\n         # tx_orphan_no_fee, because it has too low fee (p2ps[0] is not disconnected for relaying that tx)\n-        # tx_orphan_invaid, because it has negative fee (p2ps[1] is disconnected for relaying that tx)\n+        # tx_orphan_invalid, because it has negative fee (p2ps[1] is disconnected for relaying that tx)\n \n         self.wait_until(lambda: 1 == len(node.getpeerinfo()), timeout=12)  # p2ps[1] is no longer connected\n         assert_equal(expected_mempool, set(node.getrawmempool()))"
      }
    ]
  },
  {
    "sha": "abc59b5ad02e33669021b8d7e752384d456923fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmM1OWI1YWQwMmUzMzY2OTAyMWI4ZDdlNzUyMzg0ZDQ1NjkyM2Zl",
    "commit": {
      "author": {
        "name": "Peter Yordanov",
        "email": "ppyordanov@yahoo.com",
        "date": "2021-01-03T18:09:55Z"
      },
      "committer": {
        "name": "Peter Yordanov",
        "email": "ppyordanov@yahoo.com",
        "date": "2021-01-03T18:09:55Z"
      },
      "message": "doc: Reverting subtree file.",
      "tree": {
        "sha": "8734e5546cf232ac12854cf853c27e8496284da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8734e5546cf232ac12854cf853c27e8496284da4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abc59b5ad02e33669021b8d7e752384d456923fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abc59b5ad02e33669021b8d7e752384d456923fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abc59b5ad02e33669021b8d7e752384d456923fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abc59b5ad02e33669021b8d7e752384d456923fe/comments",
    "author": {
      "login": "ppyordanov",
      "id": 5113984,
      "node_id": "MDQ6VXNlcjUxMTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5113984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppyordanov",
      "html_url": "https://github.com/ppyordanov",
      "followers_url": "https://api.github.com/users/ppyordanov/followers",
      "following_url": "https://api.github.com/users/ppyordanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppyordanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppyordanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppyordanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ppyordanov/orgs",
      "repos_url": "https://api.github.com/users/ppyordanov/repos",
      "events_url": "https://api.github.com/users/ppyordanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppyordanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ppyordanov",
      "id": 5113984,
      "node_id": "MDQ6VXNlcjUxMTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5113984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ppyordanov",
      "html_url": "https://github.com/ppyordanov",
      "followers_url": "https://api.github.com/users/ppyordanov/followers",
      "following_url": "https://api.github.com/users/ppyordanov/following{/other_user}",
      "gists_url": "https://api.github.com/users/ppyordanov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ppyordanov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ppyordanov/subscriptions",
      "organizations_url": "https://api.github.com/users/ppyordanov/orgs",
      "repos_url": "https://api.github.com/users/ppyordanov/repos",
      "events_url": "https://api.github.com/users/ppyordanov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ppyordanov/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d0bc5e410a6ea0b97aad46f7d8ba8c87a2afb1b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2178c8e2d6f1864b563f0087c829372804f2cd78",
        "filename": "src/secp256k1/include/secp256k1.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abc59b5ad02e33669021b8d7e752384d456923fe/src/secp256k1/include/secp256k1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abc59b5ad02e33669021b8d7e752384d456923fe/src/secp256k1/include/secp256k1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/include/secp256k1.h?ref=abc59b5ad02e33669021b8d7e752384d456923fe",
        "patch": "@@ -43,7 +43,7 @@ extern \"C\" {\n  */\n typedef struct secp256k1_context_struct secp256k1_context;\n \n-/** Opaque data structure that holds rewritable \"scratch space\"\n+/** Opaque data structure that holds rewriteable \"scratch space\"\n  *\n  *  The purpose of this structure is to replace dynamic memory allocations,\n  *  because we target architectures where this may not be available. It is"
      }
    ]
  }
]