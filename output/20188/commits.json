[
  {
    "sha": "79ef8324d4c85ed16a304e98805724b8a59022ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWVmODMyNGQ0Yzg1ZWQxNmEzMDRlOTg4MDU3MjRiOGE1OTAyMmFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-10-18T16:20:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-10-20T06:18:54Z"
      },
      "message": "tests: Add fuzzing harness for CConnman",
      "tree": {
        "sha": "379e7f11141af50ca5e6853c4f5abf5a0b409c6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/379e7f11141af50ca5e6853c4f5abf5a0b409c6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79ef8324d4c85ed16a304e98805724b8a59022ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79ef8324d4c85ed16a304e98805724b8a59022ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79ef8324d4c85ed16a304e98805724b8a59022ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79ef8324d4c85ed16a304e98805724b8a59022ac/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3527fd2e9be5a94b84433ae229cdf0aaa2d3e7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3527fd2e9be5a94b84433ae229cdf0aaa2d3e7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3527fd2e9be5a94b84433ae229cdf0aaa2d3e7d"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 196,
      "deletions": 0
    },
    "files": [
      {
        "sha": "157b62cef5ff4264a6f2450302842c071ea7ede0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79ef8324d4c85ed16a304e98805724b8a59022ac/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79ef8324d4c85ed16a304e98805724b8a59022ac/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=79ef8324d4c85ed16a304e98805724b8a59022ac",
        "patch": "@@ -35,6 +35,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/checkqueue \\\n   test/fuzz/coins_deserialize \\\n   test/fuzz/coins_view \\\n+  test/fuzz/connman \\\n   test/fuzz/crypto \\\n   test/fuzz/crypto_aes256 \\\n   test/fuzz/crypto_aes256cbc \\\n@@ -520,6 +521,12 @@ test_fuzz_coins_view_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_coins_view_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n test_fuzz_coins_view_SOURCES = test/fuzz/coins_view.cpp\n \n+test_fuzz_connman_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_connman_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_connman_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_connman_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n+test_fuzz_connman_SOURCES = test/fuzz/connman.cpp\n+\n test_fuzz_crypto_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_crypto_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_crypto_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "bb9d28a4abeebd261d559fa42e057c6a1ef8e4b1",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "added",
        "additions": 162,
        "deletions": 0,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79ef8324d4c85ed16a304e98805724b8a59022ac/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79ef8324d4c85ed16a304e98805724b8a59022ac/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=79ef8324d4c85ed16a304e98805724b8a59022ac",
        "patch": "@@ -0,0 +1,162 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <netaddress.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/translation.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void initialize()\n+{\n+    InitializeFuzzingContext();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeBool()};\n+    CAddress random_address;\n+    CNetAddr random_netaddr;\n+    CNode random_node = ConsumeNode(fuzzed_data_provider);\n+    CService random_service;\n+    CSubNet random_subnet;\n+    std::string random_string;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 30)) {\n+        case 0:\n+            random_address = ConsumeAddress(fuzzed_data_provider);\n+            break;\n+        case 1:\n+            random_netaddr = ConsumeNetAddr(fuzzed_data_provider);\n+            break;\n+        case 2:\n+            random_service = ConsumeService(fuzzed_data_provider);\n+            break;\n+        case 3:\n+            random_subnet = ConsumeSubNet(fuzzed_data_provider);\n+            break;\n+        case 4:\n+            random_string = fuzzed_data_provider.ConsumeRandomLengthString(64);\n+            break;\n+        case 5: {\n+            std::vector<CAddress> addresses;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                addresses.push_back(ConsumeAddress(fuzzed_data_provider));\n+            }\n+            // Limit nTimePenalty to int32_t to avoid signed integer overflow\n+            (void)connman.AddNewAddresses(addresses, ConsumeAddress(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int32_t>());\n+            break;\n+        }\n+        case 6:\n+            connman.AddNode(random_string);\n+            break;\n+        case 7:\n+            connman.CheckIncomingNonce(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+            break;\n+        case 8:\n+            connman.DisconnectNode(fuzzed_data_provider.ConsumeIntegral<NodeId>());\n+            break;\n+        case 9:\n+            connman.DisconnectNode(random_netaddr);\n+            break;\n+        case 10:\n+            connman.DisconnectNode(random_string);\n+            break;\n+        case 11:\n+            connman.DisconnectNode(random_subnet);\n+            break;\n+        case 12:\n+            connman.ForEachNode([](auto) {});\n+            break;\n+        case 13:\n+            connman.ForEachNodeThen([](auto) {}, []() {});\n+            break;\n+        case 14:\n+            (void)connman.ForNode(fuzzed_data_provider.ConsumeIntegral<NodeId>(), [&](auto) { return fuzzed_data_provider.ConsumeBool(); });\n+            break;\n+        case 15:\n+            (void)connman.GetAddresses(fuzzed_data_provider.ConsumeIntegral<size_t>(), fuzzed_data_provider.ConsumeIntegral<size_t>());\n+            break;\n+        case 16: {\n+            (void)connman.GetAddresses(random_node, fuzzed_data_provider.ConsumeIntegral<size_t>(), fuzzed_data_provider.ConsumeIntegral<size_t>());\n+            break;\n+        }\n+        case 17:\n+            (void)connman.GetDeterministicRandomizer(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+            break;\n+        case 18:\n+            (void)connman.GetNodeCount(fuzzed_data_provider.PickValueInArray({CConnman::CONNECTIONS_NONE, CConnman::CONNECTIONS_IN, CConnman::CONNECTIONS_OUT, CConnman::CONNECTIONS_ALL}));\n+            break;\n+        case 19:\n+            connman.MarkAddressGood(random_address);\n+            break;\n+        case 20:\n+            (void)connman.OutboundTargetReached(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        case 21:\n+            // Limit now to int32_t to avoid signed integer overflow\n+            (void)connman.PoissonNextSendInbound(fuzzed_data_provider.ConsumeIntegral<int32_t>(), fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        case 22: {\n+            CSerializedNetMsg serialized_net_msg;\n+            serialized_net_msg.m_type = fuzzed_data_provider.ConsumeRandomLengthString(CMessageHeader::COMMAND_SIZE);\n+            serialized_net_msg.data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            connman.PushMessage(&random_node, std::move(serialized_net_msg));\n+            break;\n+        }\n+        case 23:\n+            connman.RemoveAddedNode(random_string);\n+            break;\n+        case 24: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 512);\n+            if (SanityCheckASMap(asmap)) {\n+                connman.SetAsmap(asmap);\n+            }\n+            break;\n+        }\n+        case 25:\n+            connman.SetBestHeight(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        case 26:\n+            connman.SetMaxOutboundTarget(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+            break;\n+        case 27:\n+            connman.SetMaxOutboundTimeframe(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+            break;\n+        case 28:\n+            connman.SetNetworkActive(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        case 29:\n+            connman.SetServices(random_service, static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()));\n+            break;\n+        case 30:\n+            connman.SetTryNewOutboundPeer(fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+    }\n+    (void)connman.GetAddedNodeInfo();\n+    (void)connman.GetBestHeight();\n+    (void)connman.GetExtraOutboundCount();\n+    (void)connman.GetLocalServices();\n+    (void)connman.GetMaxOutboundTarget();\n+    (void)connman.GetMaxOutboundTimeframe();\n+    (void)connman.GetMaxOutboundTimeLeftInCycle();\n+    (void)connman.GetNetworkActive();\n+    std::vector<CNodeStats> stats;\n+    connman.GetNodeStats(stats);\n+    (void)connman.GetOutboundTargetBytesLeft();\n+    (void)connman.GetReceiveFloodSize();\n+    (void)connman.GetTotalBytesRecv();\n+    (void)connman.GetTotalBytesSent();\n+    (void)connman.GetTryNewOutboundPeer();\n+    (void)connman.GetUseAddrmanOutgoing();\n+}"
      },
      {
        "sha": "fec6e13e86396da2a5a5d3df6c469c60390f60e7",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79ef8324d4c85ed16a304e98805724b8a59022ac/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79ef8324d4c85ed16a304e98805724b8a59022ac/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=79ef8324d4c85ed16a304e98805724b8a59022ac",
        "patch": "@@ -11,6 +11,7 @@\n #include <chainparamsbase.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n+#include <net.h>\n #include <netaddress.h>\n #include <netbase.h>\n #include <primitives/transaction.h>\n@@ -260,6 +261,32 @@ CSubNet ConsumeSubNet(FuzzedDataProvider& fuzzed_data_provider) noexcept\n     return {ConsumeNetAddr(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<uint8_t>()};\n }\n \n+CService ConsumeService(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    return {ConsumeNetAddr(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<uint16_t>()};\n+}\n+\n+CAddress ConsumeAddress(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    return {ConsumeService(fuzzed_data_provider), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+}\n+\n+CNode ConsumeNode(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const NodeId node_id = fuzzed_data_provider.ConsumeIntegral<NodeId>();\n+    const ServiceFlags local_services = static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+    const int my_starting_height = fuzzed_data_provider.ConsumeIntegral<int>();\n+    const SOCKET socket = INVALID_SOCKET;\n+    const CAddress address = ConsumeAddress(fuzzed_data_provider);\n+    const uint64_t keyed_net_group = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+    const uint64_t local_host_nonce = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+    const CAddress addr_bind = ConsumeAddress(fuzzed_data_provider);\n+    const std::string addr_name = fuzzed_data_provider.ConsumeRandomLengthString(64);\n+    const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray({ConnectionType::INBOUND, ConnectionType::OUTBOUND_FULL_RELAY, ConnectionType::MANUAL, ConnectionType::FEELER, ConnectionType::BLOCK_RELAY, ConnectionType::ADDR_FETCH});\n+    const bool inbound_onion = fuzzed_data_provider.ConsumeBool();\n+    return {node_id, local_services, my_starting_height, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion};\n+}\n+\n void InitializeFuzzingContext(const std::string& chain_name = CBaseChainParams::REGTEST)\n {\n     static const BasicTestingSetup basic_testing_setup{chain_name, {\"-nodebuglogfile\"}};"
      }
    ]
  }
]