promag,2018-06-01T22:32:08Z,"Rebased, added release notes and functional tests.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-394026464,394026464,
promag,2018-06-01T22:56:19Z,"If a wallet is loaded after being unloaded then a segfault is raised:\n```sh\nProcess 10688 stopped\n* thread #2, name = 'bitcoin-httpworker', stop reason = EXC_BAD_ACCESS (code=1, address=0x608)\n    frame #0: 0x0000000100a0ad18 libdb_cxx-4.8.dylib`DbEnv::set_lg_dir(char const*) + 38\nlibdb_cxx-4.8.dylib`DbEnv::set_lg_dir:\n->  0x100a0ad18 <+38>: callq  *0x608(%rdi)\n    0x100a0ad1e <+44>:",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-394030278,394030278,
laanwj,2018-06-05T07:27:54Z,"new warning:\n```\n/home/orion/projects/bitcoin/bitcoin/src/qt/bitcoingui.cpp:123:5: warning: field 'platformStyle' will be initialized after field 'm_wallet_selector_label' [-Wreorder]\n    platformStyle(_platformStyle),\n    ^\n1 warning generated.\n```",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-394609552,394609552,
ken2812221,2018-06-06T10:27:54Z,"The `wallet.dat` might corrupt by running the script:\n```\nsrc/bitcoind -daemon -regtest\nsleep 3\nsrc/bitcoin-cli -regtest createwallet test\nsrc/bitcoin-cli -regtest unloadwallet test\nnum=0\nwhile [ $num -lt 1000 ]; do\n    src/bitcoin-cli -regtest loadwallet test\n    src/bitcoin-cli -regtest unloadwallet test\n    num=$(($num+1))\n    echo $num\ndone",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395021558,395021558,
promag,2018-06-06T14:32:14Z,"> The wallet.dat might corrupt by running the script\n\n@ken2812221 corrupt how? Can't reproduce.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395089813,395089813,
ken2812221,2018-06-06T14:51:05Z,"Oh, the wallet does not corrupt. It's a libevent error, but the message says that the wallet corrupts. It might because I open so many connections at a short period of time, restart bitcoind fix the problem. Does not related to this PR\n```\n2018-06-06T10:23:12Z  wallet                12033ms\n2018-06-06T10:23:12Z setKeyPool.size() = 2000\n2018-06-06T10:23:12Z mapWallet.size() = 0\n2018-06-06",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395096853,395096853,
promag,2018-06-06T14:55:15Z,"```\n2018-06-06T10:23:12Z BerkeleyEnvironment::Close: Error -30973 closing database environment: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery\n```\nIs this related to the libevent error?",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395098420,395098420,
ken2812221,2018-06-06T15:12:37Z,"    2018-06-06T10:23:12Z libevent: Error from accept() call: Too many open files\n\nProbobly the wallet would fail to close after the libevent error. Restart the node fix the issue.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395104863,395104863,
promag,2018-06-07T01:38:26Z,"@jnewbery thanks the review and testing. I believe I've addressed all your comments.\n\n`wallet_model->moveToThread(thread());` was missing in the previous version which messed some `QObject::connect`.\n\nAlso, calling RPC `stop` either with bitcoin-qt or bitcoind caused a segfault, now fixed.\n\nACK on the unloadwallet usage calling without an argument defaults to the wallet referenced by t",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395265111,395265111,
promag,2018-06-07T01:42:51Z,"```\nGUI: QObject::connect: Cannot queue arguments of type 'QVector<int>'\n(Make sure 'QVector<int>' is registered using qRegisterMetaType().)\n```\n@jonasschnelli this error was caused by incorrect `WalletModel`'s thread affinity, see above.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395265931,395265931,
promag,2018-06-08T20:55:07Z,"@jnewbery thanks for the review, will address your comments. Also, I need to figure out the travis failure.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-395887535,395887535,
achow101,2018-06-12T22:06:52Z,"~~Tested ACK 4eb7e12ba833c78201cb32a2f4a075dd5407396c~~\n\nTested ACK 6cb76924e58a4b49ccc519bdce1a74bb80d2f5f3",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-396750093,396750093,
promag,2018-06-13T00:21:02Z,"@achow101 if you tested the whole patch then the last commit is 6cb7692, GH sorts by date.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-396774767,396774767,
achow101,2018-06-13T00:24:57Z,"Oh, whoops. Yes, I tested the whole patch.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-396775312,396775312,
laanwj,2018-06-14T15:39:43Z,Code changes LGTM - utACK 6cb76924e58a4b49ccc519bdce1a74bb80d2f5f3,https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-397340849,397340849,
promag,2018-06-14T20:47:47Z,@jnewbery thanks for the review!,https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-397433192,397433192,
jonasschnelli,2018-06-18T10:42:32Z,"Issue QT:\n1. Start with a single (default) wallet\n2. Create or load a wallet (`[default wallet]` and `[new_wallet]` should be there in the dropdown).\n3. When `[default wallet]` is selected, call `unloadwallet`\n4.  **`[default wallet]` is still there in the RPC dropdown**\n5.  **`[default wallet]` is still in the main window dropdown**\n6.  **Selecting `[default wallet]` looks like one ha",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398014051,398014051,
jonasschnelli,2018-06-18T13:14:44Z,Tested ACK 0496cfbf7b28bf65eb5726e5b119ff75d56e5df8 (after squash).,https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398049826,398049826,
PierreRochard,2018-06-19T14:45:33Z,"Segfault with QT:\n\n1. Start with a single (default) wallet\n2. Create or load a wallet ([default wallet] and [new_wallet] should be there in the dropdown).\n3. When [new_wallet] is selected in the dropdown, call unloadwallet without any arguments\n\n<pre>\nProcess 87183 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)\n    frame #",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398425559,398425559,
promag,2018-06-19T23:28:25Z,"@PierreRochard thanks for testing. I'm able to reproduce it. After your steps (which don't harm), call `generate 1`. This is due to the missing `delete`s in https://github.com/bitcoin/bitcoin/blob/3f398d7a17f136cd4a67998406ca41a124ae2966/src/qt/walletview.cpp#L87-L90\nwhich happens after https://github.com/bitcoin/bitcoin/pull/13111/files#diff-8c9d79ba40bf702f01685008550ac100R483. Will fix.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398577025,398577025,
promag,2018-06-20T13:21:37Z,@PierreRochard actually `WalletView` was leaking. Added a separate commit since the problem already exists in master.,https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398746106,398746106,
jnewbery,2018-06-20T16:30:06Z,"Tested ACK fe65bdec237776dbe094339509dfd2e63329a832\n\n@jonasschnelli and @PierreRochard issues are fixed.",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398813477,398813477,
PierreRochard,2018-06-20T17:27:48Z,"@promag, thanks for the explanation, I really like this pull request. \nI think we should handle the case where `GetWalletNameFromJSONRPCRequest` returns false and there is no `wallet_name` name provided. Otherwise the endpoint chokes on `wallet_name = request.params[0].get_str();` and provides an unexpected error to the user\n\n![image](https://user-images.githubusercontent.com/6299681/4167418",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398831543,398831543,
promag,2018-06-20T17:49:35Z,@PierreRochard it can be improved in a follow up.,https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398838801,398838801,
PierreRochard,2018-06-20T18:08:36Z,"That's fair, tested ACK fe65bdec237776dbe094339509dfd2e63329a832",https://github.com/bitcoin/bitcoin/pull/13111#issuecomment-398844560,398844560,
jnewbery,2018-06-05T16:16:12Z,You've placed this between `NotifyAddressBookChanged()` and its comment. Please move it.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r193134559,193134559,src/wallet/wallet.h
jnewbery,2018-06-06T15:57:23Z,"In commit *rpc: Add unloadwallet RPC*, this doesn't build (`CWallet.Unload()` is only added in *ui: Support wallets unloaded dynamically*)",https://github.com/bitcoin/bitcoin/pull/13111#discussion_r193464811,193464811,src/wallet/rpcwallet.cpp
jnewbery,2018-06-06T16:02:01Z,Please assert that wallet **w1** appears in `listwallets` and is usable.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r193466410,193466410,test/functional/wallet_multiwallet.py
promag,2018-06-07T01:31:28Z,Incorrect comment ðŸ˜ª ,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r193604849,193604849,src/wallet/wallet.h
promag,2018-06-07T01:33:38Z,Done.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r193605083,193605083,test/functional/wallet_multiwallet.py
promag,2018-06-07T01:33:49Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r193605104,193605104,src/wallet/rpcwallet.cpp
promag,2018-06-07T01:34:12Z,Yap.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r193605142,193605142,src/wallet/wallet.h
jnewbery,2018-06-08T18:41:34Z,Should we throw an error if `RemoveWallet()` returns false? (so if `unloadwallet` is called twice in quick succession there's no chance of `UnregisterValidationInterface()` being called twice for the same wallet),https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194148203,194148203,src/wallet/rpcwallet.cpp
jnewbery,2018-06-08T18:44:50Z,I'm not sure if this is desirable behaviour. Should it be possible to call `unloadwallet wallet2` on wallet1's endpoint?,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194149095,194149095,test/functional/wallet_multiwallet.py
jnewbery,2018-06-08T19:38:02Z,Should the `m_wallet_selector` Qlabel be hidden when the second last wallet is removed and there is only one wallet loaded? (and then re-revealed when a second wallet is loaded)?,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194161334,194161334,src/qt/bitcoingui.cpp
jnewbery,2018-06-08T20:22:16Z,Is this `unload()` method doing anything?,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194171348,194171348,src/qt/walletmodel.h
promag,2018-06-08T20:51:03Z,"Indeed, will fix.",https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194178125,194178125,src/wallet/rpcwallet.cpp
promag,2018-06-08T20:53:45Z,So if the endpoint references a wallet then the RPC should have no arguments? If so LGTM.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194178803,194178803,test/functional/wallet_multiwallet.py
promag,2018-06-08T20:57:56Z,If you don't mind I would like to do it later. I have a couple of UI changes in the drawer.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194179698,194179698,src/qt/bitcoingui.cpp
promag,2018-06-12T10:50:45Z,Done.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194694149,194694149,src/wallet/rpcwallet.cpp
promag,2018-06-12T10:50:58Z,"Done, although not sure how I could test it.",https://github.com/bitcoin/bitcoin/pull/13111#discussion_r194694189,194694189,test/functional/wallet_multiwallet.py
jnewbery,2018-06-14T17:19:56Z,Remove?,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r195504859,195504859,test/functional/wallet_multiwallet.py
jnewbery,2018-06-14T17:20:54Z,:kissing_smiling_eyes: :ok_hand: ,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r195505151,195505151,src/wallet/rpcwallet.cpp
jnewbery,2018-06-14T17:58:42Z,oops. Actually I think this declaration is required for `BitcoinApplication` to connect the `removeWallet` slot to the `unload` signal (https://github.com/bitcoin/bitcoin/pull/13111/files#diff-8c9d79ba40bf702f01685008550ac100R471). Is that right?,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r195517145,195517145,src/qt/walletmodel.h
jonasschnelli,2018-06-18T13:17:36Z,nit: it's unclear from the calls documentation that you can't unload `walletB` by calling `walletA`-endpoint with `unloadwallet  walletB`.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r196073135,196073135,src/wallet/rpcwallet.cpp
promag,2018-06-18T15:36:32Z,@jnewbery done here.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r196124851,196124851,src/qt/bitcoingui.cpp
promag,2018-06-18T15:36:58Z,@jonasschnelli improved documentation.,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r196125016,196125016,src/wallet/rpcwallet.cpp
ryanofsky,2018-06-25T18:40:02Z,"What's the reason for this call? It seems very fragile because BlockUntilSyncedToCurrentChain may try to schedule a callback, but wallets currently get deleted after the scheduler is deleted:\n\nhttps://github.com/bitcoin/bitcoin/blob/baf3a3ab0c63b512b37d9f753768c1f020369088/src/init.cpp#L297-L299\n\nI was seeing this cause a crash due to a subtle change in behavior in one of my prs, which too",https://github.com/bitcoin/bitcoin/pull/13111#discussion_r197900199,197900199,src/wallet/wallet.cpp
promag,2018-06-25T20:53:00Z,The initial idea was to avoid dangling pointers to the wallet in the validation queue. I agree that once in the deleter no more pointers to the wallet should exist. Do you suggest removing this call? Which PR are you referring?,https://github.com/bitcoin/bitcoin/pull/13111#discussion_r197938303,197938303,src/wallet/wallet.cpp
ryanofsky,2018-06-26T17:50:13Z,"> The initial idea was to avoid dangling pointers to the wallet in the validation queue.\n\n@promag I think it would be better to just call UnregisterValidationInterface in this case. That looks like it would remove any wallet references from the notification code without needing to block wallet deletion on the scheduler thread or run additional notification handling code.\n\n>  I agree that o",https://github.com/bitcoin/bitcoin/pull/13111#discussion_r198240231,198240231,src/wallet/wallet.cpp
