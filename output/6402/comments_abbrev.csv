luke-jr,2015-07-09T03:27:32Z,"Concept ACK, but why run on a schedule rather than after/before accepting new txns?\n",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119803941,119803941,
jgarzik,2015-07-09T04:58:29Z,It takes a while for the condition to clear once noticed.  You don't want to run it too frequently.\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119817888,119817888,
luke-jr,2015-07-09T05:05:59Z,"I mean for setting the condition and increasing the minimum fee.. otherwise someone just needs to flood you as fast as they can before it kicks in, right?\n",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119820386,119820386,
jgarzik,2015-07-09T06:03:46Z,"@luke-jr That is the ideal, but it requires a bit more effort.  Must avoid adding too much code to the per-tx fast path.\n\nA likely solution is perform inexpensive per-tx checks on total mempool size, then trigger some background action.  Such a solution would trigger upon the first tx exceeding high water limit.\n",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119830044,119830044,
luke-jr,2015-07-09T06:07:22Z,First tx exceeding the limit trigger SGTM\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119830846,119830846,
randy-waterhouse,2015-07-09T07:33:15Z,Concept ACK. Nice work Jeff.\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119856632,119856632,
ashleyholman,2015-07-09T10:31:25Z,Let's imagine the memory pool hits the low watermark and at that time it consists of 80% spam transactions at 100 bits/kb.  Then the lowest fee rate in the top half will be 100bits/kb and so further spam at the same rate will still enter the pool?  This will continue so long as the spammer can produce >50% of the transactions arriving at the node.\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119903967,119903967,
jonasschnelli,2015-07-09T12:23:32Z,"Tested a bit. Had to add three commits to get it running: https://github.com/jonasschnelli/bitcoin/commits/2015/07/mempool_janitor\n\n**Nice work!**\n\nI'm not sure but it feels that it somehow doesn't prevent from flooded mempools.\nExample: if someone is flooding your node with 1tx/s with a correct minRelayTxFee (lets assume 1000/kb), the janitor will always keep the minRelayTxFee at 1000/kb, be",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-119942020,119942020,
m-schmoock,2015-07-09T15:04:39Z,"@jgarzik \n[quote luke]Concept ACK, but why run on a schedule rather than after/before accepting new txns? [/quote] \n[quote jgarzik ] It takes a while for the condition to clear once noticed. You don't want to run it too frequently. [/quote] \n\nIsn't a integer set and compare per transaction that keeps track of the mempool size a very, very fast operation? Using scheduling for this seems overkil",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120018354,120018354,
andreas-cubits,2015-07-09T18:20:43Z,@jonasschnelli You are correct that this patch would not effectively prevent mempool flooding if the spam transactions all have the same fee/kb and make up for more than half of the mempool. Sorting by unique fee/kb values and then using the lowest entry of the top half as minRelayTxFee would however seem to fix this.\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120093845,120093845,
TheBlueMatt,2015-07-09T19:35:26Z,"I'm not a big fan of increasing the dust limit dynamically as a part of this. I'd much prefer to only increase the relay fee itself and not touch dust. Still, it seems the majority of what this patch rejects are dust transactions, not rejecting free transactions using the rate limiter.\n",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120121188,120121188,
jtimon,2015-07-09T19:59:39Z,"Apart from the nits, I wonder if this could be integrated with the fee estimator in policy/fees.o\n",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120128114,120128114,
TheBlueMatt,2015-07-09T21:29:04Z,@jtimon You mean like https://github.com/TheBlueMatt/bitcoin/commit/e68aee1e93d82ccb4c7310149581c8c5d738cd4a ? :p\nCurrently limits mempool to only a few MBs\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120149184,120149184,
randy-waterhouse,2015-07-10T00:45:08Z,@jtimon @TheBlueMatt integrating fee estimation with mempool management risks integrating wallet function with network function of the node.\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120186863,120186863,
TheBlueMatt,2015-07-10T00:49:24Z,"@randy-waterhouse Huh? fee estimation code is managed by mempool...it is called by the wallet, but it is not a ""wallet function"". (dunno if it makes sense to use it to manage minimum tx fee, though, it may not work so great when looking at many-block confirmations, I havent dug into it much)\n",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120187640,120187640,
jgarzik,2015-07-10T04:33:57Z,Fixed bug found by @jonasschnelli and some minor nits.\n\nWill address the @luke-jr feedback RE triggering next.\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120222453,120222453,
jtimon,2015-07-10T08:17:01Z,"> @jtimon @TheBlueMatt integrating fee estimation with mempool management risks integrating wallet function with network function of the node.\n\nThis (and the estimator) are policy code. Assuming #6068 ever gets merged, I plan to:\n\n1) Turn minRelayTxFee global into a CStandardPolicy attribute (decoupling the mempool from that global, but coupling it to CPolicy [which now returns a ref to the es",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120287415,120287415,
morcos,2015-07-10T11:16:22Z,@jgarzik I saw some of your conversation with @pstratem on -dev IRC last night.  \nI now agree with you that expiration by age makes the most sense.  But I wonder if there is an edge case where somehow the mempool is able to be flooded quickly with mostly low fee transactions that will cause recent (but still oldest) high fee transactions to get booted.  Perhaps an age check could trigger booting ,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-120387395,120387395,
ABISprotocol,2015-07-14T03:57:46Z,"If I understand this right, this pull request would reject many dust transactions, not rejecting free transactions; above 'high water' byte size limit for memory pool, fees to further fill memory pools become increasingly more expensive, making it dynamic.  I would like to see this amended such that dust can be handled differently, managed better, and accepted more (once an hour, or randomly, or s",https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-121126371,121126371,
jgarzik,2015-09-15T01:07:24Z,Closing\n,https://github.com/bitcoin/bitcoin/pull/6402#issuecomment-140244879,140244879,
jonasschnelli,2015-07-09T11:21:39Z,"Just ran into this sane check (while testing with 5s interval). Maybe it would be worth to add a `LogPrint(""mempool"", ""Janitor has been disabled because of insane interval"")` or similar.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34245304,34245304,src/poolman.cpp
jonasschnelli,2015-07-09T11:23:33Z,rm *1000?\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34245390,34245390,src/poolman.cpp
Diapolo,2015-07-09T11:32:19Z,"This should be flexible, so please use something like above with -dbcache. Also update to `0 = disable` (spaces usage), while you are on it.\n\nAlso true for the other 2 options!\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34245882,34245882,src/init.cpp
Diapolo,2015-07-09T11:48:21Z,"Nit: Missing license, missing header group ordering and also std namespace polution.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34246813,34246813,src/poolman.cpp
Diapolo,2015-07-09T11:49:16Z,"Nit: Missing license header and wrong header naming string, should be `BITCOIN_POOLMAN_H` here and at the header end.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34246854,34246854,src/poolman.h
Diapolo,2015-07-09T11:50:44Z,The `.clear()` doesn't need a lock?\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34246924,34246924,src/txmempool.cpp
Diapolo,2015-07-09T11:51:20Z,Nit: `size_t`?\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34246957,34246957,src/poolman.cpp
jonasschnelli,2015-07-09T11:57:13Z,No. It doesn't.\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34247358,34247358,src/txmempool.cpp
jonasschnelli,2015-07-09T11:58:11Z,IMO okay because: `unsigned long CTxMemPool::size()`\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34247406,34247406,src/poolman.cpp
dgenr8,2015-07-09T16:31:46Z,Don't allow janitor to compete with confirmation.  Minimum highwater should be something like 1 hour of maximum confirmation bytes.\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34274319,34274319,src/poolman.cpp
TheBlueMatt,2015-07-09T19:21:04Z,"Yea, scheduleEvery's second arg is seconds, not millis.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34292756,34292756,src/poolman.cpp
jtimon,2015-07-09T19:55:40Z,what do you need from main?\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34296187,34296187,src/poolman.cpp
jtimon,2015-07-09T19:56:26Z,Can't these be attributes of the class?\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34296284,34296284,src/poolman.cpp
jtimon,2015-07-09T19:57:27Z,Can't all GetArg() calls be made from a function/method that is only called from init? \n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34296390,34296390,src/poolman.cpp
jgarzik,2015-07-09T20:23:02Z,The minimum relay fee global\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34299281,34299281,src/poolman.cpp
jgarzik,2015-07-09T20:23:13Z,which class?\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34299340,34299340,src/poolman.cpp
jgarzik,2015-07-09T20:23:41Z,"Um, it is made from a function that is only called from init.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34299393,34299393,src/poolman.cpp
jtimon,2015-07-09T20:28:51Z,"Oh, sure, it is still not an attribute of CStandardPolicy...nevermind then.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34299907,34299907,src/poolman.cpp
jtimon,2015-07-09T20:29:24Z,"Yes, sorry. Fast read.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34299974,34299974,src/poolman.cpp
jtimon,2015-07-09T20:31:37Z,"A new class could be created to avoid new globals here. Or as said, this could be incorporated to the fee estimator.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34300186,34300186,src/poolman.cpp
jgarzik,2015-07-10T04:26:44Z,"The scanning interval and the high water mark are two very different things.  Presumably the high water mark should be ~2 days, less a small factor.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34326956,34326956,src/poolman.cpp
jgarzik,2015-07-10T04:30:43Z,"Added some whitespace.  It does not make sense to use strprintf() in these cases, however.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34327056,34327056,src/init.cpp
jgarzik,2015-07-10T04:35:20Z,"leaning towards no, but will consider...  need a conditional inside that code block as the 0=disabled case should not trigger a message about insanity :)\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34327148,34327148,src/poolman.cpp
jtimon,2015-07-10T08:12:59Z,Can the mempool be passed as a parameter to TxMempoolJanitor() instead of using main.o's global?\n,https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34335040,34335040,src/poolman.cpp
dgenr8,2015-07-11T00:31:50Z,"@jgarzik Suppose highwater and max_blocksize are 1MB, and transaction flow is exactly 1MB/10min.  Whenever you get a slow block, you're going end up raising minrelayfee.  So 0 is too low a minimum ... it needs to be high enough that the adjustment is not triggered for reasonably slow blocks.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34406990,34406990,src/poolman.cpp
jgarzik,2015-07-11T03:43:22Z,"""0 is too low a minimum""   I have no idea what this is talking about, sorry...\n\nAnd your highwater value should be quite larger than 1MB.\n",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34409294,34409294,src/poolman.cpp
randy-waterhouse,2015-07-11T04:24:57Z,"> The scanning interval and the high water mark are two very different things. Presumably the high water mark should be ~2 days, less a small factor.\n\nSo default highwater ~ `288*max_block_size` gives a buffer of 2 days of TX, less small factor, say `256*max_block_size`. Then janitor on 2 day TX expiry and minrelaytxfee float are targetting similar time/space constraints when system is at max ca",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34409525,34409525,src/poolman.cpp
dgenr8,2015-07-11T19:37:47Z,"> And your highwater value should be quite larger than 1MB.\n\nThat's what I mean\n\n``` c++\n     PoolmanHighWater = GetArg(""-mempoolhighwater"", 0);\n-    if (PoolmanHighWater <= 0)\n+    // Protect from taking action in response to mempool size variation\n+    // resulting from normal block interval variation\n+    if (PoolmanHighWater < 6 * MAX_BLOCK_SIZE) {\n+        PoolmanHighWater = 0;\n   ",https://github.com/bitcoin/bitcoin/pull/6402#discussion_r34415614,34415614,src/poolman.cpp
