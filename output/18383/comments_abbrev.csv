laanwj,2020-03-19 14:08:17,"What is the concrete effect of this? Does this affect validation?\n\nCan you please add a test that fails without this change?",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601199068,601199068,
elichai,2020-03-19 14:12:15,"> What is the concrete effect of this? Does this affect validation?\n\nGood question. technically this code is part of validation, it's called from `tx_verify.cpp`\nI do not know if validation can ever execute this with an overflowing value, if so it's a real problem which is why I assume it probably can't. (i'll try writing a test now)\nso if it can't happen and assuming this change is correc",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601201327,601201327,
MarcoFalke,2020-03-19 14:38:04,"This is not possible to trigger from a network node or RPC, because `CheckTransaction` is called before `CheckInputs` is called. (This call order is also a requirement for other reasons)",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601215527,601215527,
MarcoFalke,2020-03-19 14:38:54,This was fixed in `CVE-2010-5139`,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601216050,601216050,
MarcoFalke,2020-03-19 14:41:37,"I am pretty sure the compiler will optimize out the unused result anyway (and thus the overflow), but if you strongly feel like this needs to be fixed, then you could reorder the code, so that the overflow in the unused result never happens:\n* First check the output value with MoneyRange\n* Calculate the result\n* Check the result with MoneyRange",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601217595,601217595,
vasild,2020-03-19 14:44:22,"How could it overflow, given that `CAmount` is `int64_t`. Expressed in satoshi - about 4000 times more than the total supply of bitcoin?",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601219117,601219117,
MarcoFalke,2020-03-19 14:49:22,@vasild  `CAmount` can be `std::numeric_limits<CAmount>::max()` or any other value in range for a serialized transaction. The deserialization code does not check for consensus rules.,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601221905,601221905,
practicalswift,2020-03-19 15:46:01,"Concept ACK: `CTransaction::GetValueOut()` should handle crazy amounts by throwing the expected exception. I think that was the intention behind the current code, so this is simply a bug AFAICT. (Luckily only reachable by the fuzzers at the moment (AFAICT).)\n\nHowever, I think your fix can be simplified :)\n\nNote that `a + b` cannot overflow if `MoneyRange(a) == true` and `MoneyRange(b) == t",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601253642,601253642,
practicalswift,2020-03-19 16:05:01,"@elichai \n\nThis is the fix I've used in my local fuzzing tree to avoid hitting this signed integer overflow over and over :)\n\n```patch\ndiff --git a/src/primitives/transaction.cpp b/src/primitives/transaction.cpp\nindex 28c145f71..a1567e805 100644\n--- a/src/primitives/transaction.cpp\n+++ b/src/primitives/transaction.cpp\n@@ -84,9 +84,10 @@ CAmount CTransaction::GetValueOut() const\",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601265341,601265341,
practicalswift,2020-03-19 16:20:25,"@MarcoFalke \n\n> I am pretty sure the compiler will optimize out the unused result anyway (and thus the overflow)\n\nWhat unused result are you referring to? :)",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601273661,601273661,
sipa,2020-03-19 16:25:02,@practicalswift nValueOut is computed but never inspected in case tx_out.nValue is out of range.,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601276141,601276141,
practicalswift,2020-03-19 16:43:09,"@sipa \n\nAh, in @elichai's suggested fix. I thought @MarcoFalke  meant in current `master` :)\n\nThe patch I'm suggesting in the comment above looks robust and correct?",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601285912,601285912,
vasild,2020-03-20 14:05:51,"> The patch I'm suggesting in the comment above looks robust and correct?\n\nYes, and also more readable than the one in this PR (c5dd8eb625).",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601718245,601718245,
MarcoFalke,2020-03-20 14:11:28,"> I thought @MarcoFalke meant in current master :)\n\nI do mean current master :)\n\nas pointed out by pieter: ""nValueOut is computed but never inspected in case tx_out.nValue is out of range."" So I think the compiler will likely never produce a binary that computes nValueOut in the first place, or even if it did, it wouldn't matter because it is never read.",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601720857,601720857,
practicalswift,2020-03-20 15:25:50,"An even simpler patch which also tests the post-condition:\n\n```diff\ndiff --git a/src/primitives/transaction.cpp b/src/primitives/transaction.cpp\nindex 28c145f71..76acb08b0 100644\n--- a/src/primitives/transaction.cpp\n+++ b/src/primitives/transaction.cpp\n@@ -9,6 +9,8 @@\n #include <tinyformat.h>\n #include <util/strencodings.h>\n\n+#include <cassert>\n+\n std::string COutPoint::T",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601757891,601757891,
instagibbs,2020-03-20 18:12:51,I prefer @practicalswift solution above,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601842791,601842791,
elichai,2020-03-21 14:21:16,"> as pointed out by pieter: ""nValueOut is computed but never inspected in case tx_out.nValue is out of range."" So I think the compiler will likely never compute nValueOut in the first place, or even if it did, it wouldn't matter because it is never read.\n\nI honestly don't know if it's a problem overflowing without reading the value, probably isn't as you said.\n\n\n> An even simpler patch w",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602050022,602050022,
promag,2020-03-23 11:56:47,I also prefer https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-601757891.,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602547832,602547832,
elichai,2020-03-23 12:05:16,@practicalswift do you wan to open a new PR with your suggestion? or should I replace my diff here with yours?,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602551300,602551300,
practicalswift,2020-03-23 12:35:17,@elichai Feel free to use the patch I suggested. That way we'll keep the review to this PR and I can keep my work-in-progress PR count down :),https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602563659,602563659,
practicalswift,2020-03-23 13:15:36,ACK a4c79f8cf6e0407f7e937fb41c73127f630231fa,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602582090,602582090,
instagibbs,2020-03-23 13:22:47,utACK https://github.com/bitcoin/bitcoin/pull/18383/commits/a4c79f8cf6e0407f7e937fb41c73127f630231fa,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602585646,602585646,
MarcoFalke,2020-03-23 15:41:43,"As pointed out earlier, this indeed is not an issue, because gcc will produce identical binaries for before this PR and after this PR. The overflow never happens.\n\nACK f65c9ad40f2f5cdc581bdaf72e7dc68e9d7f7a80, checked that clang with O2 produces identical binaries ðŸ’•\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHas",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602682370,602682370,
practicalswift,2020-03-23 21:46:40,ACK f65c9ad40f2f5cdc581bdaf72e7dc68e9d7f7a80,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602873788,602873788,
practicalswift,2020-03-23 23:06:21,"@MarcoFalke \n\n> As pointed out earlier, this indeed is not an issue, because gcc will produce identical binaries for before this PR and after this PR. The overflow never happens.\n\nI'm not sure I follow your reasoning here TBH.\n\n""`gcc` will produce identical binaries for before this PR and after this PR"" does not necessarily imply anything about the behaviour of other compilers we care ",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-602905163,602905163,
practicalswift,2020-04-01 05:07:28,@MarcoFalke Friendly ping: can you clarify? :),https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-607035059,607035059,
practicalswift,2020-04-01 05:22:14,@instagibbs You reviewed a previous version of this PR -- would you mind re-reviewing the current version? :),https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-607038869,607038869,
elichai,2020-04-01 07:33:17,"FWIW.\nYou can see that before: https://godbolt.org/z/wHZVFr \nThe logic was first add then compare:\n```\n        mov     rcx, QWORD PTR [rax]\n        add     r8, rcx\n        cmp     rcx, rsi\n        ja      .L3\n        cmp     r8, rsi\n        ja      .L3\n        add     rax, 8\n        cmp     rdx, rax\n        jne     .L6\n```\n\nBut now: https://godbolt.org/z/oT7RJb it's f",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-607084455,607084455,
MarcoFalke,2020-04-01 15:53:50,"I used clang, not gcc. Anyway, I didn't say it is wrong to fix this ;)",https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-607333388,607333388,
instagibbs,2020-04-01 16:10:09,utACK https://github.com/bitcoin/bitcoin/pull/18383/commits/f65c9ad40f2f5cdc581bdaf72e7dc68e9d7f7a80,https://github.com/bitcoin/bitcoin/pull/18383#issuecomment-607343234,607343234,
practicalswift,2020-03-23 15:21:26,"~~Nit: `#include <assert.h>` is deprecated in C++. Use the idiomatic form `#include <cassert>` :)~~\n\nNo need to invalidate ACK:s for this :)",https://github.com/bitcoin/bitcoin/pull/18383#discussion_r396532249,396532249,src/primitives/transaction.cpp
