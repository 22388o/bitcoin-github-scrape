[
  {
    "sha": "bb66a11396335b5f4e5914806fcb2dc6165edf6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjY2YTExMzk2MzM1YjVmNGU1OTE0ODA2ZmNiMmRjNjE2NWVkZjZm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-07T19:49:26Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-07T19:49:26Z"
      },
      "message": "Fix DoS vulnerability in mempool acceptance\n\nMoves the IsStandard check to happen after the premature-witness check,\nso that adding a witness to a transaction can't prevent mempool acceptance.\n\nNote that this doesn't address the broader category of potential mempool DoS\nissues that affect transactions after segwit activation.",
      "tree": {
        "sha": "1c38ff11455207cd7ed135146e02ab641cf2407e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c38ff11455207cd7ed135146e02ab641cf2407e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb66a11396335b5f4e5914806fcb2dc6165edf6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb66a11396335b5f4e5914806fcb2dc6165edf6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb66a11396335b5f4e5914806fcb2dc6165edf6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb66a11396335b5f4e5914806fcb2dc6165edf6f/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91abb77970f47b1f6166e564bc695ed30c75bb63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91abb77970f47b1f6166e564bc695ed30c75bb63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91abb77970f47b1f6166e564bc695ed30c75bb63"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2f16a4c8ead26b5285a5f0174c0371bb0f551611",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb66a11396335b5f4e5914806fcb2dc6165edf6f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb66a11396335b5f4e5914806fcb2dc6165edf6f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bb66a11396335b5f4e5914806fcb2dc6165edf6f",
        "patch": "@@ -1132,11 +1132,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     if (tx.IsCoinBase())\n         return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n-    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n-        return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n-\n     // Don't relay version 2 transactions until CSV is active, and we can be\n     // sure that such transactions will be mined (unless we're on\n     // -testnet/-regtest).\n@@ -1150,6 +1145,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n+    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n+    string reason;\n+    if (fRequireStandard && !IsStandardTx(tx, reason))\n+        return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n+\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet."
      }
    ]
  },
  {
    "sha": "46c9620f11acfd2b528959d6cbab324105c3adef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmM5NjIwZjExYWNmZDJiNTI4OTU5ZDZjYmFiMzI0MTA1YzNhZGVm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-08T01:18:05Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-08T01:18:34Z"
      },
      "message": "Test that unnecessary witnesses can't be used for mempool DoS\n\nCheck that pre-segwit activation, unnecessary witnesses won't cause\na txid to be permanently rejected.",
      "tree": {
        "sha": "bfa7630b37f1af49261cd0e20cf1a9b76857b6e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfa7630b37f1af49261cd0e20cf1a9b76857b6e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c9620f11acfd2b528959d6cbab324105c3adef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c9620f11acfd2b528959d6cbab324105c3adef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c9620f11acfd2b528959d6cbab324105c3adef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c9620f11acfd2b528959d6cbab324105c3adef/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb66a11396335b5f4e5914806fcb2dc6165edf6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb66a11396335b5f4e5914806fcb2dc6165edf6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb66a11396335b5f4e5914806fcb2dc6165edf6f"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 51,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2a2079d5e3ebf715d72fdc3f738c6b074f858d95",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 51,
        "deletions": 3,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c9620f11acfd2b528959d6cbab324105c3adef/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c9620f11acfd2b528959d6cbab324105c3adef/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=46c9620f11acfd2b528959d6cbab324105c3adef",
        "patch": "@@ -43,6 +43,7 @@ def __init__(self):\n         self.last_pong = msg_pong(0)\n         self.sleep_time = 0.05\n         self.getdataset = set()\n+        self.last_reject = None\n \n     def add_connection(self, conn):\n         self.connection = conn\n@@ -68,7 +69,7 @@ def on_pong(self, conn, message):\n \n     def on_reject(self, conn, message):\n         self.last_reject = message\n-        #print message\n+        #print (message)\n \n     # Syncing helpers\n     def sync(self, test_function, timeout=60):\n@@ -136,13 +137,17 @@ def request_block(self, blockhash, inv_type, timeout=60):\n         self.wait_for_block(blockhash, timeout)\n         return self.last_block\n \n-    def test_transaction_acceptance(self, tx, with_witness, accepted):\n+    def test_transaction_acceptance(self, tx, with_witness, accepted, reason=None):\n         tx_message = msg_tx(tx)\n         if with_witness:\n             tx_message = msg_witness_tx(tx)\n         self.send_message(tx_message)\n         self.sync_with_ping()\n         assert_equal(tx.hash in self.connection.rpc.getrawmempool(), accepted)\n+        if (reason != None and not accepted):\n+            # Check the rejection reason as well.\n+            with mininode_lock:\n+                assert_equal(self.last_reject.reason, reason)\n \n     # Test whether a witness block had the correct effect on the tip\n     def test_witness_block(self, block, accepted, with_witness=True):\n@@ -277,9 +282,52 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n+        sync_blocks(self.nodes)\n+\n+        # Create a p2sh output -- this is so we can pass the standardness\n+        # rules (an anyone-can-spend OP_TRUE would be rejected, if not wrapped\n+        # in P2SH).\n+        p2sh_program = CScript([OP_TRUE])\n+        p2sh_pubkey = hash160(p2sh_program)\n+        scriptPubKey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+\n+        # Now check that unnecessary witnesses can't be used to blind a node\n+        # to a transaction, eg by violating standardness checks.\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptPubKey))\n+        tx2.rehash()\n+        self.test_node.test_transaction_acceptance(tx2, False, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # We'll add an unnecessary witness to this transaction that would cause\n+        # it to be too large according to IsStandard.\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, scriptPubKey))\n+        tx3.wit.vtxinwit.append(CTxinWitness())\n+        tx3.wit.vtxinwit[0].scriptWitness.stack = [b'a'*400000]\n+        tx3.rehash()\n+        self.std_node.test_transaction_acceptance(tx3, True, False, b'no-witness-yet')\n+\n+        # If we send without witness, it should be accepted.\n+        self.std_node.test_transaction_acceptance(tx3, False, True)\n+\n+        # Now create a new anyone-can-spend utxo for the next test.\n+        tx4 = CTransaction()\n+        tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), CScript([p2sh_program])))\n+        tx4.vout.append(CTxOut(tx3.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx4.rehash()\n+        self.test_node.test_transaction_acceptance(tx3, False, True)\n+        self.test_node.test_transaction_acceptance(tx4, False, True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n         # Update our utxo list; we spent the first entry.\n         self.utxo.pop(0)\n-        self.utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n+        self.utxo.append(UTXO(tx4.sha256, 0, tx4.vout[0].nValue))\n \n \n     # Mine enough blocks for segwit's vb state to be 'started'."
      }
    ]
  }
]