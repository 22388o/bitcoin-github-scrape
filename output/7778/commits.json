[
  {
    "sha": "fa524d9ddbad0a03f9eb974100fb3b6001045645",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUyNGQ5ZGRiYWQwYTAzZjllYjk3NDEwMGZiM2I2MDAxMDQ1NjQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-19T20:36:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-31T16:35:17Z"
      },
      "message": "[qa] Use python2/3 syntax",
      "tree": {
        "sha": "35e826d3fc5015df5e86989b68a1cec847c105b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35e826d3fc5015df5e86989b68a1cec847c105b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa524d9ddbad0a03f9eb974100fb3b6001045645",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa524d9ddbad0a03f9eb974100fb3b6001045645",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa524d9ddbad0a03f9eb974100fb3b6001045645",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa524d9ddbad0a03f9eb974100fb3b6001045645/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28ad4d9fc2be102786a8c6c32ebecb466b2a03dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ad4d9fc2be102786a8c6c32ebecb466b2a03dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28ad4d9fc2be102786a8c6c32ebecb466b2a03dd"
      }
    ],
    "stats": {
      "total": 153,
      "additions": 78,
      "deletions": 75
    },
    "files": [
      {
        "sha": "6d3bda10ee6d81e78100a89751c5e9ac2639945a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -32,13 +32,13 @@\n from tests_config import *\n \n #If imported values are not defined then set to zero (or disabled)\n-if not vars().has_key('ENABLE_WALLET'):\n+if 'ENABLE_WALLET' not in vars():\n     ENABLE_WALLET=0\n-if not vars().has_key('ENABLE_BITCOIND'):\n+if 'ENABLE_BITCOIND' not in vars():\n     ENABLE_BITCOIND=0\n-if not vars().has_key('ENABLE_UTILS'):\n+if 'ENABLE_UTILS' not in vars():\n     ENABLE_UTILS=0\n-if not vars().has_key('ENABLE_ZMQ'):\n+if 'ENABLE_ZMQ' not in vars():\n     ENABLE_ZMQ=0\n     \n # python-zmq may not be installed. Handle this gracefully and with some helpful info"
      },
      {
        "sha": "316c5fe0904cc045a3799b843911f8e85c07eeb3",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n from binascii import unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n \n def cltv_invalidate(tx):\n@@ -60,7 +60,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "f391cb0b7aab46aaddd97c2cf51cc60bf4572a11",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n from binascii import unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n \n '''\n@@ -119,15 +119,15 @@ def create_transaction(self, node, txid, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(rawtx))\n+        f = BytesIO(unhexlify(rawtx))\n         tx.deserialize(f)\n         return tx\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "445c04494442a39a4f9f9738d104396e9134f8e1",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n from binascii import hexlify, unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n import itertools\n \n@@ -53,15 +53,15 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(rawtx))\n+        f = BytesIO(unhexlify(rawtx))\n         tx.deserialize(f)\n         tx.nVersion = 2\n         return tx\n \n     def sign_transaction(self, node, tx):\n         signresult = node.signrawtransaction(hexlify(tx.serialize()))\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n@@ -217,4 +217,4 @@ def mtp_invalidate(self, tx):\n         tx.nLockTime = self.last_block_time\n \n if __name__ == '__main__':\n-    BIP9SoftForksTest().main()\n\\ No newline at end of file\n+    BIP9SoftForksTest().main()"
      },
      {
        "sha": "f0d81a6f441c050cc804361c6e65aa1a76017291",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n from binascii import unhexlify\n-import cStringIO\n+from io import BytesIO\n import time\n \n # A canonical signature consists of: \n@@ -68,7 +68,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        f = BytesIO(unhexlify(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "2dfafac2fc1805074ca27f3a57f8732bce1fd685",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.util import *\n from test_framework.mininode import *\n from binascii import hexlify, unhexlify\n-from cStringIO import StringIO\n+from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n     \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n@@ -131,7 +131,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n         txSave = CTransaction()\n-        txSave.deserialize(StringIO(unhexlify(tx)))\n+        txSave.deserialize(BytesIO(unhexlify(tx)))\n \n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'"
      },
      {
        "sha": "cb868029fa327601abf766d642981161fd308a33",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -32,15 +32,15 @@ def run_test (self):\n         # Checking mining to an address without a wallet\n         try:\n             self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"Invalid address\" not in e.error['message'])\n             assert(\"ProcessNewBlock, block not accepted\" not in e.error['message'])\n             assert(\"Couldn't create new block\" not in e.error['message'])\n \n         try:\n             self.nodes[0].generatetoaddress(1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n             raise AssertionError(\"Must not mine to invalid address!\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"Invalid address\" in e.error['message'])\n \n if __name__ == '__main__':"
      },
      {
        "sha": "82f2f4f5c52b88226910ea55e023c82f2e043cfb",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -209,7 +209,7 @@ def run_test(self):\n         matchingOuts = 0\n         for i, out in enumerate(dec_tx['vout']):\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n             else:\n                 assert_equal(i, rawtxfund['changepos'])\n@@ -249,7 +249,7 @@ def run_test(self):\n         matchingOuts = 0\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n \n         assert_equal(matchingOuts, 1)\n@@ -291,7 +291,7 @@ def run_test(self):\n         matchingOuts = 0\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n-            if outputs.has_key(out['scriptPubKey']['addresses'][0]):\n+            if out['scriptPubKey']['addresses'][0] in outputs:\n                 matchingOuts+=1\n \n         assert_equal(matchingOuts, 2)\n@@ -309,7 +309,7 @@ def run_test(self):\n         try:\n             rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n             raise AssertionError(\"Spent more than available\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"Insufficient\" in e.error['message'])\n \n "
      },
      {
        "sha": "db875800d4f0fce5d3c0a9915af95e3633c10330",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -82,7 +82,7 @@ def run_test (self):\n         #Import with no affiliated address\n         try:\n             result1 = self.nodes[1].importprunedfunds(rawtxn1, proof1, \"\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert('No addresses' in errorString)\n@@ -119,7 +119,7 @@ def run_test (self):\n \n         try:\n             self.nodes[1].removeprunedfunds(txnid1)\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert('does not exist' in errorString)"
      },
      {
        "sha": "5253d49c308f758497413a746b8a8e937c0251d9",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -46,7 +46,7 @@ def run_test(self):\n         try:\n             addr = nodes[0].getnewaddress()\n             raise AssertionError('Keypool should be exhausted after one address')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n         # put three new keys in the keypool\n@@ -66,7 +66,7 @@ def run_test(self):\n         try:\n             addr = nodes[0].getrawchangeaddress()\n             raise AssertionError('Keypool should be exhausted after three addresses')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n         # refill keypool with three new addresses\n@@ -84,7 +84,7 @@ def run_test(self):\n         try:\n             nodes[0].generate(1)\n             raise AssertionError('Keypool should be exhausted after three addesses')\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(e.error['code']==-12)\n \n     def setup_chain(self):"
      },
      {
        "sha": "c4eca519b7cf93a1c96183648be64891bec236fa",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -8,12 +8,12 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import CTransaction, COIN\n-import cStringIO\n+from io import BytesIO\n import binascii\n \n def txFromHex(hexstring):\n     tx = CTransaction()\n-    f = cStringIO.StringIO(binascii.unhexlify(hexstring))\n+    f = BytesIO(binascii.unhexlify(hexstring))\n     tx.deserialize(f)\n     return tx\n "
      },
      {
        "sha": "9f660c8bdadeb279bdb79c17bf2101ba0c0983e7",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -59,7 +59,7 @@ def run_test(self):\n         errorString = \"\"\n         try:\n             rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"Missing inputs\" in errorString)"
      },
      {
        "sha": "3c8a405bdd044f19616d8bc87ab2634a0cc1d801",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -11,8 +11,9 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from struct import *\n+from io import BytesIO\n+from codecs import encode\n import binascii\n-import StringIO\n \n try:\n     import http.client as httplib\n@@ -146,7 +147,7 @@ def run_test(self):\n         binaryRequest += pack(\"i\", 0)\n \n         bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n-        output = StringIO.StringIO()\n+        output = BytesIO()\n         output.write(bin_response)\n         output.seek(0)\n         chainHeight = unpack(\"i\", output.read(4))[0]\n@@ -233,15 +234,15 @@ def run_test(self):\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n-        assert_equal(response_str.encode(\"hex\")[0:160], response_hex_str[0:160])\n+        assert_equal(encode(response_str, \"hex\")[0:160], response_hex_str[0:160])\n \n         # compare with hex block header\n         response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n         assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(response_header_str.encode(\"hex\")[0:160], response_header_hex_str[0:160])\n+        assert_equal(encode(response_header_str, \"hex\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n         block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')"
      },
      {
        "sha": "6274cd05301e63a6d63d70586dfa56132bff872b",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -105,7 +105,7 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n         print([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n     delta = 1.0e-6 # account for rounding error\n     last_e = max(fees_seen)\n-    for e in filter(lambda x: x >= 0, all_estimates):\n+    for e in [x for x in all_estimates if x >= 0]:\n         # Estimates should be within the bounds of what transactions fees actually were:\n         if float(e)+delta < min(fees_seen) or float(e)-delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\""
      },
      {
        "sha": "73d9ffbb2fe0523696fe7f25cf31f433c4343d00",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -3,8 +3,9 @@\n #             and for constructing a getheaders message\n #\n \n-from mininode import *\n+from .mininode import *\n import dbm\n+from io import BytesIO\n \n class BlockStore(object):\n     def __init__(self, datadir):\n@@ -21,7 +22,7 @@ def get(self, blockhash):\n             serialized_block = self.blockDB[repr(blockhash)]\n         except KeyError:\n             return None\n-        f = cStringIO.StringIO(serialized_block)\n+        f = BytesIO(serialized_block)\n         ret = CBlock()\n         ret.deserialize(f)\n         ret.calc_sha256()\n@@ -115,7 +116,7 @@ def get(self, txhash):\n             serialized_tx = self.txDB[repr(txhash)]\n         except KeyError:\n             return None\n-        f = cStringIO.StringIO(serialized_tx)\n+        f = BytesIO(serialized_tx)\n         ret = CTransaction()\n         ret.deserialize(f)\n         ret.calc_sha256()"
      },
      {
        "sha": "425e6dcdde419b62de6ea25bcaf33e460204bfaf",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -4,8 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from mininode import *\n-from script import CScript, OP_TRUE, OP_CHECKSIG\n+from .mininode import *\n+from .script import CScript, OP_TRUE, OP_CHECKSIG\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):"
      },
      {
        "sha": "6279070fbc1bb649c26425fc384338c6bfe370c7",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -4,9 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from mininode import *\n-from blockstore import BlockStore, TxStore\n-from util import p2p_port\n+from .mininode import *\n+from .blockstore import BlockStore, TxStore\n+from .util import p2p_port\n \n '''\n This is a tool for comparing two or more bitcoinds to each other"
      },
      {
        "sha": "07d1827dfe28540fa23226bbcb8d046946521feb",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -24,7 +24,8 @@\n import time\n import sys\n import random\n-import cStringIO\n+from io import BytesIO\n+from codecs import encode\n import hashlib\n from threading import RLock\n from threading import Thread\n@@ -75,12 +76,12 @@ def deser_string(f):\n \n def ser_string(s):\n     if len(s) < 253:\n-        return chr(len(s)) + s\n+        return struct.pack(\"B\", len(s)) + s\n     elif len(s) < 0x10000:\n-        return chr(253) + struct.pack(\"<H\", len(s)) + s\n+        return struct.pack(\"B\", 253) + struct.pack(\"<H\", len(s)) + s\n     elif len(s) < 0x100000000L:\n-        return chr(254) + struct.pack(\"<I\", len(s)) + s\n-    return chr(255) + struct.pack(\"<Q\", len(s)) + s\n+        return struct.pack(\"B\", 254) + struct.pack(\"<I\", len(s)) + s\n+    return struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(s)) + s\n \n \n def deser_uint256(f):\n@@ -132,13 +133,13 @@ def deser_vector(f, c):\n def ser_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n     for i in l:\n         r += i.serialize()\n     return r\n@@ -162,13 +163,13 @@ def deser_uint256_vector(f):\n def ser_uint256_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n     for i in l:\n         r += ser_uint256(i)\n     return r\n@@ -192,13 +193,13 @@ def deser_string_vector(f):\n def ser_string_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n     for sv in l:\n         r += ser_string(sv)\n     return r\n@@ -222,20 +223,20 @@ def deser_int_vector(f):\n def ser_int_vector(l):\n     r = \"\"\n     if len(l) < 253:\n-        r = chr(len(l))\n+        r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = chr(253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n     elif len(l) < 0x100000000L:\n-        r = chr(254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n     else:\n-        r = chr(255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n     for i in l:\n         r += struct.pack(\"<i\", i)\n     return r\n \n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n-    obj.deserialize(cStringIO.StringIO(binascii.unhexlify(hex_string)))\n+    obj.deserialize(BytesIO(binascii.unhexlify(hex_string)))\n     return obj\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n@@ -423,7 +424,7 @@ def rehash(self):\n     def calc_sha256(self):\n         if self.sha256 is None:\n             self.sha256 = uint256_from_str(hash256(self.serialize()))\n-        self.hash = hash256(self.serialize())[::-1].encode('hex_codec')\n+        self.hash = encode(hash256(self.serialize())[::-1], 'hex')\n \n     def is_valid(self):\n         self.calc_sha256()\n@@ -492,7 +493,7 @@ def calc_sha256(self):\n             r += struct.pack(\"<I\", self.nBits)\n             r += struct.pack(\"<I\", self.nNonce)\n             self.sha256 = uint256_from_str(hash256(r))\n-            self.hash = hash256(r)[::-1].encode('hex_codec')\n+            self.hash = encode(hash256(r)[::-1], 'hex')\n \n     def rehash(self):\n         self.sha256 = None\n@@ -1281,7 +1282,7 @@ def got_data(self):\n                     raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n                 self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n             if command in self.messagemap:\n-                f = cStringIO.StringIO(msg)\n+                f = BytesIO(msg)\n                 t = self.messagemap[command]()\n                 t.deserialize(f)\n                 self.got_message(t)"
      },
      {
        "sha": "12327a6c5f4a9fb3e7e43e9778d5501828c1c33d",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -117,7 +117,7 @@ def handle(self):\n             self.serv.queue.put(cmdin)\n             print('Proxy: ', cmdin)\n             # Fall through to disconnect\n-        except Exception,e:\n+        except Exception as e:\n             traceback.print_exc(file=sys.stderr)\n             self.serv.queue.put(e)\n         finally:"
      },
      {
        "sha": "19ee4726093de4b2770b082abc39a503d7253399",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -26,7 +26,7 @@\n     check_json_precision,\n     initialize_chain_clean,\n )\n-from authproxy import AuthServiceProxy, JSONRPCException\n+from .authproxy import AuthServiceProxy, JSONRPCException\n \n \n class BitcoinTestFramework(object):\n@@ -140,7 +140,7 @@ def main(self):\n             print(\"JSONRPC error: \"+e.error['message'])\n             traceback.print_tb(sys.exc_info()[2])\n         except AssertionError as e:\n-            print(\"Assertion failed: \"+e.message)\n+            print(\"Assertion failed: \"+ str(e))\n             traceback.print_tb(sys.exc_info()[2])\n         except Exception as e:\n             print(\"Unexpected exception caught during testing: \"+str(e))"
      },
      {
        "sha": "cb876aae5cb905543efd1a4ce4ac6e15a2b81666",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa524d9ddbad0a03f9eb974100fb3b6001045645/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "patch": "@@ -249,15 +249,15 @@ def run_test (self):\n         errorString = \"\"\n         try:\n             txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"Invalid amount\" in errorString)\n \n         errorString = \"\"\n         try:\n             self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             errorString = e.error['message']\n \n         assert(\"not an integer\" in errorString)\n@@ -271,7 +271,7 @@ def run_test (self):\n         # Check that the txid and balance is found by node1\n         try:\n             self.nodes[1].gettransaction(cbTxId)\n-        except JSONRPCException,e:\n+        except JSONRPCException as e:\n             assert(\"Invalid or non-wallet transaction id\" not in e.error['message'])\n \n         #check if wallet or blochchain maintenance changes the balance"
      }
    ]
  },
  {
    "sha": "fa2cea163b49a97e2a18aa125e41170d60ce59cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJjZWExNjNiNDlhOTdlMmExOGFhMTI1ZTQxMTcwZDYwY2U1OWNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-20T17:18:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-01T19:23:30Z"
      },
      "message": "[qa] rpc-tests: Properly use integers, floats",
      "tree": {
        "sha": "02d1c4fc64dfb2d72e2efb12a4b63392085a9036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02d1c4fc64dfb2d72e2efb12a4b63392085a9036"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2cea163b49a97e2a18aa125e41170d60ce59cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cea163b49a97e2a18aa125e41170d60ce59cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2cea163b49a97e2a18aa125e41170d60ce59cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cea163b49a97e2a18aa125e41170d60ce59cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa524d9ddbad0a03f9eb974100fb3b6001045645",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa524d9ddbad0a03f9eb974100fb3b6001045645"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 45,
      "deletions": 45
    },
    "files": [
      {
        "sha": "54559c3541f2e8e52b7c2d258b9e3f60b394af7c",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -70,7 +70,7 @@ def get_tests(self):\n         height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n         ''' 98 more version 3 blocks '''\n         test_blocks = []"
      },
      {
        "sha": "377a35b6872c70d2102d13f51c895b25ceec3c11",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -61,7 +61,7 @@ def test_disable_flag(self):\n         utxo = utxos[0]\n \n         tx1 = CTransaction()\n-        value = satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN\n+        value = int(satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN)\n \n         # Check that the disable flag disables relative locktime.\n         # If sequence locks were used, this would require 1 block for the\n@@ -179,8 +179,8 @@ def test_sequence_lock_confirmed_inputs(self):\n                 tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n                 value += utxos[j][\"amount\"]*COIN\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n-            tx_size = len(ToHex(tx))/2 + 120*num_inputs + 50\n-            tx.vout.append(CTxOut(value-self.relayfee*tx_size*COIN/1000, CScript([b'a'])))\n+            tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n+            tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n             rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n \n             try:"
      },
      {
        "sha": "98975e719335c4d6027e241c801e247eeca71e5f",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -91,7 +91,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n "
      },
      {
        "sha": "95be385d93fb0e9de91ab9295282e92939531753",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -78,7 +78,7 @@ def get_tests(self):\n         height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n         ''' 98 more version 2 blocks '''\n         test_blocks = []"
      },
      {
        "sha": "82c9e48a497356262b95f37312dffff6546221d1",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n \n         watchonly_address = self.nodes[0].getnewaddress()\n         watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n-        watchonly_amount = 200\n+        watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n         self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10)"
      },
      {
        "sha": "8fe72d95d1d0d34f9af6b53487fac73f203a95eb",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -192,7 +192,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n-        tx3_b.vout[0].nValue -= 0.004 * COIN # bump the fee\n+        tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n         tx3_b = binascii.hexlify(tx3_b.serialize()).decode('utf-8')\n         tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)"
      },
      {
        "sha": "be45fecb5b32ab6029b47c5f0c365bace2c919dc",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -177,7 +177,7 @@ def run_test(self):\n         max_bytes_per_day = 200*1024*1024\n         daily_buffer = 144 * MAX_BLOCK_SIZE\n         max_bytes_available = max_bytes_per_day - daily_buffer\n-        success_count = max_bytes_available / old_block_size\n+        success_count = max_bytes_available // old_block_size\n \n         # 144MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~70 tries."
      },
      {
        "sha": "e429fcc5fe9d42eddae0d1eff13e9de5c6bcf6e8",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -150,7 +150,7 @@ def run_test(self):\n         # 2. Send one block that builds on each tip.\n         # This should be accepted.\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n-        block_time = time.time() + 1\n+        block_time = int(time.time()) + 1\n         for i in xrange(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()"
      },
      {
        "sha": "131350c98ddf04626d85de8414661b8837c40849",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -269,15 +269,15 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         \n         # Test that a block with a lot of checksigs is okay\n-        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50 - 1))\n+        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50 - 1))\n         tip(13)\n         block(15, spend=out5, script=lots_of_checksigs)\n         yield accepted()\n \n \n         # Test that a block with too many checksigs is rejected\n         out6 = get_spendable_output()\n-        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50))\n+        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50))\n         block(16, spend=out6, script=too_many_checksigs)\n         yield rejected(RejectResult(16, 'bad-blk-sigops'))\n "
      },
      {
        "sha": "dd2adea950f2329876af79256dcd49e47699a5a0",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.util import *\n \n def calc_usage(blockdir):\n-    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f))/(1024*1024)\n+    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n \n@@ -56,7 +56,7 @@ def create_big_chain(self):\n         self.nodes[1].generate(200)\n         sync_blocks(self.nodes[0:2])\n         self.nodes[0].generate(150)\n-        # Then mine enough full blocks to create more than 550MB of data\n+        # Then mine enough full blocks to create more than 550MiB of data\n         for i in xrange(645):\n             self.mine_full_block(self.nodes[0], self.address[0])\n \n@@ -66,7 +66,7 @@ def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n         print \"Success\"\n-        print \"Though we're already using more than 550MB, current usage:\", calc_usage(self.prunedir)\n+        print \"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir)\n         print \"Mining 25 more blocks should cause the first block file to be pruned\"\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n         for i in xrange(25):"
      },
      {
        "sha": "b951900c4dbd94cd4481ddbddbe7d20dfbdaaf59",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -119,7 +119,7 @@ def run_test(self):\n \n     def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -143,7 +143,7 @@ def test_simple_doublespend(self):\n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n@@ -235,7 +235,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n                                   _total_txs=_total_txs):\n                     yield x\n \n-        fee = 0.0001*COIN\n+        fee = int(0.0001*COIN)\n         n = MAX_REPLACEMENT_LIMIT\n         tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n         assert_equal(len(tree_txs), n)\n@@ -268,7 +268,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         # Try again, but with more total transactions than the \"max txs\n         # double-spent at once\" anti-DoS limit.\n         for n in (MAX_REPLACEMENT_LIMIT+1, MAX_REPLACEMENT_LIMIT*2):\n-            fee = 0.0001*COIN\n+            fee = int(0.0001*COIN)\n             tx0_outpoint = make_utxo(self.nodes[0], initial_nValue)\n             tree_txs = list(branch(tx0_outpoint, initial_nValue, n, fee=fee))\n             assert_equal(len(tree_txs), n)\n@@ -291,7 +291,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n     def test_replacement_feeperkb(self):\n         \"\"\"Replacement requires fee-per-KB to be higher\"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -303,7 +303,7 @@ def test_replacement_feeperkb(self):\n         # rejected.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.001*COIN, CScript([b'a'*999000]))]\n+        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*999000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         try:\n@@ -315,12 +315,12 @@ def test_replacement_feeperkb(self):\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n-        utxo1 = make_utxo(self.nodes[0], 1.2*COIN)\n-        utxo2 = make_utxo(self.nodes[0], 3.0*COIN)\n+        utxo1 = make_utxo(self.nodes[0], int(1.2*COIN))\n+        utxo2 = make_utxo(self.nodes[0], 3*COIN)\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n-        tx1a.vout = [CTxOut(1.1*COIN, CScript([b'a']))]\n+        tx1a.vout = [CTxOut(int(1.1*COIN), CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n@@ -343,7 +343,7 @@ def test_spends_of_conflicting_outputs(self):\n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n-        tx1b.vout = [CTxOut(1.0*COIN, CScript([b'a']))]\n+        tx1b.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1b_hex = txToHex(tx1b)\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n         tx1b_txid = int(tx1b_txid, 16)\n@@ -363,12 +363,12 @@ def test_spends_of_conflicting_outputs(self):\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n-        confirmed_utxo = make_utxo(self.nodes[0], 1.1*COIN)\n-        unconfirmed_utxo = make_utxo(self.nodes[0], 0.1*COIN, False)\n+        confirmed_utxo = make_utxo(self.nodes[0], int(1.1*COIN))\n+        unconfirmed_utxo = make_utxo(self.nodes[0], int(0.1*COIN), False)\n \n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n-        tx1.vout = [CTxOut(1.0*COIN, CScript([b'a']))]\n+        tx1.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1_hex = txToHex(tx1)\n         tx1_txid = self.nodes[0].sendrawtransaction(tx1_hex, True)\n \n@@ -392,7 +392,7 @@ def test_too_many_replacements(self):\n         # Start by creating a single transaction with many outputs\n         initial_nValue = 10*COIN\n         utxo = make_utxo(self.nodes[0], initial_nValue)\n-        fee = 0.0001*COIN\n+        fee = int(0.0001*COIN)\n         split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n         actual_fee = initial_nValue - split_value*(MAX_REPLACEMENT_LIMIT+1)\n \n@@ -445,7 +445,7 @@ def test_too_many_replacements(self):\n \n     def test_opt_in(self):\n         \"\"\" Replacing should only work if orig tx opted in \"\"\"\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         # Create a non-opting in transaction\n         tx1a = CTransaction()\n@@ -457,7 +457,7 @@ def test_opt_in(self):\n         # Shouldn't be able to double-spend\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n \n         try:\n@@ -468,7 +468,7 @@ def test_opt_in(self):\n             print tx1b_txid\n             assert(False)\n \n-        tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         # Create a different non-opting in transaction\n         tx2a = CTransaction()\n@@ -480,7 +480,7 @@ def test_opt_in(self):\n         # Still shouldn't be able to double-spend\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n-        tx2b.vout = [CTxOut(0.9*COIN, CScript([b'b']))]\n+        tx2b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx2b_hex = txToHex(tx2b)\n \n         try:\n@@ -500,19 +500,19 @@ def test_opt_in(self):\n         tx3a = CTransaction()\n         tx3a.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0xffffffff),\n                     CTxIn(COutPoint(tx2a_txid, 0), nSequence=0xfffffffd)]\n-        tx3a.vout = [CTxOut(0.9*COIN, CScript([b'c'])), CTxOut(0.9*COIN, CScript([b'd']))]\n+        tx3a.vout = [CTxOut(int(0.9*COIN), CScript([b'c'])), CTxOut(int(0.9*COIN), CScript([b'd']))]\n         tx3a_hex = txToHex(tx3a)\n \n         self.nodes[0].sendrawtransaction(tx3a_hex, True)\n \n         tx3b = CTransaction()\n         tx3b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n-        tx3b.vout = [CTxOut(0.5*COIN, CScript([b'e']))]\n+        tx3b.vout = [CTxOut(int(0.5*COIN), CScript([b'e']))]\n         tx3b_hex = txToHex(tx3b)\n \n         tx3c = CTransaction()\n         tx3c.vin = [CTxIn(COutPoint(tx2a_txid, 0), nSequence=0)]\n-        tx3c.vout = [CTxOut(0.5*COIN, CScript([b'f']))]\n+        tx3c.vout = [CTxOut(int(0.5*COIN), CScript([b'f']))]\n         tx3c_hex = txToHex(tx3c)\n \n         self.nodes[0].sendrawtransaction(tx3b_hex, True)\n@@ -525,7 +525,7 @@ def test_prioritised_transactions(self):\n         # correctly used by replacement logic\n \n         # 1. Check that feeperkb uses modified fees\n-        tx0_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -536,7 +536,7 @@ def test_prioritised_transactions(self):\n         # Higher fee, but the actual fee per KB is much lower.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(0.001*COIN, CScript([b'a'*740000]))]\n+        tx1b.vout = [CTxOut(int(0.001*COIN), CScript([b'a'*740000]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n@@ -556,7 +556,7 @@ def test_prioritised_transactions(self):\n         assert(tx1b_txid in self.nodes[0].getrawmempool())\n \n         # 2. Check that absolute fee checks use modified fee.\n-        tx1_outpoint = make_utxo(self.nodes[0], 1.1*COIN)\n+        tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n@@ -567,7 +567,7 @@ def test_prioritised_transactions(self):\n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n-        tx2b.vout = [CTxOut(1.01*COIN, CScript([b'a']))]\n+        tx2b.vout = [CTxOut(int(1.01*COIN), CScript([b'a']))]\n         tx2b.rehash()\n         tx2b_hex = txToHex(tx2b)\n "
      },
      {
        "sha": "2c064ad8a03a954c848ca4930cff1d8107ca4900",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -219,7 +219,7 @@ def transact_and_mine(self, numblocks, mining_node):\n                 from_index = random.randint(1,2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n-                tx_kbytes = (len(txhex)/2)/1000.0\n+                tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee)/tx_kbytes)\n             sync_mempools(self.nodes[0:3],.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]"
      },
      {
        "sha": "afa0f5f9ba5ecd44c149c8f8780dfbe7b0ee650b",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -29,7 +29,7 @@ def serialize_script_num(value):\n     neg = value < 0\n     absvalue = -value if neg else value\n     while (absvalue):\n-        r.append(chr(absvalue & 0xff))\n+        r.append(int(absvalue & 0xff))\n         absvalue >>= 8\n     if r[-1] & 0x80:\n         r.append(0x80 if neg else 0)"
      },
      {
        "sha": "0c40730f9005e8dcc89a80c7b6a9bd91a081432a",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -641,7 +641,7 @@ class msg_version(object):\n     def __init__(self):\n         self.nVersion = MY_VERSION\n         self.nServices = 1\n-        self.nTime = time.time()\n+        self.nTime = int(time.time())\n         self.addrTo = CAddress()\n         self.addrFrom = CAddress()\n         self.nNonce = random.getrandbits(64)\n@@ -986,7 +986,7 @@ class msg_reject(object):\n \n     def __init__(self):\n         self.message = \"\"\n-        self.code = \"\"\n+        self.code = 0\n         self.reason = \"\"\n         self.data = 0L\n "
      },
      {
        "sha": "4e4c81d3971997f1bc0d77228b1d638c3d4e8a23",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cea163b49a97e2a18aa125e41170d60ce59cc/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "patch": "@@ -45,7 +45,7 @@ def _convert_ip_port(array):\n     # convert host from mangled-per-four-bytes form as used by kernel\n     host = binascii.unhexlify(host)\n     host_out = ''\n-    for x in range(0, len(host)/4):\n+    for x in range(0, len(host) // 4):\n         (val,) = struct.unpack('=I', host[x*4:(x+1)*4])\n         host_out += '%08x' % val\n "
      }
    ]
  },
  {
    "sha": "faaa3c9b6546d9a64cece4ff0223f0b167feb6ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFhM2M5YjY1NDZkOWE2NGNlY2U0ZmYwMjIzZjBiMTY3ZmViNmZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-31T16:33:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-01T19:23:49Z"
      },
      "message": "[qa] mininode: Catch exceptions in got_data",
      "tree": {
        "sha": "da9ada94df67d9850c4914cc602c65a4ed24df65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da9ada94df67d9850c4914cc602c65a4ed24df65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cea163b49a97e2a18aa125e41170d60ce59cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2cea163b49a97e2a18aa125e41170d60ce59cc"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 39,
      "deletions": 36
    },
    "files": [
      {
        "sha": "b06905301f4a82a488df19910c3e4a06d2d71c72",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 39,
        "deletions": 36,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=faaa3c9b6546d9a64cece4ff0223f0b167feb6ff",
        "patch": "@@ -1252,43 +1252,46 @@ def handle_write(self):\n             self.sendbuf = self.sendbuf[sent:]\n \n     def got_data(self):\n-        while True:\n-            if len(self.recvbuf) < 4:\n-                return\n-            if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n-                raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n-            if self.ver_recv < 209:\n-                if len(self.recvbuf) < 4 + 12 + 4:\n-                    return\n-                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n-                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n-                checksum = None\n-                if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n-                    return\n-                msg = self.recvbuf[4+12+4:4+12+4+msglen]\n-                self.recvbuf = self.recvbuf[4+12+4+msglen:]\n-            else:\n-                if len(self.recvbuf) < 4 + 12 + 4 + 4:\n-                    return\n-                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n-                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n-                checksum = self.recvbuf[4+12+4:4+12+4+4]\n-                if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n+        try:\n+            while True:\n+                if len(self.recvbuf) < 4:\n                     return\n-                msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n-                th = sha256(msg)\n-                h = sha256(th)\n-                if checksum != h[:4]:\n-                    raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n-                self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n-            if command in self.messagemap:\n-                f = BytesIO(msg)\n-                t = self.messagemap[command]()\n-                t.deserialize(f)\n-                self.got_message(t)\n-            else:\n-                self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n-                                    repr(msg))\n+                if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n+                    raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n+                if self.ver_recv < 209:\n+                    if len(self.recvbuf) < 4 + 12 + 4:\n+                        return\n+                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                    checksum = None\n+                    if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n+                        return\n+                    msg = self.recvbuf[4+12+4:4+12+4+msglen]\n+                    self.recvbuf = self.recvbuf[4+12+4+msglen:]\n+                else:\n+                    if len(self.recvbuf) < 4 + 12 + 4 + 4:\n+                        return\n+                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                    checksum = self.recvbuf[4+12+4:4+12+4+4]\n+                    if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n+                        return\n+                    msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n+                    th = sha256(msg)\n+                    h = sha256(th)\n+                    if checksum != h[:4]:\n+                        raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n+                    self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n+                if command in self.messagemap:\n+                    f = BytesIO(msg)\n+                    t = self.messagemap[command]()\n+                    t.deserialize(f)\n+                    self.got_message(t)\n+                else:\n+                    self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n+                                        repr(msg))\n+        except Exception as e:\n+            print 'got_data:', repr(e)\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:"
      }
    ]
  },
  {
    "sha": "444480649f08e6037f8ac178224b30a82e9ad72e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQ0ODA2NDlmMDhlNjAzN2Y4YWMxNzgyMjRiMzBhODJlOWFkNzJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-02T09:51:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-02T09:48:07Z"
      },
      "message": "[qa] mininode: Combine struct.pack format strings",
      "tree": {
        "sha": "19eb4ec2ca7a1a8ac59eba1e43e25309d0bbce81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19eb4ec2ca7a1a8ac59eba1e43e25309d0bbce81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/444480649f08e6037f8ac178224b30a82e9ad72e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444480649f08e6037f8ac178224b30a82e9ad72e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/444480649f08e6037f8ac178224b30a82e9ad72e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444480649f08e6037f8ac178224b30a82e9ad72e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faaa3c9b6546d9a64cece4ff0223f0b167feb6ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa3c9b6546d9a64cece4ff0223f0b167feb6ff"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "53f5e8805aa77a3eba3fc39fe3ec3c01abaf3f25",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/444480649f08e6037f8ac178224b30a82e9ad72e/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/444480649f08e6037f8ac178224b30a82e9ad72e/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=444480649f08e6037f8ac178224b30a82e9ad72e",
        "patch": "@@ -78,10 +78,10 @@ def ser_string(s):\n     if len(s) < 253:\n         return struct.pack(\"B\", len(s)) + s\n     elif len(s) < 0x10000:\n-        return struct.pack(\"B\", 253) + struct.pack(\"<H\", len(s)) + s\n+        return struct.pack(\"<BH\", 253, len(s)) + s\n     elif len(s) < 0x100000000L:\n-        return struct.pack(\"B\", 254) + struct.pack(\"<I\", len(s)) + s\n-    return struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(s)) + s\n+        return struct.pack(\"<BI\", 254, len(s)) + s\n+    return struct.pack(\"<BQ\", 255, len(s)) + s\n \n \n def deser_uint256(f):\n@@ -135,11 +135,11 @@ def ser_vector(l):\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for i in l:\n         r += i.serialize()\n     return r\n@@ -165,11 +165,11 @@ def ser_uint256_vector(l):\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for i in l:\n         r += ser_uint256(i)\n     return r\n@@ -195,11 +195,11 @@ def ser_string_vector(l):\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for sv in l:\n         r += ser_string(sv)\n     return r\n@@ -225,11 +225,11 @@ def ser_int_vector(l):\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n-        r = struct.pack(\"B\", 253) + struct.pack(\"<H\", len(l))\n+        r = struct.pack(\"<BH\", 253, len(l))\n     elif len(l) < 0x100000000L:\n-        r = struct.pack(\"B\", 254) + struct.pack(\"<I\", len(l))\n+        r = struct.pack(\"<BI\", 254, len(l))\n     else:\n-        r = struct.pack(\"B\", 255) + struct.pack(\"<Q\", len(l))\n+        r = struct.pack(\"<BQ\", 255, len(l))\n     for i in l:\n         r += struct.pack(\"<i\", i)\n     return r"
      }
    ]
  }
]