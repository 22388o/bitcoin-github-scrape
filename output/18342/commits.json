[
  {
    "sha": "33dd764984def9371f324d3add19ee894a0260bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2RkNzY0OTg0ZGVmOTM3MWYzMjRkM2FkZDE5ZWU4OTRhMDI2MGJm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-13T12:16:53Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-18T22:32:01Z"
      },
      "message": "doc: Add fuzzing quickstart guides for libFuzzer and afl-fuzz. Simplify instructions.",
      "tree": {
        "sha": "ebd0a675d45de5ba6527c2bd367052a910f66f00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebd0a675d45de5ba6527c2bd367052a910f66f00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33dd764984def9371f324d3add19ee894a0260bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33dd764984def9371f324d3add19ee894a0260bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33dd764984def9371f324d3add19ee894a0260bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33dd764984def9371f324d3add19ee894a0260bf/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a421e0a22f1230abd69b4661a019bed39b72205f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a421e0a22f1230abd69b4661a019bed39b72205f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a421e0a22f1230abd69b4661a019bed39b72205f"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 123,
      "deletions": 126
    },
    "files": [
      {
        "sha": "964233782105c99c2910bc2799bcf3e662eee21f",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 123,
        "deletions": 126,
        "changes": 249,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33dd764984def9371f324d3add19ee894a0260bf/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33dd764984def9371f324d3add19ee894a0260bf/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=33dd764984def9371f324d3add19ee894a0260bf",
        "patch": "@@ -1,125 +1,93 @@\n-Fuzz-testing Bitcoin Core\n-==========================\n-\n-A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n-provide an easy entry point for fuzzers and the like. In this document we'll\n-describe how to use it with AFL and libFuzzer.\n-\n-## Preparing fuzzing\n-\n-The fuzzer needs some inputs to work on, but the inputs or seeds can be used\n-interchangeably between libFuzzer and AFL.\n-\n-Extract the example seeds (or other starting inputs) into the inputs\n-directory before starting fuzzing.\n-\n-```\n-git clone https://github.com/bitcoin-core/qa-assets\n-export DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n-```\n-\n-AFL needs an input directory with examples, and an output directory where it\n-will place examples that it found. These can be anywhere in the file system,\n-we'll define environment variables to make it easy to reference them.\n-\n-So, only for AFL you need to configure the outputs path:\n-\n-```\n-mkdir outputs\n-export AFLOUT=$PWD/outputs\n-```\n-\n-libFuzzer will use the input directory as output directory.\n-\n-## AFL\n-\n-### Building AFL\n-\n-It is recommended to always use the latest version of afl:\n-```\n-wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz\n-tar -zxvf afl-latest.tgz\n-cd afl-<version>\n-make\n-export AFLPATH=$PWD\n-```\n-\n-For macOS you may need to ignore x86 compilation checks when running `make`:\n-`AFL_NO_X86=1 make`.\n-\n-### Instrumentation\n-\n-To build Bitcoin Core using AFL instrumentation (this assumes that the\n-`AFLPATH` was set as above):\n-```\n-./configure --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n-export AFL_HARDEN=1\n-make\n-```\n-\n-If you are using clang you will need to substitute `afl-gcc` with `afl-clang`\n-and `afl-g++` with `afl-clang++`, so the first line above becomes:\n-```\n-./configure --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-clang CXX=${AFLPATH}/afl-clang++\n-```\n-\n-We disable ccache because we don't want to pollute the ccache with instrumented\n-objects, and similarly don't want to use non-instrumented cached objects linked\n-in.\n-\n-The fuzzing can be sped up significantly (~200x) by using `afl-clang-fast` and\n-`afl-clang-fast++` in place of `afl-gcc` and `afl-g++` when compiling. When\n-compiling using `afl-clang-fast`/`afl-clang-fast++` the resulting\n-binary will be instrumented in such a way that the AFL\n-features \"persistent mode\" and \"deferred forkserver\" can be used. See\n-https://github.com/google/AFL/tree/master/llvm_mode for details.\n-\n-### Fuzzing\n-\n-To start the actual fuzzing use:\n-\n-```\n-export FUZZ_TARGET=bech32  # Pick a fuzz_target\n-mkdir ${AFLOUT}/${FUZZ_TARGET}\n-$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n-```\n-\n-You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n-will print an error and suggestion if so.\n-\n-On macOS you may need to set `AFL_NO_FORKSRV=1` to get the target to run.\n-```\n-export FUZZ_TARGET=bech32  # Pick a fuzz_target\n-mkdir ${AFLOUT}/${FUZZ_TARGET}\n-AFL_NO_FORKSRV=1 $AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n-```\n-\n-## libFuzzer\n-\n-A recent version of `clang`, the address/undefined sanitizers (ASan/UBSan) and\n-libFuzzer is needed (all found in the `compiler-rt` runtime libraries package).\n-\n-To build all fuzz targets with libFuzzer, run\n-\n-```\n-./configure --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=clang CXX=clang++\n-make\n-```\n-\n-See https://llvm.org/docs/LibFuzzer.html#running on how to run the libFuzzer\n-instrumented executable.\n-\n-Alternatively, you can run the script through the fuzzing test harness (only\n-libFuzzer supported so far). You need to pass it the inputs directory and\n-the specific test target you want to run.\n-\n-```\n-./test/fuzz/test_runner.py ${DIR_FUZZ_IN} bech32\n-```\n-\n-### macOS hints for libFuzzer\n-\n-The default clang/llvm version supplied by Apple on macOS does not include\n+# Fuzzing Bitcoin Core using libFuzzer\n+\n+## Quickstart guide\n+\n+To quickly get started fuzzing Bitcoin Core using [libFuzzer](https://llvm.org/docs/LibFuzzer.html):\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ ./autogen.sh\n+$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n+# macOS users: If you have problem with this step then make sure to read \"macOS hints for\n+# libFuzzer\" on https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md#macos-hints-for-libfuzzer\n+$ make\n+$ src/test/fuzz/process_message\n+# abort fuzzing using ctrl-c\n+```\n+\n+## Fuzzing harnesses, fuzzing output and fuzzing corpora\n+\n+[`process_message`](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/process_message.cpp) is a fuzzing harness for the [`ProcessMessage(...)` function (`net_processing`)](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp). The available fuzzing harnesses are found in [`src/test/fuzz/`](https://github.com/bitcoin/bitcoin/tree/master/src/test/fuzz).\n+\n+The fuzzer will output `NEW` every time it has created a test input that covers new areas of the code under test. For more information on how to interpret the fuzzer output, see the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html).\n+\n+If you specify a corpus directory then any new coverage increasing inputs will be saved there:\n+\n+```sh\n+$ mkdir -p process_message-seeded-from-thin-air/\n+$ src/test/fuzz/process_message process_message-seeded-from-thin-air/\n+INFO: Seed: 840522292\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55e121ef9ab8, 0x55e121f613a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55e121f613a8,0x55e1225da288),\n+INFO:        0 files found in process_message-seeded-from-thin-air/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: A corpus is not provided, starting from an empty corpus\n+#2      INITED cov: 94 ft: 95 corp: 1/1b exec/s: 0 rss: 150Mb\n+#3      NEW    cov: 95 ft: 96 corp: 2/3b lim: 4 exec/s: 0 rss: 150Mb L: 2/2 MS: 1 InsertByte-\n+#4      NEW    cov: 96 ft: 98 corp: 3/7b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 1 CrossOver-\n+#21     NEW    cov: 96 ft: 100 corp: 4/11b lim: 4 exec/s: 0 rss: 150Mb L: 4/4 MS: 2 ChangeBit-CrossOver-\n+#324    NEW    cov: 101 ft: 105 corp: 5/12b lim: 6 exec/s: 0 rss: 150Mb L: 6/6 MS: 5 CrossOver-ChangeBit-CopyPart-ChangeBit-ChangeBinInt-\n+#1239   REDUCE cov: 102 ft: 106 corp: 6/24b lim: 14 exec/s: 0 rss: 150Mb L: 13/13 MS: 5 ChangeBit-CrossOver-EraseBytes-ChangeBit-InsertRepeatedBytes-\n+#1272   REDUCE cov: 102 ft: 106 corp: 6/23b lim: 14 exec/s: 0 rss: 150Mb L: 12/12 MS: 3 ChangeBinInt-ChangeBit-EraseBytes-\n+        NEW_FUNC[1/677]: 0x55e11f456690 in std::_Function_base::~_Function_base() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_function.h:255\n+        NEW_FUNC[2/677]: 0x55e11f465800 in CDataStream::CDataStream(std::vector<unsigned char, std::allocator<unsigned char> > const&, int, int) src/./streams.h:248\n+#2125   REDUCE cov: 4820 ft: 4867 corp: 7/29b lim: 21 exec/s: 0 rss: 155Mb L: 6/12 MS: 2 CopyPart-CMP- DE: \"block\"-\n+        NEW_FUNC[1/9]: 0x55e11f64d790 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::~_Rb_tree() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:972\n+        NEW_FUNC[2/9]: 0x55e11f64d870 in std::_Rb_tree<uint256, std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > >, std::_Select1st<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >, std::less<uint256>, std::allocator<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > > >::_M_erase(std::_Rb_tree_node<std::pair<uint256 const, std::chrono::duration<long, std::ratio<1l, 1000000l> > > >*) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_tree.h:1875\n+#2228   NEW    cov: 4898 ft: 4971 corp: 8/35b lim: 21 exec/s: 0 rss: 156Mb L: 6/12 MS: 3 EraseBytes-CopyPart-PersAutoDict- DE: \"block\"-\n+        NEW_FUNC[1/5]: 0x55e11f46df70 in std::enable_if<__and_<std::allocator_traits<zero_after_free_allocator<char> >::__construct_helper<char, unsigned char const&>::type>::value, void>::type std::allocator_traits<zero_after_free_allocator<char> >::_S_construct<char, unsigned char const&>(zero_after_free_allocator<char>&, char*, unsigned char const&) /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:243\n+        NEW_FUNC[2/5]: 0x55e11f477390 in std::vector<unsigned char, std::allocator<unsigned char> >::data() /usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:1056\n+#2456   NEW    cov: 4933 ft: 5042 corp: 9/55b lim: 21 exec/s: 0 rss: 160Mb L: 20/20 MS: 3 ChangeByte-InsertRepeatedBytes-PersAutoDict- DE: \"block\"-\n+#2467   NEW    cov: 4933 ft: 5043 corp: 10/76b lim: 21 exec/s: 0 rss: 161Mb L: 21/21 MS: 1 InsertByte-\n+#4215   NEW    cov: 4941 ft: 5129 corp: 17/205b lim: 29 exec/s: 4215 rss: 350Mb L: 29/29 MS: 5 InsertByte-ChangeBit-CopyPart-InsertRepeatedBytes-CrossOver-\n+#4567   REDUCE cov: 4941 ft: 5129 corp: 17/204b lim: 29 exec/s: 4567 rss: 404Mb L: 24/29 MS: 2 ChangeByte-EraseBytes-\n+#6642   NEW    cov: 4941 ft: 5138 corp: 18/244b lim: 43 exec/s: 2214 rss: 450Mb L: 43/43 MS: 3 CopyPart-CMP-CrossOver- DE: \"verack\"-\n+# abort fuzzing using ctrl-c\n+$ ls process_message-seeded-from-thin-air/\n+349ac589fc66a09abc0b72bb4ae445a7a19e2cd8 4df479f1f421f2ea64b383cd4919a272604087a7\n+a640312c98dcc55d6744730c33e41c5168c55f09 b135de16e4709558c0797c15f86046d31c5d86d7\n+c000f7b41b05139de8b63f4cbf7d1ad4c6e2aa7f fc52cc00ec1eb1c08470e69f809ae4993fa70082\n+$ cat --show-nonprinting process_message-seeded-from-thin-air/349ac589fc66a09abc0b72bb4ae445a7a19e2cd8\n+block^@M-^?M-^?M-^?M-^?M-^?nM-^?M-^?\n+```\n+\n+In this case the fuzzer managed to create a `block` message which when passed to `ProcessMessage(...)` increased coverage.\n+\n+The project's collection of seed corpora is found in the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) repo.\n+\n+To fuzz `process_message` using the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) seed corpus:\n+\n+```sh\n+$ git clone https://github.com/bitcoin-core/qa-assets\n+$ src/test/fuzz/process_message qa-assets/fuzz_seed_corpus/process_message/\n+INFO: Seed: 1346407872\n+INFO: Loaded 1 modules   (424174 inline 8-bit counters): 424174 [0x55d8a9004ab8, 0x55d8a906c3a6),\n+INFO: Loaded 1 PC tables (424174 PCs): 424174 [0x55d8a906c3a8,0x55d8a96e5288),\n+INFO:      991 files found in qa-assets/fuzz_seed_corpus/process_message/\n+INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\n+INFO: seed corpus: files: 991 min: 1b max: 1858b total: 288291b rss: 150Mb\n+#993    INITED cov: 7063 ft: 8236 corp: 25/3821b exec/s: 0 rss: 181Mb\n+\u2026\n+```\n+\n+If you find coverage increasing inputs when fuzzing you are highly encouraged to submit them for inclusion in the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) repo.\n+\n+Every single pull request submitted against the Bitcoin Core repo is automatically tested against all inputs in the [`bitcoin-core/qa-assets`](https://github.com/bitcoin-core/qa-assets) repo. Contributing new coverage increasing inputs is an easy way to help make Bitcoin Core more robust.\n+\n+## macOS hints for libFuzzer\n+\n+The default Clang/LLVM version supplied by Apple on macOS does not include\n fuzzing libraries, so macOS users will need to install a full version, for\n example using `brew install llvm`.\n \n@@ -128,11 +96,40 @@ may need to run `./configure` with `--disable-asm` to avoid errors\n with certain assembly code from Bitcoin Core's code. See [developer notes on sanitizers](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#sanitizers)\n for more information.\n \n-You may also need to take care of giving the correct path for clang and\n-clang++, like `CC=/path/to/clang CXX=/path/to/clang++` if the non-systems\n-clang does not come first in your path.\n+You may also need to take care of giving the correct path for `clang` and\n+`clang++`, like `CC=/path/to/clang CXX=/path/to/clang++` if the non-systems\n+`clang` does not come first in your path.\n \n Full configure that was tested on macOS Catalina with `brew` installed `llvm`:\n-```\n+\n+```sh\n ./configure --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm\n ```\n+\n+Read the [libFuzzer documentation](https://llvm.org/docs/LibFuzzer.html) for more information. This [libFuzzer tutorial](https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md) might also be of interest.\n+\n+# Fuzzing Bitcoin Core using american fuzzy lop (`afl-fuzz`)\n+\n+## Quickstart guide\n+\n+To quickly get started fuzzing Bitcoin Core using [`afl-fuzz`](https://github.com/google/afl):\n+\n+```sh\n+$ git clone https://github.com/bitcoin/bitcoin\n+$ cd bitcoin/\n+$ git clone https://github.com/google/afl\n+$ make -C afl/\n+$ make -C afl/llvm_mode/\n+$ ./autogen.sh\n+$ CC=$(pwd)/afl/afl-clang-fast CXX=$(pwd)/afl/afl-clang-fast++ ./configure --enable-fuzz\n+$ make\n+# For macOS you may need to ignore x86 compilation checks when running \"make\". If so,\n+# try compiling using: AFL_NO_X86=1 make\n+$ mkdir -p inputs/ outputs/\n+$ echo A > inputs/thin-air-input\n+$ afl/afl-fuzz -i inputs/ -o outputs/ -- src/test/fuzz/bech32\n+# You may have to change a few kernel parameters to test optimally - afl-fuzz\n+# will print an error and suggestion if so.\n+```\n+\n+Read the [`afl-fuzz` documentation](https://github.com/google/afl) for more information."
      }
    ]
  }
]