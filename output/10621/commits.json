[
  {
    "sha": "f5ff6a8ac6fc080b82da328770d0351a2b86a6c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWZmNmE4YWM2ZmMwODBiODJkYTMyODc3MGQwMzUxYTJiODZhNmM3",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-06-17T17:32:40Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-06-17T18:57:27Z"
      },
      "message": "Use fixed pubkey during wallet init for default key\n\nvchDefaultKey is not used anymore except to mark a\nwallet as initialized during LoadWallet. Instead of\ntaking a key from the keypool and adding to the wallet\nsimply use a fixed key that is valid, for backwards\ncompability.",
      "tree": {
        "sha": "5cf345de8461e434e813d15fc97b13089842d996",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cf345de8461e434e813d15fc97b13089842d996"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cafe24f039e117d53288387c2720f44f27deecd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cafe24f039e117d53288387c2720f44f27deecd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cafe24f039e117d53288387c2720f44f27deecd0"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "53e7a41b16ea0f1f314059e52710224a4d45ff72",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f5ff6a8ac6fc080b82da328770d0351a2b86a6c7",
        "patch": "@@ -3066,6 +3066,7 @@ const std::string& CWallet::GetAccountName(const CScript& scriptPubKey) const\n \n bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n {\n+    assert(vchPubKey.IsFullyValid());\n     if (!CWalletDB(*dbw).WriteDefaultKey(vchPubKey))\n         return false;\n     vchDefaultKey = vchPubKey;\n@@ -3852,14 +3853,9 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             if (!walletInstance->SetHDMasterKey(masterPubKey))\n                 throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n         }\n-        CPubKey newDefaultKey;\n-        if (walletInstance->GetKeyFromPool(newDefaultKey, false)) {\n-            walletInstance->SetDefaultKey(newDefaultKey);\n-            if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\")) {\n-                InitError(_(\"Cannot write default address\") += \"\\n\");\n-                return NULL;\n-            }\n-        }\n+        // Constant key for legacy purposes to mark the wallet as initialized.\n+        CPubKey newDefaultKey(ParseHex(\"037cf8657dd81f60d83afb03168b5a7c024fa174c5c11540b6413c2d39e807c5c6\"));\n+        walletInstance->SetDefaultKey(newDefaultKey);\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n     }"
      },
      {
        "sha": "723185a809f9e6b213e3090f1a9e234684ab65c9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f5ff6a8ac6fc080b82da328770d0351a2b86a6c7",
        "patch": "@@ -807,6 +807,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n+    // Legacy method of marking wallet as initialized when IsFullyValid()\n     CPubKey vchDefaultKey;\n \n     std::set<COutPoint> setLockedCoins;"
      },
      {
        "sha": "e54d0dc592c7aacacc79f8df0e70e2dbc90e750a",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ff6a8ac6fc080b82da328770d0351a2b86a6c7/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=f5ff6a8ac6fc080b82da328770d0351a2b86a6c7",
        "patch": "@@ -56,7 +56,7 @@ def run_test (self):\n         for i in range(num_hd_adds):\n             hd_add = self.nodes[1].getnewaddress()\n             hd_info = self.nodes[1].validateaddress(hd_add)\n-            assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i+1)+\"'\")\n+            assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n@@ -83,7 +83,7 @@ def run_test (self):\n         for _ in range(num_hd_adds):\n             hd_add_2 = self.nodes[1].getnewaddress()\n             hd_info_2 = self.nodes[1].validateaddress(hd_add_2)\n-            assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_+1)+\"'\")\n+            assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n "
      }
    ]
  }
]