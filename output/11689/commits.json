[
  {
    "sha": "6bc5b7100b1182c4c060c045df9a58dada3d3eab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmM1YjcxMDBiMTE4MmM0YzA2MGMwNDVkZjlhNThkYWRhM2QzZWFi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-14T22:35:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-05-05T14:50:58Z"
      },
      "message": "Fix missing locking in CTxMemPool::check(const CCoinsViewCache *pcoins)\n\n* reading variable 'mapTx' requires holding mutex 'cs'\n* reading variable 'mapNextTx' requires holding mutex 'cs'\n* reading variable 'nCheckFrequency' requires holding mutex 'cs'",
      "tree": {
        "sha": "6b2514ac576d238d3d966f170167286528e1b5cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b2514ac576d238d3d966f170167286528e1b5cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bc5b7100b1182c4c060c045df9a58dada3d3eab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc5b7100b1182c4c060c045df9a58dada3d3eab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc5b7100b1182c4c060c045df9a58dada3d3eab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc5b7100b1182c4c060c045df9a58dada3d3eab/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66cc47be982aa431b72494f5d655c20eea17a0f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66cc47be982aa431b72494f5d655c20eea17a0f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66cc47be982aa431b72494f5d655c20eea17a0f5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bb585fc075808e6e825f78b6fa744c603ea5b7c5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc5b7100b1182c4c060c045df9a58dada3d3eab/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc5b7100b1182c4c060c045df9a58dada3d3eab/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6bc5b7100b1182c4c060c045df9a58dada3d3eab",
        "patch": "@@ -618,6 +618,7 @@ static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& m\n \n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n+    LOCK(cs);\n     if (nCheckFrequency == 0)\n         return;\n \n@@ -632,7 +633,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n     const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n \n-    LOCK(cs);\n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;"
      }
    ]
  },
  {
    "sha": "0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTJkZmE4YTY1MDkxNTA0YjI3YTBiOWQ2NmVlNDQxNWZlMmI3YjM3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-16T08:54:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-05-05T14:50:58Z"
      },
      "message": "Fix missing locking in CTxMemPool::setSanityCheck(double dFrequency)\n\n* writing variable 'nCheckFrequency' requires holding mutex 'cs'",
      "tree": {
        "sha": "35a817417141c5fd5b4667a1710965e26d45bba7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35a817417141c5fd5b4667a1710965e26d45bba7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bc5b7100b1182c4c060c045df9a58dada3d3eab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc5b7100b1182c4c060c045df9a58dada3d3eab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc5b7100b1182c4c060c045df9a58dada3d3eab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4d06d5bcf91f7a7205d7e4a9bdd9143c67b6186f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37",
        "patch": "@@ -529,7 +529,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n+    void setSanityCheck(double dFrequency = 1.0) { LOCK(cs); nCheckFrequency = static_cast<uint32_t>(dFrequency * 4294967295.0); }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "47782b49e67599585cd766c8322ca01764fe5aa7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Nzc4MmI0OWU2NzU5OTU4NWNkNzY2YzgzMjJjYTAxNzY0ZmU1YWE3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-12T23:05:53Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-05-05T14:51:22Z"
      },
      "message": "Add Clang thread safety analysis annotations",
      "tree": {
        "sha": "668dbca22e659aaf306262c76cc0af6a4bbf0b53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/668dbca22e659aaf306262c76cc0af6a4bbf0b53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47782b49e67599585cd766c8322ca01764fe5aa7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47782b49e67599585cd766c8322ca01764fe5aa7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47782b49e67599585cd766c8322ca01764fe5aa7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47782b49e67599585cd766c8322ca01764fe5aa7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e2dfa8a65091504b27a0b9d66ee4415fe2b7b37"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "d4527a1d675e31040fb1aba2e7de36c675a0a871",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47782b49e67599585cd766c8322ca01764fe5aa7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47782b49e67599585cd766c8322ca01764fe5aa7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=47782b49e67599585cd766c8322ca01764fe5aa7",
        "patch": "@@ -14,7 +14,6 @@\n #include <consensus/merkle.h>\n #include <consensus/validation.h>\n #include <hash.h>\n-#include <validation.h>\n #include <net.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "ed1b4434f9f3890da03e8aafb4610e0d6d305a03",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47782b49e67599585cd766c8322ca01764fe5aa7/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47782b49e67599585cd766c8322ca01764fe5aa7/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=47782b49e67599585cd766c8322ca01764fe5aa7",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <primitives/block.h>\n #include <txmempool.h>\n+#include <validation.h>\n \n #include <stdint.h>\n #include <memory>\n@@ -169,7 +170,7 @@ class BlockAssembler\n     /** Add transactions based on feerate including unconfirmed ancestors\n       * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n       * statistics from the package selection (for logging statistics). */\n-    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated);\n+    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n@@ -183,13 +184,13 @@ class BlockAssembler\n     bool TestPackageTransactions(const CTxMemPool::setEntries& package);\n     /** Return true if given transaction from mapTx has already been evaluated,\n       * or if the transaction's cached data in mapTx is incorrect. */\n-    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx);\n+    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n     /** Sort the package in an order that is valid to appear in a block */\n     void SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries);\n     /** Add descendants of given transactions to mapModifiedTx with ancestor\n       * state updated assuming given transactions are inBlock. Returns number\n       * of updated descendants. */\n-    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx);\n+    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n };\n \n /** Modify the extranonce in a block */"
      },
      {
        "sha": "5ca243f42eee5bccc499ecccb646e61e0b5089a0",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47782b49e67599585cd766c8322ca01764fe5aa7/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47782b49e67599585cd766c8322ca01764fe5aa7/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=47782b49e67599585cd766c8322ca01764fe5aa7",
        "patch": "@@ -106,7 +106,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n }\n \n template<typename name>\n-static void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n+static void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n     typename CTxMemPool::indexed_transaction_set::index<name>::type::iterator it = pool.mapTx.get<name>().begin();"
      },
      {
        "sha": "ca7b1cd4be38997f3b51a59b35c85dfba7c4a0eb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47782b49e67599585cd766c8322ca01764fe5aa7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47782b49e67599585cd766c8322ca01764fe5aa7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=47782b49e67599585cd766c8322ca01764fe5aa7",
        "patch": "@@ -440,7 +440,7 @@ class SaltedTxidHasher\n class CTxMemPool\n {\n private:\n-    uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n+    uint32_t nCheckFrequency GUARDED_BY(cs); //!< Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n@@ -484,7 +484,7 @@ class CTxMemPool\n     > indexed_transaction_set;\n \n     mutable CCriticalSection cs;\n-    indexed_transaction_set mapTx;\n+    indexed_transaction_set mapTx GUARDED_BY(cs);\n \n     typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;\n     std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n@@ -496,8 +496,8 @@ class CTxMemPool\n     };\n     typedef std::set<txiter, CompareIteratorByHash> setEntries;\n \n-    const setEntries & GetMemPoolParents(txiter entry) const;\n-    const setEntries & GetMemPoolChildren(txiter entry) const;\n+    const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;\n \n@@ -515,7 +515,7 @@ class CTxMemPool\n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n-    indirectmap<COutPoint, const CTransaction*> mapNextTx;\n+    indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n     std::map<uint256, CAmount> mapDeltas;\n \n     /** Create a new CTxMemPool.\n@@ -547,7 +547,7 @@ class CTxMemPool\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n \n     void clear();\n-    void _clear(); //lock free\n+    void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n     void queryHashes(std::vector<uint256>& vtxid);\n     bool isSpent(const COutPoint& outpoint) const;\n@@ -600,7 +600,7 @@ class CTxMemPool\n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything\n      *  already in it.  */\n-    void CalculateDescendants(txiter it, setEntries& setDescendants) const;\n+    void CalculateDescendants(txiter it, setEntries& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n@@ -665,17 +665,17 @@ class CTxMemPool\n      */\n     void UpdateForDescendants(txiter updateIt,\n             cacheMap &cachedDescendants,\n-            const std::set<uint256> &setExclude);\n+            const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n-    void UpdateAncestorsOf(bool add, txiter hash, setEntries &setAncestors);\n+    void UpdateAncestorsOf(bool add, txiter hash, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Set ancestor state for an entry */\n-    void UpdateEntryForAncestors(txiter it, const setEntries &setAncestors);\n+    void UpdateEntryForAncestors(txiter it, const setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** For each transaction being removed, update ancestors and any direct children.\n       * If updateDescendants is true, then also update in-mempool descendants'\n       * ancestor state. */\n-    void UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants);\n+    void UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Sever link between specified transaction and direct children. */\n-    void UpdateChildrenForRemoval(txiter entry);\n+    void UpdateChildrenForRemoval(txiter entry) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Before calling removeUnchecked for a given transaction,\n      *  UpdateForRemoveFromMempool must be called on the entire (dependent) set\n@@ -685,7 +685,7 @@ class CTxMemPool\n      *  transactions in a chain before we've updated all the state for the\n      *  removal.\n      */\n-    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n+    void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs);\n };\n \n /** "
      }
    ]
  }
]