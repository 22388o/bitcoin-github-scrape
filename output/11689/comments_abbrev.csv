promag,2017-11-15T09:37:22Z,"ACK 2abe610.\n\nUnrelated, but should read `nCheckFrequency` with the lock too?",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344537562,344537562,
practicalswift,2017-11-15T09:44:15Z,"@promag Yes, `nCheckFrequency` should probably be guarded by the mutex `cs` too. Good catch!\n\nI'll ping in @MarcoFalke and @TheBlueMatt for a comment. What do you say? :-)\n\n```\n$ git blame src/txmempool.h | grep nCheckFrequency\nfada0c42 (MarcoFalke               2016-04-03 11:49:36 +0200 415)     uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n53a6590f (Ma",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344539424,344539424,
promag,2017-11-15T09:54:30Z,"Actually `nCheckFrequency` doesn't change, only set in\n```\nsrc/init.cpp:        mempool.setSanityCheck(1.0 / ratio);\n```",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344542147,344542147,
TheBlueMatt,2017-11-15T22:47:59Z,"Technically there is no issue here - mempool (should only be) modified with cs_main and mempool.check is only called with cs_main. Indeed, probably just move the lock to the top of the function. Unless you want to go to the trouble of making nCheckFrequency a const, best to fix it for the static analysis just like the rest.",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344755314,344755314,
practicalswift,2017-11-16T09:10:05Z,@TheBlueMatt @promag Thanks for reviewing! An updated version has now been pushed taking into account the formal locking requirements of `nCheckFrequency` too. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-344860330,344860330,
practicalswift,2017-11-23T06:46:45Z,"Added a commit with the Clang thread safety analysis annotations to facilitate reviewing. @promag, would you mind re-reviewing? :-)",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-346541344,346541344,
practicalswift,2017-11-29T23:06:36Z,"Updated with annotations moved over to the header files.\n\nThe `EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)` annotations for `BlockAssembler::SkipMapTxEntry` and `BlockAssembler::addPackageTxs` should be placed in `miner.h` rather than `miner.cpp`, but the existence of `mempool` (and hence `mempool.cs`) is not currently not known in `miner.h`. Would `extern CTxMemPool mempool;` be acceptable in `miner",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-348027089,348027089,
TheBlueMatt,2017-12-04T17:46:46Z,"As mentioned before, please do not place EXCLUSIVE_LOCKS_REQUIRED annotations on class member function declarations instead of their definitions. Placing them on declarations makes the annotations incredibly brittle and, thus, largely useless. Better to leave them off than to add them in a place where the order of functions in a file matters.",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-349043712,349043712,
practicalswift,2018-03-12T23:16:59Z,"@TheBlueMatt Sorry, I had missed moving the annotations for `SkipMapTxEntry`, `addPackageTxs`, `UpdateChildrenForRemoval` and `CalculateDescendants`. Now fixed! Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-372493971,372493971,
sipa,2018-03-17T00:19:40Z,utACK 661db1d63afcea4016ccb7f97fda6cde7f719826,https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-373877913,373877913,
practicalswift,2018-04-03T11:35:54Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-378219366,378219366,
practicalswift,2018-05-14T13:26:15Z,"@promag @sipa Would you mind re-reviewing?\n\n@marcofalke Would you mind reviewing? :-)",https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-388815548,388815548,
MarcoFalke,2018-05-14T14:16:44Z,utACK 47782b49e67599585cd766c8322ca01764fe5aa7,https://github.com/bitcoin/bitcoin/pull/11689#issuecomment-388832855,388832855,
