[
  {
    "sha": "c86439a3666fd545cd3ad7ad08b8419da55f2724",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODY0MzlhMzY2NmZkNTQ1Y2QzYWQ3YWQwOGI4NDE5ZGE1NWYyNzI0",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-10-09T11:47:22Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-09T11:47:22Z"
      },
      "message": "[UI] Change 'Send' warning (#1064)",
      "tree": {
        "sha": "70500029ca30b1ab6cf347f2b938e4990625a156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70500029ca30b1ab6cf347f2b938e4990625a156"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c86439a3666fd545cd3ad7ad08b8419da55f2724",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c86439a3666fd545cd3ad7ad08b8419da55f2724",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c86439a3666fd545cd3ad7ad08b8419da55f2724",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c86439a3666fd545cd3ad7ad08b8419da55f2724/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e32e28afb9a70c33451445df4d019e67fe2e65c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e32e28afb9a70c33451445df4d019e67fe2e65c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e32e28afb9a70c33451445df4d019e67fe2e65c3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "817a6867d54066dab3cdc1c5fafe4b45420a7f3d",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c86439a3666fd545cd3ad7ad08b8419da55f2724/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c86439a3666fd545cd3ad7ad08b8419da55f2724/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c86439a3666fd545cd3ad7ad08b8419da55f2724",
        "patch": "@@ -266,7 +266,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         ).arg(strNearestAmount));\n     } else {\n         recipients[0].inputType = ALL_COINS;\n-        strFunds = tr(\"using\") + \" <b>\" + tr(\"any available funds (not recommended)\") + \"</b>\";\n+        strFunds = tr(\"using\") + \" <b>\" + tr(\"any available funds (not anonymous)\") + \"</b>\";\n     }\n \n     if(ui->checkUseInstantSend->isChecked()) {"
      }
    ]
  },
  {
    "sha": "321fd64921f13d6684b738fad6c455d802748389",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjFmZDY0OTIxZjEzZDY2ODRiNzM4ZmFkNmM0NTVkODAyNzQ4Mzg5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-10T09:13:07Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-10T09:13:07Z"
      },
      "message": "Masternodes should be allowed to annonce ipv4 addresses only from now (#1065)",
      "tree": {
        "sha": "cd6ed27171385dbcd8b0ba12155b12c8d2a44bda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd6ed27171385dbcd8b0ba12155b12c8d2a44bda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/321fd64921f13d6684b738fad6c455d802748389",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321fd64921f13d6684b738fad6c455d802748389",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/321fd64921f13d6684b738fad6c455d802748389",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321fd64921f13d6684b738fad6c455d802748389/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c86439a3666fd545cd3ad7ad08b8419da55f2724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c86439a3666fd545cd3ad7ad08b8419da55f2724",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c86439a3666fd545cd3ad7ad08b8419da55f2724"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a85039f0e0ec234faafbd257438ce197530dcb78",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321fd64921f13d6684b738fad6c455d802748389/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321fd64921f13d6684b738fad6c455d802748389/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=321fd64921f13d6684b738fad6c455d802748389",
        "patch": "@@ -203,6 +203,14 @@ void CMasternode::Check(bool fForce)\n     nActiveState = MASTERNODE_ENABLED; // OK\n }\n \n+bool CMasternode::IsValidNetAddr()\n+{\n+    // TODO: regtest is fine with any addresses for now,\n+    // should probably be a bit smarter if one day we start to implement tests for this\n+    return Params().NetworkIDString() == CBaseChainParams::REGTEST ||\n+            (addr.IsIPv4() && IsReachable(addr) && addr.IsRoutable());\n+}\n+\n std::string CMasternode::GetStatus()\n {\n     switch(nActiveState) {\n@@ -333,6 +341,14 @@ bool CMasternodeBroadcast::Create(CTxIn txin, CService service, CKey keyCollater\n     }\n \n     mnbRet = CMasternodeBroadcast(service, txin, pubKeyCollateralAddressNew, pubKeyMasternodeNew, PROTOCOL_VERSION);\n+\n+    if(!mnbRet.IsValidNetAddr()) {\n+        strErrorRet = strprintf(\"Invalid IP address, masternode=%s\", txin.prevout.ToStringShort());\n+        LogPrintf(\"CMasternodeBroadcast::Create -- %s\\n\", strErrorRet);\n+        mnbRet = CMasternodeBroadcast();\n+        return false;\n+    }\n+\n     mnbRet.lastPing = mnp;\n     if(!mnbRet.Sign(keyCollateralAddressNew)) {\n         strErrorRet = strprintf(\"Failed to sign broadcast, masternode=%s\", txin.prevout.ToStringShort());"
      },
      {
        "sha": "683585f13e394ce5c3feb9a3536a967876bbd9af",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321fd64921f13d6684b738fad6c455d802748389/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321fd64921f13d6684b738fad6c455d802748389/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=321fd64921f13d6684b738fad6c455d802748389",
        "patch": "@@ -212,6 +212,8 @@ class CMasternode\n     bool IsEnabled() { return nActiveState == MASTERNODE_ENABLED; }\n     bool IsPreEnabled() { return nActiveState == MASTERNODE_PRE_ENABLED; }\n \n+    bool IsValidNetAddr();\n+\n     std::string GetStatus();\n \n     int GetCollateralAge();"
      },
      {
        "sha": "2d48ce8c7be40f60afda77b18852c76055ae72a0",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321fd64921f13d6684b738fad6c455d802748389/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321fd64921f13d6684b738fad6c455d802748389/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=321fd64921f13d6684b738fad6c455d802748389",
        "patch": "@@ -726,6 +726,12 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n     mapSeenMasternodeBroadcast.insert(make_pair(mnb.GetHash(), mnb));\n \n     LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList - Masternode broadcast, vin: %s new\\n\", mnb.vin.ToString());\n+    // We check addr before both initial mnb and update\n+    if(!mnb.IsValidNetAddr()) {\n+        LogPrintf(\"CMasternodeBroadcast::CheckMnbAndUpdateMasternodeList -- Invalid addr, rejected: masternode=%s  sigTime=%lld  addr=%s\\n\",\n+                    mnb.vin.prevout.ToStringShort(), mnb.sigTime, mnb.addr.ToString());\n+        return false;\n+    }\n \n     if(!mnb.CheckAndUpdate(nDos)){\n         LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList - Masternode broadcast, vin: %s CheckAndUpdate failed\\n\", mnb.vin.ToString());"
      }
    ]
  },
  {
    "sha": "9071933bf43e6098ba1ab77c60a551aceb919157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDcxOTMzYmY0M2U2MDk4YmExYWI3N2M2MGE1NTFhY2ViOTE5MTU3",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2016-10-10T21:07:49Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-10T21:07:49Z"
      },
      "message": "Fix Sync condition checking in PrivateSend (#1069)",
      "tree": {
        "sha": "307008c0249c1c0e92f3e937f2b7a0212bb4ff34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/307008c0249c1c0e92f3e937f2b7a0212bb4ff34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9071933bf43e6098ba1ab77c60a551aceb919157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9071933bf43e6098ba1ab77c60a551aceb919157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9071933bf43e6098ba1ab77c60a551aceb919157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9071933bf43e6098ba1ab77c60a551aceb919157/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "321fd64921f13d6684b738fad6c455d802748389",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321fd64921f13d6684b738fad6c455d802748389",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/321fd64921f13d6684b738fad6c455d802748389"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9314873e349d152a7dfa2e90280b874b2686c330",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9071933bf43e6098ba1ab77c60a551aceb919157/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9071933bf43e6098ba1ab77c60a551aceb919157/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=9071933bf43e6098ba1ab77c60a551aceb919157",
        "patch": "@@ -1298,6 +1298,11 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n     if(!pwalletMain || pwalletMain->IsLocked(true)) return false;\n     if(nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) return false;\n \n+    if(!masternodeSync.IsMasternodeListSynced()) {\n+        strAutoDenomResult = _(\"Can't mix while sync in progress.\");\n+        return false;\n+    }\n+\n     switch(nWalletBackups) {\n         case 0:\n             LogPrint(\"privatesend\", \"CDarksendPool::DoAutomaticDenominating -- Automatic backups disabled, no mixing available.\\n\");\n@@ -1369,11 +1374,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         return false;\n     }\n \n-    if(!masternodeSync.IsBlockchainSynced()) {\n-        strAutoDenomResult = _(\"Can't mix while sync in progress.\");\n-        return false;\n-    }\n-\n     if(!fDryRun && pwalletMain->IsLocked(true)) {\n         strAutoDenomResult = _(\"Wallet is locked.\");\n         return false;"
      }
    ]
  },
  {
    "sha": "2feb321c2e87e9ac5e6ff510c729042f633a0daf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmViMzIxYzJlODdlOWFjNWU2ZmY1MTBjNzI5MDQyZjYzM2EwZGFm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-10T21:11:20Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-10T21:11:20Z"
      },
      "message": "IsBlockchainSynced should not proceed until we are past the latest checkpoint (#1070)",
      "tree": {
        "sha": "8a3c6a26d34d911c63290977d15e3361128ed85f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a3c6a26d34d911c63290977d15e3361128ed85f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2feb321c2e87e9ac5e6ff510c729042f633a0daf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feb321c2e87e9ac5e6ff510c729042f633a0daf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2feb321c2e87e9ac5e6ff510c729042f633a0daf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feb321c2e87e9ac5e6ff510c729042f633a0daf/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9071933bf43e6098ba1ab77c60a551aceb919157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9071933bf43e6098ba1ab77c60a551aceb919157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9071933bf43e6098ba1ab77c60a551aceb919157"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ebf1503b03788fdc83b2b1e6b1656cf36f832705",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feb321c2e87e9ac5e6ff510c729042f633a0daf/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feb321c2e87e9ac5e6ff510c729042f633a0daf/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=2feb321c2e87e9ac5e6ff510c729042f633a0daf",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"activemasternode.h\"\n+#include \"checkpoints.h\"\n #include \"governance.h\"\n #include \"main.h\"\n #include \"masternode.h\"\n@@ -30,6 +31,8 @@ bool CMasternodeSync::IsBlockchainSynced()\n \n     if(fBlockchainSynced) return true;\n     if(!pCurrentBlockIndex || !pindexBestHeader || fImporting || fReindex) return false;\n+    if(fCheckpointsEnabled && pCurrentBlockIndex->nHeight < Checkpoints::GetTotalBlocksEstimate(Params().Checkpoints()))\n+        return false;\n \n     // same as !IsInitialBlockDownload() but no cs_main needed here\n     int nMaxBlockTime = std::max(pCurrentBlockIndex->GetBlockTime(), pindexBestHeader->GetBlockTime());"
      }
    ]
  },
  {
    "sha": "e7fc860b351bc4aa75d37bb534f29f609efdd840",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2ZjODYwYjM1MWJjNGFhNzVkMzdiYjUzNGYyOWY2MDllZmRkODQw",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-10-11T13:06:44Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-10-11T13:10:21Z"
      },
      "message": "update protocol-documentation.md",
      "tree": {
        "sha": "ab092fcc6700c1bee16537d2cf477056edad5f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab092fcc6700c1bee16537d2cf477056edad5f67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7fc860b351bc4aa75d37bb534f29f609efdd840",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7fc860b351bc4aa75d37bb534f29f609efdd840",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7fc860b351bc4aa75d37bb534f29f609efdd840",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7fc860b351bc4aa75d37bb534f29f609efdd840/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2feb321c2e87e9ac5e6ff510c729042f633a0daf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feb321c2e87e9ac5e6ff510c729042f633a0daf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2feb321c2e87e9ac5e6ff510c729042f633a0daf"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 115,
      "deletions": 102
    },
    "files": [
      {
        "sha": "63ca69e2d4e8a97307218532ce30fc663fcc5961",
        "filename": "dash-docs/protocol-documentation.md",
        "status": "modified",
        "additions": 115,
        "deletions": 102,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7fc860b351bc4aa75d37bb534f29f609efdd840/dash-docs/protocol-documentation.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7fc860b351bc4aa75d37bb534f29f609efdd840/dash-docs/protocol-documentation.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/dash-docs/protocol-documentation.md?ref=e7fc860b351bc4aa75d37bb534f29f609efdd840",
        "patch": "@@ -11,174 +11,187 @@ uint256  => char[32]\n \n CScript => uchar[]\n \n-### COutpoint\n+### COutPoint\n \n-Bitcoin Input\n+Bitcoin Outpoint https://bitcoin.org/en/glossary/outpoint\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n | 32 | hash | uint256 | Hash of transactional output which is being referenced\n | 4 | n | uint32_t | Index of transaction which is being referenced\n \n \n-### CTXIn\n+### CTxIn\n \n-Bitcoin Input\n+Bitcoin Input https://bitcoin.org/en/glossary/input\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n | 36 | prevout | COutPoint | The previous output from an existing transaction, in the form of an unspent output\n | 1+ | script length | var_int | The length of the signature script\n | ? | script | CScript | The script which is validated for this input to be spent\n | 4 | nSequence | uint_32t | Transaction version as defined by the sender. Intended for \"replacement\" of transactions when information is updated before inclusion into a block.\n \n-### CPubkey\n+### CTxOut\n \n-Bitcoin Public Key\n+Bitcoin Output https://bitcoin.org/en/glossary/output\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 33-65 | vch | char[] | Encapcilated public key of masternode in serialized varchar form\n+| 8 | nValue | int64_t | Transfered value\n+| ? | scriptPubKey | CScript | The script for indicating what conditions must be fulfilled for this output to be further spent\n \n-### Masternode Winner\n+### CPubKey\n \n-When a new block is found on the network, a masternode quorum will be determined and those 10 selected masternodes will issue a masternode winner command to pick the next winning node. \n+Bitcoin Public Key https://bitcoin.org/en/glossary/public-key\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vinMasternode | CTXIn | The unspent output of the masternode which is signing the message\n-| 4 | nBlockHeight | int | The blockheight which the payee should be paid\n-| ? | payeeAddress | CScript | The address to pay to\n-| 71-73 | sig | char[] | Signature of the masternode)\n+| 33-65 | vch | char[] | The public portion of a keypair which can be used to verify signatures made with the private portion of the keypair.\n \n ## Message Types\n \n-### Masternode Winner\n+### MNANNOUNCE - \"mnb\"\n \n-When a new block is found on the network, a masternode quorum will be determined and those 10 selected masternodes will issue a masternode winner command to pick the next winning node. \n+CMasternodeBroadcast\n \n-| Field Size | Description | Data type | Comments |\n+Whenever a masternode comes online or a client is syncing, they will send this message which describes the masternode entry and how to validate messages from it.\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vinMasternode | CTXIn | The unspent output of the masternode which is signing the message\n-| 4 | nBlockHeight | int | The blockheight which the payee should be paid\n-| ? | payeeAddress | CScript | The address to pay to\n-| 71-73 | sig | char[] | Signature of the masternode)\n+| 41 | vin | CTxIn | The unspent output which is holding 1000 DASH\n+| # | addr | CService | Address of the main 1000 DASH unspent output\n+| 33-65 | pubKeyCollateralAddress | CPubKey | CPubKey of the main 1000 DASH unspent output\n+| 33-65 | pubKeyMasternode | CPubKey | CPubKey of the secondary signing key (For all other messaging other than announce message)\n+| 71-73 | sig | char[] | Signature of this message\n+| 8 | sigTime | int64_t | Time which the signature was created\n+| 4 | nProtocolVersion | int | The protocol version of the masternode\n+| # | lastPing | CMasternodePing | The last known ping of the masternode\n+| 8 | nLastDsq | int64_t | The last time the masternode sent a DSQ message (for mixing)\n \n-### Governance Vote\n+### MNPING - \"mnp\"\n \n-Masternodes use governance voting in response to new proposals, contracts, settings or finalized budgets.\n+CMasternodePing\n+\n+Every few minutes, masternodes ping the network with a message that propagates the whole network.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | Unspent Output | CTXIn | Unspent output for the masternode which is voting\n-| 32 | nParentHash | uint256 | Object which we're voting on (proposal, contract, setting or final budget)\n-| 4 | nVote | int | Yes (1), No(2) or Abstain(0)\n-| 8 | nTime | int_64t | Time which the vote was created\n-| 71-73 | vchSig | char[] | Signature of the masternode\n+| 41 | vin | CTxIn | The unspent output of the masternode which is signing the message\n+| 32 | blockHash | uint256 | Current chaintip blockhash minus 12\n+| 8 | sigTime | int64_t | Signature time for this ping\n+| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubKeyMasternode)\n \n-### Governance Object\n+### MASTERNODEPAYMENTVOTE - \"mnw\"\n \n-A proposal, contract or setting.\n+CMasternodePaymentVote\n+\n+When a new block is found on the network, a masternode quorum will be determined and those 10 selected masternodes will issue a masternode payment vote message to pick the next winning node.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 1-20 | strName | std::string | Name of the governance object\n-| 1-64 | strURL | std::string | URL where detailed information about the governance object can be found\n-| 8 | nTime | int_64t | Time which this object was created\n-| 4 | nBlockStart | int | Starting block, which the first payment will occur\n-| 4 | nBlockEnd | int | Ending block, which the last payment will occur\n-| 8 | nAmount | int_64t | The amount in satoshi's that will be paid out each time\n-| ? | payee | CScript | Address which will be paid out to\n-| 32 | nFeeTXHash | uint256 | Hash of the collateral fee transaction\n+| 41 | vinMasternode | CTxIn | The unspent output of the masternode which is signing the message\n+| 4 | nBlockHeight | int | The blockheight which the payee should be paid\n+| ? | payeeAddress | CScript | The address to pay to\n+| 71-73 | sig | char[] | Signature of the masternode which is signing the message\n \n-### Finalized Budget\n+### DSTX - \"dstx\"\n \n-Contains a finalized list of the order in which the next budget will be paid. \n+CDarksendBroadcastTx\n \n-| Field Size | Description | Data type | Comments |\n+Masternodes can broadcast subsidised transactions without fees for the sake of security in mixing. This is done via the DSTX message.\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | strBudgetName | CTXIn | The unspent output of the masternode which is signing the message\n-| 4 | nBlockStart | int | The blockheight which the payee should be paid\n-| ? | vecBudgetPayments | CScript | The address to pay to\n-| 32 | nFeeTXHash | uint256 | Hash of the collateral fee transaction\n+| # | tx | CTransaction | The transaction\n+| 41 | vin | CTxIn | Masternode unspent output\n+| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubKeyMasternode)\n+| 8 | sigTime | int64_t | Time this message was signed\n \n-### Masternode Announce\n+### DSSTATUSUPDATE - \"dssu\"\n \n-Whenever a masternode comes online or a client is syncing, they will send this message which describes the masternode entry and how to validate messages from it. \n+Mixing pool status update\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vin | CTXIn | The unspent output of the masternode which is signing the message\n-| # | addr | CService | Address of the main 1000 DASH unspent output\n-| 33-65 | pubkey | CPubkey | CPubKey of the main 1000 DASH unspent output\n-| 33-65 | pubkey2 | CPubkey | CPubkey of the secondary signing key (For all other messaging other than announce message)\n-| 71-73 | sig | char[] | Signature of this message\n-| 8 | sigTime | int_64t | Time which the signature was created\n-| 4 | protocolVersion | int | The protocol version of the masternode\n-| # | lastPing | CMasternodePing | The last time the masternode pinged the network\n-| 8 | nLastDsq | int_64t | The last time the masternode sent a DSQ message (for darksend mixing)\n+| 4 | nMsgSessionID | int | Session ID\n+| 4 | nMsgState | int | Current state of mixing process\n+| 4 | nMsgEntriesCount | int | Number of entries in the mixing pool\n+| 4 | nMsgAccepted | int | Was entries accepted or not\n+| 4 | nMsgErrorID | int | Error ID if any\n \n-### Masternode Ping\n+### DSQUEUE - \"dsq\"\n \n-CMasternodePing\n+CDarksendQueue\n \n-Every few minutes, masternodes ping the network with a message that propagates the whole network.\n+Asks users to sign final mixing tx message.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vin | CTXIn | The unspent output of the masternode which is signing the message\n-| 32 | blockHash | uint256 | Current chaintip blockhash minus 12\n-| 8 | sigTime | int_64t | Signature time for this ping\n-| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubkey2)\n+| 4 | nDenom | int | Which denomination is allowed in this mixing session\n+| 41 | vin | CTxIn | unspend output from masternode which is hosting this session\n+| 4 | nTime | int | the time this DSQ was created\n+| 4 | fReady | int | if the mixing pool is ready to be executed\n+| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubKeyMasternode)\n \n-### Masternode DSTX\n+### DSACCEPT - \"dsa\"\n \n-Masternodes can broadcast subsidised transactions without fees for the sake of security in Darksend. This is done via the DSTX message.\n+Response to DSQ message which allows the user to join a mixing pool\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| # | tx | CTransaction | The unspent output of the masternode which is signing the message\n-| 41+ | vin | CTXIn | Masternode unspent output\n-| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubkey2)\n-| 8 | sigTime | int_64_t | Time this message was signed\n+| 4 | nDenom | int | denomination that will be exclusively used when submitting inputs into the pool\n+| 41+ | txCollateral | int | collateral tx that will be charged if this client acts maliciousely\n \n-### DSSTATUSUPDATE - DSSU\n+### DSVIN - \"dsi\"\n \n-Darksend pool status update\n+CDarkSendEntry\n \n-| Field Size | Description | Data type | Comments |\n+When queue is ready user is expected to send his entry to start actual mixing\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 4 | sessionID | int | The unspent output of the masternode which is signing the message\n-| 4 | GetState | int | Masternode unspent output\n-| 4 | GetEntriesCount | int | Number of entries\n-| 4 | Status | int | Status of the mixing process\n-| 4 | errorID | int | Error ID if any\n+| ? | vecTxDSIn | CTxDSIn[] | vector of users inputs (CTxDSIn serialization is equal to CTxIn serialization)\n+| 8 | nAmount | int64_t | depreciated since 12.1, it's used for backwards compatibility only and can be removed with future protocol bump\n+| ? | txCollateral | CTransaction | Collateral transaction which is used to prevent misbehavior and also to charge fees randomly\n+| ? | vecTxDSOut | CTxDSOut[] | vector of user outputs (CTxDSOut serialization is equal to CTxOut serialization)\n \n-### DSSTATUSUPDATE - DSQ\n+### DSSIGNFINALTX - \"dss\"\n \n-Asks users to sign final Darksend tx message.\n+User's signed inputs for a group transaction in a mixing session\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 4 | vDenom | int | Which denominations are allowed in this mixing session\n-| 4 | vin | int | unspend output from masternode which is hosting this session\n-| 4 | time | int | the time this DSQ was created\n-| 4 | ready | int | if the mixing pool is ready to be executed\n-| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubkey2)\n+| # | inputs | CTxIn[] | signed inputs for mixing session\n+\n+### MNGOVERNANCEOBJECT - \"govobj\"\n \n-### DSSTATUSUPDATE - DSA\n+Governance Object\n \n-Response to DSQ message which allows the user to join a Darksend mixing pool\n+A proposal, contract or setting.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 4 | sessionDenom | int | denomination that will be exclusively used when submitting inputs into the pool\n-| 4 | txCollateral | int | unspend output from masternode which is hosting this session\n+| 32 | nHashParent | uint256 | Parent object, 0 is root\n+| 4 | nRevision | int | Object revision in the system\n+| 8 | nTime | int64_t | Time which this object was created\n+| 32 | nCollateralHash | uint256 | Hash of the collateral fee transaction\n+| 0-16384 | strData | string | Data field - can be used for anything\n+| 4 | nObjectType | int | ????\n+| 41 | vinMasternode | CTxIn | Unspent output for the masternode which is signing this object\n+| 71-73 | vchSig | char[] | Signature of the masternode\n \n-### DSSTATUSUPDATE - DSS\n+### MNGOVERNANCEOBJECTVOTE - \"govobjvote\"\n \n-User's signed inputs for a group transaction in a Darksend session\n+Governance Vote\n \n-| Field Size | Description | Data type | Comments |\n+Masternodes use governance voting in response to new proposals, contracts, settings or finalized budgets.\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| # | inputs | CTXIn[] | signed inputs for Darksend session\n+| 4 | nVoteSignal | int | ???\n+| 41+ | vinMasternode | CTxIn | Unspent output for the masternode which is voting\n+| 32 | nParentHash | uint256 | Object which we're voting on (proposal, contract, setting or final budget)\n+| 4 | nVoteOutcome | int | ???\n+| 8 | nTime | int64_t | Time which the vote was created\n+| 71-73 | vchSig | char[] | Signature of the masternode"
      }
    ]
  },
  {
    "sha": "d9d11f676551390d83f44750f6a502bb476d93e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWQxMWY2NzY1NTEzOTBkODNmNDQ3NTBmNmE1MDJiYjQ3NmQ5M2U1",
    "commit": {
      "author": {
        "name": "Nathan Marley",
        "email": "nathan.marley@gmail.com",
        "date": "2016-10-12T15:01:38Z"
      },
      "committer": {
        "name": "Nathan Marley",
        "email": "nathan.marley@gmail.com",
        "date": "2016-10-12T15:02:15Z"
      },
      "message": "bugfix: count MN votes only once",
      "tree": {
        "sha": "6d94dfd7ee01e0a4cd4d4da00e9076cd3bda1481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d94dfd7ee01e0a4cd4d4da00e9076cd3bda1481"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9d11f676551390d83f44750f6a502bb476d93e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d11f676551390d83f44750f6a502bb476d93e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d11f676551390d83f44750f6a502bb476d93e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d11f676551390d83f44750f6a502bb476d93e5/comments",
    "author": {
      "login": "nmarley",
      "id": 1735354,
      "node_id": "MDQ6VXNlcjE3MzUzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1735354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmarley",
      "html_url": "https://github.com/nmarley",
      "followers_url": "https://api.github.com/users/nmarley/followers",
      "following_url": "https://api.github.com/users/nmarley/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmarley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmarley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmarley/subscriptions",
      "organizations_url": "https://api.github.com/users/nmarley/orgs",
      "repos_url": "https://api.github.com/users/nmarley/repos",
      "events_url": "https://api.github.com/users/nmarley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmarley/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nmarley",
      "id": 1735354,
      "node_id": "MDQ6VXNlcjE3MzUzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1735354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmarley",
      "html_url": "https://github.com/nmarley",
      "followers_url": "https://api.github.com/users/nmarley/followers",
      "following_url": "https://api.github.com/users/nmarley/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmarley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmarley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmarley/subscriptions",
      "organizations_url": "https://api.github.com/users/nmarley/orgs",
      "repos_url": "https://api.github.com/users/nmarley/repos",
      "events_url": "https://api.github.com/users/nmarley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmarley/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2feb321c2e87e9ac5e6ff510c729042f633a0daf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feb321c2e87e9ac5e6ff510c729042f633a0daf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2feb321c2e87e9ac5e6ff510c729042f633a0daf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "997a06653878908e3acd2bb6ee330b7814741592",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d11f676551390d83f44750f6a502bb476d93e5/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d11f676551390d83f44750f6a502bb476d93e5/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=d9d11f676551390d83f44750f6a502bb476d93e5",
        "patch": "@@ -1100,8 +1100,8 @@ int CGovernanceManager::CountMatchingVotes(CGovernanceObject& govobj, vote_signa\n     LOCK(cs);\n     int nCount = 0;\n \n-    std::map<uint256, CGovernanceVote>::iterator it = mapVotesByHash.begin();\n-    while(it != mapVotesByHash.end())  {\n+    std::map<uint256, CGovernanceVote>::iterator it = mapVotesByType.begin();\n+    while(it != mapVotesByType.end())  {\n         if(it->second.IsValid() &&\n            it->second.GetSignal() == eVoteSignalIn &&\n            it->second.GetOutcome() == eVoteOutcomeIn &&"
      }
    ]
  },
  {
    "sha": "ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjg3ZTRjY2IxODExNzNlM2JmMWUwYjIxZmUzYWQyYWViOWEwMTdk",
    "commit": {
      "author": {
        "name": "Evan Duffield",
        "email": "eduffield82@gmail.com",
        "date": "2016-10-12T20:34:21Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-12T20:34:21Z"
      },
      "message": "Merge pull request #1072 from UdjinM6/updateProtoDoc\n\nupdate protocol-documentation.md",
      "tree": {
        "sha": "ab092fcc6700c1bee16537d2cf477056edad5f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab092fcc6700c1bee16537d2cf477056edad5f67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2feb321c2e87e9ac5e6ff510c729042f633a0daf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feb321c2e87e9ac5e6ff510c729042f633a0daf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2feb321c2e87e9ac5e6ff510c729042f633a0daf"
      },
      {
        "sha": "e7fc860b351bc4aa75d37bb534f29f609efdd840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7fc860b351bc4aa75d37bb534f29f609efdd840",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7fc860b351bc4aa75d37bb534f29f609efdd840"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 115,
      "deletions": 102
    },
    "files": [
      {
        "sha": "63ca69e2d4e8a97307218532ce30fc663fcc5961",
        "filename": "dash-docs/protocol-documentation.md",
        "status": "modified",
        "additions": 115,
        "deletions": 102,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d/dash-docs/protocol-documentation.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d/dash-docs/protocol-documentation.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/dash-docs/protocol-documentation.md?ref=ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d",
        "patch": "@@ -11,174 +11,187 @@ uint256  => char[32]\n \n CScript => uchar[]\n \n-### COutpoint\n+### COutPoint\n \n-Bitcoin Input\n+Bitcoin Outpoint https://bitcoin.org/en/glossary/outpoint\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n | 32 | hash | uint256 | Hash of transactional output which is being referenced\n | 4 | n | uint32_t | Index of transaction which is being referenced\n \n \n-### CTXIn\n+### CTxIn\n \n-Bitcoin Input\n+Bitcoin Input https://bitcoin.org/en/glossary/input\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n | 36 | prevout | COutPoint | The previous output from an existing transaction, in the form of an unspent output\n | 1+ | script length | var_int | The length of the signature script\n | ? | script | CScript | The script which is validated for this input to be spent\n | 4 | nSequence | uint_32t | Transaction version as defined by the sender. Intended for \"replacement\" of transactions when information is updated before inclusion into a block.\n \n-### CPubkey\n+### CTxOut\n \n-Bitcoin Public Key\n+Bitcoin Output https://bitcoin.org/en/glossary/output\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 33-65 | vch | char[] | Encapcilated public key of masternode in serialized varchar form\n+| 8 | nValue | int64_t | Transfered value\n+| ? | scriptPubKey | CScript | The script for indicating what conditions must be fulfilled for this output to be further spent\n \n-### Masternode Winner\n+### CPubKey\n \n-When a new block is found on the network, a masternode quorum will be determined and those 10 selected masternodes will issue a masternode winner command to pick the next winning node. \n+Bitcoin Public Key https://bitcoin.org/en/glossary/public-key\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vinMasternode | CTXIn | The unspent output of the masternode which is signing the message\n-| 4 | nBlockHeight | int | The blockheight which the payee should be paid\n-| ? | payeeAddress | CScript | The address to pay to\n-| 71-73 | sig | char[] | Signature of the masternode)\n+| 33-65 | vch | char[] | The public portion of a keypair which can be used to verify signatures made with the private portion of the keypair.\n \n ## Message Types\n \n-### Masternode Winner\n+### MNANNOUNCE - \"mnb\"\n \n-When a new block is found on the network, a masternode quorum will be determined and those 10 selected masternodes will issue a masternode winner command to pick the next winning node. \n+CMasternodeBroadcast\n \n-| Field Size | Description | Data type | Comments |\n+Whenever a masternode comes online or a client is syncing, they will send this message which describes the masternode entry and how to validate messages from it.\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vinMasternode | CTXIn | The unspent output of the masternode which is signing the message\n-| 4 | nBlockHeight | int | The blockheight which the payee should be paid\n-| ? | payeeAddress | CScript | The address to pay to\n-| 71-73 | sig | char[] | Signature of the masternode)\n+| 41 | vin | CTxIn | The unspent output which is holding 1000 DASH\n+| # | addr | CService | Address of the main 1000 DASH unspent output\n+| 33-65 | pubKeyCollateralAddress | CPubKey | CPubKey of the main 1000 DASH unspent output\n+| 33-65 | pubKeyMasternode | CPubKey | CPubKey of the secondary signing key (For all other messaging other than announce message)\n+| 71-73 | sig | char[] | Signature of this message\n+| 8 | sigTime | int64_t | Time which the signature was created\n+| 4 | nProtocolVersion | int | The protocol version of the masternode\n+| # | lastPing | CMasternodePing | The last known ping of the masternode\n+| 8 | nLastDsq | int64_t | The last time the masternode sent a DSQ message (for mixing)\n \n-### Governance Vote\n+### MNPING - \"mnp\"\n \n-Masternodes use governance voting in response to new proposals, contracts, settings or finalized budgets.\n+CMasternodePing\n+\n+Every few minutes, masternodes ping the network with a message that propagates the whole network.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | Unspent Output | CTXIn | Unspent output for the masternode which is voting\n-| 32 | nParentHash | uint256 | Object which we're voting on (proposal, contract, setting or final budget)\n-| 4 | nVote | int | Yes (1), No(2) or Abstain(0)\n-| 8 | nTime | int_64t | Time which the vote was created\n-| 71-73 | vchSig | char[] | Signature of the masternode\n+| 41 | vin | CTxIn | The unspent output of the masternode which is signing the message\n+| 32 | blockHash | uint256 | Current chaintip blockhash minus 12\n+| 8 | sigTime | int64_t | Signature time for this ping\n+| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubKeyMasternode)\n \n-### Governance Object\n+### MASTERNODEPAYMENTVOTE - \"mnw\"\n \n-A proposal, contract or setting.\n+CMasternodePaymentVote\n+\n+When a new block is found on the network, a masternode quorum will be determined and those 10 selected masternodes will issue a masternode payment vote message to pick the next winning node.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 1-20 | strName | std::string | Name of the governance object\n-| 1-64 | strURL | std::string | URL where detailed information about the governance object can be found\n-| 8 | nTime | int_64t | Time which this object was created\n-| 4 | nBlockStart | int | Starting block, which the first payment will occur\n-| 4 | nBlockEnd | int | Ending block, which the last payment will occur\n-| 8 | nAmount | int_64t | The amount in satoshi's that will be paid out each time\n-| ? | payee | CScript | Address which will be paid out to\n-| 32 | nFeeTXHash | uint256 | Hash of the collateral fee transaction\n+| 41 | vinMasternode | CTxIn | The unspent output of the masternode which is signing the message\n+| 4 | nBlockHeight | int | The blockheight which the payee should be paid\n+| ? | payeeAddress | CScript | The address to pay to\n+| 71-73 | sig | char[] | Signature of the masternode which is signing the message\n \n-### Finalized Budget\n+### DSTX - \"dstx\"\n \n-Contains a finalized list of the order in which the next budget will be paid. \n+CDarksendBroadcastTx\n \n-| Field Size | Description | Data type | Comments |\n+Masternodes can broadcast subsidised transactions without fees for the sake of security in mixing. This is done via the DSTX message.\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | strBudgetName | CTXIn | The unspent output of the masternode which is signing the message\n-| 4 | nBlockStart | int | The blockheight which the payee should be paid\n-| ? | vecBudgetPayments | CScript | The address to pay to\n-| 32 | nFeeTXHash | uint256 | Hash of the collateral fee transaction\n+| # | tx | CTransaction | The transaction\n+| 41 | vin | CTxIn | Masternode unspent output\n+| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubKeyMasternode)\n+| 8 | sigTime | int64_t | Time this message was signed\n \n-### Masternode Announce\n+### DSSTATUSUPDATE - \"dssu\"\n \n-Whenever a masternode comes online or a client is syncing, they will send this message which describes the masternode entry and how to validate messages from it. \n+Mixing pool status update\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vin | CTXIn | The unspent output of the masternode which is signing the message\n-| # | addr | CService | Address of the main 1000 DASH unspent output\n-| 33-65 | pubkey | CPubkey | CPubKey of the main 1000 DASH unspent output\n-| 33-65 | pubkey2 | CPubkey | CPubkey of the secondary signing key (For all other messaging other than announce message)\n-| 71-73 | sig | char[] | Signature of this message\n-| 8 | sigTime | int_64t | Time which the signature was created\n-| 4 | protocolVersion | int | The protocol version of the masternode\n-| # | lastPing | CMasternodePing | The last time the masternode pinged the network\n-| 8 | nLastDsq | int_64t | The last time the masternode sent a DSQ message (for darksend mixing)\n+| 4 | nMsgSessionID | int | Session ID\n+| 4 | nMsgState | int | Current state of mixing process\n+| 4 | nMsgEntriesCount | int | Number of entries in the mixing pool\n+| 4 | nMsgAccepted | int | Was entries accepted or not\n+| 4 | nMsgErrorID | int | Error ID if any\n \n-### Masternode Ping\n+### DSQUEUE - \"dsq\"\n \n-CMasternodePing\n+CDarksendQueue\n \n-Every few minutes, masternodes ping the network with a message that propagates the whole network.\n+Asks users to sign final mixing tx message.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 41+ | vin | CTXIn | The unspent output of the masternode which is signing the message\n-| 32 | blockHash | uint256 | Current chaintip blockhash minus 12\n-| 8 | sigTime | int_64t | Signature time for this ping\n-| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubkey2)\n+| 4 | nDenom | int | Which denomination is allowed in this mixing session\n+| 41 | vin | CTxIn | unspend output from masternode which is hosting this session\n+| 4 | nTime | int | the time this DSQ was created\n+| 4 | fReady | int | if the mixing pool is ready to be executed\n+| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubKeyMasternode)\n \n-### Masternode DSTX\n+### DSACCEPT - \"dsa\"\n \n-Masternodes can broadcast subsidised transactions without fees for the sake of security in Darksend. This is done via the DSTX message.\n+Response to DSQ message which allows the user to join a mixing pool\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| # | tx | CTransaction | The unspent output of the masternode which is signing the message\n-| 41+ | vin | CTXIn | Masternode unspent output\n-| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubkey2)\n-| 8 | sigTime | int_64_t | Time this message was signed\n+| 4 | nDenom | int | denomination that will be exclusively used when submitting inputs into the pool\n+| 41+ | txCollateral | int | collateral tx that will be charged if this client acts maliciousely\n \n-### DSSTATUSUPDATE - DSSU\n+### DSVIN - \"dsi\"\n \n-Darksend pool status update\n+CDarkSendEntry\n \n-| Field Size | Description | Data type | Comments |\n+When queue is ready user is expected to send his entry to start actual mixing\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 4 | sessionID | int | The unspent output of the masternode which is signing the message\n-| 4 | GetState | int | Masternode unspent output\n-| 4 | GetEntriesCount | int | Number of entries\n-| 4 | Status | int | Status of the mixing process\n-| 4 | errorID | int | Error ID if any\n+| ? | vecTxDSIn | CTxDSIn[] | vector of users inputs (CTxDSIn serialization is equal to CTxIn serialization)\n+| 8 | nAmount | int64_t | depreciated since 12.1, it's used for backwards compatibility only and can be removed with future protocol bump\n+| ? | txCollateral | CTransaction | Collateral transaction which is used to prevent misbehavior and also to charge fees randomly\n+| ? | vecTxDSOut | CTxDSOut[] | vector of user outputs (CTxDSOut serialization is equal to CTxOut serialization)\n \n-### DSSTATUSUPDATE - DSQ\n+### DSSIGNFINALTX - \"dss\"\n \n-Asks users to sign final Darksend tx message.\n+User's signed inputs for a group transaction in a mixing session\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 4 | vDenom | int | Which denominations are allowed in this mixing session\n-| 4 | vin | int | unspend output from masternode which is hosting this session\n-| 4 | time | int | the time this DSQ was created\n-| 4 | ready | int | if the mixing pool is ready to be executed\n-| 71-73 | vchSig | char[] | Signature of this message by masternode (verifiable via pubkey2)\n+| # | inputs | CTxIn[] | signed inputs for mixing session\n+\n+### MNGOVERNANCEOBJECT - \"govobj\"\n \n-### DSSTATUSUPDATE - DSA\n+Governance Object\n \n-Response to DSQ message which allows the user to join a Darksend mixing pool\n+A proposal, contract or setting.\n \n-| Field Size | Description | Data type | Comments |\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 4 | sessionDenom | int | denomination that will be exclusively used when submitting inputs into the pool\n-| 4 | txCollateral | int | unspend output from masternode which is hosting this session\n+| 32 | nHashParent | uint256 | Parent object, 0 is root\n+| 4 | nRevision | int | Object revision in the system\n+| 8 | nTime | int64_t | Time which this object was created\n+| 32 | nCollateralHash | uint256 | Hash of the collateral fee transaction\n+| 0-16384 | strData | string | Data field - can be used for anything\n+| 4 | nObjectType | int | ????\n+| 41 | vinMasternode | CTxIn | Unspent output for the masternode which is signing this object\n+| 71-73 | vchSig | char[] | Signature of the masternode\n \n-### DSSTATUSUPDATE - DSS\n+### MNGOVERNANCEOBJECTVOTE - \"govobjvote\"\n \n-User's signed inputs for a group transaction in a Darksend session\n+Governance Vote\n \n-| Field Size | Description | Data type | Comments |\n+Masternodes use governance voting in response to new proposals, contracts, settings or finalized budgets.\n+\n+| Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| # | inputs | CTXIn[] | signed inputs for Darksend session\n+| 4 | nVoteSignal | int | ???\n+| 41+ | vinMasternode | CTxIn | Unspent output for the masternode which is voting\n+| 32 | nParentHash | uint256 | Object which we're voting on (proposal, contract, setting or final budget)\n+| 4 | nVoteOutcome | int | ???\n+| 8 | nTime | int64_t | Time which the vote was created\n+| 71-73 | vchSig | char[] | Signature of the masternode"
      }
    ]
  },
  {
    "sha": "8aaa8a22b0cead287c45422ced360b13bf0b0633",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWFhOGEyMmIwY2VhZDI4N2M0NTQyMmNlZDM2MGIxM2JmMGIwNjMz",
    "commit": {
      "author": {
        "name": "Evan Duffield",
        "email": "eduffield82@gmail.com",
        "date": "2016-10-12T20:35:29Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-12T20:35:29Z"
      },
      "message": "Merge pull request #1074 from nmarley/bugfix-vote-counting\n\nBugfix: vote counting",
      "tree": {
        "sha": "ccb5c3f58f0caaa4da87aed2e042b6e17a1e83ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccb5c3f58f0caaa4da87aed2e042b6e17a1e83ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aaa8a22b0cead287c45422ced360b13bf0b0633",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaa8a22b0cead287c45422ced360b13bf0b0633",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aaa8a22b0cead287c45422ced360b13bf0b0633",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaa8a22b0cead287c45422ced360b13bf0b0633/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef87e4ccb181173e3bf1e0b21fe3ad2aeb9a017d"
      },
      {
        "sha": "d9d11f676551390d83f44750f6a502bb476d93e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d11f676551390d83f44750f6a502bb476d93e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d11f676551390d83f44750f6a502bb476d93e5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "997a06653878908e3acd2bb6ee330b7814741592",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aaa8a22b0cead287c45422ced360b13bf0b0633/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aaa8a22b0cead287c45422ced360b13bf0b0633/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=8aaa8a22b0cead287c45422ced360b13bf0b0633",
        "patch": "@@ -1100,8 +1100,8 @@ int CGovernanceManager::CountMatchingVotes(CGovernanceObject& govobj, vote_signa\n     LOCK(cs);\n     int nCount = 0;\n \n-    std::map<uint256, CGovernanceVote>::iterator it = mapVotesByHash.begin();\n-    while(it != mapVotesByHash.end())  {\n+    std::map<uint256, CGovernanceVote>::iterator it = mapVotesByType.begin();\n+    while(it != mapVotesByType.end())  {\n         if(it->second.IsValid() &&\n            it->second.GetSignal() == eVoteSignalIn &&\n            it->second.GetOutcome() == eVoteOutcomeIn &&"
      }
    ]
  },
  {
    "sha": "d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWRjZjJiNjY4ZGZjNzY3N2VmOWY4M2E1YzUyYmYyZmM3ZWE5MTBm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-13T09:45:18Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-13T09:45:18Z"
      },
      "message": "Refactor CalculateScore, move GetBlockHash out of it (#1068)",
      "tree": {
        "sha": "b201624126921102426a2d88f0e4a2a232229a51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b201624126921102426a2d88f0e4a2a232229a51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aaa8a22b0cead287c45422ced360b13bf0b0633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaa8a22b0cead287c45422ced360b13bf0b0633",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aaa8a22b0cead287c45422ced360b13bf0b0633"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "da2cebe8202bfeaa245db51a4cdbfacb00191710",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
        "patch": "@@ -119,28 +119,20 @@ bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n // the proof of work for that block. The further away they are the better, the furthest will win the election\n // and get paid this block\n //\n-uint256 CMasternode::CalculateScore(int nBlockHeight)\n+arith_uint256 CMasternode::CalculateScore(const uint256& blockHash)\n {\n-    uint256 hash;\n     uint256 aux = ArithToUint256(UintToArith256(vin.prevout.hash) + vin.prevout.n);\n \n-    if(!GetBlockHash(hash, nBlockHeight)) {\n-        LogPrintf(\"CMasternode::CalculateScore -- ERROR: GetBlockHash() failed at nBlockHeight %d\\n\", nBlockHeight);\n-        return uint256();\n-    }\n-\n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-    ss << hash;\n+    ss << blockHash;\n     arith_uint256 hash2 = UintToArith256(ss.GetHash());\n \n     CHashWriter ss2(SER_GETHASH, PROTOCOL_VERSION);\n-    ss2 << hash;\n+    ss2 << blockHash;\n     ss2 << aux;\n     arith_uint256 hash3 = UintToArith256(ss2.GetHash());\n \n-    arith_uint256 r = (hash3 > hash2 ? hash3 - hash2 : hash2 - hash3);\n-\n-    return ArithToUint256(r);\n+    return (hash3 > hash2 ? hash3 - hash2 : hash2 - hash3);\n }\n \n void CMasternode::Check(bool fForce)"
      },
      {
        "sha": "acbc9d9872d8e8c25012c6efe12a52b911203b89",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
        "patch": "@@ -191,7 +191,7 @@ class CMasternode\n     }\n \n     // CALCULATE A RANK AGAINST OF GIVEN BLOCK\n-    uint256 CalculateScore(int nBlockHeight = -1);\n+    arith_uint256 CalculateScore(const uint256& blockHash);\n \n     bool UpdateFromNewBroadcast(CMasternodeBroadcast& mnb);\n "
      },
      {
        "sha": "6966036416009e631b5ab2ce226be6d38ad95125",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
        "patch": "@@ -335,17 +335,22 @@ CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight\n     // Sort them low to high\n     sort(vecMasternodeLastPaid.begin(), vecMasternodeLastPaid.end(), CompareLastPaidBlock());\n \n+    uint256 blockHash;\n+    if(!GetBlockHash(blockHash, nBlockHeight - 101)) {\n+        LogPrintf(\"CMasternode::GetNextMasternodeInQueueForPayment -- ERROR: GetBlockHash() failed at nBlockHeight %d\\n\", nBlockHeight - 101);\n+        return NULL;\n+    }\n     // Look at 1/10 of the oldest nodes (by last payment), calculate their scores and pay the best one\n     //  -- This doesn't look at who is being paid in the +8-10 blocks, allowing for double payments very rarely\n     //  -- 1/100 payments should be a double payment on mainnet - (1/(3000/10))*2\n     //  -- (chance per block * chances before IsScheduled will fire)\n     int nTenthNetwork = CountEnabled()/10;\n     int nCountTenth = 0;\n-    arith_uint256 nHigh = 0;\n+    arith_uint256 nHighest = 0;\n     BOOST_FOREACH (PAIRTYPE(int, CMasternode*)& s, vecMasternodeLastPaid){\n-        arith_uint256 n = UintToArith256(s.second->CalculateScore(nBlockHeight - 101));\n-        if(n > nHigh){\n-            nHigh = n;\n+        arith_uint256 nScore = s.second->CalculateScore(blockHash);\n+        if(nScore > nHighest){\n+            nHighest = nScore;\n             pBestMasternode = s.second;\n         }\n         nCountTenth++;\n@@ -401,8 +406,8 @@ int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int64_t nBlockHeight, in\n     std::vector<std::pair<int64_t, CMasternode*> > vecMasternodeScores;\n \n     //make sure we know about this block\n-    uint256 hash = uint256();\n-    if(!GetBlockHash(hash, nBlockHeight)) return -1;\n+    uint256 blockHash = uint256();\n+    if(!GetBlockHash(blockHash, nBlockHeight)) return -1;\n \n     LOCK(cs);\n \n@@ -413,10 +418,9 @@ int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int64_t nBlockHeight, in\n             mn.Check();\n             if(!mn.IsEnabled()) continue;\n         }\n-        uint256 n = mn.CalculateScore(nBlockHeight);\n-        int64_t n2 = UintToArith256(n).GetCompact(false);\n+        int64_t nScore = mn.CalculateScore(blockHash).GetCompact(false);\n \n-        vecMasternodeScores.push_back(std::make_pair(n2, &mn));\n+        vecMasternodeScores.push_back(std::make_pair(nScore, &mn));\n     }\n \n     sort(vecMasternodeScores.rbegin(), vecMasternodeScores.rend(), CompareScoreMN());\n@@ -436,8 +440,8 @@ std::vector<pair<int, CMasternode> > CMasternodeMan::GetMasternodeRanks(int64_t\n     std::vector<std::pair<int, CMasternode> > vecMasternodeRanks;\n \n     //make sure we know about this block\n-    uint256 hash = uint256();\n-    if(!GetBlockHash(hash, nBlockHeight)) return vecMasternodeRanks;\n+    uint256 blockHash = uint256();\n+    if(!GetBlockHash(blockHash, nBlockHeight)) return vecMasternodeRanks;\n \n     LOCK(cs);\n \n@@ -448,10 +452,9 @@ std::vector<pair<int, CMasternode> > CMasternodeMan::GetMasternodeRanks(int64_t\n \n         if(mn.nProtocolVersion < minProtocol || !mn.IsEnabled()) continue;\n \n-        uint256 n = mn.CalculateScore(nBlockHeight);\n-        int64_t n2 = UintToArith256(n).GetCompact(false);\n+        int64_t nScore = mn.CalculateScore(blockHash).GetCompact(false);\n \n-        vecMasternodeScores.push_back(std::make_pair(n2, &mn));\n+        vecMasternodeScores.push_back(std::make_pair(nScore, &mn));\n     }\n \n     sort(vecMasternodeScores.rbegin(), vecMasternodeScores.rend(), CompareScoreMN());\n@@ -471,6 +474,12 @@ CMasternode* CMasternodeMan::GetMasternodeByRank(int nRank, int64_t nBlockHeight\n \n     LOCK(cs);\n \n+    uint256 blockHash;\n+    if(!GetBlockHash(blockHash, nBlockHeight)) {\n+        LogPrintf(\"CMasternode::GetMasternodeByRank -- ERROR: GetBlockHash() failed at nBlockHeight %d\\n\", nBlockHeight);\n+        return NULL;\n+    }\n+\n     // Fill scores\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n \n@@ -480,10 +489,9 @@ CMasternode* CMasternodeMan::GetMasternodeByRank(int nRank, int64_t nBlockHeight\n             if(!mn.IsEnabled()) continue;\n         }\n \n-        uint256 n = mn.CalculateScore(nBlockHeight);\n-        int64_t n2 = UintToArith256(n).GetCompact(false);\n+        int64_t nScore = mn.CalculateScore(blockHash).GetCompact(false);\n \n-        vecMasternodeScores.push_back(std::make_pair(n2, &mn));\n+        vecMasternodeScores.push_back(std::make_pair(nScore, &mn));\n     }\n \n     sort(vecMasternodeScores.rbegin(), vecMasternodeScores.rend(), CompareScoreMN());"
      }
    ]
  },
  {
    "sha": "27c445a891ecc0ae12e4d7f017f5da62627176d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2M0NDVhODkxZWNjMGFlMTJlNGQ3ZjAxN2Y1ZGE2MjYyNzE3NmQz",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2016-10-13T09:45:30Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-13T09:45:30Z"
      },
      "message": "Add more Private Send minimum protocol version checking (#1073)",
      "tree": {
        "sha": "440ae388f315a602bb4711c56267ecd69d6cd7e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/440ae388f315a602bb4711c56267ecd69d6cd7e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c445a891ecc0ae12e4d7f017f5da62627176d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c445a891ecc0ae12e4d7f017f5da62627176d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c445a891ecc0ae12e4d7f017f5da62627176d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c445a891ecc0ae12e4d7f017f5da62627176d3/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5dcf2b668dfc7677ef9f83a5c52bf2fc7ea910f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ed89f20bbaca97eef8f2ffded8a0b493d7a2768e",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c445a891ecc0ae12e4d7f017f5da62627176d3/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c445a891ecc0ae12e4d7f017f5da62627176d3/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=27c445a891ecc0ae12e4d7f017f5da62627176d3",
        "patch": "@@ -1564,7 +1564,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             nLastTimeChanged = GetTimeMillis();\n             // connect to Masternode and submit the queue request\n             CNode* pnode = ConnectNode((CAddress)addr, NULL, true);\n-            if(pnode != NULL) {\n+            if(pnode != NULL && pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n                 pSubmittedToMasternode = pmn;\n                 nSessionDenom = dsq.nDenom;\n \n@@ -1605,7 +1605,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         nLastTimeChanged = GetTimeMillis();\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt %d connection to Masternode %s\\n\", nTries, pmn->addr.ToString());\n         CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n-        if(pnode != NULL) {\n+        if(pnode != NULL && pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected %s\\n\", pmn->vin.ToString());\n             pSubmittedToMasternode = pmn;\n \n@@ -2326,7 +2326,8 @@ bool CDarksendQueue::Relay()\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        pnode->PushMessage(NetMsgType::DSQUEUE, (*this));\n+        if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n+            pnode->PushMessage(NetMsgType::DSQUEUE, (*this));\n \n     return true;\n }\n@@ -2365,7 +2366,8 @@ void CDarksendPool::RelayFinalTransaction(const CTransaction& txFinal)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        pnode->PushMessage(NetMsgType::DSFINALTX, nSessionID, txFinal);\n+        if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n+            pnode->PushMessage(NetMsgType::DSFINALTX, nSessionID, txFinal);\n }\n \n void CDarksendPool::RelayIn(const CDarkSendEntry& entry)\n@@ -2383,14 +2385,16 @@ void CDarksendPool::RelayStatus(int nErrorID)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        pnode->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, nState, nEntriesCount, nAcceptedEntriesCount, nErrorID);\n+        if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n+            pnode->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, nState, nEntriesCount, nAcceptedEntriesCount, nErrorID);\n }\n \n void CDarksendPool::RelayCompletedTransaction(bool fError, int nErrorID)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        pnode->PushMessage(NetMsgType::DSCOMPLETE, nSessionID, fError, nErrorID);\n+        if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n+            pnode->PushMessage(NetMsgType::DSCOMPLETE, nSessionID, fError, nErrorID);\n }\n \n void CDarksendPool::SetState(unsigned int nStateNew)"
      }
    ]
  },
  {
    "sha": "bdcc9ab47c73e90b0491039426639056f135ae3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGNjOWFiNDdjNzNlOTBiMDQ5MTAzOTQyNjYzOTA1NmYxMzVhZTNm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-16T19:23:17Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-16T19:23:17Z"
      },
      "message": "Refactor PS code to deal with denoms in a more generic way (#1071)",
      "tree": {
        "sha": "1e253a0a229e429d2ce3633600bfac00573da5f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e253a0a229e429d2ce3633600bfac00573da5f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdcc9ab47c73e90b0491039426639056f135ae3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdcc9ab47c73e90b0491039426639056f135ae3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdcc9ab47c73e90b0491039426639056f135ae3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdcc9ab47c73e90b0491039426639056f135ae3f/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c445a891ecc0ae12e4d7f017f5da62627176d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c445a891ecc0ae12e4d7f017f5da62627176d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c445a891ecc0ae12e4d7f017f5da62627176d3"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 123,
      "deletions": 127
    },
    "files": [
      {
        "sha": "2033e4893d7d970e220e173b9369f12b4a7bc92b",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 69,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdcc9ab47c73e90b0491039426639056f135ae3f/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdcc9ab47c73e90b0491039426639056f135ae3f/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=bdcc9ab47c73e90b0491039426639056f135ae3f",
        "patch": "@@ -14,6 +14,7 @@\n #include \"script/sign.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n \n #include <boost/lexical_cast.hpp>\n \n@@ -1686,7 +1687,7 @@ bool CDarksendPool::PrepareDenominate(int nMinRounds, int nMaxRounds, std::strin\n \n         if nMinRounds >= 0 it means only denominated inputs are going in and coming out\n     */\n-    bool fSelected = pwalletMain->SelectCoinsByDenominations(nSessionDenom, 0.1*COIN, PRIVATESEND_POOL_MAX, vecTxIn, vCoins, nValueIn, nMinRounds, nMaxRounds);\n+    bool fSelected = pwalletMain->SelectCoinsByDenominations(nSessionDenom, vecPrivateSendDenominations.back(), PRIVATESEND_POOL_MAX, vecTxIn, vCoins, nValueIn, nMinRounds, nMaxRounds);\n     if (nMinRounds >= 0 && !fSelected) {\n         strErrorRet = \"Can't select current denominated inputs\";\n         return false;\n@@ -1703,65 +1704,57 @@ bool CDarksendPool::PrepareDenominate(int nMinRounds, int nMaxRounds, std::strin\n \n     CAmount nValueLeft = nValueIn;\n \n-    /*\n-        TODO: Front load with needed denominations (e.g. .1, 1 )\n-    */\n-\n-    // Make outputs by looping through denominations: try to add every needed denomination, repeat up to 5-10 times.\n-    // This way we can be pretty sure that it should have at least one of each needed denomination.\n+    // Try to add every needed denomination, repeat up to 5-9 times.\n     // NOTE: No need to randomize order of inputs because they were\n     // initially shuffled in CWallet::SelectCoinsByDenominations already.\n     int nStep = 0;\n     int nStepsMax = 5 + GetRandInt(5);\n-    while(nStep < nStepsMax) {\n-\n-        BOOST_FOREACH(CAmount nValueDenom, vecPrivateSendDenominations) {\n-            // only use the ones that are approved\n-            if (!((nSessionDenom & (1 << 0)) && nValueDenom == 100*COIN +100000) &&\n-                !((nSessionDenom & (1 << 1)) && nValueDenom ==  10*COIN + 10000) &&\n-                !((nSessionDenom & (1 << 2)) && nValueDenom ==   1*COIN +  1000) &&\n-                !((nSessionDenom & (1 << 3)) && nValueDenom ==  .1*COIN +   100))\n-                { continue; }\n-\n-            // try to add it\n-            if (nValueLeft - nValueDenom >= 0) {\n-                // Note: this relies on a fact that both vectors MUST have same size\n-                std::vector<CTxIn>::iterator it = vecTxIn.begin();\n-                std::vector<COutput>::iterator it2 = vCoins.begin();\n-                while (it2 != vCoins.end()) {\n-                    // we have matching inputs\n-                    if ((*it2).tx->vout[(*it2).i].nValue == nValueDenom) {\n-                        // add new input in resulting vector\n-                        vecTxInRet.push_back(*it);\n-                        // remove corresponting items from initial vectors\n-                        vecTxIn.erase(it);\n-                        vCoins.erase(it2);\n-\n-                        CScript scriptChange;\n-                        CPubKey vchPubKey;\n-                        // use a unique change address\n-                        assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked\n-                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n-                        reservekey.KeepKey();\n-\n-                        // add new output\n-                        CTxOut txout(nValueDenom, scriptChange);\n-                        vecTxOutRet.push_back(txout);\n-\n-                        // subtract denomination amount\n-                        nValueLeft -= nValueDenom;\n-\n-                        break;\n-                    }\n-                    ++it;\n-                    ++it2;\n+    std::vector<int> vecBits;\n+    if (!GetDenominationsBits(nSessionDenom, vecBits)) {\n+        strErrorRet = \"Incorrect session denom\";\n+        return false;\n+    }\n+\n+    while (nStep < nStepsMax) {\n+        BOOST_FOREACH(int nBit, vecBits) {\n+            CAmount nValueDenom = vecPrivateSendDenominations[nBit];\n+            if (nValueLeft - nValueDenom < 0) continue;\n+\n+            // Note: this relies on a fact that both vectors MUST have same size\n+            std::vector<CTxIn>::iterator it = vecTxIn.begin();\n+            std::vector<COutput>::iterator it2 = vCoins.begin();\n+            while (it2 != vCoins.end()) {\n+                // we have matching inputs\n+                if ((*it2).tx->vout[(*it2).i].nValue == nValueDenom) {\n+                    // add new input in resulting vector\n+                    vecTxInRet.push_back(*it);\n+                    // remove corresponting items from initial vectors\n+                    vecTxIn.erase(it);\n+                    vCoins.erase(it2);\n+\n+                    CScript scriptChange;\n+                    CPubKey vchPubKey;\n+                    // use a unique change address\n+                    assert(reservekey.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked\n+                    scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+                    reservekey.KeepKey();\n+\n+                    // add new output\n+                    CTxOut txout(nValueDenom, scriptChange);\n+                    vecTxOutRet.push_back(txout);\n+\n+                    // subtract denomination amount\n+                    nValueLeft -= nValueDenom;\n+\n+                    // step is complete\n+                    break;\n                 }\n+                ++it;\n+                ++it2;\n             }\n         }\n-\n-        nStep++;\n-\n         if(nValueLeft == 0) break;\n+        nStep++;\n     }\n \n     {\n@@ -2071,38 +2064,34 @@ bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txColl\n }\n \n /*  Create a nice string to show the denominations\n-    Function returns as follows:\n+    Function returns as follows (for 4 denominations):\n         ( bit on if present )\n         bit 0           - 100\n         bit 1           - 10\n         bit 2           - 1\n         bit 3           - .1\n+        bit 4 and so on - out-of-bounds\n         none of above   - non-denom\n-        bit 4 and so on - non-denom\n */\n std::string CDarksendPool::GetDenominationsToString(int nDenom)\n {\n-    std::string strDenom;\n-\n-    if(nDenom & (1 << 0)) strDenom += \"100\";\n+    std::string strDenom = \"\";\n+    int nMaxDenoms = vecPrivateSendDenominations.size();\n \n-    if(nDenom & (1 << 1)) {\n-        if(strDenom.size() > 0) strDenom += \"+\";\n-        strDenom += \"10\";\n+    if(nDenom >= (1 << nMaxDenoms)) {\n+        return \"out-of-bounds\";\n     }\n \n-    if(nDenom & (1 << 2)) {\n-        if(strDenom.size() > 0) strDenom += \"+\";\n-        strDenom += \"1\";\n+    for (int i = 0; i < nMaxDenoms; ++i) {\n+        if(nDenom & (1 << i)) {\n+            strDenom += (strDenom.empty() ? \"\" : \"+\") + FormatMoney(vecPrivateSendDenominations[i]);\n+        }\n     }\n \n-    if(nDenom & (1 << 3)) {\n-        if(strDenom.size() > 0) strDenom += \"+\";\n-        strDenom += \"0.1\";\n+    if(strDenom.empty()) {\n+        return \"non-denom\";\n     }\n \n-    if(strDenom.size() == 0 && nDenom >= (1 << 4)) strDenom += \"non-denom\";\n-\n     return strDenom;\n }\n \n@@ -2117,7 +2106,7 @@ int CDarksendPool::GetDenominations(const std::vector<CTxDSOut>& vecTxDSOut)\n }\n \n /*  Return a bitshifted integer representing the denominations in this list\n-    Function returns as follows:\n+    Function returns as follows (for 4 denominations):\n         ( bit on if present )\n         100       - bit 0\n         10        - bit 1\n@@ -2157,6 +2146,29 @@ int CDarksendPool::GetDenominations(const std::vector<CTxOut>& vecTxOut, bool fS\n     return nDenom;\n }\n \n+bool CDarksendPool::GetDenominationsBits(int nDenom, std::vector<int> &vecBitsRet)\n+{\n+    // ( bit on if present, 4 denominations example )\n+    // bit 0 - 100DASH+1\n+    // bit 1 - 10DASH+1\n+    // bit 2 - 1DASH+1\n+    // bit 3 - .1DASH+1\n+\n+    int nMaxDenoms = vecPrivateSendDenominations.size();\n+\n+    if(nDenom >= (1 << nMaxDenoms)) return false;\n+\n+    vecBitsRet.clear();\n+\n+    for (int i = 0; i < nMaxDenoms; ++i) {\n+        if(nDenom & (1 << i)) {\n+            vecBitsRet.push_back(i);\n+        }\n+    }\n+\n+    return !vecBitsRet.empty();\n+}\n+\n int CDarksendPool::GetDenominationsByAmounts(const std::vector<CAmount>& vecAmount)\n {\n     CScript scriptTmp = CScript();"
      },
      {
        "sha": "b38f114fc362b173dd55ac44fbb6056defd6649a",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdcc9ab47c73e90b0491039426639056f135ae3f/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdcc9ab47c73e90b0491039426639056f135ae3f/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=bdcc9ab47c73e90b0491039426639056f135ae3f",
        "patch": "@@ -446,6 +446,7 @@ class CDarksendPool\n     int GetDenominations(const std::vector<CTxOut>& vecTxOut, bool fSingleRandomDenom = false);\n     int GetDenominations(const std::vector<CTxDSOut>& vecTxDSOut);\n     std::string GetDenominationsToString(int nDenom);\n+    bool GetDenominationsBits(int nDenom, std::vector<int> &vecBitsRet);\n \n     void SetMinBlockSpacing(int nMinBlockSpacingIn) { nMinBlockSpacing = nMinBlockSpacingIn; }\n "
      },
      {
        "sha": "f05c55e0f781d4dfc5f59fcaafa63ce18ac1192b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 57,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdcc9ab47c73e90b0491039426639056f135ae3f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdcc9ab47c73e90b0491039426639056f135ae3f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bdcc9ab47c73e90b0491039426639056f135ae3f",
        "patch": "@@ -2331,12 +2331,12 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     return true;\n }\n \n-bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl, AvailableCoinsType coin_type, bool fUseInstantSend) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl, AvailableCoinsType nCoinType, bool fUseInstantSend) const\n {\n     // Note: this function should never be used for \"always free\" tx types like dstx\n \n     vector<COutput> vCoins;\n-    AvailableCoins(vCoins, true, coinControl, false, coin_type, fUseInstantSend);\n+    AvailableCoins(vCoins, true, coinControl, false, nCoinType, fUseInstantSend);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)\n@@ -2346,33 +2346,33 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n             if(!out.fSpendable)\n                 continue;\n \n-            if(coin_type == ONLY_DENOMINATED) {\n-                CTxIn vin = CTxIn(out.tx->GetHash(),out.i);\n-                int rounds = GetInputPrivateSendRounds(vin);\n+            if(nCoinType == ONLY_DENOMINATED) {\n+                CTxIn txin = CTxIn(out.tx->GetHash(),out.i);\n+                int nRounds = GetInputPrivateSendRounds(txin);\n                 // make sure it's actually anonymized\n-                if(rounds < nPrivateSendRounds) continue;\n+                if(nRounds < nPrivateSendRounds) continue;\n             }\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n     }\n \n-    //if we're doing only denominated, we need to round up to the nearest .1DRK\n-    if(coin_type == ONLY_DENOMINATED) {\n+    //if we're doing only denominated, we need to round up to the nearest smallest denomination\n+    if(nCoinType == ONLY_DENOMINATED) {\n+        CAmount nSmallestDenom = vecPrivateSendDenominations.back();\n         // Make outputs by looping through denominations, from large to small\n-        BOOST_FOREACH(CAmount v, vecPrivateSendDenominations)\n+        BOOST_FOREACH(CAmount nDenom, vecPrivateSendDenominations)\n         {\n             BOOST_FOREACH(const COutput& out, vCoins)\n             {\n-                if(out.tx->vout[out.i].nValue == v                                            //make sure it's the denom we're looking for\n-                    && nValueRet + out.tx->vout[out.i].nValue < nTargetValue + (0.1*COIN)+100 //round the amount up to .1DRK over\n-                ){\n-                    CTxIn vin = CTxIn(out.tx->GetHash(),out.i);\n-                    int rounds = GetInputPrivateSendRounds(vin);\n+                //make sure it's the denom we're looking for, round the amount up to smallest denom\n+                if(out.tx->vout[out.i].nValue == nDenom && nValueRet + nDenom < nTargetValue + nSmallestDenom) {\n+                    CTxIn txin = CTxIn(out.tx->GetHash(),out.i);\n+                    int nRounds = GetInputPrivateSendRounds(txin);\n                     // make sure it's actually anonymized\n-                    if(rounds < nPrivateSendRounds) continue;\n-                    nValueRet += out.tx->vout[out.i].nValue;\n+                    if(nRounds < nPrivateSendRounds) continue;\n+                    nValueRet += nDenom;\n                     setCoinsRet.insert(make_pair(out.tx, out.i));\n                 }\n             }\n@@ -2480,76 +2480,59 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n bool CWallet::SelectCoinsByDenominations(int nDenom, CAmount nValueMin, CAmount nValueMax, std::vector<CTxIn>& vecTxInRet, std::vector<COutput>& vCoinsRet, CAmount& nValueRet, int nPrivateSendRoundsMin, int nPrivateSendRoundsMax)\n {\n     vecTxInRet.clear();\n+    vCoinsRet.clear();\n     nValueRet = 0;\n \n-    vCoinsRet.clear();\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, NULL, false, ONLY_DENOMINATED);\n \n-    std::random_shuffle(vCoins.rbegin(), vCoins.rend());\n-\n-    //keep track of each denomination that we have\n-    bool fFound100 = false;\n-    bool fFound10 = false;\n-    bool fFound1 = false;\n-    bool fFoundDot1 = false;\n+    std::random_shuffle(vCoins.rbegin(), vCoins.rend(), GetRandInt);\n \n     // ( bit on if present )\n     // bit 0 - 100DASH+1\n     // bit 1 - 10DASH+1\n     // bit 2 - 1DASH+1\n     // bit 3 - .1DASH+1\n \n-    //Check to see if any of the denomination are off, in that case mark them as fulfilled\n-    if(!(nDenom & (1 << 0))) fFound100 = true;\n-    if(!(nDenom & (1 << 1))) fFound10 = true;\n-    if(!(nDenom & (1 << 2))) fFound1 = true;\n-    if(!(nDenom & (1 << 3))) fFoundDot1 = true;\n+    std::vector<int> vecBits;\n+    if (!darkSendPool.GetDenominationsBits(nDenom, vecBits)) {\n+        return false;\n+    }\n+\n+    int nDenomResult = 0;\n \n     BOOST_FOREACH(const COutput& out, vCoins)\n     {\n         // masternode-like input should not be selected by AvailableCoins now anyway\n         //if(out.tx->vout[out.i].nValue == 1000*COIN) continue;\n         if(nValueRet + out.tx->vout[out.i].nValue <= nValueMax){\n-            bool fAccepted = false;\n \n-            CTxIn txin = CTxIn(out.tx->GetHash(),out.i);\n+            CTxIn txin = CTxIn(out.tx->GetHash(), out.i);\n \n             int nRounds = GetInputPrivateSendRounds(txin);\n             if(nRounds >= nPrivateSendRoundsMax) continue;\n             if(nRounds < nPrivateSendRoundsMin) continue;\n \n-            if(fFound100 && fFound10 && fFound1 && fFoundDot1){ //if fulfilled\n-                //we can return this for submission\n-                if(nValueRet >= nValueMin){\n-                    //random reduce the max amount we'll submit for anonymity\n-                    nValueMax -= (rand() % (nValueMax/5));\n-                    //on average use 50% of the inputs or less\n-                    int r = (rand() % (int)vCoins.size());\n-                    if((int)vecTxInRet.size() > r) return true;\n+            BOOST_FOREACH(int nBit, vecBits) {\n+                if(out.tx->vout[out.i].nValue == vecPrivateSendDenominations[nBit]) {\n+                    if(nValueRet >= nValueMin) {\n+                        //randomly reduce the max amount we'll submit (for anonymity)\n+                        nValueMax -= (GetInsecureRand(nValueMax/5));\n+                        //on average use 50% of the inputs or less\n+                        int r = GetInsecureRand((int)vCoins.size());\n+                        if((int)vecTxInRet.size() > r) return true;\n+                    }\n+                    txin.prevPubKey = out.tx->vout[out.i].scriptPubKey; // the inputs PubKey\n+                    nValueRet += out.tx->vout[out.i].nValue;\n+                    vecTxInRet.push_back(txin);\n+                    vCoinsRet.push_back(out);\n+                    nDenomResult |= 1 << nBit;\n                 }\n-                //Denomination criterion has been met, we can take any matching denominations\n-                if((nDenom & (1 << 0)) && out.tx->vout[out.i].nValue == ((100*COIN)    +100000)) {fAccepted = true;}\n-                else if((nDenom & (1 << 1)) && out.tx->vout[out.i].nValue == ((10*COIN)+10000)) {fAccepted = true;}\n-                else if((nDenom & (1 << 2)) && out.tx->vout[out.i].nValue == ((1*COIN) +1000)) {fAccepted = true;}\n-                else if((nDenom & (1 << 3)) && out.tx->vout[out.i].nValue == ((.1*COIN)+100)) {fAccepted = true;}\n-            } else {\n-                //Criterion has not been satisfied, we will only take 1 of each until it is.\n-                if((nDenom & (1 << 0)) && out.tx->vout[out.i].nValue == ((100*COIN)    +100000)) {fAccepted = true; fFound100 = true;}\n-                else if((nDenom & (1 << 1)) && out.tx->vout[out.i].nValue == ((10*COIN)+10000)) {fAccepted = true; fFound10 = true;}\n-                else if((nDenom & (1 << 2)) && out.tx->vout[out.i].nValue == ((1*COIN) +1000)) {fAccepted = true; fFound1 = true;}\n-                else if((nDenom & (1 << 3)) && out.tx->vout[out.i].nValue == ((.1*COIN)+100)) {fAccepted = true; fFoundDot1 = true;}\n             }\n-            if(!fAccepted) continue;\n-\n-            txin.prevPubKey = out.tx->vout[out.i].scriptPubKey; // the inputs PubKey\n-            nValueRet += out.tx->vout[out.i].nValue;\n-            vecTxInRet.push_back(txin);\n-            vCoinsRet.push_back(out);\n         }\n     }\n \n-    return (nValueRet >= nValueMin && fFound100 && fFound10 && fFound1 && fFoundDot1);\n+    return nValueRet >= nValueMin && nDenom == nDenomResult;\n }\n \n struct CompareByAmount"
      },
      {
        "sha": "af2122d94deb58a57298d17810ab13c66ffce3ba",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdcc9ab47c73e90b0491039426639056f135ae3f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdcc9ab47c73e90b0491039426639056f135ae3f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bdcc9ab47c73e90b0491039426639056f135ae3f",
        "patch": "@@ -518,7 +518,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * all coins from coinControl are selected; Never select unconfirmed coins\n      * if they are not ours\n      */\n-    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL, AvailableCoinsType coin_type=ALL_COINS, bool fUseInstantSend = true) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL, AvailableCoinsType nCoinType=ALL_COINS, bool fUseInstantSend = true) const;\n \n     CWalletDB *pwalletdbEncryption;\n "
      }
    ]
  },
  {
    "sha": "a584a68634bfef7c308601571144b28f2b38f46b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTg0YTY4NjM0YmZlZjdjMzA4NjAxNTcxMTQ0YjI4ZjJiMzhmNDZi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-16T19:23:42Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-16T19:23:42Z"
      },
      "message": "Revert few parts of #1073 - too early for node version check (and it's not necessary to do so there anyway) (#1080)",
      "tree": {
        "sha": "f1849db71b436e6f60840dc77fbdc017288b94db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1849db71b436e6f60840dc77fbdc017288b94db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a584a68634bfef7c308601571144b28f2b38f46b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a584a68634bfef7c308601571144b28f2b38f46b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a584a68634bfef7c308601571144b28f2b38f46b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a584a68634bfef7c308601571144b28f2b38f46b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdcc9ab47c73e90b0491039426639056f135ae3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdcc9ab47c73e90b0491039426639056f135ae3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdcc9ab47c73e90b0491039426639056f135ae3f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0b327e3a56c4a485419cc1a81e194cddaeea0d4e",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a584a68634bfef7c308601571144b28f2b38f46b/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a584a68634bfef7c308601571144b28f2b38f46b/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=a584a68634bfef7c308601571144b28f2b38f46b",
        "patch": "@@ -1565,7 +1565,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             nLastTimeChanged = GetTimeMillis();\n             // connect to Masternode and submit the queue request\n             CNode* pnode = ConnectNode((CAddress)addr, NULL, true);\n-            if(pnode != NULL && pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n+            if(pnode) {\n                 pSubmittedToMasternode = pmn;\n                 nSessionDenom = dsq.nDenom;\n \n@@ -1606,7 +1606,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         nLastTimeChanged = GetTimeMillis();\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt %d connection to Masternode %s\\n\", nTries, pmn->addr.ToString());\n         CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n-        if(pnode != NULL && pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n+        if(pnode) {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected %s\\n\", pmn->vin.ToString());\n             pSubmittedToMasternode = pmn;\n "
      }
    ]
  },
  {
    "sha": "94e38e318454865291c51a4e5281bec16fcab398",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGUzOGUzMTg0NTQ4NjUyOTFjNTFhNGU1MjgxYmVjMTZmY2FiMzk4",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-17T18:54:28Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-17T18:54:28Z"
      },
      "message": "V0.12.1.x sentinel watchdog pr (#1079)\n\nSquashed:\r\n\r\n* Replaced unsafe mnodeman.Find function with Get in governance-vote.cpp\r\n\r\n* Reject unparsable governance objects\r\n\r\n* Implemented sentinel watchdog objects (separated out from locking changes)\r\n\r\n* Added WATCHDOG support to rpcgovernance.cpp\r\n\r\n* Implemented WATCHDOG_EXPIRED state for masternodes\r\n\r\n* Added serialization of watchdog timestamps\r\n\r\n* Masternode fixes\r\n - Added version check to CMasternodeMan deserialization\r\n - Added several missing locking calls in CMasternodeMan\r\n\r\n* Fixed missing member initialization in CMasternode constructor and added more logging\r\n\r\n* Added MASTERNODE_WATCHDOG_MAX_SECONDS to governanceinfo\r\n\r\n* Added masternodewatchdogmaxseconds info to getgovernanceinfo help\r\n\r\n* Make masternodes remain in WATCHDOG_EXPIRED state unless removed or collateral expires\r\n\r\n* Allow watchdog object creation by WATCHDOG_EXPIRED MN\r\n\r\n* Fixed MN validation logic for governance object creation\r\n\r\n* Count total masternodes instead of enabled masternodes in masternode-sync\r\n\r\n* Transition out of WATCHDOG_EXPIRED state if the watchdog is inactive\r\n\r\n* Fixed IsWatchdogExpired bug\r\n\r\n* Fixed rate check for watchdog objects and no longer check MN state when validating governance objects\r\n\r\n* Applied PR #1061 patch\r\n\r\n* Ported locking changes from other branch\r\n\r\n* Require only 1 block between new watchdog objects\r\n\r\n* Accept pings for WATCHDOG_EXPIRED masternodes\r\n\r\n* Lock CmasternodeMan::cs in CmasternodeMan::ProcessMessage\r\n\r\n* Several governance changes\r\n - Fixed uninitialized value in CGovernancePayment class\r\n - Return an error on submission if any superblock payment cannot be parsed\r\n - Added logging more statements\r\n\r\n* Explicitly initialize all governance object members\r\n\r\n* Fix deadlock\r\n\r\n* Fixed non-threadsafe access to masternode in activemasternode.cpp\r\n\r\n* Revert added wallet lock\r\n\r\n* Changed CActiveMasternode so that watchdog expired nodes can still send pings\r\n\r\n* Modified CActiveMasternode to run pinger regardless of state when MN is in list\r\n\r\n* Added voter and time information to getvotes command\r\n\r\n* Improved CActiveMasternode state management\r\n\r\n* Implemented GetInfo functions for more efficient thread-safe access to masternode information\r\n\r\n* Added CActiveMasternode debug logging messages\r\n\r\n* Fixed initial type setting and error message for incorrect protocol version\r\n\r\n* Changes based on code review comments\r\n\r\n* Set active state for local mode",
      "tree": {
        "sha": "8bfa52247e9c528e06b03961b1fe1c981cc18a01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bfa52247e9c528e06b03961b1fe1c981cc18a01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94e38e318454865291c51a4e5281bec16fcab398",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e38e318454865291c51a4e5281bec16fcab398",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94e38e318454865291c51a4e5281bec16fcab398",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e38e318454865291c51a4e5281bec16fcab398/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a584a68634bfef7c308601571144b28f2b38f46b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a584a68634bfef7c308601571144b28f2b38f46b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a584a68634bfef7c308601571144b28f2b38f46b"
      }
    ],
    "stats": {
      "total": 1048,
      "additions": 773,
      "deletions": 275
    },
    "files": [
      {
        "sha": "0df2739f724ca6de204c823bc91113e2159a78e7",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 199,
        "deletions": 130,
        "changes": 329,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -13,125 +13,42 @@ extern CWallet* pwalletMain;\n // Keep track of the active Masternode\n CActiveMasternode activeMasternode;\n \n-// Bootup the Masternode, look for a 1000DASH input and register on the network\n void CActiveMasternode::ManageState()\n {\n-    std::string strError;\n-\n-    if(!fMasterNode) return;\n-\n-    if (fDebug) LogPrintf(\"CActiveMasternode::ManageState -- Begin\\n\");\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageState -- Start\\n\");\n+    if(!fMasterNode) {\n+        LogPrint(\"masternode\", \"CActiveMasternode::ManageState -- Not a masternode, returning\\n\");\n+        return;\n+    }\n \n-    //need correct blocks to send ping\n     if(Params().NetworkIDString() != CBaseChainParams::REGTEST && !masternodeSync.IsBlockchainSynced()) {\n         nState = ACTIVE_MASTERNODE_SYNC_IN_PROCESS;\n         LogPrintf(\"CActiveMasternode::ManageState -- %s\\n\", GetStatus());\n         return;\n     }\n \n-    if(nState == ACTIVE_MASTERNODE_SYNC_IN_PROCESS) nState = ACTIVE_MASTERNODE_INITIAL;\n-\n-    if(nState == ACTIVE_MASTERNODE_INITIAL) {\n-        CMasternode *pmn;\n-        pmn = mnodeman.Find(pubKeyMasternode);\n-        if(pmn != NULL) {\n-            pmn->Check();\n-            if((pmn->IsEnabled() || pmn->IsPreEnabled()) && pmn->nProtocolVersion == PROTOCOL_VERSION)\n-                EnableRemoteMasterNode(pmn->vin, pmn->addr);\n-        }\n+    if(nState == ACTIVE_MASTERNODE_SYNC_IN_PROCESS) {\n+        nState = ACTIVE_MASTERNODE_INITIAL;\n     }\n \n-    if(nState != ACTIVE_MASTERNODE_STARTED) {\n-\n-        // Set defaults\n-        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n-        strNotCapableReason = \"\";\n-\n-        if(pwalletMain->IsLocked()) {\n-            strNotCapableReason = \"Wallet is locked.\";\n-            LogPrintf(\"CActiveMasternode::ManageState -- not capable: %s\\n\", strNotCapableReason);\n-            return;\n-        }\n-\n-        if(pwalletMain->GetBalance() == 0) {\n-            nState = ACTIVE_MASTERNODE_INITIAL;\n-            LogPrintf(\"CActiveMasternode::ManageState() -- %s\\n\", GetStatus());\n-            return;\n-        }\n-\n-        if(!GetLocal(service)) {\n-            strNotCapableReason = \"Can't detect external address. Please consider using the externalip configuration option if problem persists.\";\n-            LogPrintf(\"CActiveMasternode::ManageState -- not capable: %s\\n\", strNotCapableReason);\n-            return;\n-        }\n-\n-        int mainnetDefaultPort = Params(CBaseChainParams::MAIN).GetDefaultPort();\n-        if(Params().NetworkIDString() == CBaseChainParams::MAIN) {\n-            if(service.GetPort() != mainnetDefaultPort) {\n-                strNotCapableReason = strprintf(\"Invalid port: %u - only %d is supported on mainnet.\", service.GetPort(), mainnetDefaultPort);\n-                LogPrintf(\"CActiveMasternode::ManageState -- not capable: %s\\n\", strNotCapableReason);\n-                return;\n-            }\n-        } else if(service.GetPort() == mainnetDefaultPort) {\n-            strNotCapableReason = strprintf(\"Invalid port: %u - %d is only supported on mainnet.\", service.GetPort(), mainnetDefaultPort);\n-            LogPrintf(\"CActiveMasternode::ManageState -- not capable: %s\\n\", strNotCapableReason);\n-            return;\n-        }\n-\n-        LogPrintf(\"CActiveMasternode::ManageState -- Checking inbound connection to '%s'\\n\", service.ToString());\n-\n-        if(!ConnectNode((CAddress)service, NULL, true)) {\n-            strNotCapableReason = \"Could not connect to \" + service.ToString();\n-            LogPrintf(\"CActiveMasternode::ManageState -- not capable: %s\\n\", strNotCapableReason);\n-            return;\n-        }\n-\n-        // Choose coins to use\n-        CPubKey pubKeyCollateral;\n-        CKey keyCollateral;\n-\n-        if(pwalletMain->GetMasternodeVinAndKeys(vin, pubKeyCollateral, keyCollateral)) {\n-\n-            int nInputAge = GetInputAge(vin);\n-            if(nInputAge < Params().GetConsensus().nMasternodeMinimumConfirmations){\n-                nState = ACTIVE_MASTERNODE_INPUT_TOO_NEW;\n-                strNotCapableReason = strprintf(\"%s - %d confirmations\", GetStatus(), nInputAge);\n-                LogPrintf(\"CActiveMasternode::ManageState -- %s\\n\", strNotCapableReason);\n-                return;\n-            }\n-\n-            LOCK(pwalletMain->cs_wallet);\n-            pwalletMain->LockCoin(vin.prevout);\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageState -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n \n-            CMasternodeBroadcast mnb;\n-            if(!CMasternodeBroadcast::Create(vin, service, keyCollateral, pubKeyCollateral, keyMasternode, pubKeyMasternode, strError, mnb)) {\n-                strNotCapableReason = \"Error on CMasternodeBroadcast::Create -- \" + strError;\n-                LogPrintf(\"CActiveMasternode::ManageState -- %s\\n\", strNotCapableReason);\n-                return;\n-            }\n-\n-            //update to masternode list\n-            LogPrintf(\"CActiveMasternode::ManageState -- Update Masternode List\\n\");\n-            mnodeman.UpdateMasternodeList(mnb);\n-\n-            //send to all peers\n-            LogPrintf(\"CActiveMasternode::ManageState -- Relay broadcast, vin=%s\\n\", vin.ToString());\n-            mnb.Relay();\n-\n-            LogPrintf(\"CActiveMasternode::ManageState -- Is capable master node!\\n\");\n-            nState = ACTIVE_MASTERNODE_STARTED;\n+    if(eType == MASTERNODE_UNKNOWN) {\n+        ManageStateInitial();\n+    }\n \n-            return;\n-        } else {\n-            strNotCapableReason = \"Could not find suitable coins!\";\n-            LogPrintf(\"CActiveMasternode::ManageState -- %s\\n\", strNotCapableReason);\n-            return;\n-        }\n+    if(eType == MASTERNODE_REMOTE) {\n+        ManageStateRemote();\n+    }\n+    else {\n+        ManageStateLocal();\n     }\n \n-    //send to all peers\n-    if(!SendMasternodePing(strError)) {\n-        LogPrintf(\"CActiveMasternode::ManageState -- Error on SendMasternodePing(): %s\\n\", strError);\n+    if(fPingerEnabled) {\n+        std::string strError;\n+        if(!SendMasternodePing(strError)) {\n+            LogPrintf(\"CActiveMasternode::ManageState -- Error on SendMasternodePing(): %s\\n\", strError);\n+        }\n     }\n }\n \n@@ -147,10 +64,29 @@ std::string CActiveMasternode::GetStatus()\n     }\n }\n \n+std::string CActiveMasternode::GetType()\n+{\n+    std::string strType;\n+    switch(eType) {\n+    case MASTERNODE_UNKNOWN:\n+        strType = \"UNKNOWN\";\n+        break;\n+    case MASTERNODE_REMOTE:\n+        strType = \"REMOTE\";\n+        break;\n+    case MASTERNODE_LOCAL:\n+        strType = \"LOCAL\";\n+        break;\n+    default:\n+        strType = \"UNKNOWN\";\n+        break;\n+    }\n+    return strType;\n+}\n+\n bool CActiveMasternode::SendMasternodePing(std::string& strErrorRet)\n {\n-    if(nState != ACTIVE_MASTERNODE_STARTED) {\n-        strErrorRet = \"Masternode is not in a running status\";\n+    if(vin == CTxIn()) {\n         return false;\n     }\n \n@@ -160,34 +96,25 @@ bool CActiveMasternode::SendMasternodePing(std::string& strErrorRet)\n         return false;\n     }\n \n-    // Update lastPing for our masternode in Masternode list\n-    CMasternode* pmn = mnodeman.Find(vin);\n-    if(pmn != NULL) {\n-        if(pmn->IsPingedWithin(MASTERNODE_MIN_MNP_SECONDS, mnp.sigTime)) {\n-            strErrorRet = \"Too early to send Masternode Ping\";\n-            return false;\n-        }\n-\n-        pmn->lastPing = mnp;\n-        mnodeman.mapSeenMasternodePing.insert(std::make_pair(mnp.GetHash(), mnp));\n-\n-        //mnodeman.mapSeenMasternodeBroadcast.lastPing is probably outdated, so we'll update it\n-        CMasternodeBroadcast mnb(*pmn);\n-        uint256 hash = mnb.GetHash();\n-        if(mnodeman.mapSeenMasternodeBroadcast.count(hash))\n-            mnodeman.mapSeenMasternodeBroadcast[hash].lastPing = mnp;\n-\n-        LogPrintf(\"CActiveMasternode::SendMasternodePing -- Relaying ping, collateral=%s\\n\", vin.ToString());\n-        mnp.Relay();\n-\n-        return true;\n-    } else {\n-        // Seems like we are trying to send a ping while the Masternode is not registered in the network\n-        strErrorRet = \"PrivateSend Masternode List doesn't include our Masternode, shutting down Masternode pinging service! \" + vin.ToString();\n+    if(!mnodeman.Has(vin)) {\n+        strErrorRet = \"Masternode List doesn't include our Masternode, shutting down Masternode pinging service! \" + vin.ToString();\n         nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n         strNotCapableReason = strErrorRet;\n         return false;\n     }\n+\n+    // Update lastPing for our masternode in Masternode list\n+    if(mnodeman.IsMasternodePingedWithin(vin, MASTERNODE_MIN_MNP_SECONDS, mnp.sigTime)) {\n+        strErrorRet = \"Too early to send Masternode Ping\";\n+        return false;\n+    }\n+\n+    mnodeman.SetMasternodeLastPing(vin, mnp);\n+\n+    LogPrintf(\"CActiveMasternode::SendMasternodePing -- Relaying ping, collateral=%s\\n\", vin.ToString());\n+    mnp.Relay();\n+\n+    return true;\n }\n \n // when starting a Masternode, this can enable to run as a hot wallet with no funds\n@@ -205,3 +132,145 @@ bool CActiveMasternode::EnableRemoteMasterNode(CTxIn& vinNew, CService& serviceN\n \n     return true;\n }\n+\n+void CActiveMasternode::ManageStateInitial()\n+{\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- Start status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+\n+    // Check that our local network configuration is correct\n+    if(!GetLocal(service)) {\n+        strNotCapableReason = \"Can't detect external address. Please consider using the externalip configuration option if problem persists.\";\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        return;\n+    }\n+\n+    int mainnetDefaultPort = Params(CBaseChainParams::MAIN).GetDefaultPort();\n+    if(Params().NetworkIDString() == CBaseChainParams::MAIN) {\n+        if(service.GetPort() != mainnetDefaultPort) {\n+            strNotCapableReason = strprintf(\"Invalid port: %u - only %d is supported on mainnet.\", service.GetPort(), mainnetDefaultPort);\n+            LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+            return;\n+        }\n+    } else if(service.GetPort() == mainnetDefaultPort) {\n+        strNotCapableReason = strprintf(\"Invalid port: %u - %d is only supported on mainnet.\", service.GetPort(), mainnetDefaultPort);\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        return;\n+    }\n+\n+    LogPrintf(\"CActiveMasternode::ManageState -- Checking inbound connection to '%s'\\n\", service.ToString());\n+\n+    if(!ConnectNode((CAddress)service, NULL, true)) {\n+        strNotCapableReason = \"Could not connect to \" + service.ToString();\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        return;\n+    }\n+\n+    // Default to REMOTE\n+    eType = MASTERNODE_REMOTE;\n+\n+    // Check if wallet funds are available\n+    if(!pwalletMain) {\n+        strNotCapableReason = \"Wallet not available.\";\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        return;\n+    }\n+\n+    if(pwalletMain->IsLocked()) {\n+        strNotCapableReason = \"Wallet is locked.\";\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        return;\n+    }\n+\n+    if(pwalletMain->GetBalance() < 1000*COIN) {\n+        strNotCapableReason = \"Wallet balance is < 1000 DASH\";\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        return;\n+    }\n+\n+    // Choose coins to use\n+    CPubKey pubKeyCollateral;\n+    CKey keyCollateral;\n+\n+    // If collateral is found switch to LOCAL mode\n+    if(pwalletMain->GetMasternodeVinAndKeys(vin, pubKeyCollateral, keyCollateral)) {\n+        eType = MASTERNODE_LOCAL;\n+    }\n+\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- End status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+}\n+\n+void CActiveMasternode::ManageStateRemote()\n+{\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateRemote -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+    mnodeman.CheckMasternode(pubKeyMasternode);\n+    masternode_info_t infoMn = mnodeman.GetMasternodeInfo(pubKeyMasternode);\n+    if(infoMn.fInfoValid) {\n+        if(infoMn.nProtocolVersion != PROTOCOL_VERSION) {\n+            nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+            strNotCapableReason = \"Invalid protocol version\";\n+            return;\n+        }\n+        vin = infoMn.vin;\n+        service = infoMn.addr;\n+        fPingerEnabled = true;\n+        if(((infoMn.nActiveState == CMasternode::MASTERNODE_ENABLED) ||\n+            (infoMn.nActiveState == CMasternode::MASTERNODE_PRE_ENABLED) ||\n+            (infoMn.nActiveState == CMasternode::MASTERNODE_WATCHDOG_EXPIRED))) {\n+            nState = ACTIVE_MASTERNODE_STARTED;\n+        }\n+        else {\n+            nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+            strNotCapableReason = \"Masternode in EXPIRED state\";\n+        }\n+    }\n+    else {\n+        fPingerEnabled = false;\n+        strNotCapableReason = \"Masternode not in masternode list\";\n+        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+    }\n+}\n+\n+void CActiveMasternode::ManageStateLocal()\n+{\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateLocal -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+    if(nState == ACTIVE_MASTERNODE_STARTED) {\n+        return;\n+    }\n+\n+    // Choose coins to use\n+    CPubKey pubKeyCollateral;\n+    CKey keyCollateral;\n+\n+    if(pwalletMain->GetMasternodeVinAndKeys(vin, pubKeyCollateral, keyCollateral)) {\n+        int nInputAge = GetInputAge(vin);\n+        if(nInputAge < Params().GetConsensus().nMasternodeMinimumConfirmations){\n+            nState = ACTIVE_MASTERNODE_INPUT_TOO_NEW;\n+            strNotCapableReason = strprintf(\"%s - %d confirmations\", GetStatus(), nInputAge);\n+            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s\\n\", strNotCapableReason);\n+            return;\n+        }\n+\n+        {\n+            LOCK(pwalletMain->cs_wallet);\n+            pwalletMain->LockCoin(vin.prevout);\n+        }\n+\n+        CMasternodeBroadcast mnb;\n+        std::string strError;\n+        if(!CMasternodeBroadcast::Create(vin, service, keyCollateral, pubKeyCollateral, keyMasternode, pubKeyMasternode, strError, mnb)) {\n+            strNotCapableReason = \"Error on CMasternodeBroadcast::Create -- \" + strError;\n+            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s\\n\", strNotCapableReason);\n+            return;\n+        }\n+\n+        //update to masternode list\n+        LogPrintf(\"CActiveMasternode::ManageStateLocal -- Update Masternode List\\n\");\n+        mnodeman.UpdateMasternodeList(mnb);\n+\n+        //send to all peers\n+        LogPrintf(\"CActiveMasternode::ManageStateLocal -- Relay broadcast, vin=%s\\n\", vin.ToString());\n+        mnb.Relay();\n+        fPingerEnabled = true;\n+        nState = ACTIVE_MASTERNODE_STARTED;\n+    }\n+}"
      },
      {
        "sha": "a9dc25b07fa502adca9ffa8c3f66b5051c64142a",
        "filename": "src/activemasternode.h",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/activemasternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/activemasternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.h?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -22,10 +22,21 @@ extern CActiveMasternode activeMasternode;\n // Responsible for activating the Masternode and pinging the network\n class CActiveMasternode\n {\n+public:\n+    enum masternode_type_enum_t {\n+        MASTERNODE_UNKNOWN = 0,\n+        MASTERNODE_REMOTE  = 1,\n+        MASTERNODE_LOCAL   = 2\n+    };\n+\n private:\n     // critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n \n+    masternode_type_enum_t eType;\n+\n+    bool fPingerEnabled;\n+\n     /// Ping Masternode\n     bool SendMasternodePing(std::string& strErrorRet);\n \n@@ -41,15 +52,28 @@ class CActiveMasternode\n     int nState; // should be one of ACTIVE_MASTERNODE_XXXX\n     std::string strNotCapableReason;\n \n-    CActiveMasternode() : nState(ACTIVE_MASTERNODE_INITIAL) {}\n+    CActiveMasternode()\n+        : eType(MASTERNODE_UNKNOWN),\n+          fPingerEnabled(false),\n+          nState(ACTIVE_MASTERNODE_INITIAL)\n+    {}\n \n     /// Manage state of active Masternode\n     void ManageState();\n \n     std::string GetStatus();\n \n+    std::string GetType();\n+\n     /// Enable cold wallet mode (run a Masternode with no funds)\n     bool EnableRemoteMasterNode(CTxIn& vinNew, CService& serviceNew);\n+\n+private:\n+    void ManageStateInitial();\n+\n+    void ManageStateRemote();\n+\n+    void ManageStateLocal();\n };\n \n #endif"
      },
      {
        "sha": "61ccb6b0983aac3926dcaa185e490b7a2729a311",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 8,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -295,6 +295,7 @@ std::vector<CSuperblock_sptr> CGovernanceTriggerManager::GetActiveTriggers()\n \n bool CSuperblockManager::IsSuperblockTriggered(int nBlockHeight)\n {\n+    LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- Start nBlockHeight = %d\\n\", nBlockHeight);\n     if (!CSuperblock::IsValidBlockHeight(nBlockHeight)) {\n         return false;\n     }\n@@ -303,39 +304,50 @@ bool CSuperblockManager::IsSuperblockTriggered(int nBlockHeight)\n     // GET ALL ACTIVE TRIGGERS\n     std::vector<CSuperblock_sptr> vecTriggers = triggerman.GetActiveTriggers();\n \n+    LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- vecTriggers.size() = %d\\n\", vecTriggers.size());\n+\n     DBG( cout << \"IsSuperblockTriggered Number triggers = \" << vecTriggers.size() << endl; );\n \n     BOOST_FOREACH(CSuperblock_sptr pSuperblock, vecTriggers)\n     {\n         if(!pSuperblock) {\n+            LogPrintf(\"CSuperblockManager::IsSuperblockTriggered -- Non-superblock found, continuing\\n\");\n             DBG( cout << \"IsSuperblockTriggered Not a superblock, continuing \" << endl; );\n             continue;\n         }\n \n         CGovernanceObject* pObj = pSuperblock->GetGovernanceObject();\n \n         if(!pObj) {\n+            LogPrintf(\"CSuperblockManager::IsSuperblockTriggered -- pObj == NULL, continuing\\n\");\n             DBG( cout << \"IsSuperblockTriggered pObj is NULL, continuing\" << endl; );\n             continue;\n         }\n \n+        LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- data = %s\\n\", pObj->GetDataAsString());\n+\n         // note : 12.1 - is epoch calculation correct?\n \n         if(nBlockHeight != pSuperblock->GetBlockStart()) {\n+            LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- block height doesn't match nBlockHeight = %d, blockStart = %d, continuing\\n\",\n+                     nBlockHeight,\n+                     pSuperblock->GetBlockStart());\n             DBG( cout << \"IsSuperblockTriggered Not the target block, continuing\"\n-                      << \", nBlockHeight = \" << nBlockHeight\n-                      << \", superblock->GetBlockStart() = \" << pSuperblock->GetBlockStart()\n-                      << endl; );\n+                 << \", nBlockHeight = \" << nBlockHeight\n+                 << \", superblock->GetBlockStart() = \" << pSuperblock->GetBlockStart()\n+                 << endl; );\n             continue;\n         }\n \n         // MAKE SURE THIS TRIGGER IS ACTIVE VIA FUNDING CACHE FLAG\n \n         if(pObj->fCachedFunding) {\n+            LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- fCacheFunding = true, returning true\\n\");\n             DBG( cout << \"IsSuperblockTriggered returning true\" << endl; );\n             return true;\n         }\n         else  {\n+            LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- fCacheFunding = false, continuing\\n\");\n             DBG( cout << \"IsSuperblockTriggered No fCachedFunding, continuing\" << endl; );\n         }\n     }\n@@ -402,7 +414,7 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n \n     CSuperblock_sptr pSuperblock;\n     if(!CSuperblockManager::GetBestSuperblock(pSuperblock, nBlockHeight)) {\n-        LogPrint(\"superblock\", \"CSuperblockManager::CreateSuperblock -- Can't find superblock for height %d\\n\", nBlockHeight);\n+        LogPrint(\"gobject\", \"CSuperblockManager::CreateSuperblock -- Can't find superblock for height %d\\n\", nBlockHeight);\n         DBG( cout << \"CSuperblockManager::CreateSuperblock Failed to get superblock for height, returning\" << endl; );\n         return;\n     }\n@@ -507,6 +519,9 @@ CSuperblock(uint256& nHash)\n     std::string strAmounts = obj[\"payment_amounts\"].get_str();\n     ParsePaymentSchedule(strAddresses, strAmounts);\n \n+    LogPrint(\"gobject\", \"CSuperblock -- nEpochStart = %d, strAddresses = %s, strAmounts = %s, vecPayments.size() = %d\\n\",\n+             nEpochStart, strAddresses, strAmounts, vecPayments.size());\n+\n     DBG( cout << \"CSuperblock Constructor End\" << endl; );\n }\n \n@@ -554,13 +569,15 @@ void CSuperblock::ParsePaymentSchedule(std::string& strPaymentAddresses, std::st\n \n     if (vecParsed1.size() != vecParsed2.size()) {\n         std::ostringstream ostr;\n-        ostr << \"CSuperblock::ParsePaymentSchedule Mismatched payments and amounts\";\n+        ostr << \"CSuperblock::ParsePaymentSchedule -- Mismatched payments and amounts\";\n+        LogPrintf(\"%s\\n\", ostr.str());\n         throw std::runtime_error(ostr.str());\n     }\n \n     if (vecParsed1.size() == 0) {\n         std::ostringstream ostr;\n-        ostr << \"CSuperblock::ParsePaymentSchedule Error no payments\";\n+        ostr << \"CSuperblock::ParsePaymentSchedule -- Error no payments\";\n+        LogPrintf(\"%s\\n\", ostr.str());\n         throw std::runtime_error(ostr.str());\n     }\n \n@@ -576,7 +593,8 @@ void CSuperblock::ParsePaymentSchedule(std::string& strPaymentAddresses, std::st\n         CBitcoinAddress address(vecParsed1[i]);\n         if (!address.IsValid()) {\n             std::ostringstream ostr;\n-            ostr << \"CSuperblock::ParsePaymentSchedule Invalid Dash Address : \" <<  vecParsed1[i];\n+            ostr << \"CSuperblock::ParsePaymentSchedule -- Invalid Dash Address : \" <<  vecParsed1[i];\n+            LogPrintf(\"%s\\n\", ostr.str());\n             throw std::runtime_error(ostr.str());\n         }\n \n@@ -595,6 +613,14 @@ void CSuperblock::ParsePaymentSchedule(std::string& strPaymentAddresses, std::st\n         if(payment.IsValid()) {\n             vecPayments.push_back(payment);\n         }\n+        else {\n+            vecPayments.clear();\n+            std::ostringstream ostr;\n+            ostr << \"CSuperblock::ParsePaymentSchedule -- Invalid payment found: address = \" << address.ToString()\n+                 << \", amount = \" << nAmount;\n+            LogPrintf(\"%s\\n\", ostr.str());\n+            throw std::runtime_error(ostr.str());\n+        }\n     }\n }\n \n@@ -646,6 +672,9 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, CAmount b\n     int nPayments = CountPayments();\n     int nMinerPayments = nOutputs - nPayments;\n \n+    LogPrint(\"gobject\", \"CSuperblock::IsValid nOutputs = %d, nPayments = %d, strData = %s\\n\",\n+             nOutputs, nPayments, GetGovernanceObject()->strData);\n+\n     // We require an exact match (including order) between the expected\n     // superblock payments and the payments actually in the block, after\n     // skipping any initial miner payments.\n@@ -716,7 +745,7 @@ std::string CSuperblockManager::GetRequiredPaymentsString(int nBlockHeight)\n \n     CSuperblock_sptr pSuperblock;\n     if(!GetBestSuperblock(pSuperblock, nBlockHeight)) {\n-        LogPrint(\"superblock\", \"CSuperblockManager::GetRequiredPaymentsString -- Can't find superblock for height %d\\n\", nBlockHeight);\n+        LogPrint(\"gobject\", \"CSuperblockManager::GetRequiredPaymentsString -- Can't find superblock for height %d\\n\", nBlockHeight);\n         return \"error\";\n     }\n "
      },
      {
        "sha": "04682d95552eb925628ee53fe9e584f31d92a459",
        "filename": "src/governance-classes.h",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.h?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -99,27 +99,33 @@ class CGovernancePayment\n     CAmount nAmount;\n \n     CGovernancePayment()\n-    {\n-        SetNull();\n-    }\n+        :fValid(false),\n+         script(),\n+         nAmount(0)\n+    {}\n \n     CGovernancePayment(CBitcoinAddress addrIn, CAmount nAmountIn)\n+        :fValid(false),\n+         script(),\n+         nAmount(0)\n     {\n         try\n         {\n             CTxDestination dest = addrIn.Get();\n             script = GetScriptForDestination(dest);\n             nAmount = nAmountIn;\n-        } catch(...) {\n-            SetNull(); //set fValid to false\n+            fValid = true;\n+        }\n+        catch(std::exception& e)\n+        {\n+            LogPrintf(\"CGovernancePayment Payment not valid: addrIn = %s, nAmountIn = %d, what = %s\\n\",\n+                     addrIn.ToString(), nAmountIn, e.what());\n+        }\n+        catch(...)\n+        {\n+            LogPrintf(\"CGovernancePayment Payment not valid: addrIn = %s, nAmountIn = %d\\n\",\n+                      addrIn.ToString(), nAmountIn);\n         }\n-    }\n-\n-    void SetNull()\n-    {\n-        script = CScript();\n-        nAmount = 0;\n-        fValid = false;\n     }\n \n     bool IsValid() { return fValid; }"
      },
      {
        "sha": "a196a13cc0d8ad12c605da9cfef08c9d5a12b99c",
        "filename": "src/governance-vote.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/governance-vote.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/governance-vote.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -283,9 +283,8 @@ bool CGovernanceVote::IsValid(bool fSignatureCheck)\n         return false;\n     }\n \n-    CMasternode* pmn = mnodeman.Find(vinMasternode);\n-    if(pmn == NULL)\n-    {\n+    masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n+    if(!infoMn.fInfoValid) {\n         LogPrint(\"gobject\", \"CGovernanceVote::IsValid -- Unknown Masternode - %s\\n\", vinMasternode.prevout.ToStringShort());\n         return false;\n     }\n@@ -296,7 +295,7 @@ bool CGovernanceVote::IsValid(bool fSignatureCheck)\n     std::string strMessage = vinMasternode.prevout.ToStringShort() + \"|\" + nParentHash.ToString() + \"|\" +\n         boost::lexical_cast<std::string>(nVoteSignal) + \"|\" + boost::lexical_cast<std::string>(nVoteOutcome) + \"|\" + boost::lexical_cast<std::string>(nTime);\n \n-    if(!darkSendSigner.VerifyMessage(pmn->pubKeyMasternode, vchSig, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(infoMn.pubKeyMasternode, vchSig, strMessage, strError)) {\n         LogPrintf(\"CGovernanceVote::IsValid -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }"
      },
      {
        "sha": "5daaced27a4028ca4645e80ba64bd7f6c8838acf",
        "filename": "src/governance-vote.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/governance-vote.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/governance-vote.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.h?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -109,9 +109,9 @@ class CGovernanceVote\n \n     int64_t GetTimestamp() const { return nTime; }\n \n-    vote_signal_enum_t GetSignal()  { return vote_signal_enum_t(nVoteSignal); }\n+    vote_signal_enum_t GetSignal() const  { return vote_signal_enum_t(nVoteSignal); }\n \n-    vote_outcome_enum_t GetOutcome()  { return vote_outcome_enum_t(nVoteOutcome); }\n+    vote_outcome_enum_t GetOutcome() const  { return vote_outcome_enum_t(nVoteOutcome); }\n \n     const uint256& GetParentHash() const { return nParentHash; }\n \n@@ -129,6 +129,8 @@ class CGovernanceVote\n \n     CTxIn& GetVinMasternode() { return vinMasternode; }\n \n+    const CTxIn& GetVinMasternode() const { return vinMasternode; }\n+\n     /**\n     *   GetHash()\n     *\n@@ -148,8 +150,12 @@ class CGovernanceVote\n \n     std::string ToString()\n     {\n-        std::string strRet = CGovernanceVoting::ConvertOutcomeToString(GetOutcome()) + \":\" + CGovernanceVoting::ConvertSignalToString(GetSignal());\n-        return strRet;\n+        std::ostringstream ostr;\n+        ostr << vinMasternode.ToString() << \":\"\n+             << nTime << \":\"\n+             << CGovernanceVoting::ConvertOutcomeToString(GetOutcome()) << \":\"\n+             << CGovernanceVoting::ConvertSignalToString(GetSignal());\n+        return ostr.str();\n     }\n \n     /**"
      },
      {
        "sha": "f2ec9ce875f41bbd876c1bb34465a6b648d1c9f4",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 107,
        "deletions": 78,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -36,6 +36,8 @@ CGovernanceManager::CGovernanceManager()\n       mapSeenGovernanceObjects(),\n       mapSeenVotes(),\n       mapOrphanVotes(),\n+      mapVotesByHash(),\n+      mapVotesByType(),\n       mapLastMasternodeTrigger(),\n       cs()\n {}\n@@ -186,8 +188,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         // FIND THE MASTERNODE OF THE VOTER\n \n-        CMasternode* pmn = mnodeman.Find(vote.GetVinMasternode());\n-        if(pmn == NULL) {\n+        if(!mnodeman.Has(vote.GetVinMasternode())) {\n             LogPrint(\"gobject\", \"gobject - unknown masternode - vin: %s\\n\", vote.GetVinMasternode().ToString());\n             mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n             return;\n@@ -212,7 +213,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         if(AddOrUpdateVote(vote, pfrom, strError)) {\n             vote.Relay();\n             masternodeSync.AddedBudgetItem(vote.GetHash());\n-            pmn->AddGovernanceVote(vote.GetParentHash());\n+            mnodeman.AddGovernanceVote(vote.GetVinMasternode(), vote.GetParentHash());\n         }\n \n         LogPrint(\"gobject\", \"NEW governance vote: %s\\n\", vote.GetHash().ToString());\n@@ -267,11 +268,15 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n               << \", nObjectType = \" << govobj.nObjectType\n               << endl; );\n \n-    if(govobj.nObjectType == GOVERNANCE_OBJECT_TRIGGER) {\n+    switch(govobj.nObjectType) {\n+    case GOVERNANCE_OBJECT_TRIGGER:\n         mapLastMasternodeTrigger[govobj.vinMasternode.prevout] = nCachedBlockHeight;\n         DBG( cout << \"CGovernanceManager::AddGovernanceObject Before AddNewTrigger\" << endl; );\n         triggerman.AddNewTrigger(govobj.GetHash());\n         DBG( cout << \"CGovernanceManager::AddGovernanceObject After AddNewTrigger\" << endl; );\n+        break;\n+    default:\n+        break;\n     }\n \n     DBG( cout << \"CGovernanceManager::AddGovernanceObject END\" << endl; );\n@@ -283,8 +288,18 @@ void CGovernanceManager::UpdateCachesAndClean()\n {\n     LogPrintf(\"CGovernanceManager::UpdateCachesAndClean \\n\");\n \n+    std::vector<uint256> vecDirtyHashes = mnodeman.GetAndClearDirtyGovernanceObjectHashes();\n+\n     LOCK(cs);\n \n+    for(size_t i = 0; i < vecDirtyHashes.size(); ++i) {\n+        object_m_it it = mapObjects.find(vecDirtyHashes[i]);\n+        if(it == mapObjects.end()) {\n+            continue;\n+        }\n+        it->second.fDirtyCache = true;\n+    }\n+\n     // DOUBLE CHECK THAT WE HAVE A VALID POINTER TO TIP\n \n     if(!pCurrentBlockIndex) return;\n@@ -322,6 +337,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n         if(pObj->fCachedDelete || pObj->fExpired) {\n             LogPrintf(\"UpdateCachesAndClean --- erase obj %s\\n\", (*it).first.ToString());\n+            mnodeman.RemoveGovernanceObject(pObj->GetHash());\n             mapObjects.erase(it++);\n         } else {\n             ++it;\n@@ -561,22 +577,37 @@ bool CGovernanceManager::AddOrUpdateVote(const CGovernanceVote& vote, CNode* pfr\n     {\n         pGovObj->fDirtyCache = true;\n         UpdateCachesAndClean();\n+        if(pGovObj->GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n+            mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());\n+        }\n     } else {\n         LogPrintf(\"Governance object not found! Can't update fDirtyCache - %s\\n\", vote.GetParentHash().ToString());\n     }\n \n     return true;\n }\n \n-bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin)\n+bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n {\n     LOCK(cs);\n+\n+    int mindiff = 0;\n+    switch(nObjectType) {\n+    case GOVERNANCE_OBJECT_TRIGGER:\n+        mindiff = Params().GetConsensus().nSuperblockCycle - Params().GetConsensus().nSuperblockCycle / 10;\n+        break;\n+    case GOVERNANCE_OBJECT_WATCHDOG:\n+        mindiff = 1;\n+        break;\n+    default:\n+        break;\n+    }\n+\n     txout_m_it it  = mapLastMasternodeTrigger.find(vin.prevout);\n     if(it == mapLastMasternodeTrigger.end()) {\n         return true;\n     }\n     // Allow 1 trigger per mn per cycle, with a small fudge factor\n-    int mindiff = Params().GetConsensus().nSuperblockCycle - Params().GetConsensus().nSuperblockCycle / 10;\n     if((nCachedBlockHeight - it->second) > mindiff) {\n         return true;\n     }\n@@ -587,79 +618,73 @@ bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin)\n }\n \n CGovernanceObject::CGovernanceObject()\n+    : cs(),\n+      nHashParent(),\n+      nRevision(0),\n+      nTime(0),\n+      nCollateralHash(),\n+      strData(),\n+      nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+      vinMasternode(),\n+      vchSig(),\n+      fCachedLocalValidity(false),\n+      strLocalValidityError(),\n+      fCachedFunding(false),\n+      fCachedValid(true),\n+      fCachedDelete(false),\n+      fCachedEndorsed(false),\n+      fDirtyCache(true),\n+      fUnparsable(false),\n+      fExpired(false)\n {\n-    // MAIN OBJECT DATA\n-\n-    nTime = 0;\n-    nObjectType = GOVERNANCE_OBJECT_UNKNOWN;\n-\n-    nHashParent = uint256(); //parent object, 0 is root\n-    nRevision = 0; //object revision in the system\n-    nCollateralHash = uint256(); //fee-tx\n-\n-    // CACHING FOR VARIOUS FLAGS\n-\n-    fCachedFunding = false;\n-    fCachedValid = true;\n-    fCachedDelete = false;\n-    fCachedEndorsed = false;\n-    fDirtyCache = true;\n-    fUnparsable = false;\n-    fExpired = false;\n-\n     // PARSE JSON DATA STORAGE (STRDATA)\n     LoadData();\n }\n \n CGovernanceObject::CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTimeIn, uint256 nCollateralHashIn, std::string strDataIn)\n+    : cs(),\n+      nHashParent(nHashParentIn),\n+      nRevision(nRevisionIn),\n+      nTime(nTimeIn),\n+      nCollateralHash(nCollateralHashIn),\n+      strData(strDataIn),\n+      nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+      vinMasternode(),\n+      vchSig(),\n+      fCachedLocalValidity(false),\n+      strLocalValidityError(),\n+      fCachedFunding(false),\n+      fCachedValid(true),\n+      fCachedDelete(false),\n+      fCachedEndorsed(false),\n+      fDirtyCache(true),\n+      fUnparsable(false),\n+      fExpired(false)\n {\n-    // MAIN OBJECT DATA\n-\n-    nHashParent = nHashParentIn; //parent object, 0 is root\n-    nRevision = nRevisionIn; //object revision in the system\n-    nTime = nTimeIn;\n-    nCollateralHash = nCollateralHashIn; //fee-tx\n-    nObjectType = GOVERNANCE_OBJECT_UNKNOWN; // Avoid having an uninitialized variable\n-    strData = strDataIn;\n-\n-    // CACHING FOR VARIOUS FLAGS\n-\n-    fCachedFunding = false;\n-    fCachedValid = true;\n-    fCachedDelete = false;\n-    fCachedEndorsed = false;\n-    fDirtyCache = true;\n-    fUnparsable = false;\n-    fExpired = false;\n-\n     // PARSE JSON DATA STORAGE (STRDATA)\n     LoadData();\n }\n \n CGovernanceObject::CGovernanceObject(const CGovernanceObject& other)\n-{\n-    // COPY OTHER OBJECT'S DATA INTO THIS OBJECT\n-\n-    nHashParent = other.nHashParent;\n-    nRevision = other.nRevision;\n-    nTime = other.nTime;\n-    nCollateralHash = other.nCollateralHash;\n-    strData = other.strData;\n-    nObjectType = other.nObjectType;\n-\n-    fUnparsable = true;\n-\n-    vinMasternode = other.vinMasternode;\n-    vchSig = other.vchSig;\n-\n-    // caching\n-    fCachedFunding = other.fCachedFunding;\n-    fCachedValid = other.fCachedValid;\n-    fCachedDelete = other.fCachedDelete;\n-    fCachedEndorsed = other.fCachedEndorsed;\n-    fDirtyCache = other.fDirtyCache;\n-    fExpired = other.fExpired;\n-}\n+    : cs(),\n+      nHashParent(other.nHashParent),\n+      nRevision(other.nRevision),\n+      nTime(other.nTime),\n+      nCollateralHash(other.nCollateralHash),\n+      strData(other.strData),\n+      nObjectType(other.nObjectType),\n+      vinMasternode(other.vinMasternode),\n+      vchSig(other.vchSig),\n+      fCachedLocalValidity(other.fCachedLocalValidity),\n+      strLocalValidityError(other.strLocalValidityError),\n+      fCachedFunding(other.fCachedFunding),\n+      fCachedValid(other.fCachedValid),\n+      fCachedDelete(other.fCachedDelete),\n+      fCachedEndorsed(other.fCachedEndorsed),\n+      fDirtyCache(other.fDirtyCache),\n+      fUnparsable(other.fUnparsable),\n+      fExpired(other.fExpired)\n+{}\n \n void CGovernanceObject::SetMasternodeInfo(const CTxIn& vin)\n {\n@@ -789,6 +814,7 @@ void CGovernanceObject::LoadData()\n         nObjectType = obj[\"type\"].get_int();\n     }\n     catch(std::exception& e) {\n+        fUnparsable = true;\n         std::ostringstream ostr;\n         ostr << \"CGovernanceObject::LoadData Error parsing JSON\"\n              << \", e.what() = \" << e.what();\n@@ -797,6 +823,7 @@ void CGovernanceObject::LoadData()\n         return;\n     }\n     catch(...) {\n+        fUnparsable = true;\n         std::ostringstream ostr;\n         ostr << \"CGovernanceObject::LoadData Unknown Error parsing JSON\";\n         DBG( cout << ostr.str() << endl; );\n@@ -854,9 +881,14 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n         return true;\n     }\n \n+    if(fUnparsable) {\n+        return false;\n+    }\n+\n     switch(nObjectType) {\n         case GOVERNANCE_OBJECT_PROPOSAL:\n         case GOVERNANCE_OBJECT_TRIGGER:\n+        case GOVERNANCE_OBJECT_WATCHDOG:\n             break;\n         default:\n             strError = strprintf(\"Invalid object type %d\", nObjectType);\n@@ -872,29 +904,25 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n \n     // CHECK COLLATERAL IF REQUIRED (HIGH CPU USAGE)\n \n-    if(fCheckCollateral) {\n-        if(nObjectType == GOVERNANCE_OBJECT_TRIGGER) {\n+    if(fCheckCollateral) { \n+        if((nObjectType == GOVERNANCE_OBJECT_TRIGGER) || (nObjectType == GOVERNANCE_OBJECT_WATCHDOG)) {\n             std::string strVin = vinMasternode.prevout.ToStringShort();\n-            CMasternode mn;\n-            if(!mnodeman.Get(vinMasternode, mn)) {\n+            masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n+            if(!infoMn.fInfoValid) {\n                 strError = \"Masternode not found vin: \" + strVin;\n                 return false;\n             }\n-            if(!mn.IsEnabled()) {\n-                strError = \"Masternode not enabled vin: \" + strVin;\n-                return false;\n-            }\n \n             // Check that we have a valid MN signature\n-            if(!CheckSignature(mn.pubKeyMasternode)) {\n-                strError = \"Invalid masternode signature for: \" + strVin + \", pubkey id = \" + mn.pubKeyMasternode.GetID().ToString();\n+            if(!CheckSignature(infoMn.pubKeyMasternode)) {\n+                strError = \"Invalid masternode signature for: \" + strVin + \", pubkey id = \" + infoMn.pubKeyMasternode.GetID().ToString();\n                 return false;\n             }\n \n             // Only perform rate check if we are synced because during syncing it is expected\n             // that objects will be seen in rapid succession\n             if(masternodeSync.IsSynced()) {\n-                if(!governance.MasternodeRateCheck(vinMasternode)) {\n+                if(!governance.MasternodeRateCheck(vinMasternode, nObjectType)) {\n                     strError = \"Masternode attempting to create too many objects vin: \" + strVin;\n                     return false;\n                 }\n@@ -932,6 +960,7 @@ CAmount CGovernanceObject::GetMinCollateralFee()\n     switch(nObjectType) {\n         case GOVERNANCE_OBJECT_PROPOSAL:    return GOVERNANCE_PROPOSAL_FEE_TX;\n         case GOVERNANCE_OBJECT_TRIGGER:     return 0;\n+        case GOVERNANCE_OBJECT_WATCHDOG:    return 0;\n         default:                            return MAX_MONEY;\n     }\n }"
      },
      {
        "sha": "5dda7918445da8022c18757b1be1ce495bd8ee68",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -35,6 +35,7 @@ static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70202;\n static const int GOVERNANCE_OBJECT_UNKNOWN = 0;\n static const int GOVERNANCE_OBJECT_PROPOSAL = 1;\n static const int GOVERNANCE_OBJECT_TRIGGER = 2;\n+static const int GOVERNANCE_OBJECT_WATCHDOG = 3;\n \n static const CAmount GOVERNANCE_PROPOSAL_FEE_TX = (0.33*COIN);\n \n@@ -205,7 +206,7 @@ class CGovernanceManager\n \n     void AddSeenVote(uint256 nHash, int status);\n \n-    bool MasternodeRateCheck(const CTxIn& vin);\n+    bool MasternodeRateCheck(const CTxIn& vin, int nObjectType);\n \n };\n "
      },
      {
        "sha": "442b78107624d9536b5b00791756aa64f0a7a8e3",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -169,7 +169,9 @@ void CMasternodeSync::ProcessTick()\n     if(!pCurrentBlockIndex) return;\n \n     //the actual count of masternodes we have currently\n-    int nMnCount = mnodeman.CountEnabled();\n+    int nMnCount = mnodeman.CountMasternodes();\n+\n+    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nMnCount = %d\\n\", nTick, nMnCount);\n \n     // RESET SYNCING INCASE OF FAILURE\n     {\n@@ -222,7 +224,7 @@ void CMasternodeSync::ProcessTick()\n             } else if(nRequestedMasternodeAttempt < 4) {\n                 mnodeman.DsegUpdate(pnode);\n             } else if(nRequestedMasternodeAttempt < 6) {\n-                int nMnCount = mnodeman.CountEnabled();\n+                int nMnCount = mnodeman.CountMasternodes();\n                 pnode->PushMessage(NetMsgType::MASTERNODEPAYMENTSYNC, nMnCount); //sync payment votes\n                 uint256 n = uint256();\n                 pnode->PushMessage(NetMsgType::MNGOVERNANCESYNC, n); //sync masternode votes\n@@ -274,6 +276,8 @@ void CMasternodeSync::ProcessTick()\n                 /* Note: Is this activing up? It's probably related to int CMasternodeMan::GetEstimatedMasternodes(int nBlock)\n                    Surely doesn't work right for testnet currently */\n                 // try to fetch data from at least two peers though\n+                LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nMnCount %d, Estimated masternode count required: %d\\n\", \n+                          nTick, nMnCount, mnodeman.GetEstimatedMasternodes(pCurrentBlockIndex->nHeight)*0.9);\n                 if(nRequestedMasternodeAttempt > 1 && nMnCount > mnodeman.GetEstimatedMasternodes(pCurrentBlockIndex->nHeight)*0.9) {\n                     LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- found enough data\\n\", nTick, nRequestedMasternodeAssets);\n                     SwitchToNextAsset();"
      },
      {
        "sha": "16c9c644b232bdcdf996f6abe82c4a5e701b225e",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 20,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -27,6 +27,7 @@ CMasternode::CMasternode() :\n     nLastDsq(0),\n     nTimeLastChecked(0),\n     nTimeLastPaid(0),\n+    nTimeLastWatchdogVote(0),\n     nActiveState(MASTERNODE_ENABLED),\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n@@ -46,6 +47,7 @@ CMasternode::CMasternode(CService addrNew, CTxIn vinNew, CPubKey pubKeyCollatera\n     nLastDsq(0),\n     nTimeLastChecked(0),\n     nTimeLastPaid(0),\n+    nTimeLastWatchdogVote(0),\n     nActiveState(MASTERNODE_ENABLED),\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n@@ -65,6 +67,7 @@ CMasternode::CMasternode(const CMasternode& other) :\n     nLastDsq(other.nLastDsq),\n     nTimeLastChecked(other.nTimeLastChecked),\n     nTimeLastPaid(other.nTimeLastPaid),\n+    nTimeLastWatchdogVote(other.nTimeLastWatchdogVote),\n     nActiveState(other.nActiveState),\n     nCacheCollateralBlock(other.nCacheCollateralBlock),\n     nBlockLastPaid(other.nBlockLastPaid),\n@@ -84,6 +87,7 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n     nLastDsq(mnb.nLastDsq),\n     nTimeLastChecked(0),\n     nTimeLastPaid(0),\n+    nTimeLastWatchdogVote(0),\n     nActiveState(MASTERNODE_ENABLED),\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n@@ -137,6 +141,13 @@ arith_uint256 CMasternode::CalculateScore(const uint256& blockHash)\n \n void CMasternode::Check(bool fForce)\n {\n+    LOCK(cs);\n+\n+    bool fWatchdogActive = mnodeman.IsWatchdogActive();\n+\n+    LogPrint(\"masternode\", \"CMasternode::Check start -- vin = %s\\n\", \n+             vin.prevout.ToStringShort());\n+\n     //once spent, stop doing the checks\n     if(nActiveState == MASTERNODE_OUTPOINT_SPENT) return;\n \n@@ -145,12 +156,15 @@ void CMasternode::Check(bool fForce)\n     if(!fForce && (GetTime() - nTimeLastChecked < MASTERNODE_CHECK_SECONDS)) return;\n     nTimeLastChecked = GetTime();\n \n-    bool fRemove =  // If there were no pings for quite a long time ...\n-                    !IsPingedWithin(MASTERNODE_REMOVAL_SECONDS) ||\n-                    // or masternode doesn't meet payment protocol requirements ...\n-                    nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n-                    // or it's our own node and we just updated it to the new protocol but we are still waiting for activation ...\n-                    (pubKeyMasternode == activeMasternode.pubKeyMasternode && nProtocolVersion < PROTOCOL_VERSION);\n+    if((nActiveState == MASTERNODE_WATCHDOG_EXPIRED) && !fWatchdogActive) {\n+        // Redo the checks\n+        nActiveState = MASTERNODE_ENABLED;\n+    }\n+\n+                   // masternode doesn't meet payment protocol requirements ...\n+    bool fRemove = nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n+                   // or it's our own node and we just updated it to the new protocol but we are still waiting for activation ...\n+                   (pubKeyMasternode == activeMasternode.pubKeyMasternode && nProtocolVersion < PROTOCOL_VERSION);\n \n     if(fRemove) {\n         // it should be removed from the list\n@@ -162,15 +176,20 @@ void CMasternode::Check(bool fForce)\n     }\n \n     if(!IsPingedWithin(MASTERNODE_EXPIRATION_SECONDS)) {\n-        nActiveState = MASTERNODE_EXPIRED;\n+        if(nActiveState != MASTERNODE_WATCHDOG_EXPIRED) {\n+            nActiveState = MASTERNODE_EXPIRED;\n+        }\n \n         // RESCAN AFFECTED VOTES\n         FlagGovernanceItemsAsDirty();\n         return;\n     }\n \n     if(lastPing.sigTime - sigTime < MASTERNODE_MIN_MNP_SECONDS) {\n-        nActiveState = MASTERNODE_PRE_ENABLED;\n+        if(nActiveState != MASTERNODE_WATCHDOG_EXPIRED) {\n+            nActiveState = MASTERNODE_PRE_ENABLED;\n+        }\n+\n         return;\n     }\n \n@@ -192,6 +211,14 @@ void CMasternode::Check(bool fForce)\n         }\n     }\n \n+    bool fWatchdogExpired = (fWatchdogActive && ((GetTime() - nTimeLastWatchdogVote) > MASTERNODE_WATCHDOG_MAX_SECONDS));\n+    LogPrint(\"masternode\", \"CMasternode::Check -- vin = %s,  nTimeLastWatchdogVote = %d, GetTime() = %d, fWatchdogExpired = %d\\n\", \n+             vin.prevout.ToStringShort(), nTimeLastWatchdogVote, GetTime(), fWatchdogExpired);\n+    if(fWatchdogExpired) {\n+        nActiveState = MASTERNODE_WATCHDOG_EXPIRED;\n+        return;\n+    }\n+\n     nActiveState = MASTERNODE_ENABLED; // OK\n }\n \n@@ -203,6 +230,24 @@ bool CMasternode::IsValidNetAddr()\n             (addr.IsIPv4() && IsReachable(addr) && addr.IsRoutable());\n }\n \n+masternode_info_t CMasternode::GetInfo()\n+{\n+    masternode_info_t info;\n+    info.vin = vin;\n+    info.addr = addr;\n+    info.pubKeyCollateralAddress = pubKeyCollateralAddress;\n+    info.pubKeyMasternode = pubKeyMasternode;\n+    info.sigTime = sigTime;\n+    info.nLastDsq = nLastDsq;\n+    info.nTimeLastChecked = nTimeLastChecked;\n+    info.nTimeLastPaid = nTimeLastPaid;\n+    info.nTimeLastWatchdogVote = nTimeLastWatchdogVote;\n+    info.nActiveState = nActiveState;\n+    info.nProtocolVersion = nProtocolVersion;\n+    info.fInfoValid = true;\n+    return info;\n+}\n+\n std::string CMasternode::GetStatus()\n {\n     switch(nActiveState) {\n@@ -211,6 +256,7 @@ std::string CMasternode::GetStatus()\n         case CMasternode::MASTERNODE_EXPIRED:           return \"EXPIRED\";\n         case CMasternode::MASTERNODE_OUTPOINT_SPENT:    return \"OUTPOINT_SPENT\";\n         case CMasternode::MASTERNODE_REMOVE:            return \"REMOVE\";\n+        case CMasternode::MASTERNODE_WATCHDOG_EXPIRED:  return \"WATCHDOG_EXPIRED\";\n         default:                                        return \"UNKNOWN\";\n     }\n }\n@@ -458,7 +504,7 @@ bool CMasternodeBroadcast::CheckInputsAndAdd(int& nDos)\n \n     if(pmn != NULL) {\n         // nothing to do here if we already know about this masternode and it's (pre)enabled\n-        if(pmn->IsEnabled() || pmn->IsPreEnabled()) return true;\n+        if(pmn->IsEnabled() || pmn->IsPreEnabled() || pmn->IsWatchdogExpired()) return true;\n         // if it's not (pre)enabled, remove old MN first and continue\n         mnodeman.Remove(pmn->vin);\n     }\n@@ -722,7 +768,7 @@ bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fChec\n         return false;\n     }\n \n-    if (fRequireEnabled && !pmn->IsEnabled() && !pmn->IsPreEnabled()) return false;\n+    if (fRequireEnabled && !pmn->IsEnabled() && !pmn->IsPreEnabled() && !pmn->IsWatchdogExpired()) return false;\n \n     // LogPrintf(\"mnping - Found corresponding mn for vin: %s\\n\", vin.prevout.ToStringShort());\n     // update only if there is no known ping for this masternode or\n@@ -780,27 +826,45 @@ void CMasternodePing::Relay()\n \n void CMasternode::AddGovernanceVote(uint256 nGovernanceObjectHash)\n {\n-    if(mapGovernaceObjectsVotedOn.count(nGovernanceObjectHash)) {\n-        mapGovernaceObjectsVotedOn[nGovernanceObjectHash]++;\n+    if(mapGovernanceObjectsVotedOn.count(nGovernanceObjectHash)) {\n+        mapGovernanceObjectsVotedOn[nGovernanceObjectHash]++;\n     } else {\n-        mapGovernaceObjectsVotedOn.insert(std::make_pair(nGovernanceObjectHash, 1));\n+        mapGovernanceObjectsVotedOn.insert(std::make_pair(nGovernanceObjectHash, 1));\n     }\n }\n \n+void CMasternode::RemoveGovernanceObject(uint256 nGovernanceObjectHash)\n+{\n+    std::map<uint256, int>::iterator it = mapGovernanceObjectsVotedOn.find(nGovernanceObjectHash);\n+    if(it == mapGovernanceObjectsVotedOn.end()) {\n+        return;\n+    }\n+    mapGovernanceObjectsVotedOn.erase(it);\n+}\n+\n+void CMasternode::UpdateWatchdogVoteTime()\n+{\n+    LOCK(cs);\n+    nTimeLastWatchdogVote = GetTime();\n+}\n+\n /**\n *   FLAG GOVERNANCE ITEMS AS DIRTY\n *\n *   - When masternode come and go on the network, we must flag the items they voted on to recalc it's cached flags\n *\n */\n-\n void CMasternode::FlagGovernanceItemsAsDirty()\n {\n-    std::map<uint256, int>::iterator it = mapGovernaceObjectsVotedOn.begin();\n-    while(it != mapGovernaceObjectsVotedOn.end()){\n-        CGovernanceObject *pObj = governance.FindGovernanceObject((*it).first);\n-\n-        if(pObj) pObj->fDirtyCache = true;\n-        ++it;\n+    std::vector<uint256> vecDirty;\n+    {\n+        std::map<uint256, int>::iterator it = mapGovernanceObjectsVotedOn.begin();\n+        while(it != mapGovernanceObjectsVotedOn.end()) {\n+            vecDirty.push_back(it->first);\n+            ++it;\n+        }\n+    }\n+    for(size_t i = 0; i < vecDirty.size(); ++i) {\n+        mnodeman.AddDirtyGovernanceObjectHash(vecDirty[i]);\n     }\n }"
      },
      {
        "sha": "64e508c84b606cfe869b95e3d8efa9efe7531a00",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 47,
        "deletions": 6,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -20,6 +20,7 @@ static const int MASTERNODE_MIN_DSEG_SECONDS      = 10 * 60;\n static const int MASTERNODE_EXPIRATION_SECONDS    = 65 * 60;\n static const int MASTERNODE_REMOVAL_SECONDS       = 75 * 60;\n static const int MASTERNODE_CHECK_SECONDS         = 5;\n+static const int MASTERNODE_WATCHDOG_MAX_SECONDS  = 2 * 60 * 60;\n \n //\n // The Masternode Ping Class : Contains a different serialize method for sending pings from masternodes throughout the network\n@@ -95,6 +96,36 @@ class CMasternodePing\n \n };\n \n+struct masternode_info_t {\n+\n+    masternode_info_t()\n+        : vin(),\n+          addr(),\n+          pubKeyCollateralAddress(),\n+          pubKeyMasternode(),\n+          sigTime(0),\n+          nLastDsq(0),\n+          nTimeLastChecked(0),\n+          nTimeLastPaid(0),\n+          nTimeLastWatchdogVote(0),\n+          nActiveState(0),\n+          nProtocolVersion(0),\n+          fInfoValid(false)\n+        {}\n+\n+    CTxIn vin;\n+    CService addr;\n+    CPubKey pubKeyCollateralAddress;\n+    CPubKey pubKeyMasternode;\n+    int64_t sigTime; //mnb message time\n+    int64_t nLastDsq; //the dsq count from the last dsq broadcast of this node\n+    int64_t nTimeLastChecked;\n+    int64_t nTimeLastPaid;\n+    int64_t nTimeLastWatchdogVote;\n+    int nActiveState;\n+    int nProtocolVersion;\n+    bool fInfoValid;\n+};\n \n //\n // The Masternode Class. For managing the Darksend process. It contains the input of the 1000DRK, signature to prove\n@@ -112,7 +143,8 @@ class CMasternode\n         MASTERNODE_ENABLED,\n         MASTERNODE_EXPIRED,\n         MASTERNODE_OUTPOINT_SPENT,\n-        MASTERNODE_REMOVE\n+        MASTERNODE_REMOVE,\n+        MASTERNODE_WATCHDOG_EXPIRED\n     };\n \n     CTxIn vin;\n@@ -125,6 +157,7 @@ class CMasternode\n     int64_t nLastDsq; //the dsq count from the last dsq broadcast of this node\n     int64_t nTimeLastChecked;\n     int64_t nTimeLastPaid;\n+    int64_t nTimeLastWatchdogVote;\n     int nActiveState;\n     int nCacheCollateralBlock;\n     int nBlockLastPaid;\n@@ -133,7 +166,7 @@ class CMasternode\n     bool fUnitTest;\n \n     // KEEP TRACK OF GOVERNANCE ITEMS EACH MASTERNODE HAS VOTE UPON FOR RECALCULATION\n-    std::map<uint256, int> mapGovernaceObjectsVotedOn;\n+    std::map<uint256, int> mapGovernanceObjectsVotedOn;\n \n     CMasternode();\n     CMasternode(const CMasternode& other);\n@@ -155,13 +188,14 @@ class CMasternode\n         READWRITE(nLastDsq);\n         READWRITE(nTimeLastChecked);\n         READWRITE(nTimeLastPaid);\n+        READWRITE(nTimeLastWatchdogVote);\n         READWRITE(nActiveState);\n         READWRITE(nCacheCollateralBlock);\n         READWRITE(nBlockLastPaid);\n         READWRITE(nProtocolVersion);\n         READWRITE(fAllowMixingTx);\n         READWRITE(fUnitTest);\n-        READWRITE(mapGovernaceObjectsVotedOn);\n+        READWRITE(mapGovernanceObjectsVotedOn);\n     }\n \n     void swap(CMasternode& first, CMasternode& second) // nothrow\n@@ -181,13 +215,14 @@ class CMasternode\n         swap(first.nLastDsq, second.nLastDsq);\n         swap(first.nTimeLastChecked, second.nTimeLastChecked);\n         swap(first.nTimeLastPaid, second.nTimeLastPaid);\n+        swap(first.nTimeLastWatchdogVote, second.nTimeLastWatchdogVote);\n         swap(first.nActiveState, second.nActiveState);\n         swap(first.nCacheCollateralBlock, second.nCacheCollateralBlock);\n         swap(first.nBlockLastPaid, second.nBlockLastPaid);\n         swap(first.nProtocolVersion, second.nProtocolVersion);\n         swap(first.fAllowMixingTx, second.fAllowMixingTx);\n         swap(first.fUnitTest, second.fUnitTest);\n-        swap(first.mapGovernaceObjectsVotedOn, second.mapGovernaceObjectsVotedOn);\n+        swap(first.mapGovernanceObjectsVotedOn, second.mapGovernanceObjectsVotedOn);\n     }\n \n     // CALCULATE A RANK AGAINST OF GIVEN BLOCK\n@@ -212,8 +247,12 @@ class CMasternode\n     bool IsEnabled() { return nActiveState == MASTERNODE_ENABLED; }\n     bool IsPreEnabled() { return nActiveState == MASTERNODE_PRE_ENABLED; }\n \n+    bool IsWatchdogExpired() { return nActiveState == MASTERNODE_WATCHDOG_EXPIRED; }\n+\n     bool IsValidNetAddr();\n \n+    masternode_info_t GetInfo();\n+\n     std::string GetStatus();\n \n     int GetCollateralAge();\n@@ -226,8 +265,10 @@ class CMasternode\n     void AddGovernanceVote(uint256 nGovernanceObjectHash);\n     // RECALCULATE CACHED STATUS FLAGS FOR ALL AFFECTED OBJECTS\n     void FlagGovernanceItemsAsDirty();\n-    // TODO: There probably should be some method to clean mapGovernaceObjectsVotedOn map\n-    // under some conditions. We shouldn't store everything in memory forever.\n+\n+    void RemoveGovernanceObject(uint256 nGovernanceObjectHash);\n+\n+    void UpdateWatchdogVoteTime();\n \n     CMasternode& operator=(CMasternode from)\n     {"
      },
      {
        "sha": "58c878916e037226392be386a01e73aa2e25c095",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 160,
        "deletions": 1,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -35,8 +35,11 @@ struct CompareScoreMN\n     }\n };\n \n+const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-1\";\n+\n CMasternodeMan::CMasternodeMan() {\n     nDsqCount = 0;\n+    nLastWatchdogVoteTime = 0;\n }\n \n bool CMasternodeMan::Add(CMasternode &mn)\n@@ -78,6 +81,8 @@ void CMasternodeMan::Check()\n {\n     LOCK(cs);\n \n+    LogPrint(\"masternode\", \"CMasternodeMan::Check nLastWatchdogVoteTime = %d, IsWatchdogActive() = %d\\n\", nLastWatchdogVoteTime, IsWatchdogActive());\n+\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n         mn.Check();\n     }\n@@ -180,10 +185,26 @@ void CMasternodeMan::Clear()\n     mapSeenMasternodeBroadcast.clear();\n     mapSeenMasternodePing.clear();\n     nDsqCount = 0;\n+    nLastWatchdogVoteTime = 0;\n+}\n+\n+int CMasternodeMan::CountMasternodes(int protocolVersion)\n+{\n+    LOCK(cs);\n+    int i = 0;\n+    protocolVersion = protocolVersion == -1 ? mnpayments.GetMinMasternodePaymentsProto() : protocolVersion;\n+\n+    BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n+        if(mn.nProtocolVersion < protocolVersion) continue;\n+        i++;\n+    }\n+\n+    return i;\n }\n \n int CMasternodeMan::CountEnabled(int protocolVersion)\n {\n+    LOCK(cs);\n     int i = 0;\n     protocolVersion = protocolVersion == -1 ? mnpayments.GetMinMasternodePaymentsProto() : protocolVersion;\n \n@@ -198,6 +219,7 @@ int CMasternodeMan::CountEnabled(int protocolVersion)\n \n int CMasternodeMan::CountByIP(int nNetworkType)\n {\n+    LOCK(cs);\n     int nNodeCount = 0;\n \n     BOOST_FOREACH(CMasternode& mn, vMasternodes)\n@@ -292,6 +314,37 @@ bool CMasternodeMan::Get(const CTxIn& vin, CMasternode& masternode)\n     return true;\n }\n \n+masternode_info_t CMasternodeMan::GetMasternodeInfo(const CTxIn& vin)\n+{\n+    masternode_info_t info;\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    if(!pMN)  {\n+        return info;\n+    }\n+    info = pMN->GetInfo();\n+    return info;\n+}\n+\n+masternode_info_t CMasternodeMan::GetMasternodeInfo(const CPubKey& pubKeyMasternode)\n+{\n+    masternode_info_t info;\n+    LOCK(cs);\n+    CMasternode* pMN = Find(pubKeyMasternode);\n+    if(!pMN)  {\n+        return info;\n+    }\n+    info = pMN->GetInfo();\n+    return info;\n+}\n+\n+bool CMasternodeMan::Has(const CTxIn& vin)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    return (pMN != NULL);\n+}\n+\n // \n // Deterministically select the oldest/best masternode to pay on the network\n //\n@@ -544,7 +597,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n     if(fLiteMode) return; //disable all Darksend/Masternode related functionality\n     if(!masternodeSync.IsBlockchainSynced()) return;\n \n-    LOCK(cs_process_message);\n+    LOCK(cs);\n \n     if (strCommand == NetMsgType::MNANNOUNCE) { //Masternode Broadcast\n         CMasternodeBroadcast mnb;\n@@ -707,6 +760,7 @@ int CMasternodeMan::GetEstimatedMasternodes(int nBlock)\n }\n \n void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb) {\n+    LOCK(cs);\n     mapSeenMasternodePing.insert(make_pair(mnb.lastPing.GetHash(), mnb.lastPing));\n     mapSeenMasternodeBroadcast.insert(make_pair(mnb.GetHash(), mnb));\n \n@@ -725,6 +779,7 @@ void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb) {\n }\n \n bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos) {\n+    LOCK(cs);\n     nDos = 0;\n     LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList - Masternode broadcast, vin: %s\\n\", mnb.vin.ToString());\n \n@@ -759,6 +814,7 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n }\n \n void CMasternodeMan::UpdateLastPaid(const CBlockIndex *pindex) {\n+    LOCK(cs);\n     if(fLiteMode) return;\n \n     static bool IsFirstRun = true;\n@@ -776,3 +832,106 @@ void CMasternodeMan::UpdateLastPaid(const CBlockIndex *pindex) {\n     // every time is like the first time if winners list is not synced\n     IsFirstRun = !masternodeSync.IsWinnersListSynced();\n }\n+\n+void CMasternodeMan::UpdateWatchdogVoteTime(const CTxIn& vin)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    if(!pMN)  {\n+        return;\n+    }\n+    pMN->UpdateWatchdogVoteTime();\n+    nLastWatchdogVoteTime = GetTime();\n+}\n+\n+bool CMasternodeMan::IsWatchdogActive()\n+{\n+    LOCK(cs);\n+    // Check if any masternodes have voted recently, otherwise return false\n+    return (GetTime() - nLastWatchdogVoteTime) <= MASTERNODE_WATCHDOG_MAX_SECONDS;\n+}\n+\n+void CMasternodeMan::AddGovernanceVote(const CTxIn& vin, uint256 nGovernanceObjectHash)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    if(!pMN)  {\n+        return;\n+    }\n+    pMN->AddGovernanceVote(nGovernanceObjectHash);\n+}\n+\n+void CMasternodeMan::RemoveGovernanceObject(uint256 nGovernanceObjectHash)\n+{\n+    LOCK(cs);\n+    BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n+        mn.RemoveGovernanceObject(nGovernanceObjectHash);\n+    }\n+}\n+\n+void CMasternodeMan::CheckMasternode(const CTxIn& vin, bool fForce)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    if(!pMN)  {\n+        return;\n+    }\n+    pMN->Check(fForce);\n+}\n+\n+void CMasternodeMan::CheckMasternode(const CPubKey& pubKeyMasternode, bool fForce)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(pubKeyMasternode);\n+    if(!pMN)  {\n+        return;\n+    }\n+    pMN->Check(fForce);\n+}\n+\n+int CMasternodeMan::GetMasternodeState(const CTxIn& vin)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    if(!pMN)  {\n+        return CMasternode::MASTERNODE_REMOVE;\n+    }\n+    return pMN->nActiveState;\n+}\n+\n+int CMasternodeMan::GetMasternodeState(const CPubKey& pubKeyMasternode)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(pubKeyMasternode);\n+    if(!pMN)  {\n+        return CMasternode::MASTERNODE_REMOVE;\n+    }\n+    return pMN->nActiveState;\n+}\n+\n+bool CMasternodeMan::IsMasternodePingedWithin(const CTxIn& vin, int nSeconds, int64_t nTimeToCheckAt)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    if(!pMN) {\n+        return false;\n+    }\n+    return pMN->IsPingedWithin(nSeconds, nTimeToCheckAt);\n+}\n+\n+void CMasternodeMan::SetMasternodeLastPing(const CTxIn& vin, const CMasternodePing& mnp)\n+{\n+    LOCK(cs);\n+    CMasternode* pMN = Find(vin);\n+    if(!pMN)  {\n+        return;\n+    }\n+    pMN->lastPing = mnp;\n+    mapSeenMasternodePing.insert(std::make_pair(mnp.GetHash(), mnp));\n+\n+    CMasternodeBroadcast mnb(*pMN);\n+    uint256 hash = mnb.GetHash();\n+    if(mapSeenMasternodeBroadcast.count(hash)) {\n+        mapSeenMasternodeBroadcast[hash].lastPing = mnp;\n+    }\n+}"
      },
      {
        "sha": "3178f2308132a8fcab3d30b7434e79933a9bfdcf",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -24,6 +24,8 @@ extern CMasternodeMan mnodeman;\n class CMasternodeMan\n {\n private:\n+    static const std::string SERIALIZATION_VERSION_STRING;\n+\n     static const int MASTERNODES_LAST_PAID_SCAN_BLOCKS  = 100;\n \n     // critical section to protect the inner data structures\n@@ -41,6 +43,10 @@ class CMasternodeMan\n     // which Masternodes we've asked for\n     std::map<COutPoint, int64_t> mWeAskedForMasternodeListEntry;\n \n+    std::vector<uint256> vecDirtyGovernanceObjectHashes;\n+\n+    int64_t nLastWatchdogVoteTime;\n+\n public:\n     // Keep track of all broadcasts I've seen\n     map<uint256, CMasternodeBroadcast> mapSeenMasternodeBroadcast;\n@@ -58,14 +64,28 @@ class CMasternodeMan\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         LOCK(cs);\n+        std::string strVersion;\n+        if(ser_action.ForRead()) {\n+            READWRITE(strVersion);\n+        }\n+        else {\n+            strVersion = SERIALIZATION_VERSION_STRING; \n+            READWRITE(strVersion);\n+        }\n+\n         READWRITE(vMasternodes);\n         READWRITE(mAskedUsForMasternodeList);\n         READWRITE(mWeAskedForMasternodeList);\n         READWRITE(mWeAskedForMasternodeListEntry);\n+        READWRITE(nLastWatchdogVoteTime);\n         READWRITE(nDsqCount);\n \n         READWRITE(mapSeenMasternodeBroadcast);\n         READWRITE(mapSeenMasternodePing);\n+        if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n+            LogPrintf(\"CMasternodeMan::SerializationOp - Incompatible format detected, resetting data\\n\");\n+            Clear();\n+        }\n     }\n \n     CMasternodeMan();\n@@ -86,6 +106,8 @@ class CMasternodeMan\n     /// Clear Masternode vector\n     void Clear();\n \n+    int CountMasternodes(int protocolVersion = -1);\n+\n     int CountEnabled(int protocolVersion = -1);\n \n     /// Count Masternodes by network type - NET_IPV4, NET_IPV6, NET_TOR\n@@ -102,6 +124,12 @@ class CMasternodeMan\n     bool Get(const CPubKey& pubKeyMasternode, CMasternode& masternode);\n     bool Get(const CTxIn& vin, CMasternode& masternode);\n \n+    bool Has(const CTxIn& vin);\n+\n+    masternode_info_t GetMasternodeInfo(const CTxIn& vin);\n+\n+    masternode_info_t GetMasternodeInfo(const CPubKey& pubKeyMasternode);\n+\n     /// Find an entry in the masternode list that is next to be paid\n     CMasternode* GetNextMasternodeInQueueForPayment(int nBlockHeight, bool fFilterSigTime, int& nCount);\n \n@@ -135,6 +163,40 @@ class CMasternodeMan\n     bool CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos);\n \n     void UpdateLastPaid(const CBlockIndex *pindex);\n+\n+    void AddDirtyGovernanceObjectHash(const uint256& nHash)\n+    {\n+        LOCK(cs);\n+        vecDirtyGovernanceObjectHashes.push_back(nHash);\n+    }\n+\n+    std::vector<uint256> GetAndClearDirtyGovernanceObjectHashes()\n+    {\n+        LOCK(cs);\n+        std::vector<uint256> vecTmp = vecDirtyGovernanceObjectHashes;\n+        vecDirtyGovernanceObjectHashes.clear();\n+        return vecTmp;;\n+    }\n+\n+    bool IsWatchdogActive();\n+\n+    void UpdateWatchdogVoteTime(const CTxIn& vin);\n+\n+    void AddGovernanceVote(const CTxIn& vin, uint256 nGovernanceObjectHash);\n+\n+    void RemoveGovernanceObject(uint256 nGovernanceObjectHash);\n+\n+    void CheckMasternode(const CTxIn& vin, bool fForce = false);\n+\n+    void CheckMasternode(const CPubKey& pubKeyMasternode, bool fForce = false);\n+\n+    int GetMasternodeState(const CTxIn& vin);\n+\n+    int GetMasternodeState(const CPubKey& pubKeyMasternode);\n+\n+    bool IsMasternodePingedWithin(const CTxIn& vin, int nSeconds, int64_t nTimeToCheckAt = -1);\n+\n+    void SetMasternodeLastPing(const CTxIn& vin, const CMasternodePing& mnp);\n };\n \n #endif"
      },
      {
        "sha": "89e3ca164253d349680157d4eafd0988971fc76c",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e38e318454865291c51a4e5281bec16fcab398/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e38e318454865291c51a4e5281bec16fcab398/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=94e38e318454865291c51a4e5281bec16fcab398",
        "patch": "@@ -12,6 +12,7 @@\n #include \"darksend.h\"\n #include \"governance.h\"\n #include \"darksend.h\"\n+#include \"masternode.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeconfig.h\"\n@@ -107,8 +108,9 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         CGovernanceObject govobj(hashParent, nRevision, nTime, uint256(), strData);\n \n-        if(govobj.GetObjectType() == GOVERNANCE_OBJECT_TRIGGER) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Trigger objects need not be prepared (however only masternodes can create them)\");\n+        if((govobj.GetObjectType() == GOVERNANCE_OBJECT_TRIGGER) ||\n+           (govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Trigger and watchdog objects need not be prepared (however only masternodes can create them)\");\n         }\n \n         std::string strError = \"\";\n@@ -187,7 +189,8 @@ UniValue gobject(const UniValue& params, bool fHelp)\n              << endl; );\n \n         // Attempt to sign triggers if we are a MN\n-        if(govobj.GetObjectType() == GOVERNANCE_OBJECT_TRIGGER) {\n+        if((govobj.GetObjectType() == GOVERNANCE_OBJECT_TRIGGER) ||\n+           (govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG)) {\n             if(mnFound) {\n                 govobj.SetMasternodeInfo(mn.vin);\n                 govobj.Sign(activeMasternode.keyMasternode, activeMasternode.pubKeyMasternode);\n@@ -773,11 +776,12 @@ UniValue getgovernanceinfo(const UniValue& params, bool fHelp)\n             \"Returns an object containing governance parameters.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"governanceminquorum\\\": xxxxx,  (numeric) the absolute minimum number of votes needed to trigger a governance action\\n\"\n-            \"  \\\"proposalfee\\\": xxx.xx,         (numeric) the collateral transaction fee which must be paid to create a proposal in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"superblockcycle\\\": xxxxx,      (numeric) the number of blocks between superblocks\\n\"\n-            \"  \\\"lastsuperblock\\\": xxxxx,       (numeric) the block number of the last superblock\\n\"\n-            \"  \\\"nextsuperblock\\\": xxxxx,       (numeric) the block number of the next superblock\\n\"\n+            \"  \\\"governanceminquorum\\\": xxxxx,           (numeric) the absolute minimum number of votes needed to trigger a governance action\\n\"\n+            \"  \\\"masternodewatchdogmaxseconds\\\": xxxxx,  (numeric) sentinel watchdog expiration time in seconds\\n\"\n+            \"  \\\"proposalfee\\\": xxx.xx,                  (numeric) the collateral transaction fee which must be paid to create a proposal in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"superblockcycle\\\": xxxxx,               (numeric) the number of blocks between superblocks\\n\"\n+            \"  \\\"lastsuperblock\\\": xxxxx,                (numeric) the block number of the last superblock\\n\"\n+            \"  \\\"nextsuperblock\\\": xxxxx,                (numeric) the block number of the next superblock\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getgovernanceinfo\", \"\")\n@@ -813,6 +817,7 @@ UniValue getgovernanceinfo(const UniValue& params, bool fHelp)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"governanceminquorum\", Params().GetConsensus().nGovernanceMinQuorum));\n+    obj.push_back(Pair(\"masternodewatchdogmaxseconds\", MASTERNODE_WATCHDOG_MAX_SECONDS));\n     obj.push_back(Pair(\"proposalfee\", ValueFromAmount(GOVERNANCE_PROPOSAL_FEE_TX)));\n     obj.push_back(Pair(\"superblockcycle\", Params().GetConsensus().nSuperblockCycle));\n     obj.push_back(Pair(\"lastsuperblock\", nLastSuperblock));"
      }
    ]
  },
  {
    "sha": "7a45c9308a9200c6061bfd2be48ff8ac5173df93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTQ1YzkzMDhhOTIwMGM2MDYxYmZkMmJlNDhmZjhhYzUxNzNkZjkz",
    "commit": {
      "author": {
        "name": "Nathan Marley",
        "email": "nathan.marley@gmail.com",
        "date": "2016-10-17T18:56:27Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-17T18:56:27Z"
      },
      "message": "bugfix: remove duplicate MN votes from getvotes (#1077)",
      "tree": {
        "sha": "645c667bc55ffc2679e4509ffdae83da0875a078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/645c667bc55ffc2679e4509ffdae83da0875a078"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a45c9308a9200c6061bfd2be48ff8ac5173df93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a45c9308a9200c6061bfd2be48ff8ac5173df93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a45c9308a9200c6061bfd2be48ff8ac5173df93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a45c9308a9200c6061bfd2be48ff8ac5173df93/comments",
    "author": {
      "login": "nmarley",
      "id": 1735354,
      "node_id": "MDQ6VXNlcjE3MzUzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1735354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmarley",
      "html_url": "https://github.com/nmarley",
      "followers_url": "https://api.github.com/users/nmarley/followers",
      "following_url": "https://api.github.com/users/nmarley/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmarley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmarley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmarley/subscriptions",
      "organizations_url": "https://api.github.com/users/nmarley/orgs",
      "repos_url": "https://api.github.com/users/nmarley/repos",
      "events_url": "https://api.github.com/users/nmarley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmarley/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e38e318454865291c51a4e5281bec16fcab398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e38e318454865291c51a4e5281bec16fcab398",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e38e318454865291c51a4e5281bec16fcab398"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "97d6f80825e4d9b91f8361927480b4d13a5b4a4e",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a45c9308a9200c6061bfd2be48ff8ac5173df93/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a45c9308a9200c6061bfd2be48ff8ac5173df93/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=7a45c9308a9200c6061bfd2be48ff8ac5173df93",
        "patch": "@@ -378,8 +378,8 @@ std::vector<CGovernanceVote*> CGovernanceManager::GetMatchingVotes(const uint256\n \n     // LOOP THROUGH ALL VOTES AND FIND THOSE MATCHING USER HASH\n \n-    vote_m_it it2 = mapVotesByHash.begin();\n-    while(it2 != mapVotesByHash.end()) {\n+    vote_m_it it2 = mapVotesByType.begin();\n+    while(it2 != mapVotesByType.end()) {\n         if((*it2).second.GetParentHash() == nParentHash) {\n             vecResult.push_back(&(*it2).second);\n         }"
      }
    ]
  },
  {
    "sha": "9db6b97979147efa6662b2ebd8b5b93146db1684",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGI2Yjk3OTc5MTQ3ZWZhNjY2MmIyZWJkOGI1YjkzMTQ2ZGIxNjg0",
    "commit": {
      "author": {
        "name": "CHAE-PIL LIM",
        "email": "chaeplin@users.noreply.github.com",
        "date": "2016-10-17T20:09:21Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-17T20:09:21Z"
      },
      "message": "[ZMQ] append a message sequence number to every ZMQ notification (#1082)\n\n* Zmq sequence (#1)\r\n\r\n* Fixes ZMQ startup with bad arguments.\r\n\r\npr 7621\r\n\r\n* [ZMQ] append a message sequence number to every ZMQ notification\r\n\r\n- pr 7762\r\n- contrib/zmq/zmq_sub.py to python 3 compatible\r\n\r\n* typo in MSG_RAWTXLOCK\r\n\r\nMMSG_RAWTXLOCK to MSG_RAWTXLOCK\r\n\r\n* s/Bitcoind/dashd/",
      "tree": {
        "sha": "7e5d07bcabd6a68dd3d6ba02ee0ca704b360cb12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e5d07bcabd6a68dd3d6ba02ee0ca704b360cb12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9db6b97979147efa6662b2ebd8b5b93146db1684",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db6b97979147efa6662b2ebd8b5b93146db1684",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9db6b97979147efa6662b2ebd8b5b93146db1684",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db6b97979147efa6662b2ebd8b5b93146db1684/comments",
    "author": {
      "login": "chaeplin",
      "id": 6242157,
      "node_id": "MDQ6VXNlcjYyNDIxNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6242157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chaeplin",
      "html_url": "https://github.com/chaeplin",
      "followers_url": "https://api.github.com/users/chaeplin/followers",
      "following_url": "https://api.github.com/users/chaeplin/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaeplin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chaeplin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaeplin/subscriptions",
      "organizations_url": "https://api.github.com/users/chaeplin/orgs",
      "repos_url": "https://api.github.com/users/chaeplin/repos",
      "events_url": "https://api.github.com/users/chaeplin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chaeplin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a45c9308a9200c6061bfd2be48ff8ac5173df93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a45c9308a9200c6061bfd2be48ff8ac5173df93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a45c9308a9200c6061bfd2be48ff8ac5173df93"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 83,
      "deletions": 33
    },
    "files": [
      {
        "sha": "62c3d34fb793566474345273654d939283df7397",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 26,
        "deletions": 20,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db6b97979147efa6662b2ebd8b5b93146db1684/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db6b97979147efa6662b2ebd8b5b93146db1684/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=9db6b97979147efa6662b2ebd8b5b93146db1684",
        "patch": "@@ -1,45 +1,51 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python\n \n import array\n import binascii\n import zmq\n+import struct\n \n port = 28332\n \n zmqContext = zmq.Context()\n zmqSubSocket = zmqContext.socket(zmq.SUB)\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtxlock\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawblock\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawtx\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawtxlock\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtxlock\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n+zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtxlock\")\n zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n \n try:\n     while True:\n         msg = zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+        topic = str(msg[0].decode(\"utf-8\"))\n         body = msg[1]\n+        sequence = \"Unknown\";\n+\n+        if len(msg[-1]) == 4:\n+          msgSequence = struct.unpack('<I', msg[-1])[-1]\n+          sequence = str(msgSequence)\n \n         if topic == \"hashblock\":\n-            print \"- HASH BLOCK -\"\n-            print binascii.hexlify(body)\n+            print('- HASH BLOCK ('+sequence+') -')\n+            print(binascii.hexlify(body).decode(\"utf-8\"))\n         elif topic == \"hashtx\":\n-            print '- HASH TX -'\n-            print binascii.hexlify(body)\n+            print ('- HASH TX ('+sequence+') -')\n+            print(binascii.hexlify(body).decode(\"utf-8\"))\n         elif topic == \"hashtxlock\":\n-            print '- HASH TX LOCK -'\n-            print binascii.hexlify(body)\n+            print('- HASH TX LOCK ('+sequence+') -')\n+            print(binascii.hexlify(body).decode(\"utf-8\"))\n         elif topic == \"rawblock\":\n-            print \"- RAW BLOCK HEADER -\"\n-            print binascii.hexlify(body[:80])\n+            print('- RAW BLOCK HEADER ('+sequence+') -')\n+            print(binascii.hexlify(body[:80]).decode(\"utf-8\"))\n         elif topic == \"rawtx\":\n-            print '- RAW TX -'\n-            print binascii.hexlify(body)\n+            print('- RAW TX ('+sequence+') -')\n+            print(binascii.hexlify(body).decode(\"utf-8\"))\n         elif topic == \"rawtxlock\":\n-            print '- RAW TX LOCK -'\n-            print binascii.hexlify(body)\n+            print('- RAW TX LOCK ('+sequence+') -')\n+            print(binascii.hexlify(body).decode(\"utf-8\"))\n \n except KeyboardInterrupt:\n     zmqContext.destroy()"
      },
      {
        "sha": "be1ae5482ddd9036f0bc54ceed0d279f08249e25",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db6b97979147efa6662b2ebd8b5b93146db1684/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db6b97979147efa6662b2ebd8b5b93146db1684/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9db6b97979147efa6662b2ebd8b5b93146db1684",
        "patch": "@@ -58,6 +58,15 @@ The following outputs are affected by this change:\n - REST `/rest/block/` (JSON format when including extended tx details)\n - `bitcoin-tx -json`\n \n+### ZMQ\n+\n+Each ZMQ notification now contains an up-counting sequence number that allows\n+listeners to detect lost notifications.\n+The sequence number is always the last element in a multi-part ZMQ notification and\n+therefore backward compatible.\n+Each message type has its own counter.\n+(https://github.com/bitcoin/bitcoin/pull/7762)\n+\n ### Configuration and command-line options\n \n ### Block and transaction handling"
      },
      {
        "sha": "95f982c0edbed1711979a4519c9743bf5baf393c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db6b97979147efa6662b2ebd8b5b93146db1684/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db6b97979147efa6662b2ebd8b5b93146db1684/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=9db6b97979147efa6662b2ebd8b5b93146db1684",
        "patch": "@@ -101,3 +101,8 @@ using other means such as firewalling.\n Note that when the block chain tip changes, a reorganisation may occur\n and just the tip will be notified. It is up to the subscriber to\n retrieve the chain from the last known block to the new tip.\n+\n+There are several possibilities that ZMQ notification can get lost\n+during transmission depending on the communication type your are\n+using. Dashd appends an up-counting sequence number to each\n+notification which allows listeners to detect lost notifications."
      },
      {
        "sha": "b99b4293080aedd798366e5fb01d2bfa79c6801c",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db6b97979147efa6662b2ebd8b5b93146db1684/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db6b97979147efa6662b2ebd8b5b93146db1684/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=9db6b97979147efa6662b2ebd8b5b93146db1684",
        "patch": "@@ -102,7 +102,6 @@ bool CZMQNotificationInterface::Initialize()\n \n     if (i!=notifiers.end())\n     {\n-        Shutdown();\n         return false;\n     }\n "
      },
      {
        "sha": "e2d334c951b8cd78c29d7b29cdca22ed854b48ac",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 12,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db6b97979147efa6662b2ebd8b5b93146db1684/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db6b97979147efa6662b2ebd8b5b93146db1684/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=9db6b97979147efa6662b2ebd8b5b93146db1684",
        "patch": "@@ -9,6 +9,13 @@\n \n static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;\n \n+static const char *MSG_HASHBLOCK  = \"hashblock\";\n+static const char *MSG_HASHTX     = \"hashtx\";\n+static const char *MSG_HASHTXLOCK = \"hashtxlock\";\n+static const char *MSG_RAWBLOCK   = \"rawblock\";\n+static const char *MSG_RAWTX      = \"rawtx\";\n+static const char *MSG_RAWTXLOCK = \"rawtxlock\";\n+\n // Internal function to send multipart message\n static int zmq_send_multipart(void *sock, const void* data, size_t size, ...)\n {\n@@ -69,6 +76,7 @@ bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n         if (rc!=0)\n         {\n             zmqError(\"Failed to bind address\");\n+            zmq_close(psocket);\n             return false;\n         }\n \n@@ -117,15 +125,31 @@ void CZMQAbstractPublishNotifier::Shutdown()\n     psocket = 0;\n }\n \n+bool CZMQAbstractPublishNotifier::SendMessage(const char *command, const void* data, size_t size)\n+{\n+    assert(psocket);\n+\n+    /* send three parts, command & data & a LE 4byte sequence number */\n+    unsigned char msgseq[sizeof(uint32_t)];\n+    WriteLE32(&msgseq[0], nSequence);\n+    int rc = zmq_send_multipart(psocket, command, strlen(command), data, size, msgseq, (size_t)sizeof(uint32_t), (void*)0);\n+    if (rc == -1)\n+        return false;\n+\n+    /* increment memory only sequence number after sending */\n+    nSequence++;\n+\n+    return true;\n+}\n+\n bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n {\n     uint256 hash = pindex->GetBlockHash();\n     LogPrint(\"zmq\", \"zmq: Publish hashblock %s\\n\", hash.GetHex());\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n-    int rc = zmq_send_multipart(psocket, \"hashblock\", 9, data, 32, 0);\n-    return rc == 0;\n+    return SendMessage(MSG_HASHBLOCK, data, 32);\n }\n \n bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n@@ -135,8 +159,7 @@ bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &t\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n-    int rc = zmq_send_multipart(psocket, \"hashtx\", 6, data, 32, 0);\n-    return rc == 0;\n+    return SendMessage(MSG_HASHTX, data, 32);\n }\n \n bool CZMQPublishHashTransactionLockNotifier::NotifyTransactionLock(const CTransaction &transaction)\n@@ -146,8 +169,7 @@ bool CZMQPublishHashTransactionLockNotifier::NotifyTransactionLock(const CTransa\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n-    int rc = zmq_send_multipart(psocket, \"hashtxlock\", 10, data, 32, 0);\n-    return rc == 0;\n+    return SendMessage(MSG_HASHTXLOCK, data, 32);\n }\n \n bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n@@ -168,8 +190,7 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n         ss << block;\n     }\n \n-    int rc = zmq_send_multipart(psocket, \"rawblock\", 8, &(*ss.begin()), ss.size(), 0);\n-    return rc == 0;\n+    return SendMessage(MSG_RAWBLOCK, &(*ss.begin()), ss.size());\n }\n \n bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n@@ -178,8 +199,7 @@ bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &tr\n     LogPrint(\"zmq\", \"zmq: Publish rawtx %s\\n\", hash.GetHex());\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss << transaction;\n-    int rc = zmq_send_multipart(psocket, \"rawtx\", 5, &(*ss.begin()), ss.size(), 0);\n-    return rc == 0;\n+    return SendMessage(MSG_RAWTX, &(*ss.begin()), ss.size());\n }\n \n bool CZMQPublishRawTransactionLockNotifier::NotifyTransactionLock(const CTransaction &transaction)\n@@ -188,6 +208,5 @@ bool CZMQPublishRawTransactionLockNotifier::NotifyTransactionLock(const CTransac\n     LogPrint(\"zmq\", \"zmq: Publish rawtxlock %s\\n\", hash.GetHex());\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss << transaction;\n-    int rc = zmq_send_multipart(psocket, \"rawtxlock\", 9, &(*ss.begin()), ss.size(), 0);\n-    return rc == 0;\n+    return SendMessage(MSG_RAWTXLOCK, &(*ss.begin()), ss.size());\n }"
      },
      {
        "sha": "c2617c0f043afc13be42efe84c0512dff2c01f91",
        "filename": "src/zmq/zmqpublishnotifier.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db6b97979147efa6662b2ebd8b5b93146db1684/src/zmq/zmqpublishnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db6b97979147efa6662b2ebd8b5b93146db1684/src/zmq/zmqpublishnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.h?ref=9db6b97979147efa6662b2ebd8b5b93146db1684",
        "patch": "@@ -11,7 +11,19 @@ class CBlockIndex;\n \n class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier\n {\n+private:\n+    uint32_t nSequence; // upcounting per message sequence number\n+\n public:\n+\n+    /* send zmq multipart message\n+       parts:\n+          * command\n+          * data\n+          * message sequence number\n+    */\n+    bool SendMessage(const char *command, const void* data, size_t size);\n+\n     bool Initialize(void *pcontext);\n     void Shutdown();\n };"
      }
    ]
  },
  {
    "sha": "cce7896d70e7a85d48ffc0f6c825fa107469a1ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2U3ODk2ZDcwZTdhODVkNDhmZmMwZjZjODI1ZmExMDc0NjlhMWVh",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-18T11:11:36Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-18T11:11:36Z"
      },
      "message": "Allow last ping time to be updated for masternodes in the EXPIRED state (#1083)",
      "tree": {
        "sha": "c3179edb6200fcbf639fe4b58de5e219b2bafa75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3179edb6200fcbf639fe4b58de5e219b2bafa75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cce7896d70e7a85d48ffc0f6c825fa107469a1ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cce7896d70e7a85d48ffc0f6c825fa107469a1ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cce7896d70e7a85d48ffc0f6c825fa107469a1ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cce7896d70e7a85d48ffc0f6c825fa107469a1ea/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9db6b97979147efa6662b2ebd8b5b93146db1684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db6b97979147efa6662b2ebd8b5b93146db1684",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9db6b97979147efa6662b2ebd8b5b93146db1684"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4819c508f576a14c7534fb64b583e5260c1fa4b9",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cce7896d70e7a85d48ffc0f6c825fa107469a1ea/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cce7896d70e7a85d48ffc0f6c825fa107469a1ea/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=cce7896d70e7a85d48ffc0f6c825fa107469a1ea",
        "patch": "@@ -628,7 +628,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         LogPrint(\"masternode\", \"mnp - Masternode ping, vin: %s new\\n\", mnp.vin.ToString());\n \n         int nDos = 0;\n-        if(mnp.CheckAndUpdate(nDos)) return;\n+        if(mnp.CheckAndUpdate(nDos, false)) return;\n \n         if(nDos > 0) {\n             // if anything significant failed, mark that node"
      }
    ]
  },
  {
    "sha": "342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDJiZGE1ZmRjZDZhY2UwZTMzYjU5NzllZjExMTZmYmVkZjhiYjU2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-20T21:11:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-20T21:11:30Z"
      },
      "message": "new PoSe - MNVERIFY (#1066)",
      "tree": {
        "sha": "601546a427c40546dc56cdef1b38b50402627089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/601546a427c40546dc56cdef1b38b50402627089"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cce7896d70e7a85d48ffc0f6c825fa107469a1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cce7896d70e7a85d48ffc0f6c825fa107469a1ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cce7896d70e7a85d48ffc0f6c825fa107469a1ea"
      }
    ],
    "stats": {
      "total": 987,
      "additions": 783,
      "deletions": 204
    },
    "files": [
      {
        "sha": "d6dee0518c923ac1412207b4dc0bcbc8aef5c368",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -1578,6 +1578,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- error connecting\\n\");\n                 strAutoDenomResult = _(\"Error connecting to Masternode.\");\n                 dsq.nTime = 0; //remove node\n+                pmn->nPoSeBanScore++;\n                 continue;\n             }\n         }\n@@ -1624,6 +1625,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         } else {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect %s\\n\", pmn->vin.ToString());\n             nTries++;\n+            pmn->nPoSeBanScore++;\n             continue;\n         }\n     }"
      },
      {
        "sha": "426e473a069ec3493d34f94fbd4f4cd9f5c43cb9",
        "filename": "src/dsnotificationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/dsnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/dsnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dsnotificationinterface.cpp?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -5,6 +5,7 @@\n #include \"dsnotificationinterface.h\"\n #include \"darksend.h\"\n #include \"governance.h\"\n+#include \"masternodeman.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n \n@@ -18,6 +19,7 @@ CDSNotificationInterface::~CDSNotificationInterface()\n \n void CDSNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n {\n+    mnodeman.UpdatedBlockTip(pindex);\n     darkSendPool.UpdatedBlockTip(pindex);\n     mnpayments.UpdatedBlockTip(pindex);\n     governance.UpdatedBlockTip(pindex);"
      },
      {
        "sha": "018fcb8018b3c1fb5481b5156fdad2f01a2b226e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -1880,6 +1880,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // force UpdatedBlockTip to initialize pCurrentBlockIndex for DS, MN payments and budgets\n     // but don't call it directly to prevent triggering of other listeners like zmq etc.\n     // GetMainSignals().UpdatedBlockTip(chainActive.Tip());\n+    mnodeman.UpdatedBlockTip(chainActive.Tip());\n     darkSendPool.UpdatedBlockTip(chainActive.Tip());\n     mnpayments.UpdatedBlockTip(chainActive.Tip());\n     masternodeSync.UpdatedBlockTip(chainActive.Tip());"
      },
      {
        "sha": "dc24da68594f10b909031d13e18c02168150b1e2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -4959,6 +4959,10 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n \n     case MSG_GOVERNANCE_OBJECT_VOTE:\n         return governance.HaveVoteForHash(inv.hash);\n+\n+    case MSG_MASTERNODE_VERIFY:\n+        return mnodeman.mapSeenMasternodeVerification.count(inv.hash);\n+\n     }\n \n     // Don't know what it is, just say we already got one\n@@ -5205,6 +5209,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n \n+                if (!pushed && inv.type == MSG_MASTERNODE_VERIFY) {\n+                    if(mnodeman.mapSeenMasternodeVerification.count(inv.hash)) {\n+                        CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+                        ss.reserve(1000);\n+                        ss << mnodeman.mapSeenMasternodeVerification[inv.hash];\n+                        pfrom->PushMessage(NetMsgType::MNVERIFY, ss);\n+                        pushed = true;\n+                    }\n+                }\n+\n                 if (!pushed)\n                     vNotFound.push_back(inv);\n             }"
      },
      {
        "sha": "740f36d4fd79abdb61e16f072c349566d0fe880c",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 144,
        "deletions": 137,
        "changes": 281,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -32,6 +32,7 @@ CMasternode::CMasternode() :\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n     nProtocolVersion(PROTOCOL_VERSION),\n+    nPoSeBanScore(0),\n     fAllowMixingTx(true),\n     fUnitTest(false)\n {}\n@@ -52,6 +53,7 @@ CMasternode::CMasternode(CService addrNew, CTxIn vinNew, CPubKey pubKeyCollatera\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n     nProtocolVersion(nProtocolVersionIn),\n+    nPoSeBanScore(0),\n     fAllowMixingTx(true),\n     fUnitTest(false)\n {}\n@@ -72,6 +74,7 @@ CMasternode::CMasternode(const CMasternode& other) :\n     nCacheCollateralBlock(other.nCacheCollateralBlock),\n     nBlockLastPaid(other.nBlockLastPaid),\n     nProtocolVersion(other.nProtocolVersion),\n+    nPoSeBanScore(other.nPoSeBanScore),\n     fAllowMixingTx(other.fAllowMixingTx),\n     fUnitTest(other.fUnitTest)\n {}\n@@ -92,6 +95,7 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n     nProtocolVersion(mnb.nProtocolVersion),\n+    nPoSeBanScore(0),\n     fAllowMixingTx(true),\n     fUnitTest(false)\n {}\n@@ -101,21 +105,34 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n //\n bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n {\n-    if(mnb.sigTime > sigTime) {\n-        pubKeyMasternode = mnb.pubKeyMasternode;\n-        sigTime = mnb.sigTime;\n-        vchSig = mnb.vchSig;\n-        nProtocolVersion = mnb.nProtocolVersion;\n-        addr = mnb.addr;\n-        nTimeLastChecked = 0;\n-        int nDos = 0;\n-        if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(nDos, false))) {\n-            lastPing = mnb.lastPing;\n-            mnodeman.mapSeenMasternodePing.insert(std::make_pair(lastPing.GetHash(), lastPing));\n+    if(mnb.sigTime <= sigTime) return false;\n+\n+    pubKeyMasternode = mnb.pubKeyMasternode;\n+    sigTime = mnb.sigTime;\n+    vchSig = mnb.vchSig;\n+    nProtocolVersion = mnb.nProtocolVersion;\n+    addr = mnb.addr;\n+    nPoSeBanScore = 0;\n+    nTimeLastChecked = 0;\n+    int nDos = 0;\n+    if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(nDos, false))) {\n+        lastPing = mnb.lastPing;\n+        mnodeman.mapSeenMasternodePing.insert(std::make_pair(lastPing.GetHash(), lastPing));\n+    }\n+    // if it matches our Masternode privkey...\n+    if(fMasterNode && pubKeyMasternode == activeMasternode.pubKeyMasternode) {\n+        nPoSeBanScore = -MASTERNODE_POSE_BAN_MAX_SCORE;\n+        if(nProtocolVersion == PROTOCOL_VERSION) {\n+            // ... and PROTOCOL_VERSION, then we've been remotely activated ...\n+            activeMasternode.ManageState();\n+        } else {\n+            // ... otherwise we need to reactivate our node, do not add it to the list and do not relay\n+            // but also do not ban the node we get this message from\n+            LogPrintf(\"CMasternode::UpdateFromNewBroadcast -- wrong PROTOCOL_VERSION, re-activate your MN: message nProtocolVersion=%d  PROTOCOL_VERSION=%d\\n\", nProtocolVersion, PROTOCOL_VERSION);\n+            return false;\n         }\n-        return true;\n     }\n-    return false;\n+    return true;\n }\n \n //\n@@ -143,10 +160,9 @@ void CMasternode::Check(bool fForce)\n {\n     LOCK(cs);\n \n-    bool fWatchdogActive = mnodeman.IsWatchdogActive();\n+    static int64_t nTimeStart = GetTime();\n \n-    LogPrint(\"masternode\", \"CMasternode::Check start -- vin = %s\\n\", \n-             vin.prevout.ToStringShort());\n+    LogPrint(\"masternode\", \"CMasternode::Check start -- vin %s\\n\", vin.prevout.ToStringShort());\n \n     //once spent, stop doing the checks\n     if(nActiveState == MASTERNODE_OUTPOINT_SPENT) return;\n@@ -156,66 +172,72 @@ void CMasternode::Check(bool fForce)\n     if(!fForce && (GetTime() - nTimeLastChecked < MASTERNODE_CHECK_SECONDS)) return;\n     nTimeLastChecked = GetTime();\n \n-    if((nActiveState == MASTERNODE_WATCHDOG_EXPIRED) && !fWatchdogActive) {\n-        // Redo the checks\n-        nActiveState = MASTERNODE_ENABLED;\n+    if(!fUnitTest) {\n+        TRY_LOCK(cs_main, lockMain);\n+        if(!lockMain) return;\n+\n+        CCoins coins;\n+        if(!pcoinsTip->GetCoins(vin.prevout.hash, coins) ||\n+           (unsigned int)vin.prevout.n>=coins.vout.size() ||\n+           coins.vout[vin.prevout.n].IsNull()) {\n+            nActiveState = MASTERNODE_OUTPOINT_SPENT;\n+            LogPrint(\"masternode\", \"CMasternode::Check -- Failed to find Masternode UTXO, masternode=%s\\n\", vin.prevout.ToStringShort());\n+            return;\n+        }\n     }\n \n                    // masternode doesn't meet payment protocol requirements ...\n     bool fRemove = nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n                    // or it's our own node and we just updated it to the new protocol but we are still waiting for activation ...\n                    (pubKeyMasternode == activeMasternode.pubKeyMasternode && nProtocolVersion < PROTOCOL_VERSION);\n \n-    if(fRemove) {\n-        // it should be removed from the list\n-        nActiveState = MASTERNODE_REMOVE;\n+    // keep old masternodes on start, give them a chance to receive an updated ping without removal/expiry\n+    if(!masternodeSync.IsMasternodeListSynced()) nTimeStart = GetTime();\n+    bool fWaitForPing = (GetTime() - nTimeStart < MASTERNODE_MIN_MNP_SECONDS);\n \n-        // RESCAN AFFECTED VOTES\n-        FlagGovernanceItemsAsDirty();\n+    if(nActiveState == MASTERNODE_POSE_BAN) {\n+        if(IsPingedWithin(MASTERNODE_POSE_BAN_SECONDS)) {\n+            // Still alive? Good luck with that.\n+            return;\n+        } else {\n+            // It's finally dead, good...\n+            // or did we just start our node and it's too early to decide?\n+            fRemove = !fWaitForPing;\n+        }\n+    } else if(nPoSeBanScore >= MASTERNODE_POSE_BAN_MAX_SCORE) {\n+        nActiveState = MASTERNODE_POSE_BAN;\n         return;\n     }\n \n-    if(!IsPingedWithin(MASTERNODE_EXPIRATION_SECONDS)) {\n-        if(nActiveState != MASTERNODE_WATCHDOG_EXPIRED) {\n-            nActiveState = MASTERNODE_EXPIRED;\n-        }\n+    if(fRemove) {\n+        // it should be removed from the list\n+        nActiveState = MASTERNODE_REMOVE;\n \n         // RESCAN AFFECTED VOTES\n         FlagGovernanceItemsAsDirty();\n         return;\n     }\n \n-    if(lastPing.sigTime - sigTime < MASTERNODE_MIN_MNP_SECONDS) {\n-        if(nActiveState != MASTERNODE_WATCHDOG_EXPIRED) {\n-            nActiveState = MASTERNODE_PRE_ENABLED;\n-        }\n+    bool fWatchdogActive = mnodeman.IsWatchdogActive();\n+    bool fWatchdogExpired = (fWatchdogActive && ((GetTime() - nTimeLastWatchdogVote) > MASTERNODE_WATCHDOG_MAX_SECONDS));\n+\n+    LogPrint(\"masternode\", \"CMasternode::Check -- vin %s, nTimeLastWatchdogVote %d, GetTime() %d, fWatchdogExpired %d\\n\",\n+            vin.prevout.ToStringShort(), nTimeLastWatchdogVote, GetTime(), fWatchdogExpired);\n \n+    if(fWatchdogExpired) {\n+        nActiveState = MASTERNODE_WATCHDOG_EXPIRED;\n         return;\n     }\n \n-    if(!fUnitTest) {\n-        CValidationState state;\n-        CMutableTransaction tx = CMutableTransaction();\n-        CTxOut txout = CTxOut(999.99*COIN, mnodeman.dummyScriptPubkey);\n-        tx.vin.push_back(vin);\n-        tx.vout.push_back(txout);\n-\n-        {\n-            TRY_LOCK(cs_main, lockMain);\n-            if(!lockMain) return;\n-\n-            if(!AcceptToMemoryPool(mempool, state, CTransaction(tx), false, NULL, false, true, true)) {\n-                nActiveState = MASTERNODE_OUTPOINT_SPENT;\n-                return;\n-            }\n-        }\n+    if(!fWaitForPing && !IsPingedWithin(MASTERNODE_EXPIRATION_SECONDS)) {\n+        nActiveState = MASTERNODE_EXPIRED;\n+        // RESCAN AFFECTED VOTES\n+        FlagGovernanceItemsAsDirty();\n+        return;\n     }\n \n-    bool fWatchdogExpired = (fWatchdogActive && ((GetTime() - nTimeLastWatchdogVote) > MASTERNODE_WATCHDOG_MAX_SECONDS));\n-    LogPrint(\"masternode\", \"CMasternode::Check -- vin = %s,  nTimeLastWatchdogVote = %d, GetTime() = %d, fWatchdogExpired = %d\\n\", \n-             vin.prevout.ToStringShort(), nTimeLastWatchdogVote, GetTime(), fWatchdogExpired);\n-    if(fWatchdogExpired) {\n-        nActiveState = MASTERNODE_WATCHDOG_EXPIRED;\n+    if(lastPing.sigTime - sigTime < MASTERNODE_MIN_MNP_SECONDS) {\n+        nActiveState = MASTERNODE_PRE_ENABLED;\n         return;\n     }\n \n@@ -257,6 +279,7 @@ std::string CMasternode::GetStatus()\n         case CMasternode::MASTERNODE_OUTPOINT_SPENT:    return \"OUTPOINT_SPENT\";\n         case CMasternode::MASTERNODE_REMOVE:            return \"REMOVE\";\n         case CMasternode::MASTERNODE_WATCHDOG_EXPIRED:  return \"WATCHDOG_EXPIRED\";\n+        case CMasternode::MASTERNODE_POSE_BAN:          return \"POSE_BAN\";\n         default:                                        return \"UNKNOWN\";\n     }\n }\n@@ -398,12 +421,20 @@ bool CMasternodeBroadcast::Create(CTxIn txin, CService service, CKey keyCollater\n     return true;\n }\n \n-bool CMasternodeBroadcast::CheckAndUpdate(int& nDos)\n+bool CMasternodeBroadcast::SimpleCheck(int& nDos)\n {\n     nDos = 0;\n+\n+    // make sure addr is valid\n+    if(!IsValidNetAddr()) {\n+        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- Invalid addr, rejected: masternode=%s  addr=%s\\n\",\n+                    vin.prevout.ToStringShort(), addr.ToString());\n+        return false;\n+    }\n+\n     // make sure signature isn't in the future (past is OK)\n     if (sigTime > GetAdjustedTime() + 60 * 60) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- Signature rejected, too far into the future: masternode=%s\\n\", vin.prevout.ToStringShort());\n+        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- Signature rejected, too far into the future: masternode=%s\\n\", vin.prevout.ToStringShort());\n         nDos = 1;\n         return false;\n     }\n@@ -414,15 +445,15 @@ bool CMasternodeBroadcast::CheckAndUpdate(int& nDos)\n     }\n \n     if(nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto()) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- ignoring outdated Masternode: masternode=%s  nProtocolVersion=%d\\n\", vin.prevout.ToStringShort(), nProtocolVersion);\n+        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- ignoring outdated Masternode: masternode=%s  nProtocolVersion=%d\\n\", vin.prevout.ToStringShort(), nProtocolVersion);\n         return false;\n     }\n \n     CScript pubkeyScript;\n     pubkeyScript = GetScriptForDestination(pubKeyCollateralAddress.GetID());\n \n     if(pubkeyScript.size() != 25) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- pubKeyCollateralAddress has the wrong size\\n\");\n+        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- pubKeyCollateralAddress has the wrong size\\n\");\n         nDos = 100;\n         return false;\n     }\n@@ -431,18 +462,18 @@ bool CMasternodeBroadcast::CheckAndUpdate(int& nDos)\n     pubkeyScript2 = GetScriptForDestination(pubKeyMasternode.GetID());\n \n     if(pubkeyScript2.size() != 25) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- pubKeyMasternode has the wrong size\\n\");\n+        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- pubKeyMasternode has the wrong size\\n\");\n         nDos = 100;\n         return false;\n     }\n \n     if(!vin.scriptSig.empty()) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- Ignore Not Empty ScriptSig %s\\n\",vin.ToString());\n+        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- Ignore Not Empty ScriptSig %s\\n\",vin.ToString());\n         return false;\n     }\n \n     if (!CheckSignature(nDos)) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- CheckSignature() failed, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- CheckSignature() failed, masternode=%s\\n\", vin.prevout.ToStringShort());\n         return false;\n     }\n \n@@ -451,28 +482,47 @@ bool CMasternodeBroadcast::CheckAndUpdate(int& nDos)\n         if(addr.GetPort() != mainnetDefaultPort) return false;\n     } else if(addr.GetPort() == mainnetDefaultPort) return false;\n \n-    //search existing Masternode list, this is where we update existing Masternodes with new mnb broadcasts\n-    CMasternode* pmn = mnodeman.Find(vin);\n+    return true;\n+}\n \n-    // no such masternode, nothing to update\n-    if(pmn == NULL) return true;\n+bool CMasternodeBroadcast::Update(CMasternode* pmn, int& nDos)\n+{\n+    if(pmn->sigTime == sigTime) {\n+        // mapSeenMasternodeBroadcast in CMasternodeMan::CheckMnbAndUpdateMasternodeList should filter legit duplicates\n+        // but this still can happen if we just started, which is ok, just do nothing here.\n+        return true;\n+    }\n \n-    // this broadcast is older or equal than the one that we already have - it's bad and should never happen\n+    // this broadcast is older than the one that we already have - it's bad and should never happen\n     // unless someone is doing something fishy\n-    // (mapSeenMasternodeBroadcast in CMasternodeMan::ProcessMessage should filter legit duplicates)\n-    if(pmn->sigTime >= sigTime) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- Bad sigTime %d (existing broadcast is at %d) for Masternode %s %s\\n\",\n+    if(pmn->sigTime > sigTime) {\n+        LogPrintf(\"CMasternodeBroadcast::Update -- Bad sigTime %d (existing broadcast is at %d) for Masternode %s %s\\n\",\n                       sigTime, pmn->sigTime, vin.prevout.ToStringShort(), addr.ToString());\n         return false;\n     }\n \n+    pmn->Check();\n+\n+    // masternode is banned by PoSe\n+    if(pmn->IsPoSeBanned()) {\n+        LogPrintf(\"CMasternodeBroadcast::Update -- Banned by PoSe, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        return false;\n+    }\n+\n     // masternode is not enabled yet/already, nothing to update\n-    if(!pmn->IsEnabled()) return true;\n+    if(!pmn->IsEnabled()) return false;\n+\n+    // IsVnAssociatedWithPubkey is validated once in CheckOutpoint, after that they just need to match\n+    if(pmn->pubKeyCollateralAddress != pubKeyCollateralAddress) {\n+        LogPrintf(\"CMasternodeMan::Update -- Got mismatched pubKeyCollateralAddress and vin\\n\");\n+        nDos = 33;\n+        return false;\n+    }\n \n-    // IsVnAssociatedWithPubkey is validated once below, after that they just need to match\n-    if(pmn->pubKeyCollateralAddress == pubKeyCollateralAddress && !pmn->IsBroadcastedWithin(MASTERNODE_MIN_MNB_SECONDS)) {\n-        //take the newest entry\n-        LogPrintf(\"CMasternodeBroadcast::CheckAndUpdate -- Got UPDATED Masternode entry: addr=%s\\n\", addr.ToString());\n+    // if ther was no masternode broadcast recently or if it matches our Masternode privkey...\n+    if(!pmn->IsBroadcastedWithin(MASTERNODE_MIN_MNB_SECONDS) || (fMasterNode && pubKeyMasternode == activeMasternode.pubKeyMasternode)) {\n+        // take the newest entry\n+        LogPrintf(\"CMasternodeBroadcast::Update -- Got UPDATED Masternode entry: addr=%s\\n\", addr.ToString());\n         if(pmn->UpdateFromNewBroadcast((*this))) {\n             pmn->Check();\n             // normally masternode should be in pre-enabled status after update, if not - do not relay\n@@ -486,66 +536,49 @@ bool CMasternodeBroadcast::CheckAndUpdate(int& nDos)\n     return true;\n }\n \n-bool CMasternodeBroadcast::CheckInputsAndAdd(int& nDos)\n+bool CMasternodeBroadcast::CheckOutpoint(int& nDos)\n {\n     // we are a masternode with the same vin (i.e. already activated) and this mnb is ours (matches our Masternode privkey)\n     // so nothing to do here for us\n     if(fMasterNode && vin.prevout == activeMasternode.vin.prevout && pubKeyMasternode == activeMasternode.pubKeyMasternode) {\n-        return true;\n-    }\n-\n-    // incorrect ping or its sigTime\n-    if(lastPing == CMasternodePing() || !lastPing.CheckAndUpdate(nDos, false, true)) {\n-        return false;\n-    }\n-\n-    // search existing Masternode list\n-    CMasternode* pmn = mnodeman.Find(vin);\n-\n-    if(pmn != NULL) {\n-        // nothing to do here if we already know about this masternode and it's (pre)enabled\n-        if(pmn->IsEnabled() || pmn->IsPreEnabled() || pmn->IsWatchdogExpired()) return true;\n-        // if it's not (pre)enabled, remove old MN first and continue\n-        mnodeman.Remove(pmn->vin);\n-    }\n-\n-    if(GetInputAge(vin) < Params().GetConsensus().nMasternodeMinimumConfirmations) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckInputsAndAdd -- Input must have at least %d confirmations\\n\", Params().GetConsensus().nMasternodeMinimumConfirmations);\n-        // maybe we miss few blocks, let this mnb to be checked again later\n-        mnodeman.mapSeenMasternodeBroadcast.erase(GetHash());\n         return false;\n     }\n \n-    CValidationState state;\n-    CMutableTransaction dummyTx = CMutableTransaction();\n-    CTxOut dummyTxOut = CTxOut(999.99*COIN, mnodeman.dummyScriptPubkey);\n-    dummyTx.vin.push_back(vin);\n-    dummyTx.vout.push_back(dummyTxOut);\n-\n     {\n         TRY_LOCK(cs_main, lockMain);\n         if(!lockMain) {\n             // not mnb fault, let it to be checked again later\n-            LogPrint(\"masternode\", \"CMasternodeBroadcast::CheckInputsAndAdd -- Failed to aquire lock, addr=%s\", addr.ToString());\n+            LogPrint(\"masternode\", \"CMasternodeBroadcast::CheckOutpoint -- Failed to aquire lock, addr=%s\", addr.ToString());\n             mnodeman.mapSeenMasternodeBroadcast.erase(GetHash());\n             return false;\n         }\n \n-        if(!AcceptToMemoryPool(mempool, state, CTransaction(dummyTx), false, NULL, false, true, true)) {\n-            //set nDos\n-            LogPrint(\"masternode\", \"CMasternodeBroadcast::CheckInputsAndAdd -- Failed to accepted Masternode entry to mempool: dummyTx=%s\", dummyTx.ToString());\n-            state.IsInvalid(nDos);\n+        CCoins coins;\n+        if(!pcoinsTip->GetCoins(vin.prevout.hash, coins) ||\n+           (unsigned int)vin.prevout.n>=coins.vout.size() ||\n+           coins.vout[vin.prevout.n].IsNull()) {\n+            LogPrint(\"masternode\", \"CMasternodeBroadcast::CheckOutpoint -- Failed to find Masternode UTXO, masternode=%s\\n\", vin.prevout.ToStringShort());\n+            return false;\n+        }\n+        if(coins.vout[vin.prevout.n].nValue != 1000 * COIN) {\n+            LogPrint(\"masternode\", \"CMasternodeBroadcast::CheckOutpoint -- Masternode UTXO should have 1000 DASH, masternode=%s\\n\", vin.prevout.ToStringShort());\n+            return false;\n+        }\n+        if(chainActive.Height() - coins.nHeight + 1 < Params().GetConsensus().nMasternodeMinimumConfirmations) {\n+            LogPrintf(\"CMasternodeBroadcast::CheckOutpoint -- Masternode UTXO must have at least %d confirmations, masternode=\\n\",\n+                    Params().GetConsensus().nMasternodeMinimumConfirmations, vin.prevout.ToStringShort());\n+            // maybe we miss few blocks, let this mnb to be checked again later\n+            mnodeman.mapSeenMasternodeBroadcast.erase(GetHash());\n             return false;\n         }\n     }\n \n-    LogPrint(\"masternode\", \"CMasternodeBroadcast::CheckInputsAndAdd -- Accepted Masternode entry to mempool (dry-run mode)\\n\");\n-\n+    LogPrint(\"masternode\", \"CMasternodeBroadcast::CheckOutpoint -- Masternode UTXO verified\\n\");\n \n     // make sure the vout that was signed is related to the transaction that spawned the Masternode\n     //  - this is expensive, so it's only done once per Masternode\n     if(!darkSendSigner.IsVinAssociatedWithPubkey(vin, pubKeyCollateralAddress)) {\n-        LogPrintf(\"CMasternodeMan::CheckInputsAndAdd -- Got mismatched pubKeyCollateralAddress and vin\\n\");\n+        LogPrintf(\"CMasternodeMan::CheckOutpoint -- Got mismatched pubKeyCollateralAddress and vin\\n\");\n         nDos = 33;\n         return false;\n     }\n@@ -562,39 +595,13 @@ bool CMasternodeBroadcast::CheckInputsAndAdd(int& nDos)\n             CBlockIndex* pMNIndex = (*mi).second; // block for 1000 DASH tx -> 1 confirmation\n             CBlockIndex* pConfIndex = chainActive[pMNIndex->nHeight + Params().GetConsensus().nMasternodeMinimumConfirmations - 1]; // block where tx got nMasternodeMinimumConfirmations\n             if(pConfIndex->GetBlockTime() > sigTime) {\n-                LogPrintf(\"CMasternodeBroadcast::CheckInputsAndAdd -- Bad sigTime %d (%d conf block is at %d) for Masternode %s %s\\n\",\n+                LogPrintf(\"CMasternodeBroadcast::CheckOutpoint -- Bad sigTime %d (%d conf block is at %d) for Masternode %s %s\\n\",\n                           sigTime, Params().GetConsensus().nMasternodeMinimumConfirmations, pConfIndex->GetBlockTime(), vin.prevout.ToStringShort(), addr.ToString());\n                 return false;\n             }\n         }\n     }\n \n-    // if it matches our Masternode privkey...\n-    if(fMasterNode && pubKeyMasternode == activeMasternode.pubKeyMasternode) {\n-        if(nProtocolVersion == PROTOCOL_VERSION) {\n-            // ... and PROTOCOL_VERSION, then we've been remotely activated ...\n-            activeMasternode.EnableRemoteMasterNode(vin, addr);\n-        } else {\n-            // ... otherwise we need to reactivate our node, don not add it to the list and do not relay\n-            // but also do not ban the node we get this message from\n-            LogPrintf(\"CMasternodeBroadcast::CheckInputsAndAdd -- wrong PROTOCOL_VERSION, re-activate your MN: message nProtocolVersion=%d  PROTOCOL_VERSION=%d\\n\", nProtocolVersion, PROTOCOL_VERSION);\n-            return false;\n-        }\n-    }\n-\n-    LogPrintf(\"CMasternodeBroadcast::CheckInputsAndAdd -- Got NEW Masternode entry: masternode=%s  sigTime=%lld  addr=%s\\n\", vin.prevout.ToStringShort(), sigTime, addr.ToString());\n-    CMasternode mn(*this);\n-    mnodeman.Add(mn);\n-\n-    bool isLocal = addr.IsRFC1918() || addr.IsLocal();\n-    if(Params().NetworkIDString() == CBaseChainParams::REGTEST) {\n-        isLocal = false;\n-    }\n-\n-    if(!isLocal) {\n-        Relay();\n-    }\n-\n     return true;\n }\n "
      },
      {
        "sha": "71b790080d93d1d972edbd922d82b96619e65cd1",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 81,
        "deletions": 11,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -14,14 +14,15 @@ class CMasternode;\n class CMasternodeBroadcast;\n class CMasternodePing;\n \n-static const int MASTERNODE_MIN_MNP_SECONDS       = 10 * 60;\n-static const int MASTERNODE_MIN_MNB_SECONDS       =  5 * 60;\n-static const int MASTERNODE_MIN_DSEG_SECONDS      = 10 * 60;\n-static const int MASTERNODE_EXPIRATION_SECONDS    = 65 * 60;\n-static const int MASTERNODE_REMOVAL_SECONDS       = 75 * 60;\n-static const int MASTERNODE_CHECK_SECONDS         = 5;\n-static const int MASTERNODE_WATCHDOG_MAX_SECONDS  = 2 * 60 * 60;\n-\n+static const int MASTERNODE_MIN_MNP_SECONDS         = 10 * 60;\n+static const int MASTERNODE_MIN_MNB_SECONDS         =  5 * 60;\n+static const int MASTERNODE_EXPIRATION_SECONDS      = 65 * 60;\n+static const int MASTERNODE_REMOVAL_SECONDS         = 75 * 60;\n+static const int MASTERNODE_CHECK_SECONDS           = 5;\n+static const int MASTERNODE_WATCHDOG_MAX_SECONDS    = 2 * 60 * 60;\n+\n+static const int MASTERNODE_POSE_BAN_SECONDS        = 24 * 60 * 60;\n+static const int MASTERNODE_POSE_BAN_MAX_SCORE      = 5;\n //\n // The Masternode Ping Class : Contains a different serialize method for sending pings from masternodes throughout the network\n //\n@@ -144,7 +145,8 @@ class CMasternode\n         MASTERNODE_EXPIRED,\n         MASTERNODE_OUTPOINT_SPENT,\n         MASTERNODE_REMOVE,\n-        MASTERNODE_WATCHDOG_EXPIRED\n+        MASTERNODE_WATCHDOG_EXPIRED,\n+        MASTERNODE_POSE_BAN\n     };\n \n     CTxIn vin;\n@@ -162,6 +164,7 @@ class CMasternode\n     int nCacheCollateralBlock;\n     int nBlockLastPaid;\n     int nProtocolVersion;\n+    int nPoSeBanScore;\n     bool fAllowMixingTx;\n     bool fUnitTest;\n \n@@ -193,6 +196,7 @@ class CMasternode\n         READWRITE(nCacheCollateralBlock);\n         READWRITE(nBlockLastPaid);\n         READWRITE(nProtocolVersion);\n+        READWRITE(nPoSeBanScore);\n         READWRITE(fAllowMixingTx);\n         READWRITE(fUnitTest);\n         READWRITE(mapGovernanceObjectsVotedOn);\n@@ -220,6 +224,7 @@ class CMasternode\n         swap(first.nCacheCollateralBlock, second.nCacheCollateralBlock);\n         swap(first.nBlockLastPaid, second.nBlockLastPaid);\n         swap(first.nProtocolVersion, second.nProtocolVersion);\n+        swap(first.nPoSeBanScore, second.nPoSeBanScore);\n         swap(first.fAllowMixingTx, second.fAllowMixingTx);\n         swap(first.fUnitTest, second.fUnitTest);\n         swap(first.mapGovernanceObjectsVotedOn, second.mapGovernanceObjectsVotedOn);\n@@ -246,6 +251,8 @@ class CMasternode\n \n     bool IsEnabled() { return nActiveState == MASTERNODE_ENABLED; }\n     bool IsPreEnabled() { return nActiveState == MASTERNODE_PRE_ENABLED; }\n+    bool IsPoSeBanned() { return nActiveState == MASTERNODE_POSE_BAN; }\n+    bool IsPoSeVerified() { return nPoSeBanScore <= -MASTERNODE_POSE_BAN_MAX_SCORE; }\n \n     bool IsWatchdogExpired() { return nActiveState == MASTERNODE_WATCHDOG_EXPIRED; }\n \n@@ -339,12 +346,75 @@ class CMasternodeBroadcast : public CMasternode\n     static bool Create(CTxIn vin, CService service, CKey keyCollateralAddressNew, CPubKey pubKeyCollateralAddressNew, CKey keyMasternodeNew, CPubKey pubKeyMasternodeNew, std::string &strErrorRet, CMasternodeBroadcast &mnbRet);\n     static bool Create(std::string strService, std::string strKey, std::string strTxHash, std::string strOutputIndex, std::string& strErrorRet, CMasternodeBroadcast &mnbRet, bool fOffline = false);\n \n-    bool CheckAndUpdate(int& nDos);\n-    bool CheckInputsAndAdd(int& nDos);\n+    bool SimpleCheck(int& nDos);\n+    bool Update(CMasternode* pmn, int& nDos);\n+    bool CheckOutpoint(int& nDos);\n \n     bool Sign(CKey& keyCollateralAddress);\n     bool CheckSignature(int& nDos);\n     void Relay();\n };\n \n+class CMasternodeVerification\n+{\n+public:\n+    CTxIn vin1;\n+    CTxIn vin2;\n+    CService addr;\n+    int nonce;\n+    int nBlockHeight;\n+    std::vector<unsigned char> vchSig1;\n+    std::vector<unsigned char> vchSig2;\n+\n+    CMasternodeVerification() :\n+        vin1(),\n+        vin2(),\n+        addr(),\n+        nonce(0),\n+        nBlockHeight(0),\n+        vchSig1(),\n+        vchSig2()\n+        {}\n+\n+    CMasternodeVerification(CService addr, int nonce, int nBlockHeight) :\n+        vin1(),\n+        vin2(),\n+        addr(addr),\n+        nonce(nonce),\n+        nBlockHeight(nBlockHeight),\n+        vchSig1(),\n+        vchSig2()\n+        {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(vin1);\n+        READWRITE(vin2);\n+        READWRITE(addr);\n+        READWRITE(nonce);\n+        READWRITE(nBlockHeight);\n+        READWRITE(vchSig1);\n+        READWRITE(vchSig2);\n+    }\n+\n+    uint256 GetHash() const\n+    {\n+        CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+        ss << vin1;\n+        ss << vin2;\n+        ss << addr;\n+        ss << nonce;\n+        ss << nBlockHeight;\n+        return ss.GetHash();\n+    }\n+\n+    void Relay() const\n+    {\n+        CInv inv(MSG_MASTERNODE_VERIFY, GetHash());\n+        RelayInv(inv);\n+    }\n+};\n+\n #endif"
      },
      {
        "sha": "8e4ab24db7e671625ef61d175f2aaf482f9562fa",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 502,
        "deletions": 28,
        "changes": 530,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -8,6 +8,7 @@\n #include \"masternode.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n+#include \"netfulfilledman.h\"\n #include \"util.h\"\n #include \"addrman.h\"\n #include \"spork.h\"\n@@ -17,6 +18,8 @@\n /** Masternode manager */\n CMasternodeMan mnodeman;\n \n+const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-1\";\n+\n struct CompareLastPaidBlock\n {\n     bool operator()(const std::pair<int, CMasternode*>& t1,\n@@ -35,12 +38,14 @@ struct CompareScoreMN\n     }\n };\n \n-const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-1\";\n-\n-CMasternodeMan::CMasternodeMan() {\n-    nDsqCount = 0;\n-    nLastWatchdogVoteTime = 0;\n-}\n+struct CompareByAddr\n+{\n+    bool operator()(const CMasternode* t1,\n+                    const CMasternode* t2) const\n+    {\n+        return t1->addr < t2->addr;\n+    }\n+};\n \n bool CMasternodeMan::Add(CMasternode &mn)\n {\n@@ -151,6 +156,15 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n         }\n     }\n \n+    std::map<CNetAddr, CMasternodeVerification>::iterator itv1 = mWeAskedForVerification.begin();\n+    while(itv1 != mWeAskedForVerification.end()){\n+        if(itv1->second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS) {\n+            mWeAskedForVerification.erase(itv1++);\n+        } else {\n+            ++itv1;\n+        }\n+    }\n+\n     // remove expired mapSeenMasternodeBroadcast\n     map<uint256, CMasternodeBroadcast>::iterator it3 = mapSeenMasternodeBroadcast.begin();\n     while(it3 != mapSeenMasternodeBroadcast.end()){\n@@ -173,6 +187,16 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n         }\n     }\n \n+    // remove expired mapSeenMasternodeVerification\n+    std::map<uint256, CMasternodeVerification>::iterator itv2 = mapSeenMasternodeVerification.begin();\n+    while(itv2 != mapSeenMasternodeVerification.end()){\n+        if((*itv2).second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS){\n+            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode verification: hash=%s\\n\", (*itv2).first.ToString());\n+            mapSeenMasternodeVerification.erase(itv2++);\n+        } else {\n+            ++itv2;\n+        }\n+    }\n }\n \n void CMasternodeMan::Clear()\n@@ -250,7 +274,7 @@ void CMasternodeMan::DsegUpdate(CNode* pnode)\n     }\n     \n     pnode->PushMessage(NetMsgType::DSEG, CTxIn());\n-    int64_t askAgain = GetTime() + MASTERNODES_DSEG_SECONDS;\n+    int64_t askAgain = GetTime() + DSEG_UPDATE_SECONDS;\n     mWeAskedForMasternodeList[pnode->addr] = askAgain;\n }\n \n@@ -670,7 +694,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n                         return;\n                     }\n                 }\n-                int64_t askAgain = GetTime() + MASTERNODES_DSEG_SECONDS;\n+                int64_t askAgain = GetTime() + DSEG_UPDATE_SECONDS;\n                 mAskedUsForMasternodeList[pfrom->addr] = askAgain;\n             }\n         } //else, asking for a specific node which is ok\n@@ -705,6 +729,420 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         }\n         // smth weird happen - someone asked us for vin we have no idea about?\n         LogPrint(\"masternode\", \"CMasternodeMan::ProcessMessage -- DSEG -- No invs sent to peer %d\\n\", pfrom->id);\n+\n+    } else if (strCommand == NetMsgType::MNVERIFY) { // Masternode Verify\n+\n+        CMasternodeVerification mnv;\n+        vRecv >> mnv;\n+\n+        if(mnv.vchSig1.empty()) {\n+            // CASE 1: someone asked me to verify myself /IP we are using/\n+            SendVerifyReply(pfrom, mnv);\n+        } else if (mnv.vchSig2.empty()) {\n+            // CASE 2: we _probably_ got verification we requested from some masternode\n+            ProcessVerifyReply(pfrom, mnv);\n+        } else {\n+            // CASE 3: we _probably_ got verification broadcast signed by some masternode which verified another one\n+            ProcessVerifyBroadcast(pfrom, mnv);\n+        }\n+    }\n+}\n+\n+void CMasternodeMan::DoFullVerificationStep()\n+{\n+    if(activeMasternode.vin == CTxIn()) return;\n+\n+    std::vector<std::pair<int, CMasternode> > vecMasternodeRanks = GetMasternodeRanks(pCurrentBlockIndex->nHeight - 1, MIN_POSE_PROTO_VERSION);\n+\n+    LOCK(cs);\n+\n+    int nCount = 0;\n+    int nCountMax = std::max(10, (int)vMasternodes.size() / 100); // verify at least 10 masternode at once but at most 1% of all known masternodes\n+\n+    int nMyRank = -1;\n+    int nRanksTotal = (int)vecMasternodeRanks.size();\n+\n+    // send verify requests only if we are in top MAX_POSE_RANK\n+    std::vector<std::pair<int, CMasternode> >::iterator it = vecMasternodeRanks.begin();\n+    while(it != vecMasternodeRanks.end()) {\n+        if(it->first > MAX_POSE_RANK) {\n+            LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Must be in top %d to send verify request\\n\",\n+                        (int)MAX_POSE_RANK);\n+            return;\n+        }\n+        if(it->second.vin == activeMasternode.vin) {\n+            nMyRank = it->first;\n+            LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Found self at rank %d/%d, verifying up to %d masternodes\\n\",\n+                        nMyRank, nRanksTotal, nCountMax);\n+            break;\n+        }\n+        ++it;\n+    }\n+\n+    // edge case: list is too short and this masternode is not enabled\n+    if(nMyRank == -1) return;\n+\n+    // send verify requests to up to nCountMax masternodes starting from\n+    // (MAX_POSE_RANK + nCountMax * (nMyRank - 1) + 1)\n+    int nOffset = MAX_POSE_RANK + nCountMax * (nMyRank - 1);\n+    if(nOffset >= (int)vecMasternodeRanks.size()) return;\n+\n+    std::vector<CMasternode*> vSortedByAddr;\n+    BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n+        vSortedByAddr.push_back(&mn);\n+    }\n+\n+    sort(vSortedByAddr.begin(), vSortedByAddr.end(), CompareByAddr());\n+\n+    it = vecMasternodeRanks.begin() + nOffset;\n+    while(it != vecMasternodeRanks.end()) {\n+        if(it->second.IsPoSeVerified() || it->second.IsPoSeBanned()) {\n+            LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Already %s%s%s masternode %s address %s, skipping...\\n\",\n+                        it->second.IsPoSeVerified() ? \"verified\" : \"\",\n+                        it->second.IsPoSeVerified() && it->second.IsPoSeBanned() ? \" and \" : \"\",\n+                        it->second.IsPoSeBanned() ? \"banned\" : \"\",\n+                        it->second.vin.prevout.ToStringShort(), it->second.addr.ToString());\n+            ++it;\n+            continue;\n+        }\n+        LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Verifying masternode %s rank %d/%d address %s\\n\",\n+                    it->second.vin.prevout.ToStringShort(), it->first, nRanksTotal, it->second.addr.ToString());\n+        if(SendVerifyRequest((CAddress)it->second.addr, vSortedByAddr)) {\n+            nCount++;\n+            if(nCount >= nCountMax) break;\n+        }\n+        ++it;\n+    }\n+\n+    LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Sent verification requests to %d masternodes\\n\", nCount);\n+}\n+\n+void CMasternodeMan::CheckSameAddr()\n+{\n+    if(!masternodeSync.IsSynced() || vMasternodes.empty()) return;\n+\n+    std::vector<CMasternode*> vBan;\n+    std::vector<CMasternode*> vSortedByAddr;\n+\n+    {\n+        LOCK(cs);\n+\n+        CMasternode* pprevMasternode = NULL;\n+        CMasternode* pverifiedMasternode = NULL;\n+\n+        BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n+            vSortedByAddr.push_back(&mn);\n+        }\n+\n+        sort(vSortedByAddr.begin(), vSortedByAddr.end(), CompareByAddr());\n+\n+        BOOST_FOREACH(CMasternode* pmn, vSortedByAddr) {\n+            // check only (pre)enabled masternodes\n+            if(!pmn->IsEnabled() && !pmn->IsPreEnabled()) continue;\n+            // initial step\n+            if(!pprevMasternode) {\n+                pprevMasternode = pmn;\n+                pverifiedMasternode = pmn->IsPoSeVerified() ? pmn : NULL;\n+                continue;\n+            }\n+            // second+ step\n+            if(pmn->addr == pprevMasternode->addr) {\n+                if(pverifiedMasternode) {\n+                    // another masternode with the same ip is verified, ban this one\n+                    vBan.push_back(pmn);\n+                } else if(pmn->IsPoSeVerified()) {\n+                    // this masternode with the same ip is verified, ban previous one\n+                    vBan.push_back(pprevMasternode);\n+                    // and keep a reference to be able to ban following masternodes with the same ip\n+                    pverifiedMasternode = pmn;\n+                }\n+            } else {\n+                pverifiedMasternode = pmn->IsPoSeVerified() ? pmn : NULL;\n+            }\n+            pprevMasternode = pmn;\n+        }\n+    }\n+\n+    // ban duplicates\n+    BOOST_FOREACH(CMasternode* pmn, vBan) {\n+        pmn->nPoSeBanScore++;\n+    }\n+}\n+\n+bool CMasternodeMan::SendVerifyRequest(const CAddress& addr, const std::vector<CMasternode*>& vSortedByAddr)\n+{\n+    if(netfulfilledman.HasFulfilledRequest(addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-request\")) {\n+        // we already asked for verification, not a good idea to do this too often, skip it\n+        LogPrint(\"masternode\", \"CMasternodeMan::SendVerifyRequest -- too many requests, skipping... addr=%s\\n\", addr.ToString());\n+        return false;\n+    }\n+\n+    CNode* pnode = ConnectNode(addr, NULL, true);\n+    if(pnode != NULL) {\n+        netfulfilledman.AddFulfilledRequest(addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-request\");\n+        // use random nonce, store it and require node to reply with correct one later\n+        CMasternodeVerification mnv(addr, GetInsecureRand(999999), pCurrentBlockIndex->nHeight - 1);\n+        mWeAskedForVerification[addr] = mnv;\n+        LogPrintf(\"CMasternodeMan::SendVerifyRequest -- verifying using nonce %d addr=%s\\n\", mnv.nonce, addr.ToString());\n+        pnode->PushMessage(NetMsgType::MNVERIFY, mnv);\n+        return true;\n+    } else {\n+        // can't connect, add some PoSe \"ban score\" to all masternodes with given addr\n+        bool fFound = false;\n+        BOOST_FOREACH(CMasternode* pmn, vSortedByAddr) {\n+            if(pmn->addr != addr) {\n+                if(fFound) break;\n+                continue;\n+            }\n+            fFound = true;\n+            pmn->nPoSeBanScore++;\n+        }\n+        return false;\n+    }\n+}\n+\n+void CMasternodeMan::SendVerifyReply(CNode* pnode, CMasternodeVerification& mnv)\n+{\n+    // only masternodes can sign this, why would someone ask regular node?\n+    if(!fMasterNode) {\n+        // do not ban, malicious node might be using my IP\n+        // and trying to confuse the node which tries to verify it\n+        return;\n+    }\n+\n+    if(netfulfilledman.HasFulfilledRequest(pnode->addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-reply\")) {\n+        // peer should not ask us that often\n+        LogPrintf(\"MasternodeMan::SendVerifyReply -- ERROR: peer already asked me recently, peer=%d\\n\", pnode->id);\n+        Misbehaving(pnode->id, 20);\n+        return;\n+    }\n+\n+    uint256 blockHash;\n+    if(!GetBlockHash(blockHash, mnv.nBlockHeight)) {\n+        LogPrintf(\"MasternodeMan::SendVerifyReply -- can't get block hash for unknown block height %d, peer=%d\\n\", mnv.nBlockHeight, pnode->id);\n+        return;\n+    }\n+\n+    std::string strMessage = strprintf(\"%s%d%s\", activeMasternode.service.ToString(false), mnv.nonce, blockHash.ToString());\n+\n+    if(!darkSendSigner.SignMessage(strMessage, mnv.vchSig1, activeMasternode.keyMasternode)) {\n+        LogPrintf(\"MasternodeMan::SendVerifyReply -- SignMessage() failed\\n\");\n+        return;\n+    }\n+\n+    std::string strError;\n+\n+    if(!darkSendSigner.VerifyMessage(activeMasternode.pubKeyMasternode, mnv.vchSig1, strMessage, strError)) {\n+        LogPrintf(\"MasternodeMan::SendVerifyReply -- VerifyMessage() failed, error: %s\\n\", strError);\n+        return;\n+    }\n+\n+    pnode->PushMessage(NetMsgType::MNVERIFY, mnv);\n+    netfulfilledman.AddFulfilledRequest(pnode->addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-reply\");\n+}\n+\n+void CMasternodeMan::ProcessVerifyReply(CNode* pnode, CMasternodeVerification& mnv)\n+{\n+    std::string strError;\n+\n+    // did we even ask for it? if that's the case we should have matching fulfilled request\n+    if(!netfulfilledman.HasFulfilledRequest(pnode->addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-request\")) {\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyReply -- ERROR: we didn't ask for verification of %s, peer=%d\\n\", pnode->addr.ToString(), pnode->id);\n+        Misbehaving(pnode->id, 20);\n+        return;\n+    }\n+\n+    // Received nonce for a known address must match the one we sent\n+    if(mWeAskedForVerification[pnode->addr].nonce != mnv.nonce) {\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyReply -- ERROR: wrong nounce: requested=%d, received=%d, peer=%d\\n\",\n+                    mWeAskedForVerification[pnode->addr].nonce, mnv.nonce, pnode->id);\n+        Misbehaving(pnode->id, 20);\n+        return;\n+    }\n+\n+    // Received nBlockHeight for a known address must match the one we sent\n+    if(mWeAskedForVerification[pnode->addr].nBlockHeight != mnv.nBlockHeight) {\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyReply -- ERROR: wrong nBlockHeight: requested=%d, received=%d, peer=%d\\n\",\n+                    mWeAskedForVerification[pnode->addr].nBlockHeight, mnv.nBlockHeight, pnode->id);\n+        Misbehaving(pnode->id, 20);\n+        return;\n+    }\n+\n+    uint256 blockHash;\n+    if(!GetBlockHash(blockHash, mnv.nBlockHeight)) {\n+        // this shouldn't happen...\n+        LogPrintf(\"MasternodeMan::ProcessVerifyReply -- can't get block hash for unknown block height %d, peer=%d\\n\", mnv.nBlockHeight, pnode->id);\n+        return;\n+    }\n+\n+    // we already verified this address, why node is spamming?\n+    if(netfulfilledman.HasFulfilledRequest(pnode->addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-done\")) {\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyReply -- ERROR: already verified %s recently\\n\", pnode->addr.ToString());\n+        Misbehaving(pnode->id, 20);\n+        return;\n+    }\n+\n+    {\n+        LOCK(cs);\n+\n+        CMasternode* prealMasternode = NULL;\n+        std::vector<CMasternode*> vpMasternodesToBan;\n+        std::vector<CMasternode>::iterator it = vMasternodes.begin();\n+        std::string strMessage1 = strprintf(\"%s%d%s\", pnode->addr.ToString(false), mnv.nonce, blockHash.ToString());\n+        while(it != vMasternodes.end()) {\n+            if((CAddress)it->addr == pnode->addr) {\n+                if(darkSendSigner.VerifyMessage(it->pubKeyMasternode, mnv.vchSig1, strMessage1, strError)) {\n+                    // found it!\n+                    prealMasternode = &(*it);\n+                    if(!it->IsPoSeVerified()) {\n+                            it->nPoSeBanScore--;\n+                    }\n+                    netfulfilledman.AddFulfilledRequest(pnode->addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-done\");\n+\n+                    // we can only broadcast it if we are an activated masternode\n+                    if(activeMasternode.vin == CTxIn()) continue;\n+                    // update ...\n+                    mnv.addr = it->addr;\n+                    mnv.vin1 = it->vin;\n+                    mnv.vin2 = activeMasternode.vin;\n+                    std::string strMessage2 = strprintf(\"%s%d%s%s%s\", mnv.addr.ToString(false), mnv.nonce, blockHash.ToString(),\n+                                            mnv.vin1.prevout.ToStringShort(), mnv.vin2.prevout.ToStringShort());\n+                    // ... and sign it\n+                    if(!darkSendSigner.SignMessage(strMessage2, mnv.vchSig2, activeMasternode.keyMasternode)) {\n+                        LogPrintf(\"MasternodeMan::ProcessVerifyReply -- SignMessage() failed\\n\");\n+                        return;\n+                    }\n+\n+                    std::string strError;\n+\n+                    if(!darkSendSigner.VerifyMessage(activeMasternode.pubKeyMasternode, mnv.vchSig2, strMessage2, strError)) {\n+                        LogPrintf(\"MasternodeMan::ProcessVerifyReply -- VerifyMessage() failed, error: %s\\n\", strError);\n+                        return;\n+                    }\n+\n+                    mWeAskedForVerification[pnode->addr] = mnv;\n+                    mnv.Relay();\n+\n+                } else {\n+                    vpMasternodesToBan.push_back(&(*it));\n+                }\n+            }\n+            ++it;\n+        }\n+        // no real masternode found?...\n+        if(!prealMasternode) {\n+            // this should never be the case normally,\n+            // only if someone is trying to game the system in some way or smth like that\n+            LogPrintf(\"CMasternodeMan::ProcessVerifyReply -- ERROR: no real masternode found for addr %s\\n\", pnode->addr.ToString());\n+            Misbehaving(pnode->id, 20);\n+            return;\n+        }\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyReply -- verified real masternode %s for addr %s\\n\",\n+                    prealMasternode->vin.prevout.ToStringShort(), pnode->addr.ToString());\n+        // increase ban score for everyone else\n+        BOOST_FOREACH(CMasternode* pmn, vpMasternodesToBan) {\n+            pmn->nPoSeBanScore++;\n+            LogPrint(\"masternode\", \"CMasternodeMan::ProcessVerifyBroadcast -- increased PoSe ban score for %s addr %s, new score %d\\n\",\n+                        prealMasternode->vin.prevout.ToStringShort(), pnode->addr.ToString(), pmn->nPoSeBanScore);\n+        }\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- PoSe score incresed for %d fake masternodes, addr %s\\n\",\n+                    (int)vpMasternodesToBan.size(), pnode->addr.ToString());\n+    }\n+}\n+\n+void CMasternodeMan::ProcessVerifyBroadcast(CNode* pnode, const CMasternodeVerification& mnv)\n+{\n+    std::string strError;\n+\n+    if(mapSeenMasternodeVerification.find(mnv.GetHash()) != mapSeenMasternodeVerification.end()) {\n+        // we already have one\n+        return;\n+    }\n+    mapSeenMasternodeVerification[mnv.GetHash()] = mnv;\n+\n+    // we don't care about history\n+    if(mnv.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS) {\n+        LogPrint(\"masternode\", \"MasternodeMan::ProcessVerifyBroadcast -- Outdated: current block %d, verification block %d, peer=%d\\n\",\n+                    pCurrentBlockIndex->nHeight, mnv.nBlockHeight, pnode->id);\n+        return;\n+    }\n+\n+    if(mnv.vin1.prevout == mnv.vin2.prevout) {\n+        LogPrint(\"masternode\", \"MasternodeMan::ProcessVerifyBroadcast -- ERROR: same vins %s, peer=%d\\n\",\n+                    mnv.vin1.prevout.ToStringShort(), pnode->id);\n+        // that was NOT a good idea to cheat and verify itself,\n+        // ban the node we received such message from\n+        Misbehaving(pnode->id, 100);\n+        return;\n+    }\n+\n+    uint256 blockHash;\n+    if(!GetBlockHash(blockHash, mnv.nBlockHeight)) {\n+        // this shouldn't happen...\n+        LogPrintf(\"MasternodeMan::ProcessVerifyBroadcast -- Can't get block hash for unknown block height %d, peer=%d\\n\", mnv.nBlockHeight, pnode->id);\n+        return;\n+    }\n+\n+    int nRank = GetMasternodeRank(mnv.vin2, mnv.nBlockHeight, MIN_POSE_PROTO_VERSION);\n+    if(nRank < MAX_POSE_RANK) {\n+        LogPrint(\"masternode\", \"MasternodeMan::ProcessVerifyBroadcast -- Mastrernode is not in top %d, current rank %d, peer=%d\\n\",\n+                    (int)MAX_POSE_RANK, nRank, pnode->id);\n+        return;\n+    }\n+\n+    {\n+        LOCK(cs);\n+\n+        std::string strMessage1 = strprintf(\"%s%d%s\", mnv.addr.ToString(false), mnv.nonce, blockHash.ToString());\n+        std::string strMessage2 = strprintf(\"%s%d%s%s%s\", mnv.addr.ToString(false), mnv.nonce, blockHash.ToString(),\n+                                mnv.vin1.prevout.ToStringShort(), mnv.vin2.prevout.ToStringShort());\n+\n+        CMasternode* pmn1 = Find(mnv.vin1);\n+        if(!pmn1) {\n+            LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- can't find masternode1 %s\\n\", mnv.vin1.prevout.ToStringShort());\n+            return;\n+        }\n+\n+        CMasternode* pmn2 = Find(mnv.vin2);\n+        if(!pmn2) {\n+            LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- can't find masternode2 %s\\n\", mnv.vin2.prevout.ToStringShort());\n+            return;\n+        }\n+\n+        if(pmn1->addr != mnv.addr) {\n+            LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- addr %s do not match %s\\n\", mnv.addr.ToString(), pnode->addr.ToString());\n+            return;\n+        }\n+\n+        if(darkSendSigner.VerifyMessage(pmn1->pubKeyMasternode, mnv.vchSig1, strMessage1, strError)) {\n+            LogPrintf(\"MasternodeMan::ProcessVerifyBroadcast -- VerifyMessage() for masternode1 failed, error: %s\\n\", strError);\n+            return;\n+        }\n+\n+        if(darkSendSigner.VerifyMessage(pmn2->pubKeyMasternode, mnv.vchSig2, strMessage2, strError)) {\n+            LogPrintf(\"MasternodeMan::ProcessVerifyBroadcast -- VerifyMessage() for masternode2 failed, error: %s\\n\", strError);\n+            return;\n+        }\n+\n+        if(!pmn1->IsPoSeVerified()) {\n+            pmn1->nPoSeBanScore--;\n+        }\n+        mnv.Relay();\n+\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- verified masternode %s for addr %s\\n\",\n+                    pmn1->vin.prevout.ToStringShort(), pnode->addr.ToString());\n+\n+        // increase ban score for everyone else with the same addr\n+        int nCount = 0;\n+        BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n+            if(mn.addr != mnv.addr || mn.vin.prevout == mnv.vin1.prevout) continue;\n+            mn.nPoSeBanScore++;\n+            nCount++;\n+            LogPrint(\"masternode\", \"CMasternodeMan::ProcessVerifyBroadcast -- increased PoSe ban score for %s addr %s, new score %d\\n\",\n+                        mn.vin.prevout.ToStringShort(), mn.addr.ToString(), mn.nPoSeBanScore);\n+        }\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- PoSe score incresed for %d fake masternodes, addr %s\\n\",\n+                    nCount, pnode->addr.ToString());\n     }\n }\n \n@@ -778,49 +1216,71 @@ void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb) {\n     }\n }\n \n-bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos) {\n+bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos)\n+{\n     LOCK(cs);\n+\n     nDos = 0;\n-    LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList - Masternode broadcast, vin: %s\\n\", mnb.vin.ToString());\n+    LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n \n     if(mapSeenMasternodeBroadcast.count(mnb.GetHash())) { //seen\n         return true;\n     }\n-    mapSeenMasternodeBroadcast.insert(make_pair(mnb.GetHash(), mnb));\n+    mapSeenMasternodeBroadcast.insert(std::make_pair(mnb.GetHash(), mnb));\n \n-    LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList - Masternode broadcast, vin: %s new\\n\", mnb.vin.ToString());\n-    // We check addr before both initial mnb and update\n-    if(!mnb.IsValidNetAddr()) {\n-        LogPrintf(\"CMasternodeBroadcast::CheckMnbAndUpdateMasternodeList -- Invalid addr, rejected: masternode=%s  sigTime=%lld  addr=%s\\n\",\n-                    mnb.vin.prevout.ToStringShort(), mnb.sigTime, mnb.addr.ToString());\n-        return false;\n-    }\n+    LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s new\\n\", mnb.vin.prevout.ToStringShort());\n \n-    if(!mnb.CheckAndUpdate(nDos)){\n-        LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList - Masternode broadcast, vin: %s CheckAndUpdate failed\\n\", mnb.vin.ToString());\n+    if(!mnb.SimpleCheck(nDos)) {\n+        LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- SimpleCheck() failed, masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n         return false;\n     }\n \n-    // make sure it's still unspent\n-    //  - this is checked later by .check() in many places and by ThreadCheckDarkSendPool()\n-    if(mnb.CheckInputsAndAdd(nDos)) {\n-        masternodeSync.AddedMasternodeList();\n+    // search Masternode list\n+    CMasternode* pmn = Find(mnb.vin);\n+    if(pmn) {\n+        if(!mnb.Update(pmn, nDos)) {\n+            LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- Update() failed, masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n+            return false;\n+        }\n     } else {\n-        LogPrintf(\"CMasternodeMan::CheckMnbAndUpdateMasternodeList - Rejected Masternode entry %s\\n\", mnb.addr.ToString());\n-        return false;\n+        if(mnb.CheckOutpoint(nDos)) {\n+            Add(mnb);\n+            masternodeSync.AddedMasternodeList();\n+            // if it matches our Masternode privkey...\n+            if(fMasterNode && mnb.pubKeyMasternode == activeMasternode.pubKeyMasternode) {\n+                mnb.nPoSeBanScore = -MASTERNODE_POSE_BAN_MAX_SCORE;\n+                if(mnb.nProtocolVersion == PROTOCOL_VERSION) {\n+                    // ... and PROTOCOL_VERSION, then we've been remotely activated ...\n+                    LogPrintf(\"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- Got NEW Masternode entry: masternode=%s  sigTime=%lld  addr=%s\\n\",\n+                                mnb.vin.prevout.ToStringShort(), mnb.sigTime, mnb.addr.ToString());\n+                    activeMasternode.ManageState();\n+                } else {\n+                    // ... otherwise we need to reactivate our node, do not add it to the list and do not relay\n+                    // but also do not ban the node we get this message from\n+                    LogPrintf(\"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- wrong PROTOCOL_VERSION, re-activate your MN: message nProtocolVersion=%d  PROTOCOL_VERSION=%d\\n\", mnb.nProtocolVersion, PROTOCOL_VERSION);\n+                    return false;\n+                }\n+            }\n+            mnb.Relay();\n+        } else {\n+            LogPrintf(\"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- Rejected Masternode entry: %s  addr=%s\\n\", mnb.vin.prevout.ToStringShort(), mnb.addr.ToString());\n+            return false;\n+        }\n     }\n \n     return true;\n }\n \n-void CMasternodeMan::UpdateLastPaid(const CBlockIndex *pindex) {\n+void CMasternodeMan::UpdateLastPaid(const CBlockIndex *pindex)\n+{\n     LOCK(cs);\n+\n     if(fLiteMode) return;\n \n     static bool IsFirstRun = true;\n     // Do full scan on first run or if we are not a masternode\n     // (MNs should update this info on every block, so limited scan should be enough for them)\n-    int nMaxBlocksToScanBack = (IsFirstRun || !fMasterNode) ? mnpayments.GetStorageLimit() : MASTERNODES_LAST_PAID_SCAN_BLOCKS;\n+    int nMaxBlocksToScanBack = (IsFirstRun || !fMasterNode) ? mnpayments.GetStorageLimit() : LAST_PAID_SCAN_BLOCKS;\n \n     // LogPrint(\"mnpayments\", \"CMasternodeMan::UpdateLastPaid -- nHeight=%d, nMaxBlocksToScanBack=%d, IsFirstRun=%s\\n\",\n     //                         pindex->nHeight, nMaxBlocksToScanBack, IsFirstRun ? \"true\" : \"false\");\n@@ -935,3 +1395,17 @@ void CMasternodeMan::SetMasternodeLastPing(const CTxIn& vin, const CMasternodePi\n         mapSeenMasternodeBroadcast[hash].lastPing = mnp;\n     }\n }\n+\n+void CMasternodeMan::UpdatedBlockTip(const CBlockIndex *pindex)\n+{\n+    pCurrentBlockIndex = pindex;\n+    LogPrint(\"masternode\", \"CMasternodeMan::UpdatedBlockTip -- pCurrentBlockIndex->nHeight=%d\\n\", pCurrentBlockIndex->nHeight);\n+\n+    CheckSameAddr();\n+\n+    if(fMasterNode) {\n+        DoFullVerificationStep();\n+        // normal wallet does not need to update this every block, doing update on rpc call should be enough\n+        UpdateLastPaid(pindex);\n+    }\n+}"
      },
      {
        "sha": "b3cac697e6d5b5419abbe294aafc046e37897999",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 29,
        "deletions": 25,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -5,34 +5,34 @@\n #ifndef MASTERNODEMAN_H\n #define MASTERNODEMAN_H\n \n-#include \"sync.h\"\n-#include \"net.h\"\n-#include \"key.h\"\n-#include \"util.h\"\n-#include \"base58.h\"\n-#include \"main.h\"\n #include \"masternode.h\"\n-\n-#define MASTERNODES_DUMP_SECONDS               (15*60)\n-#define MASTERNODES_DSEG_SECONDS               (3*60*60)\n+#include \"sync.h\"\n \n using namespace std;\n \n class CMasternodeMan;\n+\n extern CMasternodeMan mnodeman;\n \n class CMasternodeMan\n {\n private:\n     static const std::string SERIALIZATION_VERSION_STRING;\n \n-    static const int MASTERNODES_LAST_PAID_SCAN_BLOCKS  = 100;\n+    static const int DSEG_UPDATE_SECONDS        = 3 * 60 * 60;\n+\n+    static const int LAST_PAID_SCAN_BLOCKS      = 100;\n+\n+    static const int MIN_POSE_PROTO_VERSION     = 70203;\n+    static const int MAX_POSE_RANK              = 10;\n+    static const int MAX_POSE_BLOCKS            = 10;\n+\n \n     // critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n \n-    // critical section to protect the inner data structures specifically on messaging\n-    mutable CCriticalSection cs_process_message;\n+    // Keep track of current block index\n+    const CBlockIndex *pCurrentBlockIndex;\n \n     // map to hold all MNs\n     std::vector<CMasternode> vMasternodes;\n@@ -42,23 +42,28 @@ class CMasternodeMan\n     std::map<CNetAddr, int64_t> mWeAskedForMasternodeList;\n     // which Masternodes we've asked for\n     std::map<COutPoint, int64_t> mWeAskedForMasternodeListEntry;\n+    // who we asked for the masternode verification\n+    std::map<CNetAddr, CMasternodeVerification> mWeAskedForVerification;\n \n     std::vector<uint256> vecDirtyGovernanceObjectHashes;\n \n     int64_t nLastWatchdogVoteTime;\n \n public:\n     // Keep track of all broadcasts I've seen\n-    map<uint256, CMasternodeBroadcast> mapSeenMasternodeBroadcast;\n+    std::map<uint256, CMasternodeBroadcast> mapSeenMasternodeBroadcast;\n     // Keep track of all pings I've seen\n-    map<uint256, CMasternodePing> mapSeenMasternodePing;\n-\n+    std::map<uint256, CMasternodePing> mapSeenMasternodePing;\n+    // Keep track of all verifications I've seen\n+    std::map<uint256, CMasternodeVerification> mapSeenMasternodeVerification;\n     // keep track of dsq count to prevent masternodes from gaming darksend queue\n     int64_t nDsqCount;\n \n     // dummy script pubkey to test masternodes' vins against mempool\n     CScript dummyScriptPubkey;\n \n+    CMasternodeMan() : nLastWatchdogVoteTime(0), nDsqCount(0) {}\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n@@ -83,14 +88,10 @@ class CMasternodeMan\n         READWRITE(mapSeenMasternodeBroadcast);\n         READWRITE(mapSeenMasternodePing);\n         if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n-            LogPrintf(\"CMasternodeMan::SerializationOp - Incompatible format detected, resetting data\\n\");\n             Clear();\n         }\n     }\n \n-    CMasternodeMan();\n-    CMasternodeMan(CMasternodeMan& other);\n-\n     /// Add an entry\n     bool Add(CMasternode &mn);\n \n@@ -148,6 +149,13 @@ class CMasternodeMan\n \n     void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n \n+    void DoFullVerificationStep();\n+    void CheckSameAddr();\n+    bool SendVerifyRequest(const CAddress& addr, const std::vector<CMasternode*>& vSortedByAddr);\n+    void SendVerifyReply(CNode* pnode, CMasternodeVerification& mnv);\n+    void ProcessVerifyReply(CNode* pnode, CMasternodeVerification& mnv);\n+    void ProcessVerifyBroadcast(CNode* pnode, const CMasternodeVerification& mnv);\n+\n     /// Return the number of (unique) Masternodes\n     int size() { return vMasternodes.size(); }\n \n@@ -179,24 +187,20 @@ class CMasternodeMan\n     }\n \n     bool IsWatchdogActive();\n-\n     void UpdateWatchdogVoteTime(const CTxIn& vin);\n-\n     void AddGovernanceVote(const CTxIn& vin, uint256 nGovernanceObjectHash);\n-\n     void RemoveGovernanceObject(uint256 nGovernanceObjectHash);\n \n     void CheckMasternode(const CTxIn& vin, bool fForce = false);\n-\n     void CheckMasternode(const CPubKey& pubKeyMasternode, bool fForce = false);\n \n     int GetMasternodeState(const CTxIn& vin);\n-\n     int GetMasternodeState(const CPubKey& pubKeyMasternode);\n \n     bool IsMasternodePingedWithin(const CTxIn& vin, int nSeconds, int64_t nTimeToCheckAt = -1);\n-\n     void SetMasternodeLastPing(const CTxIn& vin, const CMasternodePing& mnp);\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindex);\n };\n \n #endif"
      },
      {
        "sha": "34d7a3bb6e841e9d792d0f6ebd688582c076a803",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -65,6 +65,7 @@ const char *SYNCSTATUSCOUNT=\"ssc\";\n const char *MNGOVERNANCESYNC=\"govsync\";\n const char *MNGOVERNANCEOBJECT=\"govobj\";\n const char *MNGOVERNANCEOBJECTVOTE=\"govobjvote\";\n+const char *MNVERIFY=\"mnv\";\n };\n \n static const char* ppszTypeName[] =\n@@ -89,7 +90,8 @@ static const char* ppszTypeName[] =\n     NetMsgType::MNPING,\n     NetMsgType::DSTX,\n     NetMsgType::MNGOVERNANCEOBJECT,\n-    NetMsgType::MNGOVERNANCEOBJECTVOTE\n+    NetMsgType::MNGOVERNANCEOBJECTVOTE,\n+    NetMsgType::MNVERIFY,\n };\n \n /** All known message types. Keep this in the same order as the list of\n@@ -141,7 +143,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::SYNCSTATUSCOUNT,\n     NetMsgType::MNGOVERNANCESYNC,\n     NetMsgType::MNGOVERNANCEOBJECT,\n-    NetMsgType::MNGOVERNANCEOBJECTVOTE\n+    NetMsgType::MNGOVERNANCEOBJECTVOTE,\n+    NetMsgType::MNVERIFY,\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n "
      },
      {
        "sha": "04b2931ef85fcb8a3903dfbe1588dae0623a0a9f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "patch": "@@ -243,6 +243,7 @@ extern const char *SYNCSTATUSCOUNT;\n extern const char *MNGOVERNANCESYNC;\n extern const char *MNGOVERNANCEOBJECT;\n extern const char *MNGOVERNANCEOBJECTVOTE;\n+extern const char *MNVERIFY;\n };\n \n /* Get a vector of all valid message types (see above) */\n@@ -356,7 +357,8 @@ enum {\n     MSG_MASTERNODE_PING,\n     MSG_DSTX,\n     MSG_GOVERNANCE_OBJECT,\n-    MSG_GOVERNANCE_OBJECT_VOTE\n+    MSG_GOVERNANCE_OBJECT_VOTE,\n+    MSG_MASTERNODE_VERIFY,\n };\n \n #endif // BITCOIN_PROTOCOL_H"
      }
    ]
  },
  {
    "sha": "609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDlhYTdkZTJhMmEzYWM3OGJhZDM4NzlkZWNlM2FmZDhiYjljZTk4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-20T21:11:57Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-20T21:11:57Z"
      },
      "message": "Fix and refactor PS (#1084)",
      "tree": {
        "sha": "c5132271b59e4174c7245a8b7c8135c9b9a4986c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5132271b59e4174c7245a8b7c8135c9b9a4986c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/342bda5fdcd6ace0e33b5979ef1116fbedf8bb56"
      }
    ],
    "stats": {
      "total": 377,
      "additions": 207,
      "deletions": 170
    },
    "files": [
      {
        "sha": "da6a39ef9d49b9af827f170d7e75e38f34043087",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 170,
        "deletions": 137,
        "changes": 307,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
        "patch": "@@ -36,19 +36,19 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n     if(strCommand == NetMsgType::DSACCEPT) {\n \n-        int nErrorID;\n+        PoolMessage nMessageID = MSG_NOERR;\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            nErrorID = ERR_VERSION;\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSACCEPT -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            nMessageID = ERR_VERSION;\n+            LogPrintf(\"DSACCEPT -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n         if(!fMasterNode) {\n-            nErrorID = ERR_NOT_A_MN;\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSACCEPT -- not a Masternode!\\n\");\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            nMessageID = ERR_NOT_A_MN;\n+            LogPrintf(\"DSACCEPT -- not a Masternode!\\n\");\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n@@ -58,27 +58,27 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n         CMasternode* pmn = mnodeman.Find(activeMasternode.vin);\n         if(pmn == NULL) {\n-            nErrorID = ERR_MN_LIST;\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            nMessageID = ERR_MN_LIST;\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n         if(nSessionUsers == 0 && pmn->nLastDsq != 0 &&\n             pmn->nLastDsq + mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5 > mnodeman.nDsqCount)\n         {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSACCEPT -- last dsq too recent, must wait: addr=%s\\n\", pfrom->addr.ToString());\n-            nErrorID = ERR_RECENT;\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            LogPrintf(\"DSACCEPT -- last dsq too recent, must wait: addr=%s\\n\", pfrom->addr.ToString());\n+            nMessageID = ERR_RECENT;\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n-        if(IsDenomCompatibleWithSession(nDenom, txCollateral, nErrorID)) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSACCEPT -- is compatible, please submit!\\n\");\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_ACCEPTED, nErrorID);\n+        if(IsDenomCompatibleWithSession(nDenom, txCollateral, nMessageID)) {\n+            LogPrintf(\"DSACCEPT -- is compatible, please submit!\\n\");\n+            PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n             return;\n         } else {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSACCEPT -- not compatible with existing transactions!\\n\");\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            LogPrintf(\"DSACCEPT -- not compatible with existing transactions!\\n\");\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n@@ -87,7 +87,7 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         if(!lockRecv) return;\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSQUEUE -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n+            LogPrint(\"privatesend\", \"DSQUEUE -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n             return;\n         }\n \n@@ -104,49 +104,49 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         if(dsq.fReady) {\n             if(!pSubmittedToMasternode) return;\n             if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)addr) {\n-                LogPrintf(\"CDarksendPool::ProcessMessage -- DSQUEUE -- message doesn't match current Masternode: pSubmittedToMasternode=%s, addr=%s\\n\", pSubmittedToMasternode->addr.ToString(), addr.ToString());\n+                LogPrintf(\"DSQUEUE -- message doesn't match current Masternode: pSubmittedToMasternode=%s, addr=%s\\n\", pSubmittedToMasternode->addr.ToString(), addr.ToString());\n                 return;\n             }\n \n             if(nState == POOL_STATE_QUEUE) {\n-                LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSQUEUE -- PrivateSend queue (%s) is ready on masternode %s\\n\", dsq.ToString(), addr.ToString());\n+                LogPrint(\"privatesend\", \"DSQUEUE -- PrivateSend queue (%s) is ready on masternode %s\\n\", dsq.ToString(), addr.ToString());\n                 SubmitDenominate();\n             }\n         } else {\n             BOOST_FOREACH(CDarksendQueue q, vecDarksendQueue)\n                 if(q.vin == dsq.vin) return;\n \n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSQUEUE -- nLastDsq: %d  threshold: %d  nDsqCount: %d\\n\", pmn->nLastDsq, pmn->nLastDsq + mnodeman.size()/5, mnodeman.nDsqCount);\n+            LogPrint(\"privatesend\", \"DSQUEUE -- nLastDsq: %d  threshold: %d  nDsqCount: %d\\n\", pmn->nLastDsq, pmn->nLastDsq + mnodeman.size()/5, mnodeman.nDsqCount);\n             //don't allow a few nodes to dominate the queuing process\n             if(pmn->nLastDsq != 0 &&\n                 pmn->nLastDsq + mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5 > mnodeman.nDsqCount) {\n-                LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSQUEUE -- Masternode %s is sending too many dsq messages\\n\", pmn->addr.ToString());\n+                LogPrint(\"privatesend\", \"DSQUEUE -- Masternode %s is sending too many dsq messages\\n\", pmn->addr.ToString());\n                 return;\n             }\n             mnodeman.nDsqCount++;\n             pmn->nLastDsq = mnodeman.nDsqCount;\n             pmn->fAllowMixingTx = true;\n \n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSQUEUE -- new PrivateSend queue (%s) from masternode %s\\n\", dsq.ToString(), addr.ToString());\n+            LogPrint(\"privatesend\", \"DSQUEUE -- new PrivateSend queue (%s) from masternode %s\\n\", dsq.ToString(), addr.ToString());\n             vecDarksendQueue.push_back(dsq);\n             dsq.Relay();\n             dsq.nTime = GetTime();\n         }\n \n     } else if(strCommand == NetMsgType::DSVIN) {\n-        int nErrorID;\n+        PoolMessage nMessageID = MSG_NOERR;\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n-            nErrorID = ERR_VERSION;\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            LogPrintf(\"DSVIN -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n+            nMessageID = ERR_VERSION;\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n         if(!fMasterNode) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- not a Masternode!\\n\");\n-            nErrorID = ERR_NOT_A_MN;\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            LogPrintf(\"DSVIN -- not a Masternode!\\n\");\n+            nMessageID = ERR_NOT_A_MN;\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n@@ -155,17 +155,17 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n         //do we have enough users in the current session?\n         if(nSessionUsers < GetMaxPoolTransactions()) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- session not complete!\\n\");\n-            nErrorID = ERR_SESSION;\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            LogPrintf(\"DSVIN -- session not complete!\\n\");\n+            nMessageID = ERR_SESSION;\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n         //do we have the same denominations as the current session?\n         if(!IsOutputsCompatibleWithSessionDenom(entry.vecTxDSOut)) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- not compatible with existing transactions!\\n\");\n-            nErrorID = ERR_EXISTING_TX;\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            LogPrintf(\"DSVIN -- not compatible with existing transactions!\\n\");\n+            nMessageID = ERR_EXISTING_TX;\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n             return;\n         }\n \n@@ -182,23 +182,23 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n                 tx.vout.push_back(txout);\n \n                 if(txout.scriptPubKey.size() != 25) {\n-                    LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- non-standard pubkey detected! scriptPubKey=%s\\n\", ScriptToAsmStr(txout.scriptPubKey));\n-                    nErrorID = ERR_NON_STANDARD_PUBKEY;\n-                    pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+                    LogPrintf(\"DSVIN -- non-standard pubkey detected! scriptPubKey=%s\\n\", ScriptToAsmStr(txout.scriptPubKey));\n+                    nMessageID = ERR_NON_STANDARD_PUBKEY;\n+                    PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n                     return;\n                 }\n                 if(!txout.scriptPubKey.IsNormalPaymentScript()) {\n-                    LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- invalid script! scriptPubKey=%s\\n\", ScriptToAsmStr(txout.scriptPubKey));\n-                    nErrorID = ERR_INVALID_SCRIPT;\n-                    pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+                    LogPrintf(\"DSVIN -- invalid script! scriptPubKey=%s\\n\", ScriptToAsmStr(txout.scriptPubKey));\n+                    nMessageID = ERR_INVALID_SCRIPT;\n+                    PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n                     return;\n                 }\n             }\n \n             BOOST_FOREACH(const CTxIn txin, entry.vecTxDSIn) {\n                 tx.vin.push_back(txin);\n \n-                LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSVIN -- txin=%s\\n\", txin.ToString());\n+                LogPrint(\"privatesend\", \"DSVIN -- txin=%s\\n\", txin.ToString());\n \n                 CTransaction txPrev;\n                 uint256 hash;\n@@ -211,25 +211,25 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             }\n \n             if(nValueIn > PRIVATESEND_POOL_MAX) {\n-                LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- more than PrivateSend pool max! nValueIn: %lld, tx=%s\", nValueIn, tx.ToString());\n-                nErrorID = ERR_MAXIMUM;\n-                pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+                LogPrintf(\"DSVIN -- more than PrivateSend pool max! nValueIn: %lld, tx=%s\", nValueIn, tx.ToString());\n+                nMessageID = ERR_MAXIMUM;\n+                PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n                 return;\n             }\n \n             if(fMissingTx) {\n-                LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- missing input! tx=%s\", tx.ToString());\n-                nErrorID = ERR_MISSING_TX;\n-                pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+                LogPrintf(\"DSVIN -- missing input! tx=%s\", tx.ToString());\n+                nMessageID = ERR_MISSING_TX;\n+                PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n                 return;\n             }\n \n             // Allow lowest denom (at max) as a a fee. Normally shouldn't happen though.\n             // TODO: Or do not allow fees at all?\n             if(nValueIn - nValueOut > vecPrivateSendDenominations.back()) {\n-                LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- fees are too high! fees: %lld, tx=%s\", nValueIn - nValueOut, tx.ToString());\n-                nErrorID = ERR_FEES;\n-                pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+                LogPrintf(\"DSVIN -- fees are too high! fees: %lld, tx=%s\", nValueIn - nValueOut, tx.ToString());\n+                nMessageID = ERR_FEES;\n+                PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n                 return;\n             }\n \n@@ -238,89 +238,103 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n                 CValidationState validationState;\n                 mempool.PrioritiseTransaction(tx.GetHash(), tx.GetHash().ToString(), 1000, 0.1*COIN);\n                 if(!AcceptToMemoryPool(mempool, validationState, CTransaction(tx), false, NULL, false, true, true)) {\n-                    LogPrintf(\"CDarksendPool::ProcessMessage -- DSVIN -- transaction not valid! tx=%s\", tx.ToString());\n-                    nErrorID = ERR_INVALID_TX;\n-                    pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+                    LogPrintf(\"DSVIN -- transaction not valid! tx=%s\", tx.ToString());\n+                    nMessageID = ERR_INVALID_TX;\n+                    PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n                     return;\n                 }\n             }\n         }\n \n-        if(AddEntry(entry, nErrorID)) {\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_ACCEPTED, nErrorID);\n+        if(AddEntry(entry, nMessageID)) {\n+            PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n             CheckPool();\n-\n-            RelayStatus(MASTERNODE_RESET);\n+            RelayStatus(STATUS_SET_STATE);\n         } else {\n-            pfrom->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, GetState(), GetEntriesCount(), MASTERNODE_REJECTED, nErrorID);\n+            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n         }\n \n     } else if(strCommand == NetMsgType::DSSTATUSUPDATE) {\n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSSTATUSUPDATE -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n+            LogPrintf(\"DSSTATUSUPDATE -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n             return;\n         }\n \n         if(!pSubmittedToMasternode) return;\n         if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)pfrom->addr) {\n-            //LogPrintf(\"CDarksendPool::ProcessMessage -- DSSTATUSUPDATE -- message doesn't match current Masternode: pSubmittedToMasternode %s addr %s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n+            //LogPrintf(\"DSSTATUSUPDATE -- message doesn't match current Masternode: pSubmittedToMasternode %s addr %s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n             return;\n         }\n \n         int nMsgSessionID;\n         int nMsgState;\n         int nMsgEntriesCount;\n-        int nMsgAccepted;\n-        int nMsgErrorID;\n-        vRecv >> nMsgSessionID >> nMsgState >> nMsgEntriesCount >> nMsgAccepted >> nMsgErrorID;\n+        int nMsgStatusUpdate;\n+        int nMsgMessageID;\n+        vRecv >> nMsgSessionID >> nMsgState >> nMsgEntriesCount >> nMsgStatusUpdate >> nMsgMessageID;\n \n-        LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSSTATUSUPDATE -- nMsgState: %d  nEntriesCount: %d  nMsgAccepted: %d  error: %s\\n\", nMsgState, nEntriesCount, nMsgAccepted, GetMessageByID(nMsgErrorID));\n+        LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgSessionID %d  nMsgState: %d  nEntriesCount: %d  nMsgStatusUpdate: %d  nMsgMessageID %d\\n\",\n+                nMsgSessionID, nMsgState, nEntriesCount, nMsgStatusUpdate, nMsgMessageID);\n \n-        if((nMsgAccepted != 1 && nMsgAccepted != 0) && nSessionID != nMsgSessionID) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSSTATUSUPDATE -- message doesn't match current PrivateSend session: nSessionID: %d nMsgSessionID: %d\\n\", nSessionID, nMsgSessionID);\n+        if(nMsgState < POOL_STATE_MIN || nMsgState > POOL_STATE_MAX) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgState is out of bounds: %d\\n\", nMsgState);\n             return;\n         }\n \n-        UpdatePoolStateOnClient(nMsgState, nMsgEntriesCount, nMsgAccepted, nMsgErrorID, nMsgSessionID);\n+        if(nMsgStatusUpdate < STATUS_SET_STATE || nMsgStatusUpdate > STATUS_ACCEPTED) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgStatusUpdate is out of bounds: %d\\n\", nMsgStatusUpdate);\n+            return;\n+        }\n+\n+        if(nMsgMessageID < MSG_POOL_MIN || nMsgMessageID > MSG_POOL_MAX) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgMessageID is out of bounds: %d\\n\", nMsgMessageID);\n+            return;\n+        }\n+\n+        LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- GetMessageByID: %s\\n\", GetMessageByID(PoolMessage(nMsgMessageID)));\n+\n+        if(nMsgStatusUpdate == STATUS_SET_STATE && nSessionID != nMsgSessionID) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- message doesn't match current PrivateSend session: nSessionID: %d nMsgSessionID: %d\\n\", nSessionID, nMsgSessionID);\n+            return;\n+        }\n+\n+        UpdatePoolStateOnClient(PoolState(nMsgState), nMsgEntriesCount, PoolStatusUpdate(nMsgStatusUpdate), PoolMessage(nMsgMessageID), nMsgSessionID);\n \n     } else if(strCommand == NetMsgType::DSSIGNFINALTX) {\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSSIGNFINALTX -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n+            LogPrintf(\"DSSIGNFINALTX -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n             return;\n         }\n \n         std::vector<CTxIn> vecTxIn;\n         vRecv >> vecTxIn;\n \n-        bool fSuccess = true;\n         int nTxInIndex = 0;\n         int nTxInsCount = (int)vecTxIn.size();\n \n         BOOST_FOREACH(const CTxIn txin, vecTxIn) {\n             nTxInIndex++;\n             if(!AddScriptSig(txin)) {\n-                fSuccess = false;\n-                break;\n+                LogPrint(\"privatesend\", \"DSSIGNFINALTX -- AddScriptSig() failed at %d/%d, session: %d\\n\", nTxInIndex, nTxInsCount, nSessionID);\n+                return;\n             }\n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSSIGNFINALTX -- AddScriptSig() %d/%d success\\n\", nTxInIndex, nTxInsCount);\n+            LogPrint(\"privatesend\", \"DSSIGNFINALTX -- AddScriptSig() %d/%d success\\n\", nTxInIndex, nTxInsCount);\n         }\n+        // all is good\n+        CheckPool();\n+        RelayStatus(STATUS_SET_STATE);\n \n-        if(fSuccess) {\n-            CheckPool();\n-            RelayStatus(MASTERNODE_RESET);\n-        } else {\n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSSIGNFINALTX -- AddScriptSig() failed at %d/%d, session: %d\\n\", nTxInIndex, nTxInsCount, nSessionID);\n-        }\n     } else if(strCommand == NetMsgType::DSFINALTX) {\n+\n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSFINALTX -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n+            LogPrintf(\"DSFINALTX -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n             return;\n         }\n \n         if(!pSubmittedToMasternode) return;\n         if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)pfrom->addr) {\n-            //LogPrintf(\"CDarksendPool::ProcessMessage -- DSFINALTX -- message doesn't match current Masternode: pSubmittedToMasternode %s addr %s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n+            //LogPrintf(\"DSFINALTX -- message doesn't match current Masternode: pSubmittedToMasternode %s addr %s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n             return;\n         }\n \n@@ -329,7 +343,7 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         vRecv >> nMsgSessionID >> txNew;\n \n         if(nSessionID != nMsgSessionID) {\n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSFINALTX -- message doesn't match current PrivateSend session: nSessionID: %d  nMsgSessionID: %d\\n\", nSessionID, nMsgSessionID);\n+            LogPrint(\"privatesend\", \"DSFINALTX -- message doesn't match current PrivateSend session: nSessionID: %d  nMsgSessionID: %d\\n\", nSessionID, nMsgSessionID);\n             return;\n         }\n \n@@ -339,27 +353,32 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n     } else if(strCommand == NetMsgType::DSCOMPLETE) {\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            LogPrintf(\"CDarksendPool::ProcessMessage -- DSCOMPLETE -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n+            LogPrintf(\"DSCOMPLETE -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n             return;\n         }\n \n         if(!pSubmittedToMasternode) return;\n         if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)pfrom->addr) {\n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSCOMPLETE -- message doesn't match current Masternode: pSubmittedToMasternode=%s  addr=%s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n+            LogPrint(\"privatesend\", \"DSCOMPLETE -- message doesn't match current Masternode: pSubmittedToMasternode=%s  addr=%s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n             return;\n         }\n \n         int  nMsgSessionID;\n         bool fMsgError;\n-        int  nMsgErrorID;\n-        vRecv >> nMsgSessionID >> fMsgError >> nMsgErrorID;\n+        int  nMsgMessageID;\n+        vRecv >> nMsgSessionID >> fMsgError >> nMsgMessageID;\n+\n+        if(nMsgMessageID < MSG_POOL_MIN || nMsgMessageID > MSG_POOL_MAX) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgMessageID is out of bounds: %d\\n\", nMsgMessageID);\n+            return;\n+        }\n \n         if(nSessionID != nMsgSessionID) {\n-            LogPrint(\"privatesend\", \"CDarksendPool::ProcessMessage -- DSCOMPLETE -- message doesn't match current PrivateSend session: nSessionID: %d  nMsgSessionID: %d\\n\", darkSendPool.nSessionID, nMsgSessionID);\n+            LogPrint(\"privatesend\", \"DSCOMPLETE -- message doesn't match current PrivateSend session: nSessionID: %d  nMsgSessionID: %d\\n\", darkSendPool.nSessionID, nMsgSessionID);\n             return;\n         }\n \n-        CompletedTransaction(fMsgError, nMsgErrorID);\n+        CompletedTransaction(fMsgError, PoolMessage(nMsgMessageID));\n     }\n }\n \n@@ -403,7 +422,6 @@ void CDarksendPool::SetNull()\n     // Client side\n     nEntriesCount = 0;\n     fLastEntryAccepted = false;\n-    nAcceptedEntriesCount = 0;\n     fSessionFoundMasternode = false;\n \n     // Both sides\n@@ -541,7 +559,9 @@ void CDarksendPool::CheckPool()\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- timeout, RESETTING\\n\");\n         UnlockCoins();\n         SetNull();\n-        if(fMasterNode) RelayStatus(MASTERNODE_RESET);\n+        if(fMasterNode) {\n+            RelayStatus(STATUS_SET_STATE);\n+        }\n     }\n }\n \n@@ -593,7 +613,7 @@ void CDarksendPool::CheckFinalTransaction()\n     // Reset\n     LogPrint(\"privatesend\", \"CDarksendPool::CheckFinalTransaction -- COMPLETED -- RESETTING\\n\");\n     SetNull();\n-    RelayStatus(MASTERNODE_RESET);\n+    RelayStatus(STATUS_SET_STATE);\n }\n \n //\n@@ -771,6 +791,8 @@ void CDarksendPool::CheckTimeout()\n                 LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Pool success -- Running CheckPool\\n\");\n                 CheckPool();\n                 break;\n+            default:\n+                break;\n         }\n     }\n \n@@ -790,8 +812,9 @@ void CDarksendPool::CheckTimeout()\n                     UnlockCoins();\n                     SetNull();\n                 }\n-                if(fMasterNode)\n-                    RelayStatus(MASTERNODE_RESET);\n+                if(fMasterNode) {\n+                    RelayStatus(STATUS_SET_STATE);\n+                }\n             } else ++it2;\n             c++;\n         }\n@@ -941,29 +964,29 @@ bool CDarksendPool::IsCollateralValid(const CTransaction& txCollateral)\n //\n // Add a clients transaction to the pool\n //\n-bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, int& nErrorIDRet)\n+bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessageIDRet)\n {\n     if(!fMasterNode) return false;\n \n     BOOST_FOREACH(CTxIn txin, entryNew.vecTxDSIn) {\n         if(txin.prevout.IsNull()) {\n             LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- input not valid!\\n\");\n-            nErrorIDRet = ERR_INVALID_INPUT;\n+            nMessageIDRet = ERR_INVALID_INPUT;\n             nSessionUsers--;\n             return false;\n         }\n     }\n \n     if(!IsCollateralValid(entryNew.txCollateral)) {\n         LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- collateral not valid!\\n\");\n-        nErrorIDRet = ERR_INVALID_COLLATERAL;\n+        nMessageIDRet = ERR_INVALID_COLLATERAL;\n         nSessionUsers--;\n         return false;\n     }\n \n     if(GetEntriesCount() >= GetMaxPoolTransactions()) {\n         LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- entries is full!\\n\");\n-        nErrorIDRet = ERR_ENTRIES_FULL;\n+        nMessageIDRet = ERR_ENTRIES_FULL;\n         nSessionUsers--;\n         return false;\n     }\n@@ -974,7 +997,7 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, int& nErrorIDRet)\n             BOOST_FOREACH(const CTxDSIn& txdsin, entry.vecTxDSIn) {\n                 if((CTxIn)txdsin == txin) {\n                     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- found in txin\\n\");\n-                    nErrorIDRet = ERR_ALREADY_HAVE;\n+                    nMessageIDRet = ERR_ALREADY_HAVE;\n                     nSessionUsers--;\n                     return false;\n                 }\n@@ -985,7 +1008,7 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, int& nErrorIDRet)\n     vecEntries.push_back(entryNew);\n \n     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- adding entry\\n\");\n-    nErrorIDRet = MSG_ENTRIES_ADDED;\n+    nMessageIDRet = MSG_ENTRIES_ADDED;\n \n     return true;\n }\n@@ -1124,42 +1147,37 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n }\n \n // Incoming message from Masternode updating the progress of mixing\n-//    nAcceptedEntriesCountNew:\n-//        -1 mean's it'n not a \"transaction accepted/not accepted\" message, just a standard update\n-//         0 means transaction was not accepted\n-//         1 means transaction was accepted\n-bool CDarksendPool::UpdatePoolStateOnClient(int nStateNew, int nEntriesCountNew, int nAcceptedEntriesCountNew, int& nErrorID, int nSessionIDNew)\n+bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew)\n {\n     if(fMasterNode) return false;\n     if(nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) return false;\n \n     SetState(nStateNew);\n     nEntriesCount = nEntriesCountNew;\n \n-    strAutoDenomResult = _(\"Masternode:\") + \" \" + GetMessageByID(nErrorID);\n+    strAutoDenomResult = _(\"Masternode:\") + \" \" + GetMessageByID(nMessageID);\n \n-    if(nAcceptedEntriesCountNew != -1) {\n-        fLastEntryAccepted = nAcceptedEntriesCountNew;\n-        nAcceptedEntriesCount += nAcceptedEntriesCountNew;\n-        if(nAcceptedEntriesCountNew == 0) {\n+    if(nStatusUpdate != STATUS_SET_STATE) {\n+        fLastEntryAccepted = nStatusUpdate;\n+        if(nStatusUpdate == STATUS_REJECTED) {\n             SetState(POOL_STATE_ERROR);\n-            strLastMessage = GetMessageByID(nErrorID);\n+            strLastMessage = GetMessageByID(nMessageID);\n         }\n \n-        if(nAcceptedEntriesCountNew == 1 && nSessionIDNew != 0) {\n+        if(nStatusUpdate == STATUS_ACCEPTED && nSessionIDNew != 0) {\n             nSessionID = nSessionIDNew;\n             LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- set nSessionID to %d\\n\", nSessionID);\n             fSessionFoundMasternode = true;\n         }\n     }\n \n     if(nStateNew == POOL_STATE_ACCEPTING_ENTRIES) {\n-        if(nAcceptedEntriesCountNew == 1) {\n+        if(nStatusUpdate == STATUS_ACCEPTED) {\n             LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry accepted!\\n\");\n             fSessionFoundMasternode = true;\n             //wait for other users. Masternode will report when ready\n             SetState(POOL_STATE_QUEUE);\n-        } else if(nAcceptedEntriesCountNew == 0 && nSessionID == 0 && !fSessionFoundMasternode) {\n+        } else if(nStatusUpdate == STATUS_REJECTED && nSessionID == 0 && !fSessionFoundMasternode) {\n             LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry not accepted by Masternode\\n\");\n             UnlockCoins();\n             SetState(POOL_STATE_ACCEPTING_ENTRIES);\n@@ -1266,7 +1284,7 @@ void CDarksendPool::NewBlock()\n }\n \n // mixing transaction was completed (failed or successful)\n-void CDarksendPool::CompletedTransaction(bool fError, int nErrorID)\n+void CDarksendPool::CompletedTransaction(bool fError, PoolMessage nMessageID)\n {\n     if(fMasterNode) return;\n \n@@ -1287,7 +1305,7 @@ void CDarksendPool::CompletedTransaction(bool fError, int nErrorID)\n         // To avoid race conditions, we'll only let DS run once per block\n         nCachedLastSuccessBlock = pCurrentBlockIndex->nHeight;\n     }\n-    strLastMessage = GetMessageByID(nErrorID);\n+    strLastMessage = GetMessageByID(nMessageID);\n }\n \n //\n@@ -1297,7 +1315,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n {\n     if(!fEnablePrivateSend || fMasterNode || !pCurrentBlockIndex) return false;\n     if(!pwalletMain || pwalletMain->IsLocked(true)) return false;\n-    if(nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) return false;\n+    if(nState != POOL_STATE_IDLE) return false;\n \n     if(!masternodeSync.IsMasternodeListSynced()) {\n         strAutoDenomResult = _(\"Can't mix while sync in progress.\");\n@@ -1599,7 +1617,12 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         }\n         vecMasternodesUsed.push_back(pmn->vin);\n \n-        if(pmn->nLastDsq != 0 && pmn->nLastDsq + mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5 > mnodeman.nDsqCount) {\n+        int nFifthCompatible = mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5;\n+        if(pmn->nLastDsq != 0 && pmn->nLastDsq + nFifthCompatible > mnodeman.nDsqCount) {\n+            LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- Too early to mix on this masternode!\"\n+                        \" masternode=%s  addr=%s  nLastDsq=%d  CountEnabled/5=%d  nDsqCount=%d\\n\",\n+                        pmn->vin.prevout.ToStringShort(), pmn->addr.ToString(), pmn->nLastDsq,\n+                        nFifthCompatible, mnodeman.nDsqCount);\n             nTries++;\n             continue;\n         }\n@@ -2011,22 +2034,26 @@ bool CDarksendPool::IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSO\n     return true;\n }\n \n-bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, int& nErrorID)\n+bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n {\n-    if(nDenom == 0) return false;\n+    if(nDenom == 0) {\n+        nMessageIDRet = ERR_DENOM;\n+        return false;\n+    }\n \n     LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- nSessionDenom: %d nSessionUsers: %d\\n\", nSessionDenom, nSessionUsers);\n \n     if(!fUnitTest && !IsCollateralValid(txCollateral)) {\n         LogPrint(\"privatesend\", \"CDarksendPool::IsDenomCompatibleWithSession -- collateral not valid!\\n\");\n-        nErrorID = ERR_INVALID_COLLATERAL;\n+        nMessageIDRet = ERR_INVALID_COLLATERAL;\n         return false;\n     }\n \n     if(nSessionUsers < 0) nSessionUsers = 0;\n \n     if(nSessionUsers == 0) {\n-        nSessionID = 1 + GetRand(999999);\n+        nMessageIDRet = MSG_NOERR;\n+        nSessionID = GetInsecureRand(999999)+1;\n         nSessionDenom = nDenom;\n         nSessionUsers++;\n         nLastTimeChanged = GetTimeMillis();\n@@ -2045,19 +2072,20 @@ bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txColl\n     }\n \n     if((nState != POOL_STATE_ACCEPTING_ENTRIES && nState != POOL_STATE_QUEUE) || nSessionUsers >= GetMaxPoolTransactions()) {\n-        if((nState != POOL_STATE_ACCEPTING_ENTRIES && nState != POOL_STATE_QUEUE)) nErrorID = ERR_MODE;\n-        if(nSessionUsers >= GetMaxPoolTransactions()) nErrorID = ERR_QUEUE_FULL;\n+        if((nState != POOL_STATE_ACCEPTING_ENTRIES && nState != POOL_STATE_QUEUE)) nMessageIDRet = ERR_MODE;\n+        if(nSessionUsers >= GetMaxPoolTransactions()) nMessageIDRet = ERR_QUEUE_FULL;\n         LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- incompatible mode, return false: nState status %d, nSessionUsers status %d\\n\", nState != POOL_STATE_ACCEPTING_ENTRIES, nSessionUsers >= GetMaxPoolTransactions());\n         return false;\n     }\n \n     if(nDenom != nSessionDenom) {\n-        nErrorID = ERR_DENOM;\n+        nMessageIDRet = ERR_DENOM;\n         return false;\n     }\n \n     LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- compatible\\n\");\n \n+    nMessageIDRet = MSG_NOERR;\n     nSessionUsers++;\n     nLastTimeChanged = GetTimeMillis();\n     vecSessionCollateral.push_back(txCollateral);\n@@ -2184,7 +2212,7 @@ int CDarksendPool::GetDenominationsByAmounts(const std::vector<CAmount>& vecAmou\n     return GetDenominations(vecTxOut, true);\n }\n \n-std::string CDarksendPool::GetMessageByID(int nMessageID)\n+std::string CDarksendPool::GetMessageByID(PoolMessage nMessageID)\n {\n     switch (nMessageID) {\n         case ERR_ALREADY_HAVE:          return _(\"Already have that input.\");\n@@ -2206,9 +2234,9 @@ std::string CDarksendPool::GetMessageByID(int nMessageID)\n         case ERR_SESSION:               return _(\"Session not complete!\");\n         case ERR_MISSING_TX:            return _(\"Missing input transaction information.\");\n         case ERR_VERSION:               return _(\"Incompatible version.\");\n+        case MSG_NOERR:                 return _(\"No errors detected.\");\n         case MSG_SUCCESS:               return _(\"Transaction created successfully.\");\n         case MSG_ENTRIES_ADDED:         return _(\"Your entries added successfully.\");\n-        case MSG_NOERR:                 return _(\"No errors detected.\");\n         default:                        return _(\"Unknown response.\");\n     }\n }\n@@ -2395,34 +2423,40 @@ void CDarksendPool::RelayIn(const CDarkSendEntry& entry)\n     }\n }\n \n-void CDarksendPool::RelayStatus(int nErrorID)\n+void CDarksendPool::PushStatus(CNode* pnode, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID)\n+{\n+    if(!pnode) return;\n+    pnode->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, (int)nState, nEntriesCount, (int)nStatusUpdate, (int)nMessageID);\n+}\n+\n+void CDarksendPool::RelayStatus(PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n         if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n-            pnode->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, nState, nEntriesCount, nAcceptedEntriesCount, nErrorID);\n+            PushStatus(pnode, nStatusUpdate, nMessageID);\n }\n \n-void CDarksendPool::RelayCompletedTransaction(bool fError, int nErrorID)\n+void CDarksendPool::RelayCompletedTransaction(bool fError, PoolMessage nMessageID)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n         if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n-            pnode->PushMessage(NetMsgType::DSCOMPLETE, nSessionID, fError, nErrorID);\n+            pnode->PushMessage(NetMsgType::DSCOMPLETE, nSessionID, fError, (int)nMessageID);\n }\n \n-void CDarksendPool::SetState(unsigned int nStateNew)\n+void CDarksendPool::SetState(PoolState nStateNew)\n {\n     if(fMasterNode && (nStateNew == POOL_STATE_ERROR || nStateNew == POOL_STATE_SUCCESS)) {\n         LogPrint(\"privatesend\", \"CDarksendPool::SetState -- Can't set state to ERROR or SUCCESS as a Masternode. \\n\");\n         return;\n     }\n \n     LogPrintf(\"CDarksendPool::SetState -- nState: %d, nStateNew: %d\\n\", nState, nStateNew);\n-    if(nState != nStateNew){\n+    if(nState != nStateNew) {\n         nLastTimeChanged = GetTimeMillis();\n         if(fMasterNode) {\n-            RelayStatus(MASTERNODE_RESET);\n+            RelayStatus(STATUS_SET_STATE);\n         }\n     }\n     nState = nStateNew;\n@@ -2480,9 +2514,8 @@ void ThreadCheckDarkSendPool()\n             darkSendPool.CheckForCompleteQueue();\n \n             if(nDoAutoNextRun == nTick) {\n-                if(darkSendPool.GetState() == POOL_STATE_IDLE)\n-                    darkSendPool.DoAutomaticDenominating();\n-                nDoAutoNextRun = nTick + PRIVATESEND_AUTO_TIMEOUT_MIN + insecure_rand()%(PRIVATESEND_AUTO_TIMEOUT_MAX - PRIVATESEND_AUTO_TIMEOUT_MIN);\n+                darkSendPool.DoAutomaticDenominating();\n+                nDoAutoNextRun = nTick + PRIVATESEND_AUTO_TIMEOUT_MIN + GetInsecureRand(PRIVATESEND_AUTO_TIMEOUT_MAX - PRIVATESEND_AUTO_TIMEOUT_MIN);\n             }\n         }\n     }"
      },
      {
        "sha": "cf6291832782b4bab6bfaeec7a01010a92744758",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 37,
        "deletions": 32,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
        "patch": "@@ -10,25 +10,8 @@\n \n class CDarksendPool;\n class CDarkSendSigner;\n-class CDarksendQueue;\n class CDarksendBroadcastTx;\n \n-// pool states for mixing\n-static const int POOL_STATE_UNKNOWN                 = 0; // waiting for initialization\n-static const int POOL_STATE_IDLE                    = 1; // waiting for update\n-static const int POOL_STATE_QUEUE                   = 2; // waiting in a queue\n-static const int POOL_STATE_ACCEPTING_ENTRIES       = 3; // accepting entries\n-static const int POOL_STATE_FINALIZE_TRANSACTION    = 4; // master node will broadcast what it accepted\n-static const int POOL_STATE_SIGNING                 = 5; // check inputs/outputs, sign final tx\n-static const int POOL_STATE_TRANSMISSION            = 6; // transmit transaction\n-static const int POOL_STATE_ERROR                   = 7; // error\n-static const int POOL_STATE_SUCCESS                 = 8; // success\n-\n-// status update message constants\n-static const int MASTERNODE_ACCEPTED                = 1;\n-static const int MASTERNODE_REJECTED                = 0;\n-static const int MASTERNODE_RESET                   = -1;\n-\n // timeouts\n static const int PRIVATESEND_AUTO_TIMEOUT_MIN       = 5;\n static const int PRIVATESEND_AUTO_TIMEOUT_MAX       = 15;\n@@ -273,7 +256,8 @@ class CDarkSendSigner\n class CDarksendPool\n {\n private:\n-    enum messages {\n+    // pool responses\n+    enum PoolMessage {\n         ERR_ALREADY_HAVE,\n         ERR_DENOM,\n         ERR_ENTRIES_FULL,\n@@ -295,7 +279,31 @@ class CDarksendPool\n         ERR_VERSION,\n         MSG_NOERR,\n         MSG_SUCCESS,\n-        MSG_ENTRIES_ADDED\n+        MSG_ENTRIES_ADDED,\n+        MSG_POOL_MIN = ERR_ALREADY_HAVE,\n+        MSG_POOL_MAX = MSG_ENTRIES_ADDED\n+    };\n+\n+    // pool states\n+    enum PoolState {\n+        POOL_STATE_UNKNOWN,\n+        POOL_STATE_IDLE,\n+        POOL_STATE_QUEUE,\n+        POOL_STATE_ACCEPTING_ENTRIES,\n+        POOL_STATE_FINALIZE_TRANSACTION,\n+        POOL_STATE_SIGNING,\n+        POOL_STATE_TRANSMISSION,\n+        POOL_STATE_ERROR,\n+        POOL_STATE_SUCCESS,\n+        POOL_STATE_MIN = POOL_STATE_UNKNOWN,\n+        POOL_STATE_MAX = POOL_STATE_SUCCESS\n+    };\n+\n+    // status update message constants\n+    enum PoolStatusUpdate {\n+        STATUS_SET_STATE        = -1,\n+        STATUS_REJECTED         = 0,\n+        STATUS_ACCEPTED         = 1\n     };\n \n     mutable CCriticalSection cs_darksend;\n@@ -312,7 +320,7 @@ class CDarksendPool\n     std::vector<CTransaction> vecSessionCollateral;\n     std::vector<CDarkSendEntry> vecEntries; // Masternode/clients entries\n \n-    unsigned int nState; // should be one of the POOL_STATE_XXX values\n+    PoolState nState; // should be one of the POOL_STATE_XXX values\n     int64_t nLastTimeChanged; // last time the 'state' changed, in UTC milliseconds\n \n     int nCachedLastSuccessBlock;\n@@ -325,7 +333,6 @@ class CDarksendPool\n \n     unsigned int nEntriesCount;\n     bool fLastEntryAccepted;\n-    unsigned int nAcceptedEntriesCount;\n \n     std::string strLastMessage;\n     std::string strAutoDenomResult;\n@@ -336,7 +343,7 @@ class CDarksendPool\n     CMutableTransaction finalMutableTransaction; // the finalized transaction ready for signing\n \n     /// Add a clients entry to the pool\n-    bool AddEntry(const CDarkSendEntry& entryNew, int& nErrorIDRet);\n+    bool AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessageIDRet);\n     /// Add signature to a txin\n     bool AddScriptSig(const CTxIn& txin);\n \n@@ -350,20 +357,20 @@ class CDarksendPool\n \n     void CheckFinalTransaction();\n \n-    void CompletedTransaction(bool fError, int nErrorID);\n+    void CompletedTransaction(bool fError, PoolMessage nMessageID);\n \n     /// Get the denominations for a specific amount of dash.\n     int GetDenominationsByAmounts(const std::vector<CAmount>& vecAmount);\n \n-    std::string GetMessageByID(int nMessageID);\n+    std::string GetMessageByID(PoolMessage nMessageID);\n \n     /// Get the maximum number of transactions for the pool\n     int GetMaxPoolTransactions() { return Params().PoolMaxTransactions(); }\n \n     /// Are these outputs compatible with other client in the pool?\n     bool IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSOut>& vecTxDSOut);\n     /// Is this nDenom compatible with other client in the pool?\n-    bool IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, int &nErrorID);\n+    bool IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n \n     /// If the collateral is valid given by a client\n     bool IsCollateralValid(const CTransaction& txCollateral);\n@@ -394,9 +401,9 @@ class CDarksendPool\n     bool SendDenominate(const std::vector<CTxIn>& vecTxIn, const std::vector<CTxOut>& vecTxOut);\n \n     /// Get Masternode updates about the progress of mixing\n-    bool UpdatePoolStateOnClient(int nStateNew, int nEntriesCountNew, int nAcceptedEntriesCountNew, int &nErrorID, int nSessionIDNew=0);\n+    bool UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew=0);\n     // Set the 'state' value, with some logging and capturing when the state changed\n-    void SetState(unsigned int nStateNew);\n+    void SetState(PoolState nStateNew);\n \n     /// As a client, check and sign the final transaction\n     bool SignFinalTransaction(const CTransaction& finalTransactionNew, CNode* node);\n@@ -406,8 +413,9 @@ class CDarksendPool\n     void RelaySignaturesAnon(std::vector<CTxIn>& vin);\n     void RelayInAnon(std::vector<CTxIn>& vin, std::vector<CTxOut>& vout);\n     void RelayIn(const CDarkSendEntry& entry);\n-    void RelayStatus(int nErrorID=MSG_NOERR);\n-    void RelayCompletedTransaction(bool fError, int nErrorID);\n+    void PushStatus(CNode* pnode, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID);\n+    void RelayStatus(PoolStatusUpdate nStatusUpdate = STATUS_SET_STATE, PoolMessage nMessageID = MSG_NOERR);\n+    void RelayCompletedTransaction(bool fError, PoolMessage nMessageID);\n \n public:\n     CMasternode* pSubmittedToMasternode;\n@@ -460,8 +468,6 @@ class CDarksendPool\n     std::string GetStatus();\n \n     int GetEntriesCount() const { return vecEntries.size(); }\n-    /// Get the count of the accepted entries\n-    int GetCountEntriesAccepted() const { return nAcceptedEntriesCount; }\n \n     /// Passively run mixing in the background according to the configuration in settings\n     bool DoAutomaticDenominating(bool fDryRun=false);\n@@ -471,7 +477,6 @@ class CDarksendPool\n     /// Do we have enough users to take entries?\n     bool IsSessionReady(){ return nSessionUsers >= GetMaxPoolTransactions(); }\n \n-\n     /// Process a new block\n     void NewBlock();\n "
      },
      {
        "sha": "9a5ccd8ce2a5bd0129aa9ab2491782b16deedf08",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
        "patch": "@@ -82,7 +82,6 @@ UniValue getpoolinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"queue\",                 darkSendPool.GetQueueSize()));\n     obj.push_back(Pair(\"state\",                 darkSendPool.GetState()));\n     obj.push_back(Pair(\"entries\",               darkSendPool.GetEntriesCount()));\n-    obj.push_back(Pair(\"entries_accepted\",      darkSendPool.GetCountEntriesAccepted()));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "66c40e068733ac718ddb7048eca38faacdfc4d66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmM0MGUwNjg3MzNhYzcxOGRkYjcwNDhlY2EzOGZhYWNkZmM0ZDY2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-20T21:12:42Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-20T21:12:42Z"
      },
      "message": "always check for valid block hash in mnping (#1076)",
      "tree": {
        "sha": "9900e38720b415fce8b255811630da3a5e45fedc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9900e38720b415fce8b255811630da3a5e45fedc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c40e068733ac718ddb7048eca38faacdfc4d66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c40e068733ac718ddb7048eca38faacdfc4d66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66c40e068733ac718ddb7048eca38faacdfc4d66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c40e068733ac718ddb7048eca38faacdfc4d66/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/609aa7de2a2a3ac78bad3879dece3afd8bb9ce98"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "63e24a794930f0d89f47040b745f58ef6e2a7d14",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c40e068733ac718ddb7048eca38faacdfc4d66/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c40e068733ac718ddb7048eca38faacdfc4d66/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=66c40e068733ac718ddb7048eca38faacdfc4d66",
        "patch": "@@ -759,6 +759,23 @@ bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fChec\n         return false;\n     }\n \n+    {\n+        LOCK(cs_main);\n+        BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n+        if (mi == mapBlockIndex.end()) {\n+            LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- Masternode ping is invalid, unknown block hash: masternode=%s blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n+            // maybe we stuck or forked so we shouldn't ban this node, just fail to accept this ping\n+            // TODO: or should we also request this block?\n+            return false;\n+        }\n+        if ((*mi).second && (*mi).second->nHeight < chainActive.Height() - 24) {\n+            LogPrintf(\"CMasternodePing::CheckAndUpdate -- Masternode ping is invalid, block hash is too old: masternode=%s  blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n+            // Do nothing here (no Masternode update, no mnping relay)\n+            // Let this node to be visible but fail to accept mnping\n+            return false;\n+        }\n+    }\n+\n     if (fCheckSigTimeOnly) {\n         CMasternode* pmn = mnodeman.Find(vin);\n         if (pmn) return CheckSignature(pmn->pubKeyMasternode, nDos);\n@@ -788,23 +805,6 @@ bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fChec\n \n     if (!CheckSignature(pmn->pubKeyMasternode, nDos)) return false;\n \n-    {\n-        LOCK(cs_main);\n-        BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n-        if (mi == mapBlockIndex.end()) {\n-            LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- Masternode is unknown: masternode=%s blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n-            // maybe we stuck so we shouldn't ban this node, just fail to accept it\n-            // TODO: or should we also request this block?\n-            return false;\n-        }\n-        if ((*mi).second && (*mi).second->nHeight < chainActive.Height() - 24) {\n-            LogPrintf(\"CMasternodePing::CheckAndUpdate -- Masternode is too old: masternode=%s  blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n-            // Do nothing here (no Masternode update, no mnping relay)\n-            // Let this node to be visible but fail to accept mnping\n-            return false;\n-        }\n-    }\n-\n     // so, ping seems to be ok, let's store it\n     LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- Masternode ping accepted, masternode=%s\\n\", vin.prevout.ToStringShort());\n     pmn->lastPing = *this;"
      }
    ]
  },
  {
    "sha": "2d55b7038126ec01ba1b4374cbaaff240256f4c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDU1YjcwMzgxMjZlYzAxYmExYjQzNzRjYmFhZmYyNDAyNTZmNGM3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-22T16:52:14Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-22T16:52:14Z"
      },
      "message": "(log) tweaks and (general) cleanup (#1086)\n\n* docs\r\n\r\n* deprecated/unused/duplicate\r\n\r\n* comments\r\n\r\n* log cleanup/verbosity tuning\r\n\r\n* names/ifs/whitespaces/std",
      "tree": {
        "sha": "98e5955e7bb0e70090ec1434197464d8f9197589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98e5955e7bb0e70090ec1434197464d8f9197589"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d55b7038126ec01ba1b4374cbaaff240256f4c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d55b7038126ec01ba1b4374cbaaff240256f4c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d55b7038126ec01ba1b4374cbaaff240256f4c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d55b7038126ec01ba1b4374cbaaff240256f4c7/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66c40e068733ac718ddb7048eca38faacdfc4d66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c40e068733ac718ddb7048eca38faacdfc4d66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66c40e068733ac718ddb7048eca38faacdfc4d66"
      }
    ],
    "stats": {
      "total": 620,
      "additions": 281,
      "deletions": 339
    },
    "files": [
      {
        "sha": "2e1926d1a55512aa726e507c2a6396c9edbdd843",
        "filename": "INSTALL",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/INSTALL",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/INSTALL",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -7,7 +7,7 @@ Use the autogen script to prepare the build environment.\n     make\n \n Precompiled binaries are available at github, see\n-https://github.com/dashproject/dash-binaries\n+https://github.com/dashpay/dash-binaries\n \n Always verify the signatures and checksums.\n "
      },
      {
        "sha": "2945b0caf888b2ce9214c9c19ccc098449d73f70",
        "filename": "dash-docs/protocol-documentation.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/dash-docs/protocol-documentation.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/dash-docs/protocol-documentation.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/dash-docs/protocol-documentation.md?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -117,8 +117,8 @@ Mixing pool status update\n | 4 | nMsgSessionID | int | Session ID\n | 4 | nMsgState | int | Current state of mixing process\n | 4 | nMsgEntriesCount | int | Number of entries in the mixing pool\n-| 4 | nMsgAccepted | int | Was entries accepted or not\n-| 4 | nMsgErrorID | int | Error ID if any\n+| 4 | nMsgStatusUpdate | int | Update state and/or signal if entry was accepted or not\n+| 4 | nMsgMessageID | int | ID of the typical masternode reply message\n \n ### DSQUEUE - \"dsq\"\n "
      },
      {
        "sha": "821fa9ab9d20fc38fbf396db2d2020271f2b4c95",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -20,7 +20,7 @@ Unpack the files into a directory, and then run dash-qt.exe.\n \n ### OS X\n \n-Drag Dash-Core to your applications folder, and then run Dash-Core.\n+Drag Dash-Qt to your applications folder, and then run Dash-Qt.\n \n ### Need Help?\n "
      },
      {
        "sha": "dec2593dea6c125096031ec648cbee138b2e5e58",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -36,7 +36,7 @@ Instructions: Homebrew\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n \n-### Building `Dash Core`\n+### Building Dash Core\n \n 1. Clone the GitHub tree to get the source code and go into the directory.\n "
      },
      {
        "sha": "18adac571cdfa5fb7b5b7eecc6a790e504c0d519",
        "filename": "doc/guide-startmany.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/guide-startmany.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/guide-startmany.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/guide-startmany.md?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -135,7 +135,7 @@ You can confirm that remote server is on the correct block by issuing\n \n ```dash-cli getinfo```\n \n-and comparing with the official explorer at http://explorer.dash.org/chain/Dash\n+and comparing with the official explorer at https://explorer.dash.org/chain/Dash\n \n ### Local\n "
      },
      {
        "sha": "d229cf7e29120e991c98527b8569a1c1dddb9af8",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -188,7 +188,7 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n \n - Announce the release:\n \n-  - Release sticky on dashtalk: https://dashtalk.org/index.php?board=1.0 ***TODO***\n+  - Release on Dash forum: https://www.dash.org/forum/topic/official-announcements.54/\n \n   - Dash-development mailing list\n "
      },
      {
        "sha": "f56422f3a9bdb97d829bf043b10a8167d9dc4f9d",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -115,14 +115,14 @@\n     'timestampindex.py',\n     'spentindex.py',\n     'decodescript.py',\n-    'p2p-fullblocktest.py', # TODO: works, needs dash_hash\n+    'p2p-fullblocktest.py', # NOTE: needs dash_hash to pass\n     'blockchain.py',\n     'disablewallet.py',\n-    'sendheaders.py', # TODO: works, needs dash_hash\n+    'sendheaders.py', # NOTE: needs dash_hash to pass\n     'keypool.py',\n     'prioritise_transaction.py',\n-    'invalidblockrequest.py', # TODO: works, needs dash_hash\n-    'invalidtxrequest.py', # TODO: works, needs dash_hash\n+    'invalidblockrequest.py', # NOTE: needs dash_hash to pass\n+    'invalidtxrequest.py', # NOTE: needs dash_hash to pass\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n ]\n@@ -132,9 +132,9 @@\n testScriptsExt = [\n     'bip9-softforks.py',\n     'bip65-cltv.py',\n-    'bip65-cltv-p2p.py', # TODO: works, needs dash_hash\n+    'bip65-cltv-p2p.py', # NOTE: needs dash_hash to pass\n     'bip68-sequence.py',\n-    'bipdersig-p2p.py', # TODO: works, needs dash_hash\n+    'bipdersig-p2p.py', # NOTE: needs dash_hash to pass\n     'bipdersig.py',\n     'getblocktemplate_longpoll.py', # FIXME: \"socket.error: [Errno 54] Connection reset by peer\" on my Mac, same as  https://github.com/bitcoin/bitcoin/issues/6651\n     'getblocktemplate_proposals.py',\n@@ -146,7 +146,7 @@\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n     'smartfees.py',\n     'maxblocksinflight.py',\n-    'p2p-acceptblock.py', # TODO: works, needs dash_hash\n+    'p2p-acceptblock.py', # NOTE: needs dash_hash to pass\n     'mempool_packages.py',\n     'maxuploadtarget.py',\n     # 'replace-by-fee.py', # RBF is disabled in Dash Core"
      },
      {
        "sha": "4dfd387a76c186c2ab43d1047886b72d875d900e",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 23,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -39,8 +39,7 @@ void CActiveMasternode::ManageState()\n \n     if(eType == MASTERNODE_REMOTE) {\n         ManageStateRemote();\n-    }\n-    else {\n+    } else {\n         ManageStateLocal();\n     }\n \n@@ -55,12 +54,12 @@ void CActiveMasternode::ManageState()\n std::string CActiveMasternode::GetStatus()\n {\n     switch (nState) {\n-        case ACTIVE_MASTERNODE_INITIAL: return \"Node just started, not yet activated\";\n+        case ACTIVE_MASTERNODE_INITIAL:         return \"Node just started, not yet activated\";\n         case ACTIVE_MASTERNODE_SYNC_IN_PROCESS: return \"Sync in progress. Must wait until sync is complete to start Masternode\";\n-        case ACTIVE_MASTERNODE_INPUT_TOO_NEW: return strprintf(\"Masternode input must have at least %d confirmations\", Params().GetConsensus().nMasternodeMinimumConfirmations);\n-        case ACTIVE_MASTERNODE_NOT_CAPABLE: return \"Not capable masternode: \" + strNotCapableReason;\n-        case ACTIVE_MASTERNODE_STARTED: return \"Masternode successfully started\";\n-        default: return \"unknown\";\n+        case ACTIVE_MASTERNODE_INPUT_TOO_NEW:   return strprintf(\"Masternode input must have at least %d confirmations\", Params().GetConsensus().nMasternodeMinimumConfirmations);\n+        case ACTIVE_MASTERNODE_NOT_CAPABLE:     return \"Not capable masternode: \" + strNotCapableReason;\n+        case ACTIVE_MASTERNODE_STARTED:         return \"Masternode successfully started\";\n+        default:                                return \"unknown\";\n     }\n }\n \n@@ -117,22 +116,6 @@ bool CActiveMasternode::SendMasternodePing(std::string& strErrorRet)\n     return true;\n }\n \n-// when starting a Masternode, this can enable to run as a hot wallet with no funds\n-bool CActiveMasternode::EnableRemoteMasterNode(CTxIn& vinNew, CService& serviceNew)\n-{\n-    if(!fMasterNode) return false;\n-\n-    nState = ACTIVE_MASTERNODE_STARTED;\n-\n-    //The values below are needed for signing mnping messages going forward\n-    vin = vinNew;\n-    service = serviceNew;\n-\n-    LogPrintf(\"CActiveMasternode::EnableHotColdMasterNode -- Enabled! You may shut down the cold daemon.\\n\");\n-\n-    return true;\n-}\n-\n void CActiveMasternode::ManageStateInitial()\n {\n     LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- Start status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);"
      },
      {
        "sha": "8cdf7fecc289b15734bb032954650342f4cb2041",
        "filename": "src/activemasternode.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/activemasternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/activemasternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.h?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -62,17 +62,11 @@ class CActiveMasternode\n     void ManageState();\n \n     std::string GetStatus();\n-\n     std::string GetType();\n \n-    /// Enable cold wallet mode (run a Masternode with no funds)\n-    bool EnableRemoteMasterNode(CTxIn& vinNew, CService& serviceNew);\n-\n private:\n     void ManageStateInitial();\n-\n     void ManageStateRemote();\n-\n     void ManageStateLocal();\n };\n "
      },
      {
        "sha": "9e8bb7b19f41e266b8f228e14dcd4a1222015a84",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -96,9 +96,9 @@ class CBase58Data\n };\n \n /** base58-encoded Dash addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n+ * Public-key-hash-addresses have version 76 (or 140 testnet).\n  * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n+ * Script-hash-addresses have version 16 (or 19 testnet).\n  * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n  */\n class CBitcoinAddress : public CBase58Data {"
      },
      {
        "sha": "b6d23f2fa8a347948f9dc1e0bac44a2ca216034a",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -1015,7 +1015,7 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n \n bool CDarksendPool::AddScriptSig(const CTxIn& txinNew)\n {\n-    LogPrint(\"privatesend\", \"CDarksendPool::AddScriptSig -- new sig, scriptSig=%s\\n\", ScriptToAsmStr(txinNew.scriptSig).substr(0,24));\n+    LogPrint(\"privatesend\", \"CDarksendPool::AddScriptSig -- scriptSig=%s\\n\", ScriptToAsmStr(txinNew.scriptSig).substr(0,24));\n \n     BOOST_FOREACH(const CDarkSendEntry& entry, vecEntries) {\n         BOOST_FOREACH(const CTxDSIn& txdsin, entry.vecTxDSIn) {\n@@ -1031,7 +1031,7 @@ bool CDarksendPool::AddScriptSig(const CTxIn& txinNew)\n         return false;\n     }\n \n-    LogPrint(\"privatesend\", \"CDarksendPool::AddScriptSig -- scriptSig=%s\\n\", ScriptToAsmStr(txinNew.scriptSig));\n+    LogPrint(\"privatesend\", \"CDarksendPool::AddScriptSig -- scriptSig=%s new\\n\", ScriptToAsmStr(txinNew.scriptSig).substr(0,24));\n \n     BOOST_FOREACH(CTxIn& txin, finalMutableTransaction.vin) {\n         if(txinNew.prevout == txin.prevout && txin.nSequence == txinNew.nSequence) {\n@@ -1194,7 +1194,7 @@ bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCou\n // check it to make sure it's what we want, then sign it if we agree.\n // If we refuse to sign, it's possible we'll be charged collateral\n //\n-bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew, CNode* node)\n+bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew, CNode* pnode)\n {\n     if(fMasterNode) return false;\n \n@@ -1265,8 +1265,8 @@ bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew\n     }\n \n     // push all of our signatures to the Masternode\n-    if(sigs.size() > 0 && node != NULL)\n-        node->PushMessage(NetMsgType::DSSIGNFINALTX, sigs);\n+    if(!sigs.empty() && pnode != NULL)\n+        pnode->PushMessage(NetMsgType::DSSIGNFINALTX, sigs);\n \n     return true;\n }\n@@ -1568,13 +1568,13 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             std::vector<COutput> vCoinsTmp;\n             // Try to match their denominations if possible\n             if(!pwalletMain->SelectCoinsByDenominations(dsq.nDenom, nValueMin, nBalanceNeedsAnonymized, vecTxInTmp, vCoinsTmp, nValueIn, 0, nPrivateSendRounds)) {\n-                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- Couldn't match denominations %d\\n\", dsq.nDenom);\n+                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- Couldn't match denominations %d (%s)\\n\", dsq.nDenom, GetDenominationsToString(dsq.nDenom));\n                 continue;\n             }\n \n             CMasternode* pmn = mnodeman.Find(dsq.vin);\n             if(pmn == NULL) {\n-                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- dsq masternode is not in masternode list! vin=%s\\n\", dsq.vin.ToString());\n+                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- dsq masternode is not in masternode list, masternode=%s\\n\", dsq.vin.prevout.ToStringShort());\n                 continue;\n             }\n             vecMasternodesUsed.push_back(dsq.vin);\n@@ -1588,12 +1588,13 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 nSessionDenom = dsq.nDenom;\n \n                 pnode->PushMessage(NetMsgType::DSACCEPT, nSessionDenom, txMyCollateral);\n-                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected (from queue), sending dsa: nSessionDenom: %d, addr=%s\\n\", nSessionDenom, pnode->addr.ToString());\n+                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected (from queue), sending DSACCEPT: nSessionDenom: %d (%s), addr=%s\\n\",\n+                        nSessionDenom, GetDenominationsToString(nSessionDenom), pnode->addr.ToString());\n                 strAutoDenomResult = _(\"Mixing in progress...\");\n                 dsq.nTime = 0; //remove node\n                 return true;\n             } else {\n-                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- error connecting\\n\");\n+                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n                 strAutoDenomResult = _(\"Error connecting to Masternode.\");\n                 dsq.nTime = 0; //remove node\n                 pmn->nPoSeBanScore++;\n@@ -1631,7 +1632,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt %d connection to Masternode %s\\n\", nTries, pmn->addr.ToString());\n         CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n         if(pnode) {\n-            LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected %s\\n\", pmn->vin.ToString());\n+            LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected, addr=%s\\n\", pmn->addr.ToString());\n             pSubmittedToMasternode = pmn;\n \n             std::vector<CAmount> vecAmounts;\n@@ -1642,11 +1643,12 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             }\n \n             pnode->PushMessage(NetMsgType::DSACCEPT, nSessionDenom, txMyCollateral);\n-            LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected, sending DSACCEPT, nSessionDenom: %d\\n\", nSessionDenom);\n+            LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected, sending DSACCEPT, nSessionDenom: %d (%s)\\n\",\n+                    nSessionDenom, GetDenominationsToString(nSessionDenom));\n             strAutoDenomResult = _(\"Mixing in progress...\");\n             return true;\n         } else {\n-            LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect %s\\n\", pmn->vin.ToString());\n+            LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n             nTries++;\n             pmn->nPoSeBanScore++;\n             continue;\n@@ -2041,7 +2043,8 @@ bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txColl\n         return false;\n     }\n \n-    LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- nSessionDenom: %d nSessionUsers: %d\\n\", nSessionDenom, nSessionUsers);\n+    LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- nSessionDenom: %d (%s) nSessionUsers: %d\\n\",\n+            nSessionDenom, GetDenominationsToString(nSessionDenom), nSessionUsers);\n \n     if(!fUnitTest && !IsCollateralValid(txCollateral)) {\n         LogPrint(\"privatesend\", \"CDarksendPool::IsDenomCompatibleWithSession -- collateral not valid!\\n\");"
      },
      {
        "sha": "885a6b6a1165cdc92a01438e3ea82053f056d763",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -406,7 +406,7 @@ class CDarksendPool\n     void SetState(PoolState nStateNew);\n \n     /// As a client, check and sign the final transaction\n-    bool SignFinalTransaction(const CTransaction& finalTransactionNew, CNode* node);\n+    bool SignFinalTransaction(const CTransaction& finalTransactionNew, CNode* pnode);\n \n     /// Relay mixing Messages\n     void RelayFinalTransaction(const CTransaction& txFinal);"
      },
      {
        "sha": "12514f446cd1bc7ed7aa3064ca5411b554b3ebf5",
        "filename": "src/flat-database.h",
        "status": "modified",
        "additions": 17,
        "deletions": 37,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/flat-database.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/flat-database.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flat-database.h?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -1,7 +1,7 @@\n // Copyright (c) 2014-2016 The Dash Core developers\n-\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef FLAT_DATABASE_H\n #define FLAT_DATABASE_H\n \n@@ -55,14 +55,14 @@ class CFlatDB\n         FILE *file = fopen(pathDB.string().c_str(), \"wb\");\n         CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n         if (fileout.IsNull())\n-            return error(\"%s : Failed to open file %s\", __func__, pathDB.string());\n+            return error(\"%s: Failed to open file %s\", __func__, pathDB.string());\n \n         // Write and commit header, data\n         try {\n             fileout << ssObj;\n         }\n         catch (std::exception &e) {\n-            return error(\"%s : Serialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n         }\n         fileout.fclose();\n \n@@ -82,7 +82,7 @@ class CFlatDB\n         CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n         if (filein.IsNull())\n         {\n-            error(\"%s : Failed to open file %s\", __func__, pathDB.string());\n+            error(\"%s: Failed to open file %s\", __func__, pathDB.string());\n             return FileError;\n         }\n \n@@ -102,7 +102,7 @@ class CFlatDB\n             filein >> hashIn;\n         }\n         catch (std::exception &e) {\n-            error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             return HashReadError;\n         }\n         filein.fclose();\n@@ -113,7 +113,7 @@ class CFlatDB\n         uint256 hashTmp = Hash(ssObj.begin(), ssObj.end());\n         if (hashIn != hashTmp)\n         {\n-            error(\"%s : Checksum mismatch, data corrupted\", __func__);\n+            error(\"%s: Checksum mismatch, data corrupted\", __func__);\n             return IncorrectHash;\n         }\n \n@@ -127,7 +127,7 @@ class CFlatDB\n             // ... verify the message matches predefined one\n             if (strMagicMessage != strMagicMessageTmp)\n             {\n-                error(\"%s : Invalid magic message\", __func__);\n+                error(\"%s: Invalid magic message\", __func__);\n                 return IncorrectMagicMessage;\n             }\n \n@@ -138,7 +138,7 @@ class CFlatDB\n             // ... verify the network matches ours\n             if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n             {\n-                error(\"%s : Invalid network magic number\", __func__);\n+                error(\"%s: Invalid network magic number\", __func__);\n                 return IncorrectMagicNumber;\n             }\n \n@@ -147,16 +147,16 @@ class CFlatDB\n         }\n         catch (std::exception &e) {\n             objToLoad.Clear();\n-            error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             return IncorrectFormat;\n         }\n \n         LogPrintf(\"Loaded info from %s  %dms\\n\", strFilename, GetTimeMillis() - nStart);\n         LogPrintf(\"     %s\\n\", objToLoad.ToString());\n         if(!fDryRun) {\n-            LogPrintf(\"CFlatDB - cleaning....\\n\");\n+            LogPrintf(\"%s: Cleaning....\\n\", __func__);\n             objToLoad.CheckAndRemove();\n-            LogPrintf(\"CFlatDB - %s\\n\", objToLoad.ToString());\n+            LogPrintf(\"     %s\\n\", objToLoad.ToString());\n         }\n \n         return Ok;\n@@ -176,16 +176,16 @@ class CFlatDB\n         LogPrintf(\"Reading info from %s...\\n\", strFilename);\n         ReadResult readResult = Read(objToLoad);\n         if (readResult == FileError)\n-            LogPrintf(\"Missing file - %s, will try to recreate\\n\", strFilename);\n+            LogPrintf(\"Missing file %s, will try to recreate\\n\", strFilename);\n         else if (readResult != Ok)\n         {\n             LogPrintf(\"Error reading %s: \", strFilename);\n             if(readResult == IncorrectFormat)\n             {\n-                LogPrintf(\"magic is ok but data has invalid format, will try to recreate\\n\");\n+                LogPrintf(\"%s: Magic is ok but data has invalid format, will try to recreate\\n\", __func__);\n             }\n             else {\n-                LogPrintf(\"file format is unknown or invalid, please fix it manually\\n\");\n+                LogPrintf(\"%s: File format is unknown or invalid, please fix it manually\\n\", __func__);\n                 // program should exit with an error\n                 return false;\n             }\n@@ -197,41 +197,21 @@ class CFlatDB\n     {\n         int64_t nStart = GetTimeMillis();\n \n-\n-        // LOAD SERIALIZED FILE TO DETERMINE SAFETY OF SAVING INTO THAT FILE\n-\n-        /*\n-\n-\n-            2016-06-02 21:23:55     dash-shutoff |      Governance Objects: 1, Seen Budgets: 1, Seen Budget Votes: 0, Vote Count: 0\n-            2016-06-02 21:23:55     dash-shutoff |      Governance Objects: 1, Seen Budgets: 0, Seen Budget Votes: 0, Vote Count: 0\n-            2016-06-02 21:29:17            dashd |      Governance Objects: 1, Seen Budgets: 0, Seen Budget Votes: 0, Vote Count: 0\n-            2016-06-02 21:29:17            dashd | CFlatDB - Governance Objects: 1, Seen Budgets: 0, Seen Budget Votes: 0, Vote Count: 0\n-            2016-06-02 21:29:25     dash-shutoff |      Governance Objects: 1, Seen Budgets: 0, Seen Budget Votes: 0, Vote Count: 0\n-            2016-06-02 21:30:07     dash-shutoff |      Governance Objects: 1, Seen Budgets: 1, Seen Budget Votes: 0, Vote Count: 0\n-            2016-06-02 21:30:16            dashd |      Governance Objects: 1, Seen Budgets: 1, Seen Budget Votes: 0, Vote Count: 0\n-            2016-06-02 21:30:16            dashd | CFlatDB - Governance Objects: 1, Seen Budgets: 1, Seen Budget Votes: 0, Vote Count: 0\n-\n-            \n-            This fact can be demonstrated by adding a governance item, then stopping and starting the client. \n-            With the code enabled, \"Seen Budgets\" will equal 0, whereas the object should have one entry. \n-        */\n-\n         LogPrintf(\"Verifying %s format...\\n\", strFilename);\n         T tmpObjToLoad;\n         ReadResult readResult = Read(tmpObjToLoad, true);\n \n         // there was an error and it was not an error on file opening => do not proceed\n         if (readResult == FileError)\n-            LogPrintf(\"Missing file - %s, will try to recreate\\n\", strFilename);\n+            LogPrintf(\"Missing file %s, will try to recreate\\n\", strFilename);\n         else if (readResult != Ok)\n         {\n             LogPrintf(\"Error reading %s: \", strFilename);\n             if(readResult == IncorrectFormat)\n-                LogPrintf(\"magic is ok but data has invalid format, will try to recreate\\n\");\n+                LogPrintf(\"%s: Magic is ok but data has invalid format, will try to recreate\\n\", __func__);\n             else\n             {\n-                LogPrintf(\"file format is unknown or invalid, please fix it manually\\n\");\n+                LogPrintf(\"%s: File format is unknown or invalid, please fix it manually\\n\", __func__);\n                 return false;\n             }\n         }"
      },
      {
        "sha": "04b519ed901b5f54a9041650bf83273372dce146",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -30,12 +30,7 @@\n CGovernanceTriggerManager triggerman;\n \n // SPLIT UP STRING BY DELIMITER\n-\n-/*  \n-    NOTE : SplitBy can be simplified via:\n-    http://www.boost.org/doc/libs/1_58_0/doc/html/boost/algorithm/split_idp202406848.html\n-*/\n-\n+// http://www.boost.org/doc/libs/1_58_0/doc/html/boost/algorithm/split_idp202406848.html\n std::vector<std::string> SplitBy(std::string strCommand, std::string strDelimit)\n {\n     std::vector<std::string> vParts;\n@@ -721,7 +716,7 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, CAmount b\n             CTxDestination address1;\n             ExtractDestination(payment.script, address1);\n             CBitcoinAddress address2(address1);\n-            LogPrintf(\"CSuperblock::IsValid -- WARNING: Block invalid: output n %d payment %d to %s\\n\", nVoutIndex, payment.nAmount, address2.ToString());\n+            LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid: output n %d payment %d to %s\\n\", nVoutIndex, payment.nAmount, address2.ToString());\n \n             return false;\n         }"
      },
      {
        "sha": "7afdec29a7cbfa39d9aac8f0cc076f990c0651a7",
        "filename": "src/governance-vote.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance-vote.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance-vote.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.h?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -123,10 +123,6 @@ class CGovernanceVote\n     bool IsValid(bool fSignatureCheck);\n     void Relay();\n \n-    std::string GetVoteString() {\n-        return CGovernanceVoting::ConvertOutcomeToString(GetOutcome());\n-    }\n-\n     CTxIn& GetVinMasternode() { return vinMasternode; }\n \n     const CTxIn& GetVinMasternode() const { return vinMasternode; }"
      },
      {
        "sha": "2958ca8ae1dff87efd7589038b40210eaa0b940c",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 44,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -110,15 +110,15 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         if(nProp == uint256()) {\n             if(netfulfilledman.HasFulfilledRequest(pfrom->addr, NetMsgType::MNGOVERNANCESYNC)) {\n                 // Asking for the whole list multiple times in a short period of time is no good\n-                LogPrint(\"gobject\", \"peer already asked me for the list\\n\");\n+                LogPrint(\"gobject\", \"MNGOVERNANCESYNC -- peer already asked me for the list\\n\");\n                 Misbehaving(pfrom->GetId(), 20);\n                 return;\n             }\n             netfulfilledman.AddFulfilledRequest(pfrom->addr, NetMsgType::MNGOVERNANCESYNC);\n         }\n \n         Sync(pfrom, nProp);\n-        LogPrint(\"gobject\", \"syncing governance objects to our peer at %s\\n\", pfrom->addr.ToString());\n+        LogPrint(\"gobject\", \"MNGOVERNANCESYNC -- syncing governance objects to our peer at %s\\n\", pfrom->addr.ToString());\n \n     }\n \n@@ -139,34 +139,30 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             return;\n         }\n \n-        // IS THE COLLATERAL TRANSACTION ASSOCIATED WITH THIS GOVERNANCE OBJECT MATURE/VALID?\n-\n         std::string strError = \"\";\n         // CHECK OBJECT AGAINST LOCAL BLOCKCHAIN\n \n         if(!govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n             mapSeenGovernanceObjects.insert(std::make_pair(govobj.GetHash(), SEEN_OBJECT_ERROR_INVALID));\n-            LogPrintf(\"Governance object is invalid - %s\\n\", strError);\n+            LogPrintf(\"MNGOVERNANCEOBJECT -- Governance object is invalid - %s\\n\", strError);\n             return;\n         }\n \n         // UPDATE CACHED VARIABLES FOR THIS OBJECT AND ADD IT TO OUR MANANGED DATA\n \n-        {\n-            govobj.UpdateSentinelVariables(pCurrentBlockIndex); //this sets local vars in object\n+        govobj.UpdateSentinelVariables(pCurrentBlockIndex); //this sets local vars in object\n \n-            if(AddGovernanceObject(govobj))\n-            {\n-                govobj.Relay();\n-            }\n+        if(AddGovernanceObject(govobj))\n+        {\n+            LogPrintf(\"MNGOVERNANCEOBJECT -- %s new\\n\", govobj.GetHash().ToString());\n+            govobj.Relay();\n         }\n \n         // UPDATE THAT WE'VE SEEN THIS OBJECT\n-        mapSeenGovernanceObjects.insert(make_pair(govobj.GetHash(), SEEN_OBJECT_IS_VALID));\n+        mapSeenGovernanceObjects.insert(std::make_pair(govobj.GetHash(), SEEN_OBJECT_IS_VALID));\n         masternodeSync.AddedBudgetItem(govobj.GetHash());\n \n-        LogPrintf(\"MNGOVERNANCEOBJECT -- %s new\\n\", govobj.GetHash().ToString());\n-        \n+\n         // WE MIGHT HAVE PENDING/ORPHAN VOTES FOR THIS OBJECT\n \n         CheckOrphanVotes();\n@@ -189,15 +185,15 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         // FIND THE MASTERNODE OF THE VOTER\n \n         if(!mnodeman.Has(vote.GetVinMasternode())) {\n-            LogPrint(\"gobject\", \"gobject - unknown masternode - vin: %s\\n\", vote.GetVinMasternode().ToString());\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- unknown masternode - vin: %s\\n\", vote.GetVinMasternode().ToString());\n             mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n             return;\n         }\n \n         // CHECK LOCAL VALIDITY AGAINST BLOCKCHAIN, TIME DATA, ETC\n \n         if(!vote.IsValid(true)){\n-            LogPrintf(\"gobject - signature invalid\\n\");\n+            LogPrintf(\"MNGOVERNANCEOBJECTVOTE -- signature invalid\\n\");\n             if(masternodeSync.IsSynced()) Misbehaving(pfrom->GetId(), 20);\n             // it could just be a non-synced masternode\n             mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n@@ -211,12 +207,12 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         std::string strError = \"\";\n         if(AddOrUpdateVote(vote, pfrom, strError)) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- %s new\\n\", vote.GetHash().ToString());\n             vote.Relay();\n             masternodeSync.AddedBudgetItem(vote.GetHash());\n             mnodeman.AddGovernanceVote(vote.GetVinMasternode(), vote.GetParentHash());\n         }\n \n-        LogPrint(\"gobject\", \"NEW governance vote: %s\\n\", vote.GetHash().ToString());\n     }\n \n }\n@@ -229,7 +225,7 @@ void CGovernanceManager::CheckOrphanVotes()\n     vote_m_it it1 = mapOrphanVotes.begin();\n     while(it1 != mapOrphanVotes.end()){\n         if(AddOrUpdateVote(((*it1).second), NULL, strError)){\n-            LogPrintf(\"CGovernanceManager::CheckOrphanVotes - Governance object is known, activating and removing orphan vote\\n\");\n+            LogPrintf(\"CGovernanceManager::CheckOrphanVotes -- Governance object is known, activating and removing orphan vote\\n\");\n             mapOrphanVotes.erase(it1++);\n         } else {\n             ++it1;\n@@ -247,14 +243,14 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n     // MAKE SURE THIS OBJECT IS OK\n \n     if(!govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n-        LogPrintf(\"CGovernanceManager::AddGovernanceObject - invalid governance object - %s - (pCurrentBlockIndex nHeight %d) \\n\", strError, pCurrentBlockIndex->nHeight);\n+        LogPrintf(\"CGovernanceManager::AddGovernanceObject -- invalid governance object - %s - (pCurrentBlockIndex nHeight %d) \\n\", strError, pCurrentBlockIndex->nHeight);\n         return false;\n     }\n \n     // IF WE HAVE THIS OBJECT ALREADY, WE DON'T WANT ANOTHER COPY\n \n     if(mapObjects.count(govobj.GetHash())) {\n-        LogPrintf(\"CGovernanceManager::AddGovernanceObject - already have governance object - %s\\n\", strError);\n+        LogPrintf(\"CGovernanceManager::AddGovernanceObject -- already have governance object - %s\\n\", strError);\n         return false;\n     }\n \n@@ -286,7 +282,7 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n \n void CGovernanceManager::UpdateCachesAndClean()\n {\n-    LogPrintf(\"CGovernanceManager::UpdateCachesAndClean \\n\");\n+    LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean\\n\");\n \n     std::vector<uint256> vecDirtyHashes = mnodeman.GetAndClearDirtyGovernanceObjectHashes();\n \n@@ -336,7 +332,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n         // IF DELETE=TRUE, THEN CLEAN THE MESS UP!\n \n         if(pObj->fCachedDelete || pObj->fExpired) {\n-            LogPrintf(\"UpdateCachesAndClean --- erase obj %s\\n\", (*it).first.ToString());\n+            LogPrintf(\"UpdateCachesAndClean -- erase obj %s\\n\", (*it).first.ToString());\n             mnodeman.RemoveGovernanceObject(pObj->GetHash());\n             mapObjects.erase(it++);\n         } else {\n@@ -490,7 +486,7 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n     }\n \n     pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nInvCount);\n-    LogPrintf(\"CGovernanceManager::Sync - sent %d items\\n\", nInvCount);\n+    LogPrintf(\"CGovernanceManager::Sync -- sent %d items\\n\", nInvCount);\n }\n \n void CGovernanceManager::SyncParentObjectByVote(CNode* pfrom, const CGovernanceVote& vote)\n@@ -517,15 +513,15 @@ bool CGovernanceManager::AddOrUpdateVote(const CGovernanceVote& vote, CNode* pfr\n \n                 // ADD THE VOTE AS AN ORPHAN, TO BE USED UPON RECEIVAL OF THE PARENT OBJECT\n \n-                LogPrintf(\"CGovernanceManager::AddOrUpdateVote - Unknown object %d, asking for source\\n\", vote.GetParentHash().ToString());\n+                LogPrintf(\"CGovernanceManager::AddOrUpdateVote -- Unknown object %s, asking for source\\n\", vote.GetParentHash().ToString());\n                 mapOrphanVotes[vote.GetParentHash()] = vote;\n \n                 // ASK FOR THIS VOTES PARENT SPECIFICALLY FROM THIS USER (THEY SHOULD HAVE IT, NO?)\n \n                 if(!mapAskedForGovernanceObject.count(vote.GetParentHash())){\n                     syncparent = true;\n                     votehash = vote.GetParentHash();\n-                    mapAskedForGovernanceObject[vote.GetParentHash()] = GetTime();              \n+                    mapAskedForGovernanceObject[vote.GetParentHash()] = GetTime();\n                 } else {\n                     strError = \"Governance object not found! Sync message has been already pushed.\";\n                     return false;\n@@ -554,12 +550,12 @@ bool CGovernanceManager::AddOrUpdateVote(const CGovernanceVote& vote, CNode* pfr\n     if(it != mapVotesByType.end()) {\n         if(it->second.GetTimestamp() > vote.GetTimestamp()) {\n             strError = strprintf(\"new vote older than existing vote - %s\", nTypeHash.ToString());\n-            LogPrint(\"gobject\", \"CGovernanceObject::AddOrUpdateVote - %s\\n\", strError);\n+            LogPrint(\"gobject\", \"CGovernanceObject::AddOrUpdateVote -- %s\\n\", strError);\n             return false;\n         }\n         if(vote.GetTimestamp() - it->second.GetTimestamp() < GOVERNANCE_UPDATE_MIN) {\n             strError = strprintf(\"time between votes is too soon - %s - %lli\", nTypeHash.ToString(), vote.GetTimestamp() - it->second.GetTimestamp());\n-            LogPrint(\"gobject\", \"CGovernanceObject::AddOrUpdateVote - %s\\n\", strError);\n+            LogPrint(\"gobject\", \"CGovernanceObject::AddOrUpdateVote -- %s\\n\", strError);\n             return false;\n         }\n     }\n@@ -581,7 +577,7 @@ bool CGovernanceManager::AddOrUpdateVote(const CGovernanceVote& vote, CNode* pfr\n             mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());\n         }\n     } else {\n-        LogPrintf(\"Governance object not found! Can't update fDirtyCache - %s\\n\", vote.GetParentHash().ToString());\n+        LogPrintf(\"CGovernanceObject::AddOrUpdateVote -- Governance object not found! Can't update fDirtyCache - %s\\n\", vote.GetParentHash().ToString());\n     }\n \n     return true;\n@@ -612,7 +608,7 @@ bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n         return true;\n     }\n \n-    LogPrintf(\"CGovernanceManager::MasternodeRateCheck Rate too high: vin = %s, current height = %d, last MN height = %d, minimum difference = %d\\n\", \n+    LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: vin = %s, current height = %d, last MN height = %d, minimum difference = %d\\n\",\n               vin.prevout.ToStringShort(), nCachedBlockHeight, it->second, mindiff);\n     return false;\n }\n@@ -691,7 +687,7 @@ void CGovernanceObject::SetMasternodeInfo(const CTxIn& vin)\n     vinMasternode = vin;\n }\n \n-bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubkeyMasternode)\n+bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n {\n     LOCK(cs);\n \n@@ -704,26 +700,26 @@ bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubkeyMasternode)\n         return false;\n     }\n \n-    if(!darkSendSigner.VerifyMessage(pubkeyMasternode, vchSig, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n         LogPrintf(\"CGovernanceObject::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }\n \n-    LogPrint(\"gobject\", \"CGovernanceObject::Sign: pubkey id = %s, vin = %s\\n\", \n-             pubkeyMasternode.GetID().ToString(), vinMasternode.prevout.ToStringShort());\n+    LogPrint(\"gobject\", \"CGovernanceObject::Sign -- pubkey id = %s, vin = %s\\n\",\n+             pubKeyMasternode.GetID().ToString(), vinMasternode.prevout.ToStringShort());\n \n \n     return true;\n }\n \n-bool CGovernanceObject::CheckSignature(CPubKey& pubkeyMasternode)\n+bool CGovernanceObject::CheckSignature(CPubKey& pubKeyMasternode)\n {\n     LOCK(cs);\n     std::string strError;\n     uint256 nHash = GetHash();\n     std::string strMessage = nHash.ToString();\n \n-    if(!darkSendSigner.VerifyMessage(pubkeyMasternode, vchSig, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n         LogPrintf(\"CGovernance::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }\n@@ -906,24 +902,24 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n \n     if(fCheckCollateral) { \n         if((nObjectType == GOVERNANCE_OBJECT_TRIGGER) || (nObjectType == GOVERNANCE_OBJECT_WATCHDOG)) {\n-            std::string strVin = vinMasternode.prevout.ToStringShort();\n+            std::string strOutpoint = vinMasternode.prevout.ToStringShort();\n             masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n             if(!infoMn.fInfoValid) {\n-                strError = \"Masternode not found vin: \" + strVin;\n+                strError = \"Masternode not found: \" + strOutpoint;\n                 return false;\n             }\n \n             // Check that we have a valid MN signature\n             if(!CheckSignature(infoMn.pubKeyMasternode)) {\n-                strError = \"Invalid masternode signature for: \" + strVin + \", pubkey id = \" + infoMn.pubKeyMasternode.GetID().ToString();\n+                strError = \"Invalid masternode signature for: \" + strOutpoint + \", pubkey id = \" + infoMn.pubKeyMasternode.GetID().ToString();\n                 return false;\n             }\n \n             // Only perform rate check if we are synced because during syncing it is expected\n             // that objects will be seen in rapid succession\n             if(masternodeSync.IsSynced()) {\n                 if(!governance.MasternodeRateCheck(vinMasternode, nObjectType)) {\n-                    strError = \"Masternode attempting to create too many objects vin: \" + strVin;\n+                    strError = \"Masternode attempting to create too many objects: \" + strOutpoint;\n                     return false;\n                 }\n             }\n@@ -978,13 +974,13 @@ bool CGovernanceObject::IsCollateralValid(std::string& strError)\n \n     if(!GetTransaction(nCollateralHash, txCollateral, Params().GetConsensus(), nBlockHash, true)){\n         strError = strprintf(\"Can't find collateral tx %s\", txCollateral.ToString());\n-        LogPrintf(\"CGovernanceObject::IsCollateralValid - %s\\n\", strError);\n+        LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n         return false;\n     }\n \n     if(txCollateral.vout.size() < 1) {\n         strError = strprintf(\"tx vout size less than 1 | %d\", txCollateral.vout.size());\n-        LogPrintf (\"CGovernanceObject::IsCollateralValid - %s\\n\", strError);\n+        LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n         return false;\n     }\n \n@@ -1008,7 +1004,7 @@ bool CGovernanceObject::IsCollateralValid(std::string& strError)\n              << endl; );\n         if(!o.scriptPubKey.IsNormalPaymentScript() && !o.scriptPubKey.IsUnspendable()){\n             strError = strprintf(\"Invalid Script %s\", txCollateral.ToString());\n-            LogPrintf (\"CGovernanceObject::IsCollateralValid - %s\\n\", strError);\n+            LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n             return false;\n         }\n         if(o.scriptPubKey == findScript && o.nValue >= nMinFee) {\n@@ -1023,7 +1019,7 @@ bool CGovernanceObject::IsCollateralValid(std::string& strError)\n \n     if(!foundOpReturn){\n         strError = strprintf(\"Couldn't find opReturn %s in %s\", nExpectedHash.ToString(), txCollateral.ToString());\n-        LogPrintf (\"CGovernanceObject::IsCollateralValid - %s\\n\", strError);\n+        LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n         return false;\n     }\n \n@@ -1045,7 +1041,7 @@ bool CGovernanceObject::IsCollateralValid(std::string& strError)\n         strError = \"valid\";\n     } else {\n         strError = strprintf(\"Collateral requires at least %d confirmations - %d confirmations\", GOVERNANCE_FEE_CONFIRMATIONS, nConfirmationsIn);\n-        LogPrintf (\"CGovernanceObject::IsCollateralValid - %s - %d confirmations\\n\", strError, nConfirmationsIn);\n+        LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s - %d confirmations\\n\", strError, nConfirmationsIn);\n         return false;\n     }\n "
      },
      {
        "sha": "7bed26bbf9ade04203c5daa5273452c8cab1538c",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -255,8 +255,8 @@ class CGovernanceObject\n     // Signature related functions\n \n     void SetMasternodeInfo(const CTxIn& vin);\n-    bool Sign(CKey& keyMasternode, CPubKey& pubkeyMasternode);\n-    bool CheckSignature(CPubKey& pubkeyMasternode);\n+    bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n+    bool CheckSignature(CPubKey& pubKeyMasternode);\n \n     // CORE OBJECT FUNCTIONS\n "
      },
      {
        "sha": "4171c19ee28ac3802edd2259c112f153b2fa6eaa",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -561,7 +561,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mnconf=<file>\", strprintf(_(\"Specify masternode configuration file (default: %s)\"), \"masternode.conf\"));\n     strUsage += HelpMessageOpt(\"-mnconflock=<n>\", strprintf(_(\"Lock masternodes from masternode configuration file (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-masternodeprivkey=<n>\", _(\"Set the masternode private key\"));\n-    strUsage += HelpMessageOpt(\"-masternodeaddr=<n>\", strprintf(_(\"Set external address:port to get to this masternode (example: %s)\"), \"128.127.106.235:9999\"));\n \n     strUsage += HelpMessageGroup(_(\"PrivateSend options:\"));\n     strUsage += HelpMessageOpt(\"-enableprivatesend=<n>\", strprintf(_(\"Enable use of automated PrivateSend for funds stored in this wallet (0-1, default: %u)\"), 0));\n@@ -1853,7 +1852,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"PrivateSend amount %d\\n\", nPrivateSendAmount);\n \n     darkSendPool.InitDenominations();\n-    mnodeman.InitDummyScriptPubkey();\n \n     // ********************************************************* Step 11b: Load cache data\n "
      },
      {
        "sha": "d3913eac32b601e5a76fed64f48bd5f394aa6438",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -178,20 +178,20 @@ bool IsInstantSendTxValid(const CTransaction& txCandidate)\n \n     int64_t nValueIn = 0;\n     int64_t nValueOut = 0;\n-    bool missingTx = false;\n+    bool fMissingInputs = false;\n \n-    BOOST_FOREACH(const CTxOut txout, txCandidate.vout) {\n+    BOOST_FOREACH(const CTxOut& txout, txCandidate.vout) {\n         nValueOut += txout.nValue;\n     }\n \n-    BOOST_FOREACH(const CTxIn txin, txCandidate.vin) {\n+    BOOST_FOREACH(const CTxIn& txin, txCandidate.vin) {\n         CTransaction tx2;\n         uint256 hash;\n         if(GetTransaction(txin.prevout.hash, tx2, Params().GetConsensus(), hash, true)) {\n             if(tx2.vout.size() > txin.prevout.n)\n                 nValueIn += tx2.vout[txin.prevout.n].nValue;\n         } else {\n-            missingTx = true;\n+            fMissingInputs = true;\n         }\n     }\n \n@@ -200,8 +200,8 @@ bool IsInstantSendTxValid(const CTransaction& txCandidate)\n         return false;\n     }\n \n-    if(missingTx) {\n-        LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Unknown inputs in IX transaction: txCandidate=%s\", txCandidate.ToString());\n+    if(fMissingInputs) {\n+        LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Unknown inputs in transaction: txCandidate=%s\", txCandidate.ToString());\n         /*\n             This happens sometimes for an unknown reason, so we'll return that it's a valid transaction.\n             If someone submits an invalid transaction it will be rejected by the network anyway and this isn't\n@@ -273,7 +273,7 @@ void DoConsensusVote(CTransaction& tx, int64_t nBlockHeight)\n     int n = mnodeman.GetMasternodeRank(activeMasternode.vin, nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n     if(n == -1) {\n-        LogPrint(\"instantsend\", \"DoConsensusVote -- Unknown Masternode %s\\n\", activeMasternode.vin.ToString());\n+        LogPrint(\"instantsend\", \"DoConsensusVote -- Unknown Masternode %s\\n\", activeMasternode.vin.prevout.ToStringShort());\n         return;\n     }\n \n@@ -324,9 +324,11 @@ bool ProcessConsensusVote(CNode* pnode, CConsensusVote& vote)\n         mnodeman.AskForMN(pnode, vote.vinMasternode);\n         return false;\n     }\n+    LogPrint(\"instantsend\", \"ProcessConsensusVote -- Masternode %s, rank=%d\\n\", vote.vinMasternode.prevout.ToStringShort(), n);\n \n     if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-        LogPrint(\"instantsend\", \"ProcessConsensusVote -- Masternode not in the top %d (%d): vote hash %s\\n\", INSTANTSEND_SIGNATURES_TOTAL, n, vote.GetHash().ToString());\n+        LogPrint(\"instantsend\", \"ProcessConsensusVote -- Masternode %s is not in the top %d (%d), vote hash %s\\n\",\n+                vote.vinMasternode.prevout.ToStringShort(), INSTANTSEND_SIGNATURES_TOTAL, n, vote.GetHash().ToString());\n         return false;\n     }\n \n@@ -435,7 +437,7 @@ bool FindConflictingLocks(CTransaction& tx)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n         if(mapLockedInputs.count(txin.prevout)) {\n             if(mapLockedInputs[txin.prevout] != tx.GetHash()) {\n-                LogPrintf(\"FindConflictingLocks -- found two complete conflicting locks, removing both: txid=%s, txin=%s\", tx.GetHash().ToString(), mapLockedInputs[txin.prevout].ToString());\n+                LogPrintf(\"FindConflictingLocks -- found two complete conflicting Transaction Locks, removing both: txid=%s, txin=%s\", tx.GetHash().ToString(), mapLockedInputs[txin.prevout].ToString());\n \n                 if(mapTxLocks.count(tx.GetHash()))\n                     mapTxLocks[tx.GetHash()].nLockExpirationBlock = -1;\n@@ -455,7 +457,7 @@ void ResolveConflicts(CTransaction& tx)\n {\n     // resolve conflicts\n     if (IsLockedInstandSendTransaction(tx.GetHash()) && !FindConflictingLocks(tx)) { //?????\n-        LogPrintf(\"ResolveConflicts -- Found Existing Complete IX Lock, resolving...\\n\");\n+        LogPrintf(\"ResolveConflicts -- Found existing complete Transaction Lock, resolving...\\n\");\n \n         //reprocess the last nInstantSendReprocessBlocks blocks\n         ReprocessBlocks(Params().GetConsensus().nInstantSendReprocessBlocks);\n@@ -553,7 +555,6 @@ bool CConsensusVote::CheckSignature()\n {\n     std::string strError;\n     std::string strMessage = txHash.ToString().c_str() + boost::lexical_cast<std::string>(nBlockHeight);\n-    //LogPrintf(\"verify strMessage %s \\n\", strMessage);\n \n     CMasternode* pmn = mnodeman.Find(vinMasternode);\n "
      },
      {
        "sha": "f02c308b680bf0ca1b21062edcb56b8ee81f5db0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 28,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -953,10 +953,10 @@ int GetInputAge(CTxIn& txin)\n \n         if (coins) {\n             if(coins->nHeight < 0) return 0;\n-            return (chainActive.Tip()->nHeight + 1) - coins->nHeight;\n-        }\n-        else\n+            return chainActive.Height() - coins->nHeight + 1;\n+        } else {\n             return -1;\n+        }\n     }\n }\n \n@@ -1089,13 +1089,11 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n     // ----------- InstantSend transaction scanning -----------\n \n-    BOOST_FOREACH(const CTxIn& in, tx.vin){\n-        if(mapLockedInputs.count(in.prevout)){\n-            if(mapLockedInputs[in.prevout] != tx.GetHash()){\n-                return state.DoS(0,\n-                                 error(\"AcceptToMemoryPool : conflicts with existing transaction lock: %s\", reason),\n-                                 REJECT_INVALID, \"tx-lock-conflict\");\n-            }\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        if(mapLockedInputs.count(txin.prevout) && mapLockedInputs[txin.prevout] != tx.GetHash()) {\n+            return state.DoS(0,\n+                             error(\"AcceptToMemoryPool : conflicts with existing transaction lock: %s\", reason),\n+                             REJECT_INVALID, \"tx-lock-conflict\");\n         }\n     }\n \n@@ -3731,18 +3729,16 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // DASH : CHECK TRANSACTIONS FOR INSTANT SEND\n \n     if(sporkManager.IsSporkActive(SPORK_3_INSTANTSEND_BLOCK_FILTERING)) {\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx){\n-            if (!tx.IsCoinBase()){\n-                // LOOK FOR TRANSACTION LOCK IN OUR MAP OF INPUTS\n-                BOOST_FOREACH(const CTxIn& in, tx.vin){\n-                    if(mapLockedInputs.count(in.prevout)){\n-                        if(mapLockedInputs[in.prevout] != tx.GetHash()){\n-                            mapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n-                            LogPrintf(\"CheckBlock(DASH) : found conflicting transaction with transaction lock %s %s\\n\", mapLockedInputs[in.prevout].ToString(), tx.GetHash().ToString());\n-                            return state.DoS(0, error(\"CheckBlock(DASH) : found conflicting transaction with transaction lock\"),\n-                                             REJECT_INVALID, \"conflicting-tx-ix\");\n-                        }\n-                    }\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+            // skip coinbase, it has no inputs\n+            if (tx.IsCoinBase()) continue;\n+            // LOOK FOR TRANSACTION LOCK IN OUR MAP OF INPUTS\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                if(mapLockedInputs.count(txin.prevout) && mapLockedInputs[txin.prevout] != tx.GetHash()) {\n+                    mapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n+                    LogPrintf(\"CheckBlock(DASH): found conflicting transaction with transaction lock %s %s\\n\", mapLockedInputs[txin.prevout].ToString(), tx.GetHash().ToString());\n+                    return state.DoS(0, error(\"CheckBlock(DASH): found conflicting transaction with transaction lock\"),\n+                                     REJECT_INVALID, \"conflicting-tx-ix\");\n                 }\n             }\n         }\n@@ -5181,12 +5177,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     {\n                         if(governance.HaveObjectForHash(inv.hash)) {\n                             ss.reserve(1000);\n-                            if(governance.SerializeObjectForHash(inv.hash, ss))  {\n+                            if(governance.SerializeObjectForHash(inv.hash, ss)) {\n                                 topush = true;\n                             }\n                         }\n                     }\n-                    if(topush)  {\n+                    if(topush) {\n                         pfrom->PushMessage(NetMsgType::MNGOVERNANCEOBJECT, ss);\n                         pushed = true;\n                     }\n@@ -5198,12 +5194,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     {\n                         if(governance.HaveVoteForHash(inv.hash)) {\n                             ss.reserve(1000);\n-                            if(governance.SerializeVoteForHash(inv.hash, ss))  {\n+                            if(governance.SerializeVoteForHash(inv.hash, ss)) {\n                                 topush = true;\n                             }\n                         }\n                     }\n-                    if(topush)  {\n+                    if(topush) {\n                         pfrom->PushMessage(NetMsgType::MNGOVERNANCEOBJECTVOTE, ss);\n                         pushed = true;\n                     }\n@@ -5718,13 +5714,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             {\n                 if(!pmn->fAllowMixingTx) {\n                     //multiple peers can send us a valid masternode transaction\n-                    LogPrint(\"privatesend\", \"dstx: Masternode sending too many transactions %s\\n\", tx.GetHash().ToString());\n+                    LogPrint(\"privatesend\", \"DSTX -- Masternode sending too many transactions %s\\n\", tx.GetHash().ToString());\n                     return true;\n                 }\n \n                 if(!dstx.CheckSignature()) return false;\n \n-                LogPrintf(\"dstx: Got Masternode transaction %s\\n\", tx.GetHash().ToString());\n+                LogPrintf(\"DSTX -- Got Masternode transaction %s\\n\", tx.GetHash().ToString());\n \n                 pmn->fAllowMixingTx = false;\n "
      },
      {
        "sha": "ee8c790b73cb0095764659737f5b33918952381e",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -864,6 +864,4 @@ void CMasternodePayments::UpdatedBlockTip(const CBlockIndex *pindex)\n     LogPrint(\"mnpayments\", \"CMasternodePayments::UpdatedBlockTip -- pCurrentBlockIndex->nHeight=%d\\n\", pCurrentBlockIndex->nHeight);\n \n     ProcessBlock(pindex->nHeight + 10);\n-    // normal wallet does not need to update this every block, doing update on rpc call should be enough\n-    if(fMasterNode) mnodeman.UpdateLastPaid(pindex);\n }"
      },
      {
        "sha": "34ffb940d54180dd52b8ca99cb2b94f4a0c66a88",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 18,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -20,14 +20,14 @@ CMasternodeSync masternodeSync;\n bool CMasternodeSync::IsBlockchainSynced()\n {\n     static bool fBlockchainSynced = false;\n-    static int64_t lastProcess = GetTime();\n+    static int64_t nTimeLastProcess = GetTime();\n \n     // if the last call to this function was more than 60 minutes ago (client was in sleep mode) reset the sync process\n-    if(GetTime() - lastProcess > 60*60) {\n+    if(GetTime() - nTimeLastProcess > 60*60) {\n         Reset();\n         fBlockchainSynced = false;\n     }\n-    lastProcess = GetTime();\n+    nTimeLastProcess = GetTime();\n \n     if(fBlockchainSynced) return true;\n     if(!pCurrentBlockIndex || !pindexBestHeader || fImporting || fReindex) return false;\n@@ -143,7 +143,7 @@ void CMasternodeSync::ProcessMessage(CNode* pfrom, std::string& strCommand, CDat\n         int nCount;\n         vRecv >> nItemID >> nCount;\n \n-        LogPrintf(\"CMasternodeSync::ProcessMessage -- SYNCSTATUSCOUNT -- got inventory count: nItemID=%d  nCount=%d  peer=%d\\n\", nItemID, nCount, pfrom->id);\n+        LogPrintf(\"SYNCSTATUSCOUNT -- got inventory count: nItemID=%d  nCount=%d  peer=%d\\n\", nItemID, nCount, pfrom->id);\n     }\n }\n \n@@ -171,7 +171,7 @@ void CMasternodeSync::ProcessTick()\n     //the actual count of masternodes we have currently\n     int nMnCount = mnodeman.CountMasternodes();\n \n-    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nMnCount = %d\\n\", nTick, nMnCount);\n+    if(fDebug) LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nMnCount %d\\n\", nTick, nMnCount);\n \n     // RESET SYNCING INCASE OF FAILURE\n     {\n@@ -180,6 +180,7 @@ void CMasternodeSync::ProcessTick()\n                 Resync if we lose all masternodes from sleep/wake or failure to sync originally\n             */\n             if(nMnCount == 0) {\n+                LogPrintf(\"CMasternodeSync::ProcessTick -- WARNING: not enough data, restarting sync\\n\");\n                 Reset();\n             } else {\n                 //if syncing is complete and we have masternodes, return\n@@ -198,12 +199,16 @@ void CMasternodeSync::ProcessTick()\n \n     // INITIAL SYNC SETUP / LOG REPORTING\n     double nSyncProgress = double(nRequestedMasternodeAttempt + (nRequestedMasternodeAssets - 1) * 8) / (8*4);\n-    LogPrintf(\"CMasternodeSync::Process -- nTick %d nRequestedMasternodeAssets %d nRequestedMasternodeAttempt %d nSyncProgress %f\\n\", nTick, nRequestedMasternodeAssets, nRequestedMasternodeAttempt, nSyncProgress);\n+    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nRequestedMasternodeAttempt %d nSyncProgress %f\\n\", nTick, nRequestedMasternodeAssets, nRequestedMasternodeAttempt, nSyncProgress);\n     uiInterface.NotifyAdditionalDataSyncProgressChanged(nSyncProgress);\n \n     // sporks synced but blockchain is not, wait until we're almost at a recent block to continue\n     if(Params().NetworkIDString() != CBaseChainParams::REGTEST &&\n-            !IsBlockchainSynced() && nRequestedMasternodeAssets > MASTERNODE_SYNC_SPORKS) return;\n+            !IsBlockchainSynced() && nRequestedMasternodeAssets > MASTERNODE_SYNC_SPORKS)\n+    {\n+        LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nRequestedMasternodeAttempt %d -- blockchain is not synced yet\\n\", nTick, nRequestedMasternodeAssets, nRequestedMasternodeAttempt);\n+        return;\n+    }\n \n     TRY_LOCK(cs_vNodes, lockRecv);\n     if(!lockRecv) return;\n@@ -241,7 +246,7 @@ void CMasternodeSync::ProcessTick()\n                 // we already fully synced from this node recently,\n                 // disconnect to free this connection slot for a new node\n                 pnode->fDisconnect = true;\n-                LogPrintf(\"CMasternodeSync::ProcessTick -- disconnecting from recently synced node %d\\n\", pnode->id);\n+                LogPrintf(\"CMasternodeSync::ProcessTick -- disconnecting from recently synced peer %d\\n\", pnode->id);\n                 continue;\n             }\n \n@@ -252,17 +257,19 @@ void CMasternodeSync::ProcessTick()\n                 netfulfilledman.AddFulfilledRequest(pnode->addr, \"spork-sync\");\n                 // get current network sporks\n                 pnode->PushMessage(NetMsgType::GETSPORKS);\n+                LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- requesting sporks from peer %d\\n\", nTick, nRequestedMasternodeAssets, pnode->id);\n                 continue; // always get sporks first, switch to the next node without waiting for the next tick\n             }\n \n             // MNLIST : SYNC MASTERNODE LIST FROM OTHER CONNECTED CLIENTS\n \n             if(nRequestedMasternodeAssets == MASTERNODE_SYNC_LIST) {\n+                LogPrint(\"masternode\", \"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nTimeLastMasternodeList %lld GetTime() %lld diff %lld\\n\", nTick, nRequestedMasternodeAssets, nTimeLastMasternodeList, GetTime(), GetTime() - nTimeLastMasternodeList);\n                 // check for timeout first\n                 if(nTimeLastMasternodeList < GetTime() - MASTERNODE_SYNC_TIMEOUT_SECONDS) {\n-                    LogPrintf(\"CMasternodeSync::Process -- nTick %d nRequestedMasternodeAssets %d -- timeout\\n\", nTick, nRequestedMasternodeAssets);\n+                    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- timeout\\n\", nTick, nRequestedMasternodeAssets);\n                     if (nRequestedMasternodeAttempt == 0) {\n-                        LogPrintf(\"CMasternodeSync::Process -- WARNING: failed to sync %s\\n\", GetAssetName());\n+                        LogPrintf(\"CMasternodeSync::ProcessTick -- ERROR: failed to sync %s\\n\", GetAssetName());\n                         // there is no way we can continue without masternode list, fail here and try later\n                         Fail();\n                         return;\n@@ -276,9 +283,10 @@ void CMasternodeSync::ProcessTick()\n                 /* Note: Is this activing up? It's probably related to int CMasternodeMan::GetEstimatedMasternodes(int nBlock)\n                    Surely doesn't work right for testnet currently */\n                 // try to fetch data from at least two peers though\n-                LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nMnCount %d, Estimated masternode count required: %d\\n\", \n-                          nTick, nMnCount, mnodeman.GetEstimatedMasternodes(pCurrentBlockIndex->nHeight)*0.9);\n-                if(nRequestedMasternodeAttempt > 1 && nMnCount > mnodeman.GetEstimatedMasternodes(pCurrentBlockIndex->nHeight)*0.9) {\n+                int nMnCountEstimated = mnodeman.GetEstimatedMasternodes(pCurrentBlockIndex->nHeight)*0.9;\n+                LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nMnCount %d nMnCountEstimated %d\\n\",\n+                          nTick, nMnCount, nMnCountEstimated);\n+                if(nRequestedMasternodeAttempt > 1 && nMnCount > nMnCountEstimated) {\n                     LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- found enough data\\n\", nTick, nRequestedMasternodeAssets);\n                     SwitchToNextAsset();\n                     return;\n@@ -299,13 +307,14 @@ void CMasternodeSync::ProcessTick()\n             // MNW : SYNC MASTERNODE PAYMENT VOTES FROM OTHER CONNECTED CLIENTS\n \n             if(nRequestedMasternodeAssets == MASTERNODE_SYNC_MNW) {\n+                LogPrint(\"mnpayments\", \"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nTimeLastPaymentVote %lld GetTime() %lld diff %lld\\n\", nTick, nRequestedMasternodeAssets, nTimeLastPaymentVote, GetTime(), GetTime() - nTimeLastPaymentVote);\n                 // check for timeout first\n                 // This might take a lot longer than MASTERNODE_SYNC_TIMEOUT_SECONDS minutes due to new blocks,\n                 // but that should be OK and it should timeout eventually.\n                 if(nTimeLastPaymentVote < GetTime() - MASTERNODE_SYNC_TIMEOUT_SECONDS) {\n-                    LogPrintf(\"CMasternodeSync::Process -- nTick %d nRequestedMasternodeAssets %d -- timeout\\n\", nTick, nRequestedMasternodeAssets);\n+                    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- timeout\\n\", nTick, nRequestedMasternodeAssets);\n                     if (nRequestedMasternodeAttempt == 0) {\n-                        LogPrintf(\"CMasternodeSync::Process -- WARNING: failed to sync %s\\n\", GetAssetName());\n+                        LogPrintf(\"CMasternodeSync::ProcessTick -- ERROR: failed to sync %s\\n\", GetAssetName());\n                         // probably not a good idea to proceed without winner list\n                         Fail();\n                         return;\n@@ -318,7 +327,7 @@ void CMasternodeSync::ProcessTick()\n                 // if mnpayments already has enough blocks and votes, switch to the next asset\n                 // try to fetch data from at least two peers though\n                 if(nRequestedMasternodeAttempt > 1 && mnpayments.IsEnoughData()) {\n-                    LogPrintf(\"CMasternodeSync::Process -- nTick %d nRequestedMasternodeAssets %d -- found enough data\\n\", nTick, nRequestedMasternodeAssets);\n+                    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- found enough data\\n\", nTick, nRequestedMasternodeAssets);\n                     SwitchToNextAsset();\n                     return;\n                 }\n@@ -341,11 +350,13 @@ void CMasternodeSync::ProcessTick()\n             // GOVOBJ : SYNC GOVERNANCE ITEMS FROM OUR PEERS\n \n             if(nRequestedMasternodeAssets == MASTERNODE_SYNC_GOVERNANCE) {\n+                LogPrint(\"mnpayments\", \"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nTimeLastPaymentVote %lld GetTime() %lld diff %lld\\n\", nTick, nRequestedMasternodeAssets, nTimeLastPaymentVote, GetTime(), GetTime() - nTimeLastPaymentVote);\n+\n                 // check for timeout first\n                 if(nTimeLastBudgetItem < GetTime() - MASTERNODE_SYNC_TIMEOUT_SECONDS){\n-                    LogPrintf(\"CMasternodeSync::Process -- nTick %d nRequestedMasternodeAssets %d -- timeout\\n\", nTick, nRequestedMasternodeAssets);\n+                    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- timeout\\n\", nTick, nRequestedMasternodeAssets);\n                     if(nRequestedMasternodeAttempt == 0) {\n-                        LogPrintf(\"CMasternodeSync::Process -- WARNING: failed to sync %s\\n\", GetAssetName());\n+                        LogPrintf(\"CMasternodeSync::ProcessTick -- WARNING: failed to sync %s\\n\", GetAssetName());\n                         // it's kind of ok to skip this for now, hopefully we'll catch up later?\n                     }\n                     SwitchToNextAsset();"
      },
      {
        "sha": "2131d2c21cda12bd0b6f03b6f09013d12a20924c",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -396,7 +396,7 @@ bool CMasternodeBroadcast::Create(CTxIn txin, CService service, CKey keyCollater\n     CMasternodePing mnp(txin);\n     if(!mnp.Sign(keyMasternodeNew, pubKeyMasternodeNew)) {\n         strErrorRet = strprintf(\"Failed to sign ping, masternode=%s\", txin.prevout.ToStringShort());\n-        LogPrintf(\"CMasternodeBroadcast::Create --  %s\\n\", strErrorRet);\n+        LogPrintf(\"CMasternodeBroadcast::Create -- %s\\n\", strErrorRet);\n         mnbRet = CMasternodeBroadcast();\n         return false;\n     }\n@@ -565,7 +565,7 @@ bool CMasternodeBroadcast::CheckOutpoint(int& nDos)\n             return false;\n         }\n         if(chainActive.Height() - coins.nHeight + 1 < Params().GetConsensus().nMasternodeMinimumConfirmations) {\n-            LogPrintf(\"CMasternodeBroadcast::CheckOutpoint -- Masternode UTXO must have at least %d confirmations, masternode=\\n\",\n+            LogPrintf(\"CMasternodeBroadcast::CheckOutpoint -- Masternode UTXO must have at least %d confirmations, masternode=%s\\n\",\n                     Params().GetConsensus().nMasternodeMinimumConfirmations, vin.prevout.ToStringShort());\n             // maybe we miss few blocks, let this mnb to be checked again later\n             mnodeman.mapSeenMasternodeBroadcast.erase(GetHash());"
      },
      {
        "sha": "72bab29fd7d0893500dc63a15f1811183f5626c7",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 94,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -55,9 +55,8 @@ bool CMasternodeMan::Add(CMasternode &mn)\n         return false;\n \n     CMasternode *pmn = Find(mn.vin);\n-    if (pmn == NULL)\n-    {\n-        LogPrint(\"masternode\", \"CMasternodeMan: Adding new Masternode %s - %i now\\n\", mn.addr.ToString(), size() + 1);\n+    if (pmn == NULL) {\n+        LogPrint(\"masternode\", \"CMasternodeMan::Add -- Adding new Masternode: addr=%s, %i now\\n\", mn.addr.ToString(), size() + 1);\n         vMasternodes.push_back(mn);\n         return true;\n     }\n@@ -67,19 +66,19 @@ bool CMasternodeMan::Add(CMasternode &mn)\n \n void CMasternodeMan::AskForMN(CNode* pnode, CTxIn &vin)\n {\n-    std::map<COutPoint, int64_t>::iterator i = mWeAskedForMasternodeListEntry.find(vin.prevout);\n-    if (i != mWeAskedForMasternodeListEntry.end())\n-    {\n-        int64_t t = (*i).second;\n-        if (GetTime() < t) return; // we've asked recently\n+    if(!pnode) return;\n+\n+    std::map<COutPoint, int64_t>::iterator it = mWeAskedForMasternodeListEntry.find(vin.prevout);\n+    if (it != mWeAskedForMasternodeListEntry.end() && GetTime() < (*it).second) {\n+        // we've asked recently, should not repeat too often or we could get banned\n+        return;\n     }\n \n     // ask for the mnb info once from the node that sent mnp\n \n-    LogPrintf(\"CMasternodeMan::AskForMN - Asking node for missing entry, vin: %s\\n\", vin.ToString());\n+    LogPrintf(\"CMasternodeMan::AskForMN -- Asking node for missing masternode entry: %s\\n\", vin.prevout.ToStringShort());\n     pnode->PushMessage(NetMsgType::DSEG, vin);\n-    int64_t askAgain = GetTime() + MASTERNODE_MIN_MNP_SECONDS;\n-    mWeAskedForMasternodeListEntry[vin.prevout] = askAgain;\n+    mWeAskedForMasternodeListEntry[vin.prevout] = GetTime() + DSEG_UPDATE_SECONDS;;\n }\n \n void CMasternodeMan::Check()\n@@ -127,7 +126,7 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n     }\n \n     // check who's asked for the Masternode list\n-    map<CNetAddr, int64_t>::iterator it1 = mAskedUsForMasternodeList.begin();\n+    std::map<CNetAddr, int64_t>::iterator it1 = mAskedUsForMasternodeList.begin();\n     while(it1 != mAskedUsForMasternodeList.end()){\n         if((*it1).second < GetTime()) {\n             mAskedUsForMasternodeList.erase(it1++);\n@@ -147,7 +146,7 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n     }\n \n     // check which Masternodes we've asked for\n-    map<COutPoint, int64_t>::iterator it2 = mWeAskedForMasternodeListEntry.begin();\n+    std::map<COutPoint, int64_t>::iterator it2 = mWeAskedForMasternodeListEntry.begin();\n     while(it2 != mWeAskedForMasternodeListEntry.end()){\n         if((*it2).second < GetTime()){\n             mWeAskedForMasternodeListEntry.erase(it2++);\n@@ -166,21 +165,21 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n     }\n \n     // remove expired mapSeenMasternodeBroadcast\n-    map<uint256, CMasternodeBroadcast>::iterator it3 = mapSeenMasternodeBroadcast.begin();\n+    std::map<uint256, CMasternodeBroadcast>::iterator it3 = mapSeenMasternodeBroadcast.begin();\n     while(it3 != mapSeenMasternodeBroadcast.end()){\n         if((*it3).second.lastPing.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n-            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove - Removing expired Masternode broadcast %s\\n\", (*it3).second.GetHash().ToString());\n+            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode broadcast: hash=%s\\n\", (*it3).second.GetHash().ToString());\n             mapSeenMasternodeBroadcast.erase(it3++);\n         } else {\n             ++it3;\n         }\n     }\n \n     // remove expired mapSeenMasternodePing\n-    map<uint256, CMasternodePing>::iterator it4 = mapSeenMasternodePing.begin();\n+    std::map<uint256, CMasternodePing>::iterator it4 = mapSeenMasternodePing.begin();\n     while(it4 != mapSeenMasternodePing.end()){\n         if((*it4).second.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n-            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove - Removing expired Masternode ping %s\\n\", (*it4).second.GetHash().ToString());\n+            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode ping: hash=%s\\n\", (*it4).second.GetHash().ToString());\n             mapSeenMasternodePing.erase(it4++);\n         } else {\n             ++it4;\n@@ -197,6 +196,8 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n             ++itv2;\n         }\n     }\n+\n+    LogPrintf(\"CMasternodeMan::CheckAndRemove -- %s\\n\", ToString());\n }\n \n void CMasternodeMan::Clear()\n@@ -212,73 +213,74 @@ void CMasternodeMan::Clear()\n     nLastWatchdogVoteTime = 0;\n }\n \n-int CMasternodeMan::CountMasternodes(int protocolVersion)\n+int CMasternodeMan::CountMasternodes(int nProtocolVersion)\n {\n     LOCK(cs);\n-    int i = 0;\n-    protocolVersion = protocolVersion == -1 ? mnpayments.GetMinMasternodePaymentsProto() : protocolVersion;\n+    int nCount = 0;\n+    nProtocolVersion = nProtocolVersion == -1 ? mnpayments.GetMinMasternodePaymentsProto() : nProtocolVersion;\n \n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n-        if(mn.nProtocolVersion < protocolVersion) continue;\n-        i++;\n+        if(mn.nProtocolVersion < nProtocolVersion) continue;\n+        nCount++;\n     }\n \n-    return i;\n+    return nCount;\n }\n \n-int CMasternodeMan::CountEnabled(int protocolVersion)\n+int CMasternodeMan::CountEnabled(int nProtocolVersion)\n {\n     LOCK(cs);\n-    int i = 0;\n-    protocolVersion = protocolVersion == -1 ? mnpayments.GetMinMasternodePaymentsProto() : protocolVersion;\n+    int nCount = 0;\n+    nProtocolVersion = nProtocolVersion == -1 ? mnpayments.GetMinMasternodePaymentsProto() : nProtocolVersion;\n \n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n         mn.Check();\n-        if(mn.nProtocolVersion < protocolVersion || !mn.IsEnabled()) continue;\n-        i++;\n+        if(mn.nProtocolVersion < nProtocolVersion || !mn.IsEnabled()) continue;\n+        nCount++;\n     }\n \n-    return i;\n+    return nCount;\n }\n \n+/* Only IPv4 masternodes are allowed in 12.1, saving this for later\n int CMasternodeMan::CountByIP(int nNetworkType)\n {\n     LOCK(cs);\n     int nNodeCount = 0;\n \n     BOOST_FOREACH(CMasternode& mn, vMasternodes)\n-        if( (nNetworkType == NET_IPV4 && mn.addr.IsIPv4()) ||\n+        if ((nNetworkType == NET_IPV4 && mn.addr.IsIPv4()) ||\n             (nNetworkType == NET_TOR  && mn.addr.IsTor())  ||\n             (nNetworkType == NET_IPV6 && mn.addr.IsIPv6())) {\n                 nNodeCount++;\n         }\n \n     return nNodeCount;\n }\n+*/\n \n void CMasternodeMan::DsegUpdate(CNode* pnode)\n {\n     LOCK(cs);\n \n     if(Params().NetworkIDString() == CBaseChainParams::MAIN) {\n-        if(!(pnode->addr.IsRFC1918() || pnode->addr.IsLocal())){\n+        if(!(pnode->addr.IsRFC1918() || pnode->addr.IsLocal())) {\n             std::map<CNetAddr, int64_t>::iterator it = mWeAskedForMasternodeList.find(pnode->addr);\n-            if (it != mWeAskedForMasternodeList.end())\n-            {\n-                if (GetTime() < (*it).second) {\n-                    LogPrintf(\"dseg - we already asked %s for the list; skipping...\\n\", pnode->addr.ToString());\n-                    return;\n-                }\n+            if(it != mWeAskedForMasternodeList.end() && GetTime() < (*it).second) {\n+                LogPrintf(\"CMasternodeMan::DsegUpdate -- we already asked %s for the list; skipping...\\n\", pnode->addr.ToString());\n+                return;\n             }\n         }\n     }\n     \n     pnode->PushMessage(NetMsgType::DSEG, CTxIn());\n     int64_t askAgain = GetTime() + DSEG_UPDATE_SECONDS;\n     mWeAskedForMasternodeList[pnode->addr] = askAgain;\n+\n+    LogPrint(\"masternode\", \"CMasternodeMan::DsegUpdate -- asked %s for the list\\n\", pnode->addr.ToString());\n }\n \n-CMasternode *CMasternodeMan::Find(const CScript &payee)\n+CMasternode* CMasternodeMan::Find(const CScript &payee)\n {\n     LOCK(cs);\n \n@@ -290,7 +292,7 @@ CMasternode *CMasternodeMan::Find(const CScript &payee)\n     return NULL;\n }\n \n-CMasternode *CMasternodeMan::Find(const CTxIn &vin)\n+CMasternode* CMasternodeMan::Find(const CTxIn &vin)\n {\n     LOCK(cs);\n \n@@ -369,7 +371,7 @@ bool CMasternodeMan::Has(const CTxIn& vin)\n     return (pMN != NULL);\n }\n \n-// \n+//\n // Deterministically select the oldest/best masternode to pay on the network\n //\n CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight, bool fFilterSigTime, int& nCount)\n@@ -398,7 +400,7 @@ CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight\n         //it's too new, wait for a cycle\n         if(fFilterSigTime && mn.sigTime + (nMnCount*2.6*60) > GetAdjustedTime()) continue;\n \n-        //make sure it has as many confirmations as there are masternodes\n+        //make sure it has at least as many confirmations as there are masternodes\n         if(mn.GetCollateralAge() < nMnCount) continue;\n \n         vecMasternodeLastPaid.push_back(std::make_pair(mn.GetLastPaidBlock(), &mn));\n@@ -436,7 +438,7 @@ CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight\n     return pBestMasternode;\n }\n \n-CMasternode *CMasternodeMan::FindRandomNotInVec(std::vector<CTxIn> &vecToExclude, int nProtocolVersion)\n+CMasternode* CMasternodeMan::FindRandomNotInVec(const std::vector<CTxIn> &vecToExclude, int nProtocolVersion)\n {\n     LOCK(cs);\n \n@@ -445,7 +447,7 @@ CMasternode *CMasternodeMan::FindRandomNotInVec(std::vector<CTxIn> &vecToExclude\n     int nCountEnabled = CountEnabled(nProtocolVersion);\n     int nCountNotExcluded = nCountEnabled - vecToExclude.size();\n \n-    LogPrintf(\"CMasternodeMan::FindRandomNotInVec -- %d enabled masternodes, %d masternodes aren't yet exluded\\n\", nCountEnabled, nCountNotExcluded);\n+    LogPrintf(\"CMasternodeMan::FindRandomNotInVec -- %d enabled masternodes, %d masternodes to choose from\\n\", nCountEnabled, nCountNotExcluded);\n     if(nCountNotExcluded < 1) return NULL;\n \n     // fill a vector of pointers\n@@ -462,7 +464,7 @@ CMasternode *CMasternodeMan::FindRandomNotInVec(std::vector<CTxIn> &vecToExclude\n     BOOST_FOREACH(CMasternode* pmn, vpMasternodesShuffled) {\n         if(pmn->nProtocolVersion < nProtocolVersion || !pmn->IsEnabled()) continue;\n         fExclude = false;\n-        BOOST_FOREACH(CTxIn &txinToExclude, vecToExclude) {\n+        BOOST_FOREACH(const CTxIn &txinToExclude, vecToExclude) {\n             if(pmn->vin.prevout == txinToExclude.prevout) {\n                 fExclude = true;\n                 break;\n@@ -478,7 +480,7 @@ CMasternode *CMasternodeMan::FindRandomNotInVec(std::vector<CTxIn> &vecToExclude\n     return NULL;\n }\n \n-int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int64_t nBlockHeight, int minProtocol, bool fOnlyActive)\n+int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int nBlockHeight, int nMinProtocol, bool fOnlyActive)\n {\n     std::vector<std::pair<int64_t, CMasternode*> > vecMasternodeScores;\n \n@@ -490,7 +492,7 @@ int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int64_t nBlockHeight, in\n \n     // scan for winner\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n-        if(mn.nProtocolVersion < minProtocol) continue;\n+        if(mn.nProtocolVersion < nMinProtocol) continue;\n         if(fOnlyActive) {\n             mn.Check();\n             if(!mn.IsEnabled()) continue;\n@@ -511,7 +513,7 @@ int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int64_t nBlockHeight, in\n     return -1;\n }\n \n-std::vector<pair<int, CMasternode> > CMasternodeMan::GetMasternodeRanks(int64_t nBlockHeight, int minProtocol)\n+std::vector<std::pair<int, CMasternode> > CMasternodeMan::GetMasternodeRanks(int nBlockHeight, int nMinProtocol)\n {\n     std::vector<std::pair<int64_t, CMasternode*> > vecMasternodeScores;\n     std::vector<std::pair<int, CMasternode> > vecMasternodeRanks;\n@@ -527,7 +529,7 @@ std::vector<pair<int, CMasternode> > CMasternodeMan::GetMasternodeRanks(int64_t\n \n         mn.Check();\n \n-        if(mn.nProtocolVersion < minProtocol || !mn.IsEnabled()) continue;\n+        if(mn.nProtocolVersion < nMinProtocol || !mn.IsEnabled()) continue;\n \n         int64_t nScore = mn.CalculateScore(blockHash).GetCompact(false);\n \n@@ -545,7 +547,7 @@ std::vector<pair<int, CMasternode> > CMasternodeMan::GetMasternodeRanks(int64_t\n     return vecMasternodeRanks;\n }\n \n-CMasternode* CMasternodeMan::GetMasternodeByRank(int nRank, int64_t nBlockHeight, int minProtocol, bool fOnlyActive)\n+CMasternode* CMasternodeMan::GetMasternodeByRank(int nRank, int nBlockHeight, int nMinProtocol, bool fOnlyActive)\n {\n     std::vector<std::pair<int64_t, CMasternode*> > vecMasternodeScores;\n \n@@ -560,7 +562,7 @@ CMasternode* CMasternodeMan::GetMasternodeByRank(int nRank, int64_t nBlockHeight\n     // Fill scores\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n \n-        if(mn.nProtocolVersion < minProtocol) continue;\n+        if(mn.nProtocolVersion < nMinProtocol) continue;\n         if(fOnlyActive) {\n             mn.Check();\n             if(!mn.IsEnabled()) continue;\n@@ -584,22 +586,6 @@ CMasternode* CMasternodeMan::GetMasternodeByRank(int nRank, int64_t nBlockHeight\n     return NULL;\n }\n \n-void CMasternodeMan::InitDummyScriptPubkey() {\n-    CKey secret;\n-    secret.MakeNewKey(true);\n-\n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n-\n-    if (pubkey.IsValid()) {\n-        CKeyID keyID = pubkey.GetID();\n-        LogPrintf(\"Generated dummyScriptPubkey: address %s privkey %s\\n\", CBitcoinAddress(keyID).ToString(), CBitcoinSecret(secret).ToString());\n-        dummyScriptPubkey = GetScriptForDestination(keyID);\n-    } else {\n-        LogPrintf(\"CMasternodeMan::InitDummyScriptPubkey - ERROR: can't assign dummyScriptPubkey\\n\");\n-    }\n-}\n-\n void CMasternodeMan::ProcessMasternodeConnections()\n {\n     //we don't care about this for regtest\n@@ -609,21 +595,21 @@ void CMasternodeMan::ProcessMasternodeConnections()\n     BOOST_FOREACH(CNode* pnode, vNodes) {\n         if(pnode->fMasternode) {\n             if(darkSendPool.pSubmittedToMasternode != NULL && pnode->addr == darkSendPool.pSubmittedToMasternode->addr) continue;\n-            LogPrintf(\"Closing Masternode connection %s \\n\", pnode->addr.ToString());\n+            LogPrintf(\"Closing Masternode connection: peer=%d, addr=%s\\n\", pnode->id, pnode->addr.ToString());\n             pnode->fDisconnect = true;\n         }\n     }\n }\n \n void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv)\n {\n-\n-    if(fLiteMode) return; //disable all Darksend/Masternode related functionality\n+    if(fLiteMode) return; // disable all Dash specific functionality\n     if(!masternodeSync.IsBlockchainSynced()) return;\n \n     LOCK(cs);\n \n     if (strCommand == NetMsgType::MNANNOUNCE) { //Masternode Broadcast\n+\n         CMasternodeBroadcast mnb;\n         vRecv >> mnb;\n \n@@ -632,8 +618,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         if (CheckMnbAndUpdateMasternodeList(mnb, nDos)) {\n             // use announced Masternode as a peer\n             addrman.Add(CAddress(mnb.addr), pfrom->addr, 2*60*60);\n-        } else {\n-            if(nDos > 0) Misbehaving(pfrom->GetId(), nDos);\n+        } else if(nDos > 0) {\n+            Misbehaving(pfrom->GetId(), nDos);\n         }\n \n     } else if (strCommand == NetMsgType::MNPING) { //Masternode Ping\n@@ -644,12 +630,12 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         CMasternodePing mnp;\n         vRecv >> mnp;\n \n-        LogPrint(\"masternode\", \"mnp - Masternode ping, vin: %s\\n\", mnp.vin.ToString());\n+        LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s\\n\", mnp.vin.prevout.ToStringShort());\n \n         if(mapSeenMasternodePing.count(mnp.GetHash())) return; //seen\n-        mapSeenMasternodePing.insert(make_pair(mnp.GetHash(), mnp));\n+        mapSeenMasternodePing.insert(std::make_pair(mnp.GetHash(), mnp));\n \n-        LogPrint(\"masternode\", \"mnp - Masternode ping, vin: %s new\\n\", mnp.vin.ToString());\n+        LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s new\\n\", mnp.vin.prevout.ToStringShort());\n \n         int nDos = 0;\n         if(mnp.CheckAndUpdate(nDos, false)) return;\n@@ -678,7 +664,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         CTxIn vin;\n         vRecv >> vin;\n \n-        LogPrint(\"masternode\", \"CMasternodeMan::ProcessMessage -- DSEG -- Masternode list, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        LogPrint(\"masternode\", \"DSEG -- Masternode list, masternode=%s\\n\", vin.prevout.ToStringShort());\n \n         if(vin == CTxIn()) { //only should ask for this once\n             //local network\n@@ -690,7 +676,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n                     int64_t t = (*i).second;\n                     if (GetTime() < t) {\n                         Misbehaving(pfrom->GetId(), 34);\n-                        LogPrintf(\"CMasternodeMan::ProcessMessage -- DSEG -- peer already asked me for the list, peer=\\n\", pfrom->id);\n+                        LogPrintf(\"DSEG -- peer already asked me for the list, peer=%d\\n\", pfrom->id);\n                         return;\n                     }\n                 }\n@@ -706,7 +692,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n             if (mn.addr.IsRFC1918() || mn.addr.IsLocal()) continue; // do not send local network masternode\n             if (!mn.IsEnabled()) continue;\n \n-            LogPrint(\"masternode\", \"CMasternodeMan::ProcessMessage -- DSEG -- Sending Masternode entry: masternode=%s  addr=%s\\n\", mn.vin.prevout.ToStringShort(), mn.addr.ToString());\n+            LogPrint(\"masternode\", \"DSEG -- Sending Masternode entry: masternode=%s  addr=%s\\n\", mn.vin.prevout.ToStringShort(), mn.addr.ToString());\n             CMasternodeBroadcast mnb = CMasternodeBroadcast(mn);\n             uint256 hash = mnb.GetHash();\n             pfrom->PushInventory(CInv(MSG_MASTERNODE_ANNOUNCE, hash));\n@@ -717,18 +703,18 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n             }\n \n             if (vin == mn.vin) {\n-                LogPrintf(\"CMasternodeMan::ProcessMessage -- DSEG -- Sent 1 Masternode inv to peer %d\\n\", pfrom->id);\n+                LogPrintf(\"DSEG -- Sent 1 Masternode inv to peer %d\\n\", pfrom->id);\n                 return;\n             }\n         }\n \n         if(vin == CTxIn()) {\n             pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_LIST, nInvCount);\n-            LogPrintf(\"CMasternodeMan::ProcessMessage -- DSEG -- Sent %d Masternode invs to peer %d\\n\", nInvCount, pfrom->id);\n+            LogPrintf(\"DSEG -- Sent %d Masternode invs to peer %d\\n\", nInvCount, pfrom->id);\n             return;\n         }\n         // smth weird happen - someone asked us for vin we have no idea about?\n-        LogPrint(\"masternode\", \"CMasternodeMan::ProcessMessage -- DSEG -- No invs sent to peer %d\\n\", pfrom->id);\n+        LogPrint(\"masternode\", \"DSEG -- No invs sent to peer %d\\n\", pfrom->id);\n \n     } else if (strCommand == NetMsgType::MNVERIFY) { // Masternode Verify\n \n@@ -748,6 +734,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n     }\n }\n \n+// Verification of masternodes via unique direct requests.\n+\n void CMasternodeMan::DoFullVerificationStep()\n {\n     if(activeMasternode.vin == CTxIn()) return;\n@@ -817,6 +805,11 @@ void CMasternodeMan::DoFullVerificationStep()\n     LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Sent verification requests to %d masternodes\\n\", nCount);\n }\n \n+// This function tries to find masternodes with the same addr,\n+// find a verified one and ban all the other. If there are many nodes\n+// with the same addr but none of them is verified yet, then none of them are banned.\n+// It could take many times to run this before most of the duplicate nodes are banned.\n+\n void CMasternodeMan::CheckSameAddr()\n {\n     if(!masternodeSync.IsSynced() || vMasternodes.empty()) return;\n@@ -1150,10 +1143,10 @@ void CMasternodeMan::Remove(CTxIn vin)\n {\n     LOCK(cs);\n \n-    vector<CMasternode>::iterator it = vMasternodes.begin();\n-    while(it != vMasternodes.end()){\n-        if((*it).vin == vin){\n-            LogPrint(\"masternode\", \"CMasternodeMan: Removing Masternode %s - %i now\\n\", (*it).addr.ToString(), size() - 1);\n+    std::vector<CMasternode>::iterator it = vMasternodes.begin();\n+    while(it != vMasternodes.end()) {\n+        if((*it).vin == vin) {\n+            LogPrint(\"masternode\", \"CMasternodeMan::Remove -- Removing Masternode: %s  addr=%s, %i now\\n\", vin.prevout.ToStringShort(), (*it).addr.ToString(), size() - 1);\n             vMasternodes.erase(it);\n             break;\n         }\n@@ -1178,35 +1171,34 @@ int CMasternodeMan::GetEstimatedMasternodes(int nBlock)\n {\n     /*\n         Masternodes = (Coins/1000)*X on average\n-        \n+\n         *X = nPercentage, starting at 0.52\n         nPercentage goes up 0.01 each period\n         Period starts at 35040, which has exponential slowing growth\n \n-    */ \n+    */\n \n     int nPercentage = 52; //0.52\n     int nPeriod = 35040;\n     int nCollateral = 1000;\n \n-    for(int i = nPeriod; i <= nBlock; i += nPeriod)\n-    {\n+    for (int i = nPeriod; i <= nBlock; i += nPeriod) {\n         nPercentage++;\n         nPeriod*=2;\n     }\n     return (GetTotalCoinEstimate(nBlock)/100*nPercentage/nCollateral);\n }\n \n-void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb) {\n+void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb)\n+{\n     LOCK(cs);\n-    mapSeenMasternodePing.insert(make_pair(mnb.lastPing.GetHash(), mnb.lastPing));\n-    mapSeenMasternodeBroadcast.insert(make_pair(mnb.GetHash(), mnb));\n+    mapSeenMasternodePing.insert(std::make_pair(mnb.lastPing.GetHash(), mnb.lastPing));\n+    mapSeenMasternodeBroadcast.insert(std::make_pair(mnb.GetHash(), mnb));\n \n-    LogPrintf(\"CMasternodeMan::UpdateMasternodeList() - addr: %s\\n    vin: %s\\n\", mnb.addr.ToString(), mnb.vin.ToString());\n+    LogPrintf(\"CMasternodeMan::UpdateMasternodeList -- masternode=%s  addr=%s\\n\", mnb.vin.prevout.ToStringShort(), mnb.addr.ToString());\n \n     CMasternode* pmn = Find(mnb.vin);\n-    if(pmn == NULL)\n-    {\n+    if(pmn == NULL) {\n         CMasternode mn(mnb);\n         if(Add(mn)) {\n             masternodeSync.AddedMasternodeList();"
      },
      {
        "sha": "6c83aae8f90a5b71c02b9fd39e14b467d7cfe2bd",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -59,8 +59,6 @@ class CMasternodeMan\n     // keep track of dsq count to prevent masternodes from gaming darksend queue\n     int64_t nDsqCount;\n \n-    // dummy script pubkey to test masternodes' vins against mempool\n-    CScript dummyScriptPubkey;\n \n     CMasternodeMan() : nLastWatchdogVoteTime(0), nDsqCount(0) {}\n \n@@ -107,12 +105,15 @@ class CMasternodeMan\n     /// Clear Masternode vector\n     void Clear();\n \n-    int CountMasternodes(int protocolVersion = -1);\n-\n-    int CountEnabled(int protocolVersion = -1);\n+    /// Count Masternodes filtered by nProtocolVersion.\n+    /// Masternode nProtocolVersion should match or be above the one specified in param here.\n+    int CountMasternodes(int nProtocolVersion = -1);\n+    /// Count enabled Masternodes filtered by nProtocolVersion.\n+    /// Masternode nProtocolVersion should match or be above the one specified in param here.\n+    int CountEnabled(int nProtocolVersion = -1);\n \n     /// Count Masternodes by network type - NET_IPV4, NET_IPV6, NET_TOR\n-    int CountByIP(int nNetworkType);\n+    // int CountByIP(int nNetworkType);\n \n     void DsegUpdate(CNode* pnode);\n \n@@ -135,15 +136,13 @@ class CMasternodeMan\n     CMasternode* GetNextMasternodeInQueueForPayment(int nBlockHeight, bool fFilterSigTime, int& nCount);\n \n     /// Find a random entry\n-    CMasternode* FindRandomNotInVec(std::vector<CTxIn> &vecToExclude, int nProtocolVersion = -1);\n+    CMasternode* FindRandomNotInVec(const std::vector<CTxIn> &vecToExclude, int nProtocolVersion = -1);\n \n     std::vector<CMasternode> GetFullMasternodeVector() { Check(); return vMasternodes; }\n \n-    std::vector<pair<int, CMasternode> > GetMasternodeRanks(int64_t nBlockHeight, int minProtocol=0);\n-    int GetMasternodeRank(const CTxIn &vin, int64_t nBlockHeight, int minProtocol=0, bool fOnlyActive=true);\n-    CMasternode* GetMasternodeByRank(int nRank, int64_t nBlockHeight, int minProtocol=0, bool fOnlyActive=true);\n-\n-    void InitDummyScriptPubkey();\n+    std::vector<std::pair<int, CMasternode> > GetMasternodeRanks(int nBlockHeight = -1, int nMinProtocol=0);\n+    int GetMasternodeRank(const CTxIn &vin, int nBlockHeight, int nMinProtocol=0, bool fOnlyActive=true);\n+    CMasternode* GetMasternodeByRank(int nRank, int nBlockHeight, int nMinProtocol=0, bool fOnlyActive=true);\n \n     void ProcessMasternodeConnections();\n "
      },
      {
        "sha": "b645996f19516e27acdcd70b1de19eb4af1253eb",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -379,7 +379,7 @@ static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainpar\n     {\n         LOCK(cs_main);\n         if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n-            return error(\"DashMiner: generated block is stale\");\n+            return error(\"ProcessBlockFound -- generated block is stale\");\n     }\n \n     // Inform about the new block\n@@ -388,15 +388,15 @@ static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainpar\n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n     if (!ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL))\n-        return error(\"DashMiner: ProcessNewBlock, block not accepted\");\n+        return error(\"ProcessBlockFound -- ProcessNewBlock() failed, block not accepted\");\n \n     return true;\n }\n \n // ***TODO*** that part changed in bitcoin, we are using a mix with old one here for now\n void static BitcoinMiner(const CChainParams& chainparams)\n {\n-    LogPrintf(\"DashMiner started\\n\");\n+    LogPrintf(\"DashMiner -- started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"dash-miner\");\n \n@@ -439,13 +439,13 @@ void static BitcoinMiner(const CChainParams& chainparams)\n             auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(chainparams, coinbaseScript->reserveScript));\n             if (!pblocktemplate.get())\n             {\n-                LogPrintf(\"Error in DashMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n+                LogPrintf(\"DashMiner -- Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n                 return;\n             }\n             CBlock *pblock = &pblocktemplate->block;\n             IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n \n-            LogPrintf(\"Running DashMiner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n+            LogPrintf(\"DashMiner -- Running miner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                 ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n \n             //\n@@ -465,8 +465,7 @@ void static BitcoinMiner(const CChainParams& chainparams)\n                     {\n                         // Found a solution\n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                        LogPrintf(\"BitcoinMiner:\\n\");\n-                        LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n+                        LogPrintf(\"DashMiner:\\n  proof-of-work found\\n  hash: %s\\n  target: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n                         ProcessBlockFound(pblock, chainparams);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n                         coinbaseScript->KeepScript();\n@@ -510,12 +509,12 @@ void static BitcoinMiner(const CChainParams& chainparams)\n     }\n     catch (const boost::thread_interrupted&)\n     {\n-        LogPrintf(\"DashMiner terminated\\n\");\n+        LogPrintf(\"DashMiner -- terminated\\n\");\n         throw;\n     }\n     catch (const std::runtime_error &e)\n     {\n-        LogPrintf(\"BitcoinMiner runtime error: %s\\n\", e.what());\n+        LogPrintf(\"DashMiner -- runtime error: %s\\n\", e.what());\n         return;\n     }\n }"
      },
      {
        "sha": "266f29544d2057085ae3e0c9d74a163aef6edcdb",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -43,7 +43,6 @@ const char *GETSPORKS=\"getsporks\";\n const char *MASTERNODEPAYMENTVOTE=\"mnw\";\n const char *MASTERNODEPAYMENTBLOCK=\"mnwb\";\n const char *MASTERNODEPAYMENTSYNC=\"mnget\";\n-const char *MNSCANERROR=\"mn scan error\"; // not implemented\n const char *MNBUDGETSYNC=\"mnvs\"; // depreciated since 12.1\n const char *MNBUDGETVOTE=\"mvote\"; // depreciated since 12.1\n const char *MNBUDGETPROPOSAL=\"mprop\"; // depreciated since 12.1"
      },
      {
        "sha": "e9121c192cd1fa80436fd7df4ac4ce3f04ee8a56",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -74,12 +74,14 @@ int ClientModel::getNumConnections(unsigned int flags) const\n \n QString ClientModel::getMasternodeCountString() const\n {\n-    return tr(\"Total: %1 (PS compatible: %2 / Enabled: %3) (IPv4: %4, IPv6: %5, TOR: %6)\").arg(QString::number((int)mnodeman.size()))\n+    // return tr(\"Total: %1 (PS compatible: %2 / Enabled: %3) (IPv4: %4, IPv6: %5, TOR: %6)\").arg(QString::number((int)mnodeman.size()))\n+    return tr(\"Total: %1 (PS compatible: %2 / Enabled: %3)\")\n+            .arg(QString::number((int)mnodeman.size()))\n             .arg(QString::number((int)mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)))\n-            .arg(QString::number((int)mnodeman.CountEnabled()))\n-            .arg(QString::number((int)mnodeman.CountByIP(NET_IPV4)))\n-            .arg(QString::number((int)mnodeman.CountByIP(NET_IPV6)))\n-            .arg(QString::number((int)mnodeman.CountByIP(NET_TOR)));\n+            .arg(QString::number((int)mnodeman.CountEnabled()));\n+            // .arg(QString::number((int)mnodeman.CountByIP(NET_IPV4)))\n+            // .arg(QString::number((int)mnodeman.CountByIP(NET_IPV6)))\n+            // .arg(QString::number((int)mnodeman.CountByIP(NET_TOR)));\n }\n \n int ClientModel::getNumBlocks() const"
      },
      {
        "sha": "cd6d6b28a38cddeb69645dc0462c787b9ca8d476",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -387,7 +387,7 @@ void OverviewPage::updatePrivateSendProgress()\n     float denomPart = 0;\n     // mixing progress of denominated balance\n     float anonNormPart = 0;\n-    // completeness of full amount anonimization\n+    // completeness of full amount anonymization\n     float anonFullPart = 0;\n \n     CAmount denominatedBalance = nDenominatedConfirmedBalance + nDenominatedUnconfirmedBalance;"
      },
      {
        "sha": "2c0266e42f12f74d2f9b500676e2e4876669aaee",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d55b7038126ec01ba1b4374cbaaff240256f4c7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "patch": "@@ -2325,7 +2325,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n                 s += FormatMoney(vValue[i].first) + \" \";\n             }\n         }\n-        LogPrintf(\"%s - total %s\\n\", s, FormatMoney(nBest));\n+        LogPrint(\"selectcoins\", \"%s - total %s\\n\", s, FormatMoney(nBest));\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "1b230f4ddc29ac3553fa516b5af6aca574cc8763",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjIzMGY0ZGRjMjlhYzM1NTNmYTUxNmI1YWY2YWNhNTc0Y2M4NzYz",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-22T16:52:36Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-22T16:52:36Z"
      },
      "message": "Deadlock fixes (#1087)\n\n* Fix deadlocks by reducing scope of cs_main locks in rpcgovernance.cpp\r\n\r\n* Remove unnecessary mutex lock in GetMasternodeVinAndKeys which can cause a deadlock",
      "tree": {
        "sha": "423d6ec4cb33a9b82d6f2ccecd32137bb01d0df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/423d6ec4cb33a9b82d6f2ccecd32137bb01d0df0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b230f4ddc29ac3553fa516b5af6aca574cc8763",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b230f4ddc29ac3553fa516b5af6aca574cc8763",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b230f4ddc29ac3553fa516b5af6aca574cc8763",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b230f4ddc29ac3553fa516b5af6aca574cc8763/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d55b7038126ec01ba1b4374cbaaff240256f4c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d55b7038126ec01ba1b4374cbaaff240256f4c7"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f96ab8b6a23ff7360017e0b4b10467afdde7127c",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b230f4ddc29ac3553fa516b5af6aca574cc8763/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b230f4ddc29ac3553fa516b5af6aca574cc8763/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=1b230f4ddc29ac3553fa516b5af6aca574cc8763",
        "patch": "@@ -83,8 +83,11 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // ASSEMBLE NEW GOVERNANCE OBJECT FROM USER PARAMETERS\n \n-        LOCK(cs_main);\n-        CBlockIndex* pindex = chainActive.Tip();\n+        CBlockIndex* pindex = NULL;\n+        {\n+            LOCK(cs_main);\n+            CBlockIndex* pindex = chainActive.Tip();\n+        }\n \n         std::vector<CMasternodeConfig::CMasternodeEntry> mnEntries;\n         mnEntries = masternodeConfig.getEntries();\n@@ -157,8 +160,11 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // ASSEMBLE NEW GOVERNANCE OBJECT FROM USER PARAMETERS\n \n-        LOCK(cs_main);\n-        CBlockIndex* pindex = chainActive.Tip();\n+        CBlockIndex* pindex = NULL;\n+        {\n+            LOCK(cs_main);\n+            CBlockIndex* pindex = chainActive.Tip();\n+        }\n \n         uint256 txidFee;\n \n@@ -547,7 +553,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // SETUP BLOCK INDEX VARIABLE / RESULTS VARIABLE\n \n-        CBlockIndex* pindex;\n+        CBlockIndex* pindex = NULL;\n         {\n             LOCK(cs_main);\n             pindex = chainActive.Tip();"
      },
      {
        "sha": "9846e4a22eb91807dac66586f7f877f6a72819e5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b230f4ddc29ac3553fa516b5af6aca574cc8763/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b230f4ddc29ac3553fa516b5af6aca574cc8763/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1b230f4ddc29ac3553fa516b5af6aca574cc8763",
        "patch": "@@ -2701,9 +2701,6 @@ bool CWallet::GetMasternodeVinAndKeys(CTxIn& txinRet, CPubKey& pubKeyRet, CKey&\n     if (fImporting || fReindex) return false;\n \n     // Find possible candidates\n-    TRY_LOCK(cs_wallet, fWallet);\n-    if(!fWallet) return false;\n-\n     std::vector<COutput> vPossibleCoins;\n     AvailableCoins(vPossibleCoins, true, NULL, false, ONLY_1000);\n     if(vPossibleCoins.empty()) {"
      }
    ]
  },
  {
    "sha": "ed0a0d2393bcb70c0d25719816c4c103bc782216",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDBhMGQyMzkzYmNiNzBjMGQyNTcxOTgxNmM0YzEwM2JjNzgyMjE2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-22T21:01:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-22T21:01:30Z"
      },
      "message": "fix1087 (#1088)",
      "tree": {
        "sha": "5bcff0f849475260a827d2d1ae592da164cb572d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bcff0f849475260a827d2d1ae592da164cb572d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0a0d2393bcb70c0d25719816c4c103bc782216",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0a0d2393bcb70c0d25719816c4c103bc782216",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0a0d2393bcb70c0d25719816c4c103bc782216",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0a0d2393bcb70c0d25719816c4c103bc782216/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b230f4ddc29ac3553fa516b5af6aca574cc8763",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b230f4ddc29ac3553fa516b5af6aca574cc8763",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b230f4ddc29ac3553fa516b5af6aca574cc8763"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "59a2c2770cf97fd69af430f40e1f4e303cc940de",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed0a0d2393bcb70c0d25719816c4c103bc782216/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed0a0d2393bcb70c0d25719816c4c103bc782216/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=ed0a0d2393bcb70c0d25719816c4c103bc782216",
        "patch": "@@ -86,7 +86,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         CBlockIndex* pindex = NULL;\n         {\n             LOCK(cs_main);\n-            CBlockIndex* pindex = chainActive.Tip();\n+            pindex = chainActive.Tip();\n         }\n \n         std::vector<CMasternodeConfig::CMasternodeEntry> mnEntries;\n@@ -163,7 +163,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         CBlockIndex* pindex = NULL;\n         {\n             LOCK(cs_main);\n-            CBlockIndex* pindex = chainActive.Tip();\n+            pindex = chainActive.Tip();\n         }\n \n         uint256 txidFee;"
      }
    ]
  },
  {
    "sha": "565fa31850e2ba6867e2824b8c5d092d7db65d08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjVmYTMxODUwZTJiYTY4NjdlMjgyNGI4YzVkMDkyZDdkYjY1ZDA4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-23T15:27:23Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-23T15:27:23Z"
      },
      "message": "fix PS: (#1089)\n\n* PS: should check for prevout to match inputs\r\n\r\n* fix CDarkSendEntry constructor",
      "tree": {
        "sha": "eae37668cfad270ddfb2f85b8053bb2325540364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eae37668cfad270ddfb2f85b8053bb2325540364"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/565fa31850e2ba6867e2824b8c5d092d7db65d08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565fa31850e2ba6867e2824b8c5d092d7db65d08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/565fa31850e2ba6867e2824b8c5d092d7db65d08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565fa31850e2ba6867e2824b8c5d092d7db65d08/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed0a0d2393bcb70c0d25719816c4c103bc782216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0a0d2393bcb70c0d25719816c4c103bc782216",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0a0d2393bcb70c0d25719816c4c103bc782216"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "183a96bfa993f0ff03da9e04755bfb4c05c0aaa1",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565fa31850e2ba6867e2824b8c5d092d7db65d08/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565fa31850e2ba6867e2824b8c5d092d7db65d08/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=565fa31850e2ba6867e2824b8c5d092d7db65d08",
        "patch": "@@ -881,7 +881,7 @@ bool CDarksendPool::IsInputScriptSigValid(const CTxIn& txin)\n         BOOST_FOREACH(const CTxDSIn& txdsin, entry.vecTxDSIn) {\n             txNew.vin.push_back(txdsin);\n \n-            if(txdsin == txin) {\n+            if(txdsin.prevout == txin.prevout) {\n                 nTxInIndex = i;\n                 sigPubKey = txdsin.prevPubKey;\n             }\n@@ -995,7 +995,7 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n         LogPrint(\"privatesend\", \"looking for txin -- %s\\n\", txin.ToString());\n         BOOST_FOREACH(const CDarkSendEntry& entry, vecEntries) {\n             BOOST_FOREACH(const CTxDSIn& txdsin, entry.vecTxDSIn) {\n-                if((CTxIn)txdsin == txin) {\n+                if(txdsin.prevout == txin.prevout) {\n                     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- found in txin\\n\");\n                     nMessageIDRet = ERR_ALREADY_HAVE;\n                     nSessionUsers--;"
      },
      {
        "sha": "95e6347a10a5d027c7e3aaf5c96f854800aa2a49",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565fa31850e2ba6867e2824b8c5d092d7db65d08/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565fa31850e2ba6867e2824b8c5d092d7db65d08/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=565fa31850e2ba6867e2824b8c5d092d7db65d08",
        "patch": "@@ -103,7 +103,7 @@ class CDarkSendEntry\n         vecTxDSOut(std::vector<CTxDSOut>()),\n         txCollateral(CTransaction()),\n         nAmount(0),\n-        nTimeAdded(0)\n+        nTimeAdded(GetTime())\n         {}\n \n     CDarkSendEntry(const std::vector<CTxIn>& vecTxIn, const std::vector<CTxOut>& vecTxOut, const CTransaction& txCollateral) :"
      }
    ]
  },
  {
    "sha": "4d95be602ae96f2b39d91a08b8b98c3122613b41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDk1YmU2MDJhZTk2ZjJiMzlkOTFhMDhiOGI5OGMzMTIyNjEzYjQx",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-23T23:14:54Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-23T23:14:54Z"
      },
      "message": "Fix deadlock in masternode start commands (#1090)",
      "tree": {
        "sha": "a0e4631110cf6e7ee988efbd70f27927c3ad4dc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0e4631110cf6e7ee988efbd70f27927c3ad4dc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d95be602ae96f2b39d91a08b8b98c3122613b41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d95be602ae96f2b39d91a08b8b98c3122613b41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d95be602ae96f2b39d91a08b8b98c3122613b41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d95be602ae96f2b39d91a08b8b98c3122613b41/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "565fa31850e2ba6867e2824b8c5d092d7db65d08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565fa31850e2ba6867e2824b8c5d092d7db65d08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/565fa31850e2ba6867e2824b8c5d092d7db65d08"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 20,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ce32054b723525c2e5841d1145549c2a6bd0f985",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d95be602ae96f2b39d91a08b8b98c3122613b41/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d95be602ae96f2b39d91a08b8b98c3122613b41/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=4d95be602ae96f2b39d91a08b8b98c3122613b41",
        "patch": "@@ -227,8 +227,10 @@ UniValue masternode(const UniValue& params, bool fHelp)\n         if(!fMasterNode)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"You must set masternode=1 in the configuration\");\n \n-        LOCK(pwalletMain->cs_wallet);\n-        EnsureWalletIsUnlocked();\n+        {\n+            LOCK(pwalletMain->cs_wallet);\n+            EnsureWalletIsUnlocked();\n+        }\n \n         if(activeMasternode.nState != ACTIVE_MASTERNODE_STARTED){\n             activeMasternode.nState = ACTIVE_MASTERNODE_INITIAL; // TODO: consider better way\n@@ -243,8 +245,10 @@ UniValue masternode(const UniValue& params, bool fHelp)\n         if (params.size() < 2)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Please specify an alias\");\n \n-        LOCK(pwalletMain->cs_wallet);\n-        EnsureWalletIsUnlocked();\n+        {\n+            LOCK(pwalletMain->cs_wallet);\n+            EnsureWalletIsUnlocked();\n+        }\n \n         std::string strAlias = params[1].get_str();\n \n@@ -283,8 +287,10 @@ UniValue masternode(const UniValue& params, bool fHelp)\n \n     if (strCommand == \"start-all\" || strCommand == \"start-missing\" || strCommand == \"start-disabled\")\n     {\n-        LOCK(pwalletMain->cs_wallet);\n-        EnsureWalletIsUnlocked();\n+        {\n+            LOCK(pwalletMain->cs_wallet);\n+            EnsureWalletIsUnlocked();\n+        }\n \n         if((strCommand == \"start-missing\" || strCommand == \"start-disabled\") && !masternodeSync.IsMasternodeListSynced()) {\n             throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"You can't use this command until masternode list is synced\");\n@@ -597,8 +603,10 @@ UniValue masternodebroadcast(const UniValue& params, bool fHelp)\n         if (params.size() < 2)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Please specify an alias\");\n \n-        LOCK(pwalletMain->cs_wallet);\n-        EnsureWalletIsUnlocked();\n+        {\n+            LOCK(pwalletMain->cs_wallet);\n+            EnsureWalletIsUnlocked();\n+        }\n \n         bool fFound = false;\n         std::string strAlias = params[1].get_str();\n@@ -644,8 +652,10 @@ UniValue masternodebroadcast(const UniValue& params, bool fHelp)\n         if (fImporting || fReindex)\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wait for reindex and/or import to finish\");\n \n-        LOCK(pwalletMain->cs_wallet);\n-        EnsureWalletIsUnlocked();\n+        {\n+            LOCK(pwalletMain->cs_wallet);\n+            EnsureWalletIsUnlocked();\n+        }\n \n         std::vector<CMasternodeConfig::CMasternodeEntry> mnEntries;\n         mnEntries = masternodeConfig.getEntries();"
      }
    ]
  },
  {
    "sha": "01990272e5834cef08400c6a7267cbb2a9f34699",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTk5MDI3MmU1ODM0Y2VmMDg0MDBjNmE3MjY3Y2JiMmE5ZjM0Njk5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-24T18:12:36Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-24T18:12:36Z"
      },
      "message": "fix dstx acceptance (#1091)\n\n* fix dstx acceptance\r\n\r\n* two more fixes:\r\n- do not re-verify dstx once accepted\r\n- fix dstx prioritization\r\n\r\n* return early for dstx conditions, more log verbosity",
      "tree": {
        "sha": "839440a75902d3e02fb61548b6aa105f3df4b113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/839440a75902d3e02fb61548b6aa105f3df4b113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01990272e5834cef08400c6a7267cbb2a9f34699",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01990272e5834cef08400c6a7267cbb2a9f34699",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01990272e5834cef08400c6a7267cbb2a9f34699",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01990272e5834cef08400c6a7267cbb2a9f34699/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d95be602ae96f2b39d91a08b8b98c3122613b41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d95be602ae96f2b39d91a08b8b98c3122613b41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d95be602ae96f2b39d91a08b8b98c3122613b41"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 31,
      "deletions": 21
    },
    "files": [
      {
        "sha": "ff814007888c0cb28631fd35318a3e6e7595f831",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 21,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01990272e5834cef08400c6a7267cbb2a9f34699/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01990272e5834cef08400c6a7267cbb2a9f34699/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=01990272e5834cef08400c6a7267cbb2a9f34699",
        "patch": "@@ -1201,9 +1201,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n \n-        if(mapDarksendBroadcastTxes.count(hash))\n-           mempool.PrioritiseTransaction(hash, hash.ToString(), 1000, 0.1*COIN);\n-\n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n         // nModifiedFees includes any fee deltas from PrioritiseTransaction\n@@ -5700,37 +5697,46 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;\n+        CDarksendBroadcastTx dstx;\n+        int nInvType = MSG_TX;\n \n         if(strCommand == NetMsgType::TX) {\n             vRecv >> tx;\n         } else if (strCommand == NetMsgType::DSTX) {\n-            //these allow masternodes to publish a limited amount of free transactions\n-            CDarksendBroadcastTx dstx;\n             vRecv >> dstx;\n             tx = dstx.tx;\n+            uint256 hashTx = tx.GetHash();\n+            nInvType = MSG_DSTX;\n \n-            CMasternode* pmn = mnodeman.Find(dstx.vin);\n-            if(pmn != NULL)\n-            {\n-                if(!pmn->fAllowMixingTx) {\n-                    //multiple peers can send us a valid masternode transaction\n-                    LogPrint(\"privatesend\", \"DSTX -- Masternode sending too many transactions %s\\n\", tx.GetHash().ToString());\n-                    return true;\n-                }\n-\n-                if(!dstx.CheckSignature()) return false;\n+            if(mapDarksendBroadcastTxes.count(hashTx)) {\n+                LogPrint(\"privatesend\", \"DSTX -- Already have %s, skipping...\\n\", hashTx.ToString());\n+                return true; // not an error\n+            }\n \n-                LogPrintf(\"DSTX -- Got Masternode transaction %s\\n\", tx.GetHash().ToString());\n+            CMasternode* pmn = mnodeman.Find(dstx.vin);\n+            if(pmn == NULL) {\n+                LogPrint(\"privatesend\", \"DSTX -- Can't find masternode %s to verify %s\\n\", dstx.vin.prevout.ToStringShort(), hashTx.ToString());\n+                return false;\n+            }\n \n-                pmn->fAllowMixingTx = false;\n+            if(!pmn->fAllowMixingTx) {\n+                LogPrint(\"privatesend\", \"DSTX -- Masternode %s is sending too many transactions %s\\n\", dstx.vin.prevout.ToStringShort(), hashTx.ToString());\n+                return true;\n+                // TODO: Not an error? Could it be that someone is relaying old DSTXes\n+                // we have no idea about (e.g we were offline)? How to handle them?\n+            }\n \n-                if(!mapDarksendBroadcastTxes.count(tx.GetHash())){\n-                    mapDarksendBroadcastTxes.insert(make_pair(tx.GetHash(), dstx));\n-                }\n+            if(!dstx.CheckSignature()) {\n+                LogPrint(\"privatesend\", \"DSTX -- CheckSignature() failed for %s\\n\", hashTx.ToString());\n+                return false;\n             }\n+\n+            LogPrintf(\"DSTX -- Got Masternode transaction %s\\n\", hashTx.ToString());\n+            mempool.PrioritiseTransaction(hashTx, hashTx.ToString(), 1000, 0.1*COIN);\n+            pmn->fAllowMixingTx = false;\n         }\n \n-        CInv inv(MSG_TX, tx.GetHash());\n+        CInv inv(nInvType, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n         LOCK(cs_main);\n@@ -5743,6 +5749,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n+            if (strCommand == NetMsgType::DSTX) {\n+                mapDarksendBroadcastTxes.insert(make_pair(tx.GetHash(), dstx));\n+            }\n+\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);"
      }
    ]
  },
  {
    "sha": "c0a830aa8e09826e279498790483d3701b784ad4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGE4MzBhYThlMDk4MjZlMjc5NDk4NzkwNDgzZDM3MDFiNzg0YWQ0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-25T13:46:21Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-25T13:46:21Z"
      },
      "message": "fix fCheckSigTimeOnly (renamed to fSimpleCheck) in CMasternodePing::CheckAndUpdate (#1093)",
      "tree": {
        "sha": "a24ca6850244938c9e0d6a6422aa1f8c78124071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a24ca6850244938c9e0d6a6422aa1f8c78124071"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0a830aa8e09826e279498790483d3701b784ad4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0a830aa8e09826e279498790483d3701b784ad4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a830aa8e09826e279498790483d3701b784ad4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0a830aa8e09826e279498790483d3701b784ad4/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01990272e5834cef08400c6a7267cbb2a9f34699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01990272e5834cef08400c6a7267cbb2a9f34699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01990272e5834cef08400c6a7267cbb2a9f34699"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a5e6d7e73d391a63bc5f3ef916e0e9bd072a261d",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0a830aa8e09826e279498790483d3701b784ad4/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0a830aa8e09826e279498790483d3701b784ad4/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=c0a830aa8e09826e279498790483d3701b784ad4",
        "patch": "@@ -439,7 +439,7 @@ bool CMasternodeBroadcast::SimpleCheck(int& nDos)\n         return false;\n     }\n \n-    // incorrect ping or its sigTime\n+    // empty ping or incorrect sigTime/blockhash\n     if(lastPing == CMasternodePing() || !lastPing.CheckAndUpdate(nDos, false, true)) {\n         return false;\n     }\n@@ -745,7 +745,7 @@ bool CMasternodePing::CheckSignature(CPubKey& pubKeyMasternode, int &nDos)\n     return true;\n }\n \n-bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fCheckSigTimeOnly)\n+bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fSimpleCheck)\n {\n     if (sigTime > GetAdjustedTime() + 60 * 60) {\n         LogPrintf(\"CMasternodePing::CheckAndUpdate -- Signature rejected, too far into the future, masternode=%s\\n\", vin.prevout.ToStringShort());\n@@ -776,9 +776,8 @@ bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fChec\n         }\n     }\n \n-    if (fCheckSigTimeOnly) {\n-        CMasternode* pmn = mnodeman.Find(vin);\n-        if (pmn) return CheckSignature(pmn->pubKeyMasternode, nDos);\n+    if (fSimpleCheck) {\n+        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- ping verified in fSimpleCheck mode: masternode=%s  blockHash=%s  sigTime=%d\\n\", vin.prevout.ToStringShort(), blockHash.ToString(), sigTime);\n         return true;\n     }\n "
      },
      {
        "sha": "6f484bcc667fb6510e207b2f94e4f665d87bac8a",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0a830aa8e09826e279498790483d3701b784ad4/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0a830aa8e09826e279498790483d3701b784ad4/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=c0a830aa8e09826e279498790483d3701b784ad4",
        "patch": "@@ -78,7 +78,7 @@ class CMasternodePing\n \n     bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n     bool CheckSignature(CPubKey& pubKeyMasternode, int &nDos);\n-    bool CheckAndUpdate(int& nDos, bool fRequireEnabled = true, bool fCheckSigTimeOnly = false);\n+    bool CheckAndUpdate(int& nDos, bool fRequireEnabled = true, bool fSimpleCheck = false);\n     void Relay();\n \n     CMasternodePing& operator=(CMasternodePing from)"
      }
    ]
  },
  {
    "sha": "0cc499750119366bcc7492f31a93c4ccb3379917",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2M0OTk3NTAxMTkzNjZiY2M3NDkyZjMxYTkzYzRjY2IzMzc5OTE3",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-25T13:46:38Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-25T13:46:38Z"
      },
      "message": "Lock coins in masternode.conf regardless of masternode state (#1096)\n\n* Lock coins in masternode.conf regardless of masternode state of local node\r\n\r\n* Prevent log masternode.conf messages when file is empty",
      "tree": {
        "sha": "460bdaa4e1519c6e8317851e7b1d34cc1ba65d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/460bdaa4e1519c6e8317851e7b1d34cc1ba65d44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cc499750119366bcc7492f31a93c4ccb3379917",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc499750119366bcc7492f31a93c4ccb3379917",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc499750119366bcc7492f31a93c4ccb3379917",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc499750119366bcc7492f31a93c4ccb3379917/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0a830aa8e09826e279498790483d3701b784ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0a830aa8e09826e279498790483d3701b784ad4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a830aa8e09826e279498790483d3701b784ad4"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 20,
      "deletions": 19
    },
    "files": [
      {
        "sha": "ee305fe80c4dce0be380f4d10e52c93a61766d2d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc499750119366bcc7492f31a93c4ccb3379917/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc499750119366bcc7492f31a93c4ccb3379917/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0cc499750119366bcc7492f31a93c4ccb3379917",
        "patch": "@@ -1802,29 +1802,30 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         } else {\n             return InitError(_(\"You must specify a masternodeprivkey in the configuration. Please see documentation for help.\"));\n         }\n-    } else {\n-        LogPrintf(\"Using masternode config file %s\\n\", GetMasternodeConfigFile().string());\n-\n-        if(GetBoolArg(\"-mnconflock\", true) && pwalletMain) {\n-            LOCK(pwalletMain->cs_wallet);\n-            LogPrintf(\"Locking Masternodes:\\n\");\n-            uint256 mnTxHash;\n-            int outputIndex;\n-            BOOST_FOREACH(CMasternodeConfig::CMasternodeEntry mne, masternodeConfig.getEntries()) {\n-                mnTxHash.SetHex(mne.getTxHash());\n-                outputIndex = boost::lexical_cast<unsigned int>(mne.getOutputIndex());\n-                COutPoint outpoint = COutPoint(mnTxHash, outputIndex);\n-                // don't lock non-spendable outpoint (i.e. it's already spent or it's not from this wallet at all)\n-                if(pwalletMain->IsMine(CTxIn(outpoint)) != ISMINE_SPENDABLE) {\n-                    LogPrintf(\"  %s %s - IS NOT SPENDABLE, was not locked\\n\", mne.getTxHash(), mne.getOutputIndex());\n-                    continue;\n-                }\n-                pwalletMain->LockCoin(outpoint);\n-                LogPrintf(\"  %s %s - locked successfully\\n\", mne.getTxHash(), mne.getOutputIndex());\n+    }\n+\n+    LogPrintf(\"Using masternode config file %s\\n\", GetMasternodeConfigFile().string());\n+\n+    if(GetBoolArg(\"-mnconflock\", true) && pwalletMain && (masternodeConfig.getCount() > 0)) {\n+        LOCK(pwalletMain->cs_wallet);\n+        LogPrintf(\"Locking Masternodes:\\n\");\n+        uint256 mnTxHash;\n+        int outputIndex;\n+        BOOST_FOREACH(CMasternodeConfig::CMasternodeEntry mne, masternodeConfig.getEntries()) {\n+            mnTxHash.SetHex(mne.getTxHash());\n+            outputIndex = boost::lexical_cast<unsigned int>(mne.getOutputIndex());\n+            COutPoint outpoint = COutPoint(mnTxHash, outputIndex);\n+            // don't lock non-spendable outpoint (i.e. it's already spent or it's not from this wallet at all)\n+            if(pwalletMain->IsMine(CTxIn(outpoint)) != ISMINE_SPENDABLE) {\n+                LogPrintf(\"  %s %s - IS NOT SPENDABLE, was not locked\\n\", mne.getTxHash(), mne.getOutputIndex());\n+                continue;\n             }\n+            pwalletMain->LockCoin(outpoint);\n+            LogPrintf(\"  %s %s - locked successfully\\n\", mne.getTxHash(), mne.getOutputIndex());\n         }\n     }\n \n+\n     nLiquidityProvider = GetArg(\"-liquidityprovider\", nLiquidityProvider);\n     nLiquidityProvider = std::min(std::max(nLiquidityProvider, 0), 100);\n     darkSendPool.SetMinBlockSpacing(nLiquidityProvider * 15);"
      }
    ]
  },
  {
    "sha": "e30f8bf6a0dd0945a26febcd40754773c97294c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzBmOGJmNmEwZGQwOTQ1YTI2ZmViY2Q0MDc1NDc3M2M5NzI5NGM4",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-25T14:37:33Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-25T14:37:33Z"
      },
      "message": "Allow masternode broadcasts to update masternode information regardless of state (#1094)\n\n* Allow MN broadcasts to update MN information regardless of state\r\n\r\n* Add masternode public keys to log output for debugging\r\n\r\n* Moved log message from start-alias to CMasternodeBroadcast::Create\r\n\r\n* Fixed log message",
      "tree": {
        "sha": "d39b4a6024528c7c75f9a8cead9b772588a07fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d39b4a6024528c7c75f9a8cead9b772588a07fc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e30f8bf6a0dd0945a26febcd40754773c97294c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30f8bf6a0dd0945a26febcd40754773c97294c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e30f8bf6a0dd0945a26febcd40754773c97294c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30f8bf6a0dd0945a26febcd40754773c97294c8/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cc499750119366bcc7492f31a93c4ccb3379917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc499750119366bcc7492f31a93c4ccb3379917",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc499750119366bcc7492f31a93c4ccb3379917"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c4dc2de8adfc41653579ade672aa1cf6b1ce2645",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30f8bf6a0dd0945a26febcd40754773c97294c8/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30f8bf6a0dd0945a26febcd40754773c97294c8/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=e30f8bf6a0dd0945a26febcd40754773c97294c8",
        "patch": "@@ -118,8 +118,7 @@ bool CActiveMasternode::SendMasternodePing(std::string& strErrorRet)\n \n void CActiveMasternode::ManageStateInitial()\n {\n-    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- Start status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n-\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n     // Check that our local network configuration is correct\n     if(!GetLocal(service)) {\n         strNotCapableReason = \"Can't detect external address. Please consider using the externalip configuration option if problem persists.\";\n@@ -184,7 +183,12 @@ void CActiveMasternode::ManageStateInitial()\n \n void CActiveMasternode::ManageStateRemote()\n {\n-    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateRemote -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateRemote -- Start status = %s, type = %s, pinger enabled = %d, pubKeyMasternode.GetID() = %s\\n\", \n+             GetStatus(),\n+             GetType(),\n+             fPingerEnabled,\n+             pubKeyMasternode.GetID().ToString());\n+\n     mnodeman.CheckMasternode(pubKeyMasternode);\n     masternode_info_t infoMn = mnodeman.GetMasternodeInfo(pubKeyMasternode);\n     if(infoMn.fInfoValid) {"
      },
      {
        "sha": "226b53eb9354c96e8852b058fcf46cf89e8dedbe",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30f8bf6a0dd0945a26febcd40754773c97294c8/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30f8bf6a0dd0945a26febcd40754773c97294c8/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=e30f8bf6a0dd0945a26febcd40754773c97294c8",
        "patch": "@@ -393,6 +393,11 @@ bool CMasternodeBroadcast::Create(CTxIn txin, CService service, CKey keyCollater\n     // wait for reindex and/or import to finish\n     if (fImporting || fReindex) return false;\n \n+    LogPrint(\"masternode\", \"CMasternodeBroadcast::Create -- pubKeyCollateralAddressNew = %s, pubKeyMasternodeNew.GetID() = %s\\n\",\n+             CBitcoinAddress(pubKeyCollateralAddressNew.GetID()).ToString(),\n+             pubKeyMasternodeNew.GetID().ToString());\n+\n+\n     CMasternodePing mnp(txin);\n     if(!mnp.Sign(keyMasternodeNew, pubKeyMasternodeNew)) {\n         strErrorRet = strprintf(\"Failed to sign ping, masternode=%s\", txin.prevout.ToStringShort());\n@@ -509,9 +514,6 @@ bool CMasternodeBroadcast::Update(CMasternode* pmn, int& nDos)\n         return false;\n     }\n \n-    // masternode is not enabled yet/already, nothing to update\n-    if(!pmn->IsEnabled()) return false;\n-\n     // IsVnAssociatedWithPubkey is validated once in CheckOutpoint, after that they just need to match\n     if(pmn->pubKeyCollateralAddress != pubKeyCollateralAddress) {\n         LogPrintf(\"CMasternodeMan::Update -- Got mismatched pubKeyCollateralAddress and vin\\n\");\n@@ -525,10 +527,7 @@ bool CMasternodeBroadcast::Update(CMasternode* pmn, int& nDos)\n         LogPrintf(\"CMasternodeBroadcast::Update -- Got UPDATED Masternode entry: addr=%s\\n\", addr.ToString());\n         if(pmn->UpdateFromNewBroadcast((*this))) {\n             pmn->Check();\n-            // normally masternode should be in pre-enabled status after update, if not - do not relay\n-            if(pmn->IsPreEnabled()) {\n-                Relay();\n-            }\n+            Relay();\n         }\n         masternodeSync.AddedMasternodeList();\n     }"
      }
    ]
  },
  {
    "sha": "02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmI5ZjI0OGE4MGMzM2NiZGVmZDBjMWNjY2M0YTRjODAyMmI4N2U4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-25T15:04:09Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-25T15:04:09Z"
      },
      "message": "update masternode_conf.md (#1097)",
      "tree": {
        "sha": "173a747cc501116de769ebbc6be63adb9fc5cd9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/173a747cc501116de769ebbc6be63adb9fc5cd9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e30f8bf6a0dd0945a26febcd40754773c97294c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30f8bf6a0dd0945a26febcd40754773c97294c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e30f8bf6a0dd0945a26febcd40754773c97294c8"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 12,
      "deletions": 13
    },
    "files": [
      {
        "sha": "6e2db264faa45eb62ad04ec2f5538be350e9ab93",
        "filename": "doc/masternode_conf.md",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8/doc/masternode_conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8/doc/masternode_conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/masternode_conf.md?ref=02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8",
        "patch": "@@ -1,30 +1,29 @@\n-Multi masternode config\n+Masternode config\n =======================\n \n-The multi masternode config allows to control multiple masternodes from a single wallet. The wallet needs to have a valid collaral output of 1000 coins for each masternode. To use this, place a file named `masternode.conf` in the data directory of your install:\n+Dash Core allows controlling multiple remote masternodes from a single wallet. The wallet needs to have a valid collateral output of 1000 coins for each masternode and uses a configuration file named `masternode.conf` which can be found in the following data directory (depending on your operating system):\n  * Windows: %APPDATA%\\DashCore\\\n  * Mac OS: ~/Library/Application Support/DashCore/\n  * Unix/Linux: ~/.dashcore/\n \n-`masternode.conf` format is a space seperated text file. Each line consisting of an alias, IP address followed by port, masternode private key, collateral output transaction id and collateral output index.\n+`masternode.conf` is a space separated text file. Each line consists of an alias, IP address followed by port, masternode private key, collateral output transaction id and collateral output index.\n \n Example:\n ```\n-mn1 127.0.0.2:19999 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 2bcd3c84c84f87eaa86e4e56834c92927a07f9e18718810b92e0d0324456a67c 0\n-mn2 127.0.0.3:19999 93WaAb3htPJEV8E9aQcN23Jt97bPex7YvWfgMDTUdWJvzmrMqey aa9f1034d973377a5e733272c3d0eced1de22555ad45d6b24abadff8087948d4 0\n-mn3 127.0.0.4:19999 92Da1aYg6sbenP6uwskJgEY2XWB5LwJ7bXRqc3UPeShtHWJDjDv db478e78e3aefaa8c12d12ddd0aeace48c3b451a8b41c570d0ee375e2a02dfd9 1\n+mn1 127.0.0.2:19999 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 7603c20a05258c208b58b0a0d77603b9fc93d47cfa403035f87f3ce0af814566 0\n+mn2 127.0.0.4:19999 92Da1aYg6sbenP6uwskJgEY2XWB5LwJ7bXRqc3UPeShtHWJDjDv 5d898e78244f3206e0105f421cdb071d95d111a51cd88eb5511fc0dbf4bfd95f 1\n ```\n \n In the example above:\n-* the collateral for `mn1` is output `0` of transaction http://test.explorer.dash.fr/tx/2bcd3c84c84f87eaa86e4e56834c92927a07f9e18718810b92e0d0324456a67c and it has amount of 1000 DASH\n+* the collateral of 1000 DASH for `mn1` is output `0` of transaction [7603c20a05258c208b58b0a0d77603b9fc93d47cfa403035f87f3ce0af814566](https://test.explorer.dash.org/tx/7603c20a05258c208b58b0a0d77603b9fc93d47cfa403035f87f3ce0af814566)\n+* the collateral of 1000 DASH for `mn2` is output `1` of transaction [5d898e78244f3206e0105f421cdb071d95d111a51cd88eb5511fc0dbf4bfd95f](https://test.explorer.dash.org/tx/5d898e78244f3206e0105f421cdb071d95d111a51cd88eb5511fc0dbf4bfd95f)\n \n+_Note: IPs like 127.0.0.* are not allowed actually, we are using them here for explanatory purposes only. Make sure you have real reachable remote IPs in you `masternode.conf`._\n \n-The following new RPC commands are supported:\n-* list-conf: shows the parsed masternode.conf\n+The following RPC commands are available (type `help masternode` in Console for more info):\n+* list-conf\n * start-alias \\<alias\\>\n+* start-all\n * start-missing\n * start-disabled\n-* start-many\n-* outputs: list available collateral output transaction ids and corresponding collateral output indexes\n-\n-When using remote masternode setup, you **must** remove `masternode=1` from local `dash.conf` file if you had it there in previous versions. This option should be used only to start local Hot masternode now.\n+* outputs"
      }
    ]
  },
  {
    "sha": "77852d938e7eadd899eff041dae20ea018c30d2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Nzg1MmQ5MzhlN2VhZGQ4OTllZmYwNDFkYWUyMGVhMDE4YzMwZDJm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-25T23:33:52Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-25T23:33:52Z"
      },
      "message": "refactor and fix PS collateral creation (#1092)",
      "tree": {
        "sha": "00667f3695d77bd32a8a88bb343acf05518fec7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00667f3695d77bd32a8a88bb343acf05518fec7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77852d938e7eadd899eff041dae20ea018c30d2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77852d938e7eadd899eff041dae20ea018c30d2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77852d938e7eadd899eff041dae20ea018c30d2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77852d938e7eadd899eff041dae20ea018c30d2f/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02b9f248a80c33cbdefd0c1cccc4a4c8022b87e8"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 20,
      "deletions": 39
    },
    "files": [
      {
        "sha": "35d61d15bb0e4de07db5dbf19019b2264504f896",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 38,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77852d938e7eadd899eff041dae20ea018c30d2f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77852d938e7eadd899eff041dae20ea018c30d2f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=77852d938e7eadd899eff041dae20ea018c30d2f",
        "patch": "@@ -2672,22 +2672,19 @@ bool CWallet::SelectCoinsDark(CAmount nValueMin, CAmount nValueMax, std::vector<\n     return false;\n }\n \n-bool CWallet::SelectCoinsCollateral(std::vector<CTxIn>& vecTxInRet, CAmount& nValueRet) const\n+bool CWallet::GetCollateralTxIn(CTxIn& txinRet, CAmount& nValueRet) const\n {\n     vector<COutput> vCoins;\n \n     AvailableCoins(vCoins);\n \n     BOOST_FOREACH(const COutput& out, vCoins)\n     {\n-        // collateral inputs will always be a multiple of DARSEND_COLLATERAL, up to five\n         if(IsCollateralAmount(out.tx->vout[out.i].nValue))\n         {\n-            CTxIn txin = CTxIn(out.tx->GetHash(),out.i);\n-\n-            txin.prevPubKey = out.tx->vout[out.i].scriptPubKey; // the inputs PubKey\n-            nValueRet += out.tx->vout[out.i].nValue;\n-            vecTxInRet.push_back(txin);\n+            txinRet = CTxIn(out.tx->GetHash(), out.i);\n+            txinRet.prevPubKey = out.tx->vout[out.i].scriptPubKey; // the inputs PubKey\n+            nValueRet = out.tx->vout[out.i].nValue;\n             return true;\n         }\n     }\n@@ -2785,34 +2782,30 @@ bool CWallet::HasCollateralInputs(bool fOnlyConfirmed) const\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, fOnlyConfirmed);\n \n-    int nFound = 0;\n     BOOST_FOREACH(const COutput& out, vCoins)\n-        if(IsCollateralAmount(out.tx->vout[out.i].nValue)) nFound++;\n+        if(IsCollateralAmount(out.tx->vout[out.i].nValue)) return true;\n \n-    return nFound > 0;\n+    return false;\n }\n \n bool CWallet::IsCollateralAmount(CAmount nInputAmount) const\n {\n-    return  nInputAmount != 0 && nInputAmount % PRIVATESEND_COLLATERAL == 0 && nInputAmount < PRIVATESEND_COLLATERAL * 5 && nInputAmount > PRIVATESEND_COLLATERAL;\n+    // collateral inputs should always be a 2x..4x of PRIVATESEND_COLLATERAL\n+    return  nInputAmount >= PRIVATESEND_COLLATERAL * 2 &&\n+            nInputAmount <= PRIVATESEND_COLLATERAL * 4 &&\n+            nInputAmount %  PRIVATESEND_COLLATERAL == 0;\n }\n \n bool CWallet::CreateCollateralTransaction(CMutableTransaction& txCollateral, std::string& strReason)\n {\n-    /*\n-        To doublespend a collateral transaction, it will require a fee higher than this. So there's\n-        still a significant cost.\n-    */\n-    CAmount nFeeRet = 0.001*COIN;\n-\n     txCollateral.vin.clear();\n     txCollateral.vout.clear();\n \n     CReserveKey reservekey(this);\n     CAmount nValue = 0;\n-    std::vector<CTxIn> vecTxInCollateral;\n+    CTxIn txinCollateral;\n \n-    if (!SelectCoinsCollateral(vecTxInCollateral, nValue)) {\n+    if (!GetCollateralTxIn(txinCollateral, nValue)) {\n         strReason = \"PrivateSend requires a collateral transaction and could not locate an acceptable input!\";\n         return false;\n     }\n@@ -2824,27 +2817,15 @@ bool CWallet::CreateCollateralTransaction(CMutableTransaction& txCollateral, std\n     scriptChange = GetScriptForDestination(vchPubKey.GetID());\n     reservekey.KeepKey();\n \n-    BOOST_FOREACH(CTxIn txin, vecTxInCollateral) {\n-        txCollateral.vin.push_back(txin);\n-    }\n-\n-    if(nValue - PRIVATESEND_COLLATERAL - nFeeRet > 0) {\n-        //pay collateral charge in fees\n-        CTxOut vout3 = CTxOut(nValue - PRIVATESEND_COLLATERAL, scriptChange);\n-        txCollateral.vout.push_back(vout3);\n-    }\n+    txCollateral.vin.push_back(txinCollateral);\n \n-    int txinIndex = 0;\n-    BOOST_FOREACH(CTxIn txin, txCollateral.vin) {\n-        if(!SignSignature(*this, txin.prevPubKey, txCollateral, txinIndex, int(SIGHASH_ALL|SIGHASH_ANYONECANPAY))) {\n-            BOOST_FOREACH(CTxIn txin2, vecTxInCollateral) {\n-                UnlockCoin(txin2.prevout);\n-            }\n+    //pay collateral charge in fees\n+    CTxOut txout = CTxOut(nValue - PRIVATESEND_COLLATERAL, scriptChange);\n+    txCollateral.vout.push_back(txout);\n \n-            strReason = \"Unable to sign collateral transaction!\";\n-            return false;\n-        }\n-        txinIndex++;\n+    if(!SignSignature(*this, txinCollateral.prevPubKey, txCollateral, 0, int(SIGHASH_ALL|SIGHASH_ANYONECANPAY))) {\n+        strReason = \"Unable to sign collateral transaction!\";\n+        return false;\n     }\n \n     return true;"
      },
      {
        "sha": "149b5bac2243322c7f4ee205779388c1eccca75e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77852d938e7eadd899eff041dae20ea018c30d2f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77852d938e7eadd899eff041dae20ea018c30d2f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=77852d938e7eadd899eff041dae20ea018c30d2f",
        "patch": "@@ -647,7 +647,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool SelectCoinsByDenominations(int nDenom, CAmount nValueMin, CAmount nValueMax, std::vector<CTxIn>& vecTxInRet, std::vector<COutput>& vCoinsRet, CAmount& nValueRet, int nPrivateSendRoundsMin, int nPrivateSendRoundsMax);\n-    bool SelectCoinsCollateral(std::vector<CTxIn>& vecTxInRet, CAmount& nValueRet) const;\n+    bool GetCollateralTxIn(CTxIn& txinRet, CAmount& nValueRet) const;\n     bool SelectCoinsDark(CAmount nValueMin, CAmount nValueMax, std::vector<CTxIn>& vecTxInRet, CAmount& nValueRet, int nPrivateSendRoundsMin, int nPrivateSendRoundsMax) const;\n     bool SelectCoinsGrouppedByAddresses(std::vector<CompactTallyItem>& vecTallyRet, bool fSkipDenominated = true, bool fAnonymizable = true) const;\n "
      }
    ]
  },
  {
    "sha": "19569c1d66d38cbb593745550c6e42fb73c508ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTU2OWMxZDY2ZDM4Y2JiNTkzNzQ1NTUwYzZlNDJmYjczYzUwOGVh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-26T21:21:39Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-26T21:21:39Z"
      },
      "message": "Fix CActiveMasternode (#1102)\n\n* add GetStateString and static CMasternode::StateToString helpers\r\n\r\n* Fix CActiveMasternode:\r\n- should run `ManageStateLocal` only when `eType == MASTERNODE_LOCAL`\r\n- should set `nState = ACTIVE_MASTERNODE_NOT_CAPABLE` in `ManageStateInitial` to let `GetStatus` return proper message\r\n- more/better log output",
      "tree": {
        "sha": "8a39b1486340a1c383f027406dec019000f1c140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a39b1486340a1c383f027406dec019000f1c140"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19569c1d66d38cbb593745550c6e42fb73c508ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19569c1d66d38cbb593745550c6e42fb73c508ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19569c1d66d38cbb593745550c6e42fb73c508ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19569c1d66d38cbb593745550c6e42fb73c508ea/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77852d938e7eadd899eff041dae20ea018c30d2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77852d938e7eadd899eff041dae20ea018c30d2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77852d938e7eadd899eff041dae20ea018c30d2f"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 83,
      "deletions": 51
    },
    "files": [
      {
        "sha": "1dd9595360ef91ad42265ea11b5be574619e1122",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 45,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19569c1d66d38cbb593745550c6e42fb73c508ea/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19569c1d66d38cbb593745550c6e42fb73c508ea/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=19569c1d66d38cbb593745550c6e42fb73c508ea",
        "patch": "@@ -23,47 +23,54 @@ void CActiveMasternode::ManageState()\n \n     if(Params().NetworkIDString() != CBaseChainParams::REGTEST && !masternodeSync.IsBlockchainSynced()) {\n         nState = ACTIVE_MASTERNODE_SYNC_IN_PROCESS;\n-        LogPrintf(\"CActiveMasternode::ManageState -- %s\\n\", GetStatus());\n+        LogPrintf(\"CActiveMasternode::ManageState -- %s: %s\\n\", GetStateString(), GetStatus());\n         return;\n     }\n \n     if(nState == ACTIVE_MASTERNODE_SYNC_IN_PROCESS) {\n         nState = ACTIVE_MASTERNODE_INITIAL;\n     }\n \n-    LogPrint(\"masternode\", \"CActiveMasternode::ManageState -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageState -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetTypeString(), fPingerEnabled);\n \n     if(eType == MASTERNODE_UNKNOWN) {\n         ManageStateInitial();\n     }\n \n     if(eType == MASTERNODE_REMOTE) {\n         ManageStateRemote();\n-    } else {\n+    } else if(eType == MASTERNODE_LOCAL) {\n         ManageStateLocal();\n     }\n \n-    if(fPingerEnabled) {\n-        std::string strError;\n-        if(!SendMasternodePing(strError)) {\n-            LogPrintf(\"CActiveMasternode::ManageState -- Error on SendMasternodePing(): %s\\n\", strError);\n-        }\n+    SendMasternodePing();\n+}\n+\n+std::string CActiveMasternode::GetStateString() const\n+{\n+    switch (nState) {\n+        case ACTIVE_MASTERNODE_INITIAL:         return \"INITIAL\";\n+        case ACTIVE_MASTERNODE_SYNC_IN_PROCESS: return \"SYNC_IN_PROCESS\";\n+        case ACTIVE_MASTERNODE_INPUT_TOO_NEW:   return \"INPUT_TOO_NEW\";\n+        case ACTIVE_MASTERNODE_NOT_CAPABLE:     return \"NOT_CAPABLE\";\n+        case ACTIVE_MASTERNODE_STARTED:         return \"STARTED\";\n+        default:                                return \"UNKNOWN\";\n     }\n }\n \n-std::string CActiveMasternode::GetStatus()\n+std::string CActiveMasternode::GetStatus() const\n {\n     switch (nState) {\n         case ACTIVE_MASTERNODE_INITIAL:         return \"Node just started, not yet activated\";\n         case ACTIVE_MASTERNODE_SYNC_IN_PROCESS: return \"Sync in progress. Must wait until sync is complete to start Masternode\";\n         case ACTIVE_MASTERNODE_INPUT_TOO_NEW:   return strprintf(\"Masternode input must have at least %d confirmations\", Params().GetConsensus().nMasternodeMinimumConfirmations);\n         case ACTIVE_MASTERNODE_NOT_CAPABLE:     return \"Not capable masternode: \" + strNotCapableReason;\n         case ACTIVE_MASTERNODE_STARTED:         return \"Masternode successfully started\";\n-        default:                                return \"unknown\";\n+        default:                                return \"Unknown\";\n     }\n }\n \n-std::string CActiveMasternode::GetType()\n+std::string CActiveMasternode::GetTypeString() const\n {\n     std::string strType;\n     switch(eType) {\n@@ -83,28 +90,29 @@ std::string CActiveMasternode::GetType()\n     return strType;\n }\n \n-bool CActiveMasternode::SendMasternodePing(std::string& strErrorRet)\n+bool CActiveMasternode::SendMasternodePing()\n {\n-    if(vin == CTxIn()) {\n+    if(!fPingerEnabled) {\n+        LogPrint(\"masterndoe\", \"CActiveMasternode::SendMasternodePing -- %s: masternode ping service is disabled, skipping...\\n\", GetStateString());\n         return false;\n     }\n \n-    CMasternodePing mnp(vin);\n-    if(!mnp.Sign(keyMasternode, pubKeyMasternode)) {\n-        strErrorRet = \"Couldn't sign Masternode Ping\";\n+    if(!mnodeman.Has(vin)) {\n+        strNotCapableReason = \"Masternode not in masternode list\";\n+        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+        LogPrintf(\"CActiveMasternode::SendMasternodePing -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n         return false;\n     }\n \n-    if(!mnodeman.Has(vin)) {\n-        strErrorRet = \"Masternode List doesn't include our Masternode, shutting down Masternode pinging service! \" + vin.ToString();\n-        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n-        strNotCapableReason = strErrorRet;\n+    CMasternodePing mnp(vin);\n+    if(!mnp.Sign(keyMasternode, pubKeyMasternode)) {\n+        LogPrintf(\"CActiveMasternode::SendMasternodePing -- ERROR: Couldn't sign Masternode Ping\\n\");\n         return false;\n     }\n \n     // Update lastPing for our masternode in Masternode list\n     if(mnodeman.IsMasternodePingedWithin(vin, MASTERNODE_MIN_MNP_SECONDS, mnp.sigTime)) {\n-        strErrorRet = \"Too early to send Masternode Ping\";\n+        LogPrintf(\"CActiveMasternode::SendMasternodePing -- Too early to send Masternode Ping\\n\");\n         return false;\n     }\n \n@@ -118,32 +126,36 @@ bool CActiveMasternode::SendMasternodePing(std::string& strErrorRet)\n \n void CActiveMasternode::ManageStateInitial()\n {\n-    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetTypeString(), fPingerEnabled);\n     // Check that our local network configuration is correct\n     if(!GetLocal(service)) {\n+        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n         strNotCapableReason = \"Can't detect external address. Please consider using the externalip configuration option if problem persists.\";\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n         return;\n     }\n \n     int mainnetDefaultPort = Params(CBaseChainParams::MAIN).GetDefaultPort();\n     if(Params().NetworkIDString() == CBaseChainParams::MAIN) {\n         if(service.GetPort() != mainnetDefaultPort) {\n+            nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n             strNotCapableReason = strprintf(\"Invalid port: %u - only %d is supported on mainnet.\", service.GetPort(), mainnetDefaultPort);\n-            LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+            LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n             return;\n         }\n     } else if(service.GetPort() == mainnetDefaultPort) {\n+        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n         strNotCapableReason = strprintf(\"Invalid port: %u - %d is only supported on mainnet.\", service.GetPort(), mainnetDefaultPort);\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n         return;\n     }\n \n     LogPrintf(\"CActiveMasternode::ManageState -- Checking inbound connection to '%s'\\n\", service.ToString());\n \n     if(!ConnectNode((CAddress)service, NULL, true)) {\n+        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n         strNotCapableReason = \"Could not connect to \" + service.ToString();\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n         return;\n     }\n \n@@ -152,20 +164,17 @@ void CActiveMasternode::ManageStateInitial()\n \n     // Check if wallet funds are available\n     if(!pwalletMain) {\n-        strNotCapableReason = \"Wallet not available.\";\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet not available\\n\", GetStateString());\n         return;\n     }\n \n     if(pwalletMain->IsLocked()) {\n-        strNotCapableReason = \"Wallet is locked.\";\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet is locked\\n\", GetStateString());\n         return;\n     }\n \n     if(pwalletMain->GetBalance() < 1000*COIN) {\n-        strNotCapableReason = \"Wallet balance is < 1000 DASH\";\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- not capable: %s\\n\", strNotCapableReason);\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet balance is < 1000 DASH\", GetStateString());\n         return;\n     }\n \n@@ -178,23 +187,27 @@ void CActiveMasternode::ManageStateInitial()\n         eType = MASTERNODE_LOCAL;\n     }\n \n-    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- End status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- End status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetTypeString(), fPingerEnabled);\n }\n \n void CActiveMasternode::ManageStateRemote()\n {\n     LogPrint(\"masternode\", \"CActiveMasternode::ManageStateRemote -- Start status = %s, type = %s, pinger enabled = %d, pubKeyMasternode.GetID() = %s\\n\", \n-             GetStatus(),\n-             GetType(),\n-             fPingerEnabled,\n-             pubKeyMasternode.GetID().ToString());\n+             GetStatus(), fPingerEnabled, GetTypeString(), pubKeyMasternode.GetID().ToString());\n \n     mnodeman.CheckMasternode(pubKeyMasternode);\n     masternode_info_t infoMn = mnodeman.GetMasternodeInfo(pubKeyMasternode);\n     if(infoMn.fInfoValid) {\n         if(infoMn.nProtocolVersion != PROTOCOL_VERSION) {\n             nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n             strNotCapableReason = \"Invalid protocol version\";\n+            LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n+            return;\n+        }\n+        if(service != infoMn.addr) {\n+            nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+            strNotCapableReason = \"Specified IP doesn't match our external address.\";\n+            LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n             return;\n         }\n         vin = infoMn.vin;\n@@ -203,23 +216,27 @@ void CActiveMasternode::ManageStateRemote()\n         if(((infoMn.nActiveState == CMasternode::MASTERNODE_ENABLED) ||\n             (infoMn.nActiveState == CMasternode::MASTERNODE_PRE_ENABLED) ||\n             (infoMn.nActiveState == CMasternode::MASTERNODE_WATCHDOG_EXPIRED))) {\n+            if(nState != ACTIVE_MASTERNODE_STARTED) {\n+                LogPrintf(\"CActiveMasternode::ManageStateRemote -- STARTED!\\n\");\n+            }\n             nState = ACTIVE_MASTERNODE_STARTED;\n         }\n         else {\n             nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n-            strNotCapableReason = \"Masternode in EXPIRED state\";\n+            strNotCapableReason = strprintf(\"Masternode in %s state\", CMasternode::StateToString(infoMn.nActiveState));\n+            LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n         }\n     }\n     else {\n-        fPingerEnabled = false;\n-        strNotCapableReason = \"Masternode not in masternode list\";\n         nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+        strNotCapableReason = \"Masternode not in masternode list\";\n+        LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n     }\n }\n \n void CActiveMasternode::ManageStateLocal()\n {\n-    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateLocal -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetType(), fPingerEnabled);\n+    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateLocal -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetTypeString(), fPingerEnabled);\n     if(nState == ACTIVE_MASTERNODE_STARTED) {\n         return;\n     }\n@@ -232,8 +249,8 @@ void CActiveMasternode::ManageStateLocal()\n         int nInputAge = GetInputAge(vin);\n         if(nInputAge < Params().GetConsensus().nMasternodeMinimumConfirmations){\n             nState = ACTIVE_MASTERNODE_INPUT_TOO_NEW;\n-            strNotCapableReason = strprintf(\"%s - %d confirmations\", GetStatus(), nInputAge);\n-            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s\\n\", strNotCapableReason);\n+            strNotCapableReason = strprintf(_(\"%s - %d confirmations\"), GetStatus(), nInputAge);\n+            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n             return;\n         }\n \n@@ -245,8 +262,9 @@ void CActiveMasternode::ManageStateLocal()\n         CMasternodeBroadcast mnb;\n         std::string strError;\n         if(!CMasternodeBroadcast::Create(vin, service, keyCollateral, pubKeyCollateral, keyMasternode, pubKeyMasternode, strError, mnb)) {\n-            strNotCapableReason = \"Error on CMasternodeBroadcast::Create -- \" + strError;\n-            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s\\n\", strNotCapableReason);\n+            nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+            strNotCapableReason = \"Error creating mastenode broadcast: \" + strError;\n+            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n             return;\n         }\n "
      },
      {
        "sha": "a963fd19863a5ce23678d1c0d04af930d9b4386d",
        "filename": "src/activemasternode.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19569c1d66d38cbb593745550c6e42fb73c508ea/src/activemasternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19569c1d66d38cbb593745550c6e42fb73c508ea/src/activemasternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.h?ref=19569c1d66d38cbb593745550c6e42fb73c508ea",
        "patch": "@@ -38,7 +38,7 @@ class CActiveMasternode\n     bool fPingerEnabled;\n \n     /// Ping Masternode\n-    bool SendMasternodePing(std::string& strErrorRet);\n+    bool SendMasternodePing();\n \n public:\n     // Keys for the active Masternode\n@@ -61,8 +61,9 @@ class CActiveMasternode\n     /// Manage state of active Masternode\n     void ManageState();\n \n-    std::string GetStatus();\n-    std::string GetType();\n+    std::string GetStateString() const;\n+    std::string GetStatus() const;\n+    std::string GetTypeString() const;\n \n private:\n     void ManageStateInitial();"
      },
      {
        "sha": "8bb21baf189b36bb2e51508fae68edfc116b673d",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19569c1d66d38cbb593745550c6e42fb73c508ea/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19569c1d66d38cbb593745550c6e42fb73c508ea/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=19569c1d66d38cbb593745550c6e42fb73c508ea",
        "patch": "@@ -270,9 +270,9 @@ masternode_info_t CMasternode::GetInfo()\n     return info;\n }\n \n-std::string CMasternode::GetStatus()\n+std::string CMasternode::StateToString(int nStateIn)\n {\n-    switch(nActiveState) {\n+    switch(nStateIn) {\n         case CMasternode::MASTERNODE_PRE_ENABLED:       return \"PRE_ENABLED\";\n         case CMasternode::MASTERNODE_ENABLED:           return \"ENABLED\";\n         case CMasternode::MASTERNODE_EXPIRED:           return \"EXPIRED\";\n@@ -284,6 +284,17 @@ std::string CMasternode::GetStatus()\n     }\n }\n \n+std::string CMasternode::GetStateString() const\n+{\n+    return StateToString(nActiveState);\n+}\n+\n+std::string CMasternode::GetStatus() const\n+{\n+    // TODO: return smth a bit more human readable here\n+    return GetStateString();\n+}\n+\n int CMasternode::GetCollateralAge()\n {\n     int nHeight;"
      },
      {
        "sha": "9f53c167f71d108d0689fa257b6b9cf00794dd6b",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19569c1d66d38cbb593745550c6e42fb73c508ea/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19569c1d66d38cbb593745550c6e42fb73c508ea/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=19569c1d66d38cbb593745550c6e42fb73c508ea",
        "patch": "@@ -260,7 +260,9 @@ class CMasternode\n \n     masternode_info_t GetInfo();\n \n-    std::string GetStatus();\n+    static std::string StateToString(int nStateIn);\n+    std::string GetStateString() const;\n+    std::string GetStatus() const;\n \n     int GetCollateralAge();\n "
      }
    ]
  },
  {
    "sha": "db3a4afddbaaa529e8d78dddb81a6cd39df4d29c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjNhNGFmZGRiYWFhNTI5ZThkNzhkZGRiODFhNmNkMzlkZjRkMjlj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-27T15:58:12Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-27T15:58:12Z"
      },
      "message": "Replaced LOCK with LOCK2 to prevent a deadlock (#1103)",
      "tree": {
        "sha": "0324e825212b6ff1338af0768c73aa5bd07f2186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0324e825212b6ff1338af0768c73aa5bd07f2186"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19569c1d66d38cbb593745550c6e42fb73c508ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19569c1d66d38cbb593745550c6e42fb73c508ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19569c1d66d38cbb593745550c6e42fb73c508ea"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ef7ab46698a325bfb68e372f5597b0d02d0b3660",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=db3a4afddbaaa529e8d78dddb81a6cd39df4d29c",
        "patch": "@@ -376,7 +376,8 @@ bool CMasternodeMan::Has(const CTxIn& vin)\n //\n CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight, bool fFilterSigTime, int& nCount)\n {\n-    LOCK(cs);\n+    // Need LOCK2 here to ensure consistent locking order because the GetBlockHash call below locks cs_main\n+    LOCK2(cs_main,cs);\n \n     CMasternode *pBestMasternode = NULL;\n     std::vector<std::pair<int, CMasternode*> > vecMasternodeLastPaid;"
      }
    ]
  },
  {
    "sha": "1a81c341bcdd3b5e2fafcb381780514c43d2967e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTgxYzM0MWJjZGQzYjVlMmZhZmNiMzgxNzgwNTE0YzQzZDI5Njdl",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-10-27T16:00:06Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-27T16:00:06Z"
      },
      "message": "Set initial masternode last watchdog time to mnb.sigTime (#1098)\n\nSet last watchdog time to mnb.sigTime when masternodes are first added or updated from a broadcast",
      "tree": {
        "sha": "e8c166e6db7d6b6e31f0ba77d386b35965c859b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8c166e6db7d6b6e31f0ba77d386b35965c859b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a81c341bcdd3b5e2fafcb381780514c43d2967e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a81c341bcdd3b5e2fafcb381780514c43d2967e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a81c341bcdd3b5e2fafcb381780514c43d2967e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a81c341bcdd3b5e2fafcb381780514c43d2967e/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db3a4afddbaaa529e8d78dddb81a6cd39df4d29c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db3a4afddbaaa529e8d78dddb81a6cd39df4d29c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ebec626d0de4c949a8d8ab1473942527df19db4",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a81c341bcdd3b5e2fafcb381780514c43d2967e/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a81c341bcdd3b5e2fafcb381780514c43d2967e/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=1a81c341bcdd3b5e2fafcb381780514c43d2967e",
        "patch": "@@ -90,7 +90,7 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n     nLastDsq(mnb.nLastDsq),\n     nTimeLastChecked(0),\n     nTimeLastPaid(0),\n-    nTimeLastWatchdogVote(0),\n+    nTimeLastWatchdogVote(mnb.sigTime),\n     nActiveState(MASTERNODE_ENABLED),\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n@@ -114,6 +114,7 @@ bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n     addr = mnb.addr;\n     nPoSeBanScore = 0;\n     nTimeLastChecked = 0;\n+    nTimeLastWatchdogVote = mnb.sigTime;\n     int nDos = 0;\n     if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(nDos, false))) {\n         lastPing = mnb.lastPing;"
      },
      {
        "sha": "f046fd264671c251d75c373f8db99861aa6c79f2",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a81c341bcdd3b5e2fafcb381780514c43d2967e/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a81c341bcdd3b5e2fafcb381780514c43d2967e/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=1a81c341bcdd3b5e2fafcb381780514c43d2967e",
        "patch": "@@ -57,6 +57,7 @@ bool CMasternodeMan::Add(CMasternode &mn)\n     CMasternode *pmn = Find(mn.vin);\n     if (pmn == NULL) {\n         LogPrint(\"masternode\", \"CMasternodeMan::Add -- Adding new Masternode: addr=%s, %i now\\n\", mn.addr.ToString(), size() + 1);\n+        mn.nTimeLastWatchdogVote = mn.sigTime;\n         vMasternodes.push_back(mn);\n         return true;\n     }"
      }
    ]
  },
  {
    "sha": "740fcce6a4f5900dfac820fcea6da1938b3d4116",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDBmY2NlNmE0ZjU5MDBkZmFjODIwZmNlYTZkYTE5MzhiM2Q0MTE2",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2016-10-30T19:36:52Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-30T19:36:52Z"
      },
      "message": "Fix Governance Object's Expiration calculation. (#1109)\n\nUse nSuperblockCycle instead of \"blocks monthly\" approximation",
      "tree": {
        "sha": "a4132d32a4c352ebb5d7ed14d84673deacb5cfb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4132d32a4c352ebb5d7ed14d84673deacb5cfb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/740fcce6a4f5900dfac820fcea6da1938b3d4116",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/740fcce6a4f5900dfac820fcea6da1938b3d4116",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/740fcce6a4f5900dfac820fcea6da1938b3d4116",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/740fcce6a4f5900dfac820fcea6da1938b3d4116/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a81c341bcdd3b5e2fafcb381780514c43d2967e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a81c341bcdd3b5e2fafcb381780514c43d2967e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a81c341bcdd3b5e2fafcb381780514c43d2967e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c39b9fe459b2566165a732ca224d85845648e23",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/740fcce6a4f5900dfac820fcea6da1938b3d4116/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/740fcce6a4f5900dfac820fcea6da1938b3d4116/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=740fcce6a4f5900dfac820fcea6da1938b3d4116",
        "patch": "@@ -211,10 +211,9 @@ void CGovernanceTriggerManager::CleanAndRemove()\n                 break;\n             case SEEN_OBJECT_IS_VALID:\n                 {\n-                    // Rough approximation: 30 days per month * 576 blocks per day\n-                    static const int nMonthlyBlocks = 30*576;\n                     int nTriggerBlock = pSuperblock->GetBlockStart();\n-                    int nExpirationBlock = nTriggerBlock + nMonthlyBlocks;\n+                    // Rough approximation: a cycle of superblock ++\n+                    int nExpirationBlock = nTriggerBlock + Params().GetConsensus().nSuperblockCycle + GOVERNANCE_FEE_CONFIRMATIONS; \n                     if(governance.GetCachedBlockHeight() > nExpirationBlock) {\n                         remove = true;\n                         CGovernanceObject* pgovobj = pSuperblock->GetGovernanceObject();"
      }
    ]
  },
  {
    "sha": "81502761b6acf68da0a742f2c95303babb92dc95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTUwMjc2MWI2YWNmNjhkYTBhNzQyZjJjOTUzMDNiYWJiOTJkYzk1",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-10-30T19:37:51Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-30T19:37:51Z"
      },
      "message": "[UI] Fix for empty Masternode list when mncache.dat exists (#1107)\n\n\r\n\r\n* [UI] Fix for empty Masternode list when mncache.dat exists [review changes]\r\n\r\n* [UI] Fix for empty Masternode list when mncache.dat exists [review changes]",
      "tree": {
        "sha": "6492571c9f4b854b50d8eb70530ca5872eb4abff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6492571c9f4b854b50d8eb70530ca5872eb4abff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81502761b6acf68da0a742f2c95303babb92dc95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81502761b6acf68da0a742f2c95303babb92dc95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81502761b6acf68da0a742f2c95303babb92dc95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81502761b6acf68da0a742f2c95303babb92dc95/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "740fcce6a4f5900dfac820fcea6da1938b3d4116",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/740fcce6a4f5900dfac820fcea6da1938b3d4116",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/740fcce6a4f5900dfac820fcea6da1938b3d4116"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dbe4a081dfc47519e12d7e7352b1f0612e5f2b79",
        "filename": "src/qt/masternodelist.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81502761b6acf68da0a742f2c95303babb92dc95/src/qt/masternodelist.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81502761b6acf68da0a742f2c95303babb92dc95/src/qt/masternodelist.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.cpp?ref=81502761b6acf68da0a742f2c95303babb92dc95",
        "patch": "@@ -60,6 +60,8 @@ MasternodeList::MasternodeList(const PlatformStyle *platformStyle, QWidget *pare\n     connect(timer, SIGNAL(timeout()), this, SLOT(updateMyNodeList()));\n     timer->start(1000);\n \n+    fFilterUpdated = false;\n+    nTimeFilterUpdated = GetTime();\n     updateNodeList();\n }\n "
      }
    ]
  },
  {
    "sha": "ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZThlODFkNzUyNTQ1NmZkM2M0NTM4ZWE3MWUwMjg2YWZlN2VjOGYz",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-30T19:38:19Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-30T19:38:19Z"
      },
      "message": "packaging fixes: (#1106)\n\n- more dash -> dashcore\r\n- dashpay.io -> dash.org",
      "tree": {
        "sha": "5143f60d310d4b91e10b92e40631b7ea4d5120c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5143f60d310d4b91e10b92e40631b7ea4d5120c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81502761b6acf68da0a742f2c95303babb92dc95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81502761b6acf68da0a742f2c95303babb92dc95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81502761b6acf68da0a742f2c95303babb92dc95"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "41c20dcb7b27afd3a3d57ad155e11ac43c836cb4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
        "patch": "@@ -6,7 +6,7 @@ define(_CLIENT_VERSION_REVISION, 1)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2016)\n-AC_INIT([Dash Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/dashpay/dash/issues],[dash])\n+AC_INIT([Dash Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/dashpay/dash/issues],[dashcore])\n AC_CONFIG_SRCDIR([src/main.cpp])\n AC_CONFIG_HEADERS([src/config/dash-config.h])\n AC_CONFIG_AUX_DIR([build-aux])"
      },
      {
        "sha": "cd9eb971aae11150bce8969d7f2b1023e2307b0e",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
        "patch": "@@ -38,7 +38,7 @@\n   <true/>\n \n   <key>CFBundleIdentifier</key>\n-  <string>io.dashpay.Dash-Qt</string>\n+  <string>org.dash.Dash-Qt</string>\n \n   <key>CFBundleURLTypes</key>\n   <array>"
      },
      {
        "sha": "263a73dda7ed092132bdf0288ac2fec6262785ca",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
        "patch": "@@ -106,10 +106,10 @@ Section -post SEC0001\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" UninstallString $INSTDIR\\uninstall.exe\n     WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoModify 1\n     WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoRepair 1\n-    WriteRegStr HKCR \"dash\" \"URL Protocol\" \"\"\n-    WriteRegStr HKCR \"dash\" \"\" \"URL:Dash\"\n-    WriteRegStr HKCR \"dash\\DefaultIcon\" \"\" $INSTDIR\\dash-qt.exe\n-    WriteRegStr HKCR \"dash\\shell\\open\\command\" \"\" '\"$INSTDIR\\dash-qt.exe\" \"%1\"'\n+    WriteRegStr HKCR \"dashcore\" \"URL Protocol\" \"\"\n+    WriteRegStr HKCR \"dashcore\" \"\" \"URL:Dash\"\n+    WriteRegStr HKCR \"dashcore\\DefaultIcon\" \"\" $INSTDIR\\dash-qt.exe\n+    WriteRegStr HKCR \"dashcore\\shell\\open\\command\" \"\" '\"$INSTDIR\\dash-qt.exe\" \"%1\"'\n SectionEnd\n \n # Macro for selecting uninstaller sections\n@@ -147,7 +147,7 @@ Section -un.post UNSEC0001\n     DeleteRegValue HKCU \"${REGKEY}\" Path\n     DeleteRegKey /IfEmpty HKCU \"${REGKEY}\\Components\"\n     DeleteRegKey /IfEmpty HKCU \"${REGKEY}\"\n-    DeleteRegKey HKCR \"dash\"\n+    DeleteRegKey HKCR \"dashcore\"\n     RmDir /REBOOTOK $SMPROGRAMS\\$StartMenuGroup\n     RmDir /REBOOTOK $INSTDIR\n     Push $R0"
      }
    ]
  },
  {
    "sha": "d9d6d4f6eba88f871e39768d74a75c3df112bbde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWQ2ZDRmNmViYTg4Zjg3MWUzOTc2OGQ3NGE3NWMzZGYxMTJiYmRl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-30T19:40:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-30T19:40:30Z"
      },
      "message": "fix deadlock on sync (#1104)",
      "tree": {
        "sha": "57a0fe59f110affb9aea0ccf6f5e5ecbfa5111ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57a0fe59f110affb9aea0ccf6f5e5ecbfa5111ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9d6d4f6eba88f871e39768d74a75c3df112bbde",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d6d4f6eba88f871e39768d74a75c3df112bbde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d6d4f6eba88f871e39768d74a75c3df112bbde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d6d4f6eba88f871e39768d74a75c3df112bbde/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce8e81d7525456fd3c4538ea71e0286afe7ec8f3"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "35a045d38922baad18783e7b6b5ee5a495764d19",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d6d4f6eba88f871e39768d74a75c3df112bbde/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d6d4f6eba88f871e39768d74a75c3df112bbde/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=d9d6d4f6eba88f871e39768d74a75c3df112bbde",
        "patch": "@@ -210,8 +210,7 @@ void CMasternodeSync::ProcessTick()\n         return;\n     }\n \n-    TRY_LOCK(cs_vNodes, lockRecv);\n-    if(!lockRecv) return;\n+    LOCK2(mnodeman.cs, cs_vNodes);\n \n     if(nRequestedMasternodeAssets == MASTERNODE_SYNC_INITIAL ||\n         (nRequestedMasternodeAssets == MASTERNODE_SYNC_SPORKS && IsBlockchainSynced()))"
      },
      {
        "sha": "4d840dedd144aea5c418050dae3637e294151833",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d6d4f6eba88f871e39768d74a75c3df112bbde/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d6d4f6eba88f871e39768d74a75c3df112bbde/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=d9d6d4f6eba88f871e39768d74a75c3df112bbde",
        "patch": "@@ -608,8 +608,6 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n     if(fLiteMode) return; // disable all Dash specific functionality\n     if(!masternodeSync.IsBlockchainSynced()) return;\n \n-    LOCK(cs);\n-\n     if (strCommand == NetMsgType::MNANNOUNCE) { //Masternode Broadcast\n \n         CMasternodeBroadcast mnb;\n@@ -634,6 +632,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n         LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s\\n\", mnp.vin.prevout.ToStringShort());\n \n+        LOCK(cs);\n+\n         if(mapSeenMasternodePing.count(mnp.GetHash())) return; //seen\n         mapSeenMasternodePing.insert(std::make_pair(mnp.GetHash(), mnp));\n \n@@ -668,6 +668,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n         LogPrint(\"masternode\", \"DSEG -- Masternode list, masternode=%s\\n\", vin.prevout.ToStringShort());\n \n+        LOCK(cs);\n+\n         if(vin == CTxIn()) { //only should ask for this once\n             //local network\n             bool isLocal = (pfrom->addr.IsRFC1918() || pfrom->addr.IsLocal());"
      },
      {
        "sha": "7b5838e06c10948b1b12e2f31c225666284545de",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9d6d4f6eba88f871e39768d74a75c3df112bbde/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9d6d4f6eba88f871e39768d74a75c3df112bbde/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=d9d6d4f6eba88f871e39768d74a75c3df112bbde",
        "patch": "@@ -49,6 +49,8 @@ class CMasternodeMan\n \n     int64_t nLastWatchdogVoteTime;\n \n+    friend class CMasternodeSync;\n+\n public:\n     // Keep track of all broadcasts I've seen\n     std::map<uint256, CMasternodeBroadcast> mapSeenMasternodeBroadcast;"
      }
    ]
  },
  {
    "sha": "afc74707f889722cf0f7b515cd10d40e97cfd3ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmM3NDcwN2Y4ODk3MjJjZjBmN2I1MTVjZDEwZDQwZTk3Y2ZkM2Nl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-30T20:56:47Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-30T20:56:47Z"
      },
      "message": "PoSe changes: (#1105)\n\n* PoSe changes:\r\n- use helpers to alter nPoSeBanScore within predefined range only\r\n- use nPoSeBanHeight instead of timeout of inactivity to ban masternodes till some block in the future (currently should block for the whole payment cycle)\r\n- add log output on pose score increase in CheckSameAddr",
      "tree": {
        "sha": "38f25f44f9b1d08a619ec0b98031da6fb1c9d389",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38f25f44f9b1d08a619ec0b98031da6fb1c9d389"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afc74707f889722cf0f7b515cd10d40e97cfd3ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afc74707f889722cf0f7b515cd10d40e97cfd3ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afc74707f889722cf0f7b515cd10d40e97cfd3ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afc74707f889722cf0f7b515cd10d40e97cfd3ce/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9d6d4f6eba88f871e39768d74a75c3df112bbde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9d6d4f6eba88f871e39768d74a75c3df112bbde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9d6d4f6eba88f871e39768d74a75c3df112bbde"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 37,
      "deletions": 22
    },
    "files": [
      {
        "sha": "76de567b1430a97314dd152c0171b14050074732",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "patch": "@@ -1597,7 +1597,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n                 strAutoDenomResult = _(\"Error connecting to Masternode.\");\n                 dsq.nTime = 0; //remove node\n-                pmn->nPoSeBanScore++;\n+                pmn->IncreasePoSeBanScore();\n                 continue;\n             }\n         }\n@@ -1650,7 +1650,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         } else {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n             nTries++;\n-            pmn->nPoSeBanScore++;\n+            pmn->IncreasePoSeBanScore();\n             continue;\n         }\n     }"
      },
      {
        "sha": "e6ac5bac6b5fd1cac3b98a2dc47e061daa75620c",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 13,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "patch": "@@ -33,6 +33,7 @@ CMasternode::CMasternode() :\n     nBlockLastPaid(0),\n     nProtocolVersion(PROTOCOL_VERSION),\n     nPoSeBanScore(0),\n+    nPoSeBanHeight(0),\n     fAllowMixingTx(true),\n     fUnitTest(false)\n {}\n@@ -54,6 +55,7 @@ CMasternode::CMasternode(CService addrNew, CTxIn vinNew, CPubKey pubKeyCollatera\n     nBlockLastPaid(0),\n     nProtocolVersion(nProtocolVersionIn),\n     nPoSeBanScore(0),\n+    nPoSeBanHeight(0),\n     fAllowMixingTx(true),\n     fUnitTest(false)\n {}\n@@ -75,6 +77,7 @@ CMasternode::CMasternode(const CMasternode& other) :\n     nBlockLastPaid(other.nBlockLastPaid),\n     nProtocolVersion(other.nProtocolVersion),\n     nPoSeBanScore(other.nPoSeBanScore),\n+    nPoSeBanHeight(other.nPoSeBanHeight),\n     fAllowMixingTx(other.fAllowMixingTx),\n     fUnitTest(other.fUnitTest)\n {}\n@@ -96,6 +99,7 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n     nBlockLastPaid(0),\n     nProtocolVersion(mnb.nProtocolVersion),\n     nPoSeBanScore(0),\n+    nPoSeBanHeight(0),\n     fAllowMixingTx(true),\n     fUnitTest(false)\n {}\n@@ -113,6 +117,7 @@ bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n     nProtocolVersion = mnb.nProtocolVersion;\n     addr = mnb.addr;\n     nPoSeBanScore = 0;\n+    nPoSeBanHeight = 0;\n     nTimeLastChecked = 0;\n     nTimeLastWatchdogVote = mnb.sigTime;\n     int nDos = 0;\n@@ -173,6 +178,7 @@ void CMasternode::Check(bool fForce)\n     if(!fForce && (GetTime() - nTimeLastChecked < MASTERNODE_CHECK_SECONDS)) return;\n     nTimeLastChecked = GetTime();\n \n+    int nHeight = 0;\n     if(!fUnitTest) {\n         TRY_LOCK(cs_main, lockMain);\n         if(!lockMain) return;\n@@ -185,31 +191,34 @@ void CMasternode::Check(bool fForce)\n             LogPrint(\"masternode\", \"CMasternode::Check -- Failed to find Masternode UTXO, masternode=%s\\n\", vin.prevout.ToStringShort());\n             return;\n         }\n-    }\n \n-                   // masternode doesn't meet payment protocol requirements ...\n-    bool fRemove = nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n-                   // or it's our own node and we just updated it to the new protocol but we are still waiting for activation ...\n-                   (pubKeyMasternode == activeMasternode.pubKeyMasternode && nProtocolVersion < PROTOCOL_VERSION);\n+        nHeight = chainActive.Height();\n+    }\n \n     // keep old masternodes on start, give them a chance to receive an updated ping without removal/expiry\n     if(!masternodeSync.IsMasternodeListSynced()) nTimeStart = GetTime();\n     bool fWaitForPing = (GetTime() - nTimeStart < MASTERNODE_MIN_MNP_SECONDS);\n \n     if(nActiveState == MASTERNODE_POSE_BAN) {\n-        if(IsPingedWithin(MASTERNODE_POSE_BAN_SECONDS)) {\n-            // Still alive? Good luck with that.\n-            return;\n-        } else {\n-            // It's finally dead, good...\n-            // or did we just start our node and it's too early to decide?\n-            fRemove = !fWaitForPing;\n-        }\n+        if(nHeight < nPoSeBanHeight) return; // too early?\n+        // Otherwise give it a chance to proceed further to do all the usual checks and to change its state.\n+        // Masternode still will be on the edge and can be banned back easily if it keeps ignoring mnverify\n+        // or connect attempts. Will require few mnverify messages to strengthen its position in mn list.\n+        LogPrintf(\"CMasternode::Check -- Masternode %s is unbanned and back in list now\\n\", vin.prevout.ToStringShort());\n+        DecreasePoSeBanScore();\n     } else if(nPoSeBanScore >= MASTERNODE_POSE_BAN_MAX_SCORE) {\n         nActiveState = MASTERNODE_POSE_BAN;\n+        // ban for the whole payment cycle\n+        nPoSeBanHeight = nHeight + mnodeman.size();\n+        LogPrintf(\"CMasternode::Check -- Masternode %s is banned till block %d now\\n\", vin.prevout.ToStringShort(), nPoSeBanHeight);\n         return;\n     }\n \n+                   // masternode doesn't meet payment protocol requirements ...\n+    bool fRemove = nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n+                   // or it's our own node and we just updated it to the new protocol but we are still waiting for activation ...\n+                   (pubKeyMasternode == activeMasternode.pubKeyMasternode && nProtocolVersion < PROTOCOL_VERSION);\n+\n     if(fRemove) {\n         // it should be removed from the list\n         nActiveState = MASTERNODE_REMOVE;"
      },
      {
        "sha": "7762ac5a91bef3c9e47f36b1c971d2789cf36f2e",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "patch": "@@ -21,7 +21,6 @@ static const int MASTERNODE_REMOVAL_SECONDS         = 75 * 60;\n static const int MASTERNODE_CHECK_SECONDS           = 5;\n static const int MASTERNODE_WATCHDOG_MAX_SECONDS    = 2 * 60 * 60;\n \n-static const int MASTERNODE_POSE_BAN_SECONDS        = 24 * 60 * 60;\n static const int MASTERNODE_POSE_BAN_MAX_SCORE      = 5;\n //\n // The Masternode Ping Class : Contains a different serialize method for sending pings from masternodes throughout the network\n@@ -165,6 +164,7 @@ class CMasternode\n     int nBlockLastPaid;\n     int nProtocolVersion;\n     int nPoSeBanScore;\n+    int nPoSeBanHeight;\n     bool fAllowMixingTx;\n     bool fUnitTest;\n \n@@ -197,6 +197,7 @@ class CMasternode\n         READWRITE(nBlockLastPaid);\n         READWRITE(nProtocolVersion);\n         READWRITE(nPoSeBanScore);\n+        READWRITE(nPoSeBanHeight);\n         READWRITE(fAllowMixingTx);\n         READWRITE(fUnitTest);\n         READWRITE(mapGovernanceObjectsVotedOn);\n@@ -225,6 +226,7 @@ class CMasternode\n         swap(first.nBlockLastPaid, second.nBlockLastPaid);\n         swap(first.nProtocolVersion, second.nProtocolVersion);\n         swap(first.nPoSeBanScore, second.nPoSeBanScore);\n+        swap(first.nPoSeBanHeight, second.nPoSeBanHeight);\n         swap(first.fAllowMixingTx, second.fAllowMixingTx);\n         swap(first.fUnitTest, second.fUnitTest);\n         swap(first.mapGovernanceObjectsVotedOn, second.mapGovernanceObjectsVotedOn);\n@@ -258,6 +260,9 @@ class CMasternode\n \n     bool IsValidNetAddr();\n \n+    void IncreasePoSeBanScore() { if(nPoSeBanScore < MASTERNODE_POSE_BAN_MAX_SCORE) nPoSeBanScore++; }\n+    void DecreasePoSeBanScore() { if(nPoSeBanScore > -MASTERNODE_POSE_BAN_MAX_SCORE) nPoSeBanScore--; }\n+\n     masternode_info_t GetInfo();\n \n     static std::string StateToString(int nStateIn);"
      },
      {
        "sha": "3d1fdd425736f2a043496309d049d977d581276d",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afc74707f889722cf0f7b515cd10d40e97cfd3ce/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "patch": "@@ -862,7 +862,8 @@ void CMasternodeMan::CheckSameAddr()\n \n     // ban duplicates\n     BOOST_FOREACH(CMasternode* pmn, vBan) {\n-        pmn->nPoSeBanScore++;\n+        LogPrintf(\"CMasternodeMan::CheckSameAddr -- increasing PoSe ban score for masternode %s\\n\", pmn->vin.prevout.ToStringShort());\n+        pmn->IncreasePoSeBanScore();\n     }\n }\n \n@@ -892,7 +893,7 @@ bool CMasternodeMan::SendVerifyRequest(const CAddress& addr, const std::vector<C\n                 continue;\n             }\n             fFound = true;\n-            pmn->nPoSeBanScore++;\n+            pmn->IncreasePoSeBanScore();\n         }\n         return false;\n     }\n@@ -992,7 +993,7 @@ void CMasternodeMan::ProcessVerifyReply(CNode* pnode, CMasternodeVerification& m\n                     // found it!\n                     prealMasternode = &(*it);\n                     if(!it->IsPoSeVerified()) {\n-                            it->nPoSeBanScore--;\n+                        it->DecreasePoSeBanScore();\n                     }\n                     netfulfilledman.AddFulfilledRequest(pnode->addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-done\");\n \n@@ -1038,7 +1039,7 @@ void CMasternodeMan::ProcessVerifyReply(CNode* pnode, CMasternodeVerification& m\n                     prealMasternode->vin.prevout.ToStringShort(), pnode->addr.ToString());\n         // increase ban score for everyone else\n         BOOST_FOREACH(CMasternode* pmn, vpMasternodesToBan) {\n-            pmn->nPoSeBanScore++;\n+            pmn->IncreasePoSeBanScore();\n             LogPrint(\"masternode\", \"CMasternodeMan::ProcessVerifyBroadcast -- increased PoSe ban score for %s addr %s, new score %d\\n\",\n                         prealMasternode->vin.prevout.ToStringShort(), pnode->addr.ToString(), pmn->nPoSeBanScore);\n         }\n@@ -1122,7 +1123,7 @@ void CMasternodeMan::ProcessVerifyBroadcast(CNode* pnode, const CMasternodeVerif\n         }\n \n         if(!pmn1->IsPoSeVerified()) {\n-            pmn1->nPoSeBanScore--;\n+            pmn1->DecreasePoSeBanScore();\n         }\n         mnv.Relay();\n \n@@ -1133,7 +1134,7 @@ void CMasternodeMan::ProcessVerifyBroadcast(CNode* pnode, const CMasternodeVerif\n         int nCount = 0;\n         BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n             if(mn.addr != mnv.addr || mn.vin.prevout == mnv.vin1.prevout) continue;\n-            mn.nPoSeBanScore++;\n+            mn.IncreasePoSeBanScore();\n             nCount++;\n             LogPrint(\"masternode\", \"CMasternodeMan::ProcessVerifyBroadcast -- increased PoSe ban score for %s addr %s, new score %d\\n\",\n                         mn.vin.prevout.ToStringShort(), mn.addr.ToString(), mn.nPoSeBanScore);"
      }
    ]
  },
  {
    "sha": "62bf64261d5371cb4b876ada071bfe1505b89a4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmJmNjQyNjFkNTM3MWNiNGI4NzZhZGEwNzFiZmUxNTA1Yjg5YTRl",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T07:48:59Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T07:48:59Z"
      },
      "message": "fixing packaging, #1106 broke it",
      "tree": {
        "sha": "d04c94547ca23157ad31595ce91474bc0b80285e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d04c94547ca23157ad31595ce91474bc0b80285e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62bf64261d5371cb4b876ada071bfe1505b89a4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62bf64261d5371cb4b876ada071bfe1505b89a4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62bf64261d5371cb4b876ada071bfe1505b89a4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62bf64261d5371cb4b876ada071bfe1505b89a4e/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afc74707f889722cf0f7b515cd10d40e97cfd3ce"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34b62b33ab4b482a6dcb925038ab12012c8e4dfa",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62bf64261d5371cb4b876ada071bfe1505b89a4e/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62bf64261d5371cb4b876ada071bfe1505b89a4e/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=62bf64261d5371cb4b876ada071bfe1505b89a4e",
        "patch": "@@ -79,13 +79,13 @@ script: |\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n   ORIGPATH=\"$PATH\""
      }
    ]
  },
  {
    "sha": "03e4fd7539b5040e28583762216e9e16c474c258",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2U0ZmQ3NTM5YjUwNDBlMjg1ODM3NjIyMTZlOWUxNmM0NzRjMjU4",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T07:51:34Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-31T07:51:34Z"
      },
      "message": "Merge pull request #1113 from dashpay/v0.12.1.x_packaging\n\nFix Linux packaging",
      "tree": {
        "sha": "d04c94547ca23157ad31595ce91474bc0b80285e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d04c94547ca23157ad31595ce91474bc0b80285e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03e4fd7539b5040e28583762216e9e16c474c258",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e4fd7539b5040e28583762216e9e16c474c258",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03e4fd7539b5040e28583762216e9e16c474c258",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e4fd7539b5040e28583762216e9e16c474c258/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afc74707f889722cf0f7b515cd10d40e97cfd3ce"
      },
      {
        "sha": "62bf64261d5371cb4b876ada071bfe1505b89a4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62bf64261d5371cb4b876ada071bfe1505b89a4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62bf64261d5371cb4b876ada071bfe1505b89a4e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34b62b33ab4b482a6dcb925038ab12012c8e4dfa",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03e4fd7539b5040e28583762216e9e16c474c258/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03e4fd7539b5040e28583762216e9e16c474c258/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=03e4fd7539b5040e28583762216e9e16c474c258",
        "patch": "@@ -79,13 +79,13 @@ script: |\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n   ORIGPATH=\"$PATH\""
      }
    ]
  },
  {
    "sha": "fb3b2f1853fadec6801b63ad40af716e7cdb2021",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjNiMmYxODUzZmFkZWM2ODAxYjYzYWQ0MGFmNzE2ZTdjZGIyMDIx",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2016-10-31T09:11:57Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-31T09:11:57Z"
      },
      "message": "Fix errors in DBG when compile with ENABLE_DASH_DEBUG defined. (#1111)",
      "tree": {
        "sha": "5f48e27efe5a3eeb3dbcbb1717e172a9330e6cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f48e27efe5a3eeb3dbcbb1717e172a9330e6cc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb3b2f1853fadec6801b63ad40af716e7cdb2021",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb3b2f1853fadec6801b63ad40af716e7cdb2021",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb3b2f1853fadec6801b63ad40af716e7cdb2021",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb3b2f1853fadec6801b63ad40af716e7cdb2021/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03e4fd7539b5040e28583762216e9e16c474c258",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03e4fd7539b5040e28583762216e9e16c474c258",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03e4fd7539b5040e28583762216e9e16c474c258"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8f551e7624ad1184e985e7ee2db5623cb082c8dc",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb3b2f1853fadec6801b63ad40af716e7cdb2021/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb3b2f1853fadec6801b63ad40af716e7cdb2021/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=fb3b2f1853fadec6801b63ad40af716e7cdb2021",
        "patch": "@@ -808,7 +808,7 @@ void CMasternodePayments::RequestLowDataPaymentBlocks(CNode* pnode)\n             // Let's see why this failed\n             BOOST_FOREACH(CMasternodePayee& payee, it->second.vecPayees) {\n                 CTxDestination address1;\n-                ExtractDestination(payee.scriptPubKey, address1);\n+                ExtractDestination(payee.GetPayee(), address1);\n                 CBitcoinAddress address2(address1);\n                 printf(\"payee %s votes %d\\n\", address2.ToString().c_str(), payee.GetVoteCount());\n             }"
      },
      {
        "sha": "53f9255697d952736e93ad2d02a7bdb2c354bf9e",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb3b2f1853fadec6801b63ad40af716e7cdb2021/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb3b2f1853fadec6801b63ad40af716e7cdb2021/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=fb3b2f1853fadec6801b63ad40af716e7cdb2021",
        "patch": "@@ -154,7 +154,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         bool mnFound = mnodeman.Get(activeMasternode.vin, mn);\n \n         DBG( cout << \"gobject: submit activeMasternode.pubKeyMasternode = \" << activeMasternode.pubKeyMasternode.GetHash().ToString()\n-             << \", vin = \" << vin.prevout.ToStringShort()\n+             << \", vin = \" << activeMasternode.vin.prevout.ToStringShort()\n              << \", params.size() = \" << params.size()\n              << \", mnFound = \" << mnFound << endl; );\n "
      }
    ]
  },
  {
    "sha": "768eb2044fff36a7bb9e03b9923b432f2526680a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjhlYjIwNDRmZmYzNmE3YmI5ZTAzYjk5MjNiNDMyZjI1MjY2ODBh",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2016-10-31T09:56:24Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-31T09:56:24Z"
      },
      "message": "Add support for compile with ENABLE_DASH_DEBUG defined (#1112)",
      "tree": {
        "sha": "dfac6d0511acb021e4ccfb8c5bcae72f884d83c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfac6d0511acb021e4ccfb8c5bcae72f884d83c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/768eb2044fff36a7bb9e03b9923b432f2526680a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/768eb2044fff36a7bb9e03b9923b432f2526680a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/768eb2044fff36a7bb9e03b9923b432f2526680a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/768eb2044fff36a7bb9e03b9923b432f2526680a/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb3b2f1853fadec6801b63ad40af716e7cdb2021",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb3b2f1853fadec6801b63ad40af716e7cdb2021",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb3b2f1853fadec6801b63ad40af716e7cdb2021"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "45750d46b09ff715554f4586b025e60a2ed25fd8",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/768eb2044fff36a7bb9e03b9923b432f2526680a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/768eb2044fff36a7bb9e03b9923b432f2526680a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=768eb2044fff36a7bb9e03b9923b432f2526680a",
        "patch": "@@ -72,7 +72,7 @@ matrix:\n             - wine\n             - bc\n     - compiler: \": dashd\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\" PYZMQ=true\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports\" CPPFLAGS=\"-DDEBUG_LOCKORDER -DENABLE_DASH_DEBUG\" PYZMQ=true\n       addons:\n         apt:\n           packages:"
      }
    ]
  },
  {
    "sha": "74772d336d8832749661173d0b7ed232cac14e92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDc3MmQzMzZkODgzMjc0OTY2MTE3M2QwYjdlZDIzMmNhYzE0ZTky",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T07:48:59Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T10:06:22Z"
      },
      "message": "fixing packaging, #1106 broke it",
      "tree": {
        "sha": "dff49d868855a6c56a161c2564cb22b982c4c7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dff49d868855a6c56a161c2564cb22b982c4c7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74772d336d8832749661173d0b7ed232cac14e92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74772d336d8832749661173d0b7ed232cac14e92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74772d336d8832749661173d0b7ed232cac14e92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74772d336d8832749661173d0b7ed232cac14e92/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afc74707f889722cf0f7b515cd10d40e97cfd3ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afc74707f889722cf0f7b515cd10d40e97cfd3ce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "34b62b33ab4b482a6dcb925038ab12012c8e4dfa",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74772d336d8832749661173d0b7ed232cac14e92/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74772d336d8832749661173d0b7ed232cac14e92/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=74772d336d8832749661173d0b7ed232cac14e92",
        "patch": "@@ -79,13 +79,13 @@ script: |\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n   ORIGPATH=\"$PATH\""
      },
      {
        "sha": "8c2ea461333bd928d598615f69d904d3d20f8983",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74772d336d8832749661173d0b7ed232cac14e92/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74772d336d8832749661173d0b7ed232cac14e92/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=74772d336d8832749661173d0b7ed232cac14e92",
        "patch": "@@ -86,14 +86,14 @@ script: |\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n \n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n   ORIGPATH=\"$PATH\""
      },
      {
        "sha": "3b72fdbafab35526518abc630af30cca8f12e67b",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74772d336d8832749661173d0b7ed232cac14e92/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74772d336d8832749661173d0b7ed232cac14e92/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=74772d336d8832749661173d0b7ed232cac14e92",
        "patch": "@@ -105,14 +105,14 @@ script: |\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n \n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   mkdir -p $OUTDIR/src\n   cp ../$SOURCEDIST $OUTDIR/src\n   popd\n@@ -132,7 +132,7 @@ script: |\n     make ${MAKEOPTS} -C src check-security\n     make deploy\n     make install DESTDIR=${INSTALLPATH}\n-    cp -f dash-*setup*.exe $OUTDIR/\n+    cp -f dashcore-*setup*.exe $OUTDIR/\n     cd installed\n     mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n     find . -name \"lib*.la\" -delete"
      }
    ]
  },
  {
    "sha": "a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmM5MGMyNzRiY2ZkMDZkY2ZhOWU2NDU4NDZmMGQ2YzM5N2JhOTQ2",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T10:12:27Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-31T10:12:27Z"
      },
      "message": "Merge pull request #1114 from dashpay/v0.12.1.x_packaging\n\nFix Gitian Packaging",
      "tree": {
        "sha": "0f867c236a2e7f50df56cd4c6b31fc22b51e9449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f867c236a2e7f50df56cd4c6b31fc22b51e9449"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6c90c274bcfd06dcfa9e645846f0d6c397ba946/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "768eb2044fff36a7bb9e03b9923b432f2526680a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/768eb2044fff36a7bb9e03b9923b432f2526680a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/768eb2044fff36a7bb9e03b9923b432f2526680a"
      },
      {
        "sha": "74772d336d8832749661173d0b7ed232cac14e92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74772d336d8832749661173d0b7ed232cac14e92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74772d336d8832749661173d0b7ed232cac14e92"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8c2ea461333bd928d598615f69d904d3d20f8983",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6c90c274bcfd06dcfa9e645846f0d6c397ba946/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6c90c274bcfd06dcfa9e645846f0d6c397ba946/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
        "patch": "@@ -86,14 +86,14 @@ script: |\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n \n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n   ORIGPATH=\"$PATH\""
      },
      {
        "sha": "3b72fdbafab35526518abc630af30cca8f12e67b",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6c90c274bcfd06dcfa9e645846f0d6c397ba946/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6c90c274bcfd06dcfa9e645846f0d6c397ba946/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
        "patch": "@@ -105,14 +105,14 @@ script: |\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n \n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   mkdir -p $OUTDIR/src\n   cp ../$SOURCEDIST $OUTDIR/src\n   popd\n@@ -132,7 +132,7 @@ script: |\n     make ${MAKEOPTS} -C src check-security\n     make deploy\n     make install DESTDIR=${INSTALLPATH}\n-    cp -f dash-*setup*.exe $OUTDIR/\n+    cp -f dashcore-*setup*.exe $OUTDIR/\n     cd installed\n     mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n     find . -name \"lib*.la\" -delete"
      }
    ]
  },
  {
    "sha": "3b83dd4fd6b8520aa79ced8c3260fabff08117e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjgzZGQ0ZmQ2Yjg1MjBhYTc5Y2VkOGMzMjYwZmFiZmYwODExN2Uz",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T11:19:08Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-31T11:19:08Z"
      },
      "message": "Fix Pi packaging\n\nb97acc6 fixing packaging, #1106 broke it",
      "tree": {
        "sha": "597ed3fc4a8aafe43732a7c9f656e341234240dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/597ed3fc4a8aafe43732a7c9f656e341234240dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b83dd4fd6b8520aa79ced8c3260fabff08117e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b83dd4fd6b8520aa79ced8c3260fabff08117e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b83dd4fd6b8520aa79ced8c3260fabff08117e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b83dd4fd6b8520aa79ced8c3260fabff08117e3/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6c90c274bcfd06dcfa9e645846f0d6c397ba946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6c90c274bcfd06dcfa9e645846f0d6c397ba946"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "47740472889b00ab3e6e16e95323fca081ec223f",
        "filename": "contrib/gitian-descriptors/gitian-rpi2.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b83dd4fd6b8520aa79ced8c3260fabff08117e3/contrib/gitian-descriptors/gitian-rpi2.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b83dd4fd6b8520aa79ced8c3260fabff08117e3/contrib/gitian-descriptors/gitian-rpi2.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-rpi2.yml?ref=3b83dd4fd6b8520aa79ced8c3260fabff08117e3",
        "patch": "@@ -78,13 +78,13 @@ script: |\n   ./autogen.sh\n   ./configure --prefix=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`\n   make NO_QT=1 dist\n-  SOURCEDIST=`echo dash-*.tar.gz`\n+  SOURCEDIST=`echo dashcore-*.tar.gz`\n   DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`\n   # Correct tar file order\n   mkdir -p temp\n   pushd temp\n   tar xf ../$SOURCEDIST\n-  find dash-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n+  find dashcore-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n   ORIGPATH=\"$PATH\""
      }
    ]
  },
  {
    "sha": "b3f14b3c300062ca87e041423f6d2d9aedf93207",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2YxNGIzYzMwMDA2MmNhODdlMDQxNDIzZjZkMmQ5YWVkZjkzMjA3",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-10-31T13:03:06Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-31T13:03:06Z"
      },
      "message": "Fix Windows Packaging",
      "tree": {
        "sha": "a16ca41037c78b9c24ee3c973f930ed16cf5676a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a16ca41037c78b9c24ee3c973f930ed16cf5676a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3f14b3c300062ca87e041423f6d2d9aedf93207",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f14b3c300062ca87e041423f6d2d9aedf93207",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3f14b3c300062ca87e041423f6d2d9aedf93207",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f14b3c300062ca87e041423f6d2d9aedf93207/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b83dd4fd6b8520aa79ced8c3260fabff08117e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b83dd4fd6b8520aa79ced8c3260fabff08117e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b83dd4fd6b8520aa79ced8c3260fabff08117e3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ae4c65a2eb9ea21b81df17a204e83f63c6e86d87",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3f14b3c300062ca87e041423f6d2d9aedf93207/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3f14b3c300062ca87e041423f6d2d9aedf93207/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=b3f14b3c300062ca87e041423f6d2d9aedf93207",
        "patch": "@@ -48,7 +48,7 @@ Var StartMenuGroup\n !insertmacro MUI_LANGUAGE English\n \n # Installer attributes\n-OutFile @abs_top_srcdir@/dash-${VERSION}-win@WINDOWS_BITS@-setup.exe\n+OutFile @abs_top_srcdir@/dashcore-${VERSION}-win@WINDOWS_BITS@-setup.exe\n !if \"@WINDOWS_BITS@\" == \"64\"\n InstallDir $PROGRAMFILES64\\DashCore\n !else"
      }
    ]
  },
  {
    "sha": "4894345a58d988c5dec0a0b104487b4fa2644e04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODk0MzQ1YTU4ZDk4OGM1ZGVjMGEwYjEwNDQ4N2I0ZmEyNjQ0ZTA0",
    "commit": {
      "author": {
        "name": "Nathan Marley",
        "email": "nathan.marley@gmail.com",
        "date": "2016-10-31T18:20:49Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-10-31T18:20:49Z"
      },
      "message": "patch from @udjinm6 -- extract hash calc from loop (#1119)\n\ncalculate hash once before entering loop, should make it around an order of magnitude faster",
      "tree": {
        "sha": "9eb330ae6cd930c3788f27f7617d207beeb67af0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9eb330ae6cd930c3788f27f7617d207beeb67af0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4894345a58d988c5dec0a0b104487b4fa2644e04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4894345a58d988c5dec0a0b104487b4fa2644e04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4894345a58d988c5dec0a0b104487b4fa2644e04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4894345a58d988c5dec0a0b104487b4fa2644e04/comments",
    "author": {
      "login": "nmarley",
      "id": 1735354,
      "node_id": "MDQ6VXNlcjE3MzUzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1735354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmarley",
      "html_url": "https://github.com/nmarley",
      "followers_url": "https://api.github.com/users/nmarley/followers",
      "following_url": "https://api.github.com/users/nmarley/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmarley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmarley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmarley/subscriptions",
      "organizations_url": "https://api.github.com/users/nmarley/orgs",
      "repos_url": "https://api.github.com/users/nmarley/repos",
      "events_url": "https://api.github.com/users/nmarley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmarley/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3f14b3c300062ca87e041423f6d2d9aedf93207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f14b3c300062ca87e041423f6d2d9aedf93207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3f14b3c300062ca87e041423f6d2d9aedf93207"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "80e18e413b401e6bb38f3d15b1c096b0fb3c6999",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4894345a58d988c5dec0a0b104487b4fa2644e04/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4894345a58d988c5dec0a0b104487b4fa2644e04/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=4894345a58d988c5dec0a0b104487b4fa2644e04",
        "patch": "@@ -1125,12 +1125,13 @@ int CGovernanceManager::CountMatchingVotes(CGovernanceObject& govobj, vote_signa\n     LOCK(cs);\n     int nCount = 0;\n \n+    uint256 hash = govobj.GetHash();\n     std::map<uint256, CGovernanceVote>::iterator it = mapVotesByType.begin();\n     while(it != mapVotesByType.end())  {\n         if(it->second.IsValid() &&\n            it->second.GetSignal() == eVoteSignalIn &&\n            it->second.GetOutcome() == eVoteOutcomeIn &&\n-           it->second.GetParentHash() == govobj.GetHash()) {\n+           it->second.GetParentHash() == hash) {\n             ++nCount;\n         }\n         ++it;"
      }
    ]
  },
  {
    "sha": "ee60f6e76a043aeed932ed78aacfee62f5c99129",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTYwZjZlNzZhMDQzYWVlZDkzMmVkNzhhYWNmZWU2MmY1Yzk5MTI5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-02T15:54:36Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-02T15:54:36Z"
      },
      "message": "refactoring PS, cleanup, more log output in debug mode (#1121)\n\n* refactoring PS, cleanup, more log output in debug mode (part of #1120)\r\n\r\n* fix dsq rate limit calculations on new dsq",
      "tree": {
        "sha": "24352c669a08f4f4ea3bb123d515151b0eb3df02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24352c669a08f4f4ea3bb123d515151b0eb3df02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee60f6e76a043aeed932ed78aacfee62f5c99129",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee60f6e76a043aeed932ed78aacfee62f5c99129",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee60f6e76a043aeed932ed78aacfee62f5c99129",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee60f6e76a043aeed932ed78aacfee62f5c99129/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4894345a58d988c5dec0a0b104487b4fa2644e04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4894345a58d988c5dec0a0b104487b4fa2644e04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4894345a58d988c5dec0a0b104487b4fa2644e04"
      }
    ],
    "stats": {
      "total": 291,
      "additions": 130,
      "deletions": 161
    },
    "files": [
      {
        "sha": "15ea6d349350925a428e6e57f94d2a5164dc93ae",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 152,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee60f6e76a043aeed932ed78aacfee62f5c99129/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee60f6e76a043aeed932ed78aacfee62f5c99129/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=ee60f6e76a043aeed932ed78aacfee62f5c99129",
        "patch": "@@ -36,42 +36,39 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n     if(strCommand == NetMsgType::DSACCEPT) {\n \n-        PoolMessage nMessageID = MSG_NOERR;\n-\n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n-            nMessageID = ERR_VERSION;\n             LogPrintf(\"DSACCEPT -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_VERSION);\n             return;\n         }\n \n         if(!fMasterNode) {\n-            nMessageID = ERR_NOT_A_MN;\n             LogPrintf(\"DSACCEPT -- not a Masternode!\\n\");\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_NOT_A_MN);\n             return;\n         }\n \n         int nDenom;\n         CTransaction txCollateral;\n         vRecv >> nDenom >> txCollateral;\n \n+        LogPrint(\"privatesend\", \"DSACCEPT -- nDenom %d (%s)  txCollateral %s\", nDenom, GetDenominationsToString(nDenom), txCollateral.ToString());\n+\n         CMasternode* pmn = mnodeman.Find(activeMasternode.vin);\n         if(pmn == NULL) {\n-            nMessageID = ERR_MN_LIST;\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_MN_LIST);\n             return;\n         }\n \n-        if(nSessionUsers == 0 && pmn->nLastDsq != 0 &&\n+        if(vecSessionCollaterals.size() == 0 && pmn->nLastDsq != 0 &&\n             pmn->nLastDsq + mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5 > mnodeman.nDsqCount)\n         {\n             LogPrintf(\"DSACCEPT -- last dsq too recent, must wait: addr=%s\\n\", pfrom->addr.ToString());\n-            nMessageID = ERR_RECENT;\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_RECENT);\n             return;\n         }\n \n+        PoolMessage nMessageID = MSG_NOERR;\n         if(IsDenomCompatibleWithSession(nDenom, txCollateral, nMessageID)) {\n             LogPrintf(\"DSACCEPT -- is compatible, please submit!\\n\");\n             PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n@@ -94,86 +91,89 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         CDarksendQueue dsq;\n         vRecv >> dsq;\n \n-        CService addr;\n-        if(!dsq.GetAddress(addr) || !dsq.CheckSignature() || dsq.IsExpired()) return;\n+        LogPrint(\"privatesend\", \"DSQUEUE -- %s new\\n\", dsq.ToString());\n+\n+        if(dsq.IsExpired()) return;\n \n         CMasternode* pmn = mnodeman.Find(dsq.vin);\n         if(pmn == NULL) return;\n \n+        if(!dsq.CheckSignature(pmn->pubKeyMasternode)) {\n+            // we probably have outdated info\n+            mnodeman.AskForMN(pfrom, dsq.vin);\n+            return;\n+        }\n+\n         // if the queue is ready, submit if we can\n         if(dsq.fReady) {\n             if(!pSubmittedToMasternode) return;\n-            if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)addr) {\n-                LogPrintf(\"DSQUEUE -- message doesn't match current Masternode: pSubmittedToMasternode=%s, addr=%s\\n\", pSubmittedToMasternode->addr.ToString(), addr.ToString());\n+            if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)pmn->addr) {\n+                LogPrintf(\"DSQUEUE -- message doesn't match current Masternode: pSubmittedToMasternode=%s, addr=%s\\n\", pSubmittedToMasternode->addr.ToString(), pmn->addr.ToString());\n                 return;\n             }\n \n             if(nState == POOL_STATE_QUEUE) {\n-                LogPrint(\"privatesend\", \"DSQUEUE -- PrivateSend queue (%s) is ready on masternode %s\\n\", dsq.ToString(), addr.ToString());\n+                LogPrint(\"privatesend\", \"DSQUEUE -- PrivateSend queue (%s) is ready on masternode %s\\n\", dsq.ToString(), pmn->addr.ToString());\n                 SubmitDenominate();\n             }\n         } else {\n             BOOST_FOREACH(CDarksendQueue q, vecDarksendQueue)\n                 if(q.vin == dsq.vin) return;\n \n-            LogPrint(\"privatesend\", \"DSQUEUE -- nLastDsq: %d  threshold: %d  nDsqCount: %d\\n\", pmn->nLastDsq, pmn->nLastDsq + mnodeman.size()/5, mnodeman.nDsqCount);\n+            int nThreshold = pmn->nLastDsq + mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5;\n+            LogPrint(\"privatesend\", \"DSQUEUE -- nLastDsq: %d  threshold: %d  nDsqCount: %d\\n\", pmn->nLastDsq, nThreshold, mnodeman.nDsqCount);\n             //don't allow a few nodes to dominate the queuing process\n-            if(pmn->nLastDsq != 0 &&\n-                pmn->nLastDsq + mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5 > mnodeman.nDsqCount) {\n+            if(pmn->nLastDsq != 0 && nThreshold > mnodeman.nDsqCount) {\n                 LogPrint(\"privatesend\", \"DSQUEUE -- Masternode %s is sending too many dsq messages\\n\", pmn->addr.ToString());\n                 return;\n             }\n             mnodeman.nDsqCount++;\n             pmn->nLastDsq = mnodeman.nDsqCount;\n             pmn->fAllowMixingTx = true;\n \n-            LogPrint(\"privatesend\", \"DSQUEUE -- new PrivateSend queue (%s) from masternode %s\\n\", dsq.ToString(), addr.ToString());\n+            LogPrint(\"privatesend\", \"DSQUEUE -- new PrivateSend queue (%s) from masternode %s\\n\", dsq.ToString(), pmn->addr.ToString());\n             vecDarksendQueue.push_back(dsq);\n             dsq.Relay();\n             dsq.nTime = GetTime();\n         }\n \n     } else if(strCommand == NetMsgType::DSVIN) {\n-        PoolMessage nMessageID = MSG_NOERR;\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n             LogPrintf(\"DSVIN -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n-            nMessageID = ERR_VERSION;\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_VERSION);\n             return;\n         }\n \n         if(!fMasterNode) {\n             LogPrintf(\"DSVIN -- not a Masternode!\\n\");\n-            nMessageID = ERR_NOT_A_MN;\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_NOT_A_MN);\n             return;\n         }\n \n         CDarkSendEntry entry;\n         vRecv >> entry;\n \n         //do we have enough users in the current session?\n-        if(nSessionUsers < GetMaxPoolTransactions()) {\n+        if(!IsSessionReady()) {\n             LogPrintf(\"DSVIN -- session not complete!\\n\");\n-            nMessageID = ERR_SESSION;\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_SESSION);\n             return;\n         }\n \n+        LogPrint(\"privatesend\", \"DSVIN -- txCollateral %s\", entry.txCollateral.ToString());\n+\n         //do we have the same denominations as the current session?\n         if(!IsOutputsCompatibleWithSessionDenom(entry.vecTxDSOut)) {\n             LogPrintf(\"DSVIN -- not compatible with existing transactions!\\n\");\n-            nMessageID = ERR_EXISTING_TX;\n-            PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            PushStatus(pfrom, STATUS_REJECTED, ERR_EXISTING_TX);\n             return;\n         }\n \n         //check it like a transaction\n         {\n             CAmount nValueIn = 0;\n             CAmount nValueOut = 0;\n-            bool fMissingTx = false;\n \n             CMutableTransaction tx;\n \n@@ -183,14 +183,12 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n                 if(txout.scriptPubKey.size() != 25) {\n                     LogPrintf(\"DSVIN -- non-standard pubkey detected! scriptPubKey=%s\\n\", ScriptToAsmStr(txout.scriptPubKey));\n-                    nMessageID = ERR_NON_STANDARD_PUBKEY;\n-                    PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+                    PushStatus(pfrom, STATUS_REJECTED, ERR_NON_STANDARD_PUBKEY);\n                     return;\n                 }\n                 if(!txout.scriptPubKey.IsNormalPaymentScript()) {\n                     LogPrintf(\"DSVIN -- invalid script! scriptPubKey=%s\\n\", ScriptToAsmStr(txout.scriptPubKey));\n-                    nMessageID = ERR_INVALID_SCRIPT;\n-                    PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+                    PushStatus(pfrom, STATUS_REJECTED, ERR_INVALID_SCRIPT);\n                     return;\n                 }\n             }\n@@ -206,30 +204,23 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n                     if(txPrev.vout.size() > txin.prevout.n)\n                         nValueIn += txPrev.vout[txin.prevout.n].nValue;\n                 } else {\n-                    fMissingTx = true;\n+                    LogPrintf(\"DSVIN -- missing input! tx=%s\", tx.ToString());\n+                    PushStatus(pfrom, STATUS_REJECTED, ERR_MISSING_TX);\n+                    return;\n                 }\n             }\n \n             if(nValueIn > PRIVATESEND_POOL_MAX) {\n                 LogPrintf(\"DSVIN -- more than PrivateSend pool max! nValueIn: %lld, tx=%s\", nValueIn, tx.ToString());\n-                nMessageID = ERR_MAXIMUM;\n-                PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n-                return;\n-            }\n-\n-            if(fMissingTx) {\n-                LogPrintf(\"DSVIN -- missing input! tx=%s\", tx.ToString());\n-                nMessageID = ERR_MISSING_TX;\n-                PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+                PushStatus(pfrom, STATUS_REJECTED, ERR_MAXIMUM);\n                 return;\n             }\n \n             // Allow lowest denom (at max) as a a fee. Normally shouldn't happen though.\n             // TODO: Or do not allow fees at all?\n             if(nValueIn - nValueOut > vecPrivateSendDenominations.back()) {\n                 LogPrintf(\"DSVIN -- fees are too high! fees: %lld, tx=%s\", nValueIn - nValueOut, tx.ToString());\n-                nMessageID = ERR_FEES;\n-                PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+                PushStatus(pfrom, STATUS_REJECTED, ERR_FEES);\n                 return;\n             }\n \n@@ -239,13 +230,14 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n                 mempool.PrioritiseTransaction(tx.GetHash(), tx.GetHash().ToString(), 1000, 0.1*COIN);\n                 if(!AcceptToMemoryPool(mempool, validationState, CTransaction(tx), false, NULL, false, true, true)) {\n                     LogPrintf(\"DSVIN -- transaction not valid! tx=%s\", tx.ToString());\n-                    nMessageID = ERR_INVALID_TX;\n-                    PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+                    PushStatus(pfrom, STATUS_REJECTED, ERR_INVALID_TX);\n                     return;\n                 }\n             }\n         }\n \n+        PoolMessage nMessageID = MSG_NOERR;\n+\n         if(AddEntry(entry, nMessageID)) {\n             PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n             CheckPool();\n@@ -255,6 +247,7 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         }\n \n     } else if(strCommand == NetMsgType::DSSTATUSUPDATE) {\n+\n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n             LogPrintf(\"DSSTATUSUPDATE -- incompatible version! nVersion: %d\\n\", pfrom->nVersion);\n             return;\n@@ -310,6 +303,8 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         std::vector<CTxIn> vecTxIn;\n         vRecv >> vecTxIn;\n \n+        LogPrint(\"privatesend\", \"DSSIGNFINALTX -- vecTxIn.size() %s\\n\", vecTxIn.size());\n+\n         int nTxInIndex = 0;\n         int nTxInsCount = (int)vecTxIn.size();\n \n@@ -347,6 +342,8 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n+        LogPrint(\"privatesend\", \"DSFINALTX -- txNew %s\", txNew.ToString());\n+\n         //check to see if input is spent already? (and probably not confirmed)\n         SignFinalTransaction(txNew, pfrom);\n \n@@ -369,7 +366,7 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         vRecv >> nMsgSessionID >> fMsgError >> nMsgMessageID;\n \n         if(nMsgMessageID < MSG_POOL_MIN || nMsgMessageID > MSG_POOL_MAX) {\n-            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgMessageID is out of bounds: %d\\n\", nMsgMessageID);\n+            LogPrint(\"privatesend\", \"DSCOMPLETE -- nMsgMessageID is out of bounds: %d\\n\", nMsgMessageID);\n             return;\n         }\n \n@@ -378,6 +375,8 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n+        LogPrint(\"privatesend\", \"DSCOMPLETE -- nMsgSessionID %d  nMsgMessageID %d (%s)\\n\", nMsgSessionID, nMsgMessageID, GetMessageByID(PoolMessage(nMsgMessageID)));\n+\n         CompletedTransaction(fMsgError, PoolMessage(nMsgMessageID));\n     }\n }\n@@ -417,7 +416,7 @@ void CDarksendPool::SetNull()\n {\n     // MN side\n     nSessionUsers = 0;\n-    vecSessionCollateral.clear();\n+    vecSessionCollaterals.clear();\n \n     // Client side\n     nEntriesCount = 0;\n@@ -462,6 +461,11 @@ std::string CDarksendPool::GetStatus()\n     switch(nState) {\n         case POOL_STATE_IDLE:\n             return _(\"PrivateSend is idle.\");\n+        case POOL_STATE_QUEUE:\n+            if(     nStatusMessageProgress % 70 <= 30) strSuffix = \".\";\n+            else if(nStatusMessageProgress % 70 <= 50) strSuffix = \"..\";\n+            else if(nStatusMessageProgress % 70 <= 70) strSuffix = \"...\";\n+            return strprintf(_(\"Submitted to masternode, waiting in queue %s\"), strSuffix);;\n         case POOL_STATE_ACCEPTING_ENTRIES:\n             if(nEntriesCount == 0) {\n                 nStatusMessageProgress = 0;\n@@ -493,11 +497,6 @@ std::string CDarksendPool::GetStatus()\n             return _(\"PrivateSend request incomplete:\") + \" \" + strLastMessage + \" \" + _(\"Will retry...\");\n         case POOL_STATE_SUCCESS:\n             return _(\"PrivateSend request complete:\") + \" \" + strLastMessage;\n-        case POOL_STATE_QUEUE:\n-            if(     nStatusMessageProgress % 70 <= 30) strSuffix = \".\";\n-            else if(nStatusMessageProgress % 70 <= 50) strSuffix = \"..\";\n-            else if(nStatusMessageProgress % 70 <= 70) strSuffix = \"...\";\n-            return strprintf(_(\"Submitted to masternode, waiting in queue %s\"), strSuffix);;\n        default:\n             return strprintf(_(\"Unknown state: id = %u\"), nState);\n     }\n@@ -511,7 +510,7 @@ void CDarksendPool::CheckPool()\n     if(fMasterNode) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- entries count %lu\\n\", GetEntriesCount());\n \n-        // If entries is full, then move on to the next phase\n+        // If entries are full, then move on to the next phase\n         if(nState == POOL_STATE_ACCEPTING_ENTRIES && GetEntriesCount() >= GetMaxPoolTransactions()) {\n             LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- TRYING TRANSACTION\\n\");\n             SetState(POOL_STATE_FINALIZE_TRANSACTION);\n@@ -520,38 +519,14 @@ void CDarksendPool::CheckPool()\n \n     // create the finalized transaction for distribution to the clients\n     if(nState == POOL_STATE_FINALIZE_TRANSACTION) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- FINALIZE TRANSACTIONS\\n\");\n-        SetState(POOL_STATE_SIGNING);\n-\n-        if(!fMasterNode) return;\n-\n-        CMutableTransaction txNew;\n-\n-        // make our new transaction\n-        for(int i = 0; i < GetEntriesCount(); i++) {\n-            BOOST_FOREACH(const CTxDSOut& txdsout, vecEntries[i].vecTxDSOut)\n-                txNew.vout.push_back(txdsout);\n-\n-            BOOST_FOREACH(const CTxDSIn& txdsin, vecEntries[i].vecTxDSIn)\n-                txNew.vin.push_back(txdsin);\n-        }\n-\n-        // BIP69 https://github.com/kristovatlas/bips/blob/master/bip-0069.mediawiki\n-        sort(txNew.vin.begin(), txNew.vin.end());\n-        sort(txNew.vout.begin(), txNew.vout.end());\n-\n-        finalMutableTransaction = txNew;\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- finalMutableTransaction=%s\", txNew.ToString());\n-\n-        // request signatures from clients\n-        RelayFinalTransaction(finalMutableTransaction);\n+        CreateFinalTransaction();\n     }\n \n     // If we have all of the signatures, try to compile the transaction\n     if(fMasterNode && nState == POOL_STATE_SIGNING && IsSignaturesComplete()) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- SIGNING\\n\");\n         SetState(POOL_STATE_TRANSMISSION);\n-        CheckFinalTransaction();\n+        CommitFinalTransaction();\n     }\n \n     // reset if we're here for 10 seconds\n@@ -565,22 +540,50 @@ void CDarksendPool::CheckPool()\n     }\n }\n \n-void CDarksendPool::CheckFinalTransaction()\n+void CDarksendPool::CreateFinalTransaction()\n+{\n+    LogPrint(\"privatesend\", \"CDarksendPool::CreateFinalTransaction -- FINALIZE TRANSACTIONS\\n\");\n+\n+    CMutableTransaction txNew;\n+\n+    // make our new transaction\n+    for(int i = 0; i < GetEntriesCount(); i++) {\n+        BOOST_FOREACH(const CTxDSOut& txdsout, vecEntries[i].vecTxDSOut)\n+            txNew.vout.push_back(txdsout);\n+\n+        BOOST_FOREACH(const CTxDSIn& txdsin, vecEntries[i].vecTxDSIn)\n+            txNew.vin.push_back(txdsin);\n+    }\n+\n+    // BIP69 https://github.com/kristovatlas/bips/blob/master/bip-0069.mediawiki\n+    sort(txNew.vin.begin(), txNew.vin.end());\n+    sort(txNew.vout.begin(), txNew.vout.end());\n+\n+    finalMutableTransaction = txNew;\n+    LogPrint(\"privatesend\", \"CDarksendPool::CreateFinalTransaction -- finalMutableTransaction=%s\", txNew.ToString());\n+\n+    // request signatures from clients\n+    RelayFinalTransaction(finalMutableTransaction);\n+    SetState(POOL_STATE_SIGNING);\n+}\n+\n+void CDarksendPool::CommitFinalTransaction()\n {\n     if(!fMasterNode) return; // check and relay final tx only on masternode\n \n     CTransaction finalTransaction = CTransaction(finalMutableTransaction);\n+    uint256 hashTx = finalTransaction.GetHash();\n \n-    LogPrint(\"privatesend\", \"CDarksendPool::CheckFinalTransaction -- finalTransaction=%s\", finalTransaction.ToString());\n+    LogPrint(\"privatesend\", \"CDarksendPool::CommitFinalTransaction -- finalTransaction=%s\", finalTransaction.ToString());\n \n     {\n         // See if the transaction is valid\n         TRY_LOCK(cs_main, lockMain);\n         CValidationState validationState;\n-        mempool.PrioritiseTransaction(finalTransaction.GetHash(), finalTransaction.GetHash().ToString(), 1000, 0.1*COIN);\n+        mempool.PrioritiseTransaction(hashTx, hashTx.ToString(), 1000, 0.1*COIN);\n         if(!lockMain || !AcceptToMemoryPool(mempool, validationState, finalTransaction, false, NULL, false, true, true))\n         {\n-            LogPrintf(\"CDarksendPool::CheckFinalTransaction -- AcceptToMemoryPool() error: Transaction not valid\\n\");\n+            LogPrintf(\"CDarksendPool::CommitFinalTransaction -- AcceptToMemoryPool() error: Transaction not valid\\n\");\n             SetNull();\n \n             // not much we can do in this case\n@@ -590,18 +593,18 @@ void CDarksendPool::CheckFinalTransaction()\n         }\n     }\n \n-    LogPrintf(\"CDarksendPool::CheckFinalTransaction -- CREATING DSTX\\n\");\n+    LogPrintf(\"CDarksendPool::CommitFinalTransaction -- CREATING DSTX\\n\");\n \n     // create and sign masternode dstx transaction\n-    if(!mapDarksendBroadcastTxes.count(finalTransaction.GetHash())) {\n+    if(!mapDarksendBroadcastTxes.count(hashTx)) {\n         CDarksendBroadcastTx dstx(finalTransaction, activeMasternode.vin, GetAdjustedTime());\n         dstx.Sign();\n-        mapDarksendBroadcastTxes.insert(std::make_pair(finalTransaction.GetHash(), dstx));\n+        mapDarksendBroadcastTxes.insert(std::make_pair(hashTx, dstx));\n     }\n \n-    LogPrintf(\"CDarksendPool::CheckFinalTransaction -- TRANSMITTING DSTX\\n\");\n+    LogPrintf(\"CDarksendPool::CommitFinalTransaction -- TRANSMITTING DSTX\\n\");\n \n-    CInv inv(MSG_DSTX, finalTransaction.GetHash());\n+    CInv inv(MSG_DSTX, hashTx);\n     RelayInv(inv);\n \n     // Tell the clients it was successful\n@@ -611,7 +614,7 @@ void CDarksendPool::CheckFinalTransaction()\n     ChargeRandomFees();\n \n     // Reset\n-    LogPrint(\"privatesend\", \"CDarksendPool::CheckFinalTransaction -- COMPLETED -- RESETTING\\n\");\n+    LogPrint(\"privatesend\", \"CDarksendPool::CommitFinalTransaction -- COMPLETED -- RESETTING\\n\");\n     SetNull();\n     RelayStatus(STATUS_SET_STATE);\n }\n@@ -638,7 +641,7 @@ void CDarksendPool::ChargeFees()\n     if(r > 33) return;\n \n     if(nState == POOL_STATE_ACCEPTING_ENTRIES) {\n-        BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollateral) {\n+        BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n             bool fFound = false;\n             BOOST_FOREACH(const CDarkSendEntry& entry, vecEntries)\n                 if(entry.txCollateral == txCollateral)\n@@ -678,7 +681,7 @@ void CDarksendPool::ChargeFees()\n     if(nOffences > 1) nTarget = 50;\n \n     if(nState == POOL_STATE_ACCEPTING_ENTRIES) {\n-        BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollateral) {\n+        BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n             bool fFound = false;\n             BOOST_FOREACH(const CDarkSendEntry& entry, vecEntries)\n                 if(entry.txCollateral == txCollateral)\n@@ -740,7 +743,7 @@ void CDarksendPool::ChargeRandomFees()\n {\n     if(!fMasterNode) return;\n \n-    BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollateral) {\n+    BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n         int r = insecure_rand()%100;\n \n         if(r > 10) return;\n@@ -852,7 +855,7 @@ void CDarksendPool::CheckForCompleteQueue()\n {\n     if(!fEnablePrivateSend && !fMasterNode) return;\n \n-    if(nState == POOL_STATE_QUEUE && nSessionUsers == GetMaxPoolTransactions()) {\n+    if(nState == POOL_STATE_QUEUE && IsSessionReady()) {\n         SetState(POOL_STATE_ACCEPTING_ENTRIES);\n \n         CDarksendQueue dsq(nSessionDenom, activeMasternode.vin, GetTime(), true);\n@@ -908,7 +911,7 @@ bool CDarksendPool::IsInputScriptSigValid(const CTxIn& txin)\n // check to make sure the collateral provided by the client is valid\n bool CDarksendPool::IsCollateralValid(const CTransaction& txCollateral)\n {\n-    if(txCollateral.vout.size() < 1) return false;\n+    if(txCollateral.vout.empty()) return false;\n     if(txCollateral.nLockTime != 0) return false;\n \n     CAmount nValueIn = 0;\n@@ -1084,10 +1087,6 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n     BOOST_FOREACH(CTxIn txin, vecTxIn)\n         vecOutPointLocked.push_back(txin.prevout);\n \n-    //BOOST_FOREACH(CTxOut o, vecTxOut)\n-    //    LogPrintf(\" vecTxOut - %s\\n\", o.ToString());\n-\n-\n     // we should already be connected to a Masternode\n     if(!fSessionFoundMasternode) {\n         LogPrintf(\"CDarksendPool::SendDenominate -- No Masternode has been selected yet.\\n\");\n@@ -1196,10 +1195,10 @@ bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCou\n //\n bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew, CNode* pnode)\n {\n-    if(fMasterNode) return false;\n+    if(fMasterNode || pnode == NULL) return false;\n \n     finalMutableTransaction = finalTransactionNew;\n-    LogPrintf(\"CDarksendPool::SignFinalTransaction -- %s\", finalMutableTransaction.ToString());\n+    LogPrintf(\"CDarksendPool::SignFinalTransaction -- finalMutableTransaction=%s\", finalMutableTransaction.ToString());\n \n     std::vector<CTxIn> sigs;\n \n@@ -1258,7 +1257,6 @@ bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew\n                 sigs.push_back(finalMutableTransaction.vin[nMyInputIndex]);\n                 LogPrint(\"privatesend\", \"CDarksendPool::SignFinalTransaction -- nMyInputIndex: %d, sigs.size(): %d, scriptSig=%s\\n\", nMyInputIndex, (int)sigs.size(), ScriptToAsmStr(finalMutableTransaction.vin[nMyInputIndex].scriptSig));\n             }\n-\n         }\n \n         LogPrint(\"privatesend\", \"CDarksendPool::SignFinalTransaction -- finalMutableTransaction=%s\", finalMutableTransaction.ToString());\n@@ -1523,8 +1521,10 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         }\n     }\n \n+    int nMnCountEnabled = mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION);\n+\n     // If we've used 90% of the Masternode list then drop the oldest first ~30%\n-    int nThreshold_high = (int)(mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION) * 0.9);\n+    int nThreshold_high = nMnCountEnabled * 0.9;\n     int nThreshold_low = nThreshold_high * 0.7;\n     LogPrint(\"privatesend\", \"Checking vecMasternodesUsed: size: %d, threshold: %d\\n\", (int)vecMasternodesUsed.size(), nThreshold_high);\n \n@@ -1542,12 +1542,13 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             if(dsq.nTime == 0) continue;\n             if(dsq.IsExpired()) continue;\n \n-            CService addr;\n-            if(!dsq.GetAddress(addr)) continue;\n+            CMasternode* pmn = mnodeman.Find(dsq.vin);\n+            if(pmn == NULL) {\n+                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- dsq masternode is not in masternode list, masternode=%s\\n\", dsq.vin.prevout.ToStringShort());\n+                continue;\n+            }\n \n-            int nProtocolVersion;\n-            if(!dsq.GetProtocolVersion(nProtocolVersion)) continue;\n-            if(nProtocolVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) continue;\n+            if(pmn->nProtocolVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) continue;\n \n             // incompatible denom\n             if(dsq.nDenom >= (1 << vecPrivateSendDenominations.size())) continue;\n@@ -1572,17 +1573,12 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 continue;\n             }\n \n-            CMasternode* pmn = mnodeman.Find(dsq.vin);\n-            if(pmn == NULL) {\n-                LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- dsq masternode is not in masternode list, masternode=%s\\n\", dsq.vin.prevout.ToStringShort());\n-                continue;\n-            }\n             vecMasternodesUsed.push_back(dsq.vin);\n \n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt to connect to masternode from queue, addr=%s\\n\", pmn->addr.ToString());\n             nLastTimeChanged = GetTimeMillis();\n             // connect to Masternode and submit the queue request\n-            CNode* pnode = ConnectNode((CAddress)addr, NULL, true);\n+            CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n             if(pnode) {\n                 pSubmittedToMasternode = pmn;\n                 nSessionDenom = dsq.nDenom;\n@@ -1618,12 +1614,11 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         }\n         vecMasternodesUsed.push_back(pmn->vin);\n \n-        int nFifthCompatible = mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5;\n-        if(pmn->nLastDsq != 0 && pmn->nLastDsq + nFifthCompatible > mnodeman.nDsqCount) {\n+        if(pmn->nLastDsq != 0 && pmn->nLastDsq + nMnCountEnabled/5 > mnodeman.nDsqCount) {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- Too early to mix on this masternode!\"\n                         \" masternode=%s  addr=%s  nLastDsq=%d  CountEnabled/5=%d  nDsqCount=%d\\n\",\n                         pmn->vin.prevout.ToStringShort(), pmn->addr.ToString(), pmn->nLastDsq,\n-                        nFifthCompatible, mnodeman.nDsqCount);\n+                        nMnCountEnabled/5, mnodeman.nDsqCount);\n             nTries++;\n             continue;\n         }\n@@ -2070,7 +2065,7 @@ bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txColl\n         }\n \n         SetState(POOL_STATE_QUEUE);\n-        vecSessionCollateral.push_back(txCollateral);\n+        vecSessionCollaterals.push_back(txCollateral);\n         return true;\n     }\n \n@@ -2091,7 +2086,7 @@ bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txColl\n     nMessageIDRet = MSG_NOERR;\n     nSessionUsers++;\n     nLastTimeChanged = GetTimeMillis();\n-    vecSessionCollateral.push_back(txCollateral);\n+    vecSessionCollaterals.push_back(txCollateral);\n \n     return true;\n }\n@@ -2330,43 +2325,22 @@ bool CDarksendQueue::Sign()\n         return false;\n     }\n \n-    return CheckSignature();\n+    return CheckSignature(activeMasternode.pubKeyMasternode);\n }\n \n-bool CDarksendQueue::CheckSignature()\n+bool CDarksendQueue::CheckSignature(const CPubKey& pubKeyMasternode)\n {\n-    CMasternode* pmn = mnodeman.Find(vin);\n-    if(pmn == NULL) return false;\n-\n     std::string strMessage = vin.ToString() + boost::lexical_cast<std::string>(nDenom) + boost::lexical_cast<std::string>(nTime) + boost::lexical_cast<std::string>(fReady);\n     std::string strError = \"\";\n \n-    if(!darkSendSigner.VerifyMessage(pmn->pubKeyMasternode, vchSig, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n         LogPrintf(\"CDarksendQueue::CheckSignature -- Got bad Masternode queue signature: %s; error: %s\\n\", ToString(), strError);\n         return false;\n     }\n \n     return true;\n }\n \n-bool CDarksendQueue::GetAddress(CService &addrRet)\n-{\n-    CMasternode* pmn = mnodeman.Find(vin);\n-    if(pmn == NULL) return false;\n-\n-    addrRet = pmn->addr;\n-    return true;\n-}\n-\n-bool CDarksendQueue::GetProtocolVersion(int &nProtocolVersionRet)\n-{\n-    CMasternode* pmn = mnodeman.Find(vin);\n-    if(pmn == NULL) return false;\n-\n-    nProtocolVersionRet = pmn->nProtocolVersion;\n-    return true;\n-}\n-\n bool CDarksendQueue::Relay()\n {\n     LOCK(cs_vNodes);\n@@ -2388,18 +2362,15 @@ bool CDarksendBroadcastTx::Sign()\n         return false;\n     }\n \n-    return CheckSignature();\n+    return CheckSignature(activeMasternode.pubKeyMasternode);\n }\n \n-bool CDarksendBroadcastTx::CheckSignature()\n+bool CDarksendBroadcastTx::CheckSignature(const CPubKey& pubKeyMasternode)\n {\n-    CMasternode* pmn = mnodeman.Find(vin);\n-    if(pmn == NULL) return false;\n-\n     std::string strMessage = tx.GetHash().ToString() + boost::lexical_cast<std::string>(sigTime);\n     std::string strError = \"\";\n \n-    if(!darkSendSigner.VerifyMessage(pmn->pubKeyMasternode, vchSig, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n         LogPrintf(\"CDarksendBroadcastTx::CheckSignature -- Got bad dstx signature, error: %s\\n\", strError);\n         return false;\n     }"
      },
      {
        "sha": "313fea6ad3ed328a7ace298979f762838141604f",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee60f6e76a043aeed932ed78aacfee62f5c99129/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee60f6e76a043aeed932ed78aacfee62f5c99129/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=ee60f6e76a043aeed932ed78aacfee62f5c99129",
        "patch": "@@ -172,9 +172,6 @@ class CDarksendQueue\n         READWRITE(vchSig);\n     }\n \n-    bool GetAddress(CService &addrRet);\n-    bool GetProtocolVersion(int &nProtocolVersionRet);\n-\n     /** Sign this mixing transaction\n      *  \\return true if all conditions are met:\n      *     1) we have an active Masternode,\n@@ -184,7 +181,7 @@ class CDarksendQueue\n      */\n     bool Sign();\n     /// Check if we have a valid Masternode address\n-    bool CheckSignature();\n+    bool CheckSignature(const CPubKey& pubKeyMasternode);\n \n     bool Relay();\n \n@@ -233,7 +230,7 @@ class CDarksendBroadcastTx\n     }\n \n     bool Sign();\n-    bool CheckSignature();\n+    bool CheckSignature(const CPubKey& pubKeyMasternode);\n };\n \n /** Helper object for signing and checking signatures\n@@ -317,7 +314,7 @@ class CDarksendPool\n     std::vector<COutPoint> vecOutPointLocked;\n     // Mixing uses collateral transactions to trust parties entering the pool\n     // to behave honestly. If they don't it takes their money.\n-    std::vector<CTransaction> vecSessionCollateral;\n+    std::vector<CTransaction> vecSessionCollaterals;\n     std::vector<CDarkSendEntry> vecEntries; // Masternode/clients entries\n \n     PoolState nState; // should be one of the POOL_STATE_XXX values\n@@ -331,7 +328,7 @@ class CDarksendPool\n     int nSessionUsers; //N Users have said they'll join\n     bool fSessionFoundMasternode; //If we've found a compatible Masternode\n \n-    unsigned int nEntriesCount;\n+    int nEntriesCount;\n     bool fLastEntryAccepted;\n \n     std::string strLastMessage;\n@@ -355,7 +352,8 @@ class CDarksendPool\n     /// Check for process\n     void CheckPool();\n \n-    void CheckFinalTransaction();\n+    void CreateFinalTransaction();\n+    void CommitFinalTransaction();\n \n     void CompletedTransaction(bool fError, PoolMessage nMessageID);\n "
      },
      {
        "sha": "f7b3b82fbe5dea7db46591dee9878288e232491e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee60f6e76a043aeed932ed78aacfee62f5c99129/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee60f6e76a043aeed932ed78aacfee62f5c99129/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ee60f6e76a043aeed932ed78aacfee62f5c99129",
        "patch": "@@ -5726,7 +5726,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // we have no idea about (e.g we were offline)? How to handle them?\n             }\n \n-            if(!dstx.CheckSignature()) {\n+            if(!dstx.CheckSignature(pmn->pubKeyMasternode)) {\n                 LogPrint(\"privatesend\", \"DSTX -- CheckSignature() failed for %s\\n\", hashTx.ToString());\n                 return false;\n             }"
      }
    ]
  },
  {
    "sha": "9ed18fdcbec5137136c4e74a748dd1b12de02d94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWQxOGZkY2JlYzUxMzcxMzZjNGU3NGE3NDhkZDFiMTJkZTAyZDk0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-02T18:05:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-02T18:05:30Z"
      },
      "message": "refactor `Charge*Fees` to have less steps, also switch it to mempool instead of wallet (#1122)",
      "tree": {
        "sha": "c882c8552308412696f12245f8b6a3cbea812199",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c882c8552308412696f12245f8b6a3cbea812199"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ed18fdcbec5137136c4e74a748dd1b12de02d94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ed18fdcbec5137136c4e74a748dd1b12de02d94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ed18fdcbec5137136c4e74a748dd1b12de02d94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ed18fdcbec5137136c4e74a748dd1b12de02d94/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee60f6e76a043aeed932ed78aacfee62f5c99129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee60f6e76a043aeed932ed78aacfee62f5c99129",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee60f6e76a043aeed932ed78aacfee62f5c99129"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 32,
      "deletions": 68
    },
    "files": [
      {
        "sha": "0648edd13fae51b7ef15a391d1297af6fb91a898",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 68,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ed18fdcbec5137136c4e74a748dd1b12de02d94/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ed18fdcbec5137136c4e74a748dd1b12de02d94/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=9ed18fdcbec5137136c4e74a748dd1b12de02d94",
        "patch": "@@ -636,9 +636,9 @@ void CDarksendPool::ChargeFees()\n     if(!fMasterNode) return;\n \n     //we don't need to charge collateral for every offence.\n-    int nOffences = 0;\n-    int r = insecure_rand()%100;\n-    if(r > 33) return;\n+    if(GetInsecureRand(100) > 33) return;\n+\n+    std::vector<CTransaction> vecOffendersCollaterals;\n \n     if(nState == POOL_STATE_ACCEPTING_ENTRIES) {\n         BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n@@ -649,8 +649,8 @@ void CDarksendPool::ChargeFees()\n \n             // This queue entry didn't send us the promised transaction\n             if(!fFound) {\n-                LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't send transaction). Found offence.\\n\");\n-                nOffences++;\n+                LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't send transaction), found offence\\n\");\n+                vecOffendersCollaterals.push_back(txCollateral);\n             }\n         }\n     }\n@@ -660,69 +660,36 @@ void CDarksendPool::ChargeFees()\n         BOOST_FOREACH(const CDarkSendEntry entry, vecEntries) {\n             BOOST_FOREACH(const CTxDSIn txdsin, entry.vecTxDSIn) {\n                 if(!txdsin.fHasSig) {\n-                    LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't sign). Found offence\\n\");\n-                    nOffences++;\n+                    LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't sign), found offence\\n\");\n+                    vecOffendersCollaterals.push_back(entry.txCollateral);\n                 }\n             }\n         }\n     }\n \n-    //pick random client to charge\n-    r = insecure_rand()%100;\n-    int nTarget = 0;\n+    // no offences found\n+    if(vecOffendersCollaterals.empty()) return;\n \n-    //mostly offending?\n-    if(nOffences >= Params().PoolMaxTransactions() - 1 && r > 33) return;\n+    //mostly offending? Charge sometimes\n+    if((int)vecOffendersCollaterals.size() >= Params().PoolMaxTransactions() - 1 && GetInsecureRand(100) > 33) return;\n \n     //everyone is an offender? That's not right\n-    if(nOffences >= Params().PoolMaxTransactions()) return;\n+    if((int)vecOffendersCollaterals.size() >= Params().PoolMaxTransactions()) return;\n \n     //charge one of the offenders randomly\n-    if(nOffences > 1) nTarget = 50;\n-\n-    if(nState == POOL_STATE_ACCEPTING_ENTRIES) {\n-        BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n-            bool fFound = false;\n-            BOOST_FOREACH(const CDarkSendEntry& entry, vecEntries)\n-                if(entry.txCollateral == txCollateral)\n-                    fFound = true;\n-\n-            // This queue entry didn't send us the promised transaction\n-            if(!fFound && r > nTarget) {\n-                LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't send transaction). charging fees.\\n\");\n-\n-                CWalletTx wtxCollateral = CWalletTx(pwalletMain, txCollateral);\n-\n-                // Broadcast\n-                // This must not fail. The transaction has already been signed and recorded.\n-                if(!wtxCollateral.AcceptToMemoryPool(true)) {\n-                    LogPrintf(\"CDarksendPool::ChargeFees -- Error: Transaction not valid\\n\");\n-                    return;\n-                }\n-                wtxCollateral.RelayWalletTransaction();\n-                return;\n-            }\n-        }\n-    }\n-\n-    if(nState == POOL_STATE_SIGNING) {\n-        // who didn't sign?\n-        BOOST_FOREACH(const CDarkSendEntry& entry, vecEntries) {\n-            BOOST_FOREACH(const CTxDSIn& txdsin, entry.vecTxDSIn) {\n-                if(!txdsin.fHasSig && r > nTarget) {\n-                    LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't sign). charging fees.\\n\");\n+    std::random_shuffle(vecOffendersCollaterals.begin(), vecOffendersCollaterals.end());\n \n-                    CWalletTx wtxCollateral = CWalletTx(pwalletMain, entry.txCollateral);\n+    if(nState == POOL_STATE_ACCEPTING_ENTRIES || nState == POOL_STATE_SIGNING) {\n+        LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't %s transaction), charging fees: %s\\n\",\n+                (nState == POOL_STATE_SIGNING) ? \"sign\" : \"send\", vecOffendersCollaterals[0].ToString());\n \n-                    // Broadcast\n-                    if(!wtxCollateral.AcceptToMemoryPool(false)) {\n-                        // This must not fail. The transaction has already been signed and recorded.\n-                        LogPrintf(\"CDarksendPool::ChargeFees -- Error: Transaction not valid\\n\");\n-                    }\n-                    wtxCollateral.RelayWalletTransaction();\n-                    return;\n-                }\n-            }\n+        CValidationState state;\n+        bool fMissingInputs;\n+        if(!AcceptToMemoryPool(mempool, state, vecOffendersCollaterals[0], false, &fMissingInputs, false, true)) {\n+            // should never really happen\n+            LogPrintf(\"CDarksendPool::ChargeFees -- ERROR: AcceptToMemoryPool failed!\\n\");\n+        } else {\n+            RelayTransaction(vecOffendersCollaterals[0]);\n         }\n     }\n }\n@@ -744,22 +711,19 @@ void CDarksendPool::ChargeRandomFees()\n     if(!fMasterNode) return;\n \n     BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n-        int r = insecure_rand()%100;\n \n-        if(r > 10) return;\n+        if(GetInsecureRand(100) > 10) return;\n \n-        LogPrintf(\"CDarksendPool::ChargeRandomFees -- charging random fees, collateral, txCollateral=%s\", txCollateral.ToString());\n+        LogPrintf(\"CDarksendPool::ChargeRandomFees -- charging random fees, txCollateral=%s\", txCollateral.ToString());\n \n-        CWalletTx wtxCollateral = CWalletTx(pwalletMain, txCollateral);\n-\n-        // This must not fail. The transaction has already been signed and recorded.\n-        if(!wtxCollateral.AcceptToMemoryPool(true)) {\n-            LogPrintf(\"CDarksendPool::ChargeRandomFees -- Error: Transaction not valid, txCollateral=%s\", txCollateral.ToString());\n-            return;\n+        CValidationState state;\n+        bool fMissingInputs;\n+        if(!AcceptToMemoryPool(mempool, state, txCollateral, false, &fMissingInputs, false, true)) {\n+            // should never really happen\n+            LogPrintf(\"CDarksendPool::ChargeRandomFees -- ERROR: AcceptToMemoryPool failed!\\n\");\n+        } else {\n+            RelayTransaction(txCollateral);\n         }\n-\n-        // Broadcast\n-        wtxCollateral.RelayWalletTransaction();\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "a4dfcae8f960433ea1cdc32edd14817183338eea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGRmY2FlOGY5NjA0MzNlYTFjZGMzMmVkZDE0ODE3MTgzMzM4ZWVh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-02T18:43:20Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-02T18:43:20Z"
      },
      "message": "fix crash (#1126)\n\nFixes dash-qt --version (--help etc) crash (Segmentation fault: 11)",
      "tree": {
        "sha": "f6c013146df03d5b398e53c314a48c0de6b4e20d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6c013146df03d5b398e53c314a48c0de6b4e20d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4dfcae8f960433ea1cdc32edd14817183338eea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4dfcae8f960433ea1cdc32edd14817183338eea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4dfcae8f960433ea1cdc32edd14817183338eea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4dfcae8f960433ea1cdc32edd14817183338eea/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ed18fdcbec5137136c4e74a748dd1b12de02d94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ed18fdcbec5137136c4e74a748dd1b12de02d94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ed18fdcbec5137136c4e74a748dd1b12de02d94"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cb3c3375a2a4e93111194b0ec80e1de3ce0e3ae6",
        "filename": "src/qt/dash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4dfcae8f960433ea1cdc32edd14817183338eea/src/qt/dash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4dfcae8f960433ea1cdc32edd14817183338eea/src/qt/dash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/dash.cpp?ref=a4dfcae8f960433ea1cdc32edd14817183338eea",
        "patch": "@@ -372,7 +372,7 @@ BitcoinApplication::~BitcoinApplication()\n #endif\n     // Delete Qt-settings if user clicked on \"Reset Options\"\n     QSettings settings;\n-    if(optionsModel->resetSettings){\n+    if(optionsModel && optionsModel->resetSettings){\n         settings.clear();\n         settings.sync();\n     }"
      }
    ]
  },
  {
    "sha": "eb92933d522381edc21c0770eb0f6bd4df16fcaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjkyOTMzZDUyMjM4MWVkYzIxYzA3NzBlYjBmNmJkNGRmMTZmY2Fm",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-11-05T16:13:16Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-05T16:13:16Z"
      },
      "message": "[UI] In-wallet PrivateSend help (#1129)",
      "tree": {
        "sha": "42cfeee985f1c0ff730ccd0deba7a2b3dd0c80dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42cfeee985f1c0ff730ccd0deba7a2b3dd0c80dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb92933d522381edc21c0770eb0f6bd4df16fcaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb92933d522381edc21c0770eb0f6bd4df16fcaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb92933d522381edc21c0770eb0f6bd4df16fcaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb92933d522381edc21c0770eb0f6bd4df16fcaf/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4dfcae8f960433ea1cdc32edd14817183338eea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4dfcae8f960433ea1cdc32edd14817183338eea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4dfcae8f960433ea1cdc32edd14817183338eea"
      }
    ],
    "stats": {
      "total": 531,
      "additions": 318,
      "deletions": 213
    },
    "files": [
      {
        "sha": "07a7651908e889e22fc4cbb576a8e3481b7b22e7",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 223,
        "deletions": 213,
        "changes": 436,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "patch": "@@ -405,223 +405,233 @@\n          </property>\n          <layout class=\"QVBoxLayout\" name=\"VerticalLayout_PS1\">\n           <item>\n-           <widget class=\"QWidget\" name=\"layoutWidgetPrivateSendHeader\">\n-            <layout class=\"QHBoxLayout\" name=\"horizontalLayout_5\">\n-             <item>\n-              <widget class=\"QLabel\" name=\"labelPrivateSendHeader\">\n-               <property name=\"font\">\n-                <font>\n-                 <weight>75</weight>\n-                 <bold>true</bold>\n-                </font>\n-               </property>\n-               <property name=\"text\">\n-                <string>PrivateSend</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item>\n-              <widget class=\"QLabel\" name=\"labelPrivateSendSyncStatus\">\n-               <property name=\"toolTip\">\n-                <string>The displayed information may be out of date. Your wallet automatically synchronizes with the Dash network after a connection is established, but this process has not completed yet.</string>\n-               </property>\n-               <property name=\"styleSheet\">\n-                <string notr=\"true\">QLabel { color: red; }</string>\n-               </property>\n-               <property name=\"text\">\n-                <string notr=\"true\">(out of sync)</string>\n-               </property>\n-               <property name=\"alignment\">\n-                <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>\n-               </property>\n-              </widget>\n-             </item>\n-             <item>\n-              <spacer name=\"horizontalSpacer_4\">\n-               <property name=\"orientation\">\n-                <enum>Qt::Horizontal</enum>\n-               </property>\n-               <property name=\"sizeHint\" stdset=\"0\">\n-                <size>\n-                 <width>40</width>\n-                 <height>20</height>\n-                </size>\n-               </property>\n-              </spacer>\n-             </item>\n-            </layout>\n-           </widget>\n+           <layout class=\"QHBoxLayout\" name=\"horizontalLayout_5\">\n+            <item>\n+             <widget class=\"QLabel\" name=\"labelPrivateSendHeader\">\n+              <property name=\"font\">\n+               <font>\n+                <weight>75</weight>\n+                <bold>true</bold>\n+               </font>\n+              </property>\n+              <property name=\"text\">\n+               <string>PrivateSend</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item>\n+             <widget class=\"QLabel\" name=\"labelPrivateSendSyncStatus\">\n+              <property name=\"toolTip\">\n+               <string>The displayed information may be out of date. Your wallet automatically synchronizes with the Dash network after a connection is established, but this process has not completed yet.</string>\n+              </property>\n+              <property name=\"styleSheet\">\n+               <string notr=\"true\">QLabel { color: red; }</string>\n+              </property>\n+              <property name=\"text\">\n+               <string notr=\"true\">(out of sync)</string>\n+              </property>\n+              <property name=\"alignment\">\n+               <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>\n+              </property>\n+             </widget>\n+            </item>\n+            <item>\n+             <spacer name=\"horizontalSpacer_4\">\n+              <property name=\"orientation\">\n+               <enum>Qt::Horizontal</enum>\n+              </property>\n+              <property name=\"sizeHint\" stdset=\"0\">\n+               <size>\n+                <width>40</width>\n+                <height>20</height>\n+               </size>\n+              </property>\n+             </spacer>\n+            </item>\n+           </layout>\n           </item>\n           <item>\n-           <widget class=\"QWidget\" name=\"privateSendFormLayoutWidget\">\n-            <layout class=\"QFormLayout\" name=\"privateSendFormLayout\">\n-             <property name=\"fieldGrowthPolicy\">\n-              <enum>QFormLayout::AllNonFixedFieldsGrow</enum>\n-             </property>\n-             <property name=\"horizontalSpacing\">\n-              <number>11</number>\n-             </property>\n-             <property name=\"verticalSpacing\">\n-              <number>12</number>\n-             </property>\n-             <item row=\"0\" column=\"0\">\n-              <widget class=\"QLabel\" name=\"labelPrivateSendEnabledText\">\n-               <property name=\"text\">\n-                <string>Status:</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"0\" column=\"1\">\n-              <widget class=\"QLabel\" name=\"labelPrivateSendEnabled\">\n-               <property name=\"text\">\n-                <string>Enabled/Disabled</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"1\" column=\"0\">\n-              <widget class=\"QLabel\" name=\"labelCompletitionText\">\n-               <property name=\"text\">\n-                <string>Completion:</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"1\" column=\"1\">\n-              <widget class=\"QProgressBar\" name=\"privateSendProgress\">\n-               <property name=\"maximumSize\">\n-                <size>\n-                 <width>154</width>\n-                 <height>16777215</height>\n-                </size>\n-               </property>\n-               <property name=\"value\">\n-                <number>0</number>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"2\" column=\"0\">\n-              <widget class=\"QLabel\" name=\"labelAnonymizedText\">\n-               <property name=\"text\">\n-                <string>PrivateSend Balance:</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"2\" column=\"1\">\n-              <widget class=\"QLabel\" name=\"labelAnonymized\">\n-               <property name=\"font\">\n-                <font>\n-                 <weight>75</weight>\n-                 <bold>true</bold>\n-                </font>\n-               </property>\n-               <property name=\"text\">\n-                <string notr=\"true\">0 DASH</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"3\" column=\"0\">\n-              <widget class=\"QLabel\" name=\"labelAmountAndRoundsText\">\n-               <property name=\"text\">\n-                <string>Amount and Rounds:</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"3\" column=\"1\">\n-              <widget class=\"QLabel\" name=\"labelAmountRounds\">\n-               <property name=\"text\">\n-                <string>0 DASH / 0 Rounds</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"4\" column=\"0\">\n-              <widget class=\"QLabel\" name=\"labelSubmittedDenomText\">\n-               <property name=\"text\">\n-                <string>Submitted Denom:</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item row=\"4\" column=\"1\">\n-              <widget class=\"QLabel\" name=\"labelSubmittedDenom\">\n-               <property name=\"toolTip\">\n-                <string>The denominations you submitted to the Masternode.&lt;br&gt;To mix, other users must submit the exact same denominations.</string>\n-               </property>\n-               <property name=\"text\">\n-                <string>n/a</string>\n-               </property>\n-              </widget>\n-             </item>\n-            </layout>\n-           </widget>\n+           <layout class=\"QFormLayout\" name=\"privateSendFormLayout\">\n+            <property name=\"fieldGrowthPolicy\">\n+             <enum>QFormLayout::AllNonFixedFieldsGrow</enum>\n+            </property>\n+            <property name=\"horizontalSpacing\">\n+             <number>11</number>\n+            </property>\n+            <property name=\"verticalSpacing\">\n+             <number>12</number>\n+            </property>\n+            <item row=\"0\" column=\"0\">\n+             <widget class=\"QLabel\" name=\"labelPrivateSendEnabledText\">\n+              <property name=\"text\">\n+               <string>Status:</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"0\" column=\"1\">\n+             <widget class=\"QLabel\" name=\"labelPrivateSendEnabled\">\n+              <property name=\"text\">\n+               <string>Enabled/Disabled</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"1\" column=\"0\">\n+             <widget class=\"QLabel\" name=\"labelCompletitionText\">\n+              <property name=\"text\">\n+               <string>Completion:</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"1\" column=\"1\">\n+             <widget class=\"QProgressBar\" name=\"privateSendProgress\">\n+              <property name=\"maximumSize\">\n+               <size>\n+                <width>154</width>\n+                <height>16777215</height>\n+               </size>\n+              </property>\n+              <property name=\"value\">\n+               <number>0</number>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"2\" column=\"0\">\n+             <widget class=\"QLabel\" name=\"labelAnonymizedText\">\n+              <property name=\"text\">\n+               <string>PrivateSend Balance:</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"2\" column=\"1\">\n+             <widget class=\"QLabel\" name=\"labelAnonymized\">\n+              <property name=\"font\">\n+               <font>\n+                <weight>75</weight>\n+                <bold>true</bold>\n+               </font>\n+              </property>\n+              <property name=\"text\">\n+               <string notr=\"true\">0 DASH</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"3\" column=\"0\">\n+             <widget class=\"QLabel\" name=\"labelAmountAndRoundsText\">\n+              <property name=\"text\">\n+               <string>Amount and Rounds:</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"3\" column=\"1\">\n+             <widget class=\"QLabel\" name=\"labelAmountRounds\">\n+              <property name=\"text\">\n+               <string>0 DASH / 0 Rounds</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"4\" column=\"0\">\n+             <widget class=\"QLabel\" name=\"labelSubmittedDenomText\">\n+              <property name=\"text\">\n+               <string>Submitted Denom:</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item row=\"4\" column=\"1\">\n+             <widget class=\"QLabel\" name=\"labelSubmittedDenom\">\n+              <property name=\"toolTip\">\n+               <string>The denominations you submitted to the Masternode.&lt;br&gt;To mix, other users must submit the exact same denominations.</string>\n+              </property>\n+              <property name=\"text\">\n+               <string>n/a</string>\n+              </property>\n+             </widget>\n+            </item>\n+           </layout>\n           </item>\n           <item>\n-           <widget class=\"QWidget\" name=\"layoutWidgetLastMessageAndButtons\">\n-            <layout class=\"QVBoxLayout\" name=\"VerticalLayout_PS\">\n-             <item>\n-              <widget class=\"QLabel\" name=\"labelPrivateSendLastMessage\">\n-               <property name=\"text\">\n-                <string>(Last Message)</string>\n-               </property>\n-               <property name=\"alignment\">\n-                <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n-               </property>\n-               <property name=\"wordWrap\">\n-                <bool>true</bool>\n-               </property>\n-              </widget>\n-             </item>\n-             <item>\n-              <widget class=\"QPushButton\" name=\"togglePrivateSend\">\n-               <property name=\"sizePolicy\">\n-                <sizepolicy hsizetype=\"MinimumExpanding\" vsizetype=\"Fixed\">\n-                 <horstretch>0</horstretch>\n-                 <verstretch>0</verstretch>\n-                </sizepolicy>\n-               </property>\n-               <property name=\"text\">\n-                <string>Start/Stop Mixing</string>\n-               </property>\n-              </widget>\n-             </item>\n-             <item>\n-              <layout class=\"QHBoxLayout\" name=\"horizontalLayout_debugbuttons\">\n-               <item>\n-                <widget class=\"QPushButton\" name=\"privateSendAuto\">\n-                 <property name=\"sizePolicy\">\n-                  <sizepolicy hsizetype=\"MinimumExpanding\" vsizetype=\"Fixed\">\n-                   <horstretch>0</horstretch>\n-                   <verstretch>0</verstretch>\n-                  </sizepolicy>\n-                 </property>\n-                 <property name=\"toolTip\">\n-                  <string>Try to manually submit a PrivateSend request.</string>\n-                 </property>\n-                 <property name=\"text\">\n-                  <string>Try Mix</string>\n-                 </property>\n-                </widget>\n-               </item>\n-               <item>\n-                <widget class=\"QPushButton\" name=\"privateSendReset\">\n-                 <property name=\"sizePolicy\">\n-                  <sizepolicy hsizetype=\"MinimumExpanding\" vsizetype=\"Fixed\">\n-                   <horstretch>0</horstretch>\n-                   <verstretch>0</verstretch>\n-                  </sizepolicy>\n-                 </property>\n-                 <property name=\"toolTip\">\n-                  <string>Reset the current status of PrivateSend (can interrupt PrivateSend if it's in the process of Mixing, which can cost you money!)</string>\n-                 </property>\n-                 <property name=\"autoFillBackground\">\n-                  <bool>false</bool>\n-                 </property>\n-                 <property name=\"text\">\n-                  <string>Reset</string>\n-                 </property>\n-                </widget>\n-               </item>\n-              </layout>\n-             </item>\n-            </layout>\n-           </widget>\n+           <layout class=\"QVBoxLayout\" name=\"VerticalLayout_PS\">\n+            <item>\n+             <widget class=\"QLabel\" name=\"labelPrivateSendLastMessage\">\n+              <property name=\"text\">\n+               <string>(Last Message)</string>\n+              </property>\n+              <property name=\"alignment\">\n+               <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>\n+              </property>\n+              <property name=\"wordWrap\">\n+               <bool>true</bool>\n+              </property>\n+             </widget>\n+            </item>\n+            <item>\n+             <widget class=\"QPushButton\" name=\"togglePrivateSend\">\n+              <property name=\"sizePolicy\">\n+               <sizepolicy hsizetype=\"MinimumExpanding\" vsizetype=\"Fixed\">\n+                <horstretch>0</horstretch>\n+                <verstretch>0</verstretch>\n+               </sizepolicy>\n+              </property>\n+              <property name=\"text\">\n+               <string>Start/Stop Mixing</string>\n+              </property>\n+             </widget>\n+            </item>\n+            <item>\n+             <layout class=\"QHBoxLayout\" name=\"horizontalLayout_debugbuttons\">\n+              <item>\n+               <widget class=\"QPushButton\" name=\"privateSendAuto\">\n+                <property name=\"sizePolicy\">\n+                 <sizepolicy hsizetype=\"MinimumExpanding\" vsizetype=\"Fixed\">\n+                  <horstretch>0</horstretch>\n+                  <verstretch>0</verstretch>\n+                 </sizepolicy>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Try to manually submit a PrivateSend request.</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string>Try Mix</string>\n+                </property>\n+               </widget>\n+              </item>\n+              <item>\n+               <widget class=\"QPushButton\" name=\"privateSendReset\">\n+                <property name=\"sizePolicy\">\n+                 <sizepolicy hsizetype=\"MinimumExpanding\" vsizetype=\"Fixed\">\n+                  <horstretch>0</horstretch>\n+                  <verstretch>0</verstretch>\n+                 </sizepolicy>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Reset the current status of PrivateSend (can interrupt PrivateSend if it's in the process of Mixing, which can cost you money!)</string>\n+                </property>\n+                <property name=\"autoFillBackground\">\n+                 <bool>false</bool>\n+                </property>\n+                <property name=\"text\">\n+                 <string>Reset</string>\n+                </property>\n+               </widget>\n+              </item>\n+              <item>\n+               <widget class=\"QPushButton\" name=\"privateSendInfo\">\n+                <property name=\"sizePolicy\">\n+                 <sizepolicy hsizetype=\"MinimumExpanding\" vsizetype=\"Fixed\">\n+                  <horstretch>0</horstretch>\n+                  <verstretch>0</verstretch>\n+                 </sizepolicy>\n+                </property>\n+                <property name=\"toolTip\">\n+                 <string>Information about PrivateSend and Mixing</string>\n+                </property>\n+                <property name=\"text\">\n+                 <string>Info</string>\n+                </property>\n+               </widget>\n+              </item>\n+             </layout>\n+            </item>\n+           </layout>\n           </item>\n          </layout>\n         </widget>"
      },
      {
        "sha": "28f29d7b98f255d8f53e6d9fcd3e210233edde3e",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "patch": "@@ -282,6 +282,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n \n         connect(ui->privateSendAuto, SIGNAL(clicked()), this, SLOT(privateSendAuto()));\n         connect(ui->privateSendReset, SIGNAL(clicked()), this, SLOT(privateSendReset()));\n+        connect(ui->privateSendInfo, SIGNAL(clicked()), this, SLOT(privateSendInfo()));\n         connect(ui->togglePrivateSend, SIGNAL(clicked()), this, SLOT(togglePrivateSend()));\n         updateWatchOnlyLabels(model->haveWatchOnly());\n         connect(model, SIGNAL(notifyWatchonlyChanged(bool)), this, SLOT(updateWatchOnlyLabels(bool)));\n@@ -441,6 +442,7 @@ void OverviewPage::updateAdvancedPSUI(bool fShowAdvancedPSUI) {\n     ui->labelSubmittedDenom->setVisible(fShowAdvancedPSUI);\n     ui->privateSendAuto->setVisible(fShowAdvancedPSUI);\n     ui->privateSendReset->setVisible(fShowAdvancedPSUI);\n+    ui->privateSendInfo->setVisible(true);\n     ui->labelPrivateSendLastMessage->setVisible(fShowAdvancedPSUI);\n }\n \n@@ -576,6 +578,44 @@ void OverviewPage::privateSendReset(){\n         QMessageBox::Ok, QMessageBox::Ok);\n }\n \n+void OverviewPage::privateSendInfo(){\n+\n+    // Artificial long boxtitle to ensure minimum width without overwriting the global CSS styles\n+    QString placeHolder = \"                                                                                                                                                                                    \";\n+    QString infoBoxTitle = tr(\"PrivateSend\") + placeHolder;\n+    \n+    QMessageBox::information(this, infoBoxTitle,\n+        tr(\"\\\n+<h3>PrivateSend Basics</h3> \\\n+PrivateSend gives you true financial privacy by obscuring the origins of your funds. \\\n+All the Dash in your wallet is comprised of different \\\"inputs\\\" which you can think of as separate, discrete coins.<br> \\\n+PrivateSend uses an innovative process to mix your inputs with the inputs of two other people, without having your coins ever leave your wallet. \\\n+You retain control of your money at all times..<hr> \\\n+<b>The PrivateSend process works like this:</b>\\\n+<ol type=\\\"1\\\"> \\\n+<li>PrivateSend begins by breaking your transaction inputs down into standard denominations. \\\n+These denominations are 0.1 DASH, 1 DASH, 10 DASH, and 100 DASH--sort of like the paper money you use every day.</li> \\\n+<li>Your wallet then sends requests to specially configured software nodes on the network, called \\\"masternodes.\\\" \\\n+These masternodes are informed then that you are interested in mixing a certain denomination. \\\n+No identifiable information is sent to the masternodes, so they never know \\\"who\\\" you are.</li> \\\n+<li>When two other people send similar messages, indicating that they wish to mix the same denomination, a mixing session begins. \\\n+The masternode mixes up the inputs and instructs all three users' wallets to pay the now-transformed input back to themselves. \\\n+Your wallet pays that denomination directly to itself, but in a different address (called a change address).</li> \\\n+<li>In order to fully obscure your funds, your wallet must repeat this process a number of times with each denomination. \\\n+Each time the process is completed, it's called a \\\"round.\\\" Each round of PrivateSend makes it exponentially more difficult to determine where your funds originated.</li> \\\n+<li>This mixing process happens in the background without any intervention on your part. When you wish to make a transaction, \\\n+your funds will already be anonymized. No additional waiting is required.</li> \\\n+</ol> <hr>\\\n+<b>IMPORTANT:</b> Your wallet only contains 1000 of these \\\"change addresses.\\\" Every time a mixing event happens, up to 9 of your addresses are used up. \\\n+This means those 1000 addresses last for about 100 mixing events. When 900 of them are used, your wallet must create more addresses. \\\n+It can only do this, however, if you have automatic backups enabled.<br> \\\n+Consequently, users who have backups disabled will also have PrivateSend disabled. <hr>\\\n+For more info see <a href=\\\"https://dashpay.atlassian.net/wiki/display/DOC/PrivateSend\\\">https://dashpay.atlassian.net/wiki/display/DOC/PrivateSend</a> \\\n+        \"),\n+        QMessageBox::Ok, QMessageBox::Ok);\n+\n+}\n+\n void OverviewPage::togglePrivateSend(){\n     QSettings settings;\n     // Popup some information on first mixing"
      },
      {
        "sha": "19a45b68b6b3cb058b724c11a71aa1f5f468ceb1",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "patch": "@@ -69,6 +69,7 @@ private Q_SLOTS:\n     void togglePrivateSend();\n     void privateSendAuto();\n     void privateSendReset();\n+    void privateSendInfo();\n     void updateDisplayUnit();\n     void updatePrivateSendProgress();\n     void updateAdvancedPSUI(bool fShowAdvancedPSUI);"
      },
      {
        "sha": "b8f580ddd040ed7904594aa3e17a4ea25f3de721",
        "filename": "src/qt/res/css/crownium.css",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/res/css/crownium.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/res/css/crownium.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/crownium.css?ref=eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "patch": "@@ -1101,6 +1101,24 @@ QWidget .QFrame#framePrivateSend .QPushButton#privateSendReset:pressed {\n border:1px solid #9e9e9e;\n }\n \n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo { /* Info Button */\n+background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: .05 #222222, stop: .3 #FFFFFF, stop: .7 #FFFFFF, stop: 1 #222222);\n+border:1px solid #d2d2d2;\n+color:#616161;\n+min-height:25px;\n+font-size:9px;\n+padding:0px;\n+}\n+\n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo:hover {\n+background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: .05 #222222, stop: .2 #FFFFFF, stop: .6 #FFFFFF, stop: 1 #222222);\n+color:#000000;\n+}\n+\n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo:pressed {\n+border:1px solid #9e9e9e;\n+}\n+\n /* RECENT TRANSACTIONS */\n \n QWidget .QFrame#frame_2 { /* Transactions Widget */"
      },
      {
        "sha": "5d61092e08792c5fec2bceee546ca3a8646b0047",
        "filename": "src/qt/res/css/drkblue.css",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/res/css/drkblue.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/res/css/drkblue.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/drkblue.css?ref=eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "patch": "@@ -1078,6 +1078,24 @@ QWidget .QFrame#framePrivateSend .QPushButton#privateSendReset:pressed {\n border:1px solid #9e9e9e;\n }\n \n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo { /* Info Button */\n+background-color:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: .01 #f6f6f6, stop: .1 rgba(250, 250, 250, 128), stop: .95 rgba(250, 250, 250, 255), stop: 1 #ebebeb);\n+border:1px solid #d2d2d2;\n+color:#616161;\n+min-height:25px;\n+font-size:9px;\n+padding:0px;\n+}\n+\n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo:hover {\n+background-color:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: .01 #f6f6f6, stop: .1 rgba(240, 240, 240, 255), stop: .95 rgba(240, 240, 240, 255), stop: 1 #ebebeb);\n+color:#333;\n+}\n+\n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo:pressed {\n+border:1px solid #9e9e9e;\n+}\n+\n /* RECENT TRANSACTIONS */\n \n QWidget .QFrame#frame_2 { /* Transactions Widget */"
      },
      {
        "sha": "34198858449f806f5300dd58271e891c930bd22f",
        "filename": "src/qt/res/css/light.css",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/res/css/light.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb92933d522381edc21c0770eb0f6bd4df16fcaf/src/qt/res/css/light.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/light.css?ref=eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "patch": "@@ -1085,6 +1085,24 @@ QWidget .QFrame#framePrivateSend .QPushButton#privateSendReset:pressed {\n border:1px solid #9e9e9e;\n }\n \n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo { /* Info Button */\n+background-color:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: .01 #f6f6f6, stop: .1 rgba(250, 250, 250, 128), stop: .95 rgba(250, 250, 250, 255), stop: 1 #ebebeb);\n+border:1px solid #d2d2d2;\n+color:#616161;\n+min-height:25px;\n+font-size:9px;\n+padding:0px;\n+}\n+\n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo:hover {\n+background-color:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: .01 #f6f6f6, stop: .1 rgba(240, 240, 240, 255), stop: .95 rgba(240, 240, 240, 255), stop: 1 #ebebeb);\n+color:#333;\n+}\n+\n+QWidget .QFrame#framePrivateSend .QPushButton#privateSendInfo:pressed {\n+border:1px solid #9e9e9e;\n+}\n+\n /* RECENT TRANSACTIONS */\n \n QWidget .QFrame#frame_2 { /* Transactions Widget */"
      }
    ]
  },
  {
    "sha": "bc96f288ed90f478beb7533a1de09694e4a91356",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzk2ZjI4OGVkOTBmNDc4YmViNzUzM2ExZGUwOTY5NGU0YTkxMzU2",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-05T16:13:30Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-05T16:13:30Z"
      },
      "message": "Governance fixes (#1131)\n\n* Added net logging messages in main.cpp\r\n\r\n* Added logging for trigger removal\r\n\r\n* Improved log message for CGovernanceManager::UpdatedBlockTip\r\n\r\n* Improved log messages in CGovernanceManager::UpdateCachesAndClean\r\n\r\n* Added more logging to CGovernanceTriggerManager\r\n\r\n* Check vote validity before pushing inventory during sync\r\n\r\n* Add triggers to map after loading governance.dat file",
      "tree": {
        "sha": "8cf61a5a261bca6e3dfee37c42deda21af15a401",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cf61a5a261bca6e3dfee37c42deda21af15a401"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc96f288ed90f478beb7533a1de09694e4a91356",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc96f288ed90f478beb7533a1de09694e4a91356",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc96f288ed90f478beb7533a1de09694e4a91356",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc96f288ed90f478beb7533a1de09694e4a91356/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb92933d522381edc21c0770eb0f6bd4df16fcaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb92933d522381edc21c0770eb0f6bd4df16fcaf"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 48,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f1a42a803e856336df1952a29c82cd1935890ab7",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96f288ed90f478beb7533a1de09694e4a91356/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96f288ed90f478beb7533a1de09694e4a91356/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=bc96f288ed90f478beb7533a1de09694e4a91356",
        "patch": "@@ -164,6 +164,7 @@ bool CGovernanceTriggerManager::AddNewTrigger(uint256 nHash)\n \n void CGovernanceTriggerManager::CleanAndRemove()\n {\n+    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Start\\n\");\n     DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: Start\" << endl; );\n     AssertLockHeld(governance.cs);\n \n@@ -186,24 +187,30 @@ void CGovernanceTriggerManager::CleanAndRemove()\n \n     // Remove triggers that are invalid or already executed\n     DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: mapTrigger.size() = \" << mapTrigger.size() << endl; );\n+    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- mapTrigger.size() = %d\\n\", mapTrigger.size());\n     trigger_m_it it = mapTrigger.begin();\n     while(it != mapTrigger.end()) {\n         bool remove = false;\n         CSuperblock_sptr& pSuperblock = it->second;\n         if(!pSuperblock) {\n             DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: NULL superblock marked for removal \" << endl; );\n+            LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- NULL superblock marked for removal\\n\");\n             remove = true;\n         } else {\n             DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: superblock status = \" << pSuperblock->GetStatus() << endl; );\n+            LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- superblock status = %d\\n\", pSuperblock->GetStatus());\n             switch(pSuperblock->GetStatus()) {\n             case SEEN_OBJECT_ERROR_INVALID:\n             case SEEN_OBJECT_UNKNOWN:\n+                LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Unknown or invalid trigger found\\n\");\n                 remove = true;\n                 break;\n             case SEEN_OBJECT_EXECUTED:\n                 {\n+                    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Executed trigger found\\n\");\n                     CGovernanceObject* pgovobj = pSuperblock->GetGovernanceObject();\n                     if(pgovobj) {\n+                        LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Expiring executed object: %s\\n\", pgovobj->GetHash().ToString());\n                         pgovobj->fExpired = true;\n                     }\n                 }\n@@ -214,10 +221,13 @@ void CGovernanceTriggerManager::CleanAndRemove()\n                     int nTriggerBlock = pSuperblock->GetBlockStart();\n                     // Rough approximation: a cycle of superblock ++\n                     int nExpirationBlock = nTriggerBlock + Params().GetConsensus().nSuperblockCycle + GOVERNANCE_FEE_CONFIRMATIONS; \n+                    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- nTriggerBlock = %d, nExpriartionBlock = %d\\n\");\n                     if(governance.GetCachedBlockHeight() > nExpirationBlock) {\n+                        LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Outdated trigger found\\n\");\n                         remove = true;\n                         CGovernanceObject* pgovobj = pSuperblock->GetGovernanceObject();\n                         if(pgovobj) {\n+                            LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Expiring outdated object: %s\\n\", pgovobj->GetHash().ToString());\n                             pgovobj->fExpired = true;\n                         }\n                     }\n@@ -239,6 +249,7 @@ void CGovernanceTriggerManager::CleanAndRemove()\n                      << strdata\n                      << endl;\n                );\n+            LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Removing trigger object\\n\");\n             mapTrigger.erase(it++);\n         }\n         else  {"
      },
      {
        "sha": "f923eadbe318a4383cad13e6d11bc6e085ed791f",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 5,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96f288ed90f478beb7533a1de09694e4a91356/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96f288ed90f478beb7533a1de09694e4a91356/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=bc96f288ed90f478beb7533a1de09694e4a91356",
        "patch": "@@ -300,6 +300,8 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n     if(!pCurrentBlockIndex) return;\n \n+    LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- After pCurrentBlockIndex (not NULL)\\n\");\n+\n     // UPDATE CACHE FOR EACH OBJECT THAT IS FLAGGED DIRTYCACHE=TRUE\n \n     object_m_it it = mapObjects.begin();\n@@ -332,7 +334,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n         // IF DELETE=TRUE, THEN CLEAN THE MESS UP!\n \n         if(pObj->fCachedDelete || pObj->fExpired) {\n-            LogPrintf(\"UpdateCachesAndClean -- erase obj %s\\n\", (*it).first.ToString());\n+            LogPrintf(\"CGovernanceManager::UpdateCachesAndClean -- erase obj %s\\n\", (*it).first.ToString());\n             mnodeman.RemoveGovernanceObject(pObj->GetHash());\n             mapObjects.erase(it++);\n         } else {\n@@ -479,9 +481,14 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n \n        vote_m_it it2 = mapVotesByHash.begin();\n        while(it2 != mapVotesByHash.end()) {\n-          pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, (*it2).first));\n-          nInvCount++;\n-          ++it2;\n+           CGovernanceVote& vote = it2->second;\n+           if(!vote.IsValid(true)) {\n+               // Don't relay votes that are now invalid (ie. missing MN) to avoid being banned\n+               continue;\n+           }\n+           pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, (*it2).first));\n+           nInvCount++;\n+           ++it2;\n        }\n     }\n \n@@ -613,6 +620,21 @@ bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n     return false;\n }\n \n+void CGovernanceManager::AddCachedTriggers()\n+{\n+    LOCK(cs);\n+\n+    for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+        CGovernanceObject& govobj = it->second;\n+        \n+        if(govobj.nObjectType != GOVERNANCE_OBJECT_TRIGGER) {\n+            continue;\n+        }\n+\n+        triggerman.AddNewTrigger(govobj.GetHash());\n+    }    \n+}\n+\n CGovernanceObject::CGovernanceObject()\n     : cs(),\n       nHashParent(),\n@@ -1106,7 +1128,7 @@ void CGovernanceManager::UpdatedBlockTip(const CBlockIndex *pindex)\n     LOCK(cs);\n     pCurrentBlockIndex = pindex;\n     nCachedBlockHeight = pCurrentBlockIndex->nHeight;\n-    LogPrint(\"gobject\", \"pCurrentBlockIndex->nHeight: %d\\n\", pCurrentBlockIndex->nHeight);\n+    LogPrint(\"gobject\", \"CGovernanceManager::UpdatedBlockTip pCurrentBlockIndex->nHeight: %d\\n\", pCurrentBlockIndex->nHeight);\n \n     // TO REPROCESS OBJECTS WE SHOULD BE SYNCED\n "
      },
      {
        "sha": "7f0e085e0f5c30b8386257fb9f0edda299e75a85",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96f288ed90f478beb7533a1de09694e4a91356/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96f288ed90f478beb7533a1de09694e4a91356/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=bc96f288ed90f478beb7533a1de09694e4a91356",
        "patch": "@@ -185,6 +185,9 @@ class CGovernanceManager\n         READWRITE(mapVotesByHash);\n         READWRITE(mapVotesByType);\n         READWRITE(mapLastMasternodeTrigger);\n+        if(ser_action.ForRead()) {\n+            AddCachedTriggers();\n+        }\n     }\n \n     void UpdatedBlockTip(const CBlockIndex *pindex);\n@@ -208,6 +211,9 @@ class CGovernanceManager\n \n     bool MasternodeRateCheck(const CTxIn& vin, int nObjectType);\n \n+private:\n+    void AddCachedTriggers();\n+\n };\n \n /**"
      },
      {
        "sha": "059dd12595791f6a7b7a0676e8b29dead5c0ebdf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96f288ed90f478beb7533a1de09694e4a91356/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96f288ed90f478beb7533a1de09694e4a91356/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bc96f288ed90f478beb7533a1de09694e4a91356",
        "patch": "@@ -4976,6 +4976,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             break;\n \n         const CInv &inv = *it;\n+        LogPrint(\"net\", \"ProcessGetData -- inv = %s\\n\", inv.ToString());\n         {\n             boost::this_thread::interruption_point();\n             it++;\n@@ -5169,6 +5170,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 }\n \n                 if (!pushed && inv.type == MSG_GOVERNANCE_OBJECT) {\n+                    LogPrint(\"net\", \"ProcessGetData -- MSG_GOVERNANCE_OBJECT: inv = %s\\n\", inv.ToString());\n                     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                     bool topush = false;\n                     {\n@@ -5179,6 +5181,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             }\n                         }\n                     }\n+                    LogPrint(\"net\", \"ProcessGetData -- MSG_GOVERNANCE_OBJECT: topush = %d, inv = %s\\n\", topush, inv.ToString());\n                     if(topush) {\n                         pfrom->PushMessage(NetMsgType::MNGOVERNANCEOBJECT, ss);\n                         pushed = true;\n@@ -5197,6 +5200,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         }\n                     }\n                     if(topush) {\n+                        LogPrint(\"net\", \"ProcessGetData -- pushing: inv = %s\\n\", inv.ToString());\n                         pfrom->PushMessage(NetMsgType::MNGOVERNANCEOBJECTVOTE, ss);\n                         pushed = true;\n                     }"
      }
    ]
  },
  {
    "sha": "440fc21fbf670fdd6bc1fe783912122e795006c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDBmYzIxZmJmNjcwZmRkNmJjMWZlNzgzOTEyMTIyZTc5NTAwNmM5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-06T23:26:51Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-06T23:26:51Z"
      },
      "message": "fix dsq rate limit bug: should not use vecMasternodesUsed when connecting from queue, should check nLastDsq only (#1123)",
      "tree": {
        "sha": "de2ca0a78bec8acb7e0979c4416ffc757d91e66e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de2ca0a78bec8acb7e0979c4416ffc757d91e66e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/440fc21fbf670fdd6bc1fe783912122e795006c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/440fc21fbf670fdd6bc1fe783912122e795006c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/440fc21fbf670fdd6bc1fe783912122e795006c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/440fc21fbf670fdd6bc1fe783912122e795006c9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc96f288ed90f478beb7533a1de09694e4a91356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc96f288ed90f478beb7533a1de09694e4a91356",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc96f288ed90f478beb7533a1de09694e4a91356"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "07c71b6e898d5f2d4a72d863ba8dace58ca66258",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/440fc21fbf670fdd6bc1fe783912122e795006c9/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/440fc21fbf670fdd6bc1fe783912122e795006c9/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=440fc21fbf670fdd6bc1fe783912122e795006c9",
        "patch": "@@ -1517,15 +1517,9 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             // incompatible denom\n             if(dsq.nDenom >= (1 << vecPrivateSendDenominations.size())) continue;\n \n-            bool fUsed = false;\n-            //don't reuse Masternodes\n-            BOOST_FOREACH(CTxIn txinUsed, vecMasternodesUsed) {\n-                if(dsq.vin == txinUsed) {\n-                    fUsed = true;\n-                    break;\n-                }\n-            }\n-            if(fUsed) continue;\n+            // mixing rate limit i.e. nLastDsq check should already pass in DSQUEUE ProcessMessage\n+            // in order for dsq to get into vecDarksendQueue, so we should be safe to mix already,\n+            // no need for additional verification here\n \n             LogPrint(\"privatesend\", \"CDarksendPool::DoAutomaticDenominating -- found valid queue: %s\\n\", dsq.ToString());\n "
      }
    ]
  },
  {
    "sha": "eca1e8a4f19171b059d03c77892448e8a6b93a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2ExZThhNGYxOTE3MWIwNTlkMDNjNzc4OTI0NDhlOGE2YjkzYTdk",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-06T23:27:10Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-06T23:27:10Z"
      },
      "message": "few small fixes: (#1125)\n\n- fail to process dsa when session is already ready\r\n- fail to process dsvin if session is not ready yet\r\n- fail to process any message on the wrong side (mn/client)\r\n- fail in PrepareDenominate if pool already has entries\r\n- fail if can't sign anything in final tx, also reset local pool in such case\r\n- fix \"number of entries\" pushed on DSSTATUSUPDATE",
      "tree": {
        "sha": "2578046ec84dddd9b3e2e9c9c3e669b9b0935b3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2578046ec84dddd9b3e2e9c9c3e669b9b0935b3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eca1e8a4f19171b059d03c77892448e8a6b93a7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca1e8a4f19171b059d03c77892448e8a6b93a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eca1e8a4f19171b059d03c77892448e8a6b93a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca1e8a4f19171b059d03c77892448e8a6b93a7d/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "440fc21fbf670fdd6bc1fe783912122e795006c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/440fc21fbf670fdd6bc1fe783912122e795006c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/440fc21fbf670fdd6bc1fe783912122e795006c9"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 40,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5797bfde6ef4322d04febaed636ab9aeb6842356",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 7,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1e8a4f19171b059d03c77892448e8a6b93a7d/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1e8a4f19171b059d03c77892448e8a6b93a7d/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=eca1e8a4f19171b059d03c77892448e8a6b93a7d",
        "patch": "@@ -48,6 +48,13 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n+        if(IsSessionReady()) {\n+            // too many users in this session already, reject new ones\n+            LogPrintf(\"DSACCEPT -- queue is already full!\\n\");\n+            PushStatus(pfrom, STATUS_ACCEPTED, ERR_QUEUE_FULL);\n+            return;\n+        }\n+\n         int nDenom;\n         CTransaction txCollateral;\n         vRecv >> nDenom >> txCollateral;\n@@ -151,16 +158,16 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n-        CDarkSendEntry entry;\n-        vRecv >> entry;\n-\n         //do we have enough users in the current session?\n         if(!IsSessionReady()) {\n             LogPrintf(\"DSVIN -- session not complete!\\n\");\n             PushStatus(pfrom, STATUS_REJECTED, ERR_SESSION);\n             return;\n         }\n \n+        CDarkSendEntry entry;\n+        vRecv >> entry;\n+\n         LogPrint(\"privatesend\", \"DSVIN -- txCollateral %s\", entry.txCollateral.ToString());\n \n         //do we have the same denominations as the current session?\n@@ -253,6 +260,11 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n+        if(fMasterNode) {\n+            // LogPrintf(\"DSSTATUSUPDATE -- Can't run on a Masternode!\\n\");\n+            return;\n+        }\n+\n         if(!pSubmittedToMasternode) return;\n         if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)pfrom->addr) {\n             //LogPrintf(\"DSSTATUSUPDATE -- message doesn't match current Masternode: pSubmittedToMasternode %s addr %s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n@@ -300,6 +312,11 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n+        if(!fMasterNode) {\n+            LogPrintf(\"DSSIGNFINALTX -- not a Masternode!\\n\");\n+            return;\n+        }\n+\n         std::vector<CTxIn> vecTxIn;\n         vRecv >> vecTxIn;\n \n@@ -327,6 +344,11 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n+        if(fMasterNode) {\n+            // LogPrintf(\"DSFINALTX -- Can't run on a Masternode!\\n\");\n+            return;\n+        }\n+\n         if(!pSubmittedToMasternode) return;\n         if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)pfrom->addr) {\n             //LogPrintf(\"DSFINALTX -- message doesn't match current Masternode: pSubmittedToMasternode %s addr %s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n@@ -354,6 +376,11 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n+        if(fMasterNode) {\n+            // LogPrintf(\"DSCOMPLETE -- Can't run on a Masternode!\\n\");\n+            return;\n+        }\n+\n         if(!pSubmittedToMasternode) return;\n         if((CNetAddr)pSubmittedToMasternode->addr != (CNetAddr)pfrom->addr) {\n             LogPrint(\"privatesend\", \"DSCOMPLETE -- message doesn't match current Masternode: pSubmittedToMasternode=%s  addr=%s\\n\", pSubmittedToMasternode->addr.ToString(), pfrom->addr.ToString());\n@@ -1222,8 +1249,14 @@ bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew\n                 LogPrint(\"privatesend\", \"CDarksendPool::SignFinalTransaction -- nMyInputIndex: %d, sigs.size(): %d, scriptSig=%s\\n\", nMyInputIndex, (int)sigs.size(), ScriptToAsmStr(finalMutableTransaction.vin[nMyInputIndex].scriptSig));\n             }\n         }\n+    }\n \n-        LogPrint(\"privatesend\", \"CDarksendPool::SignFinalTransaction -- finalMutableTransaction=%s\", finalMutableTransaction.ToString());\n+    if(sigs.empty()) {\n+        LogPrintf(\"CDarksendPool::SignFinalTransaction -- can't sign anything!\\n\");\n+        UnlockCoins();\n+        SetNull();\n+\n+        return false;\n     }\n \n     // push all of our signatures to the Masternode\n@@ -1647,8 +1680,8 @@ bool CDarksendPool::PrepareDenominate(int nMinRounds, int nMaxRounds, std::strin\n         return false;\n     }\n \n-    if (GetState() != POOL_STATE_ERROR && GetState() != POOL_STATE_SUCCESS && GetEntriesCount() > 0) {\n-        strErrorRet = \"You already have pending entries in the PrivateSend pool\";\n+    if (GetEntriesCount() > 0) {\n+        strErrorRet = \"Already have pending entries in the PrivateSend pool\";\n         return false;\n     }\n \n@@ -2358,7 +2391,7 @@ void CDarksendPool::RelayIn(const CDarkSendEntry& entry)\n void CDarksendPool::PushStatus(CNode* pnode, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID)\n {\n     if(!pnode) return;\n-    pnode->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, (int)nState, nEntriesCount, (int)nStatusUpdate, (int)nMessageID);\n+    pnode->PushMessage(NetMsgType::DSSTATUSUPDATE, nSessionID, (int)nState, (int)vecEntries.size(), (int)nStatusUpdate, (int)nMessageID);\n }\n \n void CDarksendPool::RelayStatus(PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID)"
      }
    ]
  },
  {
    "sha": "f2d2b251305dc530c835a603864962bf8ba36fa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmQyYjI1MTMwNWRjNTMwYzgzNWE2MDM4NjQ5NjJiZjhiYTM2ZmEw",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-06T23:27:26Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-06T23:27:26Z"
      },
      "message": "dsq fixes: (#1128)\n\n- make sure dsq is not too much in the future\r\n- do not process seen dsq\r\n- do not alter nTime for dsq localy, use memory only fTried instead",
      "tree": {
        "sha": "f0dae357c70dc32ae31247b030c39e178d69a7e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0dae357c70dc32ae31247b030c39e178d69a7e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2d2b251305dc530c835a603864962bf8ba36fa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d2b251305dc530c835a603864962bf8ba36fa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d2b251305dc530c835a603864962bf8ba36fa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d2b251305dc530c835a603864962bf8ba36fa0/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eca1e8a4f19171b059d03c77892448e8a6b93a7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca1e8a4f19171b059d03c77892448e8a6b93a7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eca1e8a4f19171b059d03c77892448e8a6b93a7d"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 35,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ece76a570336ad6dbba2b4faaee3f37fcd939267",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d2b251305dc530c835a603864962bf8ba36fa0/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d2b251305dc530c835a603864962bf8ba36fa0/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=f2d2b251305dc530c835a603864962bf8ba36fa0",
        "patch": "@@ -98,9 +98,17 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         CDarksendQueue dsq;\n         vRecv >> dsq;\n \n+        // process every dsq only once\n+        BOOST_FOREACH(CDarksendQueue q, vecDarksendQueue) {\n+            if(q == dsq) {\n+                // LogPrint(\"privatesend\", \"DSQUEUE -- %s seen\\n\", dsq.ToString());\n+                return;\n+            }\n+        }\n+\n         LogPrint(\"privatesend\", \"DSQUEUE -- %s new\\n\", dsq.ToString());\n \n-        if(dsq.IsExpired()) return;\n+        if(dsq.IsExpired() || dsq.nTime > GetTime() + PRIVATESEND_QUEUE_TIMEOUT) return;\n \n         CMasternode* pmn = mnodeman.Find(dsq.vin);\n         if(pmn == NULL) return;\n@@ -124,8 +132,13 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n                 SubmitDenominate();\n             }\n         } else {\n-            BOOST_FOREACH(CDarksendQueue q, vecDarksendQueue)\n-                if(q.vin == dsq.vin) return;\n+            BOOST_FOREACH(CDarksendQueue q, vecDarksendQueue) {\n+                if(q.vin == dsq.vin) {\n+                    // no way same mn can send another \"not yet ready\" dsq this soon\n+                    LogPrint(\"privatesend\", \"DSQUEUE -- Masternode %s is sending WAY too many dsq messages\\n\", pmn->addr.ToString());\n+                    return;\n+                }\n+            }\n \n             int nThreshold = pmn->nLastDsq + mnodeman.CountEnabled(MIN_PRIVATESEND_PEER_PROTO_VERSION)/5;\n             LogPrint(\"privatesend\", \"DSQUEUE -- nLastDsq: %d  threshold: %d  nDsqCount: %d\\n\", pmn->nLastDsq, nThreshold, mnodeman.nDsqCount);\n@@ -139,9 +152,11 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             pmn->fAllowMixingTx = true;\n \n             LogPrint(\"privatesend\", \"DSQUEUE -- new PrivateSend queue (%s) from masternode %s\\n\", dsq.ToString(), pmn->addr.ToString());\n+            if(pSubmittedToMasternode && pSubmittedToMasternode->vin.prevout == dsq.vin.prevout) {\n+                dsq.fTried = true;\n+            }\n             vecDarksendQueue.push_back(dsq);\n             dsq.Relay();\n-            dsq.nTime = GetTime();\n         }\n \n     } else if(strCommand == NetMsgType::DSVIN) {\n@@ -1536,7 +1551,9 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n \n         // Look through the queues and see if anything matches\n         BOOST_FOREACH(CDarksendQueue& dsq, vecDarksendQueue) {\n-            if(dsq.nTime == 0) continue;\n+            // only try each queue once\n+            if(dsq.fTried) continue;\n+            dsq.fTried = true;\n             if(dsq.IsExpired()) continue;\n \n             CMasternode* pmn = mnodeman.Find(dsq.vin);\n@@ -1578,12 +1595,10 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected (from queue), sending DSACCEPT: nSessionDenom: %d (%s), addr=%s\\n\",\n                         nSessionDenom, GetDenominationsToString(nSessionDenom), pnode->addr.ToString());\n                 strAutoDenomResult = _(\"Mixing in progress...\");\n-                dsq.nTime = 0; //remove node\n                 return true;\n             } else {\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n                 strAutoDenomResult = _(\"Error connecting to Masternode.\");\n-                dsq.nTime = 0; //remove node\n                 pmn->IncreasePoSeBanScore();\n                 continue;\n             }"
      },
      {
        "sha": "4ba5a7e1e7db95e8bd5392a00ca1427fa9c0fc4f",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d2b251305dc530c835a603864962bf8ba36fa0/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d2b251305dc530c835a603864962bf8ba36fa0/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=f2d2b251305dc530c835a603864962bf8ba36fa0",
        "patch": "@@ -144,21 +144,25 @@ class CDarksendQueue\n     int64_t nTime;\n     bool fReady; //ready for submit\n     std::vector<unsigned char> vchSig;\n+    // memory only\n+    bool fTried;\n \n     CDarksendQueue() :\n         nDenom(0),\n         vin(CTxIn()),\n         nTime(0),\n         fReady(false),\n-        vchSig(std::vector<unsigned char>())\n+        vchSig(std::vector<unsigned char>()),\n+        fTried(false)\n         {}\n \n     CDarksendQueue(int nDenom, CTxIn vin, int64_t nTime, bool fReady) :\n         nDenom(nDenom),\n         vin(vin),\n         nTime(nTime),\n         fReady(fReady),\n-        vchSig(std::vector<unsigned char>())\n+        vchSig(std::vector<unsigned char>()),\n+        fTried(false)\n         {}\n \n     ADD_SERIALIZE_METHODS;\n@@ -190,8 +194,13 @@ class CDarksendQueue\n \n     std::string ToString()\n     {\n-        return strprintf(\"nDenom=%d, nTime=%lld, fReady=%s, masternode=%s\",\n-                        nDenom, nTime, fReady ? \"true\" : \"false\", vin.prevout.ToStringShort());\n+        return strprintf(\"nDenom=%d, nTime=%lld, fReady=%s, fTried=%s, masternode=%s\",\n+                        nDenom, nTime, fReady ? \"true\" : \"false\", fTried ? \"true\" : \"false\", vin.prevout.ToStringShort());\n+    }\n+\n+    friend bool operator==(const CDarksendQueue& a, const CDarksendQueue& b)\n+    {\n+        return a.nDenom == b.nDenom && a.vin.prevout == b.vin.prevout && a.nTime == b.nTime && a.fReady == b.fReady;\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "fef8752cd094a4dbc29ff159b3031ef5458d0144",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWY4NzUyY2QwOTRhNGRiYzI5ZmYxNTliMzAzMWVmNTQ1OGQwMTQ0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-06T23:27:51Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-06T23:27:51Z"
      },
      "message": "remove excessive bool arg in dscomplete (#1124)",
      "tree": {
        "sha": "96de1502b849fe5bd7852a6ef4e0079dab5a0d9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96de1502b849fe5bd7852a6ef4e0079dab5a0d9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fef8752cd094a4dbc29ff159b3031ef5458d0144",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef8752cd094a4dbc29ff159b3031ef5458d0144",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fef8752cd094a4dbc29ff159b3031ef5458d0144",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef8752cd094a4dbc29ff159b3031ef5458d0144/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d2b251305dc530c835a603864962bf8ba36fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d2b251305dc530c835a603864962bf8ba36fa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d2b251305dc530c835a603864962bf8ba36fa0"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 16,
      "deletions": 26
    },
    "files": [
      {
        "sha": "6820aed5b2f7905c6affc179c1cc521552667032",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 24,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef8752cd094a4dbc29ff159b3031ef5458d0144/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef8752cd094a4dbc29ff159b3031ef5458d0144/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=fef8752cd094a4dbc29ff159b3031ef5458d0144",
        "patch": "@@ -402,10 +402,9 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n-        int  nMsgSessionID;\n-        bool fMsgError;\n-        int  nMsgMessageID;\n-        vRecv >> nMsgSessionID >> fMsgError >> nMsgMessageID;\n+        int nMsgSessionID;\n+        int nMsgMessageID;\n+        vRecv >> nMsgSessionID >> nMsgMessageID;\n \n         if(nMsgMessageID < MSG_POOL_MIN || nMsgMessageID > MSG_POOL_MAX) {\n             LogPrint(\"privatesend\", \"DSCOMPLETE -- nMsgMessageID is out of bounds: %d\\n\", nMsgMessageID);\n@@ -419,7 +418,7 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n         LogPrint(\"privatesend\", \"DSCOMPLETE -- nMsgSessionID %d  nMsgMessageID %d (%s)\\n\", nMsgSessionID, nMsgMessageID, GetMessageByID(PoolMessage(nMsgMessageID)));\n \n-        CompletedTransaction(fMsgError, PoolMessage(nMsgMessageID));\n+        CompletedTransaction(PoolMessage(nMsgMessageID));\n     }\n }\n \n@@ -630,7 +629,7 @@ void CDarksendPool::CommitFinalTransaction()\n \n             // not much we can do in this case\n             SetState(POOL_STATE_ACCEPTING_ENTRIES);\n-            RelayCompletedTransaction(true, ERR_INVALID_TX);\n+            RelayCompletedTransaction(ERR_INVALID_TX);\n             return;\n         }\n     }\n@@ -650,7 +649,7 @@ void CDarksendPool::CommitFinalTransaction()\n     RelayInv(inv);\n \n     // Tell the clients it was successful\n-    RelayCompletedTransaction(false, MSG_SUCCESS);\n+    RelayCompletedTransaction(MSG_SUCCESS);\n \n     // Randomly charge clients\n     ChargeRandomFees();\n@@ -1294,27 +1293,18 @@ void CDarksendPool::NewBlock()\n }\n \n // mixing transaction was completed (failed or successful)\n-void CDarksendPool::CompletedTransaction(bool fError, PoolMessage nMessageID)\n+void CDarksendPool::CompletedTransaction(PoolMessage nMessageID)\n {\n     if(fMasterNode) return;\n \n-    if(fError) {\n-        LogPrintf(\"CompletedTransaction -- error\\n\");\n-        SetState(POOL_STATE_ERROR);\n-\n-        CheckPool();\n-        UnlockCoins();\n-        SetNull();\n-    } else {\n+    if(nMessageID == MSG_SUCCESS) {\n         LogPrintf(\"CompletedTransaction -- success\\n\");\n-        SetState(POOL_STATE_SUCCESS);\n-\n-        UnlockCoins();\n-        SetNull();\n-\n-        // To avoid race conditions, we'll only let DS run once per block\n         nCachedLastSuccessBlock = pCurrentBlockIndex->nHeight;\n+    } else {\n+        LogPrintf(\"CompletedTransaction -- error\\n\");\n     }\n+    UnlockCoins();\n+    SetNull();\n     strLastMessage = GetMessageByID(nMessageID);\n }\n \n@@ -2417,12 +2407,12 @@ void CDarksendPool::RelayStatus(PoolStatusUpdate nStatusUpdate, PoolMessage nMes\n             PushStatus(pnode, nStatusUpdate, nMessageID);\n }\n \n-void CDarksendPool::RelayCompletedTransaction(bool fError, PoolMessage nMessageID)\n+void CDarksendPool::RelayCompletedTransaction(PoolMessage nMessageID)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n         if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n-            pnode->PushMessage(NetMsgType::DSCOMPLETE, nSessionID, fError, (int)nMessageID);\n+            pnode->PushMessage(NetMsgType::DSCOMPLETE, nSessionID, (int)nMessageID);\n }\n \n void CDarksendPool::SetState(PoolState nStateNew)"
      },
      {
        "sha": "45c4cfa329746525e6df42854b5935ad867cee81",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef8752cd094a4dbc29ff159b3031ef5458d0144/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef8752cd094a4dbc29ff159b3031ef5458d0144/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=fef8752cd094a4dbc29ff159b3031ef5458d0144",
        "patch": "@@ -364,7 +364,7 @@ class CDarksendPool\n     void CreateFinalTransaction();\n     void CommitFinalTransaction();\n \n-    void CompletedTransaction(bool fError, PoolMessage nMessageID);\n+    void CompletedTransaction(PoolMessage nMessageID);\n \n     /// Get the denominations for a specific amount of dash.\n     int GetDenominationsByAmounts(const std::vector<CAmount>& vecAmount);\n@@ -422,7 +422,7 @@ class CDarksendPool\n     void RelayIn(const CDarkSendEntry& entry);\n     void PushStatus(CNode* pnode, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID);\n     void RelayStatus(PoolStatusUpdate nStatusUpdate = STATUS_SET_STATE, PoolMessage nMessageID = MSG_NOERR);\n-    void RelayCompletedTransaction(bool fError, PoolMessage nMessageID);\n+    void RelayCompletedTransaction(PoolMessage nMessageID);\n \n public:\n     CMasternode* pSubmittedToMasternode;"
      }
    ]
  },
  {
    "sha": "b11cc8f1a855c2badfec960048f63f0faa1ba2c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTFjYzhmMWE4NTVjMmJhZGZlYzk2MDA0OGY2M2YwZmFhMWJhMmMz",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-11-07T21:00:31Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-07T21:00:31Z"
      },
      "message": "[Build] fix travis.yml (#1133)",
      "tree": {
        "sha": "ea75cf721919095dbea49de94330cf72d1dba7fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea75cf721919095dbea49de94330cf72d1dba7fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b11cc8f1a855c2badfec960048f63f0faa1ba2c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11cc8f1a855c2badfec960048f63f0faa1ba2c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b11cc8f1a855c2badfec960048f63f0faa1ba2c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11cc8f1a855c2badfec960048f63f0faa1ba2c3/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fef8752cd094a4dbc29ff159b3031ef5458d0144",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef8752cd094a4dbc29ff159b3031ef5458d0144",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fef8752cd094a4dbc29ff159b3031ef5458d0144"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 35,
      "deletions": 72
    },
    "files": [
      {
        "sha": "bd406b28a4ee22d1bf9908da4537ebf6805a51b2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 35,
        "deletions": 72,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11cc8f1a855c2badfec960048f63f0faa1ba2c3/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11cc8f1a855c2badfec960048f63f0faa1ba2c3/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=b11cc8f1a855c2badfec960048f63f0faa1ba2c3",
        "patch": "@@ -6,12 +6,20 @@\n # - sudo/dist/group are set so as to get Blue Box VMs, necessary for [loopback]\n #   IPv6 support\n \n-sudo: false\n+sudo: required\n dist: trusty\n \n os: linux\n-language: cpp\n-compiler: gcc\n+language: generic\n+\n+cache:\n+  apt: true\n+  ccache: true\n+  directories:\n+    - depends/built\n+    - depends/sdk-sources\n+    - $HOME/.ccache\n+\n env:\n   global:\n     - MAKEJOBS=-j3\n@@ -24,78 +32,34 @@ env:\n     - SDK_URL=https://dash.org/depends-sources/sdks\n     - PYTHON_DEBUG=1\n     - WINEDEBUG=fixme-all\n-cache:\n-  apt: true\n-  ccache: true\n-  directories:\n-    - depends/built\n-    - depends/sdk-sources\n-matrix:\n-  fast_finish: true\n-  include:\n-    - compiler: \": ARM\"\n-      env: HOST=arm-linux-gnueabihf DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-      addons:\n-        apt:\n-          packages:\n-            - g++-arm-linux-gnueabihf\n-    - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\" WINE=true\n-      addons:\n-        apt:\n-          packages:\n-            - nsis\n-            - gcc-mingw-w64-i686\n-            - g++-mingw-w64-i686\n-            - binutils-mingw-w64-i686\n-            - mingw-w64-dev\n-            - wine\n-            - bc\n-    - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\" PYZMQ=true\n-      addons:\n-        apt:\n-          packages:\n-            - g++-multilib\n-            - bc\n-            - python-pip\n-    - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\" WINE=true\n-      addons:\n-        apt:\n-          packages:\n-            - nsis\n-            - gcc-mingw-w64-x86-64\n-            - g++-mingw-w64-x86-64\n-            - binutils-mingw-w64-x86-64\n-            - mingw-w64-dev\n-            - wine\n-            - bc\n-    - compiler: \": dashd\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports\" CPPFLAGS=\"-DDEBUG_LOCKORDER -DENABLE_DASH_DEBUG\" PYZMQ=true\n-      addons:\n-        apt:\n-          packages:\n-            - bc\n-            - python-pip\n-#    - compiler: \": No wallet\"\n-#      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n-    - compiler: \": Cross-Mac\"\n-      env: HOST=x86_64-apple-darwin11 BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n-      addons:\n-        apt:\n-          packages:\n-            - cmake\n-            - libcap-dev\n-            - libbz2-dev\n-  exclude:\n-    - compiler: gcc\n+\n+  matrix:\n+# ARM\n+    - HOST=arm-linux-gnueabihf PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+# Win32\n+    - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+# 32-bit + dash\n+    - HOST=i686-pc-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"g++-multilib bc python3-zmq\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\" PYZMQ=true\n+# Win64\n+    - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+# dashd\n+    - HOST=x86_64-unknown-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"bc python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports\" CPPFLAGS=\"-DDEBUG_LOCKORDER -DENABLE_DASH_DEBUG\" PYZMQ=true\n+# No wallet\n+#    - HOST=x86_64-unknown-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3\" DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+# Cross-Mac\n+    - HOST=x86_64-apple-darwin11 PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n+\n before_install:\n     - git clone https://github.com/dashpay/dash_hash\n     - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n-    - cd dash_hash && python setup.py install --user && cd ..\n     - if [ \"$PYZMQ\" = \"true\" ]; then pip install pyzmq --user ; fi\n+    - sudo apt-get install python-dev\n+    - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n+    - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n+    - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n+    - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n+    - cd dash_hash && python setup.py install --user && cd ..\n before_script:\n     - unset CC; unset CXX\n     - mkdir -p depends/SDKs depends/sdk-sources\n@@ -114,8 +78,7 @@ script:\n     - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" != \"true\" ]; then make check; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" = \"true\" ]; then wine  src/test/test_dash.exe && wine src/qt/test/test_dash-qt.exe ; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS check VERBOSE=1; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      }
    ]
  },
  {
    "sha": "f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjFjN2NjOWQ4MmY3ZTZjMDVlOGM5YmE2ZTdjMDY0MGY4ZThjMDM2",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-11-08T22:53:52Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-08T22:53:52Z"
      },
      "message": "[Build] Re-include Windows/wine test into Travis build (#1137)",
      "tree": {
        "sha": "6144347b85ed8a0562e382dd7dcc22f0a4acf6a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6144347b85ed8a0562e382dd7dcc22f0a4acf6a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b11cc8f1a855c2badfec960048f63f0faa1ba2c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11cc8f1a855c2badfec960048f63f0faa1ba2c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b11cc8f1a855c2badfec960048f63f0faa1ba2c3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8c6eb39ad15c5e780d6ff5e2399aba2231876f08",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
        "patch": "@@ -22,10 +22,10 @@ cache:\n \n env:\n   global:\n-    - MAKEJOBS=-j3\n+    - MAKEJOBS=-j5\n     - RUN_TESTS=false\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n-    - CCACHE_SIZE=100M\n+    - CCACHE_SIZE=400M\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n     - CCACHE_COMPRESS=1\n     - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n@@ -37,11 +37,11 @@ env:\n # ARM\n     - HOST=arm-linux-gnueabihf PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Win32\n-    - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+    - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.7 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j4\" WINE=true\n # 32-bit + dash\n     - HOST=i686-pc-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"g++-multilib bc python3-zmq\" DEP_OPTS=\"NO_QT=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\" PYZMQ=true\n # Win64\n-    - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.6 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n+    - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.7 bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j4\" WINE=true\n # dashd\n     - HOST=x86_64-unknown-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"bc python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports\" CPPFLAGS=\"-DDEBUG_LOCKORDER -DENABLE_DASH_DEBUG\" PYZMQ=true\n # No wallet\n@@ -51,17 +51,19 @@ env:\n \n before_install:\n     - git clone https://github.com/dashpay/dash_hash\n+    - travis_retry sudo apt-get install python-dev\n+    - travis_retry sudo add-apt-repository ppa:ubuntu-wine/ppa -y\n     - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n     - if [ \"$PYZMQ\" = \"true\" ]; then pip install pyzmq --user ; fi\n-    - sudo apt-get install python-dev\n     - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n     - cd dash_hash && python setup.py install --user && cd ..\n before_script:\n     - unset CC; unset CXX\n+    - unset DISPLAY\n     - mkdir -p depends/SDKs depends/sdk-sources\n     - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n@@ -78,7 +80,8 @@ script:\n     - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS check VERBOSE=1; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" != \"true\" ]; then make $MAKEJOBS check VERBOSE=1; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" = \"true\" ]; then wine  src/test/test_dash.exe; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      }
    ]
  },
  {
    "sha": "9908ca7c050ce170fea81f53b30265bb1608cd96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTA4Y2E3YzA1MGNlMTcwZmVhODFmNTNiMzAyNjViYjE2MDhjZDk2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-10-27T21:06:33Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-08T22:56:27Z"
      },
      "message": "PS changes:\n\nRefactoring:\n- IsDenomCompatibleWithSession, split in 3 - CreateNewSession, AddUserToExistingSession and IsAcceptableDenomAndCollateral\n- CheckTimeout:\n    - should not rely on CDarkSendEntry nTimeAdded to clear entries, instead should rely on time of the last successful step i.e. nLastTimeChanged\n    - nLastTimeChanged should only be set when mixing moved forward in some way\n\nState related:\n- local pool should be in POOL_STATE_IDLE initially\n- local pool should switch to POOL_STATE_QUEUE when connected to mn\n- local pool should set session id only when in POOL_STATE_QUEUE\n- SetState should set state local only, no relaying\n- mixing wallets should rely on local logic and expected set of state switches rather then updates from masternodes\n- deprecate STATUS_SET_STATE, POOL_STATE_UNKNOWN, POOL_STATE_TRANSMISSION, POOL_STATE_FINALIZE_TRANSACTION\n\nSession related:\n- deprecate fSessionFoundMasternode, use nSessionID instead\n- deprecate nSessionUsers, use vecSessionCollaterals.size() instead\n\nOther:\n- deprecate IsNull()\n- move few things to private\n- remove deprecated\n- bump min ps peer proto",
      "tree": {
        "sha": "ee8534a53e109f4392091ecea355bfc392f6d76f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee8534a53e109f4392091ecea355bfc392f6d76f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9908ca7c050ce170fea81f53b30265bb1608cd96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9908ca7c050ce170fea81f53b30265bb1608cd96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9908ca7c050ce170fea81f53b30265bb1608cd96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9908ca7c050ce170fea81f53b30265bb1608cd96/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036"
      }
    ],
    "stats": {
      "total": 332,
      "additions": 146,
      "deletions": 186
    },
    "files": [
      {
        "sha": "c8fbd341acc172910ca78ad37e5f29661faff193",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 128,
        "deletions": 154,
        "changes": 282,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9908ca7c050ce170fea81f53b30265bb1608cd96/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9908ca7c050ce170fea81f53b30265bb1608cd96/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=9908ca7c050ce170fea81f53b30265bb1608cd96",
        "patch": "@@ -76,7 +76,10 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         }\n \n         PoolMessage nMessageID = MSG_NOERR;\n-        if(IsDenomCompatibleWithSession(nDenom, txCollateral, nMessageID)) {\n+\n+        bool fResult = nSessionID == 0  ? CreateNewSession(nDenom, txCollateral, nMessageID)\n+                                        : AddUserToExistingSession(nDenom, txCollateral, nMessageID);\n+        if(fResult) {\n             LogPrintf(\"DSACCEPT -- is compatible, please submit!\\n\");\n             PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n             return;\n@@ -263,9 +266,10 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         if(AddEntry(entry, nMessageID)) {\n             PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n             CheckPool();\n-            RelayStatus(STATUS_SET_STATE);\n+            RelayStatus(STATUS_ACCEPTED);\n         } else {\n             PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            SetNull();\n         }\n \n     } else if(strCommand == NetMsgType::DSSTATUSUPDATE) {\n@@ -301,7 +305,7 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n-        if(nMsgStatusUpdate < STATUS_SET_STATE || nMsgStatusUpdate > STATUS_ACCEPTED) {\n+        if(nMsgStatusUpdate < STATUS_REJECTED || nMsgStatusUpdate > STATUS_ACCEPTED) {\n             LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgStatusUpdate is out of bounds: %d\\n\", nMsgStatusUpdate);\n             return;\n         }\n@@ -313,13 +317,10 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n         LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- GetMessageByID: %s\\n\", GetMessageByID(PoolMessage(nMsgMessageID)));\n \n-        if(nMsgStatusUpdate == STATUS_SET_STATE && nSessionID != nMsgSessionID) {\n-            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- message doesn't match current PrivateSend session: nSessionID: %d nMsgSessionID: %d\\n\", nSessionID, nMsgSessionID);\n-            return;\n+        if(!UpdatePoolStateOnClient(PoolState(nMsgState), nMsgEntriesCount, PoolStatusUpdate(nMsgStatusUpdate), PoolMessage(nMsgMessageID), nMsgSessionID)) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- can't update local state\\n\");\n         }\n \n-        UpdatePoolStateOnClient(PoolState(nMsgState), nMsgEntriesCount, PoolStatusUpdate(nMsgStatusUpdate), PoolMessage(nMsgMessageID), nMsgSessionID);\n-\n     } else if(strCommand == NetMsgType::DSSIGNFINALTX) {\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n@@ -344,13 +345,13 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             nTxInIndex++;\n             if(!AddScriptSig(txin)) {\n                 LogPrint(\"privatesend\", \"DSSIGNFINALTX -- AddScriptSig() failed at %d/%d, session: %d\\n\", nTxInIndex, nTxInsCount, nSessionID);\n+                RelayStatus(STATUS_REJECTED);\n                 return;\n             }\n             LogPrint(\"privatesend\", \"DSSIGNFINALTX -- AddScriptSig() %d/%d success\\n\", nTxInIndex, nTxInsCount);\n         }\n         // all is good\n         CheckPool();\n-        RelayStatus(STATUS_SET_STATE);\n \n     } else if(strCommand == NetMsgType::DSFINALTX) {\n \n@@ -456,13 +457,11 @@ void CDarksendPool::ResetPool()\n void CDarksendPool::SetNull()\n {\n     // MN side\n-    nSessionUsers = 0;\n     vecSessionCollaterals.clear();\n \n     // Client side\n     nEntriesCount = 0;\n     fLastEntryAccepted = false;\n-    fSessionFoundMasternode = false;\n \n     // Both sides\n     nState = POOL_STATE_IDLE;\n@@ -530,10 +529,6 @@ std::string CDarksendPool::GetStatus()\n             else if(nStatusMessageProgress % 70 <= 60) strSuffix = \"..\";\n             else if(nStatusMessageProgress % 70 <= 70) strSuffix = \"...\";\n             return strprintf(_(\"Found enough users, signing ( waiting %s )\"), strSuffix);\n-        case POOL_STATE_TRANSMISSION:\n-            return _(\"Transmitting final transaction.\");\n-        case POOL_STATE_FINALIZE_TRANSACTION:\n-            return _(\"Finalizing transaction.\");\n         case POOL_STATE_ERROR:\n             return _(\"PrivateSend request incomplete:\") + \" \" + strLastMessage + \" \" + _(\"Will retry...\");\n         case POOL_STATE_SUCCESS:\n@@ -551,33 +546,26 @@ void CDarksendPool::CheckPool()\n     if(fMasterNode) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- entries count %lu\\n\", GetEntriesCount());\n \n-        // If entries are full, then move on to the next phase\n+        // If entries are full, create finalized transaction\n         if(nState == POOL_STATE_ACCEPTING_ENTRIES && GetEntriesCount() >= GetMaxPoolTransactions()) {\n-            LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- TRYING TRANSACTION\\n\");\n-            SetState(POOL_STATE_FINALIZE_TRANSACTION);\n+            LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- FINALIZE TRANSACTIONS\\n\");\n+            CreateFinalTransaction();\n+            return;\n         }\n-    }\n \n-    // create the finalized transaction for distribution to the clients\n-    if(nState == POOL_STATE_FINALIZE_TRANSACTION) {\n-        CreateFinalTransaction();\n-    }\n-\n-    // If we have all of the signatures, try to compile the transaction\n-    if(fMasterNode && nState == POOL_STATE_SIGNING && IsSignaturesComplete()) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- SIGNING\\n\");\n-        SetState(POOL_STATE_TRANSMISSION);\n-        CommitFinalTransaction();\n+        // If we have all of the signatures, try to compile the transaction\n+        if(nState == POOL_STATE_SIGNING && IsSignaturesComplete()) {\n+            LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- SIGNING\\n\");\n+            CommitFinalTransaction();\n+            return;\n+        }\n     }\n \n     // reset if we're here for 10 seconds\n     if((nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) && GetTimeMillis() - nLastTimeChanged >= 10000) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- timeout, RESETTING\\n\");\n         UnlockCoins();\n         SetNull();\n-        if(fMasterNode) {\n-            RelayStatus(STATUS_SET_STATE);\n-        }\n     }\n }\n \n@@ -626,9 +614,7 @@ void CDarksendPool::CommitFinalTransaction()\n         {\n             LogPrintf(\"CDarksendPool::CommitFinalTransaction -- AcceptToMemoryPool() error: Transaction not valid\\n\");\n             SetNull();\n-\n-            // not much we can do in this case\n-            SetState(POOL_STATE_ACCEPTING_ENTRIES);\n+            // not much we can do in this case, just notify clients\n             RelayCompletedTransaction(ERR_INVALID_TX);\n             return;\n         }\n@@ -657,7 +643,6 @@ void CDarksendPool::CommitFinalTransaction()\n     // Reset\n     LogPrint(\"privatesend\", \"CDarksendPool::CommitFinalTransaction -- COMPLETED -- RESETTING\\n\");\n     SetNull();\n-    RelayStatus(STATUS_SET_STATE);\n }\n \n //\n@@ -787,10 +772,6 @@ void CDarksendPool::CheckTimeout()\n     // catching hanging sessions\n     if(!fMasterNode) {\n         switch(nState) {\n-            case POOL_STATE_TRANSMISSION:\n-                LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Session complete -- Running CheckPool\\n\");\n-                CheckPool();\n-                break;\n             case POOL_STATE_ERROR:\n                 LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Pool error -- Running CheckPool\\n\");\n                 CheckPool();\n@@ -804,50 +785,18 @@ void CDarksendPool::CheckTimeout()\n         }\n     }\n \n-    int nLagTime = 0;\n-    if(!fMasterNode) nLagTime = 10000; //if we're the client, give the server a few extra seconds before resetting.\n-\n-    if(nState == POOL_STATE_ACCEPTING_ENTRIES || nState == POOL_STATE_QUEUE) {\n-        int c = 0;\n-\n-        // check for a timeout and reset if needed\n-        std::vector<CDarkSendEntry>::iterator it2 = vecEntries.begin();\n-        while(it2 != vecEntries.end()) {\n-            if((*it2).IsExpired()) {\n-                LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Removing expired entry: %d\\n\", c);\n-                it2 = vecEntries.erase(it2);\n-                if(GetEntriesCount() == 0) {\n-                    UnlockCoins();\n-                    SetNull();\n-                }\n-                if(fMasterNode) {\n-                    RelayStatus(STATUS_SET_STATE);\n-                }\n-            } else ++it2;\n-            c++;\n-        }\n-\n-        if(GetTimeMillis() - nLastTimeChanged >= PRIVATESEND_QUEUE_TIMEOUT*1000 + nLagTime) {\n-            UnlockCoins();\n-            SetNull();\n-        }\n-    } else if (GetTimeMillis() - nLastTimeChanged >= PRIVATESEND_QUEUE_TIMEOUT*1000 + nLagTime) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Session timed out (%ds) -- resetting\\n\", PRIVATESEND_QUEUE_TIMEOUT);\n-        UnlockCoins();\n-        SetNull();\n-\n-        SetState(POOL_STATE_ERROR);\n-        strLastMessage = _(\"Session timed out.\");\n-    }\n+    int nLagTime = fMasterNode ? 0 : 10000; // if we're the client, give the server a few extra seconds before resetting.\n+    int nTimeout = (nState == POOL_STATE_SIGNING) ? PRIVATESEND_SIGNING_TIMEOUT : PRIVATESEND_QUEUE_TIMEOUT;\n+    bool fTimeout = GetTimeMillis() - nLastTimeChanged >= nTimeout*1000 + nLagTime;\n \n-    if(nState == POOL_STATE_SIGNING && GetTimeMillis() - nLastTimeChanged >= PRIVATESEND_SIGNING_TIMEOUT*1000 + nLagTime) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Session timed out (%ds) -- restting\\n\", PRIVATESEND_SIGNING_TIMEOUT);\n+    if(nState != POOL_STATE_IDLE && fTimeout) {\n+        LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- %s timed out (%ds) -- restting\\n\",\n+                (nState == POOL_STATE_SIGNING) ? \"Signing\" : \"Session\", nTimeout);\n         ChargeFees();\n         UnlockCoins();\n         SetNull();\n-\n         SetState(POOL_STATE_ERROR);\n-        strLastMessage = _(\"Signing timed out.\");\n+        strLastMessage = _(\"Session timed out.\");\n     }\n }\n \n@@ -980,22 +929,19 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n         if(txin.prevout.IsNull()) {\n             LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- input not valid!\\n\");\n             nMessageIDRet = ERR_INVALID_INPUT;\n-            nSessionUsers--;\n             return false;\n         }\n     }\n \n     if(!IsCollateralValid(entryNew.txCollateral)) {\n         LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- collateral not valid!\\n\");\n         nMessageIDRet = ERR_INVALID_COLLATERAL;\n-        nSessionUsers--;\n         return false;\n     }\n \n     if(GetEntriesCount() >= GetMaxPoolTransactions()) {\n         LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- entries is full!\\n\");\n         nMessageIDRet = ERR_ENTRIES_FULL;\n-        nSessionUsers--;\n         return false;\n     }\n \n@@ -1006,7 +952,6 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n                 if(txdsin.prevout == txin.prevout) {\n                     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- found in txin\\n\");\n                     nMessageIDRet = ERR_ALREADY_HAVE;\n-                    nSessionUsers--;\n                     return false;\n                 }\n             }\n@@ -1017,6 +962,7 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n \n     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- adding entry\\n\");\n     nMessageIDRet = MSG_ENTRIES_ADDED;\n+    nLastTimeChanged = GetTimeMillis();\n \n     return true;\n }\n@@ -1093,7 +1039,7 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n         vecOutPointLocked.push_back(txin.prevout);\n \n     // we should already be connected to a Masternode\n-    if(!fSessionFoundMasternode) {\n+    if(!nSessionID) {\n         LogPrintf(\"CDarksendPool::SendDenominate -- No Masternode has been selected yet.\\n\");\n         UnlockCoins();\n         SetNull();\n@@ -1143,9 +1089,8 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n     // store our entry for later use\n     CDarkSendEntry entry(vecTxIn, vecTxOut, txMyCollateral);\n     vecEntries.push_back(entry);\n-\n     RelayIn(entry);\n-    CheckPool();\n+    nLastTimeChanged = GetTimeMillis();\n \n     return true;\n }\n@@ -1154,43 +1099,41 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew)\n {\n     if(fMasterNode) return false;\n-    if(nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) return false;\n \n-    SetState(nStateNew);\n-    nEntriesCount = nEntriesCountNew;\n+    // do not update state when mixing client state is one of these\n+    if(nState == POOL_STATE_IDLE || nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) return false;\n \n     strAutoDenomResult = _(\"Masternode:\") + \" \" + GetMessageByID(nMessageID);\n \n-    if(nStatusUpdate != STATUS_SET_STATE) {\n-        fLastEntryAccepted = nStatusUpdate;\n-        if(nStatusUpdate == STATUS_REJECTED) {\n-            SetState(POOL_STATE_ERROR);\n-            strLastMessage = GetMessageByID(nMessageID);\n-        }\n+    // if rejected at any state\n+    if(nStatusUpdate == STATUS_REJECTED) {\n+        LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry is rejected by Masternode\\n\");\n+        UnlockCoins();\n+        SetNull();\n+        SetState(POOL_STATE_ERROR);\n+        strLastMessage = GetMessageByID(nMessageID);\n+        return true;\n+    }\n \n-        if(nStatusUpdate == STATUS_ACCEPTED && nSessionIDNew != 0) {\n+    if(nStatusUpdate == STATUS_ACCEPTED && nState == nStateNew) {\n+        if(nStateNew == POOL_STATE_QUEUE && nSessionID == 0 && nSessionIDNew != 0) {\n+            // new session id should be set only in POOL_STATE_QUEUE state\n             nSessionID = nSessionIDNew;\n+            nLastTimeChanged = GetTimeMillis();\n             LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- set nSessionID to %d\\n\", nSessionID);\n-            fSessionFoundMasternode = true;\n+            return true;\n         }\n-    }\n-\n-    if(nStateNew == POOL_STATE_ACCEPTING_ENTRIES) {\n-        if(nStatusUpdate == STATUS_ACCEPTED) {\n-            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry accepted!\\n\");\n-            fSessionFoundMasternode = true;\n-            //wait for other users. Masternode will report when ready\n-            SetState(POOL_STATE_QUEUE);\n-        } else if(nStatusUpdate == STATUS_REJECTED && nSessionID == 0 && !fSessionFoundMasternode) {\n-            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry not accepted by Masternode\\n\");\n-            UnlockCoins();\n-            SetState(POOL_STATE_ACCEPTING_ENTRIES);\n-            DoAutomaticDenominating(); //try another Masternode\n+        else if(nStateNew == POOL_STATE_ACCEPTING_ENTRIES && nEntriesCount != nEntriesCountNew) {\n+            nEntriesCount = nEntriesCountNew;\n+            nLastTimeChanged = GetTimeMillis();\n+            fLastEntryAccepted = true;\n+            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- new entry accepted!\\n\");\n+            return true;\n         }\n-        if(fSessionFoundMasternode) return true;\n     }\n \n-    return true;\n+    // only situations above are allowed, fail in any other case\n+    return false;\n }\n \n //\n@@ -1274,8 +1217,10 @@ bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew\n     }\n \n     // push all of our signatures to the Masternode\n-    if(!sigs.empty() && pnode != NULL)\n-        pnode->PushMessage(NetMsgType::DSSIGNFINALTX, sigs);\n+    LogPrintf(\"CDarksendPool::SignFinalTransaction -- pushing sigs to the masternode, finalMutableTransaction=%s\", finalMutableTransaction.ToString());\n+    pnode->PushMessage(NetMsgType::DSSIGNFINALTX, sigs);\n+    nLastTimeChanged = GetTimeMillis();\n+    SetState(POOL_STATE_SIGNING);\n \n     return true;\n }\n@@ -1488,7 +1433,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n     if(!pwalletMain->HasCollateralInputs())\n         return !pwalletMain->HasCollateralInputs(false) && MakeCollateralAmounts();\n \n-    if(fSessionFoundMasternode) {\n+    if(nSessionID) {\n         strAutoDenomResult = _(\"Mixing in progress...\");\n         return false;\n     }\n@@ -1498,8 +1443,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n     UnlockCoins();\n     SetNull();\n \n-    SetState(POOL_STATE_ACCEPTING_ENTRIES);\n-\n     if(!fPrivateSendMultiSession && pwalletMain->GetDenominatedBalance(true) > 0) { //get denominated unconfirmed inputs\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- Found unconfirmed denominated outputs, will wait till they confirm to continue.\\n\");\n         strAutoDenomResult = _(\"Found unconfirmed denominated outputs, will wait till they confirm to continue.\");\n@@ -1544,6 +1487,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             // only try each queue once\n             if(dsq.fTried) continue;\n             dsq.fTried = true;\n+\n             if(dsq.IsExpired()) continue;\n \n             CMasternode* pmn = mnodeman.Find(dsq.vin);\n@@ -1574,7 +1518,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             vecMasternodesUsed.push_back(dsq.vin);\n \n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt to connect to masternode from queue, addr=%s\\n\", pmn->addr.ToString());\n-            nLastTimeChanged = GetTimeMillis();\n             // connect to Masternode and submit the queue request\n             CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n             if(pnode) {\n@@ -1585,6 +1528,8 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected (from queue), sending DSACCEPT: nSessionDenom: %d (%s), addr=%s\\n\",\n                         nSessionDenom, GetDenominationsToString(nSessionDenom), pnode->addr.ToString());\n                 strAutoDenomResult = _(\"Mixing in progress...\");\n+                nLastTimeChanged = GetTimeMillis();\n+                SetState(POOL_STATE_QUEUE);\n                 return true;\n             } else {\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n@@ -1619,7 +1564,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             continue;\n         }\n \n-        nLastTimeChanged = GetTimeMillis();\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt %d connection to Masternode %s\\n\", nTries, pmn->addr.ToString());\n         CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n         if(pnode) {\n@@ -1637,6 +1581,8 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected, sending DSACCEPT, nSessionDenom: %d (%s)\\n\",\n                     nSessionDenom, GetDenominationsToString(nSessionDenom));\n             strAutoDenomResult = _(\"Mixing in progress...\");\n+            nLastTimeChanged = GetTimeMillis();\n+            SetState(POOL_STATE_QUEUE);\n             return true;\n         } else {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n@@ -2027,63 +1973,97 @@ bool CDarksendPool::IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSO\n     return true;\n }\n \n-bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n+bool CDarksendPool::IsAcceptableDenomAndCollateral(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n {\n-    if(nDenom == 0) {\n+    if(!fMasterNode) return false;\n+\n+    // is denom even smth legit?\n+    std::vector<int> vecBits;\n+    if(!GetDenominationsBits(nDenom, vecBits)) {\n+        LogPrint(\"privatesend\", \"CDarksendPool::IsAcceptableDenomAndCollateral -- denom not valid!\\n\");\n         nMessageIDRet = ERR_DENOM;\n         return false;\n     }\n \n-    LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- nSessionDenom: %d (%s) nSessionUsers: %d\\n\",\n-            nSessionDenom, GetDenominationsToString(nSessionDenom), nSessionUsers);\n-\n+    // check collateral\n     if(!fUnitTest && !IsCollateralValid(txCollateral)) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::IsDenomCompatibleWithSession -- collateral not valid!\\n\");\n+        LogPrint(\"privatesend\", \"CDarksendPool::IsAcceptableDenomAndCollateral -- collateral not valid!\\n\");\n         nMessageIDRet = ERR_INVALID_COLLATERAL;\n         return false;\n     }\n \n-    if(nSessionUsers < 0) nSessionUsers = 0;\n+    return true;\n+}\n \n-    if(nSessionUsers == 0) {\n-        nMessageIDRet = MSG_NOERR;\n-        nSessionID = GetInsecureRand(999999)+1;\n-        nSessionDenom = nDenom;\n-        nSessionUsers++;\n-        nLastTimeChanged = GetTimeMillis();\n+bool CDarksendPool::CreateNewSession(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n+{\n+    if(!fMasterNode || nSessionID != 0) return false;\n \n-        if(!fUnitTest) {\n-            //broadcast that I'm accepting entries, only if it's the first entry through\n-            CDarksendQueue dsq(nDenom, activeMasternode.vin, GetTime(), false);\n-            LogPrint(\"privatesend\", \"CDarksendPool::IsDenomCompatibleWithSession -- signing and relaying new queue: %s\\n\", dsq.ToString());\n-            dsq.Sign();\n-            dsq.Relay();\n-        }\n+    // new session can only be started in idle mode\n+    if(nState != POOL_STATE_IDLE) {\n+        nMessageIDRet = ERR_MODE;\n+        LogPrintf(\"CDarksendPool::CreateNewSession -- incompatible mode: nState=%d\\n\", nState);\n+        return false;\n+    }\n \n-        SetState(POOL_STATE_QUEUE);\n-        vecSessionCollaterals.push_back(txCollateral);\n-        return true;\n+    if(!IsAcceptableDenomAndCollateral(nDenom, txCollateral, nMessageIDRet)) {\n+        return false;\n+    }\n+\n+    // start new session\n+    nMessageIDRet = MSG_NOERR;\n+    nSessionID = GetInsecureRand(999999)+1;\n+    nSessionDenom = nDenom;\n+    nLastTimeChanged = GetTimeMillis();\n+\n+    if(!fUnitTest) {\n+        //broadcast that I'm accepting entries, only if it's the first entry through\n+        CDarksendQueue dsq(nDenom, activeMasternode.vin, GetTime(), false);\n+        LogPrint(\"privatesend\", \"CDarksendPool::CreateNewSession -- signing and relaying new queue: %s\\n\", dsq.ToString());\n+        dsq.Sign();\n+        dsq.Relay();\n+        vecDarksendQueue.push_back(dsq);\n     }\n \n-    if((nState != POOL_STATE_ACCEPTING_ENTRIES && nState != POOL_STATE_QUEUE) || nSessionUsers >= GetMaxPoolTransactions()) {\n-        if((nState != POOL_STATE_ACCEPTING_ENTRIES && nState != POOL_STATE_QUEUE)) nMessageIDRet = ERR_MODE;\n-        if(nSessionUsers >= GetMaxPoolTransactions()) nMessageIDRet = ERR_QUEUE_FULL;\n-        LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- incompatible mode, return false: nState status %d, nSessionUsers status %d\\n\", nState != POOL_STATE_ACCEPTING_ENTRIES, nSessionUsers >= GetMaxPoolTransactions());\n+    SetState(POOL_STATE_QUEUE);\n+    vecSessionCollaterals.push_back(txCollateral);\n+    LogPrintf(\"CDarksendPool::CreateNewSession -- new session created, nSessionID: %d  nSessionDenom: %d (%s)  vecSessionCollaterals.size(): %d\\n\",\n+            nSessionID, nSessionDenom, GetDenominationsToString(nSessionDenom), vecSessionCollaterals.size());\n+\n+    return true;\n+}\n+\n+bool CDarksendPool::AddUserToExistingSession(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n+{\n+    if(!fMasterNode || nSessionID == 0 || IsSessionReady()) return false;\n+\n+    if(!IsAcceptableDenomAndCollateral(nDenom, txCollateral, nMessageIDRet)) {\n+        return false;\n+    }\n+\n+    // we only add new users to an existing session when we are in queue mode\n+    if(nState != POOL_STATE_QUEUE) {\n+        nMessageIDRet = ERR_MODE;\n+        LogPrintf(\"CDarksendPool::AddUserToExistingSession -- incompatible mode: nState=%d\\n\", nState);\n         return false;\n     }\n \n     if(nDenom != nSessionDenom) {\n+        LogPrintf(\"CDarksendPool::AddUserToExistingSession -- incompatible denom %d (%s) != nSessionDenom %d (%s)\\n\",\n+                    nDenom, GetDenominationsToString(nDenom), nSessionDenom, GetDenominationsToString(nSessionDenom));\n         nMessageIDRet = ERR_DENOM;\n         return false;\n     }\n \n-    LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- compatible\\n\");\n+    // count new user as accepted to an existing session\n \n     nMessageIDRet = MSG_NOERR;\n-    nSessionUsers++;\n     nLastTimeChanged = GetTimeMillis();\n     vecSessionCollaterals.push_back(txCollateral);\n \n+    LogPrintf(\"CDarksendPool::AddUserToExistingSession -- new user accepted, nSessionID: %d  nSessionDenom: %d (%s)  vecSessionCollaterals.size(): %d\\n\",\n+            nSessionID, nSessionDenom, GetDenominationsToString(nSessionDenom), vecSessionCollaterals.size());\n+\n     return true;\n }\n \n@@ -2423,12 +2403,6 @@ void CDarksendPool::SetState(PoolState nStateNew)\n     }\n \n     LogPrintf(\"CDarksendPool::SetState -- nState: %d, nStateNew: %d\\n\", nState, nStateNew);\n-    if(nState != nStateNew) {\n-        nLastTimeChanged = GetTimeMillis();\n-        if(fMasterNode) {\n-            RelayStatus(STATUS_SET_STATE);\n-        }\n-    }\n     nState = nStateNew;\n }\n "
      },
      {
        "sha": "30f6c8f6f6d14fcdd3856be30cd94337397e3ad4",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 18,
        "deletions": 32,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9908ca7c050ce170fea81f53b30265bb1608cd96/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9908ca7c050ce170fea81f53b30265bb1608cd96/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=9908ca7c050ce170fea81f53b30265bb1608cd96",
        "patch": "@@ -19,7 +19,7 @@ static const int PRIVATESEND_QUEUE_TIMEOUT          = 30;\n static const int PRIVATESEND_SIGNING_TIMEOUT        = 15;\n \n //! minimum peer version accepted by mixing pool\n-static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70202;\n+static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70203;\n \n static const CAmount PRIVATESEND_COLLATERAL         = 0.001 * COIN;\n static const CAmount PRIVATESEND_POOL_MAX           = 999.999 * COIN;\n@@ -95,21 +95,15 @@ class CDarkSendEntry\n     std::vector<CTxDSIn> vecTxDSIn;\n     std::vector<CTxDSOut> vecTxDSOut;\n     CTransaction txCollateral;\n-    CAmount nAmount; // depreciated since 12.1, it's used for backwards compatibility only and can be removed with future protocol bump\n-    int64_t nTimeAdded; // time in UTC milliseconds\n \n     CDarkSendEntry() :\n         vecTxDSIn(std::vector<CTxDSIn>()),\n         vecTxDSOut(std::vector<CTxDSOut>()),\n-        txCollateral(CTransaction()),\n-        nAmount(0),\n-        nTimeAdded(GetTime())\n+        txCollateral(CTransaction())\n         {}\n \n     CDarkSendEntry(const std::vector<CTxIn>& vecTxIn, const std::vector<CTxOut>& vecTxOut, const CTransaction& txCollateral) :\n-        txCollateral(txCollateral),\n-        nAmount(0),\n-        nTimeAdded(GetTime())\n+        txCollateral(txCollateral)\n     {\n         BOOST_FOREACH(CTxIn txin, vecTxIn)\n             vecTxDSIn.push_back(txin);\n@@ -122,14 +116,11 @@ class CDarkSendEntry\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vecTxDSIn);\n-        READWRITE(nAmount);\n         READWRITE(txCollateral);\n         READWRITE(vecTxDSOut);\n     }\n \n     bool AddScriptSig(const CTxIn& txin);\n-\n-    bool IsExpired() { return GetTime() - nTimeAdded > PRIVATESEND_QUEUE_TIMEOUT; }\n };\n \n \n@@ -292,24 +283,20 @@ class CDarksendPool\n \n     // pool states\n     enum PoolState {\n-        POOL_STATE_UNKNOWN,\n         POOL_STATE_IDLE,\n         POOL_STATE_QUEUE,\n         POOL_STATE_ACCEPTING_ENTRIES,\n-        POOL_STATE_FINALIZE_TRANSACTION,\n         POOL_STATE_SIGNING,\n-        POOL_STATE_TRANSMISSION,\n         POOL_STATE_ERROR,\n         POOL_STATE_SUCCESS,\n-        POOL_STATE_MIN = POOL_STATE_UNKNOWN,\n+        POOL_STATE_MIN = POOL_STATE_IDLE,\n         POOL_STATE_MAX = POOL_STATE_SUCCESS\n     };\n \n     // status update message constants\n     enum PoolStatusUpdate {\n-        STATUS_SET_STATE        = -1,\n-        STATUS_REJECTED         = 0,\n-        STATUS_ACCEPTED         = 1\n+        STATUS_REJECTED,\n+        STATUS_ACCEPTED\n     };\n \n     mutable CCriticalSection cs_darksend;\n@@ -333,9 +320,7 @@ class CDarksendPool\n     int nMinBlockSpacing; //required blocks between mixes\n     const CBlockIndex *pCurrentBlockIndex; // Keep track of current block index\n \n-    int nSessionID;\n-    int nSessionUsers; //N Users have said they'll join\n-    bool fSessionFoundMasternode; //If we've found a compatible Masternode\n+    int nSessionID; // 0 if no mixing session is active\n \n     int nEntriesCount;\n     bool fLastEntryAccepted;\n@@ -374,24 +359,26 @@ class CDarksendPool\n     /// Get the maximum number of transactions for the pool\n     int GetMaxPoolTransactions() { return Params().PoolMaxTransactions(); }\n \n-    /// Are these outputs compatible with other client in the pool?\n-    bool IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSOut>& vecTxDSOut);\n-    /// Is this nDenom compatible with other client in the pool?\n-    bool IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    /// Is this nDenom and txCollateral acceptable?\n+    bool IsAcceptableDenomAndCollateral(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    bool CreateNewSession(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    bool AddUserToExistingSession(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    /// Do we have enough users to take entries?\n+    bool IsSessionReady() { return (int)vecSessionCollaterals.size() >= GetMaxPoolTransactions(); }\n \n     /// If the collateral is valid given by a client\n     bool IsCollateralValid(const CTransaction& txCollateral);\n     /// Check that all inputs are signed. (Are all inputs signed?)\n     bool IsSignaturesComplete();\n     /// Check to make sure a given input matches an input in the pool and its scriptSig is valid\n     bool IsInputScriptSigValid(const CTxIn& txin);\n+    /// Are these outputs compatible with other client in the pool?\n+    bool IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSOut>& vecTxDSOut);\n \n     bool IsDenomSkipped(CAmount nDenomValue) {\n         return std::find(vecDenominationsSkipped.begin(), vecDenominationsSkipped.end(), nDenomValue) != vecDenominationsSkipped.end();\n     }\n \n-    bool IsNull() const { return nState == POOL_STATE_ACCEPTING_ENTRIES && vecEntries.empty(); }\n-\n     /// Create denominations\n     bool CreateDenominated();\n     bool CreateDenominated(const CompactTallyItem& tallyItem);\n@@ -421,9 +408,11 @@ class CDarksendPool\n     void RelayInAnon(std::vector<CTxIn>& vin, std::vector<CTxOut>& vout);\n     void RelayIn(const CDarkSendEntry& entry);\n     void PushStatus(CNode* pnode, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID);\n-    void RelayStatus(PoolStatusUpdate nStatusUpdate = STATUS_SET_STATE, PoolMessage nMessageID = MSG_NOERR);\n+    void RelayStatus(PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID = MSG_NOERR);\n     void RelayCompletedTransaction(PoolMessage nMessageID);\n \n+    void SetNull();\n+\n public:\n     CMasternode* pSubmittedToMasternode;\n     int nSessionDenom; //Users must submit an denom matching this\n@@ -466,7 +455,6 @@ class CDarksendPool\n     void SetMinBlockSpacing(int nMinBlockSpacingIn) { nMinBlockSpacing = nMinBlockSpacingIn; }\n \n     void ResetPool();\n-    void SetNull();\n \n     void UnlockCoins();\n \n@@ -481,8 +469,6 @@ class CDarksendPool\n \n     void CheckTimeout();\n     void CheckForCompleteQueue();\n-    /// Do we have enough users to take entries?\n-    bool IsSessionReady(){ return nSessionUsers >= GetMaxPoolTransactions(); }\n \n     /// Process a new block\n     void NewBlock();"
      }
    ]
  },
  {
    "sha": "6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Njk1YTQzYjRhYmQ4MzhlMzRmYzhjYjdkM2E5YjVhYzlhNjExODc1",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-09T22:49:57Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-09T22:49:57Z"
      },
      "message": "rename nLastTimeChanged to nTimeLastSuccessfulStep, set state before updating nTimeLastSuccessfulStep",
      "tree": {
        "sha": "22a772134e3f52a18485cc1fab6efc1b7ef8fdf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22a772134e3f52a18485cc1fab6efc1b7ef8fdf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9908ca7c050ce170fea81f53b30265bb1608cd96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9908ca7c050ce170fea81f53b30265bb1608cd96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9908ca7c050ce170fea81f53b30265bb1608cd96"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 15,
      "deletions": 14
    },
    "files": [
      {
        "sha": "85fff5a3b02b04a8f261a85c43400a3db4bbd2e9",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
        "patch": "@@ -470,7 +470,7 @@ void CDarksendPool::SetNull()\n     vecEntries.clear();\n     finalMutableTransaction.vin.clear();\n     finalMutableTransaction.vout.clear();\n-    nLastTimeChanged = GetTimeMillis();\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n }\n \n //\n@@ -562,7 +562,7 @@ void CDarksendPool::CheckPool()\n     }\n \n     // reset if we're here for 10 seconds\n-    if((nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) && GetTimeMillis() - nLastTimeChanged >= 10000) {\n+    if((nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) && GetTimeMillis() - nTimeLastSuccessfulStep >= 10000) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- timeout, RESETTING\\n\");\n         UnlockCoins();\n         SetNull();\n@@ -787,7 +787,7 @@ void CDarksendPool::CheckTimeout()\n \n     int nLagTime = fMasterNode ? 0 : 10000; // if we're the client, give the server a few extra seconds before resetting.\n     int nTimeout = (nState == POOL_STATE_SIGNING) ? PRIVATESEND_SIGNING_TIMEOUT : PRIVATESEND_QUEUE_TIMEOUT;\n-    bool fTimeout = GetTimeMillis() - nLastTimeChanged >= nTimeout*1000 + nLagTime;\n+    bool fTimeout = GetTimeMillis() - nTimeLastSuccessfulStep >= nTimeout*1000 + nLagTime;\n \n     if(nState != POOL_STATE_IDLE && fTimeout) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- %s timed out (%ds) -- restting\\n\",\n@@ -962,7 +962,7 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n \n     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- adding entry\\n\");\n     nMessageIDRet = MSG_ENTRIES_ADDED;\n-    nLastTimeChanged = GetTimeMillis();\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n \n     return true;\n }\n@@ -1090,7 +1090,7 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n     CDarkSendEntry entry(vecTxIn, vecTxOut, txMyCollateral);\n     vecEntries.push_back(entry);\n     RelayIn(entry);\n-    nLastTimeChanged = GetTimeMillis();\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n \n     return true;\n }\n@@ -1119,13 +1119,13 @@ bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCou\n         if(nStateNew == POOL_STATE_QUEUE && nSessionID == 0 && nSessionIDNew != 0) {\n             // new session id should be set only in POOL_STATE_QUEUE state\n             nSessionID = nSessionIDNew;\n-            nLastTimeChanged = GetTimeMillis();\n+            nTimeLastSuccessfulStep = GetTimeMillis();\n             LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- set nSessionID to %d\\n\", nSessionID);\n             return true;\n         }\n         else if(nStateNew == POOL_STATE_ACCEPTING_ENTRIES && nEntriesCount != nEntriesCountNew) {\n             nEntriesCount = nEntriesCountNew;\n-            nLastTimeChanged = GetTimeMillis();\n+            nTimeLastSuccessfulStep = GetTimeMillis();\n             fLastEntryAccepted = true;\n             LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- new entry accepted!\\n\");\n             return true;\n@@ -1219,8 +1219,8 @@ bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew\n     // push all of our signatures to the Masternode\n     LogPrintf(\"CDarksendPool::SignFinalTransaction -- pushing sigs to the masternode, finalMutableTransaction=%s\", finalMutableTransaction.ToString());\n     pnode->PushMessage(NetMsgType::DSSIGNFINALTX, sigs);\n-    nLastTimeChanged = GetTimeMillis();\n     SetState(POOL_STATE_SIGNING);\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n \n     return true;\n }\n@@ -1528,8 +1528,8 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected (from queue), sending DSACCEPT: nSessionDenom: %d (%s), addr=%s\\n\",\n                         nSessionDenom, GetDenominationsToString(nSessionDenom), pnode->addr.ToString());\n                 strAutoDenomResult = _(\"Mixing in progress...\");\n-                nLastTimeChanged = GetTimeMillis();\n                 SetState(POOL_STATE_QUEUE);\n+                nTimeLastSuccessfulStep = GetTimeMillis();\n                 return true;\n             } else {\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n@@ -1581,8 +1581,8 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected, sending DSACCEPT, nSessionDenom: %d (%s)\\n\",\n                     nSessionDenom, GetDenominationsToString(nSessionDenom));\n             strAutoDenomResult = _(\"Mixing in progress...\");\n-            nLastTimeChanged = GetTimeMillis();\n             SetState(POOL_STATE_QUEUE);\n+            nTimeLastSuccessfulStep = GetTimeMillis();\n             return true;\n         } else {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n@@ -2014,7 +2014,9 @@ bool CDarksendPool::CreateNewSession(int nDenom, CTransaction txCollateral, Pool\n     nMessageIDRet = MSG_NOERR;\n     nSessionID = GetInsecureRand(999999)+1;\n     nSessionDenom = nDenom;\n-    nLastTimeChanged = GetTimeMillis();\n+\n+    SetState(POOL_STATE_QUEUE);\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n \n     if(!fUnitTest) {\n         //broadcast that I'm accepting entries, only if it's the first entry through\n@@ -2025,7 +2027,6 @@ bool CDarksendPool::CreateNewSession(int nDenom, CTransaction txCollateral, Pool\n         vecDarksendQueue.push_back(dsq);\n     }\n \n-    SetState(POOL_STATE_QUEUE);\n     vecSessionCollaterals.push_back(txCollateral);\n     LogPrintf(\"CDarksendPool::CreateNewSession -- new session created, nSessionID: %d  nSessionDenom: %d (%s)  vecSessionCollaterals.size(): %d\\n\",\n             nSessionID, nSessionDenom, GetDenominationsToString(nSessionDenom), vecSessionCollaterals.size());\n@@ -2058,7 +2059,7 @@ bool CDarksendPool::AddUserToExistingSession(int nDenom, CTransaction txCollater\n     // count new user as accepted to an existing session\n \n     nMessageIDRet = MSG_NOERR;\n-    nLastTimeChanged = GetTimeMillis();\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n     vecSessionCollaterals.push_back(txCollateral);\n \n     LogPrintf(\"CDarksendPool::AddUserToExistingSession -- new user accepted, nSessionID: %d  nSessionDenom: %d (%s)  vecSessionCollaterals.size(): %d\\n\","
      },
      {
        "sha": "ef2340deb0ae86568efe141ffd94bd834eaa49ec",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
        "patch": "@@ -314,7 +314,7 @@ class CDarksendPool\n     std::vector<CDarkSendEntry> vecEntries; // Masternode/clients entries\n \n     PoolState nState; // should be one of the POOL_STATE_XXX values\n-    int64_t nLastTimeChanged; // last time the 'state' changed, in UTC milliseconds\n+    int64_t nTimeLastSuccessfulStep; // the time when last successful mixing step was performed, in UTC milliseconds\n \n     int nCachedLastSuccessBlock;\n     int nMinBlockSpacing; //required blocks between mixes"
      }
    ]
  },
  {
    "sha": "d2f1fd253c3fbfacfe986755d994094c4c176e90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmYxZmQyNTNjM2ZiZmFjZmU5ODY3NTVkOTk0MDk0YzRjMTc2ZTkw",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-11T05:16:39Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-11T05:16:39Z"
      },
      "message": "Fix exit codes (#1127)\n\n* Fix exit codes:\r\n- `--help`, `--version` etc should exit with `0` i.e. no error (\"not enough args\" case should still trigger an error)\r\n- error reading config file should exit with error\r\n- slightly refactor AppInitRPC/AppInitRawTx to return standard exit codes (EXIT_FAILURE/EXIT_SUCCESS) or CONTINUE_EXECUTION (-1)\r\n- every main()/exit() should return/use one of EXIT_ codes instead of magic numbers",
      "tree": {
        "sha": "17c636da34799f0d666ddcf9df3be1f59c12ae8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17c636da34799f0d666ddcf9df3be1f59c12ae8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2f1fd253c3fbfacfe986755d994094c4c176e90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2f1fd253c3fbfacfe986755d994094c4c176e90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2f1fd253c3fbfacfe986755d994094c4c176e90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2f1fd253c3fbfacfe986755d994094c4c176e90/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f21c7cc9d82f7e6c05e8c9ba6e7c0640f8e8c036"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 47,
      "deletions": 27
    },
    "files": [
      {
        "sha": "8ff56b54fd0b05d01cdfc8c76d140bd9f8fddb4f",
        "filename": "src/dash-cli.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/dash-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/dash-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dash-cli.cpp?ref=d2f1fd253c3fbfacfe986755d994094c4c176e90",
        "patch": "@@ -25,6 +25,7 @@ using namespace std;\n \n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n+static const int CONTINUE_EXECUTION=-1;\n \n std::string HelpMessageCli()\n {\n@@ -63,7 +64,11 @@ class CConnectionFailed : public std::runtime_error\n \n };\n \n-static bool AppInitRPC(int argc, char* argv[])\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitRPC(int argc, char* argv[])\n {\n     //\n     // Parameters\n@@ -81,31 +86,35 @@ static bool AppInitRPC(int argc, char* argv[])\n         }\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n-        return false;\n+        if (argc < 2) {\n+            fprintf(stderr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n     }\n     if (!boost::filesystem::is_directory(GetDataDir(false))) {\n         fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n     try {\n         ReadConfigFile(mapArgs, mapMultiArgs);\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n     if (GetBoolArg(\"-rpcssl\", false))\n     {\n         fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n-        return false;\n+        return EXIT_FAILURE;\n     }\n-    return true;\n+    return CONTINUE_EXECUTION;\n }\n \n \n@@ -308,12 +317,13 @@ int main(int argc, char* argv[])\n     SetupEnvironment();\n     if (!SetupNetworking()) {\n         fprintf(stderr, \"Error: Initializing networking failed\\n\");\n-        exit(1);\n+        exit(EXIT_FAILURE);\n     }\n \n     try {\n-        if(!AppInitRPC(argc, argv))\n-            return EXIT_FAILURE;\n+        int ret = AppInitRPC(argc, argv);\n+        if (ret != CONTINUE_EXECUTION)\n+            return ret;\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitRPC()\");"
      },
      {
        "sha": "cd0a147e11b0f53c9d8624b3de47c8b108472ee2",
        "filename": "src/dash-tx.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/dash-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/dash-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dash-tx.cpp?ref=d2f1fd253c3fbfacfe986755d994094c4c176e90",
        "patch": "@@ -26,8 +26,13 @@ using namespace std;\n \n static bool fCreateBlank;\n static map<string,UniValue> registers;\n+static const int CONTINUE_EXECUTION=-1;\n \n-static bool AppInitRawTx(int argc, char* argv[])\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitRawTx(int argc, char* argv[])\n {\n     //\n     // Parameters\n@@ -39,7 +44,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         SelectParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n \n     fCreateBlank = GetBoolArg(\"-create\", false);\n@@ -85,9 +90,13 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"set=NAME:JSON-STRING\", _(\"Set register NAME to given JSON-STRING\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        return false;\n+        if (argc < 2) {\n+            fprintf(stderr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n     }\n-    return true;\n+    return CONTINUE_EXECUTION;\n }\n \n static void RegisterSetJson(const string& key, const string& rawJson)\n@@ -654,8 +663,9 @@ int main(int argc, char* argv[])\n     SetupEnvironment();\n \n     try {\n-        if(!AppInitRawTx(argc, argv))\n-            return EXIT_FAILURE;\n+        int ret = AppInitRawTx(argc, argv);\n+        if (ret != CONTINUE_EXECUTION)\n+            return ret;\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitRawTx()\");"
      },
      {
        "sha": "6b4e4df3b1cf7a3de52e20359efc9fecb348d9f6",
        "filename": "src/dashd.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/dashd.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/dashd.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dashd.cpp?ref=d2f1fd253c3fbfacfe986755d994094c4c176e90",
        "patch": "@@ -91,7 +91,7 @@ bool AppInit(int argc, char* argv[])\n         }\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n-        return false;\n+        return true;\n     }\n \n     try\n@@ -132,7 +132,7 @@ bool AppInit(int argc, char* argv[])\n         if (fCommandLine)\n         {\n             fprintf(stderr, \"Error: There is no RPC client functionality in dashd anymore. Use the dash-cli utility instead.\\n\");\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n #ifndef WIN32\n         fDaemon = GetBoolArg(\"-daemon\", false);\n@@ -192,5 +192,5 @@ int main(int argc, char* argv[])\n     // Connect dashd signal handlers\n     noui_connect();\n \n-    return (AppInit(argc, argv) ? 0 : 1);\n+    return (AppInit(argc, argv) ? EXIT_SUCCESS : EXIT_FAILURE);\n }"
      },
      {
        "sha": "d34399ea1d2b34bc7377cb8e22a35988cea2f543",
        "filename": "src/qt/dash.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/qt/dash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/qt/dash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/dash.cpp?ref=d2f1fd253c3fbfacfe986755d994094c4c176e90",
        "patch": "@@ -537,7 +537,7 @@ void BitcoinApplication::shutdownResult(int retval)\n void BitcoinApplication::handleRunawayException(const QString &message)\n {\n     QMessageBox::critical(0, \"Runaway exception\", BitcoinGUI::tr(\"A fatal error occurred. Dash Core can no longer continue safely and will quit.\") + QString(\"\\n\\n\") + message);\n-    ::exit(1);\n+    ::exit(EXIT_FAILURE);\n }\n \n WId BitcoinApplication::getMainWinId() const\n@@ -611,7 +611,7 @@ int main(int argc, char *argv[])\n     {\n         HelpMessageDialog help(NULL, mapArgs.count(\"-version\"));\n         help.showOrPrint();\n-        return 1;\n+        return EXIT_SUCCESS;\n     }\n \n     /// 5. Now that settings and translations are available, ask user for data directory\n@@ -624,14 +624,14 @@ int main(int argc, char *argv[])\n     {\n         QMessageBox::critical(0, QObject::tr(\"Dash Core\"),\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n     try {\n         ReadConfigFile(mapArgs, mapMultiArgs);\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(\"Dash Core\"),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n-        return false;\n+        return EXIT_FAILURE;\n     }\n \n     /// 7. Determine network (and switch to network specific options)\n@@ -645,7 +645,7 @@ int main(int argc, char *argv[])\n         SelectParams(ChainNameFromCommandLine());\n     } catch(std::exception &e) {\n         QMessageBox::critical(0, QObject::tr(\"Dash Core\"), QObject::tr(\"Error: %1\").arg(e.what()));\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n #ifdef ENABLE_WALLET\n     // Parse URIs on command line -- this can affect Params()\n@@ -665,7 +665,7 @@ int main(int argc, char *argv[])\n     if(!masternodeConfig.read(strErr)) {\n         QMessageBox::critical(0, QObject::tr(\"Dash Core\"),\n                               QObject::tr(\"Error reading masternode configuration file: %1\").arg(strErr.c_str()));\n-        return false;\n+        return EXIT_FAILURE;\n     }\n \n     /// 8. URI IPC sending\n@@ -675,7 +675,7 @@ int main(int argc, char *argv[])\n     // - Do this after creating app and setting up translations, so errors are\n     // translated properly.\n     if (PaymentServer::ipcSendCommandLine())\n-        exit(0);\n+        exit(EXIT_SUCCESS);\n \n     // Start up the payment server early, too, so impatient users that click on\n     // dash: links repeatedly have their payment requests routed to this process:"
      },
      {
        "sha": "32ad812027fc4f73b7124b8736ec56c5cee654c2",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f1fd253c3fbfacfe986755d994094c4c176e90/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d2f1fd253c3fbfacfe986755d994094c4c176e90",
        "patch": "@@ -185,7 +185,7 @@ void Intro::pickDataDirectory()\n             if(!intro.exec())\n             {\n                 /* Cancel clicked */\n-                exit(0);\n+                exit(EXIT_SUCCESS);\n             }\n             dataDir = intro.getDataDirectory();\n             try {"
      }
    ]
  },
  {
    "sha": "643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDM3OThiNWE5YWRlNTMxNGZlOGJkYjYwYjc1ZmMwODhjYTVlZDM1",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-11T08:28:35Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-11T08:28:35Z"
      },
      "message": "rename UpdatePoolStateOnClient to CheckPoolStateUpdate",
      "tree": {
        "sha": "0ef85001e93656c8c10ca11b90ab130e15ebab13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ef85001e93656c8c10ca11b90ab130e15ebab13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/643798b5a9ade5314fe8bdb60b75fc088ca5ed35/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6695a43b4abd838e34fc8cb7d3a9b5ac9a611875"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6a5fef1985825abe0c9a1b043311952282e9cd8e",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/643798b5a9ade5314fe8bdb60b75fc088ca5ed35/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/643798b5a9ade5314fe8bdb60b75fc088ca5ed35/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
        "patch": "@@ -312,13 +312,14 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n \n         if(nMsgMessageID < MSG_POOL_MIN || nMsgMessageID > MSG_POOL_MAX) {\n             LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgMessageID is out of bounds: %d\\n\", nMsgMessageID);\n+            if(pfrom->nVersion < 70203) nMsgMessageID = MSG_NOERR;\n             return;\n         }\n \n         LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- GetMessageByID: %s\\n\", GetMessageByID(PoolMessage(nMsgMessageID)));\n \n-        if(!UpdatePoolStateOnClient(PoolState(nMsgState), nMsgEntriesCount, PoolStatusUpdate(nMsgStatusUpdate), PoolMessage(nMsgMessageID), nMsgSessionID)) {\n-            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- can't update local state\\n\");\n+        if(!CheckPoolStateUpdate(PoolState(nMsgState), nMsgEntriesCount, PoolStatusUpdate(nMsgStatusUpdate), PoolMessage(nMsgMessageID), nMsgSessionID)) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- CheckPoolStateUpdate failed\\n\");\n         }\n \n     } else if(strCommand == NetMsgType::DSSIGNFINALTX) {\n@@ -1096,7 +1097,7 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n }\n \n // Incoming message from Masternode updating the progress of mixing\n-bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew)\n+bool CDarksendPool::CheckPoolStateUpdate(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew)\n {\n     if(fMasterNode) return false;\n \n@@ -1107,7 +1108,7 @@ bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCou\n \n     // if rejected at any state\n     if(nStatusUpdate == STATUS_REJECTED) {\n-        LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry is rejected by Masternode\\n\");\n+        LogPrintf(\"CDarksendPool::CheckPoolStateUpdate -- entry is rejected by Masternode\\n\");\n         UnlockCoins();\n         SetNull();\n         SetState(POOL_STATE_ERROR);\n@@ -1120,14 +1121,14 @@ bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCou\n             // new session id should be set only in POOL_STATE_QUEUE state\n             nSessionID = nSessionIDNew;\n             nTimeLastSuccessfulStep = GetTimeMillis();\n-            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- set nSessionID to %d\\n\", nSessionID);\n+            LogPrintf(\"CDarksendPool::CheckPoolStateUpdate -- set nSessionID to %d\\n\", nSessionID);\n             return true;\n         }\n         else if(nStateNew == POOL_STATE_ACCEPTING_ENTRIES && nEntriesCount != nEntriesCountNew) {\n             nEntriesCount = nEntriesCountNew;\n             nTimeLastSuccessfulStep = GetTimeMillis();\n             fLastEntryAccepted = true;\n-            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- new entry accepted!\\n\");\n+            LogPrintf(\"CDarksendPool::CheckPoolStateUpdate -- new entry accepted!\\n\");\n             return true;\n         }\n     }"
      },
      {
        "sha": "4b72d7fd9a054244e16c20d9fa3bd78fd20be15e",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/643798b5a9ade5314fe8bdb60b75fc088ca5ed35/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/643798b5a9ade5314fe8bdb60b75fc088ca5ed35/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
        "patch": "@@ -395,7 +395,7 @@ class CDarksendPool\n     bool SendDenominate(const std::vector<CTxIn>& vecTxIn, const std::vector<CTxOut>& vecTxOut);\n \n     /// Get Masternode updates about the progress of mixing\n-    bool UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew=0);\n+    bool CheckPoolStateUpdate(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew=0);\n     // Set the 'state' value, with some logging and capturing when the state changed\n     void SetState(PoolState nStateNew);\n "
      }
    ]
  },
  {
    "sha": "4b4921d8ce226f539c58593db3562805aeb3c721",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjQ5MjFkOGNlMjI2ZjUzOWM1ODU5M2RiMzU2MjgwNWFlYjNjNzIx",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-11T08:29:13Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-11T08:29:13Z"
      },
      "message": "reset pSubmittedToMasternode in SetNull()",
      "tree": {
        "sha": "df327db065b679729bf54a6f02c16918e3bdecb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df327db065b679729bf54a6f02c16918e3bdecb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b4921d8ce226f539c58593db3562805aeb3c721",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4921d8ce226f539c58593db3562805aeb3c721",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b4921d8ce226f539c58593db3562805aeb3c721",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4921d8ce226f539c58593db3562805aeb3c721/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/643798b5a9ade5314fe8bdb60b75fc088ca5ed35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/643798b5a9ade5314fe8bdb60b75fc088ca5ed35"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd2f36907d869dc6a5f8608b30a94716946b8d7e",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b4921d8ce226f539c58593db3562805aeb3c721/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b4921d8ce226f539c58593db3562805aeb3c721/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=4b4921d8ce226f539c58593db3562805aeb3c721",
        "patch": "@@ -463,6 +463,7 @@ void CDarksendPool::SetNull()\n     // Client side\n     nEntriesCount = 0;\n     fLastEntryAccepted = false;\n+    pSubmittedToMasternode = NULL;\n \n     // Both sides\n     nState = POOL_STATE_IDLE;"
      }
    ]
  },
  {
    "sha": "82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmNhNWZkYmI4YjJhOTI1ODUwODZiNTAxZGJiZWI5NzAwYjNiNjU1",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-12T11:14:50Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-12T11:14:50Z"
      },
      "message": "CGovernanceManager initialization fix (#1138)\n\n* Fix CGovernanceManager initialization problem\r\n\r\n* Added logging messages for cases where CGovernanceManager receives a message while not synced\r\n\r\n* Prevent potential NULL pointer dereference",
      "tree": {
        "sha": "1d6f0cd97b6e7d65ec50ed2fafda70ba8eaf2601",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d6f0cd97b6e7d65ec50ed2fafda70ba8eaf2601"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82ca5fdbb8b2a92585086b501dbbeb9700b3b655/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2f1fd253c3fbfacfe986755d994094c4c176e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2f1fd253c3fbfacfe986755d994094c4c176e90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2f1fd253c3fbfacfe986755d994094c4c176e90"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "146a596eb54b443b4376d41d0b2b6f84bc95bc69",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ca5fdbb8b2a92585086b501dbbeb9700b3b655/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ca5fdbb8b2a92585086b501dbbeb9700b3b655/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
        "patch": "@@ -129,7 +129,10 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         LOCK(cs);\n         // MAKE SURE WE HAVE A VALID REFERENCE TO THE TIP BEFORE CONTINUING\n \n-        if(!pCurrentBlockIndex) return;\n+        if(!pCurrentBlockIndex) {\n+            LogPrintf(\"CGovernanceManager::ProcessMessage MNGOVERNANCEOBJECT -- pCurrentBlockIndex is NULL\\n\");\n+            return;\n+        }\n \n         CGovernanceObject govobj;\n         vRecv >> govobj;\n@@ -172,7 +175,10 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n     else if (strCommand == NetMsgType::MNGOVERNANCEOBJECTVOTE)\n     {\n         // Ignore such messages until masternode list is synced\n-        if(!masternodeSync.IsMasternodeListSynced()) return;\n+        if(!masternodeSync.IsMasternodeListSynced()) {\n+            LogPrint(\"gobject\", \"CGovernanceManager::ProcessMessage MNGOVERNANCEOBJECTVOTE -- masternode list not synced\\n\");\n+            return;\n+        }\n \n         CGovernanceVote vote;\n         vRecv >> vote;\n@@ -1125,6 +1131,10 @@ void CGovernanceManager::UpdatedBlockTip(const CBlockIndex *pindex)\n     // On the other hand it should be safe for us to access pindex without holding a lock\n     // on cs_main because the CBlockIndex objects are dynamically allocated and\n     // presumably never deleted.\n+    if(!pindex) {\n+        return;\n+    }\n+\n     LOCK(cs);\n     pCurrentBlockIndex = pindex;\n     nCachedBlockHeight = pCurrentBlockIndex->nHeight;"
      },
      {
        "sha": "c3c37fd4f8619d99e63b95fbbd829752ae414be5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ca5fdbb8b2a92585086b501dbbeb9700b3b655/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ca5fdbb8b2a92585086b501dbbeb9700b3b655/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
        "patch": "@@ -1883,6 +1883,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     darkSendPool.UpdatedBlockTip(chainActive.Tip());\n     mnpayments.UpdatedBlockTip(chainActive.Tip());\n     masternodeSync.UpdatedBlockTip(chainActive.Tip());\n+    governance.UpdatedBlockTip(chainActive.Tip());\n \n     // ********************************************************* Step 11d: start dash-privatesend thread\n "
      }
    ]
  },
  {
    "sha": "c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzFiYThiYTRjMDdlNzI2MjBiZDcxNzUzZjIxMDNjYTEwM2JiMWMy",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-13T17:52:34Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-13T17:52:34Z"
      },
      "message": "New vote tallying implementation (#1135)",
      "tree": {
        "sha": "816d415360bcccf9780dc379c4ec32bb808faec1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/816d415360bcccf9780dc379c4ec32bb808faec1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82ca5fdbb8b2a92585086b501dbbeb9700b3b655",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82ca5fdbb8b2a92585086b501dbbeb9700b3b655"
      }
    ],
    "stats": {
      "total": 2914,
      "additions": 2391,
      "deletions": 523
    },
    "files": [
      {
        "sha": "9fe825297264befb22a82cc7eda7c15ff0623aaf",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -74,6 +74,8 @@ BITCOIN_CORE_H = \\\n   arith_uint256.h \\\n   base58.h \\\n   bloom.h \\\n+  cachemap.h \\\n+  cachemultimap.h \\\n   chain.h \\\n   chainparams.h \\\n   chainparamsbase.h \\\n@@ -99,7 +101,9 @@ BITCOIN_CORE_H = \\\n   darksend-relay.h \\\n   governance.h \\\n   governance-classes.h \\\n+  governance-exceptions.h \\\n   governance-vote.h \\\n+  governance-votedb.h \\\n   flat-database.h \\\n   hash.h \\\n   httprpc.h \\\n@@ -202,6 +206,7 @@ libbitcoin_server_a_SOURCES = \\\n   governance.cpp \\\n   governance-classes.cpp \\\n   governance-vote.cpp \\\n+  governance-votedb.cpp \\\n   main.cpp \\\n   merkleblock.cpp \\\n   miner.cpp \\"
      },
      {
        "sha": "de97a212336c929e2525c2e49c2a7e63ea8344a9",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -43,6 +43,8 @@ BITCOIN_TESTS =\\\n   test/base64_tests.cpp \\\n   test/bip32_tests.cpp \\\n   test/bloom_tests.cpp \\\n+  test/cachemap_tests.cpp \\\n+  test/cachemultimap_tests.cpp \\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/coins_tests.cpp \\"
      },
      {
        "sha": "2276315121372a74096cbb26b1e6f26211a94a2a",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -271,6 +271,7 @@ void CActiveMasternode::ManageStateLocal()\n         //update to masternode list\n         LogPrintf(\"CActiveMasternode::ManageStateLocal -- Update Masternode List\\n\");\n         mnodeman.UpdateMasternodeList(mnb);\n+        mnodeman.NotifyMasternodeUpdates();\n \n         //send to all peers\n         LogPrintf(\"CActiveMasternode::ManageStateLocal -- Relay broadcast, vin=%s\\n\", vin.ToString());"
      },
      {
        "sha": "3539be4f5871bf0d1463b23d1f375e7ba9379a1b",
        "filename": "src/cachemap.h",
        "status": "added",
        "additions": 202,
        "deletions": 0,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/cachemap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/cachemap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemap.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef CACHEMAP_H_\n+#define CACHEMAP_H_\n+\n+#include <map>\n+#include <list>\n+#include <cstddef>\n+\n+#include \"serialize.h\"\n+\n+/**\n+ * Serializable structure for key/value items\n+ */\n+template<typename K, typename V>\n+struct CacheItem\n+{\n+    CacheItem()\n+    {}\n+\n+    CacheItem(const K& keyIn, const V& valueIn)\n+    : key(keyIn),\n+      value(valueIn)\n+    {}\n+\n+    K key;\n+    V value;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(key);\n+        READWRITE(value);\n+    }\n+};\n+\n+\n+/**\n+ * Map like container that keeps the N most recently added items\n+ */\n+template<typename K, typename V, typename Size = uint32_t>\n+class CacheMap\n+{\n+public:\n+    typedef Size size_type;\n+\n+    typedef CacheItem<K,V> item_t;\n+\n+    typedef std::list<item_t> list_t;\n+\n+    typedef typename list_t::iterator list_it;\n+\n+    typedef typename list_t::const_iterator list_cit;\n+\n+    typedef std::map<K, list_it> map_t;\n+\n+    typedef typename map_t::iterator map_it;\n+\n+    typedef typename map_t::const_iterator map_cit;\n+\n+private:\n+    size_type nMaxSize;\n+\n+    size_type nCurrentSize;\n+\n+    list_t listItems;\n+\n+    map_t mapIndex;\n+\n+public:\n+    CacheMap(size_type nMaxSizeIn = 0)\n+        : nMaxSize(nMaxSizeIn),\n+          nCurrentSize(0),\n+          listItems(),\n+          mapIndex()\n+    {}\n+\n+    CacheMap(const CacheMap<K,V>& other)\n+        : nMaxSize(other.nMaxSize),\n+          nCurrentSize(other.nCurrentSize),\n+          listItems(other.listItems),\n+          mapIndex()\n+    {\n+        RebuildIndex();\n+    }\n+\n+    void Clear()\n+    {\n+        mapIndex.clear();\n+        listItems.clear();\n+        nCurrentSize = 0;\n+    }\n+\n+    void SetMaxSize(size_type nMaxSizeIn)\n+    {\n+        nMaxSize = nMaxSizeIn;\n+    }\n+\n+    size_type GetMaxSize() const {\n+        return nMaxSize;\n+    }\n+\n+    size_type GetSize() const {\n+        return nCurrentSize;\n+    }\n+\n+    void Insert(const K& key, const V& value)\n+    {\n+        map_it it = mapIndex.find(key);\n+        if(it != mapIndex.end()) {\n+            item_t& item = *(it->second);\n+            item.value = value;\n+            return;\n+        }\n+        if(nCurrentSize == nMaxSize) {\n+            PruneLast();\n+        }\n+        listItems.push_front(item_t(key, value));\n+        mapIndex[key] = listItems.begin();\n+        ++nCurrentSize;\n+    }\n+\n+    bool HasKey(const K& key) const\n+    {\n+        map_cit it = mapIndex.find(key);\n+        return (it != mapIndex.end());\n+    }\n+\n+    bool Get(const K& key, V& value) const\n+    {\n+        map_cit it = mapIndex.find(key);\n+        if(it == mapIndex.end()) {\n+            return false;\n+        }\n+        item_t& item = *(it->second);\n+        value = item.value;\n+        return true;\n+    }\n+\n+    void Erase(const K& key)\n+    {\n+        map_it it = mapIndex.find(key);\n+        if(it == mapIndex.end()) {\n+            return;\n+        }\n+        listItems.erase(it->second);\n+        mapIndex.erase(it);\n+        --nCurrentSize;\n+    }\n+\n+    const list_t& GetItemList() const {\n+        return listItems;\n+    }\n+\n+    CacheMap<K,V>& operator=(const CacheMap<K,V>& other)\n+    {\n+        nMaxSize = other.nMaxSize;\n+        nCurrentSize = other.nCurrentSize;\n+        listItems = other.listItems;\n+        RebuildIndex();\n+        return *this;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(nMaxSize);\n+        READWRITE(nCurrentSize);\n+        READWRITE(listItems);\n+        if(ser_action.ForRead()) {\n+            RebuildIndex();\n+        }\n+    }\n+\n+private:\n+    void PruneLast()\n+    {\n+        if(nCurrentSize < 1) {\n+            return;\n+        }\n+        item_t& item = listItems.back();\n+        mapIndex.erase(item.key);\n+        listItems.pop_back();\n+        --nCurrentSize;\n+    }\n+\n+    void RebuildIndex()\n+    {\n+        mapIndex.clear();\n+        for(list_it it = listItems.begin(); it != listItems.end(); ++it) {\n+            mapIndex[it->key] = it;\n+        }\n+    }\n+};\n+\n+#endif /* CACHEMAP_H_ */"
      },
      {
        "sha": "4cdf12285fb9b60270a6a380970c3bc689950062",
        "filename": "src/cachemultimap.h",
        "status": "added",
        "additions": 254,
        "deletions": 0,
        "changes": 254,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/cachemultimap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/cachemultimap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemultimap.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef CACHEMULTIMAP_H_\n+#define CACHEMULTIMAP_H_\n+\n+#include <cstddef>\n+#include <map>\n+#include <list>\n+#include <set>\n+\n+#include \"serialize.h\"\n+\n+#include \"cachemap.h\"\n+\n+/**\n+ * Map like container that keeps the N most recently added items\n+ */\n+template<typename K, typename V, typename Size = uint32_t>\n+class CacheMultiMap\n+{\n+public:\n+    typedef Size size_type;\n+\n+    typedef CacheItem<K,V> item_t;\n+\n+    typedef std::list<item_t> list_t;\n+\n+    typedef typename list_t::iterator list_it;\n+\n+    typedef typename list_t::const_iterator list_cit;\n+\n+    typedef std::map<V,list_it> it_map_t;\n+\n+    typedef typename it_map_t::iterator it_map_it;\n+\n+    typedef typename it_map_t::const_iterator it_map_cit;\n+\n+    typedef std::map<K, it_map_t> map_t;\n+\n+    typedef typename map_t::iterator map_it;\n+\n+    typedef typename map_t::const_iterator map_cit;\n+\n+private:\n+    size_type nMaxSize;\n+\n+    size_type nCurrentSize;\n+\n+    list_t listItems;\n+\n+    map_t mapIndex;\n+\n+public:\n+    CacheMultiMap(size_type nMaxSizeIn = 0)\n+        : nMaxSize(nMaxSizeIn),\n+          nCurrentSize(0),\n+          listItems(),\n+          mapIndex()\n+    {}\n+\n+    CacheMultiMap(const CacheMap<K,V>& other)\n+        : nMaxSize(other.nMaxSize),\n+          nCurrentSize(other.nCurrentSize),\n+          listItems(other.listItems),\n+          mapIndex()\n+    {\n+        RebuildIndex();\n+    }\n+\n+    void Clear()\n+    {\n+        mapIndex.clear();\n+        listItems.clear();\n+        nCurrentSize = 0;\n+    }\n+\n+    void SetMaxSize(size_type nMaxSizeIn)\n+    {\n+        nMaxSize = nMaxSizeIn;\n+    }\n+\n+    size_type GetMaxSize() const {\n+        return nMaxSize;\n+    }\n+\n+    size_type GetSize() const {\n+        return nCurrentSize;\n+    }\n+\n+    void Insert(const K& key, const V& value)\n+    {\n+        if(nCurrentSize == nMaxSize) {\n+            PruneLast();\n+        }\n+        map_it mit = mapIndex.find(key);\n+        if(mit == mapIndex.end()) {\n+            mit = mapIndex.insert(std::pair<K,it_map_t>(key, it_map_t())).first;\n+        }\n+        it_map_t& mapIt = mit->second;\n+\n+        if(mapIt.count(value) > 0) {\n+            // Don't insert duplicates\n+            return;\n+        }\n+\n+        listItems.push_front(item_t(key, value));\n+        list_it lit = listItems.begin();\n+\n+        mapIt[value] = lit;\n+        ++nCurrentSize;\n+    }\n+\n+    bool HasKey(const K& key) const\n+    {\n+        map_cit it = mapIndex.find(key);\n+        return (it != mapIndex.end());\n+    }\n+\n+    bool Get(const K& key, V& value) const\n+    {\n+        map_cit it = mapIndex.find(key);\n+        if(it == mapIndex.end()) {\n+            return false;\n+        }\n+        const it_map_t& mapIt = it->second;\n+        const item_t& item = *(mapIt.begin()->second);\n+        value = item.value;\n+        return true;\n+    }\n+\n+    bool GetAll(const K& key, std::vector<V>& vecValues)\n+    {\n+        map_cit mit = mapIndex.find(key);\n+        if(mit == mapIndex.end()) {\n+            return false;\n+        }\n+        const it_map_t& mapIt = mit->second;\n+\n+        for(it_map_cit it = mapIt.begin(); it != mapIt.end(); ++it) {\n+            const item_t& item = *(it->second);\n+            vecValues.push_back(item.value);\n+        }\n+        return true;\n+    }\n+\n+    void Erase(const K& key)\n+    {\n+        map_it mit = mapIndex.find(key);\n+        if(mit == mapIndex.end()) {\n+            return;\n+        }\n+        it_map_t& mapIt = mit->second;\n+\n+        for(it_map_it it = mapIt.begin(); it != mapIt.end(); ++it) {\n+            listItems.erase(it->second);\n+            --nCurrentSize;\n+        }\n+\n+        mapIndex.erase(mit);\n+    }\n+\n+    void Erase(const K& key, const V& value)\n+    {\n+        map_it mit = mapIndex.find(key);\n+        if(mit == mapIndex.end()) {\n+            return;\n+        }\n+        it_map_t& mapIt = mit->second;\n+\n+        it_map_it it = mapIt.find(value);\n+        if(it == mapIt.end()) {\n+            return;\n+        }\n+\n+        listItems.erase(it->second);\n+        --nCurrentSize;\n+        mapIt.erase(it);\n+\n+        if(mapIt.size() < 1) {\n+            mapIndex.erase(mit);\n+        }\n+    }\n+\n+    const list_t& GetItemList() const {\n+        return listItems;\n+    }\n+\n+    CacheMap<K,V>& operator=(const CacheMap<K,V>& other)\n+    {\n+        nMaxSize = other.nMaxSize;\n+        nCurrentSize = other.nCurrentSize;\n+        listItems = other.listItems;\n+        RebuildIndex();\n+        return *this;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(nMaxSize);\n+        READWRITE(nCurrentSize);\n+        READWRITE(listItems);\n+        if(ser_action.ForRead()) {\n+            RebuildIndex();\n+        }\n+    }\n+\n+private:\n+    void PruneLast()\n+    {\n+        if(nCurrentSize < 1) {\n+            return;\n+        }\n+\n+        list_it lit = listItems.end();\n+        --lit;\n+        item_t& item = *lit;\n+\n+        map_it mit = mapIndex.find(item.key);\n+\n+        if(mit != mapIndex.end()) {\n+            it_map_t& mapIt = mit->second;\n+\n+            mapIt.erase(item.value);\n+\n+            if(mapIt.size() < 1) {\n+                mapIndex.erase(item.key);\n+            }\n+        }\n+\n+        listItems.pop_back();\n+        --nCurrentSize;\n+    }\n+\n+    void RebuildIndex()\n+    {\n+        mapIndex.clear();\n+        for(list_it lit = listItems.begin(); lit != listItems.end(); ++lit) {\n+            item_t& item = *lit;\n+            map_it mit = mapIndex.find(item.key);\n+            if(mit == mapIndex.end()) {\n+                mit = mapIndex.insert(std::pair<K,it_map_t>(item.key, it_map_t())).first;\n+            }\n+            it_map_t& mapIt = mit->second;\n+            mapIt[item.value] = lit;\n+        }\n+    }\n+};\n+\n+#endif /* CACHEMULTIMAP_H_ */"
      },
      {
        "sha": "b5dc37ff47d8da1a9cbc6e6a6c7c39b716a05c11",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -346,7 +346,7 @@ bool CSuperblockManager::IsSuperblockTriggered(int nBlockHeight)\n \n         // MAKE SURE THIS TRIGGER IS ACTIVE VIA FUNDING CACHE FLAG\n \n-        if(pObj->fCachedFunding) {\n+        if(pObj->IsSetCachedFunding()) {\n             LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- fCacheFunding = true, returning true\\n\");\n             DBG( cout << \"IsSuperblockTriggered returning true\" << endl; );\n             return true;\n@@ -506,7 +506,7 @@ CSuperblock(uint256& nHash)\n \n     DBG( cout << \"CSuperblock Constructor pGovObj : \"\n          << pGovObj->GetDataAsString()\n-         << \", nObjectType = \" << pGovObj->nObjectType\n+         << \", nObjectType = \" << pGovObj->GetObjectType()\n          << endl; );\n \n     if (pGovObj->GetObjectType() != GOVERNANCE_OBJECT_TRIGGER) {\n@@ -678,7 +678,7 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, CAmount b\n     int nMinerPayments = nOutputs - nPayments;\n \n     LogPrint(\"gobject\", \"CSuperblock::IsValid nOutputs = %d, nPayments = %d, strData = %s\\n\",\n-             nOutputs, nPayments, GetGovernanceObject()->strData);\n+             nOutputs, nPayments, GetGovernanceObject()->GetDataAsHex());\n \n     // We require an exact match (including order) between the expected\n     // superblock payments and the payments actually in the block, after"
      },
      {
        "sha": "6e97f414f2abe670a47614ac058cf815f1700ef7",
        "filename": "src/governance-classes.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -1,8 +1,8 @@\n // Copyright (c) 2014-2016 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef GOVERANCE_CLASSES_H\n-#define GOVERANCE_CLASSES_H\n+#ifndef GOVERNANCE_CLASSES_H\n+#define GOVERNANCE_CLASSES_H\n \n //#define ENABLE_DASH_DEBUG\n "
      },
      {
        "sha": "a968b93cccac64dc5fc8c7b9884ae4e9e3aee1f6",
        "filename": "src/governance-exceptions.h",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-exceptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-exceptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-exceptions.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef GOVERNANCE_EXCEPTIONS_H\n+#define GOVERNANCE_EXCEPTIONS_H\n+\n+#include <exception>\n+#include <string>\n+#include <iostream>\n+\n+enum governance_exception_type_enum_t {\n+    /// Default value, normally indicates no exception condition occurred\n+    GOVERNANCE_EXCEPTION_NONE = 0,\n+    /// Unusual condition requiring no caller action\n+    GOVERNANCE_EXCEPTION_WARNING = 1,\n+    /// Requested operation cannot be performed\n+    GOVERNANCE_EXCEPTION_PERMANENT_ERROR = 2,\n+    /// Requested operation not currently possible, may resubmit later\n+    GOVERNANCE_EXCEPTION_TEMPORARY_ERROR = 3,\n+    /// Unexpected error (ie. should not happen unless there is a bug in the code)\n+    GOVERNANCE_EXCEPTION_INTERNAL_ERROR = 4\n+};\n+\n+inline std::ostream& operator<<(std::ostream& os, governance_exception_type_enum_t eType)\n+{\n+    switch(eType) {\n+    case GOVERNANCE_EXCEPTION_NONE:\n+        os << \"GOVERNANCE_EXCEPTION_NONE\";\n+        break;\n+    case GOVERNANCE_EXCEPTION_WARNING:\n+        os << \"GOVERNANCE_EXCEPTION_WARNING\";\n+        break;\n+    case GOVERNANCE_EXCEPTION_PERMANENT_ERROR:\n+        os << \"GOVERNANCE_EXCEPTION_PERMANENT_ERROR\";\n+        break;\n+    case GOVERNANCE_EXCEPTION_TEMPORARY_ERROR:\n+        os << \"GOVERNANCE_EXCEPTION_TEMPORARY_ERROR\";\n+        break;\n+    case GOVERNANCE_EXCEPTION_INTERNAL_ERROR:\n+        os << \"GOVERNANCE_EXCEPTION_INTERNAL_ERROR\";\n+        break;\n+    }\n+    return os;\n+}\n+\n+/**\n+ * A class which encapsulates information about a governance exception condition\n+ *\n+ * Derives from std::exception so is suitable for throwing\n+ * (ie. will be caught by a std::exception handler) but may also be used as a\n+ * normal object.\n+ */\n+class CGovernanceException : public std::exception\n+{\n+private:\n+    std::string strMessage;\n+\n+    governance_exception_type_enum_t eType;\n+\n+    int nNodePenalty;\n+\n+public:\n+    CGovernanceException(const std::string& strMessageIn = \"\",\n+                         governance_exception_type_enum_t eTypeIn = GOVERNANCE_EXCEPTION_NONE,\n+                         int nNodePenaltyIn = 0)\n+        : strMessage(),\n+          eType(eTypeIn),\n+          nNodePenalty(nNodePenaltyIn)\n+    {\n+        std::ostringstream ostr;\n+        ostr << eType << \":\" << strMessageIn;\n+        strMessage = ostr.str();\n+    }\n+\n+    virtual ~CGovernanceException() throw() {}\n+\n+    virtual const char* what() const throw()\n+    {\n+        return strMessage.c_str();\n+    }\n+\n+    const std::string& GetMessage() const\n+    {\n+        return strMessage;\n+    }\n+\n+    governance_exception_type_enum_t GetType() const\n+    {\n+        return eType;\n+    }\n+\n+    int GetNodePenalty() const {\n+        return nNodePenalty;\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "67f733362f718299f80f00bb1778389d1e1f7ecf",
        "filename": "src/governance-misc.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-misc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-misc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-misc.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -2,8 +2,8 @@\n \n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef GOVERANCE_MISC_H\n-#define GOVERANCE_MISC_H\n+#ifndef GOVERNANCE_MISC_H\n+#define GOVERNANCE_MISC_H\n \n #include \"main.h\"\n #include \"governance.h\"\n@@ -51,4 +51,4 @@ class CGovernanceVote;\n // \t}\n // };\n \n-#endif\n\\ No newline at end of file\n+#endif"
      },
      {
        "sha": "80286d51259ecfba8fa80ad6b68510a428a76871",
        "filename": "src/governance-vote.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 4,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-vote.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-vote.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -233,7 +233,7 @@ CGovernanceVote::CGovernanceVote(CTxIn vinMasternodeIn, uint256 nParentHashIn, v\n       vchSig()\n {}\n \n-void CGovernanceVote::Relay()\n+void CGovernanceVote::Relay() const\n {\n     CInv inv(MSG_GOVERNANCE_OBJECT_VOTE, GetHash());\n     RelayInv(inv, PROTOCOL_VERSION);\n@@ -262,15 +262,15 @@ bool CGovernanceVote::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n     return true;\n }\n \n-bool CGovernanceVote::IsValid(bool fSignatureCheck)\n+bool CGovernanceVote::IsValid(bool fSignatureCheck) const\n {\n-    if(nTime > GetTime() + (60*60)){\n+    if(nTime > GetTime() + (60*60)) {\n         LogPrint(\"gobject\", \"CGovernanceVote::IsValid -- vote is too far ahead of current time - %s - nTime %lli - Max Time %lli\\n\", GetHash().ToString(), nTime, GetTime() + (60*60));\n         return false;\n     }\n \n     // support up to 50 actions (implemented in sentinel)\n-    if(nVoteSignal > 50)\n+    if(nVoteSignal > MAX_SUPPORTED_VOTE_SIGNAL)\n     {\n         LogPrint(\"gobject\", \"CGovernanceVote::IsValid -- Client attempted to vote on invalid signal(%d) - %s\\n\", nVoteSignal, GetHash().ToString());\n         return false;\n@@ -302,3 +302,44 @@ bool CGovernanceVote::IsValid(bool fSignatureCheck)\n \n     return true;\n }\n+\n+bool operator==(const CGovernanceVote& vote1, const CGovernanceVote& vote2)\n+{\n+    bool fResult = ((vote1.vinMasternode == vote2.vinMasternode) &&\n+                    (vote1.nParentHash == vote2.nParentHash) &&\n+                    (vote1.nVoteOutcome == vote2.nVoteOutcome) &&\n+                    (vote1.nVoteSignal == vote2.nVoteSignal) &&\n+                    (vote1.nTime == vote2.nTime));\n+    return fResult;\n+}\n+\n+bool operator<(const CGovernanceVote& vote1, const CGovernanceVote& vote2)\n+{\n+    bool fResult = (vote1.vinMasternode < vote2.vinMasternode);\n+    if(!fResult) {\n+        return false;\n+    }\n+    fResult = (vote1.vinMasternode == vote2.vinMasternode);\n+\n+    fResult = fResult && (vote1.nParentHash < vote2.nParentHash);\n+    if(!fResult) {\n+        return false;\n+    }\n+    fResult = fResult && (vote1.nParentHash == vote2.nParentHash);\n+\n+    fResult = fResult && (vote1.nVoteOutcome < vote2.nVoteOutcome);\n+    if(!fResult) {\n+        return false;\n+    }\n+    fResult = fResult && (vote1.nVoteOutcome == vote2.nVoteOutcome);\n+\n+    fResult = fResult && (vote1.nVoteSignal == vote2.nVoteSignal);\n+    if(!fResult) {\n+        return false;\n+    }\n+    fResult = fResult && (vote1.nVoteSignal == vote2.nVoteSignal);\n+\n+    fResult = fResult && (vote1.nTime < vote2.nTime);\n+\n+    return fResult;\n+}"
      },
      {
        "sha": "a77f40f6897936e5a5d28c20376fd1067c1a3835",
        "filename": "src/governance-vote.h",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-vote.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-vote.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -2,8 +2,8 @@\n \n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef GOVERANCE_VOTE_H\n-#define GOVERANCE_VOTE_H\n+#ifndef GOVERNANCE_VOTE_H\n+#define GOVERNANCE_VOTE_H\n \n #include \"main.h\"\n #include \"sync.h\"\n@@ -68,6 +68,8 @@ enum vote_signal_enum_t  {\n     VOTE_SIGNAL_CUSTOM20   = 35\n };\n \n+static const int MAX_SUPPORTED_VOTE_SIGNAL = VOTE_SIGNAL_ENDORSED;\n+\n /**\n * Governance Voting\n *\n@@ -89,6 +91,10 @@ class CGovernanceVoting\n \n class CGovernanceVote\n {\n+    friend bool operator==(const CGovernanceVote& vote1, const CGovernanceVote& vote2);\n+\n+    friend bool operator<(const CGovernanceVote& vote1, const CGovernanceVote& vote2);\n+\n private:\n     bool fValid; //if the vote is currently valid / counted\n     bool fSynced; //if we've sent this to our peers\n@@ -120,8 +126,12 @@ class CGovernanceVote\n     void SetSignature(const std::vector<unsigned char>& vchSigIn) { vchSig = vchSigIn; }\n \n     bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n-    bool IsValid(bool fSignatureCheck);\n-    void Relay();\n+    bool IsValid(bool fSignatureCheck) const;\n+    void Relay() const;\n+\n+    std::string GetVoteString() const {\n+        return CGovernanceVoting::ConvertOutcomeToString(GetOutcome());\n+    }\n \n     CTxIn& GetVinMasternode() { return vinMasternode; }\n \n@@ -144,7 +154,7 @@ class CGovernanceVote\n         return ss.GetHash();\n     }\n \n-    std::string ToString()\n+    std::string ToString() const\n     {\n         std::ostringstream ostr;\n         ostr << vinMasternode.ToString() << \":\"\n@@ -197,6 +207,7 @@ class CGovernanceVote\n };\n \n \n+\n /**\n * 12.1.1 - CGovernanceVoteManager\n * -------------------------------"
      },
      {
        "sha": "4fd2b733d21a943ebf7bf93d89626c06b62a3168",
        "filename": "src/governance-votedb.cpp",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-votedb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-votedb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-votedb.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"governance-votedb.h\"\n+\n+CGovernanceObjectVoteFile::CGovernanceObjectVoteFile()\n+    : nMemoryVotes(0),\n+      listVotes(),\n+      mapVoteIndex()\n+{}\n+\n+CGovernanceObjectVoteFile::CGovernanceObjectVoteFile(const CGovernanceObjectVoteFile& other)\n+    : nMemoryVotes(other.nMemoryVotes),\n+      listVotes(other.listVotes),\n+      mapVoteIndex()\n+{\n+    RebuildIndex();\n+}\n+\n+void CGovernanceObjectVoteFile::AddVote(const CGovernanceVote& vote)\n+{\n+    listVotes.push_front(vote);\n+    mapVoteIndex[vote.GetHash()] = listVotes.begin();\n+    ++nMemoryVotes;\n+}\n+\n+bool CGovernanceObjectVoteFile::HasVote(const uint256& nHash) const\n+{\n+    vote_m_cit it = mapVoteIndex.find(nHash);\n+    if(it == mapVoteIndex.end()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool CGovernanceObjectVoteFile::GetVote(const uint256& nHash, CGovernanceVote& vote) const\n+{\n+    vote_m_cit it = mapVoteIndex.find(nHash);\n+    if(it == mapVoteIndex.end()) {\n+        return false;\n+    }\n+    vote = *(it->second);\n+    return true;\n+}\n+\n+std::vector<CGovernanceVote> CGovernanceObjectVoteFile::GetVotes() const\n+{\n+    std::vector<CGovernanceVote> vecResult;\n+    for(vote_l_cit it = listVotes.begin(); it != listVotes.end(); ++it) {\n+        vecResult.push_back(*it);\n+    }\n+    return vecResult;\n+}\n+\n+void CGovernanceObjectVoteFile::RemoveVotesFromMasternode(const CTxIn& vinMasternode)\n+{\n+    vote_l_it it = listVotes.begin();\n+    while(it != listVotes.end()) {\n+        if(it->GetVinMasternode() == vinMasternode) {\n+            listVotes.erase(it++);\n+        }\n+        else {\n+            ++it;\n+        }\n+    }\n+}\n+\n+CGovernanceObjectVoteFile& CGovernanceObjectVoteFile::operator=(const CGovernanceObjectVoteFile& other)\n+{\n+    nMemoryVotes = other.nMemoryVotes;\n+    listVotes = other.listVotes;\n+    RebuildIndex();\n+    return *this;\n+}\n+\n+void CGovernanceObjectVoteFile::RebuildIndex()\n+{\n+    mapVoteIndex.clear();\n+    for(vote_l_it it = listVotes.begin(); it != listVotes.end(); ++it) {\n+        CGovernanceVote& vote = *it;\n+        mapVoteIndex[vote.GetHash()] = it;\n+    }\n+}"
      },
      {
        "sha": "dd8383968b37bdbeab54205ea037fec95fdb248a",
        "filename": "src/governance-votedb.h",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-votedb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance-votedb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-votedb.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef GOVERNANCE_VOTEDB_H\n+#define GOVERNANCE_VOTEDB_H\n+\n+#include <list>\n+#include <map>\n+\n+#include \"governance-vote.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+/**\n+ * Represents the collection of votes associated with a given CGovernanceObject\n+ * Recently received votes are held in memory until a maximum size is reached after\n+ * which older votes a flushed to a disk file.\n+ *\n+ * Note: This is a stub implementation that doesn't limit the number of votes held\n+ * in memory and doesn't flush to disk.\n+ */\n+class CGovernanceObjectVoteFile\n+{\n+public: // Types\n+    typedef std::list<CGovernanceVote> vote_l_t;\n+\n+    typedef vote_l_t::iterator vote_l_it;\n+\n+    typedef vote_l_t::const_iterator vote_l_cit;\n+\n+    typedef std::map<uint256,vote_l_it> vote_m_t;\n+\n+    typedef vote_m_t::iterator vote_m_it;\n+\n+    typedef vote_m_t::const_iterator vote_m_cit;\n+\n+private:\n+    static const int MAX_MEMORY_VOTES = -1;\n+\n+    int nMemoryVotes;\n+\n+    vote_l_t listVotes;\n+\n+    vote_m_t mapVoteIndex;\n+\n+public:\n+    CGovernanceObjectVoteFile();\n+\n+    CGovernanceObjectVoteFile(const CGovernanceObjectVoteFile& other);\n+\n+    /**\n+     * Add a vote to the file\n+     */\n+    void AddVote(const CGovernanceVote& vote);\n+\n+    /**\n+     * Return true if the vote with this hash is currently cached in memory\n+     */\n+    bool HasVote(const uint256& nHash) const;\n+\n+    /**\n+     * Retrieve a vote cached in memory\n+     */\n+    bool GetVote(const uint256& nHash, CGovernanceVote& vote) const;\n+\n+    int GetVoteCount() {\n+        return nMemoryVotes;\n+    }\n+\n+    std::vector<CGovernanceVote> GetVotes() const;\n+\n+    CGovernanceObjectVoteFile& operator=(const CGovernanceObjectVoteFile& other);\n+\n+    void RemoveVotesFromMasternode(const CTxIn& vinMasternode);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(nMemoryVotes);\n+        READWRITE(listVotes);\n+        if(ser_action.ForRead()) {\n+            RebuildIndex();\n+        }\n+    }\n+private:\n+    void RebuildIndex();\n+\n+};\n+\n+#endif"
      },
      {
        "sha": "62e67e53b532f520e80a9349752ef8d60808017a",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 522,
        "deletions": 314,
        "changes": 836,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -27,18 +27,19 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-1\";\n+\n CGovernanceManager::CGovernanceManager()\n-    : mapCollateral(),\n-      pCurrentBlockIndex(NULL),\n+    : pCurrentBlockIndex(NULL),\n       nTimeLastDiff(0),\n       nCachedBlockHeight(0),\n       mapObjects(),\n       mapSeenGovernanceObjects(),\n-      mapSeenVotes(),\n-      mapOrphanVotes(),\n-      mapVotesByHash(),\n-      mapVotesByType(),\n+      mapVoteToObject(MAX_CACHE_SIZE),\n+      mapInvalidVotes(MAX_CACHE_SIZE),\n+      mapOrphanVotes(MAX_CACHE_SIZE),\n       mapLastMasternodeTrigger(),\n+      setRequestedObjects(),\n       cs()\n {}\n \n@@ -48,12 +49,8 @@ bool CGovernanceManager::HaveObjectForHash(uint256 nHash) {\n     return (mapObjects.count(nHash) == 1);\n }\n \n-bool CGovernanceManager::HaveVoteForHash(uint256 nHash) {\n-    LOCK(cs);\n-    return (mapVotesByHash.count(nHash) == 1);\n-}\n-\n-bool CGovernanceManager::SerializeObjectForHash(uint256 nHash, CDataStream& ss) {\n+bool CGovernanceManager::SerializeObjectForHash(uint256 nHash, CDataStream& ss)\n+{\n     LOCK(cs);\n     object_m_it it = mapObjects.find(nHash);\n     if (it == mapObjects.end()) {\n@@ -63,26 +60,43 @@ bool CGovernanceManager::SerializeObjectForHash(uint256 nHash, CDataStream& ss)\n     return true;\n }\n \n-bool CGovernanceManager::SerializeVoteForHash(uint256 nHash, CDataStream& ss) {\n+bool CGovernanceManager::HaveVoteForHash(uint256 nHash)\n+{\n     LOCK(cs);\n-    vote_m_it it = mapVotesByHash.find(nHash);\n-    if (it == mapVotesByHash.end()) {\n+\n+    CGovernanceObject* pGovobj = NULL;\n+    if(!mapVoteToObject.Get(nHash,pGovobj)) {\n+        return false;\n+    }\n+\n+    if(!pGovobj->GetVoteFile().HasVote(nHash)) {\n         return false;\n     }\n-    ss << it->second;\n     return true;\n }\n \n-void CGovernanceManager::AddSeenGovernanceObject(uint256 nHash, int status)\n+bool CGovernanceManager::SerializeVoteForHash(uint256 nHash, CDataStream& ss)\n {\n     LOCK(cs);\n-    mapSeenGovernanceObjects[nHash] = status;\n+\n+    CGovernanceObject* pGovobj = NULL;\n+    if(!mapVoteToObject.Get(nHash,pGovobj)) {\n+        return false;\n+    }\n+\n+    CGovernanceVote vote;\n+    if(!pGovobj->GetVoteFile().GetVote(nHash, vote)) {\n+        return false;\n+    }\n+\n+    ss << vote;\n+    return true;\n }\n \n-void CGovernanceManager::AddSeenVote(uint256 nHash, int status)\n+void CGovernanceManager::AddSeenGovernanceObject(uint256 nHash, int status)\n {\n     LOCK(cs);\n-    mapSeenVotes[nHash] = status;\n+    mapSeenGovernanceObjects[nHash] = status;\n }\n \n void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv)\n@@ -93,7 +107,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n     if(pfrom->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) return;\n \n-    LOCK(governance.cs);\n+    LOCK(cs);\n \n     // ANOTHER USER IS ASKING US TO HELP THEM SYNC GOVERNANCE OBJECT DATA\n     if (strCommand == NetMsgType::MNGOVERNANCESYNC)\n@@ -126,7 +140,6 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n     else if (strCommand == NetMsgType::MNGOVERNANCEOBJECT)\n \n     {\n-        LOCK(cs);\n         // MAKE SURE WE HAVE A VALID REFERENCE TO THE TIP BEFORE CONTINUING\n \n         if(!pCurrentBlockIndex) {\n@@ -137,16 +150,28 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         CGovernanceObject govobj;\n         vRecv >> govobj;\n \n-        if(mapSeenGovernanceObjects.count(govobj.GetHash())){\n+        uint256 nHash = govobj.GetHash();\n+        std::string strHash = nHash.ToString();\n+\n+        LogPrint(\"gobject\", \"CGovernanceManager -- Received object: %s\\n\", strHash);\n+\n+        if(!AcceptObjectMessage(nHash)) {\n+            LogPrintf(\"CGovernanceManager -- Received unrequested object: %s\\n\", strHash);\n+            Misbehaving(pfrom->GetId(), 20);\n+            return;\n+        }\n+\n+        if(mapSeenGovernanceObjects.count(nHash)) {\n             // TODO - print error code? what if it's GOVOBJ_ERROR_IMMATURE?\n+            LogPrint(\"gobject\", \"CGovernanceManager -- Received already seen object: %s\\n\", strHash);\n             return;\n         }\n \n         std::string strError = \"\";\n         // CHECK OBJECT AGAINST LOCAL BLOCKCHAIN\n \n         if(!govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n-            mapSeenGovernanceObjects.insert(std::make_pair(govobj.GetHash(), SEEN_OBJECT_ERROR_INVALID));\n+            mapSeenGovernanceObjects.insert(std::make_pair(nHash, SEEN_OBJECT_ERROR_INVALID));\n             LogPrintf(\"MNGOVERNANCEOBJECT -- Governance object is invalid - %s\\n\", strError);\n             return;\n         }\n@@ -157,7 +182,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         if(AddGovernanceObject(govobj))\n         {\n-            LogPrintf(\"MNGOVERNANCEOBJECT -- %s new\\n\", govobj.GetHash().ToString());\n+            LogPrintf(\"MNGOVERNANCEOBJECT -- %s new\\n\", strHash);\n             govobj.Relay();\n         }\n \n@@ -168,7 +193,8 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         // WE MIGHT HAVE PENDING/ORPHAN VOTES FOR THIS OBJECT\n \n-        CheckOrphanVotes();\n+        CGovernanceException exception;\n+        CheckOrphanVotes(pfrom, govobj, exception);\n     }\n \n     // A NEW GOVERNANCE OBJECT VOTE HAS ARRIVED\n@@ -182,59 +208,51 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         CGovernanceVote vote;\n         vRecv >> vote;\n-        //vote.fValid = true;\n-\n-        // IF WE'VE SEEN THIS OBJECT THEN SKIP\n-\n-        if(mapSeenVotes.count(vote.GetHash())) return;\n-\n-        // FIND THE MASTERNODE OF THE VOTER\n-\n-        if(!mnodeman.Has(vote.GetVinMasternode())) {\n-            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- unknown masternode - vin: %s\\n\", vote.GetVinMasternode().ToString());\n-            mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n-            return;\n-        }\n \n-        // CHECK LOCAL VALIDITY AGAINST BLOCKCHAIN, TIME DATA, ETC\n+        LogPrint(\"gobject\", \"CGovernanceManager -- Received vote: %s\\n\", vote.ToString());\n \n-        if(!vote.IsValid(true)){\n-            LogPrintf(\"MNGOVERNANCEOBJECTVOTE -- signature invalid\\n\");\n-            if(masternodeSync.IsSynced()) Misbehaving(pfrom->GetId(), 20);\n-            // it could just be a non-synced masternode\n-            mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n-            mapSeenVotes.insert(std::make_pair(vote.GetHash(), SEEN_OBJECT_ERROR_INVALID));\n+        if(!AcceptVoteMessage(vote.GetHash())) {\n+            LogPrintf(\"CGovernanceManager -- Received unrequested vote object: %s, hash: %s, peer = %d\\n\",\n+                      vote.ToString(),\n+                      vote.GetHash().ToString(),\n+                      pfrom->GetId());\n+            //Misbehaving(pfrom->GetId(), 20);\n             return;\n-        } else {\n-            mapSeenVotes.insert(std::make_pair(vote.GetHash(), SEEN_OBJECT_IS_VALID));\n         }\n \n-        // IF EVERYTHING CHECKS OUT, UPDATE THE GOVERNANCE MANAGER\n-\n-        std::string strError = \"\";\n-        if(AddOrUpdateVote(vote, pfrom, strError)) {\n-            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- %s new\\n\", vote.GetHash().ToString());\n+        CGovernanceException exception;\n+        if(ProcessVote(pfrom, vote, exception)) {\n+            LogPrint(\"gobject\", \"CGovernanceManager -- Accepted vote\\n\");\n             vote.Relay();\n-            masternodeSync.AddedBudgetItem(vote.GetHash());\n-            mnodeman.AddGovernanceVote(vote.GetVinMasternode(), vote.GetParentHash());\n+        }\n+        else {\n+            LogPrint(\"gobject\", \"CGovernanceManager -- Rejected vote, error = %s\\n\", exception.what());\n+            if((exception.GetNodePenalty() != 0) && masternodeSync.IsSynced()) {\n+                Misbehaving(pfrom->GetId(), exception.GetNodePenalty());\n+            }\n+            return;\n         }\n \n     }\n-\n }\n \n-void CGovernanceManager::CheckOrphanVotes()\n+void CGovernanceManager::CheckOrphanVotes(CNode* pfrom, CGovernanceObject& govobj, CGovernanceException& exception)\n {\n-    LOCK(cs);\n-\n-    std::string strError = \"\";\n-    vote_m_it it1 = mapOrphanVotes.begin();\n-    while(it1 != mapOrphanVotes.end()){\n-        if(AddOrUpdateVote(((*it1).second), NULL, strError)){\n-            LogPrintf(\"CGovernanceManager::CheckOrphanVotes -- Governance object is known, activating and removing orphan vote\\n\");\n-            mapOrphanVotes.erase(it1++);\n-        } else {\n-            ++it1;\n+    uint256 nHash = govobj.GetHash();\n+    std::vector<CGovernanceVote> vecVotes;\n+    mapOrphanVotes.GetAll(nHash, vecVotes);\n+\n+    for(size_t i = 0; i < vecVotes.size(); ++i) {\n+        CGovernanceVote& vote = vecVotes[i];\n+        CGovernanceException exception;\n+        if(govobj.ProcessVote(pfrom, vote, exception)) {\n+            vecVotes[i].Relay();\n+            mapOrphanVotes.Erase(nHash, vote);\n+        }\n+        else {\n+            if((exception.GetNodePenalty() != 0) && masternodeSync.IsSynced()) {\n+                Misbehaving(pfrom->GetId(), exception.GetNodePenalty());\n+            }\n         }\n     }\n }\n@@ -270,6 +288,10 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n               << \", nObjectType = \" << govobj.nObjectType\n               << endl; );\n \n+    if(govobj.GetObjectType() == GOVERNANCE_OBJECT_TRIGGER) {\n+        mapLastMasternodeTrigger[govobj.GetMasternodeVin().prevout] = nCachedBlockHeight;\n+    }\n+\n     switch(govobj.nObjectType) {\n     case GOVERNANCE_OBJECT_TRIGGER:\n         mapLastMasternodeTrigger[govobj.vinMasternode.prevout] = nCachedBlockHeight;\n@@ -299,6 +321,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n         if(it == mapObjects.end()) {\n             continue;\n         }\n+        it->second.ClearMasternodeVotes();\n         it->second.fDirtyCache = true;\n     }\n \n@@ -312,8 +335,6 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n     object_m_it it = mapObjects.begin();\n \n-    count_m_t mapDirtyObjects;\n-\n     // Clean up any expired or invalid triggers\n     triggerman.CleanAndRemove();\n \n@@ -327,9 +348,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n         }\n \n         // IF CACHE IS NOT DIRTY, WHY DO THIS?\n-        if(pObj->fDirtyCache) {\n-            mapDirtyObjects.insert(std::make_pair((*it).first, 1));\n-\n+        if(pObj->IsSetDirtyCache()) {\n             // UPDATE LOCAL VALIDITY AGAINST CRYPTO DATA\n             pObj->UpdateLocalValidity(pCurrentBlockIndex);\n \n@@ -339,31 +358,29 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n         // IF DELETE=TRUE, THEN CLEAN THE MESS UP!\n \n-        if(pObj->fCachedDelete || pObj->fExpired) {\n+        if(pObj->IsSetCachedDelete() || pObj->IsSetExpired()) {\n             LogPrintf(\"CGovernanceManager::UpdateCachesAndClean -- erase obj %s\\n\", (*it).first.ToString());\n             mnodeman.RemoveGovernanceObject(pObj->GetHash());\n+\n+            // Remove vote references\n+            const object_ref_cache_t::list_t& listItems = mapVoteToObject.GetItemList();\n+            object_ref_cache_t::list_cit lit = listItems.begin();\n+            while(lit != listItems.end()) {\n+                if(lit->value == pObj) {\n+                    uint256 nKey = lit->key;\n+                    ++lit;\n+                    mapVoteToObject.Erase(nKey);\n+                }\n+                else {\n+                    ++lit;\n+                }\n+            }\n+\n             mapObjects.erase(it++);\n         } else {\n             ++it;\n         }\n     }\n-\n-    // CHECK EACH GOVERNANCE OBJECTS VALIDITY (CPU HEAVY)\n-\n-    // 12.1 todo - compile issues\n-\n-    // std::map<uint256, CBudgetVote>::iterator it = mapVotesByHash.begin();\n-    // while(it != mapVotes.end()) {\n-\n-    //     // ONLY UPDATE THE DIRTY OBJECTS!\n-\n-    //     if(mapDirtyObjects.count((*it).first))\n-    //     {\n-    //         (*it).second.fValid = (*it).second.IsValid(true);\n-    //         ++it;\n-    //     }\n-    // }\n-\n }\n \n CGovernanceObject *CGovernanceManager::FindGovernanceObject(const uint256& nHash)\n@@ -376,21 +393,18 @@ CGovernanceObject *CGovernanceManager::FindGovernanceObject(const uint256& nHash\n     return NULL;\n }\n \n-std::vector<CGovernanceVote*> CGovernanceManager::GetMatchingVotes(const uint256& nParentHash)\n+std::vector<CGovernanceVote> CGovernanceManager::GetMatchingVotes(const uint256& nParentHash)\n {\n-    std::vector<CGovernanceVote*> vecResult;\n-\n-    // LOOP THROUGH ALL VOTES AND FIND THOSE MATCHING USER HASH\n+    LOCK(cs);\n+    std::vector<CGovernanceVote> vecResult;\n \n-    vote_m_it it2 = mapVotesByType.begin();\n-    while(it2 != mapVotesByType.end()) {\n-        if((*it2).second.GetParentHash() == nParentHash) {\n-            vecResult.push_back(&(*it2).second);\n-        }\n-        ++it2;\n+    object_m_it it = mapObjects.find(nParentHash);\n+    if(it == mapObjects.end()) {\n+        return vecResult;\n     }\n+    CGovernanceObject& govobj = it->second;\n \n-    return vecResult;\n+    return govobj.GetVoteFile().GetVotes();\n }\n \n std::vector<CGovernanceObject*> CGovernanceManager::GetAllNewerThan(int64_t nMoreThanTime)\n@@ -404,7 +418,7 @@ std::vector<CGovernanceObject*> CGovernanceManager::GetAllNewerThan(int64_t nMor\n     {\n         // IF THIS OBJECT IS OLDER THAN TIME, CONTINUE\n \n-        if((*it).second.nTime < nMoreThanTime) {\n+        if((*it).second.GetCreationTime() < nMoreThanTime) {\n             ++it;\n             continue;\n         }\n@@ -429,7 +443,7 @@ struct sortProposalsByVotes {\n     bool operator()(const std::pair<CGovernanceObject*, int> &left, const std::pair<CGovernanceObject*, int> &right) {\n         if (left.second != right.second)\n             return (left.second > right.second);\n-        return (UintToArith256(left.first->nCollateralHash) > UintToArith256(right.first->nCollateralHash));\n+        return (UintToArith256(left.first->GetCollateralHash()) > UintToArith256(right.first->GetCollateralHash()));\n     }\n };\n \n@@ -444,8 +458,8 @@ void CGovernanceManager::NewBlock()\n     // CHECK OBJECTS WE'VE ASKED FOR, REMOVE OLD ENTRIES\n \n     std::map<uint256, int64_t>::iterator it = mapAskedForGovernanceObject.begin();\n-    while(it != mapAskedForGovernanceObject.end()){\n-        if((*it).second > GetTime() - (60*60*24)){\n+    while(it != mapAskedForGovernanceObject.end()) {\n+        if((*it).second > GetTime() - (60*60*24)) {\n             ++it;\n         } else {\n             mapAskedForGovernanceObject.erase(it++);\n@@ -457,6 +471,59 @@ void CGovernanceManager::NewBlock()\n     UpdateCachesAndClean();\n }\n \n+bool CGovernanceManager::ConfirmInventoryRequest(const CInv& inv)\n+{\n+    LOCK(cs);\n+\n+    LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest inv = %s\\n\", inv.ToString());\n+\n+    // First check if we've already recorded this object\n+    switch(inv.type) {\n+    case MSG_GOVERNANCE_OBJECT:\n+    {\n+        object_m_it it = mapObjects.find(inv.hash);\n+        if(it != mapObjects.end()) {\n+            LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest already have governance object, returning false\\n\");\n+            return false;\n+        }\n+    }\n+    break;\n+    case MSG_GOVERNANCE_OBJECT_VOTE:\n+    {\n+        if(mapVoteToObject.HasKey(inv.hash)) {\n+            LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest already have governance vote, returning false\\n\");\n+            return false;\n+        }\n+    }\n+    break;\n+    default:\n+        LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest unknown type, returning false\\n\");\n+        return false;\n+    }\n+\n+\n+    hash_s_t* setHash = NULL;\n+    switch(inv.type) {\n+    case MSG_GOVERNANCE_OBJECT:\n+        setHash = &setRequestedObjects;\n+        break;\n+    case MSG_GOVERNANCE_OBJECT_VOTE:\n+        setHash = &setRequestedVotes;\n+        break;\n+    default:\n+        return false;\n+    }\n+\n+    hash_s_cit it = setHash->find(inv.hash);\n+    if(it == setHash->end()) {\n+        setHash->insert(inv.hash);\n+        LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest added inv to requested set\\n\");\n+    }\n+\n+    LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest reached end, returning true\\n\");\n+    return true;\n+}\n+\n void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n {\n \n@@ -470,32 +537,27 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n     // SYNC GOVERNANCE OBJECTS WITH OTHER CLIENT\n \n     {\n-       LOCK(cs);\n-       object_m_it it1 = mapObjects.begin();\n-       while(it1 != mapObjects.end()) {\n-          uint256 h = (*it1).first;\n-\n-           if((*it1).second.fCachedValid && (nProp == uint256() || h == nProp)) {\n-              // Push the inventory budget proposal message over to the other client\n-              pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n-              nInvCount++;\n-           }\n-           ++it1;\n-       }\n-\n-       // SYNC OUR GOVERNANCE OBJECT VOTES WITH THEIR GOVERNANCE OBJECT VOTES\n-\n-       vote_m_it it2 = mapVotesByHash.begin();\n-       while(it2 != mapVotesByHash.end()) {\n-           CGovernanceVote& vote = it2->second;\n-           if(!vote.IsValid(true)) {\n-               // Don't relay votes that are now invalid (ie. missing MN) to avoid being banned\n-               continue;\n-           }\n-           pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, (*it2).first));\n-           nInvCount++;\n-           ++it2;\n-       }\n+        LOCK(cs);\n+        for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+            uint256 h = it->first;\n+\n+            CGovernanceObject& govobj = it->second;\n+\n+            if(govobj.IsSetCachedValid() && (nProp == uint256() || h == nProp)) {\n+                // Push the inventory budget proposal message over to the other client\n+                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n+                ++nInvCount;\n+\n+                std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n+                for(size_t i = 0; i < vecVotes.size(); ++i) {\n+                    if(!vecVotes[i].IsValid(true)) {\n+                        continue;\n+                    }\n+                    pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, vecVotes[i].GetHash()));\n+                    ++nInvCount;\n+                }\n+            }\n+        }\n     }\n \n     pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nInvCount);\n@@ -510,92 +572,6 @@ void CGovernanceManager::SyncParentObjectByVote(CNode* pfrom, const CGovernanceV\n     }\n }\n \n-bool CGovernanceManager::AddOrUpdateVote(const CGovernanceVote& vote, CNode* pfrom, std::string& strError)\n-{\n-    // MAKE SURE WE HAVE THE PARENT OBJECT THE VOTE IS FOR\n-\n-    bool syncparent = false;\n-    uint256 votehash;\n-    {\n-        LOCK(cs);\n-        if(!mapObjects.count(vote.GetParentHash()))  {\n-            if(pfrom)  {\n-                // only ask for missing items after our syncing process is complete --\n-                //   otherwise we'll think a full sync succeeded when they return a result\n-                if(!masternodeSync.IsSynced()) return false;\n-\n-                // ADD THE VOTE AS AN ORPHAN, TO BE USED UPON RECEIVAL OF THE PARENT OBJECT\n-\n-                LogPrintf(\"CGovernanceManager::AddOrUpdateVote -- Unknown object %s, asking for source\\n\", vote.GetParentHash().ToString());\n-                mapOrphanVotes[vote.GetParentHash()] = vote;\n-\n-                // ASK FOR THIS VOTES PARENT SPECIFICALLY FROM THIS USER (THEY SHOULD HAVE IT, NO?)\n-\n-                if(!mapAskedForGovernanceObject.count(vote.GetParentHash())){\n-                    syncparent = true;\n-                    votehash = vote.GetParentHash();\n-                    mapAskedForGovernanceObject[vote.GetParentHash()] = GetTime();\n-                } else {\n-                    strError = \"Governance object not found! Sync message has been already pushed.\";\n-                    return false;\n-                }\n-            }\n-        }\n-    }\n-\n-    // Need to keep this out of the locked section\n-    if(syncparent) {\n-        pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, votehash);\n-        strError = \"Governance object not found! Sync message was pushed.\";\n-        return false;\n-    }\n-\n-    // Reestablish lock\n-    LOCK(cs);\n-    // GET DETERMINISTIC HASH WHICH COLLIDES ON MASTERNODE-VIN/GOVOBJ-HASH/VOTE-SIGNAL\n-\n-    uint256 nTypeHash = vote.GetTypeHash();\n-    uint256 nHash = vote.GetHash();\n-\n-    // LOOK FOR PREVIOUS VOTES BY THIS SPECIFIC MASTERNODE FOR THIS SPECIFIC SIGNAL\n-\n-    vote_m_it it = mapVotesByType.find(nTypeHash);\n-    if(it != mapVotesByType.end()) {\n-        if(it->second.GetTimestamp() > vote.GetTimestamp()) {\n-            strError = strprintf(\"new vote older than existing vote - %s\", nTypeHash.ToString());\n-            LogPrint(\"gobject\", \"CGovernanceObject::AddOrUpdateVote -- %s\\n\", strError);\n-            return false;\n-        }\n-        if(vote.GetTimestamp() - it->second.GetTimestamp() < GOVERNANCE_UPDATE_MIN) {\n-            strError = strprintf(\"time between votes is too soon - %s - %lli\", nTypeHash.ToString(), vote.GetTimestamp() - it->second.GetTimestamp());\n-            LogPrint(\"gobject\", \"CGovernanceObject::AddOrUpdateVote -- %s\\n\", strError);\n-            return false;\n-        }\n-    }\n-\n-    // UPDATE TO NEWEST VOTE\n-    {\n-        mapVotesByHash[nHash] = vote;\n-        mapVotesByType[nTypeHash] = vote;\n-    }\n-\n-    // SET CACHE AS DIRTY / WILL BE UPDATED NEXT BLOCK\n-\n-    CGovernanceObject* pGovObj = FindGovernanceObject(vote.GetParentHash());\n-    if(pGovObj)\n-    {\n-        pGovObj->fDirtyCache = true;\n-        UpdateCachesAndClean();\n-        if(pGovObj->GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n-            mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());\n-        }\n-    } else {\n-        LogPrintf(\"CGovernanceObject::AddOrUpdateVote -- Governance object not found! Can't update fDirtyCache - %s\\n\", vote.GetParentHash().ToString());\n-    }\n-\n-    return true;\n-}\n-\n bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n {\n     LOCK(cs);\n@@ -626,6 +602,118 @@ bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n     return false;\n }\n \n+bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote, CGovernanceException& exception)\n+{\n+    LOCK(cs);\n+    uint256 nHashVote = vote.GetHash();\n+    if(mapInvalidVotes.HasKey(nHashVote)) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceManager::ProcessVote -- Old invalid vote \"\n+                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n+        LogPrintf(ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n+        return false;\n+    }\n+\n+    uint256 nHashGovobj = vote.GetParentHash();\n+    object_m_it it = mapObjects.find(nHashGovobj);\n+    if(it == mapObjects.end()) {\n+        mapOrphanVotes.Insert(nHashGovobj, vote);\n+        RequestGovernanceObject(pfrom, nHashGovobj);\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \"\n+                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n+        LogPrintf(ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        return false;\n+    }\n+\n+    CGovernanceObject& govobj = it->second;\n+    bool fOk = govobj.ProcessVote(pfrom, vote, exception);\n+    if(fOk) {\n+        mapVoteToObject.Insert(vote.GetHash(), &govobj);\n+\n+        if(govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n+            mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());\n+        }\n+    }\n+    return fOk;\n+}\n+\n+void CGovernanceManager::CheckMasternodeOrphanVotes()\n+{\n+    LOCK(cs);\n+    for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+        it->second.CheckOrphanVotes();\n+    }\n+}\n+\n+void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nHash)\n+{\n+    if(!pfrom) {\n+        return;\n+    }\n+\n+    pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, nHash);\n+}\n+\n+bool CGovernanceManager::AcceptObjectMessage(const uint256& nHash)\n+{\n+    LOCK(cs);\n+    return AcceptMessage(nHash, setRequestedObjects);\n+}\n+\n+bool CGovernanceManager::AcceptVoteMessage(const uint256& nHash)\n+{\n+    LOCK(cs);\n+    return AcceptMessage(nHash, setRequestedVotes);\n+}\n+\n+bool CGovernanceManager::AcceptMessage(const uint256& nHash, hash_s_t& setHash)\n+{\n+    hash_s_it it = setHash.find(nHash);\n+    if(it == setHash.end()) {\n+        // We never requested this\n+        return false;\n+    }\n+    // Only accept one response\n+    setHash.erase(it);\n+    return true;\n+}\n+\n+void CGovernanceManager::RebuildIndexes()\n+{\n+    mapVoteToObject.Clear();\n+    for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+        CGovernanceObject& govobj = it->second;\n+        std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n+        for(size_t i = 0; i < vecVotes.size(); ++i) {\n+            mapVoteToObject.Insert(vecVotes[i].GetHash(), &govobj);\n+        }\n+    }\n+}\n+\n+int CGovernanceManager::GetMasternodeIndex(const CTxIn& masternodeVin)\n+{\n+    LOCK(cs);\n+    bool fIndexRebuilt = false;\n+    int nMNIndex = mnodeman.GetMasternodeIndex(masternodeVin, fIndexRebuilt);\n+    while(fIndexRebuilt) {\n+        RebuildVoteMaps();\n+        nMNIndex = mnodeman.GetMasternodeIndex(masternodeVin, fIndexRebuilt);\n+    }\n+    return nMNIndex;\n+}\n+\n+void CGovernanceManager::RebuildVoteMaps()\n+{\n+    for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+        it->second.RebuildVoteMap();\n+    }\n+}\n+\n void CGovernanceManager::AddCachedTriggers()\n {\n     LOCK(cs);\n@@ -642,74 +730,195 @@ void CGovernanceManager::AddCachedTriggers()\n }\n \n CGovernanceObject::CGovernanceObject()\n-    : cs(),\n-      nHashParent(),\n-      nRevision(0),\n-      nTime(0),\n-      nCollateralHash(),\n-      strData(),\n-      nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n-      vinMasternode(),\n-      vchSig(),\n-      fCachedLocalValidity(false),\n-      strLocalValidityError(),\n-      fCachedFunding(false),\n-      fCachedValid(true),\n-      fCachedDelete(false),\n-      fCachedEndorsed(false),\n-      fDirtyCache(true),\n-      fUnparsable(false),\n-      fExpired(false)\n+: cs(),\n+  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+  nHashParent(),\n+  nRevision(0),\n+  nTime(0),\n+  nCollateralHash(),\n+  strData(),\n+  vinMasternode(),\n+  vchSig(),\n+  fCachedLocalValidity(false),\n+  strLocalValidityError(),\n+  fCachedFunding(false),\n+  fCachedValid(true),\n+  fCachedDelete(false),\n+  fCachedEndorsed(false),\n+  fDirtyCache(true),\n+  fExpired(false),\n+  fUnparsable(false),\n+  mapCurrentMNVotes(),\n+  mapOrphanVotes(),\n+  fileVotes()\n {\n     // PARSE JSON DATA STORAGE (STRDATA)\n     LoadData();\n }\n \n CGovernanceObject::CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTimeIn, uint256 nCollateralHashIn, std::string strDataIn)\n-    : cs(),\n-      nHashParent(nHashParentIn),\n-      nRevision(nRevisionIn),\n-      nTime(nTimeIn),\n-      nCollateralHash(nCollateralHashIn),\n-      strData(strDataIn),\n-      nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n-      vinMasternode(),\n-      vchSig(),\n-      fCachedLocalValidity(false),\n-      strLocalValidityError(),\n-      fCachedFunding(false),\n-      fCachedValid(true),\n-      fCachedDelete(false),\n-      fCachedEndorsed(false),\n-      fDirtyCache(true),\n-      fUnparsable(false),\n-      fExpired(false)\n+: cs(),\n+  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+  nHashParent(nHashParentIn),\n+  nRevision(nRevisionIn),\n+  nTime(nTimeIn),\n+  nCollateralHash(nCollateralHashIn),\n+  strData(strDataIn),\n+  vinMasternode(),\n+  vchSig(),\n+  fCachedLocalValidity(false),\n+  strLocalValidityError(),\n+  fCachedFunding(false),\n+  fCachedValid(true),\n+  fCachedDelete(false),\n+  fCachedEndorsed(false),\n+  fDirtyCache(true),\n+  fExpired(false),\n+  fUnparsable(false),\n+  mapCurrentMNVotes(),\n+  mapOrphanVotes(),\n+  fileVotes()\n {\n     // PARSE JSON DATA STORAGE (STRDATA)\n     LoadData();\n }\n \n CGovernanceObject::CGovernanceObject(const CGovernanceObject& other)\n-    : cs(),\n-      nHashParent(other.nHashParent),\n-      nRevision(other.nRevision),\n-      nTime(other.nTime),\n-      nCollateralHash(other.nCollateralHash),\n-      strData(other.strData),\n-      nObjectType(other.nObjectType),\n-      vinMasternode(other.vinMasternode),\n-      vchSig(other.vchSig),\n-      fCachedLocalValidity(other.fCachedLocalValidity),\n-      strLocalValidityError(other.strLocalValidityError),\n-      fCachedFunding(other.fCachedFunding),\n-      fCachedValid(other.fCachedValid),\n-      fCachedDelete(other.fCachedDelete),\n-      fCachedEndorsed(other.fCachedEndorsed),\n-      fDirtyCache(other.fDirtyCache),\n-      fUnparsable(other.fUnparsable),\n-      fExpired(other.fExpired)\n+: cs(),\n+  nObjectType(other.nObjectType),\n+  nHashParent(other.nHashParent),\n+  nRevision(other.nRevision),\n+  nTime(other.nTime),\n+  nCollateralHash(other.nCollateralHash),\n+  strData(other.strData),\n+  vinMasternode(other.vinMasternode),\n+  vchSig(other.vchSig),\n+  fCachedLocalValidity(other.fCachedLocalValidity),\n+  strLocalValidityError(other.strLocalValidityError),\n+  fCachedFunding(other.fCachedFunding),\n+  fCachedValid(other.fCachedValid),\n+  fCachedDelete(other.fCachedDelete),\n+  fCachedEndorsed(other.fCachedEndorsed),\n+  fDirtyCache(other.fDirtyCache),\n+  fExpired(other.fExpired),\n+  fUnparsable(other.fUnparsable),\n+  mapCurrentMNVotes(other.mapCurrentMNVotes),\n+  mapOrphanVotes(other.mapOrphanVotes),\n+  fileVotes(other.fileVotes)\n {}\n \n+bool CGovernanceObject::ProcessVote(CNode* pfrom,\n+                                    const CGovernanceVote& vote,\n+                                    CGovernanceException& exception)\n+{\n+    int nMNIndex = governance.GetMasternodeIndex(vote.GetVinMasternode());\n+    if(nMNIndex < 0) {\n+        mapOrphanVotes.Insert(vote.GetVinMasternode(), vote);\n+        if(pfrom) {\n+            mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n+        }\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::UpdateVote -- Masternode index not found\\n\";\n+        LogPrintf(ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        return false;\n+    }\n+\n+    vote_m_it it = mapCurrentMNVotes.find(nMNIndex);\n+    if(it == mapCurrentMNVotes.end()) {\n+        it = mapCurrentMNVotes.insert(vote_m_t::value_type(nMNIndex,vote_rec_t())).first;\n+    }\n+    vote_rec_t& recVote = it->second;\n+    vote_signal_enum_t eSignal = vote.GetSignal();\n+    if(eSignal == VOTE_SIGNAL_NONE) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::UpdateVote -- Vote signal: none\" << \"\\n\";\n+        LogPrint(\"gobject\", ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        return false;\n+    }\n+    if(eSignal > MAX_SUPPORTED_VOTE_SIGNAL) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::UpdateVote -- Unsupported vote signal:\" << CGovernanceVoting::ConvertSignalToString(vote.GetSignal()) << \"\\n\";\n+        LogPrintf(ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n+        return false;\n+    }\n+    vote_instance_m_it it2 = recVote.mapInstances.find(int(eSignal));\n+    if(it2 == recVote.mapInstances.end()) {\n+        it2 = recVote.mapInstances.insert(vote_instance_m_t::value_type(int(eSignal), vote_instance_t())).first;\n+    }\n+    vote_instance_t& voteInstance = it2->second;\n+    int64_t nNow = GetTime();\n+    int64_t nTimeDelta = nNow - voteInstance.nTime;\n+    if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::UpdateVote -- Masternode voting too often \"\n+                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                << \", governance object hash = \" << GetHash().ToString()\n+                << \", time delta = \" << nTimeDelta << \"\\n\";\n+        LogPrint(\"gobject\", ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_TEMPORARY_ERROR);\n+        return false;\n+    }\n+    // Finally check that the vote is actually valid (done last because of cost of signature verification)\n+    if(!vote.IsValid(true)) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::UpdateVote -- Invalid vote \"\n+                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                << \", governance object hash = \" << GetHash().ToString()\n+                << \", vote hash = \" << vote.GetHash().ToString() << \"\\n\";\n+        LogPrintf(ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n+        governance.AddInvalidVote(vote);\n+        return false;\n+    }\n+    voteInstance = vote_instance_t(vote.GetOutcome(), nNow);\n+    fileVotes.AddVote(vote);\n+    fDirtyCache = true;\n+    return true;\n+}\n+\n+void CGovernanceObject::RebuildVoteMap()\n+{\n+    vote_m_t mapMNVotesNew;\n+    for(vote_m_it it = mapCurrentMNVotes.begin(); it != mapCurrentMNVotes.end(); ++it) {\n+        CTxIn vinMasternode;\n+        if(mnodeman.GetMasternodeVinForIndexOld(it->first, vinMasternode)) {\n+            int nNewIndex = mnodeman.GetMasternodeIndex(vinMasternode);\n+            if((nNewIndex >= 0)) {\n+                mapMNVotesNew[nNewIndex] = it->second;\n+            }\n+        }\n+    }\n+    mapCurrentMNVotes = mapMNVotesNew;\n+}\n+\n+void CGovernanceObject::ClearMasternodeVotes()\n+{\n+    vote_m_it it = mapCurrentMNVotes.begin();\n+    while(it != mapCurrentMNVotes.end()) {\n+        bool fIndexRebuilt = false;\n+        CTxIn vinMasternode;\n+        bool fRemove = true;\n+        if(mnodeman.Get(it->first, vinMasternode, fIndexRebuilt)) {\n+            if(mnodeman.Has(vinMasternode)) {\n+                fRemove = false;\n+            }\n+            else {\n+                fileVotes.RemoveVotesFromMasternode(vinMasternode);\n+            }\n+        }\n+\n+        if(fRemove) {\n+            mapCurrentMNVotes.erase(it++);\n+        }\n+        else {\n+            ++it;\n+        }\n+    }\n+}\n+\n void CGovernanceObject::SetMasternodeInfo(const CTxIn& vin)\n {\n     vinMasternode = vin;\n@@ -755,11 +964,6 @@ bool CGovernanceObject::CheckSignature(CPubKey& pubKeyMasternode)\n     return true;\n }\n \n-int CGovernanceObject::GetObjectType()\n-{\n-    return nObjectType;\n-}\n-\n int CGovernanceObject::GetObjectSubtype()\n {\n     // todo - 12.1\n@@ -1076,33 +1280,50 @@ bool CGovernanceObject::IsCollateralValid(std::string& strError)\n     return true;\n }\n \n+int CGovernanceObject::CountMatchingVotes(vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn) const\n+{\n+    int nCount = 0;\n+    for(vote_m_cit it = mapCurrentMNVotes.begin(); it != mapCurrentMNVotes.end(); ++it) {\n+        const vote_rec_t& recVote = it->second;\n+        vote_instance_m_cit it2 = recVote.mapInstances.find(eVoteSignalIn);\n+        if(it2 == recVote.mapInstances.end()) {\n+            continue;\n+        }\n+        const vote_instance_t& voteInstance = it2->second;\n+        if(voteInstance.eOutcome == eVoteOutcomeIn) {\n+            ++nCount;\n+        }\n+    }\n+    return nCount;\n+}\n+\n /**\n *   Get specific vote counts for each outcome (funding, validity, etc)\n */\n \n-int CGovernanceObject::GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn)\n+int CGovernanceObject::GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn) const\n {\n     return GetYesCount(eVoteSignalIn) - GetNoCount(eVoteSignalIn);\n }\n \n-int CGovernanceObject::GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn)\n+int CGovernanceObject::GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn) const\n {\n     return GetNoCount(eVoteSignalIn) - GetYesCount(eVoteSignalIn);\n }\n \n-int CGovernanceObject::GetYesCount(vote_signal_enum_t eVoteSignalIn)\n+int CGovernanceObject::GetYesCount(vote_signal_enum_t eVoteSignalIn) const\n {\n-    return governance.CountMatchingVotes((*this), eVoteSignalIn, VOTE_OUTCOME_YES);\n+    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_YES);\n }\n \n-int CGovernanceObject::GetNoCount(vote_signal_enum_t eVoteSignalIn)\n+int CGovernanceObject::GetNoCount(vote_signal_enum_t eVoteSignalIn) const\n {\n-    return governance.CountMatchingVotes((*this), eVoteSignalIn, VOTE_OUTCOME_NO);\n+    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_NO);\n }\n \n-int CGovernanceObject::GetAbstainCount(vote_signal_enum_t eVoteSignalIn)\n+int CGovernanceObject::GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const\n {\n-    return governance.CountMatchingVotes((*this), eVoteSignalIn, VOTE_OUTCOME_ABSTAIN);\n+    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_ABSTAIN);\n }\n \n void CGovernanceObject::Relay()\n@@ -1116,10 +1337,8 @@ std::string CGovernanceManager::ToString() const\n     std::ostringstream info;\n \n     info << \"Governance Objects: \" << (int)mapObjects.size() <<\n-            \", Seen Budgets: \" << (int)mapSeenGovernanceObjects.size() <<\n-            \", Seen Budget Votes: \" << (int)mapSeenVotes.size() <<\n-            \", VoteByHash Count: \" << (int)mapVotesByHash.size() <<\n-            \", VoteByType Count: \" << (int)mapVotesByType.size();\n+            \", Seen Budgets : \" << (int)mapSeenGovernanceObjects.size() <<\n+            \", Vote Count   : \" << (int)mapVoteToObject.GetSize();\n \n     return info.str();\n }\n@@ -1146,32 +1365,6 @@ void CGovernanceManager::UpdatedBlockTip(const CBlockIndex *pindex)\n         NewBlock();\n }\n \n-int CGovernanceManager::CountMatchingVotes(CGovernanceObject& govobj, vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn)\n-{\n-    /*\n-    *\n-    *   Count matching votes and return\n-    *\n-    */\n-\n-    LOCK(cs);\n-    int nCount = 0;\n-\n-    uint256 hash = govobj.GetHash();\n-    std::map<uint256, CGovernanceVote>::iterator it = mapVotesByType.begin();\n-    while(it != mapVotesByType.end())  {\n-        if(it->second.IsValid() &&\n-           it->second.GetSignal() == eVoteSignalIn &&\n-           it->second.GetOutcome() == eVoteOutcomeIn &&\n-           it->second.GetParentHash() == hash) {\n-            ++nCount;\n-        }\n-        ++it;\n-    }\n-\n-    return nCount;\n-}\n-\n void CGovernanceObject::UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex)\n {\n     // CALCULATE MINIMUM SUPPORT LEVELS REQUIRED\n@@ -1233,3 +1426,18 @@ void CGovernanceObject::swap(CGovernanceObject& first, CGovernanceObject& second\n     swap(first.fDirtyCache, second.fDirtyCache);\n     swap(first.fExpired, second.fExpired);\n }\n+\n+void CGovernanceObject::CheckOrphanVotes()\n+{\n+    const vote_mcache_t::list_t& listVotes = mapOrphanVotes.GetItemList();\n+    for(vote_mcache_t::list_cit it = listVotes.begin(); it != listVotes.end(); ++it) {\n+        const CGovernanceVote& vote = it->value;\n+        if(!mnodeman.Has(vote.GetVinMasternode())) {\n+            continue;\n+        }\n+        CGovernanceException exception;\n+        if(!ProcessVote(NULL, vote, exception)) {\n+            LogPrintf(\"CGovernanceObject::CheckOrphanVotes -- Failed to add orphan vote: %s\\n\", exception.what());\n+        }\n+    }\n+}"
      },
      {
        "sha": "8b655c969303633a24da16282b2c3f6afd7461e3",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 288,
        "deletions": 54,
        "changes": 342,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef GOVERANCE_H\n-#define GOVERANCE_H\n+#ifndef GOVERNANCE_H\n+#define GOVERNANCE_H\n \n //#define ENABLE_DASH_DEBUG\n \n@@ -15,17 +15,22 @@\n #include \"util.h\"\n #include \"base58.h\"\n #include \"masternode.h\"\n+#include \"governance-exceptions.h\"\n #include \"governance-vote.h\"\n+#include \"governance-votedb.h\"\n #include \"masternodeman.h\"\n #include <boost/lexical_cast.hpp>\n #include \"init.h\"\n #include <univalue.h>\n #include \"utilstrencodings.h\"\n+#include \"cachemap.h\"\n+#include \"cachemultimap.h\"\n \n #include <stdio.h>\n #include <string.h>\n \n class CGovernanceManager;\n+class CGovernanceTriggerManager;\n class CGovernanceObject;\n class CGovernanceVote;\n \n@@ -57,6 +62,8 @@ extern CGovernanceManager governance;\n //\n class CGovernanceManager\n {\n+    friend class CGovernanceObject;\n+\n public: // Types\n \n     typedef std::map<uint256, CGovernanceObject> object_m_t;\n@@ -65,6 +72,8 @@ class CGovernanceManager\n \n     typedef object_m_t::const_iterator object_m_cit;\n \n+    typedef CacheMap<uint256, CGovernanceObject*> object_ref_cache_t;\n+\n     typedef std::map<uint256, int> count_m_t;\n \n     typedef count_m_t::iterator count_m_it;\n@@ -77,11 +86,9 @@ class CGovernanceManager\n \n     typedef vote_m_t::const_iterator vote_m_cit;\n \n-    typedef std::map<uint256, CTransaction> transaction_m_t;\n-\n-    typedef transaction_m_t::iterator transaction_m_it;\n+    typedef CacheMap<uint256, CGovernanceVote> vote_cache_t;\n \n-    typedef transaction_m_t::const_iterator transaction_m_cit;\n+    typedef CacheMultiMap<uint256, CGovernanceVote> vote_mcache_t;\n \n     typedef object_m_t::size_type size_type;\n \n@@ -91,10 +98,17 @@ class CGovernanceManager\n \n     typedef txout_m_t::const_iterator txout_m_cit;\n \n+    typedef std::set<uint256> hash_s_t;\n+\n+    typedef hash_s_t::iterator hash_s_it;\n+\n+    typedef hash_s_t::const_iterator hash_s_cit;\n+\n private:\n+    static const int MAX_CACHE_SIZE = 1000000;\n+\n+    static const std::string SERIALIZATION_VERSION_STRING;\n \n-    //hold txes until they mature enough to use\n-    transaction_m_t mapCollateral;\n     // Keep track of current block index\n     const CBlockIndex *pCurrentBlockIndex;\n \n@@ -105,57 +119,68 @@ class CGovernanceManager\n     object_m_t mapObjects;\n \n     count_m_t mapSeenGovernanceObjects;\n-    count_m_t mapSeenVotes;\n-    vote_m_t mapOrphanVotes;\n \n-    // todo: one of these should point to the other\n-    //   -- must be carefully managed while adding/removing/updating\n-    vote_m_t mapVotesByHash;\n-    vote_m_t mapVotesByType;\n+    object_ref_cache_t mapVoteToObject;\n+\n+    vote_cache_t mapInvalidVotes;\n+\n+    vote_mcache_t mapOrphanVotes;\n \n     txout_m_t mapLastMasternodeTrigger;\n \n+    hash_s_t setRequestedObjects;\n+\n+    hash_s_t setRequestedVotes;\n+\n public:\n     // critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n \n     CGovernanceManager();\n \n+    virtual ~CGovernanceManager() {}\n+\n     void ClearSeen()\n     {\n         LOCK(cs);\n         mapSeenGovernanceObjects.clear();\n-        mapSeenVotes.clear();\n     }\n \n     int CountProposalInventoryItems()\n     {\n-        return mapSeenGovernanceObjects.size() + mapSeenVotes.size();\n+        // TODO What is this for ?\n+        return mapSeenGovernanceObjects.size();\n+        //return mapSeenGovernanceObjects.size() + mapSeenVotes.size();\n     }\n \n+    /**\n+     * This is called by AlreadyHave in main.cpp as part of the inventory\n+     * retrieval process.  Returns true if we want to retrieve the object, otherwise\n+     * false. (Note logic is inverted in AlreadyHave).\n+     */\n+    bool ConfirmInventoryRequest(const CInv& inv);\n+\n     void Sync(CNode* node, uint256 nProp);\n+\n     void SyncParentObjectByVote(CNode* pfrom, const CGovernanceVote& vote);\n \n     void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n+\n     void NewBlock();\n \n     CGovernanceObject *FindGovernanceObject(const uint256& nHash);\n \n-    std::vector<CGovernanceVote*> GetMatchingVotes(const uint256& nParentHash);\n+    std::vector<CGovernanceVote> GetMatchingVotes(const uint256& nParentHash);\n     std::vector<CGovernanceObject*> GetAllNewerThan(int64_t nMoreThanTime);\n \n-    int CountMatchingVotes(CGovernanceObject& govobj, vote_signal_enum_t nVoteSignalIn, vote_outcome_enum_t nVoteOutcomeIn);\n-\n     bool IsBudgetPaymentBlock(int nBlockHeight);\n     bool AddGovernanceObject (CGovernanceObject& govobj);\n-    bool AddOrUpdateVote(const CGovernanceVote& vote, CNode* pfrom, std::string& strError);\n \n     std::string GetRequiredPaymentsString(int nBlockHeight);\n-    void CleanAndRemove(bool fSignatureCheck);\n+\n     void UpdateCachesAndClean();\n-    void CheckAndRemove() {UpdateCachesAndClean();}\n \n-    void CheckOrphanVotes();\n+    void CheckAndRemove() {UpdateCachesAndClean();}\n \n     void Clear()\n     {\n@@ -164,10 +189,9 @@ class CGovernanceManager\n         LogPrint(\"gobject\", \"Governance object manager was cleared\\n\");\n         mapObjects.clear();\n         mapSeenGovernanceObjects.clear();\n-        mapSeenVotes.clear();\n-        mapOrphanVotes.clear();\n-        mapVotesByType.clear();\n-        mapVotesByHash.clear();\n+        mapVoteToObject.Clear();\n+        mapInvalidVotes.Clear();\n+        mapOrphanVotes.Clear();\n         mapLastMasternodeTrigger.clear();\n     }\n \n@@ -178,14 +202,25 @@ class CGovernanceManager\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         LOCK(cs);\n+        std::string strVersion;\n+        if(ser_action.ForRead()) {\n+            READWRITE(strVersion);\n+        }\n+        else {\n+            strVersion = SERIALIZATION_VERSION_STRING;\n+            READWRITE(strVersion);\n+        }\n         READWRITE(mapSeenGovernanceObjects);\n-        READWRITE(mapSeenVotes);\n+        READWRITE(mapInvalidVotes);\n         READWRITE(mapOrphanVotes);\n         READWRITE(mapObjects);\n-        READWRITE(mapVotesByHash);\n-        READWRITE(mapVotesByType);\n         READWRITE(mapLastMasternodeTrigger);\n+        if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n+            Clear();\n+            return;\n+        }\n         if(ser_action.ForRead()) {\n+            RebuildIndexes();\n             AddCachedTriggers();\n         }\n     }\n@@ -211,53 +246,231 @@ class CGovernanceManager\n \n     bool MasternodeRateCheck(const CTxIn& vin, int nObjectType);\n \n+    bool ProcessVote(const CGovernanceVote& vote, CGovernanceException& exception) {\n+        return ProcessVote(NULL, vote, exception);\n+    }\n+\n+    void CheckMasternodeOrphanVotes();\n+\n private:\n+    void RequestGovernanceObject(CNode* pfrom, const uint256& nHash);\n+\n+    void AddInvalidVote(const CGovernanceVote& vote)\n+    {\n+        mapInvalidVotes.Insert(vote.GetHash(), vote);\n+    }\n+\n+    void AddOrphanVote(const CGovernanceVote& vote)\n+    {\n+        mapOrphanVotes.Insert(vote.GetHash(), vote);\n+    }\n+\n+    bool ProcessVote(CNode* pfrom, const CGovernanceVote& vote, CGovernanceException& exception);\n+\n+    /// Called to indicate a requested object has been received\n+    bool AcceptObjectMessage(const uint256& nHash);\n+\n+    /// Called to indicate a requested vote has been received\n+    bool AcceptVoteMessage(const uint256& nHash);\n+\n+    static bool AcceptMessage(const uint256& nHash, hash_s_t& setHash);\n+\n+    void CheckOrphanVotes(CNode* pfrom, CGovernanceObject& govobj, CGovernanceException& exception);\n+\n+    void RebuildIndexes();\n+\n+    /// Returns MN index, handling the case of index rebuilds\n+    int GetMasternodeIndex(const CTxIn& masternodeVin);\n+\n+    void RebuildVoteMaps();\n+\n     void AddCachedTriggers();\n \n };\n \n+struct vote_instance_t {\n+\n+    vote_outcome_enum_t eOutcome;\n+    int64_t nTime;\n+\n+    vote_instance_t(vote_outcome_enum_t eOutcomeIn = VOTE_OUTCOME_NONE, int64_t nTimeIn = 0)\n+        : eOutcome(eOutcomeIn),\n+          nTime(nTimeIn)\n+    {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        int nOutcome = int(eOutcome);\n+        READWRITE(nOutcome);\n+        READWRITE(nTime);\n+        if(ser_action.ForRead()) {\n+            eOutcome = vote_outcome_enum_t(nOutcome);\n+        }\n+    }\n+};\n+\n+typedef std::map<int,vote_instance_t> vote_instance_m_t;\n+\n+typedef vote_instance_m_t::iterator vote_instance_m_it;\n+\n+typedef vote_instance_m_t::const_iterator vote_instance_m_cit;\n+\n+struct vote_rec_t {\n+    vote_instance_m_t mapInstances;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+     template <typename Stream, typename Operation>\n+     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+     {\n+         READWRITE(mapInstances);\n+     }\n+};\n+\n /**\n * Governance Object\n *\n */\n \n class CGovernanceObject\n {\n+    friend class CGovernanceManager;\n+\n+    friend class CGovernanceTriggerManager;\n+\n+public: // Types\n+    typedef std::map<int, vote_rec_t> vote_m_t;\n+\n+    typedef vote_m_t::iterator vote_m_it;\n+\n+    typedef vote_m_t::const_iterator vote_m_cit;\n+\n+    typedef CacheMultiMap<CTxIn, CGovernanceVote> vote_mcache_t;\n+\n private:\n-    // critical section to protect the inner data structures\n+    /// critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n \n-public:\n-\n-    uint256 nHashParent; //parent object, 0 is root\n-    int nRevision; //object revision in the system\n-    int64_t nTime; //time this object was created\n-    uint256 nCollateralHash; //fee-tx\n-    std::string strData; // Data field - can be used for anything\n+    /// Object typecode\n     int nObjectType;\n \n-    // Masternode info for signed objects\n+    /// parent object, 0 is root\n+    uint256 nHashParent;\n+\n+    /// object revision in the system\n+    int nRevision;\n+\n+    /// time this object was created\n+    int64_t nTime;\n+\n+    /// fee-tx\n+    uint256 nCollateralHash;\n+\n+    /// Data field - can be used for anything\n+    std::string strData;\n+\n+    /// Masternode info for signed objects\n     CTxIn vinMasternode;\n     std::vector<unsigned char> vchSig;\n \n-    bool fCachedLocalValidity; // is valid by blockchain\n+    /// is valid by blockchain\n+    bool fCachedLocalValidity;\n     std::string strLocalValidityError;\n \n     // VARIOUS FLAGS FOR OBJECT / SET VIA MASTERNODE VOTING\n \n-    bool fCachedFunding; // true == minimum network support has been reached for this object to be funded (doesn't mean it will for sure though)\n-    bool fCachedValid; // true == minimum network has been reached flagging this object as a valid and understood goverance object (e.g, the serialized data is correct format, etc)\n-    bool fCachedDelete; // true == minimum network support has been reached saying this object should be deleted from the system entirely\n-    bool fCachedEndorsed; // true == minimum network support has been reached flagging this object as endorsed by an elected representative body (e.g. business review board / technecial review board /etc)\n-    bool fDirtyCache; // object was updated and cached values should be updated soon\n-    bool fUnparsable; // data field was unparsible, object will be rejected\n-    bool fExpired; // Object is no longer of interest\n+    /// true == minimum network support has been reached for this object to be funded (doesn't mean it will for sure though)\n+    bool fCachedFunding;\n+\n+    /// true == minimum network has been reached flagging this object as a valid and understood goverance object (e.g, the serialized data is correct format, etc)\n+    bool fCachedValid;\n \n+    /// true == minimum network support has been reached saying this object should be deleted from the system entirely\n+    bool fCachedDelete;\n+\n+    /** true == minimum network support has been reached flagging this object as endorsed by an elected representative body\n+     * (e.g. business review board / technecial review board /etc)\n+     */\n+    bool fCachedEndorsed;\n+\n+    /// object was updated and cached values should be updated soon\n+    bool fDirtyCache;\n+\n+    /// Object is no longer of interest\n+    bool fExpired;\n+\n+    /// Failed to parse object data\n+    bool fUnparsable;\n+\n+    vote_m_t mapCurrentMNVotes;\n+\n+    /// Limited map of votes orphaned by MN\n+    vote_mcache_t mapOrphanVotes;\n+\n+    CGovernanceObjectVoteFile fileVotes;\n+\n+public:\n     CGovernanceObject();\n+\n     CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTime, uint256 nCollateralHashIn, std::string strDataIn);\n+\n     CGovernanceObject(const CGovernanceObject& other);\n+\n     void swap(CGovernanceObject& first, CGovernanceObject& second); // nothrow\n \n+    // Public Getter methods\n+\n+    int64_t GetCreationTime() const {\n+        return nTime;\n+    }\n+\n+    int GetObjectType() const {\n+        return nObjectType;\n+    }\n+\n+    const uint256& GetCollateralHash() const {\n+        return nCollateralHash;\n+    }\n+\n+    const CTxIn& GetMasternodeVin() const {\n+        return vinMasternode;\n+    }\n+\n+    bool IsSetCachedFunding() const {\n+        return fCachedFunding;\n+    }\n+\n+    bool IsSetCachedValid() const {\n+        return fCachedValid;\n+    }\n+\n+    bool IsSetCachedDelete() const {\n+        return fCachedDelete;\n+    }\n+\n+    bool IsSetCachedEndorsed() const {\n+        return fCachedEndorsed;\n+    }\n+\n+    bool IsSetDirtyCache() const {\n+        return fDirtyCache;\n+    }\n+\n+    bool IsSetExpired() const {\n+        return fExpired;\n+    }\n+\n+    void InvalidateVoteCache() {\n+        fDirtyCache = true;\n+    }\n+\n+    CGovernanceObjectVoteFile& GetVoteFile() {\n+        return fileVotes;\n+    }\n+\n     // Signature related functions\n \n     void SetMasternodeInfo(const CTxIn& vin);\n@@ -272,24 +485,28 @@ class CGovernanceObject\n     bool IsCollateralValid(std::string& strError);\n \n     void UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex);\n+\n     void UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex);\n-    int GetObjectType();\n+\n     int GetObjectSubtype();\n \n     CAmount GetMinCollateralFee();\n \n     UniValue GetJSONObject();\n \n     void Relay();\n+\n     uint256 GetHash();\n \n     // GET VOTE COUNT FOR SIGNAL\n \n-    int GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn);\n-    int GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn);\n-    int GetYesCount(vote_signal_enum_t eVoteSignalIn);\n-    int GetNoCount(vote_signal_enum_t eVoteSignalIn);\n-    int GetAbstainCount(vote_signal_enum_t eVoteSignalIn);\n+    int CountMatchingVotes(vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn) const;\n+\n+    int GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetYesCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetNoCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const;\n \n     // FUNCTIONS FOR DEALING WITH DATA STRING\n \n@@ -313,16 +530,33 @@ class CGovernanceObject\n         READWRITE(nObjectType);\n         READWRITE(vinMasternode);\n         READWRITE(vchSig);\n+        if(nType & SER_DISK) {\n+            // Only include these for the disk file format\n+            LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp Reading/writing votes from/to disk\\n\");\n+            READWRITE(mapCurrentMNVotes);\n+            READWRITE(fileVotes);\n+            LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp hash = %s, vote count = %d\\n\", GetHash().ToString(), fileVotes.GetVoteCount());\n+        }\n \n         // AFTER DESERIALIZATION OCCURS, CACHED VARIABLES MUST BE CALCULATED MANUALLY\n     }\n \n private:\n     // FUNCTIONS FOR DEALING WITH DATA STRING\n-\n     void LoadData();\n     void GetData(UniValue& objResult);\n \n+    bool ProcessVote(CNode* pfrom,\n+                     const CGovernanceVote& vote,\n+                     CGovernanceException& exception);\n+\n+    void RebuildVoteMap();\n+\n+    /// Called when MN's which have voted on this object have been removed\n+    void ClearMasternodeVotes();\n+\n+    void CheckOrphanVotes();\n+\n };\n \n "
      },
      {
        "sha": "2f820ee6999a07d1f0b94b24fa2c3c0f4b9ce9cc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -4948,14 +4948,11 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n         return mapDarksendBroadcastTxes.count(inv.hash);\n \n     case MSG_GOVERNANCE_OBJECT:\n-        return governance.HaveObjectForHash(inv.hash);\n-\n     case MSG_GOVERNANCE_OBJECT_VOTE:\n-        return governance.HaveVoteForHash(inv.hash);\n+        return ! governance.ConfirmInventoryRequest(inv);\n \n     case MSG_MASTERNODE_VERIFY:\n         return mnodeman.mapSeenMasternodeVerification.count(inv.hash);\n-\n     }\n \n     // Don't know what it is, just say we already got one\n@@ -6720,9 +6717,15 @@ bool SendMessages(CNode* pto)\n         //\n         // Message: getdata (non-blocks)\n         //\n+        int64_t nFirst = -1;\n+        if(!pto->mapAskFor.empty()) {\n+            nFirst = (*pto->mapAskFor.begin()).first;\n+        }\n+        LogPrint(\"net\", \"SendMessages (mapAskFor) -- before loop: nNow = %d, nFirst = %d\\n\", nNow, nFirst);\n         while (!pto->fDisconnect && !pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n+            LogPrint(\"net\", \"SendMessages (mapAskFor) -- inv = %s peer=%d\\n\", inv.ToString(), pto->id);\n             if (!AlreadyHave(inv))\n             {\n                 if (fDebug)\n@@ -6735,6 +6738,7 @@ bool SendMessages(CNode* pto)\n                 }\n             } else {\n                 //If we're not going to ask, don't expect a response.\n+                LogPrint(\"net\", \"SendMessages -- already have inv = %s peer=%d\\n\", inv.ToString(), pto->id);\n                 pto->setAskFor.erase(inv.hash);\n             }\n             pto->mapAskFor.erase(pto->mapAskFor.begin());"
      },
      {
        "sha": "196beaa1b7a3ff8ffc8531d05ffca4a4d9308592",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -882,6 +882,14 @@ void CMasternode::UpdateWatchdogVoteTime()\n */\n void CMasternode::FlagGovernanceItemsAsDirty()\n {\n+    std::map<uint256, int>::iterator it = mapGovernanceObjectsVotedOn.begin();\n+    while(it != mapGovernanceObjectsVotedOn.end()){\n+        CGovernanceObject *pObj = governance.FindGovernanceObject((*it).first);\n+\n+        if(pObj) pObj->InvalidateVoteCache();\n+        ++it;\n+    }\n+\n     std::vector<uint256> vecDirty;\n     {\n         std::map<uint256, int>::iterator it = mapGovernanceObjectsVotedOn.begin();"
      },
      {
        "sha": "c83dd8737c24f6c3d1f853a8bff017f510aadd85",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 234,
        "deletions": 94,
        "changes": 328,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -5,6 +5,7 @@\n #include \"masternodeman.h\"\n #include \"activemasternode.h\"\n #include \"darksend.h\"\n+#include \"governance.h\"\n #include \"masternode.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n@@ -38,7 +39,51 @@ struct CompareScoreMN\n     }\n };\n \n+CMasternodeIndex::CMasternodeIndex()\n+    : nSize(0),\n+      mapIndex(),\n+      mapReverseIndex()\n+{}\n+\n+bool CMasternodeIndex::Get(int nIndex, CTxIn& vinMasternode) const\n+{\n+    rindex_m_cit it = mapReverseIndex.find(nIndex);\n+    if(it == mapReverseIndex.end()) {\n+        return false;\n+    }\n+    vinMasternode = it->second;\n+    return true;\n+}\n+\n+int CMasternodeIndex::GetMasternodeIndex(const CTxIn& vinMasternode) const\n+{\n+    index_m_cit it = mapIndex.find(vinMasternode);\n+    if(it == mapIndex.end()) {\n+        return -1;\n+    }\n+    return it->second;\n+}\n+\n+void CMasternodeIndex::AddMasternodeVIN(const CTxIn& vinMasternode)\n+{\n+    index_m_it it = mapIndex.find(vinMasternode);\n+    if(it != mapIndex.end()) {\n+        return;\n+    }\n+    int nNextIndex = nSize;\n+    mapIndex[vinMasternode] = nNextIndex;\n+    mapReverseIndex[nNextIndex] = vinMasternode;\n+    ++nSize;\n+}\n+\n+void CMasternodeIndex::Clear()\n+{\n+    mapIndex.clear();\n+    mapReverseIndex.clear();\n+    nSize = 0;\n+}\n struct CompareByAddr\n+\n {\n     bool operator()(const CMasternode* t1,\n                     const CMasternode* t2) const\n@@ -47,6 +92,33 @@ struct CompareByAddr\n     }\n };\n \n+void CMasternodeIndex::RebuildIndex()\n+{\n+    nSize = mapIndex.size();\n+    for(index_m_it it = mapIndex.begin(); it != mapIndex.end(); ++it) {\n+        mapReverseIndex[it->second] = it->first;\n+    }\n+}\n+\n+CMasternodeMan::CMasternodeMan()\n+: cs(),\n+  vMasternodes(),\n+  mAskedUsForMasternodeList(),\n+  mWeAskedForMasternodeList(),\n+  mWeAskedForMasternodeListEntry(),\n+  nLastIndexRebuildTime(0),\n+  indexMasternodes(),\n+  indexMasternodesOld(),\n+  fIndexRebuilt(false),\n+  fMasternodesAdded(false),\n+  fMasternodesRemoved(false),\n+  vecDirtyGovernanceObjectHashes(),\n+  nLastWatchdogVoteTime(0),\n+  mapSeenMasternodeBroadcast(),\n+  mapSeenMasternodePing(),\n+  nDsqCount(0)\n+{}\n+\n bool CMasternodeMan::Add(CMasternode &mn)\n {\n     LOCK(cs);\n@@ -59,13 +131,15 @@ bool CMasternodeMan::Add(CMasternode &mn)\n         LogPrint(\"masternode\", \"CMasternodeMan::Add -- Adding new Masternode: addr=%s, %i now\\n\", mn.addr.ToString(), size() + 1);\n         mn.nTimeLastWatchdogVote = mn.sigTime;\n         vMasternodes.push_back(mn);\n+        indexMasternodes.AddMasternodeVIN(mn.vin);\n+        fMasternodesAdded = true;\n         return true;\n     }\n \n     return false;\n }\n \n-void CMasternodeMan::AskForMN(CNode* pnode, CTxIn &vin)\n+void CMasternodeMan::AskForMN(CNode* pnode, const CTxIn &vin)\n {\n     if(!pnode) return;\n \n@@ -99,106 +173,117 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n \n     Check();\n \n-    LOCK(cs);\n+    {\n+        LOCK(cs);\n \n-    // Remove inactive and outdated masternodes\n-    std::vector<CMasternode>::iterator it = vMasternodes.begin();\n-    while(it != vMasternodes.end()) {\n-        bool fRemove =  // If it's marked to be removed from the list by CMasternode::Check for whatever reason ...\n-                        (*it).nActiveState == CMasternode::MASTERNODE_REMOVE ||\n-                        // or collateral was spent ...\n-                        (*it).nActiveState == CMasternode::MASTERNODE_OUTPOINT_SPENT ||\n-                        // or we were asked to remove exired entries ...\n-                        (fForceExpiredRemoval && (*it).nActiveState == CMasternode::MASTERNODE_EXPIRED);\n-\n-        if (fRemove) {\n-            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing Masternode: %s  addr=%s  %i now\\n\", (*it).GetStatus(), (*it).addr.ToString(), size() - 1);\n-\n-            // erase all of the broadcasts we've seen from this txin, ...\n-            mapSeenMasternodeBroadcast.erase(CMasternodeBroadcast(*it).GetHash());\n-            // allow us to ask for this masternode again if we see another ping ...\n-            mWeAskedForMasternodeListEntry.erase((*it).vin.prevout);\n-\n-            // and finally remove it from the list\n-            it = vMasternodes.erase(it);\n-        } else {\n-            ++it;\n+        // Remove inactive and outdated masternodes\n+        std::vector<CMasternode>::iterator it = vMasternodes.begin();\n+        while(it != vMasternodes.end()) {\n+            bool fRemove =  // If it's marked to be removed from the list by CMasternode::Check for whatever reason ...\n+                    (*it).nActiveState == CMasternode::MASTERNODE_REMOVE ||\n+                    // or collateral was spent ...\n+                    (*it).nActiveState == CMasternode::MASTERNODE_OUTPOINT_SPENT ||\n+                    // or we were asked to remove exired entries ...\n+                    (fForceExpiredRemoval && (*it).nActiveState == CMasternode::MASTERNODE_EXPIRED);\n+\n+            if (fRemove) {\n+                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing Masternode: %s  addr=%s  %i now\\n\", (*it).GetStatus(), (*it).addr.ToString(), size() - 1);\n+\n+                // erase all of the broadcasts we've seen from this txin, ...\n+                mapSeenMasternodeBroadcast.erase(CMasternodeBroadcast(*it).GetHash());\n+                // allow us to ask for this masternode again if we see another ping ...\n+                mWeAskedForMasternodeListEntry.erase((*it).vin.prevout);\n+\n+                // and finally remove it from the list\n+                it = vMasternodes.erase(it);\n+                fMasternodesRemoved = true;\n+            } else {\n+                ++it;\n+            }\n         }\n-    }\n \n-    // check who's asked for the Masternode list\n-    std::map<CNetAddr, int64_t>::iterator it1 = mAskedUsForMasternodeList.begin();\n-    while(it1 != mAskedUsForMasternodeList.end()){\n-        if((*it1).second < GetTime()) {\n-            mAskedUsForMasternodeList.erase(it1++);\n-        } else {\n-            ++it1;\n+        // check who's asked for the Masternode list\n+        std::map<CNetAddr, int64_t>::iterator it1 = mAskedUsForMasternodeList.begin();\n+        while(it1 != mAskedUsForMasternodeList.end()){\n+            if((*it1).second < GetTime()) {\n+                mAskedUsForMasternodeList.erase(it1++);\n+            } else {\n+                ++it1;\n+            }\n         }\n-    }\n \n-    // check who we asked for the Masternode list\n-    it1 = mWeAskedForMasternodeList.begin();\n-    while(it1 != mWeAskedForMasternodeList.end()){\n-        if((*it1).second < GetTime()){\n-            mWeAskedForMasternodeList.erase(it1++);\n-        } else {\n-            ++it1;\n+        // check who we asked for the Masternode list\n+        it1 = mWeAskedForMasternodeList.begin();\n+        while(it1 != mWeAskedForMasternodeList.end()){\n+            if((*it1).second < GetTime()){\n+                mWeAskedForMasternodeList.erase(it1++);\n+            } else {\n+                ++it1;\n+            }\n         }\n-    }\n \n-    // check which Masternodes we've asked for\n-    std::map<COutPoint, int64_t>::iterator it2 = mWeAskedForMasternodeListEntry.begin();\n-    while(it2 != mWeAskedForMasternodeListEntry.end()){\n-        if((*it2).second < GetTime()){\n-            mWeAskedForMasternodeListEntry.erase(it2++);\n-        } else {\n-            ++it2;\n+        // check which Masternodes we've asked for\n+        std::map<COutPoint, int64_t>::iterator it2 = mWeAskedForMasternodeListEntry.begin();\n+        while(it2 != mWeAskedForMasternodeListEntry.end()){\n+            if((*it2).second < GetTime()){\n+                mWeAskedForMasternodeListEntry.erase(it2++);\n+            } else {\n+                ++it2;\n+            }\n         }\n-    }\n \n-    std::map<CNetAddr, CMasternodeVerification>::iterator itv1 = mWeAskedForVerification.begin();\n-    while(itv1 != mWeAskedForVerification.end()){\n-        if(itv1->second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS) {\n-            mWeAskedForVerification.erase(itv1++);\n-        } else {\n-            ++itv1;\n+        std::map<CNetAddr, CMasternodeVerification>::iterator itv1 = mWeAskedForVerification.begin();\n+        while(itv1 != mWeAskedForVerification.end()){\n+            if(itv1->second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS) {\n+                mWeAskedForVerification.erase(itv1++);\n+            } else {\n+                ++itv1;\n+            }\n         }\n-    }\n \n-    // remove expired mapSeenMasternodeBroadcast\n-    std::map<uint256, CMasternodeBroadcast>::iterator it3 = mapSeenMasternodeBroadcast.begin();\n-    while(it3 != mapSeenMasternodeBroadcast.end()){\n-        if((*it3).second.lastPing.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n-            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode broadcast: hash=%s\\n\", (*it3).second.GetHash().ToString());\n-            mapSeenMasternodeBroadcast.erase(it3++);\n-        } else {\n-            ++it3;\n+        // remove expired mapSeenMasternodeBroadcast\n+        std::map<uint256, CMasternodeBroadcast>::iterator it3 = mapSeenMasternodeBroadcast.begin();\n+        while(it3 != mapSeenMasternodeBroadcast.end()){\n+            if((*it3).second.lastPing.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n+                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode broadcast: hash=%s\\n\", (*it3).second.GetHash().ToString());\n+                mapSeenMasternodeBroadcast.erase(it3++);\n+            } else {\n+                ++it3;\n+            }\n         }\n-    }\n \n-    // remove expired mapSeenMasternodePing\n-    std::map<uint256, CMasternodePing>::iterator it4 = mapSeenMasternodePing.begin();\n-    while(it4 != mapSeenMasternodePing.end()){\n-        if((*it4).second.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n-            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode ping: hash=%s\\n\", (*it4).second.GetHash().ToString());\n-            mapSeenMasternodePing.erase(it4++);\n-        } else {\n-            ++it4;\n+        // remove expired mapSeenMasternodePing\n+        std::map<uint256, CMasternodePing>::iterator it4 = mapSeenMasternodePing.begin();\n+        while(it4 != mapSeenMasternodePing.end()){\n+            if((*it4).second.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n+                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode ping: hash=%s\\n\", (*it4).second.GetHash().ToString());\n+                mapSeenMasternodePing.erase(it4++);\n+            } else {\n+                ++it4;\n+            }\n         }\n-    }\n \n-    // remove expired mapSeenMasternodeVerification\n-    std::map<uint256, CMasternodeVerification>::iterator itv2 = mapSeenMasternodeVerification.begin();\n-    while(itv2 != mapSeenMasternodeVerification.end()){\n-        if((*itv2).second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS){\n-            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode verification: hash=%s\\n\", (*itv2).first.ToString());\n-            mapSeenMasternodeVerification.erase(itv2++);\n-        } else {\n-            ++itv2;\n+        // remove expired mapSeenMasternodeVerification\n+        std::map<uint256, CMasternodeVerification>::iterator itv2 = mapSeenMasternodeVerification.begin();\n+        while(itv2 != mapSeenMasternodeVerification.end()){\n+            if((*itv2).second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS){\n+                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode verification: hash=%s\\n\", (*itv2).first.ToString());\n+                mapSeenMasternodeVerification.erase(itv2++);\n+            } else {\n+                ++itv2;\n+            }\n+        }\n+\n+        LogPrintf(\"CMasternodeMan::CheckAndRemove -- %s\\n\", ToString());\n+\n+        if(fMasternodesRemoved) {\n+            CheckAndRebuildMasternodeIndex();\n         }\n     }\n \n-    LogPrintf(\"CMasternodeMan::CheckAndRemove -- %s\\n\", ToString());\n+    if(fMasternodesRemoved) {\n+        NotifyMasternodeUpdates();\n+    }\n }\n \n void CMasternodeMan::Clear()\n@@ -610,20 +695,25 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n     if (strCommand == NetMsgType::MNANNOUNCE) { //Masternode Broadcast\n \n-        CMasternodeBroadcast mnb;\n-        vRecv >> mnb;\n+        {\n+            LOCK(cs);\n \n-        int nDos = 0;\n+            CMasternodeBroadcast mnb;\n+            vRecv >> mnb;\n \n-        if (CheckMnbAndUpdateMasternodeList(mnb, nDos)) {\n-            // use announced Masternode as a peer\n-            addrman.Add(CAddress(mnb.addr), pfrom->addr, 2*60*60);\n-        } else if(nDos > 0) {\n-            Misbehaving(pfrom->GetId(), nDos);\n-        }\n+            int nDos = 0;\n \n+            if (CheckMnbAndUpdateMasternodeList(mnb, nDos)) {\n+                // use announced Masternode as a peer\n+                addrman.Add(CAddress(mnb.addr), pfrom->addr, 2*60*60);\n+            } else if(nDos > 0) {\n+                Misbehaving(pfrom->GetId(), nDos);\n+            }\n+        }\n+        if(fMasternodesAdded) {\n+            NotifyMasternodeUpdates();\n+        }\n     } else if (strCommand == NetMsgType::MNPING) { //Masternode Ping\n-\n         // ignore masternode pings until masternode list is synced\n         if (!masternodeSync.IsMasternodeListSynced()) return;\n \n@@ -657,7 +747,6 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         AskForMN(pfrom, mnp.vin);\n \n     } else if (strCommand == NetMsgType::DSEG) { //Get Masternode list or specific entry\n-\n         // Ignore such requests until we are fully synced.\n         // We could start processing this after masternode list is synced\n         // but this is a heavy one so it's better to finish sync first.\n@@ -722,6 +811,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n     } else if (strCommand == NetMsgType::MNVERIFY) { // Masternode Verify\n \n+        LOCK(cs);\n+\n         CMasternodeVerification mnv;\n         vRecv >> mnv;\n \n@@ -1290,6 +1381,32 @@ void CMasternodeMan::UpdateLastPaid(const CBlockIndex *pindex)\n     IsFirstRun = !masternodeSync.IsWinnersListSynced();\n }\n \n+void CMasternodeMan::CheckAndRebuildMasternodeIndex()\n+{\n+    LOCK(cs);\n+\n+    if(GetTime() - nLastIndexRebuildTime < MIN_INDEX_REBUILD_TIME) {\n+        return;\n+    }\n+\n+    if(indexMasternodes.GetSize() <= MAX_EXPECTED_INDEX_SIZE) {\n+        return;\n+    }\n+\n+    if(indexMasternodes.GetSize() <= int(vMasternodes.size())) {\n+        return;\n+    }\n+\n+    indexMasternodesOld = indexMasternodes;\n+    indexMasternodes.Clear();\n+    for(size_t i = 0; i < vMasternodes.size(); ++i) {\n+        indexMasternodes.AddMasternodeVIN(vMasternodes[i].vin);\n+    }\n+\n+    fIndexRebuilt = true;\n+    nLastIndexRebuildTime = GetTime();\n+}\n+\n void CMasternodeMan::UpdateWatchdogVoteTime(const CTxIn& vin)\n {\n     LOCK(cs);\n@@ -1406,3 +1523,26 @@ void CMasternodeMan::UpdatedBlockTip(const CBlockIndex *pindex)\n         UpdateLastPaid(pindex);\n     }\n }\n+\n+void CMasternodeMan::NotifyMasternodeUpdates()\n+{\n+    // Avoid double locking\n+    bool fMasternodesAddedLocal = false;\n+    bool fMasternodesRemovedLocal = false;\n+    {\n+        LOCK(cs);\n+        fMasternodesAddedLocal = fMasternodesAdded;\n+        fMasternodesRemovedLocal = fMasternodesRemoved;\n+    }\n+\n+    if(fMasternodesAddedLocal) {\n+        governance.CheckMasternodeOrphanVotes();\n+    }\n+    if(fMasternodesRemovedLocal) {\n+        governance.UpdateCachesAndClean();\n+    }\n+\n+    LOCK(cs);\n+    fMasternodesAdded = false;\n+    fMasternodesRemoved = false;\n+}"
      },
      {
        "sha": "398eee7664eb7f8cd3e40b9c572857ed16639bd0",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 147,
        "deletions": 3,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -14,9 +14,85 @@ class CMasternodeMan;\n \n extern CMasternodeMan mnodeman;\n \n+/**\n+ * Provides a forward and reverse index between MN vin's and integers.\n+ *\n+ * This mapping is normally add-only and is expected to be permanent\n+ * It is only rebuilt if the size of the index exceeds the expected maximum number\n+ * of MN's and the current number of known MN's.\n+ *\n+ * The external interface to this index is provided via delegation by CMasternodeMan\n+ */\n+class CMasternodeIndex\n+{\n+public: // Types\n+    typedef std::map<CTxIn,int> index_m_t;\n+\n+    typedef index_m_t::iterator index_m_it;\n+\n+    typedef index_m_t::const_iterator index_m_cit;\n+\n+    typedef std::map<int,CTxIn> rindex_m_t;\n+\n+    typedef rindex_m_t::iterator rindex_m_it;\n+\n+    typedef rindex_m_t::const_iterator rindex_m_cit;\n+\n+private:\n+    int                  nSize;\n+\n+    index_m_t            mapIndex;\n+\n+    rindex_m_t           mapReverseIndex;\n+\n+public:\n+    CMasternodeIndex();\n+\n+    int GetSize() const {\n+        return nSize;\n+    }\n+\n+    /// Retrieve masternode vin by index\n+    bool Get(int nIndex, CTxIn& vinMasternode) const;\n+\n+    /// Get index of a masternode vin\n+    int GetMasternodeIndex(const CTxIn& vinMasternode) const;\n+\n+    void AddMasternodeVIN(const CTxIn& vinMasternode);\n+\n+    void Clear();\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(mapIndex);\n+        if(ser_action.ForRead()) {\n+            RebuildIndex();\n+        }\n+    }\n+\n+private:\n+    void RebuildIndex();\n+\n+};\n+\n class CMasternodeMan\n {\n+public:\n+    typedef std::map<CTxIn,int> index_m_t;\n+\n+    typedef index_m_t::iterator index_m_it;\n+\n+    typedef index_m_t::const_iterator index_m_cit;\n+\n private:\n+    static const int MAX_EXPECTED_INDEX_SIZE = 30000;\n+\n+    /// Only allow 1 index rebuild per hour\n+    static const int64_t MIN_INDEX_REBUILD_TIME = 3600;\n+\n     static const std::string SERIALIZATION_VERSION_STRING;\n \n     static const int DSEG_UPDATE_SECONDS        = 3 * 60 * 60;\n@@ -45,6 +121,21 @@ class CMasternodeMan\n     // who we asked for the masternode verification\n     std::map<CNetAddr, CMasternodeVerification> mWeAskedForVerification;\n \n+    int64_t nLastIndexRebuildTime;\n+\n+    CMasternodeIndex indexMasternodes;\n+\n+    CMasternodeIndex indexMasternodesOld;\n+\n+    /// Set when index has been rebuilt, clear when read\n+    bool fIndexRebuilt;\n+\n+    /// Set when masternodes are added, cleared when CGovernanceManager is notified\n+    bool fMasternodesAdded;\n+\n+    /// Set when masternodes are removed, cleared when CGovernanceManager is notified\n+    bool fMasternodesRemoved;\n+\n     std::vector<uint256> vecDirtyGovernanceObjectHashes;\n \n     int64_t nLastWatchdogVoteTime;\n@@ -62,8 +153,6 @@ class CMasternodeMan\n     int64_t nDsqCount;\n \n \n-    CMasternodeMan() : nLastWatchdogVoteTime(0), nDsqCount(0) {}\n-\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n@@ -87,16 +176,19 @@ class CMasternodeMan\n \n         READWRITE(mapSeenMasternodeBroadcast);\n         READWRITE(mapSeenMasternodePing);\n+        READWRITE(indexMasternodes);\n         if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n             Clear();\n         }\n     }\n \n+    CMasternodeMan();\n+\n     /// Add an entry\n     bool Add(CMasternode &mn);\n \n     /// Ask (source) node for mnb\n-    void AskForMN(CNode *pnode, CTxIn &vin);\n+    void AskForMN(CNode *pnode, const CTxIn &vin);\n \n     /// Check all Masternodes\n     void Check();\n@@ -128,6 +220,49 @@ class CMasternodeMan\n     bool Get(const CPubKey& pubKeyMasternode, CMasternode& masternode);\n     bool Get(const CTxIn& vin, CMasternode& masternode);\n \n+    /// Retrieve masternode vin by index\n+    bool Get(int nIndex, CTxIn& vinMasternode, bool& fIndexRebuiltOut) {\n+        LOCK(cs);\n+        fIndexRebuiltOut = fIndexRebuilt;\n+        return indexMasternodes.Get(nIndex, vinMasternode);\n+    }\n+\n+    bool GetIndexRebuiltFlag() {\n+        LOCK(cs);\n+        return fIndexRebuilt;\n+    }\n+\n+    /// Get index of a masternode vin\n+    int GetMasternodeIndex(const CTxIn& vinMasternode) {\n+        LOCK(cs);\n+        return indexMasternodes.GetMasternodeIndex(vinMasternode);\n+    }\n+\n+    /// Get old index of a masternode vin\n+    int GetMasternodeIndexOld(const CTxIn& vinMasternode) {\n+        LOCK(cs);\n+        return indexMasternodesOld.GetMasternodeIndex(vinMasternode);\n+    }\n+\n+    /// Get masternode VIN for an old index value\n+    bool GetMasternodeVinForIndexOld(int nMasternodeIndex, CTxIn& vinMasternodeOut) {\n+        LOCK(cs);\n+        return indexMasternodesOld.Get(nMasternodeIndex, vinMasternodeOut);\n+    }\n+\n+    /// Get index of a masternode vin, returning rebuild flag\n+    int GetMasternodeIndex(const CTxIn& vinMasternode, bool& fIndexRebuiltOut) {\n+        LOCK(cs);\n+        fIndexRebuiltOut = fIndexRebuilt;\n+        return indexMasternodes.GetMasternodeIndex(vinMasternode);\n+    }\n+\n+    void ClearOldMasternodeIndex() {\n+        LOCK(cs);\n+        indexMasternodesOld.Clear();\n+        fIndexRebuilt = false;\n+    }\n+\n     bool Has(const CTxIn& vin);\n \n     masternode_info_t GetMasternodeInfo(const CTxIn& vin);\n@@ -173,6 +308,8 @@ class CMasternodeMan\n \n     void UpdateLastPaid(const CBlockIndex *pindex);\n \n+    void CheckAndRebuildMasternodeIndex();\n+\n     void AddDirtyGovernanceObjectHash(const uint256& nHash)\n     {\n         LOCK(cs);\n@@ -202,6 +339,13 @@ class CMasternodeMan\n     void SetMasternodeLastPing(const CTxIn& vin, const CMasternodePing& mnp);\n \n     void UpdatedBlockTip(const CBlockIndex *pindex);\n+\n+    /**\n+     * Called to notify CGovernanceManager that the masternode index has been updated.\n+     * Must be called while not holding the CMasternodeMan::cs mutex\n+     */\n+    void NotifyMasternodeUpdates();\n+\n };\n \n #endif"
      },
      {
        "sha": "fe46c900c7fce3a31d7d3a7935f87b35ad3cfcde",
        "filename": "src/qt/masternodelist.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/qt/masternodelist.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/qt/masternodelist.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -106,6 +106,7 @@ void MasternodeList::StartAlias(std::string strAlias)\n                 strStatusHtml += \"<br>Successfully started masternode.\";\n                 mnodeman.UpdateMasternodeList(mnb);\n                 mnb.Relay();\n+                mnodeman.NotifyMasternodeUpdates();\n             } else {\n                 strStatusHtml += \"<br>Failed to start masternode.<br>Error: \" + strError;\n             }\n@@ -142,6 +143,7 @@ void MasternodeList::StartAll(std::string strCommand)\n             nCountSuccessful++;\n             mnodeman.UpdateMasternodeList(mnb);\n             mnb.Relay();\n+            mnodeman.NotifyMasternodeUpdates();\n         } else {\n             nCountFailed++;\n             strFailedHtml += \"\\nFailed to start \" + mne.getAlias() + \". Error: \" + strError;"
      },
      {
        "sha": "d3fac8494719c57f5b828f7bf30707fec45789d4",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 37,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -283,16 +283,15 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             return returnObj;\n         }\n \n-        std::string strError = \"\";\n-        if(governance.AddOrUpdateVote(vote, NULL, strError)) {\n-            governance.AddSeenVote(vote.GetHash(), SEEN_OBJECT_IS_VALID);\n-            vote.Relay();\n+        CGovernanceException exception;\n+        if(governance.ProcessVote(vote, exception)) {\n             success++;\n             statusObj.push_back(Pair(\"result\", \"success\"));\n-        } else {\n+        }\n+        else {\n             failed++;\n             statusObj.push_back(Pair(\"result\", \"failed\"));\n-            statusObj.push_back(Pair(\"errorMessage\", strError.c_str()));\n+            statusObj.push_back(Pair(\"errorMessage\", exception.GetMessage()));\n         }\n \n         resultsObj.push_back(Pair(\"dash.conf\", statusObj));\n@@ -386,15 +385,15 @@ UniValue gobject(const UniValue& params, bool fHelp)\n                 continue;\n             }\n \n-            if(governance.AddOrUpdateVote(vote, NULL, strError)) {\n-                governance.AddSeenVote(vote.GetHash(), SEEN_OBJECT_IS_VALID);\n-                vote.Relay();\n+            CGovernanceException exception;\n+            if(governance.ProcessVote(vote, exception)) {\n                 success++;\n                 statusObj.push_back(Pair(\"result\", \"success\"));\n-            } else {\n+            }\n+            else {\n                 failed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n-                statusObj.push_back(Pair(\"errorMessage\", strError.c_str()));\n+                statusObj.push_back(Pair(\"errorMessage\", exception.GetMessage()));\n             }\n \n             resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -511,15 +510,15 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n             // UPDATE LOCAL DATABASE WITH NEW OBJECT SETTINGS\n \n-            if(governance.AddOrUpdateVote(vote, NULL, strError)) {\n-                governance.AddSeenVote(vote.GetHash(), SEEN_OBJECT_IS_VALID);\n-                vote.Relay();\n+            CGovernanceException exception;\n+            if(governance.ProcessVote(vote, exception)) {\n                 success++;\n                 statusObj.push_back(Pair(\"result\", \"success\"));\n-            } else {\n+            }\n+            else {\n                 failed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n-                statusObj.push_back(Pair(\"errorMessage\", strError.c_str()));\n+                statusObj.push_back(Pair(\"errorMessage\", exception.GetMessage()));\n             }\n \n             resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -573,13 +572,13 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         BOOST_FOREACH(CGovernanceObject* pGovObj, objs)\n         {\n             // IF WE HAVE A SPECIFIC NODE REQUESTED TO VOTE, DO THAT\n-            if(strShow == \"valid\" && !pGovObj->fCachedValid) continue;\n+            if(strShow == \"valid\" && !pGovObj->IsSetCachedValid()) continue;\n \n             UniValue bObj(UniValue::VOBJ);\n             bObj.push_back(Pair(\"DataHex\",  pGovObj->GetDataAsHex()));\n             bObj.push_back(Pair(\"DataString\",  pGovObj->GetDataAsString()));\n             bObj.push_back(Pair(\"Hash\",  pGovObj->GetHash().ToString()));\n-            bObj.push_back(Pair(\"CollateralHash\",  pGovObj->nCollateralHash.ToString()));\n+            bObj.push_back(Pair(\"CollateralHash\",  pGovObj->GetCollateralHash().ToString()));\n \n             // REPORT STATUS FOR FUNDING VOTES SPECIFICALLY\n             bObj.push_back(Pair(\"AbsoluteYesCount\",  pGovObj->GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING)));\n@@ -591,10 +590,10 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             std::string strError = \"\";\n             bObj.push_back(Pair(\"fBlockchainValidity\",  pGovObj->IsValidLocally(pindex , strError, false)));\n             bObj.push_back(Pair(\"IsValidReason\",  strError.c_str()));\n-            bObj.push_back(Pair(\"fCachedValid\",  pGovObj->fCachedValid));\n-            bObj.push_back(Pair(\"fCachedFunding\",  pGovObj->fCachedFunding));\n-            bObj.push_back(Pair(\"fCachedDelete\",  pGovObj->fCachedDelete));\n-            bObj.push_back(Pair(\"fCachedEndorsed\",  pGovObj->fCachedEndorsed));\n+            bObj.push_back(Pair(\"fCachedValid\",  pGovObj->IsSetCachedValid()));\n+            bObj.push_back(Pair(\"fCachedFunding\",  pGovObj->IsSetCachedFunding()));\n+            bObj.push_back(Pair(\"fCachedDelete\",  pGovObj->IsSetCachedDelete()));\n+            bObj.push_back(Pair(\"fCachedEndorsed\",  pGovObj->IsSetCachedEndorsed()));\n \n             objResult.push_back(Pair(pGovObj->GetHash().ToString(), bObj));\n         }\n@@ -625,7 +624,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         objResult.push_back(Pair(\"DataHex\",  pGovObj->GetDataAsHex()));\n         objResult.push_back(Pair(\"DataString\",  pGovObj->GetDataAsString()));\n         objResult.push_back(Pair(\"Hash\",  pGovObj->GetHash().ToString()));\n-        objResult.push_back(Pair(\"CollateralHash\",  pGovObj->nCollateralHash.ToString()));\n+        objResult.push_back(Pair(\"CollateralHash\",  pGovObj->GetCollateralHash().ToString()));\n \n         // SHOW (MUCH MORE) INFORMATION ABOUT VOTES FOR GOVERNANCE OBJECT (THAN LIST/DIFF ABOVE)\n         // -- FUNDING VOTING RESULTS\n@@ -665,11 +664,10 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         std::string strError = \"\";\n         objResult.push_back(Pair(\"fLocalValidity\",  pGovObj->IsValidLocally(chainActive.Tip(), strError, false)));\n         objResult.push_back(Pair(\"IsValidReason\",  strError.c_str()));\n-        objResult.push_back(Pair(\"fCachedValid\",  pGovObj->fCachedValid));\n-        objResult.push_back(Pair(\"fCachedFunding\",  pGovObj->fCachedFunding));\n-        objResult.push_back(Pair(\"fCachedDelete\",  pGovObj->fCachedDelete));\n-        objResult.push_back(Pair(\"fCachedEndorsed\",  pGovObj->fCachedEndorsed));\n-\n+        objResult.push_back(Pair(\"fCachedValid\",  pGovObj->IsSetCachedValid()));\n+        objResult.push_back(Pair(\"fCachedFunding\",  pGovObj->IsSetCachedFunding()));\n+        objResult.push_back(Pair(\"fCachedDelete\",  pGovObj->IsSetCachedDelete()));\n+        objResult.push_back(Pair(\"fCachedEndorsed\",  pGovObj->IsSetCachedEndorsed()));\n         return objResult;\n     }\n \n@@ -701,9 +699,9 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // GET MATCHING VOTES BY HASH, THEN SHOW USERS VOTE INFORMATION\n \n-        std::vector<CGovernanceVote*> vecVotes = governance.GetMatchingVotes(hash);\n-        BOOST_FOREACH(CGovernanceVote* pVote, vecVotes) {\n-            bResult.push_back(Pair(pVote->GetHash().ToString(),  pVote->ToString()));\n+        std::vector<CGovernanceVote> vecVotes = governance.GetMatchingVotes(hash);\n+        BOOST_FOREACH(CGovernanceVote vote, vecVotes) {\n+            bResult.push_back(Pair(vote.GetHash().ToString(),  vote.ToString()));\n         }\n \n         return bResult;\n@@ -764,13 +762,12 @@ UniValue voteraw(const UniValue& params, bool fHelp)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Failure to verify vote.\");\n     }\n \n-    std::string strError = \"\";\n-    if(governance.AddOrUpdateVote(vote, NULL, strError)) {\n-        governance.AddSeenVote(vote.GetHash(), SEEN_OBJECT_IS_VALID);\n-        vote.Relay();\n+    CGovernanceException exception;\n+    if(governance.ProcessVote(vote, exception)) {\n         return \"Voted successfully\";\n-    } else {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Error voting : \" + strError);\n+    }\n+    else {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Error voting : \" + exception.GetMessage());\n     }\n }\n "
      },
      {
        "sha": "cc10ee1660f3960f3159a508b95ca2084ea100e8",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -272,6 +272,7 @@ UniValue masternode(const UniValue& params, bool fHelp)\n                 } else {\n                     statusObj.push_back(Pair(\"errorMessage\", strError));\n                 }\n+                mnodeman.NotifyMasternodeUpdates();\n                 break;\n             }\n         }\n@@ -328,6 +329,7 @@ UniValue masternode(const UniValue& params, bool fHelp)\n \n             resultsObj.push_back(Pair(\"status\", statusObj));\n         }\n+        mnodeman.NotifyMasternodeUpdates();\n \n         UniValue returnObj(UniValue::VOBJ);\n         returnObj.push_back(Pair(\"overall\", strprintf(\"Successfully started %d masternodes, failed to start %d, total %d\", nSuccessful, nFailed, nSuccessful + nFailed)));\n@@ -781,6 +783,7 @@ UniValue masternodebroadcast(const UniValue& params, bool fHelp)\n                     mnb.Relay();\n                     fResult = true;\n                 }\n+                mnodeman.NotifyMasternodeUpdates();\n             } else fResult = false;\n \n             if(fResult) {"
      },
      {
        "sha": "649fe69728aeee0b4f4cd3de0ecb01c087be291c",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -12,6 +12,7 @@\n #include <assert.h>\n #include <ios>\n #include <limits>\n+#include <list>\n #include <map>\n #include <set>\n #include <stdint.h>\n@@ -886,6 +887,39 @@ void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)\n     }\n }\n \n+/**\n+ * list\n+ */\n+template<typename T, typename A>\n+unsigned int GetSerializeSize(const std::list<T, A>& l, int nType, int nVersion)\n+{\n+    unsigned int nSize = GetSizeOfCompactSize(l.size());\n+    for (typename std::list<T, A>::const_iterator it = l.begin(); it != l.end(); ++it)\n+        nSize += GetSerializeSize((*it), nType, nVersion);\n+    return nSize;\n+}\n+\n+template<typename Stream, typename T, typename A>\n+void Serialize(Stream& os, const std::list<T, A>& l, int nType, int nVersion)\n+{\n+    WriteCompactSize(os, l.size());\n+    for (typename std::list<T, A>::const_iterator it = l.begin(); it != l.end(); ++it)\n+        Serialize(os, (*it), nType, nVersion);\n+}\n+\n+template<typename Stream, typename T, typename A>\n+void Unserialize(Stream& is, std::list<T, A>& l, int nType, int nVersion)\n+{\n+    l.clear();\n+    unsigned int nSize = ReadCompactSize(is);\n+    for (unsigned int i = 0; i < nSize; i++)\n+    {\n+        T val;\n+        Unserialize(is, val, nType, nVersion);\n+        l.push_back(val);\n+    }\n+}\n+\n \n \n /**"
      },
      {
        "sha": "5a9a0a3b2e7ed2ca14d4248e1a506e90d2e83474",
        "filename": "src/test/cachemap_tests.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/test/cachemap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/test/cachemap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cachemap_tests.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+\n+#include \"cachemap.h\"\n+\n+#include \"test/test_dash.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(cachemap_tests, BasicTestingSetup)\n+\n+bool Compare(const CacheMap<int,int>& map1, const CacheMap<int,int>& map2 )\n+{\n+    if(map1.GetMaxSize() != map2.GetMaxSize()) {\n+        return false;\n+    }\n+\n+    if(map1.GetSize() != map2.GetSize()) {\n+        return false;\n+    }\n+\n+    const CacheMap<int,int>::list_t& items1 = map1.GetItemList();\n+    for(CacheMap<int,int>::list_cit it = items1.begin(); it != items1.end(); ++it) {\n+        if(!map2.HasKey(it->key)) {\n+            return false;\n+        }\n+        int val = 0;\n+        if(!map2.Get(it->key, val)) {\n+            return false;\n+        }\n+        if(it->value != val) {\n+            return false;\n+        }\n+    }\n+\n+    const CacheMap<int,int>::list_t& items2 = map2.GetItemList();\n+    for(CacheMap<int,int>::list_cit it = items2.begin(); it != items2.end(); ++it) {\n+        if(!map1.HasKey(it->key)) {\n+            return false;\n+        }\n+        int val = 0;\n+        if(!map1.Get(it->key, val)) {\n+            return false;\n+        }\n+        if(it->value != val) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(cachemap_test)\n+{\n+    // create a CacheMap limited to 10 items\n+    CacheMap<int,int> mapTest1(10);\n+\n+    // check that the max size is 10\n+    BOOST_CHECK(mapTest1.GetMaxSize() == 10);\n+\n+    // check that the size is 0\n+    BOOST_CHECK(mapTest1.GetSize() == 0);\n+\n+    // insert (-1, -1)\n+    mapTest1.Insert(-1, -1);\n+\n+    // make sure that the size is updated\n+    BOOST_CHECK(mapTest1.GetSize() == 1);\n+\n+    // make sure the map contains the key\n+    BOOST_CHECK(mapTest1.HasKey(-1) == true);\n+\n+    // add 10 items\n+    for(int i = 0; i < 10; ++i) {\n+        mapTest1.Insert(i, i);\n+    }\n+\n+    // check that the size is 10\n+    BOOST_CHECK(mapTest1.GetSize() == 10);\n+\n+    // check that the map contains the expected items\n+    for(int i = 0; i < 10; ++i) {\n+        int nVal = 0;\n+        BOOST_CHECK(mapTest1.Get(i, nVal) == true);\n+        BOOST_CHECK(nVal == i);\n+    }\n+\n+    // check that the map no longer contains the first item\n+    BOOST_CHECK(mapTest1.HasKey(-1) == false);\n+\n+    // erase an item\n+    mapTest1.Erase(5);\n+\n+    // check the size\n+    BOOST_CHECK(mapTest1.GetSize() == 9);\n+\n+    // check that the map no longer contains the item\n+    BOOST_CHECK(mapTest1.HasKey(5) == false);\n+\n+    // check that the map contains the expected items\n+    int expected[] = { 0, 1, 2, 3, 4, 6, 7, 8, 9 };\n+    for(size_t i = 0; i < 9; ++i) {\n+        int nVal = 0;\n+        int eVal = expected[i];\n+        BOOST_CHECK(mapTest1.Get(eVal, nVal) == true);\n+        BOOST_CHECK(nVal == eVal);\n+    }\n+\n+    // test serialization\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << mapTest1;\n+\n+    CacheMap<int,int> mapTest2;\n+    ss >> mapTest2;\n+\n+    BOOST_CHECK(Compare(mapTest1, mapTest2));\n+\n+    // test copy constructor\n+    CacheMap<int,int> mapTest3(mapTest1);\n+    BOOST_CHECK(Compare(mapTest1, mapTest3));\n+\n+    // test assignment operator\n+    CacheMap<int,int> mapTest4;\n+    mapTest4 = mapTest1;\n+    BOOST_CHECK(Compare(mapTest1, mapTest4));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "66d694d6bbf2d4232bc1e7edc1ddd5d45c28514e",
        "filename": "src/test/cachemultimap_tests.cpp",
        "status": "added",
        "additions": 176,
        "deletions": 0,
        "changes": 176,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/test/cachemultimap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31ba8ba4c07e72620bd71753f2103ca103bb1c2/src/test/cachemultimap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cachemultimap_tests.cpp?ref=c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "patch": "@@ -0,0 +1,176 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+\n+#include \"cachemultimap.h\"\n+\n+#include \"test/test_dash.h\"\n+\n+#include <algorithm>\n+#include <iostream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(cachemultimap_tests, BasicTestingSetup)\n+\n+void DumpMap(const CacheMultiMap<int,int>& map)\n+{\n+    const CacheMultiMap<int,int>::list_t& listItems = map.GetItemList();\n+    for(CacheMultiMap<int,int>::list_cit it = listItems.begin(); it != listItems.end(); ++it) {\n+        const CacheItem<int,int>& item = *it;\n+        std::cout << item.key << \" : \" << item.value << std::endl;\n+    }\n+}\n+\n+bool Compare(const CacheMultiMap<int,int>& map1, const CacheMultiMap<int,int>& map2 )\n+{\n+    if(map1.GetMaxSize() != map2.GetMaxSize()) {\n+        std::cout << \"Compare returning false: max size mismatch\" << std::endl;\n+        return false;\n+    }\n+\n+    if(map1.GetSize() != map2.GetSize()) {\n+        std::cout << \"Compare returning false: size mismatch\" << std::endl;\n+        return false;\n+    }\n+\n+    const CacheMultiMap<int,int>::list_t& items1 = map1.GetItemList();\n+    const CacheMultiMap<int,int>::list_t& items2 = map2.GetItemList();\n+    CacheMultiMap<int,int>::list_cit it2 = items2.begin();\n+    for(CacheMultiMap<int,int>::list_cit it1 = items1.begin(); it1 != items1.end(); ++it1) {\n+        const CacheItem<int,int>& item1 = *it1;\n+        const CacheItem<int,int>& item2 = *it2;\n+        if(item1.key != item2.key) {\n+            return false;\n+        }\n+        if(item1.value != item2.value) {\n+            return false;\n+        }\n+        ++it2;\n+    }\n+\n+    return true;\n+}\n+\n+bool CheckExpected(const CacheMultiMap<int,int>& map, int* expected, CacheMultiMap<int,int>::size_type nSize)\n+{\n+    if(map.GetSize() != nSize) {\n+        return false;\n+    }\n+    for(CacheMultiMap<int,int>::size_type i = 0; i < nSize; ++i) {\n+        int nVal = 0;\n+        int eVal = expected[i];\n+        if(!map.Get(eVal, nVal)) {\n+            return false;\n+        }\n+        if(nVal != eVal) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(cachemultimap_test)\n+{\n+    // create a CacheMultiMap limited to 10 items\n+    CacheMultiMap<int,int> mapTest1(10);\n+\n+    // check that the max size is 10\n+    BOOST_CHECK(mapTest1.GetMaxSize() == 10);\n+\n+    // check that the size is 0\n+    BOOST_CHECK(mapTest1.GetSize() == 0);\n+\n+    // insert (-1, -1)\n+    mapTest1.Insert(-1, -1);\n+\n+    // make sure that the size is updated\n+    BOOST_CHECK(mapTest1.GetSize() == 1);\n+\n+    // make sure the map contains the key\n+    BOOST_CHECK(mapTest1.HasKey(-1) == true);\n+\n+    // add 10 items\n+    for(int i = 0; i < 10; ++i) {\n+        mapTest1.Insert(i, i);\n+    }\n+\n+    // check that the size is 10\n+    BOOST_CHECK(mapTest1.GetSize() == 10);\n+\n+    // check that the map contains the expected items\n+    for(int i = 0; i < 10; ++i) {\n+        int nVal = 0;\n+        BOOST_CHECK(mapTest1.Get(i, nVal) == true);\n+        BOOST_CHECK(nVal == i);\n+    }\n+\n+    // check that the map no longer contains the first item\n+    BOOST_CHECK(mapTest1.HasKey(-1) == false);\n+\n+    // erase an item\n+    mapTest1.Erase(5);\n+\n+    // check the size\n+    BOOST_CHECK(mapTest1.GetSize() == 9);\n+\n+    // check that the map no longer contains the item\n+    BOOST_CHECK(mapTest1.HasKey(5) == false);\n+\n+    // check that the map contains the expected items\n+    int expected[] = { 0, 1, 2, 3, 4, 6, 7, 8, 9 };\n+    BOOST_CHECK(CheckExpected(mapTest1, expected, 9 ) == true);\n+\n+    // add multiple items for the same key\n+    mapTest1.Insert(5, 2);\n+    mapTest1.Insert(5, 1);\n+    mapTest1.Insert(5, 4);\n+\n+    // check the size\n+    BOOST_CHECK(mapTest1.GetSize() == 10);\n+\n+    // check that 2 keys have been removed\n+    BOOST_CHECK(mapTest1.HasKey(0) == false);\n+    BOOST_CHECK(mapTest1.HasKey(1) == false);\n+    BOOST_CHECK(mapTest1.HasKey(2) == true);\n+\n+    // check multiple values\n+    std::vector<int> vecVals;\n+    BOOST_CHECK(mapTest1.GetAll(5, vecVals) == true);\n+    BOOST_CHECK(vecVals.size() == 3);\n+    BOOST_CHECK(vecVals[0] == 1);\n+    BOOST_CHECK(vecVals[1] == 2);\n+    BOOST_CHECK(vecVals[2] == 4);\n+\n+//    std::cout << \"mapTest1 dump:\" << std::endl;\n+//    DumpMap(mapTest1);\n+\n+    // test serialization\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << mapTest1;\n+\n+    CacheMultiMap<int,int> mapTest2;\n+    ss >> mapTest2;\n+\n+//    std::cout << \"mapTest2 dump:\" << std::endl;\n+//    DumpMap(mapTest2);\n+\n+    // check multiple values\n+    std::vector<int> vecVals2;\n+    BOOST_CHECK(mapTest2.GetAll(5, vecVals2) == true);\n+    BOOST_CHECK(vecVals2.size() == 3);\n+    BOOST_CHECK(vecVals2[0] == 1);\n+    BOOST_CHECK(vecVals2[1] == 2);\n+    BOOST_CHECK(vecVals2[2] == 4);\n+\n+    BOOST_CHECK(Compare(mapTest1, mapTest2));\n+\n+    // test copy constructor\n+    CacheMultiMap<int,int> mapTest3(mapTest1);\n+    BOOST_CHECK(Compare(mapTest1, mapTest3));\n+\n+    // test assignment operator\n+    CacheMultiMap<int,int> mapTest4;\n+    mapTest4 = mapTest1;\n+    BOOST_CHECK(Compare(mapTest1, mapTest4));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "fd1327031b4149d4852adf6aef0484336ec65f56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDEzMjcwMzFiNDE0OWQ0ODUyYWRmNmFlZjA0ODQzMzZlYzY1ZjU2",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T18:07:11Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T18:07:11Z"
      },
      "message": "Moved vote relaying into ProcessVote so that local votes are relayed",
      "tree": {
        "sha": "50d5ffb3545ce49f82cc375613589c06b97f3c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50d5ffb3545ce49f82cc375613589c06b97f3c6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd1327031b4149d4852adf6aef0484336ec65f56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd1327031b4149d4852adf6aef0484336ec65f56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd1327031b4149d4852adf6aef0484336ec65f56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd1327031b4149d4852adf6aef0484336ec65f56/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c31ba8ba4c07e72620bd71753f2103ca103bb1c2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a7e866d646a2db893546a127a9a0c79f5ca0639",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd1327031b4149d4852adf6aef0484336ec65f56/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd1327031b4149d4852adf6aef0484336ec65f56/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=fd1327031b4149d4852adf6aef0484336ec65f56",
        "patch": "@@ -223,7 +223,6 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         CGovernanceException exception;\n         if(ProcessVote(pfrom, vote, exception)) {\n             LogPrint(\"gobject\", \"CGovernanceManager -- Accepted vote\\n\");\n-            vote.Relay();\n         }\n         else {\n             LogPrint(\"gobject\", \"CGovernanceManager -- Rejected vote, error = %s\\n\", exception.what());\n@@ -638,6 +637,8 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n         if(govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n             mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());\n         }\n+\n+        vote.Relay();\n     }\n     return fOk;\n }"
      }
    ]
  },
  {
    "sha": "08e977efe503097f99fa69c4ae4b80cb6ee6ec86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGU5NzdlZmU1MDMwOTdmOTlmYTY5YzRhZTRiODBjYjZlZTZlYzg2",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T18:17:42Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T18:17:42Z"
      },
      "message": "Change signature of Insert method to return indication of whether insertion succeeded",
      "tree": {
        "sha": "8c744929a05ff3de7868ca43ea5e93dc876a1a34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c744929a05ff3de7868ca43ea5e93dc876a1a34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08e977efe503097f99fa69c4ae4b80cb6ee6ec86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e977efe503097f99fa69c4ae4b80cb6ee6ec86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08e977efe503097f99fa69c4ae4b80cb6ee6ec86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e977efe503097f99fa69c4ae4b80cb6ee6ec86/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd1327031b4149d4852adf6aef0484336ec65f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd1327031b4149d4852adf6aef0484336ec65f56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd1327031b4149d4852adf6aef0484336ec65f56"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9a2bb5b2c745ae41537f3ffd4b2ebb494d98a8ac",
        "filename": "src/cachemultimap.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e977efe503097f99fa69c4ae4b80cb6ee6ec86/src/cachemultimap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e977efe503097f99fa69c4ae4b80cb6ee6ec86/src/cachemultimap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemultimap.h?ref=08e977efe503097f99fa69c4ae4b80cb6ee6ec86",
        "patch": "@@ -89,7 +89,7 @@ class CacheMultiMap\n         return nCurrentSize;\n     }\n \n-    void Insert(const K& key, const V& value)\n+    bool Insert(const K& key, const V& value)\n     {\n         if(nCurrentSize == nMaxSize) {\n             PruneLast();\n@@ -102,14 +102,15 @@ class CacheMultiMap\n \n         if(mapIt.count(value) > 0) {\n             // Don't insert duplicates\n-            return;\n+            return false;\n         }\n \n         listItems.push_front(item_t(key, value));\n         list_it lit = listItems.begin();\n \n         mapIt[value] = lit;\n         ++nCurrentSize;\n+        return true;\n     }\n \n     bool HasKey(const K& key) const"
      }
    ]
  },
  {
    "sha": "d167772643349a25235ce3d363dcfe8259cbeb58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTY3NzcyNjQzMzQ5YTI1MjM1Y2UzZDM2M2RjZmU4MjU5Y2JlYjU4",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T18:22:50Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T18:22:50Z"
      },
      "message": "Only process orphan votes once",
      "tree": {
        "sha": "755b494a6abd54004b0d01a6da691fbbfbe0e259",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/755b494a6abd54004b0d01a6da691fbbfbe0e259"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d167772643349a25235ce3d363dcfe8259cbeb58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d167772643349a25235ce3d363dcfe8259cbeb58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d167772643349a25235ce3d363dcfe8259cbeb58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d167772643349a25235ce3d363dcfe8259cbeb58/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08e977efe503097f99fa69c4ae4b80cb6ee6ec86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e977efe503097f99fa69c4ae4b80cb6ee6ec86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08e977efe503097f99fa69c4ae4b80cb6ee6ec86"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 17,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6a3aefe76762c5f564aa233b23e823c4f8efaad0",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d167772643349a25235ce3d363dcfe8259cbeb58/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d167772643349a25235ce3d363dcfe8259cbeb58/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=d167772643349a25235ce3d363dcfe8259cbeb58",
        "patch": "@@ -618,14 +618,15 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n     uint256 nHashGovobj = vote.GetParentHash();\n     object_m_it it = mapObjects.find(nHashGovobj);\n     if(it == mapObjects.end()) {\n-        mapOrphanVotes.Insert(nHashGovobj, vote);\n-        RequestGovernanceObject(pfrom, nHashGovobj);\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \"\n-                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n-                << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n-        LogPrintf(ostr.str().c_str());\n-        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        if(mapOrphanVotes.Insert(nHashGovobj, vote)) {\n+            RequestGovernanceObject(pfrom, nHashGovobj);\n+            std::ostringstream ostr;\n+            ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \"\n+                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                 << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n+            LogPrintf(ostr.str().c_str());\n+            exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        }\n         return false;\n     }\n \n@@ -814,14 +815,15 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n {\n     int nMNIndex = governance.GetMasternodeIndex(vote.GetVinMasternode());\n     if(nMNIndex < 0) {\n-        mapOrphanVotes.Insert(vote.GetVinMasternode(), vote);\n-        if(pfrom) {\n-            mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n+        if(mapOrphanVotes.Insert(vote.GetVinMasternode(), vote)) {\n+            if(pfrom) {\n+                mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n+            }\n+            std::ostringstream ostr;\n+            ostr << \"CGovernanceObject::UpdateVote -- Masternode index not found\\n\";\n+            LogPrintf(ostr.str().c_str());\n+            exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n         }\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Masternode index not found\\n\";\n-        LogPrintf(ostr.str().c_str());\n-        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "31370decd7efcda258a1fd2ecd81f9ad0a121de5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTM3MGRlY2Q3ZWZjZGEyNThhMWZkMmVjZDgxZjlhZDBhMTIxZGU1",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T20:26:53Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T20:26:53Z"
      },
      "message": "Changed log message handling due to code review suggestion",
      "tree": {
        "sha": "74812a723074a0e28e7290e51d56e4fa8576e342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74812a723074a0e28e7290e51d56e4fa8576e342"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31370decd7efcda258a1fd2ecd81f9ad0a121de5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31370decd7efcda258a1fd2ecd81f9ad0a121de5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31370decd7efcda258a1fd2ecd81f9ad0a121de5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31370decd7efcda258a1fd2ecd81f9ad0a121de5/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d167772643349a25235ce3d363dcfe8259cbeb58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d167772643349a25235ce3d363dcfe8259cbeb58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d167772643349a25235ce3d363dcfe8259cbeb58"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 14,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b6aeb48c2ef90514e9c12bf75e2fe35d46edfa68",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31370decd7efcda258a1fd2ecd81f9ad0a121de5/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31370decd7efcda258a1fd2ecd81f9ad0a121de5/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=31370decd7efcda258a1fd2ecd81f9ad0a121de5",
        "patch": "@@ -618,14 +618,17 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n     uint256 nHashGovobj = vote.GetParentHash();\n     object_m_it it = mapObjects.find(nHashGovobj);\n     if(it == mapObjects.end()) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \"\n+             << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+             << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n         if(mapOrphanVotes.Insert(nHashGovobj, vote)) {\n             RequestGovernanceObject(pfrom, nHashGovobj);\n-            std::ostringstream ostr;\n-            ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \"\n-                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n-                 << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n             LogPrintf(ostr.str().c_str());\n-            exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        }\n+        else {\n+            LogPrint(\"gobject\", ostr.str().c_str());\n         }\n         return false;\n     }\n@@ -815,14 +818,17 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n {\n     int nMNIndex = governance.GetMasternodeIndex(vote.GetVinMasternode());\n     if(nMNIndex < 0) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::UpdateVote -- Masternode index not found\\n\";\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n         if(mapOrphanVotes.Insert(vote.GetVinMasternode(), vote)) {\n             if(pfrom) {\n                 mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n             }\n-            std::ostringstream ostr;\n-            ostr << \"CGovernanceObject::UpdateVote -- Masternode index not found\\n\";\n             LogPrintf(ostr.str().c_str());\n-            exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        }\n+        else {\n+            LogPrint(\"gobject\", ostr.str().c_str());\n         }\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "aaf96c9a007ce06d7c69b7872041da05f7640301",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWY5NmM5YTAwN2NlMDZkN2M2OWI3ODcyMDQxZGEwNWY3NjQwMzAx",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T20:28:46Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-14T20:28:46Z"
      },
      "message": "Fix function name in log messages",
      "tree": {
        "sha": "f7f800174e3ea4a346b146d730ef58427fef3eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7f800174e3ea4a346b146d730ef58427fef3eac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaf96c9a007ce06d7c69b7872041da05f7640301",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaf96c9a007ce06d7c69b7872041da05f7640301",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aaf96c9a007ce06d7c69b7872041da05f7640301",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaf96c9a007ce06d7c69b7872041da05f7640301/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31370decd7efcda258a1fd2ecd81f9ad0a121de5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31370decd7efcda258a1fd2ecd81f9ad0a121de5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31370decd7efcda258a1fd2ecd81f9ad0a121de5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f8f616473d065e22b22bd3a93effe8d6789efda0",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaf96c9a007ce06d7c69b7872041da05f7640301/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaf96c9a007ce06d7c69b7872041da05f7640301/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=aaf96c9a007ce06d7c69b7872041da05f7640301",
        "patch": "@@ -819,7 +819,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     int nMNIndex = governance.GetMasternodeIndex(vote.GetVinMasternode());\n     if(nMNIndex < 0) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Masternode index not found\\n\";\n+        ostr << \"CGovernanceObject::ProcessVote -- Masternode index not found\\n\";\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n         if(mapOrphanVotes.Insert(vote.GetVinMasternode(), vote)) {\n             if(pfrom) {\n@@ -841,14 +841,14 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     vote_signal_enum_t eSignal = vote.GetSignal();\n     if(eSignal == VOTE_SIGNAL_NONE) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Vote signal: none\" << \"\\n\";\n+        ostr << \"CGovernanceObject::ProcessVote -- Vote signal: none\" << \"\\n\";\n         LogPrint(\"gobject\", ostr.str().c_str());\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n         return false;\n     }\n     if(eSignal > MAX_SUPPORTED_VOTE_SIGNAL) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Unsupported vote signal:\" << CGovernanceVoting::ConvertSignalToString(vote.GetSignal()) << \"\\n\";\n+        ostr << \"CGovernanceObject::ProcessVote -- Unsupported vote signal:\" << CGovernanceVoting::ConvertSignalToString(vote.GetSignal()) << \"\\n\";\n         LogPrintf(ostr.str().c_str());\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n         return false;\n@@ -862,7 +862,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     int64_t nTimeDelta = nNow - voteInstance.nTime;\n     if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Masternode voting too often \"\n+        ostr << \"CGovernanceObject::ProcessVote -- Masternode voting too often \"\n                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n                 << \", governance object hash = \" << GetHash().ToString()\n                 << \", time delta = \" << nTimeDelta << \"\\n\";\n@@ -873,7 +873,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     // Finally check that the vote is actually valid (done last because of cost of signature verification)\n     if(!vote.IsValid(true)) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Invalid vote \"\n+        ostr << \"CGovernanceObject::ProcessVote -- Invalid vote \"\n                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n                 << \", governance object hash = \" << GetHash().ToString()\n                 << \", vote hash = \" << vote.GetHash().ToString() << \"\\n\";"
      }
    ]
  },
  {
    "sha": "714f9a4f0d574bb4930a1809b6dd56749273fddb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTRmOWE0ZjBkNTc0YmI0OTMwYTE4MDliNmRkNTY3NDkyNzNmZGRi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-14T21:14:58Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-14T21:14:58Z"
      },
      "message": "Fix PR1135 bugs (#1140)\n\n* Move vote relaying into ProcessVote so that local votes are relayed\r\n\r\n* Change signature of Insert method to return indication of whether insertion succeeded\r\n\r\n* Only process orphan votes once\r\n\r\n* Fix function name in log messages",
      "tree": {
        "sha": "f7f800174e3ea4a346b146d730ef58427fef3eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7f800174e3ea4a346b146d730ef58427fef3eac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/714f9a4f0d574bb4930a1809b6dd56749273fddb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714f9a4f0d574bb4930a1809b6dd56749273fddb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/714f9a4f0d574bb4930a1809b6dd56749273fddb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714f9a4f0d574bb4930a1809b6dd56749273fddb/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31ba8ba4c07e72620bd71753f2103ca103bb1c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c31ba8ba4c07e72620bd71753f2103ca103bb1c2"
      },
      {
        "sha": "aaf96c9a007ce06d7c69b7872041da05f7640301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaf96c9a007ce06d7c69b7872041da05f7640301",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaf96c9a007ce06d7c69b7872041da05f7640301"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 28,
      "deletions": 18
    },
    "files": [
      {
        "sha": "9a2bb5b2c745ae41537f3ffd4b2ebb494d98a8ac",
        "filename": "src/cachemultimap.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/714f9a4f0d574bb4930a1809b6dd56749273fddb/src/cachemultimap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/714f9a4f0d574bb4930a1809b6dd56749273fddb/src/cachemultimap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemultimap.h?ref=714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "patch": "@@ -89,7 +89,7 @@ class CacheMultiMap\n         return nCurrentSize;\n     }\n \n-    void Insert(const K& key, const V& value)\n+    bool Insert(const K& key, const V& value)\n     {\n         if(nCurrentSize == nMaxSize) {\n             PruneLast();\n@@ -102,14 +102,15 @@ class CacheMultiMap\n \n         if(mapIt.count(value) > 0) {\n             // Don't insert duplicates\n-            return;\n+            return false;\n         }\n \n         listItems.push_front(item_t(key, value));\n         list_it lit = listItems.begin();\n \n         mapIt[value] = lit;\n         ++nCurrentSize;\n+        return true;\n     }\n \n     bool HasKey(const K& key) const"
      },
      {
        "sha": "f8f616473d065e22b22bd3a93effe8d6789efda0",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 16,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/714f9a4f0d574bb4930a1809b6dd56749273fddb/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/714f9a4f0d574bb4930a1809b6dd56749273fddb/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "patch": "@@ -223,7 +223,6 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         CGovernanceException exception;\n         if(ProcessVote(pfrom, vote, exception)) {\n             LogPrint(\"gobject\", \"CGovernanceManager -- Accepted vote\\n\");\n-            vote.Relay();\n         }\n         else {\n             LogPrint(\"gobject\", \"CGovernanceManager -- Rejected vote, error = %s\\n\", exception.what());\n@@ -619,14 +618,18 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n     uint256 nHashGovobj = vote.GetParentHash();\n     object_m_it it = mapObjects.find(nHashGovobj);\n     if(it == mapObjects.end()) {\n-        mapOrphanVotes.Insert(nHashGovobj, vote);\n-        RequestGovernanceObject(pfrom, nHashGovobj);\n         std::ostringstream ostr;\n         ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \"\n-                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n-                << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n-        LogPrintf(ostr.str().c_str());\n+             << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+             << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        if(mapOrphanVotes.Insert(nHashGovobj, vote)) {\n+            RequestGovernanceObject(pfrom, nHashGovobj);\n+            LogPrintf(ostr.str().c_str());\n+        }\n+        else {\n+            LogPrint(\"gobject\", ostr.str().c_str());\n+        }\n         return false;\n     }\n \n@@ -638,6 +641,8 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n         if(govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n             mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());\n         }\n+\n+        vote.Relay();\n     }\n     return fOk;\n }\n@@ -813,14 +818,18 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n {\n     int nMNIndex = governance.GetMasternodeIndex(vote.GetVinMasternode());\n     if(nMNIndex < 0) {\n-        mapOrphanVotes.Insert(vote.GetVinMasternode(), vote);\n-        if(pfrom) {\n-            mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n-        }\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Masternode index not found\\n\";\n-        LogPrintf(ostr.str().c_str());\n+        ostr << \"CGovernanceObject::ProcessVote -- Masternode index not found\\n\";\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        if(mapOrphanVotes.Insert(vote.GetVinMasternode(), vote)) {\n+            if(pfrom) {\n+                mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n+            }\n+            LogPrintf(ostr.str().c_str());\n+        }\n+        else {\n+            LogPrint(\"gobject\", ostr.str().c_str());\n+        }\n         return false;\n     }\n \n@@ -832,14 +841,14 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     vote_signal_enum_t eSignal = vote.GetSignal();\n     if(eSignal == VOTE_SIGNAL_NONE) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Vote signal: none\" << \"\\n\";\n+        ostr << \"CGovernanceObject::ProcessVote -- Vote signal: none\" << \"\\n\";\n         LogPrint(\"gobject\", ostr.str().c_str());\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n         return false;\n     }\n     if(eSignal > MAX_SUPPORTED_VOTE_SIGNAL) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Unsupported vote signal:\" << CGovernanceVoting::ConvertSignalToString(vote.GetSignal()) << \"\\n\";\n+        ostr << \"CGovernanceObject::ProcessVote -- Unsupported vote signal:\" << CGovernanceVoting::ConvertSignalToString(vote.GetSignal()) << \"\\n\";\n         LogPrintf(ostr.str().c_str());\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n         return false;\n@@ -853,7 +862,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     int64_t nTimeDelta = nNow - voteInstance.nTime;\n     if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Masternode voting too often \"\n+        ostr << \"CGovernanceObject::ProcessVote -- Masternode voting too often \"\n                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n                 << \", governance object hash = \" << GetHash().ToString()\n                 << \", time delta = \" << nTimeDelta << \"\\n\";\n@@ -864,7 +873,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     // Finally check that the vote is actually valid (done last because of cost of signature verification)\n     if(!vote.IsValid(true)) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::UpdateVote -- Invalid vote \"\n+        ostr << \"CGovernanceObject::ProcessVote -- Invalid vote \"\n                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n                 << \", governance object hash = \" << GetHash().ToString()\n                 << \", vote hash = \" << vote.GetHash().ToString() << \"\\n\";"
      }
    ]
  },
  {
    "sha": "a3277ea4227a44f5a36435d6cae7ea22cf6726b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzI3N2VhNDIyN2E0NGY1YTM2NDM1ZDZjYWU3ZWEyMmNmNjcyNmI3",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-11T21:07:28Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-15T02:12:55Z"
      },
      "message": "Set error string for unparseable objects",
      "tree": {
        "sha": "99305f0dbcc0d61c993357d396a9f5a7b97b6ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99305f0dbcc0d61c993357d396a9f5a7b97b6ece"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3277ea4227a44f5a36435d6cae7ea22cf6726b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3277ea4227a44f5a36435d6cae7ea22cf6726b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3277ea4227a44f5a36435d6cae7ea22cf6726b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3277ea4227a44f5a36435d6cae7ea22cf6726b7/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/714f9a4f0d574bb4930a1809b6dd56749273fddb"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cd28a05f6ac0db34f4a063d6f34b130c6532547b",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3277ea4227a44f5a36435d6cae7ea22cf6726b7/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3277ea4227a44f5a36435d6cae7ea22cf6726b7/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=a3277ea4227a44f5a36435d6cae7ea22cf6726b7",
        "patch": "@@ -1119,6 +1119,7 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n     }\n \n     if(fUnparsable) {\n+        strError = \"Object data unparseable\";\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "35a45097ed271b75a95f3c7714d46485df2f2211",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWE0NTA5N2VkMjcxYjc1YTk1ZjNjNzcxNGQ0NjQ4NWRmMmYyMjEx",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-11T20:47:04Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-15T02:13:08Z"
      },
      "message": "Added IsValidLocallyMethod overload which returns masternode status flag",
      "tree": {
        "sha": "06aeb293abb520efd9e9dcb3b61efacb38c0aad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06aeb293abb520efd9e9dcb3b61efacb38c0aad5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35a45097ed271b75a95f3c7714d46485df2f2211",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35a45097ed271b75a95f3c7714d46485df2f2211",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35a45097ed271b75a95f3c7714d46485df2f2211",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35a45097ed271b75a95f3c7714d46485df2f2211/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3277ea4227a44f5a36435d6cae7ea22cf6726b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3277ea4227a44f5a36435d6cae7ea22cf6726b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3277ea4227a44f5a36435d6cae7ea22cf6726b7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8368bb6a5167764e8ac505a4c290fa5bd5ddb550",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35a45097ed271b75a95f3c7714d46485df2f2211/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35a45097ed271b75a95f3c7714d46485df2f2211/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=35a45097ed271b75a95f3c7714d46485df2f2211",
        "patch": "@@ -1113,6 +1113,14 @@ void CGovernanceObject::UpdateLocalValidity(const CBlockIndex *pCurrentBlockInde\n \n bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral)\n {\n+    bool fMissingMasternode = false;\n+\n+    return IsValidLocally(pindex, strError, fMissingMasternode, fCheckCollateral);\n+}\n+\n+bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral)\n+{\n+    fMissingMasternode = false;\n     if(!pindex) {\n         strError = \"Tip is NULL\";\n         return true;\n@@ -1147,6 +1155,7 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n             std::string strOutpoint = vinMasternode.prevout.ToStringShort();\n             masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n             if(!infoMn.fInfoValid) {\n+                fMissingMasternode = true;\n                 strError = \"Masternode not found: \" + strOutpoint;\n                 return false;\n             }"
      },
      {
        "sha": "5431a98ab7965b35d059c46d7f26b0ea0833a6fa",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35a45097ed271b75a95f3c7714d46485df2f2211/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35a45097ed271b75a95f3c7714d46485df2f2211/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=35a45097ed271b75a95f3c7714d46485df2f2211",
        "patch": "@@ -481,6 +481,8 @@ class CGovernanceObject\n \n     bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral);\n \n+    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral);\n+\n     /// Check the collateral transaction for the budget proposal/finalized budget\n     bool IsCollateralValid(std::string& strError);\n "
      }
    ]
  },
  {
    "sha": "6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGViM2E2NWEzMzZkY2FkZDM0Y2FhOGViY2IxODQwYjgwYWVmM2Fj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-12T01:51:45Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-15T02:13:42Z"
      },
      "message": "Implemented missing masternode handling",
      "tree": {
        "sha": "fb6e6d948bbd4542d0a550fbc552b5ac5c9b6f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb6e6d948bbd4542d0a550fbc552b5ac5c9b6f24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35a45097ed271b75a95f3c7714d46485df2f2211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35a45097ed271b75a95f3c7714d46485df2f2211",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35a45097ed271b75a95f3c7714d46485df2f2211"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 46,
      "deletions": 1
    },
    "files": [
      {
        "sha": "691d680757737ac0d77071bf9d6c0d6de6629fd1",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 1,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
        "patch": "@@ -35,6 +35,7 @@ CGovernanceManager::CGovernanceManager()\n       nCachedBlockHeight(0),\n       mapObjects(),\n       mapSeenGovernanceObjects(),\n+      mapMasternodeOrphanObjects(),\n       mapVoteToObject(MAX_CACHE_SIZE),\n       mapInvalidVotes(MAX_CACHE_SIZE),\n       mapOrphanVotes(MAX_CACHE_SIZE),\n@@ -170,7 +171,15 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         std::string strError = \"\";\n         // CHECK OBJECT AGAINST LOCAL BLOCKCHAIN\n \n-        if(!govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n+        bool fMasternodeMissing = false;\n+        bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n+\n+        if(fMasternodeMissing) {\n+            mapMasternodeOrphanObjects.insert(std::make_pair(govobj.GetHash(), govobj));\n+            LogPrint(\"gobject\", \"CGovernanceManager -- Missing masternode for: %s\\n\", strHash);\n+            // fIsValid must also be false here so we will return early in the next if block\n+        }\n+        if(!fIsValid) {\n             mapSeenGovernanceObjects.insert(std::make_pair(nHash, SEEN_OBJECT_ERROR_INVALID));\n             LogPrintf(\"MNGOVERNANCEOBJECT -- Governance object is invalid - %s\\n\", strError);\n             return;\n@@ -655,6 +664,37 @@ void CGovernanceManager::CheckMasternodeOrphanVotes()\n     }\n }\n \n+void CGovernanceManager::CheckMasternodeOrphanObjects()\n+{\n+    LOCK(cs);\n+    object_m_it it = mapMasternodeOrphanObjects.begin();\n+    while(it != mapMasternodeOrphanObjects.end()) {\n+        CGovernanceObject& govobj = it->second;\n+\n+        string strError;\n+        bool fMasternodeMissing = false;\n+        bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n+        if(!fIsValid) {\n+            if(!fMasternodeMissing) {\n+                mapMasternodeOrphanObjects.erase(it++);\n+            }\n+            else {\n+                ++it;\n+                continue;\n+            }\n+        }\n+\n+        if(AddGovernanceObject(govobj)) {\n+            LogPrintf(\"CGovernanceManager::CheckMasternodeOrphanObjects -- %s new\\n\", govobj.GetHash().ToString());\n+            govobj.Relay();\n+            mapMasternodeOrphanObjects.erase(it++);\n+        }\n+        else {\n+            ++it;\n+        }\n+    }\n+}\n+\n void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nHash)\n {\n     if(!pfrom) {"
      },
      {
        "sha": "7dab00f44b804935e5c2cd23ca3cef487774f1b0",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
        "patch": "@@ -120,6 +120,8 @@ class CGovernanceManager\n \n     count_m_t mapSeenGovernanceObjects;\n \n+    object_m_t mapMasternodeOrphanObjects;\n+\n     object_ref_cache_t mapVoteToObject;\n \n     vote_cache_t mapInvalidVotes;\n@@ -252,6 +254,8 @@ class CGovernanceManager\n \n     void CheckMasternodeOrphanVotes();\n \n+    void CheckMasternodeOrphanObjects();\n+\n private:\n     void RequestGovernanceObject(CNode* pfrom, const uint256& nHash);\n "
      },
      {
        "sha": "4054f4258f71b5b0f5a12d5a426079d809970b59",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
        "patch": "@@ -1536,6 +1536,7 @@ void CMasternodeMan::NotifyMasternodeUpdates()\n     }\n \n     if(fMasternodesAddedLocal) {\n+        governance.CheckMasternodeOrphanObjects();\n         governance.CheckMasternodeOrphanVotes();\n     }\n     if(fMasternodesRemovedLocal) {"
      }
    ]
  },
  {
    "sha": "c4c4f1dad721e71d59b40d0d65163265b8c3baf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGM0ZjFkYWQ3MjFlNzFkNTliNDBkMGQ2NTE2MzI2NWI4YzNiYWY1",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-15T02:27:05Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-15T02:27:05Z"
      },
      "message": "Ensure governance objects are still valid before relaying",
      "tree": {
        "sha": "204fa535610312a119455cb555f2644ae7fac788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/204fa535610312a119455cb555f2644ae7fac788"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4c4f1dad721e71d59b40d0d65163265b8c3baf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4c4f1dad721e71d59b40d0d65163265b8c3baf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4c4f1dad721e71d59b40d0d65163265b8c3baf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4c4f1dad721e71d59b40d0d65163265b8c3baf5/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6deb3a65a336dcadd34caa8ebcb1840b80aef3ac"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "556a75704617385a54f698bd4a6e39414d0834b1",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4c4f1dad721e71d59b40d0d65163265b8c3baf5/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4c4f1dad721e71d59b40d0d65163265b8c3baf5/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=c4c4f1dad721e71d59b40d0d65163265b8c3baf5",
        "patch": "@@ -551,7 +551,10 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n \n             CGovernanceObject& govobj = it->second;\n \n-            if(govobj.IsSetCachedValid() && (nProp == uint256() || h == nProp)) {\n+            std::string strError;\n+            if(govobj.IsSetCachedValid() &&\n+               (nProp == uint256() || h == nProp) &&\n+               govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n                 // Push the inventory budget proposal message over to the other client\n                 pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n                 ++nInvCount;"
      }
    ]
  },
  {
    "sha": "c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDBmZGI1MjRhNGY5YWQ2N2NkMmY2NmM5YzhhNGU0YmEyMDE0ZTJi",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-15T13:23:49Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-15T13:23:49Z"
      },
      "message": "Added peer id to CGovernanceManager::Sync log message",
      "tree": {
        "sha": "e4651cf4a6d655012a78ff73b408a54bbb314d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4651cf4a6d655012a78ff73b408a54bbb314d4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4c4f1dad721e71d59b40d0d65163265b8c3baf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4c4f1dad721e71d59b40d0d65163265b8c3baf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4c4f1dad721e71d59b40d0d65163265b8c3baf5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3656fa707750bd870c386d978669bd287bedc705",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b",
        "patch": "@@ -572,7 +572,7 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n     }\n \n     pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nInvCount);\n-    LogPrintf(\"CGovernanceManager::Sync -- sent %d items\\n\", nInvCount);\n+    LogPrintf(\"CGovernanceManager::Sync -- sent %d items, peer=%d\\n\", nInvCount, pfrom->id);\n }\n \n void CGovernanceManager::SyncParentObjectByVote(CNode* pfrom, const CGovernanceVote& vote)"
      }
    ]
  },
  {
    "sha": "544d220819bea7d47822b877fd7228dcbf19d418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDRkMjIwODE5YmVhN2Q0NzgyMmI4NzdmZDcyMjhkY2JmMTlkNDE4",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-11-15T22:38:04Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-15T22:38:04Z"
      },
      "message": "[UI] TrayIcon + TrayIconMenu for OSX",
      "tree": {
        "sha": "99ab36505ddb4a64569e13022b763a9a4b9a47cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99ab36505ddb4a64569e13022b763a9a4b9a47cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/544d220819bea7d47822b877fd7228dcbf19d418",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544d220819bea7d47822b877fd7228dcbf19d418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/544d220819bea7d47822b877fd7228dcbf19d418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544d220819bea7d47822b877fd7228dcbf19d418/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/714f9a4f0d574bb4930a1809b6dd56749273fddb"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 0,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2721a2fdf4f3823e0984dd759dea9df91439cf81",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/544d220819bea7d47822b877fd7228dcbf19d418/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/544d220819bea7d47822b877fd7228dcbf19d418/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=544d220819bea7d47822b877fd7228dcbf19d418",
        "patch": "@@ -653,20 +653,16 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n \n void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n {\n-#ifndef Q_OS_MAC\n     trayIcon = new QSystemTrayIcon(this);\n     QString toolTip = tr(\"Dash Core client\") + \" \" + networkStyle->getTitleAddText();\n     trayIcon->setToolTip(toolTip);\n     trayIcon->setIcon(networkStyle->getTrayAndWindowIcon());\n     trayIcon->show();\n-#endif\n-\n     notificator = new Notificator(QApplication::applicationName(), trayIcon, this);\n }\n \n void BitcoinGUI::createTrayIconMenu()\n {\n-#ifndef Q_OS_MAC\n     // return if trayIcon is unset (only on non-Mac OSes)\n     if (!trayIcon)\n         return;\n@@ -676,12 +672,6 @@ void BitcoinGUI::createTrayIconMenu()\n \n     connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),\n             this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));\n-#else\n-    // Note: On Mac, the dock icon is used to provide the tray's functionality.\n-    MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n-    dockIconHandler->setMainWindow((QMainWindow *)this);\n-    trayIconMenu = dockIconHandler->dockMenu();\n-#endif\n \n     // Configuration of the tray icon (or dock icon) icon menu\n     trayIconMenu->addAction(toggleHideAction);\n@@ -702,10 +692,8 @@ void BitcoinGUI::createTrayIconMenu()\n     trayIconMenu->addAction(openConfEditorAction);\n     trayIconMenu->addAction(openMNConfEditorAction);\n     trayIconMenu->addAction(showBackupsAction);\n-#ifndef Q_OS_MAC // This is built-in on Mac\n     trayIconMenu->addSeparator();\n     trayIconMenu->addAction(quitAction);\n-#endif\n }\n \n #ifndef Q_OS_MAC"
      }
    ]
  },
  {
    "sha": "087d3d22df16131417d27f695b42d0a226fe3189",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODdkM2QyMmRmMTYxMzE0MTdkMjdmNjk1YjQyZDBhMjI2ZmUzMTg5",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T02:09:37Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T02:09:37Z"
      },
      "message": "Remove unused CMasternodeMan method and argument",
      "tree": {
        "sha": "9f4431f892fa2849015da107641bf2583792e11d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f4431f892fa2849015da107641bf2583792e11d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/087d3d22df16131417d27f695b42d0a226fe3189",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087d3d22df16131417d27f695b42d0a226fe3189",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/087d3d22df16131417d27f695b42d0a226fe3189",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087d3d22df16131417d27f695b42d0a226fe3189/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/714f9a4f0d574bb4930a1809b6dd56749273fddb"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 3,
      "deletions": 22
    },
    "files": [
      {
        "sha": "977a37487ef5a95b9a26760075028f2c23cad957",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 19,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087d3d22df16131417d27f695b42d0a226fe3189/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087d3d22df16131417d27f695b42d0a226fe3189/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=087d3d22df16131417d27f695b42d0a226fe3189",
        "patch": "@@ -167,7 +167,7 @@ void CMasternodeMan::Check()\n     }\n }\n \n-void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n+void CMasternodeMan::CheckAndRemove()\n {\n     LogPrintf(\"CMasternodeMan::CheckAndRemove\\n\");\n \n@@ -182,9 +182,7 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n             bool fRemove =  // If it's marked to be removed from the list by CMasternode::Check for whatever reason ...\n                     (*it).nActiveState == CMasternode::MASTERNODE_REMOVE ||\n                     // or collateral was spent ...\n-                    (*it).nActiveState == CMasternode::MASTERNODE_OUTPOINT_SPENT ||\n-                    // or we were asked to remove exired entries ...\n-                    (fForceExpiredRemoval && (*it).nActiveState == CMasternode::MASTERNODE_EXPIRED);\n+                    (*it).nActiveState == CMasternode::MASTERNODE_OUTPOINT_SPENT;\n \n             if (fRemove) {\n                 LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing Masternode: %s  addr=%s  %i now\\n\", (*it).GetStatus(), (*it).addr.ToString(), size() - 1);\n@@ -1235,21 +1233,6 @@ void CMasternodeMan::ProcessVerifyBroadcast(CNode* pnode, const CMasternodeVerif\n     }\n }\n \n-void CMasternodeMan::Remove(CTxIn vin)\n-{\n-    LOCK(cs);\n-\n-    std::vector<CMasternode>::iterator it = vMasternodes.begin();\n-    while(it != vMasternodes.end()) {\n-        if((*it).vin == vin) {\n-            LogPrint(\"masternode\", \"CMasternodeMan::Remove -- Removing Masternode: %s  addr=%s, %i now\\n\", vin.prevout.ToStringShort(), (*it).addr.ToString(), size() - 1);\n-            vMasternodes.erase(it);\n-            break;\n-        }\n-        ++it;\n-    }\n-}\n-\n std::string CMasternodeMan::ToString() const\n {\n     std::ostringstream info;"
      },
      {
        "sha": "61c5c81448c4031f094c0d61c433792641bf4954",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087d3d22df16131417d27f695b42d0a226fe3189/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087d3d22df16131417d27f695b42d0a226fe3189/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=087d3d22df16131417d27f695b42d0a226fe3189",
        "patch": "@@ -194,7 +194,7 @@ class CMasternodeMan\n     void Check();\n \n     /// Check all Masternodes and remove inactive\n-    void CheckAndRemove(bool fForceExpiredRemoval = false);\n+    void CheckAndRemove();\n \n     /// Clear Masternode vector\n     void Clear();\n@@ -297,8 +297,6 @@ class CMasternodeMan\n \n     std::string ToString() const;\n \n-    void Remove(CTxIn vin);\n-\n     int GetEstimatedMasternodes(int nBlock);\n \n     /// Update masternode list and maps using provided CMasternodeBroadcast"
      }
    ]
  },
  {
    "sha": "ad0e3514c2652e430f6ede720e831816ad5dfdaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDBlMzUxNGMyNjUyZTQzMGY2ZWRlNzIwZTgzMTgxNmFkNWRmZGFm",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T02:31:14Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T02:31:14Z"
      },
      "message": "Added indexMasternodes to CMasternodeMan::Clear()",
      "tree": {
        "sha": "a2822b18fda1310eda5d537775f013a70134a3f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2822b18fda1310eda5d537775f013a70134a3f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad0e3514c2652e430f6ede720e831816ad5dfdaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad0e3514c2652e430f6ede720e831816ad5dfdaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad0e3514c2652e430f6ede720e831816ad5dfdaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad0e3514c2652e430f6ede720e831816ad5dfdaf/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "087d3d22df16131417d27f695b42d0a226fe3189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087d3d22df16131417d27f695b42d0a226fe3189",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/087d3d22df16131417d27f695b42d0a226fe3189"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ce62e093ad72e0e3783b1ecf58a8b6b9f4574059",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad0e3514c2652e430f6ede720e831816ad5dfdaf/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad0e3514c2652e430f6ede720e831816ad5dfdaf/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=ad0e3514c2652e430f6ede720e831816ad5dfdaf",
        "patch": "@@ -295,6 +295,8 @@ void CMasternodeMan::Clear()\n     mapSeenMasternodePing.clear();\n     nDsqCount = 0;\n     nLastWatchdogVoteTime = 0;\n+    indexMasternodes.Clear();\n+    indexMasternodesOld.Clear();\n }\n \n int CMasternodeMan::CountMasternodes(int nProtocolVersion)"
      }
    ]
  },
  {
    "sha": "426051687d9ed17073949bab744a68e3a91df2c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjYwNTE2ODdkOWVkMTcwNzM5NDliYWI3NDRhNjhlM2E5MWRmMmM3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-16T08:28:40Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T08:28:40Z"
      },
      "message": "Merge pull request #1141 from tgflynn/v0.12.1.x-gov-mn-sync-fix-pr-2\n\nMasternode syncing fix",
      "tree": {
        "sha": "e4651cf4a6d655012a78ff73b408a54bbb314d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4651cf4a6d655012a78ff73b408a54bbb314d4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/426051687d9ed17073949bab744a68e3a91df2c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/426051687d9ed17073949bab744a68e3a91df2c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/426051687d9ed17073949bab744a68e3a91df2c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/426051687d9ed17073949bab744a68e3a91df2c7/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/714f9a4f0d574bb4930a1809b6dd56749273fddb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/714f9a4f0d574bb4930a1809b6dd56749273fddb"
      },
      {
        "sha": "c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c00fdb524a4f9ad67cd2f66c9c8a4e4ba2014e2b"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 63,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3656fa707750bd870c386d978669bd287bedc705",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 3,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/426051687d9ed17073949bab744a68e3a91df2c7/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/426051687d9ed17073949bab744a68e3a91df2c7/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=426051687d9ed17073949bab744a68e3a91df2c7",
        "patch": "@@ -35,6 +35,7 @@ CGovernanceManager::CGovernanceManager()\n       nCachedBlockHeight(0),\n       mapObjects(),\n       mapSeenGovernanceObjects(),\n+      mapMasternodeOrphanObjects(),\n       mapVoteToObject(MAX_CACHE_SIZE),\n       mapInvalidVotes(MAX_CACHE_SIZE),\n       mapOrphanVotes(MAX_CACHE_SIZE),\n@@ -170,7 +171,15 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         std::string strError = \"\";\n         // CHECK OBJECT AGAINST LOCAL BLOCKCHAIN\n \n-        if(!govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n+        bool fMasternodeMissing = false;\n+        bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n+\n+        if(fMasternodeMissing) {\n+            mapMasternodeOrphanObjects.insert(std::make_pair(govobj.GetHash(), govobj));\n+            LogPrint(\"gobject\", \"CGovernanceManager -- Missing masternode for: %s\\n\", strHash);\n+            // fIsValid must also be false here so we will return early in the next if block\n+        }\n+        if(!fIsValid) {\n             mapSeenGovernanceObjects.insert(std::make_pair(nHash, SEEN_OBJECT_ERROR_INVALID));\n             LogPrintf(\"MNGOVERNANCEOBJECT -- Governance object is invalid - %s\\n\", strError);\n             return;\n@@ -542,7 +551,10 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n \n             CGovernanceObject& govobj = it->second;\n \n-            if(govobj.IsSetCachedValid() && (nProp == uint256() || h == nProp)) {\n+            std::string strError;\n+            if(govobj.IsSetCachedValid() &&\n+               (nProp == uint256() || h == nProp) &&\n+               govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n                 // Push the inventory budget proposal message over to the other client\n                 pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n                 ++nInvCount;\n@@ -560,7 +572,7 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n     }\n \n     pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nInvCount);\n-    LogPrintf(\"CGovernanceManager::Sync -- sent %d items\\n\", nInvCount);\n+    LogPrintf(\"CGovernanceManager::Sync -- sent %d items, peer=%d\\n\", nInvCount, pfrom->id);\n }\n \n void CGovernanceManager::SyncParentObjectByVote(CNode* pfrom, const CGovernanceVote& vote)\n@@ -655,6 +667,37 @@ void CGovernanceManager::CheckMasternodeOrphanVotes()\n     }\n }\n \n+void CGovernanceManager::CheckMasternodeOrphanObjects()\n+{\n+    LOCK(cs);\n+    object_m_it it = mapMasternodeOrphanObjects.begin();\n+    while(it != mapMasternodeOrphanObjects.end()) {\n+        CGovernanceObject& govobj = it->second;\n+\n+        string strError;\n+        bool fMasternodeMissing = false;\n+        bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n+        if(!fIsValid) {\n+            if(!fMasternodeMissing) {\n+                mapMasternodeOrphanObjects.erase(it++);\n+            }\n+            else {\n+                ++it;\n+                continue;\n+            }\n+        }\n+\n+        if(AddGovernanceObject(govobj)) {\n+            LogPrintf(\"CGovernanceManager::CheckMasternodeOrphanObjects -- %s new\\n\", govobj.GetHash().ToString());\n+            govobj.Relay();\n+            mapMasternodeOrphanObjects.erase(it++);\n+        }\n+        else {\n+            ++it;\n+        }\n+    }\n+}\n+\n void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nHash)\n {\n     if(!pfrom) {\n@@ -1113,12 +1156,21 @@ void CGovernanceObject::UpdateLocalValidity(const CBlockIndex *pCurrentBlockInde\n \n bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral)\n {\n+    bool fMissingMasternode = false;\n+\n+    return IsValidLocally(pindex, strError, fMissingMasternode, fCheckCollateral);\n+}\n+\n+bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral)\n+{\n+    fMissingMasternode = false;\n     if(!pindex) {\n         strError = \"Tip is NULL\";\n         return true;\n     }\n \n     if(fUnparsable) {\n+        strError = \"Object data unparseable\";\n         return false;\n     }\n \n@@ -1146,6 +1198,7 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n             std::string strOutpoint = vinMasternode.prevout.ToStringShort();\n             masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n             if(!infoMn.fInfoValid) {\n+                fMissingMasternode = true;\n                 strError = \"Masternode not found: \" + strOutpoint;\n                 return false;\n             }"
      },
      {
        "sha": "7dab00f44b804935e5c2cd23ca3cef487774f1b0",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/426051687d9ed17073949bab744a68e3a91df2c7/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/426051687d9ed17073949bab744a68e3a91df2c7/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=426051687d9ed17073949bab744a68e3a91df2c7",
        "patch": "@@ -120,6 +120,8 @@ class CGovernanceManager\n \n     count_m_t mapSeenGovernanceObjects;\n \n+    object_m_t mapMasternodeOrphanObjects;\n+\n     object_ref_cache_t mapVoteToObject;\n \n     vote_cache_t mapInvalidVotes;\n@@ -252,6 +254,8 @@ class CGovernanceManager\n \n     void CheckMasternodeOrphanVotes();\n \n+    void CheckMasternodeOrphanObjects();\n+\n private:\n     void RequestGovernanceObject(CNode* pfrom, const uint256& nHash);\n \n@@ -481,6 +485,8 @@ class CGovernanceObject\n \n     bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral);\n \n+    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral);\n+\n     /// Check the collateral transaction for the budget proposal/finalized budget\n     bool IsCollateralValid(std::string& strError);\n "
      },
      {
        "sha": "4054f4258f71b5b0f5a12d5a426079d809970b59",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/426051687d9ed17073949bab744a68e3a91df2c7/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/426051687d9ed17073949bab744a68e3a91df2c7/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=426051687d9ed17073949bab744a68e3a91df2c7",
        "patch": "@@ -1536,6 +1536,7 @@ void CMasternodeMan::NotifyMasternodeUpdates()\n     }\n \n     if(fMasternodesAddedLocal) {\n+        governance.CheckMasternodeOrphanObjects();\n         governance.CheckMasternodeOrphanVotes();\n     }\n     if(fMasternodesRemovedLocal) {"
      }
    ]
  },
  {
    "sha": "a7dae03bfb35000afde6a3257297b0bee3b3e01d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2RhZTAzYmZiMzUwMDBhZmRlNmEzMjU3Mjk3YjBiZWUzYjNlMDFk",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-16T08:28:57Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T08:28:57Z"
      },
      "message": "Merge pull request #1143 from tgflynn/v0.12.1.x-mnodeman-cleanup\n\nCMasternodeMan cleanup",
      "tree": {
        "sha": "8ceda83562535155dc12fa0936e40be81ec5aeee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ceda83562535155dc12fa0936e40be81ec5aeee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7dae03bfb35000afde6a3257297b0bee3b3e01d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7dae03bfb35000afde6a3257297b0bee3b3e01d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7dae03bfb35000afde6a3257297b0bee3b3e01d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7dae03bfb35000afde6a3257297b0bee3b3e01d/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "426051687d9ed17073949bab744a68e3a91df2c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/426051687d9ed17073949bab744a68e3a91df2c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/426051687d9ed17073949bab744a68e3a91df2c7"
      },
      {
        "sha": "ad0e3514c2652e430f6ede720e831816ad5dfdaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad0e3514c2652e430f6ede720e831816ad5dfdaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad0e3514c2652e430f6ede720e831816ad5dfdaf"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 5,
      "deletions": 22
    },
    "files": [
      {
        "sha": "ecca9bfb4e4ab8f47309414ba4b9df1178640fda",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 19,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7dae03bfb35000afde6a3257297b0bee3b3e01d/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7dae03bfb35000afde6a3257297b0bee3b3e01d/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=a7dae03bfb35000afde6a3257297b0bee3b3e01d",
        "patch": "@@ -167,7 +167,7 @@ void CMasternodeMan::Check()\n     }\n }\n \n-void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n+void CMasternodeMan::CheckAndRemove()\n {\n     LogPrintf(\"CMasternodeMan::CheckAndRemove\\n\");\n \n@@ -182,9 +182,7 @@ void CMasternodeMan::CheckAndRemove(bool fForceExpiredRemoval)\n             bool fRemove =  // If it's marked to be removed from the list by CMasternode::Check for whatever reason ...\n                     (*it).nActiveState == CMasternode::MASTERNODE_REMOVE ||\n                     // or collateral was spent ...\n-                    (*it).nActiveState == CMasternode::MASTERNODE_OUTPOINT_SPENT ||\n-                    // or we were asked to remove exired entries ...\n-                    (fForceExpiredRemoval && (*it).nActiveState == CMasternode::MASTERNODE_EXPIRED);\n+                    (*it).nActiveState == CMasternode::MASTERNODE_OUTPOINT_SPENT;\n \n             if (fRemove) {\n                 LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing Masternode: %s  addr=%s  %i now\\n\", (*it).GetStatus(), (*it).addr.ToString(), size() - 1);\n@@ -297,6 +295,8 @@ void CMasternodeMan::Clear()\n     mapSeenMasternodePing.clear();\n     nDsqCount = 0;\n     nLastWatchdogVoteTime = 0;\n+    indexMasternodes.Clear();\n+    indexMasternodesOld.Clear();\n }\n \n int CMasternodeMan::CountMasternodes(int nProtocolVersion)\n@@ -1235,21 +1235,6 @@ void CMasternodeMan::ProcessVerifyBroadcast(CNode* pnode, const CMasternodeVerif\n     }\n }\n \n-void CMasternodeMan::Remove(CTxIn vin)\n-{\n-    LOCK(cs);\n-\n-    std::vector<CMasternode>::iterator it = vMasternodes.begin();\n-    while(it != vMasternodes.end()) {\n-        if((*it).vin == vin) {\n-            LogPrint(\"masternode\", \"CMasternodeMan::Remove -- Removing Masternode: %s  addr=%s, %i now\\n\", vin.prevout.ToStringShort(), (*it).addr.ToString(), size() - 1);\n-            vMasternodes.erase(it);\n-            break;\n-        }\n-        ++it;\n-    }\n-}\n-\n std::string CMasternodeMan::ToString() const\n {\n     std::ostringstream info;"
      },
      {
        "sha": "61c5c81448c4031f094c0d61c433792641bf4954",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7dae03bfb35000afde6a3257297b0bee3b3e01d/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7dae03bfb35000afde6a3257297b0bee3b3e01d/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=a7dae03bfb35000afde6a3257297b0bee3b3e01d",
        "patch": "@@ -194,7 +194,7 @@ class CMasternodeMan\n     void Check();\n \n     /// Check all Masternodes and remove inactive\n-    void CheckAndRemove(bool fForceExpiredRemoval = false);\n+    void CheckAndRemove();\n \n     /// Clear Masternode vector\n     void Clear();\n@@ -297,8 +297,6 @@ class CMasternodeMan\n \n     std::string ToString() const;\n \n-    void Remove(CTxIn vin);\n-\n     int GetEstimatedMasternodes(int nBlock);\n \n     /// Update masternode list and maps using provided CMasternodeBroadcast"
      }
    ]
  },
  {
    "sha": "51280852403017ac3010baaa0066e974f029ae10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTI4MDg1MjQwMzAxN2FjMzAxMGJhYWEwMDY2ZTk3NGYwMjlhZTEw",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-16T09:07:06Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T09:07:06Z"
      },
      "message": "Merge pull request #1134 from UdjinM6/PSFixes\n\nYet another PrivateSend refactoring/optimization - core part",
      "tree": {
        "sha": "4b15468a623c08f4f59b4fde3f3663e10e086da7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b15468a623c08f4f59b4fde3f3663e10e086da7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51280852403017ac3010baaa0066e974f029ae10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51280852403017ac3010baaa0066e974f029ae10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51280852403017ac3010baaa0066e974f029ae10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51280852403017ac3010baaa0066e974f029ae10/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7dae03bfb35000afde6a3257297b0bee3b3e01d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7dae03bfb35000afde6a3257297b0bee3b3e01d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7dae03bfb35000afde6a3257297b0bee3b3e01d"
      },
      {
        "sha": "4b4921d8ce226f539c58593db3562805aeb3c721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b4921d8ce226f539c58593db3562805aeb3c721",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b4921d8ce226f539c58593db3562805aeb3c721"
      }
    ],
    "stats": {
      "total": 349,
      "additions": 156,
      "deletions": 193
    },
    "files": [
      {
        "sha": "dd2f36907d869dc6a5f8608b30a94716946b8d7e",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 159,
        "changes": 295,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51280852403017ac3010baaa0066e974f029ae10/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51280852403017ac3010baaa0066e974f029ae10/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=51280852403017ac3010baaa0066e974f029ae10",
        "patch": "@@ -76,7 +76,10 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         }\n \n         PoolMessage nMessageID = MSG_NOERR;\n-        if(IsDenomCompatibleWithSession(nDenom, txCollateral, nMessageID)) {\n+\n+        bool fResult = nSessionID == 0  ? CreateNewSession(nDenom, txCollateral, nMessageID)\n+                                        : AddUserToExistingSession(nDenom, txCollateral, nMessageID);\n+        if(fResult) {\n             LogPrintf(\"DSACCEPT -- is compatible, please submit!\\n\");\n             PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n             return;\n@@ -263,9 +266,10 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n         if(AddEntry(entry, nMessageID)) {\n             PushStatus(pfrom, STATUS_ACCEPTED, nMessageID);\n             CheckPool();\n-            RelayStatus(STATUS_SET_STATE);\n+            RelayStatus(STATUS_ACCEPTED);\n         } else {\n             PushStatus(pfrom, STATUS_REJECTED, nMessageID);\n+            SetNull();\n         }\n \n     } else if(strCommand == NetMsgType::DSSTATUSUPDATE) {\n@@ -301,25 +305,23 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             return;\n         }\n \n-        if(nMsgStatusUpdate < STATUS_SET_STATE || nMsgStatusUpdate > STATUS_ACCEPTED) {\n+        if(nMsgStatusUpdate < STATUS_REJECTED || nMsgStatusUpdate > STATUS_ACCEPTED) {\n             LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgStatusUpdate is out of bounds: %d\\n\", nMsgStatusUpdate);\n             return;\n         }\n \n         if(nMsgMessageID < MSG_POOL_MIN || nMsgMessageID > MSG_POOL_MAX) {\n             LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- nMsgMessageID is out of bounds: %d\\n\", nMsgMessageID);\n+            if(pfrom->nVersion < 70203) nMsgMessageID = MSG_NOERR;\n             return;\n         }\n \n         LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- GetMessageByID: %s\\n\", GetMessageByID(PoolMessage(nMsgMessageID)));\n \n-        if(nMsgStatusUpdate == STATUS_SET_STATE && nSessionID != nMsgSessionID) {\n-            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- message doesn't match current PrivateSend session: nSessionID: %d nMsgSessionID: %d\\n\", nSessionID, nMsgSessionID);\n-            return;\n+        if(!CheckPoolStateUpdate(PoolState(nMsgState), nMsgEntriesCount, PoolStatusUpdate(nMsgStatusUpdate), PoolMessage(nMsgMessageID), nMsgSessionID)) {\n+            LogPrint(\"privatesend\", \"DSSTATUSUPDATE -- CheckPoolStateUpdate failed\\n\");\n         }\n \n-        UpdatePoolStateOnClient(PoolState(nMsgState), nMsgEntriesCount, PoolStatusUpdate(nMsgStatusUpdate), PoolMessage(nMsgMessageID), nMsgSessionID);\n-\n     } else if(strCommand == NetMsgType::DSSIGNFINALTX) {\n \n         if(pfrom->nVersion < MIN_PRIVATESEND_PEER_PROTO_VERSION) {\n@@ -344,13 +346,13 @@ void CDarksendPool::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataS\n             nTxInIndex++;\n             if(!AddScriptSig(txin)) {\n                 LogPrint(\"privatesend\", \"DSSIGNFINALTX -- AddScriptSig() failed at %d/%d, session: %d\\n\", nTxInIndex, nTxInsCount, nSessionID);\n+                RelayStatus(STATUS_REJECTED);\n                 return;\n             }\n             LogPrint(\"privatesend\", \"DSSIGNFINALTX -- AddScriptSig() %d/%d success\\n\", nTxInIndex, nTxInsCount);\n         }\n         // all is good\n         CheckPool();\n-        RelayStatus(STATUS_SET_STATE);\n \n     } else if(strCommand == NetMsgType::DSFINALTX) {\n \n@@ -456,13 +458,12 @@ void CDarksendPool::ResetPool()\n void CDarksendPool::SetNull()\n {\n     // MN side\n-    nSessionUsers = 0;\n     vecSessionCollaterals.clear();\n \n     // Client side\n     nEntriesCount = 0;\n     fLastEntryAccepted = false;\n-    fSessionFoundMasternode = false;\n+    pSubmittedToMasternode = NULL;\n \n     // Both sides\n     nState = POOL_STATE_IDLE;\n@@ -471,7 +472,7 @@ void CDarksendPool::SetNull()\n     vecEntries.clear();\n     finalMutableTransaction.vin.clear();\n     finalMutableTransaction.vout.clear();\n-    nLastTimeChanged = GetTimeMillis();\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n }\n \n //\n@@ -530,10 +531,6 @@ std::string CDarksendPool::GetStatus()\n             else if(nStatusMessageProgress % 70 <= 60) strSuffix = \"..\";\n             else if(nStatusMessageProgress % 70 <= 70) strSuffix = \"...\";\n             return strprintf(_(\"Found enough users, signing ( waiting %s )\"), strSuffix);\n-        case POOL_STATE_TRANSMISSION:\n-            return _(\"Transmitting final transaction.\");\n-        case POOL_STATE_FINALIZE_TRANSACTION:\n-            return _(\"Finalizing transaction.\");\n         case POOL_STATE_ERROR:\n             return _(\"PrivateSend request incomplete:\") + \" \" + strLastMessage + \" \" + _(\"Will retry...\");\n         case POOL_STATE_SUCCESS:\n@@ -551,33 +548,26 @@ void CDarksendPool::CheckPool()\n     if(fMasterNode) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- entries count %lu\\n\", GetEntriesCount());\n \n-        // If entries are full, then move on to the next phase\n+        // If entries are full, create finalized transaction\n         if(nState == POOL_STATE_ACCEPTING_ENTRIES && GetEntriesCount() >= GetMaxPoolTransactions()) {\n-            LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- TRYING TRANSACTION\\n\");\n-            SetState(POOL_STATE_FINALIZE_TRANSACTION);\n+            LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- FINALIZE TRANSACTIONS\\n\");\n+            CreateFinalTransaction();\n+            return;\n         }\n-    }\n \n-    // create the finalized transaction for distribution to the clients\n-    if(nState == POOL_STATE_FINALIZE_TRANSACTION) {\n-        CreateFinalTransaction();\n-    }\n-\n-    // If we have all of the signatures, try to compile the transaction\n-    if(fMasterNode && nState == POOL_STATE_SIGNING && IsSignaturesComplete()) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- SIGNING\\n\");\n-        SetState(POOL_STATE_TRANSMISSION);\n-        CommitFinalTransaction();\n+        // If we have all of the signatures, try to compile the transaction\n+        if(nState == POOL_STATE_SIGNING && IsSignaturesComplete()) {\n+            LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- SIGNING\\n\");\n+            CommitFinalTransaction();\n+            return;\n+        }\n     }\n \n     // reset if we're here for 10 seconds\n-    if((nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) && GetTimeMillis() - nLastTimeChanged >= 10000) {\n+    if((nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) && GetTimeMillis() - nTimeLastSuccessfulStep >= 10000) {\n         LogPrint(\"privatesend\", \"CDarksendPool::CheckPool -- timeout, RESETTING\\n\");\n         UnlockCoins();\n         SetNull();\n-        if(fMasterNode) {\n-            RelayStatus(STATUS_SET_STATE);\n-        }\n     }\n }\n \n@@ -626,9 +616,7 @@ void CDarksendPool::CommitFinalTransaction()\n         {\n             LogPrintf(\"CDarksendPool::CommitFinalTransaction -- AcceptToMemoryPool() error: Transaction not valid\\n\");\n             SetNull();\n-\n-            // not much we can do in this case\n-            SetState(POOL_STATE_ACCEPTING_ENTRIES);\n+            // not much we can do in this case, just notify clients\n             RelayCompletedTransaction(ERR_INVALID_TX);\n             return;\n         }\n@@ -657,7 +645,6 @@ void CDarksendPool::CommitFinalTransaction()\n     // Reset\n     LogPrint(\"privatesend\", \"CDarksendPool::CommitFinalTransaction -- COMPLETED -- RESETTING\\n\");\n     SetNull();\n-    RelayStatus(STATUS_SET_STATE);\n }\n \n //\n@@ -787,10 +774,6 @@ void CDarksendPool::CheckTimeout()\n     // catching hanging sessions\n     if(!fMasterNode) {\n         switch(nState) {\n-            case POOL_STATE_TRANSMISSION:\n-                LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Session complete -- Running CheckPool\\n\");\n-                CheckPool();\n-                break;\n             case POOL_STATE_ERROR:\n                 LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Pool error -- Running CheckPool\\n\");\n                 CheckPool();\n@@ -804,50 +787,18 @@ void CDarksendPool::CheckTimeout()\n         }\n     }\n \n-    int nLagTime = 0;\n-    if(!fMasterNode) nLagTime = 10000; //if we're the client, give the server a few extra seconds before resetting.\n-\n-    if(nState == POOL_STATE_ACCEPTING_ENTRIES || nState == POOL_STATE_QUEUE) {\n-        int c = 0;\n-\n-        // check for a timeout and reset if needed\n-        std::vector<CDarkSendEntry>::iterator it2 = vecEntries.begin();\n-        while(it2 != vecEntries.end()) {\n-            if((*it2).IsExpired()) {\n-                LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Removing expired entry: %d\\n\", c);\n-                it2 = vecEntries.erase(it2);\n-                if(GetEntriesCount() == 0) {\n-                    UnlockCoins();\n-                    SetNull();\n-                }\n-                if(fMasterNode) {\n-                    RelayStatus(STATUS_SET_STATE);\n-                }\n-            } else ++it2;\n-            c++;\n-        }\n-\n-        if(GetTimeMillis() - nLastTimeChanged >= PRIVATESEND_QUEUE_TIMEOUT*1000 + nLagTime) {\n-            UnlockCoins();\n-            SetNull();\n-        }\n-    } else if (GetTimeMillis() - nLastTimeChanged >= PRIVATESEND_QUEUE_TIMEOUT*1000 + nLagTime) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Session timed out (%ds) -- resetting\\n\", PRIVATESEND_QUEUE_TIMEOUT);\n-        UnlockCoins();\n-        SetNull();\n+    int nLagTime = fMasterNode ? 0 : 10000; // if we're the client, give the server a few extra seconds before resetting.\n+    int nTimeout = (nState == POOL_STATE_SIGNING) ? PRIVATESEND_SIGNING_TIMEOUT : PRIVATESEND_QUEUE_TIMEOUT;\n+    bool fTimeout = GetTimeMillis() - nTimeLastSuccessfulStep >= nTimeout*1000 + nLagTime;\n \n-        SetState(POOL_STATE_ERROR);\n-        strLastMessage = _(\"Session timed out.\");\n-    }\n-\n-    if(nState == POOL_STATE_SIGNING && GetTimeMillis() - nLastTimeChanged >= PRIVATESEND_SIGNING_TIMEOUT*1000 + nLagTime) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Session timed out (%ds) -- restting\\n\", PRIVATESEND_SIGNING_TIMEOUT);\n+    if(nState != POOL_STATE_IDLE && fTimeout) {\n+        LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- %s timed out (%ds) -- restting\\n\",\n+                (nState == POOL_STATE_SIGNING) ? \"Signing\" : \"Session\", nTimeout);\n         ChargeFees();\n         UnlockCoins();\n         SetNull();\n-\n         SetState(POOL_STATE_ERROR);\n-        strLastMessage = _(\"Signing timed out.\");\n+        strLastMessage = _(\"Session timed out.\");\n     }\n }\n \n@@ -980,22 +931,19 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n         if(txin.prevout.IsNull()) {\n             LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- input not valid!\\n\");\n             nMessageIDRet = ERR_INVALID_INPUT;\n-            nSessionUsers--;\n             return false;\n         }\n     }\n \n     if(!IsCollateralValid(entryNew.txCollateral)) {\n         LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- collateral not valid!\\n\");\n         nMessageIDRet = ERR_INVALID_COLLATERAL;\n-        nSessionUsers--;\n         return false;\n     }\n \n     if(GetEntriesCount() >= GetMaxPoolTransactions()) {\n         LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- entries is full!\\n\");\n         nMessageIDRet = ERR_ENTRIES_FULL;\n-        nSessionUsers--;\n         return false;\n     }\n \n@@ -1006,7 +954,6 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n                 if(txdsin.prevout == txin.prevout) {\n                     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- found in txin\\n\");\n                     nMessageIDRet = ERR_ALREADY_HAVE;\n-                    nSessionUsers--;\n                     return false;\n                 }\n             }\n@@ -1017,6 +964,7 @@ bool CDarksendPool::AddEntry(const CDarkSendEntry& entryNew, PoolMessage& nMessa\n \n     LogPrint(\"privatesend\", \"CDarksendPool::AddEntry -- adding entry\\n\");\n     nMessageIDRet = MSG_ENTRIES_ADDED;\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n \n     return true;\n }\n@@ -1093,7 +1041,7 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n         vecOutPointLocked.push_back(txin.prevout);\n \n     // we should already be connected to a Masternode\n-    if(!fSessionFoundMasternode) {\n+    if(!nSessionID) {\n         LogPrintf(\"CDarksendPool::SendDenominate -- No Masternode has been selected yet.\\n\");\n         UnlockCoins();\n         SetNull();\n@@ -1143,54 +1091,51 @@ bool CDarksendPool::SendDenominate(const std::vector<CTxIn>& vecTxIn, const std:\n     // store our entry for later use\n     CDarkSendEntry entry(vecTxIn, vecTxOut, txMyCollateral);\n     vecEntries.push_back(entry);\n-\n     RelayIn(entry);\n-    CheckPool();\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n \n     return true;\n }\n \n // Incoming message from Masternode updating the progress of mixing\n-bool CDarksendPool::UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew)\n+bool CDarksendPool::CheckPoolStateUpdate(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew)\n {\n     if(fMasterNode) return false;\n-    if(nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) return false;\n \n-    SetState(nStateNew);\n-    nEntriesCount = nEntriesCountNew;\n+    // do not update state when mixing client state is one of these\n+    if(nState == POOL_STATE_IDLE || nState == POOL_STATE_ERROR || nState == POOL_STATE_SUCCESS) return false;\n \n     strAutoDenomResult = _(\"Masternode:\") + \" \" + GetMessageByID(nMessageID);\n \n-    if(nStatusUpdate != STATUS_SET_STATE) {\n-        fLastEntryAccepted = nStatusUpdate;\n-        if(nStatusUpdate == STATUS_REJECTED) {\n-            SetState(POOL_STATE_ERROR);\n-            strLastMessage = GetMessageByID(nMessageID);\n-        }\n+    // if rejected at any state\n+    if(nStatusUpdate == STATUS_REJECTED) {\n+        LogPrintf(\"CDarksendPool::CheckPoolStateUpdate -- entry is rejected by Masternode\\n\");\n+        UnlockCoins();\n+        SetNull();\n+        SetState(POOL_STATE_ERROR);\n+        strLastMessage = GetMessageByID(nMessageID);\n+        return true;\n+    }\n \n-        if(nStatusUpdate == STATUS_ACCEPTED && nSessionIDNew != 0) {\n+    if(nStatusUpdate == STATUS_ACCEPTED && nState == nStateNew) {\n+        if(nStateNew == POOL_STATE_QUEUE && nSessionID == 0 && nSessionIDNew != 0) {\n+            // new session id should be set only in POOL_STATE_QUEUE state\n             nSessionID = nSessionIDNew;\n-            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- set nSessionID to %d\\n\", nSessionID);\n-            fSessionFoundMasternode = true;\n+            nTimeLastSuccessfulStep = GetTimeMillis();\n+            LogPrintf(\"CDarksendPool::CheckPoolStateUpdate -- set nSessionID to %d\\n\", nSessionID);\n+            return true;\n         }\n-    }\n-\n-    if(nStateNew == POOL_STATE_ACCEPTING_ENTRIES) {\n-        if(nStatusUpdate == STATUS_ACCEPTED) {\n-            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry accepted!\\n\");\n-            fSessionFoundMasternode = true;\n-            //wait for other users. Masternode will report when ready\n-            SetState(POOL_STATE_QUEUE);\n-        } else if(nStatusUpdate == STATUS_REJECTED && nSessionID == 0 && !fSessionFoundMasternode) {\n-            LogPrintf(\"CDarksendPool::UpdatePoolStateOnClient -- entry not accepted by Masternode\\n\");\n-            UnlockCoins();\n-            SetState(POOL_STATE_ACCEPTING_ENTRIES);\n-            DoAutomaticDenominating(); //try another Masternode\n+        else if(nStateNew == POOL_STATE_ACCEPTING_ENTRIES && nEntriesCount != nEntriesCountNew) {\n+            nEntriesCount = nEntriesCountNew;\n+            nTimeLastSuccessfulStep = GetTimeMillis();\n+            fLastEntryAccepted = true;\n+            LogPrintf(\"CDarksendPool::CheckPoolStateUpdate -- new entry accepted!\\n\");\n+            return true;\n         }\n-        if(fSessionFoundMasternode) return true;\n     }\n \n-    return true;\n+    // only situations above are allowed, fail in any other case\n+    return false;\n }\n \n //\n@@ -1274,8 +1219,10 @@ bool CDarksendPool::SignFinalTransaction(const CTransaction& finalTransactionNew\n     }\n \n     // push all of our signatures to the Masternode\n-    if(!sigs.empty() && pnode != NULL)\n-        pnode->PushMessage(NetMsgType::DSSIGNFINALTX, sigs);\n+    LogPrintf(\"CDarksendPool::SignFinalTransaction -- pushing sigs to the masternode, finalMutableTransaction=%s\", finalMutableTransaction.ToString());\n+    pnode->PushMessage(NetMsgType::DSSIGNFINALTX, sigs);\n+    SetState(POOL_STATE_SIGNING);\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n \n     return true;\n }\n@@ -1488,7 +1435,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n     if(!pwalletMain->HasCollateralInputs())\n         return !pwalletMain->HasCollateralInputs(false) && MakeCollateralAmounts();\n \n-    if(fSessionFoundMasternode) {\n+    if(nSessionID) {\n         strAutoDenomResult = _(\"Mixing in progress...\");\n         return false;\n     }\n@@ -1498,8 +1445,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n     UnlockCoins();\n     SetNull();\n \n-    SetState(POOL_STATE_ACCEPTING_ENTRIES);\n-\n     if(!fPrivateSendMultiSession && pwalletMain->GetDenominatedBalance(true) > 0) { //get denominated unconfirmed inputs\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- Found unconfirmed denominated outputs, will wait till they confirm to continue.\\n\");\n         strAutoDenomResult = _(\"Found unconfirmed denominated outputs, will wait till they confirm to continue.\");\n@@ -1544,6 +1489,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             // only try each queue once\n             if(dsq.fTried) continue;\n             dsq.fTried = true;\n+\n             if(dsq.IsExpired()) continue;\n \n             CMasternode* pmn = mnodeman.Find(dsq.vin);\n@@ -1574,7 +1520,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             vecMasternodesUsed.push_back(dsq.vin);\n \n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt to connect to masternode from queue, addr=%s\\n\", pmn->addr.ToString());\n-            nLastTimeChanged = GetTimeMillis();\n             // connect to Masternode and submit the queue request\n             CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n             if(pnode) {\n@@ -1585,6 +1530,8 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected (from queue), sending DSACCEPT: nSessionDenom: %d (%s), addr=%s\\n\",\n                         nSessionDenom, GetDenominationsToString(nSessionDenom), pnode->addr.ToString());\n                 strAutoDenomResult = _(\"Mixing in progress...\");\n+                SetState(POOL_STATE_QUEUE);\n+                nTimeLastSuccessfulStep = GetTimeMillis();\n                 return true;\n             } else {\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n@@ -1619,7 +1566,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             continue;\n         }\n \n-        nLastTimeChanged = GetTimeMillis();\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt %d connection to Masternode %s\\n\", nTries, pmn->addr.ToString());\n         CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n         if(pnode) {\n@@ -1637,6 +1583,8 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected, sending DSACCEPT, nSessionDenom: %d (%s)\\n\",\n                     nSessionDenom, GetDenominationsToString(nSessionDenom));\n             strAutoDenomResult = _(\"Mixing in progress...\");\n+            SetState(POOL_STATE_QUEUE);\n+            nTimeLastSuccessfulStep = GetTimeMillis();\n             return true;\n         } else {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n@@ -2027,63 +1975,98 @@ bool CDarksendPool::IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSO\n     return true;\n }\n \n-bool CDarksendPool::IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n+bool CDarksendPool::IsAcceptableDenomAndCollateral(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n {\n-    if(nDenom == 0) {\n+    if(!fMasterNode) return false;\n+\n+    // is denom even smth legit?\n+    std::vector<int> vecBits;\n+    if(!GetDenominationsBits(nDenom, vecBits)) {\n+        LogPrint(\"privatesend\", \"CDarksendPool::IsAcceptableDenomAndCollateral -- denom not valid!\\n\");\n         nMessageIDRet = ERR_DENOM;\n         return false;\n     }\n \n-    LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- nSessionDenom: %d (%s) nSessionUsers: %d\\n\",\n-            nSessionDenom, GetDenominationsToString(nSessionDenom), nSessionUsers);\n-\n+    // check collateral\n     if(!fUnitTest && !IsCollateralValid(txCollateral)) {\n-        LogPrint(\"privatesend\", \"CDarksendPool::IsDenomCompatibleWithSession -- collateral not valid!\\n\");\n+        LogPrint(\"privatesend\", \"CDarksendPool::IsAcceptableDenomAndCollateral -- collateral not valid!\\n\");\n         nMessageIDRet = ERR_INVALID_COLLATERAL;\n         return false;\n     }\n \n-    if(nSessionUsers < 0) nSessionUsers = 0;\n+    return true;\n+}\n \n-    if(nSessionUsers == 0) {\n-        nMessageIDRet = MSG_NOERR;\n-        nSessionID = GetInsecureRand(999999)+1;\n-        nSessionDenom = nDenom;\n-        nSessionUsers++;\n-        nLastTimeChanged = GetTimeMillis();\n+bool CDarksendPool::CreateNewSession(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n+{\n+    if(!fMasterNode || nSessionID != 0) return false;\n \n-        if(!fUnitTest) {\n-            //broadcast that I'm accepting entries, only if it's the first entry through\n-            CDarksendQueue dsq(nDenom, activeMasternode.vin, GetTime(), false);\n-            LogPrint(\"privatesend\", \"CDarksendPool::IsDenomCompatibleWithSession -- signing and relaying new queue: %s\\n\", dsq.ToString());\n-            dsq.Sign();\n-            dsq.Relay();\n-        }\n+    // new session can only be started in idle mode\n+    if(nState != POOL_STATE_IDLE) {\n+        nMessageIDRet = ERR_MODE;\n+        LogPrintf(\"CDarksendPool::CreateNewSession -- incompatible mode: nState=%d\\n\", nState);\n+        return false;\n+    }\n \n-        SetState(POOL_STATE_QUEUE);\n-        vecSessionCollaterals.push_back(txCollateral);\n-        return true;\n+    if(!IsAcceptableDenomAndCollateral(nDenom, txCollateral, nMessageIDRet)) {\n+        return false;\n+    }\n+\n+    // start new session\n+    nMessageIDRet = MSG_NOERR;\n+    nSessionID = GetInsecureRand(999999)+1;\n+    nSessionDenom = nDenom;\n+\n+    SetState(POOL_STATE_QUEUE);\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n+\n+    if(!fUnitTest) {\n+        //broadcast that I'm accepting entries, only if it's the first entry through\n+        CDarksendQueue dsq(nDenom, activeMasternode.vin, GetTime(), false);\n+        LogPrint(\"privatesend\", \"CDarksendPool::CreateNewSession -- signing and relaying new queue: %s\\n\", dsq.ToString());\n+        dsq.Sign();\n+        dsq.Relay();\n+        vecDarksendQueue.push_back(dsq);\n+    }\n+\n+    vecSessionCollaterals.push_back(txCollateral);\n+    LogPrintf(\"CDarksendPool::CreateNewSession -- new session created, nSessionID: %d  nSessionDenom: %d (%s)  vecSessionCollaterals.size(): %d\\n\",\n+            nSessionID, nSessionDenom, GetDenominationsToString(nSessionDenom), vecSessionCollaterals.size());\n+\n+    return true;\n+}\n+\n+bool CDarksendPool::AddUserToExistingSession(int nDenom, CTransaction txCollateral, PoolMessage& nMessageIDRet)\n+{\n+    if(!fMasterNode || nSessionID == 0 || IsSessionReady()) return false;\n+\n+    if(!IsAcceptableDenomAndCollateral(nDenom, txCollateral, nMessageIDRet)) {\n+        return false;\n     }\n \n-    if((nState != POOL_STATE_ACCEPTING_ENTRIES && nState != POOL_STATE_QUEUE) || nSessionUsers >= GetMaxPoolTransactions()) {\n-        if((nState != POOL_STATE_ACCEPTING_ENTRIES && nState != POOL_STATE_QUEUE)) nMessageIDRet = ERR_MODE;\n-        if(nSessionUsers >= GetMaxPoolTransactions()) nMessageIDRet = ERR_QUEUE_FULL;\n-        LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- incompatible mode, return false: nState status %d, nSessionUsers status %d\\n\", nState != POOL_STATE_ACCEPTING_ENTRIES, nSessionUsers >= GetMaxPoolTransactions());\n+    // we only add new users to an existing session when we are in queue mode\n+    if(nState != POOL_STATE_QUEUE) {\n+        nMessageIDRet = ERR_MODE;\n+        LogPrintf(\"CDarksendPool::AddUserToExistingSession -- incompatible mode: nState=%d\\n\", nState);\n         return false;\n     }\n \n     if(nDenom != nSessionDenom) {\n+        LogPrintf(\"CDarksendPool::AddUserToExistingSession -- incompatible denom %d (%s) != nSessionDenom %d (%s)\\n\",\n+                    nDenom, GetDenominationsToString(nDenom), nSessionDenom, GetDenominationsToString(nSessionDenom));\n         nMessageIDRet = ERR_DENOM;\n         return false;\n     }\n \n-    LogPrintf(\"CDarksendPool::IsDenomCompatibleWithSession -- compatible\\n\");\n+    // count new user as accepted to an existing session\n \n     nMessageIDRet = MSG_NOERR;\n-    nSessionUsers++;\n-    nLastTimeChanged = GetTimeMillis();\n+    nTimeLastSuccessfulStep = GetTimeMillis();\n     vecSessionCollaterals.push_back(txCollateral);\n \n+    LogPrintf(\"CDarksendPool::AddUserToExistingSession -- new user accepted, nSessionID: %d  nSessionDenom: %d (%s)  vecSessionCollaterals.size(): %d\\n\",\n+            nSessionID, nSessionDenom, GetDenominationsToString(nSessionDenom), vecSessionCollaterals.size());\n+\n     return true;\n }\n \n@@ -2423,12 +2406,6 @@ void CDarksendPool::SetState(PoolState nStateNew)\n     }\n \n     LogPrintf(\"CDarksendPool::SetState -- nState: %d, nStateNew: %d\\n\", nState, nStateNew);\n-    if(nState != nStateNew) {\n-        nLastTimeChanged = GetTimeMillis();\n-        if(fMasterNode) {\n-            RelayStatus(STATUS_SET_STATE);\n-        }\n-    }\n     nState = nStateNew;\n }\n "
      },
      {
        "sha": "4b72d7fd9a054244e16c20d9fa3bd78fd20be15e",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 20,
        "deletions": 34,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51280852403017ac3010baaa0066e974f029ae10/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51280852403017ac3010baaa0066e974f029ae10/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=51280852403017ac3010baaa0066e974f029ae10",
        "patch": "@@ -19,7 +19,7 @@ static const int PRIVATESEND_QUEUE_TIMEOUT          = 30;\n static const int PRIVATESEND_SIGNING_TIMEOUT        = 15;\n \n //! minimum peer version accepted by mixing pool\n-static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70202;\n+static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70203;\n \n static const CAmount PRIVATESEND_COLLATERAL         = 0.001 * COIN;\n static const CAmount PRIVATESEND_POOL_MAX           = 999.999 * COIN;\n@@ -95,21 +95,15 @@ class CDarkSendEntry\n     std::vector<CTxDSIn> vecTxDSIn;\n     std::vector<CTxDSOut> vecTxDSOut;\n     CTransaction txCollateral;\n-    CAmount nAmount; // depreciated since 12.1, it's used for backwards compatibility only and can be removed with future protocol bump\n-    int64_t nTimeAdded; // time in UTC milliseconds\n \n     CDarkSendEntry() :\n         vecTxDSIn(std::vector<CTxDSIn>()),\n         vecTxDSOut(std::vector<CTxDSOut>()),\n-        txCollateral(CTransaction()),\n-        nAmount(0),\n-        nTimeAdded(GetTime())\n+        txCollateral(CTransaction())\n         {}\n \n     CDarkSendEntry(const std::vector<CTxIn>& vecTxIn, const std::vector<CTxOut>& vecTxOut, const CTransaction& txCollateral) :\n-        txCollateral(txCollateral),\n-        nAmount(0),\n-        nTimeAdded(GetTime())\n+        txCollateral(txCollateral)\n     {\n         BOOST_FOREACH(CTxIn txin, vecTxIn)\n             vecTxDSIn.push_back(txin);\n@@ -122,14 +116,11 @@ class CDarkSendEntry\n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vecTxDSIn);\n-        READWRITE(nAmount);\n         READWRITE(txCollateral);\n         READWRITE(vecTxDSOut);\n     }\n \n     bool AddScriptSig(const CTxIn& txin);\n-\n-    bool IsExpired() { return GetTime() - nTimeAdded > PRIVATESEND_QUEUE_TIMEOUT; }\n };\n \n \n@@ -292,24 +283,20 @@ class CDarksendPool\n \n     // pool states\n     enum PoolState {\n-        POOL_STATE_UNKNOWN,\n         POOL_STATE_IDLE,\n         POOL_STATE_QUEUE,\n         POOL_STATE_ACCEPTING_ENTRIES,\n-        POOL_STATE_FINALIZE_TRANSACTION,\n         POOL_STATE_SIGNING,\n-        POOL_STATE_TRANSMISSION,\n         POOL_STATE_ERROR,\n         POOL_STATE_SUCCESS,\n-        POOL_STATE_MIN = POOL_STATE_UNKNOWN,\n+        POOL_STATE_MIN = POOL_STATE_IDLE,\n         POOL_STATE_MAX = POOL_STATE_SUCCESS\n     };\n \n     // status update message constants\n     enum PoolStatusUpdate {\n-        STATUS_SET_STATE        = -1,\n-        STATUS_REJECTED         = 0,\n-        STATUS_ACCEPTED         = 1\n+        STATUS_REJECTED,\n+        STATUS_ACCEPTED\n     };\n \n     mutable CCriticalSection cs_darksend;\n@@ -327,15 +314,13 @@ class CDarksendPool\n     std::vector<CDarkSendEntry> vecEntries; // Masternode/clients entries\n \n     PoolState nState; // should be one of the POOL_STATE_XXX values\n-    int64_t nLastTimeChanged; // last time the 'state' changed, in UTC milliseconds\n+    int64_t nTimeLastSuccessfulStep; // the time when last successful mixing step was performed, in UTC milliseconds\n \n     int nCachedLastSuccessBlock;\n     int nMinBlockSpacing; //required blocks between mixes\n     const CBlockIndex *pCurrentBlockIndex; // Keep track of current block index\n \n-    int nSessionID;\n-    int nSessionUsers; //N Users have said they'll join\n-    bool fSessionFoundMasternode; //If we've found a compatible Masternode\n+    int nSessionID; // 0 if no mixing session is active\n \n     int nEntriesCount;\n     bool fLastEntryAccepted;\n@@ -374,24 +359,26 @@ class CDarksendPool\n     /// Get the maximum number of transactions for the pool\n     int GetMaxPoolTransactions() { return Params().PoolMaxTransactions(); }\n \n-    /// Are these outputs compatible with other client in the pool?\n-    bool IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSOut>& vecTxDSOut);\n-    /// Is this nDenom compatible with other client in the pool?\n-    bool IsDenomCompatibleWithSession(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    /// Is this nDenom and txCollateral acceptable?\n+    bool IsAcceptableDenomAndCollateral(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    bool CreateNewSession(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    bool AddUserToExistingSession(int nDenom, CTransaction txCollateral, PoolMessage &nMessageIDRet);\n+    /// Do we have enough users to take entries?\n+    bool IsSessionReady() { return (int)vecSessionCollaterals.size() >= GetMaxPoolTransactions(); }\n \n     /// If the collateral is valid given by a client\n     bool IsCollateralValid(const CTransaction& txCollateral);\n     /// Check that all inputs are signed. (Are all inputs signed?)\n     bool IsSignaturesComplete();\n     /// Check to make sure a given input matches an input in the pool and its scriptSig is valid\n     bool IsInputScriptSigValid(const CTxIn& txin);\n+    /// Are these outputs compatible with other client in the pool?\n+    bool IsOutputsCompatibleWithSessionDenom(const std::vector<CTxDSOut>& vecTxDSOut);\n \n     bool IsDenomSkipped(CAmount nDenomValue) {\n         return std::find(vecDenominationsSkipped.begin(), vecDenominationsSkipped.end(), nDenomValue) != vecDenominationsSkipped.end();\n     }\n \n-    bool IsNull() const { return nState == POOL_STATE_ACCEPTING_ENTRIES && vecEntries.empty(); }\n-\n     /// Create denominations\n     bool CreateDenominated();\n     bool CreateDenominated(const CompactTallyItem& tallyItem);\n@@ -408,7 +395,7 @@ class CDarksendPool\n     bool SendDenominate(const std::vector<CTxIn>& vecTxIn, const std::vector<CTxOut>& vecTxOut);\n \n     /// Get Masternode updates about the progress of mixing\n-    bool UpdatePoolStateOnClient(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew=0);\n+    bool CheckPoolStateUpdate(PoolState nStateNew, int nEntriesCountNew, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID, int nSessionIDNew=0);\n     // Set the 'state' value, with some logging and capturing when the state changed\n     void SetState(PoolState nStateNew);\n \n@@ -421,9 +408,11 @@ class CDarksendPool\n     void RelayInAnon(std::vector<CTxIn>& vin, std::vector<CTxOut>& vout);\n     void RelayIn(const CDarkSendEntry& entry);\n     void PushStatus(CNode* pnode, PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID);\n-    void RelayStatus(PoolStatusUpdate nStatusUpdate = STATUS_SET_STATE, PoolMessage nMessageID = MSG_NOERR);\n+    void RelayStatus(PoolStatusUpdate nStatusUpdate, PoolMessage nMessageID = MSG_NOERR);\n     void RelayCompletedTransaction(PoolMessage nMessageID);\n \n+    void SetNull();\n+\n public:\n     CMasternode* pSubmittedToMasternode;\n     int nSessionDenom; //Users must submit an denom matching this\n@@ -466,7 +455,6 @@ class CDarksendPool\n     void SetMinBlockSpacing(int nMinBlockSpacingIn) { nMinBlockSpacing = nMinBlockSpacingIn; }\n \n     void ResetPool();\n-    void SetNull();\n \n     void UnlockCoins();\n \n@@ -481,8 +469,6 @@ class CDarksendPool\n \n     void CheckTimeout();\n     void CheckForCompleteQueue();\n-    /// Do we have enough users to take entries?\n-    bool IsSessionReady(){ return nSessionUsers >= GetMaxPoolTransactions(); }\n \n     /// Process a new block\n     void NewBlock();"
      }
    ]
  },
  {
    "sha": "47d09ac2db5aebf2a8fdf2c551569fc03449cea0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2QwOWFjMmRiNWFlYmYyYThmZGYyYzU1MTU2OWZjMDM0NDljZWEw",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T15:37:40Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T15:37:40Z"
      },
      "message": "Exit if cache files can't be read",
      "tree": {
        "sha": "c1d27261533503adaa559d96b4d03e5421668de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1d27261533503adaa559d96b4d03e5421668de1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47d09ac2db5aebf2a8fdf2c551569fc03449cea0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d09ac2db5aebf2a8fdf2c551569fc03449cea0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47d09ac2db5aebf2a8fdf2c551569fc03449cea0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d09ac2db5aebf2a8fdf2c551569fc03449cea0/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51280852403017ac3010baaa0066e974f029ae10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51280852403017ac3010baaa0066e974f029ae10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51280852403017ac3010baaa0066e974f029ae10"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2dbd8bb57dcbc3602a92a3cc4a0e812686d121b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47d09ac2db5aebf2a8fdf2c551569fc03449cea0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47d09ac2db5aebf2a8fdf2c551569fc03449cea0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=47d09ac2db5aebf2a8fdf2c551569fc03449cea0",
        "patch": "@@ -1860,19 +1860,27 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     uiInterface.InitMessage(_(\"Loading masternode cache...\"));\n     CFlatDB<CMasternodeMan> flatdb1(\"mncache.dat\", \"magicMasternodeCache\");\n-    flatdb1.Load(mnodeman);\n+    if(!flatdb1.Load(mnodeman)) {\n+        return InitError(\"Failed to load masternode cache from mncache.dat\");\n+    }\n \n     uiInterface.InitMessage(_(\"Loading masternode payment cache...\"));\n     CFlatDB<CMasternodePayments> flatdb2(\"mnpayments.dat\", \"magicMasternodePaymentsCache\");\n-    flatdb2.Load(mnpayments);\n+    if(!flatdb2.Load(mnpayments)) {\n+        return InitError(\"Failed to load masternode payments cache from mnpayments.dat\");\n+    }\n \n     CFlatDB<CGovernanceManager> flatdb3(\"governance.dat\", \"magicGovernanceCache\");\n-    flatdb3.Load(governance);\n+    if(!flatdb3.Load(governance)) {\n+        return InitError(\"Failed to load governance cache from governance.dat\");\n+    }\n     governance.ClearSeen();\n \n     uiInterface.InitMessage(_(\"Loading fullfiled requests cache...\"));\n     CFlatDB<CNetFulfilledRequestManager> flatdb4(\"netfulfilled.dat\", \"magicFulfilledCache\");\n-    flatdb4.Load(netfulfilledman);\n+    if(!flatdb4.Load(netfulfilledman)) {\n+        return InitError(\"Failed to load fulfilled requests cache from netfulfilled.dat\");\n+    }\n \n     // ********************************************************* Step 11c: update block tip in Dash modules\n "
      }
    ]
  },
  {
    "sha": "12691e15d453094a6623806f8bdcc912bead8c89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjY5MWUxNWQ0NTMwOTRhNjYyMzgwNmY4YmRjYzkxMmJlYWQ4Yzg5",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-11-16T21:04:26Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T21:04:26Z"
      },
      "message": "[UI] TrayIcon + TrayIconMenu for OSX (review changes)",
      "tree": {
        "sha": "e07edc3c4045788b80f00b8fbb7b7d2fd6362ee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e07edc3c4045788b80f00b8fbb7b7d2fd6362ee9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12691e15d453094a6623806f8bdcc912bead8c89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12691e15d453094a6623806f8bdcc912bead8c89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12691e15d453094a6623806f8bdcc912bead8c89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12691e15d453094a6623806f8bdcc912bead8c89/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "544d220819bea7d47822b877fd7228dcbf19d418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/544d220819bea7d47822b877fd7228dcbf19d418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/544d220819bea7d47822b877fd7228dcbf19d418"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2aebb9d34a67f84281bbb81c7454962a361bbf45",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12691e15d453094a6623806f8bdcc912bead8c89/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12691e15d453094a6623806f8bdcc912bead8c89/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=12691e15d453094a6623806f8bdcc912bead8c89",
        "patch": "@@ -126,6 +126,7 @@ class BitcoinGUI : public QMainWindow\n \n     QSystemTrayIcon *trayIcon;\n     QMenu *trayIconMenu;\n+    QMenu *dockIconMenu;\n     Notificator *notificator;\n     RPCConsole *rpcConsole;\n     HelpMessageDialog *helpMessageDialog;\n@@ -145,7 +146,7 @@ class BitcoinGUI : public QMainWindow\n     /** Create system tray icon and notification */\n     void createTrayIcon(const NetworkStyle *networkStyle);\n     /** Create system tray menu (or setup the dock menu) */\n-    void createTrayIconMenu();\n+    void createIconMenu(QMenu *pmenu);\n \n     /** Enable or disable all wallet-related actions */\n     void setWalletActionsEnabled(bool enabled);"
      }
    ]
  },
  {
    "sha": "9071136c9b8890439f30874a68985e5ded38701e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDcxMTM2YzliODg5MDQzOWYzMDg3NGE2ODk4NWU1ZGVkMzg3MDFl",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2016-11-16T21:04:33Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T21:04:33Z"
      },
      "message": "[UI] TrayIcon + TrayIconMenu for OSX (review changes)",
      "tree": {
        "sha": "a0dad0dbdaea4e5fec8f130b99763a4cffdf8e0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0dad0dbdaea4e5fec8f130b99763a4cffdf8e0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9071136c9b8890439f30874a68985e5ded38701e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9071136c9b8890439f30874a68985e5ded38701e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9071136c9b8890439f30874a68985e5ded38701e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9071136c9b8890439f30874a68985e5ded38701e/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12691e15d453094a6623806f8bdcc912bead8c89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12691e15d453094a6623806f8bdcc912bead8c89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12691e15d453094a6623806f8bdcc912bead8c89"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 50,
      "deletions": 32
    },
    "files": [
      {
        "sha": "ca91f689356bc551f2e245a0a73b1282c79843f2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 32,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9071136c9b8890439f30874a68985e5ded38701e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9071136c9b8890439f30874a68985e5ded38701e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9071136c9b8890439f30874a68985e5ded38701e",
        "patch": "@@ -110,6 +110,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n     showHelpMessageAction(0),\n     trayIcon(0),\n     trayIconMenu(0),\n+    dockIconMenu(0),\n     notificator(0),\n     rpcConsole(0),\n     helpMessageDialog(0),\n@@ -568,7 +569,25 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n     {\n         // Create system tray menu (or setup the dock menu) that late to prevent users from calling actions,\n         // while the client has not yet fully loaded\n-        createTrayIconMenu();\n+        if (trayIcon) {\n+            // do so only if trayIcon is already set\n+            trayIconMenu = new QMenu(this);\n+            trayIcon->setContextMenu(trayIconMenu);\n+\n+            connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),\n+                    this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));\n+\n+            createIconMenu(trayIconMenu);\n+\n+#ifdef Q_OS_MAC\n+            // Note: On Mac, the dock icon is also used to provide same functionality.\n+            MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n+            dockIconHandler->setMainWindow((QMainWindow *)this);\n+            dockIconMenu = dockIconHandler->dockMenu();\n+ \n+            createIconMenu(dockIconMenu);\n+#endif\n+        }\n \n         // Keep up to date with client\n         setNumConnections(clientModel->getNumConnections());\n@@ -601,6 +620,13 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n             // Disable context menu on tray icon\n             trayIconMenu->clear();\n         }\n+#ifdef Q_OS_MAC\n+        if(dockIconMenu)\n+        {\n+            // Disable context menu on dock icon\n+            dockIconMenu->clear();\n+        }\n+#endif\n     }\n }\n \n@@ -661,39 +687,31 @@ void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n     notificator = new Notificator(QApplication::applicationName(), trayIcon, this);\n }\n \n-void BitcoinGUI::createTrayIconMenu()\n+void BitcoinGUI::createIconMenu(QMenu *pmenu)\n {\n-    // return if trayIcon is unset (only on non-Mac OSes)\n-    if (!trayIcon)\n-        return;\n-\n-    trayIconMenu = new QMenu(this);\n-    trayIcon->setContextMenu(trayIconMenu);\n-\n-    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),\n-            this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));\n-\n     // Configuration of the tray icon (or dock icon) icon menu\n-    trayIconMenu->addAction(toggleHideAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(sendCoinsMenuAction);\n-    trayIconMenu->addAction(receiveCoinsMenuAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(signMessageAction);\n-    trayIconMenu->addAction(verifyMessageAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(optionsAction);\n-    trayIconMenu->addAction(openInfoAction);\n-    trayIconMenu->addAction(openRPCConsoleAction);\n-    trayIconMenu->addAction(openGraphAction);\n-    trayIconMenu->addAction(openPeersAction);\n-    trayIconMenu->addAction(openRepairAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(openConfEditorAction);\n-    trayIconMenu->addAction(openMNConfEditorAction);\n-    trayIconMenu->addAction(showBackupsAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(quitAction);\n+    pmenu->addAction(toggleHideAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(sendCoinsMenuAction);\n+    pmenu->addAction(receiveCoinsMenuAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(signMessageAction);\n+    pmenu->addAction(verifyMessageAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(optionsAction);\n+    pmenu->addAction(openInfoAction);\n+    pmenu->addAction(openRPCConsoleAction);\n+    pmenu->addAction(openGraphAction);\n+    pmenu->addAction(openPeersAction);\n+    pmenu->addAction(openRepairAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(openConfEditorAction);\n+    pmenu->addAction(openMNConfEditorAction);\n+    pmenu->addAction(showBackupsAction);\n+#ifndef Q_OS_MAC // This is built-in on Mac\n+    pmenu->addSeparator();\n+    pmenu->addAction(quitAction);\n+#endif\n }\n \n #ifndef Q_OS_MAC"
      }
    ]
  },
  {
    "sha": "112986edaba3a6acdda8426201d44ec159e16e59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTI5ODZlZGFiYTNhNmFjZGRhODQyNjIwMWQ0NGVjMTU5ZTE2ZTU5",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T22:28:10Z"
      },
      "committer": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-16T22:28:10Z"
      },
      "message": "Fix CheckMasternodeOrphanObjects so that iterator is incremented once per passage through the loop block",
      "tree": {
        "sha": "9277ae16a425710ad42bf576545df4170db3aa04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9277ae16a425710ad42bf576545df4170db3aa04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/112986edaba3a6acdda8426201d44ec159e16e59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/112986edaba3a6acdda8426201d44ec159e16e59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/112986edaba3a6acdda8426201d44ec159e16e59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/112986edaba3a6acdda8426201d44ec159e16e59/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51280852403017ac3010baaa0066e974f029ae10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51280852403017ac3010baaa0066e974f029ae10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51280852403017ac3010baaa0066e974f029ae10"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "db7f159f1301b95adcb8e734e55f68ca71257e50",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/112986edaba3a6acdda8426201d44ec159e16e59/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/112986edaba3a6acdda8426201d44ec159e16e59/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=112986edaba3a6acdda8426201d44ec159e16e59",
        "patch": "@@ -683,8 +683,8 @@ void CGovernanceManager::CheckMasternodeOrphanObjects()\n             }\n             else {\n                 ++it;\n-                continue;\n             }\n+            continue;\n         }\n \n         if(AddGovernanceObject(govobj)) {"
      }
    ]
  },
  {
    "sha": "0991a78cfce566bbe97e534e71c8603b8fea1c35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTkxYTc4Y2ZjZTU2NmJiZTk3ZTUzNGU3MWM4NjAzYjhmZWExYzM1",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-16T22:46:35Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T22:46:35Z"
      },
      "message": "Merge pull request #1147 from tgflynn/v0.12.1.x-mn-orphan-fix\n\nFix CheckMasternodeOrphanObjects iterator",
      "tree": {
        "sha": "9277ae16a425710ad42bf576545df4170db3aa04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9277ae16a425710ad42bf576545df4170db3aa04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0991a78cfce566bbe97e534e71c8603b8fea1c35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0991a78cfce566bbe97e534e71c8603b8fea1c35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0991a78cfce566bbe97e534e71c8603b8fea1c35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0991a78cfce566bbe97e534e71c8603b8fea1c35/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51280852403017ac3010baaa0066e974f029ae10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51280852403017ac3010baaa0066e974f029ae10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51280852403017ac3010baaa0066e974f029ae10"
      },
      {
        "sha": "112986edaba3a6acdda8426201d44ec159e16e59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/112986edaba3a6acdda8426201d44ec159e16e59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/112986edaba3a6acdda8426201d44ec159e16e59"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "db7f159f1301b95adcb8e734e55f68ca71257e50",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0991a78cfce566bbe97e534e71c8603b8fea1c35/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0991a78cfce566bbe97e534e71c8603b8fea1c35/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=0991a78cfce566bbe97e534e71c8603b8fea1c35",
        "patch": "@@ -683,8 +683,8 @@ void CGovernanceManager::CheckMasternodeOrphanObjects()\n             }\n             else {\n                 ++it;\n-                continue;\n             }\n+            continue;\n         }\n \n         if(AddGovernanceObject(govobj)) {"
      }
    ]
  },
  {
    "sha": "79af6fddea51a16eed0c23197f36da3cff644fb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWFmNmZkZGVhNTFhMTZlZWQwYzIzMTk3ZjM2ZGEzY2ZmNjQ0ZmI4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-16T22:49:19Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T22:49:19Z"
      },
      "message": "Merge pull request #1145 from tgflynn/v0.12.1.x-mn-startup-fix\n\nExit if cache files can't be read",
      "tree": {
        "sha": "b9dd544ae65dbaea192fcd4f683daf53945e637e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9dd544ae65dbaea192fcd4f683daf53945e637e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79af6fddea51a16eed0c23197f36da3cff644fb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79af6fddea51a16eed0c23197f36da3cff644fb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79af6fddea51a16eed0c23197f36da3cff644fb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79af6fddea51a16eed0c23197f36da3cff644fb8/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0991a78cfce566bbe97e534e71c8603b8fea1c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0991a78cfce566bbe97e534e71c8603b8fea1c35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0991a78cfce566bbe97e534e71c8603b8fea1c35"
      },
      {
        "sha": "47d09ac2db5aebf2a8fdf2c551569fc03449cea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47d09ac2db5aebf2a8fdf2c551569fc03449cea0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47d09ac2db5aebf2a8fdf2c551569fc03449cea0"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a2dbd8bb57dcbc3602a92a3cc4a0e812686d121b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79af6fddea51a16eed0c23197f36da3cff644fb8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79af6fddea51a16eed0c23197f36da3cff644fb8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=79af6fddea51a16eed0c23197f36da3cff644fb8",
        "patch": "@@ -1860,19 +1860,27 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     uiInterface.InitMessage(_(\"Loading masternode cache...\"));\n     CFlatDB<CMasternodeMan> flatdb1(\"mncache.dat\", \"magicMasternodeCache\");\n-    flatdb1.Load(mnodeman);\n+    if(!flatdb1.Load(mnodeman)) {\n+        return InitError(\"Failed to load masternode cache from mncache.dat\");\n+    }\n \n     uiInterface.InitMessage(_(\"Loading masternode payment cache...\"));\n     CFlatDB<CMasternodePayments> flatdb2(\"mnpayments.dat\", \"magicMasternodePaymentsCache\");\n-    flatdb2.Load(mnpayments);\n+    if(!flatdb2.Load(mnpayments)) {\n+        return InitError(\"Failed to load masternode payments cache from mnpayments.dat\");\n+    }\n \n     CFlatDB<CGovernanceManager> flatdb3(\"governance.dat\", \"magicGovernanceCache\");\n-    flatdb3.Load(governance);\n+    if(!flatdb3.Load(governance)) {\n+        return InitError(\"Failed to load governance cache from governance.dat\");\n+    }\n     governance.ClearSeen();\n \n     uiInterface.InitMessage(_(\"Loading fullfiled requests cache...\"));\n     CFlatDB<CNetFulfilledRequestManager> flatdb4(\"netfulfilled.dat\", \"magicFulfilledCache\");\n-    flatdb4.Load(netfulfilledman);\n+    if(!flatdb4.Load(netfulfilledman)) {\n+        return InitError(\"Failed to load fulfilled requests cache from netfulfilled.dat\");\n+    }\n \n     // ********************************************************* Step 11c: update block tip in Dash modules\n "
      }
    ]
  },
  {
    "sha": "7a005a911e4cbbfd066459519b4bae92a5baa953",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTAwNWE5MTFlNGNiYmZkMDY2NDU5NTE5YjRiYWU5MmE1YmFhOTUz",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-16T22:52:20Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-16T22:52:20Z"
      },
      "message": "Merge pull request #1142 from crowning-/patch-1\n\n[UI] TrayIcon + TrayIconMenu for OSX",
      "tree": {
        "sha": "df01e327b67bfcf6d50202884ba10f74f9e17004",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df01e327b67bfcf6d50202884ba10f74f9e17004"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a005a911e4cbbfd066459519b4bae92a5baa953",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a005a911e4cbbfd066459519b4bae92a5baa953",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a005a911e4cbbfd066459519b4bae92a5baa953",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a005a911e4cbbfd066459519b4bae92a5baa953/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79af6fddea51a16eed0c23197f36da3cff644fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79af6fddea51a16eed0c23197f36da3cff644fb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79af6fddea51a16eed0c23197f36da3cff644fb8"
      },
      {
        "sha": "9071136c9b8890439f30874a68985e5ded38701e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9071136c9b8890439f30874a68985e5ded38701e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9071136c9b8890439f30874a68985e5ded38701e"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 50,
      "deletions": 43
    },
    "files": [
      {
        "sha": "ca91f689356bc551f2e245a0a73b1282c79843f2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 42,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a005a911e4cbbfd066459519b4bae92a5baa953/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a005a911e4cbbfd066459519b4bae92a5baa953/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=7a005a911e4cbbfd066459519b4bae92a5baa953",
        "patch": "@@ -110,6 +110,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n     showHelpMessageAction(0),\n     trayIcon(0),\n     trayIconMenu(0),\n+    dockIconMenu(0),\n     notificator(0),\n     rpcConsole(0),\n     helpMessageDialog(0),\n@@ -568,7 +569,25 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n     {\n         // Create system tray menu (or setup the dock menu) that late to prevent users from calling actions,\n         // while the client has not yet fully loaded\n-        createTrayIconMenu();\n+        if (trayIcon) {\n+            // do so only if trayIcon is already set\n+            trayIconMenu = new QMenu(this);\n+            trayIcon->setContextMenu(trayIconMenu);\n+\n+            connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),\n+                    this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));\n+\n+            createIconMenu(trayIconMenu);\n+\n+#ifdef Q_OS_MAC\n+            // Note: On Mac, the dock icon is also used to provide same functionality.\n+            MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n+            dockIconHandler->setMainWindow((QMainWindow *)this);\n+            dockIconMenu = dockIconHandler->dockMenu();\n+ \n+            createIconMenu(dockIconMenu);\n+#endif\n+        }\n \n         // Keep up to date with client\n         setNumConnections(clientModel->getNumConnections());\n@@ -601,6 +620,13 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n             // Disable context menu on tray icon\n             trayIconMenu->clear();\n         }\n+#ifdef Q_OS_MAC\n+        if(dockIconMenu)\n+        {\n+            // Disable context menu on dock icon\n+            dockIconMenu->clear();\n+        }\n+#endif\n     }\n }\n \n@@ -653,58 +679,38 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n \n void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n {\n-#ifndef Q_OS_MAC\n     trayIcon = new QSystemTrayIcon(this);\n     QString toolTip = tr(\"Dash Core client\") + \" \" + networkStyle->getTitleAddText();\n     trayIcon->setToolTip(toolTip);\n     trayIcon->setIcon(networkStyle->getTrayAndWindowIcon());\n     trayIcon->show();\n-#endif\n-\n     notificator = new Notificator(QApplication::applicationName(), trayIcon, this);\n }\n \n-void BitcoinGUI::createTrayIconMenu()\n+void BitcoinGUI::createIconMenu(QMenu *pmenu)\n {\n-#ifndef Q_OS_MAC\n-    // return if trayIcon is unset (only on non-Mac OSes)\n-    if (!trayIcon)\n-        return;\n-\n-    trayIconMenu = new QMenu(this);\n-    trayIcon->setContextMenu(trayIconMenu);\n-\n-    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),\n-            this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));\n-#else\n-    // Note: On Mac, the dock icon is used to provide the tray's functionality.\n-    MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n-    dockIconHandler->setMainWindow((QMainWindow *)this);\n-    trayIconMenu = dockIconHandler->dockMenu();\n-#endif\n-\n     // Configuration of the tray icon (or dock icon) icon menu\n-    trayIconMenu->addAction(toggleHideAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(sendCoinsMenuAction);\n-    trayIconMenu->addAction(receiveCoinsMenuAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(signMessageAction);\n-    trayIconMenu->addAction(verifyMessageAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(optionsAction);\n-    trayIconMenu->addAction(openInfoAction);\n-    trayIconMenu->addAction(openRPCConsoleAction);\n-    trayIconMenu->addAction(openGraphAction);\n-    trayIconMenu->addAction(openPeersAction);\n-    trayIconMenu->addAction(openRepairAction);\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(openConfEditorAction);\n-    trayIconMenu->addAction(openMNConfEditorAction);\n-    trayIconMenu->addAction(showBackupsAction);\n+    pmenu->addAction(toggleHideAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(sendCoinsMenuAction);\n+    pmenu->addAction(receiveCoinsMenuAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(signMessageAction);\n+    pmenu->addAction(verifyMessageAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(optionsAction);\n+    pmenu->addAction(openInfoAction);\n+    pmenu->addAction(openRPCConsoleAction);\n+    pmenu->addAction(openGraphAction);\n+    pmenu->addAction(openPeersAction);\n+    pmenu->addAction(openRepairAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(openConfEditorAction);\n+    pmenu->addAction(openMNConfEditorAction);\n+    pmenu->addAction(showBackupsAction);\n #ifndef Q_OS_MAC // This is built-in on Mac\n-    trayIconMenu->addSeparator();\n-    trayIconMenu->addAction(quitAction);\n+    pmenu->addSeparator();\n+    pmenu->addAction(quitAction);\n #endif\n }\n "
      },
      {
        "sha": "2aebb9d34a67f84281bbb81c7454962a361bbf45",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a005a911e4cbbfd066459519b4bae92a5baa953/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a005a911e4cbbfd066459519b4bae92a5baa953/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=7a005a911e4cbbfd066459519b4bae92a5baa953",
        "patch": "@@ -126,6 +126,7 @@ class BitcoinGUI : public QMainWindow\n \n     QSystemTrayIcon *trayIcon;\n     QMenu *trayIconMenu;\n+    QMenu *dockIconMenu;\n     Notificator *notificator;\n     RPCConsole *rpcConsole;\n     HelpMessageDialog *helpMessageDialog;\n@@ -145,7 +146,7 @@ class BitcoinGUI : public QMainWindow\n     /** Create system tray icon and notification */\n     void createTrayIcon(const NetworkStyle *networkStyle);\n     /** Create system tray menu (or setup the dock menu) */\n-    void createTrayIconMenu();\n+    void createIconMenu(QMenu *pmenu);\n \n     /** Enable or disable all wallet-related actions */\n     void setWalletActionsEnabled(bool enabled);"
      }
    ]
  },
  {
    "sha": "ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTg4YWIzMTQ0ZWQ3N2Q1ZmIxNGUwYjE1OTE5YzQ3YzFjZGU0NWRl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-17T00:31:35Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-17T00:31:35Z"
      },
      "message": "Refactor IS - rename only (+related log messages) (#1146)",
      "tree": {
        "sha": "f566227c74327235e9e1cadd99c4c6198fdac7be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f566227c74327235e9e1cadd99c4c6198fdac7be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a005a911e4cbbfd066459519b4bae92a5baa953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a005a911e4cbbfd066459519b4bae92a5baa953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a005a911e4cbbfd066459519b4bae92a5baa953"
      }
    ],
    "stats": {
      "total": 272,
      "additions": 136,
      "deletions": 136
    },
    "files": [
      {
        "sha": "9b6af3aa7dd822e2d1cd29820ea07d586a12c553",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "patch": "@@ -2454,7 +2454,7 @@ void ThreadCheckDarkSendPool()\n                 mnodeman.CheckAndRemove();\n                 mnodeman.ProcessMasternodeConnections();\n                 mnpayments.CheckAndRemove();\n-                CleanTransactionLocksList();\n+                CleanTxLockCandidates();\n             }\n \n             darkSendPool.CheckTimeout();"
      },
      {
        "sha": "8f6673a193c099bbf31b7bef566e45bb1dd3b697",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 109,
        "changes": 218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "patch": "@@ -26,12 +26,12 @@ bool fEnableInstantSend = true;\n int nInstantSendDepth = DEFAULT_INSTANTSEND_DEPTH;\n int nCompleteTXLocks;\n \n-std::map<uint256, CTransaction> mapTxLockReq;\n-std::map<uint256, CTransaction> mapTxLockReqRejected;\n-std::map<uint256, CConsensusVote> mapTxLockVote;\n+std::map<uint256, CTransaction> mapLockRequestAccepted;\n+std::map<uint256, CTransaction> mapLockRequestRejected;\n+std::map<uint256, CTxLockVote> mapTxLockVotes;\n std::map<COutPoint, uint256> mapLockedInputs;\n \n-std::map<uint256, CTransactionLock> mapTxLocks;\n+std::map<uint256, CTxLockCandidate> mapTxLockCandidates;\n std::map<uint256, int64_t> mapUnknownVotes; //track votes with no tx for DOS\n \n CCriticalSection cs_instantsend;\n@@ -65,7 +65,7 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n         GetMainSignals().Inventory(inv.hash);\n \n         // have we seen it already?\n-        if(mapTxLockReq.count(inv.hash) || mapTxLockReqRejected.count(inv.hash)) return;\n+        if(mapLockRequestAccepted.count(inv.hash) || mapLockRequestRejected.count(inv.hash)) return;\n         // is it a valid one?\n         if(!IsInstantSendTxValid(tx)) return;\n \n@@ -78,7 +78,7 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n             }\n         }\n \n-        int nBlockHeight = CreateNewLock(tx);\n+        int nBlockHeight = CreateTxLockCandidate(tx);\n \n         bool fMissingInputs = false;\n         CValidationState state;\n@@ -91,9 +91,9 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n         if(fAccepted) {\n             RelayInv(inv);\n \n-            DoConsensusVote(tx, nBlockHeight);\n+            CreateTxLockVote(tx, nBlockHeight);\n \n-            mapTxLockReq.insert(std::make_pair(tx.GetHash(), tx));\n+            mapLockRequestAccepted.insert(std::make_pair(tx.GetHash(), tx));\n \n             LogPrintf(\"ProcessMessageInstantSend -- Transaction Lock Request: %s %s : accepted %s\\n\",\n                 pfrom->addr.ToString(), pfrom->cleanSubVer,\n@@ -112,7 +112,7 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n             return;\n \n         } else {\n-            mapTxLockReqRejected.insert(std::make_pair(tx.GetHash(), tx));\n+            mapLockRequestRejected.insert(std::make_pair(tx.GetHash(), tx));\n \n             // can we get the conflicting transaction as proof?\n \n@@ -129,28 +129,28 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n     }\n     else if (strCommand == NetMsgType::TXLOCKVOTE) // InstantSend Transaction Lock Consensus Votes\n     {\n-        CConsensusVote vote;\n+        CTxLockVote vote;\n         vRecv >> vote;\n \n         CInv inv(MSG_TXLOCK_VOTE, vote.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        if(mapTxLockVote.count(vote.GetHash())) return;\n-        mapTxLockVote.insert(std::make_pair(vote.GetHash(), vote));\n+        if(mapTxLockVotes.count(vote.GetHash())) return;\n+        mapTxLockVotes.insert(std::make_pair(vote.GetHash(), vote));\n \n-        if(ProcessConsensusVote(pfrom, vote)) {\n+        if(ProcessTxLockVote(pfrom, vote)) {\n             //Spam/Dos protection\n             /*\n                 Masternodes will sometimes propagate votes before the transaction is known to the client.\n                 This tracks those messages and allows it at the same rate of the rest of the network, if\n                 a peer violates it, it will simply be ignored\n             */\n-            if(!mapTxLockReq.count(vote.txHash) && !mapTxLockReqRejected.count(vote.txHash)) {\n+            if(!mapLockRequestAccepted.count(vote.txHash) && !mapLockRequestRejected.count(vote.txHash)) {\n                 if(!mapUnknownVotes.count(vote.vinMasternode.prevout.hash))\n                     mapUnknownVotes[vote.vinMasternode.prevout.hash] = GetTime()+(60*10);\n \n                 if(mapUnknownVotes[vote.vinMasternode.prevout.hash] > GetTime() &&\n-                    mapUnknownVotes[vote.vinMasternode.prevout.hash] - GetAverageVoteTime() > 60*10) {\n+                    mapUnknownVotes[vote.vinMasternode.prevout.hash] - GetAverageUnknownVoteTime() > 60*10) {\n                         LogPrintf(\"ProcessMessageInstantSend -- masternode is spamming transaction votes: %s %s\\n\",\n                             vote.vinMasternode.ToString(),\n                             vote.txHash.ToString()\n@@ -218,14 +218,14 @@ bool IsInstantSendTxValid(const CTransaction& txCandidate)\n     return true;\n }\n \n-int64_t CreateNewLock(CTransaction tx)\n+int64_t CreateTxLockCandidate(CTransaction tx)\n {\n \n     int64_t nTxAge = 0;\n     BOOST_REVERSE_FOREACH(CTxIn txin, tx.vin) {\n         nTxAge = GetInputAge(txin);\n         if(nTxAge < 5) { //1 less than the \"send IX\" gui requires, incase of a block propagating the network at the time\n-            LogPrintf(\"CreateNewLock -- Transaction not found / too new: nTxAge=%d, txid=%s\\n\", nTxAge, tx.GetHash().ToString());\n+            LogPrintf(\"CreateTxLockCandidate -- Transaction not found / too new: nTxAge=%d, txid=%s\\n\", nTxAge, tx.GetHash().ToString());\n             return 0;\n         }\n     }\n@@ -245,19 +245,19 @@ int64_t CreateNewLock(CTransaction tx)\n             return 0;\n     }\n \n-    if(!mapTxLocks.count(tx.GetHash())) {\n-        LogPrintf(\"CreateNewLock -- New Transaction Lock! txid=%s\\n\", tx.GetHash().ToString());\n+    if(!mapTxLockCandidates.count(tx.GetHash())) {\n+        LogPrintf(\"CreateTxLockCandidate -- New Transaction Lock Candidate! txid=%s\\n\", tx.GetHash().ToString());\n \n-        CTransactionLock newLock;\n-        newLock.nBlockHeight = nBlockHeight;\n+        CTxLockCandidate txLockCandidate;\n+        txLockCandidate.nBlockHeight = nBlockHeight;\n         //locks expire after nInstantSendKeepLock confirmations\n-        newLock.nLockExpirationBlock = chainActive.Height() + Params().GetConsensus().nInstantSendKeepLock;\n-        newLock.nTimeout = GetTime()+(60*5);\n-        newLock.txHash = tx.GetHash();\n-        mapTxLocks.insert(std::make_pair(tx.GetHash(), newLock));\n+        txLockCandidate.nExpirationBlock = chainActive.Height() + Params().GetConsensus().nInstantSendKeepLock;\n+        txLockCandidate.nTimeout = GetTime()+(60*5);\n+        txLockCandidate.txHash = tx.GetHash();\n+        mapTxLockCandidates.insert(std::make_pair(tx.GetHash(), txLockCandidate));\n     } else {\n-        mapTxLocks[tx.GetHash()].nBlockHeight = nBlockHeight;\n-        LogPrint(\"instantsend\", \"CreateNewLock -- Transaction Lock Exists! txid=%s\\n\", tx.GetHash().ToString());\n+        mapTxLockCandidates[tx.GetHash()].nBlockHeight = nBlockHeight;\n+        LogPrint(\"instantsend\", \"CreateTxLockCandidate -- Transaction Lock Candidate exists! txid=%s\\n\", tx.GetHash().ToString());\n     }\n \n \n@@ -266,117 +266,117 @@ int64_t CreateNewLock(CTransaction tx)\n }\n \n // check if we need to vote on this transaction\n-void DoConsensusVote(CTransaction& tx, int64_t nBlockHeight)\n+void CreateTxLockVote(CTransaction& tx, int64_t nBlockHeight)\n {\n     if(!fMasterNode) return;\n \n     int n = mnodeman.GetMasternodeRank(activeMasternode.vin, nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n     if(n == -1) {\n-        LogPrint(\"instantsend\", \"DoConsensusVote -- Unknown Masternode %s\\n\", activeMasternode.vin.prevout.ToStringShort());\n+        LogPrint(\"instantsend\", \"CreateTxLockVote -- Unknown Masternode %s\\n\", activeMasternode.vin.prevout.ToStringShort());\n         return;\n     }\n \n     if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-        LogPrint(\"instantsend\", \"DoConsensusVote -- Masternode not in the top %d (%d)\\n\", INSTANTSEND_SIGNATURES_TOTAL, n);\n+        LogPrint(\"instantsend\", \"CreateTxLockVote -- Masternode not in the top %d (%d)\\n\", INSTANTSEND_SIGNATURES_TOTAL, n);\n         return;\n     }\n     /*\n         nBlockHeight calculated from the transaction is the authoritive source\n     */\n \n-    LogPrint(\"instantsend\", \"DoConsensusVote -- In the top %d (%d)\\n\", INSTANTSEND_SIGNATURES_TOTAL, n);\n+    LogPrint(\"instantsend\", \"CreateTxLockVote -- In the top %d (%d)\\n\", INSTANTSEND_SIGNATURES_TOTAL, n);\n \n-    CConsensusVote vote;\n+    CTxLockVote vote;\n     vote.vinMasternode = activeMasternode.vin;\n     vote.txHash = tx.GetHash();\n     vote.nBlockHeight = nBlockHeight;\n     if(!vote.Sign()) {\n-        LogPrintf(\"DoConsensusVote -- Failed to sign consensus vote\\n\");\n+        LogPrintf(\"CreateTxLockVote -- Failed to sign consensus vote\\n\");\n         return;\n     }\n     if(!vote.CheckSignature()) {\n-        LogPrintf(\"DoConsensusVote -- Signature invalid\\n\");\n+        LogPrintf(\"CreateTxLockVote -- Signature invalid\\n\");\n         return;\n     }\n \n     {\n         LOCK(cs_instantsend);\n-        mapTxLockVote[vote.GetHash()] = vote;\n+        mapTxLockVotes[vote.GetHash()] = vote;\n     }\n \n     CInv inv(MSG_TXLOCK_VOTE, vote.GetHash());\n     RelayInv(inv);\n }\n \n //received a consensus vote\n-bool ProcessConsensusVote(CNode* pnode, CConsensusVote& vote)\n+bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n {\n     int n = mnodeman.GetMasternodeRank(vote.vinMasternode, vote.nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n     CMasternode* pmn = mnodeman.Find(vote.vinMasternode);\n     if(pmn != NULL)\n-        LogPrint(\"instantsend\", \"ProcessConsensusVote -- Masternode addr=%s, rank: %d\\n\", pmn->addr.ToString(), n);\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode addr=%s, rank: %d\\n\", pmn->addr.ToString(), n);\n \n     if(n == -1) {\n         //can be caused by past versions trying to vote with an invalid protocol\n-        LogPrint(\"instantsend\", \"ProcessConsensusVote -- Unknown Masternode: txin=%s\\n\", vote.vinMasternode.ToString());\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Unknown Masternode: txin=%s\\n\", vote.vinMasternode.ToString());\n         mnodeman.AskForMN(pnode, vote.vinMasternode);\n         return false;\n     }\n-    LogPrint(\"instantsend\", \"ProcessConsensusVote -- Masternode %s, rank=%d\\n\", vote.vinMasternode.prevout.ToStringShort(), n);\n+    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s, rank=%d\\n\", vote.vinMasternode.prevout.ToStringShort(), n);\n \n     if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-        LogPrint(\"instantsend\", \"ProcessConsensusVote -- Masternode %s is not in the top %d (%d), vote hash %s\\n\",\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s is not in the top %d (%d), vote hash %s\\n\",\n                 vote.vinMasternode.prevout.ToStringShort(), INSTANTSEND_SIGNATURES_TOTAL, n, vote.GetHash().ToString());\n         return false;\n     }\n \n     if(!vote.CheckSignature()) {\n-        LogPrintf(\"ProcessConsensusVote -- Signature invalid\\n\");\n+        LogPrintf(\"ProcessTxLockVote -- Signature invalid\\n\");\n         // don't ban, it could just be a non-synced masternode\n         mnodeman.AskForMN(pnode, vote.vinMasternode);\n         return false;\n     }\n \n-    if (!mapTxLocks.count(vote.txHash)) {\n-        LogPrintf(\"ProcessConsensusVote -- New Transaction Lock! txid=%s\\n\", vote.txHash.ToString());\n+    if (!mapTxLockCandidates.count(vote.txHash)) {\n+        LogPrintf(\"ProcessTxLockVote -- New Transaction Lock Candidate! txid=%s\\n\", vote.txHash.ToString());\n \n-        CTransactionLock newLock;\n-        newLock.nBlockHeight = 0;\n+        CTxLockCandidate txLockCandidate;\n+        txLockCandidate.nBlockHeight = 0;\n         //locks expire after nInstantSendKeepLock confirmations\n-        newLock.nLockExpirationBlock = chainActive.Height() + Params().GetConsensus().nInstantSendKeepLock;\n-        newLock.nTimeout = GetTime()+(60*5);\n-        newLock.txHash = vote.txHash;\n-        mapTxLocks.insert(std::make_pair(vote.txHash, newLock));\n+        txLockCandidate.nExpirationBlock = chainActive.Height() + Params().GetConsensus().nInstantSendKeepLock;\n+        txLockCandidate.nTimeout = GetTime()+(60*5);\n+        txLockCandidate.txHash = vote.txHash;\n+        mapTxLockCandidates.insert(std::make_pair(vote.txHash, txLockCandidate));\n     } else {\n-        LogPrint(\"instantsend\", \"ProcessConsensusVote -- Transaction Lock Exists! txid=%s\\n\", vote.txHash.ToString());\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Exists! txid=%s\\n\", vote.txHash.ToString());\n     }\n \n     //compile consessus vote\n-    std::map<uint256, CTransactionLock>::iterator i = mapTxLocks.find(vote.txHash);\n-    if (i != mapTxLocks.end()) {\n+    std::map<uint256, CTxLockCandidate>::iterator i = mapTxLockCandidates.find(vote.txHash);\n+    if (i != mapTxLockCandidates.end()) {\n         (*i).second.AddVote(vote);\n \n         int nSignatures = (*i).second.CountVotes();\n-        LogPrint(\"instantsend\", \"ProcessConsensusVote -- Transaction Lock signatures count: %d, vote hash=%s\\n\", nSignatures, vote.GetHash().ToString());\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock signatures count: %d, vote hash=%s\\n\", nSignatures, vote.GetHash().ToString());\n \n         if(nSignatures >= INSTANTSEND_SIGNATURES_REQUIRED) {\n-            LogPrint(\"instantsend\", \"ProcessConsensusVote -- Transaction Lock Is Complete! txid=%s\\n\", vote.txHash.ToString());\n+            LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Is Complete! txid=%s\\n\", vote.txHash.ToString());\n \n             // Masternodes will sometimes propagate votes before the transaction is known to the client,\n             // will check for conflicting locks and update transaction status on a new vote message\n             // only after the lock itself has arrived\n-            if(!mapTxLockReq.count(vote.txHash) && !mapTxLockReqRejected.count(vote.txHash)) return true;\n-\n-            if(!FindConflictingLocks(mapTxLockReq[vote.txHash])) { //?????\n-                if(mapTxLockReq.count(vote.txHash)) {\n-                    UpdateLockedTransaction(mapTxLockReq[vote.txHash]);\n-                    LockTransactionInputs(mapTxLockReq[vote.txHash]);\n-                } else if(mapTxLockReqRejected.count(vote.txHash)) {\n-                    ResolveConflicts(mapTxLockReqRejected[vote.txHash]); ///?????\n+            if(!mapLockRequestAccepted.count(vote.txHash) && !mapLockRequestRejected.count(vote.txHash)) return true;\n+\n+            if(!FindConflictingLocks(mapLockRequestAccepted[vote.txHash])) { //?????\n+                if(mapLockRequestAccepted.count(vote.txHash)) {\n+                    UpdateLockedTransaction(mapLockRequestAccepted[vote.txHash]);\n+                    LockTransactionInputs(mapLockRequestAccepted[vote.txHash]);\n+                } else if(mapLockRequestRejected.count(vote.txHash)) {\n+                    ResolveConflicts(mapLockRequestRejected[vote.txHash]); ///?????\n                 } else {\n-                    LogPrint(\"instantsend\", \"ProcessConsensusVote -- Transaction Lock Request is missing! nSignatures=%d, vote hash %s\\n\", nSignatures, vote.GetHash().ToString());\n+                    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Request is missing! nSignatures=%d, vote hash %s\\n\", nSignatures, vote.GetHash().ToString());\n                 }\n             }\n         }\n@@ -393,7 +393,7 @@ void UpdateLockedTransaction(CTransaction& tx, bool fForceNotification)\n     if(FindConflictingLocks(tx)) return;\n     uint256 txHash = tx.GetHash();\n     // there must be a successfully verified lock request\n-    if(!mapTxLockReq.count(txHash)) return;\n+    if(!mapLockRequestAccepted.count(txHash)) return;\n \n     int nSignatures = GetTransactionLockSignatures(txHash);\n \n@@ -418,7 +418,7 @@ void UpdateLockedTransaction(CTransaction& tx, bool fForceNotification)\n }\n \n void LockTransactionInputs(CTransaction& tx) {\n-    if(!mapTxLockReq.count(tx.GetHash())) return;\n+    if(!mapLockRequestAccepted.count(tx.GetHash())) return;\n \n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         if(!mapLockedInputs.count(txin.prevout))\n@@ -439,11 +439,11 @@ bool FindConflictingLocks(CTransaction& tx)\n             if(mapLockedInputs[txin.prevout] != tx.GetHash()) {\n                 LogPrintf(\"FindConflictingLocks -- found two complete conflicting Transaction Locks, removing both: txid=%s, txin=%s\", tx.GetHash().ToString(), mapLockedInputs[txin.prevout].ToString());\n \n-                if(mapTxLocks.count(tx.GetHash()))\n-                    mapTxLocks[tx.GetHash()].nLockExpirationBlock = -1;\n+                if(mapTxLockCandidates.count(tx.GetHash()))\n+                    mapTxLockCandidates[tx.GetHash()].nExpirationBlock = -1;\n \n-                if(mapTxLocks.count(mapLockedInputs[txin.prevout]))\n-                    mapTxLocks[mapLockedInputs[txin.prevout]].nLockExpirationBlock = -1;\n+                if(mapTxLockCandidates.count(mapLockedInputs[txin.prevout]))\n+                    mapTxLockCandidates[mapLockedInputs[txin.prevout]].nExpirationBlock = -1;\n \n                 return true;\n             }\n@@ -461,12 +461,12 @@ void ResolveConflicts(CTransaction& tx)\n \n         //reprocess the last nInstantSendReprocessBlocks blocks\n         ReprocessBlocks(Params().GetConsensus().nInstantSendReprocessBlocks);\n-        if(!mapTxLockReq.count(tx.GetHash()))\n-            mapTxLockReq.insert(std::make_pair(tx.GetHash(), tx)); //?????\n+        if(!mapLockRequestAccepted.count(tx.GetHash()))\n+            mapLockRequestAccepted.insert(std::make_pair(tx.GetHash(), tx)); //?????\n     }\n }\n \n-int64_t GetAverageVoteTime()\n+int64_t GetAverageUnknownVoteTime()\n {\n     std::map<uint256, int64_t>::iterator it = mapUnknownVotes.begin();\n     int64_t total = 0;\n@@ -481,33 +481,33 @@ int64_t GetAverageVoteTime()\n     return total / count;\n }\n \n-void CleanTransactionLocksList()\n+void CleanTxLockCandidates()\n {\n     LOCK(cs_instantsend);\n \n-    std::map<uint256, CTransactionLock>::iterator it = mapTxLocks.begin();\n+    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.begin();\n \n     int nHeight = chainActive.Height();\n-    while(it != mapTxLocks.end()) {\n-        CTransactionLock &txLock = it->second;\n-        if(nHeight > txLock.nLockExpirationBlock) {\n-            LogPrintf(\"Removing old transaction lock: txid=%s\\n\", txLock.txHash.ToString());\n+    while(it != mapTxLockCandidates.end()) {\n+        CTxLockCandidate &txLockCandidate = it->second;\n+        if(nHeight > txLockCandidate.nExpirationBlock) {\n+            LogPrintf(\"CleanTxLockCandidates -- Removing expired Transaction Lock Candidate for txid %s\\n\", txLockCandidate.txHash.ToString());\n \n-            if(mapTxLockReq.count(txLock.txHash)){\n-                CTransaction& tx = mapTxLockReq[txLock.txHash];\n+            if(mapLockRequestAccepted.count(txLockCandidate.txHash)){\n+                CTransaction& tx = mapLockRequestAccepted[txLockCandidate.txHash];\n \n                 BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                     mapLockedInputs.erase(txin.prevout);\n \n-                mapTxLockReq.erase(txLock.txHash);\n-                mapTxLockReqRejected.erase(txLock.txHash);\n+                mapLockRequestAccepted.erase(txLockCandidate.txHash);\n+                mapLockRequestRejected.erase(txLockCandidate.txHash);\n \n-                BOOST_FOREACH(const CConsensusVote& vote, txLock.vecConsensusVotes)\n-                    if(mapTxLockVote.count(vote.GetHash()))\n-                        mapTxLockVote.erase(vote.GetHash());\n+                BOOST_FOREACH(const CTxLockVote& vote, txLockCandidate.vecTxLockVotes)\n+                    if(mapTxLockVotes.count(vote.GetHash()))\n+                        mapTxLockVotes.erase(vote.GetHash());\n             }\n \n-            mapTxLocks.erase(it++);\n+            mapTxLockCandidates.erase(it++);\n         } else {\n             it++;\n         }\n@@ -517,10 +517,10 @@ void CleanTransactionLocksList()\n bool IsLockedInstandSendTransaction(uint256 txHash)\n {\n     // there must be a successfully verified lock request...\n-    if (!mapTxLockReq.count(txHash)) return false;\n+    if (!mapLockRequestAccepted.count(txHash)) return false;\n     // ...and corresponding lock must have enough signatures\n-    std::map<uint256, CTransactionLock>::iterator i = mapTxLocks.find(txHash);\n-    return i != mapTxLocks.end() && (*i).second.CountVotes() >= INSTANTSEND_SIGNATURES_REQUIRED;\n+    std::map<uint256, CTxLockCandidate>::iterator i = mapTxLockCandidates.find(txHash);\n+    return i != mapTxLockCandidates.end() && (*i).second.CountVotes() >= INSTANTSEND_SIGNATURES_REQUIRED;\n }\n \n int GetTransactionLockSignatures(uint256 txHash)\n@@ -529,8 +529,8 @@ int GetTransactionLockSignatures(uint256 txHash)\n     if(fLargeWorkForkFound || fLargeWorkInvalidChainFound) return -2;\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return -3;\n \n-    std::map<uint256, CTransactionLock>::iterator it = mapTxLocks.find(txHash);\n-    if(it != mapTxLocks.end()) return it->second.CountVotes();\n+    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n+    if(it != mapTxLockCandidates.end()) return it->second.CountVotes();\n \n     return -1;\n }\n@@ -539,90 +539,90 @@ bool IsTransactionLockTimedOut(uint256 txHash)\n {\n     if(!fEnableInstantSend) return 0;\n \n-    std::map<uint256, CTransactionLock>::iterator i = mapTxLocks.find(txHash);\n-    if (i != mapTxLocks.end()) return GetTime() > (*i).second.nTimeout;\n+    std::map<uint256, CTxLockCandidate>::iterator i = mapTxLockCandidates.find(txHash);\n+    if (i != mapTxLockCandidates.end()) return GetTime() > (*i).second.nTimeout;\n \n     return false;\n }\n \n-uint256 CConsensusVote::GetHash() const\n+uint256 CTxLockVote::GetHash() const\n {\n     return ArithToUint256(UintToArith256(vinMasternode.prevout.hash) + vinMasternode.prevout.n + UintToArith256(txHash));\n }\n \n \n-bool CConsensusVote::CheckSignature()\n+bool CTxLockVote::CheckSignature()\n {\n     std::string strError;\n     std::string strMessage = txHash.ToString().c_str() + boost::lexical_cast<std::string>(nBlockHeight);\n \n     CMasternode* pmn = mnodeman.Find(vinMasternode);\n \n     if(pmn == NULL) {\n-        LogPrintf(\"CConsensusVote::CheckSignature -- Unknown Masternode: txin=%s\\n\", vinMasternode.ToString());\n+        LogPrintf(\"CTxLockVote::CheckSignature -- Unknown Masternode: txin=%s\\n\", vinMasternode.ToString());\n         return false;\n     }\n \n     if(!darkSendSigner.VerifyMessage(pmn->pubKeyMasternode, vchMasterNodeSignature, strMessage, strError)) {\n-        LogPrintf(\"CConsensusVote::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n+        LogPrintf(\"CTxLockVote::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }\n \n     return true;\n }\n \n-bool CConsensusVote::Sign()\n+bool CTxLockVote::Sign()\n {\n     std::string strError;\n \n     std::string strMessage = txHash.ToString().c_str() + boost::lexical_cast<std::string>(nBlockHeight);\n \n     if(!darkSendSigner.SignMessage(strMessage, vchMasterNodeSignature, activeMasternode.keyMasternode)) {\n-        LogPrintf(\"CConsensusVote::Sign -- SignMessage() failed\\n\");\n+        LogPrintf(\"CTxLockVote::Sign -- SignMessage() failed\\n\");\n         return false;\n     }\n \n     if(!darkSendSigner.VerifyMessage(activeMasternode.pubKeyMasternode, vchMasterNodeSignature, strMessage, strError)) {\n-        LogPrintf(\"CConsensusVote::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n+        LogPrintf(\"CTxLockVote::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }\n \n     return true;\n }\n \n \n-bool CTransactionLock::IsAllVotesValid()\n+bool CTxLockCandidate::IsAllVotesValid()\n {\n \n-    BOOST_FOREACH(CConsensusVote vote, vecConsensusVotes)\n+    BOOST_FOREACH(CTxLockVote vote, vecTxLockVotes)\n     {\n         int n = mnodeman.GetMasternodeRank(vote.vinMasternode, vote.nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n         if(n == -1) {\n-            LogPrintf(\"CTransactionLock::IsAllVotesValid -- Unknown Masternode, txin=%s\\n\", vote.vinMasternode.ToString());\n+            LogPrintf(\"CTxLockCandidate::IsAllVotesValid -- Unknown Masternode, txin=%s\\n\", vote.vinMasternode.ToString());\n             return false;\n         }\n \n         if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-            LogPrintf(\"CTransactionLock::IsAllVotesValid -- Masternode not in the top %s\\n\", INSTANTSEND_SIGNATURES_TOTAL);\n+            LogPrintf(\"CTxLockCandidate::IsAllVotesValid -- Masternode not in the top %s\\n\", INSTANTSEND_SIGNATURES_TOTAL);\n             return false;\n         }\n \n         if(!vote.CheckSignature()) {\n-            LogPrintf(\"CTransactionLock::IsAllVotesValid -- Signature not valid\\n\");\n+            LogPrintf(\"CTxLockCandidate::IsAllVotesValid -- Signature not valid\\n\");\n             return false;\n         }\n     }\n \n     return true;\n }\n \n-void CTransactionLock::AddVote(CConsensusVote& vote)\n+void CTxLockCandidate::AddVote(CTxLockVote& vote)\n {\n-    vecConsensusVotes.push_back(vote);\n+    vecTxLockVotes.push_back(vote);\n }\n \n-int CTransactionLock::CountVotes()\n+int CTxLockCandidate::CountVotes()\n {\n     /*\n         Only count signatures where the BlockHeight matches the transaction's blockheight.\n@@ -632,7 +632,7 @@ int CTransactionLock::CountVotes()\n     if(nBlockHeight == 0) return -1;\n \n     int nCount = 0;\n-    BOOST_FOREACH(CConsensusVote vote, vecConsensusVotes)\n+    BOOST_FOREACH(CTxLockVote vote, vecTxLockVotes)\n         if(vote.nBlockHeight == nBlockHeight)\n             nCount++;\n "
      },
      {
        "sha": "a49c3d69ea42e81845e249db07ecd40e4aaa01f7",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "patch": "@@ -11,9 +11,9 @@\n #include \"base58.h\"\n #include \"main.h\"\n \n-class CConsensusVote;\n class CTransaction;\n-class CTransactionLock;\n+class CTxLockVote;\n+class CTxLockCandidate;\n \n /*\n     At 15 signatures, 1/2 of the masternode network can be owned by\n@@ -35,23 +35,23 @@ extern bool fEnableInstantSend;\n extern int nInstantSendDepth;\n extern int nCompleteTXLocks;\n \n-extern std::map<uint256, CTransaction> mapTxLockReq;\n-extern std::map<uint256, CTransaction> mapTxLockReqRejected;\n-extern std::map<uint256, CConsensusVote> mapTxLockVote;\n+extern std::map<uint256, CTransaction> mapLockRequestAccepted;\n+extern std::map<uint256, CTransaction> mapLockRequestRejected;\n+extern std::map<uint256, CTxLockVote> mapTxLockVotes;\n extern std::map<COutPoint, uint256> mapLockedInputs;\n \n \n-int64_t CreateNewLock(CTransaction tx);\n+int64_t CreateTxLockCandidate(CTransaction tx);\n \n bool IsInstantSendTxValid(const CTransaction& txCandidate);\n \n void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n \n //check if we need to vote on this transaction\n-void DoConsensusVote(CTransaction& tx, int64_t nBlockHeight);\n+void CreateTxLockVote(CTransaction& tx, int64_t nBlockHeight);\n \n //process consensus vote message\n-bool ProcessConsensusVote(CNode *pnode, CConsensusVote& vote);\n+bool ProcessTxLockVote(CNode *pnode, CTxLockVote& vote);\n \n //update UI and notify external script if any\n void UpdateLockedTransaction(CTransaction& tx, bool fForceNotification = false);\n@@ -65,7 +65,7 @@ bool FindConflictingLocks(CTransaction& tx);\n void ResolveConflicts(CTransaction& tx);\n \n // keep transaction locks in memory for an hour\n-void CleanTransactionLocksList();\n+void CleanTxLockCandidates();\n \n // verify if transaction is currently locked\n bool IsLockedInstandSendTransaction(uint256 txHash);\n@@ -76,9 +76,9 @@ int GetTransactionLockSignatures(uint256 txHash);\n // verify if transaction lock timed out\n bool IsTransactionLockTimedOut(uint256 txHash);\n \n-int64_t GetAverageVoteTime();\n+int64_t GetAverageUnknownVoteTime();\n \n-class CConsensusVote\n+class CTxLockVote\n {\n public:\n     CTxIn vinMasternode;\n@@ -102,19 +102,19 @@ class CConsensusVote\n     bool CheckSignature();\n };\n \n-class CTransactionLock\n+class CTxLockCandidate\n {\n public:\n     int nBlockHeight;\n     uint256 txHash;\n-    std::vector<CConsensusVote> vecConsensusVotes;\n-    int nLockExpirationBlock;\n+    std::vector<CTxLockVote> vecTxLockVotes;\n+    int nExpirationBlock;\n     int nTimeout;\n \n     uint256 GetHash() const { return txHash; }\n \n     bool IsAllVotesValid();\n-    void AddVote(CConsensusVote& vote);\n+    void AddVote(CTxLockVote& vote);\n     int CountVotes();\n };\n "
      },
      {
        "sha": "bd3e909d90dbb9605200dfa19f7328383e92b283",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "patch": "@@ -4921,10 +4921,10 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n         We want to only update the time on new hits, so that we can time out appropriately if needed.\n     */\n     case MSG_TXLOCK_REQUEST:\n-        return mapTxLockReq.count(inv.hash) || mapTxLockReqRejected.count(inv.hash);\n+        return mapLockRequestAccepted.count(inv.hash) || mapLockRequestRejected.count(inv.hash);\n \n     case MSG_TXLOCK_VOTE:\n-        return mapTxLockVote.count(inv.hash);\n+        return mapTxLockVotes.count(inv.hash);\n \n     case MSG_SPORK:\n         return mapSporks.count(inv.hash);\n@@ -5078,20 +5078,20 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 }\n \n                 if (!pushed && inv.type == MSG_TXLOCK_REQUEST) {\n-                    if(mapTxLockReq.count(inv.hash)) {\n+                    if(mapLockRequestAccepted.count(inv.hash)) {\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n-                        ss << mapTxLockReq[inv.hash];\n+                        ss << mapLockRequestAccepted[inv.hash];\n                         pfrom->PushMessage(NetMsgType::TXLOCKREQUEST, ss);\n                         pushed = true;\n                     }\n                 }\n \n                 if (!pushed && inv.type == MSG_TXLOCK_VOTE) {\n-                    if(mapTxLockVote.count(inv.hash)) {\n+                    if(mapTxLockVotes.count(inv.hash)) {\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n-                        ss << mapTxLockVote[inv.hash];\n+                        ss << mapTxLockVotes[inv.hash];\n                         pfrom->PushMessage(NetMsgType::TXLOCKVOTE, ss);\n                         pushed = true;\n                     }"
      },
      {
        "sha": "466a02458dff9f3d76b7d527736520f6799a0241",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "patch": "@@ -2068,8 +2068,8 @@ void RelayTransaction(const CTransaction& tx)\n     uint256 hash = tx.GetHash();\n     if(mapDarksendBroadcastTxes.count(hash)) { // MSG_DSTX\n         ss << mapDarksendBroadcastTxes[hash];\n-    } else if(mapTxLockReq.count(hash)) { // MSG_TXLOCK_REQUEST\n-        ss << mapTxLockReq[hash];\n+    } else if(mapLockRequestAccepted.count(hash)) { // MSG_TXLOCK_REQUEST\n+        ss << mapLockRequestAccepted[hash];\n     } else { // MSG_TX\n         ss << tx;\n     }\n@@ -2080,7 +2080,7 @@ void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n {\n     uint256 hash = tx.GetHash();\n     int nInv = mapDarksendBroadcastTxes.count(hash) ? MSG_DSTX :\n-                (mapTxLockReq.count(hash) ? MSG_TXLOCK_REQUEST : MSG_TX);\n+                (mapLockRequestAccepted.count(hash) ? MSG_TXLOCK_REQUEST : MSG_TX);\n     CInv inv(nInv, hash);\n     {\n         LOCK(cs_mapRelay);"
      },
      {
        "sha": "20546daf0404f854a6f0dadb47d93ed8f9ac83fa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce88ab3144ed77d5fb14e0b15919c47c1cde45de/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "patch": "@@ -1472,8 +1472,8 @@ bool CWalletTx::RelayWalletTransaction(std::string strCommand)\n             LogPrintf(\"Relaying wtx %s\\n\", hash.ToString());\n \n             if(strCommand == NetMsgType::TXLOCKREQUEST){\n-                mapTxLockReq.insert(make_pair(hash, (CTransaction)*this));\n-                CreateNewLock(((CTransaction)*this));\n+                mapLockRequestAccepted.insert(make_pair(hash, (CTransaction)*this));\n+                CreateTxLockCandidate(((CTransaction)*this));\n             }\n             RelayTransaction((CTransaction)*this);\n             return true;"
      }
    ]
  },
  {
    "sha": "73568be5a3cecd6caf1504dc7e1e80f7e2574540",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzU2OGJlNWEzY2VjZDZjYWYxNTA0ZGM3ZTFlODBmN2UyNTc0NTQw",
    "commit": {
      "author": {
        "name": "Spencer Lievens",
        "email": "spencerlievens@users.noreply.github.com",
        "date": "2016-11-17T20:39:08Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-17T20:39:08Z"
      },
      "message": "Remove Duplicated Include for darksend.h (#1150)",
      "tree": {
        "sha": "bec866c2811b730c1c9ee5e3372262503d4764c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bec866c2811b730c1c9ee5e3372262503d4764c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73568be5a3cecd6caf1504dc7e1e80f7e2574540",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73568be5a3cecd6caf1504dc7e1e80f7e2574540",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73568be5a3cecd6caf1504dc7e1e80f7e2574540",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73568be5a3cecd6caf1504dc7e1e80f7e2574540/comments",
    "author": {
      "login": "spencerlievens",
      "id": 9684063,
      "node_id": "MDQ6VXNlcjk2ODQwNjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9684063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spencerlievens",
      "html_url": "https://github.com/spencerlievens",
      "followers_url": "https://api.github.com/users/spencerlievens/followers",
      "following_url": "https://api.github.com/users/spencerlievens/following{/other_user}",
      "gists_url": "https://api.github.com/users/spencerlievens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spencerlievens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spencerlievens/subscriptions",
      "organizations_url": "https://api.github.com/users/spencerlievens/orgs",
      "repos_url": "https://api.github.com/users/spencerlievens/repos",
      "events_url": "https://api.github.com/users/spencerlievens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spencerlievens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce88ab3144ed77d5fb14e0b15919c47c1cde45de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce88ab3144ed77d5fb14e0b15919c47c1cde45de"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eeba506f1f6531f09e0c73dfa6d2d0cc5f5c031f",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73568be5a3cecd6caf1504dc7e1e80f7e2574540/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73568be5a3cecd6caf1504dc7e1e80f7e2574540/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=73568be5a3cecd6caf1504dc7e1e80f7e2574540",
        "patch": "@@ -11,7 +11,6 @@\n #include \"activemasternode.h\"\n #include \"darksend.h\"\n #include \"governance.h\"\n-#include \"darksend.h\"\n #include \"masternode.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\""
      }
    ]
  },
  {
    "sha": "efa36242a341e63f917e4545939d591c5e60cd57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmEzNjI0MmEzNDFlNjNmOTE3ZTQ1NDU5MzlkNTkxYzVlNjBjZDU3",
    "commit": {
      "author": {
        "name": "Spencer Lievens",
        "email": "spencerlievens@users.noreply.github.com",
        "date": "2016-11-18T14:16:30Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-18T14:16:30Z"
      },
      "message": "Remove duplicated include of governance.h (#1152)",
      "tree": {
        "sha": "c613442726d622bca97646878829db8a9b2d1296",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c613442726d622bca97646878829db8a9b2d1296"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efa36242a341e63f917e4545939d591c5e60cd57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa36242a341e63f917e4545939d591c5e60cd57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efa36242a341e63f917e4545939d591c5e60cd57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa36242a341e63f917e4545939d591c5e60cd57/comments",
    "author": {
      "login": "spencerlievens",
      "id": 9684063,
      "node_id": "MDQ6VXNlcjk2ODQwNjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9684063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spencerlievens",
      "html_url": "https://github.com/spencerlievens",
      "followers_url": "https://api.github.com/users/spencerlievens/followers",
      "following_url": "https://api.github.com/users/spencerlievens/following{/other_user}",
      "gists_url": "https://api.github.com/users/spencerlievens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spencerlievens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spencerlievens/subscriptions",
      "organizations_url": "https://api.github.com/users/spencerlievens/orgs",
      "repos_url": "https://api.github.com/users/spencerlievens/repos",
      "events_url": "https://api.github.com/users/spencerlievens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spencerlievens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73568be5a3cecd6caf1504dc7e1e80f7e2574540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73568be5a3cecd6caf1504dc7e1e80f7e2574540",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73568be5a3cecd6caf1504dc7e1e80f7e2574540"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "098b398c266a8e118cd61c688347672bb1d74698",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa36242a341e63f917e4545939d591c5e60cd57/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa36242a341e63f917e4545939d591c5e60cd57/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=efa36242a341e63f917e4545939d591c5e60cd57",
        "patch": "@@ -17,7 +17,6 @@\n \n #include \"governance.h\"\n #include \"masternode.h\"\n-#include \"governance.h\"\n #include <boost/lexical_cast.hpp>\n #include <univalue.h>\n "
      }
    ]
  },
  {
    "sha": "90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGJkN2NiNjJiYmVmZTQ5NTFhMGU3ZTRiZDZkNTg2ZDhmNjkyNzhi",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-18T14:17:00Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-18T14:17:00Z"
      },
      "message": "Implemented delay for governance object deletion (#1151)",
      "tree": {
        "sha": "57b9da3b796e27a3acc9db994a7a6e3ff41b40b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57b9da3b796e27a3acc9db994a7a6e3ff41b40b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efa36242a341e63f917e4545939d591c5e60cd57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa36242a341e63f917e4545939d591c5e60cd57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efa36242a341e63f917e4545939d591c5e60cd57"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7094925c78f6185bb5f05635ff492b88f4c5831b",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
        "patch": "@@ -211,6 +211,7 @@ void CGovernanceTriggerManager::CleanAndRemove()\n                     if(pgovobj) {\n                         LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Expiring executed object: %s\\n\", pgovobj->GetHash().ToString());\n                         pgovobj->fExpired = true;\n+                        pgovobj->nDeletionTime = GetAdjustedTime();\n                     }\n                 }\n                 remove = true;\n@@ -228,6 +229,7 @@ void CGovernanceTriggerManager::CleanAndRemove()\n                         if(pgovobj) {\n                             LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Expiring outdated object: %s\\n\", pgovobj->GetHash().ToString());\n                             pgovobj->fExpired = true;\n+                            pgovobj->nDeletionTime = GetAdjustedTime();\n                         }\n                     }\n                 }"
      },
      {
        "sha": "191a025b7e8135ee2b391c06c8604b3ff8fc50aa",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
        "patch": "@@ -366,7 +366,10 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n         // IF DELETE=TRUE, THEN CLEAN THE MESS UP!\n \n-        if(pObj->IsSetCachedDelete() || pObj->IsSetExpired()) {\n+        int64_t nTimeSinceDeletion = GetAdjustedTime() - pObj->GetDeletionTime();\n+\n+        if((pObj->IsSetCachedDelete() || pObj->IsSetExpired()) &&\n+           (nTimeSinceDeletion >= GOVERNANCE_DELETION_DELAY)) {\n             LogPrintf(\"CGovernanceManager::UpdateCachesAndClean -- erase obj %s\\n\", (*it).first.ToString());\n             mnodeman.RemoveGovernanceObject(pObj->GetHash());\n \n@@ -783,6 +786,7 @@ CGovernanceObject::CGovernanceObject()\n   nHashParent(),\n   nRevision(0),\n   nTime(0),\n+  nDeletionTime(0),\n   nCollateralHash(),\n   strData(),\n   vinMasternode(),\n@@ -810,6 +814,7 @@ CGovernanceObject::CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int\n   nHashParent(nHashParentIn),\n   nRevision(nRevisionIn),\n   nTime(nTimeIn),\n+  nDeletionTime(0),\n   nCollateralHash(nCollateralHashIn),\n   strData(strDataIn),\n   vinMasternode(),\n@@ -837,6 +842,7 @@ CGovernanceObject::CGovernanceObject(const CGovernanceObject& other)\n   nHashParent(other.nHashParent),\n   nRevision(other.nRevision),\n   nTime(other.nTime),\n+  nDeletionTime(other.nDeletionTime),\n   nCollateralHash(other.nCollateralHash),\n   strData(other.strData),\n   vinMasternode(other.vinMasternode),\n@@ -1454,7 +1460,10 @@ void CGovernanceObject::UpdateSentinelVariables(const CBlockIndex *pCurrentBlock\n \n     if(GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = true;\n     if(GetAbsoluteYesCount(VOTE_SIGNAL_VALID) >= nAbsVoteReq) fCachedValid = true;\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) fCachedDelete = true;\n+    if(GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) {\n+        fCachedDelete = true;\n+        nDeletionTime = GetAdjustedTime();\n+    }\n     if(GetAbsoluteYesCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = true;\n \n     // ARE ANY OF THE VOTING FLAGS NEGATIVELY SET BY THE NETWORK?\n@@ -1476,6 +1485,7 @@ void CGovernanceObject::swap(CGovernanceObject& first, CGovernanceObject& second\n     swap(first.nHashParent, second.nHashParent);\n     swap(first.nRevision, second.nRevision);\n     swap(first.nTime, second.nTime);\n+    swap(first.nDeletionTime, second.nDeletionTime);\n     swap(first.nCollateralHash, second.nCollateralHash);\n     swap(first.strData, second.strData);\n     swap(first.nObjectType, second.nObjectType);"
      },
      {
        "sha": "38a75b8994b9b2f6c53e6f444d8a14f2fc2177f5",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
        "patch": "@@ -46,6 +46,8 @@ static const CAmount GOVERNANCE_PROPOSAL_FEE_TX = (0.33*COIN);\n \n static const int64_t GOVERNANCE_FEE_CONFIRMATIONS = 6;\n static const int64_t GOVERNANCE_UPDATE_MIN = 60*60;\n+static const int64_t GOVERNANCE_DELETION_DELAY = 10*60;\n+\n \n // FOR SEEN MAP ARRAYS - GOVERNANCE OBJECTS AND VOTES\n static const int SEEN_OBJECT_IS_VALID = 0;\n@@ -370,6 +372,9 @@ class CGovernanceObject\n     /// time this object was created\n     int64_t nTime;\n \n+    /// time this object was marked for deletion\n+    int64_t nDeletionTime;\n+\n     /// fee-tx\n     uint256 nCollateralHash;\n \n@@ -431,6 +436,10 @@ class CGovernanceObject\n         return nTime;\n     }\n \n+    int64_t GetDeletionTime() const {\n+        return nDeletionTime;\n+    }\n+\n     int GetObjectType() const {\n         return nObjectType;\n     }"
      }
    ]
  },
  {
    "sha": "e59bee81149b4d79c075d389b8d1426bf02edde1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTliZWU4MTE0OWI0ZDc5YzA3NWQzODliOGQxNDI2YmYwMmVkZGUx",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-18T14:17:22Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-18T14:17:22Z"
      },
      "message": "Masternode syncing changes (#1149)\n\n* Modified DSEG to send mnb regardless of state\r\n\r\n* Removed unused function\r\n\r\n* Deactivate rate check when processing masternode orphan objects",
      "tree": {
        "sha": "ea0d251665eb9828152f5220bba972a3db41bc7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea0d251665eb9828152f5220bba972a3db41bc7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e59bee81149b4d79c075d389b8d1426bf02edde1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e59bee81149b4d79c075d389b8d1426bf02edde1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e59bee81149b4d79c075d389b8d1426bf02edde1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e59bee81149b4d79c075d389b8d1426bf02edde1/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90bd7cb62bbefe4951a0e7e4bd6d586d8f69278b"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 28,
      "deletions": 21
    },
    "files": [
      {
        "sha": "5979daa4e123870def6ce3bee1bd84384aa56756",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e59bee81149b4d79c075d389b8d1426bf02edde1/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e59bee81149b4d79c075d389b8d1426bf02edde1/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=e59bee81149b4d79c075d389b8d1426bf02edde1",
        "patch": "@@ -41,6 +41,7 @@ CGovernanceManager::CGovernanceManager()\n       mapOrphanVotes(MAX_CACHE_SIZE),\n       mapLastMasternodeTrigger(),\n       setRequestedObjects(),\n+      fRateChecksEnabled(true),\n       cs()\n {}\n \n@@ -578,18 +579,14 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n     LogPrintf(\"CGovernanceManager::Sync -- sent %d items, peer=%d\\n\", nInvCount, pfrom->id);\n }\n \n-void CGovernanceManager::SyncParentObjectByVote(CNode* pfrom, const CGovernanceVote& vote)\n-{\n-    if(!mapAskedForGovernanceObject.count(vote.GetParentHash())){\n-        pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, vote.GetParentHash());\n-        mapAskedForGovernanceObject[vote.GetParentHash()] = GetTime();\n-    }\n-}\n-\n bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n {\n     LOCK(cs);\n \n+    if(!fRateChecksEnabled) {\n+        return true;\n+    }\n+\n     int mindiff = 0;\n     switch(nObjectType) {\n     case GOVERNANCE_OBJECT_TRIGGER:\n@@ -665,14 +662,17 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n void CGovernanceManager::CheckMasternodeOrphanVotes()\n {\n     LOCK(cs);\n+    fRateChecksEnabled = false;\n     for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n         it->second.CheckOrphanVotes();\n     }\n+    fRateChecksEnabled = true;\n }\n \n void CGovernanceManager::CheckMasternodeOrphanObjects()\n {\n     LOCK(cs);\n+    fRateChecksEnabled = false;\n     object_m_it it = mapMasternodeOrphanObjects.begin();\n     while(it != mapMasternodeOrphanObjects.end()) {\n         CGovernanceObject& govobj = it->second;\n@@ -699,6 +699,7 @@ void CGovernanceManager::CheckMasternodeOrphanObjects()\n             ++it;\n         }\n     }\n+    fRateChecksEnabled = true;\n }\n \n void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nHash)\n@@ -908,16 +909,18 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     }\n     vote_instance_t& voteInstance = it2->second;\n     int64_t nNow = GetTime();\n-    int64_t nTimeDelta = nNow - voteInstance.nTime;\n-    if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::ProcessVote -- Masternode voting too often \"\n-                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n-                << \", governance object hash = \" << GetHash().ToString()\n-                << \", time delta = \" << nTimeDelta << \"\\n\";\n-        LogPrint(\"gobject\", ostr.str().c_str());\n-        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_TEMPORARY_ERROR);\n-        return false;\n+    if(governance.AreRateChecksEnabled()) {\n+        int64_t nTimeDelta = nNow - voteInstance.nTime;\n+        if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n+            std::ostringstream ostr;\n+            ostr << \"CGovernanceObject::ProcessVote -- Masternode voting too often \"\n+                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                 << \", governance object hash = \" << GetHash().ToString()\n+                 << \", time delta = \" << nTimeDelta << \"\\n\";\n+            LogPrint(\"gobject\", ostr.str().c_str());\n+            exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_TEMPORARY_ERROR);\n+            return false;\n+        }\n     }\n     // Finally check that the vote is actually valid (done last because of cost of signature verification)\n     if(!vote.IsValid(true)) {"
      },
      {
        "sha": "98a805ca94ed885efc6a38af010609266f045466",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e59bee81149b4d79c075d389b8d1426bf02edde1/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e59bee81149b4d79c075d389b8d1426bf02edde1/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=e59bee81149b4d79c075d389b8d1426bf02edde1",
        "patch": "@@ -136,6 +136,8 @@ class CGovernanceManager\n \n     hash_s_t setRequestedVotes;\n \n+    bool fRateChecksEnabled;\n+\n public:\n     // critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n@@ -166,8 +168,6 @@ class CGovernanceManager\n \n     void Sync(CNode* node, uint256 nProp);\n \n-    void SyncParentObjectByVote(CNode* pfrom, const CGovernanceVote& vote);\n-\n     void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n \n     void NewBlock();\n@@ -258,6 +258,11 @@ class CGovernanceManager\n \n     void CheckMasternodeOrphanObjects();\n \n+    bool AreRateChecksEnabled() const {\n+        LOCK(cs);\n+        return fRateChecksEnabled;\n+    }\n+\n private:\n     void RequestGovernanceObject(CNode* pfrom, const uint256& nHash);\n "
      },
      {
        "sha": "8c496ca553581bcc562c07fd33443bd1041d6291",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e59bee81149b4d79c075d389b8d1426bf02edde1/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e59bee81149b4d79c075d389b8d1426bf02edde1/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=e59bee81149b4d79c075d389b8d1426bf02edde1",
        "patch": "@@ -783,7 +783,6 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n             if (vin != CTxIn() && vin != mn.vin) continue; // asked for specific vin but we are not there yet\n             if (mn.addr.IsRFC1918() || mn.addr.IsLocal()) continue; // do not send local network masternode\n-            if (!mn.IsEnabled()) continue;\n \n             LogPrint(\"masternode\", \"DSEG -- Sending Masternode entry: masternode=%s  addr=%s\\n\", mn.vin.prevout.ToStringShort(), mn.addr.ToString());\n             CMasternodeBroadcast mnb = CMasternodeBroadcast(mn);"
      }
    ]
  },
  {
    "sha": "e121829e40ce567900cb69ea337b322a9182e03b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTIxODI5ZTQwY2U1Njc5MDBjYjY5ZWEzMzdiMzIyYTkxODJlMDNi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-20T06:52:23Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-20T06:52:23Z"
      },
      "message": "few trivial fixes in init.cpp (#1155)\n\n* few trivial fixes in init.cpp\r\n\r\n* DEFAULT_PRIVATESEND_LIQUIDITY\r\n\r\n* fix InitParameterInteraction",
      "tree": {
        "sha": "e758dbe7bad2bac4497b193295875bc17e2c7d64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e758dbe7bad2bac4497b193295875bc17e2c7d64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e121829e40ce567900cb69ea337b322a9182e03b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e121829e40ce567900cb69ea337b322a9182e03b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e121829e40ce567900cb69ea337b322a9182e03b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e121829e40ce567900cb69ea337b322a9182e03b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e59bee81149b4d79c075d389b8d1426bf02edde1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e59bee81149b4d79c075d389b8d1426bf02edde1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e59bee81149b4d79c075d389b8d1426bf02edde1"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "1c4aa813a4a903c1cb3e6b5f353fa3f36a3d9dca",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e121829e40ce567900cb69ea337b322a9182e03b/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e121829e40ce567900cb69ea337b322a9182e03b/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=e121829e40ce567900cb69ea337b322a9182e03b",
        "patch": "@@ -20,7 +20,7 @@\n \n int nPrivateSendRounds = DEFAULT_PRIVATESEND_ROUNDS;\n int nPrivateSendAmount = DEFAULT_PRIVATESEND_AMOUNT;\n-int nLiquidityProvider = 0;\n+int nLiquidityProvider = DEFAULT_PRIVATESEND_LIQUIDITY;\n bool fEnablePrivateSend = false;\n bool fPrivateSendMultiSession = DEFAULT_PRIVATESEND_MULTISESSION;\n "
      },
      {
        "sha": "c14f86f1f98f19caa1ef87547d0d42796d33dccb",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e121829e40ce567900cb69ea337b322a9182e03b/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e121829e40ce567900cb69ea337b322a9182e03b/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=e121829e40ce567900cb69ea337b322a9182e03b",
        "patch": "@@ -27,6 +27,7 @@ static const int DENOMS_COUNT_MAX                   = 100;\n \n static const int DEFAULT_PRIVATESEND_ROUNDS         = 2;\n static const int DEFAULT_PRIVATESEND_AMOUNT         = 1000;\n+static const int DEFAULT_PRIVATESEND_LIQUIDITY      = 0;\n static const bool DEFAULT_PRIVATESEND_MULTISESSION  = false;\n \n // Warn user if mixing in gui or try to create backup if mixing in daemon mode"
      },
      {
        "sha": "b4872d48ece7df8e98a03dfc432f7db44167eb47",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e121829e40ce567900cb69ea337b322a9182e03b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e121829e40ce567900cb69ea337b322a9182e03b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e121829e40ce567900cb69ea337b322a9182e03b",
        "patch": "@@ -565,14 +565,14 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"PrivateSend options:\"));\n     strUsage += HelpMessageOpt(\"-enableprivatesend=<n>\", strprintf(_(\"Enable use of automated PrivateSend for funds stored in this wallet (0-1, default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-privatesendmultisession=<n>\", strprintf(_(\"Enable multiple PrivateSend mixing sessions per block, experimental (0-1, default: %u)\"), DEFAULT_PRIVATESEND_MULTISESSION));\n-    strUsage += HelpMessageOpt(\"-privatesendrounds=<n>\", strprintf(_(\"Use N separate masternodes to anonymize funds  (2-8, default: %u)\"), DEFAULT_PRIVATESEND_ROUNDS));\n+    strUsage += HelpMessageOpt(\"-privatesendrounds=<n>\", strprintf(_(\"Use N separate masternodes for each denominated input to mix funds (2-16, default: %u)\"), DEFAULT_PRIVATESEND_ROUNDS));\n     strUsage += HelpMessageOpt(\"-privatesendamount=<n>\", strprintf(_(\"Keep N DASH anonymized (default: %u)\"), DEFAULT_PRIVATESEND_AMOUNT));\n-    strUsage += HelpMessageOpt(\"-liquidityprovider=<n>\", strprintf(_(\"Provide liquidity to PrivateSend by infrequently mixing coins on a continual basis (0-100, default: %u, 1=very frequent, high fees, 100=very infrequent, low fees)\"), nLiquidityProvider));\n+    strUsage += HelpMessageOpt(\"-liquidityprovider=<n>\", strprintf(_(\"Provide liquidity to PrivateSend by infrequently mixing coins on a continual basis (0-100, default: %u, 1=very frequent, high fees, 100=very infrequent, low fees)\"), DEFAULT_PRIVATESEND_LIQUIDITY));\n \n     strUsage += HelpMessageGroup(_(\"InstantSend options:\"));\n     strUsage += HelpMessageOpt(\"-enableinstantsend=<n>\", strprintf(_(\"Enable InstantSend, show confirmations for locked transactions (0-1, default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-instantsenddepth=<n>\", strprintf(_(\"Show N confirmations for a successfully locked transaction (0-9999, default: %u)\"), DEFAULT_INSTANTSEND_DEPTH));\n-    strUsage += HelpMessageOpt(\"-instantsendnotify=<cmd>\", _(\"Execute command when a wallet IS transaction is successfully locked (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-instantsendnotify=<cmd>\", _(\"Execute command when a wallet InstantSend transaction is successfully locked (%s in cmd is replaced by TxID)\"));\n \n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n@@ -864,19 +864,19 @@ void InitParameterInteraction()\n \n     if(!GetBoolArg(\"-enableinstantsend\", fEnableInstantSend)){\n         if (SoftSetArg(\"-instantsenddepth\", 0))\n-            LogPrintf(\"AppInit2 : parameter interaction: -enableinstantsend=false -> setting -nInstantSendDepth=0\\n\");\n+            LogPrintf(\"%s: parameter interaction: -enableinstantsend=false -> setting -nInstantSendDepth=0\\n\", __func__);\n     }\n \n-    if (GetArg(\"-liquidityprovider\", 0) > 0) {\n-        int nLiqProvTmp = GetArg(\"-liquidityprovider\", 0);\n+    int nLiqProvTmp = GetArg(\"-liquidityprovider\", DEFAULT_PRIVATESEND_LIQUIDITY);\n+    if (nLiqProvTmp > 0) {\n         mapArgs[\"-enableprivatesend\"] = \"1\";\n-        LogPrintf(\"AppInit2 : parameter interaction: -liquidityprovider=%d -> setting -enableprivatesend=1\\n\", nLiqProvTmp);\n+        LogPrintf(\"%s: parameter interaction: -liquidityprovider=%d -> setting -enableprivatesend=1\\n\", __func__, nLiqProvTmp);\n         mapArgs[\"-privatesendrounds\"] = \"99999\";\n-        LogPrintf(\"AppInit2 : parameter interaction: -liquidityprovider=%d -> setting -privatesendrounds=99999\\n\", nLiqProvTmp);\n+        LogPrintf(\"%s: parameter interaction: -liquidityprovider=%d -> setting -privatesendrounds=99999\\n\", __func__, nLiqProvTmp);\n         mapArgs[\"-privatesendamount\"] = \"999999\";\n-        LogPrintf(\"AppInit2 : parameter interaction: -liquidityprovider=%d -> setting -privatesendamount=999999\\n\", nLiqProvTmp);\n+        LogPrintf(\"%s: parameter interaction: -liquidityprovider=%d -> setting -privatesendamount=999999\\n\", __func__, nLiqProvTmp);\n         mapArgs[\"-privatesendmultisession\"] = \"0\";\n-        LogPrintf(\"AppInit2 : parameter interaction: -liquidityprovider=%d -> setting -privatesendmultisession=0\\n\", nLiqProvTmp);\n+        LogPrintf(\"%s: parameter interaction: -liquidityprovider=%d -> setting -privatesendmultisession=0\\n\", __func__, nLiqProvTmp);\n     }\n }\n \n@@ -1833,7 +1833,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fEnablePrivateSend = GetBoolArg(\"-enableprivatesend\", 0);\n     fPrivateSendMultiSession = GetBoolArg(\"-privatesendmultisession\", DEFAULT_PRIVATESEND_MULTISESSION);\n     nPrivateSendRounds = GetArg(\"-privatesendrounds\", DEFAULT_PRIVATESEND_ROUNDS);\n-    nPrivateSendRounds = std::min(std::max(nPrivateSendRounds, 1), 99999);\n+    nPrivateSendRounds = std::min(std::max(nPrivateSendRounds, 2), nLiquidityProvider ? 99999 : 16);\n     nPrivateSendAmount = GetArg(\"-privatesendamount\", DEFAULT_PRIVATESEND_AMOUNT);\n     nPrivateSendAmount = std::min(std::max(nPrivateSendAmount, 2), 999999);\n \n@@ -1870,6 +1870,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return InitError(\"Failed to load masternode payments cache from mnpayments.dat\");\n     }\n \n+    uiInterface.InitMessage(_(\"Loading governance cache...\"));\n     CFlatDB<CGovernanceManager> flatdb3(\"governance.dat\", \"magicGovernanceCache\");\n     if(!flatdb3.Load(governance)) {\n         return InitError(\"Failed to load governance cache from governance.dat\");"
      }
    ]
  },
  {
    "sha": "c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmVjOTliYThlYWNiYTRhMjQ4YjIxOWJhNTgzZWE4YzVjMWY3ODc2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-20T06:52:45Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-20T06:52:45Z"
      },
      "message": "thread safe rand (#1157)\n\n* thread safe InsecureRand class\r\n\r\n* remove GetInsecureRand, use GetRandInt for performance non-critical parts",
      "tree": {
        "sha": "d60a3575ffe3e33ec888a5fe657041976e97c754",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d60a3575ffe3e33ec888a5fe657041976e97c754"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e121829e40ce567900cb69ea337b322a9182e03b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e121829e40ce567900cb69ea337b322a9182e03b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e121829e40ce567900cb69ea337b322a9182e03b"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 56,
      "deletions": 15
    },
    "files": [
      {
        "sha": "04d11ae384fdda15a4755309b2f230b369eb598a",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
        "patch": "@@ -664,7 +664,7 @@ void CDarksendPool::ChargeFees()\n     if(!fMasterNode) return;\n \n     //we don't need to charge collateral for every offence.\n-    if(GetInsecureRand(100) > 33) return;\n+    if(GetRandInt(100) > 33) return;\n \n     std::vector<CTransaction> vecOffendersCollaterals;\n \n@@ -699,7 +699,7 @@ void CDarksendPool::ChargeFees()\n     if(vecOffendersCollaterals.empty()) return;\n \n     //mostly offending? Charge sometimes\n-    if((int)vecOffendersCollaterals.size() >= Params().PoolMaxTransactions() - 1 && GetInsecureRand(100) > 33) return;\n+    if((int)vecOffendersCollaterals.size() >= Params().PoolMaxTransactions() - 1 && GetRandInt(100) > 33) return;\n \n     //everyone is an offender? That's not right\n     if((int)vecOffendersCollaterals.size() >= Params().PoolMaxTransactions()) return;\n@@ -740,7 +740,7 @@ void CDarksendPool::ChargeRandomFees()\n \n     BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n \n-        if(GetInsecureRand(100) > 10) return;\n+        if(GetRandInt(100) > 10) return;\n \n         LogPrintf(\"CDarksendPool::ChargeRandomFees -- charging random fees, txCollateral=%s\", txCollateral.ToString());\n \n@@ -1480,7 +1480,7 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         LogPrint(\"privatesend\", \"  vecMasternodesUsed: new size: %d, threshold: %d\\n\", (int)vecMasternodesUsed.size(), nThreshold_high);\n     }\n \n-    bool fUseQueue = insecure_rand()%100 > 33;\n+    bool fUseQueue = GetRandInt(100) > 33;\n     // don't use the queues all of the time for mixing unless we are a liquidity provider\n     if(nLiquidityProvider || fUseQueue) {\n \n@@ -2014,7 +2014,7 @@ bool CDarksendPool::CreateNewSession(int nDenom, CTransaction txCollateral, Pool\n \n     // start new session\n     nMessageIDRet = MSG_NOERR;\n-    nSessionID = GetInsecureRand(999999)+1;\n+    nSessionID = GetRandInt(999999)+1;\n     nSessionDenom = nDenom;\n \n     SetState(POOL_STATE_QUEUE);\n@@ -2145,7 +2145,7 @@ int CDarksendPool::GetDenominations(const std::vector<CTxOut>& vecTxOut, bool fS\n     int c = 0;\n     // if the denomination is used, shift the bit on\n     BOOST_FOREACH (PAIRTYPE(CAmount, int)& s, vecDenomUsed) {\n-        int bit = (fSingleRandomDenom ? insecure_rand()%2 : 1) & s.second;\n+        int bit = (fSingleRandomDenom ? GetRandInt(2) : 1) & s.second;\n         nDenom |= bit << c++;\n         if(fSingleRandomDenom && bit) break; // use just one random denomination\n     }\n@@ -2462,7 +2462,7 @@ void ThreadCheckDarkSendPool()\n \n             if(nDoAutoNextRun == nTick) {\n                 darkSendPool.DoAutomaticDenominating();\n-                nDoAutoNextRun = nTick + PRIVATESEND_AUTO_TIMEOUT_MIN + GetInsecureRand(PRIVATESEND_AUTO_TIMEOUT_MAX - PRIVATESEND_AUTO_TIMEOUT_MIN);\n+                nDoAutoNextRun = nTick + PRIVATESEND_AUTO_TIMEOUT_MIN + GetRandInt(PRIVATESEND_AUTO_TIMEOUT_MAX - PRIVATESEND_AUTO_TIMEOUT_MIN);\n             }\n         }\n     }"
      },
      {
        "sha": "8abc31658b41faf8695a54d613c0b76eb97d554b",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
        "patch": "@@ -543,8 +543,9 @@ CMasternode* CMasternodeMan::FindRandomNotInVec(const std::vector<CTxIn> &vecToE\n         vpMasternodesShuffled.push_back(&mn);\n     }\n \n+    InsecureRand insecureRand;\n     // shuffle pointers\n-    std::random_shuffle(vpMasternodesShuffled.begin(), vpMasternodesShuffled.end(), GetInsecureRand);\n+    std::random_shuffle(vpMasternodesShuffled.begin(), vpMasternodesShuffled.end(), insecureRand);\n     bool fExclude;\n \n     // loop through\n@@ -969,7 +970,7 @@ bool CMasternodeMan::SendVerifyRequest(const CAddress& addr, const std::vector<C\n     if(pnode != NULL) {\n         netfulfilledman.AddFulfilledRequest(addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-request\");\n         // use random nonce, store it and require node to reply with correct one later\n-        CMasternodeVerification mnv(addr, GetInsecureRand(999999), pCurrentBlockIndex->nHeight - 1);\n+        CMasternodeVerification mnv(addr, GetRandInt(999999), pCurrentBlockIndex->nHeight - 1);\n         mWeAskedForVerification[addr] = mnv;\n         LogPrintf(\"CMasternodeMan::SendVerifyRequest -- verifying using nonce %d addr=%s\\n\", mnv.nonce, addr.ToString());\n         pnode->PushMessage(NetMsgType::MNVERIFY, mnv);"
      },
      {
        "sha": "34fed09318c09e202e9a9d8c370646d9b994ad0b",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
        "patch": "@@ -137,3 +137,21 @@ void seed_insecure_rand(bool fDeterministic)\n         insecure_rand_Rw = tmp;\n     }\n }\n+\n+InsecureRand::InsecureRand(bool _fDeterministic)\n+    : nRz(11),\n+      nRw(11),\n+      fDeterministic(_fDeterministic)\n+{\n+    // The seed values have some unlikely fixed points which we avoid.\n+    if(fDeterministic) return;\n+    uint32_t nTmp;\n+    do {\n+        GetRandBytes((unsigned char*)&nTmp, 4);\n+    } while (nTmp == 0 || nTmp == 0x9068ffffU);\n+    nRz = nTmp;\n+    do {\n+        GetRandBytes((unsigned char*)&nTmp, 4);\n+    } while (nTmp == 0 || nTmp == 0x464fffffU);\n+    nRw = nTmp;\n+}"
      },
      {
        "sha": "00b15030957ae98e6532c0e2a273312d09518280",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 25,
        "deletions": 4,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
        "patch": "@@ -47,10 +47,31 @@ static inline uint32_t insecure_rand(void)\n }\n \n /**\n- * Function for std::random_shuffle\n+ * PRNG initialized from secure entropy based RNG\n  */\n-static inline uint32_t GetInsecureRand(uint32_t i){\n-    return insecure_rand() % i;\n-}\n+class InsecureRand\n+{\n+private:\n+    uint32_t nRz;\n+    uint32_t nRw;\n+    bool fDeterministic;\n+\n+public:\n+    InsecureRand(bool _fDeterministic = false);\n+\n+   /**\n+    * MWC RNG of George Marsaglia\n+    * This is intended to be fast. It has a period of 2^59.3, though the\n+    * least significant 16 bits only have a period of about 2^30.1.\n+    *\n+    * @return random value < nMax\n+    */\n+    int64_t operator()(int64_t nMax)\n+    {\n+        nRz = 36969 * (nRz & 65535) + (nRz >> 16);\n+        nRw = 18000 * (nRw & 65535) + (nRw >> 16);\n+        return ((nRw << 16) + nRz) % nMax;\n+    }\n+};\n \n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "38f03012300543532c13e7582dde93fb1fee8c03",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
        "patch": "@@ -2501,6 +2501,7 @@ bool CWallet::SelectCoinsByDenominations(int nDenom, CAmount nValueMin, CAmount\n \n     int nDenomResult = 0;\n \n+    InsecureRand insecureRand;\n     BOOST_FOREACH(const COutput& out, vCoins)\n     {\n         // masternode-like input should not be selected by AvailableCoins now anyway\n@@ -2517,9 +2518,9 @@ bool CWallet::SelectCoinsByDenominations(int nDenom, CAmount nValueMin, CAmount\n                 if(out.tx->vout[out.i].nValue == vecPrivateSendDenominations[nBit]) {\n                     if(nValueRet >= nValueMin) {\n                         //randomly reduce the max amount we'll submit (for anonymity)\n-                        nValueMax -= (GetInsecureRand(nValueMax/5));\n+                        nValueMax -= insecureRand(nValueMax/5);\n                         //on average use 50% of the inputs or less\n-                        int r = GetInsecureRand((int)vCoins.size());\n+                        int r = insecureRand(vCoins.size());\n                         if((int)vecTxInRet.size() > r) return true;\n                     }\n                     txin.prevPubKey = out.tx->vout[out.i].scriptPubKey; // the inputs PubKey"
      }
    ]
  },
  {
    "sha": "9162c56419090e330d6851121dc5312dbc3c2589",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTYyYzU2NDE5MDkwZTMzMGQ2ODUxMTIxZGM1MzEyZGJjM2MyNTg5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-20T06:54:33Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-20T06:54:33Z"
      },
      "message": "Refactor HelpMessageDialog to reuse it for PS help info, add PS info to help menu (#1144)",
      "tree": {
        "sha": "4a94a0a0d31ea046f3d19abeb92909ddf22d9b9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a94a0a0d31ea046f3d19abeb92909ddf22d9b9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9162c56419090e330d6851121dc5312dbc3c2589",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9162c56419090e330d6851121dc5312dbc3c2589",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9162c56419090e330d6851121dc5312dbc3c2589",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9162c56419090e330d6851121dc5312dbc3c2589/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ec99ba8eacba4a248b219ba583ea8c5c1f7876"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 70,
      "deletions": 42
    },
    "files": [
      {
        "sha": "62ab14fde28dc8e7799e078ccf006af14df047fc",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9162c56419090e330d6851121dc5312dbc3c2589",
        "patch": "@@ -108,6 +108,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n     openRPCConsoleAction(0),\n     openAction(0),\n     showHelpMessageAction(0),\n+    showPrivateSendHelpAction(0),\n     trayIcon(0),\n     trayIconMenu(0),\n     dockIconMenu(0),\n@@ -154,7 +155,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n #endif\n \n     rpcConsole = new RPCConsole(platformStyle, 0);\n-    helpMessageDialog = new HelpMessageDialog(this, false);\n+    helpMessageDialog = new HelpMessageDialog(this, HelpMessageDialog::cmdline);\n #ifdef ENABLE_WALLET\n     if(enableWallet)\n     {\n@@ -425,12 +426,17 @@ void BitcoinGUI::createActions()\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Dash Core help message to get a list with possible Dash Core command-line options\"));\n \n+    showPrivateSendHelpAction = new QAction(QApplication::style()->standardIcon(QStyle::SP_MessageBoxInformation), tr(\"&PrivateSend information\"), this);\n+    showPrivateSendHelpAction->setMenuRole(QAction::NoRole);\n+    showPrivateSendHelpAction->setStatusTip(tr(\"Show the PrivateSend basic information\"));\n+\n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n     connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));\n     connect(aboutQtAction, SIGNAL(triggered()), qApp, SLOT(aboutQt()));\n     connect(optionsAction, SIGNAL(triggered()), this, SLOT(optionsClicked()));\n     connect(toggleHideAction, SIGNAL(triggered()), this, SLOT(toggleHidden()));\n     connect(showHelpMessageAction, SIGNAL(triggered()), this, SLOT(showHelpMessageClicked()));\n+    connect(showPrivateSendHelpAction, SIGNAL(triggered()), this, SLOT(showPrivateSendHelpClicked()));\n \n     // Jump directly to tabs in RPC-console\n     connect(openInfoAction, SIGNAL(triggered()), this, SLOT(showInfo()));\n@@ -525,6 +531,7 @@ void BitcoinGUI::createMenuBar()\n \n     QMenu *help = appMenuBar->addMenu(tr(\"&Help\"));\n     help->addAction(showHelpMessageAction);\n+    help->addAction(showPrivateSendHelpAction);\n     help->addSeparator();\n     help->addAction(aboutAction);\n     help->addAction(aboutQtAction);\n@@ -740,7 +747,7 @@ void BitcoinGUI::aboutClicked()\n     if(!clientModel)\n         return;\n \n-    HelpMessageDialog dlg(this, true);\n+    HelpMessageDialog dlg(this, HelpMessageDialog::about);\n     dlg.exec();\n }\n \n@@ -802,6 +809,15 @@ void BitcoinGUI::showHelpMessageClicked()\n     helpMessageDialog->show();\n }\n \n+void BitcoinGUI::showPrivateSendHelpClicked()\n+{\n+    if(!clientModel)\n+        return;\n+\n+    HelpMessageDialog dlg(this, HelpMessageDialog::pshelp);\n+    dlg.exec();\n+}\n+\n #ifdef ENABLE_WALLET\n void BitcoinGUI::openClicked()\n {"
      },
      {
        "sha": "c42b6cd14a658e319b900ebbeb598aeb39fed66d",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=9162c56419090e330d6851121dc5312dbc3c2589",
        "patch": "@@ -123,6 +123,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *showBackupsAction;\n     QAction *openAction;\n     QAction *showHelpMessageAction;\n+    QAction *showPrivateSendHelpAction;\n \n     QSystemTrayIcon *trayIcon;\n     QMenu *trayIconMenu;\n@@ -238,6 +239,8 @@ private Q_SLOTS:\n \n     /** Show help message dialog */\n     void showHelpMessageClicked();\n+    /** Show PrivateSend help message dialog */\n+    void showPrivateSendHelpClicked();\n #ifndef Q_OS_MAC\n     /** Handle tray icon clicked */\n     void trayIconActivated(QSystemTrayIcon::ActivationReason reason);"
      },
      {
        "sha": "9a3d611eb3918871a1eb35c684c5722521a3fd77",
        "filename": "src/qt/dash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/dash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/dash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/dash.cpp?ref=9162c56419090e330d6851121dc5312dbc3c2589",
        "patch": "@@ -609,7 +609,7 @@ int main(int argc, char *argv[])\n     // but before showing splash screen.\n     if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n-        HelpMessageDialog help(NULL, mapArgs.count(\"-version\"));\n+        HelpMessageDialog help(NULL, mapArgs.count(\"-version\") ? HelpMessageDialog::about : HelpMessageDialog::cmdline);\n         help.showOrPrint();\n         return EXIT_SUCCESS;\n     }"
      },
      {
        "sha": "9938337dcbc26eca22fa259f9ff55ee1eab9b0af",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 35,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=9162c56419090e330d6851121dc5312dbc3c2589",
        "patch": "@@ -16,6 +16,7 @@\n #include \"platformstyle.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactiontablemodel.h\"\n+#include \"utilitydialog.h\"\n #include \"walletmodel.h\"\n #include \"init.h\"\n #include \"masternode-sync.h\"\n@@ -579,41 +580,8 @@ void OverviewPage::privateSendReset(){\n }\n \n void OverviewPage::privateSendInfo(){\n-\n-    // Artificial long boxtitle to ensure minimum width without overwriting the global CSS styles\n-    QString placeHolder = \"                                                                                                                                                                                    \";\n-    QString infoBoxTitle = tr(\"PrivateSend\") + placeHolder;\n-    \n-    QMessageBox::information(this, infoBoxTitle,\n-        tr(\"\\\n-<h3>PrivateSend Basics</h3> \\\n-PrivateSend gives you true financial privacy by obscuring the origins of your funds. \\\n-All the Dash in your wallet is comprised of different \\\"inputs\\\" which you can think of as separate, discrete coins.<br> \\\n-PrivateSend uses an innovative process to mix your inputs with the inputs of two other people, without having your coins ever leave your wallet. \\\n-You retain control of your money at all times..<hr> \\\n-<b>The PrivateSend process works like this:</b>\\\n-<ol type=\\\"1\\\"> \\\n-<li>PrivateSend begins by breaking your transaction inputs down into standard denominations. \\\n-These denominations are 0.1 DASH, 1 DASH, 10 DASH, and 100 DASH--sort of like the paper money you use every day.</li> \\\n-<li>Your wallet then sends requests to specially configured software nodes on the network, called \\\"masternodes.\\\" \\\n-These masternodes are informed then that you are interested in mixing a certain denomination. \\\n-No identifiable information is sent to the masternodes, so they never know \\\"who\\\" you are.</li> \\\n-<li>When two other people send similar messages, indicating that they wish to mix the same denomination, a mixing session begins. \\\n-The masternode mixes up the inputs and instructs all three users' wallets to pay the now-transformed input back to themselves. \\\n-Your wallet pays that denomination directly to itself, but in a different address (called a change address).</li> \\\n-<li>In order to fully obscure your funds, your wallet must repeat this process a number of times with each denomination. \\\n-Each time the process is completed, it's called a \\\"round.\\\" Each round of PrivateSend makes it exponentially more difficult to determine where your funds originated.</li> \\\n-<li>This mixing process happens in the background without any intervention on your part. When you wish to make a transaction, \\\n-your funds will already be anonymized. No additional waiting is required.</li> \\\n-</ol> <hr>\\\n-<b>IMPORTANT:</b> Your wallet only contains 1000 of these \\\"change addresses.\\\" Every time a mixing event happens, up to 9 of your addresses are used up. \\\n-This means those 1000 addresses last for about 100 mixing events. When 900 of them are used, your wallet must create more addresses. \\\n-It can only do this, however, if you have automatic backups enabled.<br> \\\n-Consequently, users who have backups disabled will also have PrivateSend disabled. <hr>\\\n-For more info see <a href=\\\"https://dashpay.atlassian.net/wiki/display/DOC/PrivateSend\\\">https://dashpay.atlassian.net/wiki/display/DOC/PrivateSend</a> \\\n-        \"),\n-        QMessageBox::Ok, QMessageBox::Ok);\n-\n+    HelpMessageDialog dlg(this, HelpMessageDialog::pshelp);\n+    dlg.exec();\n }\n \n void OverviewPage::togglePrivateSend(){"
      },
      {
        "sha": "41b324b839f3e30244915b31900d365ec7a1c15d",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 3,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=9162c56419090e330d6851121dc5312dbc3c2589",
        "patch": "@@ -28,7 +28,7 @@\n #include <QVBoxLayout>\n \n /** \"Help message\" or \"About\" dialog box */\n-HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n+HelpMessageDialog::HelpMessageDialog(QWidget *parent, HelpMode helpMode) :\n     QDialog(parent),\n     ui(new Ui::HelpMessageDialog)\n {\n@@ -44,7 +44,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n     version += \" \" + tr(\"(%1-bit)\").arg(32);\n #endif\n \n-    if (about)\n+    if (helpMode == about)\n     {\n         setWindowTitle(tr(\"About Dash Core\"));\n \n@@ -65,7 +65,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         ui->aboutMessage->setText(version + \"<br><br>\" + licenseInfoHTML);\n         ui->aboutMessage->setWordWrap(true);\n         ui->helpMessage->setVisible(false);\n-    } else {\n+    } else if (helpMode == cmdline) {\n         setWindowTitle(tr(\"Command-line options\"));\n         QString header = tr(\"Usage:\") + \"\\n\" +\n             \"  dash-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n@@ -127,6 +127,41 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);\n         ui->aboutLogo->setVisible(false);\n+    } else if (helpMode == pshelp) {\n+        setWindowTitle(tr(\"PrivateSend information\"));\n+\n+        ui->aboutMessage->setTextFormat(Qt::RichText);\n+        ui->scrollArea->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);\n+        ui->aboutMessage->setText(tr(\"\\\n+<h3>PrivateSend Basics</h3> \\\n+PrivateSend gives you true financial privacy by obscuring the origins of your funds. \\\n+All the Dash in your wallet is comprised of different \\\"inputs\\\" which you can think of as separate, discrete coins.<br> \\\n+PrivateSend uses an innovative process to mix your inputs with the inputs of two other people, without having your coins ever leave your wallet. \\\n+You retain control of your money at all times..<hr> \\\n+<b>The PrivateSend process works like this:</b>\\\n+<ol type=\\\"1\\\"> \\\n+<li>PrivateSend begins by breaking your transaction inputs down into standard denominations. \\\n+These denominations are 0.1 DASH, 1 DASH, 10 DASH, and 100 DASH--sort of like the paper money you use every day.</li> \\\n+<li>Your wallet then sends requests to specially configured software nodes on the network, called \\\"masternodes.\\\" \\\n+These masternodes are informed then that you are interested in mixing a certain denomination. \\\n+No identifiable information is sent to the masternodes, so they never know \\\"who\\\" you are.</li> \\\n+<li>When two other people send similar messages, indicating that they wish to mix the same denomination, a mixing session begins. \\\n+The masternode mixes up the inputs and instructs all three users' wallets to pay the now-transformed input back to themselves. \\\n+Your wallet pays that denomination directly to itself, but in a different address (called a change address).</li> \\\n+<li>In order to fully obscure your funds, your wallet must repeat this process a number of times with each denomination. \\\n+Each time the process is completed, it's called a \\\"round.\\\" Each round of PrivateSend makes it exponentially more difficult to determine where your funds originated.</li> \\\n+<li>This mixing process happens in the background without any intervention on your part. When you wish to make a transaction, \\\n+your funds will already be anonymized. No additional waiting is required.</li> \\\n+</ol> <hr>\\\n+<b>IMPORTANT:</b> Your wallet only contains 1000 of these \\\"change addresses.\\\" Every time a mixing event happens, up to 9 of your addresses are used up. \\\n+This means those 1000 addresses last for about 100 mixing events. When 900 of them are used, your wallet must create more addresses. \\\n+It can only do this, however, if you have automatic backups enabled.<br> \\\n+Consequently, users who have backups disabled will also have PrivateSend disabled. <hr>\\\n+For more info see <a href=\\\"https://dashpay.atlassian.net/wiki/display/DOC/PrivateSend\\\">https://dashpay.atlassian.net/wiki/display/DOC/PrivateSend</a> \\\n+        \"));\n+        ui->aboutMessage->setWordWrap(true);\n+        ui->helpMessage->setVisible(false);\n+        ui->aboutLogo->setVisible(false);\n     }\n     // Theme dependent Gfx in About popup\n     QString helpMessageGfx = \":/images/\" + GUIUtil::getThemeName() + \"/about\";"
      },
      {
        "sha": "32041f364b074ff82d962bd6dc4941882303dc85",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9162c56419090e330d6851121dc5312dbc3c2589/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=9162c56419090e330d6851121dc5312dbc3c2589",
        "patch": "@@ -21,7 +21,13 @@ class HelpMessageDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit HelpMessageDialog(QWidget *parent, bool about);\n+    enum HelpMode {\n+        about,\n+        cmdline,\n+        pshelp\n+    };\n+\n+    explicit HelpMessageDialog(QWidget *parent, HelpMode helpMode);\n     ~HelpMessageDialog();\n \n     void printToConsole();"
      }
    ]
  },
  {
    "sha": "785adad57e9341f68895624ec7d60eea1c78865b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODVhZGFkNTdlOTM0MWY2ODg5NTYyNGVjN2Q2MGVlYTFjNzg4NjVi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-21T20:40:32Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-21T20:40:32Z"
      },
      "message": "Slightly refactor/fix IS (#1153)\n\n* slightly refactor IS:\r\n- the only place where logic is changed: `ProcessTxLockVote()` - it should first try to find mn and fail if none was found and only then try to call `GetMasternodeRank()` (which is heavy)\r\n- fixed few `cs_main`\r\n- slightly optimized number of `tx.GetHash()` calls\r\n- lots of `const` (fixed few related functions in main.cpp)\r\n- few smaller fixes: iterators, log output, comments, etc\r\n- use thread safe methods of mnodeman\r\n- safety check in GetAverageUnknownVoteTime",
      "tree": {
        "sha": "a623885b7fe85747d1c92dfc6091eeabc0e94ee6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a623885b7fe85747d1c92dfc6091eeabc0e94ee6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/785adad57e9341f68895624ec7d60eea1c78865b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/785adad57e9341f68895624ec7d60eea1c78865b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/785adad57e9341f68895624ec7d60eea1c78865b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/785adad57e9341f68895624ec7d60eea1c78865b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9162c56419090e330d6851121dc5312dbc3c2589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9162c56419090e330d6851121dc5312dbc3c2589",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9162c56419090e330d6851121dc5312dbc3c2589"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 91,
      "deletions": 81
    },
    "files": [
      {
        "sha": "95c22fc49bf43bf5b8468b31678df2949d569a98",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 62,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/785adad57e9341f68895624ec7d60eea1c78865b/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/785adad57e9341f68895624ec7d60eea1c78865b/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=785adad57e9341f68895624ec7d60eea1c78865b",
        "patch": "@@ -36,12 +36,12 @@ std::map<uint256, int64_t> mapUnknownVotes; //track votes with no tx for DOS\n \n CCriticalSection cs_instantsend;\n \n-//txlock - Locks transaction\n+// Transaction Locks\n //\n-//step 1.) Broadcast intention to lock transaction inputs, \"txlreg\", CTransaction\n-//step 2.) Top INSTANTSEND_SIGNATURES_TOTAL masternodes, open connect to top 1 masternode.\n-//         Send \"txvote\", CTransaction, Signature, Approve\n-//step 3.) Top 1 masternode, waits for INSTANTSEND_SIGNATURES_REQUIRED messages. Upon success, sends \"txlock'\n+// step 1) Some node announces intention to lock transaction inputs via \"txlreg\" message\n+// step 2) Top INSTANTSEND_SIGNATURES_TOTAL masternodes push \"txvote\" message\n+// step 3) Once there are INSTANTSEND_SIGNATURES_REQUIRED valid \"txvote\" messages\n+//         for a corresponding \"txlreg\" message, all inputs from that tx are treated as locked\n \n void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStream& vRecv)\n {\n@@ -218,11 +218,11 @@ bool IsInstantSendTxValid(const CTransaction& txCandidate)\n     return true;\n }\n \n-int64_t CreateTxLockCandidate(CTransaction tx)\n+int64_t CreateTxLockCandidate(const CTransaction& tx)\n {\n-\n+    // Find the age of the first input but all inputs must be old enough too\n     int64_t nTxAge = 0;\n-    BOOST_REVERSE_FOREACH(CTxIn txin, tx.vin) {\n+    BOOST_REVERSE_FOREACH(const CTxIn& txin, tx.vin) {\n         nTxAge = GetInputAge(txin);\n         if(nTxAge < 5) { //1 less than the \"send IX\" gui requires, incase of a block propagating the network at the time\n             LogPrintf(\"CreateTxLockCandidate -- Transaction not found / too new: nTxAge=%d, txid=%s\\n\", nTxAge, tx.GetHash().ToString());\n@@ -235,38 +235,37 @@ int64_t CreateTxLockCandidate(CTransaction tx)\n         This prevents attackers from using transaction mallibility to predict which masternodes\n         they'll use.\n     */\n-    int nBlockHeight = 0;\n+    int nCurrentHeight = 0;\n+    int nLockInputHeight = 0;\n     {\n         LOCK(cs_main);\n-        CBlockIndex* tip = chainActive.Tip();\n-        if(tip)\n-            nBlockHeight = tip->nHeight - nTxAge + 4;\n-        else\n-            return 0;\n+        if(!chainActive.Tip()) return 0;\n+        nCurrentHeight = chainActive.Height();\n+        nLockInputHeight = nCurrentHeight - nTxAge + 4;\n     }\n \n-    if(!mapTxLockCandidates.count(tx.GetHash())) {\n-        LogPrintf(\"CreateTxLockCandidate -- New Transaction Lock Candidate! txid=%s\\n\", tx.GetHash().ToString());\n+    uint256 txHash = tx.GetHash();\n+\n+    if(!mapTxLockCandidates.count(txHash)) {\n+        LogPrintf(\"CreateTxLockCandidate -- New Transaction Lock Candidate! txid=%s\\n\", txHash.ToString());\n \n         CTxLockCandidate txLockCandidate;\n-        txLockCandidate.nBlockHeight = nBlockHeight;\n+        txLockCandidate.nBlockHeight = nLockInputHeight;\n         //locks expire after nInstantSendKeepLock confirmations\n-        txLockCandidate.nExpirationBlock = chainActive.Height() + Params().GetConsensus().nInstantSendKeepLock;\n+        txLockCandidate.nExpirationBlock = nCurrentHeight + Params().GetConsensus().nInstantSendKeepLock;\n         txLockCandidate.nTimeout = GetTime()+(60*5);\n-        txLockCandidate.txHash = tx.GetHash();\n-        mapTxLockCandidates.insert(std::make_pair(tx.GetHash(), txLockCandidate));\n+        txLockCandidate.txHash = txHash;\n+        mapTxLockCandidates.insert(std::make_pair(txHash, txLockCandidate));\n     } else {\n-        mapTxLockCandidates[tx.GetHash()].nBlockHeight = nBlockHeight;\n-        LogPrint(\"instantsend\", \"CreateTxLockCandidate -- Transaction Lock Candidate exists! txid=%s\\n\", tx.GetHash().ToString());\n+        mapTxLockCandidates[txHash].nBlockHeight = nLockInputHeight;\n+        LogPrint(\"instantsend\", \"CreateTxLockCandidate -- Transaction Lock Candidate exists! txid=%s\\n\", txHash.ToString());\n     }\n \n-\n-\n-    return nBlockHeight;\n+    return nLockInputHeight;\n }\n \n // check if we need to vote on this transaction\n-void CreateTxLockVote(CTransaction& tx, int64_t nBlockHeight)\n+void CreateTxLockVote(const CTransaction& tx, int nBlockHeight)\n {\n     if(!fMasterNode) return;\n \n@@ -312,22 +311,26 @@ void CreateTxLockVote(CTransaction& tx, int64_t nBlockHeight)\n //received a consensus vote\n bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n {\n-    int n = mnodeman.GetMasternodeRank(vote.vinMasternode, vote.nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n-    CMasternode* pmn = mnodeman.Find(vote.vinMasternode);\n-    if(pmn != NULL)\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode addr=%s, rank: %d\\n\", pmn->addr.ToString(), n);\n+    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Vote, txid=%s\\n\", vote.txHash.ToString());\n+\n+    if(!mnodeman.Has(vote.vinMasternode)) {\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Unknown masternode %s\\n\", vote.vinMasternode.prevout.ToStringShort());\n+        return false;\n+    }\n+\n+    int n = mnodeman.GetMasternodeRank(vote.vinMasternode, vote.nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n     if(n == -1) {\n         //can be caused by past versions trying to vote with an invalid protocol\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Unknown Masternode: txin=%s\\n\", vote.vinMasternode.ToString());\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Outdated masternode %s\\n\", vote.vinMasternode.prevout.ToStringShort());\n         mnodeman.AskForMN(pnode, vote.vinMasternode);\n         return false;\n     }\n     LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s, rank=%d\\n\", vote.vinMasternode.prevout.ToStringShort(), n);\n \n     if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s is not in the top %d (%d), vote hash %s\\n\",\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s is not in the top %d (%d), vote hash=%s\\n\",\n                 vote.vinMasternode.prevout.ToStringShort(), INSTANTSEND_SIGNATURES_TOTAL, n, vote.GetHash().ToString());\n         return false;\n     }\n@@ -387,7 +390,7 @@ bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n     return false;\n }\n \n-void UpdateLockedTransaction(CTransaction& tx, bool fForceNotification)\n+void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification)\n {\n     // there should be no conflicting locks\n     if(FindConflictingLocks(tx)) return;\n@@ -417,15 +420,15 @@ void UpdateLockedTransaction(CTransaction& tx, bool fForceNotification)\n         GetMainSignals().NotifyTransactionLock(tx);\n }\n \n-void LockTransactionInputs(CTransaction& tx) {\n+void LockTransactionInputs(const CTransaction& tx) {\n     if(!mapLockRequestAccepted.count(tx.GetHash())) return;\n \n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         if(!mapLockedInputs.count(txin.prevout))\n             mapLockedInputs.insert(std::make_pair(txin.prevout, tx.GetHash()));\n }\n \n-bool FindConflictingLocks(CTransaction& tx)\n+bool FindConflictingLocks(const CTransaction& tx)\n {\n     /*\n         It's possible (very unlikely though) to get 2 conflicting transaction locks approved by the network.\n@@ -434,13 +437,14 @@ bool FindConflictingLocks(CTransaction& tx)\n         Blocks could have been rejected during this time, which is OK. After they cancel out, the client will\n         rescan the blocks and find they're acceptable and then take the chain with the most work.\n     */\n+    uint256 txHash = tx.GetHash();\n     BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n         if(mapLockedInputs.count(txin.prevout)) {\n-            if(mapLockedInputs[txin.prevout] != tx.GetHash()) {\n-                LogPrintf(\"FindConflictingLocks -- found two complete conflicting Transaction Locks, removing both: txid=%s, txin=%s\", tx.GetHash().ToString(), mapLockedInputs[txin.prevout].ToString());\n+            if(mapLockedInputs[txin.prevout] != txHash) {\n+                LogPrintf(\"FindConflictingLocks -- found two complete conflicting Transaction Locks, removing both: txid=%s, txin=%s\", txHash.ToString(), mapLockedInputs[txin.prevout].ToString());\n \n-                if(mapTxLockCandidates.count(tx.GetHash()))\n-                    mapTxLockCandidates[tx.GetHash()].nExpirationBlock = -1;\n+                if(mapTxLockCandidates.count(txHash))\n+                    mapTxLockCandidates[txHash].nExpirationBlock = -1;\n \n                 if(mapTxLockCandidates.count(mapLockedInputs[txin.prevout]))\n                     mapTxLockCandidates[mapLockedInputs[txin.prevout]].nExpirationBlock = -1;\n@@ -453,32 +457,34 @@ bool FindConflictingLocks(CTransaction& tx)\n     return false;\n }\n \n-void ResolveConflicts(CTransaction& tx)\n+void ResolveConflicts(const CTransaction& tx)\n {\n+    uint256 txHash = tx.GetHash();\n     // resolve conflicts\n-    if (IsLockedInstandSendTransaction(tx.GetHash()) && !FindConflictingLocks(tx)) { //?????\n+    if (IsLockedInstandSendTransaction(txHash) && !FindConflictingLocks(tx)) { //?????\n         LogPrintf(\"ResolveConflicts -- Found existing complete Transaction Lock, resolving...\\n\");\n \n         //reprocess the last nInstantSendReprocessBlocks blocks\n         ReprocessBlocks(Params().GetConsensus().nInstantSendReprocessBlocks);\n-        if(!mapLockRequestAccepted.count(tx.GetHash()))\n-            mapLockRequestAccepted.insert(std::make_pair(tx.GetHash(), tx)); //?????\n+        if(!mapLockRequestAccepted.count(txHash))\n+            mapLockRequestAccepted.insert(std::make_pair(txHash, tx)); //?????\n     }\n }\n \n int64_t GetAverageUnknownVoteTime()\n {\n+    // should never actually call this function when mapUnknownVotes is empty\n+    if(mapUnknownVotes.empty()) return 0;\n+\n     std::map<uint256, int64_t>::iterator it = mapUnknownVotes.begin();\n     int64_t total = 0;\n-    int64_t count = 0;\n \n     while(it != mapUnknownVotes.end()) {\n         total+= it->second;\n-        count++;\n-        it++;\n+        ++it;\n     }\n \n-    return total / count;\n+    return total / mapUnknownVotes.size();\n }\n \n void CleanTxLockCandidates()\n@@ -487,11 +493,16 @@ void CleanTxLockCandidates()\n \n     std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.begin();\n \n-    int nHeight = chainActive.Height();\n+    int nHeight;\n+    {\n+        LOCK(cs_main);\n+        nHeight = chainActive.Height();\n+    }\n+\n     while(it != mapTxLockCandidates.end()) {\n         CTxLockCandidate &txLockCandidate = it->second;\n         if(nHeight > txLockCandidate.nExpirationBlock) {\n-            LogPrintf(\"CleanTxLockCandidates -- Removing expired Transaction Lock Candidate for txid %s\\n\", txLockCandidate.txHash.ToString());\n+            LogPrintf(\"CleanTxLockCandidates -- Removing expired Transaction Lock Candidate: txid=%s\\n\", txLockCandidate.txHash.ToString());\n \n             if(mapLockRequestAccepted.count(txLockCandidate.txHash)){\n                 CTransaction& tx = mapLockRequestAccepted[txLockCandidate.txHash];\n@@ -509,21 +520,20 @@ void CleanTxLockCandidates()\n \n             mapTxLockCandidates.erase(it++);\n         } else {\n-            it++;\n+            ++it;\n         }\n     }\n }\n \n-bool IsLockedInstandSendTransaction(uint256 txHash)\n+bool IsLockedInstandSendTransaction(const uint256 &txHash)\n {\n     // there must be a successfully verified lock request...\n     if (!mapLockRequestAccepted.count(txHash)) return false;\n     // ...and corresponding lock must have enough signatures\n-    std::map<uint256, CTxLockCandidate>::iterator i = mapTxLockCandidates.find(txHash);\n-    return i != mapTxLockCandidates.end() && (*i).second.CountVotes() >= INSTANTSEND_SIGNATURES_REQUIRED;\n+    return GetTransactionLockSignatures(txHash) >= INSTANTSEND_SIGNATURES_REQUIRED;\n }\n \n-int GetTransactionLockSignatures(uint256 txHash)\n+int GetTransactionLockSignatures(const uint256 &txHash)\n {\n     if(!fEnableInstantSend) return -1;\n     if(fLargeWorkForkFound || fLargeWorkInvalidChainFound) return -2;\n@@ -535,7 +545,7 @@ int GetTransactionLockSignatures(uint256 txHash)\n     return -1;\n }\n \n-bool IsTransactionLockTimedOut(uint256 txHash)\n+bool IsTransactionLockTimedOut(const uint256 &txHash)\n {\n     if(!fEnableInstantSend) return 0;\n \n@@ -551,19 +561,19 @@ uint256 CTxLockVote::GetHash() const\n }\n \n \n-bool CTxLockVote::CheckSignature()\n+bool CTxLockVote::CheckSignature() const\n {\n     std::string strError;\n     std::string strMessage = txHash.ToString().c_str() + boost::lexical_cast<std::string>(nBlockHeight);\n \n-    CMasternode* pmn = mnodeman.Find(vinMasternode);\n+    masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n \n-    if(pmn == NULL) {\n+    if(!infoMn.fInfoValid) {\n         LogPrintf(\"CTxLockVote::CheckSignature -- Unknown Masternode: txin=%s\\n\", vinMasternode.ToString());\n         return false;\n     }\n \n-    if(!darkSendSigner.VerifyMessage(pmn->pubKeyMasternode, vchMasterNodeSignature, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(infoMn.pubKeyMasternode, vchMasterNodeSignature, strMessage, strError)) {\n         LogPrintf(\"CTxLockVote::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }\n@@ -594,7 +604,7 @@ bool CTxLockVote::Sign()\n bool CTxLockCandidate::IsAllVotesValid()\n {\n \n-    BOOST_FOREACH(CTxLockVote vote, vecTxLockVotes)\n+    BOOST_FOREACH(const CTxLockVote& vote, vecTxLockVotes)\n     {\n         int n = mnodeman.GetMasternodeRank(vote.vinMasternode, vote.nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n@@ -617,7 +627,7 @@ bool CTxLockCandidate::IsAllVotesValid()\n     return true;\n }\n \n-void CTxLockCandidate::AddVote(CTxLockVote& vote)\n+void CTxLockCandidate::AddVote(const CTxLockVote& vote)\n {\n     vecTxLockVotes.push_back(vote);\n }\n@@ -632,7 +642,7 @@ int CTxLockCandidate::CountVotes()\n     if(nBlockHeight == 0) return -1;\n \n     int nCount = 0;\n-    BOOST_FOREACH(CTxLockVote vote, vecTxLockVotes)\n+    BOOST_FOREACH(const CTxLockVote& vote, vecTxLockVotes)\n         if(vote.nBlockHeight == nBlockHeight)\n             nCount++;\n "
      },
      {
        "sha": "a06930533e8418d08cc2806eef4db49d7cb6fa66",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/785adad57e9341f68895624ec7d60eea1c78865b/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/785adad57e9341f68895624ec7d60eea1c78865b/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=785adad57e9341f68895624ec7d60eea1c78865b",
        "patch": "@@ -29,7 +29,7 @@ static const int INSTANTSEND_SIGNATURES_TOTAL       = 10;\n static const int DEFAULT_INSTANTSEND_DEPTH          = 5;\n \n static const int MIN_INSTANTSEND_PROTO_VERSION      = 70202;\n-static const CAmount INSTANTSEND_MIN_FEE            = 0.1 * CENT;\n+static const CAmount INSTANTSEND_MIN_FEE            = 0.001 * COIN;\n \n extern bool fEnableInstantSend;\n extern int nInstantSendDepth;\n@@ -41,40 +41,40 @@ extern std::map<uint256, CTxLockVote> mapTxLockVotes;\n extern std::map<COutPoint, uint256> mapLockedInputs;\n \n \n-int64_t CreateTxLockCandidate(CTransaction tx);\n+void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n \n bool IsInstantSendTxValid(const CTransaction& txCandidate);\n \n-void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n+int64_t CreateTxLockCandidate(const CTransaction &tx);\n \n //check if we need to vote on this transaction\n-void CreateTxLockVote(CTransaction& tx, int64_t nBlockHeight);\n+void CreateTxLockVote(const CTransaction& tx, int nBlockHeight);\n \n //process consensus vote message\n bool ProcessTxLockVote(CNode *pnode, CTxLockVote& vote);\n \n //update UI and notify external script if any\n-void UpdateLockedTransaction(CTransaction& tx, bool fForceNotification = false);\n+void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification = false);\n \n-void LockTransactionInputs(CTransaction& tx);\n+void LockTransactionInputs(const CTransaction& tx);\n \n // if two conflicting locks are approved by the network, they will cancel out\n-bool FindConflictingLocks(CTransaction& tx);\n+bool FindConflictingLocks(const CTransaction& tx);\n \n //try to resolve conflicting locks\n-void ResolveConflicts(CTransaction& tx);\n+void ResolveConflicts(const CTransaction& tx);\n \n // keep transaction locks in memory for an hour\n void CleanTxLockCandidates();\n \n // verify if transaction is currently locked\n-bool IsLockedInstandSendTransaction(uint256 txHash);\n+bool IsLockedInstandSendTransaction(const uint256 &txHash);\n \n // get the actual uber og accepted lock signatures\n-int GetTransactionLockSignatures(uint256 txHash);\n+int GetTransactionLockSignatures(const uint256 &txHash);\n \n // verify if transaction lock timed out\n-bool IsTransactionLockTimedOut(uint256 txHash);\n+bool IsTransactionLockTimedOut(const uint256 &txHash);\n \n int64_t GetAverageUnknownVoteTime();\n \n@@ -99,7 +99,7 @@ class CTxLockVote\n     uint256 GetHash() const;\n \n     bool Sign();\n-    bool CheckSignature();\n+    bool CheckSignature() const;\n };\n \n class CTxLockCandidate\n@@ -114,7 +114,7 @@ class CTxLockCandidate\n     uint256 GetHash() const { return txHash; }\n \n     bool IsAllVotesValid();\n-    void AddVote(CTxLockVote& vote);\n+    void AddVote(const CTxLockVote& vote);\n     int CountVotes();\n };\n "
      },
      {
        "sha": "03970bfac30154cbb304cc8b833bd2967f5fc571",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/785adad57e9341f68895624ec7d60eea1c78865b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/785adad57e9341f68895624ec7d60eea1c78865b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=785adad57e9341f68895624ec7d60eea1c78865b",
        "patch": "@@ -940,7 +940,7 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n-int GetInputAge(CTxIn& txin)\n+int GetInputAge(const CTxIn &txin)\n {\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n@@ -960,7 +960,7 @@ int GetInputAge(CTxIn& txin)\n     }\n }\n \n-int GetInputAgeIX(uint256 nTXHash, CTxIn& txin)\n+int GetInputAgeIX(const uint256 &nTXHash, const CTxIn &txin)\n {\n     int nResult = GetInputAge(txin);\n     if(nResult < 0) return -1;\n@@ -971,7 +971,7 @@ int GetInputAgeIX(uint256 nTXHash, CTxIn& txin)\n     return nResult;\n }\n \n-int GetIXConfirmations(uint256 nTXHash)\n+int GetIXConfirmations(const uint256 &nTXHash)\n {\n     if (IsLockedInstandSendTransaction(nTXHash))\n         return nInstantSendDepth;"
      },
      {
        "sha": "577579656a2519a6d0343d9f5ac552d257bf90c4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/785adad57e9341f68895624ec7d60eea1c78865b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/785adad57e9341f68895624ec7d60eea1c78865b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=785adad57e9341f68895624ec7d60eea1c78865b",
        "patch": "@@ -292,9 +292,9 @@ void PruneAndFlush();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false, bool fDryRun=false);\n \n-int GetInputAge(CTxIn& txin);\n-int GetInputAgeIX(uint256 nTXHash, CTxIn& txin);\n-int GetIXConfirmations(uint256 nTXHash);\n+int GetInputAge(const CTxIn &txin);\n+int GetInputAgeIX(const uint256 &nTXHash, const CTxIn &txin);\n+int GetIXConfirmations(const uint256 &nTXHash);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      }
    ]
  },
  {
    "sha": "e84f393571160ce6f747eace3974b8aae3029ef2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODRmMzkzNTcxMTYwY2U2Zjc0N2VhY2UzOTc0YjhhYWUzMDI5ZWYy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-21T20:40:56Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-21T20:40:56Z"
      },
      "message": "more info in getpoolinfo rpc, privatesend rpc should only do actions (#1154)",
      "tree": {
        "sha": "6cfa0e3adadc1eec30c680567887e95a0ff5dd2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cfa0e3adadc1eec30c680567887e95a0ff5dd2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e84f393571160ce6f747eace3974b8aae3029ef2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84f393571160ce6f747eace3974b8aae3029ef2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e84f393571160ce6f747eace3974b8aae3029ef2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84f393571160ce6f747eace3974b8aae3029ef2/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "785adad57e9341f68895624ec7d60eea1c78865b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/785adad57e9341f68895624ec7d60eea1c78865b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/785adad57e9341f68895624ec7d60eea1c78865b"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 32,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7f1b76dc02f0412ec07d894cf23f40c5af4fcc56",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84f393571160ce6f747eace3974b8aae3029ef2/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84f393571160ce6f747eace3974b8aae3029ef2/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=e84f393571160ce6f747eace3974b8aae3029ef2",
        "patch": "@@ -491,6 +491,19 @@ void CDarksendPool::UnlockCoins()\n     vecOutPointLocked.clear();\n }\n \n+std::string CDarksendPool::GetStateString() const\n+{\n+    switch(nState) {\n+        case POOL_STATE_IDLE:                   return \"IDLE\";\n+        case POOL_STATE_QUEUE:                  return \"QUEUE\";\n+        case POOL_STATE_ACCEPTING_ENTRIES:      return \"ACCEPTING_ENTRIES\";\n+        case POOL_STATE_SIGNING:                return \"SIGNING\";\n+        case POOL_STATE_ERROR:                  return \"ERROR\";\n+        case POOL_STATE_SUCCESS:                return \"SUCCESS\";\n+        default:                                return \"UNKNOWN\";\n+    }\n+}\n+\n std::string CDarksendPool::GetStatus()\n {\n     static int nStatusMessageProgress = 0;"
      },
      {
        "sha": "549d7498957fca00e04e07d0dead874bdaefaaa1",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84f393571160ce6f747eace3974b8aae3029ef2/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84f393571160ce6f747eace3974b8aae3029ef2/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=e84f393571160ce6f747eace3974b8aae3029ef2",
        "patch": "@@ -461,6 +461,7 @@ class CDarksendPool\n \n     int GetQueueSize() const { return vecDarksendQueue.size(); }\n     int GetState() const { return nState; }\n+    std::string GetStateString() const;\n     std::string GetStatus();\n \n     int GetEntriesCount() const { return vecEntries.size(); }"
      },
      {
        "sha": "666bc78ab851eead2669ff045949127ad4b7cf27",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 16,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84f393571160ce6f747eace3974b8aae3029ef2/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84f393571160ce6f747eace3974b8aae3029ef2/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=e84f393571160ce6f747eace3974b8aae3029ef2",
        "patch": "@@ -32,7 +32,6 @@ UniValue privatesend(const UniValue& params, bool fHelp)\n             \"  start       - Start mixing\\n\"\n             \"  stop        - Stop mixing\\n\"\n             \"  reset       - Reset mixing\\n\"\n-            \"  status      - Print mixing status\\n\"\n             + HelpRequiringPassphrase());\n \n     if(params[0].get_str() == \"start\") {\n@@ -57,15 +56,6 @@ UniValue privatesend(const UniValue& params, bool fHelp)\n         return \"Mixing was reset\";\n     }\n \n-    if(params[0].get_str() == \"status\") {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"status\",            darkSendPool.GetStatus()));\n-        obj.push_back(Pair(\"keys_left\",     pwalletMain->nKeysLeftSinceAutoBackup));\n-        obj.push_back(Pair(\"warnings\",      (pwalletMain->nKeysLeftSinceAutoBackup < PRIVATESEND_KEYS_THRESHOLD_WARNING\n-                                                ? \"WARNING: keypool is almost depleted!\" : \"\")));\n-        return obj;\n-    }\n-\n     return \"Unknown command, please see \\\"help privatesend\\\"\";\n }\n \n@@ -74,14 +64,26 @@ UniValue getpoolinfo(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 0)\n         throw std::runtime_error(\n             \"getpoolinfo\\n\"\n-            \"Returns an object containing anonymous pool-related information.\");\n+            \"Returns an object containing mixing pool related information.\\n\");\n \n     UniValue obj(UniValue::VOBJ);\n-    if (darkSendPool.pSubmittedToMasternode)\n-        obj.push_back(Pair(\"masternode\",        darkSendPool.pSubmittedToMasternode->addr.ToString()));\n-    obj.push_back(Pair(\"queue\",                 darkSendPool.GetQueueSize()));\n-    obj.push_back(Pair(\"state\",                 darkSendPool.GetState()));\n-    obj.push_back(Pair(\"entries\",               darkSendPool.GetEntriesCount()));\n+    obj.push_back(Pair(\"state\",             darkSendPool.GetStateString()));\n+    obj.push_back(Pair(\"mixing_mode\",       fPrivateSendMultiSession ? \"multi-session\" : \"normal\"));\n+    obj.push_back(Pair(\"queue\",             darkSendPool.GetQueueSize()));\n+    obj.push_back(Pair(\"entries\",           darkSendPool.GetEntriesCount()));\n+    obj.push_back(Pair(\"status\",            darkSendPool.GetStatus()));\n+\n+    if (darkSendPool.pSubmittedToMasternode) {\n+        obj.push_back(Pair(\"outpoint\",      darkSendPool.pSubmittedToMasternode->vin.prevout.ToStringShort()));\n+        obj.push_back(Pair(\"addr\",          darkSendPool.pSubmittedToMasternode->addr.ToString()));\n+    }\n+\n+    if (pwalletMain) {\n+        obj.push_back(Pair(\"keys_left\",     pwalletMain->nKeysLeftSinceAutoBackup));\n+        obj.push_back(Pair(\"warnings\",      pwalletMain->nKeysLeftSinceAutoBackup < PRIVATESEND_KEYS_THRESHOLD_WARNING\n+                                                ? \"WARNING: keypool is almost depleted!\" : \"\"));\n+    }\n+\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "470239bbc5b81a1a340dce87f0c7c117545aa817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzAyMzliYmM1YjgxYTFhMzQwZGNlODdmMGM3YzExNzU0NWFhODE3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-22T14:54:26Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-22T14:54:26Z"
      },
      "message": "Fix IS: (#1161)\n\n- TXLOCKREQUEST should be processed as normal tx plus some custom logic, should not \"fake\" inventory\r\n- should not create \"fake\" local lock, should instead keep track of orphan votes and reprocess them when corresponding TXLOCKREQUEST arrives\r\n- orphan vote time map should be indexed by full outpoint, not by txid of mn collateral\r\n\r\nbump MIN_INSTANTSEND_PROTO_VERSION",
      "tree": {
        "sha": "9266acef246b7870a44f84f25d8d917b28a9e452",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9266acef246b7870a44f84f25d8d917b28a9e452"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/470239bbc5b81a1a340dce87f0c7c117545aa817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470239bbc5b81a1a340dce87f0c7c117545aa817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/470239bbc5b81a1a340dce87f0c7c117545aa817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470239bbc5b81a1a340dce87f0c7c117545aa817/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e84f393571160ce6f747eace3974b8aae3029ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84f393571160ce6f747eace3974b8aae3029ef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e84f393571160ce6f747eace3974b8aae3029ef2"
      }
    ],
    "stats": {
      "total": 326,
      "additions": 173,
      "deletions": 153
    },
    "files": [
      {
        "sha": "68bd691736ee762de03b4be796fad6f7eb102b24",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 143,
        "deletions": 150,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470239bbc5b81a1a340dce87f0c7c117545aa817/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470239bbc5b81a1a340dce87f0c7c117545aa817/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=470239bbc5b81a1a340dce87f0c7c117545aa817",
        "patch": "@@ -29,10 +29,11 @@ int nCompleteTXLocks;\n std::map<uint256, CTransaction> mapLockRequestAccepted;\n std::map<uint256, CTransaction> mapLockRequestRejected;\n std::map<uint256, CTxLockVote> mapTxLockVotes;\n+std::map<uint256, CTxLockVote> mapTxLockVotesOrphan;\n std::map<COutPoint, uint256> mapLockedInputs;\n \n std::map<uint256, CTxLockCandidate> mapTxLockCandidates;\n-std::map<uint256, int64_t> mapUnknownVotes; //track votes with no tx for DOS\n+std::map<COutPoint, int64_t> mapMasternodeOrphanVotes; //track masternodes who voted with no txreq (for DOS protection)\n \n CCriticalSection cs_instantsend;\n \n@@ -51,117 +52,17 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n     // Ignore any InstantSend messages until masternode list is synced\n     if(!masternodeSync.IsMasternodeListSynced()) return;\n \n-    if (strCommand == NetMsgType::TXLOCKREQUEST) // InstantSend Transaction Lock Request\n-    {\n-        //LogPrintf(\"ProcessMessageInstantSend\\n\");\n-        CDataStream vMsg(vRecv);\n-        CTransaction tx;\n-        vRecv >> tx;\n-\n-        // FIXME: this part of simulating inv is not good actually, leaving it only for 12.1 backwards compatibility\n-        // and since we are using invs for relaying even initial ix request, this can (and should) be safely removed in 12.2\n-        CInv inv(MSG_TXLOCK_REQUEST, tx.GetHash());\n-        pfrom->AddInventoryKnown(inv);\n-        GetMainSignals().Inventory(inv.hash);\n-\n-        // have we seen it already?\n-        if(mapLockRequestAccepted.count(inv.hash) || mapLockRequestRejected.count(inv.hash)) return;\n-        // is it a valid one?\n-        if(!IsInstantSendTxValid(tx)) return;\n-\n-        BOOST_FOREACH(const CTxOut o, tx.vout) {\n-            // InstandSend supports normal scripts and unspendable scripts (used in PrivateSend collateral and Governance collateral).\n-            // TODO: Look into other script types that are normal and can be included\n-            if(!o.scriptPubKey.IsNormalPaymentScript() && !o.scriptPubKey.IsUnspendable()) {\n-                LogPrintf(\"ProcessMessageInstantSend -- Invalid Script %s\", tx.ToString());\n-                return;\n-            }\n-        }\n-\n-        int nBlockHeight = CreateTxLockCandidate(tx);\n-\n-        bool fMissingInputs = false;\n-        CValidationState state;\n-\n-        bool fAccepted = false;\n-        {\n-            LOCK(cs_main);\n-            fAccepted = AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs);\n-        }\n-        if(fAccepted) {\n-            RelayInv(inv);\n-\n-            CreateTxLockVote(tx, nBlockHeight);\n-\n-            mapLockRequestAccepted.insert(std::make_pair(tx.GetHash(), tx));\n-\n-            LogPrintf(\"ProcessMessageInstantSend -- Transaction Lock Request: %s %s : accepted %s\\n\",\n-                pfrom->addr.ToString(), pfrom->cleanSubVer,\n-                tx.GetHash().ToString()\n-            );\n+    // NOTE: NetMsgType::TXLOCKREQUEST is handled via ProcessMessage() in main.cpp\n \n-            // Masternodes will sometimes propagate votes before the transaction is known to the client.\n-            // If this just happened - update transaction status, try forcing external script notification,\n-            // lock inputs and resolve conflicting locks\n-            if(IsLockedInstandSendTransaction(tx.GetHash())) {\n-                UpdateLockedTransaction(tx, true);\n-                LockTransactionInputs(tx);\n-                ResolveConflicts(tx);\n-            }\n-\n-            return;\n-\n-        } else {\n-            mapLockRequestRejected.insert(std::make_pair(tx.GetHash(), tx));\n-\n-            // can we get the conflicting transaction as proof?\n-\n-            LogPrintf(\"ProcessMessageInstantSend -- Transaction Lock Request: %s %s : rejected %s\\n\",\n-                pfrom->addr.ToString(), pfrom->cleanSubVer,\n-                tx.GetHash().ToString()\n-            );\n-\n-            LockTransactionInputs(tx);\n-            ResolveConflicts(tx);\n-\n-            return;\n-        }\n-    }\n-    else if (strCommand == NetMsgType::TXLOCKVOTE) // InstantSend Transaction Lock Consensus Votes\n+    if (strCommand == NetMsgType::TXLOCKVOTE) // InstantSend Transaction Lock Consensus Votes\n     {\n         CTxLockVote vote;\n         vRecv >> vote;\n \n-        CInv inv(MSG_TXLOCK_VOTE, vote.GetHash());\n-        pfrom->AddInventoryKnown(inv);\n-\n         if(mapTxLockVotes.count(vote.GetHash())) return;\n         mapTxLockVotes.insert(std::make_pair(vote.GetHash(), vote));\n \n-        if(ProcessTxLockVote(pfrom, vote)) {\n-            //Spam/Dos protection\n-            /*\n-                Masternodes will sometimes propagate votes before the transaction is known to the client.\n-                This tracks those messages and allows it at the same rate of the rest of the network, if\n-                a peer violates it, it will simply be ignored\n-            */\n-            if(!mapLockRequestAccepted.count(vote.txHash) && !mapLockRequestRejected.count(vote.txHash)) {\n-                if(!mapUnknownVotes.count(vote.vinMasternode.prevout.hash))\n-                    mapUnknownVotes[vote.vinMasternode.prevout.hash] = GetTime()+(60*10);\n-\n-                if(mapUnknownVotes[vote.vinMasternode.prevout.hash] > GetTime() &&\n-                    mapUnknownVotes[vote.vinMasternode.prevout.hash] - GetAverageUnknownVoteTime() > 60*10) {\n-                        LogPrintf(\"ProcessMessageInstantSend -- masternode is spamming transaction votes: %s %s\\n\",\n-                            vote.vinMasternode.ToString(),\n-                            vote.txHash.ToString()\n-                        );\n-                        return;\n-                } else {\n-                    mapUnknownVotes[vote.vinMasternode.prevout.hash] = GetTime()+(60*10);\n-                }\n-            }\n-            RelayInv(inv);\n-        }\n+        ProcessTxLockVote(pfrom, vote);\n \n         return;\n     }\n@@ -218,6 +119,46 @@ bool IsInstantSendTxValid(const CTransaction& txCandidate)\n     return true;\n }\n \n+bool ProcessTxLockRequest(CNode* pfrom, const CTransaction &tx)\n+{\n+    if(!IsInstantSendTxValid(tx)) return false;\n+\n+    BOOST_FOREACH(const CTxOut o, tx.vout) {\n+        // InstandSend supports normal scripts and unspendable scripts (used in PrivateSend collateral and Governance collateral).\n+        // TODO: Look into other script types that are normal and can be included\n+        if(!o.scriptPubKey.IsNormalPaymentScript() && !o.scriptPubKey.IsUnspendable()) {\n+            LogPrintf(\"TXLOCKREQUEST -- Invalid Script %s\", tx.ToString());\n+            return false;\n+        }\n+    }\n+\n+    int nBlockHeight = CreateTxLockCandidate(tx);\n+    if(!nBlockHeight) {\n+        // smth is not right\n+        return false;\n+    }\n+\n+    uint256 txHash = tx.GetHash();\n+    mapLockRequestAccepted.insert(std::make_pair(txHash, tx));\n+\n+    LogPrintf(\"TXLOCKREQUEST -- Transaction Lock Request: %s %s : accepted %s\\n\",\n+            pfrom ? pfrom->addr.ToString() : \"\", pfrom ? pfrom->cleanSubVer : \"\", txHash.ToString());\n+\n+    CreateTxLockVote(tx, nBlockHeight);\n+    ProcessOrphanTxLockVotes();\n+\n+    // Masternodes will sometimes propagate votes before the transaction is known to the client.\n+    // If this just happened - update transaction status, try forcing external script notification,\n+    // lock inputs and resolve conflicting locks\n+    if(IsLockedInstandSendTransaction(txHash)) {\n+        UpdateLockedTransaction(tx, true);\n+        LockTransactionInputs(tx);\n+        ResolveConflicts(tx);\n+    }\n+\n+    return true;\n+}\n+\n int64_t CreateTxLockCandidate(const CTransaction& tx)\n {\n     // Find the age of the first input but all inputs must be old enough too\n@@ -311,6 +252,36 @@ void CreateTxLockVote(const CTransaction& tx, int nBlockHeight)\n //received a consensus vote\n bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n {\n+    // Masternodes will sometimes propagate votes before the transaction is known to the client,\n+    // will actually process only after the lock request itself has arrived\n+    if(!mapLockRequestAccepted.count(vote.txHash)) {\n+        if(!mapTxLockVotesOrphan.count(vote.GetHash())) {\n+            LogPrint(\"instantsend\", \"ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s new\\n\", vote.txHash.ToString(), vote.vinMasternode.prevout.ToStringShort());\n+            vote.nOrphanExpireTime = GetTime() + 60; // keep orphan votes for 1 minute\n+            mapTxLockVotesOrphan[vote.GetHash()] = vote;\n+        } else {\n+            LogPrint(\"instantsend\", \"ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s seen\\n\", vote.txHash.ToString(), vote.vinMasternode.prevout.ToStringShort());\n+        }\n+\n+        // This tracks those messages and allows only the same rate as of the rest of the network\n+\n+        int nMasternodeOrphanExpireTime = GetTime() + 60*10; // keep time data for 10 minutes\n+        if(!mapMasternodeOrphanVotes.count(vote.vinMasternode.prevout)) {\n+            mapMasternodeOrphanVotes[vote.vinMasternode.prevout] = nMasternodeOrphanExpireTime;\n+        } else {\n+            int64_t nPrevOrphanVote = mapMasternodeOrphanVotes[vote.vinMasternode.prevout];\n+            if(nPrevOrphanVote > GetTime() && nPrevOrphanVote > GetAverageMasternodeOrphanVoteTime()) {\n+                LogPrint(\"instantsend\", \"ProcessTxLockVote -- masternode is spamming orphan Transaction Lock Votes: txid=%s  masternode=%s\\n\",\n+                        vote.vinMasternode.prevout.ToStringShort(), vote.txHash.ToString());\n+                // Misbehaving(pfrom->id, 1);\n+                return false;\n+            }\n+            // not spamming, refresh\n+            mapMasternodeOrphanVotes[vote.vinMasternode.prevout] = nMasternodeOrphanExpireTime;\n+        }\n+\n+        return true;\n+    }\n \n     LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Vote, txid=%s\\n\", vote.txHash.ToString());\n \n@@ -324,7 +295,9 @@ bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n     if(n == -1) {\n         //can be caused by past versions trying to vote with an invalid protocol\n         LogPrint(\"instantsend\", \"ProcessTxLockVote -- Outdated masternode %s\\n\", vote.vinMasternode.prevout.ToStringShort());\n-        mnodeman.AskForMN(pnode, vote.vinMasternode);\n+        if(pnode) {\n+            mnodeman.AskForMN(pnode, vote.vinMasternode);\n+        }\n         return false;\n     }\n     LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s, rank=%d\\n\", vote.vinMasternode.prevout.ToStringShort(), n);\n@@ -338,56 +311,54 @@ bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n     if(!vote.CheckSignature()) {\n         LogPrintf(\"ProcessTxLockVote -- Signature invalid\\n\");\n         // don't ban, it could just be a non-synced masternode\n-        mnodeman.AskForMN(pnode, vote.vinMasternode);\n+        if(pnode) {\n+            mnodeman.AskForMN(pnode, vote.vinMasternode);\n+        }\n         return false;\n     }\n \n-    if (!mapTxLockCandidates.count(vote.txHash)) {\n-        LogPrintf(\"ProcessTxLockVote -- New Transaction Lock Candidate! txid=%s\\n\", vote.txHash.ToString());\n-\n-        CTxLockCandidate txLockCandidate;\n-        txLockCandidate.nBlockHeight = 0;\n-        //locks expire after nInstantSendKeepLock confirmations\n-        txLockCandidate.nExpirationBlock = chainActive.Height() + Params().GetConsensus().nInstantSendKeepLock;\n-        txLockCandidate.nTimeout = GetTime()+(60*5);\n-        txLockCandidate.txHash = vote.txHash;\n-        mapTxLockCandidates.insert(std::make_pair(vote.txHash, txLockCandidate));\n-    } else {\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Exists! txid=%s\\n\", vote.txHash.ToString());\n+    if(!mapTxLockCandidates.count(vote.txHash)) {\n+        // this should never happen\n+        return false;\n     }\n \n     //compile consessus vote\n-    std::map<uint256, CTxLockCandidate>::iterator i = mapTxLockCandidates.find(vote.txHash);\n-    if (i != mapTxLockCandidates.end()) {\n-        (*i).second.AddVote(vote);\n-\n-        int nSignatures = (*i).second.CountVotes();\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock signatures count: %d, vote hash=%s\\n\", nSignatures, vote.GetHash().ToString());\n-\n-        if(nSignatures >= INSTANTSEND_SIGNATURES_REQUIRED) {\n-            LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Is Complete! txid=%s\\n\", vote.txHash.ToString());\n-\n-            // Masternodes will sometimes propagate votes before the transaction is known to the client,\n-            // will check for conflicting locks and update transaction status on a new vote message\n-            // only after the lock itself has arrived\n-            if(!mapLockRequestAccepted.count(vote.txHash) && !mapLockRequestRejected.count(vote.txHash)) return true;\n-\n-            if(!FindConflictingLocks(mapLockRequestAccepted[vote.txHash])) { //?????\n-                if(mapLockRequestAccepted.count(vote.txHash)) {\n-                    UpdateLockedTransaction(mapLockRequestAccepted[vote.txHash]);\n-                    LockTransactionInputs(mapLockRequestAccepted[vote.txHash]);\n-                } else if(mapLockRequestRejected.count(vote.txHash)) {\n-                    ResolveConflicts(mapLockRequestRejected[vote.txHash]); ///?????\n-                } else {\n-                    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Request is missing! nSignatures=%d, vote hash %s\\n\", nSignatures, vote.GetHash().ToString());\n-                }\n+    mapTxLockCandidates[vote.txHash].AddVote(vote);\n+\n+    int nSignatures = mapTxLockCandidates[vote.txHash].CountVotes();\n+    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock signatures count: %d, vote hash=%s\\n\", nSignatures, vote.GetHash().ToString());\n+\n+    if(nSignatures >= INSTANTSEND_SIGNATURES_REQUIRED) {\n+        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Is Complete! txid=%s\\n\", vote.txHash.ToString());\n+\n+        if(!FindConflictingLocks(mapLockRequestAccepted[vote.txHash])) { //?????\n+            if(mapLockRequestAccepted.count(vote.txHash)) {\n+                UpdateLockedTransaction(mapLockRequestAccepted[vote.txHash]);\n+                LockTransactionInputs(mapLockRequestAccepted[vote.txHash]);\n+            } else if(mapLockRequestRejected.count(vote.txHash)) {\n+                ResolveConflicts(mapLockRequestRejected[vote.txHash]); ///?????\n+            } else {\n+                LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock is missing! nSignatures=%d, vote hash=%s\\n\", nSignatures, vote.GetHash().ToString());\n             }\n         }\n-        return true;\n     }\n \n+    CInv inv(MSG_TXLOCK_VOTE, vote.GetHash());\n+    RelayInv(inv);\n \n-    return false;\n+    return true;\n+}\n+\n+void ProcessOrphanTxLockVotes()\n+{\n+    std::map<uint256, CTxLockVote>::iterator it = mapTxLockVotesOrphan.begin();\n+    while(it != mapTxLockVotesOrphan.end()) {\n+        if(ProcessTxLockVote(NULL, it->second)) {\n+            mapTxLockVotesOrphan.erase(it++);\n+        } else {\n+            ++it;\n+        }\n+    }\n }\n \n void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification)\n@@ -471,20 +442,20 @@ void ResolveConflicts(const CTransaction& tx)\n     }\n }\n \n-int64_t GetAverageUnknownVoteTime()\n+int64_t GetAverageMasternodeOrphanVoteTime()\n {\n-    // should never actually call this function when mapUnknownVotes is empty\n-    if(mapUnknownVotes.empty()) return 0;\n+    // NOTE: should never actually call this function when mapMasternodeOrphanVotes is empty\n+    if(mapMasternodeOrphanVotes.empty()) return 0;\n \n-    std::map<uint256, int64_t>::iterator it = mapUnknownVotes.begin();\n+    std::map<COutPoint, int64_t>::iterator it = mapMasternodeOrphanVotes.begin();\n     int64_t total = 0;\n \n-    while(it != mapUnknownVotes.end()) {\n+    while(it != mapMasternodeOrphanVotes.end()) {\n         total+= it->second;\n         ++it;\n     }\n \n-    return total / mapUnknownVotes.size();\n+    return total / mapMasternodeOrphanVotes.size();\n }\n \n void CleanTxLockCandidates()\n@@ -523,6 +494,28 @@ void CleanTxLockCandidates()\n             ++it;\n         }\n     }\n+\n+    // clean expired orphan votes\n+    std::map<uint256, CTxLockVote>::iterator it1 = mapTxLockVotesOrphan.begin();\n+    while(it1 != mapTxLockVotesOrphan.end()) {\n+        if(it1->second.nOrphanExpireTime < GetTime()) {\n+            LogPrint(\"instantsend\", \"CleanTxLockCandidates -- Removing expired orphan vote: txid=%s  masternode=%s\\n\", it1->second.txHash.ToString(), it1->second.vinMasternode.prevout.ToStringShort());\n+            mapTxLockVotesOrphan.erase(it1++);\n+        } else {\n+            ++it1;\n+        }\n+    }\n+\n+    // clean expired masternode orphan vote times\n+    std::map<COutPoint, int64_t>::iterator it2 = mapMasternodeOrphanVotes.begin();\n+    while(it2 != mapMasternodeOrphanVotes.end()) {\n+        if(it2->second < GetTime()) {\n+            LogPrint(\"instantsend\", \"CleanTxLockCandidates -- Removing expired orphan masternode vote time: masternode=%s\\n\", it2->first.ToStringShort());\n+            mapMasternodeOrphanVotes.erase(it2++);\n+        } else {\n+            ++it2;\n+        }\n+    }\n }\n \n bool IsLockedInstandSendTransaction(const uint256 &txHash)"
      },
      {
        "sha": "5ba53fe2bc89eef7770ea1f3d2fae1b1024ca739",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470239bbc5b81a1a340dce87f0c7c117545aa817/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470239bbc5b81a1a340dce87f0c7c117545aa817/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=470239bbc5b81a1a340dce87f0c7c117545aa817",
        "patch": "@@ -28,7 +28,7 @@ static const int INSTANTSEND_SIGNATURES_REQUIRED    = 6;\n static const int INSTANTSEND_SIGNATURES_TOTAL       = 10;\n static const int DEFAULT_INSTANTSEND_DEPTH          = 5;\n \n-static const int MIN_INSTANTSEND_PROTO_VERSION      = 70202;\n+static const int MIN_INSTANTSEND_PROTO_VERSION      = 70203;\n static const CAmount INSTANTSEND_MIN_FEE            = 0.001 * COIN;\n \n extern bool fEnableInstantSend;\n@@ -45,6 +45,8 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n \n bool IsInstantSendTxValid(const CTransaction& txCandidate);\n \n+bool ProcessTxLockRequest(CNode* pfrom, const CTransaction &tx);\n+\n int64_t CreateTxLockCandidate(const CTransaction &tx);\n \n //check if we need to vote on this transaction\n@@ -53,6 +55,8 @@ void CreateTxLockVote(const CTransaction& tx, int nBlockHeight);\n //process consensus vote message\n bool ProcessTxLockVote(CNode *pnode, CTxLockVote& vote);\n \n+void ProcessOrphanTxLockVotes();\n+\n //update UI and notify external script if any\n void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification = false);\n \n@@ -76,7 +80,7 @@ int GetTransactionLockSignatures(const uint256 &txHash);\n // verify if transaction lock timed out\n bool IsTransactionLockTimedOut(const uint256 &txHash);\n \n-int64_t GetAverageUnknownVoteTime();\n+int64_t GetAverageMasternodeOrphanVoteTime();\n \n class CTxLockVote\n {\n@@ -86,6 +90,9 @@ class CTxLockVote\n     int nBlockHeight;\n     std::vector<unsigned char> vchMasterNodeSignature;\n \n+    // local memory only\n+    int64_t nOrphanExpireTime;\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>"
      },
      {
        "sha": "31fe8f6ab0c92e35201201fd1e7991834e0ab5e3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470239bbc5b81a1a340dce87f0c7c117545aa817/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470239bbc5b81a1a340dce87f0c7c117545aa817/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=470239bbc5b81a1a340dce87f0c7c117545aa817",
        "patch": "@@ -5685,7 +5685,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    else if (strCommand == NetMsgType::TX || strCommand == NetMsgType::DSTX)\n+    else if (strCommand == NetMsgType::TX || strCommand == NetMsgType::DSTX || strCommand == NetMsgType::TXLOCKREQUEST)\n     {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n@@ -5735,6 +5735,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrintf(\"DSTX -- Got Masternode transaction %s\\n\", hashTx.ToString());\n             mempool.PrioritiseTransaction(hashTx, hashTx.ToString(), 1000, 0.1*COIN);\n             pmn->fAllowMixingTx = false;\n+        } else if (strCommand == NetMsgType::TXLOCKREQUEST) {\n+            vRecv >> tx;\n+            nInvType = MSG_TXLOCK_REQUEST;\n         }\n \n         CInv inv(nInvType, tx.GetHash());\n@@ -5750,8 +5753,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n+            // Process custom txes\n             if (strCommand == NetMsgType::DSTX) {\n                 mapDarksendBroadcastTxes.insert(make_pair(tx.GetHash(), dstx));\n+            } else if (strCommand == NetMsgType::TXLOCKREQUEST) {\n+                if(!ProcessTxLockRequest(pfrom, tx)) return false;\n             }\n \n             mempool.check(pcoinsTip);\n@@ -5830,6 +5836,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             assert(recentRejects);\n             recentRejects->insert(tx.GetHash());\n \n+            if (strCommand == NetMsgType::TXLOCKREQUEST && !AlreadyHave(inv)) { // i.e. AcceptToMemoryPool failed\n+                mapLockRequestRejected.insert(std::make_pair(tx.GetHash(), tx));\n+\n+                // can we get the conflicting transaction as proof?\n+\n+                LogPrintf(\"TXLOCKREQUEST -- Transaction Lock Request: %s %s : rejected %s\\n\",\n+                    pfrom->addr.ToString(), pfrom->cleanSubVer,\n+                    tx.GetHash().ToString()\n+                );\n+\n+                LockTransactionInputs(tx);\n+                ResolveConflicts(tx);\n+            }\n+\n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n                 // if they were already in the mempool or rejected from it due"
      }
    ]
  },
  {
    "sha": "9c4e019c368076d036bc691635acc038c9e7a986",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzRlMDE5YzM2ODA3NmQwMzZiYzY5MTYzNWFjYzAzOGM5ZTdhOTg2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-22T15:14:28Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-22T15:14:28Z"
      },
      "message": "bump proto (#1162)\n\n70202 -> 70203",
      "tree": {
        "sha": "e3e931d453ea17f70e97377182bf931094ef937e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3e931d453ea17f70e97377182bf931094ef937e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c4e019c368076d036bc691635acc038c9e7a986",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4e019c368076d036bc691635acc038c9e7a986",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4e019c368076d036bc691635acc038c9e7a986",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4e019c368076d036bc691635acc038c9e7a986/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "470239bbc5b81a1a340dce87f0c7c117545aa817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470239bbc5b81a1a340dce87f0c7c117545aa817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/470239bbc5b81a1a340dce87f0c7c117545aa817"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8b5c3389b38903ebe42c2375930c9ff05e35e021",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4e019c368076d036bc691635acc038c9e7a986/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4e019c368076d036bc691635acc038c9e7a986/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=9c4e019c368076d036bc691635acc038c9e7a986",
        "patch": "@@ -35,7 +35,7 @@ class CGovernanceObject;\n class CGovernanceVote;\n \n static const int MAX_GOVERNANCE_OBJECT_DATA_SIZE = 16 * 1024;\n-static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70202;\n+static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70203;\n \n static const int GOVERNANCE_OBJECT_UNKNOWN = 0;\n static const int GOVERNANCE_OBJECT_PROPOSAL = 1;"
      },
      {
        "sha": "2bc80c1186ceffe99f106ce79bc661294c27ffcd",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4e019c368076d036bc691635acc038c9e7a986/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4e019c368076d036bc691635acc038c9e7a986/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=9c4e019c368076d036bc691635acc038c9e7a986",
        "patch": "@@ -24,7 +24,7 @@ static const int MNPAYMENTS_SIGNATURES_TOTAL            = 10;\n // V1 - Last protocol version before update\n // V2 - Newest protocol version\n static const int MIN_MASTERNODE_PAYMENT_PROTO_VERSION_1 = 70103;\n-static const int MIN_MASTERNODE_PAYMENT_PROTO_VERSION_2 = 70202;\n+static const int MIN_MASTERNODE_PAYMENT_PROTO_VERSION_2 = 70203;\n \n extern CCriticalSection cs_vecPayees;\n extern CCriticalSection cs_mapMasternodeBlocks;"
      },
      {
        "sha": "4afb571e93ca583b239ae43a0450dd1531d7b15c",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4e019c368076d036bc691635acc038c9e7a986/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4e019c368076d036bc691635acc038c9e7a986/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=9c4e019c368076d036bc691635acc038c9e7a986",
        "patch": "@@ -10,7 +10,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70202;\n+static const int PROTOCOL_VERSION = 70203;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;"
      }
    ]
  },
  {
    "sha": "ec59862506d635e82edf7ae084452a90afeda420",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzU5ODYyNTA2ZDYzNWU4MmVkZjdhZTA4NDQ1MmE5MGFmZWRhNDIw",
    "commit": {
      "author": {
        "name": "Nathan Marley",
        "email": "nathan.marley@gmail.com",
        "date": "2016-11-22T19:26:36Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-22T19:26:36Z"
      },
      "message": "Implement `getcurrentvotes` JSONRPC call (#1164)",
      "tree": {
        "sha": "050dc2ad5695c4e66217f6ece50a9aefc73bc5f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/050dc2ad5695c4e66217f6ece50a9aefc73bc5f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec59862506d635e82edf7ae084452a90afeda420",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec59862506d635e82edf7ae084452a90afeda420",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec59862506d635e82edf7ae084452a90afeda420",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec59862506d635e82edf7ae084452a90afeda420/comments",
    "author": {
      "login": "nmarley",
      "id": 1735354,
      "node_id": "MDQ6VXNlcjE3MzUzNTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1735354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nmarley",
      "html_url": "https://github.com/nmarley",
      "followers_url": "https://api.github.com/users/nmarley/followers",
      "following_url": "https://api.github.com/users/nmarley/following{/other_user}",
      "gists_url": "https://api.github.com/users/nmarley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nmarley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nmarley/subscriptions",
      "organizations_url": "https://api.github.com/users/nmarley/orgs",
      "repos_url": "https://api.github.com/users/nmarley/repos",
      "events_url": "https://api.github.com/users/nmarley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nmarley/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c4e019c368076d036bc691635acc038c9e7a986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4e019c368076d036bc691635acc038c9e7a986",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4e019c368076d036bc691635acc038c9e7a986"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 108,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8ecfce66bcd76a2b88c6f5c5db54a9bdbb7495bb",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec59862506d635e82edf7ae084452a90afeda420/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec59862506d635e82edf7ae084452a90afeda420/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=ec59862506d635e82edf7ae084452a90afeda420",
        "patch": "@@ -419,6 +419,53 @@ std::vector<CGovernanceVote> CGovernanceManager::GetMatchingVotes(const uint256&\n     return govobj.GetVoteFile().GetVotes();\n }\n \n+std::vector<CGovernanceVote> CGovernanceManager::GetCurrentVotes(const uint256& nParentHash, const CTxIn& mnCollateralOutpointFilter)\n+{\n+    LOCK(cs);\n+    std::vector<CGovernanceVote> vecResult;\n+\n+    // Find the governance object or short-circuit.\n+    object_m_it it = mapObjects.find(nParentHash);\n+    if(it == mapObjects.end()) return vecResult;\n+    CGovernanceObject& govobj = it->second;\n+\n+    // Compile a list of Masternode collateral outpoints for which to get votes\n+    std::vector<CTxIn> vecMNTxIn;\n+    if (mnCollateralOutpointFilter == CTxIn()) {\n+        std::vector<CMasternode> mnlist = mnodeman.GetFullMasternodeVector();\n+        for (std::vector<CMasternode>::iterator it = mnlist.begin(); it != mnlist.end(); ++it)\n+        {\n+            vecMNTxIn.push_back(it->vin);\n+        }\n+    }\n+    else {\n+        vecMNTxIn.push_back(mnCollateralOutpointFilter);\n+    }\n+\n+    // Loop thru each MN collateral outpoint and get the votes for the `nParentHash` governance object\n+    for (std::vector<CTxIn>::iterator it = vecMNTxIn.begin(); it != vecMNTxIn.end(); ++it)\n+    {\n+        CTxIn &mnCollateralOutpoint = *it;\n+\n+        // get a vote_rec_t from the govobj\n+        vote_rec_t voteRecord;\n+        if (!govobj.GetCurrentMNVotes(mnCollateralOutpoint, voteRecord)) continue;\n+\n+        for (vote_instance_m_it it3 = voteRecord.mapInstances.begin(); it3 != voteRecord.mapInstances.end(); ++it3) {\n+            int signal = (it3->first);\n+            int outcome = ((it3->second).eOutcome);\n+            int64_t nTime = ((it3->second).nTime);\n+\n+            CGovernanceVote vote = CGovernanceVote(mnCollateralOutpoint, nParentHash, (vote_signal_enum_t)signal, (vote_outcome_enum_t)outcome);\n+            vote.SetTime(nTime);\n+\n+            vecResult.push_back(vote);\n+        }\n+    }\n+\n+    return vecResult;\n+}\n+\n std::vector<CGovernanceObject*> CGovernanceManager::GetAllNewerThan(int64_t nMoreThanTime)\n {\n     LOCK(cs);\n@@ -1397,6 +1444,17 @@ int CGovernanceObject::GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const\n     return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_ABSTAIN);\n }\n \n+bool CGovernanceObject::GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vote_rec_t& voteRecord)\n+{\n+    int nMNIndex = governance.GetMasternodeIndex(mnCollateralOutpoint);\n+    vote_m_it it = mapCurrentMNVotes.find(nMNIndex);\n+    if (it == mapCurrentMNVotes.end()) {\n+        return false;\n+    }\n+    voteRecord = it->second;\n+    return  true;\n+}\n+\n void CGovernanceObject::Relay()\n {\n     CInv inv(MSG_GOVERNANCE_OBJECT, GetHash());"
      },
      {
        "sha": "2f6bc1758f12548a0b70b11f74c126d1d1c58b61",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec59862506d635e82edf7ae084452a90afeda420/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec59862506d635e82edf7ae084452a90afeda420/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=ec59862506d635e82edf7ae084452a90afeda420",
        "patch": "@@ -175,6 +175,7 @@ class CGovernanceManager\n     CGovernanceObject *FindGovernanceObject(const uint256& nHash);\n \n     std::vector<CGovernanceVote> GetMatchingVotes(const uint256& nParentHash);\n+    std::vector<CGovernanceVote> GetCurrentVotes(const uint256& nParentHash, const CTxIn& mnCollateralOutpointFilter);\n     std::vector<CGovernanceObject*> GetAllNewerThan(int64_t nMoreThanTime);\n \n     bool IsBudgetPaymentBlock(int nBlockHeight);\n@@ -528,6 +529,8 @@ class CGovernanceObject\n     int GetNoCount(vote_signal_enum_t eVoteSignalIn) const;\n     int GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const;\n \n+    bool GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vote_rec_t& voteRecord);\n+\n     // FUNCTIONS FOR DEALING WITH DATA STRING\n \n     std::string GetDataAsHex();"
      },
      {
        "sha": "db6b900e79507ceef665d3f7365149ff6405e1a4",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 2,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec59862506d635e82edf7ae084452a90afeda420/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec59862506d635e82edf7ae084452a90afeda420/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=ec59862506d635e82edf7ae084452a90afeda420",
        "patch": "@@ -36,15 +36,16 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n     if (fHelp  ||\n         (strCommand != \"vote-many\" && strCommand != \"vote-conf\" && strCommand != \"vote-alias\" && strCommand != \"prepare\" && strCommand != \"submit\" &&\n-         strCommand != \"vote\" && strCommand != \"get\" && strCommand != \"getvotes\" && strCommand != \"list\" && strCommand != \"diff\" && strCommand != \"deserialize\"))\n+         strCommand != \"vote\" && strCommand != \"get\" && strCommand != \"getvotes\" && strCommand != \"getcurrentvotes\" && strCommand != \"list\" && strCommand != \"diff\" && strCommand != \"deserialize\"))\n         throw std::runtime_error(\n                 \"gobject \\\"command\\\"...\\n\"\n                 \"Manage governance objects\\n\"\n                 \"\\nAvailable commands:\\n\"\n                 \"  prepare            - Prepare governance object by signing and creating tx\\n\"\n                 \"  submit             - Submit governance object to network\\n\"\n                 \"  get                - Get governance object by hash\\n\"\n-                \"  getvotes           - Get votes for a governance object hash\\n\"\n+                \"  getvotes           - Get all votes for a governance object hash (including old votes)\\n\"\n+                \"  getcurrentvotes    - Get only current (tallying) votes for a governance object hash (does not include old votes)\\n\"\n                 \"  list               - List all governance objects\\n\"\n                 \"  diff               - List differences since last diff\\n\"\n                 \"  vote-alias         - Vote on a governance object by masternode alias (using masternode.conf setup)\\n\"\n@@ -706,6 +707,50 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         return bResult;\n     }\n \n+    // GETVOTES FOR SPECIFIC GOVERNANCE OBJECT\n+    if(strCommand == \"getcurrentvotes\")\n+    {\n+        if (params.size() < 2 || params.size() == 3 || params.size() > 4)\n+            throw std::runtime_error(\n+                \"Correct usage is 'gobject getcurrentvotes <governance-hash> [txid vout_index]'\"\n+                );\n+\n+        // COLLECT PARAMETERS FROM USER\n+\n+        uint256 hash = ParseHashV(params[1], \"Governance hash\");\n+\n+        CTxIn mnCollateralOutpoint;\n+        if (params.size() == 4) {\n+            uint256 txid = ParseHashV(params[2], \"Masternode Collateral hash\");\n+            std::string strVout = params[3].get_str();\n+            uint32_t vout = boost::lexical_cast<uint32_t>(strVout);\n+            mnCollateralOutpoint = CTxIn(txid, vout);\n+        }\n+\n+        // FIND OBJECT USER IS LOOKING FOR\n+\n+        LOCK(governance.cs);\n+\n+        CGovernanceObject* pGovObj = governance.FindGovernanceObject(hash);\n+\n+        if(pGovObj == NULL) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown governance-hash\");\n+        }\n+\n+        // REPORT RESULTS TO USER\n+\n+        UniValue bResult(UniValue::VOBJ);\n+\n+        // GET MATCHING VOTES BY HASH, THEN SHOW USERS VOTE INFORMATION\n+\n+        std::vector<CGovernanceVote> vecVotes = governance.GetCurrentVotes(hash, mnCollateralOutpoint);\n+        BOOST_FOREACH(CGovernanceVote vote, vecVotes) {\n+            bResult.push_back(Pair(vote.GetHash().ToString(),  vote.ToString()));\n+        }\n+\n+        return bResult;\n+    }\n+\n     return NullUniValue;\n }\n "
      }
    ]
  },
  {
    "sha": "3e8c0062a0a319c59527dcf584cb4717cd245cd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZThjMDA2MmEwYTMxOWM1OTUyN2RjZjU4NGNiNDcxN2NkMjQ1Y2Qy",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-23T15:30:36Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-23T15:30:36Z"
      },
      "message": "Implement SPORK_14_REQUIRE_SENTINEL (#1163)",
      "tree": {
        "sha": "e73f2397c28f94336168a629ea672d1c5a8a2fcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e73f2397c28f94336168a629ea672d1c5a8a2fcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e8c0062a0a319c59527dcf584cb4717cd245cd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8c0062a0a319c59527dcf584cb4717cd245cd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e8c0062a0a319c59527dcf584cb4717cd245cd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8c0062a0a319c59527dcf584cb4717cd245cd2/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec59862506d635e82edf7ae084452a90afeda420",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec59862506d635e82edf7ae084452a90afeda420",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec59862506d635e82edf7ae084452a90afeda420"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 28,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6436eb7c6bcb1cdb2a7194f7f20badec3d3efb4b",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=3e8c0062a0a319c59527dcf584cb4717cd245cd2",
        "patch": "@@ -620,7 +620,7 @@ bool CMasternodePaymentVote::IsValid(CNode* pnode, int nValidationHeight, std::s\n         return false;\n     }\n \n-    int nRank = mnodeman.GetMasternodeRank(vinMasternode, nBlockHeight - 101, nMinRequiredProtocol);\n+    int nRank = mnodeman.GetMasternodeRank(vinMasternode, nBlockHeight - 101, nMinRequiredProtocol, false);\n \n     if(nRank > MNPAYMENTS_SIGNATURES_TOTAL) {\n         // It's common to have masternodes mistakenly think they are in the top 10\n@@ -650,7 +650,7 @@ bool CMasternodePayments::ProcessBlock(int nBlockHeight)\n     // if we have not enough data about masternodes.\n     if(!masternodeSync.IsMasternodeListSynced()) return false;\n \n-    int nRank = mnodeman.GetMasternodeRank(activeMasternode.vin, nBlockHeight - 101, GetMinMasternodePaymentsProto());\n+    int nRank = mnodeman.GetMasternodeRank(activeMasternode.vin, nBlockHeight - 101, GetMinMasternodePaymentsProto(), false);\n \n     if (nRank == -1) {\n         LogPrint(\"mnpayments\", \"CMasternodePayments::ProcessBlock -- Unknown Masternode\\n\");"
      },
      {
        "sha": "2b5077bef625e47f9f365e5ceff6248d8ace253b",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=3e8c0062a0a319c59527dcf584cb4717cd245cd2",
        "patch": "@@ -8,6 +8,7 @@\n #include \"key.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"spork.h\"\n #include \"timedata.h\"\n \n class CMasternode;\n@@ -258,6 +259,19 @@ class CMasternode\n \n     bool IsWatchdogExpired() { return nActiveState == MASTERNODE_WATCHDOG_EXPIRED; }\n \n+    bool IsValidForPayment()\n+    {\n+        if(nActiveState == MASTERNODE_ENABLED) {\n+            return true;\n+        }\n+        if(!sporkManager.IsSporkActive(SPORK_14_REQUIRE_SENTINEL_FLAG) &&\n+           (nActiveState == MASTERNODE_WATCHDOG_EXPIRED)) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     bool IsValidNetAddr();\n \n     void IncreasePoSeBanScore() { if(nPoSeBanScore < MASTERNODE_POSE_BAN_MAX_SCORE) nPoSeBanScore++; }"
      },
      {
        "sha": "c5f3d4af0836a68b756ce5f641e2ff66f02f1793",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=3e8c0062a0a319c59527dcf584cb4717cd245cd2",
        "patch": "@@ -476,7 +476,7 @@ CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight\n     BOOST_FOREACH(CMasternode &mn, vMasternodes)\n     {\n         mn.Check();\n-        if(!mn.IsEnabled()) continue;\n+        if(!mn.IsValidForPayment()) continue;\n \n         // //check protocol version\n         if(mn.nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto()) continue;\n@@ -581,10 +581,13 @@ int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int nBlockHeight, int nM\n     // scan for winner\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n         if(mn.nProtocolVersion < nMinProtocol) continue;\n+        mn.Check();\n         if(fOnlyActive) {\n-            mn.Check();\n             if(!mn.IsEnabled()) continue;\n         }\n+        else {\n+            if(!mn.IsValidForPayment()) continue;\n+        }\n         int64_t nScore = mn.CalculateScore(blockHash).GetCompact(false);\n \n         vecMasternodeScores.push_back(std::make_pair(nScore, &mn));"
      },
      {
        "sha": "130e935a9f73cbd7eecc503504e3904accc1d6ec",
        "filename": "src/spork.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/spork.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/spork.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.cpp?ref=3e8c0062a0a319c59527dcf584cb4717cd245cd2",
        "patch": "@@ -112,6 +112,7 @@ bool CSporkManager::IsSporkActive(int nSporkID)\n             case SPORK_10_MASTERNODE_PAY_UPDATED_NODES:     r = SPORK_10_MASTERNODE_PAY_UPDATED_NODES_DEFAULT; break;\n             case SPORK_12_RECONSIDER_BLOCKS:                r = SPORK_12_RECONSIDER_BLOCKS_DEFAULT; break;\n             case SPORK_13_OLD_SUPERBLOCK_FLAG:              r = SPORK_13_OLD_SUPERBLOCK_FLAG_DEFAULT; break;\n+            case SPORK_14_REQUIRE_SENTINEL_FLAG:            r = SPORK_14_REQUIRE_SENTINEL_FLAG_DEFAULT; break;\n             default:\n                 LogPrint(\"spork\", \"CSporkManager::IsSporkActive -- Unknown Spork ID %d\\n\", nSporkID);\n                 r = 4070908800; // 2099-1-1 i.e. off by default\n@@ -137,6 +138,7 @@ int64_t CSporkManager::GetSporkValue(int nSporkID)\n         case SPORK_10_MASTERNODE_PAY_UPDATED_NODES:     return SPORK_10_MASTERNODE_PAY_UPDATED_NODES_DEFAULT;\n         case SPORK_12_RECONSIDER_BLOCKS:                return SPORK_12_RECONSIDER_BLOCKS_DEFAULT;\n         case SPORK_13_OLD_SUPERBLOCK_FLAG:              return SPORK_13_OLD_SUPERBLOCK_FLAG_DEFAULT;\n+        case SPORK_14_REQUIRE_SENTINEL_FLAG:            return SPORK_14_REQUIRE_SENTINEL_FLAG_DEFAULT;\n         default:\n             LogPrint(\"spork\", \"CSporkManager::GetSporkValue -- Unknown Spork ID %d\\n\", nSporkID);\n             return -1;\n@@ -154,6 +156,7 @@ int CSporkManager::GetSporkIDByName(std::string strName)\n     if (strName == \"SPORK_10_MASTERNODE_PAY_UPDATED_NODES\")     return SPORK_10_MASTERNODE_PAY_UPDATED_NODES;\n     if (strName == \"SPORK_12_RECONSIDER_BLOCKS\")                return SPORK_12_RECONSIDER_BLOCKS;\n     if (strName == \"SPORK_13_OLD_SUPERBLOCK_FLAG\")              return SPORK_13_OLD_SUPERBLOCK_FLAG;\n+    if (strName == \"SPORK_14_REQUIRE_SENTINEL_FLAG\")            return SPORK_14_REQUIRE_SENTINEL_FLAG;\n \n     LogPrint(\"spork\", \"CSporkManager::GetSporkIDByName -- Unknown Spork name '%s'\\n\", strName);\n     return -1;\n@@ -170,6 +173,7 @@ std::string CSporkManager::GetSporkNameByID(int nSporkID)\n         case SPORK_10_MASTERNODE_PAY_UPDATED_NODES:     return \"SPORK_10_MASTERNODE_PAY_UPDATED_NODES\";\n         case SPORK_12_RECONSIDER_BLOCKS:                return \"SPORK_12_RECONSIDER_BLOCKS\";\n         case SPORK_13_OLD_SUPERBLOCK_FLAG:              return \"SPORK_13_OLD_SUPERBLOCK_FLAG\";\n+        case SPORK_14_REQUIRE_SENTINEL_FLAG:            return \"SPORK_14_REQUIRE_SENTINEL_FLAG\";\n         default:\n             LogPrint(\"spork\", \"CSporkManager::GetSporkNameByID -- Unknown Spork ID %d\\n\", nSporkID);\n             return \"Unknown\";"
      },
      {
        "sha": "d586d32206c8e30f8cdf038131dd6049b8110c4b",
        "filename": "src/spork.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/spork.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e8c0062a0a319c59527dcf584cb4717cd245cd2/src/spork.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.h?ref=3e8c0062a0a319c59527dcf584cb4717cd245cd2",
        "patch": "@@ -17,7 +17,7 @@ class CSporkManager;\n     - This would result in old clients getting confused about which spork is for what\n */\n static const int SPORK_START                                            = 10001;\n-static const int SPORK_END                                              = 10012;\n+static const int SPORK_END                                              = 10013;\n \n static const int SPORK_2_INSTANTSEND_ENABLED                            = 10001;\n static const int SPORK_3_INSTANTSEND_BLOCK_FILTERING                    = 10002;\n@@ -27,6 +27,7 @@ static const int SPORK_9_SUPERBLOCKS_ENABLED                            = 10008;\n static const int SPORK_10_MASTERNODE_PAY_UPDATED_NODES                  = 10009;\n static const int SPORK_12_RECONSIDER_BLOCKS                             = 10011;\n static const int SPORK_13_OLD_SUPERBLOCK_FLAG                           = 10012;\n+static const int SPORK_14_REQUIRE_SENTINEL_FLAG                         = 10013;\n \n static const int64_t SPORK_2_INSTANTSEND_ENABLED_DEFAULT                = 0;            // ON\n static const int64_t SPORK_3_INSTANTSEND_BLOCK_FILTERING_DEFAULT        = 0;            // ON\n@@ -36,6 +37,7 @@ static const int64_t SPORK_9_SUPERBLOCKS_ENABLED_DEFAULT                = 407090\n static const int64_t SPORK_10_MASTERNODE_PAY_UPDATED_NODES_DEFAULT      = 4070908800;   // OFF\n static const int64_t SPORK_12_RECONSIDER_BLOCKS_DEFAULT                 = 0;            // 0 BLOCKS\n static const int64_t SPORK_13_OLD_SUPERBLOCK_FLAG_DEFAULT               = 4070908800;   // OFF\n+static const int64_t SPORK_14_REQUIRE_SENTINEL_FLAG_DEFAULT             = 4070908800;   // OFF\n \n extern std::map<uint256, CSporkMessage> mapSporks;\n extern CSporkManager sporkManager;"
      }
    ]
  },
  {
    "sha": "1b90d66ab659ab338851ef22d828fd7b00d43dbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjkwZDY2YWI2NTlhYjMzODg1MWVmMjJkODI4ZmQ3YjAwZDQzZGJj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-24T18:12:05Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-24T18:12:05Z"
      },
      "message": "Implement orphan object and vote timeouts (#1166)",
      "tree": {
        "sha": "28aff7d3a2755ccffbc5f56e146070f60cc54676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28aff7d3a2755ccffbc5f56e146070f60cc54676"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b90d66ab659ab338851ef22d828fd7b00d43dbc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b90d66ab659ab338851ef22d828fd7b00d43dbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b90d66ab659ab338851ef22d828fd7b00d43dbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b90d66ab659ab338851ef22d828fd7b00d43dbc/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e8c0062a0a319c59527dcf584cb4717cd245cd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8c0062a0a319c59527dcf584cb4717cd245cd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e8c0062a0a319c59527dcf584cb4717cd245cd2"
      }
    ],
    "stats": {
      "total": 2181,
      "additions": 1146,
      "deletions": 1035
    },
    "files": [
      {
        "sha": "eba8d98c5155eb0724f811a09acf9cb91111a646",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1b90d66ab659ab338851ef22d828fd7b00d43dbc",
        "patch": "@@ -102,6 +102,7 @@ BITCOIN_CORE_H = \\\n   governance.h \\\n   governance-classes.h \\\n   governance-exceptions.h \\\n+  governance-object.h \\\n   governance-vote.h \\\n   governance-votedb.h \\\n   flat-database.h \\\n@@ -205,6 +206,7 @@ libbitcoin_server_a_SOURCES = \\\n   dbwrapper.cpp \\\n   governance.cpp \\\n   governance-classes.cpp \\\n+  governance-object.cpp \\\n   governance-vote.cpp \\\n   governance-votedb.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "c8d5b910488132f71f67ec218156bd6678d91b72",
        "filename": "src/governance-object.cpp",
        "status": "added",
        "additions": 753,
        "deletions": 0,
        "changes": 753,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=1b90d66ab659ab338851ef22d828fd7b00d43dbc",
        "patch": "@@ -0,0 +1,753 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"core_io.h\"\n+#include \"main.h\"\n+#include \"init.h\"\n+\n+#include \"flat-database.h\"\n+#include \"governance.h\"\n+#include \"governance-object.h\"\n+#include \"governance-vote.h\"\n+#include \"governance-classes.h\"\n+#include \"masternode.h\"\n+#include \"governance.h\"\n+#include \"darksend.h\"\n+#include \"masternodeman.h\"\n+#include \"masternode-sync.h\"\n+#include \"netfulfilledman.h\"\n+#include \"util.h\"\n+#include \"addrman.h\"\n+#include <boost/lexical_cast.hpp>\n+#include <univalue.h>\n+\n+CGovernanceObject::CGovernanceObject()\n+: cs(),\n+  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+  nHashParent(),\n+  nRevision(0),\n+  nTime(0),\n+  nDeletionTime(0),\n+  nCollateralHash(),\n+  strData(),\n+  vinMasternode(),\n+  vchSig(),\n+  fCachedLocalValidity(false),\n+  strLocalValidityError(),\n+  fCachedFunding(false),\n+  fCachedValid(true),\n+  fCachedDelete(false),\n+  fCachedEndorsed(false),\n+  fDirtyCache(true),\n+  fExpired(false),\n+  fUnparsable(false),\n+  mapCurrentMNVotes(),\n+  mapOrphanVotes(),\n+  fileVotes()\n+{\n+    // PARSE JSON DATA STORAGE (STRDATA)\n+    LoadData();\n+}\n+\n+CGovernanceObject::CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTimeIn, uint256 nCollateralHashIn, std::string strDataIn)\n+: cs(),\n+  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+  nHashParent(nHashParentIn),\n+  nRevision(nRevisionIn),\n+  nTime(nTimeIn),\n+  nDeletionTime(0),\n+  nCollateralHash(nCollateralHashIn),\n+  strData(strDataIn),\n+  vinMasternode(),\n+  vchSig(),\n+  fCachedLocalValidity(false),\n+  strLocalValidityError(),\n+  fCachedFunding(false),\n+  fCachedValid(true),\n+  fCachedDelete(false),\n+  fCachedEndorsed(false),\n+  fDirtyCache(true),\n+  fExpired(false),\n+  fUnparsable(false),\n+  mapCurrentMNVotes(),\n+  mapOrphanVotes(),\n+  fileVotes()\n+{\n+    // PARSE JSON DATA STORAGE (STRDATA)\n+    LoadData();\n+}\n+\n+CGovernanceObject::CGovernanceObject(const CGovernanceObject& other)\n+: cs(),\n+  nObjectType(other.nObjectType),\n+  nHashParent(other.nHashParent),\n+  nRevision(other.nRevision),\n+  nTime(other.nTime),\n+  nDeletionTime(other.nDeletionTime),\n+  nCollateralHash(other.nCollateralHash),\n+  strData(other.strData),\n+  vinMasternode(other.vinMasternode),\n+  vchSig(other.vchSig),\n+  fCachedLocalValidity(other.fCachedLocalValidity),\n+  strLocalValidityError(other.strLocalValidityError),\n+  fCachedFunding(other.fCachedFunding),\n+  fCachedValid(other.fCachedValid),\n+  fCachedDelete(other.fCachedDelete),\n+  fCachedEndorsed(other.fCachedEndorsed),\n+  fDirtyCache(other.fDirtyCache),\n+  fExpired(other.fExpired),\n+  fUnparsable(other.fUnparsable),\n+  mapCurrentMNVotes(other.mapCurrentMNVotes),\n+  mapOrphanVotes(other.mapOrphanVotes),\n+  fileVotes(other.fileVotes)\n+{}\n+\n+bool CGovernanceObject::ProcessVote(CNode* pfrom,\n+                                    const CGovernanceVote& vote,\n+                                    CGovernanceException& exception)\n+{\n+    int nMNIndex = governance.GetMasternodeIndex(vote.GetVinMasternode());\n+    if(nMNIndex < 0) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::ProcessVote -- Masternode index not found\\n\";\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        if(mapOrphanVotes.Insert(vote.GetVinMasternode(), vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME))) {\n+            if(pfrom) {\n+                mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n+            }\n+            LogPrintf(ostr.str().c_str());\n+        }\n+        else {\n+            LogPrint(\"gobject\", ostr.str().c_str());\n+        }\n+        return false;\n+    }\n+\n+    vote_m_it it = mapCurrentMNVotes.find(nMNIndex);\n+    if(it == mapCurrentMNVotes.end()) {\n+        it = mapCurrentMNVotes.insert(vote_m_t::value_type(nMNIndex,vote_rec_t())).first;\n+    }\n+    vote_rec_t& recVote = it->second;\n+    vote_signal_enum_t eSignal = vote.GetSignal();\n+    if(eSignal == VOTE_SIGNAL_NONE) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::ProcessVote -- Vote signal: none\" << \"\\n\";\n+        LogPrint(\"gobject\", ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n+        return false;\n+    }\n+    if(eSignal > MAX_SUPPORTED_VOTE_SIGNAL) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::ProcessVote -- Unsupported vote signal:\" << CGovernanceVoting::ConvertSignalToString(vote.GetSignal()) << \"\\n\";\n+        LogPrintf(ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n+        return false;\n+    }\n+    vote_instance_m_it it2 = recVote.mapInstances.find(int(eSignal));\n+    if(it2 == recVote.mapInstances.end()) {\n+        it2 = recVote.mapInstances.insert(vote_instance_m_t::value_type(int(eSignal), vote_instance_t())).first;\n+    }\n+    vote_instance_t& voteInstance = it2->second;\n+    int64_t nNow = GetTime();\n+    if(governance.AreRateChecksEnabled()) {\n+        int64_t nTimeDelta = nNow - voteInstance.nTime;\n+        if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n+            std::ostringstream ostr;\n+            ostr << \"CGovernanceObject::ProcessVote -- Masternode voting too often \"\n+                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                 << \", governance object hash = \" << GetHash().ToString()\n+                 << \", time delta = \" << nTimeDelta << \"\\n\";\n+            LogPrint(\"gobject\", ostr.str().c_str());\n+            exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_TEMPORARY_ERROR);\n+            return false;\n+        }\n+    }\n+    // Finally check that the vote is actually valid (done last because of cost of signature verification)\n+    if(!vote.IsValid(true)) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::ProcessVote -- Invalid vote \"\n+                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n+                << \", governance object hash = \" << GetHash().ToString()\n+                << \", vote hash = \" << vote.GetHash().ToString() << \"\\n\";\n+        LogPrintf(ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n+        governance.AddInvalidVote(vote);\n+        return false;\n+    }\n+    voteInstance = vote_instance_t(vote.GetOutcome(), nNow);\n+    fileVotes.AddVote(vote);\n+    fDirtyCache = true;\n+    return true;\n+}\n+\n+void CGovernanceObject::RebuildVoteMap()\n+{\n+    vote_m_t mapMNVotesNew;\n+    for(vote_m_it it = mapCurrentMNVotes.begin(); it != mapCurrentMNVotes.end(); ++it) {\n+        CTxIn vinMasternode;\n+        if(mnodeman.GetMasternodeVinForIndexOld(it->first, vinMasternode)) {\n+            int nNewIndex = mnodeman.GetMasternodeIndex(vinMasternode);\n+            if((nNewIndex >= 0)) {\n+                mapMNVotesNew[nNewIndex] = it->second;\n+            }\n+        }\n+    }\n+    mapCurrentMNVotes = mapMNVotesNew;\n+}\n+\n+void CGovernanceObject::ClearMasternodeVotes()\n+{\n+    vote_m_it it = mapCurrentMNVotes.begin();\n+    while(it != mapCurrentMNVotes.end()) {\n+        bool fIndexRebuilt = false;\n+        CTxIn vinMasternode;\n+        bool fRemove = true;\n+        if(mnodeman.Get(it->first, vinMasternode, fIndexRebuilt)) {\n+            if(mnodeman.Has(vinMasternode)) {\n+                fRemove = false;\n+            }\n+            else {\n+                fileVotes.RemoveVotesFromMasternode(vinMasternode);\n+            }\n+        }\n+\n+        if(fRemove) {\n+            mapCurrentMNVotes.erase(it++);\n+        }\n+        else {\n+            ++it;\n+        }\n+    }\n+}\n+\n+void CGovernanceObject::SetMasternodeInfo(const CTxIn& vin)\n+{\n+    vinMasternode = vin;\n+}\n+\n+bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n+{\n+    LOCK(cs);\n+\n+    std::string strError;\n+    uint256 nHash = GetHash();\n+    std::string strMessage = nHash.ToString();\n+\n+    if(!darkSendSigner.SignMessage(strMessage, vchSig, keyMasternode)) {\n+        LogPrintf(\"CGovernanceObject::Sign -- SignMessage() failed\\n\");\n+        return false;\n+    }\n+\n+    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n+        LogPrintf(\"CGovernanceObject::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n+        return false;\n+    }\n+\n+    LogPrint(\"gobject\", \"CGovernanceObject::Sign -- pubkey id = %s, vin = %s\\n\",\n+             pubKeyMasternode.GetID().ToString(), vinMasternode.prevout.ToStringShort());\n+\n+\n+    return true;\n+}\n+\n+bool CGovernanceObject::CheckSignature(CPubKey& pubKeyMasternode)\n+{\n+    LOCK(cs);\n+    std::string strError;\n+    uint256 nHash = GetHash();\n+    std::string strMessage = nHash.ToString();\n+\n+    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n+        LogPrintf(\"CGovernance::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+int CGovernanceObject::GetObjectSubtype()\n+{\n+    // todo - 12.1\n+    //   - detect subtype from strData json, obj[\"subtype\"]\n+\n+    if(nObjectType == GOVERNANCE_OBJECT_TRIGGER) return TRIGGER_SUPERBLOCK;\n+    return -1;\n+}\n+\n+uint256 CGovernanceObject::GetHash()\n+{\n+    // CREATE HASH OF ALL IMPORTANT PIECES OF DATA\n+\n+    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    ss << nHashParent;\n+    ss << nRevision;\n+    ss << nTime;\n+    ss << strData;\n+    // fee_tx is left out on purpose\n+    uint256 h1 = ss.GetHash();\n+\n+    DBG( printf(\"CGovernanceObject::GetHash %i %li %s\\n\", nRevision, nTime, strData.c_str()); );\n+\n+    return h1;\n+}\n+\n+/**\n+   Return the actual object from the strData JSON structure.\n+\n+   Returns an empty object on error.\n+ */\n+UniValue CGovernanceObject::GetJSONObject()\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    if(strData.empty()) {\n+        return obj;\n+    }\n+\n+    UniValue objResult(UniValue::VOBJ);\n+    GetData(objResult);\n+\n+    std::vector<UniValue> arr1 = objResult.getValues();\n+    std::vector<UniValue> arr2 = arr1.at( 0 ).getValues();\n+    obj = arr2.at( 1 );\n+\n+    return obj;\n+}\n+\n+/**\n+*   LoadData\n+*   --------------------------------------------------------\n+*\n+*   Attempt to load data from strData\n+*\n+*/\n+\n+void CGovernanceObject::LoadData()\n+{\n+    // todo : 12.1 - resolved\n+    //return;\n+\n+    if(strData.empty()) {\n+        return;\n+    }\n+\n+    try  {\n+        // ATTEMPT TO LOAD JSON STRING FROM STRDATA\n+        UniValue objResult(UniValue::VOBJ);\n+        GetData(objResult);\n+\n+        DBG( cout << \"CGovernanceObject::LoadData strData = \"\n+             << GetDataAsString()\n+             << endl; );\n+\n+        UniValue obj = GetJSONObject();\n+        nObjectType = obj[\"type\"].get_int();\n+    }\n+    catch(std::exception& e) {\n+        fUnparsable = true;\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::LoadData Error parsing JSON\"\n+             << \", e.what() = \" << e.what();\n+        DBG( cout << ostr.str() << endl; );\n+        LogPrintf( ostr.str().c_str() );\n+        return;\n+    }\n+    catch(...) {\n+        fUnparsable = true;\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::LoadData Unknown Error parsing JSON\";\n+        DBG( cout << ostr.str() << endl; );\n+        LogPrintf( ostr.str().c_str() );\n+        return;\n+    }\n+}\n+\n+/**\n+*   GetData - Example usage:\n+*   --------------------------------------------------------\n+*\n+*   Decode governance object data into UniValue(VOBJ)\n+*\n+*/\n+\n+void CGovernanceObject::GetData(UniValue& objResult)\n+{\n+    UniValue o(UniValue::VOBJ);\n+    std::string s = GetDataAsString();\n+    o.read(s);\n+    objResult = o;\n+}\n+\n+/**\n+*   GetData - As\n+*   --------------------------------------------------------\n+*\n+*/\n+\n+std::string CGovernanceObject::GetDataAsHex()\n+{\n+    return strData;\n+}\n+\n+std::string CGovernanceObject::GetDataAsString()\n+{\n+    std::vector<unsigned char> v = ParseHex(strData);\n+    std::string s(v.begin(), v.end());\n+\n+    return s;\n+}\n+\n+void CGovernanceObject::UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex)\n+{\n+    // THIS DOES NOT CHECK COLLATERAL, THIS IS CHECKED UPON ORIGINAL ARRIVAL\n+    fCachedLocalValidity = IsValidLocally(pCurrentBlockIndex, strLocalValidityError, false);\n+};\n+\n+\n+bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral)\n+{\n+    bool fMissingMasternode = false;\n+\n+    return IsValidLocally(pindex, strError, fMissingMasternode, fCheckCollateral);\n+}\n+\n+bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral)\n+{\n+    fMissingMasternode = false;\n+    if(!pindex) {\n+        strError = \"Tip is NULL\";\n+        return true;\n+    }\n+\n+    if(fUnparsable) {\n+        strError = \"Object data unparseable\";\n+        return false;\n+    }\n+\n+    switch(nObjectType) {\n+        case GOVERNANCE_OBJECT_PROPOSAL:\n+        case GOVERNANCE_OBJECT_TRIGGER:\n+        case GOVERNANCE_OBJECT_WATCHDOG:\n+            break;\n+        default:\n+            strError = strprintf(\"Invalid object type %d\", nObjectType);\n+            return false;\n+    }\n+\n+    // IF ABSOLUTE NO COUNT (NO-YES VALID VOTES) IS MORE THAN 10% OF THE NETWORK MASTERNODES, OBJ IS INVALID\n+\n+    if(GetAbsoluteNoCount(VOTE_SIGNAL_VALID) > mnodeman.CountEnabled(MIN_GOVERNANCE_PEER_PROTO_VERSION)/10) {\n+        strError = \"Automated removal\";\n+        return false;\n+    }\n+\n+    // CHECK COLLATERAL IF REQUIRED (HIGH CPU USAGE)\n+\n+    if(fCheckCollateral) { \n+        if((nObjectType == GOVERNANCE_OBJECT_TRIGGER) || (nObjectType == GOVERNANCE_OBJECT_WATCHDOG)) {\n+            std::string strOutpoint = vinMasternode.prevout.ToStringShort();\n+            masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n+            if(!infoMn.fInfoValid) {\n+                fMissingMasternode = true;\n+                strError = \"Masternode not found: \" + strOutpoint;\n+                return false;\n+            }\n+\n+            // Check that we have a valid MN signature\n+            if(!CheckSignature(infoMn.pubKeyMasternode)) {\n+                strError = \"Invalid masternode signature for: \" + strOutpoint + \", pubkey id = \" + infoMn.pubKeyMasternode.GetID().ToString();\n+                return false;\n+            }\n+\n+            // Only perform rate check if we are synced because during syncing it is expected\n+            // that objects will be seen in rapid succession\n+            if(masternodeSync.IsSynced()) {\n+                if(!governance.MasternodeRateCheck(vinMasternode, nObjectType)) {\n+                    strError = \"Masternode attempting to create too many objects: \" + strOutpoint;\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        if(!IsCollateralValid(strError)) {\n+            // strError set in IsCollateralValid\n+            if(strError == \"\") strError = \"Collateral is invalid\";\n+            return false;\n+        }\n+    }\n+\n+    /*\n+        TODO\n+\n+        - There might be an issue with multisig in the coinbase on mainnet, we will add support for it in a future release.\n+        - Post 12.2+ (test multisig coinbase transaction)\n+    */\n+\n+    // 12.1 - todo - compile error\n+    // if(address.IsPayToScriptHash()) {\n+    //     strError = \"Governance system - multisig is not currently supported\";\n+    //     return false;\n+    // }\n+\n+    return true;\n+}\n+\n+CAmount CGovernanceObject::GetMinCollateralFee()\n+{\n+    // Only 1 type has a fee for the moment but switch statement allows for future object types\n+    switch(nObjectType) {\n+        case GOVERNANCE_OBJECT_PROPOSAL:    return GOVERNANCE_PROPOSAL_FEE_TX;\n+        case GOVERNANCE_OBJECT_TRIGGER:     return 0;\n+        case GOVERNANCE_OBJECT_WATCHDOG:    return 0;\n+        default:                            return MAX_MONEY;\n+    }\n+}\n+\n+bool CGovernanceObject::IsCollateralValid(std::string& strError)\n+{\n+    strError = \"\";\n+    CAmount nMinFee = GetMinCollateralFee();\n+    uint256 nExpectedHash = GetHash();\n+\n+    CTransaction txCollateral;\n+    uint256 nBlockHash;\n+\n+    // RETRIEVE TRANSACTION IN QUESTION\n+\n+    if(!GetTransaction(nCollateralHash, txCollateral, Params().GetConsensus(), nBlockHash, true)){\n+        strError = strprintf(\"Can't find collateral tx %s\", txCollateral.ToString());\n+        LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n+        return false;\n+    }\n+\n+    if(txCollateral.vout.size() < 1) {\n+        strError = strprintf(\"tx vout size less than 1 | %d\", txCollateral.vout.size());\n+        LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n+        return false;\n+    }\n+\n+    // LOOK FOR SPECIALIZED GOVERNANCE SCRIPT (PROOF OF BURN)\n+\n+    CScript findScript;\n+    findScript << OP_RETURN << ToByteVector(nExpectedHash);\n+\n+    DBG( cout << \"IsCollateralValid txCollateral.vout.size() = \" << txCollateral.vout.size() << endl; );\n+\n+    DBG( cout << \"IsCollateralValid: findScript = \" << ScriptToAsmStr( findScript, false ) << endl; );\n+\n+    DBG( cout << \"IsCollateralValid: nMinFee = \" << nMinFee << endl; );\n+\n+\n+    bool foundOpReturn = false;\n+    BOOST_FOREACH(const CTxOut o, txCollateral.vout) {\n+        DBG( cout << \"IsCollateralValid txout : \" << o.ToString()\n+             << \", o.nValue = \" << o.nValue\n+             << \", o.scriptPubKey = \" << ScriptToAsmStr( o.scriptPubKey, false )\n+             << endl; );\n+        if(!o.scriptPubKey.IsNormalPaymentScript() && !o.scriptPubKey.IsUnspendable()){\n+            strError = strprintf(\"Invalid Script %s\", txCollateral.ToString());\n+            LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n+            return false;\n+        }\n+        if(o.scriptPubKey == findScript && o.nValue >= nMinFee) {\n+            DBG( cout << \"IsCollateralValid foundOpReturn = true\" << endl; );\n+            foundOpReturn = true;\n+        }\n+        else  {\n+            DBG( cout << \"IsCollateralValid No match, continuing\" << endl; );\n+        }\n+\n+    }\n+\n+    if(!foundOpReturn){\n+        strError = strprintf(\"Couldn't find opReturn %s in %s\", nExpectedHash.ToString(), txCollateral.ToString());\n+        LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n+        return false;\n+    }\n+\n+    // GET CONFIRMATIONS FOR TRANSACTION\n+\n+    LOCK(cs_main);\n+    int nConfirmationsIn = GetIXConfirmations(nCollateralHash);\n+    if (nBlockHash != uint256()) {\n+        BlockMap::iterator mi = mapBlockIndex.find(nBlockHash);\n+        if (mi != mapBlockIndex.end() && (*mi).second) {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (chainActive.Contains(pindex)) {\n+                nConfirmationsIn += chainActive.Height() - pindex->nHeight + 1;\n+            }\n+        }\n+    }\n+\n+    if(nConfirmationsIn >= GOVERNANCE_FEE_CONFIRMATIONS) {\n+        strError = \"valid\";\n+    } else {\n+        strError = strprintf(\"Collateral requires at least %d confirmations - %d confirmations\", GOVERNANCE_FEE_CONFIRMATIONS, nConfirmationsIn);\n+        LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s - %d confirmations\\n\", strError, nConfirmationsIn);\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+int CGovernanceObject::CountMatchingVotes(vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn) const\n+{\n+    int nCount = 0;\n+    for(vote_m_cit it = mapCurrentMNVotes.begin(); it != mapCurrentMNVotes.end(); ++it) {\n+        const vote_rec_t& recVote = it->second;\n+        vote_instance_m_cit it2 = recVote.mapInstances.find(eVoteSignalIn);\n+        if(it2 == recVote.mapInstances.end()) {\n+            continue;\n+        }\n+        const vote_instance_t& voteInstance = it2->second;\n+        if(voteInstance.eOutcome == eVoteOutcomeIn) {\n+            ++nCount;\n+        }\n+    }\n+    return nCount;\n+}\n+\n+/**\n+*   Get specific vote counts for each outcome (funding, validity, etc)\n+*/\n+\n+int CGovernanceObject::GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn) const\n+{\n+    return GetYesCount(eVoteSignalIn) - GetNoCount(eVoteSignalIn);\n+}\n+\n+int CGovernanceObject::GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn) const\n+{\n+    return GetNoCount(eVoteSignalIn) - GetYesCount(eVoteSignalIn);\n+}\n+\n+int CGovernanceObject::GetYesCount(vote_signal_enum_t eVoteSignalIn) const\n+{\n+    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_YES);\n+}\n+\n+int CGovernanceObject::GetNoCount(vote_signal_enum_t eVoteSignalIn) const\n+{\n+    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_NO);\n+}\n+\n+int CGovernanceObject::GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const\n+{\n+    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_ABSTAIN);\n+}\n+\n+bool CGovernanceObject::GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vote_rec_t& voteRecord)\n+{\n+    int nMNIndex = governance.GetMasternodeIndex(mnCollateralOutpoint);\n+    vote_m_it it = mapCurrentMNVotes.find(nMNIndex);\n+    if (it == mapCurrentMNVotes.end()) {\n+        return false;\n+    }\n+    voteRecord = it->second;\n+    return  true;\n+}\n+\n+void CGovernanceObject::Relay()\n+{\n+    CInv inv(MSG_GOVERNANCE_OBJECT, GetHash());\n+    RelayInv(inv, PROTOCOL_VERSION);\n+}\n+\n+void CGovernanceObject::UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex)\n+{\n+    // CALCULATE MINIMUM SUPPORT LEVELS REQUIRED\n+\n+    int nMnCount = mnodeman.CountEnabled();\n+    if(nMnCount == 0) return;\n+\n+    // CALCULATE THE MINUMUM VOTE COUNT REQUIRED FOR FULL SIGNAL\n+\n+    // todo - 12.1 - should be set to `10` after governance vote compression is implemented\n+    int nAbsVoteReq = std::max(Params().GetConsensus().nGovernanceMinQuorum, nMnCount / 10);\n+    // todo - 12.1 - Temporarily set to 1 for testing - reverted\n+    //nAbsVoteReq = 1;\n+\n+    // SET SENTINEL FLAGS TO FALSE\n+\n+    fCachedFunding = false;\n+    fCachedValid = true; //default to valid\n+    fCachedDelete = false;\n+    fCachedEndorsed = false;\n+    fDirtyCache = false;\n+\n+    // SET SENTINEL FLAGS TO TRUE IF MIMIMUM SUPPORT LEVELS ARE REACHED\n+    // ARE ANY OF THESE FLAGS CURRENTLY ACTIVATED?\n+\n+    if(GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = true;\n+    if(GetAbsoluteYesCount(VOTE_SIGNAL_VALID) >= nAbsVoteReq) fCachedValid = true;\n+    if(GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) {\n+        fCachedDelete = true;\n+        nDeletionTime = GetAdjustedTime();\n+    }\n+    if(GetAbsoluteYesCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = true;\n+\n+    // ARE ANY OF THE VOTING FLAGS NEGATIVELY SET BY THE NETWORK?\n+    // THIS CAN BE CACHED, THE VOTES BEING HOT-LOADED AS NEEDED TO RECALCULATE\n+\n+    if(GetAbsoluteNoCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = false;\n+    if(GetAbsoluteNoCount(VOTE_SIGNAL_VALID) >= nAbsVoteReq) fCachedValid = false;\n+    if(GetAbsoluteNoCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) fCachedDelete = false;\n+    if(GetAbsoluteNoCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = false;\n+}\n+\n+void CGovernanceObject::swap(CGovernanceObject& first, CGovernanceObject& second) // nothrow\n+{\n+    // enable ADL (not necessary in our case, but good practice)\n+    using std::swap;\n+\n+    // by swapping the members of two classes,\n+    // the two classes are effectively swapped\n+    swap(first.nHashParent, second.nHashParent);\n+    swap(first.nRevision, second.nRevision);\n+    swap(first.nTime, second.nTime);\n+    swap(first.nDeletionTime, second.nDeletionTime);\n+    swap(first.nCollateralHash, second.nCollateralHash);\n+    swap(first.strData, second.strData);\n+    swap(first.nObjectType, second.nObjectType);\n+\n+    // swap all cached valid flags\n+    swap(first.fCachedFunding, second.fCachedFunding);\n+    swap(first.fCachedValid, second.fCachedValid);\n+    swap(first.fCachedDelete, second.fCachedDelete);\n+    swap(first.fCachedEndorsed, second.fCachedEndorsed);\n+    swap(first.fDirtyCache, second.fDirtyCache);\n+    swap(first.fExpired, second.fExpired);\n+}\n+\n+void CGovernanceObject::CheckOrphanVotes()\n+{\n+    int64_t nNow = GetAdjustedTime();\n+    const vote_mcache_t::list_t& listVotes = mapOrphanVotes.GetItemList();\n+    vote_mcache_t::list_cit it = listVotes.begin();\n+    while(it != listVotes.end()) {\n+        bool fRemove = false;\n+        const CTxIn& key = it->key;\n+        const vote_time_pair_t& pairVote = it->value;\n+        const CGovernanceVote& vote = pairVote.first;\n+        if(pairVote.second < nNow) {\n+            fRemove = true;\n+        }\n+        else if(!mnodeman.Has(vote.GetVinMasternode())) {\n+            ++it;\n+            continue;\n+        }\n+        CGovernanceException exception;\n+        if(!ProcessVote(NULL, vote, exception)) {\n+            LogPrintf(\"CGovernanceObject::CheckOrphanVotes -- Failed to add orphan vote: %s\\n\", exception.what());\n+        }\n+        else {\n+            fRemove = true;\n+        }\n+        ++it;\n+        if(fRemove) {\n+            mapOrphanVotes.Erase(key, pairVote);\n+        }\n+    }\n+}"
      },
      {
        "sha": "36f1ef70ff8f7ba60fbb7ce4d9691a7703dc5918",
        "filename": "src/governance-object.h",
        "status": "added",
        "additions": 350,
        "deletions": 0,
        "changes": 350,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=1b90d66ab659ab338851ef22d828fd7b00d43dbc",
        "patch": "@@ -0,0 +1,350 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef GOVERNANCE_OBJECT_H\n+#define GOVERNANCE_OBJECT_H\n+\n+//#define ENABLE_DASH_DEBUG\n+\n+#include \"util.h\"\n+#include \"main.h\"\n+#include \"sync.h\"\n+#include \"net.h\"\n+#include \"key.h\"\n+#include \"util.h\"\n+#include \"base58.h\"\n+#include \"masternode.h\"\n+#include \"governance-exceptions.h\"\n+#include \"governance-vote.h\"\n+#include \"governance-votedb.h\"\n+#include \"masternodeman.h\"\n+#include <boost/lexical_cast.hpp>\n+#include \"init.h\"\n+#include <univalue.h>\n+#include \"utilstrencodings.h\"\n+#include \"cachemap.h\"\n+#include \"cachemultimap.h\"\n+\n+#include <stdio.h>\n+#include <string.h>\n+\n+class CGovernanceManager;\n+class CGovernanceTriggerManager;\n+class CGovernanceObject;\n+class CGovernanceVote;\n+\n+static const int MAX_GOVERNANCE_OBJECT_DATA_SIZE = 16 * 1024;\n+static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70203;\n+\n+static const int GOVERNANCE_OBJECT_UNKNOWN = 0;\n+static const int GOVERNANCE_OBJECT_PROPOSAL = 1;\n+static const int GOVERNANCE_OBJECT_TRIGGER = 2;\n+static const int GOVERNANCE_OBJECT_WATCHDOG = 3;\n+\n+static const CAmount GOVERNANCE_PROPOSAL_FEE_TX = (0.33*COIN);\n+\n+static const int64_t GOVERNANCE_FEE_CONFIRMATIONS = 6;\n+static const int64_t GOVERNANCE_UPDATE_MIN = 60*60;\n+static const int64_t GOVERNANCE_DELETION_DELAY = 10*60;\n+static const int64_t GOVERNANCE_ORPHAN_EXPIRATION_TIME = 10*60;\n+\n+\n+// FOR SEEN MAP ARRAYS - GOVERNANCE OBJECTS AND VOTES\n+static const int SEEN_OBJECT_IS_VALID = 0;\n+static const int SEEN_OBJECT_ERROR_INVALID = 1;\n+static const int SEEN_OBJECT_ERROR_IMMATURE = 2;\n+static const int SEEN_OBJECT_EXECUTED = 3; //used for triggers\n+static const int SEEN_OBJECT_UNKNOWN = 4; // the default\n+\n+typedef std::pair<CGovernanceVote, int64_t> vote_time_pair_t;\n+\n+inline bool operator<(const vote_time_pair_t& p1, const vote_time_pair_t& p2)\n+{\n+    return (p1.first < p2.first);\n+}\n+\n+struct vote_instance_t {\n+\n+    vote_outcome_enum_t eOutcome;\n+    int64_t nTime;\n+\n+    vote_instance_t(vote_outcome_enum_t eOutcomeIn = VOTE_OUTCOME_NONE, int64_t nTimeIn = 0)\n+        : eOutcome(eOutcomeIn),\n+          nTime(nTimeIn)\n+    {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        int nOutcome = int(eOutcome);\n+        READWRITE(nOutcome);\n+        READWRITE(nTime);\n+        if(ser_action.ForRead()) {\n+            eOutcome = vote_outcome_enum_t(nOutcome);\n+        }\n+    }\n+};\n+\n+typedef std::map<int,vote_instance_t> vote_instance_m_t;\n+\n+typedef vote_instance_m_t::iterator vote_instance_m_it;\n+\n+typedef vote_instance_m_t::const_iterator vote_instance_m_cit;\n+\n+struct vote_rec_t {\n+    vote_instance_m_t mapInstances;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+     template <typename Stream, typename Operation>\n+     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+     {\n+         READWRITE(mapInstances);\n+     }\n+};\n+\n+/**\n+* Governance Object\n+*\n+*/\n+\n+class CGovernanceObject\n+{\n+    friend class CGovernanceManager;\n+\n+    friend class CGovernanceTriggerManager;\n+\n+public: // Types\n+    typedef std::map<int, vote_rec_t> vote_m_t;\n+\n+    typedef vote_m_t::iterator vote_m_it;\n+\n+    typedef vote_m_t::const_iterator vote_m_cit;\n+\n+    typedef CacheMultiMap<CTxIn, vote_time_pair_t> vote_mcache_t;\n+\n+private:\n+    /// critical section to protect the inner data structures\n+    mutable CCriticalSection cs;\n+\n+    /// Object typecode\n+    int nObjectType;\n+\n+    /// parent object, 0 is root\n+    uint256 nHashParent;\n+\n+    /// object revision in the system\n+    int nRevision;\n+\n+    /// time this object was created\n+    int64_t nTime;\n+\n+    /// time this object was marked for deletion\n+    int64_t nDeletionTime;\n+\n+    /// fee-tx\n+    uint256 nCollateralHash;\n+\n+    /// Data field - can be used for anything\n+    std::string strData;\n+\n+    /// Masternode info for signed objects\n+    CTxIn vinMasternode;\n+    std::vector<unsigned char> vchSig;\n+\n+    /// is valid by blockchain\n+    bool fCachedLocalValidity;\n+    std::string strLocalValidityError;\n+\n+    // VARIOUS FLAGS FOR OBJECT / SET VIA MASTERNODE VOTING\n+\n+    /// true == minimum network support has been reached for this object to be funded (doesn't mean it will for sure though)\n+    bool fCachedFunding;\n+\n+    /// true == minimum network has been reached flagging this object as a valid and understood goverance object (e.g, the serialized data is correct format, etc)\n+    bool fCachedValid;\n+\n+    /// true == minimum network support has been reached saying this object should be deleted from the system entirely\n+    bool fCachedDelete;\n+\n+    /** true == minimum network support has been reached flagging this object as endorsed by an elected representative body\n+     * (e.g. business review board / technecial review board /etc)\n+     */\n+    bool fCachedEndorsed;\n+\n+    /// object was updated and cached values should be updated soon\n+    bool fDirtyCache;\n+\n+    /// Object is no longer of interest\n+    bool fExpired;\n+\n+    /// Failed to parse object data\n+    bool fUnparsable;\n+\n+    vote_m_t mapCurrentMNVotes;\n+\n+    /// Limited map of votes orphaned by MN\n+    vote_mcache_t mapOrphanVotes;\n+\n+    CGovernanceObjectVoteFile fileVotes;\n+\n+public:\n+    CGovernanceObject();\n+\n+    CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTime, uint256 nCollateralHashIn, std::string strDataIn);\n+\n+    CGovernanceObject(const CGovernanceObject& other);\n+\n+    void swap(CGovernanceObject& first, CGovernanceObject& second); // nothrow\n+\n+    // Public Getter methods\n+\n+    int64_t GetCreationTime() const {\n+        return nTime;\n+    }\n+\n+    int64_t GetDeletionTime() const {\n+        return nDeletionTime;\n+    }\n+\n+    int GetObjectType() const {\n+        return nObjectType;\n+    }\n+\n+    const uint256& GetCollateralHash() const {\n+        return nCollateralHash;\n+    }\n+\n+    const CTxIn& GetMasternodeVin() const {\n+        return vinMasternode;\n+    }\n+\n+    bool IsSetCachedFunding() const {\n+        return fCachedFunding;\n+    }\n+\n+    bool IsSetCachedValid() const {\n+        return fCachedValid;\n+    }\n+\n+    bool IsSetCachedDelete() const {\n+        return fCachedDelete;\n+    }\n+\n+    bool IsSetCachedEndorsed() const {\n+        return fCachedEndorsed;\n+    }\n+\n+    bool IsSetDirtyCache() const {\n+        return fDirtyCache;\n+    }\n+\n+    bool IsSetExpired() const {\n+        return fExpired;\n+    }\n+\n+    void InvalidateVoteCache() {\n+        fDirtyCache = true;\n+    }\n+\n+    CGovernanceObjectVoteFile& GetVoteFile() {\n+        return fileVotes;\n+    }\n+\n+    // Signature related functions\n+\n+    void SetMasternodeInfo(const CTxIn& vin);\n+    bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n+    bool CheckSignature(CPubKey& pubKeyMasternode);\n+\n+    // CORE OBJECT FUNCTIONS\n+\n+    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral);\n+\n+    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral);\n+\n+    /// Check the collateral transaction for the budget proposal/finalized budget\n+    bool IsCollateralValid(std::string& strError);\n+\n+    void UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex);\n+\n+    void UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex);\n+\n+    int GetObjectSubtype();\n+\n+    CAmount GetMinCollateralFee();\n+\n+    UniValue GetJSONObject();\n+\n+    void Relay();\n+\n+    uint256 GetHash();\n+\n+    // GET VOTE COUNT FOR SIGNAL\n+\n+    int CountMatchingVotes(vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn) const;\n+\n+    int GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetYesCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetNoCount(vote_signal_enum_t eVoteSignalIn) const;\n+    int GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const;\n+\n+    bool GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vote_rec_t& voteRecord);\n+\n+    // FUNCTIONS FOR DEALING WITH DATA STRING\n+\n+    std::string GetDataAsHex();\n+    std::string GetDataAsString();\n+\n+    // SERIALIZER\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        // SERIALIZE DATA FOR SAVING/LOADING OR NETWORK FUNCTIONS\n+\n+        READWRITE(nHashParent);\n+        READWRITE(nRevision);\n+        READWRITE(nTime);\n+        READWRITE(nCollateralHash);\n+        READWRITE(LIMITED_STRING(strData, MAX_GOVERNANCE_OBJECT_DATA_SIZE));\n+        READWRITE(nObjectType);\n+        READWRITE(vinMasternode);\n+        READWRITE(vchSig);\n+        if(nType & SER_DISK) {\n+            // Only include these for the disk file format\n+            LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp Reading/writing votes from/to disk\\n\");\n+            READWRITE(mapCurrentMNVotes);\n+            READWRITE(fileVotes);\n+            LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp hash = %s, vote count = %d\\n\", GetHash().ToString(), fileVotes.GetVoteCount());\n+        }\n+\n+        // AFTER DESERIALIZATION OCCURS, CACHED VARIABLES MUST BE CALCULATED MANUALLY\n+    }\n+\n+private:\n+    // FUNCTIONS FOR DEALING WITH DATA STRING\n+    void LoadData();\n+    void GetData(UniValue& objResult);\n+\n+    bool ProcessVote(CNode* pfrom,\n+                     const CGovernanceVote& vote,\n+                     CGovernanceException& exception);\n+\n+    void RebuildVoteMap();\n+\n+    /// Called when MN's which have voted on this object have been removed\n+    void ClearMasternodeVotes();\n+\n+    void CheckOrphanVotes();\n+\n+};\n+\n+\n+#endif"
      },
      {
        "sha": "c69782bac55c1bd993ba06fcd2b54c8f5106c50a",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 726,
        "changes": 755,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=1b90d66ab659ab338851ef22d828fd7b00d43dbc",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"flat-database.h\"\n #include \"governance.h\"\n+#include \"governance-object.h\"\n #include \"governance-vote.h\"\n #include \"governance-classes.h\"\n #include \"masternode.h\"\n@@ -176,7 +177,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n \n         if(fMasternodeMissing) {\n-            mapMasternodeOrphanObjects.insert(std::make_pair(govobj.GetHash(), govobj));\n+            mapMasternodeOrphanObjects.insert(std::make_pair(govobj.GetHash(), object_time_pair_t(govobj, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME)));\n             LogPrint(\"gobject\", \"CGovernanceManager -- Missing masternode for: %s\\n\", strHash);\n             // fIsValid must also be false here so we will return early in the next if block\n         }\n@@ -248,21 +249,30 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n void CGovernanceManager::CheckOrphanVotes(CNode* pfrom, CGovernanceObject& govobj, CGovernanceException& exception)\n {\n     uint256 nHash = govobj.GetHash();\n-    std::vector<CGovernanceVote> vecVotes;\n-    mapOrphanVotes.GetAll(nHash, vecVotes);\n-\n-    for(size_t i = 0; i < vecVotes.size(); ++i) {\n-        CGovernanceVote& vote = vecVotes[i];\n+    std::vector<vote_time_pair_t> vecVotePairs;\n+    mapOrphanVotes.GetAll(nHash, vecVotePairs);\n+\n+    int64_t nNow = GetAdjustedTime();\n+    for(size_t i = 0; i < vecVotePairs.size(); ++i) {\n+        bool fRemove = false;\n+        vote_time_pair_t& pairVote = vecVotePairs[i];\n+        CGovernanceVote& vote = pairVote.first;\n         CGovernanceException exception;\n-        if(govobj.ProcessVote(pfrom, vote, exception)) {\n-            vecVotes[i].Relay();\n-            mapOrphanVotes.Erase(nHash, vote);\n+        if(pairVote.second < nNow) {\n+            fRemove = true;\n+        }\n+        else if(govobj.ProcessVote(pfrom, vote, exception)) {\n+            vote.Relay();\n+            fRemove = true;\n         }\n         else {\n             if((exception.GetNodePenalty() != 0) && masternodeSync.IsSynced()) {\n                 Misbehaving(pfrom->GetId(), exception.GetNodePenalty());\n             }\n         }\n+        if(fRemove) {\n+            mapOrphanVotes.Erase(nHash, pairVote);\n+        }\n     }\n }\n \n@@ -682,7 +692,7 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n              << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n              << \", governance object hash = \" << vote.GetParentHash().ToString() << \"\\n\";\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n-        if(mapOrphanVotes.Insert(nHashGovobj, vote)) {\n+        if(mapOrphanVotes.Insert(nHashGovobj, vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME))) {\n             RequestGovernanceObject(pfrom, nHashGovobj);\n             LogPrintf(ostr.str().c_str());\n         }\n@@ -719,10 +729,17 @@ void CGovernanceManager::CheckMasternodeOrphanVotes()\n void CGovernanceManager::CheckMasternodeOrphanObjects()\n {\n     LOCK(cs);\n+    int64_t nNow = GetAdjustedTime();\n     fRateChecksEnabled = false;\n-    object_m_it it = mapMasternodeOrphanObjects.begin();\n+    object_time_m_it it = mapMasternodeOrphanObjects.begin();\n     while(it != mapMasternodeOrphanObjects.end()) {\n-        CGovernanceObject& govobj = it->second;\n+        object_time_pair_t& pair = it->second;\n+        CGovernanceObject& govobj = pair.first;\n+\n+        if(pair.second < nNow) {\n+            mapMasternodeOrphanObjects.erase(it++);\n+            continue;\n+        }\n \n         string strError;\n         bool fMasternodeMissing = false;\n@@ -825,642 +842,9 @@ void CGovernanceManager::AddCachedTriggers()\n         }\n \n         triggerman.AddNewTrigger(govobj.GetHash());\n-    }    \n-}\n-\n-CGovernanceObject::CGovernanceObject()\n-: cs(),\n-  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n-  nHashParent(),\n-  nRevision(0),\n-  nTime(0),\n-  nDeletionTime(0),\n-  nCollateralHash(),\n-  strData(),\n-  vinMasternode(),\n-  vchSig(),\n-  fCachedLocalValidity(false),\n-  strLocalValidityError(),\n-  fCachedFunding(false),\n-  fCachedValid(true),\n-  fCachedDelete(false),\n-  fCachedEndorsed(false),\n-  fDirtyCache(true),\n-  fExpired(false),\n-  fUnparsable(false),\n-  mapCurrentMNVotes(),\n-  mapOrphanVotes(),\n-  fileVotes()\n-{\n-    // PARSE JSON DATA STORAGE (STRDATA)\n-    LoadData();\n-}\n-\n-CGovernanceObject::CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTimeIn, uint256 nCollateralHashIn, std::string strDataIn)\n-: cs(),\n-  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n-  nHashParent(nHashParentIn),\n-  nRevision(nRevisionIn),\n-  nTime(nTimeIn),\n-  nDeletionTime(0),\n-  nCollateralHash(nCollateralHashIn),\n-  strData(strDataIn),\n-  vinMasternode(),\n-  vchSig(),\n-  fCachedLocalValidity(false),\n-  strLocalValidityError(),\n-  fCachedFunding(false),\n-  fCachedValid(true),\n-  fCachedDelete(false),\n-  fCachedEndorsed(false),\n-  fDirtyCache(true),\n-  fExpired(false),\n-  fUnparsable(false),\n-  mapCurrentMNVotes(),\n-  mapOrphanVotes(),\n-  fileVotes()\n-{\n-    // PARSE JSON DATA STORAGE (STRDATA)\n-    LoadData();\n-}\n-\n-CGovernanceObject::CGovernanceObject(const CGovernanceObject& other)\n-: cs(),\n-  nObjectType(other.nObjectType),\n-  nHashParent(other.nHashParent),\n-  nRevision(other.nRevision),\n-  nTime(other.nTime),\n-  nDeletionTime(other.nDeletionTime),\n-  nCollateralHash(other.nCollateralHash),\n-  strData(other.strData),\n-  vinMasternode(other.vinMasternode),\n-  vchSig(other.vchSig),\n-  fCachedLocalValidity(other.fCachedLocalValidity),\n-  strLocalValidityError(other.strLocalValidityError),\n-  fCachedFunding(other.fCachedFunding),\n-  fCachedValid(other.fCachedValid),\n-  fCachedDelete(other.fCachedDelete),\n-  fCachedEndorsed(other.fCachedEndorsed),\n-  fDirtyCache(other.fDirtyCache),\n-  fExpired(other.fExpired),\n-  fUnparsable(other.fUnparsable),\n-  mapCurrentMNVotes(other.mapCurrentMNVotes),\n-  mapOrphanVotes(other.mapOrphanVotes),\n-  fileVotes(other.fileVotes)\n-{}\n-\n-bool CGovernanceObject::ProcessVote(CNode* pfrom,\n-                                    const CGovernanceVote& vote,\n-                                    CGovernanceException& exception)\n-{\n-    int nMNIndex = governance.GetMasternodeIndex(vote.GetVinMasternode());\n-    if(nMNIndex < 0) {\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::ProcessVote -- Masternode index not found\\n\";\n-        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n-        if(mapOrphanVotes.Insert(vote.GetVinMasternode(), vote)) {\n-            if(pfrom) {\n-                mnodeman.AskForMN(pfrom, vote.GetVinMasternode());\n-            }\n-            LogPrintf(ostr.str().c_str());\n-        }\n-        else {\n-            LogPrint(\"gobject\", ostr.str().c_str());\n-        }\n-        return false;\n-    }\n-\n-    vote_m_it it = mapCurrentMNVotes.find(nMNIndex);\n-    if(it == mapCurrentMNVotes.end()) {\n-        it = mapCurrentMNVotes.insert(vote_m_t::value_type(nMNIndex,vote_rec_t())).first;\n-    }\n-    vote_rec_t& recVote = it->second;\n-    vote_signal_enum_t eSignal = vote.GetSignal();\n-    if(eSignal == VOTE_SIGNAL_NONE) {\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::ProcessVote -- Vote signal: none\" << \"\\n\";\n-        LogPrint(\"gobject\", ostr.str().c_str());\n-        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n-        return false;\n-    }\n-    if(eSignal > MAX_SUPPORTED_VOTE_SIGNAL) {\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::ProcessVote -- Unsupported vote signal:\" << CGovernanceVoting::ConvertSignalToString(vote.GetSignal()) << \"\\n\";\n-        LogPrintf(ostr.str().c_str());\n-        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n-        return false;\n-    }\n-    vote_instance_m_it it2 = recVote.mapInstances.find(int(eSignal));\n-    if(it2 == recVote.mapInstances.end()) {\n-        it2 = recVote.mapInstances.insert(vote_instance_m_t::value_type(int(eSignal), vote_instance_t())).first;\n-    }\n-    vote_instance_t& voteInstance = it2->second;\n-    int64_t nNow = GetTime();\n-    if(governance.AreRateChecksEnabled()) {\n-        int64_t nTimeDelta = nNow - voteInstance.nTime;\n-        if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n-            std::ostringstream ostr;\n-            ostr << \"CGovernanceObject::ProcessVote -- Masternode voting too often \"\n-                 << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n-                 << \", governance object hash = \" << GetHash().ToString()\n-                 << \", time delta = \" << nTimeDelta << \"\\n\";\n-            LogPrint(\"gobject\", ostr.str().c_str());\n-            exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_TEMPORARY_ERROR);\n-            return false;\n-        }\n-    }\n-    // Finally check that the vote is actually valid (done last because of cost of signature verification)\n-    if(!vote.IsValid(true)) {\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::ProcessVote -- Invalid vote \"\n-                << \", MN outpoint = \" << vote.GetVinMasternode().prevout.ToStringShort()\n-                << \", governance object hash = \" << GetHash().ToString()\n-                << \", vote hash = \" << vote.GetHash().ToString() << \"\\n\";\n-        LogPrintf(ostr.str().c_str());\n-        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n-        governance.AddInvalidVote(vote);\n-        return false;\n-    }\n-    voteInstance = vote_instance_t(vote.GetOutcome(), nNow);\n-    fileVotes.AddVote(vote);\n-    fDirtyCache = true;\n-    return true;\n-}\n-\n-void CGovernanceObject::RebuildVoteMap()\n-{\n-    vote_m_t mapMNVotesNew;\n-    for(vote_m_it it = mapCurrentMNVotes.begin(); it != mapCurrentMNVotes.end(); ++it) {\n-        CTxIn vinMasternode;\n-        if(mnodeman.GetMasternodeVinForIndexOld(it->first, vinMasternode)) {\n-            int nNewIndex = mnodeman.GetMasternodeIndex(vinMasternode);\n-            if((nNewIndex >= 0)) {\n-                mapMNVotesNew[nNewIndex] = it->second;\n-            }\n-        }\n-    }\n-    mapCurrentMNVotes = mapMNVotesNew;\n-}\n-\n-void CGovernanceObject::ClearMasternodeVotes()\n-{\n-    vote_m_it it = mapCurrentMNVotes.begin();\n-    while(it != mapCurrentMNVotes.end()) {\n-        bool fIndexRebuilt = false;\n-        CTxIn vinMasternode;\n-        bool fRemove = true;\n-        if(mnodeman.Get(it->first, vinMasternode, fIndexRebuilt)) {\n-            if(mnodeman.Has(vinMasternode)) {\n-                fRemove = false;\n-            }\n-            else {\n-                fileVotes.RemoveVotesFromMasternode(vinMasternode);\n-            }\n-        }\n-\n-        if(fRemove) {\n-            mapCurrentMNVotes.erase(it++);\n-        }\n-        else {\n-            ++it;\n-        }\n     }\n }\n \n-void CGovernanceObject::SetMasternodeInfo(const CTxIn& vin)\n-{\n-    vinMasternode = vin;\n-}\n-\n-bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n-{\n-    LOCK(cs);\n-\n-    std::string strError;\n-    uint256 nHash = GetHash();\n-    std::string strMessage = nHash.ToString();\n-\n-    if(!darkSendSigner.SignMessage(strMessage, vchSig, keyMasternode)) {\n-        LogPrintf(\"CGovernanceObject::Sign -- SignMessage() failed\\n\");\n-        return false;\n-    }\n-\n-    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n-        LogPrintf(\"CGovernanceObject::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n-\n-    LogPrint(\"gobject\", \"CGovernanceObject::Sign -- pubkey id = %s, vin = %s\\n\",\n-             pubKeyMasternode.GetID().ToString(), vinMasternode.prevout.ToStringShort());\n-\n-\n-    return true;\n-}\n-\n-bool CGovernanceObject::CheckSignature(CPubKey& pubKeyMasternode)\n-{\n-    LOCK(cs);\n-    std::string strError;\n-    uint256 nHash = GetHash();\n-    std::string strMessage = nHash.ToString();\n-\n-    if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n-        LogPrintf(\"CGovernance::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n-int CGovernanceObject::GetObjectSubtype()\n-{\n-    // todo - 12.1\n-    //   - detect subtype from strData json, obj[\"subtype\"]\n-\n-    if(nObjectType == GOVERNANCE_OBJECT_TRIGGER) return TRIGGER_SUPERBLOCK;\n-    return -1;\n-}\n-\n-uint256 CGovernanceObject::GetHash()\n-{\n-    // CREATE HASH OF ALL IMPORTANT PIECES OF DATA\n-\n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-    ss << nHashParent;\n-    ss << nRevision;\n-    ss << nTime;\n-    ss << strData;\n-    // fee_tx is left out on purpose\n-    uint256 h1 = ss.GetHash();\n-\n-    DBG( printf(\"CGovernanceObject::GetHash %i %li %s\\n\", nRevision, nTime, strData.c_str()); );\n-\n-    return h1;\n-}\n-\n-/**\n-   Return the actual object from the strData JSON structure.\n-\n-   Returns an empty object on error.\n- */\n-UniValue CGovernanceObject::GetJSONObject()\n-{\n-    UniValue obj(UniValue::VOBJ);\n-    if(strData.empty()) {\n-        return obj;\n-    }\n-\n-    UniValue objResult(UniValue::VOBJ);\n-    GetData(objResult);\n-\n-    std::vector<UniValue> arr1 = objResult.getValues();\n-    std::vector<UniValue> arr2 = arr1.at( 0 ).getValues();\n-    obj = arr2.at( 1 );\n-\n-    return obj;\n-}\n-\n-/**\n-*   LoadData\n-*   --------------------------------------------------------\n-*\n-*   Attempt to load data from strData\n-*\n-*/\n-\n-void CGovernanceObject::LoadData()\n-{\n-    // todo : 12.1 - resolved\n-    //return;\n-\n-    if(strData.empty()) {\n-        return;\n-    }\n-\n-    try  {\n-        // ATTEMPT TO LOAD JSON STRING FROM STRDATA\n-        UniValue objResult(UniValue::VOBJ);\n-        GetData(objResult);\n-\n-        DBG( cout << \"CGovernanceObject::LoadData strData = \"\n-             << GetDataAsString()\n-             << endl; );\n-\n-        UniValue obj = GetJSONObject();\n-        nObjectType = obj[\"type\"].get_int();\n-    }\n-    catch(std::exception& e) {\n-        fUnparsable = true;\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::LoadData Error parsing JSON\"\n-             << \", e.what() = \" << e.what();\n-        DBG( cout << ostr.str() << endl; );\n-        LogPrintf( ostr.str().c_str() );\n-        return;\n-    }\n-    catch(...) {\n-        fUnparsable = true;\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::LoadData Unknown Error parsing JSON\";\n-        DBG( cout << ostr.str() << endl; );\n-        LogPrintf( ostr.str().c_str() );\n-        return;\n-    }\n-}\n-\n-/**\n-*   GetData - Example usage:\n-*   --------------------------------------------------------\n-*\n-*   Decode governance object data into UniValue(VOBJ)\n-*\n-*/\n-\n-void CGovernanceObject::GetData(UniValue& objResult)\n-{\n-    UniValue o(UniValue::VOBJ);\n-    std::string s = GetDataAsString();\n-    o.read(s);\n-    objResult = o;\n-}\n-\n-/**\n-*   GetData - As\n-*   --------------------------------------------------------\n-*\n-*/\n-\n-std::string CGovernanceObject::GetDataAsHex()\n-{\n-    return strData;\n-}\n-\n-std::string CGovernanceObject::GetDataAsString()\n-{\n-    std::vector<unsigned char> v = ParseHex(strData);\n-    std::string s(v.begin(), v.end());\n-\n-    return s;\n-}\n-\n-void CGovernanceObject::UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex)\n-{\n-    // THIS DOES NOT CHECK COLLATERAL, THIS IS CHECKED UPON ORIGINAL ARRIVAL\n-    fCachedLocalValidity = IsValidLocally(pCurrentBlockIndex, strLocalValidityError, false);\n-};\n-\n-\n-bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral)\n-{\n-    bool fMissingMasternode = false;\n-\n-    return IsValidLocally(pindex, strError, fMissingMasternode, fCheckCollateral);\n-}\n-\n-bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral)\n-{\n-    fMissingMasternode = false;\n-    if(!pindex) {\n-        strError = \"Tip is NULL\";\n-        return true;\n-    }\n-\n-    if(fUnparsable) {\n-        strError = \"Object data unparseable\";\n-        return false;\n-    }\n-\n-    switch(nObjectType) {\n-        case GOVERNANCE_OBJECT_PROPOSAL:\n-        case GOVERNANCE_OBJECT_TRIGGER:\n-        case GOVERNANCE_OBJECT_WATCHDOG:\n-            break;\n-        default:\n-            strError = strprintf(\"Invalid object type %d\", nObjectType);\n-            return false;\n-    }\n-\n-    // IF ABSOLUTE NO COUNT (NO-YES VALID VOTES) IS MORE THAN 10% OF THE NETWORK MASTERNODES, OBJ IS INVALID\n-\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_VALID) > mnodeman.CountEnabled(MIN_GOVERNANCE_PEER_PROTO_VERSION)/10) {\n-        strError = \"Automated removal\";\n-        return false;\n-    }\n-\n-    // CHECK COLLATERAL IF REQUIRED (HIGH CPU USAGE)\n-\n-    if(fCheckCollateral) { \n-        if((nObjectType == GOVERNANCE_OBJECT_TRIGGER) || (nObjectType == GOVERNANCE_OBJECT_WATCHDOG)) {\n-            std::string strOutpoint = vinMasternode.prevout.ToStringShort();\n-            masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n-            if(!infoMn.fInfoValid) {\n-                fMissingMasternode = true;\n-                strError = \"Masternode not found: \" + strOutpoint;\n-                return false;\n-            }\n-\n-            // Check that we have a valid MN signature\n-            if(!CheckSignature(infoMn.pubKeyMasternode)) {\n-                strError = \"Invalid masternode signature for: \" + strOutpoint + \", pubkey id = \" + infoMn.pubKeyMasternode.GetID().ToString();\n-                return false;\n-            }\n-\n-            // Only perform rate check if we are synced because during syncing it is expected\n-            // that objects will be seen in rapid succession\n-            if(masternodeSync.IsSynced()) {\n-                if(!governance.MasternodeRateCheck(vinMasternode, nObjectType)) {\n-                    strError = \"Masternode attempting to create too many objects: \" + strOutpoint;\n-                    return false;\n-                }\n-            }\n-\n-            return true;\n-        }\n-\n-        if(!IsCollateralValid(strError)) {\n-            // strError set in IsCollateralValid\n-            if(strError == \"\") strError = \"Collateral is invalid\";\n-            return false;\n-        }\n-    }\n-\n-    /*\n-        TODO\n-\n-        - There might be an issue with multisig in the coinbase on mainnet, we will add support for it in a future release.\n-        - Post 12.2+ (test multisig coinbase transaction)\n-    */\n-\n-    // 12.1 - todo - compile error\n-    // if(address.IsPayToScriptHash()) {\n-    //     strError = \"Governance system - multisig is not currently supported\";\n-    //     return false;\n-    // }\n-\n-    return true;\n-}\n-\n-CAmount CGovernanceObject::GetMinCollateralFee()\n-{\n-    // Only 1 type has a fee for the moment but switch statement allows for future object types\n-    switch(nObjectType) {\n-        case GOVERNANCE_OBJECT_PROPOSAL:    return GOVERNANCE_PROPOSAL_FEE_TX;\n-        case GOVERNANCE_OBJECT_TRIGGER:     return 0;\n-        case GOVERNANCE_OBJECT_WATCHDOG:    return 0;\n-        default:                            return MAX_MONEY;\n-    }\n-}\n-\n-bool CGovernanceObject::IsCollateralValid(std::string& strError)\n-{\n-    strError = \"\";\n-    CAmount nMinFee = GetMinCollateralFee();\n-    uint256 nExpectedHash = GetHash();\n-\n-    CTransaction txCollateral;\n-    uint256 nBlockHash;\n-\n-    // RETRIEVE TRANSACTION IN QUESTION\n-\n-    if(!GetTransaction(nCollateralHash, txCollateral, Params().GetConsensus(), nBlockHash, true)){\n-        strError = strprintf(\"Can't find collateral tx %s\", txCollateral.ToString());\n-        LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n-        return false;\n-    }\n-\n-    if(txCollateral.vout.size() < 1) {\n-        strError = strprintf(\"tx vout size less than 1 | %d\", txCollateral.vout.size());\n-        LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n-        return false;\n-    }\n-\n-    // LOOK FOR SPECIALIZED GOVERNANCE SCRIPT (PROOF OF BURN)\n-\n-    CScript findScript;\n-    findScript << OP_RETURN << ToByteVector(nExpectedHash);\n-\n-    DBG( cout << \"IsCollateralValid txCollateral.vout.size() = \" << txCollateral.vout.size() << endl; );\n-\n-    DBG( cout << \"IsCollateralValid: findScript = \" << ScriptToAsmStr( findScript, false ) << endl; );\n-\n-    DBG( cout << \"IsCollateralValid: nMinFee = \" << nMinFee << endl; );\n-\n-\n-    bool foundOpReturn = false;\n-    BOOST_FOREACH(const CTxOut o, txCollateral.vout) {\n-        DBG( cout << \"IsCollateralValid txout : \" << o.ToString()\n-             << \", o.nValue = \" << o.nValue\n-             << \", o.scriptPubKey = \" << ScriptToAsmStr( o.scriptPubKey, false )\n-             << endl; );\n-        if(!o.scriptPubKey.IsNormalPaymentScript() && !o.scriptPubKey.IsUnspendable()){\n-            strError = strprintf(\"Invalid Script %s\", txCollateral.ToString());\n-            LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n-            return false;\n-        }\n-        if(o.scriptPubKey == findScript && o.nValue >= nMinFee) {\n-            DBG( cout << \"IsCollateralValid foundOpReturn = true\" << endl; );\n-            foundOpReturn = true;\n-        }\n-        else  {\n-            DBG( cout << \"IsCollateralValid No match, continuing\" << endl; );\n-        }\n-\n-    }\n-\n-    if(!foundOpReturn){\n-        strError = strprintf(\"Couldn't find opReturn %s in %s\", nExpectedHash.ToString(), txCollateral.ToString());\n-        LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n-        return false;\n-    }\n-\n-    // GET CONFIRMATIONS FOR TRANSACTION\n-\n-    LOCK(cs_main);\n-    int nConfirmationsIn = GetIXConfirmations(nCollateralHash);\n-    if (nBlockHash != uint256()) {\n-        BlockMap::iterator mi = mapBlockIndex.find(nBlockHash);\n-        if (mi != mapBlockIndex.end() && (*mi).second) {\n-            CBlockIndex* pindex = (*mi).second;\n-            if (chainActive.Contains(pindex)) {\n-                nConfirmationsIn += chainActive.Height() - pindex->nHeight + 1;\n-            }\n-        }\n-    }\n-\n-    if(nConfirmationsIn >= GOVERNANCE_FEE_CONFIRMATIONS) {\n-        strError = \"valid\";\n-    } else {\n-        strError = strprintf(\"Collateral requires at least %d confirmations - %d confirmations\", GOVERNANCE_FEE_CONFIRMATIONS, nConfirmationsIn);\n-        LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s - %d confirmations\\n\", strError, nConfirmationsIn);\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n-int CGovernanceObject::CountMatchingVotes(vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn) const\n-{\n-    int nCount = 0;\n-    for(vote_m_cit it = mapCurrentMNVotes.begin(); it != mapCurrentMNVotes.end(); ++it) {\n-        const vote_rec_t& recVote = it->second;\n-        vote_instance_m_cit it2 = recVote.mapInstances.find(eVoteSignalIn);\n-        if(it2 == recVote.mapInstances.end()) {\n-            continue;\n-        }\n-        const vote_instance_t& voteInstance = it2->second;\n-        if(voteInstance.eOutcome == eVoteOutcomeIn) {\n-            ++nCount;\n-        }\n-    }\n-    return nCount;\n-}\n-\n-/**\n-*   Get specific vote counts for each outcome (funding, validity, etc)\n-*/\n-\n-int CGovernanceObject::GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn) const\n-{\n-    return GetYesCount(eVoteSignalIn) - GetNoCount(eVoteSignalIn);\n-}\n-\n-int CGovernanceObject::GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn) const\n-{\n-    return GetNoCount(eVoteSignalIn) - GetYesCount(eVoteSignalIn);\n-}\n-\n-int CGovernanceObject::GetYesCount(vote_signal_enum_t eVoteSignalIn) const\n-{\n-    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_YES);\n-}\n-\n-int CGovernanceObject::GetNoCount(vote_signal_enum_t eVoteSignalIn) const\n-{\n-    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_NO);\n-}\n-\n-int CGovernanceObject::GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const\n-{\n-    return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_ABSTAIN);\n-}\n-\n-bool CGovernanceObject::GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vote_rec_t& voteRecord)\n-{\n-    int nMNIndex = governance.GetMasternodeIndex(mnCollateralOutpoint);\n-    vote_m_it it = mapCurrentMNVotes.find(nMNIndex);\n-    if (it == mapCurrentMNVotes.end()) {\n-        return false;\n-    }\n-    voteRecord = it->second;\n-    return  true;\n-}\n-\n-void CGovernanceObject::Relay()\n-{\n-    CInv inv(MSG_GOVERNANCE_OBJECT, GetHash());\n-    RelayInv(inv, PROTOCOL_VERSION);\n-}\n-\n std::string CGovernanceManager::ToString() const\n {\n     std::ostringstream info;\n@@ -1493,84 +877,3 @@ void CGovernanceManager::UpdatedBlockTip(const CBlockIndex *pindex)\n     if(!fLiteMode && masternodeSync.IsSynced())\n         NewBlock();\n }\n-\n-void CGovernanceObject::UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex)\n-{\n-    // CALCULATE MINIMUM SUPPORT LEVELS REQUIRED\n-\n-    int nMnCount = mnodeman.CountEnabled();\n-    if(nMnCount == 0) return;\n-\n-    // CALCULATE THE MINUMUM VOTE COUNT REQUIRED FOR FULL SIGNAL\n-\n-    // todo - 12.1 - should be set to `10` after governance vote compression is implemented\n-    int nAbsVoteReq = std::max(Params().GetConsensus().nGovernanceMinQuorum, nMnCount / 10);\n-    // todo - 12.1 - Temporarily set to 1 for testing - reverted\n-    //nAbsVoteReq = 1;\n-\n-    // SET SENTINEL FLAGS TO FALSE\n-\n-    fCachedFunding = false;\n-    fCachedValid = true; //default to valid\n-    fCachedDelete = false;\n-    fCachedEndorsed = false;\n-    fDirtyCache = false;\n-\n-    // SET SENTINEL FLAGS TO TRUE IF MIMIMUM SUPPORT LEVELS ARE REACHED\n-    // ARE ANY OF THESE FLAGS CURRENTLY ACTIVATED?\n-\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = true;\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_VALID) >= nAbsVoteReq) fCachedValid = true;\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) {\n-        fCachedDelete = true;\n-        nDeletionTime = GetAdjustedTime();\n-    }\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = true;\n-\n-    // ARE ANY OF THE VOTING FLAGS NEGATIVELY SET BY THE NETWORK?\n-    // THIS CAN BE CACHED, THE VOTES BEING HOT-LOADED AS NEEDED TO RECALCULATE\n-\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = false;\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_VALID) >= nAbsVoteReq) fCachedValid = false;\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) fCachedDelete = false;\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = false;\n-}\n-\n-void CGovernanceObject::swap(CGovernanceObject& first, CGovernanceObject& second) // nothrow\n-{\n-    // enable ADL (not necessary in our case, but good practice)\n-    using std::swap;\n-\n-    // by swapping the members of two classes,\n-    // the two classes are effectively swapped\n-    swap(first.nHashParent, second.nHashParent);\n-    swap(first.nRevision, second.nRevision);\n-    swap(first.nTime, second.nTime);\n-    swap(first.nDeletionTime, second.nDeletionTime);\n-    swap(first.nCollateralHash, second.nCollateralHash);\n-    swap(first.strData, second.strData);\n-    swap(first.nObjectType, second.nObjectType);\n-\n-    // swap all cached valid flags\n-    swap(first.fCachedFunding, second.fCachedFunding);\n-    swap(first.fCachedValid, second.fCachedValid);\n-    swap(first.fCachedDelete, second.fCachedDelete);\n-    swap(first.fCachedEndorsed, second.fCachedEndorsed);\n-    swap(first.fDirtyCache, second.fDirtyCache);\n-    swap(first.fExpired, second.fExpired);\n-}\n-\n-void CGovernanceObject::CheckOrphanVotes()\n-{\n-    const vote_mcache_t::list_t& listVotes = mapOrphanVotes.GetItemList();\n-    for(vote_mcache_t::list_cit it = listVotes.begin(); it != listVotes.end(); ++it) {\n-        const CGovernanceVote& vote = it->value;\n-        if(!mnodeman.Has(vote.GetVinMasternode())) {\n-            continue;\n-        }\n-        CGovernanceException exception;\n-        if(!ProcessVote(NULL, vote, exception)) {\n-            LogPrintf(\"CGovernanceObject::CheckOrphanVotes -- Failed to add orphan vote: %s\\n\", exception.what());\n-        }\n-    }\n-}"
      },
      {
        "sha": "33429e51966284970b5c1ea6542676df49deaf14",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 12,
        "deletions": 309,
        "changes": 321,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b90d66ab659ab338851ef22d828fd7b00d43dbc/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=1b90d66ab659ab338851ef22d828fd7b00d43dbc",
        "patch": "@@ -14,6 +14,7 @@\n #include \"key.h\"\n #include \"util.h\"\n #include \"base58.h\"\n+#include \"governance-object.h\"\n #include \"masternode.h\"\n #include \"governance-exceptions.h\"\n #include \"governance-vote.h\"\n@@ -34,31 +35,11 @@ class CGovernanceTriggerManager;\n class CGovernanceObject;\n class CGovernanceVote;\n \n-static const int MAX_GOVERNANCE_OBJECT_DATA_SIZE = 16 * 1024;\n-static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70203;\n-\n-static const int GOVERNANCE_OBJECT_UNKNOWN = 0;\n-static const int GOVERNANCE_OBJECT_PROPOSAL = 1;\n-static const int GOVERNANCE_OBJECT_TRIGGER = 2;\n-static const int GOVERNANCE_OBJECT_WATCHDOG = 3;\n-\n-static const CAmount GOVERNANCE_PROPOSAL_FEE_TX = (0.33*COIN);\n-\n-static const int64_t GOVERNANCE_FEE_CONFIRMATIONS = 6;\n-static const int64_t GOVERNANCE_UPDATE_MIN = 60*60;\n-static const int64_t GOVERNANCE_DELETION_DELAY = 10*60;\n-\n-\n-// FOR SEEN MAP ARRAYS - GOVERNANCE OBJECTS AND VOTES\n-static const int SEEN_OBJECT_IS_VALID = 0;\n-static const int SEEN_OBJECT_ERROR_INVALID = 1;\n-static const int SEEN_OBJECT_ERROR_IMMATURE = 2;\n-static const int SEEN_OBJECT_EXECUTED = 3; //used for triggers\n-static const int SEEN_OBJECT_UNKNOWN = 4; // the default\n-\n extern std::map<uint256, int64_t> mapAskedForGovernanceObject;\n extern CGovernanceManager governance;\n \n+typedef std::pair<CGovernanceObject, int64_t> object_time_pair_t;\n+\n //\n // Governance Manager : Contains all proposals for the budget\n //\n@@ -67,7 +48,6 @@ class CGovernanceManager\n     friend class CGovernanceObject;\n \n public: // Types\n-\n     typedef std::map<uint256, CGovernanceObject> object_m_t;\n \n     typedef object_m_t::iterator object_m_it;\n@@ -90,7 +70,7 @@ class CGovernanceManager\n \n     typedef CacheMap<uint256, CGovernanceVote> vote_cache_t;\n \n-    typedef CacheMultiMap<uint256, CGovernanceVote> vote_mcache_t;\n+    typedef CacheMultiMap<uint256, vote_time_pair_t> vote_mcache_t;\n \n     typedef object_m_t::size_type size_type;\n \n@@ -106,6 +86,12 @@ class CGovernanceManager\n \n     typedef hash_s_t::const_iterator hash_s_cit;\n \n+    typedef std::map<uint256, object_time_pair_t> object_time_m_t;\n+\n+    typedef object_time_m_t::iterator object_time_m_it;\n+\n+    typedef object_time_m_t::const_iterator object_time_m_cit;\n+\n private:\n     static const int MAX_CACHE_SIZE = 1000000;\n \n@@ -122,7 +108,7 @@ class CGovernanceManager\n \n     count_m_t mapSeenGovernanceObjects;\n \n-    object_m_t mapMasternodeOrphanObjects;\n+    object_time_m_t mapMasternodeOrphanObjects;\n \n     object_ref_cache_t mapVoteToObject;\n \n@@ -274,7 +260,7 @@ class CGovernanceManager\n \n     void AddOrphanVote(const CGovernanceVote& vote)\n     {\n-        mapOrphanVotes.Insert(vote.GetHash(), vote);\n+        mapOrphanVotes.Insert(vote.GetHash(), vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME));\n     }\n \n     bool ProcessVote(CNode* pfrom, const CGovernanceVote& vote, CGovernanceException& exception);\n@@ -300,287 +286,4 @@ class CGovernanceManager\n \n };\n \n-struct vote_instance_t {\n-\n-    vote_outcome_enum_t eOutcome;\n-    int64_t nTime;\n-\n-    vote_instance_t(vote_outcome_enum_t eOutcomeIn = VOTE_OUTCOME_NONE, int64_t nTimeIn = 0)\n-        : eOutcome(eOutcomeIn),\n-          nTime(nTimeIn)\n-    {}\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n-    {\n-        int nOutcome = int(eOutcome);\n-        READWRITE(nOutcome);\n-        READWRITE(nTime);\n-        if(ser_action.ForRead()) {\n-            eOutcome = vote_outcome_enum_t(nOutcome);\n-        }\n-    }\n-};\n-\n-typedef std::map<int,vote_instance_t> vote_instance_m_t;\n-\n-typedef vote_instance_m_t::iterator vote_instance_m_it;\n-\n-typedef vote_instance_m_t::const_iterator vote_instance_m_cit;\n-\n-struct vote_rec_t {\n-    vote_instance_m_t mapInstances;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-     template <typename Stream, typename Operation>\n-     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n-     {\n-         READWRITE(mapInstances);\n-     }\n-};\n-\n-/**\n-* Governance Object\n-*\n-*/\n-\n-class CGovernanceObject\n-{\n-    friend class CGovernanceManager;\n-\n-    friend class CGovernanceTriggerManager;\n-\n-public: // Types\n-    typedef std::map<int, vote_rec_t> vote_m_t;\n-\n-    typedef vote_m_t::iterator vote_m_it;\n-\n-    typedef vote_m_t::const_iterator vote_m_cit;\n-\n-    typedef CacheMultiMap<CTxIn, CGovernanceVote> vote_mcache_t;\n-\n-private:\n-    /// critical section to protect the inner data structures\n-    mutable CCriticalSection cs;\n-\n-    /// Object typecode\n-    int nObjectType;\n-\n-    /// parent object, 0 is root\n-    uint256 nHashParent;\n-\n-    /// object revision in the system\n-    int nRevision;\n-\n-    /// time this object was created\n-    int64_t nTime;\n-\n-    /// time this object was marked for deletion\n-    int64_t nDeletionTime;\n-\n-    /// fee-tx\n-    uint256 nCollateralHash;\n-\n-    /// Data field - can be used for anything\n-    std::string strData;\n-\n-    /// Masternode info for signed objects\n-    CTxIn vinMasternode;\n-    std::vector<unsigned char> vchSig;\n-\n-    /// is valid by blockchain\n-    bool fCachedLocalValidity;\n-    std::string strLocalValidityError;\n-\n-    // VARIOUS FLAGS FOR OBJECT / SET VIA MASTERNODE VOTING\n-\n-    /// true == minimum network support has been reached for this object to be funded (doesn't mean it will for sure though)\n-    bool fCachedFunding;\n-\n-    /// true == minimum network has been reached flagging this object as a valid and understood goverance object (e.g, the serialized data is correct format, etc)\n-    bool fCachedValid;\n-\n-    /// true == minimum network support has been reached saying this object should be deleted from the system entirely\n-    bool fCachedDelete;\n-\n-    /** true == minimum network support has been reached flagging this object as endorsed by an elected representative body\n-     * (e.g. business review board / technecial review board /etc)\n-     */\n-    bool fCachedEndorsed;\n-\n-    /// object was updated and cached values should be updated soon\n-    bool fDirtyCache;\n-\n-    /// Object is no longer of interest\n-    bool fExpired;\n-\n-    /// Failed to parse object data\n-    bool fUnparsable;\n-\n-    vote_m_t mapCurrentMNVotes;\n-\n-    /// Limited map of votes orphaned by MN\n-    vote_mcache_t mapOrphanVotes;\n-\n-    CGovernanceObjectVoteFile fileVotes;\n-\n-public:\n-    CGovernanceObject();\n-\n-    CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTime, uint256 nCollateralHashIn, std::string strDataIn);\n-\n-    CGovernanceObject(const CGovernanceObject& other);\n-\n-    void swap(CGovernanceObject& first, CGovernanceObject& second); // nothrow\n-\n-    // Public Getter methods\n-\n-    int64_t GetCreationTime() const {\n-        return nTime;\n-    }\n-\n-    int64_t GetDeletionTime() const {\n-        return nDeletionTime;\n-    }\n-\n-    int GetObjectType() const {\n-        return nObjectType;\n-    }\n-\n-    const uint256& GetCollateralHash() const {\n-        return nCollateralHash;\n-    }\n-\n-    const CTxIn& GetMasternodeVin() const {\n-        return vinMasternode;\n-    }\n-\n-    bool IsSetCachedFunding() const {\n-        return fCachedFunding;\n-    }\n-\n-    bool IsSetCachedValid() const {\n-        return fCachedValid;\n-    }\n-\n-    bool IsSetCachedDelete() const {\n-        return fCachedDelete;\n-    }\n-\n-    bool IsSetCachedEndorsed() const {\n-        return fCachedEndorsed;\n-    }\n-\n-    bool IsSetDirtyCache() const {\n-        return fDirtyCache;\n-    }\n-\n-    bool IsSetExpired() const {\n-        return fExpired;\n-    }\n-\n-    void InvalidateVoteCache() {\n-        fDirtyCache = true;\n-    }\n-\n-    CGovernanceObjectVoteFile& GetVoteFile() {\n-        return fileVotes;\n-    }\n-\n-    // Signature related functions\n-\n-    void SetMasternodeInfo(const CTxIn& vin);\n-    bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n-    bool CheckSignature(CPubKey& pubKeyMasternode);\n-\n-    // CORE OBJECT FUNCTIONS\n-\n-    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral);\n-\n-    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral);\n-\n-    /// Check the collateral transaction for the budget proposal/finalized budget\n-    bool IsCollateralValid(std::string& strError);\n-\n-    void UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex);\n-\n-    void UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex);\n-\n-    int GetObjectSubtype();\n-\n-    CAmount GetMinCollateralFee();\n-\n-    UniValue GetJSONObject();\n-\n-    void Relay();\n-\n-    uint256 GetHash();\n-\n-    // GET VOTE COUNT FOR SIGNAL\n-\n-    int CountMatchingVotes(vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn) const;\n-\n-    int GetAbsoluteYesCount(vote_signal_enum_t eVoteSignalIn) const;\n-    int GetAbsoluteNoCount(vote_signal_enum_t eVoteSignalIn) const;\n-    int GetYesCount(vote_signal_enum_t eVoteSignalIn) const;\n-    int GetNoCount(vote_signal_enum_t eVoteSignalIn) const;\n-    int GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const;\n-\n-    bool GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vote_rec_t& voteRecord);\n-\n-    // FUNCTIONS FOR DEALING WITH DATA STRING\n-\n-    std::string GetDataAsHex();\n-    std::string GetDataAsString();\n-\n-    // SERIALIZER\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n-    {\n-        // SERIALIZE DATA FOR SAVING/LOADING OR NETWORK FUNCTIONS\n-\n-        READWRITE(nHashParent);\n-        READWRITE(nRevision);\n-        READWRITE(nTime);\n-        READWRITE(nCollateralHash);\n-        READWRITE(LIMITED_STRING(strData, MAX_GOVERNANCE_OBJECT_DATA_SIZE));\n-        READWRITE(nObjectType);\n-        READWRITE(vinMasternode);\n-        READWRITE(vchSig);\n-        if(nType & SER_DISK) {\n-            // Only include these for the disk file format\n-            LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp Reading/writing votes from/to disk\\n\");\n-            READWRITE(mapCurrentMNVotes);\n-            READWRITE(fileVotes);\n-            LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp hash = %s, vote count = %d\\n\", GetHash().ToString(), fileVotes.GetVoteCount());\n-        }\n-\n-        // AFTER DESERIALIZATION OCCURS, CACHED VARIABLES MUST BE CALCULATED MANUALLY\n-    }\n-\n-private:\n-    // FUNCTIONS FOR DEALING WITH DATA STRING\n-    void LoadData();\n-    void GetData(UniValue& objResult);\n-\n-    bool ProcessVote(CNode* pfrom,\n-                     const CGovernanceVote& vote,\n-                     CGovernanceException& exception);\n-\n-    void RebuildVoteMap();\n-\n-    /// Called when MN's which have voted on this object have been removed\n-    void ClearMasternodeVotes();\n-\n-    void CheckOrphanVotes();\n-\n-};\n-\n-\n #endif"
      }
    ]
  },
  {
    "sha": "ecdc160119009533305a6b130ad067774d4f5488",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2RjMTYwMTE5MDA5NTMzMzA1YTZiMTMwYWQwNjc3NzRkNGY1NDg4",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-25T14:08:48Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-25T14:08:48Z"
      },
      "message": "Governance object deletion changes (#1167)\n\n* Increase quorum for object deletion to 2/3 of MN network\r\n\r\n* Implement expiration of watchdog objects\r\n\r\n* Remove objects from the watchdog map itself\r\n\r\n* Message fix for invalid objects",
      "tree": {
        "sha": "4d37972623ff1c9505c4a516749ab6ae4354d9e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d37972623ff1c9505c4a516749ab6ae4354d9e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecdc160119009533305a6b130ad067774d4f5488",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecdc160119009533305a6b130ad067774d4f5488",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecdc160119009533305a6b130ad067774d4f5488",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecdc160119009533305a6b130ad067774d4f5488/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b90d66ab659ab338851ef22d828fd7b00d43dbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b90d66ab659ab338851ef22d828fd7b00d43dbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b90d66ab659ab338851ef22d828fd7b00d43dbc"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 40,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f9d27c6741ed1fe8d57224d0365c608071f4ef35",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecdc160119009533305a6b130ad067774d4f5488/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecdc160119009533305a6b130ad067774d4f5488/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=ecdc160119009533305a6b130ad067774d4f5488",
        "patch": "@@ -437,7 +437,7 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n     // IF ABSOLUTE NO COUNT (NO-YES VALID VOTES) IS MORE THAN 10% OF THE NETWORK MASTERNODES, OBJ IS INVALID\n \n     if(GetAbsoluteNoCount(VOTE_SIGNAL_VALID) > mnodeman.CountEnabled(MIN_GOVERNANCE_PEER_PROTO_VERSION)/10) {\n-        strError = \"Automated removal\";\n+        strError = \"Voted invalid\";\n         return false;\n     }\n \n@@ -666,6 +666,7 @@ void CGovernanceObject::UpdateSentinelVariables(const CBlockIndex *pCurrentBlock\n \n     // todo - 12.1 - should be set to `10` after governance vote compression is implemented\n     int nAbsVoteReq = std::max(Params().GetConsensus().nGovernanceMinQuorum, nMnCount / 10);\n+    int nAbsDeleteReq = std::max(Params().GetConsensus().nGovernanceMinQuorum, (2 * nMnCount) / 3);\n     // todo - 12.1 - Temporarily set to 1 for testing - reverted\n     //nAbsVoteReq = 1;\n \n@@ -681,20 +682,13 @@ void CGovernanceObject::UpdateSentinelVariables(const CBlockIndex *pCurrentBlock\n     // ARE ANY OF THESE FLAGS CURRENTLY ACTIVATED?\n \n     if(GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = true;\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_VALID) >= nAbsVoteReq) fCachedValid = true;\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) {\n+    if(GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsDeleteReq) {\n         fCachedDelete = true;\n         nDeletionTime = GetAdjustedTime();\n     }\n     if(GetAbsoluteYesCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = true;\n \n-    // ARE ANY OF THE VOTING FLAGS NEGATIVELY SET BY THE NETWORK?\n-    // THIS CAN BE CACHED, THE VOTES BEING HOT-LOADED AS NEEDED TO RECALCULATE\n-\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = false;\n     if(GetAbsoluteNoCount(VOTE_SIGNAL_VALID) >= nAbsVoteReq) fCachedValid = false;\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_DELETE) >= nAbsVoteReq) fCachedDelete = false;\n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = false;\n }\n \n void CGovernanceObject::swap(CGovernanceObject& first, CGovernanceObject& second) // nothrow"
      },
      {
        "sha": "05994a8fbc1c271907311080a82381aa8c1aceb1",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecdc160119009533305a6b130ad067774d4f5488/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecdc160119009533305a6b130ad067774d4f5488/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=ecdc160119009533305a6b130ad067774d4f5488",
        "patch": "@@ -48,6 +48,7 @@ static const int64_t GOVERNANCE_FEE_CONFIRMATIONS = 6;\n static const int64_t GOVERNANCE_UPDATE_MIN = 60*60;\n static const int64_t GOVERNANCE_DELETION_DELAY = 10*60;\n static const int64_t GOVERNANCE_ORPHAN_EXPIRATION_TIME = 10*60;\n+static const int64_t GOVERNANCE_WATCHDOG_EXPIRATION_TIME = 2*60*60;\n \n \n // FOR SEEN MAP ARRAYS - GOVERNANCE OBJECTS AND VOTES"
      },
      {
        "sha": "133f22f5b4e0c45f4304497be721c1d1dfaf10d1",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 3,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecdc160119009533305a6b130ad067774d4f5488/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecdc160119009533305a6b130ad067774d4f5488/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=ecdc160119009533305a6b130ad067774d4f5488",
        "patch": "@@ -37,6 +37,7 @@ CGovernanceManager::CGovernanceManager()\n       mapObjects(),\n       mapSeenGovernanceObjects(),\n       mapMasternodeOrphanObjects(),\n+      mapWatchdogObjects(),\n       mapVoteToObject(MAX_CACHE_SIZE),\n       mapInvalidVotes(MAX_CACHE_SIZE),\n       mapOrphanVotes(MAX_CACHE_SIZE),\n@@ -283,6 +284,8 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n \n     DBG( cout << \"CGovernanceManager::AddGovernanceObject START\" << endl; );\n \n+    uint256 nHash = govobj.GetHash();\n+\n     // MAKE SURE THIS OBJECT IS OK\n \n     if(!govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n@@ -292,13 +295,13 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n \n     // IF WE HAVE THIS OBJECT ALREADY, WE DON'T WANT ANOTHER COPY\n \n-    if(mapObjects.count(govobj.GetHash())) {\n+    if(mapObjects.count(nHash)) {\n         LogPrintf(\"CGovernanceManager::AddGovernanceObject -- already have governance object - %s\\n\", strError);\n         return false;\n     }\n \n     // INSERT INTO OUR GOVERNANCE OBJECT MEMORY\n-    mapObjects.insert(std::make_pair(govobj.GetHash(), govobj));\n+    mapObjects.insert(std::make_pair(nHash, govobj));\n \n     // SHOULD WE ADD THIS OBJECT TO ANY OTHER MANANGERS?\n \n@@ -315,9 +318,12 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n     case GOVERNANCE_OBJECT_TRIGGER:\n         mapLastMasternodeTrigger[govobj.vinMasternode.prevout] = nCachedBlockHeight;\n         DBG( cout << \"CGovernanceManager::AddGovernanceObject Before AddNewTrigger\" << endl; );\n-        triggerman.AddNewTrigger(govobj.GetHash());\n+        triggerman.AddNewTrigger(nHash);\n         DBG( cout << \"CGovernanceManager::AddGovernanceObject After AddNewTrigger\" << endl; );\n         break;\n+    case GOVERNANCE_OBJECT_WATCHDOG:\n+        mapWatchdogObjects[nHash] = GetAdjustedTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME;\n+        break;\n     default:\n         break;\n     }\n@@ -335,6 +341,25 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n     LOCK(cs);\n \n+    // Flag expired watchdogs for removal\n+    int64_t nNow = GetAdjustedTime();\n+    if(mapWatchdogObjects.size() > 1) {\n+        hash_time_m_it it = mapWatchdogObjects.begin();\n+        while(it != mapWatchdogObjects.end()) {\n+            if(it->second < nNow) {\n+                object_m_it it2 = mapObjects.find(it->first);\n+                if(it2 != mapObjects.end()) {\n+                    it2->second.fExpired = true;\n+                    it2->second.nDeletionTime = nNow;\n+                }\n+                mapWatchdogObjects.erase(it++);\n+            }\n+            else {\n+                ++it;\n+            }\n+        }\n+    }\n+\n     for(size_t i = 0; i < vecDirtyHashes.size(); ++i) {\n         object_m_it it = mapObjects.find(vecDirtyHashes[i]);\n         if(it == mapObjects.end()) {"
      },
      {
        "sha": "0765cc10535a2bd5c4fc65c1c13716c931e6e636",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecdc160119009533305a6b130ad067774d4f5488/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecdc160119009533305a6b130ad067774d4f5488/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=ecdc160119009533305a6b130ad067774d4f5488",
        "patch": "@@ -92,6 +92,12 @@ class CGovernanceManager\n \n     typedef object_time_m_t::const_iterator object_time_m_cit;\n \n+    typedef std::map<uint256, int64_t> hash_time_m_t;\n+\n+    typedef hash_time_m_t::iterator hash_time_m_it;\n+\n+    typedef hash_time_m_t::const_iterator hash_time_m_cit;\n+\n private:\n     static const int MAX_CACHE_SIZE = 1000000;\n \n@@ -110,6 +116,8 @@ class CGovernanceManager\n \n     object_time_m_t mapMasternodeOrphanObjects;\n \n+    hash_time_m_t mapWatchdogObjects;\n+\n     object_ref_cache_t mapVoteToObject;\n \n     vote_cache_t mapInvalidVotes;"
      }
    ]
  },
  {
    "sha": "0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjAwYTZjZTFhYmM4ZGExNTcxNGZjMDRjNWI2YjAyZTY2YTRkMGI3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-28T14:21:50Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-28T14:21:50Z"
      },
      "message": "Fix (dead)locks (#1169)\n\n* locks in PS\r\n\r\n* lock in governance\r\n\r\n* locks in IS\r\n\r\n* lock in ProcessGetData\r\n\r\n* locks in CMasternodeSync\r\n\r\n* centralize mnodeman.Check call\r\n\r\n* locks order in mnpayments\r\n\r\n* use current block chainTip when possible (less locks)\r\n\r\n* add missing lock in CountInputsWithAmount\r\n\r\n* fix deadlock RequestLowDataPaymentBlocks/IsTransactionValid\r\n\r\n* LOCK2 in CheckMnbAndUpdateMasternodeList, CheckAndUpdate, SendVerifyRequest\r\n\r\n* LOCK(cs) is not needed here\r\n\r\n* Decouple governance init actions from serialization\r\nShould fix this:\r\n```\r\nAssertion failed: lock governance.cs not held in governance-classes.cpp:117; locks held:\r\ncs_Shutdown  init.cpp:200 (TRY)\r\ncs  ./governance.h:195\r\ncs  governance.cpp:835\r\nAbort trap: 6\r\n```",
      "tree": {
        "sha": "43ac0bb8b785379c2cb91b520021e694dd492137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43ac0bb8b785379c2cb91b520021e694dd492137"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecdc160119009533305a6b130ad067774d4f5488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecdc160119009533305a6b130ad067774d4f5488",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecdc160119009533305a6b130ad067774d4f5488"
      }
    ],
    "stats": {
      "total": 207,
      "additions": 128,
      "deletions": 79
    },
    "files": [
      {
        "sha": "27cf883505358bf97d4a85de0886cb4eb93336b0",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 9,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -724,6 +724,8 @@ void CDarksendPool::ChargeFees()\n         LogPrintf(\"CDarksendPool::ChargeFees -- found uncooperative node (didn't %s transaction), charging fees: %s\\n\",\n                 (nState == POOL_STATE_SIGNING) ? \"sign\" : \"send\", vecOffendersCollaterals[0].ToString());\n \n+        LOCK(cs_main);\n+\n         CValidationState state;\n         bool fMissingInputs;\n         if(!AcceptToMemoryPool(mempool, state, vecOffendersCollaterals[0], false, &fMissingInputs, false, true)) {\n@@ -751,6 +753,8 @@ void CDarksendPool::ChargeRandomFees()\n {\n     if(!fMasterNode) return;\n \n+    LOCK(cs_main);\n+\n     BOOST_FOREACH(const CTransaction& txCollateral, vecSessionCollaterals) {\n \n         if(GetRandInt(100) > 10) return;\n@@ -773,13 +777,18 @@ void CDarksendPool::ChargeRandomFees()\n //\n void CDarksendPool::CheckTimeout()\n {\n-    // check mixing queue objects for timeouts\n-    std::vector<CDarksendQueue>::iterator it = vecDarksendQueue.begin();\n-    while(it != vecDarksendQueue.end()) {\n-        if((*it).IsExpired()) {\n-            LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Removing expired queue (%s)\\n\", (*it).ToString());\n-            it = vecDarksendQueue.erase(it);\n-        } else ++it;\n+    {\n+        TRY_LOCK(cs_darksend, lockDS);\n+        if(!lockDS) return; // it's ok to fail here, we run this quite frequently\n+\n+        // check mixing queue objects for timeouts\n+        std::vector<CDarksendQueue>::iterator it = vecDarksendQueue.begin();\n+        while(it != vecDarksendQueue.end()) {\n+            if((*it).IsExpired()) {\n+                LogPrint(\"privatesend\", \"CDarksendPool::CheckTimeout -- Removing expired queue (%s)\\n\", (*it).ToString());\n+                it = vecDarksendQueue.erase(it);\n+            } else ++it;\n+        }\n     }\n \n     if(!fEnablePrivateSend && !fMasterNode) return;\n@@ -2335,11 +2344,22 @@ bool CDarksendQueue::CheckSignature(const CPubKey& pubKeyMasternode)\n \n bool CDarksendQueue::Relay()\n {\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    std::vector<CNode*> vNodesCopy;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesCopy = vNodes;\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            pnode->AddRef();\n+    }\n+    BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         if(pnode->nVersion >= MIN_PRIVATESEND_PEER_PROTO_VERSION)\n             pnode->PushMessage(NetMsgType::DSQUEUE, (*this));\n \n+    {\n+        LOCK(cs_vNodes);\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            pnode->Release();\n+    }\n     return true;\n }\n \n@@ -2463,6 +2483,8 @@ void ThreadCheckDarkSendPool()\n             if(nTick % MASTERNODE_MIN_MNP_SECONDS == 1)\n                 activeMasternode.ManageState();\n \n+            mnodeman.Check();\n+\n             if(nTick % 60 == 0) {\n                 mnodeman.CheckAndRemove();\n                 mnodeman.ProcessMasternodeConnections();"
      },
      {
        "sha": "9122be84469ee75c79329948750d7523173a4125",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -111,8 +111,6 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n     if(pfrom->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) return;\n \n-    LOCK(cs);\n-\n     // ANOTHER USER IS ASKING US TO HELP THEM SYNC GOVERNANCE OBJECT DATA\n     if (strCommand == NetMsgType::MNGOVERNANCESYNC)\n     {\n@@ -165,6 +163,8 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             return;\n         }\n \n+        LOCK(cs);\n+\n         if(mapSeenGovernanceObjects.count(nHash)) {\n             // TODO - print error code? what if it's GOVOBJ_ERROR_IMMATURE?\n             LogPrint(\"gobject\", \"CGovernanceManager -- Received already seen object: %s\\n\", strHash);\n@@ -870,6 +870,14 @@ void CGovernanceManager::AddCachedTriggers()\n     }\n }\n \n+void CGovernanceManager::InitOnLoad()\n+{\n+    LOCK(cs);\n+    RebuildIndexes();\n+    AddCachedTriggers();\n+    ClearSeen();\n+}\n+\n std::string CGovernanceManager::ToString() const\n {\n     std::ostringstream info;"
      },
      {
        "sha": "101489117540ad969520c514bd366d401e94235c",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -218,10 +218,6 @@ class CGovernanceManager\n             Clear();\n             return;\n         }\n-        if(ser_action.ForRead()) {\n-            RebuildIndexes();\n-            AddCachedTriggers();\n-        }\n     }\n \n     void UpdatedBlockTip(const CBlockIndex *pindex);\n@@ -258,6 +254,8 @@ class CGovernanceManager\n         return fRateChecksEnabled;\n     }\n \n+    void InitOnLoad();\n+\n private:\n     void RequestGovernanceObject(CNode* pfrom, const uint256& nHash);\n "
      },
      {
        "sha": "094259a2fd9a0e9718dcf5e47ba6431a69db00e7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -1875,7 +1875,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if(!flatdb3.Load(governance)) {\n         return InitError(\"Failed to load governance cache from governance.dat\");\n     }\n-    governance.ClearSeen();\n+    governance.InitOnLoad();\n \n     uiInterface.InitMessage(_(\"Loading fullfiled requests cache...\"));\n     CFlatDB<CNetFulfilledRequestManager> flatdb4(\"netfulfilled.dat\", \"magicFulfilledCache\");"
      },
      {
        "sha": "0b3f19ffedc883d7805e5faadec199ae9b6f783f",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -72,9 +72,12 @@ bool IsInstantSendTxValid(const CTransaction& txCandidate)\n {\n     if(txCandidate.vout.size() < 1) return false;\n \n-    if(!CheckFinalTx(txCandidate)) {\n-        LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Transaction is not final: txCandidate=%s\", txCandidate.ToString());\n-        return false;\n+    {\n+        LOCK(cs_main);\n+        if(!CheckFinalTx(txCandidate)) {\n+            LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Transaction is not final: txCandidate=%s\", txCandidate.ToString());\n+            return false;\n+        }\n     }\n \n     int64_t nValueIn = 0;\n@@ -460,16 +463,16 @@ int64_t GetAverageMasternodeOrphanVoteTime()\n \n void CleanTxLockCandidates()\n {\n-    LOCK(cs_instantsend);\n-\n-    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.begin();\n-\n     int nHeight;\n     {\n         LOCK(cs_main);\n         nHeight = chainActive.Height();\n     }\n \n+    LOCK(cs_instantsend);\n+\n+    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.begin();\n+\n     while(it != mapTxLockCandidates.end()) {\n         CTxLockCandidate &txLockCandidate = it->second;\n         if(nHeight > txLockCandidate.nExpirationBlock) {"
      },
      {
        "sha": "f4e61aff6b7f47a4b1f3913fd7ed3bcfeea37c22",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -5057,14 +5057,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             {\n                 // Send stream from relay memory\n                 bool pushed = false;\n+                map<CInv, CDataStream>::iterator mi;\n                 {\n                     LOCK(cs_mapRelay);\n-                    map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n+                    mi = mapRelay.find(inv);\n                     if (mi != mapRelay.end()) {\n-                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n                         pushed = true;\n                     }\n                 }\n+                if(pushed)\n+                    pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n \n                 if (!pushed && inv.type == MSG_TX) {\n                     CTransaction tx;"
      },
      {
        "sha": "453ae15f260d7b6c9289616897b7a87b381725f9",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -416,7 +416,7 @@ bool CMasternodePayments::AddPaymentVote(const CMasternodePaymentVote& vote)\n     uint256 blockHash = uint256();\n     if(!GetBlockHash(blockHash, vote.nBlockHeight - 101)) return false;\n \n-    LOCK2(cs_mapMasternodePaymentVotes, cs_mapMasternodeBlocks);\n+    LOCK2(cs_mapMasternodeBlocks, cs_mapMasternodePaymentVotes);\n \n     if(mapMasternodePaymentVotes.count(vote.GetHash())) return false;\n \n@@ -573,7 +573,7 @@ void CMasternodePayments::CheckAndRemove()\n {\n     if(!pCurrentBlockIndex) return;\n \n-    LOCK2(cs_mapMasternodePaymentVotes, cs_mapMasternodeBlocks);\n+    LOCK2(cs_mapMasternodeBlocks, cs_mapMasternodePaymentVotes);\n \n     int nLimit = GetStorageLimit();\n \n@@ -781,7 +781,7 @@ void CMasternodePayments::RequestLowDataPaymentBlocks(CNode* pnode)\n     // Old nodes can't process this\n     if(pnode->nVersion < 70202) return;\n \n-    LOCK(cs_mapMasternodeBlocks);\n+    LOCK2(cs_main, cs_mapMasternodeBlocks);\n \n     std::vector<CInv> vToFetch;\n     std::map<int, CMasternodeBlockPayees>::iterator it = mapMasternodeBlocks.begin();"
      },
      {
        "sha": "028b7f51307db1595a4045d401ca916d01e6d4ca",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -162,6 +162,13 @@ void CMasternodeSync::ClearFulfilledRequests()\n     }\n }\n \n+void ReleaseNodes(const std::vector<CNode*> &vNodesCopy)\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        pnode->Release();\n+}\n+\n void CMasternodeSync::ProcessTick()\n {\n     static int nTick = 0;\n@@ -210,15 +217,21 @@ void CMasternodeSync::ProcessTick()\n         return;\n     }\n \n-    LOCK2(mnodeman.cs, cs_vNodes);\n-\n     if(nRequestedMasternodeAssets == MASTERNODE_SYNC_INITIAL ||\n         (nRequestedMasternodeAssets == MASTERNODE_SYNC_SPORKS && IsBlockchainSynced()))\n     {\n         SwitchToNextAsset();\n     }\n \n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    std::vector<CNode*> vNodesCopy;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesCopy = vNodes;\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            pnode->AddRef();\n+    }\n+\n+    BOOST_FOREACH(CNode* pnode, vNodesCopy)\n     {\n         // QUICK MODE (REGTEST ONLY!)\n         if(Params().NetworkIDString() == CBaseChainParams::REGTEST)\n@@ -236,6 +249,7 @@ void CMasternodeSync::ProcessTick()\n                 nRequestedMasternodeAssets = MASTERNODE_SYNC_FINISHED;\n             }\n             nRequestedMasternodeAttempt++;\n+            ReleaseNodes(vNodesCopy);\n             return;\n         }\n \n@@ -271,9 +285,11 @@ void CMasternodeSync::ProcessTick()\n                         LogPrintf(\"CMasternodeSync::ProcessTick -- ERROR: failed to sync %s\\n\", GetAssetName());\n                         // there is no way we can continue without masternode list, fail here and try later\n                         Fail();\n+                        ReleaseNodes(vNodesCopy);\n                         return;\n                     }\n                     SwitchToNextAsset();\n+                    ReleaseNodes(vNodesCopy);\n                     return;\n                 }\n \n@@ -288,6 +304,7 @@ void CMasternodeSync::ProcessTick()\n                 if(nRequestedMasternodeAttempt > 1 && nMnCount > nMnCountEstimated) {\n                     LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- found enough data\\n\", nTick, nRequestedMasternodeAssets);\n                     SwitchToNextAsset();\n+                    ReleaseNodes(vNodesCopy);\n                     return;\n                 }\n \n@@ -300,6 +317,7 @@ void CMasternodeSync::ProcessTick()\n \n                 mnodeman.DsegUpdate(pnode);\n \n+                ReleaseNodes(vNodesCopy);\n                 return; //this will cause each peer to get one request each six seconds for the various assets we need\n             }\n \n@@ -316,9 +334,11 @@ void CMasternodeSync::ProcessTick()\n                         LogPrintf(\"CMasternodeSync::ProcessTick -- ERROR: failed to sync %s\\n\", GetAssetName());\n                         // probably not a good idea to proceed without winner list\n                         Fail();\n+                        ReleaseNodes(vNodesCopy);\n                         return;\n                     }\n                     SwitchToNextAsset();\n+                    ReleaseNodes(vNodesCopy);\n                     return;\n                 }\n \n@@ -328,6 +348,7 @@ void CMasternodeSync::ProcessTick()\n                 if(nRequestedMasternodeAttempt > 1 && mnpayments.IsEnoughData()) {\n                     LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- found enough data\\n\", nTick, nRequestedMasternodeAssets);\n                     SwitchToNextAsset();\n+                    ReleaseNodes(vNodesCopy);\n                     return;\n                 }\n \n@@ -343,6 +364,7 @@ void CMasternodeSync::ProcessTick()\n                 // ask node for missing pieces only (old nodes will not be asked)\n                 mnpayments.RequestLowDataPaymentBlocks(pnode);\n \n+                ReleaseNodes(vNodesCopy);\n                 return; //this will cause each peer to get one request each six seconds for the various assets we need\n             }\n \n@@ -359,6 +381,7 @@ void CMasternodeSync::ProcessTick()\n                         // it's kind of ok to skip this for now, hopefully we'll catch up later?\n                     }\n                     SwitchToNextAsset();\n+                    ReleaseNodes(vNodesCopy);\n                     return;\n                 }\n \n@@ -384,6 +407,7 @@ void CMasternodeSync::ProcessTick()\n \n                 pnode->PushMessage(NetMsgType::MNGOVERNANCESYNC, uint256()); //sync masternode votes\n \n+                ReleaseNodes(vNodesCopy);\n                 return; //this will cause each peer to get one request each six seconds for the various assets we need\n             }\n         }"
      },
      {
        "sha": "90b0e4b79f017d4879564f01229082fef0171a28",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 28,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -320,7 +320,6 @@ int CMasternodeMan::CountEnabled(int nProtocolVersion)\n     nProtocolVersion = nProtocolVersion == -1 ? mnpayments.GetMinMasternodePaymentsProto() : nProtocolVersion;\n \n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n-        mn.Check();\n         if(mn.nProtocolVersion < nProtocolVersion || !mn.IsEnabled()) continue;\n         nCount++;\n     }\n@@ -460,6 +459,15 @@ bool CMasternodeMan::Has(const CTxIn& vin)\n //\n // Deterministically select the oldest/best masternode to pay on the network\n //\n+CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(bool fFilterSigTime, int& nCount)\n+{\n+    if(!pCurrentBlockIndex) {\n+        nCount = 0;\n+        return NULL;\n+    }\n+    return GetNextMasternodeInQueueForPayment(pCurrentBlockIndex->nHeight, fFilterSigTime, nCount);\n+}\n+\n CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight, bool fFilterSigTime, int& nCount)\n {\n     // Need LOCK2 here to ensure consistent locking order because the GetBlockHash call below locks cs_main\n@@ -475,7 +483,6 @@ CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight\n     int nMnCount = CountEnabled();\n     BOOST_FOREACH(CMasternode &mn, vMasternodes)\n     {\n-        mn.Check();\n         if(!mn.IsValidForPayment()) continue;\n \n         // //check protocol version\n@@ -581,7 +588,6 @@ int CMasternodeMan::GetMasternodeRank(const CTxIn& vin, int nBlockHeight, int nM\n     // scan for winner\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n         if(mn.nProtocolVersion < nMinProtocol) continue;\n-        mn.Check();\n         if(fOnlyActive) {\n             if(!mn.IsEnabled()) continue;\n         }\n@@ -618,8 +624,6 @@ std::vector<std::pair<int, CMasternode> > CMasternodeMan::GetMasternodeRanks(int\n     // scan for winner\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n \n-        mn.Check();\n-\n         if(mn.nProtocolVersion < nMinProtocol || !mn.IsEnabled()) continue;\n \n         int64_t nScore = mn.CalculateScore(blockHash).GetCompact(false);\n@@ -654,10 +658,7 @@ CMasternode* CMasternodeMan::GetMasternodeByRank(int nRank, int nBlockHeight, in\n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n \n         if(mn.nProtocolVersion < nMinProtocol) continue;\n-        if(fOnlyActive) {\n-            mn.Check();\n-            if(!mn.IsEnabled()) continue;\n-        }\n+        if(fOnlyActive && !mn.IsEnabled()) continue;\n \n         int64_t nScore = mn.CalculateScore(blockHash).GetCompact(false);\n \n@@ -699,21 +700,18 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n     if (strCommand == NetMsgType::MNANNOUNCE) { //Masternode Broadcast\n \n-        {\n-            LOCK(cs);\n-\n-            CMasternodeBroadcast mnb;\n-            vRecv >> mnb;\n+        CMasternodeBroadcast mnb;\n+        vRecv >> mnb;\n \n-            int nDos = 0;\n+        int nDos = 0;\n \n-            if (CheckMnbAndUpdateMasternodeList(mnb, nDos)) {\n-                // use announced Masternode as a peer\n-                addrman.Add(CAddress(mnb.addr), pfrom->addr, 2*60*60);\n-            } else if(nDos > 0) {\n-                Misbehaving(pfrom->GetId(), nDos);\n-            }\n+        if (CheckMnbAndUpdateMasternodeList(mnb, nDos)) {\n+            // use announced Masternode as a peer\n+            addrman.Add(CAddress(mnb.addr), pfrom->addr, 2*60*60);\n+        } else if(nDos > 0) {\n+            Misbehaving(pfrom->GetId(), nDos);\n         }\n+\n         if(fMasternodesAdded) {\n             NotifyMasternodeUpdates();\n         }\n@@ -726,7 +724,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n         LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s\\n\", mnp.vin.prevout.ToStringShort());\n \n-        LOCK(cs);\n+        // Need LOCK2 here to ensure consistent locking order because the CheckAndUpdate call below locks cs_main\n+        LOCK2(cs_main, cs);\n \n         if(mapSeenMasternodePing.count(mnp.GetHash())) return; //seen\n         mapSeenMasternodePing.insert(std::make_pair(mnp.GetHash(), mnp));\n@@ -840,7 +839,9 @@ void CMasternodeMan::DoFullVerificationStep()\n \n     std::vector<std::pair<int, CMasternode> > vecMasternodeRanks = GetMasternodeRanks(pCurrentBlockIndex->nHeight - 1, MIN_POSE_PROTO_VERSION);\n \n-    LOCK(cs);\n+    // Need LOCK2 here to ensure consistent locking order because the SendVerifyRequest call below locks cs_main\n+    // through GetHeight() signal in ConnectNode\n+    LOCK2(cs_main, cs);\n \n     int nCount = 0;\n     int nCountMax = std::max(10, (int)vMasternodes.size() / 100); // verify at least 10 masternode at once but at most 1% of all known masternodes\n@@ -1294,7 +1295,8 @@ void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb)\n \n bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos)\n {\n-    LOCK(cs);\n+    // Need LOCK2 here to ensure consistent locking order because the SimpleCheck call below locks cs_main\n+    LOCK2(cs_main, cs);\n \n     nDos = 0;\n     LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n@@ -1347,22 +1349,23 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n     return true;\n }\n \n-void CMasternodeMan::UpdateLastPaid(const CBlockIndex *pindex)\n+void CMasternodeMan::UpdateLastPaid()\n {\n     LOCK(cs);\n \n     if(fLiteMode) return;\n+    if(!pCurrentBlockIndex) return;\n \n     static bool IsFirstRun = true;\n     // Do full scan on first run or if we are not a masternode\n     // (MNs should update this info on every block, so limited scan should be enough for them)\n     int nMaxBlocksToScanBack = (IsFirstRun || !fMasterNode) ? mnpayments.GetStorageLimit() : LAST_PAID_SCAN_BLOCKS;\n \n     // LogPrint(\"mnpayments\", \"CMasternodeMan::UpdateLastPaid -- nHeight=%d, nMaxBlocksToScanBack=%d, IsFirstRun=%s\\n\",\n-    //                         pindex->nHeight, nMaxBlocksToScanBack, IsFirstRun ? \"true\" : \"false\");\n+    //                         pCurrentBlockIndex->nHeight, nMaxBlocksToScanBack, IsFirstRun ? \"true\" : \"false\");\n \n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n-        mn.UpdateLastPaid(pindex, nMaxBlocksToScanBack);\n+        mn.UpdateLastPaid(pCurrentBlockIndex, nMaxBlocksToScanBack);\n     }\n \n     // every time is like the first time if winners list is not synced\n@@ -1508,7 +1511,7 @@ void CMasternodeMan::UpdatedBlockTip(const CBlockIndex *pindex)\n     if(fMasterNode) {\n         DoFullVerificationStep();\n         // normal wallet does not need to update this every block, doing update on rpc call should be enough\n-        UpdateLastPaid(pindex);\n+        UpdateLastPaid();\n     }\n }\n "
      },
      {
        "sha": "e877e2ff1f41c2598d62fa717776bf556130ae5a",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -271,11 +271,13 @@ class CMasternodeMan\n \n     /// Find an entry in the masternode list that is next to be paid\n     CMasternode* GetNextMasternodeInQueueForPayment(int nBlockHeight, bool fFilterSigTime, int& nCount);\n+    /// Same as above but use current block height\n+    CMasternode* GetNextMasternodeInQueueForPayment(bool fFilterSigTime, int& nCount);\n \n     /// Find a random entry\n     CMasternode* FindRandomNotInVec(const std::vector<CTxIn> &vecToExclude, int nProtocolVersion = -1);\n \n-    std::vector<CMasternode> GetFullMasternodeVector() { Check(); return vMasternodes; }\n+    std::vector<CMasternode> GetFullMasternodeVector() { return vMasternodes; }\n \n     std::vector<std::pair<int, CMasternode> > GetMasternodeRanks(int nBlockHeight = -1, int nMinProtocol=0);\n     int GetMasternodeRank(const CTxIn &vin, int nBlockHeight, int nMinProtocol=0, bool fOnlyActive=true);\n@@ -304,7 +306,7 @@ class CMasternodeMan\n     /// Perform complete check and only then update list and maps\n     bool CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos);\n \n-    void UpdateLastPaid(const CBlockIndex *pindex);\n+    void UpdateLastPaid();\n \n     void CheckAndRebuildMasternodeIndex();\n "
      },
      {
        "sha": "2dc48ef92a4325cfa79f02d59a5cc2127a5896dc",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 17,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -167,9 +167,8 @@ UniValue masternode(const UniValue& params, bool fHelp)\n         if (strMode == \"enabled\")\n             return mnodeman.CountEnabled();\n \n-        LOCK(cs_main);\n         int nCount;\n-        mnodeman.GetNextMasternodeInQueueForPayment(chainActive.Height(), true, nCount);\n+        mnodeman.GetNextMasternodeInQueueForPayment(true, nCount);\n \n         if (strMode == \"qualify\")\n             return nCount;\n@@ -184,14 +183,12 @@ UniValue masternode(const UniValue& params, bool fHelp)\n     {\n         int nCount;\n         int nHeight;\n-        CBlockIndex* pindex;\n         CMasternode* winner = NULL;\n         {\n             LOCK(cs_main);\n             nHeight = chainActive.Height() + (strCommand == \"current\" ? 1 : 10);\n-            pindex = chainActive.Tip();\n         }\n-        mnodeman.UpdateLastPaid(pindex);\n+        mnodeman.UpdateLastPaid();\n         winner = mnodeman.GetNextMasternodeInQueueForPayment(nHeight, true, nCount);\n         if(!winner) return \"unknown\";\n \n@@ -482,22 +479,12 @@ UniValue masternodelist(const UniValue& params, bool fHelp)\n     }\n \n     if (strMode == \"full\" || strMode == \"lastpaidtime\" || strMode == \"lastpaidblock\") {\n-        CBlockIndex* pindex;\n-        {\n-            LOCK(cs_main);\n-            pindex = chainActive.Tip();\n-        }\n-        mnodeman.UpdateLastPaid(pindex);\n+        mnodeman.UpdateLastPaid();\n     }\n \n     UniValue obj(UniValue::VOBJ);\n     if (strMode == \"rank\") {\n-        int nHeight;\n-        {\n-            LOCK(cs_main);\n-            nHeight = chainActive.Height();\n-        }\n-        std::vector<std::pair<int, CMasternode> > vMasternodeRanks = mnodeman.GetMasternodeRanks(nHeight);\n+        std::vector<std::pair<int, CMasternode> > vMasternodeRanks = mnodeman.GetMasternodeRanks();\n         BOOST_FOREACH(PAIRTYPE(int, CMasternode)& s, vMasternodeRanks) {\n             std::string strOutpoint = s.second.vin.prevout.ToStringShort();\n             if (strFilter !=\"\" && strOutpoint.find(strFilter) == std::string::npos) continue;"
      },
      {
        "sha": "1fba05b736976476d030c7371c234b89e2a5893d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "patch": "@@ -2754,7 +2754,7 @@ int CWallet::CountInputsWithAmount(CAmount nInputAmount)\n {\n     CAmount nTotal = 0;\n     {\n-        LOCK(cs_wallet);\n+        LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;"
      }
    ]
  },
  {
    "sha": "286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODZmNmFkODdlNmUxYThmNjUwYWZmNWU4NzBkZWQ3YWZlMzg4MGI1",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-29T00:01:03Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-29T00:01:03Z"
      },
      "message": "Add watchdog expiration map to governance cache (#1170)\n\n* Fix misspelled logging category\r\n\r\n* Added mapWatchdogObjects to governance cache and bumped format version",
      "tree": {
        "sha": "26b8db7552c487cb55b0b33778364deffd89a404",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26b8db7552c487cb55b0b33778364deffd89a404"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286f6ad87e6e1a8f650aff5e870ded7afe3880b5/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0600a6ce1abc8da15714fc04c5b6b02e66a4d0b7"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "05efe914cb2758da5c3a4e51277db76eb6a933b7",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/286f6ad87e6e1a8f650aff5e870ded7afe3880b5/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/286f6ad87e6e1a8f650aff5e870ded7afe3880b5/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
        "patch": "@@ -93,7 +93,7 @@ std::string CActiveMasternode::GetTypeString() const\n bool CActiveMasternode::SendMasternodePing()\n {\n     if(!fPingerEnabled) {\n-        LogPrint(\"masterndoe\", \"CActiveMasternode::SendMasternodePing -- %s: masternode ping service is disabled, skipping...\\n\", GetStateString());\n+        LogPrint(\"masternode\", \"CActiveMasternode::SendMasternodePing -- %s: masternode ping service is disabled, skipping...\\n\", GetStateString());\n         return false;\n     }\n "
      },
      {
        "sha": "e127f868aa01b71be08266ae0d7ad148588503d6",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/286f6ad87e6e1a8f650aff5e870ded7afe3880b5/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/286f6ad87e6e1a8f650aff5e870ded7afe3880b5/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
        "patch": "@@ -28,7 +28,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-1\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-2\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),"
      },
      {
        "sha": "e10abbfd727da8dd8c8f5a35cb90f1781c75ad7d",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/286f6ad87e6e1a8f650aff5e870ded7afe3880b5/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/286f6ad87e6e1a8f650aff5e870ded7afe3880b5/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
        "patch": "@@ -188,6 +188,7 @@ class CGovernanceManager\n         LogPrint(\"gobject\", \"Governance object manager was cleared\\n\");\n         mapObjects.clear();\n         mapSeenGovernanceObjects.clear();\n+        mapWatchdogObjects.clear();\n         mapVoteToObject.Clear();\n         mapInvalidVotes.Clear();\n         mapOrphanVotes.Clear();\n@@ -213,6 +214,7 @@ class CGovernanceManager\n         READWRITE(mapInvalidVotes);\n         READWRITE(mapOrphanVotes);\n         READWRITE(mapObjects);\n+        READWRITE(mapWatchdogObjects);\n         READWRITE(mapLastMasternodeTrigger);\n         if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n             Clear();"
      }
    ]
  },
  {
    "sha": "e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2U1YjgxYThkMTJlMjgyYjRlYmU2NmVmZjFlMDVkNDlhNTFkMjYz",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-11-29T13:32:41Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-29T13:32:41Z"
      },
      "message": "Removed CGovernanceManager::ClearSeen() (#1171)",
      "tree": {
        "sha": "07e9415e83f617711b63d5e3da11868fca0b765e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07e9415e83f617711b63d5e3da11868fca0b765e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/286f6ad87e6e1a8f650aff5e870ded7afe3880b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/286f6ad87e6e1a8f650aff5e870ded7afe3880b5"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "511f677936e983f3b19499b5162c784428cf1e10",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
        "patch": "@@ -875,7 +875,6 @@ void CGovernanceManager::InitOnLoad()\n     LOCK(cs);\n     RebuildIndexes();\n     AddCachedTriggers();\n-    ClearSeen();\n }\n \n std::string CGovernanceManager::ToString() const"
      },
      {
        "sha": "c6efc12029518f69be51dcd8c72842e4fa9b63a4",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
        "patch": "@@ -140,12 +140,6 @@ class CGovernanceManager\n \n     virtual ~CGovernanceManager() {}\n \n-    void ClearSeen()\n-    {\n-        LOCK(cs);\n-        mapSeenGovernanceObjects.clear();\n-    }\n-\n     int CountProposalInventoryItems()\n     {\n         // TODO What is this for ?"
      }
    ]
  },
  {
    "sha": "6cd6722c084df68fa6457dc9242dc6f6d74b9776",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2Q2NzIyYzA4NGRmNjhmYTY0NTdkYzkyNDJkYzZmNmQ3NGI5Nzc2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-30T00:48:05Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-30T00:48:05Z"
      },
      "message": "fix deadlocks for MNVERIFY processing (#1173)",
      "tree": {
        "sha": "c229d80633956a69139f671aa2858d2aa82cd981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c229d80633956a69139f671aa2858d2aa82cd981"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cd6722c084df68fa6457dc9242dc6f6d74b9776",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cd6722c084df68fa6457dc9242dc6f6d74b9776",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cd6722c084df68fa6457dc9242dc6f6d74b9776",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cd6722c084df68fa6457dc9242dc6f6d74b9776/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e5b81a8d12e282b4ebe66eff1e05d49a51d263"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b5721a970734a5b31650aedcc20f7c2fa0124f9b",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cd6722c084df68fa6457dc9242dc6f6d74b9776/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cd6722c084df68fa6457dc9242dc6f6d74b9776/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=6cd6722c084df68fa6457dc9242dc6f6d74b9776",
        "patch": "@@ -813,7 +813,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n     } else if (strCommand == NetMsgType::MNVERIFY) { // Masternode Verify\n \n-        LOCK(cs);\n+        // Need LOCK2 here to ensure consistent locking order because the all functions below call GetBlockHash which locks cs_main\n+        LOCK2(cs_main, cs);\n \n         CMasternodeVerification mnv;\n         vRecv >> mnv;"
      }
    ]
  },
  {
    "sha": "17cebbed15e273e7ca7d9cf3552af97fdb508098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2NlYmJlZDE1ZTI3M2U3Y2E3ZDljZjM1NTJhZjk3ZmRiNTA4MDk4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-30T01:33:37Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-30T01:33:37Z"
      },
      "message": "fix excessive banning, remove some redundant logic (#1172)\n\n* Since we send all mnb's now regardless of mn state, ping check for sigTime being too old is obsolete (and wrong).\r\nAlso removing fRequireEnabled, this logic is deprecated too it seems.\r\n\r\n* remove (pre-)enabled check in CMasternodeMan::Add",
      "tree": {
        "sha": "4c8c8c737aa8aa64201f5ca2195ee3069b183d97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c8c8c737aa8aa64201f5ca2195ee3069b183d97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17cebbed15e273e7ca7d9cf3552af97fdb508098",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cebbed15e273e7ca7d9cf3552af97fdb508098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17cebbed15e273e7ca7d9cf3552af97fdb508098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cebbed15e273e7ca7d9cf3552af97fdb508098/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cd6722c084df68fa6457dc9242dc6f6d74b9776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cd6722c084df68fa6457dc9242dc6f6d74b9776",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cd6722c084df68fa6457dc9242dc6f6d74b9776"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 5,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7f12854052d141ad5c8421af7462bdc95631a48e",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cebbed15e273e7ca7d9cf3552af97fdb508098/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cebbed15e273e7ca7d9cf3552af97fdb508098/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=17cebbed15e273e7ca7d9cf3552af97fdb508098",
        "patch": "@@ -121,7 +121,7 @@ bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n     nTimeLastChecked = 0;\n     nTimeLastWatchdogVote = mnb.sigTime;\n     int nDos = 0;\n-    if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(nDos, false))) {\n+    if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(nDos))) {\n         lastPing = mnb.lastPing;\n         mnodeman.mapSeenMasternodePing.insert(std::make_pair(lastPing.GetHash(), lastPing));\n     }\n@@ -466,7 +466,7 @@ bool CMasternodeBroadcast::SimpleCheck(int& nDos)\n     }\n \n     // empty ping or incorrect sigTime/blockhash\n-    if(lastPing == CMasternodePing() || !lastPing.CheckAndUpdate(nDos, false, true)) {\n+    if(lastPing == CMasternodePing() || !lastPing.CheckAndUpdate(nDos, true)) {\n         return false;\n     }\n \n@@ -765,20 +765,14 @@ bool CMasternodePing::CheckSignature(CPubKey& pubKeyMasternode, int &nDos)\n     return true;\n }\n \n-bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fSimpleCheck)\n+bool CMasternodePing::CheckAndUpdate(int& nDos, bool fSimpleCheck)\n {\n     if (sigTime > GetAdjustedTime() + 60 * 60) {\n         LogPrintf(\"CMasternodePing::CheckAndUpdate -- Signature rejected, too far into the future, masternode=%s\\n\", vin.prevout.ToStringShort());\n         nDos = 1;\n         return false;\n     }\n \n-    if (sigTime <= GetAdjustedTime() - 60 * 60) {\n-        LogPrintf(\"CMasternodePing::CheckAndUpdate -- Signature rejected, too far into the past: masternode=%s  sigTime=%d  GetAdjustedTime()=%d\\n\", vin.prevout.ToStringShort(), sigTime, GetAdjustedTime());\n-        nDos = 1;\n-        return false;\n-    }\n-\n     {\n         LOCK(cs_main);\n         BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n@@ -811,8 +805,6 @@ bool CMasternodePing::CheckAndUpdate(int& nDos, bool fRequireEnabled, bool fSimp\n         return false;\n     }\n \n-    if (fRequireEnabled && !pmn->IsEnabled() && !pmn->IsPreEnabled() && !pmn->IsWatchdogExpired()) return false;\n-\n     // LogPrintf(\"mnping - Found corresponding mn for vin: %s\\n\", vin.prevout.ToStringShort());\n     // update only if there is no known ping for this masternode or\n     // last ping was more then MASTERNODE_MIN_MNP_SECONDS-60 ago comparing to this one"
      },
      {
        "sha": "bf2458c50aec1d1af9877205a105060988d06402",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cebbed15e273e7ca7d9cf3552af97fdb508098/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cebbed15e273e7ca7d9cf3552af97fdb508098/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=17cebbed15e273e7ca7d9cf3552af97fdb508098",
        "patch": "@@ -78,7 +78,7 @@ class CMasternodePing\n \n     bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n     bool CheckSignature(CPubKey& pubKeyMasternode, int &nDos);\n-    bool CheckAndUpdate(int& nDos, bool fRequireEnabled = true, bool fSimpleCheck = false);\n+    bool CheckAndUpdate(int& nDos, bool fSimpleCheck = false);\n     void Relay();\n \n     CMasternodePing& operator=(CMasternodePing from)"
      },
      {
        "sha": "5a8ed2916524012d1ca32da96d0034d1d254b611",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cebbed15e273e7ca7d9cf3552af97fdb508098/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cebbed15e273e7ca7d9cf3552af97fdb508098/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=17cebbed15e273e7ca7d9cf3552af97fdb508098",
        "patch": "@@ -123,9 +123,6 @@ bool CMasternodeMan::Add(CMasternode &mn)\n {\n     LOCK(cs);\n \n-    if (!mn.IsEnabled() && !mn.IsPreEnabled())\n-        return false;\n-\n     CMasternode *pmn = Find(mn.vin);\n     if (pmn == NULL) {\n         LogPrint(\"masternode\", \"CMasternodeMan::Add -- Adding new Masternode: addr=%s, %i now\\n\", mn.addr.ToString(), size() + 1);\n@@ -733,7 +730,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s new\\n\", mnp.vin.prevout.ToStringShort());\n \n         int nDos = 0;\n-        if(mnp.CheckAndUpdate(nDos, false)) return;\n+        if(mnp.CheckAndUpdate(nDos)) return;\n \n         if(nDos > 0) {\n             // if anything significant failed, mark that node"
      }
    ]
  },
  {
    "sha": "15cf414967bf395e902fd61a2984b433724b5bdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWNmNDE0OTY3YmYzOTVlOTAyZmQ2MWEyOTg0YjQzMzcyNGI1YmRj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-30T01:33:47Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-30T01:33:47Z"
      },
      "message": "Slightly improve/cleanup log output (#1174)",
      "tree": {
        "sha": "c76b97d3074ca862598d6a5c6f100f71b704d62d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c76b97d3074ca862598d6a5c6f100f71b704d62d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15cf414967bf395e902fd61a2984b433724b5bdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15cf414967bf395e902fd61a2984b433724b5bdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15cf414967bf395e902fd61a2984b433724b5bdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15cf414967bf395e902fd61a2984b433724b5bdc/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17cebbed15e273e7ca7d9cf3552af97fdb508098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cebbed15e273e7ca7d9cf3552af97fdb508098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17cebbed15e273e7ca7d9cf3552af97fdb508098"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 14,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e539e61fcd36e1dfedb0a003294cc04f2ec5e19b",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15cf414967bf395e902fd61a2984b433724b5bdc/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15cf414967bf395e902fd61a2984b433724b5bdc/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=15cf414967bf395e902fd61a2984b433724b5bdc",
        "patch": "@@ -174,7 +174,7 @@ void CActiveMasternode::ManageStateInitial()\n     }\n \n     if(pwalletMain->GetBalance() < 1000*COIN) {\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet balance is < 1000 DASH\", GetStateString());\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet balance is < 1000 DASH\\n\", GetStateString());\n         return;\n     }\n "
      },
      {
        "sha": "ebc5ba06cda38f2906a593b4797ac5212b41c0ff",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15cf414967bf395e902fd61a2984b433724b5bdc/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15cf414967bf395e902fd61a2984b433724b5bdc/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=15cf414967bf395e902fd61a2984b433724b5bdc",
        "patch": "@@ -296,7 +296,7 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n     // IF WE HAVE THIS OBJECT ALREADY, WE DON'T WANT ANOTHER COPY\n \n     if(mapObjects.count(nHash)) {\n-        LogPrintf(\"CGovernanceManager::AddGovernanceObject -- already have governance object - %s\\n\", strError);\n+        LogPrintf(\"CGovernanceManager::AddGovernanceObject -- already have governance object %s\\n\", nHash.ToString());\n         return false;\n     }\n \n@@ -873,17 +873,21 @@ void CGovernanceManager::AddCachedTriggers()\n void CGovernanceManager::InitOnLoad()\n {\n     LOCK(cs);\n+    int64_t nStart = GetTimeMillis();\n+    LogPrintf(\"Preparing masternode indexes and governance triggers...\\n\");\n     RebuildIndexes();\n     AddCachedTriggers();\n+    LogPrintf(\"Masternode indexes and governance triggers prepared  %dms\\n\", GetTimeMillis() - nStart);\n+    LogPrintf(\"     %s\\n\", ToString());\n }\n \n std::string CGovernanceManager::ToString() const\n {\n     std::ostringstream info;\n \n     info << \"Governance Objects: \" << (int)mapObjects.size() <<\n-            \", Seen Budgets : \" << (int)mapSeenGovernanceObjects.size() <<\n-            \", Vote Count   : \" << (int)mapVoteToObject.GetSize();\n+            \" (Seen: \" << (int)mapSeenGovernanceObjects.size() <<\n+            \"), Vote Count: \" << (int)mapVoteToObject.GetSize();\n \n     return info.str();\n }"
      },
      {
        "sha": "160325e6d5002773da5896374672976335430f1c",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15cf414967bf395e902fd61a2984b433724b5bdc/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15cf414967bf395e902fd61a2984b433724b5bdc/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=15cf414967bf395e902fd61a2984b433724b5bdc",
        "patch": "@@ -168,16 +168,16 @@ void CMasternode::Check(bool fForce)\n \n     static int64_t nTimeStart = GetTime();\n \n-    LogPrint(\"masternode\", \"CMasternode::Check start -- vin %s\\n\", vin.prevout.ToStringShort());\n-\n-    //once spent, stop doing the checks\n-    if(nActiveState == MASTERNODE_OUTPOINT_SPENT) return;\n-\n     if(ShutdownRequested()) return;\n \n     if(!fForce && (GetTime() - nTimeLastChecked < MASTERNODE_CHECK_SECONDS)) return;\n     nTimeLastChecked = GetTime();\n \n+    LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state\\n\", vin.prevout.ToStringShort(), GetStateString());\n+\n+    //once spent, stop doing the checks\n+    if(nActiveState == MASTERNODE_OUTPOINT_SPENT) return;\n+\n     int nHeight = 0;\n     if(!fUnitTest) {\n         TRY_LOCK(cs_main, lockMain);"
      },
      {
        "sha": "e03ee4ec8d0b1d4ab4b059d831a6a0f54669ad59",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15cf414967bf395e902fd61a2984b433724b5bdc/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15cf414967bf395e902fd61a2984b433724b5bdc/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=15cf414967bf395e902fd61a2984b433724b5bdc",
        "patch": "@@ -1136,7 +1136,7 @@ void CMasternodeMan::ProcessVerifyReply(CNode* pnode, CMasternodeVerification& m\n             LogPrint(\"masternode\", \"CMasternodeMan::ProcessVerifyBroadcast -- increased PoSe ban score for %s addr %s, new score %d\\n\",\n                         prealMasternode->vin.prevout.ToStringShort(), pnode->addr.ToString(), pmn->nPoSeBanScore);\n         }\n-        LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- PoSe score incresed for %d fake masternodes, addr %s\\n\",\n+        LogPrintf(\"CMasternodeMan::ProcessVerifyBroadcast -- PoSe score increased for %d fake masternodes, addr %s\\n\",\n                     (int)vpMasternodesToBan.size(), pnode->addr.ToString());\n     }\n }"
      }
    ]
  },
  {
    "sha": "6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDllNDE0YzZhYmQ5NGI0ZjY5NTBiOWY3YzE1OTljNGYzZTU5NGE1",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-11-30T19:32:36Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-30T19:32:36Z"
      },
      "message": "Split CheckAndUpdate: (#1175)\n\n- SimpleCheck - to verify only future time and unknown blockhash\r\n- CheckAndUpdate - to verify everything",
      "tree": {
        "sha": "93cf393cd6bbc98ee05829822810672992958908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93cf393cd6bbc98ee05829822810672992958908"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15cf414967bf395e902fd61a2984b433724b5bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15cf414967bf395e902fd61a2984b433724b5bdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15cf414967bf395e902fd61a2984b433724b5bdc"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 27,
      "deletions": 13
    },
    "files": [
      {
        "sha": "dadd2c75ca242c6209137cf3b5c890c0d394eb8e",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 12,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
        "patch": "@@ -465,8 +465,8 @@ bool CMasternodeBroadcast::SimpleCheck(int& nDos)\n         return false;\n     }\n \n-    // empty ping or incorrect sigTime/blockhash\n-    if(lastPing == CMasternodePing() || !lastPing.CheckAndUpdate(nDos, true)) {\n+    // empty ping or incorrect sigTime/unknown blockhash\n+    if(lastPing == CMasternodePing() || !lastPing.SimpleCheck(nDos)) {\n         return false;\n     }\n \n@@ -765,10 +765,13 @@ bool CMasternodePing::CheckSignature(CPubKey& pubKeyMasternode, int &nDos)\n     return true;\n }\n \n-bool CMasternodePing::CheckAndUpdate(int& nDos, bool fSimpleCheck)\n+bool CMasternodePing::SimpleCheck(int& nDos)\n {\n+    // don't ban by default\n+    nDos = 0;\n+\n     if (sigTime > GetAdjustedTime() + 60 * 60) {\n-        LogPrintf(\"CMasternodePing::CheckAndUpdate -- Signature rejected, too far into the future, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        LogPrintf(\"CMasternodePing::SimpleCheck -- Signature rejected, too far into the future, masternode=%s\\n\", vin.prevout.ToStringShort());\n         nDos = 1;\n         return false;\n     }\n@@ -777,24 +780,34 @@ bool CMasternodePing::CheckAndUpdate(int& nDos, bool fSimpleCheck)\n         LOCK(cs_main);\n         BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n         if (mi == mapBlockIndex.end()) {\n-            LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- Masternode ping is invalid, unknown block hash: masternode=%s blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n+            LogPrint(\"masternode\", \"CMasternodePing::SimpleCheck -- Masternode ping is invalid, unknown block hash: masternode=%s blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n             // maybe we stuck or forked so we shouldn't ban this node, just fail to accept this ping\n             // TODO: or should we also request this block?\n             return false;\n         }\n+    }\n+    LogPrint(\"masternode\", \"CMasternodePing::SimpleCheck -- Masternode ping verified: masternode=%s  blockHash=%s  sigTime=%d\\n\", vin.prevout.ToStringShort(), blockHash.ToString(), sigTime);\n+    return true;\n+}\n+\n+bool CMasternodePing::CheckAndUpdate(int& nDos)\n+{\n+    // don't ban by default\n+    nDos = 0;\n+\n+    if (!SimpleCheck(nDos)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n         if ((*mi).second && (*mi).second->nHeight < chainActive.Height() - 24) {\n             LogPrintf(\"CMasternodePing::CheckAndUpdate -- Masternode ping is invalid, block hash is too old: masternode=%s  blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n-            // Do nothing here (no Masternode update, no mnping relay)\n-            // Let this node to be visible but fail to accept mnping\n             return false;\n         }\n     }\n \n-    if (fSimpleCheck) {\n-        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- ping verified in fSimpleCheck mode: masternode=%s  blockHash=%s  sigTime=%d\\n\", vin.prevout.ToStringShort(), blockHash.ToString(), sigTime);\n-        return true;\n-    }\n-\n     LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- New ping: masternode=%s  blockHash=%s  sigTime=%d\\n\", vin.prevout.ToStringShort(), blockHash.ToString(), sigTime);\n \n     // see if we have this Masternode"
      },
      {
        "sha": "dde471ebd22ee4ca379d2df0e9949e6219e5c049",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
        "patch": "@@ -78,7 +78,8 @@ class CMasternodePing\n \n     bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n     bool CheckSignature(CPubKey& pubKeyMasternode, int &nDos);\n-    bool CheckAndUpdate(int& nDos, bool fSimpleCheck = false);\n+    bool SimpleCheck(int& nDos);\n+    bool CheckAndUpdate(int& nDos);\n     void Relay();\n \n     CMasternodePing& operator=(CMasternodePing from)"
      }
    ]
  },
  {
    "sha": "d88249b787d21d333ea6c5970148e05265a6066f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODgyNDliNzg3ZDIxZDMzM2VhNmM1OTcwMTQ4ZTA1MjY1YTYwNjZm",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-01T13:58:17Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-01T13:58:17Z"
      },
      "message": "Merged #1176: Added log message to print block height when IsBlockValueValid returns false",
      "tree": {
        "sha": "81a194485e5c431c693eef8aaebcf6b920510651",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a194485e5c431c693eef8aaebcf6b920510651"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d88249b787d21d333ea6c5970148e05265a6066f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88249b787d21d333ea6c5970148e05265a6066f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d88249b787d21d333ea6c5970148e05265a6066f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88249b787d21d333ea6c5970148e05265a6066f/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d9e414c6abd94b4f6950b9f7c1599c4f3e594a5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "73f1463677f1197cf7f46a3359584c09ea15beef",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d88249b787d21d333ea6c5970148e05265a6066f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d88249b787d21d333ea6c5970148e05265a6066f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d88249b787d21d333ea6c5970148e05265a6066f",
        "patch": "@@ -2773,11 +2773,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // DASH : MODIFYED TO CHECK MASTERNODE PAYMENTS AND SUPERBLOCKS\n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->pprev->nBits, pindex->pprev->nHeight, chainparams.GetConsensus());\n-    if (!IsBlockValueValid(block, pindex->nHeight, blockReward))\n+    if (!IsBlockValueValid(block, pindex->nHeight, blockReward)) {\n+        LogPrintf(\"ConnectBlock() -- IsBlockValueValid returned false, nHeight = %d\\n\", pindex->nHeight);\n         // TODO: handle error here more accurate - this could actually fail for different reasons\n         return state.DoS(100, error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n                                 block.vtx[0].GetValueOut(), blockReward),\n                                 REJECT_INVALID, \"bad-cb-amount\");\n+    }\n \n     if (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, blockReward)) {\n         mapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));"
      }
    ]
  },
  {
    "sha": "d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWZiNzI0OTQzYjIyYjMxNzBjNWJmNmM1NWRiZTE3M2Q2YTkyYWVh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-01T21:58:55Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-01T21:58:55Z"
      },
      "message": "Refactor IsBlockValueValid (#1177)\n\n* refactor IsBlockValueValid to return actual error string, use it in error message for bad-cb-amount\r\n\r\n* make error messages in IsBlockValueValid even more verbose",
      "tree": {
        "sha": "0464698ff47cdc82b5aaf7dc2cad92bd418f0c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0464698ff47cdc82b5aaf7dc2cad92bd418f0c09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fb724943b22b3170c5bf6c55dbe173d6a92aea/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d88249b787d21d333ea6c5970148e05265a6066f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88249b787d21d333ea6c5970148e05265a6066f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d88249b787d21d333ea6c5970148e05265a6066f"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "bcaf22472edb5172caeb03acc465bed4c59fd4e7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fb724943b22b3170c5bf6c55dbe173d6a92aea/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fb724943b22b3170c5bf6c55dbe173d6a92aea/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
        "patch": "@@ -2773,12 +2773,9 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // DASH : MODIFYED TO CHECK MASTERNODE PAYMENTS AND SUPERBLOCKS\n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->pprev->nBits, pindex->pprev->nHeight, chainparams.GetConsensus());\n-    if (!IsBlockValueValid(block, pindex->nHeight, blockReward)) {\n-        LogPrintf(\"ConnectBlock() -- IsBlockValueValid returned false, nHeight = %d\\n\", pindex->nHeight);\n-        // TODO: handle error here more accurate - this could actually fail for different reasons\n-        return state.DoS(100, error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n-                                block.vtx[0].GetValueOut(), blockReward),\n-                                REJECT_INVALID, \"bad-cb-amount\");\n+    std::string strError = \"\";\n+    if (!IsBlockValueValid(block, pindex->nHeight, blockReward, strError)) {\n+        return state.DoS(100, error(\"ConnectBlock(): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n     }\n \n     if (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, blockReward)) {"
      },
      {
        "sha": "7a000916c00eb065df40c7999a780393c0e0772f",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 1,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fb724943b22b3170c5bf6c55dbe173d6a92aea/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fb724943b22b3170c5bf6c55dbe173d6a92aea/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
        "patch": "@@ -33,8 +33,10 @@ CCriticalSection cs_mapMasternodePaymentVotes;\n *   - When non-superblocks are detected, the normal schedule should be maintained\n */\n \n-bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockReward)\n+bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockReward, std::string &strErrorRet)\n {\n+    strErrorRet = \"\";\n+\n     bool isNormalBlockValueMet = (block.vtx[0].GetValueOut() <= blockReward);\n     if(fDebug) LogPrintf(\"block.vtx[0].GetValueOut() %lld <= blockReward %lld\\n\", block.vtx[0].GetValueOut(), blockReward);\n \n@@ -51,13 +53,21 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockRewar\n             if(masternodeSync.IsSynced() && !sporkManager.IsSporkActive(SPORK_13_OLD_SUPERBLOCK_FLAG)) {\n                 // no budget blocks should be accepted here, if SPORK_13_OLD_SUPERBLOCK_FLAG is disabled\n                 LogPrint(\"gobject\", \"IsBlockValueValid -- Client synced but budget spork is disabled, checking block value against normal block reward\\n\");\n+                if(!isNormalBlockValueMet) {\n+                    strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, budgets are disabled\",\n+                                            nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n+                }\n                 return isNormalBlockValueMet;\n             }\n             LogPrint(\"gobject\", \"IsBlockValueValid -- WARNING: Skipping budget block value checks, accepting block\\n\");\n             // TODO: reprocess blocks to make sure they are legit?\n             return true;\n         }\n         // LogPrint(\"gobject\", \"IsBlockValueValid -- Block is not in budget cycle window, checking block value against normal block reward\\n\");\n+        if(!isNormalBlockValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, block is not in budget cycle window\",\n+                                    nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n+        }\n         return isNormalBlockValueMet;\n     }\n \n@@ -72,8 +82,16 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockRewar\n         // not enough data but at least it must NOT exceed superblock max value\n         if(CSuperblock::IsValidBlockHeight(nBlockHeight)) {\n             if(fDebug) LogPrintf(\"IsBlockPayeeValid -- WARNING: Client not synced, checking superblock max bounds only\\n\");\n+            if(!isSuperblockMaxValueMet) {\n+                strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded superblock payment limit\",\n+                                        nBlockHeight, block.vtx[0].GetValueOut(), nSuperblockPaymentsLimit);\n+            }\n             return isSuperblockMaxValueMet;\n         }\n+        if(!isNormalBlockValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, only normal blocks are allowed at this height\",\n+                                    nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n+        }\n         // it MUST be a regular block otherwise\n         return isNormalBlockValueMet;\n     }\n@@ -91,12 +109,21 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockRewar\n             // triggered but invalid? that's weird\n             LogPrintf(\"IsBlockValueValid -- ERROR: Invalid superblock detected at height %d: %s\", nBlockHeight, block.vtx[0].ToString());\n             // should NOT allow invalid superblocks, when superblocks are enabled\n+            strErrorRet = strprintf(\"invalid superblock detected at height %d\", nBlockHeight);\n             return false;\n         }\n         LogPrint(\"gobject\", \"IsBlockValueValid -- No triggered superblock detected at height %d\\n\", nBlockHeight);\n+        if(!isNormalBlockValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, no triggered superblock detected\",\n+                                    nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n+        }\n     } else {\n         // should NOT allow superblocks at all, when superblocks are disabled\n         LogPrint(\"gobject\", \"IsBlockValueValid -- Superblocks are disabled, no superblocks allowed\\n\");\n+        if(!isNormalBlockValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, superblocks are disabled\",\n+                                    nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n+        }\n     }\n \n     // it MUST be a regular block"
      },
      {
        "sha": "fdbbb2cc6e5aa70f35bbd0036ca4c74212013e27",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9fb724943b22b3170c5bf6c55dbe173d6a92aea/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9fb724943b22b3170c5bf6c55dbe173d6a92aea/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
        "patch": "@@ -33,7 +33,7 @@ extern CCriticalSection cs_mapMasternodePayeeVotes;\n extern CMasternodePayments mnpayments;\n \n /// TODO: all 4 functions do not belong here really, they should be refactored/moved somewhere (main.cpp ?)\n-bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockReward);\n+bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockReward, std::string &strErrorRet);\n bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, CAmount blockReward);\n void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, CAmount blockReward, CTxOut& txoutMasternodeRet, std::vector<CTxOut>& voutSuperblockRet);\n std::string GetRequiredPaymentsString(int nBlockHeight);"
      }
    ]
  },
  {
    "sha": "c3e5757c25f38776e21a5515e187b80b002e8eb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2U1NzU3YzI1ZjM4Nzc2ZTIxYTU1MTVlMTg3YjgwYjAwMmU4ZWI5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-02T10:32:28Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-02T10:32:28Z"
      },
      "message": "fix relay bug (#1178)",
      "tree": {
        "sha": "a3cf435884c8303a4c6fcf954ac91e0252d880d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3cf435884c8303a4c6fcf954ac91e0252d880d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3e5757c25f38776e21a5515e187b80b002e8eb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3e5757c25f38776e21a5515e187b80b002e8eb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3e5757c25f38776e21a5515e187b80b002e8eb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3e5757c25f38776e21a5515e187b80b002e8eb9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9fb724943b22b3170c5bf6c55dbe173d6a92aea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9fb724943b22b3170c5bf6c55dbe173d6a92aea"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c26dd2d9846eadba32529e168ac2701d313c2d8d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3e5757c25f38776e21a5515e187b80b002e8eb9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3e5757c25f38776e21a5515e187b80b002e8eb9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c3e5757c25f38776e21a5515e187b80b002e8eb9",
        "patch": "@@ -5056,16 +5056,19 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             {\n                 // Send stream from relay memory\n                 bool pushed = false;\n-                map<CInv, CDataStream>::iterator mi;\n                 {\n-                    LOCK(cs_mapRelay);\n-                    mi = mapRelay.find(inv);\n-                    if (mi != mapRelay.end()) {\n-                        pushed = true;\n+                    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+                    {\n+                        LOCK(cs_mapRelay);\n+                        map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n+                        if (mi != mapRelay.end()) {\n+                            ss += (*mi).second;\n+                            pushed = true;\n+                        }\n                     }\n+                    if(pushed)\n+                        pfrom->PushMessage(inv.GetCommand(), ss);\n                 }\n-                if(pushed)\n-                    pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n \n                 if (!pushed && inv.type == MSG_TX) {\n                     CTransaction tx;"
      }
    ]
  },
  {
    "sha": "8c12ab2b470749a67ba4351a06368cf77a097b39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzEyYWIyYjQ3MDc0OWE2N2JhNDM1MWEwNjM2OGNmNzdhMDk3YjM5",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-02T12:53:18Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-02T12:53:18Z"
      },
      "message": "Don't penalize nodes during orphan processing (#1181)",
      "tree": {
        "sha": "07581c3502ec227e9861989332604a29f60447a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07581c3502ec227e9861989332604a29f60447a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c12ab2b470749a67ba4351a06368cf77a097b39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c12ab2b470749a67ba4351a06368cf77a097b39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c12ab2b470749a67ba4351a06368cf77a097b39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c12ab2b470749a67ba4351a06368cf77a097b39/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3e5757c25f38776e21a5515e187b80b002e8eb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3e5757c25f38776e21a5515e187b80b002e8eb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3e5757c25f38776e21a5515e187b80b002e8eb9"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 4,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7379435e32cccec24ea19988e2ae1a4a2eafa0b0",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c12ab2b470749a67ba4351a06368cf77a097b39/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c12ab2b470749a67ba4351a06368cf77a097b39/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=8c12ab2b470749a67ba4351a06368cf77a097b39",
        "patch": "@@ -206,7 +206,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         // WE MIGHT HAVE PENDING/ORPHAN VOTES FOR THIS OBJECT\n \n         CGovernanceException exception;\n-        CheckOrphanVotes(pfrom, govobj, exception);\n+        CheckOrphanVotes(govobj, exception);\n     }\n \n     // A NEW GOVERNANCE OBJECT VOTE HAS ARRIVED\n@@ -247,7 +247,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n     }\n }\n \n-void CGovernanceManager::CheckOrphanVotes(CNode* pfrom, CGovernanceObject& govobj, CGovernanceException& exception)\n+void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernanceException& exception)\n {\n     uint256 nHash = govobj.GetHash();\n     std::vector<vote_time_pair_t> vecVotePairs;\n@@ -262,15 +262,10 @@ void CGovernanceManager::CheckOrphanVotes(CNode* pfrom, CGovernanceObject& govob\n         if(pairVote.second < nNow) {\n             fRemove = true;\n         }\n-        else if(govobj.ProcessVote(pfrom, vote, exception)) {\n+        else if(govobj.ProcessVote(NULL, vote, exception)) {\n             vote.Relay();\n             fRemove = true;\n         }\n-        else {\n-            if((exception.GetNodePenalty() != 0) && masternodeSync.IsSynced()) {\n-                Misbehaving(pfrom->GetId(), exception.GetNodePenalty());\n-            }\n-        }\n         if(fRemove) {\n             mapOrphanVotes.Erase(nHash, pairVote);\n         }"
      },
      {
        "sha": "5fabe2c80537016db424c350315b7bb808326934",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c12ab2b470749a67ba4351a06368cf77a097b39/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c12ab2b470749a67ba4351a06368cf77a097b39/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=8c12ab2b470749a67ba4351a06368cf77a097b39",
        "patch": "@@ -275,7 +275,7 @@ class CGovernanceManager\n \n     static bool AcceptMessage(const uint256& nHash, hash_s_t& setHash);\n \n-    void CheckOrphanVotes(CNode* pfrom, CGovernanceObject& govobj, CGovernanceException& exception);\n+    void CheckOrphanVotes(CGovernanceObject& govobj, CGovernanceException& exception);\n \n     void RebuildIndexes();\n "
      }
    ]
  },
  {
    "sha": "b84764242871852f5f2bab21d84d502f90a17da9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODQ3NjQyNDI4NzE4NTJmNWYyYmFiMjFkODRkNTAyZjkwYTE3ZGE5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-02T12:53:28Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-02T12:53:28Z"
      },
      "message": "bug: int -> int64_t (#1179)",
      "tree": {
        "sha": "95b37a19007345a8ee429d28066f228c7308b1a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95b37a19007345a8ee429d28066f228c7308b1a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b84764242871852f5f2bab21d84d502f90a17da9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b84764242871852f5f2bab21d84d502f90a17da9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b84764242871852f5f2bab21d84d502f90a17da9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b84764242871852f5f2bab21d84d502f90a17da9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c12ab2b470749a67ba4351a06368cf77a097b39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c12ab2b470749a67ba4351a06368cf77a097b39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c12ab2b470749a67ba4351a06368cf77a097b39"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e2b26b64f9505ccfeb20c9bb6d2c4a6ae29d336b",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b84764242871852f5f2bab21d84d502f90a17da9/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b84764242871852f5f2bab21d84d502f90a17da9/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=b84764242871852f5f2bab21d84d502f90a17da9",
        "patch": "@@ -35,7 +35,7 @@ bool CMasternodeSync::IsBlockchainSynced()\n         return false;\n \n     // same as !IsInitialBlockDownload() but no cs_main needed here\n-    int nMaxBlockTime = std::max(pCurrentBlockIndex->GetBlockTime(), pindexBestHeader->GetBlockTime());\n+    int64_t nMaxBlockTime = std::max(pCurrentBlockIndex->GetBlockTime(), pindexBestHeader->GetBlockTime());\n     fBlockchainSynced = pindexBestHeader->nHeight - pCurrentBlockIndex->nHeight < 24 * 6 &&\n                         GetTime() - nMaxBlockTime < Params().MaxTipAge();\n "
      }
    ]
  },
  {
    "sha": "d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWIxZTc3MzRhNjYwOWZjMTVlZjRlNTk3NTkwZjU3OTNiYjkzYTRi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-02T17:15:37Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-02T17:15:37Z"
      },
      "message": "Few mn payments fixes: (#1183)\n\n- avoid processing same vote multiple times\r\n- do not relay votes until synced\r\n- do not ban for wrong signature of old votes\r\n- do not check masternode ranks for old votes on regular (non-MN) nodes",
      "tree": {
        "sha": "824b56bad7cc98cc1f9f7ec40d564a895ec54a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/824b56bad7cc98cc1f9f7ec40d564a895ec54a6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9b1e7734a6609fc15ef4e597590f5793bb93a4b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b84764242871852f5f2bab21d84d502f90a17da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b84764242871852f5f2bab21d84d502f90a17da9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b84764242871852f5f2bab21d84d502f90a17da9"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 75,
      "deletions": 23
    },
    "files": [
      {
        "sha": "487496b0a11b26f7bf45f2695802625a1df31a99",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9b1e7734a6609fc15ef4e597590f5793bb93a4b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9b1e7734a6609fc15ef4e597590f5793bb93a4b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
        "patch": "@@ -5112,7 +5112,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 }\n \n                 if (!pushed && inv.type == MSG_MASTERNODE_PAYMENT_VOTE) {\n-                    if(mnpayments.mapMasternodePaymentVotes.count(inv.hash)) {\n+                    if(mnpayments.HasVerifiedPaymentVote(inv.hash)) {\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n                         ss << mnpayments.mapMasternodePaymentVotes[inv.hash];\n@@ -5128,7 +5128,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         BOOST_FOREACH(CMasternodePayee& payee, mnpayments.mapMasternodeBlocks[mi->second->nHeight].vecPayees) {\n                             std::vector<uint256> vecVoteHashes = payee.GetVoteHashes();\n                             BOOST_FOREACH(uint256& hash, vecVoteHashes) {\n-                                if(mnpayments.mapMasternodePaymentVotes.count(hash)) {\n+                                if(mnpayments.HasVerifiedPaymentVote(hash)) {\n                                     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                                     ss.reserve(1000);\n                                     ss << mnpayments.mapMasternodePaymentVotes[hash];"
      },
      {
        "sha": "a78b58f8973b91bd1db67cd17ca9520a0a77dc2c",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 18,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9b1e7734a6609fc15ef4e597590f5793bb93a4b/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9b1e7734a6609fc15ef4e597590f5793bb93a4b/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
        "patch": "@@ -341,9 +341,18 @@ void CMasternodePayments::ProcessMessage(CNode* pfrom, std::string& strCommand,\n \n         if(!pCurrentBlockIndex) return;\n \n-        if(mapMasternodePaymentVotes.count(vote.GetHash())) {\n-            LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- hash=%s, nHeight=%d seen\\n\", vote.GetHash().ToString(), pCurrentBlockIndex->nHeight);\n-            return;\n+        {\n+            LOCK(cs_mapMasternodePaymentVotes);\n+            if(mapMasternodePaymentVotes.count(vote.GetHash())) {\n+                LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- hash=%s, nHeight=%d seen\\n\", vote.GetHash().ToString(), pCurrentBlockIndex->nHeight);\n+                return;\n+            }\n+\n+            // Avoid processing same vote multiple times\n+            mapMasternodePaymentVotes[vote.GetHash()] = vote;\n+            // but first mark vote as non-verified,\n+            // AddPaymentVote() below should take care of it if vote is actually ok\n+            mapMasternodePaymentVotes[vote.GetHash()].MarkAsNotVerified();\n         }\n \n         int nFirstBlock = pCurrentBlockIndex->nHeight - GetStorageLimit();\n@@ -363,14 +372,29 @@ void CMasternodePayments::ProcessMessage(CNode* pfrom, std::string& strCommand,\n             return;\n         }\n \n-        if(!vote.CheckSignature()) {\n-            // do not ban for old mnw, MN simply might be not active anymore\n-            if(masternodeSync.IsSynced() && vote.nBlockHeight > pCurrentBlockIndex->nHeight) {\n-                LogPrintf(\"MASTERNODEPAYMENTVOTE -- invalid signature\\n\");\n-                Misbehaving(pfrom->GetId(), 20);\n+        masternode_info_t mnInfo = mnodeman.GetMasternodeInfo(vote.vinMasternode);\n+        if(!mnInfo.fInfoValid) {\n+            // mn was not found, so we can't check vote, some info is probably missing\n+            LogPrintf(\"MASTERNODEPAYMENTVOTE -- masternode is missing %s\\n\", vote.vinMasternode.prevout.ToStringShort());\n+            mnodeman.AskForMN(pfrom, vote.vinMasternode);\n+            return;\n+        }\n+\n+        int nDos = 0;\n+        if(!vote.CheckSignature(mnInfo.pubKeyMasternode, pCurrentBlockIndex->nHeight, nDos)) {\n+            if(nDos) {\n+                LogPrintf(\"MASTERNODEPAYMENTVOTE -- ERROR: invalid signature\\n\");\n+                Misbehaving(pfrom->GetId(), nDos);\n+            } else {\n+                // only warn about anything non-critical (i.e. nDos == 0) in debug mode\n+                LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- WARNING: invalid signature\\n\");\n             }\n-            // it could just be a non-synced masternode\n+            // Either our info or vote info could be outdated.\n+            // In case our info is outdated, ask for an update,\n             mnodeman.AskForMN(pfrom, vote.vinMasternode);\n+            // but there is nothing we can do if vote info itself is outdated\n+            // (i.e. it was signed by a mn which changed its key),\n+            // so just quit here.\n             return;\n         }\n \n@@ -443,9 +467,9 @@ bool CMasternodePayments::AddPaymentVote(const CMasternodePaymentVote& vote)\n     uint256 blockHash = uint256();\n     if(!GetBlockHash(blockHash, vote.nBlockHeight - 101)) return false;\n \n-    LOCK2(cs_mapMasternodeBlocks, cs_mapMasternodePaymentVotes);\n+    if(HasVerifiedPaymentVote(vote.GetHash())) return false;\n \n-    if(mapMasternodePaymentVotes.count(vote.GetHash())) return false;\n+    LOCK2(cs_mapMasternodeBlocks, cs_mapMasternodePaymentVotes);\n \n     mapMasternodePaymentVotes[vote.GetHash()] = vote;\n \n@@ -459,6 +483,13 @@ bool CMasternodePayments::AddPaymentVote(const CMasternodePaymentVote& vote)\n     return true;\n }\n \n+bool CMasternodePayments::HasVerifiedPaymentVote(uint256 hashIn)\n+{\n+    LOCK(cs_mapMasternodePaymentVotes);\n+    std::map<uint256, CMasternodePaymentVote>::iterator it = mapMasternodePaymentVotes.find(hashIn);\n+    return it != mapMasternodePaymentVotes.end() && it->second.IsVerified();\n+}\n+\n void CMasternodeBlockPayees::AddPayee(const CMasternodePaymentVote& vote)\n {\n     LOCK(cs_vecPayees);\n@@ -634,7 +665,7 @@ bool CMasternodePaymentVote::IsValid(CNode* pnode, int nValidationHeight, std::s\n     }\n \n     int nMinRequiredProtocol;\n-    if(nBlockHeight > nValidationHeight) {\n+    if(nBlockHeight >= nValidationHeight) {\n         // new votes must comply SPORK_10_MASTERNODE_PAY_UPDATED_NODES rules\n         nMinRequiredProtocol = mnpayments.GetMinMasternodePaymentsProto();\n     } else {\n@@ -647,6 +678,10 @@ bool CMasternodePaymentVote::IsValid(CNode* pnode, int nValidationHeight, std::s\n         return false;\n     }\n \n+    // Only masternodes should try to check masternode rank for old votes - they need to pick the right winner for future blocks.\n+    // Regular clients (miners included) need to verify masternode rank for future block votes only.\n+    if(!fMasterNode && nBlockHeight < nValidationHeight) return true;\n+\n     int nRank = mnodeman.GetMasternodeRank(vinMasternode, nBlockHeight - 101, nMinRequiredProtocol, false);\n \n     if(nRank > MNPAYMENTS_SIGNATURES_TOTAL) {\n@@ -733,23 +768,29 @@ bool CMasternodePayments::ProcessBlock(int nBlockHeight)\n \n void CMasternodePaymentVote::Relay()\n {\n+    // do not relay until synced\n+    if (!masternodeSync.IsSynced()) return;\n     CInv inv(MSG_MASTERNODE_PAYMENT_VOTE, GetHash());\n     RelayInv(inv);\n }\n \n-bool CMasternodePaymentVote::CheckSignature()\n+bool CMasternodePaymentVote::CheckSignature(const CPubKey& pubKeyMasternode, int nValidationHeight, int &nDos)\n {\n-\n-    CMasternode* pmn = mnodeman.Find(vinMasternode);\n-\n-    if (!pmn) return false;\n+    // do not ban by default\n+    nDos = 0;\n \n     std::string strMessage = vinMasternode.prevout.ToStringShort() +\n                 boost::lexical_cast<std::string>(nBlockHeight) +\n                 ScriptToAsmStr(payee);\n \n     std::string strError = \"\";\n-    if (!darkSendSigner.VerifyMessage(pmn->pubKeyMasternode, vchSig, strMessage, strError)) {\n+    if (!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n+        // Only ban for future block vote when we are already synced.\n+        // Otherwise it could be the case when MN which signed this vote is using another key now\n+        // and we have no idea about the old one.\n+        if(masternodeSync.IsSynced() && nBlockHeight > nValidationHeight) {\n+            nDos = 20;\n+        }\n         return error(\"CMasternodePaymentVote::CheckSignature -- Got bad Masternode payment signature, masternode=%s, error: %s\", vinMasternode.prevout.ToStringShort().c_str(), strError);\n     }\n \n@@ -791,6 +832,7 @@ void CMasternodePayments::Sync(CNode* pnode, int nCountNeeded)\n             BOOST_FOREACH(CMasternodePayee& payee, mapMasternodeBlocks[h].vecPayees) {\n                 std::vector<uint256> vecVoteHashes = payee.GetVoteHashes();\n                 BOOST_FOREACH(uint256& hash, vecVoteHashes) {\n+                    if(!HasVerifiedPaymentVote(hash)) continue;\n                     pnode->PushInventory(CInv(MSG_MASTERNODE_PAYMENT_VOTE, hash));\n                     nInvCount++;\n                 }"
      },
      {
        "sha": "56f0d153a5ae790a02e3545a98e88e82bbc19b1b",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9b1e7734a6609fc15ef4e597590f5793bb93a4b/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9b1e7734a6609fc15ef4e597590f5793bb93a4b/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
        "patch": "@@ -79,8 +79,14 @@ class CMasternodeBlockPayees\n     int nBlockHeight;\n     std::vector<CMasternodePayee> vecPayees;\n \n-    CMasternodeBlockPayees() : nBlockHeight(0) {}\n-    CMasternodeBlockPayees(int nBlockHeightIn) : nBlockHeight(nBlockHeightIn) {}\n+    CMasternodeBlockPayees() :\n+        nBlockHeight(0),\n+        vecPayees()\n+        {}\n+    CMasternodeBlockPayees(int nBlockHeightIn) :\n+        nBlockHeight(nBlockHeightIn),\n+        vecPayees()\n+        {}\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -142,11 +148,14 @@ class CMasternodePaymentVote\n     }\n \n     bool Sign();\n-    bool CheckSignature();\n+    bool CheckSignature(const CPubKey& pubKeyMasternode, int nValidationHeight, int &nDos);\n \n     bool IsValid(CNode* pnode, int nValidationHeight, std::string& strError);\n     void Relay();\n \n+    bool IsVerified() { return !vchSig.empty(); }\n+    void MarkAsNotVerified() { vchSig.clear(); }\n+\n     std::string ToString() const;\n };\n \n@@ -184,6 +193,7 @@ class CMasternodePayments\n     void Clear();\n \n     bool AddPaymentVote(const CMasternodePaymentVote& vote);\n+    bool HasVerifiedPaymentVote(uint256 hashIn);\n     bool ProcessBlock(int nBlockHeight);\n \n     void Sync(CNode* node, int nCountNeeded);"
      }
    ]
  },
  {
    "sha": "bc3b349cc1612a6269d42429e949ad0c80251878",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzNiMzQ5Y2MxNjEyYTYyNjlkNDI0MjllOTQ5YWQwYzgwMjUxODc4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-02T17:42:45Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-02T17:42:45Z"
      },
      "message": "expired masternodes should not be auto-re-enabled on start, should keep expired state (#1182)",
      "tree": {
        "sha": "0e504798d5914309b28f9d4a59028c3df6717b18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e504798d5914309b28f9d4a59028c3df6717b18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc3b349cc1612a6269d42429e949ad0c80251878",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc3b349cc1612a6269d42429e949ad0c80251878",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc3b349cc1612a6269d42429e949ad0c80251878",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc3b349cc1612a6269d42429e949ad0c80251878/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9b1e7734a6609fc15ef4e597590f5793bb93a4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9b1e7734a6609fc15ef4e597590f5793bb93a4b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8c90538a5c462a4293c062ef6889d61a63fef557",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc3b349cc1612a6269d42429e949ad0c80251878/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc3b349cc1612a6269d42429e949ad0c80251878/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=bc3b349cc1612a6269d42429e949ad0c80251878",
        "patch": "@@ -195,10 +195,6 @@ void CMasternode::Check(bool fForce)\n         nHeight = chainActive.Height();\n     }\n \n-    // keep old masternodes on start, give them a chance to receive an updated ping without removal/expiry\n-    if(!masternodeSync.IsMasternodeListSynced()) nTimeStart = GetTime();\n-    bool fWaitForPing = (GetTime() - nTimeStart < MASTERNODE_MIN_MNP_SECONDS);\n-\n     if(nActiveState == MASTERNODE_POSE_BAN) {\n         if(nHeight < nPoSeBanHeight) return; // too early?\n         // Otherwise give it a chance to proceed further to do all the usual checks and to change its state.\n@@ -239,6 +235,12 @@ void CMasternode::Check(bool fForce)\n         return;\n     }\n \n+    // keep old masternodes on start, give them a chance to receive an updated ping without removal/expiry\n+    if(!masternodeSync.IsMasternodeListSynced()) nTimeStart = GetTime();\n+    bool fWaitForPing = (GetTime() - nTimeStart < MASTERNODE_MIN_MNP_SECONDS);\n+    // but if it was already expired before the check - don't wait, check it again now\n+    if(nActiveState == MASTERNODE_EXPIRED) fWaitForPing = false;\n+\n     if(!fWaitForPing && !IsPingedWithin(MASTERNODE_EXPIRATION_SECONDS)) {\n         nActiveState = MASTERNODE_EXPIRED;\n         // RESCAN AFFECTED VOTES"
      }
    ]
  },
  {
    "sha": "8126e924419776716e28cc69764648cddcf69296",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTI2ZTkyNDQxOTc3NjcxNmUyOGNjNjk3NjQ2NDhjZGRjZjY5Mjk2",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-03T19:46:08Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-03T19:46:08Z"
      },
      "message": "Merge #1185: Trigger removel changes\n\n- Do not expire superblock triggers on execution\r\n  - Expire trigger objects about 1 day (576 blocks) after their event height is past",
      "tree": {
        "sha": "aa120f84f44b8d3d8b05c65d2771ef9305305f08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa120f84f44b8d3d8b05c65d2771ef9305305f08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8126e924419776716e28cc69764648cddcf69296",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8126e924419776716e28cc69764648cddcf69296",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8126e924419776716e28cc69764648cddcf69296",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8126e924419776716e28cc69764648cddcf69296/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc3b349cc1612a6269d42429e949ad0c80251878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc3b349cc1612a6269d42429e949ad0c80251878",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc3b349cc1612a6269d42429e949ad0c80251878"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 4,
      "deletions": 15
    },
    "files": [
      {
        "sha": "510676cfb76ebaa6b465c7593252bdb8dc4a994c",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8126e924419776716e28cc69764648cddcf69296/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8126e924419776716e28cc69764648cddcf69296/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=8126e924419776716e28cc69764648cddcf69296",
        "patch": "@@ -204,24 +204,13 @@ void CGovernanceTriggerManager::CleanAndRemove()\n                 LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Unknown or invalid trigger found\\n\");\n                 remove = true;\n                 break;\n-            case SEEN_OBJECT_EXECUTED:\n-                {\n-                    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Executed trigger found\\n\");\n-                    CGovernanceObject* pgovobj = pSuperblock->GetGovernanceObject();\n-                    if(pgovobj) {\n-                        LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Expiring executed object: %s\\n\", pgovobj->GetHash().ToString());\n-                        pgovobj->fExpired = true;\n-                        pgovobj->nDeletionTime = GetAdjustedTime();\n-                    }\n-                }\n-                remove = true;\n-                break;\n             case SEEN_OBJECT_IS_VALID:\n+            case SEEN_OBJECT_EXECUTED:\n                 {\n                     int nTriggerBlock = pSuperblock->GetBlockStart();\n                     // Rough approximation: a cycle of superblock ++\n-                    int nExpirationBlock = nTriggerBlock + Params().GetConsensus().nSuperblockCycle + GOVERNANCE_FEE_CONFIRMATIONS; \n-                    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- nTriggerBlock = %d, nExpriartionBlock = %d\\n\");\n+                    int nExpirationBlock = nTriggerBlock + GOVERNANCE_TRIGGER_EXPIRATION_BLOCKS;\n+                    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- nTriggerBlock = %d, nExpirationBlock = %d\\n\", nTriggerBlock, nExpirationBlock);\n                     if(governance.GetCachedBlockHeight() > nExpirationBlock) {\n                         LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Outdated trigger found\\n\");\n                         remove = true;\n@@ -459,7 +448,6 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n             DBG( cout << \"CSuperblockManager::CreateSuperblock Before LogPrintf call, nAmount = \" << payment.nAmount << endl; );\n             LogPrintf(\"NEW Superblock : output %d (addr %s, amount %d)\\n\", i, address2.ToString(), payment.nAmount);\n             DBG( cout << \"CSuperblockManager::CreateSuperblock After LogPrintf call \" << endl; );\n-            pSuperblock->SetExecuted();\n         } else {\n             DBG( cout << \"CSuperblockManager::CreateSuperblock Payment not found \" << endl; );\n         }"
      },
      {
        "sha": "e08c82fc89779a33a0dc430fe76603ad65082132",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8126e924419776716e28cc69764648cddcf69296/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8126e924419776716e28cc69764648cddcf69296/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=8126e924419776716e28cc69764648cddcf69296",
        "patch": "@@ -50,6 +50,7 @@ static const int64_t GOVERNANCE_DELETION_DELAY = 10*60;\n static const int64_t GOVERNANCE_ORPHAN_EXPIRATION_TIME = 10*60;\n static const int64_t GOVERNANCE_WATCHDOG_EXPIRATION_TIME = 2*60*60;\n \n+static const int GOVERNANCE_TRIGGER_EXPIRATION_BLOCKS = 576;\n \n // FOR SEEN MAP ARRAYS - GOVERNANCE OBJECTS AND VOTES\n static const int SEEN_OBJECT_IS_VALID = 0;"
      }
    ]
  },
  {
    "sha": "786f17e1f26172aca3dfbb62128e257c8e573f53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODZmMTdlMWYyNjE3MmFjYTNkZmJiNjIxMjhlMjU3YzhlNTczZjUz",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-03T21:33:30Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-03T21:33:30Z"
      },
      "message": "Merge #1186: Added logging of sent inv messages",
      "tree": {
        "sha": "893317e3a63442d8b0411ec7768528ed5ad88551",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/893317e3a63442d8b0411ec7768528ed5ad88551"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/786f17e1f26172aca3dfbb62128e257c8e573f53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786f17e1f26172aca3dfbb62128e257c8e573f53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/786f17e1f26172aca3dfbb62128e257c8e573f53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786f17e1f26172aca3dfbb62128e257c8e573f53/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8126e924419776716e28cc69764648cddcf69296",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8126e924419776716e28cc69764648cddcf69296",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8126e924419776716e28cc69764648cddcf69296"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "50b8766dc4d1332282756840655298630dc47786",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/786f17e1f26172aca3dfbb62128e257c8e573f53/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/786f17e1f26172aca3dfbb62128e257c8e573f53/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=786f17e1f26172aca3dfbb62128e257c8e573f53",
        "patch": "@@ -6674,24 +6674,29 @@ bool SendMessages(CNode* pto)\n \n                     if (fTrickleWait)\n                     {\n+                        LogPrint(\"net\", \"SendMessages -- queued inv(vInvWait): %s  index=%d peer=%d\\n\", inv.ToString(), vInvWait.size(), pto->id);\n                         vInvWait.push_back(inv);\n                         continue;\n                     }\n                 }\n \n                 pto->filterInventoryKnown.insert(inv.hash);\n \n+                LogPrint(\"net\", \"SendMessages -- queued inv: %s  index=%d peer=%d\\n\", inv.ToString(), vInv.size(), pto->id);\n                 vInv.push_back(inv);\n                 if (vInv.size() >= 1000)\n                 {\n+                    LogPrint(\"net\", \"SendMessages -- pushing inv's: count=%d peer=%d\\n\", vInv.size(), pto->id);\n                     pto->PushMessage(NetMsgType::INV, vInv);\n                     vInv.clear();\n                 }\n             }\n             pto->vInventoryToSend = vInvWait;\n         }\n-        if (!vInv.empty())\n+        if (!vInv.empty()) {\n+            LogPrint(\"net\", \"SendMessages -- pushing tailing inv's: count=%d peer=%d\\n\", vInv.size(), pto->id);\n             pto->PushMessage(NetMsgType::INV, vInv);\n+        }\n \n         // Detect whether we're stalling\n         nNow = GetTimeMicros();"
      }
    ]
  },
  {
    "sha": "80444ea8e4f781f19a32fa108c2cd29b9e66c277",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDQ0NGVhOGU0Zjc4MWYxOWEzMmZhMTA4YzJjZDI5YjllNjZjMjc3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-04T20:33:11Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-04T20:33:11Z"
      },
      "message": "optimize PS (#1180)\n\n* move HasCollateralInputs out of the loop\r\n\r\n* optimize HasCollateralInputs",
      "tree": {
        "sha": "bbb84ea88eaad38c01df03c6fe2455f641f2f78f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbb84ea88eaad38c01df03c6fe2455f641f2f78f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80444ea8e4f781f19a32fa108c2cd29b9e66c277",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80444ea8e4f781f19a32fa108c2cd29b9e66c277",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80444ea8e4f781f19a32fa108c2cd29b9e66c277",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80444ea8e4f781f19a32fa108c2cd29b9e66c277/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "786f17e1f26172aca3dfbb62128e257c8e573f53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786f17e1f26172aca3dfbb62128e257c8e573f53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/786f17e1f26172aca3dfbb62128e257c8e573f53"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "795ce10db82b97afb3026cebfbf8afb667c9a101",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=80444ea8e4f781f19a32fa108c2cd29b9e66c277",
        "patch": "@@ -1855,8 +1855,10 @@ bool CDarksendPool::CreateDenominated()\n         return false;\n     }\n \n+    bool fCreateMixingCollaterals = !pwalletMain->HasCollateralInputs();\n+\n     BOOST_FOREACH(CompactTallyItem& item, vecTally) {\n-        if(!CreateDenominated(item)) continue;\n+        if(!CreateDenominated(item, fCreateMixingCollaterals)) continue;\n         return true;\n     }\n \n@@ -1865,7 +1867,7 @@ bool CDarksendPool::CreateDenominated()\n }\n \n // Create denominations\n-bool CDarksendPool::CreateDenominated(const CompactTallyItem& tallyItem)\n+bool CDarksendPool::CreateDenominated(const CompactTallyItem& tallyItem, bool fCreateMixingCollaterals)\n {\n     std::vector<CRecipient> vecSend;\n     CAmount nValueLeft = tallyItem.nAmount;\n@@ -1882,7 +1884,7 @@ bool CDarksendPool::CreateDenominated(const CompactTallyItem& tallyItem)\n \n     // ****** Add collateral outputs ************ /\n \n-    if(!pwalletMain->HasCollateralInputs()) {\n+    if(fCreateMixingCollaterals) {\n         vecSend.push_back((CRecipient){scriptCollateral, PRIVATESEND_COLLATERAL*4, false});\n         nValueLeft -= PRIVATESEND_COLLATERAL*4;\n     }"
      },
      {
        "sha": "179aea5370c83087a5fe7f3967bb26cb33835be1",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=80444ea8e4f781f19a32fa108c2cd29b9e66c277",
        "patch": "@@ -382,7 +382,7 @@ class CDarksendPool\n \n     /// Create denominations\n     bool CreateDenominated();\n-    bool CreateDenominated(const CompactTallyItem& tallyItem);\n+    bool CreateDenominated(const CompactTallyItem& tallyItem, bool fCreateMixingCollaterals);\n \n     /// Split up large inputs or make fee sized inputs\n     bool MakeCollateralAmounts();"
      },
      {
        "sha": "e3bae0cf2e67412e695912d595408b1eed8539f3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=80444ea8e4f781f19a32fa108c2cd29b9e66c277",
        "patch": "@@ -2118,6 +2118,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                     if(found && fMasterNode) found = pcoin->vout[i].nValue != 1000*COIN; // do not use Hot MN funds\n                 } else if(nCoinType == ONLY_1000) {\n                     found = pcoin->vout[i].nValue == 1000*COIN;\n+                } else if(nCoinType == ONLY_PRIVATESEND_COLLATERAL) {\n+                    found = IsCollateralAmount(pcoin->vout[i].nValue);\n                 } else {\n                     found = true;\n                 }\n@@ -2781,12 +2783,9 @@ int CWallet::CountInputsWithAmount(CAmount nInputAmount)\n bool CWallet::HasCollateralInputs(bool fOnlyConfirmed) const\n {\n     vector<COutput> vCoins;\n-    AvailableCoins(vCoins, fOnlyConfirmed);\n+    AvailableCoins(vCoins, fOnlyConfirmed, NULL, false, ONLY_PRIVATESEND_COLLATERAL);\n \n-    BOOST_FOREACH(const COutput& out, vCoins)\n-        if(IsCollateralAmount(out.tx->vout[out.i].nValue)) return true;\n-\n-    return false;\n+    return !vCoins.empty();\n }\n \n bool CWallet::IsCollateralAmount(CAmount nInputAmount) const"
      },
      {
        "sha": "e039d01558b4df82c82f5f30f21b9209f209acb8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80444ea8e4f781f19a32fa108c2cd29b9e66c277/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=80444ea8e4f781f19a32fa108c2cd29b9e66c277",
        "patch": "@@ -97,7 +97,8 @@ enum AvailableCoinsType\n     ONLY_DENOMINATED = 2,\n     ONLY_NOT1000IFMN = 3,\n     ONLY_NONDENOMINATED_NOT1000IFMN = 4,\n-    ONLY_1000 = 5 // find masternode outputs including locked ones (use with caution)\n+    ONLY_1000 = 5, // find masternode outputs including locked ones (use with caution)\n+    ONLY_PRIVATESEND_COLLATERAL = 6\n };\n \n struct CompactTallyItem"
      }
    ]
  },
  {
    "sha": "3ebcb78e12bfb404404b1dc3c10d3513f3270776",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWJjYjc4ZTEyYmZiNDA0NDA0YjFkYzNjMTBkMzUxM2YzMjcwNzc2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-04T20:33:23Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-04T20:33:23Z"
      },
      "message": "do not conect trayIconActivated on mac (#1184)",
      "tree": {
        "sha": "f55ffd1de007589f36d03774df7cb2f7a7fd2ec0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f55ffd1de007589f36d03774df7cb2f7a7fd2ec0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ebcb78e12bfb404404b1dc3c10d3513f3270776",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ebcb78e12bfb404404b1dc3c10d3513f3270776",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ebcb78e12bfb404404b1dc3c10d3513f3270776",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ebcb78e12bfb404404b1dc3c10d3513f3270776/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80444ea8e4f781f19a32fa108c2cd29b9e66c277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80444ea8e4f781f19a32fa108c2cd29b9e66c277",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80444ea8e4f781f19a32fa108c2cd29b9e66c277"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "22b38f31df9ecc2eb16ff6c705c7d38096c92b4e",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ebcb78e12bfb404404b1dc3c10d3513f3270776/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ebcb78e12bfb404404b1dc3c10d3513f3270776/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3ebcb78e12bfb404404b1dc3c10d3513f3270776",
        "patch": "@@ -580,14 +580,16 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n             // do so only if trayIcon is already set\n             trayIconMenu = new QMenu(this);\n             trayIcon->setContextMenu(trayIconMenu);\n+            createIconMenu(trayIconMenu);\n \n+#ifndef Q_OS_MAC\n+            // Show main window on tray icon click\n+            // Note: ignore this on Mac - this is not the way tray should work there\n             connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),\n                     this, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));\n-\n-            createIconMenu(trayIconMenu);\n-\n-#ifdef Q_OS_MAC\n-            // Note: On Mac, the dock icon is also used to provide same functionality.\n+#else\n+            // Note: On Mac, the dock icon is also used to provide menu functionality\n+            // similar to one for tray icon\n             MacDockIconHandler *dockIconHandler = MacDockIconHandler::instance();\n             dockIconHandler->setMainWindow((QMainWindow *)this);\n             dockIconMenu = dockIconHandler->dockMenu();"
      }
    ]
  },
  {
    "sha": "9f2d79d9207db3af591e8f142eea866860c6571c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjJkNzlkOTIwN2RiM2FmNTkxZThmMTQyZWVhODY2ODYwYzY1NzFj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-04T20:33:39Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-04T20:33:39Z"
      },
      "message": "Fix masternode rate checks (#1187)\n\n* Added logging to PushInventory\r\n\r\n* Fix LogPrint format\r\n\r\n* Log errors found during governance syncing\r\n\r\n* Turn off rate checks during syncing\r\n\r\n* Turn off rate check during maintenance",
      "tree": {
        "sha": "693b7910a30b3b5f73c68ea53496e866b77cb6b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/693b7910a30b3b5f73c68ea53496e866b77cb6b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f2d79d9207db3af591e8f142eea866860c6571c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2d79d9207db3af591e8f142eea866860c6571c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f2d79d9207db3af591e8f142eea866860c6571c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2d79d9207db3af591e8f142eea866860c6571c/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ebcb78e12bfb404404b1dc3c10d3513f3270776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ebcb78e12bfb404404b1dc3c10d3513f3270776",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ebcb78e12bfb404404b1dc3c10d3513f3270776"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 42,
      "deletions": 14
    },
    "files": [
      {
        "sha": "b4976214a5df443e5ef579805c9e6d470a4437f4",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 13,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2d79d9207db3af591e8f142eea866860c6571c/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2d79d9207db3af591e8f142eea866860c6571c/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=9f2d79d9207db3af591e8f142eea866860c6571c",
        "patch": "@@ -368,6 +368,8 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n     if(!pCurrentBlockIndex) return;\n \n+    fRateChecksEnabled = false;\n+\n     LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- After pCurrentBlockIndex (not NULL)\\n\");\n \n     // UPDATE CACHE FOR EACH OBJECT THAT IS FLAGGED DIRTYCACHE=TRUE\n@@ -423,6 +425,8 @@ void CGovernanceManager::UpdateCachesAndClean()\n             ++it;\n         }\n     }\n+\n+    fRateChecksEnabled = true;\n }\n \n CGovernanceObject *CGovernanceManager::FindGovernanceObject(const uint256& nHash)\n@@ -625,31 +629,51 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n \n     // SYNC GOVERNANCE OBJECTS WITH OTHER CLIENT\n \n+    LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing to peer=%d, nProp = %s\\n\", pfrom->id, nProp.ToString());\n+\n     {\n         LOCK(cs);\n+        fRateChecksEnabled = false;\n         for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n             uint256 h = it->first;\n \n             CGovernanceObject& govobj = it->second;\n \n+            if((nProp != uint256()) && (h != nProp)) {\n+                continue;\n+            }\n+\n+            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", govobj.GetHash().ToString(), pfrom->id);\n+\n             std::string strError;\n-            if(govobj.IsSetCachedValid() &&\n-               (nProp == uint256() || h == nProp) &&\n-               govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n-                // Push the inventory budget proposal message over to the other client\n-                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n-                ++nInvCount;\n+            bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, true); \n+            if(!fIsValid) {\n+                LogPrintf(\"CGovernanceManager::Sync -- not syncing invalid govobj: %s, strError = %s, fCachedValid = %d, peer=%d\\n\", \n+                         govobj.GetHash().ToString(), strError, govobj.IsSetCachedValid(), pfrom->id);\n+                continue;\n+            }\n \n-                std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n-                for(size_t i = 0; i < vecVotes.size(); ++i) {\n-                    if(!vecVotes[i].IsValid(true)) {\n-                        continue;\n-                    }\n-                    pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, vecVotes[i].GetHash()));\n-                    ++nInvCount;\n+            if(!govobj.IsSetCachedValid()) {\n+                LogPrintf(\"CGovernanceManager::Sync -- invalid flag cached, not syncing govobj: %s, fCachedValid = %d, peer=%d\\n\", \n+                          govobj.GetHash().ToString(), govobj.IsSetCachedValid(), pfrom->id);\n+                continue;\n+            }\n+\n+            // Push the inventory budget proposal message over to the other client\n+            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing govobj: %s, peer=%d\\n\", govobj.GetHash().ToString(), pfrom->id);\n+            pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n+            ++nInvCount;\n+\n+            std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n+            for(size_t i = 0; i < vecVotes.size(); ++i) {\n+                if(!vecVotes[i].IsValid(true)) {\n+                    continue;\n                 }\n+                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, vecVotes[i].GetHash()));\n+                ++nInvCount;\n             }\n         }\n+        fRateChecksEnabled = true;\n     }\n \n     pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nInvCount);"
      },
      {
        "sha": "bc57c84573f6addb6b2c812037e6d917d07f4d9f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f2d79d9207db3af591e8f142eea866860c6571c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f2d79d9207db3af591e8f142eea866860c6571c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9f2d79d9207db3af591e8f142eea866860c6571c",
        "patch": "@@ -15,6 +15,7 @@\n #include \"streams.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n+#include \"util.h\"\n \n #include <deque>\n #include <stdint.h>\n@@ -510,8 +511,11 @@ class CNode\n     {\n         {\n             LOCK(cs_inventory);\n-            if (inv.type == MSG_TX && filterInventoryKnown.contains(inv.hash))\n+            if (inv.type == MSG_TX && filterInventoryKnown.contains(inv.hash)) {\n+                LogPrint(\"net\", \"PushInventory --  filtered inv: %s peer=%d\\n\", inv.ToString(), id);\n                 return;\n+            }\n+            LogPrint(\"net\", \"PushInventory --  inv: %s peer=%d\\n\", inv.ToString(), id);\n             vInventoryToSend.push_back(inv);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "0e28de7e1099f39e333d88a0dbe649969216d902",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTI4ZGU3ZTEwOTlmMzllMzMzZDg4YTBkYmU2NDk5NjkyMTZkOTAy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-05T10:06:51Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-05T10:06:51Z"
      },
      "message": "Merge #1189: release nodes after loop in CMasternodeSync::ProcessTick()",
      "tree": {
        "sha": "81558a4ccae12a3fa8927ece485c11c5f83847cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81558a4ccae12a3fa8927ece485c11c5f83847cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e28de7e1099f39e333d88a0dbe649969216d902",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e28de7e1099f39e333d88a0dbe649969216d902",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e28de7e1099f39e333d88a0dbe649969216d902",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e28de7e1099f39e333d88a0dbe649969216d902/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f2d79d9207db3af591e8f142eea866860c6571c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f2d79d9207db3af591e8f142eea866860c6571c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f2d79d9207db3af591e8f142eea866860c6571c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ccf14fd75d4cc029b473492d54a8d268f7b518b",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e28de7e1099f39e333d88a0dbe649969216d902/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e28de7e1099f39e333d88a0dbe649969216d902/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=0e28de7e1099f39e333d88a0dbe649969216d902",
        "patch": "@@ -412,6 +412,8 @@ void CMasternodeSync::ProcessTick()\n             }\n         }\n     }\n+    // looped through all nodes, release them\n+    ReleaseNodes(vNodesCopy);\n }\n \n void CMasternodeSync::UpdatedBlockTip(const CBlockIndex *pindex)"
      }
    ]
  },
  {
    "sha": "6a3550b94feb7d00755646a4e37884b9b144b123",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTM1NTBiOTRmZWI3ZDAwNzU1NjQ2YTRlMzc4ODRiOWIxNDRiMTIz",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-06T16:40:37Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-06T16:40:37Z"
      },
      "message": "Fix some gov sync issues (#1191)\n\n* Don't relay objects and votes until synced\r\n\r\n* fix sync timeout for govobjs\r\n\r\n* count objs and votes separately\r\n\r\n* reuse GetHash() value, adjust log messages",
      "tree": {
        "sha": "f17185ac4cb5eaa00174386eb93a2e7d6401b973",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f17185ac4cb5eaa00174386eb93a2e7d6401b973"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a3550b94feb7d00755646a4e37884b9b144b123",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3550b94feb7d00755646a4e37884b9b144b123",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a3550b94feb7d00755646a4e37884b9b144b123",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3550b94feb7d00755646a4e37884b9b144b123/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e28de7e1099f39e333d88a0dbe649969216d902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e28de7e1099f39e333d88a0dbe649969216d902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e28de7e1099f39e333d88a0dbe649969216d902"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 41,
      "deletions": 40
    },
    "files": [
      {
        "sha": "a3e6129529add97756b90d37073a05ee42bcd29c",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3550b94feb7d00755646a4e37884b9b144b123/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3550b94feb7d00755646a4e37884b9b144b123/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=6a3550b94feb7d00755646a4e37884b9b144b123",
        "patch": "@@ -651,6 +651,7 @@ bool CGovernanceObject::GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vot\n \n void CGovernanceObject::Relay()\n {\n+    if(!masternodeSync.IsSynced()) return;\n     CInv inv(MSG_GOVERNANCE_OBJECT, GetHash());\n     RelayInv(inv, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "d23bad6caf94d16ee61e1d3f935ed1e58760078e",
        "filename": "src/governance-vote.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3550b94feb7d00755646a4e37884b9b144b123/src/governance-vote.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3550b94feb7d00755646a4e37884b9b144b123/src/governance-vote.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.cpp?ref=6a3550b94feb7d00755646a4e37884b9b144b123",
        "patch": "@@ -235,6 +235,7 @@ CGovernanceVote::CGovernanceVote(CTxIn vinMasternodeIn, uint256 nParentHashIn, v\n \n void CGovernanceVote::Relay() const\n {\n+    if(!masternodeSync.IsSynced()) return;\n     CInv inv(MSG_GOVERNANCE_OBJECT_VOTE, GetHash());\n     RelayInv(inv, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "5df9ba897ead3d98e0ca9fba56442c6c61d13de6",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 27,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3550b94feb7d00755646a4e37884b9b144b123/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3550b94feb7d00755646a4e37884b9b144b123/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=6a3550b94feb7d00755646a4e37884b9b144b123",
        "patch": "@@ -145,7 +145,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         // MAKE SURE WE HAVE A VALID REFERENCE TO THE TIP BEFORE CONTINUING\n \n         if(!pCurrentBlockIndex) {\n-            LogPrintf(\"CGovernanceManager::ProcessMessage MNGOVERNANCEOBJECT -- pCurrentBlockIndex is NULL\\n\");\n+            LogPrintf(\"MNGOVERNANCEOBJECT -- pCurrentBlockIndex is NULL\\n\");\n             return;\n         }\n \n@@ -155,10 +155,10 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         uint256 nHash = govobj.GetHash();\n         std::string strHash = nHash.ToString();\n \n-        LogPrint(\"gobject\", \"CGovernanceManager -- Received object: %s\\n\", strHash);\n+        LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Received object: %s\\n\", strHash);\n \n         if(!AcceptObjectMessage(nHash)) {\n-            LogPrintf(\"CGovernanceManager -- Received unrequested object: %s\\n\", strHash);\n+            LogPrintf(\"MNGOVERNANCEOBJECT -- Received unrequested object: %s\\n\", strHash);\n             Misbehaving(pfrom->GetId(), 20);\n             return;\n         }\n@@ -167,7 +167,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         if(mapSeenGovernanceObjects.count(nHash)) {\n             // TODO - print error code? what if it's GOVOBJ_ERROR_IMMATURE?\n-            LogPrint(\"gobject\", \"CGovernanceManager -- Received already seen object: %s\\n\", strHash);\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Received already seen object: %s\\n\", strHash);\n             return;\n         }\n \n@@ -178,8 +178,8 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n \n         if(fMasternodeMissing) {\n-            mapMasternodeOrphanObjects.insert(std::make_pair(govobj.GetHash(), object_time_pair_t(govobj, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME)));\n-            LogPrint(\"gobject\", \"CGovernanceManager -- Missing masternode for: %s\\n\", strHash);\n+            mapMasternodeOrphanObjects.insert(std::make_pair(nHash, object_time_pair_t(govobj, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME)));\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Missing masternode for: %s\\n\", strHash);\n             // fIsValid must also be false here so we will return early in the next if block\n         }\n         if(!fIsValid) {\n@@ -199,8 +199,8 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         }\n \n         // UPDATE THAT WE'VE SEEN THIS OBJECT\n-        mapSeenGovernanceObjects.insert(std::make_pair(govobj.GetHash(), SEEN_OBJECT_IS_VALID));\n-        masternodeSync.AddedBudgetItem(govobj.GetHash());\n+        mapSeenGovernanceObjects.insert(std::make_pair(nHash, SEEN_OBJECT_IS_VALID));\n+        masternodeSync.AddedGovernanceItem();\n \n \n         // WE MIGHT HAVE PENDING/ORPHAN VOTES FOR THIS OBJECT\n@@ -214,30 +214,32 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n     {\n         // Ignore such messages until masternode list is synced\n         if(!masternodeSync.IsMasternodeListSynced()) {\n-            LogPrint(\"gobject\", \"CGovernanceManager::ProcessMessage MNGOVERNANCEOBJECTVOTE -- masternode list not synced\\n\");\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- masternode list not synced\\n\");\n             return;\n         }\n \n         CGovernanceVote vote;\n         vRecv >> vote;\n \n-        LogPrint(\"gobject\", \"CGovernanceManager -- Received vote: %s\\n\", vote.ToString());\n+        LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Received vote: %s\\n\", vote.ToString());\n \n-        if(!AcceptVoteMessage(vote.GetHash())) {\n-            LogPrintf(\"CGovernanceManager -- Received unrequested vote object: %s, hash: %s, peer = %d\\n\",\n-                      vote.ToString(),\n-                      vote.GetHash().ToString(),\n-                      pfrom->GetId());\n+        uint256 nHash = vote.GetHash();\n+        std::string strHash = nHash.ToString();\n+\n+        if(!AcceptVoteMessage(nHash)) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Received unrequested vote object: %s, hash: %s, peer = %d\\n\",\n+                      vote.ToString(), strHash, pfrom->GetId());\n             //Misbehaving(pfrom->GetId(), 20);\n             return;\n         }\n \n         CGovernanceException exception;\n         if(ProcessVote(pfrom, vote, exception)) {\n-            LogPrint(\"gobject\", \"CGovernanceManager -- Accepted vote\\n\");\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- %s new\\n\", strHash);\n+            masternodeSync.AddedGovernanceItem();\n         }\n         else {\n-            LogPrint(\"gobject\", \"CGovernanceManager -- Rejected vote, error = %s\\n\", exception.what());\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Rejected vote, error = %s\\n\", exception.what());\n             if((exception.GetNodePenalty() != 0) && masternodeSync.IsSynced()) {\n                 Misbehaving(pfrom->GetId(), exception.GetNodePenalty());\n             }\n@@ -625,7 +627,8 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n         budget object to see if they're OK. If all checks pass, we'll send it to the peer.\n     */\n \n-    int nInvCount = 0;\n+    int nObjCount = 0;\n+    int nVoteCount = 0;\n \n     // SYNC GOVERNANCE OBJECTS WITH OTHER CLIENT\n \n@@ -643,41 +646,44 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n                 continue;\n             }\n \n-            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", govobj.GetHash().ToString(), pfrom->id);\n+            std::string strHash = h.ToString();\n+\n+            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n             std::string strError;\n             bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, true); \n             if(!fIsValid) {\n                 LogPrintf(\"CGovernanceManager::Sync -- not syncing invalid govobj: %s, strError = %s, fCachedValid = %d, peer=%d\\n\", \n-                         govobj.GetHash().ToString(), strError, govobj.IsSetCachedValid(), pfrom->id);\n+                         strHash, strError, govobj.IsSetCachedValid(), pfrom->id);\n                 continue;\n             }\n \n             if(!govobj.IsSetCachedValid()) {\n                 LogPrintf(\"CGovernanceManager::Sync -- invalid flag cached, not syncing govobj: %s, fCachedValid = %d, peer=%d\\n\", \n-                          govobj.GetHash().ToString(), govobj.IsSetCachedValid(), pfrom->id);\n+                          strHash, govobj.IsSetCachedValid(), pfrom->id);\n                 continue;\n             }\n \n             // Push the inventory budget proposal message over to the other client\n-            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing govobj: %s, peer=%d\\n\", govobj.GetHash().ToString(), pfrom->id);\n+            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n             pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n-            ++nInvCount;\n+            ++nObjCount;\n \n             std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n             for(size_t i = 0; i < vecVotes.size(); ++i) {\n                 if(!vecVotes[i].IsValid(true)) {\n                     continue;\n                 }\n                 pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, vecVotes[i].GetHash()));\n-                ++nInvCount;\n+                ++nVoteCount;\n             }\n         }\n         fRateChecksEnabled = true;\n     }\n \n-    pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nInvCount);\n-    LogPrintf(\"CGovernanceManager::Sync -- sent %d items, peer=%d\\n\", nInvCount, pfrom->id);\n+    pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nObjCount);\n+    pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ_VOTE, nVoteCount);\n+    LogPrintf(\"CGovernanceManager::Sync -- sent %d objects and %d votes to peer=%d\\n\", nObjCount, nVoteCount, pfrom->id);\n }\n \n bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n@@ -749,7 +755,7 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n     CGovernanceObject& govobj = it->second;\n     bool fOk = govobj.ProcessVote(pfrom, vote, exception);\n     if(fOk) {\n-        mapVoteToObject.Insert(vote.GetHash(), &govobj);\n+        mapVoteToObject.Insert(nHashVote, &govobj);\n \n         if(govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n             mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());"
      },
      {
        "sha": "ce6ab4d28d32825bf29932349a179cd71ec308f4",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3550b94feb7d00755646a4e37884b9b144b123/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3550b94feb7d00755646a4e37884b9b144b123/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=6a3550b94feb7d00755646a4e37884b9b144b123",
        "patch": "@@ -55,7 +55,7 @@ void CMasternodeSync::Reset()\n     nTimeAssetSyncStarted = GetTime();\n     nTimeLastMasternodeList = GetTime();\n     nTimeLastPaymentVote = GetTime();\n-    nTimeLastBudgetItem = GetTime();\n+    nTimeLastGovernanceItem = GetTime();\n     nTimeLastFailure = 0;\n     nCountFailures = 0;\n }\n@@ -95,7 +95,7 @@ void CMasternodeSync::SwitchToNextAsset()\n             nRequestedMasternodeAssets = MASTERNODE_SYNC_MNW;\n             break;\n         case(MASTERNODE_SYNC_MNW):\n-            nTimeLastBudgetItem = GetTime();\n+            nTimeLastGovernanceItem = GetTime();\n             nRequestedMasternodeAssets = MASTERNODE_SYNC_GOVERNANCE;\n             break;\n         case(MASTERNODE_SYNC_GOVERNANCE):\n@@ -374,7 +374,7 @@ void CMasternodeSync::ProcessTick()\n                 LogPrint(\"mnpayments\", \"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nTimeLastPaymentVote %lld GetTime() %lld diff %lld\\n\", nTick, nRequestedMasternodeAssets, nTimeLastPaymentVote, GetTime(), GetTime() - nTimeLastPaymentVote);\n \n                 // check for timeout first\n-                if(nTimeLastBudgetItem < GetTime() - MASTERNODE_SYNC_TIMEOUT_SECONDS){\n+                if(GetTime() - nTimeLastGovernanceItem > MASTERNODE_SYNC_TIMEOUT_SECONDS) {\n                     LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- timeout\\n\", nTick, nRequestedMasternodeAssets);\n                     if(nRequestedMasternodeAttempt == 0) {\n                         LogPrintf(\"CMasternodeSync::ProcessTick -- WARNING: failed to sync %s\\n\", GetAssetName());\n@@ -420,10 +420,3 @@ void CMasternodeSync::UpdatedBlockTip(const CBlockIndex *pindex)\n {\n     pCurrentBlockIndex = pindex;\n }\n-\n-\n-void CMasternodeSync::AddedBudgetItem(uint256 hash)\n-{\n-    // skip this for now\n-    return;\n-}"
      },
      {
        "sha": "afe0caaa3667fa086a35beab6bf95bec1c16af64",
        "filename": "src/masternode-sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a3550b94feb7d00755646a4e37884b9b144b123/src/masternode-sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a3550b94feb7d00755646a4e37884b9b144b123/src/masternode-sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.h?ref=6a3550b94feb7d00755646a4e37884b9b144b123",
        "patch": "@@ -18,7 +18,7 @@ static const int MASTERNODE_SYNC_LIST            = 2;\n static const int MASTERNODE_SYNC_MNW             = 3;\n static const int MASTERNODE_SYNC_GOVERNANCE      = 4;\n static const int MASTERNODE_SYNC_GOVOBJ          = 10;\n-static const int MASTERNODE_SYNC_GOVERNANCE_FIN  = 11;\n+static const int MASTERNODE_SYNC_GOVOBJ_VOTE     = 11;\n static const int MASTERNODE_SYNC_FINISHED        = 999;\n \n static const int MASTERNODE_SYNC_TIMEOUT_SECONDS = 30; // our blocks are 2.5 minutes so 30 seconds should be fine\n@@ -43,7 +43,7 @@ class CMasternodeSync\n     // Last time when we received some masternode asset ...\n     int64_t nTimeLastMasternodeList;\n     int64_t nTimeLastPaymentVote;\n-    int64_t nTimeLastBudgetItem;\n+    int64_t nTimeLastGovernanceItem;\n     // ... or failed\n     int64_t nTimeLastFailure;\n \n@@ -61,7 +61,7 @@ class CMasternodeSync\n \n     void AddedMasternodeList() { nTimeLastMasternodeList = GetTime(); }\n     void AddedPaymentVote() { nTimeLastPaymentVote = GetTime(); }\n-    void AddedBudgetItem(uint256 hash);\n+    void AddedGovernanceItem() { nTimeLastGovernanceItem = GetTime(); };\n \n     bool IsFailed() { return nRequestedMasternodeAssets == MASTERNODE_SYNC_FAILED; }\n     bool IsBlockchainSynced();"
      }
    ]
  },
  {
    "sha": "3914f4a1c4d38231873d20c799d09166ff2088df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTE0ZjRhMWM0ZDM4MjMxODczZDIwYzc5OWQwOTE2NmZmMjA4OGRm",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2016-12-06T17:26:44Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-06T17:26:44Z"
      },
      "message": "Update superblock valid checking to allow block creation by p2pool (#1190)\n\n* Update superblock valid checking to allow block creation by p2pool\r\n\r\n* Comment correction for superblock payment not found.\r\n\r\n* Comment correction",
      "tree": {
        "sha": "5cbbd86c2e69beeaaaae107cb39903dcbe2d5b03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cbbd86c2e69beeaaaae107cb39903dcbe2d5b03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3914f4a1c4d38231873d20c799d09166ff2088df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3914f4a1c4d38231873d20c799d09166ff2088df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3914f4a1c4d38231873d20c799d09166ff2088df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3914f4a1c4d38231873d20c799d09166ff2088df/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a3550b94feb7d00755646a4e37884b9b144b123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a3550b94feb7d00755646a4e37884b9b144b123",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a3550b94feb7d00755646a4e37884b9b144b123"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 15,
      "deletions": 7
    },
    "files": [
      {
        "sha": "be9e817c994a44469e38eef76b9b99693c159019",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3914f4a1c4d38231873d20c799d09166ff2088df/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3914f4a1c4d38231873d20c799d09166ff2088df/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=3914f4a1c4d38231873d20c799d09166ff2088df",
        "patch": "@@ -670,8 +670,7 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, CAmount b\n              nOutputs, nPayments, GetGovernanceObject()->GetDataAsHex());\n \n     // We require an exact match (including order) between the expected\n-    // superblock payments and the payments actually in the block, after\n-    // skipping any initial miner payments.\n+    // superblock payments and the payments actually in the block.\n \n     if(nMinerPayments < 0) {\n         // This means the block cannot have all the superblock payments\n@@ -696,6 +695,7 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, CAmount b\n         return false;\n     }\n \n+    int nVoutIndex = 0;\n     for(int i = 0; i < nPayments; i++) {\n         CGovernancePayment payment;\n         if(!GetPayment(i, payment)) {\n@@ -704,18 +704,26 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, CAmount b\n             continue;\n         }\n \n-        int nVoutIndex = nMinerPayments + i;\n+        bool fPaymentMatch = false;\n \n-        bool fPaymentMatch = ((payment.script == txNew.vout[nVoutIndex].scriptPubKey) &&\n-                              (payment.nAmount == txNew.vout[nVoutIndex].nValue));\n+        for (int j = nVoutIndex; j < nOutputs; j++) {\n+            // Find superblock payment\n+            fPaymentMatch = ((payment.script == txNew.vout[j].scriptPubKey) &&\n+                             (payment.nAmount == txNew.vout[j].nValue));\n+\n+            if (fPaymentMatch) {\n+                nVoutIndex = j;\n+                break;\n+            }\n+        }\n \n         if(!fPaymentMatch) {\n-            // MISMATCHED SUPERBLOCK OUTPUT!\n+            // Superblock payment not found!\n \n             CTxDestination address1;\n             ExtractDestination(payment.script, address1);\n             CBitcoinAddress address2(address1);\n-            LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid: output n %d payment %d to %s\\n\", nVoutIndex, payment.nAmount, address2.ToString());\n+            LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid: %d payment %d to %s not found\\n\", i, payment.nAmount, address2.ToString());\n \n             return false;\n         }"
      }
    ]
  },
  {
    "sha": "32ab9f2624711cda878bfdb232f9b930d0fb99fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmFiOWYyNjI0NzExY2RhODc4YmZkYjIzMmY5YjkzMGQwZmI5OWZj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-06T19:50:54Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-06T19:50:54Z"
      },
      "message": "changes in CMasternode::Check (#1194)\n\n* add log output when mn state changes (debug mode only)\r\n\r\n* trigger FlagGovernanceItemsAsDirty only when mn state actually changes",
      "tree": {
        "sha": "352bba6ddd9ef0dd750601b8f76b2b535303945d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/352bba6ddd9ef0dd750601b8f76b2b535303945d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32ab9f2624711cda878bfdb232f9b930d0fb99fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ab9f2624711cda878bfdb232f9b930d0fb99fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32ab9f2624711cda878bfdb232f9b930d0fb99fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ab9f2624711cda878bfdb232f9b930d0fb99fc/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3914f4a1c4d38231873d20c799d09166ff2088df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3914f4a1c4d38231873d20c799d09166ff2088df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3914f4a1c4d38231873d20c799d09166ff2088df"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 21,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ca1aa635547c0efb12911fcf79f52b6cb7734ae7",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32ab9f2624711cda878bfdb232f9b930d0fb99fc/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32ab9f2624711cda878bfdb232f9b930d0fb99fc/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=32ab9f2624711cda878bfdb232f9b930d0fb99fc",
        "patch": "@@ -210,6 +210,8 @@ void CMasternode::Check(bool fForce)\n         return;\n     }\n \n+    int nActiveStatePrev = nActiveState;\n+\n                    // masternode doesn't meet payment protocol requirements ...\n     bool fRemove = nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n                    // or it's our own node and we just updated it to the new protocol but we are still waiting for activation ...\n@@ -218,9 +220,11 @@ void CMasternode::Check(bool fForce)\n     if(fRemove) {\n         // it should be removed from the list\n         nActiveState = MASTERNODE_REMOVE;\n-\n-        // RESCAN AFFECTED VOTES\n-        FlagGovernanceItemsAsDirty();\n+        if(nActiveStatePrev != nActiveState) {\n+            LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+            // RESCAN AFFECTED VOTES\n+            FlagGovernanceItemsAsDirty();\n+        }\n         return;\n     }\n \n@@ -232,6 +236,9 @@ void CMasternode::Check(bool fForce)\n \n     if(fWatchdogExpired) {\n         nActiveState = MASTERNODE_WATCHDOG_EXPIRED;\n+        if(nActiveStatePrev != nActiveState) {\n+            LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+        }\n         return;\n     }\n \n@@ -243,17 +250,26 @@ void CMasternode::Check(bool fForce)\n \n     if(!fWaitForPing && !IsPingedWithin(MASTERNODE_EXPIRATION_SECONDS)) {\n         nActiveState = MASTERNODE_EXPIRED;\n-        // RESCAN AFFECTED VOTES\n-        FlagGovernanceItemsAsDirty();\n+        if(nActiveStatePrev != nActiveState) {\n+            LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+            // RESCAN AFFECTED VOTES\n+            FlagGovernanceItemsAsDirty();\n+        }\n         return;\n     }\n \n     if(lastPing.sigTime - sigTime < MASTERNODE_MIN_MNP_SECONDS) {\n         nActiveState = MASTERNODE_PRE_ENABLED;\n+        if(nActiveStatePrev != nActiveState) {\n+            LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+        }\n         return;\n     }\n \n     nActiveState = MASTERNODE_ENABLED; // OK\n+    if(nActiveStatePrev != nActiveState) {\n+        LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+    }\n }\n \n bool CMasternode::IsValidNetAddr()"
      }
    ]
  },
  {
    "sha": "4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGFjMDAyNWE3MWMwZTM5ZDUwNGYzMzJkZWE2ZDZiOWEzNGViNzFj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-07T04:16:34Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-07T04:16:34Z"
      },
      "message": "Governance relaying fixes (#1195)\n\n* Vote relaying changes\r\n - Remove vote relaying from ProcessVote\r\n - Remove vote relaying from orphan vote processing\r\n - Relay vote in ProcessMessages (only)\r\n\r\n* Do not relay governance objects during orphan processing\r\n\r\n* Restore relaying of local votes\r\n\r\n* Changed overloaded function name: ProcessVote->ProcessVoteAndRelay",
      "tree": {
        "sha": "2ac54bd4fcf41705593838a796b4da836d6fd776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ac54bd4fcf41705593838a796b4da836d6fd776"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dac0025a71c0e39d504f332dea6d6b9a34eb71c/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32ab9f2624711cda878bfdb232f9b930d0fb99fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32ab9f2624711cda878bfdb232f9b930d0fb99fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32ab9f2624711cda878bfdb232f9b930d0fb99fc"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7905d9e0d0f23b2df5e9e7df2d281034291248cd",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dac0025a71c0e39d504f332dea6d6b9a34eb71c/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dac0025a71c0e39d504f332dea6d6b9a34eb71c/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
        "patch": "@@ -237,6 +237,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         if(ProcessVote(pfrom, vote, exception)) {\n             LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- %s new\\n\", strHash);\n             masternodeSync.AddedGovernanceItem();\n+            vote.Relay();\n         }\n         else {\n             LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Rejected vote, error = %s\\n\", exception.what());\n@@ -265,7 +266,6 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n             fRemove = true;\n         }\n         else if(govobj.ProcessVote(NULL, vote, exception)) {\n-            vote.Relay();\n             fRemove = true;\n         }\n         if(fRemove) {\n@@ -760,8 +760,6 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n         if(govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n             mnodeman.UpdateWatchdogVoteTime(vote.GetVinMasternode());\n         }\n-\n-        vote.Relay();\n     }\n     return fOk;\n }\n@@ -806,7 +804,6 @@ void CGovernanceManager::CheckMasternodeOrphanObjects()\n \n         if(AddGovernanceObject(govobj)) {\n             LogPrintf(\"CGovernanceManager::CheckMasternodeOrphanObjects -- %s new\\n\", govobj.GetHash().ToString());\n-            govobj.Relay();\n             mapMasternodeOrphanObjects.erase(it++);\n         }\n         else {"
      },
      {
        "sha": "cc5d7f5e19493f30060987d270277cfa85b7249b",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dac0025a71c0e39d504f332dea6d6b9a34eb71c/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dac0025a71c0e39d504f332dea6d6b9a34eb71c/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
        "patch": "@@ -237,8 +237,12 @@ class CGovernanceManager\n \n     bool MasternodeRateCheck(const CTxIn& vin, int nObjectType);\n \n-    bool ProcessVote(const CGovernanceVote& vote, CGovernanceException& exception) {\n-        return ProcessVote(NULL, vote, exception);\n+    bool ProcessVoteAndRelay(const CGovernanceVote& vote, CGovernanceException& exception) {\n+        bool fOK = ProcessVote(NULL, vote, exception);\n+        if(fOK) {\n+            vote.Relay();\n+        }\n+        return fOK;\n     }\n \n     void CheckMasternodeOrphanVotes();"
      },
      {
        "sha": "79f52eaad20b16f0a6daa36e35991d3f398e50ac",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dac0025a71c0e39d504f332dea6d6b9a34eb71c/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dac0025a71c0e39d504f332dea6d6b9a34eb71c/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
        "patch": "@@ -284,7 +284,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         }\n \n         CGovernanceException exception;\n-        if(governance.ProcessVote(vote, exception)) {\n+        if(governance.ProcessVoteAndRelay(vote, exception)) {\n             success++;\n             statusObj.push_back(Pair(\"result\", \"success\"));\n         }\n@@ -386,7 +386,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             }\n \n             CGovernanceException exception;\n-            if(governance.ProcessVote(vote, exception)) {\n+            if(governance.ProcessVoteAndRelay(vote, exception)) {\n                 success++;\n                 statusObj.push_back(Pair(\"result\", \"success\"));\n             }\n@@ -511,7 +511,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             // UPDATE LOCAL DATABASE WITH NEW OBJECT SETTINGS\n \n             CGovernanceException exception;\n-            if(governance.ProcessVote(vote, exception)) {\n+            if(governance.ProcessVoteAndRelay(vote, exception)) {\n                 success++;\n                 statusObj.push_back(Pair(\"result\", \"success\"));\n             }\n@@ -807,7 +807,7 @@ UniValue voteraw(const UniValue& params, bool fHelp)\n     }\n \n     CGovernanceException exception;\n-    if(governance.ProcessVote(vote, exception)) {\n+    if(governance.ProcessVoteAndRelay(vote, exception)) {\n         return \"Voted successfully\";\n     }\n     else {"
      }
    ]
  },
  {
    "sha": "15bb93d5e8751552a33016444b2f18c4049fd595",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWJiOTNkNWU4NzUxNTUyYTMzMDE2NDQ0YjJmMThjNDA0OWZkNTk1",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-08T20:00:49Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-08T20:00:49Z"
      },
      "message": "Rate check fixes (#1196)\n\n* Fix rate checks for governance objects\r\n\r\n* Do not update last vote time when rate checks are disabled\r\n\r\n* Bump governance serialization version",
      "tree": {
        "sha": "cf88648cf3577fc6096963a3038c5fd176f0b347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf88648cf3577fc6096963a3038c5fd176f0b347"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15bb93d5e8751552a33016444b2f18c4049fd595",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15bb93d5e8751552a33016444b2f18c4049fd595",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15bb93d5e8751552a33016444b2f18c4049fd595",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15bb93d5e8751552a33016444b2f18c4049fd595/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dac0025a71c0e39d504f332dea6d6b9a34eb71c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dac0025a71c0e39d504f332dea6d6b9a34eb71c"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 86,
      "deletions": 33
    },
    "files": [
      {
        "sha": "5b608bc46b117b0dd558315f3cdb19a077214e11",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15bb93d5e8751552a33016444b2f18c4049fd595/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15bb93d5e8751552a33016444b2f18c4049fd595/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=15bb93d5e8751552a33016444b2f18c4049fd595",
        "patch": "@@ -150,6 +150,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     }\n     vote_instance_t& voteInstance = it2->second;\n     int64_t nNow = GetTime();\n+    int64_t nVoteTimeUpdate = voteInstance.nTime;\n     if(governance.AreRateChecksEnabled()) {\n         int64_t nTimeDelta = nNow - voteInstance.nTime;\n         if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n@@ -160,6 +161,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n                  << \", time delta = \" << nTimeDelta << \"\\n\";\n             LogPrint(\"gobject\", ostr.str().c_str());\n             exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_TEMPORARY_ERROR);\n+            nVoteTimeUpdate = nNow;\n             return false;\n         }\n     }\n@@ -175,7 +177,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n         governance.AddInvalidVote(vote);\n         return false;\n     }\n-    voteInstance = vote_instance_t(vote.GetOutcome(), nNow);\n+    voteInstance = vote_instance_t(vote.GetOutcome(), nVoteTimeUpdate);\n     fileVotes.AddVote(vote);\n     fDirtyCache = true;\n     return true;\n@@ -459,15 +461,6 @@ bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& s\n                 return false;\n             }\n \n-            // Only perform rate check if we are synced because during syncing it is expected\n-            // that objects will be seen in rapid succession\n-            if(masternodeSync.IsSynced()) {\n-                if(!governance.MasternodeRateCheck(vinMasternode, nObjectType)) {\n-                    strError = \"Masternode attempting to create too many objects: \" + strOutpoint;\n-                    return false;\n-                }\n-            }\n-\n             return true;\n         }\n "
      },
      {
        "sha": "8c9497d6765a2cc9012324eee899f6954e0293d2",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 18,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15bb93d5e8751552a33016444b2f18c4049fd595/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15bb93d5e8751552a33016444b2f18c4049fd595/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=15bb93d5e8751552a33016444b2f18c4049fd595",
        "patch": "@@ -28,7 +28,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-2\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-3\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),\n@@ -41,7 +41,7 @@ CGovernanceManager::CGovernanceManager()\n       mapVoteToObject(MAX_CACHE_SIZE),\n       mapInvalidVotes(MAX_CACHE_SIZE),\n       mapOrphanVotes(MAX_CACHE_SIZE),\n-      mapLastMasternodeTrigger(),\n+      mapLastMasternodeObject(),\n       setRequestedObjects(),\n       fRateChecksEnabled(true),\n       cs()\n@@ -171,6 +171,11 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             return;\n         }\n \n+        if(!MasternodeRateCheck(govobj, true)) {\n+            LogPrintf(\"MNGOVERNANCEOBJECT -- masternode rate check failed - %s - (current block height %d) \\n\", strHash, nCachedBlockHeight);\n+            return;\n+        }\n+\n         std::string strError = \"\";\n         // CHECK OBJECT AGAINST LOCAL BLOCKCHAIN\n \n@@ -256,6 +261,7 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n     std::vector<vote_time_pair_t> vecVotePairs;\n     mapOrphanVotes.GetAll(nHash, vecVotePairs);\n \n+    fRateChecksEnabled = false;\n     int64_t nNow = GetAdjustedTime();\n     for(size_t i = 0; i < vecVotePairs.size(); ++i) {\n         bool fRemove = false;\n@@ -272,6 +278,7 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n             mapOrphanVotes.Erase(nHash, pairVote);\n         }\n     }\n+    fRateChecksEnabled = true;\n }\n \n bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n@@ -307,13 +314,8 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n               << \", nObjectType = \" << govobj.nObjectType\n               << endl; );\n \n-    if(govobj.GetObjectType() == GOVERNANCE_OBJECT_TRIGGER) {\n-        mapLastMasternodeTrigger[govobj.GetMasternodeVin().prevout] = nCachedBlockHeight;\n-    }\n-\n     switch(govobj.nObjectType) {\n     case GOVERNANCE_OBJECT_TRIGGER:\n-        mapLastMasternodeTrigger[govobj.vinMasternode.prevout] = nCachedBlockHeight;\n         DBG( cout << \"CGovernanceManager::AddGovernanceObject Before AddNewTrigger\" << endl; );\n         triggerman.AddNewTrigger(nHash);\n         DBG( cout << \"CGovernanceManager::AddGovernanceObject After AddNewTrigger\" << endl; );\n@@ -686,37 +688,72 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n     LogPrintf(\"CGovernanceManager::Sync -- sent %d objects and %d votes to peer=%d\\n\", nObjCount, nVoteCount, pfrom->id);\n }\n \n-bool CGovernanceManager::MasternodeRateCheck(const CTxIn& vin, int nObjectType)\n+bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bool fUpdateLast)\n {\n     LOCK(cs);\n \n+    if(!masternodeSync.IsSynced()) {\n+        return true;\n+    }\n+\n     if(!fRateChecksEnabled) {\n         return true;\n     }\n \n-    int mindiff = 0;\n+    int nObjectType = govobj.GetObjectType();\n+    if((nObjectType != GOVERNANCE_OBJECT_TRIGGER) && (nObjectType != GOVERNANCE_OBJECT_WATCHDOG)) {\n+        return true;\n+    }\n+\n+    const CTxIn& vin = govobj.GetMasternodeVin();\n+\n+    txout_m_it it  = mapLastMasternodeObject.find(vin.prevout);\n+\n+    if(it == mapLastMasternodeObject.end()) {\n+        if(fUpdateLast) {\n+            it = mapLastMasternodeObject.insert(txout_m_t::value_type(vin.prevout, last_object_rec(0, 0))).first;\n+            switch(nObjectType) {\n+            case GOVERNANCE_OBJECT_TRIGGER:\n+                it->second.nLastTriggerBlockHeight = nCachedBlockHeight;\n+                break;\n+            case GOVERNANCE_OBJECT_WATCHDOG:\n+                it->second.nLastWatchdogBlockHeight = nCachedBlockHeight;\n+                break;\n+            default:\n+                break;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    int nMinDiff = 0;\n+    int nObjectBlock = 0;\n     switch(nObjectType) {\n     case GOVERNANCE_OBJECT_TRIGGER:\n-        mindiff = Params().GetConsensus().nSuperblockCycle - Params().GetConsensus().nSuperblockCycle / 10;\n+        // Allow 1 trigger per mn per cycle, with a small fudge factor\n+        nMinDiff = Params().GetConsensus().nSuperblockCycle - Params().GetConsensus().nSuperblockCycle / 10;\n+        nObjectBlock = it->second.nLastTriggerBlockHeight;\n+        if(fUpdateLast) {\n+            it->second.nLastTriggerBlockHeight = nCachedBlockHeight;\n+        }\n         break;\n     case GOVERNANCE_OBJECT_WATCHDOG:\n-        mindiff = 1;\n+        nMinDiff = 1;\n+        nObjectBlock = it->second.nLastWatchdogBlockHeight;\n+        if(fUpdateLast) {\n+            it->second.nLastWatchdogBlockHeight = nCachedBlockHeight;\n+        }\n         break;\n     default:\n         break;\n     }\n \n-    txout_m_it it  = mapLastMasternodeTrigger.find(vin.prevout);\n-    if(it == mapLastMasternodeTrigger.end()) {\n-        return true;\n-    }\n-    // Allow 1 trigger per mn per cycle, with a small fudge factor\n-    if((nCachedBlockHeight - it->second) > mindiff) {\n+    if((nCachedBlockHeight - nObjectBlock) > nMinDiff) {\n         return true;\n     }\n \n     LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: vin = %s, current height = %d, last MN height = %d, minimum difference = %d\\n\",\n-              vin.prevout.ToStringShort(), nCachedBlockHeight, it->second, mindiff);\n+              vin.prevout.ToStringShort(), nCachedBlockHeight, nObjectBlock, nMinDiff);\n     return false;\n }\n "
      },
      {
        "sha": "6f20da79fbac35d1358ae1c4c1c2884057fe0ab6",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 25,
        "deletions": 5,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15bb93d5e8751552a33016444b2f18c4049fd595/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15bb93d5e8751552a33016444b2f18c4049fd595/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=15bb93d5e8751552a33016444b2f18c4049fd595",
        "patch": "@@ -48,6 +48,26 @@ class CGovernanceManager\n     friend class CGovernanceObject;\n \n public: // Types\n+    struct last_object_rec {\n+        last_object_rec(int nLastTriggerBlockHeightIn = 0, int nLastWatchdogBlockHeightIn = 0)\n+            : nLastTriggerBlockHeight(nLastTriggerBlockHeightIn),\n+              nLastWatchdogBlockHeight(nLastWatchdogBlockHeightIn)\n+            {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+        {\n+            READWRITE(nLastTriggerBlockHeight);\n+            READWRITE(nLastWatchdogBlockHeight);\n+        }\n+\n+        int nLastTriggerBlockHeight;\n+        int nLastWatchdogBlockHeight;\n+    };\n+\n+\n     typedef std::map<uint256, CGovernanceObject> object_m_t;\n \n     typedef object_m_t::iterator object_m_it;\n@@ -74,7 +94,7 @@ class CGovernanceManager\n \n     typedef object_m_t::size_type size_type;\n \n-    typedef std::map<COutPoint, int> txout_m_t;\n+    typedef std::map<COutPoint, last_object_rec > txout_m_t;\n \n     typedef txout_m_t::iterator txout_m_it;\n \n@@ -124,7 +144,7 @@ class CGovernanceManager\n \n     vote_mcache_t mapOrphanVotes;\n \n-    txout_m_t mapLastMasternodeTrigger;\n+    txout_m_t mapLastMasternodeObject;\n \n     hash_s_t setRequestedObjects;\n \n@@ -186,7 +206,7 @@ class CGovernanceManager\n         mapVoteToObject.Clear();\n         mapInvalidVotes.Clear();\n         mapOrphanVotes.Clear();\n-        mapLastMasternodeTrigger.clear();\n+        mapLastMasternodeObject.clear();\n     }\n \n     std::string ToString() const;\n@@ -209,7 +229,7 @@ class CGovernanceManager\n         READWRITE(mapOrphanVotes);\n         READWRITE(mapObjects);\n         READWRITE(mapWatchdogObjects);\n-        READWRITE(mapLastMasternodeTrigger);\n+        READWRITE(mapLastMasternodeObject);\n         if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n             Clear();\n             return;\n@@ -235,7 +255,7 @@ class CGovernanceManager\n \n     void AddSeenVote(uint256 nHash, int status);\n \n-    bool MasternodeRateCheck(const CTxIn& vin, int nObjectType);\n+    bool MasternodeRateCheck(const CGovernanceObject& govobj, bool fUpdateLast = false);\n \n     bool ProcessVoteAndRelay(const CGovernanceVote& vote, CGovernanceException& exception) {\n         bool fOK = ProcessVote(NULL, vote, exception);"
      },
      {
        "sha": "90aec240cef813ebb08f4ec998300ab59322e1ab",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15bb93d5e8751552a33016444b2f18c4049fd595/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15bb93d5e8751552a33016444b2f18c4049fd595/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=15bb93d5e8751552a33016444b2f18c4049fd595",
        "patch": "@@ -217,6 +217,9 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         }\n \n         // RELAY THIS OBJECT\n+        if(!governance.MasternodeRateCheck(govobj)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Object creation rate limit exceeded\");\n+        }\n         governance.AddSeenGovernanceObject(govobj.GetHash(), SEEN_OBJECT_IS_VALID);\n         govobj.Relay();\n         governance.AddGovernanceObject(govobj);"
      }
    ]
  },
  {
    "sha": "cf57c5ca93b66831e33e38e68a946f7ab833aeab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjU3YzVjYTkzYjY2ODMxZTMzZTM4ZTY4YTk0NmY3YWI4MzNhZWFi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-08T20:03:46Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-08T20:03:46Z"
      },
      "message": "adjust variable names and log messages in IsBlockValueValid (#1192)",
      "tree": {
        "sha": "d171ee1f41a2489b03e1f4ed79a649aea4fc237b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d171ee1f41a2489b03e1f4ed79a649aea4fc237b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf57c5ca93b66831e33e38e68a946f7ab833aeab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf57c5ca93b66831e33e38e68a946f7ab833aeab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf57c5ca93b66831e33e38e68a946f7ab833aeab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf57c5ca93b66831e33e38e68a946f7ab833aeab/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15bb93d5e8751552a33016444b2f18c4049fd595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15bb93d5e8751552a33016444b2f18c4049fd595",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15bb93d5e8751552a33016444b2f18c4049fd595"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "e12efe905c895ba98a82937cf2639d28f7da190b",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf57c5ca93b66831e33e38e68a946f7ab833aeab/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf57c5ca93b66831e33e38e68a946f7ab833aeab/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=cf57c5ca93b66831e33e38e68a946f7ab833aeab",
        "patch": "@@ -37,7 +37,7 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockRewar\n {\n     strErrorRet = \"\";\n \n-    bool isNormalBlockValueMet = (block.vtx[0].GetValueOut() <= blockReward);\n+    bool isBlockRewardValueMet = (block.vtx[0].GetValueOut() <= blockReward);\n     if(fDebug) LogPrintf(\"block.vtx[0].GetValueOut() %lld <= blockReward %lld\\n\", block.vtx[0].GetValueOut(), blockReward);\n \n     // we are still using budgets, but we have no data about them anymore,\n@@ -52,48 +52,48 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockRewar\n             // NOTE: make sure SPORK_13_OLD_SUPERBLOCK_FLAG is disabled when 12.1 starts to go live\n             if(masternodeSync.IsSynced() && !sporkManager.IsSporkActive(SPORK_13_OLD_SUPERBLOCK_FLAG)) {\n                 // no budget blocks should be accepted here, if SPORK_13_OLD_SUPERBLOCK_FLAG is disabled\n-                LogPrint(\"gobject\", \"IsBlockValueValid -- Client synced but budget spork is disabled, checking block value against normal block reward\\n\");\n-                if(!isNormalBlockValueMet) {\n-                    strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, budgets are disabled\",\n+                LogPrint(\"gobject\", \"IsBlockValueValid -- Client synced but budget spork is disabled, checking block value against block reward\\n\");\n+                if(!isBlockRewardValueMet) {\n+                    strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, budgets are disabled\",\n                                             nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n                 }\n-                return isNormalBlockValueMet;\n+                return isBlockRewardValueMet;\n             }\n             LogPrint(\"gobject\", \"IsBlockValueValid -- WARNING: Skipping budget block value checks, accepting block\\n\");\n             // TODO: reprocess blocks to make sure they are legit?\n             return true;\n         }\n-        // LogPrint(\"gobject\", \"IsBlockValueValid -- Block is not in budget cycle window, checking block value against normal block reward\\n\");\n-        if(!isNormalBlockValueMet) {\n-            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, block is not in budget cycle window\",\n+        // LogPrint(\"gobject\", \"IsBlockValueValid -- Block is not in budget cycle window, checking block value against block reward\\n\");\n+        if(!isBlockRewardValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, block is not in budget cycle window\",\n                                     nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n         }\n-        return isNormalBlockValueMet;\n+        return isBlockRewardValueMet;\n     }\n \n     // superblocks started\n \n-    CAmount nSuperblockPaymentsLimit = CSuperblock::GetPaymentsLimit(nBlockHeight);\n-    bool isSuperblockMaxValueMet = (block.vtx[0].GetValueOut() <= blockReward + nSuperblockPaymentsLimit);\n+    CAmount nSuperblockMaxValue =  blockReward + CSuperblock::GetPaymentsLimit(nBlockHeight);\n+    bool isSuperblockMaxValueMet = (block.vtx[0].GetValueOut() <= nSuperblockMaxValue);\n \n-    LogPrint(\"gobject\", \"block.vtx[0].GetValueOut() %lld <= nSuperblockPaymentsLimit %lld\\n\", block.vtx[0].GetValueOut(), nSuperblockPaymentsLimit);\n+    LogPrint(\"gobject\", \"block.vtx[0].GetValueOut() %lld <= nSuperblockMaxValue %lld\\n\", block.vtx[0].GetValueOut(), nSuperblockMaxValue);\n \n     if(!masternodeSync.IsSynced()) {\n         // not enough data but at least it must NOT exceed superblock max value\n         if(CSuperblock::IsValidBlockHeight(nBlockHeight)) {\n             if(fDebug) LogPrintf(\"IsBlockPayeeValid -- WARNING: Client not synced, checking superblock max bounds only\\n\");\n             if(!isSuperblockMaxValueMet) {\n-                strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded superblock payment limit\",\n-                                        nBlockHeight, block.vtx[0].GetValueOut(), nSuperblockPaymentsLimit);\n+                strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded superblock max value\",\n+                                        nBlockHeight, block.vtx[0].GetValueOut(), nSuperblockMaxValue);\n             }\n             return isSuperblockMaxValueMet;\n         }\n-        if(!isNormalBlockValueMet) {\n-            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, only normal blocks are allowed at this height\",\n+        if(!isBlockRewardValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, only regular blocks are allowed at this height\",\n                                     nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n         }\n         // it MUST be a regular block otherwise\n-        return isNormalBlockValueMet;\n+        return isBlockRewardValueMet;\n     }\n \n     // we are synced, let's try to check as much data as we can\n@@ -113,21 +113,21 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, CAmount blockRewar\n             return false;\n         }\n         LogPrint(\"gobject\", \"IsBlockValueValid -- No triggered superblock detected at height %d\\n\", nBlockHeight);\n-        if(!isNormalBlockValueMet) {\n-            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, no triggered superblock detected\",\n+        if(!isBlockRewardValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, no triggered superblock detected\",\n                                     nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n         }\n     } else {\n         // should NOT allow superblocks at all, when superblocks are disabled\n         LogPrint(\"gobject\", \"IsBlockValueValid -- Superblocks are disabled, no superblocks allowed\\n\");\n-        if(!isNormalBlockValueMet) {\n-            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded normal block payment limit, superblocks are disabled\",\n+        if(!isBlockRewardValueMet) {\n+            strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, superblocks are disabled\",\n                                     nBlockHeight, block.vtx[0].GetValueOut(), blockReward);\n         }\n     }\n \n     // it MUST be a regular block\n-    return isNormalBlockValueMet;\n+    return isBlockRewardValueMet;\n }\n \n bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, CAmount blockReward)"
      }
    ]
  },
  {
    "sha": "a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTFiZDJjNWJhZDNkMGFlODRjOGMyMzRlNmU2MzI4NzIwYTNkZDhi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-08T20:03:57Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-08T20:03:57Z"
      },
      "message": "small ix fixes: (#1193)\n\n- make script verification a part of IsInstantSendTxValid()\r\n- relax nLockTime for IS txes since we don't have compatibility with 12.0 IS txes anyway now (fee is lower in 12.1)",
      "tree": {
        "sha": "d266eea1e582ddefe5b3efd8843d67a3ad0cb923",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d266eea1e582ddefe5b3efd8843d67a3ad0cb923"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf57c5ca93b66831e33e38e68a946f7ab833aeab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf57c5ca93b66831e33e38e68a946f7ab833aeab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf57c5ca93b66831e33e38e68a946f7ab833aeab"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 7,
      "deletions": 11
    },
    "files": [
      {
        "sha": "802c87be05fde559b659d67c6a32170afa080d10",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
        "patch": "@@ -85,6 +85,12 @@ bool IsInstantSendTxValid(const CTransaction& txCandidate)\n     bool fMissingInputs = false;\n \n     BOOST_FOREACH(const CTxOut& txout, txCandidate.vout) {\n+        // InstandSend supports normal scripts and unspendable (i.e. data) scripts.\n+        // TODO: Look into other script types that are normal and can be included\n+        if(!txout.scriptPubKey.IsNormalPaymentScript() && !txout.scriptPubKey.IsUnspendable()) {\n+            LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Invalid Script %s\", txCandidate.ToString());\n+            return false;\n+        }\n         nValueOut += txout.nValue;\n     }\n \n@@ -126,15 +132,6 @@ bool ProcessTxLockRequest(CNode* pfrom, const CTransaction &tx)\n {\n     if(!IsInstantSendTxValid(tx)) return false;\n \n-    BOOST_FOREACH(const CTxOut o, tx.vout) {\n-        // InstandSend supports normal scripts and unspendable scripts (used in PrivateSend collateral and Governance collateral).\n-        // TODO: Look into other script types that are normal and can be included\n-        if(!o.scriptPubKey.IsNormalPaymentScript() && !o.scriptPubKey.IsUnspendable()) {\n-            LogPrintf(\"TXLOCKREQUEST -- Invalid Script %s\", tx.ToString());\n-            return false;\n-        }\n-    }\n-\n     int nBlockHeight = CreateTxLockCandidate(tx);\n     if(!nBlockHeight) {\n         // smth is not right"
      },
      {
        "sha": "8a1ff0a53ced46c727c835e5c098ba43f7373ea9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
        "patch": "@@ -2931,8 +2931,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n     // now we ensure code won't be written that makes assumptions about\n     // nLockTime that preclude a fix later.\n \n-    // FIXME: \"compatibility mode\" for 12.0 IX, make it \"txNew.nLockTime = chainActive.Height();\" again in 12.2\n-    txNew.nLockTime = fUseInstantSend ? 0 : chainActive.Height();\n+    txNew.nLockTime = chainActive.Height();\n \n     // Secondly occasionally randomly pick a nLockTime even further back, so\n     // that transactions that are delayed after signing for whatever reason,"
      }
    ]
  },
  {
    "sha": "df5abf14681c97439aa043a4e89b2467b34fdcfc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjVhYmYxNDY4MWM5NzQzOWFhMDQzYTRlODliMjQ2N2IzNGZkY2Zj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-11T06:17:38Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-11T06:17:38Z"
      },
      "message": "Convert masternode rate checks to use object timestamp (#1198)\n\n* Change rate check logic to avoid DoS attacks\r\n\r\n* Convert rate check to use object timestamp instead of arrival time\r\n\r\n* Update cached variables before checking for superblocks\r\n\r\n* Ensure that last times are monotonically non-decreasing\r\n\r\n* Bump governance manager serialization format\r\n\r\n* Improved rate check error reporting",
      "tree": {
        "sha": "274e39e6f012059c01fcaa9b006ac0ff3516e52e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/274e39e6f012059c01fcaa9b006ac0ff3516e52e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df5abf14681c97439aa043a4e89b2467b34fdcfc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5abf14681c97439aa043a4e89b2467b34fdcfc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df5abf14681c97439aa043a4e89b2467b34fdcfc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5abf14681c97439aa043a4e89b2467b34fdcfc/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a11bd2c5bad3d0ae84c8c234e6e6328720a3dd8b"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 83,
      "deletions": 29
    },
    "files": [
      {
        "sha": "ab421c6f198ba58a5b052dea4db07a28d273157d",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=df5abf14681c97439aa043a4e89b2467b34fdcfc",
        "patch": "@@ -336,6 +336,8 @@ bool CSuperblockManager::IsSuperblockTriggered(int nBlockHeight)\n \n         // MAKE SURE THIS TRIGGER IS ACTIVE VIA FUNDING CACHE FLAG\n \n+        pObj->UpdateSentinelVariables();\n+\n         if(pObj->IsSetCachedFunding()) {\n             LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- fCacheFunding = true, returning true\\n\");\n             DBG( cout << \"IsSuperblockTriggered returning true\" << endl; );"
      },
      {
        "sha": "ef2b9b644f5de7a78d4e2d41133b616844bc62db",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=df5abf14681c97439aa043a4e89b2467b34fdcfc",
        "patch": "@@ -277,7 +277,7 @@ int CGovernanceObject::GetObjectSubtype()\n     return -1;\n }\n \n-uint256 CGovernanceObject::GetHash()\n+uint256 CGovernanceObject::GetHash() const\n {\n     // CREATE HASH OF ALL IMPORTANT PIECES OF DATA\n \n@@ -649,7 +649,7 @@ void CGovernanceObject::Relay()\n     RelayInv(inv, PROTOCOL_VERSION);\n }\n \n-void CGovernanceObject::UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex)\n+void CGovernanceObject::UpdateSentinelVariables()\n {\n     // CALCULATE MINIMUM SUPPORT LEVELS REQUIRED\n "
      },
      {
        "sha": "5b5977fcdd71bc983943ea7ed3dc050674d19c9e",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=df5abf14681c97439aa043a4e89b2467b34fdcfc",
        "patch": "@@ -273,7 +273,7 @@ class CGovernanceObject\n \n     void UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex);\n \n-    void UpdateSentinelVariables(const CBlockIndex *pCurrentBlockIndex);\n+    void UpdateSentinelVariables();\n \n     int GetObjectSubtype();\n \n@@ -283,7 +283,7 @@ class CGovernanceObject\n \n     void Relay();\n \n-    uint256 GetHash();\n+    uint256 GetHash() const;\n \n     // GET VOTE COUNT FOR SIGNAL\n "
      },
      {
        "sha": "61f22e61d705f1dfaad19696a90fb3f8a717b4d0",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 18,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=df5abf14681c97439aa043a4e89b2467b34fdcfc",
        "patch": "@@ -28,7 +28,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-3\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-4\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),\n@@ -171,7 +171,8 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             return;\n         }\n \n-        if(!MasternodeRateCheck(govobj, true)) {\n+        bool fRateCheckBypassed = false;\n+        if(!MasternodeRateCheck(govobj, true, false, fRateCheckBypassed)) {\n             LogPrintf(\"MNGOVERNANCEOBJECT -- masternode rate check failed - %s - (current block height %d) \\n\", strHash, nCachedBlockHeight);\n             return;\n         }\n@@ -193,9 +194,16 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             return;\n         }\n \n+        if(fRateCheckBypassed) {\n+            if(!MasternodeRateCheck(govobj, true, true, fRateCheckBypassed)) {\n+                LogPrintf(\"MNGOVERNANCEOBJECT -- masternode rate check failed (after signature verification) - %s - (current block height %d) \\n\", strHash, nCachedBlockHeight);\n+                return;\n+            }\n+        }\n+\n         // UPDATE CACHED VARIABLES FOR THIS OBJECT AND ADD IT TO OUR MANANGED DATA\n \n-        govobj.UpdateSentinelVariables(pCurrentBlockIndex); //this sets local vars in object\n+        govobj.UpdateSentinelVariables(); //this sets local vars in object\n \n         if(AddGovernanceObject(govobj))\n         {\n@@ -398,7 +406,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n             pObj->UpdateLocalValidity(pCurrentBlockIndex);\n \n             // UPDATE SENTINEL SIGNALING VARIABLES\n-            pObj->UpdateSentinelVariables(pCurrentBlockIndex);\n+            pObj->UpdateSentinelVariables();\n         }\n \n         // IF DELETE=TRUE, THEN CLEAN THE MESS UP!\n@@ -689,9 +697,17 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n }\n \n bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bool fUpdateLast)\n+{\n+    bool fRateCheckBypassed = false;\n+    return MasternodeRateCheck(govobj, fUpdateLast, true, fRateCheckBypassed);\n+}\n+\n+bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bool fUpdateLast, bool fForce, bool& fRateCheckBypassed)\n {\n     LOCK(cs);\n \n+    fRateCheckBypassed = false;\n+\n     if(!masternodeSync.IsSynced()) {\n         return true;\n     }\n@@ -705,19 +721,23 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         return true;\n     }\n \n+    int64_t nTimestamp = govobj.GetCreationTime();\n+    int64_t nNow = GetTime();\n+    int64_t nSuperblockCycleSeconds = Params().GetConsensus().nSuperblockCycle * Params().GetConsensus().nPowTargetSpacing;\n+\n     const CTxIn& vin = govobj.GetMasternodeVin();\n \n     txout_m_it it  = mapLastMasternodeObject.find(vin.prevout);\n \n     if(it == mapLastMasternodeObject.end()) {\n         if(fUpdateLast) {\n-            it = mapLastMasternodeObject.insert(txout_m_t::value_type(vin.prevout, last_object_rec(0, 0))).first;\n+            it = mapLastMasternodeObject.insert(txout_m_t::value_type(vin.prevout, last_object_rec(0, 0, true))).first;\n             switch(nObjectType) {\n             case GOVERNANCE_OBJECT_TRIGGER:\n-                it->second.nLastTriggerBlockHeight = nCachedBlockHeight;\n+                it->second.nLastTriggerTime = std::max(it->second.nLastTriggerTime, nTimestamp);\n                 break;\n             case GOVERNANCE_OBJECT_WATCHDOG:\n-                it->second.nLastWatchdogBlockHeight = nCachedBlockHeight;\n+                it->second.nLastWatchdogTime = std::max(it->second.nLastWatchdogTime, nTimestamp);\n                 break;\n             default:\n                 break;\n@@ -726,34 +746,61 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         return true;\n     }\n \n-    int nMinDiff = 0;\n-    int nObjectBlock = 0;\n+    if(it->second.fStatusOK && !fForce) {\n+        fRateCheckBypassed = true;\n+        return true;\n+    }\n+\n+    std::string strHash = govobj.GetHash().ToString();\n+\n+    if(nTimestamp < nNow - 2 * nSuperblockCycleSeconds) {\n+        LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too old timestamp, masternode vin = %s, timestamp = %d, current time = %d\\n\",\n+                 strHash, vin.prevout.ToStringShort(), nTimestamp, nNow);\n+        return false;\n+    }\n+\n+    if(nTimestamp > nNow - 2 * nSuperblockCycleSeconds) {\n+        LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too new (future) timestamp, masternode vin = %s, timestamp = %d, current time = %d\\n\",\n+                 strHash, vin.prevout.ToStringShort(), nTimestamp, nNow);\n+        return false;\n+    }\n+\n+    int64_t nMinDiff = 0;\n+    int64_t nLastObjectTime = 0;\n     switch(nObjectType) {\n     case GOVERNANCE_OBJECT_TRIGGER:\n         // Allow 1 trigger per mn per cycle, with a small fudge factor\n-        nMinDiff = Params().GetConsensus().nSuperblockCycle - Params().GetConsensus().nSuperblockCycle / 10;\n-        nObjectBlock = it->second.nLastTriggerBlockHeight;\n+        nMinDiff = int64_t(0.9 * nSuperblockCycleSeconds);\n+        nLastObjectTime = it->second.nLastTriggerTime;\n         if(fUpdateLast) {\n-            it->second.nLastTriggerBlockHeight = nCachedBlockHeight;\n+            it->second.nLastTriggerTime = std::max(it->second.nLastTriggerTime, nTimestamp);\n         }\n         break;\n     case GOVERNANCE_OBJECT_WATCHDOG:\n-        nMinDiff = 1;\n-        nObjectBlock = it->second.nLastWatchdogBlockHeight;\n+        nMinDiff = Params().GetConsensus().nPowTargetSpacing;\n+        nLastObjectTime = it->second.nLastWatchdogTime;\n         if(fUpdateLast) {\n-            it->second.nLastWatchdogBlockHeight = nCachedBlockHeight;\n+            it->second.nLastWatchdogTime = std::max(it->second.nLastWatchdogTime, nTimestamp);\n         }\n         break;\n     default:\n         break;\n     }\n \n-    if((nCachedBlockHeight - nObjectBlock) > nMinDiff) {\n+    if((nTimestamp - nLastObjectTime) > nMinDiff) {\n+        if(fUpdateLast) {\n+            it->second.fStatusOK = true;\n+        }\n         return true;\n     }\n+    else {\n+        if(fUpdateLast) {\n+            it->second.fStatusOK = false;\n+        }\n+    }\n \n-    LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: vin = %s, current height = %d, last MN height = %d, minimum difference = %d\\n\",\n-              vin.prevout.ToStringShort(), nCachedBlockHeight, nObjectBlock, nMinDiff);\n+    LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: object hash = %s, masternode vin = %s, object timestamp = %d, last timestamp = %d, minimum difference = %d\\n\",\n+              strHash, vin.prevout.ToStringShort(), nTimestamp, nLastObjectTime, nMinDiff);\n     return false;\n }\n "
      },
      {
        "sha": "18333892ad3d87994ac40806666c2087e21c1c50",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5abf14681c97439aa043a4e89b2467b34fdcfc/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=df5abf14681c97439aa043a4e89b2467b34fdcfc",
        "patch": "@@ -49,22 +49,25 @@ class CGovernanceManager\n \n public: // Types\n     struct last_object_rec {\n-        last_object_rec(int nLastTriggerBlockHeightIn = 0, int nLastWatchdogBlockHeightIn = 0)\n-            : nLastTriggerBlockHeight(nLastTriggerBlockHeightIn),\n-              nLastWatchdogBlockHeight(nLastWatchdogBlockHeightIn)\n+        last_object_rec(int64_t nLastTriggerTimeIn = 0, int64_t nLastWatchdogTimeIn = 0, bool fStatusOKIn = true)\n+            : nLastTriggerTime(nLastTriggerTimeIn),\n+              nLastWatchdogTime(nLastWatchdogTimeIn),\n+              fStatusOK(fStatusOKIn)\n             {}\n \n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n         {\n-            READWRITE(nLastTriggerBlockHeight);\n-            READWRITE(nLastWatchdogBlockHeight);\n+            READWRITE(nLastTriggerTime);\n+            READWRITE(nLastWatchdogTime);\n+            READWRITE(fStatusOK);\n         }\n \n-        int nLastTriggerBlockHeight;\n-        int nLastWatchdogBlockHeight;\n+        int64_t nLastTriggerTime;\n+        int64_t nLastWatchdogTime;\n+        bool fStatusOK;\n     };\n \n \n@@ -257,6 +260,8 @@ class CGovernanceManager\n \n     bool MasternodeRateCheck(const CGovernanceObject& govobj, bool fUpdateLast = false);\n \n+    bool MasternodeRateCheck(const CGovernanceObject& govobj, bool fUpdateLast, bool fForce, bool& fRateCheckBypassed);\n+\n     bool ProcessVoteAndRelay(const CGovernanceVote& vote, CGovernanceException& exception) {\n         bool fOK = ProcessVote(NULL, vote, exception);\n         if(fOK) {"
      }
    ]
  },
  {
    "sha": "e9125835b71c2724b7f0dbf3034197e94f1a18ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTEyNTgzNWI3MWMyNzI0YjdmMGRiZjMwMzQxOTdlOTRmMWExOGZm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-11T06:18:52Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-11T06:18:52Z"
      },
      "message": "Don't increase PoSe ban score when can't connect (#1197)",
      "tree": {
        "sha": "a4eb5bea21830c24599d2cf836b03a9e3df91f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4eb5bea21830c24599d2cf836b03a9e3df91f1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9125835b71c2724b7f0dbf3034197e94f1a18ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9125835b71c2724b7f0dbf3034197e94f1a18ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9125835b71c2724b7f0dbf3034197e94f1a18ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9125835b71c2724b7f0dbf3034197e94f1a18ff/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df5abf14681c97439aa043a4e89b2467b34fdcfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5abf14681c97439aa043a4e89b2467b34fdcfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df5abf14681c97439aa043a4e89b2467b34fdcfc"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 11,
      "deletions": 21
    },
    "files": [
      {
        "sha": "d26c73646bbcdb905e11a235f95f533cae819c3d",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9125835b71c2724b7f0dbf3034197e94f1a18ff/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9125835b71c2724b7f0dbf3034197e94f1a18ff/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=e9125835b71c2724b7f0dbf3034197e94f1a18ff",
        "patch": "@@ -1558,7 +1558,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             } else {\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n                 strAutoDenomResult = _(\"Error connecting to Masternode.\");\n-                pmn->IncreasePoSeBanScore();\n                 continue;\n             }\n         }\n@@ -1611,7 +1610,6 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n         } else {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n             nTries++;\n-            pmn->IncreasePoSeBanScore();\n             continue;\n         }\n     }"
      },
      {
        "sha": "b7480ef4251f3fe098947c82e01dcbeed1a0d23e",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9125835b71c2724b7f0dbf3034197e94f1a18ff/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9125835b71c2724b7f0dbf3034197e94f1a18ff/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=e9125835b71c2724b7f0dbf3034197e94f1a18ff",
        "patch": "@@ -969,27 +969,19 @@ bool CMasternodeMan::SendVerifyRequest(const CAddress& addr, const std::vector<C\n     }\n \n     CNode* pnode = ConnectNode(addr, NULL, true);\n-    if(pnode != NULL) {\n-        netfulfilledman.AddFulfilledRequest(addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-request\");\n-        // use random nonce, store it and require node to reply with correct one later\n-        CMasternodeVerification mnv(addr, GetRandInt(999999), pCurrentBlockIndex->nHeight - 1);\n-        mWeAskedForVerification[addr] = mnv;\n-        LogPrintf(\"CMasternodeMan::SendVerifyRequest -- verifying using nonce %d addr=%s\\n\", mnv.nonce, addr.ToString());\n-        pnode->PushMessage(NetMsgType::MNVERIFY, mnv);\n-        return true;\n-    } else {\n-        // can't connect, add some PoSe \"ban score\" to all masternodes with given addr\n-        bool fFound = false;\n-        BOOST_FOREACH(CMasternode* pmn, vSortedByAddr) {\n-            if(pmn->addr != addr) {\n-                if(fFound) break;\n-                continue;\n-            }\n-            fFound = true;\n-            pmn->IncreasePoSeBanScore();\n-        }\n+    if(pnode == NULL) {\n+        LogPrintf(\"CMasternodeMan::SendVerifyRequest -- can't connect to node to verify it, addr=%s\\n\", addr.ToString());\n         return false;\n     }\n+\n+    netfulfilledman.AddFulfilledRequest(addr, strprintf(\"%s\", NetMsgType::MNVERIFY)+\"-request\");\n+    // use random nonce, store it and require node to reply with correct one later\n+    CMasternodeVerification mnv(addr, GetRandInt(999999), pCurrentBlockIndex->nHeight - 1);\n+    mWeAskedForVerification[addr] = mnv;\n+    LogPrintf(\"CMasternodeMan::SendVerifyRequest -- verifying node using nonce %d addr=%s\\n\", mnv.nonce, addr.ToString());\n+    pnode->PushMessage(NetMsgType::MNVERIFY, mnv);\n+\n+    return true;\n }\n \n void CMasternodeMan::SendVerifyReply(CNode* pnode, CMasternodeVerification& mnv)"
      }
    ]
  },
  {
    "sha": "8f20c3ba468aa213901dbae0608ed5bca7c0db55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjIwYzNiYTQ2OGFhMjEzOTAxZGJhZTA2MDhlZDViY2E3YzBkYjU1",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-11T11:08:10Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-11T11:08:10Z"
      },
      "message": "fix future time bug (#1200)",
      "tree": {
        "sha": "5f12b4abec4aabe11f9d8d4dd8634f78c58bc469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f12b4abec4aabe11f9d8d4dd8634f78c58bc469"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f20c3ba468aa213901dbae0608ed5bca7c0db55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f20c3ba468aa213901dbae0608ed5bca7c0db55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f20c3ba468aa213901dbae0608ed5bca7c0db55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f20c3ba468aa213901dbae0608ed5bca7c0db55/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9125835b71c2724b7f0dbf3034197e94f1a18ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9125835b71c2724b7f0dbf3034197e94f1a18ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9125835b71c2724b7f0dbf3034197e94f1a18ff"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0192b5f908256dfaaab078198bcb9512da8ef391",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f20c3ba468aa213901dbae0608ed5bca7c0db55/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f20c3ba468aa213901dbae0608ed5bca7c0db55/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=8f20c3ba468aa213901dbae0608ed5bca7c0db55",
        "patch": "@@ -759,7 +759,7 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         return false;\n     }\n \n-    if(nTimestamp > nNow - 2 * nSuperblockCycleSeconds) {\n+    if(nTimestamp > nNow + 2 * nSuperblockCycleSeconds) {\n         LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too new (future) timestamp, masternode vin = %s, timestamp = %d, current time = %d\\n\",\n                  strHash, vin.prevout.ToStringShort(), nTimestamp, nNow);\n         return false;"
      }
    ]
  },
  {
    "sha": "30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGRhM2Y1NmE3MTUzZGRkN2FiOGY0NjNkYzZkMmQ4OGIyMWJlZDdm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-12T01:44:46Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-12T01:44:46Z"
      },
      "message": "gobject rpc changes: (#1201)\n\n- added description for 'deserialize'\r\n- added 'type' filter to 'list'\r\n- added 'count' command (changed CGovernanceManager::ToString to output a bit more detailed info)",
      "tree": {
        "sha": "75b39fd4c8ee280fcdde35c5540755241c46ca82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75b39fd4c8ee280fcdde35c5540755241c46ca82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f20c3ba468aa213901dbae0608ed5bca7c0db55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f20c3ba468aa213901dbae0608ed5bca7c0db55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f20c3ba468aa213901dbae0608ed5bca7c0db55"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 53,
      "deletions": 12
    },
    "files": [
      {
        "sha": "6ba4684e37b870fa4b1ffb62527fab9f9368904a",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 5,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
        "patch": "@@ -989,13 +989,37 @@ void CGovernanceManager::InitOnLoad()\n \n std::string CGovernanceManager::ToString() const\n {\n-    std::ostringstream info;\n+    LOCK(cs);\n+\n+    int nProposalCount = 0;\n+    int nTriggerCount = 0;\n+    int nWatchdogCount = 0;\n+    int nOtherCount = 0;\n \n-    info << \"Governance Objects: \" << (int)mapObjects.size() <<\n-            \" (Seen: \" << (int)mapSeenGovernanceObjects.size() <<\n-            \"), Vote Count: \" << (int)mapVoteToObject.GetSize();\n+    object_m_cit it = mapObjects.begin();\n+\n+    while(it != mapObjects.end()) {\n+        switch(it->second.GetObjectType()) {\n+            case GOVERNANCE_OBJECT_PROPOSAL:\n+                nProposalCount++;\n+                break;\n+            case GOVERNANCE_OBJECT_TRIGGER:\n+                nTriggerCount++;\n+                break;\n+            case GOVERNANCE_OBJECT_WATCHDOG:\n+                nWatchdogCount++;\n+                break;\n+            default:\n+                nOtherCount++;\n+                break;\n+        }\n+        ++it;\n+    }\n \n-    return info.str();\n+    return strprintf(\"Governance Objects: %d (Proposals: %d, Triggers: %d, Watchdogs: %d, Other: %d; Seen: %d), Votes: %d\",\n+                    (int)mapObjects.size(),\n+                    nProposalCount, nTriggerCount, nWatchdogCount, nOtherCount, (int)mapSeenGovernanceObjects.size(),\n+                    (int)mapVoteToObject.GetSize());\n }\n \n void CGovernanceManager::UpdatedBlockTip(const CBlockIndex *pindex)"
      },
      {
        "sha": "53efcb4cfb1c14fe878704a7fbe4c3b221a97ade",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 7,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
        "patch": "@@ -35,25 +35,29 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         strCommand = params[0].get_str();\n \n     if (fHelp  ||\n-        (strCommand != \"vote-many\" && strCommand != \"vote-conf\" && strCommand != \"vote-alias\" && strCommand != \"prepare\" && strCommand != \"submit\" &&\n-         strCommand != \"vote\" && strCommand != \"get\" && strCommand != \"getvotes\" && strCommand != \"getcurrentvotes\" && strCommand != \"list\" && strCommand != \"diff\" && strCommand != \"deserialize\"))\n+        (strCommand != \"vote-many\" && strCommand != \"vote-conf\" && strCommand != \"vote-alias\" && strCommand != \"prepare\" && strCommand != \"submit\" && strCommand != \"count\" &&\n+         strCommand != \"deserialize\" && strCommand != \"get\" && strCommand != \"getvotes\" && strCommand != \"getcurrentvotes\" && strCommand != \"list\" && strCommand != \"diff\"))\n         throw std::runtime_error(\n                 \"gobject \\\"command\\\"...\\n\"\n                 \"Manage governance objects\\n\"\n                 \"\\nAvailable commands:\\n\"\n                 \"  prepare            - Prepare governance object by signing and creating tx\\n\"\n                 \"  submit             - Submit governance object to network\\n\"\n+                \"  deserialize        - Deserialize governance object from hex string to JSON\\n\"\n+                \"  count              - Count governance objects and votes\\n\"\n                 \"  get                - Get governance object by hash\\n\"\n                 \"  getvotes           - Get all votes for a governance object hash (including old votes)\\n\"\n                 \"  getcurrentvotes    - Get only current (tallying) votes for a governance object hash (does not include old votes)\\n\"\n-                \"  list               - List all governance objects\\n\"\n+                \"  list               - List governance objects (can be filtered by validity and/or object type)\\n\"\n                 \"  diff               - List differences since last diff\\n\"\n                 \"  vote-alias         - Vote on a governance object by masternode alias (using masternode.conf setup)\\n\"\n                 \"  vote-conf          - Vote on a governance object by masternode configured in dash.conf\\n\"\n                 \"  vote-many          - Vote on a governance object by all masternodes (using masternode.conf setup)\\n\"\n                 );\n \n \n+    if(strCommand == \"count\")\n+        return governance.ToString();\n     /*\n         ------ Example Governance Item ------\n \n@@ -63,6 +67,10 @@ UniValue gobject(const UniValue& params, bool fHelp)\n     // DEBUG : TEST DESERIALIZATION OF GOVERNANCE META DATA\n     if(strCommand == \"deserialize\")\n     {\n+        if (params.size() != 2) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Correct usage is 'gobject deserialize <data-hex>'\");\n+        }\n+\n         std::string strHex = params[1].get_str();\n \n         std::vector<unsigned char> v = ParseHex(strHex);\n@@ -539,14 +547,20 @@ UniValue gobject(const UniValue& params, bool fHelp)\n     // USERS CAN QUERY THE SYSTEM FOR A LIST OF VARIOUS GOVERNANCE ITEMS\n     if(strCommand == \"list\" || strCommand == \"diff\")\n     {\n-        if (params.size() > 2)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Correct usage is 'gobject [list|diff] [valid]'\");\n+        if (params.size() > 3)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Correct usage is 'gobject [list|diff] [valid] [type]'\");\n \n         // GET MAIN PARAMETER FOR THIS MODE, VALID OR ALL?\n \n         std::string strShow = \"valid\";\n         if (params.size() == 2) strShow = params[1].get_str();\n-        if (strShow != \"valid\" && strShow != \"all\") return \"Invalid mode, should be valid or all\";\n+        if (strShow != \"valid\" && strShow != \"all\")\n+            return \"Invalid mode, should be 'valid' or 'all'\";\n+\n+        std::string strType = \"all\";\n+        if (params.size() == 3) strType = params[2].get_str();\n+        if (strType != \"proposals\" && strType != \"triggers\" && strType != \"watchdogs\" && strType != \"all\")\n+            return \"Invalid type, should be 'proposals', 'triggers', 'watchdogs' or 'all'\";\n \n         // GET STARTING TIME TO QUERY SYSTEM WITH\n \n@@ -574,9 +588,12 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         BOOST_FOREACH(CGovernanceObject* pGovObj, objs)\n         {\n-            // IF WE HAVE A SPECIFIC NODE REQUESTED TO VOTE, DO THAT\n             if(strShow == \"valid\" && !pGovObj->IsSetCachedValid()) continue;\n \n+            if(strType == \"proposals\" && pGovObj->GetObjectType() != GOVERNANCE_OBJECT_PROPOSAL) continue;\n+            if(strType == \"triggers\" && pGovObj->GetObjectType() != GOVERNANCE_OBJECT_TRIGGER) continue;\n+            if(strType == \"watchdogs\" && pGovObj->GetObjectType() != GOVERNANCE_OBJECT_WATCHDOG) continue;\n+\n             UniValue bObj(UniValue::VOBJ);\n             bObj.push_back(Pair(\"DataHex\",  pGovObj->GetDataAsHex()));\n             bObj.push_back(Pair(\"DataString\",  pGovObj->GetDataAsString()));"
      }
    ]
  },
  {
    "sha": "072b0fd708dae5a8578124172da93e2d421a2dff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzJiMGZkNzA4ZGFlNWE4NTc4MTI0MTcyZGE5M2UyZDQyMWEyZGZm",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-14T13:33:46Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-14T13:33:46Z"
      },
      "message": "fix annoying compiler warnings (#1204)",
      "tree": {
        "sha": "024962d0523f522cfa2f0c62d454e294966722b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/024962d0523f522cfa2f0c62d454e294966722b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/072b0fd708dae5a8578124172da93e2d421a2dff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072b0fd708dae5a8578124172da93e2d421a2dff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/072b0fd708dae5a8578124172da93e2d421a2dff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072b0fd708dae5a8578124172da93e2d421a2dff/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30da3f56a7153ddd7ab8f463dc6d2d88b21bed7f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5548d0b70cf35c16754d8c5ca70fd77d3ce15d07",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072b0fd708dae5a8578124172da93e2d421a2dff/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072b0fd708dae5a8578124172da93e2d421a2dff/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=072b0fd708dae5a8578124172da93e2d421a2dff",
        "patch": "@@ -240,7 +240,7 @@ class CTestNetParams : public CChainParams {\n         nMaxTipAge = 0x7fffffff; // allow mining on top of old blocks for testnet\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1390666206, 3861367235, 0x1e0ffff0, 1, 50 * COIN);\n+        genesis = CreateGenesisBlock(1390666206UL, 3861367235UL, 0x1e0ffff0, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x00000bafbc94add76cb75e2ec92894837288a481e5c005f6563d91623bf8bc2c\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0xe0028eb9648db56b1ac77cf090b99048a8007e2bb64b68f092c03c7f56a662c7\"));"
      },
      {
        "sha": "1fe936804a0df7ffbb58f1773d655db6102b9b5c",
        "filename": "src/spork.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072b0fd708dae5a8578124172da93e2d421a2dff/src/spork.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072b0fd708dae5a8578124172da93e2d421a2dff/src/spork.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.cpp?ref=072b0fd708dae5a8578124172da93e2d421a2dff",
        "patch": "@@ -115,7 +115,7 @@ bool CSporkManager::IsSporkActive(int nSporkID)\n             case SPORK_14_REQUIRE_SENTINEL_FLAG:            r = SPORK_14_REQUIRE_SENTINEL_FLAG_DEFAULT; break;\n             default:\n                 LogPrint(\"spork\", \"CSporkManager::IsSporkActive -- Unknown Spork ID %d\\n\", nSporkID);\n-                r = 4070908800; // 2099-1-1 i.e. off by default\n+                r = 4070908800ULL; // 2099-1-1 i.e. off by default\n                 break;\n         }\n     }"
      },
      {
        "sha": "d363817a538e911510f368712a15e7e32d1da3f7",
        "filename": "src/spork.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072b0fd708dae5a8578124172da93e2d421a2dff/src/spork.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072b0fd708dae5a8578124172da93e2d421a2dff/src/spork.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.h?ref=072b0fd708dae5a8578124172da93e2d421a2dff",
        "patch": "@@ -32,12 +32,12 @@ static const int SPORK_14_REQUIRE_SENTINEL_FLAG                         = 10013;\n static const int64_t SPORK_2_INSTANTSEND_ENABLED_DEFAULT                = 0;            // ON\n static const int64_t SPORK_3_INSTANTSEND_BLOCK_FILTERING_DEFAULT        = 0;            // ON\n static const int64_t SPORK_5_INSTANTSEND_MAX_VALUE_DEFAULT              = 1000;         // 1000 DASH\n-static const int64_t SPORK_8_MASTERNODE_PAYMENT_ENFORCEMENT_DEFAULT     = 4070908800;   // OFF\n-static const int64_t SPORK_9_SUPERBLOCKS_ENABLED_DEFAULT                = 4070908800;   // OFF\n-static const int64_t SPORK_10_MASTERNODE_PAY_UPDATED_NODES_DEFAULT      = 4070908800;   // OFF\n+static const int64_t SPORK_8_MASTERNODE_PAYMENT_ENFORCEMENT_DEFAULT     = 4070908800ULL;// OFF\n+static const int64_t SPORK_9_SUPERBLOCKS_ENABLED_DEFAULT                = 4070908800ULL;// OFF\n+static const int64_t SPORK_10_MASTERNODE_PAY_UPDATED_NODES_DEFAULT      = 4070908800ULL;// OFF\n static const int64_t SPORK_12_RECONSIDER_BLOCKS_DEFAULT                 = 0;            // 0 BLOCKS\n-static const int64_t SPORK_13_OLD_SUPERBLOCK_FLAG_DEFAULT               = 4070908800;   // OFF\n-static const int64_t SPORK_14_REQUIRE_SENTINEL_FLAG_DEFAULT             = 4070908800;   // OFF\n+static const int64_t SPORK_13_OLD_SUPERBLOCK_FLAG_DEFAULT               = 4070908800ULL;// OFF\n+static const int64_t SPORK_14_REQUIRE_SENTINEL_FLAG_DEFAULT             = 4070908800ULL;// OFF\n \n extern std::map<uint256, CSporkMessage> mapSporks;\n extern CSporkManager sporkManager;"
      },
      {
        "sha": "aca7a02fc1caf58d0d6da83fe5c15260fc9a122d",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072b0fd708dae5a8578124172da93e2d421a2dff/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072b0fd708dae5a8578124172da93e2d421a2dff/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=072b0fd708dae5a8578124172da93e2d421a2dff",
        "patch": "@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(univalue_typecheck)\n \n     UniValue v4;\n     BOOST_CHECK(v4.setNumStr(\"2147483648\"));\n-    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648);\n+    BOOST_CHECK_EQUAL(v4.get_int64(), 2147483648ULL);\n     BOOST_CHECK_THROW(v4.get_int(), runtime_error);\n     BOOST_CHECK(v4.setNumStr(\"1000\"));\n     BOOST_CHECK_EQUAL(v4.get_int(), 1000);"
      }
    ]
  },
  {
    "sha": "711a5fbf2051309b25b1bb40039c0d260df7e088",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTFhNWZiZjIwNTEzMDliMjViMWJiNDAwMzljMGQyNjBkZjdlMDg4",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-14T15:27:46Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-14T15:27:46Z"
      },
      "message": "Deletion time fix (#1205)\n\n* Fix deletion time bug\r\n* Only set deletion time if it has not already been set",
      "tree": {
        "sha": "9f5e3c55181453a80550fd6a72fe23cce65edb9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f5e3c55181453a80550fd6a72fe23cce65edb9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/711a5fbf2051309b25b1bb40039c0d260df7e088",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711a5fbf2051309b25b1bb40039c0d260df7e088",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/711a5fbf2051309b25b1bb40039c0d260df7e088",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711a5fbf2051309b25b1bb40039c0d260df7e088/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "072b0fd708dae5a8578124172da93e2d421a2dff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072b0fd708dae5a8578124172da93e2d421a2dff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/072b0fd708dae5a8578124172da93e2d421a2dff"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4bd3d022fde09c75b35194132d12c9b17f7d72c1",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/711a5fbf2051309b25b1bb40039c0d260df7e088/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/711a5fbf2051309b25b1bb40039c0d260df7e088/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=711a5fbf2051309b25b1bb40039c0d260df7e088",
        "patch": "@@ -668,17 +668,18 @@ void CGovernanceObject::UpdateSentinelVariables()\n \n     fCachedFunding = false;\n     fCachedValid = true; //default to valid\n-    fCachedDelete = false;\n     fCachedEndorsed = false;\n     fDirtyCache = false;\n \n     // SET SENTINEL FLAGS TO TRUE IF MIMIMUM SUPPORT LEVELS ARE REACHED\n     // ARE ANY OF THESE FLAGS CURRENTLY ACTIVATED?\n \n     if(GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING) >= nAbsVoteReq) fCachedFunding = true;\n-    if(GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsDeleteReq) {\n+    if((GetAbsoluteYesCount(VOTE_SIGNAL_DELETE) >= nAbsDeleteReq) && !fCachedDelete) {\n         fCachedDelete = true;\n-        nDeletionTime = GetAdjustedTime();\n+        if(nDeletionTime == 0) {\n+            nDeletionTime = GetAdjustedTime();\n+        }\n     }\n     if(GetAbsoluteYesCount(VOTE_SIGNAL_ENDORSED) >= nAbsVoteReq) fCachedEndorsed = true;\n "
      },
      {
        "sha": "86438108363e9b5d58968cbc855c9664b6918562",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/711a5fbf2051309b25b1bb40039c0d260df7e088/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/711a5fbf2051309b25b1bb40039c0d260df7e088/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=711a5fbf2051309b25b1bb40039c0d260df7e088",
        "patch": "@@ -312,6 +312,8 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n         return false;\n     }\n \n+    LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Adding object: hash = %s, type = %d\\n\", nHash.ToString(), govobj.GetObjectType()); \n+\n     // INSERT INTO OUR GOVERNANCE OBJECT MEMORY\n     mapObjects.insert(std::make_pair(nHash, govobj));\n \n@@ -330,6 +332,7 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n         break;\n     case GOVERNANCE_OBJECT_WATCHDOG:\n         mapWatchdogObjects[nHash] = GetAdjustedTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME;\n+        LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Added watchdog to map: hash = %s\\n\", nHash.ToString()); \n         break;\n     default:\n         break;\n@@ -350,14 +353,20 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n     // Flag expired watchdogs for removal\n     int64_t nNow = GetAdjustedTime();\n+    LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Number watchdogs in map: %d, current time = %d\\n\", mapWatchdogObjects.size(), nNow);\n     if(mapWatchdogObjects.size() > 1) {\n         hash_time_m_it it = mapWatchdogObjects.begin();\n         while(it != mapWatchdogObjects.end()) {\n+            LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Checking watchdog: %s, expiration time = %d\\n\", it->first.ToString(), it->second);\n             if(it->second < nNow) {\n+                LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Attempting to expire watchdog: %s, expiration time = %d\\n\", it->first.ToString(), it->second);\n                 object_m_it it2 = mapObjects.find(it->first);\n                 if(it2 != mapObjects.end()) {\n+                    LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Expiring watchdog: %s, expiration time = %d\\n\", it->first.ToString(), it->second);\n                     it2->second.fExpired = true;\n-                    it2->second.nDeletionTime = nNow;\n+                    if(it2->second.nDeletionTime == 0) {\n+                        it2->second.nDeletionTime = nNow;\n+                    }\n                 }\n                 mapWatchdogObjects.erase(it++);\n             }\n@@ -400,6 +409,8 @@ void CGovernanceManager::UpdateCachesAndClean()\n             continue;\n         }\n \n+        std::string strHash = pObj->GetHash().ToString();\n+\n         // IF CACHE IS NOT DIRTY, WHY DO THIS?\n         if(pObj->IsSetDirtyCache()) {\n             // UPDATE LOCAL VALIDITY AGAINST CRYPTO DATA\n@@ -413,6 +424,9 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n         int64_t nTimeSinceDeletion = GetAdjustedTime() - pObj->GetDeletionTime();\n \n+        LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Checking object for deletion: %s, deletion time = %d, time since deletion = %d, delete flag = %d, expired flag = %d\\n\",\n+                 strHash, pObj->GetDeletionTime(), nTimeSinceDeletion, pObj->IsSetCachedDelete(), pObj->IsSetExpired());\n+\n         if((pObj->IsSetCachedDelete() || pObj->IsSetExpired()) &&\n            (nTimeSinceDeletion >= GOVERNANCE_DELETION_DELAY)) {\n             LogPrintf(\"CGovernanceManager::UpdateCachesAndClean -- erase obj %s\\n\", (*it).first.ToString());"
      }
    ]
  },
  {
    "sha": "8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmM4ZTZjOGMyNzAzYjRjZjdhZjEzZjg1MDIxYmZiOTVjMmQyZmFh",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-14T15:28:55Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-14T15:28:55Z"
      },
      "message": "Implement rate check using buffer (#1202)\n\n* Implemented buffer for masternode rate checks\r\n\r\n* Change upper limit on object timestamp to 1 hour in the future",
      "tree": {
        "sha": "8a55825c1894e3fb456b7a97e6bb6b85d13f27fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a55825c1894e3fb456b7a97e6bb6b85d13f27fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "711a5fbf2051309b25b1bb40039c0d260df7e088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711a5fbf2051309b25b1bb40039c0d260df7e088",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/711a5fbf2051309b25b1bb40039c0d260df7e088"
      }
    ],
    "stats": {
      "total": 241,
      "additions": 217,
      "deletions": 24
    },
    "files": [
      {
        "sha": "d0e4c8139a7d79439c17eea4e2a815305166fe4a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
        "patch": "@@ -66,6 +66,7 @@ BITCOIN_TESTS =\\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n   test/prevector_tests.cpp \\\n+  test/ratecheck_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\"
      },
      {
        "sha": "0d9ba95600c63cbca2a58684b793d13129705b99",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
        "patch": "@@ -28,7 +28,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-4\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-5\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),\n@@ -745,13 +745,13 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n \n     if(it == mapLastMasternodeObject.end()) {\n         if(fUpdateLast) {\n-            it = mapLastMasternodeObject.insert(txout_m_t::value_type(vin.prevout, last_object_rec(0, 0, true))).first;\n+            it = mapLastMasternodeObject.insert(txout_m_t::value_type(vin.prevout, last_object_rec(true))).first;\n             switch(nObjectType) {\n             case GOVERNANCE_OBJECT_TRIGGER:\n-                it->second.nLastTriggerTime = std::max(it->second.nLastTriggerTime, nTimestamp);\n+                it->second.triggerBuffer.AddTimestamp(nTimestamp);\n                 break;\n             case GOVERNANCE_OBJECT_WATCHDOG:\n-                it->second.nLastWatchdogTime = std::max(it->second.nLastWatchdogTime, nTimestamp);\n+                it->second.watchdogBuffer.AddTimestamp(nTimestamp);\n                 break;\n             default:\n                 break;\n@@ -773,35 +773,40 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         return false;\n     }\n \n-    if(nTimestamp > nNow + 2 * nSuperblockCycleSeconds) {\n+    if(nTimestamp > nNow + 60*60) {\n         LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too new (future) timestamp, masternode vin = %s, timestamp = %d, current time = %d\\n\",\n                  strHash, vin.prevout.ToStringShort(), nTimestamp, nNow);\n         return false;\n     }\n-\n-    int64_t nMinDiff = 0;\n-    int64_t nLastObjectTime = 0;\n+    \n+    double dMaxRate = 1.1 / nSuperblockCycleSeconds;\n+    double dRate = 0.0;\n+    CRateCheckBuffer buffer;\n     switch(nObjectType) {\n     case GOVERNANCE_OBJECT_TRIGGER:\n         // Allow 1 trigger per mn per cycle, with a small fudge factor\n-        nMinDiff = int64_t(0.9 * nSuperblockCycleSeconds);\n-        nLastObjectTime = it->second.nLastTriggerTime;\n+        dMaxRate = 1.1 / nSuperblockCycleSeconds;\n+        buffer = it->second.triggerBuffer;\n+        buffer.AddTimestamp(nTimestamp);\n+        dRate = buffer.GetRate();\n         if(fUpdateLast) {\n-            it->second.nLastTriggerTime = std::max(it->second.nLastTriggerTime, nTimestamp);\n+            it->second.triggerBuffer.AddTimestamp(nTimestamp);\n         }\n         break;\n     case GOVERNANCE_OBJECT_WATCHDOG:\n-        nMinDiff = Params().GetConsensus().nPowTargetSpacing;\n-        nLastObjectTime = it->second.nLastWatchdogTime;\n+        dMaxRate = 1.1 / 3600.;\n+        buffer = it->second.watchdogBuffer;\n+        buffer.AddTimestamp(nTimestamp);\n+        dRate = buffer.GetRate();\n         if(fUpdateLast) {\n-            it->second.nLastWatchdogTime = std::max(it->second.nLastWatchdogTime, nTimestamp);\n+            it->second.watchdogBuffer.AddTimestamp(nTimestamp);\n         }\n         break;\n     default:\n         break;\n     }\n \n-    if((nTimestamp - nLastObjectTime) > nMinDiff) {\n+    if(dRate < dMaxRate) {\n         if(fUpdateLast) {\n             it->second.fStatusOK = true;\n         }\n@@ -813,8 +818,8 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         }\n     }\n \n-    LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: object hash = %s, masternode vin = %s, object timestamp = %d, last timestamp = %d, minimum difference = %d\\n\",\n-              strHash, vin.prevout.ToStringShort(), nTimestamp, nLastObjectTime, nMinDiff);\n+    LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: object hash = %s, masternode vin = %s, object timestamp = %d, rate = %f, max rate = %f\\n\",\n+              strHash, vin.prevout.ToStringShort(), nTimestamp, dRate, dMaxRate);\n     return false;\n }\n "
      },
      {
        "sha": "659d30ce84c9ff49ec34424d4c34b66ba47c8954",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 113,
        "deletions": 7,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
        "patch": "@@ -40,6 +40,112 @@ extern CGovernanceManager governance;\n \n typedef std::pair<CGovernanceObject, int64_t> object_time_pair_t;\n \n+static const int RATE_BUFFER_SIZE = 5;\n+\n+class CRateCheckBuffer {\n+private:\n+    std::vector<int64_t> vecTimestamps;\n+\n+    int nDataStart;\n+\n+    int nDataEnd;\n+\n+    bool fBufferEmpty;\n+\n+public:\n+    CRateCheckBuffer()\n+        : vecTimestamps(RATE_BUFFER_SIZE),\n+          nDataStart(0),\n+          nDataEnd(0),\n+          fBufferEmpty(true)\n+        {}\n+\n+    void AddTimestamp(int64_t nTimestamp)\n+    {\n+        if((nDataEnd == nDataStart) && !fBufferEmpty) {\n+            // Buffer full, discard 1st element\n+            nDataStart = (nDataStart + 1) % RATE_BUFFER_SIZE;\n+        }\n+        vecTimestamps[nDataEnd] = nTimestamp;\n+        nDataEnd = (nDataEnd + 1) % RATE_BUFFER_SIZE;\n+        fBufferEmpty = false;\n+    }\n+\n+    int64_t GetMinTimestamp()\n+    {\n+        int nIndex = nDataStart;\n+        int64_t nMin = numeric_limits<int64_t>::max();\n+        if(fBufferEmpty) {\n+            return nMin;\n+        }\n+        do {\n+            if(vecTimestamps[nIndex] < nMin) {\n+                nMin = vecTimestamps[nIndex];\n+            }\n+            nIndex = (nIndex + 1) % RATE_BUFFER_SIZE;\n+        } while(nIndex != nDataEnd);\n+        return nMin;\n+    }\n+\n+    int64_t GetMaxTimestamp()\n+    {\n+        int nIndex = nDataStart;\n+        int64_t nMax = 0;\n+        if(fBufferEmpty) {\n+            return nMax;\n+        }\n+        do {\n+            if(vecTimestamps[nIndex] > nMax) {\n+                nMax = vecTimestamps[nIndex];\n+            }\n+            nIndex = (nIndex + 1) % RATE_BUFFER_SIZE;\n+        } while(nIndex != nDataEnd);\n+        return nMax;\n+    }\n+\n+    int GetCount()\n+    {\n+        int nCount = 0;\n+        if(fBufferEmpty) {\n+            return 0;\n+        }\n+        if(nDataEnd > nDataStart) {\n+            nCount = nDataEnd - nDataStart;\n+        }\n+        else {\n+            nCount = RATE_BUFFER_SIZE - nDataStart + nDataEnd;\n+        }\n+\n+        return nCount;\n+    }\n+\n+    double GetRate()\n+    {\n+        int nCount = GetCount();\n+        if(nCount < 2) {\n+            return 0.0;\n+        }\n+        int64_t nMin = GetMinTimestamp();\n+        int64_t nMax = GetMaxTimestamp();\n+        if(nMin == nMax) {\n+            // multiple objects with the same timestamp => infinite rate\n+            return 1.0e10;\n+        }\n+        return double(nCount) / double(nMax - nMin);\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(vecTimestamps);\n+        READWRITE(nDataStart);\n+        READWRITE(nDataEnd);\n+        READWRITE(fBufferEmpty);\n+    }\n+};\n+\n //\n // Governance Manager : Contains all proposals for the budget\n //\n@@ -49,9 +155,9 @@ class CGovernanceManager\n \n public: // Types\n     struct last_object_rec {\n-        last_object_rec(int64_t nLastTriggerTimeIn = 0, int64_t nLastWatchdogTimeIn = 0, bool fStatusOKIn = true)\n-            : nLastTriggerTime(nLastTriggerTimeIn),\n-              nLastWatchdogTime(nLastWatchdogTimeIn),\n+        last_object_rec(bool fStatusOKIn = true)\n+            : triggerBuffer(),\n+              watchdogBuffer(),\n               fStatusOK(fStatusOKIn)\n             {}\n \n@@ -60,13 +166,13 @@ class CGovernanceManager\n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n         {\n-            READWRITE(nLastTriggerTime);\n-            READWRITE(nLastWatchdogTime);\n+            READWRITE(triggerBuffer);\n+            READWRITE(watchdogBuffer);\n             READWRITE(fStatusOK);\n         }\n \n-        int64_t nLastTriggerTime;\n-        int64_t nLastWatchdogTime;\n+        CRateCheckBuffer triggerBuffer;\n+        CRateCheckBuffer watchdogBuffer;\n         bool fStatusOK;\n     };\n "
      },
      {
        "sha": "7c93a38eb430f70170d8ba75e41e35c22caf4bde",
        "filename": "src/test/ratecheck_tests.cpp",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/test/ratecheck_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa/src/test/ratecheck_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/ratecheck_tests.cpp?ref=8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
        "patch": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2014-2016 The Dash Core developers\n+\n+#include \"governance.h\"\n+\n+#include \"test/test_dash.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(ratecheck_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(ratecheck_test)\n+{\n+    CRateCheckBuffer buffer;\n+\n+    BOOST_CHECK(buffer.GetCount() == 0);\n+    BOOST_CHECK(buffer.GetMinTimestamp() == numeric_limits<int64_t>::max());\n+    BOOST_CHECK(buffer.GetMaxTimestamp() == 0);\n+    BOOST_CHECK(buffer.GetRate() == 0.0);\n+\n+    buffer.AddTimestamp(1);\n+\n+    std::cout << \"buffer.GetMinTimestamp() = \" << buffer.GetMinTimestamp() << std::endl;\n+\n+    BOOST_CHECK(buffer.GetCount() == 1);\n+    BOOST_CHECK(buffer.GetMinTimestamp() == 1);\n+    BOOST_CHECK(buffer.GetMaxTimestamp() == 1);\n+    BOOST_CHECK(buffer.GetRate() == 0.0);\n+\n+    buffer.AddTimestamp(2);\n+    BOOST_CHECK(buffer.GetCount() == 2);\n+    BOOST_CHECK(buffer.GetMinTimestamp() == 1);\n+    BOOST_CHECK(buffer.GetMaxTimestamp() == 2);\n+    BOOST_CHECK(fabs(buffer.GetRate() - 2.0) < 1.0e-9);\n+\n+    buffer.AddTimestamp(3);\n+    BOOST_CHECK(buffer.GetCount() == 3);\n+    BOOST_CHECK(buffer.GetMinTimestamp() == 1);\n+    BOOST_CHECK(buffer.GetMaxTimestamp() == 3);\n+\n+    int64_t nMin = buffer.GetMinTimestamp();\n+    int64_t nMax = buffer.GetMaxTimestamp();\n+    double dRate = buffer.GetRate();\n+\n+    std::cout << \"buffer.GetCount() = \" << buffer.GetCount() << std::endl;\n+    std::cout << \"nMin = \" << nMin << std::endl;\n+    std::cout << \"nMax = \" << nMax << std::endl;\n+    std::cout << \"buffer.GetRate() = \" << dRate << std::endl;\n+\n+    BOOST_CHECK(fabs(buffer.GetRate() - (3.0/2.0)) < 1.0e-9);\n+\n+    buffer.AddTimestamp(4);\n+    BOOST_CHECK(buffer.GetCount() == 4);\n+    BOOST_CHECK(buffer.GetMinTimestamp() == 1);\n+    BOOST_CHECK(buffer.GetMaxTimestamp() == 4);\n+    BOOST_CHECK(fabs(buffer.GetRate() - (4.0/3.0)) < 1.0e-9);\n+\n+    buffer.AddTimestamp(5);\n+    BOOST_CHECK(buffer.GetCount() == 5);\n+    BOOST_CHECK(buffer.GetMinTimestamp() == 1);\n+    BOOST_CHECK(buffer.GetMaxTimestamp() == 5);\n+    BOOST_CHECK(fabs(buffer.GetRate() - (5.0/4.0)) < 1.0e-9);\n+\n+    buffer.AddTimestamp(6);\n+    BOOST_CHECK(buffer.GetCount() == 5);\n+    BOOST_CHECK(buffer.GetMinTimestamp() == 2);\n+    BOOST_CHECK(buffer.GetMaxTimestamp() == 6);\n+    BOOST_CHECK(fabs(buffer.GetRate() - (5.0/4.0)) < 1.0e-9);\n+\n+    CRateCheckBuffer buffer2;\n+\n+    std::cout << \"Before loop tests\" << std::endl;\n+    for(int64_t i = 1; i < 11; ++i)  {\n+        std::cout << \"In loop: i = \" << i << std::endl;\n+        buffer2.AddTimestamp(i);\n+        BOOST_CHECK(buffer2.GetCount() == (i <= 5 ? i : 5));\n+        BOOST_CHECK(buffer2.GetMinTimestamp() == max(int64_t(1), i - 4));\n+        BOOST_CHECK(buffer2.GetMaxTimestamp() == i);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "84c242fc8c2037f1d94fb32e72360a56f6b08409",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGMyNDJmYzhjMjAzN2YxZDk0ZmIzMmU3MjM2MGE1NmY2YjA4NDA5",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-15T16:27:09Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-15T16:27:09Z"
      },
      "message": "Restore relaying and fix rate threshold (#1206)\n\n* Restore object relaying during orphan processing\r\n\r\n* Relay votes during orphan processing\r\n\r\n* Allow relaying of objects and votes during syncing\r\n\r\n* Double rate check threshold",
      "tree": {
        "sha": "dc2ac7340e72ec855acb124250228ab81130792f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc2ac7340e72ec855acb124250228ab81130792f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84c242fc8c2037f1d94fb32e72360a56f6b08409",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84c242fc8c2037f1d94fb32e72360a56f6b08409",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84c242fc8c2037f1d94fb32e72360a56f6b08409",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84c242fc8c2037f1d94fb32e72360a56f6b08409/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc8e6c8c2703b4cf7af13f85021bfb95c2d2faa"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "84a331a830322abff28f5d916ecf29ac9d83ab7f",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84c242fc8c2037f1d94fb32e72360a56f6b08409/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84c242fc8c2037f1d94fb32e72360a56f6b08409/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=84c242fc8c2037f1d94fb32e72360a56f6b08409",
        "patch": "@@ -644,7 +644,6 @@ bool CGovernanceObject::GetCurrentMNVotes(const CTxIn& mnCollateralOutpoint, vot\n \n void CGovernanceObject::Relay()\n {\n-    if(!masternodeSync.IsSynced()) return;\n     CInv inv(MSG_GOVERNANCE_OBJECT, GetHash());\n     RelayInv(inv, PROTOCOL_VERSION);\n }\n@@ -732,6 +731,7 @@ void CGovernanceObject::CheckOrphanVotes()\n             LogPrintf(\"CGovernanceObject::CheckOrphanVotes -- Failed to add orphan vote: %s\\n\", exception.what());\n         }\n         else {\n+            vote.Relay();\n             fRemove = true;\n         }\n         ++it;"
      },
      {
        "sha": "80286d51259ecfba8fa80ad6b68510a428a76871",
        "filename": "src/governance-vote.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84c242fc8c2037f1d94fb32e72360a56f6b08409/src/governance-vote.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84c242fc8c2037f1d94fb32e72360a56f6b08409/src/governance-vote.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.cpp?ref=84c242fc8c2037f1d94fb32e72360a56f6b08409",
        "patch": "@@ -235,7 +235,6 @@ CGovernanceVote::CGovernanceVote(CTxIn vinMasternodeIn, uint256 nParentHashIn, v\n \n void CGovernanceVote::Relay() const\n {\n-    if(!masternodeSync.IsSynced()) return;\n     CInv inv(MSG_GOVERNANCE_OBJECT_VOTE, GetHash());\n     RelayInv(inv, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "2676b75d687e4684544c0c9457ad23af00a945ab",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84c242fc8c2037f1d94fb32e72360a56f6b08409/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84c242fc8c2037f1d94fb32e72360a56f6b08409/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=84c242fc8c2037f1d94fb32e72360a56f6b08409",
        "patch": "@@ -280,6 +280,7 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n             fRemove = true;\n         }\n         else if(govobj.ProcessVote(NULL, vote, exception)) {\n+            vote.Relay();\n             fRemove = true;\n         }\n         if(fRemove) {\n@@ -785,7 +786,7 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n     switch(nObjectType) {\n     case GOVERNANCE_OBJECT_TRIGGER:\n         // Allow 1 trigger per mn per cycle, with a small fudge factor\n-        dMaxRate = 1.1 / nSuperblockCycleSeconds;\n+        dMaxRate = 2 * 1.1 / double(nSuperblockCycleSeconds);\n         buffer = it->second.triggerBuffer;\n         buffer.AddTimestamp(nTimestamp);\n         dRate = buffer.GetRate();\n@@ -794,7 +795,7 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         }\n         break;\n     case GOVERNANCE_OBJECT_WATCHDOG:\n-        dMaxRate = 1.1 / 3600.;\n+        dMaxRate = 2 * 1.1 / 3600.;\n         buffer = it->second.watchdogBuffer;\n         buffer.AddTimestamp(nTimestamp);\n         dRate = buffer.GetRate();\n@@ -907,6 +908,7 @@ void CGovernanceManager::CheckMasternodeOrphanObjects()\n \n         if(AddGovernanceObject(govobj)) {\n             LogPrintf(\"CGovernanceManager::CheckMasternodeOrphanObjects -- %s new\\n\", govobj.GetHash().ToString());\n+            govobj.Relay();\n             mapMasternodeOrphanObjects.erase(it++);\n         }\n         else {"
      }
    ]
  },
  {
    "sha": "88ee7a372e194b3b31f5245fcef6f53d66212e8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGVlN2EzNzJlMTk0YjNiMzFmNTI0NWZjZWY2ZjUzZDY2MjEyZThj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-15T16:27:24Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-15T16:27:24Z"
      },
      "message": "better local address discovery for active mn (#1203)\n\n* Make local address discovery more robust in CActiveMasternode\r\n\r\n* parameter interaction: -masternode=1 -> setting -listen=1\r\n\r\n*  slightly postpone first run to give net thread a chance to connect to some peers\r\n\r\n* make sure local address detected in CActiveMasternode::ManageStateInitial is valid\r\n\r\n* Simplified address detection logic",
      "tree": {
        "sha": "6b7829e7b9ada4cecaaec361fbd6f6e69a55f90a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b7829e7b9ada4cecaaec361fbd6f6e69a55f90a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88ee7a372e194b3b31f5245fcef6f53d66212e8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88ee7a372e194b3b31f5245fcef6f53d66212e8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88ee7a372e194b3b31f5245fcef6f53d66212e8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88ee7a372e194b3b31f5245fcef6f53d66212e8c/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84c242fc8c2037f1d94fb32e72360a56f6b08409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84c242fc8c2037f1d94fb32e72360a56f6b08409",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84c242fc8c2037f1d94fb32e72360a56f6b08409"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 51,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1dc241f05406e011360b8d6a0d04c0a7e43b9e5a",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=88ee7a372e194b3b31f5245fcef6f53d66212e8c",
        "patch": "@@ -127,10 +127,43 @@ bool CActiveMasternode::SendMasternodePing()\n void CActiveMasternode::ManageStateInitial()\n {\n     LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetTypeString(), fPingerEnabled);\n+\n     // Check that our local network configuration is correct\n-    if(!GetLocal(service)) {\n+    if (!fListen) {\n+        // listen option is probably overwritten by smth else, no good\n+        nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+        strNotCapableReason = \"Masternode must accept connections from outside. Make sure listen configuration option is not overwritten by some another parameter.\";\n+        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n+        return;\n+    }\n+\n+    bool fFoundLocal = false;\n+    {\n+        LOCK(cs_vNodes);\n+\n+        // First try to find whatever local address is specified by externalip option\n+        fFoundLocal = GetLocal(service) && CMasternode::IsValidNetAddr(service);\n+        if(!fFoundLocal) {\n+            // nothing and no live connections, can't do anything for now\n+            if (vNodes.empty()) {\n+                nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n+                strNotCapableReason = \"Can't detect valid external address. Will retry when there are some connections available.\";\n+                LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n+                return;\n+            }\n+            // We have some peers, let's try to find our local address from one of them\n+            BOOST_FOREACH(CNode* pnode, vNodes) {\n+                if (pnode->fSuccessfullyConnected && pnode->addr.IsIPv4()) {\n+                    fFoundLocal = GetLocal(service, &pnode->addr) && CMasternode::IsValidNetAddr(service);\n+                    if(fFoundLocal) break;\n+                }\n+            }\n+        }\n+    }\n+\n+    if(!fFoundLocal) {\n         nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n-        strNotCapableReason = \"Can't detect external address. Please consider using the externalip configuration option if problem persists.\";\n+        strNotCapableReason = \"Can't detect valid external address. Please consider using the externalip configuration option if problem persists. Make sure to use IPv4 address only.\";\n         LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n         return;\n     }\n@@ -150,7 +183,7 @@ void CActiveMasternode::ManageStateInitial()\n         return;\n     }\n \n-    LogPrintf(\"CActiveMasternode::ManageState -- Checking inbound connection to '%s'\\n\", service.ToString());\n+    LogPrintf(\"CActiveMasternode::ManageStateInitial -- Checking inbound connection to '%s'\\n\", service.ToString());\n \n     if(!ConnectNode((CAddress)service, NULL, true)) {\n         nState = ACTIVE_MASTERNODE_NOT_CAPABLE;"
      },
      {
        "sha": "124d943ef889d42ced65e1acbae5bcd4d93280f4",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=88ee7a372e194b3b31f5245fcef6f53d66212e8c",
        "patch": "@@ -2479,8 +2479,8 @@ void ThreadCheckDarkSendPool()\n             nTick++;\n \n             // check if we should activate or ping every few minutes,\n-            // start right after sync is considered to be done\n-            if(nTick % MASTERNODE_MIN_MNP_SECONDS == 1)\n+            // slightly postpone first run to give net thread a chance to connect to some peers\n+            if(nTick % MASTERNODE_MIN_MNP_SECONDS == 15)\n                 activeMasternode.ManageState();\n \n             mnodeman.Check();"
      },
      {
        "sha": "9633df7d04a744debad1cbf2a21d652f980c8615",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=88ee7a372e194b3b31f5245fcef6f53d66212e8c",
        "patch": "@@ -797,6 +797,12 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n+    if (GetBoolArg(\"-masternode\", false)) {\n+        // masternodes must accept connections from outside\n+        if (SoftSetBoolArg(\"-listen\", true))\n+            LogPrintf(\"%s: parameter interaction: -masternode=1 -> setting -listen=1\\n\", __func__);\n+    }\n+\n     if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))"
      },
      {
        "sha": "1f865aff197e725a1c8a167da7139fc1ee221140",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=88ee7a372e194b3b31f5245fcef6f53d66212e8c",
        "patch": "@@ -273,11 +273,16 @@ void CMasternode::Check(bool fForce)\n }\n \n bool CMasternode::IsValidNetAddr()\n+{\n+    return IsValidNetAddr(addr);\n+}\n+\n+bool CMasternode::IsValidNetAddr(CService addrIn)\n {\n     // TODO: regtest is fine with any addresses for now,\n     // should probably be a bit smarter if one day we start to implement tests for this\n     return Params().NetworkIDString() == CBaseChainParams::REGTEST ||\n-            (addr.IsIPv4() && IsReachable(addr) && addr.IsRoutable());\n+            (addrIn.IsIPv4() && IsReachable(addrIn) && addrIn.IsRoutable());\n }\n \n masternode_info_t CMasternode::GetInfo()"
      },
      {
        "sha": "c4b655dde8a0657a58d7c2af2aa2dd9d7695ff2d",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ee7a372e194b3b31f5245fcef6f53d66212e8c/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=88ee7a372e194b3b31f5245fcef6f53d66212e8c",
        "patch": "@@ -274,6 +274,7 @@ class CMasternode\n     }\n \n     bool IsValidNetAddr();\n+    static bool IsValidNetAddr(CService addrIn);\n \n     void IncreasePoSeBanScore() { if(nPoSeBanScore < MASTERNODE_POSE_BAN_MAX_SCORE) nPoSeBanScore++; }\n     void DecreasePoSeBanScore() { if(nPoSeBanScore > -MASTERNODE_POSE_BAN_MAX_SCORE) nPoSeBanScore--; }"
      }
    ]
  },
  {
    "sha": "b04f67546daf4146bf9411fea3d22a5f8356beb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDRmNjc1NDZkYWY0MTQ2YmY5NDExZmVhM2QyMmE1ZjgzNTZiZWIw",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-19T23:05:24Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-19T23:05:24Z"
      },
      "message": "GetBudgetSystemCollateralTX should use \"this\" wallet, not \"main\" (#1212)",
      "tree": {
        "sha": "6d60370b9642c54eb08ce26b1c7ef49d6e8baaf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d60370b9642c54eb08ce26b1c7ef49d6e8baaf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b04f67546daf4146bf9411fea3d22a5f8356beb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04f67546daf4146bf9411fea3d22a5f8356beb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b04f67546daf4146bf9411fea3d22a5f8356beb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04f67546daf4146bf9411fea3d22a5f8356beb0/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88ee7a372e194b3b31f5245fcef6f53d66212e8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88ee7a372e194b3b31f5245fcef6f53d66212e8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88ee7a372e194b3b31f5245fcef6f53d66212e8c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "13a45756b4b9279d5ca45bd457c151e128e2e970",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b04f67546daf4146bf9411fea3d22a5f8356beb0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b04f67546daf4146bf9411fea3d22a5f8356beb0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b04f67546daf4146bf9411fea3d22a5f8356beb0",
        "patch": "@@ -2844,7 +2844,7 @@ bool CWallet::GetBudgetSystemCollateralTX(CTransaction& tx, uint256 hash, CAmoun\n bool CWallet::GetBudgetSystemCollateralTX(CWalletTx& tx, uint256 hash, CAmount amount, bool fUseInstantSend)\n {\n     // make our change address\n-    CReserveKey reservekey(pwalletMain);\n+    CReserveKey reservekey(this);\n \n     CScript scriptChange;\n     scriptChange << OP_RETURN << ToByteVector(hash);"
      }
    ]
  },
  {
    "sha": "ff12698ed50ce4b840dd3f34c340d0bded61b334",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjEyNjk4ZWQ1MGNlNGI4NDBkZDNmMzRjMzQwZDBiZGVkNjFiMzM0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-19T23:06:06Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-19T23:06:06Z"
      },
      "message": "Clean up rpcgovernance (#1213)",
      "tree": {
        "sha": "8f4968afa1c4e4d8eda5a45e5e2a118a2afbcd45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f4968afa1c4e4d8eda5a45e5e2a118a2afbcd45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff12698ed50ce4b840dd3f34c340d0bded61b334",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff12698ed50ce4b840dd3f34c340d0bded61b334",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff12698ed50ce4b840dd3f34c340d0bded61b334",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff12698ed50ce4b840dd3f34c340d0bded61b334/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b04f67546daf4146bf9411fea3d22a5f8356beb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b04f67546daf4146bf9411fea3d22a5f8356beb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b04f67546daf4146bf9411fea3d22a5f8356beb0"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 40,
      "deletions": 40
    },
    "files": [
      {
        "sha": "d0119d79e14d9baac1881eb3b254ac106d870204",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 40,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff12698ed50ce4b840dd3f34c340d0bded61b334/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff12698ed50ce4b840dd3f34c340d0bded61b334/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=ff12698ed50ce4b840dd3f34c340d0bded61b334",
        "patch": "@@ -159,12 +159,12 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         }\n \n         CMasternode mn;\n-        bool mnFound = mnodeman.Get(activeMasternode.vin, mn);\n+        bool fMnFound = mnodeman.Get(activeMasternode.vin, mn);\n \n         DBG( cout << \"gobject: submit activeMasternode.pubKeyMasternode = \" << activeMasternode.pubKeyMasternode.GetHash().ToString()\n              << \", vin = \" << activeMasternode.vin.prevout.ToStringShort()\n              << \", params.size() = \" << params.size()\n-             << \", mnFound = \" << mnFound << endl; );\n+             << \", fMnFound = \" << fMnFound << endl; );\n \n         // ASSEMBLE NEW GOVERNANCE OBJECT FROM USER PARAMETERS\n \n@@ -205,7 +205,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         // Attempt to sign triggers if we are a MN\n         if((govobj.GetObjectType() == GOVERNANCE_OBJECT_TRIGGER) ||\n            (govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG)) {\n-            if(mnFound) {\n+            if(fMnFound) {\n                 govobj.SetMasternodeInfo(mn.vin);\n                 govobj.Sign(activeMasternode.keyMasternode, activeMasternode.pubKeyMasternode);\n             }\n@@ -259,8 +259,8 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid vote outcome. Please use one of the following: 'yes', 'no' or 'abstain'\");\n         }\n \n-        int success = 0;\n-        int failed = 0;\n+        int nSuccessful = 0;\n+        int nFailed = 0;\n \n         UniValue resultsObj(UniValue::VOBJ);\n \n@@ -271,43 +271,43 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         UniValue returnObj(UniValue::VOBJ);\n \n         CMasternode mn;\n-        bool mnFound = mnodeman.Get(activeMasternode.vin, mn);\n+        bool fMnFound = mnodeman.Get(activeMasternode.vin, mn);\n \n-        if(!mnFound) {\n-            failed++;\n+        if(!fMnFound) {\n+            nFailed++;\n             statusObj.push_back(Pair(\"result\", \"failed\"));\n             statusObj.push_back(Pair(\"errorMessage\", \"Can't find masternode by collateral output\"));\n             resultsObj.push_back(Pair(\"dash.conf\", statusObj));\n-            returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", success, failed)));\n+            returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", nSuccessful, nFailed)));\n             returnObj.push_back(Pair(\"detail\", resultsObj));\n             return returnObj;\n         }\n \n         CGovernanceVote vote(mn.vin, hash, eVoteSignal, eVoteOutcome);\n         if(!vote.Sign(activeMasternode.keyMasternode, activeMasternode.pubKeyMasternode)) {\n-            failed++;\n+            nFailed++;\n             statusObj.push_back(Pair(\"result\", \"failed\"));\n             statusObj.push_back(Pair(\"errorMessage\", \"Failure to sign.\"));\n             resultsObj.push_back(Pair(\"dash.conf\", statusObj));\n-            returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", success, failed)));\n+            returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", nSuccessful, nFailed)));\n             returnObj.push_back(Pair(\"detail\", resultsObj));\n             return returnObj;\n         }\n \n         CGovernanceException exception;\n         if(governance.ProcessVoteAndRelay(vote, exception)) {\n-            success++;\n+            nSuccessful++;\n             statusObj.push_back(Pair(\"result\", \"success\"));\n         }\n         else {\n-            failed++;\n+            nFailed++;\n             statusObj.push_back(Pair(\"result\", \"failed\"));\n             statusObj.push_back(Pair(\"errorMessage\", exception.GetMessage()));\n         }\n \n         resultsObj.push_back(Pair(\"dash.conf\", statusObj));\n \n-        returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", success, failed)));\n+        returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", nSuccessful, nFailed)));\n         returnObj.push_back(Pair(\"detail\", resultsObj));\n \n         return returnObj;\n@@ -338,8 +338,8 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid vote outcome. Please use one of the following: 'yes', 'no' or 'abstain'\");\n         }\n \n-        int success = 0;\n-        int failed = 0;\n+        int nSuccessful = 0;\n+        int nFailed = 0;\n \n         std::vector<CMasternodeConfig::CMasternodeEntry> mnEntries;\n         mnEntries = masternodeConfig.getEntries();\n@@ -359,7 +359,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             UniValue statusObj(UniValue::VOBJ);\n \n             if(!darkSendSigner.GetKeysFromSecret(mne.getPrivKey(), keyMasternode, pubKeyMasternode)){\n-                failed++;\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", \"Masternode signing error, could not set key correctly\"));\n                 resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -377,10 +377,10 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             CTxIn vin(COutPoint(nTxHash, nOutputIndex));\n \n             CMasternode mn;\n-            bool mnFound = mnodeman.Get(vin, mn);\n+            bool fMnFound = mnodeman.Get(vin, mn);\n \n-            if(!mnFound) {\n-                failed++;\n+            if(!fMnFound) {\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", \"Can't find masternode by collateral output\"));\n                 resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -389,7 +389,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n             CGovernanceVote vote(mn.vin, hash, eVoteSignal, eVoteOutcome);\n             if(!vote.Sign(keyMasternode, pubKeyMasternode)){\n-                failed++;\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", \"Failure to sign.\"));\n                 resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -398,11 +398,11 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n             CGovernanceException exception;\n             if(governance.ProcessVoteAndRelay(vote, exception)) {\n-                success++;\n+                nSuccessful++;\n                 statusObj.push_back(Pair(\"result\", \"success\"));\n             }\n             else {\n-                failed++;\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", exception.GetMessage()));\n             }\n@@ -411,7 +411,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         }\n \n         UniValue returnObj(UniValue::VOBJ);\n-        returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", success, failed)));\n+        returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", nSuccessful, nFailed)));\n         returnObj.push_back(Pair(\"detail\", resultsObj));\n \n         return returnObj;\n@@ -450,8 +450,8 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // EXECUTE VOTE FOR EACH MASTERNODE, COUNT SUCCESSES VS FAILURES\n \n-        int success = 0;\n-        int failed = 0;\n+        int nSuccessful = 0;\n+        int nFailed = 0;\n \n         std::vector<CMasternodeConfig::CMasternodeEntry> mnEntries;\n         mnEntries = masternodeConfig.getEntries();\n@@ -478,7 +478,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             UniValue statusObj(UniValue::VOBJ);\n \n             if(!darkSendSigner.GetKeysFromSecret(mne.getPrivKey(), keyMasternode, pubKeyMasternode)) {\n-                failed++;\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", strprintf(\"Invalid masternode key %s.\", mne.getPrivKey())));\n                 resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -498,10 +498,10 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             CTxIn vin(COutPoint(nTxHash, nOutputIndex));\n \n             CMasternode mn;\n-            bool mnFound = mnodeman.Get(vin, mn);\n+            bool fMnFound = mnodeman.Get(vin, mn);\n \n-            if(!mnFound) {\n-                failed++;\n+            if(!fMnFound) {\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", \"Masternode must be publically available on network to vote. Masternode not found.\"));\n                 resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -512,7 +512,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n             CGovernanceVote vote(vin, hash, eVoteSignal, eVoteOutcome);\n             if(!vote.Sign(keyMasternode, pubKeyMasternode)) {\n-                failed++;\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", \"Failure to sign.\"));\n                 resultsObj.push_back(Pair(mne.getAlias(), statusObj));\n@@ -523,11 +523,11 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n             CGovernanceException exception;\n             if(governance.ProcessVoteAndRelay(vote, exception)) {\n-                success++;\n+                nSuccessful++;\n                 statusObj.push_back(Pair(\"result\", \"success\"));\n             }\n             else {\n-                failed++;\n+                nFailed++;\n                 statusObj.push_back(Pair(\"result\", \"failed\"));\n                 statusObj.push_back(Pair(\"errorMessage\", exception.GetMessage()));\n             }\n@@ -538,7 +538,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         // REPORT STATS TO THE USER\n \n         UniValue returnObj(UniValue::VOBJ);\n-        returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", success, failed)));\n+        returnObj.push_back(Pair(\"overall\", strprintf(\"Voted successfully %d time(s) and failed %d time(s).\", nSuccessful, nFailed)));\n         returnObj.push_back(Pair(\"detail\", resultsObj));\n \n         return returnObj;\n@@ -730,7 +730,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n     // GETVOTES FOR SPECIFIC GOVERNANCE OBJECT\n     if(strCommand == \"getcurrentvotes\")\n     {\n-        if (params.size() < 2 || params.size() == 3 || params.size() > 4)\n+        if (params.size() != 2 && params.size() != 4)\n             throw std::runtime_error(\n                 \"Correct usage is 'gobject getcurrentvotes <governance-hash> [txid vout_index]'\"\n                 );\n@@ -812,10 +812,10 @@ UniValue voteraw(const UniValue& params, bool fHelp)\n     }\n \n     CMasternode mn;\n-    bool mnFound = mnodeman.Get(vin, mn);\n+    bool fMnFound = mnodeman.Get(vin, mn);\n \n-    if(!mnFound) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Failure to find masternode in list : \" + vin.ToString());\n+    if(!fMnFound) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Failure to find masternode in list : \" + vin.prevout.ToStringShort());\n     }\n \n     CGovernanceVote vote(vin, hashGovObj, eVoteSignal, eVoteOutcome);\n@@ -898,11 +898,11 @@ UniValue getsuperblockbudget(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1) {\n         throw std::runtime_error(\n             \"getsuperblockbudget index\\n\"\n-            \"\\nReturns the absolute minimum number of votes needed to trigger a governance action.\\n\"\n+            \"\\nReturns the absolute maximum sum of superblock payments allowed.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. index         (numeric, required) The block index\\n\"\n             \"\\nResult:\\n\"\n-            \"n    (numeric) The current minimum governance quorum\\n\"\n+            \"n                (numeric) The absolute maximum sum of superblock payments allowed, in \" + CURRENCY_UNIT + \"\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getsuperblockbudget\", \"1000\")\n             + HelpExampleRpc(\"getsuperblockbudget\", \"1000\")"
      }
    ]
  },
  {
    "sha": "fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMwMWVjYjQ5YTRhZThiY2ZhZGRiZWJkZjVjNWMyNGViOTgwYTI3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-19T23:09:38Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-19T23:09:38Z"
      },
      "message": "local nLastDsq (#1211)\n\n* Revert behaviour introduced in 5e1a6afe7f42bb8aac55417f0ab37681ecbb6a91, make nLastDsq local variable instead of being network-wide one. Should fix mixing for new clients and for those who was offline for too long.\r\n\r\n* fix docs",
      "tree": {
        "sha": "3a109003d6254039df8c16105729f53afe3de231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a109003d6254039df8c16105729f53afe3de231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff12698ed50ce4b840dd3f34c340d0bded61b334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff12698ed50ce4b840dd3f34c340d0bded61b334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff12698ed50ce4b840dd3f34c340d0bded61b334"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6d70fb5344d623f8b909ac04b1dec3d4ac104ee6",
        "filename": "dash-docs/protocol-documentation.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/dash-docs/protocol-documentation.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/dash-docs/protocol-documentation.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/dash-docs/protocol-documentation.md?ref=fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
        "patch": "@@ -67,7 +67,7 @@ Whenever a masternode comes online or a client is syncing, they will send this m\n | 8 | sigTime | int64_t | Time which the signature was created\n | 4 | nProtocolVersion | int | The protocol version of the masternode\n | # | lastPing | CMasternodePing | The last known ping of the masternode\n-| 8 | nLastDsq | int64_t | The last time the masternode sent a DSQ message (for mixing)\n+| 8 | nLastDsq | int64_t | The last time the masternode sent a DSQ message (for mixing) (DEPRECATED)\n \n ### MNPING - \"mnp\"\n "
      },
      {
        "sha": "1504fb3fffcdcf634502809a1bca869ecc263559",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
        "patch": "@@ -5145,6 +5145,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n                         ss << mnodeman.mapSeenMasternodeBroadcast[inv.hash];\n+                        // backward compatibility patch\n+                        if(pfrom->nVersion < 70204) {\n+                            ss << (int64_t)0;\n+                        }\n                         pfrom->PushMessage(NetMsgType::MNANNOUNCE, ss);\n                         pushed = true;\n                     }"
      },
      {
        "sha": "0a0b308f645056a67c2ed5f8b16a64e6057314e7",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
        "patch": "@@ -90,7 +90,7 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n     lastPing(mnb.lastPing),\n     vchSig(mnb.vchSig),\n     sigTime(mnb.sigTime),\n-    nLastDsq(mnb.nLastDsq),\n+    nLastDsq(0),\n     nTimeLastChecked(0),\n     nTimeLastPaid(0),\n     nTimeLastWatchdogVote(mnb.sigTime),"
      },
      {
        "sha": "b48a0917d41313509b9d3e3e56f52889b4e8bc06",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
        "patch": "@@ -342,7 +342,6 @@ class CMasternodeBroadcast : public CMasternode\n         READWRITE(sigTime);\n         READWRITE(nProtocolVersion);\n         READWRITE(lastPing);\n-        READWRITE(nLastDsq);\n     }\n \n     uint256 GetHash() const"
      },
      {
        "sha": "d2a7b237f2ccf45d6367745d88a6c1972da645de",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
        "patch": "@@ -19,7 +19,7 @@\n /** Masternode manager */\n CMasternodeMan mnodeman;\n \n-const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-1\";\n+const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-2\";\n \n struct CompareLastPaidBlock\n {\n@@ -700,6 +700,12 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         CMasternodeBroadcast mnb;\n         vRecv >> mnb;\n \n+        // backward compatibility patch\n+        if(pfrom->nVersion < 70204) {\n+            int64_t nLastDsqDummy;\n+            vRecv >> nLastDsqDummy;\n+        }\n+\n         int nDos = 0;\n \n         if (CheckMnbAndUpdateMasternodeList(mnb, nDos)) {"
      }
    ]
  },
  {
    "sha": "8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzE2ODgwYjE1NjJkNGUyNmU1MzM3ZGNmOGRjN2I2ZTBhOTI5ODhm",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-20T03:25:20Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-20T03:25:20Z"
      },
      "message": "Fix governance hash (#1208)\n\n* Add vinMasternode to governance object hash and bump protocols\r\n\r\n* Add collateral hash to governance object hash\r\n\r\n* Added signature to object hash\r\n\r\n* Revert \"Add collateral hash to governance object hash\"\r\n\r\nThis reverts commit 2f60c280f3ce1e26cb4ab12f8287424b200aab83.",
      "tree": {
        "sha": "aedff44ab59f08fe86ee55d98fc4a9f2b7bbe211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aedff44ab59f08fe86ee55d98fc4a9f2b7bbe211"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa301ecb49a4ae8bcfaddbebdf5c5c24eb980a27"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 29,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4dba557e841f46ab495577275027f389cb2e262c",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "patch": "@@ -19,7 +19,7 @@ static const int PRIVATESEND_QUEUE_TIMEOUT          = 30;\n static const int PRIVATESEND_SIGNING_TIMEOUT        = 15;\n \n //! minimum peer version accepted by mixing pool\n-static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70203;\n+static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70204;\n \n static const CAmount PRIVATESEND_COLLATERAL         = 0.001 * COIN;\n static const CAmount PRIVATESEND_POOL_MAX           = 999.999 * COIN;"
      },
      {
        "sha": "b6cb9500739abe15efd5c361dcf1dd6a63ec8683",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 7,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "patch": "@@ -223,18 +223,30 @@ void CGovernanceObject::ClearMasternodeVotes()\n     }\n }\n \n+std::string CGovernanceObject::GetSignatureMessage() const\n+{\n+    LOCK(cs);\n+    std::string strMessage = nHashParent.ToString() + \"|\" +\n+        boost::lexical_cast<std::string>(nRevision) + \"|\" +\n+        boost::lexical_cast<std::string>(nTime) + \"|\" +\n+        strData + \"|\" +\n+        vinMasternode.prevout.ToStringShort() + \"|\" +\n+        nCollateralHash.ToString();\n+\n+    return strMessage;\n+}\n+\n void CGovernanceObject::SetMasternodeInfo(const CTxIn& vin)\n {\n     vinMasternode = vin;\n }\n \n bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n {\n-    LOCK(cs);\n-\n     std::string strError;\n-    uint256 nHash = GetHash();\n-    std::string strMessage = nHash.ToString();\n+    std::string strMessage = GetSignatureMessage();\n+\n+    LOCK(cs);\n \n     if(!darkSendSigner.SignMessage(strMessage, vchSig, keyMasternode)) {\n         LogPrintf(\"CGovernanceObject::Sign -- SignMessage() failed\\n\");\n@@ -255,11 +267,11 @@ bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n \n bool CGovernanceObject::CheckSignature(CPubKey& pubKeyMasternode)\n {\n-    LOCK(cs);\n     std::string strError;\n-    uint256 nHash = GetHash();\n-    std::string strMessage = nHash.ToString();\n \n+    std::string strMessage = GetSignatureMessage();\n+\n+    LOCK(cs);\n     if(!darkSendSigner.VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n         LogPrintf(\"CGovernance::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n@@ -286,6 +298,8 @@ uint256 CGovernanceObject::GetHash() const\n     ss << nRevision;\n     ss << nTime;\n     ss << strData;\n+    ss << vinMasternode;\n+    ss << vchSig;\n     // fee_tx is left out on purpose\n     uint256 h1 = ss.GetHash();\n "
      },
      {
        "sha": "5266938ff466e9afb6b70e5f452f8d1dbfa5dd5c",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "patch": "@@ -35,7 +35,7 @@ class CGovernanceObject;\n class CGovernanceVote;\n \n static const int MAX_GOVERNANCE_OBJECT_DATA_SIZE = 16 * 1024;\n-static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70203;\n+static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70204;\n \n static const int GOVERNANCE_OBJECT_UNKNOWN = 0;\n static const int GOVERNANCE_OBJECT_PROPOSAL = 1;\n@@ -262,6 +262,8 @@ class CGovernanceObject\n     bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n     bool CheckSignature(CPubKey& pubKeyMasternode);\n \n+    std::string GetSignatureMessage() const;\n+\n     // CORE OBJECT FUNCTIONS\n \n     bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral);"
      },
      {
        "sha": "afdf047c725dd42f20ec6ab85f52a9c5dafdaef0",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "patch": "@@ -28,7 +28,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-5\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-6\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),"
      },
      {
        "sha": "29991aaf34a18bde87f34da6739c14239b7a82e1",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "patch": "@@ -28,7 +28,7 @@ static const int INSTANTSEND_SIGNATURES_REQUIRED    = 6;\n static const int INSTANTSEND_SIGNATURES_TOTAL       = 10;\n static const int DEFAULT_INSTANTSEND_DEPTH          = 5;\n \n-static const int MIN_INSTANTSEND_PROTO_VERSION      = 70203;\n+static const int MIN_INSTANTSEND_PROTO_VERSION      = 70204;\n static const CAmount INSTANTSEND_MIN_FEE            = 0.001 * COIN;\n \n extern bool fEnableInstantSend;"
      },
      {
        "sha": "6a81f25d1a7901b143c80caa54abc3d2bf79b00d",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "patch": "@@ -24,7 +24,7 @@ static const int MNPAYMENTS_SIGNATURES_TOTAL            = 10;\n // V1 - Last protocol version before update\n // V2 - Newest protocol version\n static const int MIN_MASTERNODE_PAYMENT_PROTO_VERSION_1 = 70103;\n-static const int MIN_MASTERNODE_PAYMENT_PROTO_VERSION_2 = 70203;\n+static const int MIN_MASTERNODE_PAYMENT_PROTO_VERSION_2 = 70204;\n \n extern CCriticalSection cs_vecPayees;\n extern CCriticalSection cs_mapMasternodeBlocks;"
      },
      {
        "sha": "109ba0ebc6e25aa487249c70a5b74afacc4a854d",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "patch": "@@ -10,7 +10,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70203;\n+static const int PROTOCOL_VERSION = 70204;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;"
      }
    ]
  },
  {
    "sha": "e1702cd4eca5f276c75cae9de0eb274369b031f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTcwMmNkNGVjYTVmMjc2Yzc1Y2FlOWRlMGViMjc0MzY5YjAzMWY2",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-20T13:26:45Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-20T13:26:45Z"
      },
      "message": "bump copyright notice to 2017 (#1207)",
      "tree": {
        "sha": "34a0afad1534907b5a89b84f91aafe5c2aa12705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34a0afad1534907b5a89b84f91aafe5c2aa12705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1702cd4eca5f276c75cae9de0eb274369b031f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1702cd4eca5f276c75cae9de0eb274369b031f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1702cd4eca5f276c75cae9de0eb274369b031f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1702cd4eca5f276c75cae9de0eb274369b031f6/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c16880b1562d4e26e5337dcf8dc7b6e0a92988f"
      }
    ],
    "stats": {
      "total": 220,
      "additions": 110,
      "deletions": 110
    },
    "files": [
      {
        "sha": "f9561cadf757269902fa62b42d534476eececc1c",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,7 +1,7 @@\n The MIT License (MIT)\n \n Copyright (c) 2009-2016 The Bitcoin Core developers\n-Copyright (c) 2014-2016 The Dash Core Developers\n+Copyright (c) 2014-2017 The Dash Core developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "333dbf8eebfb65f414f5b7af1295db0b21240421",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -5,7 +5,7 @@ define(_CLIENT_VERSION_MINOR, 12)\n define(_CLIENT_VERSION_REVISION, 1)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n-define(_COPYRIGHT_YEAR, 2016)\n+define(_COPYRIGHT_YEAR, 2017)\n AC_INIT([Dash Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/dashpay/dash/issues],[dashcore])\n AC_CONFIG_SRCDIR([src/main.cpp])\n AC_CONFIG_HEADERS([src/config/dash-config.h])"
      },
      {
        "sha": "d298b72b5cc69bb8adc7d404982822b2df35dd16",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n # Copyright (c) 2014-2015 The Bitcoin Core developers\n-# Copyright (c) 2014-2015 The Dash Core developers\n+# Copyright (c) 2014-2017 The Dash Core developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "1666f9be5061fdea700ae6b2c6b0ed1e44cbcdd9",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "2b38438a1045a7e579de8153626ac3655b2be997",
        "filename": "src/activemasternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/activemasternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/activemasternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "588e47143eb5d5a423d31e71a66ea88697360ef5",
        "filename": "src/cachemap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/cachemap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/cachemap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemap.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f93f37a4071996b08a800a7c5d338a48ce90b2fb",
        "filename": "src/cachemultimap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/cachemultimap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/cachemultimap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemultimap.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0dfb1aa8bff826d5d3a90fd147431af852e8fd4c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0cfa70723c3249e4ff032e3c8bf42c7670274331",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "986fb5641122065831fd13e01d6e74fa70342b74",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -26,7 +26,7 @@\n  * Copyright year (2009-this)\n  * Todo: update this when changing our copyright comments in the source\n  */\n-#define COPYRIGHT_YEAR 2016\n+#define COPYRIGHT_YEAR 2017\n \n #endif //HAVE_CONFIG_H\n "
      },
      {
        "sha": "4f5124249766897f698efe4c35daf9af305dcb2a",
        "filename": "src/darksend-relay.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/darksend-relay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/darksend-relay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend-relay.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n \n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "44231a1fbe992d26407379cf3b3c255d0aa57ca2",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "1e5e82296f0f23bb8ba3a1cfa6ba165ddd322067",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "32ab7affdb9f8a3ef8a6b2b1b69763fd422f77bf",
        "filename": "src/dash-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/dash-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/dash-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dash-cli.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2009-2015 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "04e4369e3c842eae46e967509c43b281e9b71045",
        "filename": "src/dashd.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/dashd.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/dashd.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dashd.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "864d3e89a63671bf71659a289a6fe6104028cd84",
        "filename": "src/drafted/governance-classes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/drafted/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/drafted/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drafted/governance-classes.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n \n /*\n  * FIELDS AND CLASSIFICATION"
      },
      {
        "sha": "e6977c407dc7f9a08050729d35332bd8fe47a8bc",
        "filename": "src/drafted/governance-keys.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/drafted/governance-keys.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/drafted/governance-keys.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drafted/governance-keys.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n \n-// // Copyright (c) 2014-2016 The Dash Core developers\n+// // Copyright (c) 2014-2017 The Dash Core developers\n // // Distributed under the MIT/X11 software license, see the accompanying\n // // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e4c4b2f16bb830a8b23b9453215173f9b9bd2576",
        "filename": "src/dsnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/dsnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/dsnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dsnotificationinterface.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "bba622a65ccf984fa45b52a3938d217ab7a67f7b",
        "filename": "src/flat-database.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/flat-database.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/flat-database.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flat-database.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "75a476f0b510e65507f69ebf3bdcdd46fd774324",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8817a56d06a56972a7a1390b5c88713325d9381c",
        "filename": "src/governance-classes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef GOVERNANCE_CLASSES_H"
      },
      {
        "sha": "92b2b507ba0973b16e3d80645decf4f7ef9e0f27",
        "filename": "src/governance-exceptions.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-exceptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-exceptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-exceptions.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "448a379dbff1584d648d3db2688e5404648c94bb",
        "filename": "src/governance-misc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-misc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-misc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-misc.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n \n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "3e9a7f00da5033421a212b3a254426139fc6931b",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f0694d71dacb61bd4b71be39edf8403dcd14ef25",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f0668267ed673316419f8459c7d24901d056b67e",
        "filename": "src/governance-vote.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-vote.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-vote.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "3ae9035d0e60a13120abb19bc6e8ed0d4449eb7b",
        "filename": "src/governance-vote.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-vote.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-vote.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n \n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "e71bbb11d1ee896f257ea1e4e2132e3e2a37c726",
        "filename": "src/governance-votedb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-votedb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-votedb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-votedb.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "582f2e061163428a3b39be164e6a027cd9cfc561",
        "filename": "src/governance-votedb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-votedb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance-votedb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-votedb.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "ca53a46be6f4321107fb5005314b262e532515b3",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b3037d3b017859a4f09840cb7beefc1ae5c6f2fd",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "dfc44a133a9b3cc5028664e5e09999556e5686f6",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0b7cf426d9c7f96d26382ab363ea3d7bc0554e50",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "ad3b82c0656f867f6c7dd74af1dcbfb51e1a3049",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "1bcde4055545c6f16ab56f1f45acebe5fe6492b1",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef INSTANTX_H"
      },
      {
        "sha": "2ba4ab10a97429f40ff0de051e01a13bec9f7465",
        "filename": "src/keepass.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/keepass.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/keepass.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keepass.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c2910612b7bd124da52e79214ef56035ac4774d1",
        "filename": "src/keepass.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/keepass.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/keepass.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keepass.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "241b167543660f9f2b04a911d9729eda2d811307",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "28cc6497782f5a17af43d869b6ee70ee81421fb7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "62413c0f4cb9c636392b1f237d400495192f652f",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a2202c80411cdc6a6ca1ef6cda2f9a7be43470d0",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "840aeb81ec17268495e368e25575997956f6a1e4",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "faad393b5c165bd6e497fa4501522b80f3b61f1b",
        "filename": "src/masternode-sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode-sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef MASTERNODE_SYNC_H"
      },
      {
        "sha": "8ce4677fa5c1fe96f648e8bf3241152fef154b70",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c9c89a824f43b686f60647afc5e38c3395b64456",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "16c6b93e2eeb77136d1652d35171e2e1478035f0",
        "filename": "src/masternodeconfig.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternodeconfig.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternodeconfig.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeconfig.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n \n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "009a2ce6a11d1750089ab9309a174188cfba8222",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8e4fb92c0987c589279fe1a369b723f9ef2a4a68",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4a6f89f9b8b55407f3e0dcf9868edef5f0d61b21",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9ebfa92ee52c5dff50d3e1d64f4669b5e8cf2f2f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e512d2938b93a452d5809939ed0d6bc2bb6ee28b",
        "filename": "src/netfulfilledman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/netfulfilledman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/netfulfilledman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netfulfilledman.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "21ac5aea6fe03f827fe53771f3e2b9d29ce18b4e",
        "filename": "src/netfulfilledman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/netfulfilledman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/netfulfilledman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netfulfilledman.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "3b6cc9a116452bcaf5410388217a02d47e5c99d5",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7202aa85b654fcedb4ee840eda2c1819ac8a8747",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "92e0a3946bb72c199a1811ae71fa3148676c56c2",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f853807b31669ca73642c7cb9ea6b3dbd2f02768",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4da80adcc1710671ab145fbc868d03f469bc001c",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "aeca0641af26744970f2d65aa37cdbbed47de43e",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "ee4409973f4a18755c98a0fb727e0e7c1e1e5854",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "89027ec236b854507ec7be8fd33c658c7893834e",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0661e8238e78457ebfd1bce7df76a596b409a8ae",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "387d9a0c7205c10091e91ab0b442684ce8f776de",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "601c59071a27d1502303c254661639a9175a5caa",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "68cb533e9b6074da3eea0eb3221f905a87bc6cb0",
        "filename": "src/qt/dash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/dash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/dash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/dash.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d0de82a188f1b97eeee8120a24161ec574cf2ef6",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2013 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "b7fe177ddc2f36e83a5ce4a67d0f69f1f89aecc0",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7da7710b51c591b0f92265f37185f829e6faad9d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "de88cbd36627168bdca5f1aa2a6159728b6d24b7",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "171804fbbcaef64560ce4549a7f05d8508392ae9",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e9c9cef04da497d8675ca96ca16d462b56df12d3",
        "filename": "src/qt/networkstyle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "01931b4b97b82254132a2d82383abdfbd6c8c43a",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2013 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4e3cff00f08d05ea2de5daf162e200a22b1f4fb8",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "a83be6a7fa5d8941ddabccb2624d663d10b98158",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "440eaf77e68b9f8339cd5fc2779c1073deda53b6",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f62ab6475736e5cf74b1015b4b3d4d2dcb9bce90",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "2ab36701886f82c09034f4ab8ce83adf6f00870d",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4fb43bcd6b90131aedd2ad7daa86633c6ccc54df",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "649b9b74379ebd070d17e03cf1f0c0fb1d07b2d6",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e02c5b06bc7c8ee86491eb0c125b15df07568773",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "800bf2a587399962fcc9914951acb746bc771fb8",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "cac05c51742af3098afdc26493a263c09cd4b283",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f53166608836c9e1e2cde9ffd0ea1f3cfae38cd4",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "99a6e3a2818d224668203e0e47c8b90dc51b58e6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "016902ee19aec962ed960d3dc6c3a13bcd9025d6",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "dc3141f7f53ae8dc3cb25a523d91aa9ca884162e",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e10aa488616088ba4fcc17648e38a453fd5d9f26",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "543c748ef5c582a3fde6dc114f5baee2d2780628",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e98f5b93de2e626490da040a995a9477eab3063e",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9ac912a9cfc900870f11041b51ebb88096de805a",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "21de7ccfb9f3f3431c38a76a537f45e3bd9b09ae",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c6b0ffdc9afdb9bb9a0f6f35c51dd06da073011d",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8a45c062dd4108999af0097026d97a1aea9de5bb",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "f9573800ec70c866ba4180b4b7f6fd02f253b3a8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "343206e8e3723d40c65c8d379c9e24a2d6ea85ec",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "af6a65fc368a2923427bc9053f885d848b2bb3eb",
        "filename": "src/spork.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/spork.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/spork.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6244b8ab1f28fe698be792a08a932042d89cb560",
        "filename": "src/spork.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/spork.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/spork.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2012 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d0c7b7008691dbf8274e9a7ef8c95be57ddb6e89",
        "filename": "src/test/cachemap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/cachemap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/cachemap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cachemap_tests.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n \n #include \"cachemap.h\"\n "
      },
      {
        "sha": "61922dc8cad0ca63b1095e3ef24950cdac77b8f5",
        "filename": "src/test/cachemultimap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/cachemultimap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/cachemultimap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cachemultimap_tests.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n \n #include \"cachemultimap.h\"\n "
      },
      {
        "sha": "90398a98333a4097a5d048a01b22e21cac3fb14f",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2014-2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\""
      },
      {
        "sha": "706d3e9561500ba4244476f18416a4f6ef275e43",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9d3769c67ebfcac7058657a5812f4368dd8babee",
        "filename": "src/test/ratecheck_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/ratecheck_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/test/ratecheck_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/ratecheck_tests.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n \n #include \"governance.h\"\n "
      },
      {
        "sha": "f3a73e385e1b97fea35d26a114aef10c7830450b",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8caba3fb32d2a73c30e5f6d1df00521f7e76cfdf",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "296bf3ac0b11eb328be1bc4d708085c3879824d1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "67902f6c7cd8bb7a20b8d42f0d4cb623a0dfffc2",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2012-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4083c20446538a0a198accf615d59674cd49eeb2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "19ad6c31a83ed9e1cde747565e9e40b3a5ed460f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "5aa8663aeb4c98b7ee2323c78e479dff37afadda",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7eede377ddc1fdfeb66b77cb3528dd1fa55319a5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "0076b52d055a7a7bd69297c51a6fbdbe2cb02c2c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1702cd4eca5f276c75cae9de0eb274369b031f6/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2016 The Dash Core developers\n+// Copyright (c) 2014-2017 The Dash Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      }
    ]
  },
  {
    "sha": "a0c93ebaa51913122765dfbbab9461e3e7b14027",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGM5M2ViYWE1MTkxMzEyMjc2NWRmYmJhYjk0NjFlM2U3YjE0MDI3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-20T13:27:59Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-20T13:27:59Z"
      },
      "message": "cleanup/fix includes: (#1214)\n\n- some were not used, some were included twice, some were in the wrong place, some were missing (but it compiled because some were in the wrong place)\r\n- organized a bit better, grouped dash specific includes in original bitcoin files, should save some time solving conflicts when/if merging patches later",
      "tree": {
        "sha": "fa4271c51747bd2ce4928065b2e00f05db08a3f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa4271c51747bd2ce4928065b2e00f05db08a3f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0c93ebaa51913122765dfbbab9461e3e7b14027",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0c93ebaa51913122765dfbbab9461e3e7b14027",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0c93ebaa51913122765dfbbab9461e3e7b14027",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0c93ebaa51913122765dfbbab9461e3e7b14027/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1702cd4eca5f276c75cae9de0eb274369b031f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1702cd4eca5f276c75cae9de0eb274369b031f6"
      }
    ],
    "stats": {
      "total": 301,
      "additions": 117,
      "deletions": 184
    },
    "files": [
      {
        "sha": "f32db2f67cb89bad703055d227719ad8e4db419b",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -4,26 +4,16 @@\n \n //#define ENABLE_DASH_DEBUG\n \n-#include \"governance-classes.h\"\n-\n #include \"core_io.h\"\n-#include \"main.h\"\n+#include \"governance-classes.h\"\n #include \"init.h\"\n-#include \"chainparams.h\"\n-\n-#include \"consensus/consensus.h\"\n-#include \"consensus/merkle.h\"\n-#include \"consensus/validation.h\"\n-\n-#include \"governance.h\"\n-#include \"masternode.h\"\n-#include <boost/lexical_cast.hpp>\n-#include <univalue.h>\n+#include \"main.h\"\n+#include \"utilstrencodings.h\"\n \n-#include <boost/lexical_cast.hpp>\n #include <boost/algorithm/string.hpp>\n #include <boost/foreach.hpp>\n \n+#include <univalue.h>\n \n // DECLARE GLOBAL VARIABLES FOR GOVERNANCE CLASSES\n CGovernanceTriggerManager triggerman;"
      },
      {
        "sha": "e74c583f8661cb998ffbe25730846f47ade36bad",
        "filename": "src/governance-classes.h",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.h?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -6,19 +6,13 @@\n \n //#define ENABLE_DASH_DEBUG\n \n-#include \"util.h\"\n-#include \"main.h\"\n-#include \"sync.h\"\n-#include \"net.h\"\n-#include \"key.h\"\n-#include \"util.h\"\n #include \"base58.h\"\n-#include \"masternode.h\"\n-#include <boost/lexical_cast.hpp>\n-#include <boost/shared_ptr.hpp>\n-#include \"init.h\"\n #include \"governance.h\"\n+#include \"key.h\"\n+#include \"script/standard.h\"\n+#include \"util.h\"\n \n+#include <boost/shared_ptr.hpp>\n \n class CSuperblock;\n class CGovernanceTrigger;"
      },
      {
        "sha": "a125e970ca8eb63c19fdf11e878eb2289c391669",
        "filename": "src/governance-exceptions.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-exceptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-exceptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-exceptions.h?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -6,8 +6,9 @@\n #define GOVERNANCE_EXCEPTIONS_H\n \n #include <exception>\n-#include <string>\n #include <iostream>\n+#include <sstream>\n+#include <string>\n \n enum governance_exception_type_enum_t {\n     /// Default value, normally indicates no exception condition occurred"
      },
      {
        "sha": "628735c6ae8dccdd7a2f0432e73a6575f5834411",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 12,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -3,23 +3,14 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"core_io.h\"\n-#include \"main.h\"\n-#include \"init.h\"\n-\n-#include \"flat-database.h\"\n+#include \"darksend.h\"\n #include \"governance.h\"\n+#include \"governance-classes.h\"\n #include \"governance-object.h\"\n #include \"governance-vote.h\"\n-#include \"governance-classes.h\"\n-#include \"masternode.h\"\n-#include \"governance.h\"\n-#include \"darksend.h\"\n #include \"masternodeman.h\"\n-#include \"masternode-sync.h\"\n-#include \"netfulfilledman.h\"\n #include \"util.h\"\n-#include \"addrman.h\"\n-#include <boost/lexical_cast.hpp>\n+\n #include <univalue.h>\n \n CGovernanceObject::CGovernanceObject()"
      },
      {
        "sha": "fc67ec0feaf730fd23ce73ed8fe2c2b626e9250b",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 6,
        "deletions": 17,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -7,27 +7,16 @@\n \n //#define ENABLE_DASH_DEBUG\n \n-#include \"util.h\"\n-#include \"main.h\"\n-#include \"sync.h\"\n-#include \"net.h\"\n-#include \"key.h\"\n-#include \"util.h\"\n-#include \"base58.h\"\n-#include \"masternode.h\"\n+#include \"cachemultimap.h\"\n #include \"governance-exceptions.h\"\n #include \"governance-vote.h\"\n #include \"governance-votedb.h\"\n-#include \"masternodeman.h\"\n-#include <boost/lexical_cast.hpp>\n-#include \"init.h\"\n-#include <univalue.h>\n-#include \"utilstrencodings.h\"\n-#include \"cachemap.h\"\n-#include \"cachemultimap.h\"\n+#include \"key.h\"\n+#include \"net.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n \n-#include <stdio.h>\n-#include <string.h>\n+#include <univalue.h>\n \n class CGovernanceManager;\n class CGovernanceTriggerManager;"
      },
      {
        "sha": "7bacedc693b887a0d2e030604b7ef65c295bdb15",
        "filename": "src/governance-vote.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-vote.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-vote.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -2,22 +2,12 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core_io.h\"\n-#include \"main.h\"\n-#include \"init.h\"\n-\n-#include \"flat-database.h\"\n-#include \"governance.h\"\n-#include \"masternode.h\"\n-#include \"governance.h\"\n #include \"darksend.h\"\n+#include \"governance-vote.h\"\n #include \"masternodeman.h\"\n-#include \"masternode-sync.h\"\n #include \"util.h\"\n-#include \"addrman.h\"\n-#include <boost/lexical_cast.hpp>\n-\n \n+#include <boost/lexical_cast.hpp>\n \n std::string CGovernanceVoting::ConvertOutcomeToString(vote_outcome_enum_t nOutcome)\n {"
      },
      {
        "sha": "5e1e5078852d3ad3fd95534e590eed69e45df470",
        "filename": "src/governance-vote.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-vote.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance-vote.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.h?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -5,15 +5,10 @@\n #ifndef GOVERNANCE_VOTE_H\n #define GOVERNANCE_VOTE_H\n \n-#include \"main.h\"\n-#include \"sync.h\"\n-#include \"net.h\"\n #include \"key.h\"\n-#include \"util.h\"\n-#include \"base58.h\"\n-#include \"masternode.h\"\n+#include \"primitives/transaction.h\"\n+\n #include <boost/lexical_cast.hpp>\n-#include \"init.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "340a975b79dae906aabc81ffbe625ba6403359c8",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -2,25 +2,17 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"core_io.h\"\n-#include \"main.h\"\n-#include \"init.h\"\n-\n-#include \"flat-database.h\"\n+#include \"darksend.h\"\n #include \"governance.h\"\n #include \"governance-object.h\"\n #include \"governance-vote.h\"\n #include \"governance-classes.h\"\n+#include \"main.h\"\n #include \"masternode.h\"\n-#include \"governance.h\"\n-#include \"darksend.h\"\n-#include \"masternodeman.h\"\n #include \"masternode-sync.h\"\n+#include \"masternodeman.h\"\n #include \"netfulfilledman.h\"\n #include \"util.h\"\n-#include \"addrman.h\"\n-#include <boost/lexical_cast.hpp>\n-#include <univalue.h>\n \n CGovernanceManager governance;\n "
      },
      {
        "sha": "82aff2bebb0ef65482b979d4ff63079f95056632",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 8,
        "deletions": 20,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -7,28 +7,16 @@\n \n //#define ENABLE_DASH_DEBUG\n \n-#include \"util.h\"\n-#include \"main.h\"\n-#include \"sync.h\"\n-#include \"net.h\"\n-#include \"key.h\"\n-#include \"util.h\"\n-#include \"base58.h\"\n-#include \"governance-object.h\"\n-#include \"masternode.h\"\n-#include \"governance-exceptions.h\"\n-#include \"governance-vote.h\"\n-#include \"governance-votedb.h\"\n-#include \"masternodeman.h\"\n-#include <boost/lexical_cast.hpp>\n-#include \"init.h\"\n-#include <univalue.h>\n-#include \"utilstrencodings.h\"\n #include \"cachemap.h\"\n #include \"cachemultimap.h\"\n-\n-#include <stdio.h>\n-#include <string.h>\n+#include \"chain.h\"\n+#include \"governance-exceptions.h\"\n+#include \"governance-object.h\"\n+#include \"governance-vote.h\"\n+#include \"net.h\"\n+#include \"sync.h\"\n+#include \"timedata.h\"\n+#include \"util.h\"\n \n class CGovernanceManager;\n class CGovernanceTriggerManager;"
      },
      {
        "sha": "21c1e854b2f5ba7cc67728eb5ce4fd67bb8303d8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -34,25 +34,31 @@\n #include \"torcontrol.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"activemasternode.h\"\n-#include \"instantx.h\"\n-#include \"darksend.h\"\n-#include \"masternode-payments.h\"\n-#include \"masternode-sync.h\"\n-#include \"masternodeman.h\"\n-#include \"masternodeconfig.h\"\n-#include \"flat-database.h\"\n-#include \"governance.h\"\n-#include \"spork.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n-#include \"keepass.h\"\n #include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif\n+\n+#include \"activemasternode.h\"\n+#include \"darksend.h\"\n+#include \"dsnotificationinterface.h\"\n+#include \"flat-database.h\"\n+#include \"governance.h\"\n+#include \"instantx.h\"\n+#ifdef ENABLE_WALLET\n+#include \"keepass.h\"\n+#endif\n+#include \"masternode-payments.h\"\n+#include \"masternode-sync.h\"\n+#include \"masternodeman.h\"\n+#include \"masternodeconfig.h\"\n+#include \"netfulfilledman.h\"\n+#include \"spork.h\"\n+\n #include <stdint.h>\n #include <stdio.h>\n \n@@ -75,8 +81,6 @@\n #include \"zmq/zmqnotificationinterface.h\"\n #endif\n \n-#include \"dsnotificationinterface.h\"\n-\n using namespace std;\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "860c1b0b173057bc6a949e5742041139009f2b97",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -2,19 +2,19 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"consensus/validation.h\"\n-#include \"sync.h\"\n-#include \"net.h\"\n-#include \"key.h\"\n-#include \"util.h\"\n-#include \"base58.h\"\n-#include \"protocol.h\"\n-#include \"instantx.h\"\n+\n #include \"activemasternode.h\"\n #include \"darksend.h\"\n+#include \"instantx.h\"\n+#include \"key.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeman.h\"\n+#include \"net.h\"\n+#include \"protocol.h\"\n #include \"spork.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"consensus/validation.h\"\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/lexical_cast.hpp>"
      },
      {
        "sha": "8cc959280183ef721e867f38864932f4c4f1c1d3",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -4,12 +4,8 @@\n #ifndef INSTANTX_H\n #define INSTANTX_H\n \n-#include \"sync.h\"\n #include \"net.h\"\n-#include \"key.h\"\n-#include \"util.h\"\n-#include \"base58.h\"\n-#include \"main.h\"\n+#include \"primitives/transaction.h\"\n \n class CTransaction;\n class CTxLockVote;"
      },
      {
        "sha": "11d6fc92f889cff26aaf7043eec615eb9d79fe41",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -17,12 +17,6 @@\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"init.h\"\n-#include \"instantx.h\"\n-#include \"darksend.h\"\n-#include \"governance.h\"\n-#include \"masternode-payments.h\"\n-#include \"masternode-sync.h\"\n-#include \"masternodeman.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n@@ -44,6 +38,13 @@\n #include \"validationinterface.h\"\n #include \"versionbits.h\"\n \n+#include \"darksend.h\"\n+#include \"governance.h\"\n+#include \"instantx.h\"\n+#include \"masternode-payments.h\"\n+#include \"masternode-sync.h\"\n+#include \"masternodeman.h\"\n+\n #include <sstream>\n \n #include <boost/algorithm/string/replace.hpp>"
      },
      {
        "sha": "07e7cb4927f783a6998488b45b7e1e37510b2b73",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"activemasternode.h\"\n-#include \"addrman.h\"\n #include \"darksend.h\"\n #include \"governance-classes.h\"\n #include \"masternode-payments.h\""
      },
      {
        "sha": "5d8798bd4c2fe705c93982e01b37c483b353f6d7",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -2,19 +2,15 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"masternodeman.h\"\n #include \"activemasternode.h\"\n+#include \"addrman.h\"\n #include \"darksend.h\"\n #include \"governance.h\"\n-#include \"masternode.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n+#include \"masternodeman.h\"\n #include \"netfulfilledman.h\"\n #include \"util.h\"\n-#include \"addrman.h\"\n-#include \"spork.h\"\n-#include <boost/lexical_cast.hpp>\n-#include <boost/filesystem.hpp>\n \n /** Masternode manager */\n CMasternodeMan mnodeman;"
      },
      {
        "sha": "fdcbcf4cdd4ef3857f7f62c32cb67081d3de4b0b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -19,11 +19,12 @@\n #include \"primitives/transaction.h\"\n #include \"scheduler.h\"\n #include \"ui_interface.h\"\n-#include \"darksend.h\"\n-#include \"instantx.h\"\n #include \"wallet/wallet.h\"\n #include \"utilstrencodings.h\"\n \n+#include \"darksend.h\"\n+#include \"instantx.h\"\n+\n #ifdef WIN32\n #include <string.h>\n #else"
      },
      {
        "sha": "0bcefc295fab994331532c5dcbe7bad83a34d218",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -13,13 +13,14 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n-#include \"darksend.h\"\n #include \"net.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n+\n+#include \"darksend.h\"\n #include \"masternodeman.h\"\n #include \"masternode-sync.h\"\n-#include \"util.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "cd15edb8bacba423db4617e520cb5266ae097bae",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -15,11 +15,13 @@\n #include \"walletmodel.h\"\n \n #include \"coincontrol.h\"\n-#include \"darksend.h\"\n #include \"init.h\"\n #include \"main.h\" // For minRelayTxFee\n #include \"wallet/wallet.h\"\n \n+#include \"darksend.h\"\n+#include \"instantx.h\"\n+\n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n \n #include <QApplication>"
      },
      {
        "sha": "4cf0b6dd3ea2e2fe1a4393d3b79e497972edefca",
        "filename": "src/qt/masternodelist.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/masternodelist.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/masternodelist.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -1,16 +1,16 @@\n #include \"masternodelist.h\"\n #include \"ui_masternodelist.h\"\n \n-#include \"sync.h\"\n-#include \"clientmodel.h\"\n-#include \"walletmodel.h\"\n #include \"activemasternode.h\"\n+#include \"clientmodel.h\"\n+#include \"init.h\"\n+#include \"guiutil.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeconfig.h\"\n #include \"masternodeman.h\"\n+#include \"sync.h\"\n #include \"wallet/wallet.h\"\n-#include \"init.h\"\n-#include \"guiutil.h\"\n+#include \"walletmodel.h\"\n \n #include <QTimer>\n #include <QMessageBox>"
      },
      {
        "sha": "e18e5c3859fe02fe2e7ef3cea8bdd9353c99394b",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -12,7 +12,6 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"darksend.h\"\n \n #include \"main.h\" // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n #include \"netbase.h\"\n@@ -22,6 +21,8 @@\n #include \"wallet/wallet.h\" // for CWallet::GetRequiredFee()\n #endif\n \n+#include \"darksend.h\"\n+\n #include <boost/thread.hpp>\n \n #include <QDataWidgetMapper>"
      },
      {
        "sha": "f22089b3157f540bdab7323575c8d730e22e37b7",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -13,7 +13,6 @@\n #include \"guiutil.h\"\n \n #include \"amount.h\"\n-#include \"darksend.h\"\n #include \"init.h\"\n #include \"main.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n #include \"net.h\"\n@@ -22,6 +21,10 @@\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n+#endif\n+\n+#include \"darksend.h\"\n+#ifdef ENABLE_WALLET\n #include \"masternodeconfig.h\"\n #endif\n "
      },
      {
        "sha": "477b5770daae1e781254c8ef127f57af510a26f1",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -8,17 +8,19 @@\n \n #include \"bitcoinunits.h\"\n #include \"clientmodel.h\"\n-#include \"darksend.h\"\n-#include \"darksendconfig.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n+#include \"init.h\"\n #include \"optionsmodel.h\"\n #include \"platformstyle.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactiontablemodel.h\"\n #include \"utilitydialog.h\"\n #include \"walletmodel.h\"\n-#include \"init.h\"\n+\n+#include \"darksend.h\"\n+#include \"instantx.h\"\n+#include \"darksendconfig.h\"\n #include \"masternode-sync.h\"\n \n #include <QAbstractItemDelegate>"
      },
      {
        "sha": "d726dac22b5a3d88e60718132dde7ffa71ee6631",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -19,6 +19,8 @@\n #include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n+#include \"instantx.h\"\n+\n #include <stdint.h>\n #include <string>\n "
      },
      {
        "sha": "5b5c11891940bdac8d0b8f7cde144c3b2ccc4271",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -9,9 +9,10 @@\n #include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"timedata.h\"\n+#include \"wallet/wallet.h\"\n+\n #include \"darksend.h\"\n #include \"instantx.h\"\n-#include \"wallet/wallet.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "7ac91275c829d8518fe8a83f8008e086ebff1972",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -13,15 +13,17 @@\n #include \"transactiontablemodel.h\"\n \n #include \"base58.h\"\n-#include \"darksend.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\"\n-#include \"spork.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\" // for BackupWallet\n \n+#include \"darksend.h\"\n+#include \"instantx.h\"\n+#include \"spork.h\"\n+\n #include <stdint.h>\n \n #include <QDebug>"
      },
      {
        "sha": "369df01f0f2ff5167d23f3d8300bc0084142725c",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -8,7 +8,6 @@\n #include \"paymentrequestplus.h\"\n #include \"walletmodeltransaction.h\"\n \n-#include \"instantx.h\"\n #include \"wallet/wallet.h\"\n #include \"support/allocators/secure.h\"\n "
      },
      {
        "sha": "0d42da4d7e989ab484c90aad417161f5eaddc98f",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -4,29 +4,22 @@\n \n //#define ENABLE_DASH_DEBUG\n \n-#include \"util.h\"\n-#include \"main.h\"\n-#include \"db.h\"\n-#include \"init.h\"\n #include \"activemasternode.h\"\n #include \"darksend.h\"\n #include \"governance.h\"\n+#include \"governance-vote.h\"\n+#include \"governance-classes.h\"\n+#include \"init.h\"\n+#include \"main.h\"\n #include \"masternode.h\"\n-#include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeconfig.h\"\n #include \"masternodeman.h\"\n #include \"rpcserver.h\"\n+#include \"util.h\"\n #include \"utilmoneystr.h\"\n-#include \"governance-vote.h\"\n-#include \"governance-classes.h\"\n-#include <boost/lexical_cast.hpp>\n-\n-#include <fstream>\n-#include <iostream>\n-#include <sstream>\n \n-using namespace std;\n+#include <boost/lexical_cast.hpp>\n \n UniValue gobject(const UniValue& params, bool fHelp)\n {"
      },
      {
        "sha": "b78b64658bae5ca55286c4e02378ac95840c81ed",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -2,17 +2,16 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n-#include \"db.h\"\n-#include \"init.h\"\n #include \"activemasternode.h\"\n #include \"darksend.h\"\n-#include \"governance.h\"\n+#include \"init.h\"\n+#include \"main.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeconfig.h\"\n #include \"masternodeman.h\"\n #include \"rpcserver.h\"\n+#include \"util.h\"\n #include \"utilmoneystr.h\"\n \n #include <fstream>"
      },
      {
        "sha": "5c3568284475b8855b2104ffd4a4b3ea64f44107",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0c93ebaa51913122765dfbbab9461e3e7b14027/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "patch": "@@ -12,25 +12,26 @@\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"darksend.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"governance.h\"\n-#include \"keepass.h\"\n-#include \"instantx.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n-#include \"spork.h\"\n #include \"timedata.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n \n+#include \"darksend.h\"\n+#include \"governance.h\"\n+#include \"instantx.h\"\n+#include \"keepass.h\"\n+#include \"spork.h\"\n+\n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>"
      }
    ]
  },
  {
    "sha": "0e65968384e7a575a0ae9b2c2d7ff4300df92e08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTY1OTY4Mzg0ZTdhNTc1YTBhZTliMmMyZDdmZjQzMDBkZjkyZTA4",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-20T13:31:54Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-20T13:31:54Z"
      },
      "message": "fix Qt 5.5 download path (#1216)",
      "tree": {
        "sha": "fb8cc33c642f1031a11d1289b47c0febf6af5d15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb8cc33c642f1031a11d1289b47c0febf6af5d15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e65968384e7a575a0ae9b2c2d7ff4300df92e08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e65968384e7a575a0ae9b2c2d7ff4300df92e08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e65968384e7a575a0ae9b2c2d7ff4300df92e08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e65968384e7a575a0ae9b2c2d7ff4300df92e08/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0c93ebaa51913122765dfbbab9461e3e7b14027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0c93ebaa51913122765dfbbab9461e3e7b14027"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8aa98e58eea7136d5dbe9a5334812297b52e0bcb",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e65968384e7a575a0ae9b2c2d7ff4300df92e08/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e65968384e7a575a0ae9b2c2d7ff4300df92e08/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=0e65968384e7a575a0ae9b2c2d7ff4300df92e08",
        "patch": "@@ -1,6 +1,6 @@\n PACKAGE=qt\n $(package)_version=5.5.0\n-$(package)_download_path=http://download.qt.io/official_releases/qt/5.5/$($(package)_version)/submodules\n+$(package)_download_path=http://download.qt.io/archive/qt/5.5/$($(package)_version)/submodules\n $(package)_suffix=opensource-src-$($(package)_version).tar.gz\n $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=7e82b1318f88e56a2a9376e069aa608d4fd96b48cb0e1b880ae658b0a1af0561"
      }
    ]
  },
  {
    "sha": "1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzZjMGQ4YjdlYTdjNjVjN2MwNGJmZTUzYmM5MTgwYjBiYzg3Njgy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-20T23:55:55Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-20T23:55:55Z"
      },
      "message": "fix AskForMN (#1217)\n\nShould also store/check node we asked for mn list entry, not outpoint only. This should help to get mn list in sync when some nodes refuse to answer thus blocking such requests for the same outpoint for the next 3h and increasing mn list inconsistency.",
      "tree": {
        "sha": "abe208b2592be1f02d68f1346630e766b26e99e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abe208b2592be1f02d68f1346630e766b26e99e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e65968384e7a575a0ae9b2c2d7ff4300df92e08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e65968384e7a575a0ae9b2c2d7ff4300df92e08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e65968384e7a575a0ae9b2c2d7ff4300df92e08"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 31,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4ad8fb8938525b05fae137102c34e22ea0169e7b",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 10,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
        "patch": "@@ -136,17 +136,29 @@ void CMasternodeMan::AskForMN(CNode* pnode, const CTxIn &vin)\n {\n     if(!pnode) return;\n \n-    std::map<COutPoint, int64_t>::iterator it = mWeAskedForMasternodeListEntry.find(vin.prevout);\n-    if (it != mWeAskedForMasternodeListEntry.end() && GetTime() < (*it).second) {\n-        // we've asked recently, should not repeat too often or we could get banned\n-        return;\n-    }\n+    LOCK(cs);\n \n-    // ask for the mnb info once from the node that sent mnp\n+    std::map<COutPoint, std::map<CNetAddr, int64_t> >::iterator it1 = mWeAskedForMasternodeListEntry.find(vin.prevout);\n+    if (it1 != mWeAskedForMasternodeListEntry.end()) {\n+        std::map<CNetAddr, int64_t>::iterator it2 = it1->second.find(pnode->addr);\n+        if (it2 != it1->second.end()) {\n+            if (GetTime() < it2->second) {\n+                // we've asked recently, should not repeat too often or we could get banned\n+                return;\n+            }\n+            // we asked this node for this outpoint but it's ok to ask again already\n+            LogPrintf(\"CMasternodeMan::AskForMN -- Asking same peer %s for missing masternode entry again: %s\\n\", pnode->addr.ToString(), vin.prevout.ToStringShort());\n+        } else {\n+            // we already asked for this outpoint but not this node\n+            LogPrintf(\"CMasternodeMan::AskForMN -- Asking new peer %s for missing masternode entry: %s\\n\", pnode->addr.ToString(), vin.prevout.ToStringShort());\n+        }\n+    } else {\n+        // we never asked any node for this outpoint\n+        LogPrintf(\"CMasternodeMan::AskForMN -- Asking peer %s for missing masternode entry for the first time: %s\\n\", pnode->addr.ToString(), vin.prevout.ToStringShort());\n+    }\n+    mWeAskedForMasternodeListEntry[vin.prevout][pnode->addr] = GetTime() + DSEG_UPDATE_SECONDS;\n \n-    LogPrintf(\"CMasternodeMan::AskForMN -- Asking node for missing masternode entry: %s\\n\", vin.prevout.ToStringShort());\n     pnode->PushMessage(NetMsgType::DSEG, vin);\n-    mWeAskedForMasternodeListEntry[vin.prevout] = GetTime() + DSEG_UPDATE_SECONDS;;\n }\n \n void CMasternodeMan::Check()\n@@ -214,9 +226,17 @@ void CMasternodeMan::CheckAndRemove()\n         }\n \n         // check which Masternodes we've asked for\n-        std::map<COutPoint, int64_t>::iterator it2 = mWeAskedForMasternodeListEntry.begin();\n+        std::map<COutPoint, std::map<CNetAddr, int64_t> >::iterator it2 = mWeAskedForMasternodeListEntry.begin();\n         while(it2 != mWeAskedForMasternodeListEntry.end()){\n-            if((*it2).second < GetTime()){\n+            std::map<CNetAddr, int64_t>::iterator it3 = it2->second.begin();\n+            while(it3 != it2->second.end()){\n+                if(it3->second < GetTime()){\n+                    it2->second.erase(it3++);\n+                } else {\n+                    ++it3;\n+                }\n+            }\n+            if(it2->second.empty()) {\n                 mWeAskedForMasternodeListEntry.erase(it2++);\n             } else {\n                 ++it2;"
      },
      {
        "sha": "57e0aa173a30f9742a6b1062a3951e3fe062e2b4",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
        "patch": "@@ -117,7 +117,7 @@ class CMasternodeMan\n     // who we asked for the Masternode list and the last time\n     std::map<CNetAddr, int64_t> mWeAskedForMasternodeList;\n     // which Masternodes we've asked for\n-    std::map<COutPoint, int64_t> mWeAskedForMasternodeListEntry;\n+    std::map<COutPoint, std::map<CNetAddr, int64_t> > mWeAskedForMasternodeListEntry;\n     // who we asked for the masternode verification\n     std::map<CNetAddr, CMasternodeVerification> mWeAskedForVerification;\n "
      }
    ]
  },
  {
    "sha": "c438e745636502c833094f3cfad8abe52d6388c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDM4ZTc0NTYzNjUwMmM4MzMwOTRmM2NmYWQ4YWJlNTJkNjM4OGM1",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2016-12-22T03:20:05Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-22T03:20:05Z"
      },
      "message": "Improve governance debugging information (#1221)\n\n* Add missing MN vin to error message for missing masternodes\r\n\r\n* Added creation time and masternode vin to gobject output",
      "tree": {
        "sha": "2832f65c994a7a217a95c604fca526c380684d1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2832f65c994a7a217a95c604fca526c380684d1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c438e745636502c833094f3cfad8abe52d6388c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c438e745636502c833094f3cfad8abe52d6388c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c438e745636502c833094f3cfad8abe52d6388c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c438e745636502c833094f3cfad8abe52d6388c5/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c6c0d8b7ea7c65c7c04bfe53bc9180b0bc87682"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c9afe7c5d6ee140a11440962bcdecec12bd5c376",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c438e745636502c833094f3cfad8abe52d6388c5/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c438e745636502c833094f3cfad8abe52d6388c5/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=c438e745636502c833094f3cfad8abe52d6388c5",
        "patch": "@@ -177,7 +177,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         if(fMasternodeMissing) {\n             mapMasternodeOrphanObjects.insert(std::make_pair(nHash, object_time_pair_t(govobj, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME)));\n-            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Missing masternode for: %s\\n\", strHash);\n+            LogPrintf(\"MNGOVERNANCEOBJECT -- Missing masternode for: %s, strError = %s\\n\", strHash, strError);\n             // fIsValid must also be false here so we will return early in the next if block\n         }\n         if(!fIsValid) {"
      },
      {
        "sha": "7fff59801603910ba3a16c16faa59db1e8740f36",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c438e745636502c833094f3cfad8abe52d6388c5/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c438e745636502c833094f3cfad8abe52d6388c5/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=c438e745636502c833094f3cfad8abe52d6388c5",
        "patch": "@@ -592,6 +592,11 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             bObj.push_back(Pair(\"DataString\",  pGovObj->GetDataAsString()));\n             bObj.push_back(Pair(\"Hash\",  pGovObj->GetHash().ToString()));\n             bObj.push_back(Pair(\"CollateralHash\",  pGovObj->GetCollateralHash().ToString()));\n+            bObj.push_back(Pair(\"CreationTime\", pGovObj->GetCreationTime()));\n+            const CTxIn& masternodeVin = pGovObj->GetMasternodeVin();\n+            if(masternodeVin != CTxIn()) {\n+                bObj.push_back(Pair(\"SigningMasternode\", masternodeVin.prevout.ToStringShort()));\n+            }\n \n             // REPORT STATUS FOR FUNDING VOTES SPECIFICALLY\n             bObj.push_back(Pair(\"AbsoluteYesCount\",  pGovObj->GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING)));\n@@ -638,6 +643,11 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         objResult.push_back(Pair(\"DataString\",  pGovObj->GetDataAsString()));\n         objResult.push_back(Pair(\"Hash\",  pGovObj->GetHash().ToString()));\n         objResult.push_back(Pair(\"CollateralHash\",  pGovObj->GetCollateralHash().ToString()));\n+        objResult.push_back(Pair(\"CreationTime\", pGovObj->GetCreationTime()));\n+        const CTxIn& masternodeVin = pGovObj->GetMasternodeVin();\n+        if(masternodeVin != CTxIn()) {\n+            objResult.push_back(Pair(\"SigningMasternode\", masternodeVin.prevout.ToStringShort()));\n+        }\n \n         // SHOW (MUCH MORE) INFORMATION ABOUT VOTES FOR GOVERNANCE OBJECT (THAN LIST/DIFF ABOVE)\n         // -- FUNDING VOTING RESULTS"
      }
    ]
  },
  {
    "sha": "70b374062b8f0ce448e3d75c7e47d606833bf3de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGIzNzQwNjJiOGYwY2U0NDhlM2Q3NWM3ZTQ3ZDYwNjgzM2JmM2Rl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-24T02:49:13Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-24T02:49:13Z"
      },
      "message": "[WIP] Few mn list sync changes (#1223)\n\n* Few mn list sync changes:\r\n- add more mn states\r\n- only remove spent\r\n- send mn ping in addition to mn announce on sync\r\n- manage mn announces more carefully\r\n- expire mns created from broadcasts with invalid ping\r\n- old fWaitForPing logic for old nodes, should be helpful during migration period\r\n\r\nThis also adjusts active mn auto-start logic accordingly.",
      "tree": {
        "sha": "6e8350a2bbeda6d31a2334dfab86f39bca18adc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e8350a2bbeda6d31a2334dfab86f39bca18adc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70b374062b8f0ce448e3d75c7e47d606833bf3de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b374062b8f0ce448e3d75c7e47d606833bf3de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70b374062b8f0ce448e3d75c7e47d606833bf3de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b374062b8f0ce448e3d75c7e47d606833bf3de/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c438e745636502c833094f3cfad8abe52d6388c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c438e745636502c833094f3cfad8abe52d6388c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c438e745636502c833094f3cfad8abe52d6388c5"
      }
    ],
    "stats": {
      "total": 307,
      "additions": 189,
      "deletions": 118
    },
    "files": [
      {
        "sha": "cd8350173a7d094086db8da6666c86cc1584662e",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=70b374062b8f0ce448e3d75c7e47d606833bf3de",
        "patch": "@@ -243,21 +243,18 @@ void CActiveMasternode::ManageStateRemote()\n             LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n             return;\n         }\n-        vin = infoMn.vin;\n-        service = infoMn.addr;\n-        fPingerEnabled = true;\n-        if(((infoMn.nActiveState == CMasternode::MASTERNODE_ENABLED) ||\n-            (infoMn.nActiveState == CMasternode::MASTERNODE_PRE_ENABLED) ||\n-            (infoMn.nActiveState == CMasternode::MASTERNODE_WATCHDOG_EXPIRED))) {\n-            if(nState != ACTIVE_MASTERNODE_STARTED) {\n-                LogPrintf(\"CActiveMasternode::ManageStateRemote -- STARTED!\\n\");\n-            }\n-            nState = ACTIVE_MASTERNODE_STARTED;\n-        }\n-        else {\n+        if(!CMasternode::IsValidStateForAutoStart(infoMn.nActiveState)) {\n             nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n             strNotCapableReason = strprintf(\"Masternode in %s state\", CMasternode::StateToString(infoMn.nActiveState));\n             LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n+            return;\n+        }\n+        if(nState != ACTIVE_MASTERNODE_STARTED) {\n+            LogPrintf(\"CActiveMasternode::ManageStateRemote -- STARTED!\\n\");\n+            vin = infoMn.vin;\n+            service = infoMn.addr;\n+            fPingerEnabled = true;\n+            nState = ACTIVE_MASTERNODE_STARTED;\n         }\n     }\n     else {\n@@ -301,6 +298,12 @@ void CActiveMasternode::ManageStateLocal()\n             return;\n         }\n \n+        fPingerEnabled = true;\n+        nState = ACTIVE_MASTERNODE_STARTED;\n+\n+        masternode_info_t infoMn = mnodeman.GetMasternodeInfo(pubKeyMasternode);\n+        if(infoMn.fInfoValid && CMasternode::IsValidStateForAutoStart(infoMn.nActiveState)) return; // sending ping should be enough\n+\n         //update to masternode list\n         LogPrintf(\"CActiveMasternode::ManageStateLocal -- Update Masternode List\\n\");\n         mnodeman.UpdateMasternodeList(mnb);\n@@ -309,7 +312,5 @@ void CActiveMasternode::ManageStateLocal()\n         //send to all peers\n         LogPrintf(\"CActiveMasternode::ManageStateLocal -- Relay broadcast, vin=%s\\n\", vin.ToString());\n         mnb.Relay();\n-        fPingerEnabled = true;\n-        nState = ACTIVE_MASTERNODE_STARTED;\n     }\n }"
      },
      {
        "sha": "3c962b06a57bb23bfd0af25ab6a71d4db8367f6f",
        "filename": "src/activemasternode.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/activemasternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/activemasternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.h?ref=70b374062b8f0ce448e3d75c7e47d606833bf3de",
        "patch": "@@ -55,6 +55,10 @@ class CActiveMasternode\n     CActiveMasternode()\n         : eType(MASTERNODE_UNKNOWN),\n           fPingerEnabled(false),\n+          pubKeyMasternode(),\n+          keyMasternode(),\n+          vin(),\n+          service(),\n           nState(ACTIVE_MASTERNODE_INITIAL)\n     {}\n "
      },
      {
        "sha": "6c4929a6e028eabf77387af0ae319a05f0653005",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 104,
        "deletions": 53,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=70b374062b8f0ce448e3d75c7e47d606833bf3de",
        "patch": "@@ -94,7 +94,7 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n     nTimeLastChecked(0),\n     nTimeLastPaid(0),\n     nTimeLastWatchdogVote(mnb.sigTime),\n-    nActiveState(MASTERNODE_ENABLED),\n+    nActiveState(mnb.nActiveState),\n     nCacheCollateralBlock(0),\n     nBlockLastPaid(0),\n     nProtocolVersion(mnb.nProtocolVersion),\n@@ -121,7 +121,7 @@ bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n     nTimeLastChecked = 0;\n     nTimeLastWatchdogVote = mnb.sigTime;\n     int nDos = 0;\n-    if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(nDos))) {\n+    if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(this, nDos))) {\n         lastPing = mnb.lastPing;\n         mnodeman.mapSeenMasternodePing.insert(std::make_pair(lastPing.GetHash(), lastPing));\n     }\n@@ -166,8 +166,6 @@ void CMasternode::Check(bool fForce)\n {\n     LOCK(cs);\n \n-    static int64_t nTimeStart = GetTime();\n-\n     if(ShutdownRequested()) return;\n \n     if(!fForce && (GetTime() - nTimeLastChecked < MASTERNODE_CHECK_SECONDS)) return;\n@@ -176,7 +174,7 @@ void CMasternode::Check(bool fForce)\n     LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state\\n\", vin.prevout.ToStringShort(), GetStateString());\n \n     //once spent, stop doing the checks\n-    if(nActiveState == MASTERNODE_OUTPOINT_SPENT) return;\n+    if(IsOutpointSpent()) return;\n \n     int nHeight = 0;\n     if(!fUnitTest) {\n@@ -195,7 +193,7 @@ void CMasternode::Check(bool fForce)\n         nHeight = chainActive.Height();\n     }\n \n-    if(nActiveState == MASTERNODE_POSE_BAN) {\n+    if(IsPoSeBanned()) {\n         if(nHeight < nPoSeBanHeight) return; // too early?\n         // Otherwise give it a chance to proceed further to do all the usual checks and to change its state.\n         // Masternode still will be on the edge and can be banned back easily if it keeps ignoring mnverify\n@@ -211,15 +209,15 @@ void CMasternode::Check(bool fForce)\n     }\n \n     int nActiveStatePrev = nActiveState;\n+    bool fOurMasternode = fMasterNode && activeMasternode.pubKeyMasternode == pubKeyMasternode;\n \n                    // masternode doesn't meet payment protocol requirements ...\n-    bool fRemove = nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n+    bool fRequireUpdate = nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto() ||\n                    // or it's our own node and we just updated it to the new protocol but we are still waiting for activation ...\n-                   (pubKeyMasternode == activeMasternode.pubKeyMasternode && nProtocolVersion < PROTOCOL_VERSION);\n+                   (fOurMasternode && nProtocolVersion < PROTOCOL_VERSION);\n \n-    if(fRemove) {\n-        // it should be removed from the list\n-        nActiveState = MASTERNODE_REMOVE;\n+    if(fRequireUpdate) {\n+        nActiveState = MASTERNODE_UPDATE_REQUIRED;\n         if(nActiveStatePrev != nActiveState) {\n             LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n             // RESCAN AFFECTED VOTES\n@@ -228,34 +226,69 @@ void CMasternode::Check(bool fForce)\n         return;\n     }\n \n-    bool fWatchdogActive = mnodeman.IsWatchdogActive();\n-    bool fWatchdogExpired = (fWatchdogActive && ((GetTime() - nTimeLastWatchdogVote) > MASTERNODE_WATCHDOG_MAX_SECONDS));\n+    // keep old masternodes on start, give them a chance to receive updates...\n+    bool fWaitForPing = !masternodeSync.IsMasternodeListSynced() && !IsPingedWithin(MASTERNODE_MIN_MNP_SECONDS);\n \n-    LogPrint(\"masternode\", \"CMasternode::Check -- vin %s, nTimeLastWatchdogVote %d, GetTime() %d, fWatchdogExpired %d\\n\",\n-            vin.prevout.ToStringShort(), nTimeLastWatchdogVote, GetTime(), fWatchdogExpired);\n+    //\n+    // REMOVE AFTER MIGRATION TO 12.1\n+    //\n+    // Old nodes don't send pings on dseg, so they could switch to one of the expired states\n+    // if we were offline for too long even if they are actually enabled for the rest\n+    // of the network. Postpone their check for MASTERNODE_MIN_MNP_SECONDS seconds.\n+    // This could be usefull for 12.1 migration, can be removed after it's done.\n+    static int64_t nTimeStart = GetTime();\n+    if(nProtocolVersion < 70204) {\n+        if(!masternodeSync.IsMasternodeListSynced()) nTimeStart = GetTime();\n+        fWaitForPing = GetTime() - nTimeStart < MASTERNODE_MIN_MNP_SECONDS;\n+    }\n+    //\n+    // END REMOVE\n+    //\n \n-    if(fWatchdogExpired) {\n-        nActiveState = MASTERNODE_WATCHDOG_EXPIRED;\n-        if(nActiveStatePrev != nActiveState) {\n-            LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+    if(fWaitForPing && !fOurMasternode) {\n+        // ...but if it was already expired before the initial check - return right away\n+        if(IsExpired() || IsWatchdogExpired() || IsNewStartRequired()) {\n+            LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state, waiting for ping\\n\", vin.prevout.ToStringShort(), GetStateString());\n+            return;\n         }\n-        return;\n     }\n \n-    // keep old masternodes on start, give them a chance to receive an updated ping without removal/expiry\n-    if(!masternodeSync.IsMasternodeListSynced()) nTimeStart = GetTime();\n-    bool fWaitForPing = (GetTime() - nTimeStart < MASTERNODE_MIN_MNP_SECONDS);\n-    // but if it was already expired before the check - don't wait, check it again now\n-    if(nActiveState == MASTERNODE_EXPIRED) fWaitForPing = false;\n+    // don't expire if we are still in \"waiting for ping\" mode unless it's our own masternode\n+    if(!fWaitForPing || fOurMasternode) {\n \n-    if(!fWaitForPing && !IsPingedWithin(MASTERNODE_EXPIRATION_SECONDS)) {\n-        nActiveState = MASTERNODE_EXPIRED;\n-        if(nActiveStatePrev != nActiveState) {\n-            LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n-            // RESCAN AFFECTED VOTES\n-            FlagGovernanceItemsAsDirty();\n+        if(!IsPingedWithin(MASTERNODE_NEW_START_REQUIRED_SECONDS)) {\n+            nActiveState = MASTERNODE_NEW_START_REQUIRED;\n+            if(nActiveStatePrev != nActiveState) {\n+                LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+                // RESCAN AFFECTED VOTES\n+                FlagGovernanceItemsAsDirty();\n+            }\n+            return;\n+        }\n+\n+        bool fWatchdogActive = masternodeSync.IsSynced() && mnodeman.IsWatchdogActive();\n+        bool fWatchdogExpired = (fWatchdogActive && ((GetTime() - nTimeLastWatchdogVote) > MASTERNODE_WATCHDOG_MAX_SECONDS));\n+\n+        LogPrint(\"masternode\", \"CMasternode::Check -- outpoint=%s, nTimeLastWatchdogVote=%d, GetTime()=%d, fWatchdogExpired=%d\\n\",\n+                vin.prevout.ToStringShort(), nTimeLastWatchdogVote, GetTime(), fWatchdogExpired);\n+\n+        if(fWatchdogExpired) {\n+            nActiveState = MASTERNODE_WATCHDOG_EXPIRED;\n+            if(nActiveStatePrev != nActiveState) {\n+                LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+            }\n+            return;\n+        }\n+\n+        if(!IsPingedWithin(MASTERNODE_EXPIRATION_SECONDS)) {\n+            nActiveState = MASTERNODE_EXPIRED;\n+            if(nActiveStatePrev != nActiveState) {\n+                LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n+                // RESCAN AFFECTED VOTES\n+                FlagGovernanceItemsAsDirty();\n+            }\n+            return;\n         }\n-        return;\n     }\n \n     if(lastPing.sigTime - sigTime < MASTERNODE_MIN_MNP_SECONDS) {\n@@ -306,14 +339,15 @@ masternode_info_t CMasternode::GetInfo()\n std::string CMasternode::StateToString(int nStateIn)\n {\n     switch(nStateIn) {\n-        case CMasternode::MASTERNODE_PRE_ENABLED:       return \"PRE_ENABLED\";\n-        case CMasternode::MASTERNODE_ENABLED:           return \"ENABLED\";\n-        case CMasternode::MASTERNODE_EXPIRED:           return \"EXPIRED\";\n-        case CMasternode::MASTERNODE_OUTPOINT_SPENT:    return \"OUTPOINT_SPENT\";\n-        case CMasternode::MASTERNODE_REMOVE:            return \"REMOVE\";\n-        case CMasternode::MASTERNODE_WATCHDOG_EXPIRED:  return \"WATCHDOG_EXPIRED\";\n-        case CMasternode::MASTERNODE_POSE_BAN:          return \"POSE_BAN\";\n-        default:                                        return \"UNKNOWN\";\n+        case MASTERNODE_PRE_ENABLED:            return \"PRE_ENABLED\";\n+        case MASTERNODE_ENABLED:                return \"ENABLED\";\n+        case MASTERNODE_EXPIRED:                return \"EXPIRED\";\n+        case MASTERNODE_OUTPOINT_SPENT:         return \"OUTPOINT_SPENT\";\n+        case MASTERNODE_UPDATE_REQUIRED:        return \"UPDATE_REQUIRED\";\n+        case MASTERNODE_WATCHDOG_EXPIRED:       return \"WATCHDOG_EXPIRED\";\n+        case MASTERNODE_NEW_START_REQUIRED:     return \"NEW_START_REQUIRED\";\n+        case MASTERNODE_POSE_BAN:               return \"POSE_BAN\";\n+        default:                                return \"UNKNOWN\";\n     }\n }\n \n@@ -490,7 +524,8 @@ bool CMasternodeBroadcast::SimpleCheck(int& nDos)\n \n     // empty ping or incorrect sigTime/unknown blockhash\n     if(lastPing == CMasternodePing() || !lastPing.SimpleCheck(nDos)) {\n-        return false;\n+        // one of us is probably forked or smth, just mark it as expired and check the rest of the rules\n+        nActiveState = MASTERNODE_EXPIRED;\n     }\n \n     if(nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto()) {\n@@ -518,11 +553,7 @@ bool CMasternodeBroadcast::SimpleCheck(int& nDos)\n \n     if(!vin.scriptSig.empty()) {\n         LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- Ignore Not Empty ScriptSig %s\\n\",vin.ToString());\n-        return false;\n-    }\n-\n-    if (!CheckSignature(nDos)) {\n-        LogPrintf(\"CMasternodeBroadcast::SimpleCheck -- CheckSignature() failed, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        nDos = 100;\n         return false;\n     }\n \n@@ -536,10 +567,12 @@ bool CMasternodeBroadcast::SimpleCheck(int& nDos)\n \n bool CMasternodeBroadcast::Update(CMasternode* pmn, int& nDos)\n {\n+    nDos = 0;\n+\n     if(pmn->sigTime == sigTime) {\n         // mapSeenMasternodeBroadcast in CMasternodeMan::CheckMnbAndUpdateMasternodeList should filter legit duplicates\n         // but this still can happen if we just started, which is ok, just do nothing here.\n-        return true;\n+        return false;\n     }\n \n     // this broadcast is older than the one that we already have - it's bad and should never happen\n@@ -560,11 +593,16 @@ bool CMasternodeBroadcast::Update(CMasternode* pmn, int& nDos)\n \n     // IsVnAssociatedWithPubkey is validated once in CheckOutpoint, after that they just need to match\n     if(pmn->pubKeyCollateralAddress != pubKeyCollateralAddress) {\n-        LogPrintf(\"CMasternodeMan::Update -- Got mismatched pubKeyCollateralAddress and vin\\n\");\n+        LogPrintf(\"CMasternodeBroadcast::Update -- Got mismatched pubKeyCollateralAddress and vin\\n\");\n         nDos = 33;\n         return false;\n     }\n \n+    if (!CheckSignature(nDos)) {\n+        LogPrintf(\"CMasternodeBroadcast::Update -- CheckSignature() failed, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        return false;\n+    }\n+\n     // if ther was no masternode broadcast recently or if it matches our Masternode privkey...\n     if(!pmn->IsBroadcastedWithin(MASTERNODE_MIN_MNB_SECONDS) || (fMasterNode && pubKeyMasternode == activeMasternode.pubKeyMasternode)) {\n         // take the newest entry\n@@ -587,6 +625,11 @@ bool CMasternodeBroadcast::CheckOutpoint(int& nDos)\n         return false;\n     }\n \n+    if (!CheckSignature(nDos)) {\n+        LogPrintf(\"CMasternodeBroadcast::CheckOutpoint -- CheckSignature() failed, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        return false;\n+    }\n+\n     {\n         TRY_LOCK(cs_main, lockMain);\n         if(!lockMain) {\n@@ -813,7 +856,7 @@ bool CMasternodePing::SimpleCheck(int& nDos)\n     return true;\n }\n \n-bool CMasternodePing::CheckAndUpdate(int& nDos)\n+bool CMasternodePing::CheckAndUpdate(CMasternode* pmn, int& nDos)\n {\n     // don't ban by default\n     nDos = 0;\n@@ -822,22 +865,30 @@ bool CMasternodePing::CheckAndUpdate(int& nDos)\n         return false;\n     }\n \n+    if (pmn == NULL) {\n+        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- Couldn't find Masternode entry, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        return false;\n+    }\n+\n     {\n         LOCK(cs_main);\n         BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n         if ((*mi).second && (*mi).second->nHeight < chainActive.Height() - 24) {\n             LogPrintf(\"CMasternodePing::CheckAndUpdate -- Masternode ping is invalid, block hash is too old: masternode=%s  blockHash=%s\\n\", vin.prevout.ToStringShort(), blockHash.ToString());\n+            // nDos = 1;\n             return false;\n         }\n     }\n \n     LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- New ping: masternode=%s  blockHash=%s  sigTime=%d\\n\", vin.prevout.ToStringShort(), blockHash.ToString(), sigTime);\n \n-    // see if we have this Masternode\n-    CMasternode* pmn = mnodeman.Find(vin);\n+    if (pmn->IsUpdateRequired()) {\n+        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- masternode protocol is outdated, masternode=%s\\n\", vin.prevout.ToStringShort());\n+        return false;\n+    }\n \n-    if (pmn == NULL || pmn->nProtocolVersion < mnpayments.GetMinMasternodePaymentsProto()) {\n-        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- Couldn't find compatible Masternode entry, masternode=%s\\n\", vin.prevout.ToStringShort());\n+    if (pmn->IsNewStartRequired()) {\n+        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- masternode is completely expired, new start is required, masternode=%s\\n\", vin.prevout.ToStringShort());\n         return false;\n     }\n "
      },
      {
        "sha": "518b90e41bd3428b45087ac1552d8ce5f8d467cf",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 28,
        "deletions": 13,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=70b374062b8f0ce448e3d75c7e47d606833bf3de",
        "patch": "@@ -15,14 +15,14 @@ class CMasternode;\n class CMasternodeBroadcast;\n class CMasternodePing;\n \n-static const int MASTERNODE_MIN_MNP_SECONDS         = 10 * 60;\n-static const int MASTERNODE_MIN_MNB_SECONDS         =  5 * 60;\n-static const int MASTERNODE_EXPIRATION_SECONDS      = 65 * 60;\n-static const int MASTERNODE_REMOVAL_SECONDS         = 75 * 60;\n-static const int MASTERNODE_CHECK_SECONDS           = 5;\n-static const int MASTERNODE_WATCHDOG_MAX_SECONDS    = 2 * 60 * 60;\n-\n-static const int MASTERNODE_POSE_BAN_MAX_SCORE      = 5;\n+static const int MASTERNODE_CHECK_SECONDS               =   5;\n+static const int MASTERNODE_MIN_MNB_SECONDS             =   5 * 60;\n+static const int MASTERNODE_MIN_MNP_SECONDS             =  10 * 60;\n+static const int MASTERNODE_EXPIRATION_SECONDS          =  65 * 60;\n+static const int MASTERNODE_WATCHDOG_MAX_SECONDS        = 120 * 60;\n+static const int MASTERNODE_NEW_START_REQUIRED_SECONDS  = 180 * 60;\n+\n+static const int MASTERNODE_POSE_BAN_MAX_SCORE          = 5;\n //\n // The Masternode Ping Class : Contains a different serialize method for sending pings from masternodes throughout the network\n //\n@@ -76,10 +76,12 @@ class CMasternodePing\n         return ss.GetHash();\n     }\n \n+    bool IsExpired() { return GetTime() - sigTime > MASTERNODE_NEW_START_REQUIRED_SECONDS; }\n+\n     bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n     bool CheckSignature(CPubKey& pubKeyMasternode, int &nDos);\n     bool SimpleCheck(int& nDos);\n-    bool CheckAndUpdate(int& nDos);\n+    bool CheckAndUpdate(CMasternode* pmn, int& nDos);\n     void Relay();\n \n     CMasternodePing& operator=(CMasternodePing from)\n@@ -98,8 +100,8 @@ class CMasternodePing\n \n };\n \n-struct masternode_info_t {\n-\n+struct masternode_info_t\n+{\n     masternode_info_t()\n         : vin(),\n           addr(),\n@@ -145,8 +147,9 @@ class CMasternode\n         MASTERNODE_ENABLED,\n         MASTERNODE_EXPIRED,\n         MASTERNODE_OUTPOINT_SPENT,\n-        MASTERNODE_REMOVE,\n+        MASTERNODE_UPDATE_REQUIRED,\n         MASTERNODE_WATCHDOG_EXPIRED,\n+        MASTERNODE_NEW_START_REQUIRED,\n         MASTERNODE_POSE_BAN\n     };\n \n@@ -256,9 +259,21 @@ class CMasternode\n     bool IsEnabled() { return nActiveState == MASTERNODE_ENABLED; }\n     bool IsPreEnabled() { return nActiveState == MASTERNODE_PRE_ENABLED; }\n     bool IsPoSeBanned() { return nActiveState == MASTERNODE_POSE_BAN; }\n+    // NOTE: this one relies on nPoSeBanScore, not on nActiveState as everything else here\n     bool IsPoSeVerified() { return nPoSeBanScore <= -MASTERNODE_POSE_BAN_MAX_SCORE; }\n-\n+    bool IsExpired() { return nActiveState == MASTERNODE_EXPIRED; }\n+    bool IsOutpointSpent() { return nActiveState == MASTERNODE_OUTPOINT_SPENT; }\n+    bool IsUpdateRequired() { return nActiveState == MASTERNODE_UPDATE_REQUIRED; }\n     bool IsWatchdogExpired() { return nActiveState == MASTERNODE_WATCHDOG_EXPIRED; }\n+    bool IsNewStartRequired() { return nActiveState == MASTERNODE_NEW_START_REQUIRED; }\n+\n+    static bool IsValidStateForAutoStart(int nActiveStateIn)\n+    {\n+        return  nActiveStateIn == MASTERNODE_ENABLED ||\n+                nActiveStateIn == MASTERNODE_PRE_ENABLED ||\n+                nActiveStateIn == MASTERNODE_EXPIRED ||\n+                nActiveStateIn == MASTERNODE_WATCHDOG_EXPIRED;\n+    }\n \n     bool IsValidForPayment()\n     {"
      },
      {
        "sha": "2ad1216fd2c02090faf6c0edb02675c4655189d4",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b374062b8f0ce448e3d75c7e47d606833bf3de/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=70b374062b8f0ce448e3d75c7e47d606833bf3de",
        "patch": "@@ -165,7 +165,7 @@ void CMasternodeMan::Check()\n {\n     LOCK(cs);\n \n-    LogPrint(\"masternode\", \"CMasternodeMan::Check nLastWatchdogVoteTime = %d, IsWatchdogActive() = %d\\n\", nLastWatchdogVoteTime, IsWatchdogActive());\n+    LogPrint(\"masternode\", \"CMasternodeMan::Check -- nLastWatchdogVoteTime=%d, IsWatchdogActive()=%d\\n\", nLastWatchdogVoteTime, IsWatchdogActive());\n \n     BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n         mn.Check();\n@@ -184,17 +184,12 @@ void CMasternodeMan::CheckAndRemove()\n         // Remove inactive and outdated masternodes\n         std::vector<CMasternode>::iterator it = vMasternodes.begin();\n         while(it != vMasternodes.end()) {\n-            bool fRemove =  // If it's marked to be removed from the list by CMasternode::Check for whatever reason ...\n-                    (*it).nActiveState == CMasternode::MASTERNODE_REMOVE ||\n-                    // or collateral was spent ...\n-                    (*it).nActiveState == CMasternode::MASTERNODE_OUTPOINT_SPENT;\n-\n-            if (fRemove) {\n-                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing Masternode: %s  addr=%s  %i now\\n\", (*it).GetStatus(), (*it).addr.ToString(), size() - 1);\n+            // If collateral was spent ...\n+            if ((*it).IsOutpointSpent()) {\n+                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing Masternode: %s  addr=%s  %i now\\n\", (*it).GetStateString(), (*it).addr.ToString(), size() - 1);\n \n                 // erase all of the broadcasts we've seen from this txin, ...\n                 mapSeenMasternodeBroadcast.erase(CMasternodeBroadcast(*it).GetHash());\n-                // allow us to ask for this masternode again if we see another ping ...\n                 mWeAskedForMasternodeListEntry.erase((*it).vin.prevout);\n \n                 // and finally remove it from the list\n@@ -243,30 +238,21 @@ void CMasternodeMan::CheckAndRemove()\n             }\n         }\n \n-        std::map<CNetAddr, CMasternodeVerification>::iterator itv1 = mWeAskedForVerification.begin();\n-        while(itv1 != mWeAskedForVerification.end()){\n-            if(itv1->second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS) {\n-                mWeAskedForVerification.erase(itv1++);\n-            } else {\n-                ++itv1;\n-            }\n-        }\n-\n-        // remove expired mapSeenMasternodeBroadcast\n-        std::map<uint256, CMasternodeBroadcast>::iterator it3 = mapSeenMasternodeBroadcast.begin();\n-        while(it3 != mapSeenMasternodeBroadcast.end()){\n-            if((*it3).second.lastPing.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n-                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode broadcast: hash=%s\\n\", (*it3).second.GetHash().ToString());\n-                mapSeenMasternodeBroadcast.erase(it3++);\n+        std::map<CNetAddr, CMasternodeVerification>::iterator it3 = mWeAskedForVerification.begin();\n+        while(it3 != mWeAskedForVerification.end()){\n+            if(it3->second.nBlockHeight < pCurrentBlockIndex->nHeight - MAX_POSE_BLOCKS) {\n+                mWeAskedForVerification.erase(it3++);\n             } else {\n                 ++it3;\n             }\n         }\n \n+        // NOTE: do not expire mapSeenMasternodeBroadcast entries here, clean them on mnb updates!\n+\n         // remove expired mapSeenMasternodePing\n         std::map<uint256, CMasternodePing>::iterator it4 = mapSeenMasternodePing.begin();\n         while(it4 != mapSeenMasternodePing.end()){\n-            if((*it4).second.sigTime < GetTime() - MASTERNODE_REMOVAL_SECONDS*2){\n+            if((*it4).second.IsExpired()) {\n                 LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing expired Masternode ping: hash=%s\\n\", (*it4).second.GetHash().ToString());\n                 mapSeenMasternodePing.erase(it4++);\n             } else {\n@@ -530,7 +516,7 @@ CMasternode* CMasternodeMan::GetNextMasternodeInQueueForPayment(int nBlockHeight\n     //  -- This doesn't look at who is being paid in the +8-10 blocks, allowing for double payments very rarely\n     //  -- 1/100 payments should be a double payment on mainnet - (1/(3000/10))*2\n     //  -- (chance per block * chances before IsScheduled will fire)\n-    int nTenthNetwork = CountEnabled()/10;\n+    int nTenthNetwork = nMnCount/10;\n     int nCountTenth = 0;\n     arith_uint256 nHighest = 0;\n     BOOST_FOREACH (PAIRTYPE(int, CMasternode*)& s, vecMasternodeLastPaid){\n@@ -716,6 +702,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         CMasternodeBroadcast mnb;\n         vRecv >> mnb;\n \n+        LogPrint(\"masternode\", \"MNANNOUNCE -- Masternode announce, masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n+\n         // backward compatibility patch\n         if(pfrom->nVersion < 70204) {\n             int64_t nLastDsqDummy;\n@@ -735,8 +723,6 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n             NotifyMasternodeUpdates();\n         }\n     } else if (strCommand == NetMsgType::MNPING) { //Masternode Ping\n-        // ignore masternode pings until masternode list is synced\n-        if (!masternodeSync.IsMasternodeListSynced()) return;\n \n         CMasternodePing mnp;\n         vRecv >> mnp;\n@@ -751,17 +737,21 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n         LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s new\\n\", mnp.vin.prevout.ToStringShort());\n \n+        // see if we have this Masternode\n+        CMasternode* pmn = mnodeman.Find(mnp.vin);\n+\n+        // too late, new MNANNOUNCE is required\n+        if(pmn && pmn->IsNewStartRequired()) return;\n+\n         int nDos = 0;\n-        if(mnp.CheckAndUpdate(nDos)) return;\n+        if(mnp.CheckAndUpdate(pmn, nDos)) return;\n \n         if(nDos > 0) {\n             // if anything significant failed, mark that node\n             Misbehaving(pfrom->GetId(), nDos);\n-        } else {\n-            // if nothing significant failed, search existing Masternode list\n-            CMasternode* pmn = Find(mnp.vin);\n-            // if it's known, don't ask for the mnb, just return\n-            if(pmn != NULL) return;\n+        } else if(pmn != NULL) {\n+            // nothing significant failed, mn is a known one too\n+            return;\n         }\n \n         // something significant is broken or mn is unknown,\n@@ -810,6 +800,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n             CMasternodeBroadcast mnb = CMasternodeBroadcast(mn);\n             uint256 hash = mnb.GetHash();\n             pfrom->PushInventory(CInv(MSG_MASTERNODE_ANNOUNCE, hash));\n+            pfrom->PushInventory(CInv(MSG_MASTERNODE_PING, mn.lastPing.GetHash()));\n             nInvCount++;\n \n             if (!mapSeenMasternodeBroadcast.count(hash)) {\n@@ -1300,8 +1291,12 @@ void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb)\n         if(Add(mn)) {\n             masternodeSync.AddedMasternodeList();\n         }\n-    } else if(pmn->UpdateFromNewBroadcast(mnb)) {\n-        masternodeSync.AddedMasternodeList();\n+    } else {\n+        CMasternodeBroadcast mnbOld = mapSeenMasternodeBroadcast[CMasternodeBroadcast(*pmn).GetHash()];\n+        if(pmn->UpdateFromNewBroadcast(mnb)) {\n+            masternodeSync.AddedMasternodeList();\n+            mapSeenMasternodeBroadcast.erase(mnbOld.GetHash());\n+        }\n     }\n }\n \n@@ -1314,6 +1309,7 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n     LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n \n     if(mapSeenMasternodeBroadcast.count(mnb.GetHash())) { //seen\n+        LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s seen\\n\", mnb.vin.prevout.ToStringShort());\n         return true;\n     }\n     mapSeenMasternodeBroadcast.insert(std::make_pair(mnb.GetHash(), mnb));\n@@ -1328,10 +1324,14 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n     // search Masternode list\n     CMasternode* pmn = Find(mnb.vin);\n     if(pmn) {\n+        CMasternodeBroadcast mnbOld = mapSeenMasternodeBroadcast[CMasternodeBroadcast(*pmn).GetHash()];\n         if(!mnb.Update(pmn, nDos)) {\n             LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- Update() failed, masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n             return false;\n         }\n+        if(mnb.GetHash() != mnbOld.GetHash()) {\n+            mapSeenMasternodeBroadcast.erase(mnbOld.GetHash());\n+        }\n     } else {\n         if(mnb.CheckOutpoint(nDos)) {\n             Add(mnb);\n@@ -1471,7 +1471,7 @@ int CMasternodeMan::GetMasternodeState(const CTxIn& vin)\n     LOCK(cs);\n     CMasternode* pMN = Find(vin);\n     if(!pMN)  {\n-        return CMasternode::MASTERNODE_REMOVE;\n+        return CMasternode::MASTERNODE_NEW_START_REQUIRED;\n     }\n     return pMN->nActiveState;\n }\n@@ -1481,7 +1481,7 @@ int CMasternodeMan::GetMasternodeState(const CPubKey& pubKeyMasternode)\n     LOCK(cs);\n     CMasternode* pMN = Find(pubKeyMasternode);\n     if(!pMN)  {\n-        return CMasternode::MASTERNODE_REMOVE;\n+        return CMasternode::MASTERNODE_NEW_START_REQUIRED;\n     }\n     return pMN->nActiveState;\n }"
      }
    ]
  },
  {
    "sha": "34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGZkOGRhZjVhNTlmZTEyMmZjMGQ5NTMyNjRmMDdlMjFmZDM1YTRi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-26T06:44:36Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-26T06:44:36Z"
      },
      "message": "Fix sync issues (#1225)\n\n* Store time we saw mnb last time, bump sync timeout\r\nif we received seen mnb but we are too close to MASTERNODE_NEW_START_REQUIRED_SECONDS\r\n\r\n* Reset blockchain sync status if new blocks were accepted during sync\r\n\r\n* Add some debug log output\r\n\r\n* wait for at least one new block to be accepted\r\n\r\n* bump CGovernanceManager-Version",
      "tree": {
        "sha": "c0824af653a28997999ca74ae1256a8a253f61b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0824af653a28997999ca74ae1256a8a253f61b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70b374062b8f0ce448e3d75c7e47d606833bf3de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b374062b8f0ce448e3d75c7e47d606833bf3de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70b374062b8f0ce448e3d75c7e47d606833bf3de"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 59,
      "deletions": 17
    },
    "files": [
      {
        "sha": "dec391f04a3ff2aa305fef76797c9ea856a67685",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "patch": "@@ -20,7 +20,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-6\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-7\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),"
      },
      {
        "sha": "b36c5d48e777f5e6e4f4a3e8feb5dce150326f7b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "patch": "@@ -4013,6 +4013,8 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n     if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n+    masternodeSync.IsBlockchainSynced(true);\n+\n     LogPrintf(\"%s : ACCEPTED\\n\", __func__);\n     return true;\n }\n@@ -5145,7 +5147,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     if(mnodeman.mapSeenMasternodeBroadcast.count(inv.hash)){\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n-                        ss << mnodeman.mapSeenMasternodeBroadcast[inv.hash];\n+                        ss << mnodeman.mapSeenMasternodeBroadcast[inv.hash].second;\n                         // backward compatibility patch\n                         if(pfrom->nVersion < 70204) {\n                             ss << (int64_t)0;"
      },
      {
        "sha": "484f17639ffc991adfc6e9ed7ed8afbc153edc76",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 3,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "patch": "@@ -17,23 +17,52 @@\n class CMasternodeSync;\n CMasternodeSync masternodeSync;\n \n-bool CMasternodeSync::IsBlockchainSynced()\n+bool CMasternodeSync::IsBlockchainSynced(bool fBlockAccepted)\n {\n     static bool fBlockchainSynced = false;\n     static int64_t nTimeLastProcess = GetTime();\n+    static int nSkipped = 0;\n+    static bool fFirstBlockAccepted = false;\n \n     // if the last call to this function was more than 60 minutes ago (client was in sleep mode) reset the sync process\n     if(GetTime() - nTimeLastProcess > 60*60) {\n         Reset();\n         fBlockchainSynced = false;\n     }\n+\n+    if(!pCurrentBlockIndex || !pindexBestHeader || fImporting || fReindex) return false;\n+\n+    if(fBlockAccepted) {\n+        // this should be only triggered while we are still syncing\n+        if(!IsSynced()) {\n+            // we are trying to download smth, reset blockchain sync status\n+            if(fDebug) LogPrintf(\"CMasternodeSync::IsBlockchainSynced -- reset\\n\");\n+            fFirstBlockAccepted = true;\n+            fBlockchainSynced = false;\n+            nTimeLastProcess = GetTime();\n+            return false;\n+        }\n+    } else {\n+        // skip if we already checked less than 1 tick ago\n+        if(GetTime() - nTimeLastProcess < MASTERNODE_SYNC_TICK_SECONDS) {\n+            nSkipped++;\n+            return fBlockchainSynced;\n+        }\n+    }\n+\n+    if(fDebug) LogPrintf(\"CMasternodeSync::IsBlockchainSynced -- state before check: %ssynced, skipped %d times\\n\", fBlockchainSynced ? \"\" : \"not \", nSkipped);\n+\n     nTimeLastProcess = GetTime();\n+    nSkipped = 0;\n \n     if(fBlockchainSynced) return true;\n-    if(!pCurrentBlockIndex || !pindexBestHeader || fImporting || fReindex) return false;\n+\n     if(fCheckpointsEnabled && pCurrentBlockIndex->nHeight < Checkpoints::GetTotalBlocksEstimate(Params().Checkpoints()))\n         return false;\n \n+    // wait for at least one new block to be accepted\n+    if(!fFirstBlockAccepted) return false;\n+\n     // same as !IsInitialBlockDownload() but no cs_main needed here\n     int64_t nMaxBlockTime = std::max(pCurrentBlockIndex->GetBlockTime(), pindexBestHeader->GetBlockTime());\n     fBlockchainSynced = pindexBestHeader->nHeight - pCurrentBlockIndex->nHeight < 24 * 6 &&\n@@ -172,7 +201,7 @@ void ReleaseNodes(const std::vector<CNode*> &vNodesCopy)\n void CMasternodeSync::ProcessTick()\n {\n     static int nTick = 0;\n-    if(nTick++ % 6 != 0) return;\n+    if(nTick++ % MASTERNODE_SYNC_TICK_SECONDS != 0) return;\n     if(!pCurrentBlockIndex) return;\n \n     //the actual count of masternodes we have currently\n@@ -214,6 +243,9 @@ void CMasternodeSync::ProcessTick()\n             !IsBlockchainSynced() && nRequestedMasternodeAssets > MASTERNODE_SYNC_SPORKS)\n     {\n         LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nRequestedMasternodeAttempt %d -- blockchain is not synced yet\\n\", nTick, nRequestedMasternodeAssets, nRequestedMasternodeAttempt);\n+        nTimeLastMasternodeList = GetTime();\n+        nTimeLastPaymentVote = GetTime();\n+        nTimeLastGovernanceItem = GetTime();\n         return;\n     }\n "
      },
      {
        "sha": "2bf70def8ed8143b8cbd8c79f9a1c21c1d040bd4",
        "filename": "src/masternode-sync.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternode-sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternode-sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.h?ref=34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "patch": "@@ -21,6 +21,7 @@ static const int MASTERNODE_SYNC_GOVOBJ          = 10;\n static const int MASTERNODE_SYNC_GOVOBJ_VOTE     = 11;\n static const int MASTERNODE_SYNC_FINISHED        = 999;\n \n+static const int MASTERNODE_SYNC_TICK_SECONDS    = 6;\n static const int MASTERNODE_SYNC_TIMEOUT_SECONDS = 30; // our blocks are 2.5 minutes so 30 seconds should be fine\n \n extern CMasternodeSync masternodeSync;\n@@ -64,7 +65,7 @@ class CMasternodeSync\n     void AddedGovernanceItem() { nTimeLastGovernanceItem = GetTime(); };\n \n     bool IsFailed() { return nRequestedMasternodeAssets == MASTERNODE_SYNC_FAILED; }\n-    bool IsBlockchainSynced();\n+    bool IsBlockchainSynced(bool fBlockAccepted = false);\n     bool IsMasternodeListSynced() { return nRequestedMasternodeAssets > MASTERNODE_SYNC_LIST; }\n     bool IsWinnersListSynced() { return nRequestedMasternodeAssets > MASTERNODE_SYNC_MNW; }\n     bool IsSynced() { return nRequestedMasternodeAssets == MASTERNODE_SYNC_FINISHED; }"
      },
      {
        "sha": "a3835d52f6c44250cbcf1e563ba8ca12b16f57c9",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "patch": "@@ -911,7 +911,7 @@ bool CMasternodePing::CheckAndUpdate(CMasternode* pmn, int& nDos)\n     CMasternodeBroadcast mnb(*pmn);\n     uint256 hash = mnb.GetHash();\n     if (mnodeman.mapSeenMasternodeBroadcast.count(hash)) {\n-        mnodeman.mapSeenMasternodeBroadcast[hash].lastPing = *this;\n+        mnodeman.mapSeenMasternodeBroadcast[hash].second.lastPing = *this;\n     }\n \n     pmn->Check(true); // force update, ignoring cache"
      },
      {
        "sha": "dd51d23bd975244a1422de9c524a1afa8bbbe483",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "patch": "@@ -15,7 +15,7 @@\n /** Masternode manager */\n CMasternodeMan mnodeman;\n \n-const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-2\";\n+const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-3\";\n \n struct CompareLastPaidBlock\n {\n@@ -804,7 +804,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n             nInvCount++;\n \n             if (!mapSeenMasternodeBroadcast.count(hash)) {\n-                mapSeenMasternodeBroadcast.insert(std::make_pair(hash, mnb));\n+                mapSeenMasternodeBroadcast.insert(std::make_pair(hash, std::make_pair(GetTime(), mnb)));\n             }\n \n             if (vin == mn.vin) {\n@@ -1281,7 +1281,7 @@ void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb)\n {\n     LOCK(cs);\n     mapSeenMasternodePing.insert(std::make_pair(mnb.lastPing.GetHash(), mnb.lastPing));\n-    mapSeenMasternodeBroadcast.insert(std::make_pair(mnb.GetHash(), mnb));\n+    mapSeenMasternodeBroadcast.insert(std::make_pair(mnb.GetHash(), std::make_pair(GetTime(), mnb)));\n \n     LogPrintf(\"CMasternodeMan::UpdateMasternodeList -- masternode=%s  addr=%s\\n\", mnb.vin.prevout.ToStringShort(), mnb.addr.ToString());\n \n@@ -1292,7 +1292,7 @@ void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb)\n             masternodeSync.AddedMasternodeList();\n         }\n     } else {\n-        CMasternodeBroadcast mnbOld = mapSeenMasternodeBroadcast[CMasternodeBroadcast(*pmn).GetHash()];\n+        CMasternodeBroadcast mnbOld = mapSeenMasternodeBroadcast[CMasternodeBroadcast(*pmn).GetHash()].second;\n         if(pmn->UpdateFromNewBroadcast(mnb)) {\n             masternodeSync.AddedMasternodeList();\n             mapSeenMasternodeBroadcast.erase(mnbOld.GetHash());\n@@ -1308,11 +1308,18 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n     nDos = 0;\n     LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n \n-    if(mapSeenMasternodeBroadcast.count(mnb.GetHash())) { //seen\n+    uint256 hash = mnb.GetHash();\n+    if(mapSeenMasternodeBroadcast.count(hash)) { //seen\n         LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s seen\\n\", mnb.vin.prevout.ToStringShort());\n+        // less then 2 pings left before this MN goes into non-recoverable state, bump sync timeout\n+        if(GetTime() - mapSeenMasternodeBroadcast[hash].first > MASTERNODE_NEW_START_REQUIRED_SECONDS - MASTERNODE_MIN_MNP_SECONDS * 2) {\n+            LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s seen update\\n\", mnb.vin.prevout.ToStringShort());\n+            mapSeenMasternodeBroadcast[hash].first = GetTime();\n+            masternodeSync.AddedMasternodeList();\n+        }\n         return true;\n     }\n-    mapSeenMasternodeBroadcast.insert(std::make_pair(mnb.GetHash(), mnb));\n+    mapSeenMasternodeBroadcast.insert(std::make_pair(hash, std::make_pair(GetTime(), mnb)));\n \n     LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s new\\n\", mnb.vin.prevout.ToStringShort());\n \n@@ -1324,12 +1331,12 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n     // search Masternode list\n     CMasternode* pmn = Find(mnb.vin);\n     if(pmn) {\n-        CMasternodeBroadcast mnbOld = mapSeenMasternodeBroadcast[CMasternodeBroadcast(*pmn).GetHash()];\n+        CMasternodeBroadcast mnbOld = mapSeenMasternodeBroadcast[CMasternodeBroadcast(*pmn).GetHash()].second;\n         if(!mnb.Update(pmn, nDos)) {\n             LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- Update() failed, masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n             return false;\n         }\n-        if(mnb.GetHash() != mnbOld.GetHash()) {\n+        if(hash != mnbOld.GetHash()) {\n             mapSeenMasternodeBroadcast.erase(mnbOld.GetHash());\n         }\n     } else {\n@@ -1509,7 +1516,7 @@ void CMasternodeMan::SetMasternodeLastPing(const CTxIn& vin, const CMasternodePi\n     CMasternodeBroadcast mnb(*pMN);\n     uint256 hash = mnb.GetHash();\n     if(mapSeenMasternodeBroadcast.count(hash)) {\n-        mapSeenMasternodeBroadcast[hash].lastPing = mnp;\n+        mapSeenMasternodeBroadcast[hash].second.lastPing = mnp;\n     }\n }\n "
      },
      {
        "sha": "354fc0fabf6c669452073ac342d2c9c94f695a34",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34fd8daf5a59fe122fc0d953264f07e21fd35a4b/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "patch": "@@ -144,7 +144,7 @@ class CMasternodeMan\n \n public:\n     // Keep track of all broadcasts I've seen\n-    std::map<uint256, CMasternodeBroadcast> mapSeenMasternodeBroadcast;\n+    std::map<uint256, std::pair<int64_t, CMasternodeBroadcast> > mapSeenMasternodeBroadcast;\n     // Keep track of all pings I've seen\n     std::map<uint256, CMasternodePing> mapSeenMasternodePing;\n     // Keep track of all verifications I've seen"
      }
    ]
  },
  {
    "sha": "cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGEyOGQzYzcyMGQxOTQyMzMzZGUxZGYyZjZmNDJhMDhmOGY5ZDRi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-26T06:44:48Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-26T06:44:48Z"
      },
      "message": "fix mnb renewal (#1226)",
      "tree": {
        "sha": "f8524e170351e0606b607a2edb408c0930443979",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8524e170351e0606b607a2edb408c0930443979"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda28d3c720d1942333de1df2f6f42a08f8f9d4b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34fd8daf5a59fe122fc0d953264f07e21fd35a4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34fd8daf5a59fe122fc0d953264f07e21fd35a4b"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "edcc5140597d6e8251dc83b6ad645737d4d2e755",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda28d3c720d1942333de1df2f6f42a08f8f9d4b/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda28d3c720d1942333de1df2f6f42a08f8f9d4b/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
        "patch": "@@ -121,7 +121,7 @@ bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n     nTimeLastChecked = 0;\n     nTimeLastWatchdogVote = mnb.sigTime;\n     int nDos = 0;\n-    if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(this, nDos))) {\n+    if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(this, true, nDos))) {\n         lastPing = mnb.lastPing;\n         mnodeman.mapSeenMasternodePing.insert(std::make_pair(lastPing.GetHash(), lastPing));\n     }\n@@ -856,7 +856,7 @@ bool CMasternodePing::SimpleCheck(int& nDos)\n     return true;\n }\n \n-bool CMasternodePing::CheckAndUpdate(CMasternode* pmn, int& nDos)\n+bool CMasternodePing::CheckAndUpdate(CMasternode* pmn, bool fFromNewBroadcast, int& nDos)\n {\n     // don't ban by default\n     nDos = 0;\n@@ -870,6 +870,18 @@ bool CMasternodePing::CheckAndUpdate(CMasternode* pmn, int& nDos)\n         return false;\n     }\n \n+    if(!fFromNewBroadcast) {\n+        if (pmn->IsUpdateRequired()) {\n+            LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- masternode protocol is outdated, masternode=%s\\n\", vin.prevout.ToStringShort());\n+            return false;\n+        }\n+\n+        if (pmn->IsNewStartRequired()) {\n+            LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- masternode is completely expired, new start is required, masternode=%s\\n\", vin.prevout.ToStringShort());\n+            return false;\n+        }\n+    }\n+\n     {\n         LOCK(cs_main);\n         BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n@@ -882,16 +894,6 @@ bool CMasternodePing::CheckAndUpdate(CMasternode* pmn, int& nDos)\n \n     LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- New ping: masternode=%s  blockHash=%s  sigTime=%d\\n\", vin.prevout.ToStringShort(), blockHash.ToString(), sigTime);\n \n-    if (pmn->IsUpdateRequired()) {\n-        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- masternode protocol is outdated, masternode=%s\\n\", vin.prevout.ToStringShort());\n-        return false;\n-    }\n-\n-    if (pmn->IsNewStartRequired()) {\n-        LogPrint(\"masternode\", \"CMasternodePing::CheckAndUpdate -- masternode is completely expired, new start is required, masternode=%s\\n\", vin.prevout.ToStringShort());\n-        return false;\n-    }\n-\n     // LogPrintf(\"mnping - Found corresponding mn for vin: %s\\n\", vin.prevout.ToStringShort());\n     // update only if there is no known ping for this masternode or\n     // last ping was more then MASTERNODE_MIN_MNP_SECONDS-60 ago comparing to this one"
      },
      {
        "sha": "ba62182c931dd07a94a1d3cd1ebb83aad132802f",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda28d3c720d1942333de1df2f6f42a08f8f9d4b/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda28d3c720d1942333de1df2f6f42a08f8f9d4b/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
        "patch": "@@ -81,7 +81,7 @@ class CMasternodePing\n     bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n     bool CheckSignature(CPubKey& pubKeyMasternode, int &nDos);\n     bool SimpleCheck(int& nDos);\n-    bool CheckAndUpdate(CMasternode* pmn, int& nDos);\n+    bool CheckAndUpdate(CMasternode* pmn, bool fFromNewBroadcast, int& nDos);\n     void Relay();\n \n     CMasternodePing& operator=(CMasternodePing from)"
      },
      {
        "sha": "f75cc971442aa53832e0ff94cbe71be76ca6ab67",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda28d3c720d1942333de1df2f6f42a08f8f9d4b/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda28d3c720d1942333de1df2f6f42a08f8f9d4b/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
        "patch": "@@ -744,7 +744,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         if(pmn && pmn->IsNewStartRequired()) return;\n \n         int nDos = 0;\n-        if(mnp.CheckAndUpdate(pmn, nDos)) return;\n+        if(mnp.CheckAndUpdate(pmn, false, nDos)) return;\n \n         if(nDos > 0) {\n             // if anything significant failed, mark that node"
      }
    ]
  },
  {
    "sha": "32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmQ1ZjRiMDEzNGNmMzkzZTE4ZWE0YWMyZjI1ZDFmN2Y0YTkzYjIy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-26T15:33:28Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-26T15:33:28Z"
      },
      "message": "Ignore payments and governance cache when mncache is empty (#1227)",
      "tree": {
        "sha": "e8b68bed304a3f6be4a366ba7968b5b0ba7c5580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8b68bed304a3f6be4a366ba7968b5b0ba7c5580"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda28d3c720d1942333de1df2f6f42a08f8f9d4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cda28d3c720d1942333de1df2f6f42a08f8f9d4b"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 14,
      "deletions": 10
    },
    "files": [
      {
        "sha": "fa8037c34eb402fb486c6a39bb1c8592ef8ca977",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22",
        "patch": "@@ -1874,18 +1874,22 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return InitError(\"Failed to load masternode cache from mncache.dat\");\n     }\n \n-    uiInterface.InitMessage(_(\"Loading masternode payment cache...\"));\n-    CFlatDB<CMasternodePayments> flatdb2(\"mnpayments.dat\", \"magicMasternodePaymentsCache\");\n-    if(!flatdb2.Load(mnpayments)) {\n-        return InitError(\"Failed to load masternode payments cache from mnpayments.dat\");\n-    }\n+    if(mnodeman.size()) {\n+        uiInterface.InitMessage(_(\"Loading masternode payment cache...\"));\n+        CFlatDB<CMasternodePayments> flatdb2(\"mnpayments.dat\", \"magicMasternodePaymentsCache\");\n+        if(!flatdb2.Load(mnpayments)) {\n+            return InitError(\"Failed to load masternode payments cache from mnpayments.dat\");\n+        }\n \n-    uiInterface.InitMessage(_(\"Loading governance cache...\"));\n-    CFlatDB<CGovernanceManager> flatdb3(\"governance.dat\", \"magicGovernanceCache\");\n-    if(!flatdb3.Load(governance)) {\n-        return InitError(\"Failed to load governance cache from governance.dat\");\n+        uiInterface.InitMessage(_(\"Loading governance cache...\"));\n+        CFlatDB<CGovernanceManager> flatdb3(\"governance.dat\", \"magicGovernanceCache\");\n+        if(!flatdb3.Load(governance)) {\n+            return InitError(\"Failed to load governance cache from governance.dat\");\n+        }\n+        governance.InitOnLoad();\n+    } else {\n+        uiInterface.InitMessage(_(\"Masternode cache is empty, skipping payments and governance cache...\"));\n     }\n-    governance.InitOnLoad();\n \n     uiInterface.InitMessage(_(\"Loading fullfiled requests cache...\"));\n     CFlatDB<CNetFulfilledRequestManager> flatdb4(\"netfulfilled.dat\", \"magicFulfilledCache\");"
      }
    ]
  },
  {
    "sha": "eddfa5a0976582ab7ff9c56981afa50109a729b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGRmYTVhMDk3NjU4MmFiN2ZmOWM1Njk4MWFmYTUwMTA5YTcyOWI5",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-28T10:09:04Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-28T10:09:04Z"
      },
      "message": "fix Bitcoin ref (#1229)",
      "tree": {
        "sha": "2de2229a11457c130c1eecb14108f9803c79086e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2de2229a11457c130c1eecb14108f9803c79086e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eddfa5a0976582ab7ff9c56981afa50109a729b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddfa5a0976582ab7ff9c56981afa50109a729b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eddfa5a0976582ab7ff9c56981afa50109a729b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddfa5a0976582ab7ff9c56981afa50109a729b9/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32d5f4b0134cf393e18ea4ac2f25d1f7f4a93b22"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "51ed04afb1308a38e325c7487eb817fcd00051b4",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eddfa5a0976582ab7ff9c56981afa50109a729b9/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eddfa5a0976582ab7ff9c56981afa50109a729b9/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=eddfa5a0976582ab7ff9c56981afa50109a729b9",
        "patch": "@@ -9,7 +9,7 @@ packages:\n - \"autoconf\"\n reference_datetime: \"2016-01-01 00:00:00\"\n remotes:\n-- \"url\": \"https://github.com/bitcoin/bitcoin-detached-sigs.git\"\n+- \"url\": \"https://github.com/dashpay/dash-detached-sigs.git\"\n   \"dir\": \"signature\"\n files:\n - \"osslsigncode-1.7.1.tar.gz\""
      }
    ]
  },
  {
    "sha": "96dda2790c145b41ef9dccd7e2f4c376385aeb54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmRkYTI3OTBjMTQ1YjQxZWY5ZGNjZDdlMmY0YzM3NjM4NWFlYjU0",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2016-12-30T07:05:29Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-30T07:05:29Z"
      },
      "message": "added testnet checkpoint (#1235)",
      "tree": {
        "sha": "a4d78e38c208ebc0b5206e69e55c69e1e983d15b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4d78e38c208ebc0b5206e69e55c69e1e983d15b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96dda2790c145b41ef9dccd7e2f4c376385aeb54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dda2790c145b41ef9dccd7e2f4c376385aeb54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96dda2790c145b41ef9dccd7e2f4c376385aeb54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dda2790c145b41ef9dccd7e2f4c376385aeb54/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eddfa5a0976582ab7ff9c56981afa50109a729b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddfa5a0976582ab7ff9c56981afa50109a729b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eddfa5a0976582ab7ff9c56981afa50109a729b9"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "563d663036f86efe6643442253d9fe3c62f1263a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dda2790c145b41ef9dccd7e2f4c376385aeb54/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dda2790c145b41ef9dccd7e2f4c376385aeb54/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=96dda2790c145b41ef9dccd7e2f4c376385aeb54",
        "patch": "@@ -278,15 +278,16 @@ class CTestNetParams : public CChainParams {\n \n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n-            (   261, uint256S(\"0x00000c26026d0815a7e2ce4fa270775f61403c040647ff2c3091f99e894a4618\"))\n-            (  1999, uint256S(\"0x00000052e538d27fa53693efe6fb6892a0c1d26c0235f599171c48a3cce553b1\"))\n-            (  2999, uint256S(\"0x0000024bc3f4f4cb30d29827c13d921ad77d2c6072e586c7f60d83c2722cdcc5\"))\n-            ( 12907, uint256S(\"0x00000067de20fd6d276ee0839a3187b203accaa5aad04ca5c17c2997e2730e4c\"))\n-            ( 15590, uint256S(\"0x00000009df8f2ee9c230aef9dad257d82bde20ca83378a208ce5d95d29a78852\"))\n-            ( 65900, uint256S(\"0x00000063e4e94d75d0dc075e93898444c8ef50655990dfff7c32d92a7efff671\")),\n-\n-            1473331693, // * UNIX timestamp of last checkpoint block\n-            88502,      // * total number of transactions between genesis and last checkpoint\n+            (    261, uint256S(\"0x00000c26026d0815a7e2ce4fa270775f61403c040647ff2c3091f99e894a4618\"))\n+            (   1999, uint256S(\"0x00000052e538d27fa53693efe6fb6892a0c1d26c0235f599171c48a3cce553b1\"))\n+            (   2999, uint256S(\"0x0000024bc3f4f4cb30d29827c13d921ad77d2c6072e586c7f60d83c2722cdcc5\"))\n+            (  12907, uint256S(\"0x00000067de20fd6d276ee0839a3187b203accaa5aad04ca5c17c2997e2730e4c\"))\n+            (  15590, uint256S(\"0x00000009df8f2ee9c230aef9dad257d82bde20ca83378a208ce5d95d29a78852\"))\n+            (  65900, uint256S(\"0x00000063e4e94d75d0dc075e93898444c8ef50655990dfff7c32d92a7efff671\"))\n+            ( 127618, uint256S(\"0x0000002104a2c1fc923b0e3b74b1860236fbc2b4479a833c28abaf456ea4e466\")),\n+\n+            1483076495, // * UNIX timestamp of last checkpoint block\n+            168590,     // * total number of transactions between genesis and last checkpoint\n                         //   (the tx=... number in the SetBestChain debug.log lines)\n             500         // * estimated number of transactions per day after checkpoint\n         };"
      }
    ]
  },
  {
    "sha": "7544a70e1b53a4ee1fd22e736988b08343729636",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTQ0YTcwZTFiNTNhNGVlMWZkMjJlNzM2OTg4YjA4MzQzNzI5NjM2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2016-12-30T16:38:53Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-12-30T16:38:53Z"
      },
      "message": "display chainwork for every tip in getchaintips (#1237)",
      "tree": {
        "sha": "4bb6884d01c9e83d3c4e8ca09af83d9b7d727e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bb6884d01c9e83d3c4e8ca09af83d9b7d727e36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7544a70e1b53a4ee1fd22e736988b08343729636",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7544a70e1b53a4ee1fd22e736988b08343729636",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7544a70e1b53a4ee1fd22e736988b08343729636",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7544a70e1b53a4ee1fd22e736988b08343729636/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96dda2790c145b41ef9dccd7e2f4c376385aeb54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dda2790c145b41ef9dccd7e2f4c376385aeb54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96dda2790c145b41ef9dccd7e2f4c376385aeb54"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e24f4f61fd981032a13457154f4e165c9ef109f1",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7544a70e1b53a4ee1fd22e736988b08343729636/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7544a70e1b53a4ee1fd22e736988b08343729636/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=7544a70e1b53a4ee1fd22e736988b08343729636",
        "patch": "@@ -848,16 +848,20 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"height\\\": xxxx,         (numeric) height of the chain tip\\n\"\n-            \"    \\\"hash\\\": \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n-            \"    \\\"branchlen\\\": 0          (numeric) zero for main chain\\n\"\n-            \"    \\\"status\\\": \\\"active\\\"      (string) \\\"active\\\" for the main chain\\n\"\n+            \"    \\\"height\\\": xxxx,             (numeric) height of the chain tip\\n\"\n+            \"    \\\"hash\\\": \\\"xxxx\\\",             (string) block hash of the tip\\n\"\n+            \"    \\\"difficulty\\\" : x.xxx,       (numeric) The difficulty\\n\"\n+            \"    \\\"chainwork\\\" : \\\"0000...1f3\\\"  (string) Expected number of hashes required to produce the current chain (in hex)\\n\"\n+            \"    \\\"branchlen\\\": 0              (numeric) zero for main chain\\n\"\n+            \"    \\\"status\\\": \\\"active\\\"          (string) \\\"active\\\" for the main chain\\n\"\n             \"  },\\n\"\n             \"  {\\n\"\n             \"    \\\"height\\\": xxxx,\\n\"\n             \"    \\\"hash\\\": \\\"xxxx\\\",\\n\"\n-            \"    \\\"branchlen\\\": 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n-            \"    \\\"status\\\": \\\"xxxx\\\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n+            \"    \\\"difficulty\\\" : x.xxx,\\n\"\n+            \"    \\\"chainwork\\\" : \\\"0000...1f3\\\"\\n\"\n+            \"    \\\"branchlen\\\": 1              (numeric) length of branch connecting the tip to the main chain\\n\"\n+            \"    \\\"status\\\": \\\"xxxx\\\"            (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n             \"  }\\n\"\n             \"]\\n\"\n             \"Possible values for status:\\n\"\n@@ -911,6 +915,7 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"height\", block->nHeight));\n         obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n         obj.push_back(Pair(\"difficulty\", GetDifficulty(block)));\n+        obj.push_back(Pair(\"chainwork\", block->nChainWork.GetHex()));\n         obj.push_back(Pair(\"branchlen\", branchLen));\n \n         string status;"
      }
    ]
  },
  {
    "sha": "275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzViOTVjYjhlNzcyYTkzZGJmMGUzZmQ3N2MyZGQ1Yzk3YWIyYjU1",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-01-01T09:06:48Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-01T09:06:48Z"
      },
      "message": "update to 2017 (#1228)\n\nHappy New Year :-)",
      "tree": {
        "sha": "d7cc75025f9a0c42a6e0387cb858e44d06889dff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7cc75025f9a0c42a6e0387cb858e44d06889dff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7544a70e1b53a4ee1fd22e736988b08343729636",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7544a70e1b53a4ee1fd22e736988b08343729636",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7544a70e1b53a4ee1fd22e736988b08343729636"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7f84518a777bb8d88f58d83c8e106623fcffaefc",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "patch": "@@ -18,7 +18,7 @@ packages:\n - \"binutils-gold\"\n - \"ca-certificates\"\n - \"python\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n+reference_datetime: \"2017-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/dashpay/dash.git\"\n   \"dir\": \"dash\""
      },
      {
        "sha": "a68d31f10f0f30e08526e3e559a969f8b3619ee4",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "patch": "@@ -6,7 +6,7 @@ architectures:\n - \"amd64\"\n packages:\n - \"faketime\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n+reference_datetime: \"2017-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/dashpay/dash-detached-sigs.git\"\n   \"dir\": \"signature\""
      },
      {
        "sha": "98fd814c3a40b9f0c9f2c385b57c2f30b430a5ff",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "patch": "@@ -21,7 +21,7 @@ packages:\n - \"libbz2-dev\"\n - \"ca-certificates\"\n - \"python\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n+reference_datetime: \"2017-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/dashpay/dash.git\"\n   \"dir\": \"dash\""
      },
      {
        "sha": "1aba90f2ee7889f688280c691febcc137a5c9920",
        "filename": "contrib/gitian-descriptors/gitian-rpi2.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-rpi2.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-rpi2.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-rpi2.yml?ref=275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "patch": "@@ -15,7 +15,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n-reference_datetime: \"2014-01-10 00:00:00\"\n+reference_datetime: \"2017-01-10 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/dashpay/dash.git\"\n   \"dir\": \"dash\""
      },
      {
        "sha": "5eda39ff6d5d4308279b92c7179a51d4615d34bd",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "patch": "@@ -7,7 +7,7 @@ architectures:\n packages:\n - \"libssl-dev\"\n - \"autoconf\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n+reference_datetime: \"2017-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/dashpay/dash-detached-sigs.git\"\n   \"dir\": \"signature\""
      },
      {
        "sha": "f219f04217c895ecf60440c6ccb07e6c9e07a259",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "patch": "@@ -21,7 +21,7 @@ packages:\n - \"zip\"\n - \"ca-certificates\"\n - \"python\"\n-reference_datetime: \"2016-01-01 00:00:00\"\n+reference_datetime: \"2017-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/dashpay/dash.git\"\n   \"dir\": \"dash\""
      }
    ]
  },
  {
    "sha": "7815f6e32ef7154043b482df63eeffc907b356ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODE1ZjZlMzJlZjcxNTQwNDNiNDgyZGY2M2VlZmZjOTA3YjM1NmVh",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-01T10:18:05Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-01T10:18:05Z"
      },
      "message": "Provide correct warning in CheckForkWarningConditions for large worked invalid chain. (#1234)",
      "tree": {
        "sha": "e922b52f5e39778158d2200042e713a2debb37ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e922b52f5e39778158d2200042e713a2debb37ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7815f6e32ef7154043b482df63eeffc907b356ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7815f6e32ef7154043b482df63eeffc907b356ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7815f6e32ef7154043b482df63eeffc907b356ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7815f6e32ef7154043b482df63eeffc907b356ea/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/275b95cb8e772a93dbf0e3fd77c2dd5c97ab2b55"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ba421160b3a7bcb38242ec80745ff53ed549f39",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7815f6e32ef7154043b482df63eeffc907b356ea/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7815f6e32ef7154043b482df63eeffc907b356ea/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7815f6e32ef7154043b482df63eeffc907b356ea",
        "patch": "@@ -1857,7 +1857,10 @@ void CheckForkWarningConditions()\n         }\n         else\n         {\n-            LogPrintf(\"%s: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\\nChain state database corruption likely.\\n\", __func__);\n+            if(pindexBestInvalid->nHeight > chainActive.Height() + 6)\n+                LogPrintf(\"%s: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\\nChain state database corruption likely.\\n\", __func__);\n+            else\n+                LogPrintf(\"%s: Warning: Found invalid chain which has higher work (at least ~6 blocks worth of work) than our best chain.\\nChain state database corruption likely.\\n\", __func__);\n             fLargeWorkInvalidChainFound = true;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "89d14c5274df04350956d83b0a2ff6f3ec05f102",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWQxNGM1Mjc0ZGYwNDM1MDk1NmQ4M2IwYTJmZjZmM2VjMDVmMTAy",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-01T10:18:21Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-01T10:18:21Z"
      },
      "message": "Fix Hot Masternode Starting (#1239)",
      "tree": {
        "sha": "5dc860c41cf0524678a59f4324219e2a3dd76465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5dc860c41cf0524678a59f4324219e2a3dd76465"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89d14c5274df04350956d83b0a2ff6f3ec05f102",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89d14c5274df04350956d83b0a2ff6f3ec05f102",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89d14c5274df04350956d83b0a2ff6f3ec05f102",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89d14c5274df04350956d83b0a2ff6f3ec05f102/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7815f6e32ef7154043b482df63eeffc907b356ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7815f6e32ef7154043b482df63eeffc907b356ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7815f6e32ef7154043b482df63eeffc907b356ea"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cacb7c03dd5cee98a5bc0e4194c7d1efcc0b46fb",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89d14c5274df04350956d83b0a2ff6f3ec05f102/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89d14c5274df04350956d83b0a2ff6f3ec05f102/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=89d14c5274df04350956d83b0a2ff6f3ec05f102",
        "patch": "@@ -40,7 +40,10 @@ void CActiveMasternode::ManageState()\n     if(eType == MASTERNODE_REMOTE) {\n         ManageStateRemote();\n     } else if(eType == MASTERNODE_LOCAL) {\n-        ManageStateLocal();\n+        // Try Remote Start first so the started local masternode can be restarted without recreate masternode broadcast.\n+        ManageStateRemote();\n+        if(nState != ACTIVE_MASTERNODE_STARTED)\n+            ManageStateLocal();\n     }\n \n     SendMasternodePing();\n@@ -301,9 +304,6 @@ void CActiveMasternode::ManageStateLocal()\n         fPingerEnabled = true;\n         nState = ACTIVE_MASTERNODE_STARTED;\n \n-        masternode_info_t infoMn = mnodeman.GetMasternodeInfo(pubKeyMasternode);\n-        if(infoMn.fInfoValid && CMasternode::IsValidStateForAutoStart(infoMn.nActiveState)) return; // sending ping should be enough\n-\n         //update to masternode list\n         LogPrintf(\"CActiveMasternode::ManageStateLocal -- Update Masternode List\\n\");\n         mnodeman.UpdateMasternodeList(mnb);"
      }
    ]
  },
  {
    "sha": "471365bf6c7aba378243b7d8f9a3dce0fff171d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzEzNjViZjZjN2FiYTM3ODI0M2I3ZDhmOWEzZGNlMGZmZjE3MWQ1",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-01T10:18:33Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-01T10:18:33Z"
      },
      "message": "Masternode Sync should be finished before mining processing (#1240)\n\n* Reject getblocktemplate request until masternode sync is finished\r\n\r\n* Pending internal miner until masternode sync is finished",
      "tree": {
        "sha": "4a9a70489d263c1d1c55a6e492febe9c92698357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a9a70489d263c1d1c55a6e492febe9c92698357"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/471365bf6c7aba378243b7d8f9a3dce0fff171d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471365bf6c7aba378243b7d8f9a3dce0fff171d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/471365bf6c7aba378243b7d8f9a3dce0fff171d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471365bf6c7aba378243b7d8f9a3dce0fff171d5/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89d14c5274df04350956d83b0a2ff6f3ec05f102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89d14c5274df04350956d83b0a2ff6f3ec05f102",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89d14c5274df04350956d83b0a2ff6f3ec05f102"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "66ecbf60bc3a244999ecddb571db41d5d14dfe03",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/471365bf6c7aba378243b7d8f9a3dce0fff171d5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/471365bf6c7aba378243b7d8f9a3dce0fff171d5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=471365bf6c7aba378243b7d8f9a3dce0fff171d5",
        "patch": "@@ -25,6 +25,7 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"masternode-payments.h\"\n+#include \"masternode-sync.h\"\n #include \"validationinterface.h\"\n \n #include <boost/thread.hpp>\n@@ -422,7 +423,7 @@ void static BitcoinMiner(const CChainParams& chainparams)\n                         LOCK(cs_vNodes);\n                         fvNodesEmpty = vNodes.empty();\n                     }\n-                    if (!fvNodesEmpty && !IsInitialBlockDownload())\n+                    if (!fvNodesEmpty && !IsInitialBlockDownload() && masternodeSync.IsSynced())\n                         break;\n                     MilliSleep(1000);\n                 } while (true);"
      },
      {
        "sha": "d376364db70d85f57e21f7608fa7015a2485231b",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/471365bf6c7aba378243b7d8f9a3dce0fff171d5/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/471365bf6c7aba378243b7d8f9a3dce0fff171d5/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=471365bf6c7aba378243b7d8f9a3dce0fff171d5",
        "patch": "@@ -463,6 +463,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Dash Core is downloading blocks...\");\n \n+    if (!masternodeSync.IsSynced())\n+        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Dash Core is syncing with network...\");\n+\n     static unsigned int nTransactionsUpdatedLast;\n \n     if (!lpval.isNull())"
      }
    ]
  },
  {
    "sha": "0d0446ccd4520f7cd95413311118ef9a5ac5550b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDA0NDZjY2Q0NTIwZjdjZDk1NDEzMzExMTE4ZWY5YTVhYzU1NTBi",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-01-01T11:45:51Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-01T11:45:51Z"
      },
      "message": "typo in date (#1241)",
      "tree": {
        "sha": "a0558ac513af1c40240f1eb363f1cfaecd8dafdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0558ac513af1c40240f1eb363f1cfaecd8dafdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d0446ccd4520f7cd95413311118ef9a5ac5550b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d0446ccd4520f7cd95413311118ef9a5ac5550b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d0446ccd4520f7cd95413311118ef9a5ac5550b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d0446ccd4520f7cd95413311118ef9a5ac5550b/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "471365bf6c7aba378243b7d8f9a3dce0fff171d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471365bf6c7aba378243b7d8f9a3dce0fff171d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/471365bf6c7aba378243b7d8f9a3dce0fff171d5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a7119da378fd20e927bf58f6ae5fa5031c6889cf",
        "filename": "contrib/gitian-descriptors/gitian-rpi2.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0446ccd4520f7cd95413311118ef9a5ac5550b/contrib/gitian-descriptors/gitian-rpi2.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0446ccd4520f7cd95413311118ef9a5ac5550b/contrib/gitian-descriptors/gitian-rpi2.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-rpi2.yml?ref=0d0446ccd4520f7cd95413311118ef9a5ac5550b",
        "patch": "@@ -15,7 +15,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"binutils-gold\"\n-reference_datetime: \"2017-01-10 00:00:00\"\n+reference_datetime: \"2017-01-01 00:00:00\"\n remotes:\n - \"url\": \"https://github.com/dashpay/dash.git\"\n   \"dir\": \"dash\""
      }
    ]
  },
  {
    "sha": "f6ca563ab2720879090e1802d68ecf78463c3b1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmNhNTYzYWIyNzIwODc5MDkwZTE4MDJkNjhlY2Y3ODQ2M2MzYjFh",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-01T15:32:08Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-01T15:32:08Z"
      },
      "message": "typo in masternodeaddr error message (#1242)",
      "tree": {
        "sha": "a075355442a88daf1481d49dbecd007502d0d575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a075355442a88daf1481d49dbecd007502d0d575"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6ca563ab2720879090e1802d68ecf78463c3b1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ca563ab2720879090e1802d68ecf78463c3b1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6ca563ab2720879090e1802d68ecf78463c3b1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ca563ab2720879090e1802d68ecf78463c3b1a/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d0446ccd4520f7cd95413311118ef9a5ac5550b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d0446ccd4520f7cd95413311118ef9a5ac5550b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d0446ccd4520f7cd95413311118ef9a5ac5550b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3a62eff2e7fa0e75d55484c3bdb6c47e6b303cf5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6ca563ab2720879090e1802d68ecf78463c3b1a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6ca563ab2720879090e1802d68ecf78463c3b1a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f6ca563ab2720879090e1802d68ecf78463c3b1a",
        "patch": "@@ -1800,7 +1800,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if(!GetArg(\"-masternodeaddr\", \"\").empty()) {\n             // Hot masternode (either local or remote) should get its address in\n             // CActiveMasternode::ManageState() automatically and no longer relies on masternodeaddr.\n-            return InitError(_(\"masternodeaddr option is deprecated. Please use masternode.conf to manage your remote masterndodes.\"));\n+            return InitError(_(\"masternodeaddr option is deprecated. Please use masternode.conf to manage your remote masternodes.\"));\n         }\n \n         std::string strMasterNodePrivKey = GetArg(\"-masternodeprivkey\", \"\");"
      }
    ]
  },
  {
    "sha": "e4a290693b9887ce68069883f75b6fa870ff2578",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGEyOTA2OTNiOTg4N2NlNjgwNjk4ODNmNzViNmZhODcwZmYyNTc4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-01T17:48:53Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-01T17:48:53Z"
      },
      "message": "Recovery from MASTERNODE_NEW_START_REQUIRED state (#1232)\n\nImplement masternode recovery from MASTERNODE_NEW_START_REQUIRED state via mn quorums",
      "tree": {
        "sha": "10390b8964aed3ec1ecce21301c06ca8eedadd83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10390b8964aed3ec1ecce21301c06ca8eedadd83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4a290693b9887ce68069883f75b6fa870ff2578",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a290693b9887ce68069883f75b6fa870ff2578",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a290693b9887ce68069883f75b6fa870ff2578",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a290693b9887ce68069883f75b6fa870ff2578/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6ca563ab2720879090e1802d68ecf78463c3b1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6ca563ab2720879090e1802d68ecf78463c3b1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6ca563ab2720879090e1802d68ecf78463c3b1a"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 128,
      "deletions": 21
    },
    "files": [
      {
        "sha": "0327930265696d2024ccddf9d16b80ab904ec350",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a290693b9887ce68069883f75b6fa870ff2578/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a290693b9887ce68069883f75b6fa870ff2578/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=e4a290693b9887ce68069883f75b6fa870ff2578",
        "patch": "@@ -2478,16 +2478,17 @@ void ThreadCheckDarkSendPool()\n \n             nTick++;\n \n+            // make sure to check all masternodes first\n+            mnodeman.Check();\n+\n             // check if we should activate or ping every few minutes,\n             // slightly postpone first run to give net thread a chance to connect to some peers\n             if(nTick % MASTERNODE_MIN_MNP_SECONDS == 15)\n                 activeMasternode.ManageState();\n \n-            mnodeman.Check();\n-\n             if(nTick % 60 == 0) {\n-                mnodeman.CheckAndRemove();\n                 mnodeman.ProcessMasternodeConnections();\n+                mnodeman.CheckAndRemove();\n                 mnpayments.CheckAndRemove();\n                 CleanTxLockCandidates();\n             }"
      },
      {
        "sha": "d287816ac964887f2657adb7e6e845a57f22a4a3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a290693b9887ce68069883f75b6fa870ff2578/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a290693b9887ce68069883f75b6fa870ff2578/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e4a290693b9887ce68069883f75b6fa870ff2578",
        "patch": "@@ -4944,7 +4944,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n         }\n \n     case MSG_MASTERNODE_ANNOUNCE:\n-        return mnodeman.mapSeenMasternodeBroadcast.count(inv.hash);\n+        return mnodeman.mapSeenMasternodeBroadcast.count(inv.hash) && !mnodeman.IsMnbRecoveryRequested(inv.hash);\n \n     case MSG_MASTERNODE_PING:\n         return mnodeman.mapSeenMasternodePing.count(inv.hash);"
      },
      {
        "sha": "ba408c6278a5906f5b4956737eafd53aa814c4ab",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=e4a290693b9887ce68069883f75b6fa870ff2578",
        "patch": "@@ -109,7 +109,7 @@ CMasternode::CMasternode(const CMasternodeBroadcast& mnb) :\n //\n bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n {\n-    if(mnb.sigTime <= sigTime) return false;\n+    if(mnb.sigTime <= sigTime && !mnb.fRecovery) return false;\n \n     pubKeyMasternode = mnb.pubKeyMasternode;\n     sigTime = mnb.sigTime;\n@@ -119,7 +119,6 @@ bool CMasternode::UpdateFromNewBroadcast(CMasternodeBroadcast& mnb)\n     nPoSeBanScore = 0;\n     nPoSeBanHeight = 0;\n     nTimeLastChecked = 0;\n-    nTimeLastWatchdogVote = mnb.sigTime;\n     int nDos = 0;\n     if(mnb.lastPing == CMasternodePing() || (mnb.lastPing != CMasternodePing() && mnb.lastPing.CheckAndUpdate(this, true, nDos))) {\n         lastPing = mnb.lastPing;\n@@ -569,7 +568,7 @@ bool CMasternodeBroadcast::Update(CMasternode* pmn, int& nDos)\n {\n     nDos = 0;\n \n-    if(pmn->sigTime == sigTime) {\n+    if(pmn->sigTime == sigTime && !fRecovery) {\n         // mapSeenMasternodeBroadcast in CMasternodeMan::CheckMnbAndUpdateMasternodeList should filter legit duplicates\n         // but this still can happen if we just started, which is ok, just do nothing here.\n         return false;"
      },
      {
        "sha": "4f937a7d7e9fdf4f8eaed7381c9fe9ab51a9a878",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=e4a290693b9887ce68069883f75b6fa870ff2578",
        "patch": "@@ -340,10 +340,12 @@ class CMasternodeBroadcast : public CMasternode\n {\n public:\n \n-    CMasternodeBroadcast() : CMasternode() {}\n-    CMasternodeBroadcast(const CMasternode& mn) : CMasternode(mn) {}\n+    bool fRecovery;\n+\n+    CMasternodeBroadcast() : CMasternode(), fRecovery(false) {}\n+    CMasternodeBroadcast(const CMasternode& mn) : CMasternode(mn), fRecovery(false) {}\n     CMasternodeBroadcast(CService addrNew, CTxIn vinNew, CPubKey pubKeyCollateralAddressNew, CPubKey pubKeyMasternodeNew, int nProtocolVersionIn) :\n-        CMasternode(addrNew, vinNew, pubKeyCollateralAddressNew, pubKeyMasternodeNew, nProtocolVersionIn) {}\n+        CMasternode(addrNew, vinNew, pubKeyCollateralAddressNew, pubKeyMasternodeNew, nProtocolVersionIn), fRecovery(false) {}\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "2872232de2618726782011251500627ce859c5e8",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 9,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=e4a290693b9887ce68069883f75b6fa870ff2578",
        "patch": "@@ -15,7 +15,7 @@\n /** Masternode manager */\n CMasternodeMan mnodeman;\n \n-const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-3\";\n+const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-4\";\n \n struct CompareLastPaidBlock\n {\n@@ -122,7 +122,6 @@ bool CMasternodeMan::Add(CMasternode &mn)\n     CMasternode *pmn = Find(mn.vin);\n     if (pmn == NULL) {\n         LogPrint(\"masternode\", \"CMasternodeMan::Add -- Adding new Masternode: addr=%s, %i now\\n\", mn.addr.ToString(), size() + 1);\n-        mn.nTimeLastWatchdogVote = mn.sigTime;\n         vMasternodes.push_back(mn);\n         indexMasternodes.AddMasternodeVIN(mn.vin);\n         fMasternodesAdded = true;\n@@ -176,30 +175,103 @@ void CMasternodeMan::CheckAndRemove()\n {\n     LogPrintf(\"CMasternodeMan::CheckAndRemove\\n\");\n \n-    Check();\n \n     {\n-        LOCK(cs);\n+        // Need LOCK2 here to ensure consistent locking order because code below locks cs_main\n+        // through GetHeight() signal in ConnectNode and in CheckMnbAndUpdateMasternodeList()\n+        LOCK2(cs_main, cs);\n+\n+        Check();\n \n-        // Remove inactive and outdated masternodes\n+        // Remove spent masternodes, prepare structures and make requests to reasure the state of inactive ones\n         std::vector<CMasternode>::iterator it = vMasternodes.begin();\n+        std::vector<std::pair<int, CMasternode> > vecMasternodeRanks;\n+        bool fAskedForMnbRecovery = false; // ask for one mn at a time\n         while(it != vMasternodes.end()) {\n+            CMasternodeBroadcast mnb = CMasternodeBroadcast(*it);\n+            uint256 hash = mnb.GetHash();\n             // If collateral was spent ...\n             if ((*it).IsOutpointSpent()) {\n                 LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Removing Masternode: %s  addr=%s  %i now\\n\", (*it).GetStateString(), (*it).addr.ToString(), size() - 1);\n \n                 // erase all of the broadcasts we've seen from this txin, ...\n-                mapSeenMasternodeBroadcast.erase(CMasternodeBroadcast(*it).GetHash());\n+                mapSeenMasternodeBroadcast.erase(hash);\n                 mWeAskedForMasternodeListEntry.erase((*it).vin.prevout);\n \n                 // and finally remove it from the list\n                 it = vMasternodes.erase(it);\n                 fMasternodesRemoved = true;\n             } else {\n+                if(pCurrentBlockIndex && !fAskedForMnbRecovery && it->IsNewStartRequired() && !IsMnbRecoveryRequested(hash)) {\n+                    // this mn is in a non-recoverable state and we haven't asked other nodes yet\n+                    std::set<CNetAddr> setRequested;\n+                    // calulate only once and only when it's needed\n+                    if(vecMasternodeRanks.empty()) {\n+                        int nRandomBlockHeight = GetRandInt(pCurrentBlockIndex->nHeight);\n+                        vecMasternodeRanks = GetMasternodeRanks(nRandomBlockHeight);\n+                    }\n+                    // ask first MNB_RECOVERY_QUORUM_TOTAL mns we can connect to and we haven't asked recently\n+                    for(int i = 0; setRequested.size() < MNB_RECOVERY_QUORUM_TOTAL && i < (int)vecMasternodeRanks.size(); i++) {\n+                        // avoid banning\n+                        if(mWeAskedForMasternodeListEntry.count(it->vin.prevout) && mWeAskedForMasternodeListEntry[it->vin.prevout].count(vecMasternodeRanks[i].second.addr)) continue;\n+                        // didn't ask recently, ok to ask now\n+                        CService addr = vecMasternodeRanks[i].second.addr;\n+                        CNode* pnode = ConnectNode(CAddress(addr), NULL, true);\n+                        if(pnode) {\n+                            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- asking for mnb of %s, addr=%s\\n\", it->vin.prevout.ToStringShort(), addr.ToString());\n+                            setRequested.insert(addr);\n+                            // can't use AskForMN here, inv system is way too smart, request data directly instead\n+                            std::vector<CInv> vToFetch;\n+                            vToFetch.push_back(CInv(MSG_MASTERNODE_ANNOUNCE, hash));\n+                            pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n+                            fAskedForMnbRecovery = true;\n+                        } else {\n+                            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- can't connect to node to ask for mnb, addr=%s\\n\", addr.ToString());\n+                        }\n+                    }\n+                    // wait for mnb recovery replies for MNB_RECOVERY_WAIT_SECONDS seconds\n+                    mMnbRecoveryRequests[hash] = std::make_pair(GetTime() + MNB_RECOVERY_WAIT_SECONDS, setRequested);\n+                }\n                 ++it;\n             }\n         }\n \n+        // proces replies for MASTERNODE_NEW_START_REQUIRED masternodes\n+        LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- mMnbRecoveryGoodReplies size=%d\\n\", (int)mMnbRecoveryGoodReplies.size());\n+        std::map<uint256, std::vector<CMasternodeBroadcast> >::iterator itMnbReplies = mMnbRecoveryGoodReplies.begin();\n+        while(itMnbReplies != mMnbRecoveryGoodReplies.end()){\n+            if(mMnbRecoveryRequests[itMnbReplies->first].first < GetTime()) {\n+                // all nodes we asked should have replied now\n+                if(itMnbReplies->second.size() >= MNB_RECOVERY_QUORUM_REQUIRED) {\n+                    // majority of nodes we asked agrees that this mn doesn't require new mnb, reprocess one of new mnbs\n+                    LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- reprocessing mnb, masternode=%s\\n\", itMnbReplies->second[0].vin.prevout.ToStringShort());\n+                    // mapSeenMasternodeBroadcast.erase(itMnbReplies->first);\n+                    int nDos;\n+                    itMnbReplies->second[0].fRecovery = true;\n+                    CheckMnbAndUpdateMasternodeList(NULL, itMnbReplies->second[0], nDos);\n+                }\n+                LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- removing mnb recovery reply, masternode=%s, size=%d\\n\", itMnbReplies->second[0].vin.prevout.ToStringShort(), (int)itMnbReplies->second.size());\n+                mMnbRecoveryGoodReplies.erase(itMnbReplies++);\n+            } else {\n+                ++itMnbReplies;\n+            }\n+        }\n+    }\n+    {\n+        // no need for cm_main below\n+        LOCK(cs);\n+\n+        std::map<uint256, std::pair< int64_t, std::set<CNetAddr> > >::iterator itMnbRequest = mMnbRecoveryRequests.begin();\n+        while(itMnbRequest != mMnbRecoveryRequests.end()){\n+            // Allow this mnb to be re-verified again after MNB_RECOVERY_RETRY_SECONDS seconds\n+            // if mn is still in MASTERNODE_NEW_START_REQUIRED state.\n+            if(GetTime() - itMnbRequest->second.first > MNB_RECOVERY_RETRY_SECONDS) {\n+                mMnbRecoveryRequests.erase(itMnbRequest++);\n+            } else {\n+                ++itMnbRequest;\n+            }\n+        }\n+\n         // check who's asked for the Masternode list\n         std::map<CNetAddr, int64_t>::iterator it1 = mAskedUsForMasternodeList.begin();\n         while(it1 != mAskedUsForMasternodeList.end()){\n@@ -712,7 +784,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n \n         int nDos = 0;\n \n-        if (CheckMnbAndUpdateMasternodeList(mnb, nDos)) {\n+        if (CheckMnbAndUpdateMasternodeList(pfrom, mnb, nDos)) {\n             // use announced Masternode as a peer\n             addrman.Add(CAddress(mnb.addr), pfrom->addr, 2*60*60);\n         } else if(nDos > 0) {\n@@ -1300,7 +1372,7 @@ void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb)\n     }\n }\n \n-bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos)\n+bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CNode* pfrom, CMasternodeBroadcast mnb, int& nDos)\n {\n     // Need LOCK2 here to ensure consistent locking order because the SimpleCheck call below locks cs_main\n     LOCK2(cs_main, cs);\n@@ -1309,14 +1381,35 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, i\n     LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n \n     uint256 hash = mnb.GetHash();\n-    if(mapSeenMasternodeBroadcast.count(hash)) { //seen\n+    if(mapSeenMasternodeBroadcast.count(hash) && !mnb.fRecovery) { //seen\n         LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s seen\\n\", mnb.vin.prevout.ToStringShort());\n         // less then 2 pings left before this MN goes into non-recoverable state, bump sync timeout\n         if(GetTime() - mapSeenMasternodeBroadcast[hash].first > MASTERNODE_NEW_START_REQUIRED_SECONDS - MASTERNODE_MIN_MNP_SECONDS * 2) {\n             LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s seen update\\n\", mnb.vin.prevout.ToStringShort());\n             mapSeenMasternodeBroadcast[hash].first = GetTime();\n             masternodeSync.AddedMasternodeList();\n         }\n+        // did we ask this node for it?\n+        if(pfrom && IsMnbRecoveryRequested(hash) && GetTime() < mMnbRecoveryRequests[hash].first) {\n+            LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- mnb=%s seen request\\n\", hash.ToString());\n+            if(mMnbRecoveryRequests[hash].second.count(pfrom->addr)) {\n+                LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- mnb=%s seen request, addr=%s\\n\", hash.ToString(), pfrom->addr.ToString());\n+                // do not allow node to send same mnb multiple times in recovery mode\n+                mMnbRecoveryRequests[hash].second.erase(pfrom->addr);\n+                // does it have newer lastPing?\n+                if(mnb.lastPing.sigTime > mapSeenMasternodeBroadcast[hash].second.lastPing.sigTime) {\n+                    // simulate Check\n+                    CMasternode mnTemp = CMasternode(mnb);\n+                    mnTemp.Check();\n+                    LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- mnb=%s seen request, addr=%s, better lastPing: %d min ago, projected mn state: %s\\n\", hash.ToString(), pfrom->addr.ToString(), (GetTime() - mnb.lastPing.sigTime)/60, mnTemp.GetStateString());\n+                    if(mnTemp.IsValidStateForAutoStart(mnTemp.nActiveState)) {\n+                        // this node thinks it's a good one\n+                        LogPrint(\"masternode\", \"CMasternodeMan::CheckMnbAndUpdateMasternodeList -- masternode=%s seen good\\n\", mnb.vin.prevout.ToStringShort());\n+                        mMnbRecoveryGoodReplies[hash].push_back(mnb);\n+                    }\n+                }\n+            }\n+        }\n         return true;\n     }\n     mapSeenMasternodeBroadcast.insert(std::make_pair(hash, std::make_pair(GetTime(), mnb)));"
      },
      {
        "sha": "0ac437ff88f770e3a6072e4dc6b08da9e6dcaaeb",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a290693b9887ce68069883f75b6fa870ff2578/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=e4a290693b9887ce68069883f75b6fa870ff2578",
        "patch": "@@ -103,6 +103,11 @@ class CMasternodeMan\n     static const int MAX_POSE_RANK              = 10;\n     static const int MAX_POSE_BLOCKS            = 10;\n \n+    static const int MNB_RECOVERY_QUORUM_TOTAL      = 10;\n+    static const int MNB_RECOVERY_QUORUM_REQUIRED   = 6;\n+    static const int MNB_RECOVERY_WAIT_SECONDS      = 60;\n+    static const int MNB_RECOVERY_RETRY_SECONDS     = 3 * 60 * 60;\n+\n \n     // critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n@@ -121,6 +126,10 @@ class CMasternodeMan\n     // who we asked for the masternode verification\n     std::map<CNetAddr, CMasternodeVerification> mWeAskedForVerification;\n \n+    // these maps are used for masternode recovery from MASTERNODE_NEW_START_REQUIRED state\n+    std::map<uint256, std::pair< int64_t, std::set<CNetAddr> > > mMnbRecoveryRequests;\n+    std::map<uint256, std::vector<CMasternodeBroadcast> > mMnbRecoveryGoodReplies;\n+\n     int64_t nLastIndexRebuildTime;\n \n     CMasternodeIndex indexMasternodes;\n@@ -171,6 +180,8 @@ class CMasternodeMan\n         READWRITE(mAskedUsForMasternodeList);\n         READWRITE(mWeAskedForMasternodeList);\n         READWRITE(mWeAskedForMasternodeListEntry);\n+        READWRITE(mMnbRecoveryRequests);\n+        READWRITE(mMnbRecoveryGoodReplies);\n         READWRITE(nLastWatchdogVoteTime);\n         READWRITE(nDsqCount);\n \n@@ -304,7 +315,8 @@ class CMasternodeMan\n     /// Update masternode list and maps using provided CMasternodeBroadcast\n     void UpdateMasternodeList(CMasternodeBroadcast mnb);\n     /// Perform complete check and only then update list and maps\n-    bool CheckMnbAndUpdateMasternodeList(CMasternodeBroadcast mnb, int& nDos);\n+    bool CheckMnbAndUpdateMasternodeList(CNode* pfrom, CMasternodeBroadcast mnb, int& nDos);\n+    bool IsMnbRecoveryRequested(const uint256& hash) { return mMnbRecoveryRequests.count(hash); }\n \n     void UpdateLastPaid();\n "
      },
      {
        "sha": "fa8d2ce89b378d4c1d542f2311b324b1682d2567",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a290693b9887ce68069883f75b6fa870ff2578/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a290693b9887ce68069883f75b6fa870ff2578/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=e4a290693b9887ce68069883f75b6fa870ff2578",
        "patch": "@@ -765,7 +765,7 @@ UniValue masternodebroadcast(const UniValue& params, bool fHelp)\n             bool fResult;\n             if (mnb.CheckSignature(nDos)) {\n                 if (fSafe) {\n-                    fResult = mnodeman.CheckMnbAndUpdateMasternodeList(mnb, nDos);\n+                    fResult = mnodeman.CheckMnbAndUpdateMasternodeList(NULL, mnb, nDos);\n                 } else {\n                     mnodeman.UpdateMasternodeList(mnb);\n                     mnb.Relay();"
      }
    ]
  },
  {
    "sha": "457c20092fa4017801dd8ce9f495f1cbeaccb4d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTdjMjAwOTJmYTQwMTc4MDFkZDhjZTlmNDk1ZjFjYmVhY2NiNGQy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-01T18:30:40Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-01T18:30:40Z"
      },
      "message": "Select peers on initial sync more carefully (#1238)\n\n* Select peers on initial sync more carefully\r\n\r\n* allow a small error margin of 1 block\r\n\r\n* fix comment/log message",
      "tree": {
        "sha": "0b5f21e1bad69047ee1f21851fe06b1c69b21bd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b5f21e1bad69047ee1f21851fe06b1c69b21bd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/457c20092fa4017801dd8ce9f495f1cbeaccb4d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457c20092fa4017801dd8ce9f495f1cbeaccb4d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/457c20092fa4017801dd8ce9f495f1cbeaccb4d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457c20092fa4017801dd8ce9f495f1cbeaccb4d2/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4a290693b9887ce68069883f75b6fa870ff2578",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a290693b9887ce68069883f75b6fa870ff2578",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a290693b9887ce68069883f75b6fa870ff2578"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d886f6dd046ba6b9862c474d08c65a6ba561c06e",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/457c20092fa4017801dd8ce9f495f1cbeaccb4d2/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/457c20092fa4017801dd8ce9f495f1cbeaccb4d2/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=457c20092fa4017801dd8ce9f495f1cbeaccb4d2",
        "patch": "@@ -295,6 +295,29 @@ void CMasternodeSync::ProcessTick()\n                 continue;\n             }\n \n+            CNodeStateStats stats;\n+            if(!GetNodeStateStats(pnode->id, stats) || stats.nCommonHeight == -1 || stats.nSyncHeight == -1) continue; // not enough info about this peer\n+\n+            // Check blocks and headers, allow a small error margin of 1 block\n+            if(pCurrentBlockIndex->nHeight - 1 > stats.nCommonHeight) {\n+                // This peer probably stuck, don't sync any additional data,\n+                // disconnect to free this connection slot for another peer.\n+                pnode->fDisconnect = true;\n+                LogPrintf(\"CMasternodeSync::ProcessTick -- disconnecting from stuck peer, nHeight=%d, nCommonHeight=%d, peer=%d\\n\",\n+                            pCurrentBlockIndex->nHeight, stats.nCommonHeight, pnode->id);\n+                continue;\n+            }\n+            else if(pCurrentBlockIndex->nHeight < stats.nSyncHeight - 1) {\n+                // This peer announced more headers than we have blocks currently,\n+                // we probably need to wait a bit or this peer is on another (longer??) chain,\n+                // so our data could be incompatible, skip it anyway for now but do not disconnect,\n+                // maybe that chain is the right one.\n+                LogPrintf(\"CMasternodeSync::ProcessTick -- skipping peer, who announced more headers than we have blocks currently, nHeight=%d, nSyncHeight=%d, peer=%d\\n\",\n+                            pCurrentBlockIndex->nHeight, stats.nSyncHeight, pnode->id);\n+                continue;\n+            }\n+            // If we got here, we should have enough info about this peer and it should be ok to continue further.\n+\n             // SPORK : ALWAYS ASK FOR SPORKS AS WE SYNC (we skip this mode now)\n \n             if(!netfulfilledman.HasFulfilledRequest(pnode->addr, \"spork-sync\")) {"
      }
    ]
  },
  {
    "sha": "8d7866cf6b29d7f268db18e7924bfad98d204360",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDc4NjZjZjZiMjlkN2YyNjhkYjE4ZTc5MjRiZmFkOThkMjA0MzYw",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-03T14:17:29Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-03T14:17:29Z"
      },
      "message": "Update rate check buffer for locally created objects (#1245)",
      "tree": {
        "sha": "f617f4134b042220d3ad678131fa0d48cdfb2c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f617f4134b042220d3ad678131fa0d48cdfb2c6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d7866cf6b29d7f268db18e7924bfad98d204360",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7866cf6b29d7f268db18e7924bfad98d204360",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d7866cf6b29d7f268db18e7924bfad98d204360",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7866cf6b29d7f268db18e7924bfad98d204360/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "457c20092fa4017801dd8ce9f495f1cbeaccb4d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457c20092fa4017801dd8ce9f495f1cbeaccb4d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/457c20092fa4017801dd8ce9f495f1cbeaccb4d2"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 14,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7d5e6fb942b04817b60f5c3023f9dd8cd35b2a11",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d7866cf6b29d7f268db18e7924bfad98d204360/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d7866cf6b29d7f268db18e7924bfad98d204360/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=8d7866cf6b29d7f268db18e7924bfad98d204360",
        "patch": "@@ -203,26 +203,39 @@ UniValue gobject(const UniValue& params, bool fHelp)\n                 govobj.Sign(activeMasternode.keyMasternode, activeMasternode.pubKeyMasternode);\n             }\n             else {\n+                LogPrintf(\"gobject(submit) -- Object submission rejected because node is not a masternode\\n\");\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Only valid masternodes can submit this type of object\");\n             }\n         }\n         else {\n             if(params.size() != 6) {\n+                LogPrintf(\"gobject(submit) -- Object submission rejected because fee tx not provided\\n\");\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"The fee-txid parameter must be included to submit this type of object\");\n             }\n         }\n \n+        std::string strHash = govobj.GetHash().ToString();\n+\n         std::string strError = \"\";\n         if(!govobj.IsValidLocally(pindex, strError, true)) {\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Governance object is not valid - \" + govobj.GetHash().ToString() + \" - \" + strError);\n+            LogPrintf(\"gobject(submit) -- Object submission rejected because object is not valid - hash = %s, strError = %s\\n\", strHash, strError);\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Governance object is not valid - \" + strHash + \" - \" + strError);\n         }\n \n         // RELAY THIS OBJECT\n+        // Reject if rate check fails but don't update buffer\n         if(!governance.MasternodeRateCheck(govobj)) {\n+            LogPrintf(\"gobject(submit) -- Object submission rejected because of rate check failure - hash = %s\\n\", strHash);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Object creation rate limit exceeded\");\n+        }\n+        // This check should always pass, update buffer\n+        if(!governance.MasternodeRateCheck(govobj, true)) {\n+            LogPrintf(\"gobject(submit) -- Object submission rejected because of rate check failure (buffer updated) - hash = %s\\n\", strHash);\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Object creation rate limit exceeded\");\n         }\n         governance.AddSeenGovernanceObject(govobj.GetHash(), SEEN_OBJECT_IS_VALID);\n         govobj.Relay();\n+        LogPrintf(\"gobject(submit) -- Adding locally created governance object - %s\\n\", strHash);\n         governance.AddGovernanceObject(govobj);\n \n         return govobj.GetHash().ToString();"
      }
    ]
  },
  {
    "sha": "ba8d8ae027af246582511ac78806bf1df3d2d426",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYThkOGFlMDI3YWYyNDY1ODI1MTFhYzc4ODA2YmYxZGYzZDJkNDI2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-03T18:32:52Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-03T18:32:52Z"
      },
      "message": "remove unused pindex from IsValidLocally, fix cs_main in rpc (#1243)",
      "tree": {
        "sha": "6ae2bcb9bc14b0ac156b6d42a3651c21384aa43d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ae2bcb9bc14b0ac156b6d42a3651c21384aa43d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba8d8ae027af246582511ac78806bf1df3d2d426",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba8d8ae027af246582511ac78806bf1df3d2d426",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba8d8ae027af246582511ac78806bf1df3d2d426",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba8d8ae027af246582511ac78806bf1df3d2d426/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d7866cf6b29d7f268db18e7924bfad98d204360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d7866cf6b29d7f268db18e7924bfad98d204360",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d7866cf6b29d7f268db18e7924bfad98d204360"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 19,
      "deletions": 44
    },
    "files": [
      {
        "sha": "410edbdbe36c42526b57e2ea2d120f71dd173d3b",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba8d8ae027af246582511ac78806bf1df3d2d426/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba8d8ae027af246582511ac78806bf1df3d2d426/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=ba8d8ae027af246582511ac78806bf1df3d2d426",
        "patch": "@@ -404,27 +404,23 @@ std::string CGovernanceObject::GetDataAsString()\n     return s;\n }\n \n-void CGovernanceObject::UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex)\n+void CGovernanceObject::UpdateLocalValidity()\n {\n     // THIS DOES NOT CHECK COLLATERAL, THIS IS CHECKED UPON ORIGINAL ARRIVAL\n-    fCachedLocalValidity = IsValidLocally(pCurrentBlockIndex, strLocalValidityError, false);\n+    fCachedLocalValidity = IsValidLocally(strLocalValidityError, false);\n };\n \n \n-bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral)\n+bool CGovernanceObject::IsValidLocally(std::string& strError, bool fCheckCollateral)\n {\n     bool fMissingMasternode = false;\n \n-    return IsValidLocally(pindex, strError, fMissingMasternode, fCheckCollateral);\n+    return IsValidLocally(strError, fMissingMasternode, fCheckCollateral);\n }\n \n-bool CGovernanceObject::IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral)\n+bool CGovernanceObject::IsValidLocally(std::string& strError, bool& fMissingMasternode, bool fCheckCollateral)\n {\n     fMissingMasternode = false;\n-    if(!pindex) {\n-        strError = \"Tip is NULL\";\n-        return true;\n-    }\n \n     if(fUnparsable) {\n         strError = \"Object data unparseable\";"
      },
      {
        "sha": "ba9d8fb7d24948c27b2630f219c1ebc41a845911",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba8d8ae027af246582511ac78806bf1df3d2d426/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba8d8ae027af246582511ac78806bf1df3d2d426/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=ba8d8ae027af246582511ac78806bf1df3d2d426",
        "patch": "@@ -255,14 +255,14 @@ class CGovernanceObject\n \n     // CORE OBJECT FUNCTIONS\n \n-    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool fCheckCollateral);\n+    bool IsValidLocally(std::string& strError, bool fCheckCollateral);\n \n-    bool IsValidLocally(const CBlockIndex* pindex, std::string& strError, bool& fMissingMasternode, bool fCheckCollateral);\n+    bool IsValidLocally(std::string& strError, bool& fMissingMasternode, bool fCheckCollateral);\n \n     /// Check the collateral transaction for the budget proposal/finalized budget\n     bool IsCollateralValid(std::string& strError);\n \n-    void UpdateLocalValidity(const CBlockIndex *pCurrentBlockIndex);\n+    void UpdateLocalValidity();\n \n     void UpdateSentinelVariables();\n "
      },
      {
        "sha": "53d31b15881acf9d4417dd427865729109308c14",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba8d8ae027af246582511ac78806bf1df3d2d426/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba8d8ae027af246582511ac78806bf1df3d2d426/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=ba8d8ae027af246582511ac78806bf1df3d2d426",
        "patch": "@@ -173,7 +173,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         // CHECK OBJECT AGAINST LOCAL BLOCKCHAIN\n \n         bool fMasternodeMissing = false;\n-        bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n+        bool fIsValid = govobj.IsValidLocally(strError, fMasternodeMissing, true);\n \n         if(fMasternodeMissing) {\n             mapMasternodeOrphanObjects.insert(std::make_pair(nHash, object_time_pair_t(govobj, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME)));\n@@ -293,8 +293,8 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n \n     // MAKE SURE THIS OBJECT IS OK\n \n-    if(!govobj.IsValidLocally(pCurrentBlockIndex, strError, true)) {\n-        LogPrintf(\"CGovernanceManager::AddGovernanceObject -- invalid governance object - %s - (pCurrentBlockIndex nHeight %d) \\n\", strError, pCurrentBlockIndex->nHeight);\n+    if(!govobj.IsValidLocally(strError, true)) {\n+        LogPrintf(\"CGovernanceManager::AddGovernanceObject -- invalid governance object - %s - (nCachedBlockHeight %d) \\n\", strError, nCachedBlockHeight);\n         return false;\n     }\n \n@@ -407,7 +407,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n         // IF CACHE IS NOT DIRTY, WHY DO THIS?\n         if(pObj->IsSetDirtyCache()) {\n             // UPDATE LOCAL VALIDITY AGAINST CRYPTO DATA\n-            pObj->UpdateLocalValidity(pCurrentBlockIndex);\n+            pObj->UpdateLocalValidity();\n \n             // UPDATE SENTINEL SIGNALING VARIABLES\n             pObj->UpdateSentinelVariables();\n@@ -668,7 +668,7 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n             LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n             std::string strError;\n-            bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, true); \n+            bool fIsValid = govobj.IsValidLocally(strError, true);\n             if(!fIsValid) {\n                 LogPrintf(\"CGovernanceManager::Sync -- not syncing invalid govobj: %s, strError = %s, fCachedValid = %d, peer=%d\\n\", \n                          strHash, strError, govobj.IsSetCachedValid(), pfrom->id);\n@@ -887,7 +887,7 @@ void CGovernanceManager::CheckMasternodeOrphanObjects()\n \n         string strError;\n         bool fMasternodeMissing = false;\n-        bool fIsValid = govobj.IsValidLocally(pCurrentBlockIndex, strError, fMasternodeMissing, true);\n+        bool fIsValid = govobj.IsValidLocally(strError, fMasternodeMissing, true);\n         if(!fIsValid) {\n             if(!fMasternodeMissing) {\n                 mapMasternodeOrphanObjects.erase(it++);"
      },
      {
        "sha": "4df4fd9fa34dd410eac829cec5c96cea563933c6",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 26,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba8d8ae027af246582511ac78806bf1df3d2d426/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba8d8ae027af246582511ac78806bf1df3d2d426/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=ba8d8ae027af246582511ac78806bf1df3d2d426",
        "patch": "@@ -84,15 +84,6 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // ASSEMBLE NEW GOVERNANCE OBJECT FROM USER PARAMETERS\n \n-        CBlockIndex* pindex = NULL;\n-        {\n-            LOCK(cs_main);\n-            pindex = chainActive.Tip();\n-        }\n-\n-        std::vector<CMasternodeConfig::CMasternodeEntry> mnEntries;\n-        mnEntries = masternodeConfig.getEntries();\n-\n         uint256 hashParent;\n \n         // -- attach to root node (root node doesn't really exist, but has a hash of zero)\n@@ -118,7 +109,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         }\n \n         std::string strError = \"\";\n-        if(!govobj.IsValidLocally(pindex, strError, false))\n+        if(!govobj.IsValidLocally(strError, false))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Governance object is not valid - \" + govobj.GetHash().ToString() + \" - \" + strError);\n \n         CWalletTx wtx;\n@@ -161,12 +152,6 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // ASSEMBLE NEW GOVERNANCE OBJECT FROM USER PARAMETERS\n \n-        CBlockIndex* pindex = NULL;\n-        {\n-            LOCK(cs_main);\n-            pindex = chainActive.Tip();\n-        }\n-\n         uint256 txidFee;\n \n         if(params.size() == 6) {\n@@ -217,7 +202,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         std::string strHash = govobj.GetHash().ToString();\n \n         std::string strError = \"\";\n-        if(!govobj.IsValidLocally(pindex, strError, true)) {\n+        if(!govobj.IsValidLocally(strError, true)) {\n             LogPrintf(\"gobject(submit) -- Object submission rejected because object is not valid - hash = %s, strError = %s\\n\", strHash, strError);\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Governance object is not valid - \" + strHash + \" - \" + strError);\n         }\n@@ -575,17 +560,11 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // SETUP BLOCK INDEX VARIABLE / RESULTS VARIABLE\n \n-        CBlockIndex* pindex = NULL;\n-        {\n-            LOCK(cs_main);\n-            pindex = chainActive.Tip();\n-        }\n-\n         UniValue objResult(UniValue::VOBJ);\n \n         // GET MATCHING GOVERNANCE OBJECTS\n \n-        LOCK(governance.cs);\n+        LOCK2(cs_main, governance.cs);\n \n         std::vector<CGovernanceObject*> objs = governance.GetAllNewerThan(nStartTime);\n         governance.UpdateLastDiffTime(GetTime());\n@@ -619,7 +598,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n             // REPORT VALIDITY AND CACHING FLAGS FOR VARIOUS SETTINGS\n             std::string strError = \"\";\n-            bObj.push_back(Pair(\"fBlockchainValidity\",  pGovObj->IsValidLocally(pindex , strError, false)));\n+            bObj.push_back(Pair(\"fBlockchainValidity\",  pGovObj->IsValidLocally(strError, false)));\n             bObj.push_back(Pair(\"IsValidReason\",  strError.c_str()));\n             bObj.push_back(Pair(\"fCachedValid\",  pGovObj->IsSetCachedValid()));\n             bObj.push_back(Pair(\"fCachedFunding\",  pGovObj->IsSetCachedFunding()));\n@@ -698,7 +677,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n         // --\n         std::string strError = \"\";\n-        objResult.push_back(Pair(\"fLocalValidity\",  pGovObj->IsValidLocally(chainActive.Tip(), strError, false)));\n+        objResult.push_back(Pair(\"fLocalValidity\",  pGovObj->IsValidLocally(strError, false)));\n         objResult.push_back(Pair(\"IsValidReason\",  strError.c_str()));\n         objResult.push_back(Pair(\"fCachedValid\",  pGovObj->IsSetCachedValid()));\n         objResult.push_back(Pair(\"fCachedFunding\",  pGovObj->IsSetCachedFunding()));"
      }
    ]
  },
  {
    "sha": "a9e1361fc264dda1b3b9ea087e054bff3da5894c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWUxMzYxZmMyNjRkZGExYjNiOWVhMDg3ZTA1NGJmZjNkYTU4OTRj",
    "commit": {
      "author": {
        "name": "snogcel",
        "email": "ledniknoj@gmail.com",
        "date": "2017-01-04T17:47:16Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-04T17:47:16Z"
      },
      "message": "update voteraw rpc parameters (#1249)",
      "tree": {
        "sha": "2a516c9f46b5fa4ff8e63f9166031df3a9eb8751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a516c9f46b5fa4ff8e63f9166031df3a9eb8751"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9e1361fc264dda1b3b9ea087e054bff3da5894c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9e1361fc264dda1b3b9ea087e054bff3da5894c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9e1361fc264dda1b3b9ea087e054bff3da5894c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9e1361fc264dda1b3b9ea087e054bff3da5894c/comments",
    "author": {
      "login": "snogcel",
      "id": 7192646,
      "node_id": "MDQ6VXNlcjcxOTI2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7192646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/snogcel",
      "html_url": "https://github.com/snogcel",
      "followers_url": "https://api.github.com/users/snogcel/followers",
      "following_url": "https://api.github.com/users/snogcel/following{/other_user}",
      "gists_url": "https://api.github.com/users/snogcel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/snogcel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/snogcel/subscriptions",
      "organizations_url": "https://api.github.com/users/snogcel/orgs",
      "repos_url": "https://api.github.com/users/snogcel/repos",
      "events_url": "https://api.github.com/users/snogcel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/snogcel/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba8d8ae027af246582511ac78806bf1df3d2d426",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba8d8ae027af246582511ac78806bf1df3d2d426",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba8d8ae027af246582511ac78806bf1df3d2d426"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7c7dbb4e53a8acc33df39eef81fc2d5af126cd71",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9e1361fc264dda1b3b9ea087e054bff3da5894c/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9e1361fc264dda1b3b9ea087e054bff3da5894c/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=a9e1361fc264dda1b3b9ea087e054bff3da5894c",
        "patch": "@@ -115,7 +115,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setban\", 3 },\n     { \"spork\", 1 },\n     { \"voteraw\", 1 },\n-    { \"voteraw\", 4 },\n+    { \"voteraw\", 5 },\n     { \"getblockhashes\", 0 },\n     { \"getblockhashes\", 1 },\n     { \"getspentinfo\", 0},"
      },
      {
        "sha": "a6f93940ac37687a1602e5694d47767a9f590d9e",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9e1361fc264dda1b3b9ea087e054bff3da5894c/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9e1361fc264dda1b3b9ea087e054bff3da5894c/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=a9e1361fc264dda1b3b9ea087e054bff3da5894c",
        "patch": "@@ -771,7 +771,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n \n UniValue voteraw(const UniValue& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 6)\n+    if (fHelp || params.size() != 7)\n         throw std::runtime_error(\n                 \"voteraw <masternode-tx-hash> <masternode-tx-index> <governance-hash> <vote-signal> [yes|no|abstain] <time> <vote-sig>\\n\"\n                 \"Compile and relay a governance vote with provided external signature instead of signing vote internally\\n\""
      }
    ]
  },
  {
    "sha": "7e9ad0e26cba6a8be51f371b95481e2071e603d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTlhZDBlMjZjYmE2YThiZTUxZjM3MWI5NTQ4MWUyMDcxZTYwM2Q0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-04T17:47:50Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-04T17:47:50Z"
      },
      "message": "Migration fixes (#1247)\n\n* clean some network specific qt settings on migration\r\n\r\n* ask user to choose datadir if default dir is not the one we expected",
      "tree": {
        "sha": "187767d46d806b58b6f1d05e07ed3584441b0897",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/187767d46d806b58b6f1d05e07ed3584441b0897"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e9ad0e26cba6a8be51f371b95481e2071e603d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e9ad0e26cba6a8be51f371b95481e2071e603d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e9ad0e26cba6a8be51f371b95481e2071e603d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e9ad0e26cba6a8be51f371b95481e2071e603d4/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9e1361fc264dda1b3b9ea087e054bff3da5894c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9e1361fc264dda1b3b9ea087e054bff3da5894c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9e1361fc264dda1b3b9ea087e054bff3da5894c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 26,
      "deletions": 6
    },
    "files": [
      {
        "sha": "521955d3eb87d52788fcf94d2a79643c3d438b78",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=7e9ad0e26cba6a8be51f371b95481e2071e603d4",
        "patch": "@@ -864,6 +864,18 @@ bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n \n #endif\n \n+void migrateQtSettings()\n+{\n+    // Migration (12.1)\n+    QSettings settings;\n+    if(!settings.value(\"fMigrationDone121\", false).toBool()) {\n+        settings.remove(\"theme\");\n+        settings.remove(\"nWindowPos\");\n+        settings.remove(\"nWindowSize\");\n+        settings.setValue(\"fMigrationDone121\", true);\n+    }\n+}\n+\n void saveWindowGeometry(const QString& strSetting, QWidget *parent)\n {\n     QSettings settings;"
      },
      {
        "sha": "a937f6c1af58c9cccc9b13b242c362fa046471c4",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=7e9ad0e26cba6a8be51f371b95481e2071e603d4",
        "patch": "@@ -186,6 +186,9 @@ namespace GUIUtil\n     bool GetStartOnSystemStartup();\n     bool SetStartOnSystemStartup(bool fAutoStart);\n \n+    /** Modify Qt network specific settings on migration */\n+    void migrateQtSettings();\n+\n     /** Save window size and position */\n     void saveWindowGeometry(const QString& strSetting, QWidget *parent);\n     /** Restore window size and position */"
      },
      {
        "sha": "6ec25f492eaff10a6ba1d1785c7d2734ea675a56",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=7e9ad0e26cba6a8be51f371b95481e2071e603d4",
        "patch": "@@ -169,15 +169,17 @@ void Intro::pickDataDirectory()\n     if(!GetArg(\"-datadir\", \"\").empty())\n         return;\n     /* 1) Default data directory for operating system */\n-    QString dataDir = getDefaultDataDirectory();\n+    QString dataDirDefaultCurrent = getDefaultDataDirectory();\n     /* 2) Allow QSettings to override default dir */\n-    dataDir = settings.value(\"strDataDir\", dataDir).toString();\n+    QString dataDir = settings.value(\"strDataDir\", dataDirDefaultCurrent).toString();\n+    /* 3) Check to see if default datadir is the one we expect */\n+    QString dataDirDefaultSettings = settings.value(\"strDataDirDefault\", dataDirDefaultCurrent).toString();\n \n-    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR))\n+    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR) || dataDirDefaultCurrent != dataDirDefaultSettings)\n     {\n-        /* If current default data directory does not exist, let the user choose one */\n+        /* Let the user choose one */\n         Intro intro;\n-        intro.setDataDirectory(dataDir);\n+        intro.setDataDirectory(dataDirDefaultCurrent);\n         intro.setWindowIcon(QIcon(\":icons/bitcoin\"));\n \n         while(true)\n@@ -199,12 +201,13 @@ void Intro::pickDataDirectory()\n         }\n \n         settings.setValue(\"strDataDir\", dataDir);\n+        settings.setValue(\"strDataDirDefault\", dataDirDefaultCurrent);\n     }\n     /* Only override -datadir if different from the default, to make it possible to\n      * override -datadir in the dash.conf file in the default data directory\n      * (to be consistent with dashd behavior)\n      */\n-    if(dataDir != getDefaultDataDirectory())\n+    if(dataDir != dataDirDefaultCurrent)\n         SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n }\n "
      },
      {
        "sha": "4325db39d7ef66c9701e3672720fc91421552c4d",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e9ad0e26cba6a8be51f371b95481e2071e603d4/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=7e9ad0e26cba6a8be51f371b95481e2071e603d4",
        "patch": "@@ -64,6 +64,8 @@ NetworkStyle::NetworkStyle(const QString &appName, const int iconColorHueShift,\n {\n     // Allow for separate UI settings for testnets\n     QApplication::setApplicationName(appName);\n+    // Make sure settings migrated properly\n+    GUIUtil::migrateQtSettings();\n     // Grab theme from settings\n     QString theme = GUIUtil::getThemeName();\n     // load pixmap"
      }
    ]
  },
  {
    "sha": "0c2304e24ff4ed22015248ebecaa1d87484c805d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzIzMDRlMjRmZjRlZDIyMDE1MjQ4ZWJlY2FhMWQ4NzQ4NGM4MDVk",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-09T14:51:04Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-09T14:51:04Z"
      },
      "message": "Backport btc pr7907 (#1253)\n\nFixing this https://bitslog.wordpress.com/2017/01/08/a-bitcoin-transaction-that-takes-5-hours-to-verify/\r\n\r\n* Unit test for CScript::FindAndDelete\r\n\r\n* Replace memcmp with std::equal in CScript::FindAndDelete\r\n\r\nFunction is stl; std::equal just makes more sense.\r\n\r\n* Replace c-style cast with c++ style static_cast.\r\n\r\n* Improve worst-case behavior of CScript::FindAndDelete\r\n\r\nThanks to Sergio Lerner for identifying this issue and suggesting this kind of solution.",
      "tree": {
        "sha": "808634ba623b821d0cfbccdb1fe53a2bacfe92ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/808634ba623b821d0cfbccdb1fe53a2bacfe92ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c2304e24ff4ed22015248ebecaa1d87484c805d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2304e24ff4ed22015248ebecaa1d87484c805d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c2304e24ff4ed22015248ebecaa1d87484c805d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2304e24ff4ed22015248ebecaa1d87484c805d/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e9ad0e26cba6a8be51f371b95481e2071e603d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e9ad0e26cba6a8be51f371b95481e2071e603d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e9ad0e26cba6a8be51f371b95481e2071e603d4"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 129,
      "deletions": 3
    },
    "files": [
      {
        "sha": "32cb200a9f47e203b7a4360f7afef82809eedeea",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c2304e24ff4ed22015248ebecaa1d87484c805d/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c2304e24ff4ed22015248ebecaa1d87484c805d/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=0c2304e24ff4ed22015248ebecaa1d87484c805d",
        "patch": "@@ -570,17 +570,26 @@ class CScript : public CScriptBase\n         int nFound = 0;\n         if (b.empty())\n             return nFound;\n-        iterator pc = begin();\n+        CScript result;\n+        iterator pc = begin(), pc2 = begin();\n         opcodetype opcode;\n         do\n         {\n-            while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n+            result.insert(result.end(), pc2, pc);\n+            while (static_cast<size_t>(end() - pc) >= b.size() && std::equal(b.begin(), b.end(), pc))\n             {\n-                pc = erase(pc, pc + b.size());\n+                pc = pc + b.size();\n                 ++nFound;\n             }\n+            pc2 = pc;\n         }\n         while (GetOp(pc, opcode));\n+\n+        if (nFound > 0) {\n+            result.insert(result.end(), pc2, end());\n+            *this = result;\n+        }\n+\n         return nFound;\n     }\n     int Find(opcodetype op) const"
      },
      {
        "sha": "3edf06def217b8ab0581a7b98ca36e82e28690c2",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c2304e24ff4ed22015248ebecaa1d87484c805d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c2304e24ff4ed22015248ebecaa1d87484c805d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=0c2304e24ff4ed22015248ebecaa1d87484c805d",
        "patch": "@@ -1051,4 +1051,121 @@ BOOST_AUTO_TEST_CASE(script_GetScriptAsm)\n     BOOST_CHECK_EQUAL(derSig + \"83 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"83\")) << vchPubKey));\n }\n \n+static CScript\n+ScriptFromHex(const char* hex)\n+{\n+    std::vector<unsigned char> data = ParseHex(hex);\n+    return CScript(data.begin(), data.end());\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n+{\n+    // Exercise the FindAndDelete functionality\n+    CScript s;\n+    CScript d;\n+    CScript expect;\n+\n+    s = CScript() << OP_1 << OP_2;\n+    d = CScript(); // delete nothing should be a no-op\n+    expect = s;\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 0);\n+    BOOST_CHECK(s == expect);\n+\n+    s = CScript() << OP_1 << OP_2 << OP_3;\n+    d = CScript() << OP_2;\n+    expect = CScript() << OP_1 << OP_3;\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 1);\n+    BOOST_CHECK(s == expect);\n+\n+    s = CScript() << OP_3 << OP_1 << OP_3 << OP_3 << OP_4 << OP_3;\n+    d = CScript() << OP_3;\n+    expect = CScript() << OP_1 << OP_4;\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 4);\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n+    d = ScriptFromHex(\"0302ff03\");\n+    expect = CScript();\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 1);\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"0302ff030302ff03\"); // PUSH 0x2ff03 PUSH 0x2ff03\n+    d = ScriptFromHex(\"0302ff03\");\n+    expect = CScript();\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 2);\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"0302ff030302ff03\");\n+    d = ScriptFromHex(\"02\");\n+    expect = s; // FindAndDelete matches entire opcodes\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 0);\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"0302ff030302ff03\");\n+    d = ScriptFromHex(\"ff\");\n+    expect = s;\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 0);\n+    BOOST_CHECK(s == expect);\n+\n+    // This is an odd edge case: strip of the push-three-bytes\n+    // prefix, leaving 02ff03 which is push-two-bytes:\n+    s = ScriptFromHex(\"0302ff030302ff03\");\n+    d = ScriptFromHex(\"03\");\n+    expect = CScript() << ParseHex(\"ff03\") << ParseHex(\"ff03\");\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 2);\n+    BOOST_CHECK(s == expect);\n+\n+    // Byte sequence that spans multiple opcodes:\n+    s = ScriptFromHex(\"02feed5169\"); // PUSH(0xfeed) OP_1 OP_VERIFY\n+    d = ScriptFromHex(\"feed51\");\n+    expect = s;\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 0); // doesn't match 'inside' opcodes\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"02feed5169\"); // PUSH(0xfeed) OP_1 OP_VERIFY\n+    d = ScriptFromHex(\"02feed51\");\n+    expect = ScriptFromHex(\"69\");\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 1);\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"516902feed5169\");\n+    d = ScriptFromHex(\"feed51\");\n+    expect = s;\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 0);\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"516902feed5169\");\n+    d = ScriptFromHex(\"02feed51\");\n+    expect = ScriptFromHex(\"516969\");\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 1);\n+    BOOST_CHECK(s == expect);\n+\n+    s = CScript() << OP_0 << OP_0 << OP_1 << OP_1;\n+    d = CScript() << OP_0 << OP_1;\n+    expect = CScript() << OP_0 << OP_1; // FindAndDelete is single-pass\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 1);\n+    BOOST_CHECK(s == expect);\n+\n+    s = CScript() << OP_0 << OP_0 << OP_1 << OP_0 << OP_1 << OP_1;\n+    d = CScript() << OP_0 << OP_1;\n+    expect = CScript() << OP_0 << OP_1; // FindAndDelete is single-pass\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 2);\n+    BOOST_CHECK(s == expect);\n+\n+    // Another weird edge case:\n+    // End with invalid push (not enough data)...\n+    s = ScriptFromHex(\"0003feed\");\n+    d = ScriptFromHex(\"03feed\"); // ... can remove the invalid push\n+    expect = ScriptFromHex(\"00\");\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 1);\n+    BOOST_CHECK(s == expect);\n+\n+    s = ScriptFromHex(\"0003feed\");\n+    d = ScriptFromHex(\"00\");\n+    expect = ScriptFromHex(\"03feed\");\n+    BOOST_CHECK_EQUAL(s.FindAndDelete(d), 1);\n+    BOOST_CHECK(s == expect);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "3b9a748d5ee5f631a7b9c82407a98d9d41116326",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjlhNzQ4ZDVlZTVmNjMxYTdiOWM4MjQwN2E5OGQ5ZDQxMTE2MzI2",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-09T15:09:42Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-09T15:09:42Z"
      },
      "message": "Fix locking order (#1252)\n\n* Add cs_main locks prior to governance locks to ensure correct locking order",
      "tree": {
        "sha": "6ac59e2ab96e6ca9944840ad1e659aaf49d7e7f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ac59e2ab96e6ca9944840ad1e659aaf49d7e7f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b9a748d5ee5f631a7b9c82407a98d9d41116326",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9a748d5ee5f631a7b9c82407a98d9d41116326",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b9a748d5ee5f631a7b9c82407a98d9d41116326",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9a748d5ee5f631a7b9c82407a98d9d41116326/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c2304e24ff4ed22015248ebecaa1d87484c805d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2304e24ff4ed22015248ebecaa1d87484c805d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c2304e24ff4ed22015248ebecaa1d87484c805d"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5cace87410ee7f70f3fe7d03e4fef9537a4dfeb8",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9a748d5ee5f631a7b9c82407a98d9d41116326/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9a748d5ee5f631a7b9c82407a98d9d41116326/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=3b9a748d5ee5f631a7b9c82407a98d9d41116326",
        "patch": "@@ -155,7 +155,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             return;\n         }\n \n-        LOCK(cs);\n+        LOCK2(cs_main, cs);\n \n         if(mapSeenGovernanceObjects.count(nHash)) {\n             // TODO - print error code? what if it's GOVOBJ_ERROR_IMMATURE?\n@@ -284,7 +284,7 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n \n bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n {\n-    LOCK(cs);\n+    LOCK2(cs_main, cs);\n     std::string strError = \"\";\n \n     DBG( cout << \"CGovernanceManager::AddGovernanceObject START\" << endl; );\n@@ -564,8 +564,9 @@ void CGovernanceManager::NewBlock()\n     // IF WE'RE NOT SYNCED, EXIT\n     if(!masternodeSync.IsSynced()) return;\n \n-    TRY_LOCK(cs, fBudgetNewBlock);\n-    if(!fBudgetNewBlock || !pCurrentBlockIndex) return;\n+    if(!pCurrentBlockIndex) return;\n+    LOCK(cs);\n+\n \n     // CHECK OBJECTS WE'VE ASKED FOR, REMOVE OLD ENTRIES\n \n@@ -652,7 +653,7 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n     LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing to peer=%d, nProp = %s\\n\", pfrom->id, nProp.ToString());\n \n     {\n-        LOCK(cs);\n+        LOCK2(cs_main, cs);\n         fRateChecksEnabled = false;\n         for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n             uint256 h = it->first;"
      }
    ]
  },
  {
    "sha": "a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTMwMzYzMzY2ZTVhMGYxZjk0ZmMzZWE3N2QwZmJmMmI4OGQ5ZDA3",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-10T23:00:06Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-10T23:00:06Z"
      },
      "message": "RequestLowDataPaymentBlocks should request unknown payment blocks too (#1255)",
      "tree": {
        "sha": "2024af6ffab422cd09162b18f7facf3f517b8d53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2024af6ffab422cd09162b18f7facf3f517b8d53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b9a748d5ee5f631a7b9c82407a98d9d41116326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9a748d5ee5f631a7b9c82407a98d9d41116326",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b9a748d5ee5f631a7b9c82407a98d9d41116326"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "89a1edfa8b221153c38c189491f3115485d6e30b",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07",
        "patch": "@@ -843,15 +843,36 @@ void CMasternodePayments::Sync(CNode* pnode, int nCountNeeded)\n     pnode->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_MNW, nInvCount);\n }\n \n-// Request low data payment blocks in batches directly from some node instead of/after preliminary Sync.\n+// Request low data/unknown payment blocks in batches directly from some node instead of/after preliminary Sync.\n void CMasternodePayments::RequestLowDataPaymentBlocks(CNode* pnode)\n {\n     // Old nodes can't process this\n     if(pnode->nVersion < 70202) return;\n+    if(!pCurrentBlockIndex) return;\n \n     LOCK2(cs_main, cs_mapMasternodeBlocks);\n \n     std::vector<CInv> vToFetch;\n+    int nLimit = GetStorageLimit();\n+\n+    const CBlockIndex *pindex = pCurrentBlockIndex;\n+\n+    while(pCurrentBlockIndex->nHeight - pindex->nHeight < nLimit) {\n+        if(!mapMasternodeBlocks.count(pindex->nHeight)) {\n+            // We have no idea about this block height, let's ask\n+            vToFetch.push_back(CInv(MSG_MASTERNODE_PAYMENT_BLOCK, pindex->GetBlockHash()));\n+            // We should not violate GETDATA rules\n+            if(vToFetch.size() == MAX_INV_SZ) {\n+                LogPrintf(\"CMasternodePayments::SyncLowDataPaymentBlocks -- asking peer %d for %d blocks\\n\", pnode->id, MAX_INV_SZ);\n+                pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n+                // Start filling new batch\n+                vToFetch.clear();\n+            }\n+        }\n+        if(!pindex->pprev) break;\n+        pindex = pindex->pprev;\n+    }\n+\n     std::map<int, CMasternodeBlockPayees>::iterator it = mapMasternodeBlocks.begin();\n \n     while(it != mapMasternodeBlocks.end()) {"
      }
    ]
  },
  {
    "sha": "26419596ced6d105bf095d49a5ff92cc4bf16c24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjQxOTU5NmNlZDZkMTA1YmYwOTVkNDlhNWZmOTJjYzRiZjE2YzI0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-10T23:00:22Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-10T23:00:22Z"
      },
      "message": "bump nMinBlocksToStore 4000->5000 (#1256)",
      "tree": {
        "sha": "8b551eb317e631b99cf46bdbec7bb38f2fefee93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b551eb317e631b99cf46bdbec7bb38f2fefee93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26419596ced6d105bf095d49a5ff92cc4bf16c24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26419596ced6d105bf095d49a5ff92cc4bf16c24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26419596ced6d105bf095d49a5ff92cc4bf16c24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26419596ced6d105bf095d49a5ff92cc4bf16c24/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a930363366e5a0f1f94fc3ea77d0fbf2b88d9d07"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cacb754ff572a9daa595f74adea8e4faa6fe4df7",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26419596ced6d105bf095d49a5ff92cc4bf16c24/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26419596ced6d105bf095d49a5ff92cc4bf16c24/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=26419596ced6d105bf095d49a5ff92cc4bf16c24",
        "patch": "@@ -180,7 +180,7 @@ class CMasternodePayments\n     std::map<int, CMasternodeBlockPayees> mapMasternodeBlocks;\n     std::map<COutPoint, int> mapMasternodesLastVote;\n \n-    CMasternodePayments() : nStorageCoeff(1.25), nMinBlocksToStore(4000) {}\n+    CMasternodePayments() : nStorageCoeff(1.25), nMinBlocksToStore(5000) {}\n \n     ADD_SERIALIZE_METHODS;\n "
      }
    ]
  },
  {
    "sha": "9114ef7930864341dfa21d4f74bdb6c8821bf7d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTE0ZWY3OTMwODY0MzQxZGZhMjFkNGY3NGJkYjZjODgyMWJmN2Q5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-10T23:00:34Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-10T23:00:34Z"
      },
      "message": "Changes in potential_deadlock_detected behavior: (#1259)\n\n1. print to stdout too\r\n2. only print when it's critical (i.e. going to crash on assert)",
      "tree": {
        "sha": "e636bae66617662be6d8e23ed638a9d15dfe88f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e636bae66617662be6d8e23ed638a9d15dfe88f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9114ef7930864341dfa21d4f74bdb6c8821bf7d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9114ef7930864341dfa21d4f74bdb6c8821bf7d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9114ef7930864341dfa21d4f74bdb6c8821bf7d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9114ef7930864341dfa21d4f74bdb6c8821bf7d9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26419596ced6d105bf095d49a5ff92cc4bf16c24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26419596ced6d105bf095d49a5ff92cc4bf16c24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26419596ced6d105bf095d49a5ff92cc4bf16c24"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6b9a2995a2226862d8eb6c6e2ea679ad500f1d63",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9114ef7930864341dfa21d4f74bdb6c8821bf7d9/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9114ef7930864341dfa21d4f74bdb6c8821bf7d9/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=9114ef7930864341dfa21d4f74bdb6c8821bf7d9",
        "patch": "@@ -72,41 +72,46 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n     bool firstLocked = false;\n     bool secondLocked = false;\n     bool onlyMaybeDeadlock = false;\n+    std::string strOutput = \"\";\n \n-    LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n-    LogPrintf(\"Previous lock order was:\\n\");\n+    strOutput += \"POTENTIAL DEADLOCK DETECTED\\n\";\n+    strOutput += \"Previous lock order was:\\n\";\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n         if (i.first == mismatch.first) {\n-            LogPrintf(\" (1)\");\n+            strOutput += \" (1)\";\n             if (!firstLocked && secondLocked && i.second.fTry)\n                 onlyMaybeDeadlock = true;\n             firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n-            LogPrintf(\" (2)\");\n+            strOutput += \" (2)\";\n             if (!secondLocked && firstLocked && i.second.fTry)\n                 onlyMaybeDeadlock = true;\n             secondLocked = true;\n         }\n-        LogPrintf(\" %s\\n\", i.second.ToString());\n+        strOutput += strprintf(\" %s\\n\", i.second.ToString().c_str());\n     }\n     firstLocked = false;\n     secondLocked = false;\n-    LogPrintf(\"Current lock order is:\\n\");\n+    strOutput += \"Current lock order is:\\n\";\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n         if (i.first == mismatch.first) {\n-            LogPrintf(\" (1)\");\n+            strOutput += \" (1)\";\n             if (!firstLocked && secondLocked && i.second.fTry)\n                 onlyMaybeDeadlock = true;\n             firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n-            LogPrintf(\" (2)\");\n+            strOutput += \" (2)\";\n             if (!secondLocked && firstLocked && i.second.fTry)\n                 onlyMaybeDeadlock = true;\n             secondLocked = true;\n         }\n-        LogPrintf(\" %s\\n\", i.second.ToString());\n+        strOutput += strprintf(\" %s\\n\", i.second.ToString().c_str());\n+    }\n+    if(!onlyMaybeDeadlock) {\n+        printf(\"%s\\n\", strOutput.c_str());\n+        LogPrintf(\"%s\\n\", strOutput.c_str());\n     }\n     assert(onlyMaybeDeadlock);\n }"
      }
    ]
  },
  {
    "sha": "a42b375a05c969365b2b94adef8bf637c0da610e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDJiMzc1YTA1Yzk2OTM2NWIyYjk0YWRlZjhiZjYzN2MwZGE2MTBl",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-10T23:06:17Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-10T23:06:17Z"
      },
      "message": "Update to listunspent cli command (#1254)\n\n* Add missing description for listunspent help message.\r\n\r\n* Add ps_round (PrivateSend Round) in listunspent result\r\n\r\n* s/round/rounds/",
      "tree": {
        "sha": "3e6c316892169fb476b397d92d222cf08d31f027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e6c316892169fb476b397d92d222cf08d31f027"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a42b375a05c969365b2b94adef8bf637c0da610e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42b375a05c969365b2b94adef8bf637c0da610e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a42b375a05c969365b2b94adef8bf637c0da610e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42b375a05c969365b2b94adef8bf637c0da610e/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9114ef7930864341dfa21d4f74bdb6c8821bf7d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9114ef7930864341dfa21d4f74bdb6c8821bf7d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9114ef7930864341dfa21d4f74bdb6c8821bf7d9"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4600546cdccea5aa6ac5ac253d2f796710302c66",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a42b375a05c969365b2b94adef8bf637c0da610e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a42b375a05c969365b2b94adef8bf637c0da610e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a42b375a05c969365b2b94adef8bf637c0da610e",
        "patch": "@@ -2508,6 +2508,8 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n+            \"    \\\"ps_rounds\\\" : n           (numeric) The number of PS round\\n\"\n+            \"    \\\"spendable\\\" : true|false  (boolean) True if spendable\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n@@ -2583,6 +2585,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n         }\n         entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n         entry.push_back(Pair(\"confirmations\",out.nDepth));\n+        entry.push_back(Pair(\"ps_rounds\", pwalletMain->GetInputPrivateSendRounds(CTxIn(out.tx->GetHash(), out.i))));\n         entry.push_back(Pair(\"spendable\", out.fSpendable));\n         results.push_back(entry);\n     }"
      }
    ]
  },
  {
    "sha": "621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjFmOWViZWNhN2EzNDMwZDlmODBjOWZkNDNiZGRlMzc4ZTU0ODVj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-10T23:33:01Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-10T23:33:01Z"
      },
      "message": "remove GetEstimatedMasternodes and GetTotalCoinEstimate (#1258)",
      "tree": {
        "sha": "7b3a5f8c0c4e89891030fc625d44c795753d3272",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b3a5f8c0c4e89891030fc625d44c795753d3272"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a42b375a05c969365b2b94adef8bf637c0da610e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a42b375a05c969365b2b94adef8bf637c0da610e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a42b375a05c969365b2b94adef8bf637c0da610e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 0,
      "deletions": 65
    },
    "files": [
      {
        "sha": "306bcad77311fed6493a89816b837eba683487c9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
        "patch": "@@ -1704,31 +1704,6 @@ double ConvertBitsToDouble(unsigned int nBits)\n     return dDiff;\n }\n \n-int64_t GetTotalCoinEstimate(int nHeight)\n-{\n-    int64_t nTotalCoins = 0;\n-\n-    // TODO: This could be vastly improved, look at GetBlockValue for a better method\n-    \n-    /* these values are taken from the block explorer */\n-    if(nHeight > 5076) nTotalCoins += 2021642;\n-    if(nHeight > 17000) nTotalCoins += 3267692-2021642;\n-    if(nHeight > 34000) nTotalCoins += 3688775-3267692;\n-    if(nHeight > 68000) nTotalCoins += 4277615-3688775;\n-\n-    if(nHeight > 68000*2) {\n-        nTotalCoins += 4649913.99999995-4277615;\n-    } else {\n-        return nTotalCoins;\n-    }\n-\n-    //5.383754730451325 per block average after this\n-    nTotalCoins += ((nHeight-68000*2)*((5382104.64334133-4649913.99999995)/(68000*2)));\n-\n-    // TODO: this should include the 7.1% decline too\n-    return nTotalCoins;\n-}\n-\n /*\n NOTE:   unlike bitcoin we are using PREVIOUS block height here,\n         might be a good idea to change this to use prev bits"
      },
      {
        "sha": "9d7dbddb42997fcb8357fbb3973901f89bf7b39f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
        "patch": "@@ -251,7 +251,6 @@ bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Para\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n \n double ConvertBitsToDouble(unsigned int nBits);\n-int64_t GetTotalCoinEstimate(int nHeight);\n CAmount GetBlockSubsidy(int nBits, int nHeight, const Consensus::Params& consensusParams, bool fSuperblockPartOnly = false);\n CAmount GetMasternodePayment(int nHeight, CAmount blockValue);\n "
      },
      {
        "sha": "7cdd74ab51f29e9d207bc94cd982e22a4a785752",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
        "patch": "@@ -348,21 +348,6 @@ void CMasternodeSync::ProcessTick()\n                     return;\n                 }\n \n-                // check for data\n-                // if we have enough masternodes in or list, switch to the next asset\n-                /* Note: Is this activing up? It's probably related to int CMasternodeMan::GetEstimatedMasternodes(int nBlock)\n-                   Surely doesn't work right for testnet currently */\n-                // try to fetch data from at least two peers though\n-                int nMnCountEstimated = mnodeman.GetEstimatedMasternodes(pCurrentBlockIndex->nHeight)*0.9;\n-                LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nMnCount %d nMnCountEstimated %d\\n\",\n-                          nTick, nMnCount, nMnCountEstimated);\n-                if(nRequestedMasternodeAttempt > 1 && nMnCount > nMnCountEstimated) {\n-                    LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- found enough data\\n\", nTick, nRequestedMasternodeAssets);\n-                    SwitchToNextAsset();\n-                    ReleaseNodes(vNodesCopy);\n-                    return;\n-                }\n-\n                 // only request once from each peer\n                 if(netfulfilledman.HasFulfilledRequest(pnode->addr, \"masternode-list-sync\")) continue;\n                 netfulfilledman.AddFulfilledRequest(pnode->addr, \"masternode-list-sync\");"
      },
      {
        "sha": "2ffb27bcf1e68bb2d3c9b1c35fd83b222771e450",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
        "patch": "@@ -1327,28 +1327,6 @@ std::string CMasternodeMan::ToString() const\n     return info.str();\n }\n \n-int CMasternodeMan::GetEstimatedMasternodes(int nBlock)\n-{\n-    /*\n-        Masternodes = (Coins/1000)*X on average\n-\n-        *X = nPercentage, starting at 0.52\n-        nPercentage goes up 0.01 each period\n-        Period starts at 35040, which has exponential slowing growth\n-\n-    */\n-\n-    int nPercentage = 52; //0.52\n-    int nPeriod = 35040;\n-    int nCollateral = 1000;\n-\n-    for (int i = nPeriod; i <= nBlock; i += nPeriod) {\n-        nPercentage++;\n-        nPeriod*=2;\n-    }\n-    return (GetTotalCoinEstimate(nBlock)/100*nPercentage/nCollateral);\n-}\n-\n void CMasternodeMan::UpdateMasternodeList(CMasternodeBroadcast mnb)\n {\n     LOCK(cs);"
      },
      {
        "sha": "ecb4bc9762690714234874b9d1d7494180b53951",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621f9ebeca7a3430d9f80c9fd43bdde378e5485c/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
        "patch": "@@ -310,8 +310,6 @@ class CMasternodeMan\n \n     std::string ToString() const;\n \n-    int GetEstimatedMasternodes(int nBlock);\n-\n     /// Update masternode list and maps using provided CMasternodeBroadcast\n     void UpdateMasternodeList(CMasternodeBroadcast mnb);\n     /// Perform complete check and only then update list and maps"
      }
    ]
  },
  {
    "sha": "5cb6486616b7fa6441e97dda07cad8e37d2d149c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2I2NDg2NjE2YjdmYTY0NDFlOTdkZGEwN2NhZDhlMzdkMmQxNDlj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-10T23:33:14Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-10T23:33:14Z"
      },
      "message": "Assuming that we synced blockchain already if we have at least MASTERNODE_SYNC_ENOUGH_PEERS (6 currently) peers at the same height as we are (#1257)",
      "tree": {
        "sha": "41778f00ccbc1138e2da9eb8826c4c789dd972c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41778f00ccbc1138e2da9eb8826c4c789dd972c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cb6486616b7fa6441e97dda07cad8e37d2d149c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb6486616b7fa6441e97dda07cad8e37d2d149c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb6486616b7fa6441e97dda07cad8e37d2d149c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb6486616b7fa6441e97dda07cad8e37d2d149c/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/621f9ebeca7a3430d9f80c9fd43bdde378e5485c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/621f9ebeca7a3430d9f80c9fd43bdde378e5485c"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 69,
      "deletions": 29
    },
    "files": [
      {
        "sha": "b9e5f2ff53d69e5b54fa1a7db005696ac4aa755a",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 29,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb6486616b7fa6441e97dda07cad8e37d2d149c/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb6486616b7fa6441e97dda07cad8e37d2d149c/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=5cb6486616b7fa6441e97dda07cad8e37d2d149c",
        "patch": "@@ -17,6 +17,42 @@\n class CMasternodeSync;\n CMasternodeSync masternodeSync;\n \n+void ReleaseNodes(const std::vector<CNode*> &vNodesCopy)\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        pnode->Release();\n+}\n+\n+bool CMasternodeSync::CheckNodeHeight(CNode* pnode, bool fDisconnectStuckNodes)\n+{\n+    CNodeStateStats stats;\n+    if(!GetNodeStateStats(pnode->id, stats) || stats.nCommonHeight == -1 || stats.nSyncHeight == -1) return false; // not enough info about this peer\n+\n+    // Check blocks and headers, allow a small error margin of 1 block\n+    if(pCurrentBlockIndex->nHeight - 1 > stats.nCommonHeight) {\n+        // This peer probably stuck, don't sync any additional data from it\n+        if(fDisconnectStuckNodes) {\n+            // Disconnect to free this connection slot for another peer.\n+            pnode->fDisconnect = true;\n+            LogPrintf(\"CMasternodeSync::CheckNodeHeight -- disconnecting from stuck peer, nHeight=%d, nCommonHeight=%d, peer=%d\\n\",\n+                        pCurrentBlockIndex->nHeight, stats.nCommonHeight, pnode->id);\n+        } else {\n+            LogPrintf(\"CMasternodeSync::CheckNodeHeight -- skipping stuck peer, nHeight=%d, nCommonHeight=%d, peer=%d\\n\",\n+                        pCurrentBlockIndex->nHeight, stats.nCommonHeight, pnode->id);\n+        }\n+        return false;\n+    }\n+    else if(pCurrentBlockIndex->nHeight < stats.nSyncHeight - 1) {\n+        // This peer announced more headers than we have blocks currently\n+        LogPrintf(\"CMasternodeSync::CheckNodeHeight -- skipping peer, who announced more headers than we have blocks currently, nHeight=%d, nSyncHeight=%d, peer=%d\\n\",\n+                    pCurrentBlockIndex->nHeight, stats.nSyncHeight, pnode->id);\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n bool CMasternodeSync::IsBlockchainSynced(bool fBlockAccepted)\n {\n     static bool fBlockchainSynced = false;\n@@ -60,6 +96,34 @@ bool CMasternodeSync::IsBlockchainSynced(bool fBlockAccepted)\n     if(fCheckpointsEnabled && pCurrentBlockIndex->nHeight < Checkpoints::GetTotalBlocksEstimate(Params().Checkpoints()))\n         return false;\n \n+    std::vector<CNode*> vNodesCopy;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesCopy = vNodes;\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            pnode->AddRef();\n+    }\n+\n+    // We have enough peers and assume most of them are synced\n+    if(vNodes.size() >= MASTERNODE_SYNC_ENOUGH_PEERS) {\n+        // Check to see how many of our peers are (almost) at the same height as we are\n+        int nNodesAtSameHeight = 0;\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+        {\n+            // Make sure this peer is presumably at the same height\n+            if(!CheckNodeHeight(pnode)) continue;\n+            nNodesAtSameHeight++;\n+            // if we have decent number of such peers, most likely we are synced now\n+            if(nNodesAtSameHeight >= MASTERNODE_SYNC_ENOUGH_PEERS) {\n+                LogPrintf(\"CMasternodeSync::IsBlockchainSynced -- found enough peers on the same height as we are, done\\n\");\n+                fBlockchainSynced = true;\n+                ReleaseNodes(vNodesCopy);\n+                return true;\n+            }\n+        }\n+    }\n+    ReleaseNodes(vNodesCopy);\n+\n     // wait for at least one new block to be accepted\n     if(!fFirstBlockAccepted) return false;\n \n@@ -191,13 +255,6 @@ void CMasternodeSync::ClearFulfilledRequests()\n     }\n }\n \n-void ReleaseNodes(const std::vector<CNode*> &vNodesCopy)\n-{\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodesCopy)\n-        pnode->Release();\n-}\n-\n void CMasternodeSync::ProcessTick()\n {\n     static int nTick = 0;\n@@ -295,28 +352,8 @@ void CMasternodeSync::ProcessTick()\n                 continue;\n             }\n \n-            CNodeStateStats stats;\n-            if(!GetNodeStateStats(pnode->id, stats) || stats.nCommonHeight == -1 || stats.nSyncHeight == -1) continue; // not enough info about this peer\n-\n-            // Check blocks and headers, allow a small error margin of 1 block\n-            if(pCurrentBlockIndex->nHeight - 1 > stats.nCommonHeight) {\n-                // This peer probably stuck, don't sync any additional data,\n-                // disconnect to free this connection slot for another peer.\n-                pnode->fDisconnect = true;\n-                LogPrintf(\"CMasternodeSync::ProcessTick -- disconnecting from stuck peer, nHeight=%d, nCommonHeight=%d, peer=%d\\n\",\n-                            pCurrentBlockIndex->nHeight, stats.nCommonHeight, pnode->id);\n-                continue;\n-            }\n-            else if(pCurrentBlockIndex->nHeight < stats.nSyncHeight - 1) {\n-                // This peer announced more headers than we have blocks currently,\n-                // we probably need to wait a bit or this peer is on another (longer??) chain,\n-                // so our data could be incompatible, skip it anyway for now but do not disconnect,\n-                // maybe that chain is the right one.\n-                LogPrintf(\"CMasternodeSync::ProcessTick -- skipping peer, who announced more headers than we have blocks currently, nHeight=%d, nSyncHeight=%d, peer=%d\\n\",\n-                            pCurrentBlockIndex->nHeight, stats.nSyncHeight, pnode->id);\n-                continue;\n-            }\n-            // If we got here, we should have enough info about this peer and it should be ok to continue further.\n+            // Make sure this peer is presumably at the same height\n+            if(!CheckNodeHeight(pnode, true)) continue;\n \n             // SPORK : ALWAYS ASK FOR SPORKS AS WE SYNC (we skip this mode now)\n "
      },
      {
        "sha": "447e230e336b635dc89bd7fe2ae4e78ca910ec94",
        "filename": "src/masternode-sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb6486616b7fa6441e97dda07cad8e37d2d149c/src/masternode-sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb6486616b7fa6441e97dda07cad8e37d2d149c/src/masternode-sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.h?ref=5cb6486616b7fa6441e97dda07cad8e37d2d149c",
        "patch": "@@ -24,6 +24,8 @@ static const int MASTERNODE_SYNC_FINISHED        = 999;\n static const int MASTERNODE_SYNC_TICK_SECONDS    = 6;\n static const int MASTERNODE_SYNC_TIMEOUT_SECONDS = 30; // our blocks are 2.5 minutes so 30 seconds should be fine\n \n+static const int MASTERNODE_SYNC_ENOUGH_PEERS    = 6;\n+\n extern CMasternodeSync masternodeSync;\n \n //\n@@ -54,6 +56,7 @@ class CMasternodeSync\n     // Keep track of current block index\n     const CBlockIndex *pCurrentBlockIndex;\n \n+    bool CheckNodeHeight(CNode* pnode, bool fDisconnectStuckNodes = false);\n     void Fail();\n     void ClearFulfilledRequests();\n "
      }
    ]
  },
  {
    "sha": "053e374e42ee41284086e2f102b920eb99f50871",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTNlMzc0ZTQyZWU0MTI4NDA4NmUyZjEwMmI5MjBlYjk5ZjUwODcx",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-13T14:02:33Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-13T14:02:33Z"
      },
      "message": "Merge bug fixes (#1260)\n\n* Fix for incorrect locking in GetPubKey() (keystore.cpp)\r\n\r\n* Fix Cmd-Q / Menu Quit shutdown on OSX\r\n\r\n* Addition of ImmatureCreditCached to MarkDirty()\r\n\r\nTo protect against possible invalidation and to bring conformity to the code.",
      "tree": {
        "sha": "3036ff232802052c851736c9eeb20413d5846638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3036ff232802052c851736c9eeb20413d5846638"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/053e374e42ee41284086e2f102b920eb99f50871",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053e374e42ee41284086e2f102b920eb99f50871",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/053e374e42ee41284086e2f102b920eb99f50871",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053e374e42ee41284086e2f102b920eb99f50871/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cb6486616b7fa6441e97dda07cad8e37d2d149c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb6486616b7fa6441e97dda07cad8e37d2d149c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb6486616b7fa6441e97dda07cad8e37d2d149c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d568a7435098adba6596ee0b93535c28e2eac524",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/053e374e42ee41284086e2f102b920eb99f50871/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/053e374e42ee41284086e2f102b920eb99f50871/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=053e374e42ee41284086e2f102b920eb99f50871",
        "patch": "@@ -19,6 +19,7 @@ bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) con\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n+        LOCK(cs_KeyStore);\n         WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n         if (it != mapWatchKeys.end()) {\n             vchPubKeyOut = it->second;"
      },
      {
        "sha": "bcdf80d400b0115ac8dc7d21e7f328d10ccf1d70",
        "filename": "src/qt/dash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/053e374e42ee41284086e2f102b920eb99f50871/src/qt/dash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/053e374e42ee41284086e2f102b920eb99f50871/src/qt/dash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/dash.cpp?ref=053e374e42ee41284086e2f102b920eb99f50871",
        "patch": "@@ -411,6 +411,7 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     splash->setAttribute(Qt::WA_DeleteOnClose);\n     splash->show();\n     connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n+    connect(this, SIGNAL(requestedShutdown()), splash, SLOT(close()));\n }\n \n void BitcoinApplication::startThread()"
      },
      {
        "sha": "2cb0a0d497f319898e35b0beadfed7f80049be1f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/053e374e42ee41284086e2f102b920eb99f50871/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/053e374e42ee41284086e2f102b920eb99f50871/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=053e374e42ee41284086e2f102b920eb99f50871",
        "patch": "@@ -398,6 +398,7 @@ class CWalletTx : public CMerkleTx\n     {\n         fCreditCached = false;\n         fAvailableCreditCached = false;\n+        fImmatureCreditCached = false;\n         fAnonymizedCreditCached = false;\n         fDenomUnconfCreditCached = false;\n         fDenomConfCreditCached = false;"
      }
    ]
  },
  {
    "sha": "e8479675a8a9e9e73314eb49b6b127a391a50101",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODQ3OTY3NWE4YTllOWU3MzMxNGViNDliNmIxMjdhMzkxYTUwMTAx",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-13T14:03:28Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-13T14:03:28Z"
      },
      "message": "show local time in Masternodes tab (#1244)",
      "tree": {
        "sha": "31939ac4fa4b13239bba58d85bec513e7ca87e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31939ac4fa4b13239bba58d85bec513e7ca87e11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8479675a8a9e9e73314eb49b6b127a391a50101",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8479675a8a9e9e73314eb49b6b127a391a50101",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8479675a8a9e9e73314eb49b6b127a391a50101",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8479675a8a9e9e73314eb49b6b127a391a50101/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "053e374e42ee41284086e2f102b920eb99f50871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053e374e42ee41284086e2f102b920eb99f50871",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/053e374e42ee41284086e2f102b920eb99f50871"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d01254dd032249e58c557c8ede4909dcf715799a",
        "filename": "src/qt/forms/masternodelist.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8479675a8a9e9e73314eb49b6b127a391a50101/src/qt/forms/masternodelist.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8479675a8a9e9e73314eb49b6b127a391a50101/src/qt/forms/masternodelist.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/masternodelist.ui?ref=e8479675a8a9e9e73314eb49b6b127a391a50101",
        "patch": "@@ -129,7 +129,7 @@\n              </column>\n              <column>\n               <property name=\"text\">\n-               <string>Last Seen (UTC)</string>\n+               <string>Last Seen</string>\n               </property>\n              </column>\n              <column>\n@@ -252,7 +252,7 @@\n            </column>\n            <column>\n             <property name=\"text\">\n-             <string>Last Seen (UTC)</string>\n+             <string>Last Seen</string>\n             </property>\n            </column>\n            <column>"
      },
      {
        "sha": "2ffa9f9c41e53fe29da729808a237fd5cfdd653c",
        "filename": "src/qt/masternodelist.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8479675a8a9e9e73314eb49b6b127a391a50101/src/qt/masternodelist.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8479675a8a9e9e73314eb49b6b127a391a50101/src/qt/masternodelist.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.cpp?ref=e8479675a8a9e9e73314eb49b6b127a391a50101",
        "patch": "@@ -188,7 +188,7 @@ void MasternodeList::updateMyMasternodeInfo(QString strAlias, QString strAddr, C\n     QTableWidgetItem *protocolItem = new QTableWidgetItem(QString::number(pmn ? pmn->nProtocolVersion : -1));\n     QTableWidgetItem *statusItem = new QTableWidgetItem(QString::fromStdString(pmn ? pmn->GetStatus() : \"MISSING\"));\n     QTableWidgetItem *activeSecondsItem = new QTableWidgetItem(QString::fromStdString(DurationToDHMS(pmn ? (pmn->lastPing.sigTime - pmn->sigTime) : 0)));\n-    QTableWidgetItem *lastSeenItem = new QTableWidgetItem(QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", pmn ? pmn->lastPing.sigTime : 0)));\n+    QTableWidgetItem *lastSeenItem = new QTableWidgetItem(QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", pmn ? pmn->lastPing.sigTime + QDateTime::currentDateTime().offsetFromUtc() : 0)));\n     QTableWidgetItem *pubkeyItem = new QTableWidgetItem(QString::fromStdString(pmn ? CBitcoinAddress(pmn->pubKeyCollateralAddress.GetID()).ToString() : \"\"));\n \n     ui->tableWidgetMyMasternodes->setItem(nNewRow, 0, aliasItem);\n@@ -259,7 +259,7 @@ void MasternodeList::updateNodeList()\n         QTableWidgetItem *protocolItem = new QTableWidgetItem(QString::number(mn.nProtocolVersion));\n         QTableWidgetItem *statusItem = new QTableWidgetItem(QString::fromStdString(mn.GetStatus()));\n         QTableWidgetItem *activeSecondsItem = new QTableWidgetItem(QString::fromStdString(DurationToDHMS(mn.lastPing.sigTime - mn.sigTime)));\n-        QTableWidgetItem *lastSeenItem = new QTableWidgetItem(QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", mn.lastPing.sigTime)));\n+        QTableWidgetItem *lastSeenItem = new QTableWidgetItem(QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", mn.lastPing.sigTime + QDateTime::currentDateTime().offsetFromUtc())));\n         QTableWidgetItem *pubkeyItem = new QTableWidgetItem(QString::fromStdString(CBitcoinAddress(mn.pubKeyCollateralAddress.GetID()).ToString()));\n \n         if (strCurrentFilter != \"\")"
      }
    ]
  },
  {
    "sha": "f995a264e2b4f68a3917b7a4b18705be47196206",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTk1YTI2NGUyYjRmNjhhMzkxN2I3YTRiMTg3MDViZTQ3MTk2MjA2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-14T22:29:08Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-14T22:29:08Z"
      },
      "message": "Do not try to check or verify mns until synced to some stage (#1261)\n\nVerification creates new conections, which we also use to sync but then we disconnect on ProcessMasternodeConnections every minute which at least could lead to excessive node load (for our peers). But could also interfere with sync process itself and we'd better keep them separate.",
      "tree": {
        "sha": "fb14b7a1d3d390a7720ec744593b83adb03ba2cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb14b7a1d3d390a7720ec744593b83adb03ba2cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f995a264e2b4f68a3917b7a4b18705be47196206",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f995a264e2b4f68a3917b7a4b18705be47196206",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f995a264e2b4f68a3917b7a4b18705be47196206",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f995a264e2b4f68a3917b7a4b18705be47196206/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8479675a8a9e9e73314eb49b6b127a391a50101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8479675a8a9e9e73314eb49b6b127a391a50101",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8479675a8a9e9e73314eb49b6b127a391a50101"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "58d92927e913bd961a139f129fa12f3e366d1f09",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f995a264e2b4f68a3917b7a4b18705be47196206/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f995a264e2b4f68a3917b7a4b18705be47196206/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=f995a264e2b4f68a3917b7a4b18705be47196206",
        "patch": "@@ -173,8 +173,9 @@ void CMasternodeMan::Check()\n \n void CMasternodeMan::CheckAndRemove()\n {\n-    LogPrintf(\"CMasternodeMan::CheckAndRemove\\n\");\n+    if(!masternodeSync.IsMasternodeListSynced()) return;\n \n+    LogPrintf(\"CMasternodeMan::CheckAndRemove\\n\");\n \n     {\n         // Need LOCK2 here to ensure consistent locking order because code below locks cs_main\n@@ -202,7 +203,12 @@ void CMasternodeMan::CheckAndRemove()\n                 it = vMasternodes.erase(it);\n                 fMasternodesRemoved = true;\n             } else {\n-                if(pCurrentBlockIndex && !fAskedForMnbRecovery && it->IsNewStartRequired() && !IsMnbRecoveryRequested(hash)) {\n+                bool fAsk = pCurrentBlockIndex &&\n+                            !fAskedForMnbRecovery &&\n+                            masternodeSync.IsSynced() &&\n+                            it->IsNewStartRequired() &&\n+                            !IsMnbRecoveryRequested(hash);\n+                if(fAsk) {\n                     // this mn is in a non-recoverable state and we haven't asked other nodes yet\n                     std::set<CNetAddr> setRequested;\n                     // calulate only once and only when it's needed\n@@ -919,6 +925,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n void CMasternodeMan::DoFullVerificationStep()\n {\n     if(activeMasternode.vin == CTxIn()) return;\n+    if(!masternodeSync.IsSynced()) return;\n \n     std::vector<std::pair<int, CMasternode> > vecMasternodeRanks = GetMasternodeRanks(pCurrentBlockIndex->nHeight - 1, MIN_POSE_PROTO_VERSION);\n "
      }
    ]
  },
  {
    "sha": "f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWVlOWQ5YzcxYTM3NmI4NTZlNTZhYTA1ODZiYmZhZWE3MzVkN2U4",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-17T20:02:38Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-17T20:02:38Z"
      },
      "message": "Change governance sync process (#1265)\n\n* On gov sync first sync objs, then ask for votes on per-obj basis from different peers.\r\n\r\nThis should help to sync obj list initially and split the load among many peers. Also adds ability to catch up votes later after the sync.\r\n\r\n* ask for all objects, do this in cycles\r\n\r\n* Fix Sync() code, better readability\r\n\r\n* ask multiple nodes at once when possible, perf boost for large numper of objs\r\n\r\n* Addressed comments: pass reference, more peer version check",
      "tree": {
        "sha": "9cd26449c31959623c56c9e1fb95959e47f53e80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cd26449c31959623c56c9e1fb95959e47f53e80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f995a264e2b4f68a3917b7a4b18705be47196206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f995a264e2b4f68a3917b7a4b18705be47196206",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f995a264e2b4f68a3917b7a4b18705be47196206"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 105,
      "deletions": 23
    },
    "files": [
      {
        "sha": "e37fbc77094e4ced084d9a41271395d01a8e3912",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
        "patch": "@@ -321,6 +321,12 @@ class CGovernanceObject\n         // AFTER DESERIALIZATION OCCURS, CACHED VARIABLES MUST BE CALCULATED MANUALLY\n     }\n \n+    CGovernanceObject& operator=(CGovernanceObject from)\n+    {\n+        swap(*this, from);\n+        return *this;\n+    }\n+\n private:\n     // FUNCTIONS FOR DEALING WITH DATA STRING\n     void LoadData();"
      },
      {
        "sha": "351b0075a1a9c5a79f1fcbca22b3366acaa0d0fc",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 20,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
        "patch": "@@ -141,6 +141,11 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             return;\n         }\n \n+        if(!masternodeSync.IsMasternodeListSynced()) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- masternode list not synced\\n\");\n+            return;\n+        }\n+\n         CGovernanceObject govobj;\n         vRecv >> govobj;\n \n@@ -654,37 +659,47 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n \n     {\n         LOCK2(cs_main, cs);\n-        fRateChecksEnabled = false;\n-        for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n-            uint256 h = it->first;\n \n-            CGovernanceObject& govobj = it->second;\n-\n-            if((nProp != uint256()) && (h != nProp)) {\n-                continue;\n-            }\n+        if(nProp == uint256()) {\n+            // all valid objects, no votes\n+            for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+                CGovernanceObject& govobj = it->second;\n+                std::string strHash = it->first.ToString();\n \n-            std::string strHash = h.ToString();\n+                LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n-            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n+                if(!govobj.IsSetCachedValid()) {\n+                    LogPrintf(\"CGovernanceManager::Sync -- invalid flag cached, not syncing govobj: %s, fCachedValid = %d, peer=%d\\n\",\n+                              strHash, govobj.IsSetCachedValid(), pfrom->id);\n+                    continue;\n+                }\n \n-            std::string strError;\n-            bool fIsValid = govobj.IsValidLocally(strError, true);\n-            if(!fIsValid) {\n-                LogPrintf(\"CGovernanceManager::Sync -- not syncing invalid govobj: %s, strError = %s, fCachedValid = %d, peer=%d\\n\", \n-                         strHash, strError, govobj.IsSetCachedValid(), pfrom->id);\n-                continue;\n+                // Push the inventory budget proposal message over to the other client\n+                LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n+                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, it->first));\n+                ++nObjCount;\n+            }\n+        } else {\n+            // single valid object and its valid votes\n+            object_m_it it = mapObjects.find(nProp);\n+            if(it == mapObjects.end()) {\n+                LogPrint(\"gobject\", \"CGovernanceManager::Sync -- no matching object for hash %s, peer=%d\\n\", nProp.ToString(), pfrom->id);\n+                return;\n             }\n+            CGovernanceObject& govobj = it->second;\n+            std::string strHash = it->first.ToString();\n+\n+            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n             if(!govobj.IsSetCachedValid()) {\n-                LogPrintf(\"CGovernanceManager::Sync -- invalid flag cached, not syncing govobj: %s, fCachedValid = %d, peer=%d\\n\", \n+                LogPrintf(\"CGovernanceManager::Sync -- invalid flag cached, not syncing govobj: %s, fCachedValid = %d, peer=%d\\n\",\n                           strHash, govobj.IsSetCachedValid(), pfrom->id);\n-                continue;\n+                return;\n             }\n \n             // Push the inventory budget proposal message over to the other client\n             LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n-            pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, h));\n+            pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, it->first));\n             ++nObjCount;\n \n             std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n@@ -696,7 +711,6 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n                 ++nVoteCount;\n             }\n         }\n-        fRateChecksEnabled = true;\n     }\n \n     pfrom->PushMessage(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nObjCount);\n@@ -920,6 +934,54 @@ void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nH\n     pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, nHash);\n }\n \n+void CGovernanceManager::RequestGovernanceObjectVotes(CNode* pnode)\n+{\n+    if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) return;\n+    std::vector<CNode*> vNodesCopy;\n+    vNodesCopy.push_back(pnode);\n+    RequestGovernanceObjectVotes(vNodesCopy);\n+}\n+\n+void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy)\n+{\n+    static std::map<uint256, int64_t> mapAskedRecently;\n+    LOCK2(cs_main, cs);\n+    std::vector<CGovernanceObject*> vpGovObjsTmp;\n+    std::vector<CGovernanceObject*> vpGovObjsTriggersTmp;\n+    int64_t nNow = GetTime();\n+    for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+        if(mapAskedRecently.count(it->first) && mapAskedRecently[it->first] > nNow) continue;\n+        if(it->second.nObjectType == GOVERNANCE_OBJECT_TRIGGER)\n+            vpGovObjsTriggersTmp.push_back(&(it->second));\n+        else\n+            vpGovObjsTmp.push_back(&(it->second));\n+    }\n+    BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n+        // only use reqular peers, don't try to ask from temporary nodes we connected to -\n+        // they stay connected for a short period of time and it's possible that we won't get everything we should\n+        if(pnode->fMasternode) continue;\n+        // only use up to date peers\n+        if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) continue;\n+        // stop early to prevent setAskFor overflow\n+        if(pnode->setAskFor.size() > SETASKFOR_MAX_SZ/2) continue;\n+        uint256 nHashGovobj;\n+        // ask for triggers first\n+        if(vpGovObjsTriggersTmp.size()) {\n+            int r = GetRandInt(vpGovObjsTriggersTmp.size());\n+            nHashGovobj = vpGovObjsTriggersTmp[r]->GetHash();\n+            vpGovObjsTriggersTmp.erase(vpGovObjsTriggersTmp.begin() + r);\n+        } else {\n+            if(vpGovObjsTmp.empty()) return;\n+            int r = GetRandInt(vpGovObjsTmp.size());\n+            nHashGovobj = vpGovObjsTmp[r]->GetHash();\n+            vpGovObjsTmp.erase(vpGovObjsTmp.begin() + r);\n+        }\n+        LogPrintf(\"CGovernanceManager::RequestGovernanceObjectVotes -- Requesting votes for %s, peer=%d\\n\", nHashGovobj.ToString(), pnode->id);\n+        RequestGovernanceObject(pnode, nHashGovobj);\n+        mapAskedRecently[nHashGovobj] = nNow + mapObjects.size() * 60; // ask again after full cycle\n+    }\n+}\n+\n bool CGovernanceManager::AcceptObjectMessage(const uint256& nHash)\n {\n     LOCK(cs);"
      },
      {
        "sha": "67318491b339c036ee9ecf8b34afc1e13dacd847",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
        "patch": "@@ -375,6 +375,9 @@ class CGovernanceManager\n \n     void InitOnLoad();\n \n+    void RequestGovernanceObjectVotes(CNode* pnode);\n+    void RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy);\n+\n private:\n     void RequestGovernanceObject(CNode* pfrom, const uint256& nHash);\n "
      },
      {
        "sha": "834ae7b9258b00edc9c56540aa82f6e3227706a6",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
        "patch": "@@ -276,7 +276,15 @@ void CMasternodeSync::ProcessTick()\n                 LogPrintf(\"CMasternodeSync::ProcessTick -- WARNING: not enough data, restarting sync\\n\");\n                 Reset();\n             } else {\n-                //if syncing is complete and we have masternodes, return\n+                std::vector<CNode*> vNodesCopy;\n+                {\n+                    LOCK(cs_vNodes);\n+                    vNodesCopy = vNodes;\n+                    BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+                        pnode->AddRef();\n+                }\n+                governance.RequestGovernanceObjectVotes(vNodesCopy);\n+                ReleaseNodes(vNodesCopy);\n                 return;\n             }\n         }\n@@ -475,8 +483,11 @@ void CMasternodeSync::ProcessTick()\n                 //     }\n                 // }\n \n-                // only request once from each peer\n-                if(netfulfilledman.HasFulfilledRequest(pnode->addr, \"governance-sync\")) continue;\n+                // only request obj sync once from each peer, then request votes on per-obj basis\n+                if(netfulfilledman.HasFulfilledRequest(pnode->addr, \"governance-sync\")) {\n+                    governance.RequestGovernanceObjectVotes(pnode);\n+                    continue;\n+                }\n                 netfulfilledman.AddFulfilledRequest(pnode->addr, \"governance-sync\");\n \n                 if (pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) continue;"
      }
    ]
  },
  {
    "sha": "f81ea67a08f1060e37dd67a4206892639aba0eed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODFlYTY3YTA4ZjEwNjBlMzdkZDY3YTQyMDY4OTI2MzlhYmEwZWVk",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-17T20:02:59Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-17T20:02:59Z"
      },
      "message": "Remove hashes from setAskFor (#1264)\n\nWe should remove hash from setAskFor when the message corresponding to previous inv arrives, otherwise it's stays there forever and setAskFor overflows (i.e. AskFor returns immediately without processing).",
      "tree": {
        "sha": "f2aa05396bde6fe1484413b114e5262e6be45c61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2aa05396bde6fe1484413b114e5262e6be45c61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f81ea67a08f1060e37dd67a4206892639aba0eed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81ea67a08f1060e37dd67a4206892639aba0eed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f81ea67a08f1060e37dd67a4206892639aba0eed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81ea67a08f1060e37dd67a4206892639aba0eed/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ee9d9c71a376b856e56aa0586bbfaea735d7e8"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 32,
      "deletions": 14
    },
    "files": [
      {
        "sha": "88a4b0724383da432ba7c76483c62f99e1a5a15a",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ea67a08f1060e37dd67a4206892639aba0eed/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ea67a08f1060e37dd67a4206892639aba0eed/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=f81ea67a08f1060e37dd67a4206892639aba0eed",
        "patch": "@@ -152,6 +152,8 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         uint256 nHash = govobj.GetHash();\n         std::string strHash = nHash.ToString();\n \n+        pfrom->setAskFor.erase(nHash);\n+\n         LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Received object: %s\\n\", strHash);\n \n         if(!AcceptObjectMessage(nHash)) {\n@@ -236,6 +238,8 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         uint256 nHash = vote.GetHash();\n         std::string strHash = nHash.ToString();\n \n+        pfrom->setAskFor.erase(nHash);\n+\n         if(!AcceptVoteMessage(nHash)) {\n             LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Received unrequested vote object: %s, hash: %s, peer = %d\\n\",\n                       vote.ToString(), strHash, pfrom->GetId());"
      },
      {
        "sha": "fbcc40fa98ad6080fe5e49df2a1d3b46ff1d0399",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ea67a08f1060e37dd67a4206892639aba0eed/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ea67a08f1060e37dd67a4206892639aba0eed/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f81ea67a08f1060e37dd67a4206892639aba0eed",
        "patch": "@@ -5692,11 +5692,21 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if(strCommand == NetMsgType::TX) {\n             vRecv >> tx;\n+        } else if(strCommand == NetMsgType::TXLOCKREQUEST) {\n+            vRecv >> tx;\n+            nInvType = MSG_TXLOCK_REQUEST;\n         } else if (strCommand == NetMsgType::DSTX) {\n             vRecv >> dstx;\n             tx = dstx.tx;\n-            uint256 hashTx = tx.GetHash();\n             nInvType = MSG_DSTX;\n+        }\n+\n+        CInv inv(nInvType, tx.GetHash());\n+        pfrom->AddInventoryKnown(inv);\n+        pfrom->setAskFor.erase(inv.hash);\n+\n+        if (strCommand == NetMsgType::DSTX) {\n+            uint256 hashTx = tx.GetHash();\n \n             if(mapDarksendBroadcastTxes.count(hashTx)) {\n                 LogPrint(\"privatesend\", \"DSTX -- Already have %s, skipping...\\n\", hashTx.ToString());\n@@ -5724,20 +5734,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrintf(\"DSTX -- Got Masternode transaction %s\\n\", hashTx.ToString());\n             mempool.PrioritiseTransaction(hashTx, hashTx.ToString(), 1000, 0.1*COIN);\n             pmn->fAllowMixingTx = false;\n-        } else if (strCommand == NetMsgType::TXLOCKREQUEST) {\n-            vRecv >> tx;\n-            nInvType = MSG_TXLOCK_REQUEST;\n         }\n \n-        CInv inv(nInvType, tx.GetHash());\n-        pfrom->AddInventoryKnown(inv);\n-\n         LOCK(cs_main);\n \n         bool fMissingInputs = false;\n         CValidationState state;\n \n-        pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv.hash);\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))"
      },
      {
        "sha": "35a4e3619b9a1a89132518242568a594bca5096c",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ea67a08f1060e37dd67a4206892639aba0eed/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ea67a08f1060e37dd67a4206892639aba0eed/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=f81ea67a08f1060e37dd67a4206892639aba0eed",
        "patch": "@@ -340,18 +340,22 @@ void CMasternodePayments::ProcessMessage(CNode* pfrom, std::string& strCommand,\n \n         if(!pCurrentBlockIndex) return;\n \n+        uint256 nHash = vote.GetHash();\n+\n+        pfrom->setAskFor.erase(nHash);\n+\n         {\n             LOCK(cs_mapMasternodePaymentVotes);\n-            if(mapMasternodePaymentVotes.count(vote.GetHash())) {\n-                LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- hash=%s, nHeight=%d seen\\n\", vote.GetHash().ToString(), pCurrentBlockIndex->nHeight);\n+            if(mapMasternodePaymentVotes.count(nHash)) {\n+                LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- hash=%s, nHeight=%d seen\\n\", nHash.ToString(), pCurrentBlockIndex->nHeight);\n                 return;\n             }\n \n             // Avoid processing same vote multiple times\n-            mapMasternodePaymentVotes[vote.GetHash()] = vote;\n+            mapMasternodePaymentVotes[nHash] = vote;\n             // but first mark vote as non-verified,\n             // AddPaymentVote() below should take care of it if vote is actually ok\n-            mapMasternodePaymentVotes[vote.GetHash()].MarkAsNotVerified();\n+            mapMasternodePaymentVotes[nHash].MarkAsNotVerified();\n         }\n \n         int nFirstBlock = pCurrentBlockIndex->nHeight - GetStorageLimit();"
      },
      {
        "sha": "ac11375f470708a3002cd99ad25458577b2a2228",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ea67a08f1060e37dd67a4206892639aba0eed/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ea67a08f1060e37dd67a4206892639aba0eed/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=f81ea67a08f1060e37dd67a4206892639aba0eed",
        "patch": "@@ -780,6 +780,8 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         CMasternodeBroadcast mnb;\n         vRecv >> mnb;\n \n+        pfrom->setAskFor.erase(mnb.GetHash());\n+\n         LogPrint(\"masternode\", \"MNANNOUNCE -- Masternode announce, masternode=%s\\n\", mnb.vin.prevout.ToStringShort());\n \n         // backward compatibility patch\n@@ -805,13 +807,17 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         CMasternodePing mnp;\n         vRecv >> mnp;\n \n+        uint256 nHash = mnp.GetHash();\n+\n+        pfrom->setAskFor.erase(nHash);\n+\n         LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s\\n\", mnp.vin.prevout.ToStringShort());\n \n         // Need LOCK2 here to ensure consistent locking order because the CheckAndUpdate call below locks cs_main\n         LOCK2(cs_main, cs);\n \n-        if(mapSeenMasternodePing.count(mnp.GetHash())) return; //seen\n-        mapSeenMasternodePing.insert(std::make_pair(mnp.GetHash(), mnp));\n+        if(mapSeenMasternodePing.count(nHash)) return; //seen\n+        mapSeenMasternodePing.insert(std::make_pair(nHash, mnp));\n \n         LogPrint(\"masternode\", \"MNPING -- Masternode ping, masternode=%s new\\n\", mnp.vin.prevout.ToStringShort());\n "
      },
      {
        "sha": "512957e11d30357e716ec903f6853418678a8af8",
        "filename": "src/spork.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81ea67a08f1060e37dd67a4206892639aba0eed/src/spork.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81ea67a08f1060e37dd67a4206892639aba0eed/src/spork.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.cpp?ref=f81ea67a08f1060e37dd67a4206892639aba0eed",
        "patch": "@@ -30,6 +30,7 @@ void CSporkManager::ProcessSpork(CNode* pfrom, std::string& strCommand, CDataStr\n         std::string strLogMsg;\n         {\n             LOCK(cs_main);\n+            pfrom->setAskFor.erase(hash);\n             if(!chainActive.Tip()) return;\n             strLogMsg = strprintf(\"SPORK -- hash: %s id: %d value: %10d bestHeight: %d peer=%d\", hash.ToString(), spork.nSporkID, spork.nValue, chainActive.Height(), pfrom->id);\n         }"
      }
    ]
  },
  {
    "sha": "b5239b790e68f5c9031d262b49ceb80a5b3494ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTIzOWI3OTBlNjhmNWM5MDMxZDI2MmI0OWNlYjgwYTViMzQ5NGVl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-18T06:38:13Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-01-18T06:38:13Z"
      },
      "message": "Merge #1267: Fix IS locking/crashes",
      "tree": {
        "sha": "450b67fd29c2983ef57eaacfc65d6223ff3ee7b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/450b67fd29c2983ef57eaacfc65d6223ff3ee7b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5239b790e68f5c9031d262b49ceb80a5b3494ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5239b790e68f5c9031d262b49ceb80a5b3494ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5239b790e68f5c9031d262b49ceb80a5b3494ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5239b790e68f5c9031d262b49ceb80a5b3494ee/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f81ea67a08f1060e37dd67a4206892639aba0eed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81ea67a08f1060e37dd67a4206892639aba0eed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f81ea67a08f1060e37dd67a4206892639aba0eed"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fcf0dd50d5c3bbda54cca3ba80b346c855f1a513",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5239b790e68f5c9031d262b49ceb80a5b3494ee/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5239b790e68f5c9031d262b49ceb80a5b3494ee/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=b5239b790e68f5c9031d262b49ceb80a5b3494ee",
        "patch": "@@ -59,6 +59,7 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n         CTxLockVote vote;\n         vRecv >> vote;\n \n+        LOCK2(cs_main, cs_instantsend);\n         if(mapTxLockVotes.count(vote.GetHash())) return;\n         mapTxLockVotes.insert(std::make_pair(vote.GetHash(), vote));\n \n@@ -138,6 +139,7 @@ bool ProcessTxLockRequest(CNode* pfrom, const CTransaction &tx)\n         return false;\n     }\n \n+    LOCK2(cs_main, cs_instantsend);\n     uint256 txHash = tx.GetHash();\n     mapLockRequestAccepted.insert(std::make_pair(txHash, tx));\n \n@@ -187,6 +189,7 @@ int64_t CreateTxLockCandidate(const CTransaction& tx)\n \n     uint256 txHash = tx.GetHash();\n \n+    LOCK(cs_instantsend);\n     if(!mapTxLockCandidates.count(txHash)) {\n         LogPrintf(\"CreateTxLockCandidate -- New Transaction Lock Candidate! txid=%s\\n\", txHash.ToString());\n \n@@ -252,6 +255,7 @@ void CreateTxLockVote(const CTransaction& tx, int nBlockHeight)\n //received a consensus vote\n bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n {\n+    LOCK(cs_instantsend);\n     // Masternodes will sometimes propagate votes before the transaction is known to the client,\n     // will actually process only after the lock request itself has arrived\n     if(!mapLockRequestAccepted.count(vote.txHash)) {\n@@ -351,6 +355,7 @@ bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n \n void ProcessOrphanTxLockVotes()\n {\n+    LOCK2(cs_main, cs_instantsend);\n     std::map<uint256, CTxLockVote>::iterator it = mapTxLockVotesOrphan.begin();\n     while(it != mapTxLockVotesOrphan.end()) {\n         if(ProcessTxLockVote(NULL, it->second)) {\n@@ -363,6 +368,7 @@ void ProcessOrphanTxLockVotes()\n \n void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification)\n {\n+    LOCK(cs_instantsend);\n     // there should be no conflicting locks\n     if(FindConflictingLocks(tx)) return;\n     uint256 txHash = tx.GetHash();\n@@ -392,6 +398,7 @@ void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification)\n }\n \n void LockTransactionInputs(const CTransaction& tx) {\n+    LOCK(cs_instantsend);\n     if(!mapLockRequestAccepted.count(tx.GetHash())) return;\n \n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n@@ -401,6 +408,7 @@ void LockTransactionInputs(const CTransaction& tx) {\n \n bool FindConflictingLocks(const CTransaction& tx)\n {\n+    LOCK(cs_instantsend);\n     /*\n         It's possible (very unlikely though) to get 2 conflicting transaction locks approved by the network.\n         In that case, they will cancel each other out.\n@@ -430,6 +438,7 @@ bool FindConflictingLocks(const CTransaction& tx)\n \n void ResolveConflicts(const CTransaction& tx)\n {\n+    LOCK(cs_instantsend);\n     uint256 txHash = tx.GetHash();\n     // resolve conflicts\n     if (IsLockedInstandSendTransaction(txHash) && !FindConflictingLocks(tx)) { //?????\n@@ -444,6 +453,7 @@ void ResolveConflicts(const CTransaction& tx)\n \n int64_t GetAverageMasternodeOrphanVoteTime()\n {\n+    LOCK(cs_instantsend);\n     // NOTE: should never actually call this function when mapMasternodeOrphanVotes is empty\n     if(mapMasternodeOrphanVotes.empty()) return 0;\n \n@@ -520,6 +530,7 @@ void CleanTxLockCandidates()\n \n bool IsLockedInstandSendTransaction(const uint256 &txHash)\n {\n+    LOCK(cs_instantsend);\n     // there must be a successfully verified lock request...\n     if (!mapLockRequestAccepted.count(txHash)) return false;\n     // ...and corresponding lock must have enough signatures\n@@ -532,6 +543,7 @@ int GetTransactionLockSignatures(const uint256 &txHash)\n     if(fLargeWorkForkFound || fLargeWorkInvalidChainFound) return -2;\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return -3;\n \n+    LOCK(cs_instantsend);\n     std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n     if(it != mapTxLockCandidates.end()) return it->second.CountVotes();\n \n@@ -542,6 +554,7 @@ bool IsTransactionLockTimedOut(const uint256 &txHash)\n {\n     if(!fEnableInstantSend) return 0;\n \n+    LOCK(cs_instantsend);\n     std::map<uint256, CTxLockCandidate>::iterator i = mapTxLockCandidates.find(txHash);\n     if (i != mapTxLockCandidates.end()) return GetTime() > (*i).second.nTimeout;\n "
      }
    ]
  },
  {
    "sha": "2ea9c69985e81e6858d3abdba15a2db37cd48617",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWE5YzY5OTg1ZTgxZTY4NThkM2FiZGJhMTVhMmRiMzdjZDQ4NjE3",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-18T15:23:49Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-18T15:23:49Z"
      },
      "message": "Logging improvements (#1268)\n\n* Add default log messages when beginning asset sync\r\n\r\n* Added default log message for AskFor buffer full condition\r\n\r\n* Improve log message based on code review comments",
      "tree": {
        "sha": "28fef73b5c30844cf3b9f862323672cf2cd62347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28fef73b5c30844cf3b9f862323672cf2cd62347"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ea9c69985e81e6858d3abdba15a2db37cd48617",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea9c69985e81e6858d3abdba15a2db37cd48617",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ea9c69985e81e6858d3abdba15a2db37cd48617",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea9c69985e81e6858d3abdba15a2db37cd48617/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5239b790e68f5c9031d262b49ceb80a5b3494ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5239b790e68f5c9031d262b49ceb80a5b3494ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5239b790e68f5c9031d262b49ceb80a5b3494ee"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f982fc8e915509869b5279694824124d02c1de5",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea9c69985e81e6858d3abdba15a2db37cd48617/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea9c69985e81e6858d3abdba15a2db37cd48617/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=2ea9c69985e81e6858d3abdba15a2db37cd48617",
        "patch": "@@ -178,18 +178,22 @@ void CMasternodeSync::SwitchToNextAsset()\n         case(MASTERNODE_SYNC_INITIAL):\n             ClearFulfilledRequests();\n             nRequestedMasternodeAssets = MASTERNODE_SYNC_SPORKS;\n+            LogPrintf(\"CMasternodeSync::SwitchToNextAsset -- Starting %s\\n\", GetAssetName());\n             break;\n         case(MASTERNODE_SYNC_SPORKS):\n             nTimeLastMasternodeList = GetTime();\n             nRequestedMasternodeAssets = MASTERNODE_SYNC_LIST;\n+            LogPrintf(\"CMasternodeSync::SwitchToNextAsset -- Starting %s\\n\", GetAssetName());\n             break;\n         case(MASTERNODE_SYNC_LIST):\n             nTimeLastPaymentVote = GetTime();\n             nRequestedMasternodeAssets = MASTERNODE_SYNC_MNW;\n+            LogPrintf(\"CMasternodeSync::SwitchToNextAsset -- Starting %s\\n\", GetAssetName());\n             break;\n         case(MASTERNODE_SYNC_MNW):\n             nTimeLastGovernanceItem = GetTime();\n             nRequestedMasternodeAssets = MASTERNODE_SYNC_GOVERNANCE;\n+            LogPrintf(\"CMasternodeSync::SwitchToNextAsset -- Starting %s\\n\", GetAssetName());\n             break;\n         case(MASTERNODE_SYNC_GOVERNANCE):\n             LogPrintf(\"CMasternodeSync::SwitchToNextAsset -- Sync has finished\\n\");"
      },
      {
        "sha": "5266e94cda982667a864d554e291809ee16fa509",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ea9c69985e81e6858d3abdba15a2db37cd48617/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ea9c69985e81e6858d3abdba15a2db37cd48617/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2ea9c69985e81e6858d3abdba15a2db37cd48617",
        "patch": "@@ -2445,8 +2445,11 @@ CNode::~CNode()\n \n void CNode::AskFor(const CInv& inv)\n {\n-    if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ)\n+    if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ) {\n+        LogPrintf(\"CNode::AskFor -- WARNING: inventory message dropped: mapAskFor.size = %d, setAskFor.size = %d, MAPASKFOR_MAX_SZ = %d, SETASKFOR_MAX_SZ = %d, peer=%d\\n\",\n+                  mapAskFor.size(), setAskFor.size(), MAPASKFOR_MAX_SZ, SETASKFOR_MAX_SZ, id);\n         return;\n+    }\n     // a peer may not have multiple non-responded queue positions for a single inv item\n     if (!setAskFor.insert(inv.hash).second)\n         return;"
      }
    ]
  },
  {
    "sha": "5254255a0a834b54a0732f09e8e169391f1a9b83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjU0MjU1YTBhODM0YjU0YTA3MzJmMDllOGUxNjkzOTFmMWE5Yjgz",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-18T15:24:04Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-18T15:24:04Z"
      },
      "message": "Voting related syncing changes (#1269)\n\n* Remove vote count check from IsValidLocally\r\n\r\n* Do not check voted validity flag when syncing\r\n\r\n* Do not send objects marked for deletion during syncing\r\n\r\n* Remove node penalty for unrequested objects.",
      "tree": {
        "sha": "47784b5dc022ad3d1c7c4abe5f0cc027290c1858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47784b5dc022ad3d1c7c4abe5f0cc027290c1858"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5254255a0a834b54a0732f09e8e169391f1a9b83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5254255a0a834b54a0732f09e8e169391f1a9b83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5254255a0a834b54a0732f09e8e169391f1a9b83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5254255a0a834b54a0732f09e8e169391f1a9b83/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ea9c69985e81e6858d3abdba15a2db37cd48617",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ea9c69985e81e6858d3abdba15a2db37cd48617",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ea9c69985e81e6858d3abdba15a2db37cd48617"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 6,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c14eaa79b029dcad191e0e0f554d219939c42686",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5254255a0a834b54a0732f09e8e169391f1a9b83/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5254255a0a834b54a0732f09e8e169391f1a9b83/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=5254255a0a834b54a0732f09e8e169391f1a9b83",
        "patch": "@@ -439,11 +439,6 @@ bool CGovernanceObject::IsValidLocally(std::string& strError, bool& fMissingMast\n \n     // IF ABSOLUTE NO COUNT (NO-YES VALID VOTES) IS MORE THAN 10% OF THE NETWORK MASTERNODES, OBJ IS INVALID\n \n-    if(GetAbsoluteNoCount(VOTE_SIGNAL_VALID) > mnodeman.CountEnabled(MIN_GOVERNANCE_PEER_PROTO_VERSION)/10) {\n-        strError = \"Voted invalid\";\n-        return false;\n-    }\n-\n     // CHECK COLLATERAL IF REQUIRED (HIGH CPU USAGE)\n \n     if(fCheckCollateral) { "
      },
      {
        "sha": "1474346fc776fcfc75627f61279165b47bc90198",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5254255a0a834b54a0732f09e8e169391f1a9b83/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5254255a0a834b54a0732f09e8e169391f1a9b83/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=5254255a0a834b54a0732f09e8e169391f1a9b83",
        "patch": "@@ -158,7 +158,6 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         if(!AcceptObjectMessage(nHash)) {\n             LogPrintf(\"MNGOVERNANCEOBJECT -- Received unrequested object: %s\\n\", strHash);\n-            Misbehaving(pfrom->GetId(), 20);\n             return;\n         }\n \n@@ -243,7 +242,6 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         if(!AcceptVoteMessage(nHash)) {\n             LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Received unrequested vote object: %s, hash: %s, peer = %d\\n\",\n                       vote.ToString(), strHash, pfrom->GetId());\n-            //Misbehaving(pfrom->GetId(), 20);\n             return;\n         }\n \n@@ -672,9 +670,9 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n \n                 LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n-                if(!govobj.IsSetCachedValid()) {\n-                    LogPrintf(\"CGovernanceManager::Sync -- invalid flag cached, not syncing govobj: %s, fCachedValid = %d, peer=%d\\n\",\n-                              strHash, govobj.IsSetCachedValid(), pfrom->id);\n+                if(govobj.IsSetCachedDelete()) {\n+                    LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted govobj: %s, peer=%d\\n\",\n+                              strHash, pfrom->id);\n                     continue;\n                 }\n \n@@ -695,9 +693,9 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n \n             LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n-            if(!govobj.IsSetCachedValid()) {\n-                LogPrintf(\"CGovernanceManager::Sync -- invalid flag cached, not syncing govobj: %s, fCachedValid = %d, peer=%d\\n\",\n-                          strHash, govobj.IsSetCachedValid(), pfrom->id);\n+            if(govobj.IsSetCachedDelete()) {\n+                LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted govobj: %s, peer=%d\\n\",\n+                          strHash, pfrom->id);\n                 return;\n             }\n "
      }
    ]
  },
  {
    "sha": "4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjdiZDZiZThmNWI2OWE1YWQ2ZGJjMzAxNGE1YzlkMGZlY2JlNzIw",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-18T15:24:19Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-18T15:24:19Z"
      },
      "message": "Governance masternode notification bug fixes (#1270)\n\n* Flag governance items when MN's are removed\r\n\r\n* Remove old broken update mechanism\r\n\r\n* Do not flag MN state changes which are irrelevant to validity\r\n\r\n* Call AddGovernanceVote",
      "tree": {
        "sha": "025bc3b31fefd5c65be6a7af61bd5d0bd7351822",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/025bc3b31fefd5c65be6a7af61bd5d0bd7351822"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5254255a0a834b54a0732f09e8e169391f1a9b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5254255a0a834b54a0732f09e8e169391f1a9b83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5254255a0a834b54a0732f09e8e169391f1a9b83"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 2,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0f8d7e9406f353e8c81462114d7a1f816cb0d91e",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
        "patch": "@@ -170,6 +170,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     }\n     voteInstance = vote_instance_t(vote.GetOutcome(), nVoteTimeUpdate);\n     fileVotes.AddVote(vote);\n+    mnodeman.AddGovernanceVote(vote.GetVinMasternode(), vote.GetParentHash());\n     fDirtyCache = true;\n     return true;\n }"
      },
      {
        "sha": "7b4363f7fc81592d7b6e7748e9bc2b17b701bac9",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
        "patch": "@@ -219,8 +219,6 @@ void CMasternode::Check(bool fForce)\n         nActiveState = MASTERNODE_UPDATE_REQUIRED;\n         if(nActiveStatePrev != nActiveState) {\n             LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n-            // RESCAN AFFECTED VOTES\n-            FlagGovernanceItemsAsDirty();\n         }\n         return;\n     }\n@@ -259,8 +257,6 @@ void CMasternode::Check(bool fForce)\n             nActiveState = MASTERNODE_NEW_START_REQUIRED;\n             if(nActiveStatePrev != nActiveState) {\n                 LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n-                // RESCAN AFFECTED VOTES\n-                FlagGovernanceItemsAsDirty();\n             }\n             return;\n         }\n@@ -283,8 +279,6 @@ void CMasternode::Check(bool fForce)\n             nActiveState = MASTERNODE_EXPIRED;\n             if(nActiveStatePrev != nActiveState) {\n                 LogPrint(\"masternode\", \"CMasternode::Check -- Masternode %s is in %s state now\\n\", vin.prevout.ToStringShort(), GetStateString());\n-                // RESCAN AFFECTED VOTES\n-                FlagGovernanceItemsAsDirty();\n             }\n             return;\n         }\n@@ -962,14 +956,6 @@ void CMasternode::UpdateWatchdogVoteTime()\n */\n void CMasternode::FlagGovernanceItemsAsDirty()\n {\n-    std::map<uint256, int>::iterator it = mapGovernanceObjectsVotedOn.begin();\n-    while(it != mapGovernanceObjectsVotedOn.end()){\n-        CGovernanceObject *pObj = governance.FindGovernanceObject((*it).first);\n-\n-        if(pObj) pObj->InvalidateVoteCache();\n-        ++it;\n-    }\n-\n     std::vector<uint256> vecDirty;\n     {\n         std::map<uint256, int>::iterator it = mapGovernanceObjectsVotedOn.begin();"
      },
      {
        "sha": "a65ee7bc04aa4c0eaef7073baf4f92d1b3542274",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
        "patch": "@@ -200,6 +200,7 @@ void CMasternodeMan::CheckAndRemove()\n                 mWeAskedForMasternodeListEntry.erase((*it).vin.prevout);\n \n                 // and finally remove it from the list\n+                it->FlagGovernanceItemsAsDirty();\n                 it = vMasternodes.erase(it);\n                 fMasternodesRemoved = true;\n             } else {"
      }
    ]
  },
  {
    "sha": "0233d877396b45852608c4ed42afd3b8d344360c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjMzZDg3NzM5NmI0NTg1MjYwOGM0ZWQ0MmFmZDNiOGQzNDQzNjBj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-19T19:02:57Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-19T19:02:57Z"
      },
      "message": "Do not call CloseSocketDisconnect from non-socket handler threads (#1276)",
      "tree": {
        "sha": "ed1fe12bef953d33251ae3a2d6f198623740d3ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed1fe12bef953d33251ae3a2d6f198623740d3ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0233d877396b45852608c4ed42afd3b8d344360c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0233d877396b45852608c4ed42afd3b8d344360c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0233d877396b45852608c4ed42afd3b8d344360c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0233d877396b45852608c4ed42afd3b8d344360c/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b7bd6be8f5b69a5ad6dbc3014a5c9d0fecbe720"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7b397e8c87ba37044e53537eabe637f6644519e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0233d877396b45852608c4ed42afd3b8d344360c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0233d877396b45852608c4ed42afd3b8d344360c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0233d877396b45852608c4ed42afd3b8d344360c",
        "patch": "@@ -788,7 +788,7 @@ void SocketSendData(CNode *pnode)\n                 if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n                 {\n                     LogPrintf(\"socket send error %s\\n\", NetworkErrorString(nErr));\n-                    pnode->CloseSocketDisconnect();\n+                    pnode->fDisconnect = true;\n                 }\n             }\n             // couldn't send anything at all\n@@ -1749,7 +1749,7 @@ void ThreadMessageHandler()\n                 if (lockRecv)\n                 {\n                     if (!g_signals.ProcessMessages(pnode))\n-                        pnode->CloseSocketDisconnect();\n+                        pnode->fDisconnect = true;\n \n                     if (pnode->nSendSize < SendBufferSize())\n                     {"
      }
    ]
  },
  {
    "sha": "70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGIyZjNlMDgzZTczYTZiY2NlMzFlYjY1NmE1NTAzZTNkYjFlYjgx",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-19T19:06:32Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-19T19:06:32Z"
      },
      "message": "Limit number of warning messages logged by CNode's (#1273)",
      "tree": {
        "sha": "d8706e1ed1106f7fde615f97fcd6f77461465c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8706e1ed1106f7fde615f97fcd6f77461465c20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b2f3e083e73a6bcce31eb656a5503e3db1eb81/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0233d877396b45852608c4ed42afd3b8d344360c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0233d877396b45852608c4ed42afd3b8d344360c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0233d877396b45852608c4ed42afd3b8d344360c"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 16,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6ab0833226a726a8697fced86a31eff9a5c4ee5a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b2f3e083e73a6bcce31eb656a5503e3db1eb81/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b2f3e083e73a6bcce31eb656a5503e3db1eb81/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
        "patch": "@@ -2386,6 +2386,8 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     addr = addrIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;\n+    nNumWarningsSkipped = 0;\n+    nLastWarningTime = 0;\n     strSubVer = \"\";\n     fWhitelisted = false;\n     fOneShot = false;\n@@ -2446,8 +2448,16 @@ CNode::~CNode()\n void CNode::AskFor(const CInv& inv)\n {\n     if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ) {\n-        LogPrintf(\"CNode::AskFor -- WARNING: inventory message dropped: mapAskFor.size = %d, setAskFor.size = %d, MAPASKFOR_MAX_SZ = %d, SETASKFOR_MAX_SZ = %d, peer=%d\\n\",\n-                  mapAskFor.size(), setAskFor.size(), MAPASKFOR_MAX_SZ, SETASKFOR_MAX_SZ, id);\n+        int64_t nNow = GetTime();\n+        if(nNow - nLastWarningTime > WARNING_INTERVAL) {\n+            LogPrintf(\"CNode::AskFor -- WARNING: inventory message dropped: mapAskFor.size = %d, setAskFor.size = %d, MAPASKFOR_MAX_SZ = %d, SETASKFOR_MAX_SZ = %d, nSkipped = %d, peer=%d\\n\",\n+                      mapAskFor.size(), setAskFor.size(), MAPASKFOR_MAX_SZ, SETASKFOR_MAX_SZ, nNumWarningsSkipped, id);\n+            nLastWarningTime = nNow;\n+            nNumWarningsSkipped = 0;\n+        }\n+        else {\n+            ++nNumWarningsSkipped;\n+        }\n         return;\n     }\n     // a peer may not have multiple non-responded queue positions for a single inv item"
      },
      {
        "sha": "27f578507c419155bbfbd4738cc4b3064fd6b86e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b2f3e083e73a6bcce31eb656a5503e3db1eb81/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b2f3e083e73a6bcce31eb656a5503e3db1eb81/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
        "patch": "@@ -40,6 +40,8 @@ namespace boost {\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n+/** Minimum time between warnings printed to log. */\n+static const int WARNING_INTERVAL = 10 * 60;\n /** The maximum number of entries in an 'inv' protocol message */\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n@@ -336,9 +338,11 @@ class CNode\n     int64_t nLastRecv;\n     int64_t nTimeConnected;\n     int64_t nTimeOffset;\n+    int64_t nLastWarningTime;\n     CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n+    int nNumWarningsSkipped;\n     int nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and"
      }
    ]
  },
  {
    "sha": "a7d172fafd4b91c99fa803ee7521f966f2c2ece2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2QxNzJmYWZkNGI5MWM5OWZhODAzZWU3NTIxZjk2NmYyYzJlY2Uy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-19T19:06:56Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-19T19:06:56Z"
      },
      "message": "update list of mn states in masternodelist rpc help (#1272)\n\nfix #1266",
      "tree": {
        "sha": "e816def67df1ab45ff983f6598b7b9bbc44ed7f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e816def67df1ab45ff983f6598b7b9bbc44ed7f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7d172fafd4b91c99fa803ee7521f966f2c2ece2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d172fafd4b91c99fa803ee7521f966f2c2ece2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d172fafd4b91c99fa803ee7521f966f2c2ece2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d172fafd4b91c99fa803ee7521f966f2c2ece2/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b2f3e083e73a6bcce31eb656a5503e3db1eb81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70b2f3e083e73a6bcce31eb656a5503e3db1eb81"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a9bdfaef04815714f70a0fdcc3898dde4aa2484f",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d172fafd4b91c99fa803ee7521f966f2c2ece2/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d172fafd4b91c99fa803ee7521f966f2c2ece2/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=a7d172fafd4b91c99fa803ee7521f966f2c2ece2",
        "patch": "@@ -472,8 +472,8 @@ UniValue masternodelist(const UniValue& params, bool fHelp)\n                 \"                   partial match)\\n\"\n                 \"  protocol       - Print protocol of a masternode (can be additionally filtered, exact match))\\n\"\n                 \"  rank           - Print rank of a masternode based on current block\\n\"\n-                \"  status         - Print masternode status: PRE_ENABLED / ENABLED / EXPIRED / OUTPOINT_SPENT / REMOVE\\n\"\n-                \"                   (can be additionally filtered, partial match)\\n\"\n+                \"  status         - Print masternode status: PRE_ENABLED / ENABLED / EXPIRED / WATCHDOG_EXPIRED / NEW_START_REQUIRED /\\n\"\n+                \"                   UPDATE_REQUIRED / POSE_BAN / OUTPOINT_SPENT (can be additionally filtered, partial match)\\n\"\n                 );\n     }\n "
      }
    ]
  },
  {
    "sha": "2a43d23f959c63c67018d6791b70e94b832cdeef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTQzZDIzZjk1OWM2M2M2NzAxOGQ2NzkxYjcwZTk0YjgzMmNkZWVm",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-19T23:00:47Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-19T23:00:47Z"
      },
      "message": "Enable sendrawtransaction to send IS (#1271)\n\n* Enable sendrawtransaction to send IS\r\n\r\n* InstantSend as optional for sendrawtransaction",
      "tree": {
        "sha": "1f9d4c2b05601cc1d15b1158504efdc25b1e05e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f9d4c2b05601cc1d15b1158504efdc25b1e05e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a43d23f959c63c67018d6791b70e94b832cdeef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a43d23f959c63c67018d6791b70e94b832cdeef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a43d23f959c63c67018d6791b70e94b832cdeef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a43d23f959c63c67018d6791b70e94b832cdeef/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d172fafd4b91c99fa803ee7521f966f2c2ece2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d172fafd4b91c99fa803ee7521f966f2c2ece2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d172fafd4b91c99fa803ee7521f966f2c2ece2"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 17,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fdca2790351c83a0c075028add1b18f2ce933df6",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a43d23f959c63c67018d6791b70e94b832cdeef/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a43d23f959c63c67018d6791b70e94b832cdeef/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=2a43d23f959c63c67018d6791b70e94b832cdeef",
        "patch": "@@ -24,6 +24,7 @@\n #include \"txmempool.h\"\n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n+#include \"instantx.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #endif\n@@ -810,14 +811,15 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (fHelp || params.size() < 1 || params.size() > 3)\n         throw runtime_error(\n-            \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n+            \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees instantsend )\\n\"\n             \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n             \"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction)\\n\"\n-            \"2. allowhighfees    (boolean, optional, default=false) Allow high fees\\n\"\n+            \"2. allowhighfees  (boolean, optional, default=false) Allow high fees\\n\"\n+            \"3. instantsend    (boolean, optional, default=false) Use InstantSend to send this transaction\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n             \"\\nExamples:\\n\"\n@@ -832,7 +834,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction tx;\n@@ -844,6 +846,10 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     if (params.size() > 1)\n         fOverrideFees = params[1].get_bool();\n \n+    bool fInstantSend = false;\n+    if (params.size() > 2)\n+        fInstantSend = params[2].get_bool();\n+\n     CCoinsViewCache &view = *pcoinsTip;\n     const CCoins* existingCoins = view.AccessCoins(hashTx);\n     bool fHaveMempool = mempool.exists(hashTx);\n@@ -865,6 +871,13 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n+    if (fInstantSend) {\n+        if (!IsInstantSendTxValid(tx)) {\n+            throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Not a valid InstantSend transaction\");\n+        }\n+        mapLockRequestAccepted.insert(make_pair(hashTx, tx));\n+        CreateTxLockCandidate(tx);\n+    }\n     RelayTransaction(tx);\n \n     return hashTx.GetHex();"
      }
    ]
  },
  {
    "sha": "348c001445cff9c958b88d8b4abc2729edba7170",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDhjMDAxNDQ1Y2ZmOWM5NThiODhkOGI0YWJjMjcyOWVkYmE3MTcw",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-21T05:26:35Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-21T05:26:35Z"
      },
      "message": "Fix governance-votedb index bug (#1278)",
      "tree": {
        "sha": "5b8e8706b043fe4ca23eda931568b53c346c28ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b8e8706b043fe4ca23eda931568b53c346c28ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/348c001445cff9c958b88d8b4abc2729edba7170",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/348c001445cff9c958b88d8b4abc2729edba7170",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/348c001445cff9c958b88d8b4abc2729edba7170",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/348c001445cff9c958b88d8b4abc2729edba7170/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a43d23f959c63c67018d6791b70e94b832cdeef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a43d23f959c63c67018d6791b70e94b832cdeef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a43d23f959c63c67018d6791b70e94b832cdeef"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed62c43faa32a2fada6629859cccb85cc814f6eb",
        "filename": "src/governance-votedb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/348c001445cff9c958b88d8b4abc2729edba7170/src/governance-votedb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/348c001445cff9c958b88d8b4abc2729edba7170/src/governance-votedb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-votedb.cpp?ref=348c001445cff9c958b88d8b4abc2729edba7170",
        "patch": "@@ -58,6 +58,7 @@ void CGovernanceObjectVoteFile::RemoveVotesFromMasternode(const CTxIn& vinMaster\n     vote_l_it it = listVotes.begin();\n     while(it != listVotes.end()) {\n         if(it->GetVinMasternode() == vinMasternode) {\n+            mapVoteIndex.erase(it->GetHash());\n             listVotes.erase(it++);\n         }\n         else {"
      }
    ]
  },
  {
    "sha": "d8797023c821b68982b01e17490ce9b149bcba80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODc5NzAyM2M4MjFiNjg5ODJiMDFlMTc0OTBjZTliMTQ5YmNiYTgw",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-21T19:03:55Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-21T19:03:55Z"
      },
      "message": "move mnb verification requests to their own thread (#1274)\n\n* move mnb verification requests to their own thread, should remove related ui/rpc freezes\r\n\r\n* vector -> list",
      "tree": {
        "sha": "10827918129a7428b858efd4fcc7091feb1172e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10827918129a7428b858efd4fcc7091feb1172e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8797023c821b68982b01e17490ce9b149bcba80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8797023c821b68982b01e17490ce9b149bcba80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8797023c821b68982b01e17490ce9b149bcba80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8797023c821b68982b01e17490ce9b149bcba80/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "348c001445cff9c958b88d8b4abc2729edba7170",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/348c001445cff9c958b88d8b4abc2729edba7170",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/348c001445cff9c958b88d8b4abc2729edba7170"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 73,
      "deletions": 13
    },
    "files": [
      {
        "sha": "ed13a818485d5ba97859813197fadaf0b95cff02",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 13,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8797023c821b68982b01e17490ce9b149bcba80/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8797023c821b68982b01e17490ce9b149bcba80/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=d8797023c821b68982b01e17490ce9b149bcba80",
        "patch": "@@ -102,6 +102,7 @@ CMasternodeMan::CMasternodeMan()\n   mAskedUsForMasternodeList(),\n   mWeAskedForMasternodeList(),\n   mWeAskedForMasternodeListEntry(),\n+  listScheduledMnbRequestConnections(),\n   nLastIndexRebuildTime(0),\n   indexMasternodes(),\n   indexMasternodesOld(),\n@@ -160,6 +161,16 @@ void CMasternodeMan::AskForMN(CNode* pnode, const CTxIn &vin)\n     pnode->PushMessage(NetMsgType::DSEG, vin);\n }\n \n+void CMasternodeMan::AskForMnb(CNode* pnode, const uint256 &hash)\n+{\n+    if(!pnode || hash == uint256()) return;\n+\n+    LogPrint(\"masternode\", \"CMasternodeMan::AskForMnb -- asking for mnb %s from addr=%s\\n\", hash.ToString(), pnode->addr.ToString());\n+    std::vector<CInv> vToFetch;\n+    vToFetch.push_back(CInv(MSG_MASTERNODE_ANNOUNCE, hash));\n+    pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n+}\n+\n void CMasternodeMan::Check()\n {\n     LOCK(cs);\n@@ -179,7 +190,7 @@ void CMasternodeMan::CheckAndRemove()\n \n     {\n         // Need LOCK2 here to ensure consistent locking order because code below locks cs_main\n-        // through GetHeight() signal in ConnectNode and in CheckMnbAndUpdateMasternodeList()\n+        // in CheckMnbAndUpdateMasternodeList()\n         LOCK2(cs_main, cs);\n \n         Check();\n@@ -223,18 +234,9 @@ void CMasternodeMan::CheckAndRemove()\n                         if(mWeAskedForMasternodeListEntry.count(it->vin.prevout) && mWeAskedForMasternodeListEntry[it->vin.prevout].count(vecMasternodeRanks[i].second.addr)) continue;\n                         // didn't ask recently, ok to ask now\n                         CService addr = vecMasternodeRanks[i].second.addr;\n-                        CNode* pnode = ConnectNode(CAddress(addr), NULL, true);\n-                        if(pnode) {\n-                            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- asking for mnb of %s, addr=%s\\n\", it->vin.prevout.ToStringShort(), addr.ToString());\n-                            setRequested.insert(addr);\n-                            // can't use AskForMN here, inv system is way too smart, request data directly instead\n-                            std::vector<CInv> vToFetch;\n-                            vToFetch.push_back(CInv(MSG_MASTERNODE_ANNOUNCE, hash));\n-                            pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n-                            fAskedForMnbRecovery = true;\n-                        } else {\n-                            LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- can't connect to node to ask for mnb, addr=%s\\n\", addr.ToString());\n-                        }\n+                        setRequested.insert(addr);\n+                        listScheduledMnbRequestConnections.push_back(std::make_pair(addr, hash));\n+                        fAskedForMnbRecovery = true;\n                     }\n                     // wait for mnb recovery replies for MNB_RECOVERY_WAIT_SECONDS seconds\n                     mMnbRecoveryRequests[hash] = std::make_pair(GetTime() + MNB_RECOVERY_WAIT_SECONDS, setRequested);\n@@ -771,6 +773,16 @@ void CMasternodeMan::ProcessMasternodeConnections()\n     }\n }\n \n+std::pair<CService, uint256> CMasternodeMan::PopScheduledMnbRequestConnection()\n+{\n+    LOCK(cs);\n+    if(listScheduledMnbRequestConnections.empty()) return make_pair(CService(), uint256());\n+    std::pair<CService, uint256> p = listScheduledMnbRequestConnections.front();\n+    listScheduledMnbRequestConnections.pop_front();\n+    return p;\n+}\n+\n+\n void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv)\n {\n     if(fLiteMode) return; // disable all Dash specific functionality"
      },
      {
        "sha": "2d5d91ba3d0bd09a29ea8a74f33b6ddd018740e8",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8797023c821b68982b01e17490ce9b149bcba80/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8797023c821b68982b01e17490ce9b149bcba80/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=d8797023c821b68982b01e17490ce9b149bcba80",
        "patch": "@@ -129,6 +129,7 @@ class CMasternodeMan\n     // these maps are used for masternode recovery from MASTERNODE_NEW_START_REQUIRED state\n     std::map<uint256, std::pair< int64_t, std::set<CNetAddr> > > mMnbRecoveryRequests;\n     std::map<uint256, std::vector<CMasternodeBroadcast> > mMnbRecoveryGoodReplies;\n+    std::list< std::pair<CService, uint256> > listScheduledMnbRequestConnections;\n \n     int64_t nLastIndexRebuildTime;\n \n@@ -200,6 +201,7 @@ class CMasternodeMan\n \n     /// Ask (source) node for mnb\n     void AskForMN(CNode *pnode, const CTxIn &vin);\n+    void AskForMnb(CNode *pnode, const uint256 &hash);\n \n     /// Check all Masternodes\n     void Check();\n@@ -295,6 +297,7 @@ class CMasternodeMan\n     CMasternode* GetMasternodeByRank(int nRank, int nBlockHeight, int nMinProtocol=0, bool fOnlyActive=true);\n \n     void ProcessMasternodeConnections();\n+    std::pair<CService, uint256> PopScheduledMnbRequestConnection();\n \n     void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n "
      },
      {
        "sha": "6e78ff37efebcf38761439da69363c0c5175c22b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8797023c821b68982b01e17490ce9b149bcba80/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8797023c821b68982b01e17490ce9b149bcba80/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d8797023c821b68982b01e17490ce9b149bcba80",
        "patch": "@@ -24,6 +24,7 @@\n \n #include \"darksend.h\"\n #include \"instantx.h\"\n+#include \"masternodeman.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -65,6 +66,7 @@ using namespace std;\n \n namespace {\n     const int MAX_OUTBOUND_CONNECTIONS = 8;\n+    const int MAX_OUTBOUND_MASTERNODE_CONNECTIONS = 20;\n \n     struct ListenSocket {\n         SOCKET socket;\n@@ -111,6 +113,7 @@ NodeId nLastNodeId = 0;\n CCriticalSection cs_nLastNodeId;\n \n static CSemaphore *semOutbound = NULL;\n+static CSemaphore *semMasternodeOutbound = NULL;\n boost::condition_variable messageHandlerCondition;\n \n // Signals for message handling\n@@ -1053,6 +1056,7 @@ void ThreadSocketHandler()\n \n                     // release outbound grant (if any)\n                     pnode->grantOutbound.Release();\n+                    pnode->grantMasternodeOutbound.Release();\n \n                     // close socket and cleanup\n                     pnode->CloseSocketDisconnect();\n@@ -1690,6 +1694,32 @@ void ThreadOpenAddedConnections()\n     }\n }\n \n+void ThreadMnbRequestConnections()\n+{\n+    // Connecting to specific addresses, no masternode connections available\n+    if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0)\n+        return;\n+\n+    int nTick = 0;\n+    while (true)\n+    {\n+        MilliSleep(1000);\n+        nTick++;\n+\n+        CSemaphoreGrant grant(*semMasternodeOutbound);\n+        boost::this_thread::interruption_point();\n+\n+        std::pair<CService, uint256> p = mnodeman.PopScheduledMnbRequestConnection();\n+        if(p.first == CService()) continue;\n+        CNode* pnode = ConnectNode(CAddress(p.first), NULL, true);\n+        if(pnode) {\n+            grant.MoveTo(pnode->grantMasternodeOutbound);\n+            if(p.second != uint256())\n+                mnodeman.AskForMnb(pnode, p.second);\n+        }\n+    }\n+}\n+\n // if successful, this moves the passed grant to the constructed node\n bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot)\n {\n@@ -1967,6 +1997,11 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         semOutbound = new CSemaphore(nMaxOutbound);\n     }\n \n+    if (semMasternodeOutbound == NULL) {\n+        // initialize semaphore\n+        semMasternodeOutbound = new CSemaphore(MAX_OUTBOUND_MASTERNODE_CONNECTIONS);\n+    }\n+\n     if (pnodeLocalHost == NULL)\n         pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(\"127.0.0.1\", 0), nLocalServices));\n \n@@ -1993,6 +2028,9 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Initiate outbound connections\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"opencon\", &ThreadOpenConnections));\n \n+    // Initiate masternode connections\n+    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"mnbcon\", &ThreadMnbRequestConnections));\n+\n     // Process messages\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n@@ -2008,6 +2046,10 @@ bool StopNode()\n         for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n             semOutbound->post();\n \n+    if (semMasternodeOutbound)\n+        for (int i=0; i<MAX_OUTBOUND_MASTERNODE_CONNECTIONS; i++)\n+            semMasternodeOutbound->post();\n+\n     if (fAddressesInitialized)\n     {\n         DumpData();\n@@ -2043,6 +2085,8 @@ class CNetCleanup\n         vhListenSocket.clear();\n         delete semOutbound;\n         semOutbound = NULL;\n+        delete semMasternodeOutbound;\n+        semMasternodeOutbound = NULL;\n         delete pnodeLocalHost;\n         pnodeLocalHost = NULL;\n "
      },
      {
        "sha": "39b76d38f9a4181ece0ecfbfef000a73ca1249ea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8797023c821b68982b01e17490ce9b149bcba80/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8797023c821b68982b01e17490ce9b149bcba80/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d8797023c821b68982b01e17490ce9b149bcba80",
        "patch": "@@ -364,6 +364,7 @@ class CNode\n     // If 'true' this node will be disconnected on CMasternodeMan::ProcessMasternodeConnections()\n     bool fMasternode;\n     CSemaphoreGrant grantOutbound;\n+    CSemaphoreGrant grantMasternodeOutbound;\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n     int nRefCount;"
      }
    ]
  },
  {
    "sha": "5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTJhOWNjZmQ1NzBhNGZlMDVmNWRmNDMwMTZhM2IzZDdhNjRjODA0",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-25T11:37:33Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-25T11:37:33Z"
      },
      "message": "Update download path for native_ccache (#1283)\n\n* Update download path for native_ccache\r\n\r\n* Remove www.",
      "tree": {
        "sha": "909adf25d605ba77e4895e178bcfa5dd4a45e3b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/909adf25d605ba77e4895e178bcfa5dd4a45e3b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8797023c821b68982b01e17490ce9b149bcba80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8797023c821b68982b01e17490ce9b149bcba80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8797023c821b68982b01e17490ce9b149bcba80"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "027174479adac628ea11c01b93bf8f41d20648ab",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804",
        "patch": "@@ -1,6 +1,6 @@\n package=native_ccache\n $(package)_version=3.2.4\n-$(package)_download_path=http://www.samba.org/ftp/ccache\n+$(package)_download_path=https://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n $(package)_sha256_hash=ffeb967edb549e67da0bd5f44f729a2022de9fdde65dfd80d2a7204d7f75332e\n "
      }
    ]
  },
  {
    "sha": "534effaf8533ff08793e89f4ae796939fc7c2479",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzRlZmZhZjg1MzNmZjA4NzkzZTg5ZjRhZTc5NjkzOWZjN2MyNDc5",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-01-25T11:37:45Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-25T11:37:45Z"
      },
      "message": "Set width=18 to support NEW_START_REQUIRED status in masternodelist full (#1281)",
      "tree": {
        "sha": "d1ac60e2537744b4263d243b07fc32db6bec4f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1ac60e2537744b4263d243b07fc32db6bec4f1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/534effaf8533ff08793e89f4ae796939fc7c2479",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/534effaf8533ff08793e89f4ae796939fc7c2479",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/534effaf8533ff08793e89f4ae796939fc7c2479",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/534effaf8533ff08793e89f4ae796939fc7c2479/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a2a9ccfd570a4fe05f5df43016a3b3d7a64c804"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bc84677df493e2fb9a565efa144a5eb4f2c3596d",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/534effaf8533ff08793e89f4ae796939fc7c2479/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/534effaf8533ff08793e89f4ae796939fc7c2479/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=534effaf8533ff08793e89f4ae796939fc7c2479",
        "patch": "@@ -503,7 +503,7 @@ UniValue masternodelist(const UniValue& params, bool fHelp)\n                 obj.push_back(Pair(strOutpoint, strAddress));\n             } else if (strMode == \"full\") {\n                 std::ostringstream streamFull;\n-                streamFull << std::setw(15) <<\n+                streamFull << std::setw(18) <<\n                                mn.GetStatus() << \" \" <<\n                                mn.nProtocolVersion << \" \" <<\n                                CBitcoinAddress(mn.pubKeyCollateralAddress.GetID()).ToString() << \" \" <<"
      }
    ]
  },
  {
    "sha": "9c5db0495342b33aebad7df07553d4c08070b9a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzVkYjA0OTUzNDJiMzNhZWJhZDdkZjA3NTUzZDRjMDgwNzBiOWE3",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-27T14:07:13Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-27T14:07:13Z"
      },
      "message": "Fix datadir initialization in dash-qt (#1287)",
      "tree": {
        "sha": "56f650fd46f5a28dcf4c8ed1937416f912112b75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56f650fd46f5a28dcf4c8ed1937416f912112b75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c5db0495342b33aebad7df07553d4c08070b9a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c5db0495342b33aebad7df07553d4c08070b9a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c5db0495342b33aebad7df07553d4c08070b9a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c5db0495342b33aebad7df07553d4c08070b9a7/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "534effaf8533ff08793e89f4ae796939fc7c2479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/534effaf8533ff08793e89f4ae796939fc7c2479",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/534effaf8533ff08793e89f4ae796939fc7c2479"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3effc3275e4b8f4ea319eca2557b09bf71740cd3",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c5db0495342b33aebad7df07553d4c08070b9a7/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c5db0495342b33aebad7df07553d4c08070b9a7/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=9c5db0495342b33aebad7df07553d4c08070b9a7",
        "patch": "@@ -173,7 +173,7 @@ void Intro::pickDataDirectory()\n     /* 2) Allow QSettings to override default dir */\n     QString dataDir = settings.value(\"strDataDir\", dataDirDefaultCurrent).toString();\n     /* 3) Check to see if default datadir is the one we expect */\n-    QString dataDirDefaultSettings = settings.value(\"strDataDirDefault\", dataDirDefaultCurrent).toString();\n+    QString dataDirDefaultSettings = settings.value(\"strDataDirDefault\").toString();\n \n     if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR) || dataDirDefaultCurrent != dataDirDefaultSettings)\n     {"
      }
    ]
  },
  {
    "sha": "60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDQwOWRmODIyOWZhNTZhZTZkZTZmZWQxZmE3ZjljM2EzZTY3NTdl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-29T08:22:14Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-29T08:22:14Z"
      },
      "message": "InstantSend overhaul (#1288)\n\n* Multi-quorum InstantSend, complete refactoring\r\n+ cleanup for IS and partial protobump\r\n\r\n* more changes:\r\n- allow InstantSend tx to have 10 inputs max\r\n- store many unique tx hashes in mapVotedOutpoints\r\n- more checks in AcceptToMemoryPoolWorker (moved from ProcessMessage + CTxLockRequest(tx).IsValid() )\r\n\r\n* More changes:\r\n- let multiple lock candidates compete for votes\r\n- fail to vote on the same outpoint twice early\r\n\r\n* More changes:\r\n- notify CInstantSend on UpdatedBlockTip -> remove cs_main from CheckAndRemove()\r\n- notify CInstantSend on SyncTransaction -> count expiration block starting from the block corresponding tx was confirmed instead of the block lock candidate/vote was created\r\n- fixed few locks\r\n\r\n* add comments about nConfirmedHeight\r\n\r\n* Fix \"Block vs Lock\" edge case\r\n\r\n* Fix \"Block vs Lock\" edge case, p2\r\n\r\n* Fix issues:\r\n- fix logic for locking inputs and notifying - see UpdateLockedTransaction, TryToFinalizeLockCandidate\r\n- add missing hash inserting in ProcessTxLockVote\r\n- add nMaxBlocks param to ResolveConflicts to limit max depth allowed to disconnect blocks recursively\r\n- fix false positive mempool conflict\r\n- add missing mutex locks\r\n- fix fRequireUnspent logic in CTxLockRequest::IsValid",
      "tree": {
        "sha": "a624470b4f8bff1b589e3a944cd3292635948345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a624470b4f8bff1b589e3a944cd3292635948345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c5db0495342b33aebad7df07553d4c08070b9a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c5db0495342b33aebad7df07553d4c08070b9a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c5db0495342b33aebad7df07553d4c08070b9a7"
      }
    ],
    "stats": {
      "total": 1665,
      "additions": 1160,
      "deletions": 505
    },
    "files": [
      {
        "sha": "d6fd18bb99ae3cd560eba6f7915deebd8450e53f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -77,7 +77,6 @@ class CMainParams : public CChainParams {\n         consensus.nMasternodePaymentsIncreaseBlock = 158000; // actual historical value\n         consensus.nMasternodePaymentsIncreasePeriod = 576*30; // 17280 - actual historical value\n         consensus.nInstantSendKeepLock = 24;\n-        consensus.nInstantSendReprocessBlocks = 15;\n         consensus.nBudgetPaymentsStartBlock = 328008; // actual historical value\n         consensus.nBudgetPaymentsCycleBlocks = 16616; // ~(60*24*30)/2.6, actual number of blocks per month is 200700 / 12 = 16725\n         consensus.nBudgetPaymentsWindowBlocks = 100;\n@@ -201,7 +200,6 @@ class CTestNetParams : public CChainParams {\n         consensus.nMasternodePaymentsIncreaseBlock = 46000;\n         consensus.nMasternodePaymentsIncreasePeriod = 576;\n         consensus.nInstantSendKeepLock = 6;\n-        consensus.nInstantSendReprocessBlocks = 4;\n         consensus.nBudgetPaymentsStartBlock = 60000;\n         consensus.nBudgetPaymentsCycleBlocks = 50;\n         consensus.nBudgetPaymentsWindowBlocks = 10;\n@@ -308,7 +306,6 @@ class CRegTestParams : public CChainParams {\n         consensus.nMasternodePaymentsIncreaseBlock = 350;\n         consensus.nMasternodePaymentsIncreasePeriod = 10;\n         consensus.nInstantSendKeepLock = 6;\n-        consensus.nInstantSendReprocessBlocks = 4;\n         consensus.nBudgetPaymentsStartBlock = 1000;\n         consensus.nBudgetPaymentsCycleBlocks = 50;\n         consensus.nBudgetPaymentsWindowBlocks = 10;"
      },
      {
        "sha": "23fa8f301d194393df4c798a7a74cebaf8cfe071",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -41,7 +41,6 @@ struct Params {\n     int nMasternodePaymentsIncreaseBlock;\n     int nMasternodePaymentsIncreasePeriod; // in blocks\n     int nInstantSendKeepLock; // in blocks\n-    int nInstantSendReprocessBlocks;\n     int nBudgetPaymentsStartBlock;\n     int nBudgetPaymentsCycleBlocks;\n     int nBudgetPaymentsWindowBlocks;"
      },
      {
        "sha": "9cd439ddc7f894e4a9d92466033291b67741594e",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -2490,7 +2490,7 @@ void ThreadCheckDarkSendPool()\n                 mnodeman.ProcessMasternodeConnections();\n                 mnodeman.CheckAndRemove();\n                 mnpayments.CheckAndRemove();\n-                CleanTxLockCandidates();\n+                instantsend.CheckAndRemove();\n             }\n \n             darkSendPool.CheckTimeout();"
      },
      {
        "sha": "c2f719a0ed53be2bb98d16e4c693cb9924582b39",
        "filename": "src/dsnotificationinterface.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/dsnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/dsnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dsnotificationinterface.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"dsnotificationinterface.h\"\n #include \"darksend.h\"\n+#include \"instantx.h\"\n #include \"governance.h\"\n #include \"masternodeman.h\"\n #include \"masternode-payments.h\"\n@@ -21,7 +22,13 @@ void CDSNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n {\n     mnodeman.UpdatedBlockTip(pindex);\n     darkSendPool.UpdatedBlockTip(pindex);\n+    instantsend.UpdatedBlockTip(pindex);\n     mnpayments.UpdatedBlockTip(pindex);\n     governance.UpdatedBlockTip(pindex);\n     masternodeSync.UpdatedBlockTip(pindex);\n }\n+\n+void CDSNotificationInterface::SyncTransaction(const CTransaction &tx, const CBlock *pblock)\n+{\n+    instantsend.SyncTransaction(tx, pblock);\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "68b40dd26491be583a90cd438aa185c3827722a8",
        "filename": "src/dsnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/dsnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/dsnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dsnotificationinterface.h?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -17,6 +17,7 @@ class CDSNotificationInterface : public CValidationInterface\n protected:\n     // CValidationInterface\n     void UpdatedBlockTip(const CBlockIndex *pindex);\n+    void SyncTransaction(const CTransaction &tx, const CBlock *pblock);\n \n private:\n };"
      },
      {
        "sha": "247088cd8763ff31c2fd0e6ca386ddd798887419",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 827,
        "deletions": 374,
        "changes": 1201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -2,49 +2,45 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n #include \"activemasternode.h\"\n #include \"darksend.h\"\n #include \"instantx.h\"\n #include \"key.h\"\n+#include \"main.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeman.h\"\n #include \"net.h\"\n #include \"protocol.h\"\n #include \"spork.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"consensus/validation.h\"\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/lexical_cast.hpp>\n #include <boost/thread.hpp>\n \n extern CWallet* pwalletMain;\n+extern CTxMemPool mempool;\n \n bool fEnableInstantSend = true;\n int nInstantSendDepth = DEFAULT_INSTANTSEND_DEPTH;\n int nCompleteTXLocks;\n \n-std::map<uint256, CTransaction> mapLockRequestAccepted;\n-std::map<uint256, CTransaction> mapLockRequestRejected;\n-std::map<uint256, CTxLockVote> mapTxLockVotes;\n-std::map<uint256, CTxLockVote> mapTxLockVotesOrphan;\n-std::map<COutPoint, uint256> mapLockedInputs;\n-\n-std::map<uint256, CTxLockCandidate> mapTxLockCandidates;\n-std::map<COutPoint, int64_t> mapMasternodeOrphanVotes; //track masternodes who voted with no txreq (for DOS protection)\n-\n-CCriticalSection cs_instantsend;\n+CInstantSend instantsend;\n \n // Transaction Locks\n //\n // step 1) Some node announces intention to lock transaction inputs via \"txlreg\" message\n-// step 2) Top INSTANTSEND_SIGNATURES_TOTAL masternodes push \"txvote\" message\n-// step 3) Once there are INSTANTSEND_SIGNATURES_REQUIRED valid \"txvote\" messages\n-//         for a corresponding \"txlreg\" message, all inputs from that tx are treated as locked\n+// step 2) Top COutPointLock::SIGNATURES_TOTAL masternodes per each spent outpoint push \"txvote\" message\n+// step 3) Once there are COutPointLock::SIGNATURES_REQUIRED valid \"txvote\" messages per each spent outpoint\n+//         for a corresponding \"txlreg\" message, all outpoints from that tx are treated as locked\n \n-void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStream& vRecv)\n+//\n+// CInstantSend\n+//\n+\n+void CInstantSend::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv)\n {\n     if(fLiteMode) return; // disable all Dash specific functionality\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return;\n@@ -56,304 +52,310 @@ void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStrea\n \n     if (strCommand == NetMsgType::TXLOCKVOTE) // InstantSend Transaction Lock Consensus Votes\n     {\n+        if(pfrom->nVersion < MIN_INSTANTSEND_PROTO_VERSION) return;\n+\n         CTxLockVote vote;\n         vRecv >> vote;\n \n         LOCK2(cs_main, cs_instantsend);\n-        if(mapTxLockVotes.count(vote.GetHash())) return;\n-        mapTxLockVotes.insert(std::make_pair(vote.GetHash(), vote));\n+\n+        uint256 nVoteHash = vote.GetHash();\n+\n+        if(mapTxLockVotes.count(nVoteHash)) return;\n+        mapTxLockVotes.insert(std::make_pair(nVoteHash, vote));\n \n         ProcessTxLockVote(pfrom, vote);\n \n         return;\n     }\n }\n \n-bool IsInstantSendTxValid(const CTransaction& txCandidate)\n+bool CInstantSend::ProcessTxLockRequest(const CTxLockRequest& txLockRequest)\n {\n-    if(txCandidate.vout.size() < 1) return false;\n-\n-    {\n-        LOCK(cs_main);\n-        if(!CheckFinalTx(txCandidate)) {\n-            LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Transaction is not final: txCandidate=%s\", txCandidate.ToString());\n-            return false;\n-        }\n-    }\n-\n-    int64_t nValueIn = 0;\n-    int64_t nValueOut = 0;\n-    bool fMissingInputs = false;\n+    LOCK2(cs_main, cs_instantsend);\n \n-    BOOST_FOREACH(const CTxOut& txout, txCandidate.vout) {\n-        // InstandSend supports normal scripts and unspendable (i.e. data) scripts.\n-        // TODO: Look into other script types that are normal and can be included\n-        if(!txout.scriptPubKey.IsNormalPaymentScript() && !txout.scriptPubKey.IsUnspendable()) {\n-            LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Invalid Script %s\", txCandidate.ToString());\n+    uint256 txHash = txLockRequest.GetHash();\n+\n+    // Check to see if we conflict with existing completed lock,\n+    // fail if so, there can't be 2 completed locks for the same outpoint\n+    BOOST_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n+        std::map<COutPoint, uint256>::iterator it = mapLockedOutpoints.find(txin.prevout);\n+        if(it != mapLockedOutpoints.end()) {\n+            // Conflicting with complete lock, ignore this one\n+            // (this could be the one we have but we don't want to try to lock it twice anyway)\n+            LogPrintf(\"CInstantSend::ProcessTxLockRequest -- WARNING: Found conflicting completed Transaction Lock, skipping current one, txid=%s, completed lock txid=%s\\n\",\n+                    txLockRequest.GetHash().ToString(), it->second.ToString());\n             return false;\n         }\n-        nValueOut += txout.nValue;\n     }\n \n-    BOOST_FOREACH(const CTxIn& txin, txCandidate.vin) {\n-        CTransaction tx2;\n-        uint256 hash;\n-        if(GetTransaction(txin.prevout.hash, tx2, Params().GetConsensus(), hash, true)) {\n-            if(tx2.vout.size() > txin.prevout.n)\n-                nValueIn += tx2.vout[txin.prevout.n].nValue;\n-        } else {\n-            fMissingInputs = true;\n+    // Check to see if there are votes for conflicting request,\n+    // if so - do not fail, just warn user\n+    BOOST_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n+        std::map<COutPoint, std::set<uint256> >::iterator it = mapVotedOutpoints.find(txin.prevout);\n+        if(it != mapVotedOutpoints.end()) {\n+            BOOST_FOREACH(const uint256& hash, it->second) {\n+                if(hash != txLockRequest.GetHash()) {\n+                    LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockRequest -- Double spend attempt! %s\\n\", txin.prevout.ToStringShort());\n+                    // do not fail here, let it go and see which one will get the votes to be locked\n+                }\n+            }\n         }\n     }\n \n-    if(nValueOut > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n-        LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Transaction value too high: nValueOut=%d, txCandidate=%s\", nValueOut, txCandidate.ToString());\n-        return false;\n-    }\n-\n-    if(fMissingInputs) {\n-        LogPrint(\"instantsend\", \"IsInstantSendTxValid -- Unknown inputs in transaction: txCandidate=%s\", txCandidate.ToString());\n-        /*\n-            This happens sometimes for an unknown reason, so we'll return that it's a valid transaction.\n-            If someone submits an invalid transaction it will be rejected by the network anyway and this isn't\n-            very common, but we don't want to block IX just because the client can't figure out the fee.\n-        */\n-        return true;\n-    }\n-\n-    if(nValueIn - nValueOut < INSTANTSEND_MIN_FEE) {\n-        LogPrint(\"instantsend\", \"IsInstantSendTxValid -- did not include enough fees in transaction: fees=%d, txCandidate=%s\", nValueOut - nValueIn, txCandidate.ToString());\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n-bool ProcessTxLockRequest(CNode* pfrom, const CTransaction &tx)\n-{\n-    if(!IsInstantSendTxValid(tx)) return false;\n-\n-    int nBlockHeight = CreateTxLockCandidate(tx);\n-    if(!nBlockHeight) {\n+    if(!CreateTxLockCandidate(txLockRequest)) {\n         // smth is not right\n+        LogPrintf(\"CInstantSend::ProcessTxLockRequest -- CreateTxLockCandidate failed, txid=%s\\n\", txHash.ToString());\n         return false;\n     }\n+    LogPrintf(\"CInstantSend::ProcessTxLockRequest -- accepted, txid=%s\\n\", txHash.ToString());\n \n-    LOCK2(cs_main, cs_instantsend);\n-    uint256 txHash = tx.GetHash();\n-    mapLockRequestAccepted.insert(std::make_pair(txHash, tx));\n-\n-    LogPrintf(\"TXLOCKREQUEST -- Transaction Lock Request: %s %s : accepted %s\\n\",\n-            pfrom ? pfrom->addr.ToString() : \"\", pfrom ? pfrom->cleanSubVer : \"\", txHash.ToString());\n-\n-    CreateTxLockVote(tx, nBlockHeight);\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    CTxLockCandidate& txLockCandidate = itLockCandidate->second;\n+    Vote(txLockCandidate);\n     ProcessOrphanTxLockVotes();\n \n     // Masternodes will sometimes propagate votes before the transaction is known to the client.\n-    // If this just happened - update transaction status, try forcing external script notification,\n-    // lock inputs and resolve conflicting locks\n-    if(IsLockedInstandSendTransaction(txHash)) {\n-        UpdateLockedTransaction(tx, true);\n-        LockTransactionInputs(tx);\n-        ResolveConflicts(tx);\n-    }\n+    // If this just happened - lock inputs, resolve conflicting locks, update transaction status\n+    // forcing external script notification.\n+    TryToFinalizeLockCandidate(txLockCandidate);\n \n     return true;\n }\n \n-int64_t CreateTxLockCandidate(const CTransaction& tx)\n+bool CInstantSend::CreateTxLockCandidate(const CTxLockRequest& txLockRequest)\n {\n-    // Find the age of the first input but all inputs must be old enough too\n-    int64_t nTxAge = 0;\n-    BOOST_REVERSE_FOREACH(const CTxIn& txin, tx.vin) {\n-        nTxAge = GetInputAge(txin);\n-        if(nTxAge < 5) { //1 less than the \"send IX\" gui requires, incase of a block propagating the network at the time\n-            LogPrintf(\"CreateTxLockCandidate -- Transaction not found / too new: nTxAge=%d, txid=%s\\n\", nTxAge, tx.GetHash().ToString());\n-            return 0;\n-        }\n-    }\n+    // Normally we should require all outpoints to be unspent, but in case we are reprocessing\n+    // because of a lot of legit orphan votes we should also check already spent outpoints.\n+    uint256 txHash = txLockRequest.GetHash();\n+    if(!txLockRequest.IsValid(!IsEnoughOrphanVotesForTx(txLockRequest))) return false;\n \n-    /*\n-        Use a blockheight newer than the input.\n-        This prevents attackers from using transaction mallibility to predict which masternodes\n-        they'll use.\n-    */\n-    int nCurrentHeight = 0;\n-    int nLockInputHeight = 0;\n-    {\n-        LOCK(cs_main);\n-        if(!chainActive.Tip()) return 0;\n-        nCurrentHeight = chainActive.Height();\n-        nLockInputHeight = nCurrentHeight - nTxAge + 4;\n-    }\n+    LOCK(cs_instantsend);\n \n-    uint256 txHash = tx.GetHash();\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    if(itLockCandidate == mapTxLockCandidates.end()) {\n+        LogPrintf(\"CInstantSend::CreateTxLockCandidate -- new, txid=%s\\n\", txHash.ToString());\n \n-    LOCK(cs_instantsend);\n-    if(!mapTxLockCandidates.count(txHash)) {\n-        LogPrintf(\"CreateTxLockCandidate -- New Transaction Lock Candidate! txid=%s\\n\", txHash.ToString());\n-\n-        CTxLockCandidate txLockCandidate;\n-        txLockCandidate.nBlockHeight = nLockInputHeight;\n-        //locks expire after nInstantSendKeepLock confirmations\n-        txLockCandidate.nExpirationBlock = nCurrentHeight + Params().GetConsensus().nInstantSendKeepLock;\n-        txLockCandidate.nTimeout = GetTime()+(60*5);\n-        txLockCandidate.txHash = txHash;\n+        CTxLockCandidate txLockCandidate(txLockRequest);\n+        // all inputs should already be checked by txLockRequest.IsValid() above, just use them now\n+        BOOST_REVERSE_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n+            txLockCandidate.AddOutPointLock(txin.prevout);\n+        }\n         mapTxLockCandidates.insert(std::make_pair(txHash, txLockCandidate));\n     } else {\n-        mapTxLockCandidates[txHash].nBlockHeight = nLockInputHeight;\n-        LogPrint(\"instantsend\", \"CreateTxLockCandidate -- Transaction Lock Candidate exists! txid=%s\\n\", txHash.ToString());\n+        LogPrint(\"instantsend\", \"CInstantSend::CreateTxLockCandidate -- seen, txid=%s\\n\", txHash.ToString());\n     }\n \n-    return nLockInputHeight;\n+    return true;\n }\n \n-// check if we need to vote on this transaction\n-void CreateTxLockVote(const CTransaction& tx, int nBlockHeight)\n+void CInstantSend::Vote(CTxLockCandidate& txLockCandidate)\n {\n     if(!fMasterNode) return;\n \n-    int n = mnodeman.GetMasternodeRank(activeMasternode.vin, nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n+    LOCK2(cs_main, cs_instantsend);\n \n-    if(n == -1) {\n-        LogPrint(\"instantsend\", \"CreateTxLockVote -- Unknown Masternode %s\\n\", activeMasternode.vin.prevout.ToStringShort());\n-        return;\n-    }\n+    uint256 txHash = txLockCandidate.GetHash();\n+    // check if we need to vote on this candidate's outpoints,\n+    // it's possible that we need to vote for several of them\n+    std::map<COutPoint, COutPointLock>::iterator itOutpointLock = txLockCandidate.mapOutPointLocks.begin();\n+    while(itOutpointLock != txLockCandidate.mapOutPointLocks.end()) {\n \n-    if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-        LogPrint(\"instantsend\", \"CreateTxLockVote -- Masternode not in the top %d (%d)\\n\", INSTANTSEND_SIGNATURES_TOTAL, n);\n-        return;\n-    }\n-    /*\n-        nBlockHeight calculated from the transaction is the authoritive source\n-    */\n+        int nPrevoutHeight = GetUTXOHeight(itOutpointLock->first);\n+        if(nPrevoutHeight == -1) {\n+            LogPrint(\"instantsend\", \"CInstantSend::Vote -- Failed to find UTXO %s\\n\", itOutpointLock->first.ToStringShort());\n+            return;\n+        }\n \n-    LogPrint(\"instantsend\", \"CreateTxLockVote -- In the top %d (%d)\\n\", INSTANTSEND_SIGNATURES_TOTAL, n);\n+        int nLockInputHeight = nPrevoutHeight + 4;\n \n-    CTxLockVote vote;\n-    vote.vinMasternode = activeMasternode.vin;\n-    vote.txHash = tx.GetHash();\n-    vote.nBlockHeight = nBlockHeight;\n-    if(!vote.Sign()) {\n-        LogPrintf(\"CreateTxLockVote -- Failed to sign consensus vote\\n\");\n-        return;\n-    }\n-    if(!vote.CheckSignature()) {\n-        LogPrintf(\"CreateTxLockVote -- Signature invalid\\n\");\n-        return;\n-    }\n+        int n = mnodeman.GetMasternodeRank(activeMasternode.vin, nLockInputHeight, MIN_INSTANTSEND_PROTO_VERSION);\n \n-    {\n-        LOCK(cs_instantsend);\n-        mapTxLockVotes[vote.GetHash()] = vote;\n-    }\n+        if(n == -1) {\n+            LogPrint(\"instantsend\", \"CInstantSend::Vote -- Unknown Masternode %s\\n\", activeMasternode.vin.prevout.ToStringShort());\n+            continue;\n+        }\n \n-    CInv inv(MSG_TXLOCK_VOTE, vote.GetHash());\n-    RelayInv(inv);\n+        int nSignaturesTotal = COutPointLock::SIGNATURES_TOTAL;\n+        if(n > nSignaturesTotal) {\n+            LogPrint(\"instantsend\", \"CInstantSend::Vote -- Masternode not in the top %d (%d)\\n\", nSignaturesTotal, n);\n+            continue;\n+        }\n+\n+        LogPrint(\"instantsend\", \"CInstantSend::Vote -- In the top %d (%d)\\n\", nSignaturesTotal, n);\n+\n+        std::map<COutPoint, std::set<uint256> >::iterator itVoted = mapVotedOutpoints.find(itOutpointLock->first);\n+\n+        // Check to see if we already voted for this outpoint,\n+        // refuse to vote twice or to include the same outpoint in another tx\n+        bool fAlreadyVoted = false;\n+        if(itVoted != mapVotedOutpoints.end()) {\n+            BOOST_FOREACH(const uint256& hash, itVoted->second) {\n+                std::map<uint256, CTxLockCandidate>::iterator it2 = mapTxLockCandidates.find(hash);\n+                if(it2->second.HasMasternodeVoted(itOutpointLock->first, activeMasternode.vin.prevout)) {\n+                    // we already voted for this outpoint to be included either in the same tx or in a competing one,\n+                    // skip it anyway\n+                    fAlreadyVoted = true;\n+                    LogPrintf(\"CInstantSend::Vote -- WARNING: We already voted for this outpoint, skipping: txHash=%s, outpoint=%s\\n\",\n+                            txHash.ToString(), itOutpointLock->first.ToStringShort());\n+                    break;\n+                }\n+            }\n+        }\n+        if(fAlreadyVoted) continue; // skip to the next outpoint\n+\n+        // we haven't voted for this outpoint yet, let's try to do this now\n+        CTxLockVote vote(txHash, itOutpointLock->first, activeMasternode.vin.prevout);\n+\n+        if(!vote.Sign()) {\n+            LogPrintf(\"CInstantSend::Vote -- Failed to sign consensus vote\\n\");\n+            return;\n+        }\n+        if(!vote.CheckSignature()) {\n+            LogPrintf(\"CInstantSend::Vote -- Signature invalid\\n\");\n+            return;\n+        }\n+\n+        // vote constructed sucessfully, let's store and relay it\n+        uint256 nVoteHash = vote.GetHash();\n+        mapTxLockVotes.insert(std::make_pair(nVoteHash, vote));\n+        if(itOutpointLock->second.AddVote(vote)) {\n+            LogPrintf(\"CInstantSend::Vote -- Vote created successfully, relaying: txHash=%s, outpoint=%s, vote=%s\\n\",\n+                    txHash.ToString(), itOutpointLock->first.ToStringShort(), nVoteHash.ToString());\n+\n+            if(itVoted == mapVotedOutpoints.end()) {\n+                std::set<uint256> setHashes;\n+                setHashes.insert(txHash);\n+                mapVotedOutpoints.insert(std::make_pair(itOutpointLock->first, setHashes));\n+            } else {\n+                mapVotedOutpoints[itOutpointLock->first].insert(txHash);\n+                if(mapVotedOutpoints[itOutpointLock->first].size() > 1) {\n+                    // it's ok to continue, just warn user\n+                    LogPrintf(\"CInstantSend::Vote -- WARNING: Vote conflicts with some existing votes: txHash=%s, outpoint=%s, vote=%s\\n\",\n+                            txHash.ToString(), itOutpointLock->first.ToStringShort(), nVoteHash.ToString());\n+                }\n+            }\n+\n+            vote.Relay();\n+        }\n+\n+        ++itOutpointLock;\n+    }\n }\n \n //received a consensus vote\n-bool ProcessTxLockVote(CNode* pnode, CTxLockVote& vote)\n+bool CInstantSend::ProcessTxLockVote(CNode* pfrom, CTxLockVote& vote)\n {\n-    LOCK(cs_instantsend);\n+    LOCK2(cs_main, cs_instantsend);\n+\n+    uint256 txHash = vote.GetTxHash();\n+\n+    if(!vote.IsValid(pfrom)) {\n+        // could be because of missing MN\n+        LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Vote is invalid, txid=%s\\n\", txHash.ToString());\n+        return false;\n+    }\n+\n     // Masternodes will sometimes propagate votes before the transaction is known to the client,\n     // will actually process only after the lock request itself has arrived\n-    if(!mapLockRequestAccepted.count(vote.txHash)) {\n+\n+    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n+    if(it == mapTxLockCandidates.end()) {\n         if(!mapTxLockVotesOrphan.count(vote.GetHash())) {\n-            LogPrint(\"instantsend\", \"ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s new\\n\", vote.txHash.ToString(), vote.vinMasternode.prevout.ToStringShort());\n-            vote.nOrphanExpireTime = GetTime() + 60; // keep orphan votes for 1 minute\n             mapTxLockVotesOrphan[vote.GetHash()] = vote;\n+            LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s new\\n\",\n+                    txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort());\n+            bool fReprocess = true;\n+            std::map<uint256, CTxLockRequest>::iterator itLockRequest = mapLockRequestAccepted.find(txHash);\n+            if(itLockRequest == mapLockRequestAccepted.end()) {\n+                itLockRequest = mapLockRequestRejected.find(txHash);\n+                if(itLockRequest == mapLockRequestRejected.end()) {\n+                    // still too early, wait for tx lock request\n+                    fReprocess = false;\n+                }\n+            }\n+            if(fReprocess && IsEnoughOrphanVotesForTx(itLockRequest->second)) {\n+                // We have enough votes for corresponding lock to complete,\n+                // tx lock request should already be received at this stage.\n+                LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Found enough orphan votes, reprocessing Transaction Lock Request: txid=%s\\n\", txHash.ToString());\n+                ProcessTxLockRequest(itLockRequest->second);\n+                return true;\n+            }\n         } else {\n-            LogPrint(\"instantsend\", \"ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s seen\\n\", vote.txHash.ToString(), vote.vinMasternode.prevout.ToStringShort());\n+            LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s seen\\n\",\n+                    txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort());\n         }\n \n         // This tracks those messages and allows only the same rate as of the rest of the network\n+        // TODO: make sure this works good enough for multi-quorum\n \n         int nMasternodeOrphanExpireTime = GetTime() + 60*10; // keep time data for 10 minutes\n-        if(!mapMasternodeOrphanVotes.count(vote.vinMasternode.prevout)) {\n-            mapMasternodeOrphanVotes[vote.vinMasternode.prevout] = nMasternodeOrphanExpireTime;\n+        if(!mapMasternodeOrphanVotes.count(vote.GetMasternodeOutpoint())) {\n+            mapMasternodeOrphanVotes[vote.GetMasternodeOutpoint()] = nMasternodeOrphanExpireTime;\n         } else {\n-            int64_t nPrevOrphanVote = mapMasternodeOrphanVotes[vote.vinMasternode.prevout];\n+            int64_t nPrevOrphanVote = mapMasternodeOrphanVotes[vote.GetMasternodeOutpoint()];\n             if(nPrevOrphanVote > GetTime() && nPrevOrphanVote > GetAverageMasternodeOrphanVoteTime()) {\n-                LogPrint(\"instantsend\", \"ProcessTxLockVote -- masternode is spamming orphan Transaction Lock Votes: txid=%s  masternode=%s\\n\",\n-                        vote.vinMasternode.prevout.ToStringShort(), vote.txHash.ToString());\n+                LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- masternode is spamming orphan Transaction Lock Votes: txid=%s  masternode=%s\\n\",\n+                        txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort());\n                 // Misbehaving(pfrom->id, 1);\n                 return false;\n             }\n             // not spamming, refresh\n-            mapMasternodeOrphanVotes[vote.vinMasternode.prevout] = nMasternodeOrphanExpireTime;\n+            mapMasternodeOrphanVotes[vote.GetMasternodeOutpoint()] = nMasternodeOrphanExpireTime;\n         }\n \n         return true;\n     }\n \n-    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Vote, txid=%s\\n\", vote.txHash.ToString());\n-\n-    if(!mnodeman.Has(vote.vinMasternode)) {\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Unknown masternode %s\\n\", vote.vinMasternode.prevout.ToStringShort());\n-        return false;\n-    }\n-\n-    int n = mnodeman.GetMasternodeRank(vote.vinMasternode, vote.nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n-\n-    if(n == -1) {\n-        //can be caused by past versions trying to vote with an invalid protocol\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Outdated masternode %s\\n\", vote.vinMasternode.prevout.ToStringShort());\n-        if(pnode) {\n-            mnodeman.AskForMN(pnode, vote.vinMasternode);\n+    LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Transaction Lock Vote, txid=%s\\n\", txHash.ToString());\n+\n+    std::map<COutPoint, std::set<uint256> >::iterator it1 = mapVotedOutpoints.find(vote.GetOutpoint());\n+    if(it1 != mapVotedOutpoints.end()) {\n+        BOOST_FOREACH(const uint256& hash, it1->second) {\n+            if(hash != txHash) {\n+                // same outpoint was already voted to be locked by another tx lock request,\n+                // find out if the same mn voted on this outpoint before\n+                std::map<uint256, CTxLockCandidate>::iterator it2 = mapTxLockCandidates.find(hash);\n+                if(it2->second.HasMasternodeVoted(vote.GetOutpoint(), vote.GetMasternodeOutpoint())) {\n+                    // yes, it did, refuse to accept a vote to include the same outpoint in another tx\n+                    // from the same masternode.\n+                    // TODO: apply pose ban score to this masternode?\n+                    // NOTE: if we decide to apply pose ban score here, this vote must be relayed further\n+                    // to let all other nodes know about this node's misbehaviour and let them apply\n+                    // pose ban score too.\n+                    LogPrintf(\"CInstantSend::ProcessTxLockVote -- masternode sent conflicting votes! %s\\n\", vote.GetMasternodeOutpoint().ToStringShort());\n+                    return false;\n+                }\n+            }\n         }\n-        return false;\n+        // we have votes by other masternodes only (so far), let's continue and see who will win\n+        it1->second.insert(txHash);\n+    } else {\n+        std::set<uint256> setHashes;\n+        setHashes.insert(txHash);\n+        mapVotedOutpoints.insert(std::make_pair(vote.GetOutpoint(), setHashes));\n     }\n-    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s, rank=%d\\n\", vote.vinMasternode.prevout.ToStringShort(), n);\n \n-    if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Masternode %s is not in the top %d (%d), vote hash=%s\\n\",\n-                vote.vinMasternode.prevout.ToStringShort(), INSTANTSEND_SIGNATURES_TOTAL, n, vote.GetHash().ToString());\n-        return false;\n-    }\n+    CTxLockCandidate& txLockCandidate = it->second;\n \n-    if(!vote.CheckSignature()) {\n-        LogPrintf(\"ProcessTxLockVote -- Signature invalid\\n\");\n-        // don't ban, it could just be a non-synced masternode\n-        if(pnode) {\n-            mnodeman.AskForMN(pnode, vote.vinMasternode);\n-        }\n-        return false;\n-    }\n-\n-    if(!mapTxLockCandidates.count(vote.txHash)) {\n+    if(!txLockCandidate.AddVote(vote)) {\n         // this should never happen\n         return false;\n     }\n \n-    //compile consessus vote\n-    mapTxLockCandidates[vote.txHash].AddVote(vote);\n+    int nSignatures = txLockCandidate.CountVotes();\n+    int nSignaturesMax = txLockCandidate.txLockRequest.GetMaxSignatures();\n+    LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Transaction Lock signatures count: %d/%d, vote hash=%s\\n\",\n+            nSignatures, nSignaturesMax, vote.GetHash().ToString());\n \n-    int nSignatures = mapTxLockCandidates[vote.txHash].CountVotes();\n-    LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock signatures count: %d, vote hash=%s\\n\", nSignatures, vote.GetHash().ToString());\n-\n-    if(nSignatures >= INSTANTSEND_SIGNATURES_REQUIRED) {\n-        LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock Is Complete! txid=%s\\n\", vote.txHash.ToString());\n-\n-        if(!FindConflictingLocks(mapLockRequestAccepted[vote.txHash])) { //?????\n-            if(mapLockRequestAccepted.count(vote.txHash)) {\n-                UpdateLockedTransaction(mapLockRequestAccepted[vote.txHash]);\n-                LockTransactionInputs(mapLockRequestAccepted[vote.txHash]);\n-            } else if(mapLockRequestRejected.count(vote.txHash)) {\n-                ResolveConflicts(mapLockRequestRejected[vote.txHash]); ///?????\n-            } else {\n-                LogPrint(\"instantsend\", \"ProcessTxLockVote -- Transaction Lock is missing! nSignatures=%d, vote hash=%s\\n\", nSignatures, vote.GetHash().ToString());\n-            }\n-        }\n-    }\n+    TryToFinalizeLockCandidate(txLockCandidate);\n \n-    CInv inv(MSG_TXLOCK_VOTE, vote.GetHash());\n-    RelayInv(inv);\n+    vote.Relay();\n \n     return true;\n }\n \n-void ProcessOrphanTxLockVotes()\n+void CInstantSend::ProcessOrphanTxLockVotes()\n {\n     LOCK2(cs_main, cs_instantsend);\n     std::map<uint256, CTxLockVote>::iterator it = mapTxLockVotesOrphan.begin();\n@@ -366,92 +368,192 @@ void ProcessOrphanTxLockVotes()\n     }\n }\n \n-void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification)\n+bool CInstantSend::IsEnoughOrphanVotesForTx(const CTxLockRequest& txLockRequest)\n+{\n+    // There could be a situation when we already have quite a lot of votes\n+    // but tx lock request still wasn't received. Let's scan through\n+    // orphan votes to check if this is the case.\n+    BOOST_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n+        if(!IsEnoughOrphanVotesForTxAndOutPoint(txLockRequest.GetHash(), txin.prevout)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CInstantSend::IsEnoughOrphanVotesForTxAndOutPoint(const uint256& txHash, const COutPoint& outpoint)\n+{\n+    // Scan orphan votes to check if this outpoint has enough orphan votes to be locked in some tx.\n+    LOCK2(cs_main, cs_instantsend);\n+    int nCountVotes = 0;\n+    std::map<uint256, CTxLockVote>::iterator it = mapTxLockVotesOrphan.begin();\n+    while(it != mapTxLockVotesOrphan.end()) {\n+        if(it->second.GetTxHash() == txHash && it->second.GetOutpoint() == outpoint) {\n+            nCountVotes++;\n+            if(nCountVotes >= COutPointLock::SIGNATURES_REQUIRED) {\n+                return true;\n+            }\n+        }\n+        ++it;\n+    }\n+    return false;\n+}\n+\n+void CInstantSend::TryToFinalizeLockCandidate(const CTxLockCandidate& txLockCandidate)\n+{\n+    LOCK2(cs_main, cs_instantsend);\n+\n+    uint256 txHash = txLockCandidate.txLockRequest.GetHash();\n+    if(txLockCandidate.IsAllOutPointsReady() && !IsLockedInstantSendTransaction(txHash)) {\n+        // we have enough votes now\n+        LogPrint(\"instantsend\", \"CInstantSend::TryToFinalizeLockCandidate -- Transaction Lock is ready to complete, txid=%s\\n\", txHash.ToString());\n+        if(ResolveConflicts(txLockCandidate, Params().GetConsensus().nInstantSendKeepLock)) {\n+            LockTransactionInputs(txLockCandidate);\n+            UpdateLockedTransaction(txLockCandidate);\n+        }\n+    }\n+}\n+\n+void CInstantSend::UpdateLockedTransaction(const CTxLockCandidate& txLockCandidate)\n {\n     LOCK(cs_instantsend);\n-    // there should be no conflicting locks\n-    if(FindConflictingLocks(tx)) return;\n-    uint256 txHash = tx.GetHash();\n-    // there must be a successfully verified lock request\n-    if(!mapLockRequestAccepted.count(txHash)) return;\n \n-    int nSignatures = GetTransactionLockSignatures(txHash);\n+    uint256 txHash = txLockCandidate.GetHash();\n+\n+    if(!IsLockedInstantSendTransaction(txHash)) return; // not a locked tx, do not update/notify\n \n #ifdef ENABLE_WALLET\n     if(pwalletMain && pwalletMain->UpdatedTransaction(txHash)) {\n         // bumping this to update UI\n         nCompleteTXLocks++;\n-        // a transaction lock must have enough signatures to trigger this notification\n-        if(nSignatures == INSTANTSEND_SIGNATURES_REQUIRED || (fForceNotification && nSignatures > INSTANTSEND_SIGNATURES_REQUIRED)) {\n-            // notify an external script once threshold is reached\n-            std::string strCmd = GetArg(\"-instantsendnotify\", \"\");\n-            if(!strCmd.empty()) {\n-                boost::replace_all(strCmd, \"%s\", txHash.GetHex());\n-                boost::thread t(runCommand, strCmd); // thread runs free\n-            }\n+        // notify an external script once threshold is reached\n+        std::string strCmd = GetArg(\"-instantsendnotify\", \"\");\n+        if(!strCmd.empty()) {\n+            boost::replace_all(strCmd, \"%s\", txHash.GetHex());\n+            boost::thread t(runCommand, strCmd); // thread runs free\n         }\n     }\n #endif\n \n-    if(nSignatures == INSTANTSEND_SIGNATURES_REQUIRED || (fForceNotification && nSignatures > INSTANTSEND_SIGNATURES_REQUIRED))\n-        GetMainSignals().NotifyTransactionLock(tx);\n-}\n+    GetMainSignals().NotifyTransactionLock(txLockCandidate.txLockRequest);\n \n-void LockTransactionInputs(const CTransaction& tx) {\n-    LOCK(cs_instantsend);\n-    if(!mapLockRequestAccepted.count(tx.GetHash())) return;\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if(!mapLockedInputs.count(txin.prevout))\n-            mapLockedInputs.insert(std::make_pair(txin.prevout, tx.GetHash()));\n+    LogPrint(\"instantsend\", \"CInstantSend::UpdateLockedTransaction -- done, txid=%s\\n\", txHash.ToString());\n }\n \n-bool FindConflictingLocks(const CTransaction& tx)\n+void CInstantSend::LockTransactionInputs(const CTxLockCandidate& txLockCandidate)\n {\n     LOCK(cs_instantsend);\n-    /*\n-        It's possible (very unlikely though) to get 2 conflicting transaction locks approved by the network.\n-        In that case, they will cancel each other out.\n \n-        Blocks could have been rejected during this time, which is OK. After they cancel out, the client will\n-        rescan the blocks and find they're acceptable and then take the chain with the most work.\n-    */\n-    uint256 txHash = tx.GetHash();\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-        if(mapLockedInputs.count(txin.prevout)) {\n-            if(mapLockedInputs[txin.prevout] != txHash) {\n-                LogPrintf(\"FindConflictingLocks -- found two complete conflicting Transaction Locks, removing both: txid=%s, txin=%s\", txHash.ToString(), mapLockedInputs[txin.prevout].ToString());\n+    uint256 txHash = txLockCandidate.GetHash();\n \n-                if(mapTxLockCandidates.count(txHash))\n-                    mapTxLockCandidates[txHash].nExpirationBlock = -1;\n+    if(!txLockCandidate.IsAllOutPointsReady()) return;\n \n-                if(mapTxLockCandidates.count(mapLockedInputs[txin.prevout]))\n-                    mapTxLockCandidates[mapLockedInputs[txin.prevout]].nExpirationBlock = -1;\n+    std::map<COutPoint, COutPointLock>::const_iterator it = txLockCandidate.mapOutPointLocks.begin();\n \n-                return true;\n-            }\n-        }\n+    while(it != txLockCandidate.mapOutPointLocks.end()) {\n+        mapLockedOutpoints.insert(std::make_pair(it->first, txHash));\n+        ++it;\n     }\n-\n-    return false;\n+    LogPrint(\"instantsend\", \"CInstantSend::LockTransactionInputs -- done, txid=%s\\n\", txHash.ToString());\n }\n \n-void ResolveConflicts(const CTransaction& tx)\n+bool CInstantSend::GetLockedOutPointTxHash(const COutPoint& outpoint, uint256& hashRet)\n {\n     LOCK(cs_instantsend);\n-    uint256 txHash = tx.GetHash();\n-    // resolve conflicts\n-    if (IsLockedInstandSendTransaction(txHash) && !FindConflictingLocks(tx)) { //?????\n-        LogPrintf(\"ResolveConflicts -- Found existing complete Transaction Lock, resolving...\\n\");\n+    std::map<COutPoint, uint256>::iterator it = mapLockedOutpoints.find(outpoint);\n+    if(it == mapLockedOutpoints.end()) return false;\n+    hashRet = it->second;\n+    return true;\n+}\n+\n+bool CInstantSend::ResolveConflicts(const CTxLockCandidate& txLockCandidate, int nMaxBlocks)\n+{\n+    if(nMaxBlocks < 1) return false;\n+\n+    LOCK2(cs_main, cs_instantsend);\n \n-        //reprocess the last nInstantSendReprocessBlocks blocks\n-        ReprocessBlocks(Params().GetConsensus().nInstantSendReprocessBlocks);\n-        if(!mapLockRequestAccepted.count(txHash))\n-            mapLockRequestAccepted.insert(std::make_pair(txHash, tx)); //?????\n+    uint256 txHash = txLockCandidate.GetHash();\n+\n+    // make sure the lock is ready\n+    if(!txLockCandidate.IsAllOutPointsReady()) return true; // not an error\n+\n+    LOCK(mempool.cs); // protect mempool.mapNextTx, mempool.mapTx\n+\n+    bool fMempoolConflict = false;\n+\n+    BOOST_FOREACH(const CTxIn& txin, txLockCandidate.txLockRequest.vin) {\n+        uint256 hashConflicting;\n+        if(GetLockedOutPointTxHash(txin.prevout, hashConflicting) && txHash != hashConflicting) {\n+            // conflicting with complete lock, ignore current one\n+            LogPrintf(\"CInstantSend::ResolveConflicts -- WARNING: Found conflicting completed Transaction Lock, skipping current one, txid=%s, conflicting txid=%s\\n\",\n+                    txHash.ToString(), hashConflicting.ToString());\n+            return false; // can't/shouldn't do anything\n+        } else if (mempool.mapNextTx.count(txin.prevout)) {\n+            // check if it's in mempool\n+            hashConflicting = mempool.mapNextTx[txin.prevout].ptx->GetHash();\n+            if(txHash == hashConflicting) continue; // matches current, not a conflict, skip to next txin\n+            // conflicting with tx in mempool\n+            fMempoolConflict = true;\n+            if(HasTxLockRequest(hashConflicting)) {\n+                // There can be only one completed lock, the other lock request should never complete\n+                LogPrintf(\"CInstantSend::ResolveConflicts -- WARNING: Found conflicting Transaction Lock Request, replacing by completed Transaction Lock, txid=%s, conflicting txid=%s\\n\",\n+                        txHash.ToString(), hashConflicting.ToString());\n+            } else {\n+                // If this lock is completed, we don't really care about normal conflicting txes.\n+                LogPrintf(\"CInstantSend::ResolveConflicts -- WARNING: Found conflicting transaction, replacing by completed Transaction Lock, txid=%s, conflicting txid=%s\\n\",\n+                        txHash.ToString(), hashConflicting.ToString());\n+            }\n+        }\n+    } // FOREACH\n+    if(fMempoolConflict) {\n+        std::list<CTransaction> removed;\n+        // remove every tx conflicting with current Transaction Lock Request\n+        mempool.removeConflicts(txLockCandidate.txLockRequest, removed);\n+        // and try to accept it in mempool again\n+        CValidationState state;\n+        bool fMissingInputs = false;\n+        if(!AcceptToMemoryPool(mempool, state, txLockCandidate.txLockRequest, true, &fMissingInputs)) {\n+            LogPrintf(\"CInstantSend::ResolveConflicts -- ERROR: Failed to accept completed Transaction Lock to mempool, txid=%s\\n\", txHash.ToString());\n+            return false;\n+        }\n+        LogPrintf(\"CInstantSend::ResolveConflicts -- Accepted completed Transaction Lock, txid=%s\\n\", txHash.ToString());\n+        return true;\n+    }\n+    // No conflicts were found so far, check to see if it was already included in block\n+    CTransaction txTmp;\n+    uint256 hashBlock;\n+    if(GetTransaction(txHash, txTmp, Params().GetConsensus(), hashBlock, true) && hashBlock != uint256()) {\n+        LogPrint(\"instantsend\", \"CInstantSend::ResolveConflicts -- Done, %s is included in block %s\\n\", txHash.ToString(), hashBlock.ToString());\n+        return true;\n+    }\n+    // Not in block yet, make sure all its inputs are still unspent\n+    BOOST_FOREACH(const CTxIn& txin, txLockCandidate.txLockRequest.vin) {\n+        CCoins coins;\n+        if(!pcoinsTip->GetCoins(txin.prevout.hash, coins) ||\n+           (unsigned int)txin.prevout.n>=coins.vout.size() ||\n+           coins.vout[txin.prevout.n].IsNull()) {\n+            // Not in UTXO anymore? A conflicting tx was mined while we were waiting for votes.\n+            // Reprocess tip to make sure tx for this lock is included.\n+            LogPrintf(\"CTxLockRequest::ResolveConflicts -- Failed to find UTXO %s - disconnecting tip...\\n\", txin.prevout.ToStringShort());\n+            DisconnectBlocks(1);\n+            // Recursively check at \"new\" old height. Conflicting tx should be rejected by AcceptToMemoryPool.\n+            ResolveConflicts(txLockCandidate, nMaxBlocks - 1);\n+            LogPrintf(\"CTxLockRequest::ResolveConflicts -- Failed to find UTXO %s - activating best chain...\\n\", txin.prevout.ToStringShort());\n+            // Activate best chain, block which includes conflicting tx should be rejected by ConnectBlock.\n+            CValidationState state;\n+            if(!ActivateBestChain(state, Params()) || !state.IsValid()) {\n+                LogPrintf(\"CTxLockRequest::ResolveConflicts -- ActivateBestChain failed, txid=%s\\n\", txin.prevout.ToStringShort());\n+                return false;\n+            }\n+            LogPrintf(\"CTxLockRequest::ResolveConflicts -- Failed to find UTXO %s - fixed!\\n\", txin.prevout.ToStringShort());\n+        }\n     }\n+    LogPrint(\"instantsend\", \"CInstantSend::ResolveConflicts -- Done, txid=%s\\n\", txHash.ToString());\n+\n+    return true;\n }\n \n-int64_t GetAverageMasternodeOrphanVoteTime()\n+int64_t CInstantSend::GetAverageMasternodeOrphanVoteTime()\n {\n     LOCK(cs_instantsend);\n     // NOTE: should never actually call this function when mapMasternodeOrphanVotes is empty\n@@ -468,118 +570,418 @@ int64_t GetAverageMasternodeOrphanVoteTime()\n     return total / mapMasternodeOrphanVotes.size();\n }\n \n-void CleanTxLockCandidates()\n+void CInstantSend::CheckAndRemove()\n {\n-    int nHeight;\n-    {\n-        LOCK(cs_main);\n-        nHeight = chainActive.Height();\n-    }\n+    if(!pCurrentBlockIndex) return;\n \n     LOCK(cs_instantsend);\n \n-    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.begin();\n-\n-    while(it != mapTxLockCandidates.end()) {\n-        CTxLockCandidate &txLockCandidate = it->second;\n-        if(nHeight > txLockCandidate.nExpirationBlock) {\n-            LogPrintf(\"CleanTxLockCandidates -- Removing expired Transaction Lock Candidate: txid=%s\\n\", txLockCandidate.txHash.ToString());\n-\n-            if(mapLockRequestAccepted.count(txLockCandidate.txHash)){\n-                CTransaction& tx = mapLockRequestAccepted[txLockCandidate.txHash];\n-\n-                BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                    mapLockedInputs.erase(txin.prevout);\n-\n-                mapLockRequestAccepted.erase(txLockCandidate.txHash);\n-                mapLockRequestRejected.erase(txLockCandidate.txHash);\n-\n-                BOOST_FOREACH(const CTxLockVote& vote, txLockCandidate.vecTxLockVotes)\n-                    if(mapTxLockVotes.count(vote.GetHash()))\n-                        mapTxLockVotes.erase(vote.GetHash());\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.begin();\n+\n+    // remove expired candidates\n+    while(itLockCandidate != mapTxLockCandidates.end()) {\n+        CTxLockCandidate &txLockCandidate = itLockCandidate->second;\n+        uint256 txHash = txLockCandidate.GetHash();\n+        if(txLockCandidate.IsExpired(pCurrentBlockIndex->nHeight)) {\n+            LogPrintf(\"CInstantSend::CheckAndRemove -- Removing expired Transaction Lock Candidate: txid=%s\\n\", txHash.ToString());\n+            std::map<COutPoint, COutPointLock>::iterator itOutpointLock = txLockCandidate.mapOutPointLocks.begin();\n+            while(itOutpointLock != txLockCandidate.mapOutPointLocks.end()) {\n+                mapLockedOutpoints.erase(itOutpointLock->first);\n+                mapVotedOutpoints.erase(itOutpointLock->first);\n+                ++itOutpointLock;\n             }\n+            mapLockRequestAccepted.erase(txHash);\n+            mapLockRequestRejected.erase(txHash);\n+            mapTxLockCandidates.erase(itLockCandidate++);\n+        } else {\n+            ++itLockCandidate;\n+        }\n+    }\n \n-            mapTxLockCandidates.erase(it++);\n+    // remove expired votes\n+    std::map<uint256, CTxLockVote>::iterator itVote = mapTxLockVotes.begin();\n+    while(itVote != mapTxLockVotes.end()) {\n+        if(itVote->second.IsExpired(pCurrentBlockIndex->nHeight)) {\n+            LogPrint(\"instantsend\", \"CInstantSend::CheckAndRemove -- Removing expired vote: txid=%s  masternode=%s\\n\",\n+                    itVote->second.GetTxHash().ToString(), itVote->second.GetMasternodeOutpoint().ToStringShort());\n+            mapTxLockVotes.erase(itVote++);\n         } else {\n-            ++it;\n+            ++itVote;\n         }\n     }\n \n-    // clean expired orphan votes\n-    std::map<uint256, CTxLockVote>::iterator it1 = mapTxLockVotesOrphan.begin();\n-    while(it1 != mapTxLockVotesOrphan.end()) {\n-        if(it1->second.nOrphanExpireTime < GetTime()) {\n-            LogPrint(\"instantsend\", \"CleanTxLockCandidates -- Removing expired orphan vote: txid=%s  masternode=%s\\n\", it1->second.txHash.ToString(), it1->second.vinMasternode.prevout.ToStringShort());\n-            mapTxLockVotesOrphan.erase(it1++);\n+    // remove expired orphan votes\n+    std::map<uint256, CTxLockVote>::iterator itOrphanVote = mapTxLockVotesOrphan.begin();\n+    while(itOrphanVote != mapTxLockVotesOrphan.end()) {\n+        if(GetTime() - itOrphanVote->second.GetTimeCreated() > ORPHAN_VOTE_SECONDS) {\n+            LogPrint(\"instantsend\", \"CInstantSend::CheckAndRemove -- Removing expired orphan vote: txid=%s  masternode=%s\\n\",\n+                    itOrphanVote->second.GetTxHash().ToString(), itOrphanVote->second.GetMasternodeOutpoint().ToStringShort());\n+            mapTxLockVotesOrphan.erase(itOrphanVote++);\n         } else {\n-            ++it1;\n+            ++itOrphanVote;\n         }\n     }\n \n-    // clean expired masternode orphan vote times\n-    std::map<COutPoint, int64_t>::iterator it2 = mapMasternodeOrphanVotes.begin();\n-    while(it2 != mapMasternodeOrphanVotes.end()) {\n-        if(it2->second < GetTime()) {\n-            LogPrint(\"instantsend\", \"CleanTxLockCandidates -- Removing expired orphan masternode vote time: masternode=%s\\n\", it2->first.ToStringShort());\n-            mapMasternodeOrphanVotes.erase(it2++);\n+    // remove expired masternode orphan votes (DOS protection)\n+    std::map<COutPoint, int64_t>::iterator itMasternodeOrphan = mapMasternodeOrphanVotes.begin();\n+    while(itMasternodeOrphan != mapMasternodeOrphanVotes.end()) {\n+        if(itMasternodeOrphan->second < GetTime()) {\n+            LogPrint(\"instantsend\", \"CInstantSend::CheckAndRemove -- Removing expired orphan masternode vote: masternode=%s\\n\",\n+                    itMasternodeOrphan->first.ToStringShort());\n+            mapMasternodeOrphanVotes.erase(itMasternodeOrphan++);\n         } else {\n-            ++it2;\n+            ++itMasternodeOrphan;\n         }\n     }\n }\n \n-bool IsLockedInstandSendTransaction(const uint256 &txHash)\n+bool CInstantSend::AlreadyHave(const uint256& hash)\n+{\n+    LOCK(cs_instantsend);\n+    return mapLockRequestAccepted.count(hash) ||\n+            mapLockRequestRejected.count(hash) ||\n+            mapTxLockVotes.count(hash);\n+}\n+\n+void CInstantSend::AcceptLockRequest(const CTxLockRequest& txLockRequest)\n {\n     LOCK(cs_instantsend);\n-    // there must be a successfully verified lock request...\n-    if (!mapLockRequestAccepted.count(txHash)) return false;\n-    // ...and corresponding lock must have enough signatures\n-    return GetTransactionLockSignatures(txHash) >= INSTANTSEND_SIGNATURES_REQUIRED;\n+    mapLockRequestAccepted.insert(make_pair(txLockRequest.GetHash(), txLockRequest));\n }\n \n-int GetTransactionLockSignatures(const uint256 &txHash)\n+void CInstantSend::RejectLockRequest(const CTxLockRequest& txLockRequest)\n+{\n+    LOCK(cs_instantsend);\n+    mapLockRequestRejected.insert(make_pair(txLockRequest.GetHash(), txLockRequest));\n+}\n+\n+bool CInstantSend::HasTxLockRequest(const uint256& txHash)\n+{\n+    CTxLockRequest txLockRequestTmp;\n+    return GetTxLockRequest(txHash, txLockRequestTmp);\n+}\n+\n+bool CInstantSend::GetTxLockRequest(const uint256& txHash, CTxLockRequest& txLockRequestRet)\n+{\n+    LOCK(cs_instantsend);\n+\n+    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n+    if(it == mapTxLockCandidates.end()) return false;\n+    txLockRequestRet = it->second.txLockRequest;\n+\n+    return true;\n+}\n+\n+bool CInstantSend::GetTxLockVote(const uint256& hash, CTxLockVote& txLockVoteRet)\n+{\n+    LOCK(cs_instantsend);\n+\n+    std::map<uint256, CTxLockVote>::iterator it = mapTxLockVotes.find(hash);\n+    if(it == mapTxLockVotes.end()) return false;\n+    txLockVoteRet = it->second;\n+\n+    return true;\n+}\n+\n+bool CInstantSend::IsInstantSendReadyToLock(const uint256& txHash)\n+{\n+    if(!fEnableInstantSend || fLargeWorkForkFound || fLargeWorkInvalidChainFound ||\n+        !sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return false;\n+\n+    LOCK(cs_instantsend);\n+    // There must be a successfully verified lock request\n+    // and all outputs must be locked (i.e. have enough signatures)\n+    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n+    return it != mapTxLockCandidates.end() && it->second.IsAllOutPointsReady();\n+}\n+\n+bool CInstantSend::IsLockedInstantSendTransaction(const uint256& txHash)\n+{\n+    if(!fEnableInstantSend || fLargeWorkForkFound || fLargeWorkInvalidChainFound ||\n+        !sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return false;\n+\n+    LOCK(cs_instantsend);\n+\n+    // there must be a lock candidate\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    if(itLockCandidate == mapTxLockCandidates.end()) return false;\n+\n+    // which should have outpoints\n+    if(itLockCandidate->second.mapOutPointLocks.empty()) return false;\n+\n+    // and all of these outputs must be included in mapLockedOutpoints with correct hash\n+    std::map<COutPoint, COutPointLock>::iterator itOutpointLock = itLockCandidate->second.mapOutPointLocks.begin();\n+    while(itOutpointLock != itLockCandidate->second.mapOutPointLocks.end()) {\n+        uint256 hashLocked;\n+        if(!GetLockedOutPointTxHash(itOutpointLock->first, hashLocked) || hashLocked != txHash) return false;\n+        ++itOutpointLock;\n+    }\n+\n+    return true;\n+}\n+\n+int CInstantSend::GetTransactionLockSignatures(const uint256& txHash)\n {\n     if(!fEnableInstantSend) return -1;\n     if(fLargeWorkForkFound || fLargeWorkInvalidChainFound) return -2;\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return -3;\n \n     LOCK(cs_instantsend);\n-    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n-    if(it != mapTxLockCandidates.end()) return it->second.CountVotes();\n+\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    if(itLockCandidate != mapTxLockCandidates.end()) {\n+        return itLockCandidate->second.CountVotes();\n+    }\n \n     return -1;\n }\n \n-bool IsTransactionLockTimedOut(const uint256 &txHash)\n+bool CInstantSend::IsTxLockRequestTimedOut(const uint256& txHash)\n {\n-    if(!fEnableInstantSend) return 0;\n+    if(!fEnableInstantSend) return false;\n \n     LOCK(cs_instantsend);\n-    std::map<uint256, CTxLockCandidate>::iterator i = mapTxLockCandidates.find(txHash);\n-    if (i != mapTxLockCandidates.end()) return GetTime() > (*i).second.nTimeout;\n+\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    if (itLockCandidate != mapTxLockCandidates.end()) {\n+        return !itLockCandidate->second.IsAllOutPointsReady() &&\n+                itLockCandidate->second.txLockRequest.IsTimedOut();\n+    }\n \n     return false;\n }\n \n-uint256 CTxLockVote::GetHash() const\n+void CInstantSend::Relay(const uint256& txHash)\n+{\n+    LOCK(cs_instantsend);\n+\n+    std::map<uint256, CTxLockCandidate>::const_iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    if (itLockCandidate != mapTxLockCandidates.end()) {\n+        itLockCandidate->second.Relay();\n+    }\n+}\n+\n+void CInstantSend::UpdatedBlockTip(const CBlockIndex *pindex)\n+{\n+    pCurrentBlockIndex = pindex;\n+}\n+\n+void CInstantSend::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n+{\n+    // Update lock candidates and votes if corresponding tx confirmed\n+    // or went from confirmed to 0-confirmed or conflicted.\n+\n+    if (tx.IsCoinBase()) return;\n+\n+    LOCK2(cs_main, cs_instantsend);\n+\n+    uint256 txHash = tx.GetHash();\n+\n+    // When tx is 0-confirmed or conflicted, pblock is NULL and nHeightNew should be set to -1\n+    CBlockIndex* pblockindex = pblock ? mapBlockIndex[pblock->GetHash()] : NULL;\n+    int nHeightNew = pblockindex ? pblockindex->nHeight : -1;\n+\n+    LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d\\n\", txHash.ToString(), nHeightNew);\n+\n+    // Check lock candidates\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    if(itLockCandidate != mapTxLockCandidates.end()) {\n+        LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d lock candidate updated\\n\",\n+                txHash.ToString(), nHeightNew);\n+        itLockCandidate->second.SetConfirmedHeight(nHeightNew);\n+    }\n+\n+    // Check lock votes\n+    std::map<uint256, CTxLockVote>::iterator itVote = mapTxLockVotes.find(txHash);\n+    if(itVote != mapTxLockVotes.end()) {\n+        LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d vote %s updated\\n\",\n+                txHash.ToString(), nHeightNew, itVote->second.GetHash().ToString());\n+        itVote->second.SetConfirmedHeight(nHeightNew);\n+    }\n+ }\n+\n+//\n+// CTxLockRequest\n+//\n+\n+bool CTxLockRequest::IsValid(bool fRequireUnspent) const\n+{\n+    if(vout.size() < 1) return false;\n+\n+    if(vin.size() > MAX_INPUTS) {\n+        LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Too many inputs: tx=%s\", ToString());\n+        return false;\n+    }\n+\n+    LOCK(cs_main);\n+    if(!CheckFinalTx(*this)) {\n+        LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Transaction is not final: tx=%s\", ToString());\n+        return false;\n+    }\n+\n+    int64_t nValueIn = 0;\n+    int64_t nValueOut = 0;\n+\n+    BOOST_FOREACH(const CTxOut& txout, vout) {\n+        // InstantSend supports normal scripts and unspendable (i.e. data) scripts.\n+        // TODO: Look into other script types that are normal and can be included\n+        if(!txout.scriptPubKey.IsNormalPaymentScript() && !txout.scriptPubKey.IsUnspendable()) {\n+            LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Invalid Script %s\", ToString());\n+            return false;\n+        }\n+        nValueOut += txout.nValue;\n+    }\n+\n+    BOOST_FOREACH(const CTxIn& txin, vin) {\n+\n+        CCoins coins;\n+        int nPrevoutHeight = 0;\n+        if(!pcoinsTip->GetCoins(txin.prevout.hash, coins) ||\n+           (unsigned int)txin.prevout.n>=coins.vout.size() ||\n+           coins.vout[txin.prevout.n].IsNull()) {\n+            LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Failed to find UTXO %s\\n\", txin.prevout.ToStringShort());\n+            // Normally above sould be enough, but in case we are reprocessing this because of\n+            // a lot of legit orphan votes we should also check already spent outpoints.\n+            if(fRequireUnspent) return false;\n+            CTransaction txOutpointCreated;\n+            uint256 nHashOutpointConfirmed;\n+            if(!GetTransaction(txin.prevout.hash, txOutpointCreated, Params().GetConsensus(), nHashOutpointConfirmed, true) || nHashOutpointConfirmed == uint256()) {\n+                LogPrint(\"instantsend\", \"txLockRequest::IsValid -- Failed to find outpoint %s\\n\", txin.prevout.ToStringShort());\n+                return false;\n+            }\n+            LOCK(cs_main);\n+            BlockMap::iterator mi = mapBlockIndex.find(nHashOutpointConfirmed);\n+            if(mi == mapBlockIndex.end()) {\n+                // not on this chain?\n+                LogPrint(\"instantsend\", \"txLockRequest::IsValid -- Failed to find block %s for outpoint %s\\n\", nHashOutpointConfirmed.ToString(), txin.prevout.ToStringShort());\n+                return false;\n+            }\n+            nPrevoutHeight = mi->second ? mi->second->nHeight : 0;\n+        }\n+\n+        int nTxAge = chainActive.Height() - (nPrevoutHeight ? nPrevoutHeight : coins.nHeight) + 1;\n+        // 1 less than the \"send IX\" gui requires, in case of a block propagating the network at the time\n+        int nConfirmationsRequired = INSTANTSEND_CONFIRMATIONS_REQUIRED - 1;\n+\n+        if(nTxAge < nConfirmationsRequired) {\n+            LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- outpoint %s too new: nTxAge=%d, nConfirmationsRequired=%d, txid=%s\\n\",\n+                    txin.prevout.ToStringShort(), nTxAge, nConfirmationsRequired, GetHash().ToString());\n+            return false;\n+        }\n+\n+        nValueIn += coins.vout[txin.prevout.n].nValue;\n+    }\n+\n+    if(nValueOut > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n+        LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Transaction value too high: nValueOut=%d, tx=%s\", nValueOut, ToString());\n+        return false;\n+    }\n+\n+    if(nValueIn - nValueOut < GetMinFee()) {\n+        LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- did not include enough fees in transaction: fees=%d, tx=%s\", nValueOut - nValueIn, ToString());\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+CAmount CTxLockRequest::GetMinFee() const\n+{\n+    CAmount nMinFee = MIN_FEE;\n+    return std::max(nMinFee, CAmount(vin.size() * nMinFee));\n+}\n+\n+int CTxLockRequest::GetMaxSignatures() const\n+{\n+    return vin.size() * COutPointLock::SIGNATURES_TOTAL;\n+}\n+\n+bool CTxLockRequest::IsTimedOut() const\n+{\n+    return GetTime() - nTimeCreated > TIMEOUT_SECONDS;\n+}\n+\n+//\n+// CTxLockVote\n+//\n+\n+bool CTxLockVote::IsValid(CNode* pnode) const\n {\n-    return ArithToUint256(UintToArith256(vinMasternode.prevout.hash) + vinMasternode.prevout.n + UintToArith256(txHash));\n+    if(!mnodeman.Has(CTxIn(outpointMasternode))) {\n+        LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Unknown masternode %s\\n\", outpointMasternode.ToStringShort());\n+        mnodeman.AskForMN(pnode, CTxIn(outpointMasternode));\n+        return false;\n+    }\n+\n+    int nPrevoutHeight = GetUTXOHeight(outpoint);\n+    if(nPrevoutHeight == -1) {\n+        LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Failed to find UTXO %s\\n\", outpoint.ToStringShort());\n+        // Validating utxo set is not enough, votes can arrive after outpoint was already spent,\n+        // if lock request was mined. We should process them too to count them later if they are legit.\n+        CTransaction txOutpointCreated;\n+        uint256 nHashOutpointConfirmed;\n+        if(!GetTransaction(outpoint.hash, txOutpointCreated, Params().GetConsensus(), nHashOutpointConfirmed, true) || nHashOutpointConfirmed == uint256()) {\n+            LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Failed to find outpoint %s\\n\", outpoint.ToStringShort());\n+            return false;\n+        }\n+        LOCK(cs_main);\n+        BlockMap::iterator mi = mapBlockIndex.find(nHashOutpointConfirmed);\n+        if(mi == mapBlockIndex.end() || !mi->second) {\n+            // not on this chain?\n+            LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Failed to find block %s for outpoint %s\\n\", nHashOutpointConfirmed.ToString(), outpoint.ToStringShort());\n+            return false;\n+        }\n+        nPrevoutHeight = mi->second->nHeight;\n+    }\n+\n+    int nLockInputHeight = nPrevoutHeight + 4;\n+\n+    int n = mnodeman.GetMasternodeRank(CTxIn(outpointMasternode), nLockInputHeight, MIN_INSTANTSEND_PROTO_VERSION);\n+\n+    if(n == -1) {\n+        //can be caused by past versions trying to vote with an invalid protocol\n+        LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Outdated masternode %s\\n\", outpointMasternode.ToStringShort());\n+        return false;\n+    }\n+    LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Masternode %s, rank=%d\\n\", outpointMasternode.ToStringShort(), n);\n+\n+    int nSignaturesTotal = COutPointLock::SIGNATURES_TOTAL;\n+    if(n > nSignaturesTotal) {\n+        LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Masternode %s is not in the top %d (%d), vote hash=%s\\n\",\n+                outpointMasternode.ToStringShort(), nSignaturesTotal, n, GetHash().ToString());\n+        return false;\n+    }\n+\n+    if(!CheckSignature()) {\n+        LogPrintf(\"CTxLockVote::IsValid -- Signature invalid\\n\");\n+        return false;\n+    }\n+\n+    return true;\n }\n \n+uint256 CTxLockVote::GetHash() const\n+{\n+    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    ss << txHash;\n+    ss << outpoint;\n+    ss << outpointMasternode;\n+    return ss.GetHash();\n+}\n \n bool CTxLockVote::CheckSignature() const\n {\n     std::string strError;\n-    std::string strMessage = txHash.ToString().c_str() + boost::lexical_cast<std::string>(nBlockHeight);\n+    std::string strMessage = txHash.ToString() + outpoint.ToStringShort();\n \n-    masternode_info_t infoMn = mnodeman.GetMasternodeInfo(vinMasternode);\n+    masternode_info_t infoMn = mnodeman.GetMasternodeInfo(CTxIn(outpointMasternode));\n \n     if(!infoMn.fInfoValid) {\n-        LogPrintf(\"CTxLockVote::CheckSignature -- Unknown Masternode: txin=%s\\n\", vinMasternode.ToString());\n+        LogPrintf(\"CTxLockVote::CheckSignature -- Unknown Masternode: masternode=%s\\n\", outpointMasternode.ToString());\n         return false;\n     }\n \n-    if(!darkSendSigner.VerifyMessage(infoMn.pubKeyMasternode, vchMasterNodeSignature, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(infoMn.pubKeyMasternode, vchMasternodeSignature, strMessage, strError)) {\n         LogPrintf(\"CTxLockVote::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }\n@@ -590,67 +992,118 @@ bool CTxLockVote::CheckSignature() const\n bool CTxLockVote::Sign()\n {\n     std::string strError;\n+    std::string strMessage = txHash.ToString() + outpoint.ToStringShort();\n \n-    std::string strMessage = txHash.ToString().c_str() + boost::lexical_cast<std::string>(nBlockHeight);\n-\n-    if(!darkSendSigner.SignMessage(strMessage, vchMasterNodeSignature, activeMasternode.keyMasternode)) {\n+    if(!darkSendSigner.SignMessage(strMessage, vchMasternodeSignature, activeMasternode.keyMasternode)) {\n         LogPrintf(\"CTxLockVote::Sign -- SignMessage() failed\\n\");\n         return false;\n     }\n \n-    if(!darkSendSigner.VerifyMessage(activeMasternode.pubKeyMasternode, vchMasterNodeSignature, strMessage, strError)) {\n+    if(!darkSendSigner.VerifyMessage(activeMasternode.pubKeyMasternode, vchMasternodeSignature, strMessage, strError)) {\n         LogPrintf(\"CTxLockVote::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n         return false;\n     }\n \n     return true;\n }\n \n+void CTxLockVote::Relay() const\n+{\n+    CInv inv(MSG_TXLOCK_VOTE, GetHash());\n+    RelayInv(inv);\n+}\n \n-bool CTxLockCandidate::IsAllVotesValid()\n+bool CTxLockVote::IsExpired(int nHeight) const\n {\n+    // Locks and votes expire nInstantSendKeepLock blocks after the block corresponding tx was included into.\n+    return (nConfirmedHeight != -1) && (nHeight - nConfirmedHeight > Params().GetConsensus().nInstantSendKeepLock);\n+}\n \n-    BOOST_FOREACH(const CTxLockVote& vote, vecTxLockVotes)\n-    {\n-        int n = mnodeman.GetMasternodeRank(vote.vinMasternode, vote.nBlockHeight, MIN_INSTANTSEND_PROTO_VERSION);\n+//\n+// COutPointLock\n+//\n \n-        if(n == -1) {\n-            LogPrintf(\"CTxLockCandidate::IsAllVotesValid -- Unknown Masternode, txin=%s\\n\", vote.vinMasternode.ToString());\n-            return false;\n-        }\n+bool COutPointLock::AddVote(const CTxLockVote& vote)\n+{\n+    if(mapMasternodeVotes.count(vote.GetMasternodeOutpoint()))\n+        return false;\n+    mapMasternodeVotes.insert(std::make_pair(vote.GetMasternodeOutpoint(), vote));\n+    return true;\n+}\n \n-        if(n > INSTANTSEND_SIGNATURES_TOTAL) {\n-            LogPrintf(\"CTxLockCandidate::IsAllVotesValid -- Masternode not in the top %s\\n\", INSTANTSEND_SIGNATURES_TOTAL);\n-            return false;\n-        }\n+bool COutPointLock::HasMasternodeVoted(const COutPoint& outpointMasternodeIn)\n+{\n+    return mapMasternodeVotes.count(outpointMasternodeIn);\n+}\n \n-        if(!vote.CheckSignature()) {\n-            LogPrintf(\"CTxLockCandidate::IsAllVotesValid -- Signature not valid\\n\");\n-            return false;\n-        }\n+void COutPointLock::Relay() const\n+{\n+    std::map<COutPoint, CTxLockVote>::const_iterator itVote = mapMasternodeVotes.begin();\n+    while(itVote != mapMasternodeVotes.end()) {\n+        itVote->second.Relay();\n+        ++itVote;\n     }\n+}\n \n-    return true;\n+//\n+// CTxLockCandidate\n+//\n+\n+void CTxLockCandidate::AddOutPointLock(const COutPoint& outpoint)\n+{\n+    mapOutPointLocks.insert(make_pair(outpoint, COutPointLock(outpoint)));\n+}\n+\n+\n+bool CTxLockCandidate::AddVote(const CTxLockVote& vote)\n+{\n+    std::map<COutPoint, COutPointLock>::iterator it = mapOutPointLocks.find(vote.GetOutpoint());\n+    if(it == mapOutPointLocks.end()) return false;\n+    return it->second.AddVote(vote);\n }\n \n-void CTxLockCandidate::AddVote(const CTxLockVote& vote)\n+bool CTxLockCandidate::IsAllOutPointsReady() const\n {\n-    vecTxLockVotes.push_back(vote);\n+    if(mapOutPointLocks.empty()) return false;\n+\n+    std::map<COutPoint, COutPointLock>::const_iterator it = mapOutPointLocks.begin();\n+    while(it != mapOutPointLocks.end()) {\n+        if(!it->second.IsReady()) return false;\n+        ++it;\n+    }\n+    return true;\n }\n \n-int CTxLockCandidate::CountVotes()\n+bool CTxLockCandidate::HasMasternodeVoted(const COutPoint& outpointIn, const COutPoint& outpointMasternodeIn)\n {\n-    /*\n-        Only count signatures where the BlockHeight matches the transaction's blockheight.\n-        The votes have no proof it's the correct blockheight\n-    */\n+    std::map<COutPoint, COutPointLock>::iterator it = mapOutPointLocks.find(outpointIn);\n+    return it !=mapOutPointLocks.end() && it->second.HasMasternodeVoted(outpointMasternodeIn);\n+}\n \n-    if(nBlockHeight == 0) return -1;\n+int CTxLockCandidate::CountVotes() const\n+{\n+    // Note: do NOT use vote count to figure out if tx is locked, use IsAllOutPointsReady() instead\n+    int nCountVotes = 0;\n+    std::map<COutPoint, COutPointLock>::const_iterator it = mapOutPointLocks.begin();\n+    while(it != mapOutPointLocks.end()) {\n+        nCountVotes += it->second.CountVotes();\n+        ++it;\n+    }\n+    return nCountVotes;\n+}\n \n-    int nCount = 0;\n-    BOOST_FOREACH(const CTxLockVote& vote, vecTxLockVotes)\n-        if(vote.nBlockHeight == nBlockHeight)\n-            nCount++;\n+bool CTxLockCandidate::IsExpired(int nHeight) const\n+{\n+    // Locks and votes expire nInstantSendKeepLock blocks after the block corresponding tx was included into.\n+    return (nConfirmedHeight != -1) && (nHeight - nConfirmedHeight > Params().GetConsensus().nInstantSendKeepLock);\n+}\n \n-    return nCount;\n+void CTxLockCandidate::Relay() const\n+{\n+    RelayTransaction(txLockRequest);\n+    std::map<COutPoint, COutPointLock>::const_iterator itOutpointLock = mapOutPointLocks.begin();\n+    while(itOutpointLock != mapOutPointLocks.end()) {\n+        itOutpointLock->second.Relay();\n+        ++itOutpointLock;\n+    }\n }"
      },
      {
        "sha": "306b4a50a275799e5272f4c33e018479c4aef4c3",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 176,
        "deletions": 53,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -7,9 +7,13 @@\n #include \"net.h\"\n #include \"primitives/transaction.h\"\n \n-class CTransaction;\n class CTxLockVote;\n+class COutPointLock;\n+class CTxLockRequest;\n class CTxLockCandidate;\n+class CInstantSend;\n+\n+extern CInstantSend instantsend;\n \n /*\n     At 15 signatures, 1/2 of the masternode network can be owned by\n@@ -20,106 +24,225 @@ class CTxLockCandidate;\n     ### getting 5 of 10 signatures w/ 1000 nodes of 2900\n     (1000/2900.0)**5 = 0.004875397277841433\n */\n-static const int INSTANTSEND_SIGNATURES_REQUIRED    = 6;\n-static const int INSTANTSEND_SIGNATURES_TOTAL       = 10;\n+static const int INSTANTSEND_CONFIRMATIONS_REQUIRED = 6;\n static const int DEFAULT_INSTANTSEND_DEPTH          = 5;\n \n-static const int MIN_INSTANTSEND_PROTO_VERSION      = 70204;\n-static const CAmount INSTANTSEND_MIN_FEE            = 0.001 * COIN;\n+static const int MIN_INSTANTSEND_PROTO_VERSION      = 70205;\n \n extern bool fEnableInstantSend;\n extern int nInstantSendDepth;\n extern int nCompleteTXLocks;\n \n-extern std::map<uint256, CTransaction> mapLockRequestAccepted;\n-extern std::map<uint256, CTransaction> mapLockRequestRejected;\n-extern std::map<uint256, CTxLockVote> mapTxLockVotes;\n-extern std::map<COutPoint, uint256> mapLockedInputs;\n+class CInstantSend\n+{\n+private:\n+    static const int ORPHAN_VOTE_SECONDS            = 60;\n \n+    // Keep track of current block index\n+    const CBlockIndex *pCurrentBlockIndex;\n \n-void ProcessMessageInstantSend(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n+    // maps for AlreadyHave\n+    std::map<uint256, CTxLockRequest> mapLockRequestAccepted; // tx hash - tx\n+    std::map<uint256, CTxLockRequest> mapLockRequestRejected; // tx hash - tx\n+    std::map<uint256, CTxLockVote> mapTxLockVotes; // vote hash - vote\n+    std::map<uint256, CTxLockVote> mapTxLockVotesOrphan; // vote hash - vote\n \n-bool IsInstantSendTxValid(const CTransaction& txCandidate);\n+    std::map<uint256, CTxLockCandidate> mapTxLockCandidates; // tx hash - lock candidate\n \n-bool ProcessTxLockRequest(CNode* pfrom, const CTransaction &tx);\n+    std::map<COutPoint, std::set<uint256> > mapVotedOutpoints; // utxo - tx hash set\n+    std::map<COutPoint, uint256> mapLockedOutpoints; // utxo - tx hash\n \n-int64_t CreateTxLockCandidate(const CTransaction &tx);\n+    //track masternodes who voted with no txreq (for DOS protection)\n+    std::map<COutPoint, int64_t> mapMasternodeOrphanVotes; // mn outpoint - time\n \n-//check if we need to vote on this transaction\n-void CreateTxLockVote(const CTransaction& tx, int nBlockHeight);\n+    bool CreateTxLockCandidate(const CTxLockRequest& txLockRequest);\n+    void Vote(CTxLockCandidate& txLockCandidate);\n \n-//process consensus vote message\n-bool ProcessTxLockVote(CNode *pnode, CTxLockVote& vote);\n+    //process consensus vote message\n+    bool ProcessTxLockVote(CNode* pfrom, CTxLockVote& vote);\n+    void ProcessOrphanTxLockVotes();\n+    bool IsEnoughOrphanVotesForTx(const CTxLockRequest& txLockRequest);\n+    bool IsEnoughOrphanVotesForTxAndOutPoint(const uint256& txHash, const COutPoint& outpoint);\n+    int64_t GetAverageMasternodeOrphanVoteTime();\n \n-void ProcessOrphanTxLockVotes();\n+    void TryToFinalizeLockCandidate(const CTxLockCandidate& txLockCandidate);\n+    void LockTransactionInputs(const CTxLockCandidate& txLockCandidate);\n+    //update UI and notify external script if any\n+    void UpdateLockedTransaction(const CTxLockCandidate& txLockCandidate);\n+    bool ResolveConflicts(const CTxLockCandidate& txLockCandidate, int nMaxBlocks);\n \n-//update UI and notify external script if any\n-void UpdateLockedTransaction(const CTransaction& tx, bool fForceNotification = false);\n+    bool IsInstantSendReadyToLock(const uint256 &txHash);\n \n-void LockTransactionInputs(const CTransaction& tx);\n+public:\n+    CCriticalSection cs_instantsend;\n \n-// if two conflicting locks are approved by the network, they will cancel out\n-bool FindConflictingLocks(const CTransaction& tx);\n+    void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n \n-//try to resolve conflicting locks\n-void ResolveConflicts(const CTransaction& tx);\n+    bool ProcessTxLockRequest(const CTxLockRequest& txLockRequest);\n \n-// keep transaction locks in memory for an hour\n-void CleanTxLockCandidates();\n+    bool AlreadyHave(const uint256& hash);\n \n-// verify if transaction is currently locked\n-bool IsLockedInstandSendTransaction(const uint256 &txHash);\n+    void AcceptLockRequest(const CTxLockRequest& txLockRequest);\n+    void RejectLockRequest(const CTxLockRequest& txLockRequest);\n+    bool HasTxLockRequest(const uint256& txHash);\n+    bool GetTxLockRequest(const uint256& txHash, CTxLockRequest& txLockRequestRet);\n \n-// get the actual uber og accepted lock signatures\n-int GetTransactionLockSignatures(const uint256 &txHash);\n+    bool GetTxLockVote(const uint256& hash, CTxLockVote& txLockVoteRet);\n \n-// verify if transaction lock timed out\n-bool IsTransactionLockTimedOut(const uint256 &txHash);\n+    bool GetLockedOutPointTxHash(const COutPoint& outpoint, uint256& hashRet);\n \n-int64_t GetAverageMasternodeOrphanVoteTime();\n+    // verify if transaction is currently locked\n+    bool IsLockedInstantSendTransaction(const uint256& txHash);\n+    // get the actual uber og accepted lock signatures\n+    int GetTransactionLockSignatures(const uint256& txHash);\n \n-class CTxLockVote\n+    // remove expired entries from maps\n+    void CheckAndRemove();\n+    // verify if transaction lock timed out\n+    bool IsTxLockRequestTimedOut(const uint256& txHash);\n+\n+    void Relay(const uint256& txHash);\n+\n+    void UpdatedBlockTip(const CBlockIndex *pindex);\n+    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+};\n+\n+class CTxLockRequest : public CTransaction\n {\n+private:\n+    static const int TIMEOUT_SECONDS        = 5 * 60;\n+    static const CAmount MIN_FEE            = 0.001 * COIN;\n+\n+    int64_t nTimeCreated;\n+\n public:\n-    CTxIn vinMasternode;\n-    uint256 txHash;\n-    int nBlockHeight;\n-    std::vector<unsigned char> vchMasterNodeSignature;\n+    static const int MAX_INPUTS             = 10;\n+\n+    CTxLockRequest() :\n+        CTransaction(),\n+        nTimeCreated(GetTime())\n+        {}\n+    CTxLockRequest(const CTransaction& tx) :\n+        CTransaction(tx),\n+        nTimeCreated(GetTime())\n+        {}\n+\n+    bool IsValid(bool fRequireUnspent = true) const;\n+    CAmount GetMinFee() const;\n+    int GetMaxSignatures() const;\n+    bool IsTimedOut() const;\n+};\n \n+class CTxLockVote\n+{\n+private:\n+    uint256 txHash;\n+    COutPoint outpoint;\n+    COutPoint outpointMasternode;\n+    std::vector<unsigned char> vchMasternodeSignature;\n     // local memory only\n-    int64_t nOrphanExpireTime;\n+    int nConfirmedHeight; // when corresponding tx is 0-confirmed or conflicted, nConfirmedHeight is -1\n+    int64_t nTimeCreated;\n+\n+public:\n+    CTxLockVote() :\n+        txHash(),\n+        outpoint(),\n+        outpointMasternode(),\n+        vchMasternodeSignature(),\n+        nConfirmedHeight(-1),\n+        nTimeCreated(GetTime())\n+        {}\n+\n+    CTxLockVote(const uint256& txHashIn, const COutPoint& outpointIn, const COutPoint& outpointMasternodeIn) :\n+        txHash(txHashIn),\n+        outpoint(outpointIn),\n+        outpointMasternode(outpointMasternodeIn),\n+        vchMasternodeSignature(),\n+        nConfirmedHeight(-1),\n+        nTimeCreated(GetTime())\n+        {}\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(txHash);\n-        READWRITE(vinMasternode);\n-        READWRITE(vchMasterNodeSignature);\n-        READWRITE(nBlockHeight);\n+        READWRITE(outpoint);\n+        READWRITE(outpointMasternode);\n+        READWRITE(vchMasternodeSignature);\n     }\n \n     uint256 GetHash() const;\n \n+    uint256 GetTxHash() const { return txHash; }\n+    COutPoint GetOutpoint() const { return outpoint; }\n+    COutPoint GetMasternodeOutpoint() const { return outpointMasternode; }\n+    int64_t GetTimeCreated() const { return nTimeCreated; }\n+\n+    bool IsValid(CNode* pnode) const;\n+    void SetConfirmedHeight(int nConfirmedHeightIn) { nConfirmedHeight = nConfirmedHeightIn; }\n+    bool IsExpired(int nHeight) const;\n+\n     bool Sign();\n     bool CheckSignature() const;\n+\n+    void Relay() const;\n };\n \n-class CTxLockCandidate\n+class COutPointLock\n {\n+private:\n+    COutPoint outpoint; // utxo\n+    std::map<COutPoint, CTxLockVote> mapMasternodeVotes; // masternode outpoint - vote\n+\n public:\n-    int nBlockHeight;\n-    uint256 txHash;\n-    std::vector<CTxLockVote> vecTxLockVotes;\n-    int nExpirationBlock;\n-    int nTimeout;\n+    static const int SIGNATURES_REQUIRED        = 6;\n+    static const int SIGNATURES_TOTAL           = 10;\n \n-    uint256 GetHash() const { return txHash; }\n+    COutPointLock(const COutPoint& outpointIn) :\n+        outpoint(outpointIn),\n+        mapMasternodeVotes()\n+        {}\n \n-    bool IsAllVotesValid();\n-    void AddVote(const CTxLockVote& vote);\n-    int CountVotes();\n+    COutPoint GetOutpoint() const { return outpoint; }\n+\n+    bool AddVote(const CTxLockVote& vote);\n+    bool HasMasternodeVoted(const COutPoint& outpointMasternodeIn);\n+    int CountVotes() const { return mapMasternodeVotes.size(); }\n+    bool IsReady() const { return CountVotes() >= SIGNATURES_REQUIRED; }\n+\n+    void Relay() const;\n };\n \n+class CTxLockCandidate\n+{\n+private:\n+    int nConfirmedHeight; // when corresponding tx is 0-confirmed or conflicted, nConfirmedHeight is -1\n+\n+public:\n+    CTxLockCandidate(const CTxLockRequest& txLockRequestIn) :\n+        nConfirmedHeight(-1),\n+        txLockRequest(txLockRequestIn),\n+        mapOutPointLocks()\n+        {}\n+\n+    CTxLockRequest txLockRequest;\n+    std::map<COutPoint, COutPointLock> mapOutPointLocks;\n+\n+    uint256 GetHash() const { return txLockRequest.GetHash(); }\n+\n+    void AddOutPointLock(const COutPoint& outpoint);\n+    bool AddVote(const CTxLockVote& vote);\n+    bool IsAllOutPointsReady() const;\n+\n+    bool HasMasternodeVoted(const COutPoint& outpointIn, const COutPoint& outpointMasternodeIn);\n+    int CountVotes() const;\n+\n+    void SetConfirmedHeight(int nConfirmedHeightIn) { nConfirmedHeight = nConfirmedHeightIn; }\n+    bool IsExpired(int nHeight) const;\n+\n+    void Relay() const;\n+};\n \n #endif"
      },
      {
        "sha": "27741bc8df8fb4a3ea57e5c2a6d813876235586b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 39,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -941,6 +941,18 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n+int GetUTXOHeight(const COutPoint& outpoint)\n+{\n+    LOCK(cs_main);\n+    CCoins coins;\n+    if(!pcoinsTip->GetCoins(outpoint.hash, coins) ||\n+       (unsigned int)outpoint.n>=coins.vout.size() ||\n+       coins.vout[outpoint.n].IsNull()) {\n+        return -1;\n+    }\n+    return coins.nHeight;\n+}\n+\n int GetInputAge(const CTxIn &txin)\n {\n     CCoinsView viewDummy;\n@@ -966,15 +978,15 @@ int GetInputAgeIX(const uint256 &nTXHash, const CTxIn &txin)\n     int nResult = GetInputAge(txin);\n     if(nResult < 0) return -1;\n \n-    if (nResult < 6 && IsLockedInstandSendTransaction(nTXHash))\n+    if (nResult < 6 && instantsend.IsLockedInstantSendTransaction(nTXHash))\n         return nInstantSendDepth + nResult;\n \n     return nResult;\n }\n \n int GetIXConfirmations(const uint256 &nTXHash)\n {\n-    if (IsLockedInstandSendTransaction(nTXHash))\n+    if (instantsend.IsLockedInstantSendTransaction(nTXHash))\n         return nInstantSendDepth;\n \n     return 0;\n@@ -1088,14 +1100,19 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n     if (pool.exists(hash))\n         return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n-    // ----------- InstantSend transaction scanning -----------\n+    // If this is a Transaction Lock Request check to see if it's valid\n+    if(instantsend.HasTxLockRequest(hash) && !CTxLockRequest(tx).IsValid())\n+        return state.DoS(10, error(\"AcceptToMemoryPool : CTxLockRequest %s is invalid\", hash.ToString()),\n+                            REJECT_INVALID, \"bad-txlockrequest\");\n \n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-        if(mapLockedInputs.count(txin.prevout) && mapLockedInputs[txin.prevout] != tx.GetHash()) {\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : conflicts with existing transaction lock: %s\", reason),\n-                             REJECT_INVALID, \"tx-lock-conflict\");\n-        }\n+    // Check for conflicts with a completed Transaction Lock\n+    BOOST_FOREACH(const CTxIn &txin, tx.vin)\n+    {\n+        uint256 hashLocked;\n+        if(instantsend.GetLockedOutPointTxHash(txin.prevout, hashLocked) && hash != hashLocked)\n+            return state.DoS(10, error(\"AcceptToMemoryPool : Transaction %s conflicts with completed Transaction Lock %s\",\n+                                    hash.ToString(), hashLocked.ToString()),\n+                            REJECT_INVALID, \"tx-txlock-conflict\");\n     }\n \n     // Check for conflicts with in-memory transactions\n@@ -1109,6 +1126,18 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             const CTransaction *ptxConflicting = pool.mapNextTx[txin.prevout].ptx;\n             if (!setConflicts.count(ptxConflicting->GetHash()))\n             {\n+                // InstantSend txes are not replacable\n+                if(instantsend.HasTxLockRequest(ptxConflicting->GetHash())) {\n+                    // this tx conflicts with a Transaction Lock Request candidate\n+                    return state.DoS(0, error(\"AcceptToMemoryPool : Transaction %s conflicts with Transaction Lock Request %s\",\n+                                            hash.ToString(), ptxConflicting->GetHash().ToString()),\n+                                    REJECT_INVALID, \"tx-txlockreq-mempool-conflict\");\n+                } else if (instantsend.HasTxLockRequest(hash)) {\n+                    // this tx is a tx lock request and it conflicts with a normal tx\n+                    return state.DoS(0, error(\"AcceptToMemoryPool : Transaction Lock Request %s conflicts with transaction %s\",\n+                                            hash.ToString(), ptxConflicting->GetHash().ToString()),\n+                                    REJECT_INVALID, \"txlockreq-tx-mempool-conflict\");\n+                }\n                 // Allow opt-out of transaction replacement by setting\n                 // nSequence >= maxint-1 on all inputs.\n                 //\n@@ -3701,24 +3730,33 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n                              REJECT_INVALID, \"bad-cb-multiple\");\n \n \n-    // DASH : CHECK TRANSACTIONS FOR INSTANT SEND\n+    // DASH : CHECK TRANSACTIONS FOR INSTANTSEND\n \n     if(sporkManager.IsSporkActive(SPORK_3_INSTANTSEND_BLOCK_FILTERING)) {\n+        // We should never accept block which conflicts with completed transaction lock,\n+        // that's why this is in CheckBlock unlike coinbase payee/amount.\n+        // Require other nodes to comply, send them some data in case they are missing it.\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             // skip coinbase, it has no inputs\n             if (tx.IsCoinBase()) continue;\n-            // LOOK FOR TRANSACTION LOCK IN OUR MAP OF INPUTS\n+            // LOOK FOR TRANSACTION LOCK IN OUR MAP OF OUTPOINTS\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-                if(mapLockedInputs.count(txin.prevout) && mapLockedInputs[txin.prevout] != tx.GetHash()) {\n+                uint256 hashLocked;\n+                if(instantsend.GetLockedOutPointTxHash(txin.prevout, hashLocked) && hashLocked != tx.GetHash()) {\n+                    // Every node which relayed this block to us must invalidate it\n+                    // but they probably need more data.\n+                    // Relay corresponding transaction lock request and all its votes\n+                    // to let other nodes complete the lock.\n+                    instantsend.Relay(hashLocked);\n                     mapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n-                    LogPrintf(\"CheckBlock(DASH): found conflicting transaction with transaction lock %s %s\\n\", mapLockedInputs[txin.prevout].ToString(), tx.GetHash().ToString());\n-                    return state.DoS(0, error(\"CheckBlock(DASH): found conflicting transaction with transaction lock\"),\n-                                     REJECT_INVALID, \"conflicting-tx-ix\");\n+                    return state.DoS(0, error(\"CheckBlock(DASH): transaction %s conflicts with transaction lock %s\",\n+                                                tx.GetHash().ToString(), hashLocked.ToString()),\n+                                     REJECT_INVALID, \"conflict-tx-lock\");\n                 }\n             }\n         }\n     } else {\n-        LogPrintf(\"CheckBlock(DASH): skipping transaction locking checks\\n\");\n+        LogPrintf(\"CheckBlock(DASH): spork is off, skipping transaction locking checks\\n\");\n     }\n \n     // END DASH\n@@ -4901,10 +4939,10 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n         We want to only update the time on new hits, so that we can time out appropriately if needed.\n     */\n     case MSG_TXLOCK_REQUEST:\n-        return mapLockRequestAccepted.count(inv.hash) || mapLockRequestRejected.count(inv.hash);\n+        return instantsend.AlreadyHave(inv.hash);\n \n     case MSG_TXLOCK_VOTE:\n-        return mapTxLockVotes.count(inv.hash);\n+        return instantsend.AlreadyHave(inv.hash);\n \n     case MSG_SPORK:\n         return mapSporks.count(inv.hash);\n@@ -5063,20 +5101,22 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 }\n \n                 if (!pushed && inv.type == MSG_TXLOCK_REQUEST) {\n-                    if(mapLockRequestAccepted.count(inv.hash)) {\n+                    CTxLockRequest txLockRequest;\n+                    if(instantsend.GetTxLockRequest(inv.hash, txLockRequest)) {\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n-                        ss << mapLockRequestAccepted[inv.hash];\n+                        ss << txLockRequest;\n                         pfrom->PushMessage(NetMsgType::TXLOCKREQUEST, ss);\n                         pushed = true;\n                     }\n                 }\n \n                 if (!pushed && inv.type == MSG_TXLOCK_VOTE) {\n-                    if(mapTxLockVotes.count(inv.hash)) {\n+                    CTxLockVote vote;\n+                    if(instantsend.GetTxLockVote(inv.hash, vote)) {\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n-                        ss << mapTxLockVotes[inv.hash];\n+                        ss << vote;\n                         pfrom->PushMessage(NetMsgType::TXLOCKVOTE, ss);\n                         pushed = true;\n                     }\n@@ -5687,13 +5727,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;\n+        CTxLockRequest txLockRequest;\n         CDarksendBroadcastTx dstx;\n         int nInvType = MSG_TX;\n \n+        // Read data and assign inv type\n         if(strCommand == NetMsgType::TX) {\n             vRecv >> tx;\n         } else if(strCommand == NetMsgType::TXLOCKREQUEST) {\n-            vRecv >> tx;\n+            vRecv >> txLockRequest;\n+            tx = txLockRequest;\n             nInvType = MSG_TXLOCK_REQUEST;\n         } else if (strCommand == NetMsgType::DSTX) {\n             vRecv >> dstx;\n@@ -5705,7 +5748,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->AddInventoryKnown(inv);\n         pfrom->setAskFor.erase(inv.hash);\n \n-        if (strCommand == NetMsgType::DSTX) {\n+        // Process custom logic, no matter if tx will be accepted to mempool later or not\n+        if (strCommand == NetMsgType::TXLOCKREQUEST) {\n+            if(!instantsend.ProcessTxLockRequest(txLockRequest)) {\n+                LogPrint(\"instantsend\", \"TXLOCKREQUEST -- failed %s\\n\", txLockRequest.GetHash().ToString());\n+                return false;\n+            }\n+        } else if (strCommand == NetMsgType::DSTX) {\n             uint256 hashTx = tx.GetHash();\n \n             if(mapDarksendBroadcastTxes.count(hashTx)) {\n@@ -5745,11 +5794,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n-            // Process custom txes\n+            // Process custom txes, this changes AlreadyHave to \"true\"\n             if (strCommand == NetMsgType::DSTX) {\n+                LogPrintf(\"DSTX -- Masternode transaction accepted, txid=%s, peer=%d\\n\",\n+                        tx.GetHash().ToString(), pfrom->id);\n                 mapDarksendBroadcastTxes.insert(make_pair(tx.GetHash(), dstx));\n             } else if (strCommand == NetMsgType::TXLOCKREQUEST) {\n-                if(!ProcessTxLockRequest(pfrom, tx)) return false;\n+                LogPrintf(\"TXLOCKREQUEST -- Transaction Lock Request accepted, txid=%s, peer=%d\\n\",\n+                        tx.GetHash().ToString(), pfrom->id);\n+                instantsend.AcceptLockRequest(txLockRequest);\n             }\n \n             mempool.check(pcoinsTip);\n@@ -5828,18 +5881,17 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             assert(recentRejects);\n             recentRejects->insert(tx.GetHash());\n \n-            if (strCommand == NetMsgType::TXLOCKREQUEST && !AlreadyHave(inv)) { // i.e. AcceptToMemoryPool failed\n-                mapLockRequestRejected.insert(std::make_pair(tx.GetHash(), tx));\n-\n-                // can we get the conflicting transaction as proof?\n-\n-                LogPrintf(\"TXLOCKREQUEST -- Transaction Lock Request: %s %s : rejected %s\\n\",\n-                    pfrom->addr.ToString(), pfrom->cleanSubVer,\n-                    tx.GetHash().ToString()\n-                );\n-\n-                LockTransactionInputs(tx);\n-                ResolveConflicts(tx);\n+            if (strCommand == NetMsgType::TXLOCKREQUEST && !AlreadyHave(inv)) {\n+                // i.e. AcceptToMemoryPool failed, probably because it's conflicting\n+                // with existing normal tx or tx lock for another tx. For the same tx lock\n+                // AlreadyHave would have return \"true\" already.\n+\n+                // It's the first time we failed for this tx lock request,\n+                // this should switch AlreadyHave to \"true\".\n+                instantsend.RejectLockRequest(txLockRequest);\n+                // this lets other nodes to create lock request candidate i.e.\n+                // this allows multiple conflicting lock requests to compete for votes\n+                RelayTransaction(tx);\n             }\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) {\n@@ -6259,7 +6311,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             darkSendPool.ProcessMessage(pfrom, strCommand, vRecv);\n             mnodeman.ProcessMessage(pfrom, strCommand, vRecv);\n             mnpayments.ProcessMessage(pfrom, strCommand, vRecv);\n-            ProcessMessageInstantSend(pfrom, strCommand, vRecv);\n+            instantsend.ProcessMessage(pfrom, strCommand, vRecv);\n             sporkManager.ProcessSpork(pfrom, strCommand, vRecv);\n             masternodeSync.ProcessMessage(pfrom, strCommand, vRecv);\n             governance.ProcessMessage(pfrom, strCommand, vRecv);"
      },
      {
        "sha": "d0a7bf10d6dec4c163aa3e8309531469da6f8341",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -291,6 +291,7 @@ void PruneAndFlush();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false, bool fDryRun=false);\n \n+int GetUTXOHeight(const COutPoint& outpoint);\n int GetInputAge(const CTxIn &txin);\n int GetInputAgeIX(const uint256 &nTXHash, const CTxIn &txin);\n int GetIXConfirmations(const uint256 &nTXHash);"
      },
      {
        "sha": "4f2c1e4e198c1d134b828be9c15e9d0698e51536",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -2111,10 +2111,11 @@ void RelayTransaction(const CTransaction& tx)\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss.reserve(10000);\n     uint256 hash = tx.GetHash();\n+    CTxLockRequest txLockRequest;\n     if(mapDarksendBroadcastTxes.count(hash)) { // MSG_DSTX\n         ss << mapDarksendBroadcastTxes[hash];\n-    } else if(mapLockRequestAccepted.count(hash)) { // MSG_TXLOCK_REQUEST\n-        ss << mapLockRequestAccepted[hash];\n+    } else if(instantsend.GetTxLockRequest(hash, txLockRequest)) { // MSG_TXLOCK_REQUEST\n+        ss << txLockRequest;\n     } else { // MSG_TX\n         ss << tx;\n     }\n@@ -2125,7 +2126,7 @@ void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n {\n     uint256 hash = tx.GetHash();\n     int nInv = mapDarksendBroadcastTxes.count(hash) ? MSG_DSTX :\n-                (mapLockRequestAccepted.count(hash) ? MSG_TXLOCK_REQUEST : MSG_TX);\n+                (instantsend.HasTxLockRequest(hash) ? MSG_TXLOCK_REQUEST : MSG_TX);\n     CInv inv(nInv, hash);\n     {\n         LOCK(cs_mapRelay);"
      },
      {
        "sha": "c58c5b48a96db62ba6fedd893c1c38dc44a6c811",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -585,6 +585,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytesInputs += 148; // in all error cases, simply assume 148 here\n         }\n         else nBytesInputs += 148;\n+\n+        // Add inputs to calculate InstantSend Fee later\n+        if(coinControl->fUseInstantSend)\n+            txDummy.vin.push_back(CTxIn());\n     }\n \n     // calculation\n@@ -609,7 +613,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             nPayFee = coinControl->nMinimumTotalFee;\n \n         // InstantSend Fee\n-        if (coinControl->fUseInstantSend) nPayFee = std::max(nPayFee, INSTANTSEND_MIN_FEE);\n+        if (coinControl->fUseInstantSend) nPayFee = std::max(nPayFee, CTxLockRequest(txDummy).GetMinFee());\n \n         // Allow free? (require at least hard-coded threshold and default to that if no estimate)\n         double dPriorityNeeded = std::max(mempoolEstimatePriority, AllowFreeThreshold());"
      },
      {
        "sha": "27f5d47dde754b4c706c3dceb32bc74c91296e21",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -41,7 +41,6 @@ QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n \n         QString strTxStatus;\n         bool fOffline = (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60) && (wtx.GetRequestCount() == 0);\n-        int nSignatures = GetTransactionLockSignatures(wtx.GetHash());\n \n         if (fOffline) {\n             strTxStatus = tr(\"%1/offline\").arg(nDepth);\n@@ -51,14 +50,16 @@ QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n             strTxStatus = tr(\"%1 confirmations\").arg(nDepth);\n         }\n \n-        if(nSignatures < 0) return strTxStatus; // regular tx\n+        if(!instantsend.HasTxLockRequest(wtx.GetHash())) return strTxStatus; // regular tx\n \n+        int nSignatures = instantsend.GetTransactionLockSignatures(wtx.GetHash());\n+        int nSignaturesMax = CTxLockRequest(wtx).GetMaxSignatures();\n         // InstantSend\n         strTxStatus += \" (\";\n-        if(nSignatures >= INSTANTSEND_SIGNATURES_REQUIRED) {\n+        if(instantsend.IsLockedInstantSendTransaction(wtx.GetHash())) {\n             strTxStatus += tr(\"verified via InstantSend\");\n-        } else if(!IsTransactionLockTimedOut(wtx.GetHash())) {\n-            strTxStatus += tr(\"InstantSend verification in progress - %1 of %2 signatures\").arg(nSignatures).arg(INSTANTSEND_SIGNATURES_TOTAL);\n+        } else if(!instantsend.IsTxLockRequestTimedOut(wtx.GetHash())) {\n+            strTxStatus += tr(\"InstantSend verification in progress - %1 of %2 signatures\").arg(nSignatures).arg(nSignaturesMax);\n         } else {\n             strTxStatus += tr(\"InstantSend verification failed\");\n         }"
      },
      {
        "sha": "33ccca12a73f4c51e2b9e6ce850bee012d2241be",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -307,10 +307,17 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         if (fSubtractFeeFromAmount && fCreated)\n             transaction.reassignAmounts(nChangePosRet);\n \n-        if(recipients[0].fUseInstantSend && newTx->GetValueOut() > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN){\n-            Q_EMIT message(tr(\"Send Coins\"), tr(\"InstantSend doesn't support sending values that high yet. Transactions are currently limited to %1 DASH.\").arg(sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)),\n-                         CClientUIInterface::MSG_ERROR);\n-            return TransactionCreationFailed;\n+        if(recipients[0].fUseInstantSend) {\n+            if(newTx->GetValueOut() > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n+                Q_EMIT message(tr(\"Send Coins\"), tr(\"InstantSend doesn't support sending values that high yet. Transactions are currently limited to %1 DASH.\").arg(sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)),\n+                             CClientUIInterface::MSG_ERROR);\n+                return TransactionCreationFailed;\n+            }\n+            if(newTx->vin.size() > CTxLockRequest::MAX_INPUTS) {\n+                Q_EMIT message(tr(\"Send Coins\"), tr(\"InstantSend doesn't support transactions with more than %1 inputs.\").arg(CTxLockRequest::MAX_INPUTS),\n+                             CClientUIInterface::MSG_ERROR);\n+                return TransactionCreationFailed;\n+            }\n         }\n \n         if(!fCreated)"
      },
      {
        "sha": "79b0018152700549ed9c5da9eb87d4a066064875",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -871,12 +871,8 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n-    if (fInstantSend) {\n-        if (!IsInstantSendTxValid(tx)) {\n-            throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Not a valid InstantSend transaction\");\n-        }\n-        mapLockRequestAccepted.insert(make_pair(hashTx, tx));\n-        CreateTxLockCandidate(tx);\n+    if (fInstantSend && !instantsend.ProcessTxLockRequest(tx)) {\n+        throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Not a valid InstantSend transaction, see debug.log for more info\");\n     }\n     RelayTransaction(tx);\n "
      },
      {
        "sha": "10fee6e3d1b24410150449bf2f0b14c4ebd63204",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -10,7 +10,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70204;\n+static const int PROTOCOL_VERSION = 70205;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;"
      },
      {
        "sha": "e0e2fd7724b79974093f0e9148d6080696f791fd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 14,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "patch": "@@ -1472,9 +1472,8 @@ bool CWalletTx::RelayWalletTransaction(std::string strCommand)\n             uint256 hash = GetHash();\n             LogPrintf(\"Relaying wtx %s\\n\", hash.ToString());\n \n-            if(strCommand == NetMsgType::TXLOCKREQUEST){\n-                mapLockRequestAccepted.insert(make_pair(hash, (CTransaction)*this));\n-                CreateTxLockCandidate(((CTransaction)*this));\n+            if(strCommand == NetMsgType::TXLOCKREQUEST) {\n+                instantsend.ProcessTxLockRequest(((CTxLockRequest)*this));\n             }\n             RelayTransaction((CTransaction)*this);\n             return true;\n@@ -2098,8 +2097,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 continue;\n \n             int nDepth = pcoin->GetDepthInMainChain(false);\n-            // do not use IX for inputs that have less then 6 blockchain confirmations\n-            if (fUseInstantSend && nDepth < 6)\n+            // do not use IX for inputs that have less then INSTANTSEND_CONFIRMATIONS_REQUIRED blockchain confirmations\n+            if (fUseInstantSend && nDepth < INSTANTSEND_CONFIRMATIONS_REQUIRED)\n                 continue;\n \n             // We should not consider coins which aren't at least in our mempool\n@@ -2358,6 +2357,10 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n+\n+        if(fUseInstantSend && setCoinsRet.size() > CTxLockRequest::MAX_INPUTS)\n+            return false;\n+\n         return (nValueRet >= nTargetValue);\n     }\n \n@@ -2885,7 +2888,7 @@ bool CWallet::ConvertList(std::vector<CTxIn> vecTxIn, std::vector<CAmount>& vecA\n bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign, AvailableCoinsType nCoinType, bool fUseInstantSend)\n {\n-    CAmount nFeePay = fUseInstantSend ? INSTANTSEND_MIN_FEE : 0;\n+    CAmount nFeePay = fUseInstantSend ? CTxLockRequest().GetMinFee() : 0;\n \n     CAmount nValue = 0;\n     unsigned int nSubtractFeeFromAmount = 0;\n@@ -3000,19 +3003,26 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 if (!SelectCoins(nValueToSelect, setCoins, nValueIn, coinControl, nCoinType, fUseInstantSend))\n                 {\n-                    if (nCoinType == ALL_COINS) {\n-                        strFailReason = _(\"Insufficient funds.\");\n-                    } else if (nCoinType == ONLY_NOT1000IFMN) {\n+                    if (nCoinType == ONLY_NOT1000IFMN) {\n                         strFailReason = _(\"Unable to locate enough funds for this transaction that are not equal 1000 DASH.\");\n                     } else if (nCoinType == ONLY_NONDENOMINATED_NOT1000IFMN) {\n                         strFailReason = _(\"Unable to locate enough PrivateSend non-denominated funds for this transaction that are not equal 1000 DASH.\");\n-                    } else {\n+                    } else if (nCoinType == ONLY_DENOMINATED) {\n                         strFailReason = _(\"Unable to locate enough PrivateSend denominated funds for this transaction.\");\n                         strFailReason += \" \" + _(\"PrivateSend uses exact denominated amounts to send funds, you might simply need to anonymize some more coins.\");\n+                    } else if (nValueIn < nValueToSelect) {\n+                        strFailReason = _(\"Insufficient funds.\");\n                     }\n-\n-                    if(fUseInstantSend){\n-                        strFailReason += \" \" + _(\"InstantSend requires inputs with at least 6 confirmations, you might need to wait a few minutes and try again.\");\n+                    if (fUseInstantSend) {\n+                        size_t nMaxInputs = CTxLockRequest::MAX_INPUTS;\n+                        if(setCoins.size() > nMaxInputs) {\n+                            strFailReason += \" \" + strprintf(_(\"InstantSend doesn't support transactions with more than %d inputs.\"), nMaxInputs);\n+                        } else if (nValueIn > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n+                            strFailReason += \" \" + strprintf(_(\"InstantSend doesn't support sending values that high yet. Transactions are currently limited to %1 DASH.\"), sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE));\n+                        } else {\n+                            // could be not true but most likely that's the reason\n+                            strFailReason += \" \" + strprintf(_(\"InstantSend requires inputs with at least %d confirmations, you might need to wait a few minutes and try again.\"), INSTANTSEND_CONFIRMATIONS_REQUIRED);\n+                        }\n                     }\n \n                     return false;\n@@ -3205,6 +3215,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }\n+                if(fUseInstantSend) {\n+                    nFeeNeeded = std::max(nFeeNeeded, CTxLockRequest(txNew).GetMinFee());\n+                }\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -4045,7 +4058,7 @@ int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet, bool enableIX)\n         }\n     }\n \n-    if(enableIX && nResult < 6 && IsLockedInstandSendTransaction(GetHash()))\n+    if(enableIX && nResult < 6 && instantsend.IsLockedInstantSendTransaction(GetHash()))\n         return nInstantSendDepth + nResult;\n \n     return nResult;"
      }
    ]
  },
  {
    "sha": "04ed5db62c8434745a6cabfc8aad856ba914b737",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGVkNWRiNjJjODQzNDc0NWE2Y2FiZmM4YWFkODU2YmE5MTRiNzM3",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-01-29T19:09:21Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-29T19:09:21Z"
      },
      "message": "Fix Vote iteration bug (#1290)\n\n* Fix Vote iteration bug\r\n\r\n* Fix order of statements",
      "tree": {
        "sha": "6febc21c08e8e3392375585a82e2781f7ff6abba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6febc21c08e8e3392375585a82e2781f7ff6abba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04ed5db62c8434745a6cabfc8aad856ba914b737",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04ed5db62c8434745a6cabfc8aad856ba914b737",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04ed5db62c8434745a6cabfc8aad856ba914b737",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04ed5db62c8434745a6cabfc8aad856ba914b737/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60409df8229fa56ae6de6fed1fa7f9c3a3e6757e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4b166457d599a43391a8f253eb7363f7784544c7",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04ed5db62c8434745a6cabfc8aad856ba914b737/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04ed5db62c8434745a6cabfc8aad856ba914b737/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=04ed5db62c8434745a6cabfc8aad856ba914b737",
        "patch": "@@ -173,12 +173,14 @@ void CInstantSend::Vote(CTxLockCandidate& txLockCandidate)\n \n         if(n == -1) {\n             LogPrint(\"instantsend\", \"CInstantSend::Vote -- Unknown Masternode %s\\n\", activeMasternode.vin.prevout.ToStringShort());\n+            ++itOutpointLock;\n             continue;\n         }\n \n         int nSignaturesTotal = COutPointLock::SIGNATURES_TOTAL;\n         if(n > nSignaturesTotal) {\n             LogPrint(\"instantsend\", \"CInstantSend::Vote -- Masternode not in the top %d (%d)\\n\", nSignaturesTotal, n);\n+            ++itOutpointLock;\n             continue;\n         }\n \n@@ -202,7 +204,10 @@ void CInstantSend::Vote(CTxLockCandidate& txLockCandidate)\n                 }\n             }\n         }\n-        if(fAlreadyVoted) continue; // skip to the next outpoint\n+        if(fAlreadyVoted) {\n+            ++itOutpointLock;\n+            continue; // skip to the next outpoint\n+        }\n \n         // we haven't voted for this outpoint yet, let's try to do this now\n         CTxLockVote vote(txHash, itOutpointLock->first, activeMasternode.vin.prevout);"
      }
    ]
  },
  {
    "sha": "e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmVhZjFkMGQ3YmEyZGZjOGRlODE5MzgyZTg0MTNmOGE0NzA4ODBj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-30T06:01:08Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-30T06:01:08Z"
      },
      "message": "Fix few block processing bugs (#1291)\n\n* protect mapRejectedBlocks by cs_main\r\n\r\n* few block reprocessing fixes:\r\n- DisconnectBlock should fail on DisconnectTip failure\r\n- ResolveConflicts should fail on DisconnectBlock failure\r\n- ReprocessBlocks cleanup\r\n\r\n* don't ban on IsBlockValueValid/IsBlockPayeeValid failure",
      "tree": {
        "sha": "5e6f7aa7e43d525dcbe2f0fddb2b907d6ae6aa73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e6f7aa7e43d525dcbe2f0fddb2b907d6ae6aa73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04ed5db62c8434745a6cabfc8aad856ba914b737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04ed5db62c8434745a6cabfc8aad856ba914b737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04ed5db62c8434745a6cabfc8aad856ba914b737"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 25,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4f799293eb794a40179f75d5747c20808f1eec64",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
        "patch": "@@ -540,7 +540,9 @@ bool CInstantSend::ResolveConflicts(const CTxLockCandidate& txLockCandidate, int\n             // Not in UTXO anymore? A conflicting tx was mined while we were waiting for votes.\n             // Reprocess tip to make sure tx for this lock is included.\n             LogPrintf(\"CTxLockRequest::ResolveConflicts -- Failed to find UTXO %s - disconnecting tip...\\n\", txin.prevout.ToStringShort());\n-            DisconnectBlocks(1);\n+            if(!DisconnectBlocks(1)) {\n+                return false;\n+            }\n             // Recursively check at \"new\" old height. Conflicting tx should be rejected by AcceptToMemoryPool.\n             ResolveConflicts(txLockCandidate, nMaxBlocks - 1);\n             LogPrintf(\"CTxLockRequest::ResolveConflicts -- Failed to find UTXO %s - activating best chain...\\n\", txin.prevout.ToStringShort());"
      },
      {
        "sha": "89b0d181eed3e767381c101449e22d8483cea2ff",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 15,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
        "patch": "@@ -102,7 +102,7 @@ struct COrphanTx {\n };\n map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev GUARDED_BY(cs_main);;\n-map<uint256, int64_t> mapRejectedBlocks;\n+map<uint256, int64_t> mapRejectedBlocks GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n@@ -2779,16 +2779,23 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime3 - nTime2), 0.001 * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * 0.000001);\n \n-    // DASH : MODIFYED TO CHECK MASTERNODE PAYMENTS AND SUPERBLOCKS\n+    // DASH : MODIFIED TO CHECK MASTERNODE PAYMENTS AND SUPERBLOCKS\n+\n+    // It's possible that we simply don't have enough data and this could fail\n+    // (i.e. block itself could be a correct one and we need to store it),\n+    // that's why this is in ConnectBlock. Could be the other way around however -\n+    // the peer who sent us this block is missing some data and wasn't able\n+    // to recognize that block is actually invalid.\n+    // TODO: resync data (both ways?) and try to reprocess this block later.\n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->pprev->nBits, pindex->pprev->nHeight, chainparams.GetConsensus());\n     std::string strError = \"\";\n     if (!IsBlockValueValid(block, pindex->nHeight, blockReward, strError)) {\n-        return state.DoS(100, error(\"ConnectBlock(): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n+        return state.DoS(0, error(\"ConnectBlock(DASH): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n     }\n \n     if (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, blockReward)) {\n         mapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n-        return state.DoS(100, error(\"ConnectBlock(DASH): couldn't find masternode or superblock payments\"),\n+        return state.DoS(0, error(\"ConnectBlock(DASH): couldn't find masternode or superblock payments\"),\n                                 REJECT_INVALID, \"bad-cb-payee\");\n     }\n     // END DASH\n@@ -3162,21 +3169,25 @@ bool DisconnectBlocks(int blocks)\n     const CChainParams& chainparams = Params();\n \n     LogPrintf(\"DisconnectBlocks -- Got command to replay %d blocks\\n\", blocks);\n-    for(int i = 0; i <= blocks; i++)\n-        DisconnectTip(state, chainparams.GetConsensus());\n+    for(int i = 0; i <= blocks; i++) {\n+        if(!DisconnectTip(state, chainparams.GetConsensus()) || !state.IsValid()) {\n+            return false;\n+        }\n+    }\n \n     return true;\n }\n \n void ReprocessBlocks(int nBlocks)\n {\n+    LOCK(cs_main);\n+\n     std::map<uint256, int64_t>::iterator it = mapRejectedBlocks.begin();\n     while(it != mapRejectedBlocks.end()){\n         //use a window twice as large as is usual for the nBlocks we want to reset\n         if((*it).second  > GetTime() - (nBlocks*60*5)) {\n             BlockMap::iterator mi = mapBlockIndex.find((*it).first);\n             if (mi != mapBlockIndex.end() && (*mi).second) {\n-                LOCK(cs_main);\n \n                 CBlockIndex* pindex = (*mi).second;\n                 LogPrintf(\"ReprocessBlocks -- %s\\n\", (*it).first.ToString());\n@@ -3188,15 +3199,10 @@ void ReprocessBlocks(int nBlocks)\n         ++it;\n     }\n \n-    CValidationState state;\n-    {\n-        LOCK(cs_main);\n-        DisconnectBlocks(nBlocks);\n-    }\n+    DisconnectBlocks(nBlocks);\n \n-    if (state.IsValid()) {\n-        ActivateBestChain(state, Params());\n-    }\n+    CValidationState state;\n+    ActivateBestChain(state, Params());\n }\n \n /**\n@@ -3748,6 +3754,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n                     // Relay corresponding transaction lock request and all its votes\n                     // to let other nodes complete the lock.\n                     instantsend.Relay(hashLocked);\n+                    LOCK(cs_main);\n                     mapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n                     return state.DoS(0, error(\"CheckBlock(DASH): transaction %s conflicts with transaction lock %s\",\n                                                 tx.GetHash().ToString(), hashLocked.ToString()),"
      }
    ]
  },
  {
    "sha": "572c554681727a252facaf652547f46b4f47f38a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzJjNTU0NjgxNzI3YTI1MmZhY2FmNjUyNTQ3ZjQ2YjRmNDdmMzhh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-31T15:29:27Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-31T15:29:27Z"
      },
      "message": "Multiple mnb recovery (#1297)\n\n* ask for multiple mnb hashes for recovery\r\n\r\n* address comments, lock cs_vNodes and add/relese ref\r\n\r\n* add parentheses",
      "tree": {
        "sha": "978e2af835a94730cd7ac6830037fd398c93735e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/978e2af835a94730cd7ac6830037fd398c93735e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/572c554681727a252facaf652547f46b4f47f38a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/572c554681727a252facaf652547f46b4f47f38a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/572c554681727a252facaf652547f46b4f47f38a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/572c554681727a252facaf652547f46b4f47f38a/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2eaf1d0d7ba2dfc8de819382e8413f8a470880c"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 61,
      "deletions": 28
    },
    "files": [
      {
        "sha": "ce964240b05329307e0e1164e8eba2aa802294db",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 18,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/572c554681727a252facaf652547f46b4f47f38a/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/572c554681727a252facaf652547f46b4f47f38a/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=572c554681727a252facaf652547f46b4f47f38a",
        "patch": "@@ -161,16 +161,6 @@ void CMasternodeMan::AskForMN(CNode* pnode, const CTxIn &vin)\n     pnode->PushMessage(NetMsgType::DSEG, vin);\n }\n \n-void CMasternodeMan::AskForMnb(CNode* pnode, const uint256 &hash)\n-{\n-    if(!pnode || hash == uint256()) return;\n-\n-    LogPrint(\"masternode\", \"CMasternodeMan::AskForMnb -- asking for mnb %s from addr=%s\\n\", hash.ToString(), pnode->addr.ToString());\n-    std::vector<CInv> vToFetch;\n-    vToFetch.push_back(CInv(MSG_MASTERNODE_ANNOUNCE, hash));\n-    pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n-}\n-\n void CMasternodeMan::Check()\n {\n     LOCK(cs);\n@@ -198,7 +188,8 @@ void CMasternodeMan::CheckAndRemove()\n         // Remove spent masternodes, prepare structures and make requests to reasure the state of inactive ones\n         std::vector<CMasternode>::iterator it = vMasternodes.begin();\n         std::vector<std::pair<int, CMasternode> > vecMasternodeRanks;\n-        bool fAskedForMnbRecovery = false; // ask for one mn at a time\n+        // ask for up to MNB_RECOVERY_MAX_ASK_ENTRIES masternode entries at a time\n+        int nAskForMnbRecovery = MNB_RECOVERY_MAX_ASK_ENTRIES;\n         while(it != vMasternodes.end()) {\n             CMasternodeBroadcast mnb = CMasternodeBroadcast(*it);\n             uint256 hash = mnb.GetHash();\n@@ -216,7 +207,7 @@ void CMasternodeMan::CheckAndRemove()\n                 fMasternodesRemoved = true;\n             } else {\n                 bool fAsk = pCurrentBlockIndex &&\n-                            !fAskedForMnbRecovery &&\n+                            (nAskForMnbRecovery > 0) &&\n                             masternodeSync.IsSynced() &&\n                             it->IsNewStartRequired() &&\n                             !IsMnbRecoveryRequested(hash);\n@@ -228,7 +219,8 @@ void CMasternodeMan::CheckAndRemove()\n                         int nRandomBlockHeight = GetRandInt(pCurrentBlockIndex->nHeight);\n                         vecMasternodeRanks = GetMasternodeRanks(nRandomBlockHeight);\n                     }\n-                    // ask first MNB_RECOVERY_QUORUM_TOTAL mns we can connect to and we haven't asked recently\n+                    bool fAskedForMnbRecovery = false;\n+                    // ask first MNB_RECOVERY_QUORUM_TOTAL masternodes we can connect to and we haven't asked recently\n                     for(int i = 0; setRequested.size() < MNB_RECOVERY_QUORUM_TOTAL && i < (int)vecMasternodeRanks.size(); i++) {\n                         // avoid banning\n                         if(mWeAskedForMasternodeListEntry.count(it->vin.prevout) && mWeAskedForMasternodeListEntry[it->vin.prevout].count(vecMasternodeRanks[i].second.addr)) continue;\n@@ -238,6 +230,10 @@ void CMasternodeMan::CheckAndRemove()\n                         listScheduledMnbRequestConnections.push_back(std::make_pair(addr, hash));\n                         fAskedForMnbRecovery = true;\n                     }\n+                    if(fAskedForMnbRecovery) {\n+                        LogPrint(\"masternode\", \"CMasternodeMan::CheckAndRemove -- Recovery initiated, masternode=%s\\n\", it->vin.prevout.ToStringShort());\n+                        nAskForMnbRecovery--;\n+                    }\n                     // wait for mnb recovery replies for MNB_RECOVERY_WAIT_SECONDS seconds\n                     mMnbRecoveryRequests[hash] = std::make_pair(GetTime() + MNB_RECOVERY_WAIT_SECONDS, setRequested);\n                 }\n@@ -773,13 +769,31 @@ void CMasternodeMan::ProcessMasternodeConnections()\n     }\n }\n \n-std::pair<CService, uint256> CMasternodeMan::PopScheduledMnbRequestConnection()\n+std::pair<CService, std::set<uint256> > CMasternodeMan::PopScheduledMnbRequestConnection()\n {\n     LOCK(cs);\n-    if(listScheduledMnbRequestConnections.empty()) return make_pair(CService(), uint256());\n-    std::pair<CService, uint256> p = listScheduledMnbRequestConnections.front();\n-    listScheduledMnbRequestConnections.pop_front();\n-    return p;\n+    if(listScheduledMnbRequestConnections.empty()) {\n+        return std::make_pair(CService(), std::set<uint256>());\n+    }\n+\n+    std::set<uint256> setResult;\n+\n+    listScheduledMnbRequestConnections.sort();\n+    std::pair<CService, uint256> pairFront = listScheduledMnbRequestConnections.front();\n+\n+    // squash hashes from requests with the same CService as the first one into setResult\n+    std::list< std::pair<CService, uint256> >::iterator it = listScheduledMnbRequestConnections.begin();\n+    while(it != listScheduledMnbRequestConnections.end()) {\n+        if(pairFront.first == it->first) {\n+            setResult.insert(it->second);\n+            it = listScheduledMnbRequestConnections.erase(it);\n+        } else {\n+            // since list is sorted now, we can be sure that there is no more hashes left\n+            // to ask for from this addr\n+            break;\n+        }\n+    }\n+    return std::make_pair(pairFront.first, setResult);\n }\n \n "
      },
      {
        "sha": "55abf9240c1e98b4c81a490406b9b87ac98f846b",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/572c554681727a252facaf652547f46b4f47f38a/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/572c554681727a252facaf652547f46b4f47f38a/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=572c554681727a252facaf652547f46b4f47f38a",
        "patch": "@@ -105,6 +105,7 @@ class CMasternodeMan\n \n     static const int MNB_RECOVERY_QUORUM_TOTAL      = 10;\n     static const int MNB_RECOVERY_QUORUM_REQUIRED   = 6;\n+    static const int MNB_RECOVERY_MAX_ASK_ENTRIES   = 10;\n     static const int MNB_RECOVERY_WAIT_SECONDS      = 60;\n     static const int MNB_RECOVERY_RETRY_SECONDS     = 3 * 60 * 60;\n \n@@ -297,7 +298,7 @@ class CMasternodeMan\n     CMasternode* GetMasternodeByRank(int nRank, int nBlockHeight, int nMinProtocol=0, bool fOnlyActive=true);\n \n     void ProcessMasternodeConnections();\n-    std::pair<CService, uint256> PopScheduledMnbRequestConnection();\n+    std::pair<CService, std::set<uint256> > PopScheduledMnbRequestConnection();\n \n     void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n "
      },
      {
        "sha": "020e04828f332e731de958f536d9391487fe5abf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 9,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/572c554681727a252facaf652547f46b4f47f38a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/572c554681727a252facaf652547f46b4f47f38a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=572c554681727a252facaf652547f46b4f47f38a",
        "patch": "@@ -1700,23 +1700,41 @@ void ThreadMnbRequestConnections()\n     if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0)\n         return;\n \n-    int nTick = 0;\n     while (true)\n     {\n         MilliSleep(1000);\n-        nTick++;\n \n         CSemaphoreGrant grant(*semMasternodeOutbound);\n         boost::this_thread::interruption_point();\n \n-        std::pair<CService, uint256> p = mnodeman.PopScheduledMnbRequestConnection();\n-        if(p.first == CService()) continue;\n-        CNode* pnode = ConnectNode(CAddress(p.first), NULL, true);\n-        if(pnode) {\n-            grant.MoveTo(pnode->grantMasternodeOutbound);\n-            if(p.second != uint256())\n-                mnodeman.AskForMnb(pnode, p.second);\n+        std::pair<CService, std::set<uint256> > p = mnodeman.PopScheduledMnbRequestConnection();\n+        if(p.first == CService() || p.second.empty()) continue;\n+\n+        CNode* pnode = NULL;\n+        {\n+            LOCK(cs_vNodes);\n+            pnode = ConnectNode(CAddress(p.first), NULL, true);\n+            if(!pnode) continue;\n+            pnode->AddRef();\n         }\n+\n+        grant.MoveTo(pnode->grantMasternodeOutbound);\n+\n+        // compile request vector\n+        std::vector<CInv> vToFetch;\n+        std::set<uint256>::iterator it = p.second.begin();\n+        while(it != p.second.end()) {\n+            if(*it != uint256()) {\n+                vToFetch.push_back(CInv(MSG_MASTERNODE_ANNOUNCE, *it));\n+                LogPrint(\"masternode\", \"ThreadMnbRequestConnections -- asking for mnb %s from addr=%s\\n\", it->ToString(), p.first.ToString());\n+            }\n+            ++it;\n+        }\n+\n+        // ask for data\n+        pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n+\n+        pnode->Release();\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "c8466cfb042a2c7d5b443f5ad01abf18d275e402",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODQ2NmNmYjA0MmEyYzdkNWI0NDNmNWFkMDFhYmYxOGQyNzVlNDAy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-01-31T17:11:21Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-01-31T17:11:21Z"
      },
      "message": "fix lock order in ThreadMnbRequestConnections (#1298)",
      "tree": {
        "sha": "8db98920f49d4ee5d6524f2cfee957e150d6d95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8db98920f49d4ee5d6524f2cfee957e150d6d95b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8466cfb042a2c7d5b443f5ad01abf18d275e402",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8466cfb042a2c7d5b443f5ad01abf18d275e402",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8466cfb042a2c7d5b443f5ad01abf18d275e402",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8466cfb042a2c7d5b443f5ad01abf18d275e402/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "572c554681727a252facaf652547f46b4f47f38a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/572c554681727a252facaf652547f46b4f47f38a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/572c554681727a252facaf652547f46b4f47f38a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fa3fec7cc170742efe35e825fcac6a343dd53d52",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8466cfb042a2c7d5b443f5ad01abf18d275e402/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8466cfb042a2c7d5b443f5ad01abf18d275e402/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c8466cfb042a2c7d5b443f5ad01abf18d275e402",
        "patch": "@@ -1712,7 +1712,7 @@ void ThreadMnbRequestConnections()\n \n         CNode* pnode = NULL;\n         {\n-            LOCK(cs_vNodes);\n+            LOCK2(cs_main, cs_vNodes);\n             pnode = ConnectNode(CAddress(p.first), NULL, true);\n             if(!pnode) continue;\n             pnode->AddRef();"
      }
    ]
  },
  {
    "sha": "3bfa5392facebaebe37be1a39cbb5ef4abbf2d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmZhNTM5MmZhY2ViYWViZTM3YmUxYTM5Y2JiNWVmNGFiYmYyZDUy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-01T17:24:00Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-01T17:24:00Z"
      },
      "message": "fix flag/ref order + cs_vNodes in ConnectNode (#1300)\n\n* fix flag/ref order\r\n\r\n* hold cs_vNodes in ConnectNode a little bit longer\r\n\r\n* fix",
      "tree": {
        "sha": "a7565a08669d5ad92915ada6b2f02c81df252e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7565a08669d5ad92915ada6b2f02c81df252e74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8466cfb042a2c7d5b443f5ad01abf18d275e402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8466cfb042a2c7d5b443f5ad01abf18d275e402",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8466cfb042a2c7d5b443f5ad01abf18d275e402"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f65729d7ae8d6cda29945c64c20d900f4797f600",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3bfa5392facebaebe37be1a39cbb5ef4abbf2d52",
        "patch": "@@ -392,15 +392,16 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fConnectToMas\n         if (IsLocal(addrConnect) && !fConnectToMasternode)\n             return NULL;\n \n+        LOCK(cs_vNodes);\n         // Look for an existing connection\n         CNode* pnode = FindNode((CService)addrConnect);\n         if (pnode)\n         {\n             // we have existing connection to this node but it was not a connection to masternode,\n             // change flag and add reference so that we can correctly clear it later\n             if(fConnectToMasternode && !pnode->fMasternode) {\n-                pnode->fMasternode = true;\n                 pnode->AddRef();\n+                pnode->fMasternode = true;\n             }\n             return pnode;\n         }\n@@ -428,15 +429,13 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fConnectToMas\n         // Add node\n         CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false, true);\n \n-        {\n-            LOCK(cs_vNodes);\n-            vNodes.push_back(pnode);\n-        }\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n \n         pnode->nTimeConnected = GetTime();\n         if(fConnectToMasternode) {\n-            pnode->fMasternode = true;\n             pnode->AddRef();\n+            pnode->fMasternode = true;\n         }\n \n         return pnode;"
      }
    ]
  },
  {
    "sha": "944420deb0923cc54a6ab86debe4f3cefffeb924",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDQ0MjBkZWIwOTIzY2M1NGE2YWI4NmRlYmU0ZjNjZWZmZmViOTI0",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-01T23:07:24Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-01T23:07:24Z"
      },
      "message": "Fix deadlock in governance on cs_main (#1303)",
      "tree": {
        "sha": "4e7ccd95b9d5a71640427b4d59dd79c78ce7b0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e7ccd95b9d5a71640427b4d59dd79c78ce7b0cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/944420deb0923cc54a6ab86debe4f3cefffeb924",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944420deb0923cc54a6ab86debe4f3cefffeb924",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/944420deb0923cc54a6ab86debe4f3cefffeb924",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944420deb0923cc54a6ab86debe4f3cefffeb924/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bfa5392facebaebe37be1a39cbb5ef4abbf2d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfa5392facebaebe37be1a39cbb5ef4abbf2d52"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "10d6bf1c10dd37ce24d9604e1870352af658c5d9",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/944420deb0923cc54a6ab86debe4f3cefffeb924/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/944420deb0923cc54a6ab86debe4f3cefffeb924/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=944420deb0923cc54a6ab86debe4f3cefffeb924",
        "patch": "@@ -879,7 +879,7 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n \n void CGovernanceManager::CheckMasternodeOrphanVotes()\n {\n-    LOCK(cs);\n+    LOCK2(cs_main, cs);\n     fRateChecksEnabled = false;\n     for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n         it->second.CheckOrphanVotes();\n@@ -889,7 +889,7 @@ void CGovernanceManager::CheckMasternodeOrphanVotes()\n \n void CGovernanceManager::CheckMasternodeOrphanObjects()\n {\n-    LOCK(cs);\n+    LOCK2(cs_main, cs);\n     int64_t nNow = GetAdjustedTime();\n     fRateChecksEnabled = false;\n     object_time_m_it it = mapMasternodeOrphanObjects.begin();"
      }
    ]
  },
  {
    "sha": "a73185d9397a5fe7caf7acb65d1a49df4a32db4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzMxODVkOTM5N2E1ZmU3Y2FmN2FjYjY1ZDFhNDlkZjRhMzJkYjRl",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-02T08:22:47Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-02T08:22:47Z"
      },
      "message": "Increment node refcount before adding to vector (#1304)",
      "tree": {
        "sha": "5703e18baa0c657b640b1af19ddb8b133db79544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5703e18baa0c657b640b1af19ddb8b133db79544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a73185d9397a5fe7caf7acb65d1a49df4a32db4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73185d9397a5fe7caf7acb65d1a49df4a32db4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a73185d9397a5fe7caf7acb65d1a49df4a32db4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73185d9397a5fe7caf7acb65d1a49df4a32db4e/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "944420deb0923cc54a6ab86debe4f3cefffeb924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/944420deb0923cc54a6ab86debe4f3cefffeb924",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/944420deb0923cc54a6ab86debe4f3cefffeb924"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "28dbc085044b8093e033e75443c224956b930892",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a73185d9397a5fe7caf7acb65d1a49df4a32db4e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a73185d9397a5fe7caf7acb65d1a49df4a32db4e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a73185d9397a5fe7caf7acb65d1a49df4a32db4e",
        "patch": "@@ -429,15 +429,15 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fConnectToMas\n         // Add node\n         CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false, true);\n \n-        LOCK(cs_vNodes);\n-        vNodes.push_back(pnode);\n-\n         pnode->nTimeConnected = GetTime();\n         if(fConnectToMasternode) {\n             pnode->AddRef();\n             pnode->fMasternode = true;\n         }\n \n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n+\n         return pnode;\n     } else if (!proxyConnectionFailed) {\n         // If connecting to the node failed, and failure is not caused by a problem connecting to"
      }
    ]
  },
  {
    "sha": "cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmM4OTU0YjQyYWQyNzNhMmFhNGZiMGNkZWI4YTBlZDE4MzQzMzMy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-02T08:50:21Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-02T08:50:21Z"
      },
      "message": "Shift PS denoms (#1292)\n\n* Shift PS denoms\r\n\r\n* fix ui PS restrictions",
      "tree": {
        "sha": "647aa8ae6d8b83f4003dc86ef9aef03fcc1de616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/647aa8ae6d8b83f4003dc86ef9aef03fcc1de616"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a73185d9397a5fe7caf7acb65d1a49df4a32db4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a73185d9397a5fe7caf7acb65d1a49df4a32db4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a73185d9397a5fe7caf7acb65d1a49df4a32db4e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "db1faa89089e010e3b520e4faced2343158c70fe",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
        "patch": "@@ -436,12 +436,14 @@ void CDarksendPool::InitDenominations()\n         1DRK+1000 == (.1DRK+100)*10\n         10DRK+10000 == (1DRK+1000)*10\n     */\n+    /* Disabled\n     vecPrivateSendDenominations.push_back( (100      * COIN)+100000 );\n+    */\n     vecPrivateSendDenominations.push_back( (10       * COIN)+10000 );\n     vecPrivateSendDenominations.push_back( (1        * COIN)+1000 );\n     vecPrivateSendDenominations.push_back( (.1       * COIN)+100 );\n-    /* Disabled till we need them\n     vecPrivateSendDenominations.push_back( (.01      * COIN)+10 );\n+    /* Disabled till we need them\n     vecPrivateSendDenominations.push_back( (.001     * COIN)+1 );\n     */\n }"
      },
      {
        "sha": "8444a760c12d66aa6b90da46d06c03a9f0011fc9",
        "filename": "src/darksend.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/darksend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/darksend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.h?ref=cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
        "patch": "@@ -19,7 +19,7 @@ static const int PRIVATESEND_QUEUE_TIMEOUT          = 30;\n static const int PRIVATESEND_SIGNING_TIMEOUT        = 15;\n \n //! minimum peer version accepted by mixing pool\n-static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70204;\n+static const int MIN_PRIVATESEND_PEER_PROTO_VERSION = 70206;\n \n static const CAmount PRIVATESEND_COLLATERAL         = 0.001 * COIN;\n static const CAmount PRIVATESEND_POOL_MAX           = 999.999 * COIN;"
      },
      {
        "sha": "def9a570b59b061cc32238478bc300e1ce60fd21",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
        "patch": "@@ -597,10 +597,9 @@ void OverviewPage::togglePrivateSend(){\n         settings.setValue(\"hasMixed\", \"hasMixed\");\n     }\n     if(!fEnablePrivateSend){\n-        int64_t balance = currentBalance;\n-        float minAmount = 1.49 * COIN;\n-        if(balance < minAmount){\n-            QString strMinAmount(BitcoinUnits::formatWithUnit(nDisplayUnit, minAmount));\n+        CAmount nMinAmount = vecPrivateSendDenominations.back() + PRIVATESEND_COLLATERAL*4;\n+        if(currentBalance < nMinAmount){\n+            QString strMinAmount(BitcoinUnits::formatWithUnit(nDisplayUnit, nMinAmount));\n             QMessageBox::warning(this, tr(\"PrivateSend\"),\n                 tr(\"PrivateSend requires at least %1 to use.\").arg(strMinAmount),\n                 QMessageBox::Ok, QMessageBox::Ok);"
      },
      {
        "sha": "8b2fcf96d4222afa4a08353fae63ff83c0bd62c1",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
        "patch": "@@ -10,7 +10,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70205;\n+static const int PROTOCOL_VERSION = 70206;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;"
      }
    ]
  },
  {
    "sha": "399330d42d39e3d272d8749a11bd2b94f00d979d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTkzMzBkNDJkMzllM2QyNzJkODc0OWExMWJkMmI5NGYwMGQ5Nzlk",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-02T08:50:44Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-02T08:50:44Z"
      },
      "message": "Improve governance syncing efficiency with bloom filter (#1299)\n\n* Use bloom filter for governance vote syncing\r\n\r\nModify masternode-sync to send bloom filters\r\n\r\nCorrectly initialize bloom filter\r\n\r\nSet fUseFilter argument\r\n\r\nIncrease bloom filter size to account for multiple signals\r\n\r\nSet bloom filter parameters\r\n\r\nUse constants for bloom filter parameters\r\n\r\nAdded filter size check\r\n\r\nAdded filter size check in masternode-sync\r\n\r\nUpdate bloom filter\r\n\r\nChanged bloom parameters\r\n\r\n* Bump protocol version\r\n\r\n* Update sync time for inv's\r\n\r\n* Changes based on code review comments\r\n\r\n* Make bloom filter size network dependent\r\n\r\n* Fix network dependent filter parameters\r\n\r\n* Remove unneeded constant definition\r\n\r\n* Move constant definition\r\n\r\n* Add blank line",
      "tree": {
        "sha": "8d09128331ae4f8998d5c2d5b4805e2398d69995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d09128331ae4f8998d5c2d5b4805e2398d69995"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/399330d42d39e3d272d8749a11bd2b94f00d979d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/399330d42d39e3d272d8749a11bd2b94f00d979d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/399330d42d39e3d272d8749a11bd2b94f00d979d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/399330d42d39e3d272d8749a11bd2b94f00d979d/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc8954b42ad273a2aa4fb0cdeb8a0ed18343332"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 69,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c4364465c42db09c878c94b56b4c4f42a30a3135",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399330d42d39e3d272d8749a11bd2b94f00d979d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399330d42d39e3d272d8749a11bd2b94f00d979d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=399330d42d39e3d272d8749a11bd2b94f00d979d",
        "patch": "@@ -84,6 +84,7 @@ class CMainParams : public CChainParams {\n         consensus.nSuperblockStartBlock = 600000; // TODO, the block at which 12.1 goes live.\n         consensus.nSuperblockCycle = 16616; // ~(60*24*30)/2.6, actual number of blocks per month is 200700 / 12 = 16725\n         consensus.nGovernanceMinQuorum = 10;\n+        consensus.nGovernanceFilterElements = 20000;\n         consensus.nMasternodeMinimumConfirmations = 15;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -207,6 +208,7 @@ class CTestNetParams : public CChainParams {\n         consensus.nSuperblockStartBlock = 61000; // NOTE: Should satisfy nSuperblockStartBlock > nBudgetPeymentsStartBlock\n         consensus.nSuperblockCycle = 24; // Superblocks can be issued hourly on testnet\n         consensus.nGovernanceMinQuorum = 1;\n+        consensus.nGovernanceFilterElements = 500;\n         consensus.nMasternodeMinimumConfirmations = 1;\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n@@ -313,6 +315,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nSuperblockStartBlock = 1500;\n         consensus.nSuperblockCycle = 10;\n         consensus.nGovernanceMinQuorum = 1;\n+        consensus.nGovernanceFilterElements = 100;\n         consensus.nMasternodeMinimumConfirmations = 1;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;"
      },
      {
        "sha": "504577f406a3cd2782d048b6ad32a320f0f68654",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399330d42d39e3d272d8749a11bd2b94f00d979d/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399330d42d39e3d272d8749a11bd2b94f00d979d/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=399330d42d39e3d272d8749a11bd2b94f00d979d",
        "patch": "@@ -47,7 +47,8 @@ struct Params {\n     int nBudgetProposalEstablishingTime; // in seconds\n     int nSuperblockStartBlock;\n     int nSuperblockCycle; // in blocks\n-    int nGovernanceMinQuorum; // Min absolute vote count to trigger an action \n+    int nGovernanceMinQuorum; // Min absolute vote count to trigger an action\n+    int nGovernanceFilterElements;\n     int nMasternodeMinimumConfirmations;\n     /** Used to check majorities for block version upgrade */\n     int nMajorityEnforceBlockUpgrade;"
      },
      {
        "sha": "b8e8b31445c9528b69eac9599b9497b0aeb3fb04",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399330d42d39e3d272d8749a11bd2b94f00d979d/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399330d42d39e3d272d8749a11bd2b94f00d979d/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=399330d42d39e3d272d8749a11bd2b94f00d979d",
        "patch": "@@ -25,6 +25,9 @@ class CGovernanceVote;\n \n static const int MAX_GOVERNANCE_OBJECT_DATA_SIZE = 16 * 1024;\n static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70204;\n+static const int GOVERNANCE_FILTER_PROTO_VERSION = 70206;\n+\n+static const double GOVERNANCE_FILTER_FP_RATE = 0.001;\n \n static const int GOVERNANCE_OBJECT_UNKNOWN = 0;\n static const int GOVERNANCE_OBJECT_PROPOSAL = 1;"
      },
      {
        "sha": "8ef883d705a0fc64b1ef465abebfe74b44fea75b",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 5,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399330d42d39e3d272d8749a11bd2b94f00d979d/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399330d42d39e3d272d8749a11bd2b94f00d979d/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=399330d42d39e3d272d8749a11bd2b94f00d979d",
        "patch": "@@ -113,8 +113,18 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         if (!masternodeSync.IsSynced()) return;\n \n         uint256 nProp;\n+        CBloomFilter filter;\n+\n         vRecv >> nProp;\n \n+        if(pfrom->nVersion >= GOVERNANCE_FILTER_PROTO_VERSION) {\n+            vRecv >> filter;\n+            filter.UpdateEmptyFull();\n+        }\n+        else {\n+            filter.clear();\n+        }\n+\n         if(nProp == uint256()) {\n             if(netfulfilledman.HasFulfilledRequest(pfrom->addr, NetMsgType::MNGOVERNANCESYNC)) {\n                 // Asking for the whole list multiple times in a short period of time is no good\n@@ -125,7 +135,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n             netfulfilledman.AddFulfilledRequest(pfrom->addr, NetMsgType::MNGOVERNANCESYNC);\n         }\n \n-        Sync(pfrom, nProp);\n+        Sync(pfrom, nProp, filter);\n         LogPrint(\"gobject\", \"MNGOVERNANCESYNC -- syncing governance objects to our peer at %s\\n\", pfrom->addr.ToString());\n \n     }\n@@ -640,11 +650,14 @@ bool CGovernanceManager::ConfirmInventoryRequest(const CInv& inv)\n         LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest added inv to requested set\\n\");\n     }\n \n+    // Keep sync alive\n+    masternodeSync.AddedGovernanceItem();\n+\n     LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest reached end, returning true\\n\");\n     return true;\n }\n \n-void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n+void CGovernanceManager::Sync(CNode* pfrom, const uint256& nProp, const CBloomFilter& filter)\n {\n \n     /*\n@@ -709,6 +722,9 @@ void CGovernanceManager::Sync(CNode* pfrom, uint256 nProp)\n                 if(!vecVotes[i].IsValid(true)) {\n                     continue;\n                 }\n+                if(filter.contains(vecVotes[i].GetHash())) {\n+                    continue;\n+                }\n                 pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, vecVotes[i].GetHash()));\n                 ++nVoteCount;\n             }\n@@ -927,13 +943,33 @@ void CGovernanceManager::CheckMasternodeOrphanObjects()\n     fRateChecksEnabled = true;\n }\n \n-void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nHash)\n+void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nHash, bool fUseFilter)\n {\n     if(!pfrom) {\n         return;\n     }\n \n-    pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, nHash);\n+    if(pfrom->nVersion < GOVERNANCE_FILTER_PROTO_VERSION) {\n+        pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, nHash);\n+        return;\n+    }\n+\n+    CBloomFilter filter;\n+    filter.clear();\n+\n+    if(fUseFilter) {\n+        CGovernanceObject* pObj = FindGovernanceObject(nHash);\n+\n+        if(pObj) {\n+            filter = CBloomFilter(Params().GetConsensus().nGovernanceFilterElements, GOVERNANCE_FILTER_FP_RATE, GetRandInt(999999), BLOOM_UPDATE_ALL);\n+            std::vector<CGovernanceVote> vecVotes = pObj->GetVoteFile().GetVotes();\n+            for(size_t i = 0; i < vecVotes.size(); ++i) {\n+                filter.insert(vecVotes[i].GetHash());\n+            }\n+        }\n+    }\n+\n+    pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, nHash, filter);\n }\n \n void CGovernanceManager::RequestGovernanceObjectVotes(CNode* pnode)\n@@ -979,7 +1015,7 @@ void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n             vpGovObjsTmp.erase(vpGovObjsTmp.begin() + r);\n         }\n         LogPrintf(\"CGovernanceManager::RequestGovernanceObjectVotes -- Requesting votes for %s, peer=%d\\n\", nHashGovobj.ToString(), pnode->id);\n-        RequestGovernanceObject(pnode, nHashGovobj);\n+        RequestGovernanceObject(pnode, nHashGovobj, true);\n         mapAskedRecently[nHashGovobj] = nNow + mapObjects.size() * 60; // ask again after full cycle\n     }\n }"
      },
      {
        "sha": "99f84a4b5936fffe0ce7565bce54a3ffa60684e3",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399330d42d39e3d272d8749a11bd2b94f00d979d/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399330d42d39e3d272d8749a11bd2b94f00d979d/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=399330d42d39e3d272d8749a11bd2b94f00d979d",
        "patch": "@@ -7,6 +7,7 @@\n \n //#define ENABLE_DASH_DEBUG\n \n+#include \"bloom.h\"\n #include \"cachemap.h\"\n #include \"cachemultimap.h\"\n #include \"chain.h\"\n@@ -271,7 +272,7 @@ class CGovernanceManager\n      */\n     bool ConfirmInventoryRequest(const CInv& inv);\n \n-    void Sync(CNode* node, uint256 nProp);\n+    void Sync(CNode* node, const uint256& nProp, const CBloomFilter& filter);\n \n     void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv);\n \n@@ -379,7 +380,7 @@ class CGovernanceManager\n     void RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy);\n \n private:\n-    void RequestGovernanceObject(CNode* pfrom, const uint256& nHash);\n+    void RequestGovernanceObject(CNode* pfrom, const uint256& nHash, bool fUseFilter = false);\n \n     void AddInvalidVote(const CGovernanceVote& vote)\n     {"
      },
      {
        "sha": "c90067344667541b4afcefdf3440f5dd0f3d21e8",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399330d42d39e3d272d8749a11bd2b94f00d979d/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399330d42d39e3d272d8749a11bd2b94f00d979d/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=399330d42d39e3d272d8749a11bd2b94f00d979d",
        "patch": "@@ -344,8 +344,7 @@ void CMasternodeSync::ProcessTick()\n             } else if(nRequestedMasternodeAttempt < 6) {\n                 int nMnCount = mnodeman.CountMasternodes();\n                 pnode->PushMessage(NetMsgType::MASTERNODEPAYMENTSYNC, nMnCount); //sync payment votes\n-                uint256 n = uint256();\n-                pnode->PushMessage(NetMsgType::MNGOVERNANCESYNC, n); //sync masternode votes\n+                SendGovernanceSyncRequest(pnode);\n             } else {\n                 nRequestedMasternodeAssets = MASTERNODE_SYNC_FINISHED;\n             }\n@@ -497,7 +496,7 @@ void CMasternodeSync::ProcessTick()\n                 if (pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) continue;\n                 nRequestedMasternodeAttempt++;\n \n-                pnode->PushMessage(NetMsgType::MNGOVERNANCESYNC, uint256()); //sync masternode votes\n+                SendGovernanceSyncRequest(pnode);\n \n                 ReleaseNodes(vNodesCopy);\n                 return; //this will cause each peer to get one request each six seconds for the various assets we need\n@@ -508,6 +507,19 @@ void CMasternodeSync::ProcessTick()\n     ReleaseNodes(vNodesCopy);\n }\n \n+void CMasternodeSync::SendGovernanceSyncRequest(CNode* pnode)\n+{\n+    if(pnode->nVersion >= GOVERNANCE_FILTER_PROTO_VERSION) {\n+        CBloomFilter filter;\n+        filter.clear();\n+\n+        pnode->PushMessage(NetMsgType::MNGOVERNANCESYNC, uint256(), filter);\n+    }\n+    else {\n+        pnode->PushMessage(NetMsgType::MNGOVERNANCESYNC, uint256());\n+    }\n+}\n+\n void CMasternodeSync::UpdatedBlockTip(const CBlockIndex *pindex)\n {\n     pCurrentBlockIndex = pindex;"
      },
      {
        "sha": "7f4666dac5d2bcc625c1466603eba3521120520a",
        "filename": "src/masternode-sync.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/399330d42d39e3d272d8749a11bd2b94f00d979d/src/masternode-sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/399330d42d39e3d272d8749a11bd2b94f00d979d/src/masternode-sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.h?ref=399330d42d39e3d272d8749a11bd2b94f00d979d",
        "patch": "@@ -67,6 +67,8 @@ class CMasternodeSync\n     void AddedPaymentVote() { nTimeLastPaymentVote = GetTime(); }\n     void AddedGovernanceItem() { nTimeLastGovernanceItem = GetTime(); };\n \n+    void SendGovernanceSyncRequest(CNode* pnode);\n+\n     bool IsFailed() { return nRequestedMasternodeAssets == MASTERNODE_SYNC_FAILED; }\n     bool IsBlockchainSynced(bool fBlockAccepted = false);\n     bool IsMasternodeListSynced() { return nRequestedMasternodeAssets > MASTERNODE_SYNC_LIST; }"
      }
    ]
  },
  {
    "sha": "1f7b46c2c0a773d51414eb25aa829ed596ab4f56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjdiNDZjMmMwYTc3M2Q1MTQxNGViMjVhYTgyOWVkNTk2YWI0ZjU2",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-02T08:51:02Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-02T08:51:02Z"
      },
      "message": "Restore 5 Dash fee for proposal creation (#1302)",
      "tree": {
        "sha": "a73996b9b6ad44e4b22557e044796e5f17b3bea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a73996b9b6ad44e4b22557e044796e5f17b3bea8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f7b46c2c0a773d51414eb25aa829ed596ab4f56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7b46c2c0a773d51414eb25aa829ed596ab4f56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f7b46c2c0a773d51414eb25aa829ed596ab4f56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7b46c2c0a773d51414eb25aa829ed596ab4f56/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "399330d42d39e3d272d8749a11bd2b94f00d979d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/399330d42d39e3d272d8749a11bd2b94f00d979d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/399330d42d39e3d272d8749a11bd2b94f00d979d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb6c9fa98391ec5678295d0b7862007e82cc450d",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f7b46c2c0a773d51414eb25aa829ed596ab4f56/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f7b46c2c0a773d51414eb25aa829ed596ab4f56/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=1f7b46c2c0a773d51414eb25aa829ed596ab4f56",
        "patch": "@@ -34,7 +34,7 @@ static const int GOVERNANCE_OBJECT_PROPOSAL = 1;\n static const int GOVERNANCE_OBJECT_TRIGGER = 2;\n static const int GOVERNANCE_OBJECT_WATCHDOG = 3;\n \n-static const CAmount GOVERNANCE_PROPOSAL_FEE_TX = (0.33*COIN);\n+static const CAmount GOVERNANCE_PROPOSAL_FEE_TX = (5.0*COIN);\n \n static const int64_t GOVERNANCE_FEE_CONFIRMATIONS = 6;\n static const int64_t GOVERNANCE_UPDATE_MIN = 60*60;"
      }
    ]
  },
  {
    "sha": "c5210a3e5b63e1dde3ab7f800ed4183d08811201",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTIxMGEzZTViNjNlMWRkZTNhYjdmODAwZWQ0MTgzZDA4ODExMjAx",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-02T13:04:45Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-02T13:04:45Z"
      },
      "message": "Adjust gov sync (#1305)\n\n* Adjust gov sync:\r\n- simulate mainnet gov obj sync conditions on testnet\r\n- add redundancy: ask up to 3 peers for the same obj\r\n\r\n* stop loop if max number of peers per obj was asked",
      "tree": {
        "sha": "4cb53f03ca394dd798a81e9f98e0ae3f2ed165ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cb53f03ca394dd798a81e9f98e0ae3f2ed165ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5210a3e5b63e1dde3ab7f800ed4183d08811201",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5210a3e5b63e1dde3ab7f800ed4183d08811201",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5210a3e5b63e1dde3ab7f800ed4183d08811201",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5210a3e5b63e1dde3ab7f800ed4183d08811201/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f7b46c2c0a773d51414eb25aa829ed596ab4f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7b46c2c0a773d51414eb25aa829ed596ab4f56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f7b46c2c0a773d51414eb25aa829ed596ab4f56"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 74,
      "deletions": 23
    },
    "files": [
      {
        "sha": "f4696bbe1fc949bde3f90bb9e1079d898b6ff3fc",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 23,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5210a3e5b63e1dde3ab7f800ed4183d08811201/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5210a3e5b63e1dde3ab7f800ed4183d08811201/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=c5210a3e5b63e1dde3ab7f800ed4183d08811201",
        "patch": "@@ -982,42 +982,93 @@ void CGovernanceManager::RequestGovernanceObjectVotes(CNode* pnode)\n \n void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy)\n {\n-    static std::map<uint256, int64_t> mapAskedRecently;\n+    static std::map<uint256, std::map<CService, int64_t> > mapAskedRecently;\n+\n+    if(vNodesCopy.empty()) return;\n+\n     LOCK2(cs_main, cs);\n+\n+    int64_t nNow = GetTime();\n+    int nTimeout = 60 * 60;\n+    size_t nPeersPerHashMax = 3;\n+\n+    // This should help us to get some idea about an impact this can bring once deployed on mainnet.\n+    // Testnet is ~40 times smaller in masternode count, but only ~1000 masternodes usually vote,\n+    // so 1 obj on mainnet == ~10 objs or ~1000 votes on testnet. However we want to test a higher\n+    // number of votes to make sure it's robust enough, so aim at 2000 votes per masternode per request.\n+    // On mainnet we have 4K+ masternodes, so nMaxObjRequestsPerNode always evaluates to `1`.\n+    size_t nProjectedVotes = 2000;\n+    int nMaxObjRequestsPerNode = std::max(1, int(nProjectedVotes / mnodeman.size()));\n+\n     std::vector<CGovernanceObject*> vpGovObjsTmp;\n     std::vector<CGovernanceObject*> vpGovObjsTriggersTmp;\n-    int64_t nNow = GetTime();\n+\n     for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n-        if(mapAskedRecently.count(it->first) && mapAskedRecently[it->first] > nNow) continue;\n-        if(it->second.nObjectType == GOVERNANCE_OBJECT_TRIGGER)\n+        if(mapAskedRecently.count(it->first)) {\n+            std::map<CService, int64_t>::iterator it1 = mapAskedRecently[it->first].begin();\n+            while(it1 != mapAskedRecently[it->first].end()) {\n+                if(it1->second < nNow) {\n+                    mapAskedRecently[it->first].erase(it1++);\n+                } else {\n+                    ++it1;\n+                }\n+            }\n+            if(mapAskedRecently[it->first].size() >= nPeersPerHashMax) continue;\n+        }\n+        if(it->second.nObjectType == GOVERNANCE_OBJECT_TRIGGER) {\n             vpGovObjsTriggersTmp.push_back(&(it->second));\n-        else\n+        } else {\n             vpGovObjsTmp.push_back(&(it->second));\n+        }\n     }\n-    BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n-        // only use reqular peers, don't try to ask from temporary nodes we connected to -\n-        // they stay connected for a short period of time and it's possible that we won't get everything we should\n-        if(pnode->fMasternode) continue;\n-        // only use up to date peers\n-        if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) continue;\n-        // stop early to prevent setAskFor overflow\n-        if(pnode->setAskFor.size() > SETASKFOR_MAX_SZ/2) continue;\n+\n+    LogPrint(\"governance\", \"CGovernanceManager::RequestGovernanceObjectVotes -- start: vpGovObjsTriggersTmp %d vpGovObjsTmp %d mapAskedRecently %d\\n\",\n+                vpGovObjsTriggersTmp.size(), vpGovObjsTmp.size(), mapAskedRecently.size());\n+\n+    InsecureRand insecureRand;\n+    // shuffle pointers\n+    std::random_shuffle(vpGovObjsTriggersTmp.begin(), vpGovObjsTriggersTmp.end(), insecureRand);\n+    std::random_shuffle(vpGovObjsTmp.begin(), vpGovObjsTmp.end(), insecureRand);\n+\n+    for (int i = 0; i < nMaxObjRequestsPerNode; ++i) {\n         uint256 nHashGovobj;\n+\n         // ask for triggers first\n         if(vpGovObjsTriggersTmp.size()) {\n-            int r = GetRandInt(vpGovObjsTriggersTmp.size());\n-            nHashGovobj = vpGovObjsTriggersTmp[r]->GetHash();\n-            vpGovObjsTriggersTmp.erase(vpGovObjsTriggersTmp.begin() + r);\n+            nHashGovobj = vpGovObjsTriggersTmp.back()->GetHash();\n+        } else {\n+            if(vpGovObjsTmp.empty()) break;\n+            nHashGovobj = vpGovObjsTmp.back()->GetHash();\n+        }\n+        bool fAsked = false;\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n+            // only use reqular peers, don't try to ask from temporary nodes we connected to -\n+            // they stay connected for a short period of time and it's possible that we won't get everything we should\n+            if(pnode->fMasternode) continue;\n+            // only use up to date peers\n+            if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) continue;\n+            // stop early to prevent setAskFor overflow\n+            size_t nProjectedSize = pnode->setAskFor.size() + nProjectedVotes;\n+            if(nProjectedSize > SETASKFOR_MAX_SZ/2) continue;\n+            // to early to ask the same node\n+            if(mapAskedRecently[nHashGovobj].count(pnode->addr)) continue;\n+\n+            RequestGovernanceObject(pnode, nHashGovobj, true);\n+            mapAskedRecently[nHashGovobj][pnode->addr] = nNow + nTimeout;\n+            fAsked = true;\n+            // stop loop if max number of peers per obj was asked\n+            if(mapAskedRecently[nHashGovobj].size() >= nPeersPerHashMax) break;\n+        }\n+        // NOTE: this should match `if` above (the one before `while`)\n+        if(vpGovObjsTriggersTmp.size()) {\n+            vpGovObjsTriggersTmp.pop_back();\n         } else {\n-            if(vpGovObjsTmp.empty()) return;\n-            int r = GetRandInt(vpGovObjsTmp.size());\n-            nHashGovobj = vpGovObjsTmp[r]->GetHash();\n-            vpGovObjsTmp.erase(vpGovObjsTmp.begin() + r);\n+            vpGovObjsTmp.pop_back();\n         }\n-        LogPrintf(\"CGovernanceManager::RequestGovernanceObjectVotes -- Requesting votes for %s, peer=%d\\n\", nHashGovobj.ToString(), pnode->id);\n-        RequestGovernanceObject(pnode, nHashGovobj, true);\n-        mapAskedRecently[nHashGovobj] = nNow + mapObjects.size() * 60; // ask again after full cycle\n+        if(!fAsked) i--;\n     }\n+    LogPrint(\"governance\", \"CGovernanceManager::RequestGovernanceObjectVotes -- end: vpGovObjsTriggersTmp %d vpGovObjsTmp %d mapAskedRecently %d\\n\",\n+                vpGovObjsTriggersTmp.size(), vpGovObjsTmp.size(), mapAskedRecently.size());\n }\n \n bool CGovernanceManager::AcceptObjectMessage(const uint256& nHash)"
      }
    ]
  },
  {
    "sha": "f729d8227be851a7ec9498d6faf84a919e5f9cba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzI5ZDgyMjdiZTg1MWE3ZWM5NDk4ZDZmYWY4NGE5MTllNWY5Y2Jh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-02T13:43:40Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-02T13:43:40Z"
      },
      "message": "bump gov cache version to start from scratch (#1306)",
      "tree": {
        "sha": "53fa73519de2ec70b73ce14afa3380903a03d627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53fa73519de2ec70b73ce14afa3380903a03d627"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f729d8227be851a7ec9498d6faf84a919e5f9cba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f729d8227be851a7ec9498d6faf84a919e5f9cba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f729d8227be851a7ec9498d6faf84a919e5f9cba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f729d8227be851a7ec9498d6faf84a919e5f9cba/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5210a3e5b63e1dde3ab7f800ed4183d08811201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5210a3e5b63e1dde3ab7f800ed4183d08811201",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5210a3e5b63e1dde3ab7f800ed4183d08811201"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35a267372efd3c9e4e674ec2cce414325c6f3c05",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f729d8227be851a7ec9498d6faf84a919e5f9cba/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f729d8227be851a7ec9498d6faf84a919e5f9cba/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=f729d8227be851a7ec9498d6faf84a919e5f9cba",
        "patch": "@@ -20,7 +20,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-7\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-8\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),"
      }
    ]
  },
  {
    "sha": "1486acfb99e015c7abd451fb26e01c32570a4971",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDg2YWNmYjk5ZTAxNWM3YWJkNDUxZmIyNmUwMWMzMjU3MGE0OTcx",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-02T22:38:33Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-02T22:38:33Z"
      },
      "message": "remove IS number of inputs limit, add warning instead (#1308)",
      "tree": {
        "sha": "e55300a940585d9eca8ee1f9da71a0cce539df1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e55300a940585d9eca8ee1f9da71a0cce539df1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1486acfb99e015c7abd451fb26e01c32570a4971",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1486acfb99e015c7abd451fb26e01c32570a4971",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1486acfb99e015c7abd451fb26e01c32570a4971",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1486acfb99e015c7abd451fb26e01c32570a4971/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f729d8227be851a7ec9498d6faf84a919e5f9cba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f729d8227be851a7ec9498d6faf84a919e5f9cba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f729d8227be851a7ec9498d6faf84a919e5f9cba"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 7,
      "deletions": 15
    },
    "files": [
      {
        "sha": "702c97f9e3ca09f1fb90c0991aef149f464c3a68",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1486acfb99e015c7abd451fb26e01c32570a4971/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1486acfb99e015c7abd451fb26e01c32570a4971/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=1486acfb99e015c7abd451fb26e01c32570a4971",
        "patch": "@@ -815,9 +815,8 @@ bool CTxLockRequest::IsValid(bool fRequireUnspent) const\n {\n     if(vout.size() < 1) return false;\n \n-    if(vin.size() > MAX_INPUTS) {\n-        LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Too many inputs: tx=%s\", ToString());\n-        return false;\n+    if(vin.size() > WARN_MANY_INPUTS) {\n+        LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- WARNING: Too many inputs: tx=%s\", ToString());\n     }\n \n     LOCK(cs_main);"
      },
      {
        "sha": "c65e7eadcc3881c1d434f2594bd916e0135abe4f",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1486acfb99e015c7abd451fb26e01c32570a4971/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1486acfb99e015c7abd451fb26e01c32570a4971/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=1486acfb99e015c7abd451fb26e01c32570a4971",
        "patch": "@@ -116,7 +116,7 @@ class CTxLockRequest : public CTransaction\n     int64_t nTimeCreated;\n \n public:\n-    static const int MAX_INPUTS             = 10;\n+    static const int WARN_MANY_INPUTS       = 100;\n \n     CTxLockRequest() :\n         CTransaction(),"
      },
      {
        "sha": "23105963c4264fe92aca842c0b235020553d1206",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1486acfb99e015c7abd451fb26e01c32570a4971/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1486acfb99e015c7abd451fb26e01c32570a4971/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1486acfb99e015c7abd451fb26e01c32570a4971",
        "patch": "@@ -313,10 +313,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                              CClientUIInterface::MSG_ERROR);\n                 return TransactionCreationFailed;\n             }\n-            if(newTx->vin.size() > CTxLockRequest::MAX_INPUTS) {\n-                Q_EMIT message(tr(\"Send Coins\"), tr(\"InstantSend doesn't support transactions with more than %1 inputs.\").arg(CTxLockRequest::MAX_INPUTS),\n-                             CClientUIInterface::MSG_ERROR);\n-                return TransactionCreationFailed;\n+            if(newTx->vin.size() > CTxLockRequest::WARN_MANY_INPUTS) {\n+                Q_EMIT message(tr(\"Send Coins\"), tr(\"Used way too many inputs (>%1) for this InstantSend transaction, fees could be huge.\").arg(CTxLockRequest::WARN_MANY_INPUTS),\n+                             CClientUIInterface::MSG_WARNING);\n             }\n         }\n "
      },
      {
        "sha": "57bfc0d31aee2124f3467651d12a7c219cc96aee",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1486acfb99e015c7abd451fb26e01c32570a4971/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1486acfb99e015c7abd451fb26e01c32570a4971/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1486acfb99e015c7abd451fb26e01c32570a4971",
        "patch": "@@ -2358,9 +2358,6 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n         }\n \n-        if(fUseInstantSend && setCoinsRet.size() > CTxLockRequest::MAX_INPUTS)\n-            return false;\n-\n         return (nValueRet >= nTargetValue);\n     }\n \n@@ -3014,10 +3011,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                         strFailReason = _(\"Insufficient funds.\");\n                     }\n                     if (fUseInstantSend) {\n-                        size_t nMaxInputs = CTxLockRequest::MAX_INPUTS;\n-                        if(setCoins.size() > nMaxInputs) {\n-                            strFailReason += \" \" + strprintf(_(\"InstantSend doesn't support transactions with more than %d inputs.\"), nMaxInputs);\n-                        } else if (nValueIn > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n+                        if (nValueIn > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n                             strFailReason += \" \" + strprintf(_(\"InstantSend doesn't support sending values that high yet. Transactions are currently limited to %1 DASH.\"), sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE));\n                         } else {\n                             // could be not true but most likely that's the reason"
      }
    ]
  },
  {
    "sha": "3840d970276517f5d5da7552892efd55ef478887",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODQwZDk3MDI3NjUxN2Y1ZDVkYTc1NTI4OTJlZmQ1NWVmNDc4ODg3",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-03T09:17:47Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-03T09:17:47Z"
      },
      "message": "Fix division by zero (#1310)\n\n* Fix division by zero\r\n\r\n* Fixes based on code review comments\r\n\r\n* Fix nProjectedVotes value\r\n\r\n* Set nProjectedVotes to 2000",
      "tree": {
        "sha": "8e3e60dd857f85d2c13ee3db890a9bbbaad1e28e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e3e60dd857f85d2c13ee3db890a9bbbaad1e28e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3840d970276517f5d5da7552892efd55ef478887",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3840d970276517f5d5da7552892efd55ef478887",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3840d970276517f5d5da7552892efd55ef478887",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3840d970276517f5d5da7552892efd55ef478887/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1486acfb99e015c7abd451fb26e01c32570a4971",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1486acfb99e015c7abd451fb26e01c32570a4971",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1486acfb99e015c7abd451fb26e01c32570a4971"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c7fad7bc8f3213118ea1687941bf9d7a69fb645f",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3840d970276517f5d5da7552892efd55ef478887/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3840d970276517f5d5da7552892efd55ef478887/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=3840d970276517f5d5da7552892efd55ef478887",
        "patch": "@@ -996,9 +996,12 @@ void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n     // Testnet is ~40 times smaller in masternode count, but only ~1000 masternodes usually vote,\n     // so 1 obj on mainnet == ~10 objs or ~1000 votes on testnet. However we want to test a higher\n     // number of votes to make sure it's robust enough, so aim at 2000 votes per masternode per request.\n-    // On mainnet we have 4K+ masternodes, so nMaxObjRequestsPerNode always evaluates to `1`.\n+    // On mainnet nMaxObjRequestsPerNode is always set to 1.\n+    int nMaxObjRequestsPerNode = 1;\n     size_t nProjectedVotes = 2000;\n-    int nMaxObjRequestsPerNode = std::max(1, int(nProjectedVotes / mnodeman.size()));\n+    if(Params().NetworkIDString() != CBaseChainParams::MAIN) {\n+        nMaxObjRequestsPerNode = std::max(1, int(nProjectedVotes / std::max(1, mnodeman.size())));\n+    }\n \n     std::vector<CGovernanceObject*> vpGovObjsTmp;\n     std::vector<CGovernanceObject*> vpGovObjsTriggersTmp;"
      }
    ]
  },
  {
    "sha": "0ecc7c61eb3bcfb8720fb62717f542c9100f1136",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWNjN2M2MWViM2JjZmI4NzIwZmI2MjcxN2Y1NDJjOTEwMGYxMTM2",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-03T17:41:23Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-03T17:41:22Z"
      },
      "message": "Adjust start of 12.1 superblocks (#1311)",
      "tree": {
        "sha": "a9772ff574f9fab63db552fc8af75e4215829267",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9772ff574f9fab63db552fc8af75e4215829267"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ecc7c61eb3bcfb8720fb62717f542c9100f1136",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ecc7c61eb3bcfb8720fb62717f542c9100f1136",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ecc7c61eb3bcfb8720fb62717f542c9100f1136",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ecc7c61eb3bcfb8720fb62717f542c9100f1136/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3840d970276517f5d5da7552892efd55ef478887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3840d970276517f5d5da7552892efd55ef478887",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3840d970276517f5d5da7552892efd55ef478887"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cad30c9a900a4ae41c71453c9f703c7fd039c1da",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ecc7c61eb3bcfb8720fb62717f542c9100f1136/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ecc7c61eb3bcfb8720fb62717f542c9100f1136/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=0ecc7c61eb3bcfb8720fb62717f542c9100f1136",
        "patch": "@@ -81,7 +81,7 @@ class CMainParams : public CChainParams {\n         consensus.nBudgetPaymentsCycleBlocks = 16616; // ~(60*24*30)/2.6, actual number of blocks per month is 200700 / 12 = 16725\n         consensus.nBudgetPaymentsWindowBlocks = 100;\n         consensus.nBudgetProposalEstablishingTime = 60*60*24;\n-        consensus.nSuperblockStartBlock = 600000; // TODO, the block at which 12.1 goes live.\n+        consensus.nSuperblockStartBlock = 614820; // The block at which 12.1 goes live (end of final 12.0 budget cycle)\n         consensus.nSuperblockCycle = 16616; // ~(60*24*30)/2.6, actual number of blocks per month is 200700 / 12 = 16725\n         consensus.nGovernanceMinQuorum = 10;\n         consensus.nGovernanceFilterElements = 20000;"
      }
    ]
  },
  {
    "sha": "cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWRkMjY5Y2IwY2YzOGViNDBkZDFiODZiNGM2ZDhlYmQ0MTI2ODI2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-04T00:41:18Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-04T00:41:18Z"
      },
      "message": "shift CSV deployment window on mainnet to \"Feb 5th, 2017 - Feb 5th, 2018\" (#1314)",
      "tree": {
        "sha": "0ee26ccf50ceadcd1c666252f626c42ec244b7aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ee26ccf50ceadcd1c666252f626c42ec244b7aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ecc7c61eb3bcfb8720fb62717f542c9100f1136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ecc7c61eb3bcfb8720fb62717f542c9100f1136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ecc7c61eb3bcfb8720fb62717f542c9100f1136"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "87936e1fb9960bf6319fed1caa074d477f290077",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826",
        "patch": "@@ -104,8 +104,8 @@ class CMainParams : public CChainParams {\n \n         // Deployment of BIP68, BIP112, and BIP113.\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1486252800; // Feb 5th, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1517788800; // Feb 5th, 2018\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data."
      }
    ]
  },
  {
    "sha": "636e48b2a8184838ab6af767585fc326e705db33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzZlNDhiMmE4MTg0ODM4YWI2YWY3Njc1ODVmYzMyNmU3MDVkYjMz",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-04T00:41:32Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-04T00:41:32Z"
      },
      "message": "fix off-by-1 bug in DisconnectBlocks (#1313)",
      "tree": {
        "sha": "47f2cf19eddcf4343a86577ffb2a023ed5c18688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47f2cf19eddcf4343a86577ffb2a023ed5c18688"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/636e48b2a8184838ab6af767585fc326e705db33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636e48b2a8184838ab6af767585fc326e705db33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/636e48b2a8184838ab6af767585fc326e705db33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636e48b2a8184838ab6af767585fc326e705db33/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cedd269cb0cf38eb40dd1b86b4c6d8ebd4126826"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8f7dc686c9d8578d379f2e73764c29437ab85451",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/636e48b2a8184838ab6af767585fc326e705db33/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/636e48b2a8184838ab6af767585fc326e705db33/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=636e48b2a8184838ab6af767585fc326e705db33",
        "patch": "@@ -3169,7 +3169,7 @@ bool DisconnectBlocks(int blocks)\n     const CChainParams& chainparams = Params();\n \n     LogPrintf(\"DisconnectBlocks -- Got command to replay %d blocks\\n\", blocks);\n-    for(int i = 0; i <= blocks; i++) {\n+    for(int i = 0; i < blocks; i++) {\n         if(!DisconnectTip(state, chainparams.GetConsensus()) || !state.IsValid()) {\n             return false;\n         }"
      }
    ]
  },
  {
    "sha": "8c6f756362bc32d06a0b7644d92dd448e229af96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzZmNzU2MzYyYmMzMmQwNmEwYjc2NDRkOTJkZDQ0OGUyMjlhZjk2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-04T00:42:04Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-04T00:42:04Z"
      },
      "message": "put some reasonable limits on SPORK_12_RECONSIDER_BLOCKS (#1312)\n\n* put some reasonable limits on SPORK_12_RECONSIDER_BLOCKS\r\n\r\n* 6h -> 24h",
      "tree": {
        "sha": "60f53069ed3018be709159fef4fc16fd7fd04795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60f53069ed3018be709159fef4fc16fd7fd04795"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c6f756362bc32d06a0b7644d92dd448e229af96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c6f756362bc32d06a0b7644d92dd448e229af96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c6f756362bc32d06a0b7644d92dd448e229af96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c6f756362bc32d06a0b7644d92dd448e229af96/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "636e48b2a8184838ab6af767585fc326e705db33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636e48b2a8184838ab6af767585fc326e705db33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/636e48b2a8184838ab6af767585fc326e705db33"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b161527020649955a9bc40cd6f0279ac2f7835b2",
        "filename": "src/spork.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c6f756362bc32d06a0b7644d92dd448e229af96/src/spork.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c6f756362bc32d06a0b7644d92dd448e229af96/src/spork.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spork.cpp?ref=8c6f756362bc32d06a0b7644d92dd448e229af96",
        "patch": "@@ -75,9 +75,28 @@ void CSporkManager::ExecuteSpork(int nSporkID, int nValue)\n {\n     //correct fork via spork technology\n     if(nSporkID == SPORK_12_RECONSIDER_BLOCKS && nValue > 0) {\n+        // allow to reprocess 24h of blocks max, which should be enough to resolve any issues\n+        int64_t nMaxBlocks = 576;\n+        // this potentially can be a heavy operation, so only allow this to be executed once per 10 minutes\n+        int64_t nTimeout = 10 * 60;\n+\n+        static int64_t nTimeExecuted = 0; // i.e. it was never executed before\n+\n+        if(GetTime() - nTimeExecuted < nTimeout) {\n+            LogPrint(\"spork\", \"CSporkManager::ExecuteSpork -- ERROR: Trying to reconsider blocks, too soon - %d/%d\\n\", GetTime() - nTimeExecuted, nTimeout);\n+            return;\n+        }\n+\n+        if(nValue > nMaxBlocks) {\n+            LogPrintf(\"CSporkManager::ExecuteSpork -- ERROR: Trying to reconsider too many blocks %d/%d\\n\", nValue, nMaxBlocks);\n+            return;\n+        }\n+\n+\n         LogPrintf(\"CSporkManager::ExecuteSpork -- Reconsider Last %d Blocks\\n\", nValue);\n \n         ReprocessBlocks(nValue);\n+        nTimeExecuted = GetTime();\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "bd3978fd4b6ca502af87938779f1c21205a6cb2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDM5NzhmZDRiNmNhNTAyYWY4NzkzODc3OWYxYzIxMjA1YTZjYjJi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-04T18:17:45Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-04T18:17:45Z"
      },
      "message": "Fix IS vote expiration/cleanup: (#1316)\n\n- vote should be removed when corresponding orphan vote expires\r\n- fix CInstantSend::SyncTransaction: mapTxLockVotes is indexed by vote hash, not by tx hash (use votes from candidates and from orhpan vote map to avoid looping through the whole vote map)",
      "tree": {
        "sha": "ee40a88ad4ffeacde0f98496d387867b9e3e90ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee40a88ad4ffeacde0f98496d387867b9e3e90ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd3978fd4b6ca502af87938779f1c21205a6cb2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd3978fd4b6ca502af87938779f1c21205a6cb2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd3978fd4b6ca502af87938779f1c21205a6cb2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd3978fd4b6ca502af87938779f1c21205a6cb2b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c6f756362bc32d06a0b7644d92dd448e229af96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c6f756362bc32d06a0b7644d92dd448e229af96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c6f756362bc32d06a0b7644d92dd448e229af96"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 44,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8c8bb1a5ab71331cef2a3bf1dc5fa38f5445c9b6",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 8,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd3978fd4b6ca502af87938779f1c21205a6cb2b/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd3978fd4b6ca502af87938779f1c21205a6cb2b/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=bd3978fd4b6ca502af87938779f1c21205a6cb2b",
        "patch": "@@ -623,6 +623,7 @@ void CInstantSend::CheckAndRemove()\n         if(GetTime() - itOrphanVote->second.GetTimeCreated() > ORPHAN_VOTE_SECONDS) {\n             LogPrint(\"instantsend\", \"CInstantSend::CheckAndRemove -- Removing expired orphan vote: txid=%s  masternode=%s\\n\",\n                     itOrphanVote->second.GetTxHash().ToString(), itOrphanVote->second.GetMasternodeOutpoint().ToStringShort());\n+            mapTxLockVotes.erase(itOrphanVote->first);\n             mapTxLockVotesOrphan.erase(itOrphanVote++);\n         } else {\n             ++itOrphanVote;\n@@ -796,16 +797,38 @@ void CInstantSend::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n         LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d lock candidate updated\\n\",\n                 txHash.ToString(), nHeightNew);\n         itLockCandidate->second.SetConfirmedHeight(nHeightNew);\n+        // Loop through outpoint locks\n+        std::map<COutPoint, COutPointLock>::iterator itOutpointLock = itLockCandidate->second.mapOutPointLocks.begin();\n+        while(itOutpointLock != itLockCandidate->second.mapOutPointLocks.end()) {\n+            // Check corresponding lock votes\n+            std::vector<CTxLockVote> vVotes = itOutpointLock->second.GetVotes();\n+            std::vector<CTxLockVote>::iterator itVote = vVotes.begin();\n+            std::map<uint256, CTxLockVote>::iterator it;\n+            while(itVote != vVotes.end()) {\n+                uint256 nVoteHash = itVote->GetHash();\n+                LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d vote %s updated\\n\",\n+                        txHash.ToString(), nHeightNew, nVoteHash.ToString());\n+                it = mapTxLockVotes.find(nVoteHash);\n+                if(it != mapTxLockVotes.end()) {\n+                    it->second.SetConfirmedHeight(nHeightNew);\n+                }\n+                ++itVote;\n+            }\n+            ++itOutpointLock;\n+        }\n     }\n \n-    // Check lock votes\n-    std::map<uint256, CTxLockVote>::iterator itVote = mapTxLockVotes.find(txHash);\n-    if(itVote != mapTxLockVotes.end()) {\n-        LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d vote %s updated\\n\",\n-                txHash.ToString(), nHeightNew, itVote->second.GetHash().ToString());\n-        itVote->second.SetConfirmedHeight(nHeightNew);\n+    // check orphan votes\n+    std::map<uint256, CTxLockVote>::iterator itOrphanVote = mapTxLockVotesOrphan.begin();\n+    while(itOrphanVote != mapTxLockVotesOrphan.end()) {\n+        if(itOrphanVote->second.GetTxHash() == txHash) {\n+            LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d vote %s updated\\n\",\n+                    txHash.ToString(), nHeightNew, itOrphanVote->first.ToString());\n+            mapTxLockVotes[itOrphanVote->first].SetConfirmedHeight(nHeightNew);\n+        }\n+        ++itOrphanVote;\n     }\n- }\n+}\n \n //\n // CTxLockRequest\n@@ -1037,7 +1060,18 @@ bool COutPointLock::AddVote(const CTxLockVote& vote)\n     return true;\n }\n \n-bool COutPointLock::HasMasternodeVoted(const COutPoint& outpointMasternodeIn)\n+std::vector<CTxLockVote> COutPointLock::GetVotes() const\n+{\n+    std::vector<CTxLockVote> vRet;\n+    std::map<COutPoint, CTxLockVote>::const_iterator itVote = mapMasternodeVotes.begin();\n+    while(itVote != mapMasternodeVotes.end()) {\n+        vRet.push_back(itVote->second);\n+        ++itVote;\n+    }\n+    return vRet;\n+}\n+\n+bool COutPointLock::HasMasternodeVoted(const COutPoint& outpointMasternodeIn) const\n {\n     return mapMasternodeVotes.count(outpointMasternodeIn);\n }"
      },
      {
        "sha": "d59abca4c3f3c5b8d1a6a1f29b1984b318533581",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd3978fd4b6ca502af87938779f1c21205a6cb2b/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd3978fd4b6ca502af87938779f1c21205a6cb2b/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=bd3978fd4b6ca502af87938779f1c21205a6cb2b",
        "patch": "@@ -208,7 +208,8 @@ class COutPointLock\n     COutPoint GetOutpoint() const { return outpoint; }\n \n     bool AddVote(const CTxLockVote& vote);\n-    bool HasMasternodeVoted(const COutPoint& outpointMasternodeIn);\n+    std::vector<CTxLockVote> GetVotes() const;\n+    bool HasMasternodeVoted(const COutPoint& outpointMasternodeIn) const;\n     int CountVotes() const { return mapMasternodeVotes.size(); }\n     bool IsReady() const { return CountVotes() >= SIGNATURES_REQUIRED; }\n "
      }
    ]
  },
  {
    "sha": "1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDQ1MDIzZjNlYTlkNzdlNTZjZmRkMzFlNmVhMmRkODNkNTEyMmFj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-04T18:47:38Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-04T18:47:38Z"
      },
      "message": "assert on Release (#1317)",
      "tree": {
        "sha": "d078e6a1be97c2cbae243d0c7bc092c3b1315cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d078e6a1be97c2cbae243d0c7bc092c3b1315cdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd3978fd4b6ca502af87938779f1c21205a6cb2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd3978fd4b6ca502af87938779f1c21205a6cb2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd3978fd4b6ca502af87938779f1c21205a6cb2b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a39577b12ebfa59b5834cb78eb0e7c3a943c99d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac",
        "patch": "@@ -480,6 +480,7 @@ class CNode\n     void Release()\n     {\n         nRefCount--;\n+        assert(nRefCount >= 0);\n     }\n \n "
      }
    ]
  },
  {
    "sha": "5520bf6895326c833d74bc2a78b1a65647c871cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTIwYmY2ODk1MzI2YzgzM2Q3NGJjMmE3OGIxYTY1NjQ3Yzg3MWNk",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-05T09:24:34Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-05T09:24:34Z"
      },
      "message": "Masternode index rebuild bug fix (#1318)\n\n* Clear old masternode index after vote map rebuild\r\n\r\n* Add masternode index size to CMasternodeMan::ToString",
      "tree": {
        "sha": "3e78c45fdfc929b93d19db7f0a19126405f36e63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e78c45fdfc929b93d19db7f0a19126405f36e63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5520bf6895326c833d74bc2a78b1a65647c871cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5520bf6895326c833d74bc2a78b1a65647c871cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5520bf6895326c833d74bc2a78b1a65647c871cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5520bf6895326c833d74bc2a78b1a65647c871cd/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d45023f3ea9d77e56cfdd31e6ea2dd83d5122ac"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fe816b4a53d85a42ee0da678b1548238cd614d32",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5520bf6895326c833d74bc2a78b1a65647c871cd/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5520bf6895326c833d74bc2a78b1a65647c871cd/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=5520bf6895326c833d74bc2a78b1a65647c871cd",
        "patch": "@@ -1115,9 +1115,12 @@ int CGovernanceManager::GetMasternodeIndex(const CTxIn& masternodeVin)\n     LOCK(cs);\n     bool fIndexRebuilt = false;\n     int nMNIndex = mnodeman.GetMasternodeIndex(masternodeVin, fIndexRebuilt);\n-    while(fIndexRebuilt) {\n+    if(fIndexRebuilt) {\n         RebuildVoteMaps();\n         nMNIndex = mnodeman.GetMasternodeIndex(masternodeVin, fIndexRebuilt);\n+        if(fIndexRebuilt) {\n+            LogPrintf(\"CGovernanceManager::GetMasternodeIndex -- WARNING: vote map rebuild failed\\n\");\n+        }\n     }\n     return nMNIndex;\n }\n@@ -1127,6 +1130,7 @@ void CGovernanceManager::RebuildVoteMaps()\n     for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n         it->second.RebuildVoteMap();\n     }\n+    mnodeman.ClearOldMasternodeIndex();\n }\n \n void CGovernanceManager::AddCachedTriggers()"
      },
      {
        "sha": "42c9e1e1408bfa789df9be9d6362e221f0687a02",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5520bf6895326c833d74bc2a78b1a65647c871cd/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5520bf6895326c833d74bc2a78b1a65647c871cd/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=5520bf6895326c833d74bc2a78b1a65647c871cd",
        "patch": "@@ -1362,6 +1362,7 @@ std::string CMasternodeMan::ToString() const\n             \", peers who asked us for Masternode list: \" << (int)mAskedUsForMasternodeList.size() <<\n             \", peers we asked for Masternode list: \" << (int)mWeAskedForMasternodeList.size() <<\n             \", entries in Masternode list we asked for: \" << (int)mWeAskedForMasternodeListEntry.size() <<\n+            \", masternode index size: \" << indexMasternodes.GetSize() <<\n             \", nDsqCount: \" << (int)nDsqCount;\n \n     return info.str();"
      }
    ]
  },
  {
    "sha": "8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGU3OTIyOTFhNmU5ZmU3YjRhNWE1ZTc2OTZlNWZjYzM3ZDA5Y2Jk",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-05T16:45:36Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-05T16:45:36Z"
      },
      "message": "Add a mutex lock to protect CNode::nRefCount (#1321)\n\n* Add a mutex lock to protect CNode::nRefCount\r\n\r\n* Added logging statement for CNode removal",
      "tree": {
        "sha": "4ea9d8f81b6306e4d8f5f767ca05d68fd50d8ce2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ea9d8f81b6306e4d8f5f767ca05d68fd50d8ce2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5520bf6895326c833d74bc2a78b1a65647c871cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5520bf6895326c833d74bc2a78b1a65647c871cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5520bf6895326c833d74bc2a78b1a65647c871cd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b9634b2e00f095e39c03e620ec623c7630a4328f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
        "patch": "@@ -1050,6 +1050,9 @@ void ThreadSocketHandler()\n                 if (pnode->fDisconnect ||\n                     (pnode->GetRefCount() <= 0 && pnode->vRecvMsg.empty() && pnode->nSendSize == 0 && pnode->ssSend.empty()))\n                 {\n+                    LogPrintf(\"ThreadSocketHandler -- removing node: peer=%d addr=%s nRefCount=%d fNetworkNode=%d fInbound=%d fMasternode=%d\\n\",\n+                              pnode->id, pnode->addr.ToString(), pnode->GetRefCount(), pnode->fNetworkNode, pnode->fInbound, pnode->fMasternode);\n+\n                     // remove from vNodes\n                     vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n "
      },
      {
        "sha": "76bf4901b658c0d39dde047c3652ade80de474ea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
        "patch": "@@ -436,6 +436,8 @@ class CNode\n     static uint64_t nMaxOutboundLimit;\n     static uint64_t nMaxOutboundTimeframe;\n \n+    CCriticalSection cs_nRefCount;\n+\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n@@ -447,6 +449,7 @@ class CNode\n \n     int GetRefCount()\n     {\n+        LOCK(cs_nRefCount);\n         assert(nRefCount >= 0);\n         return nRefCount;\n     }\n@@ -473,12 +476,14 @@ class CNode\n \n     CNode* AddRef()\n     {\n+        LOCK(cs_nRefCount);\n         nRefCount++;\n         return this;\n     }\n \n     void Release()\n     {\n+        LOCK(cs_nRefCount);\n         nRefCount--;\n         assert(nRefCount >= 0);\n     }"
      }
    ]
  },
  {
    "sha": "56971f8da1e038041cb02959b8d7307bcbbaffee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Njk3MWY4ZGExZTAzODA0MWNiMDI5NTliOGQ3MzA3YmNiYmFmZmVl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-05T21:29:23Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-05T21:29:23Z"
      },
      "message": "Fix CMasternodeConfig::read (#1322)\n\nCService fails to initialize correctly on Windows for whatever reason,\r\nreplacing this functionality with SplitHostPort call.",
      "tree": {
        "sha": "caea8eba685ac6ad25d1d1cbf4753f0df6a908b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caea8eba685ac6ad25d1d1cbf4753f0df6a908b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56971f8da1e038041cb02959b8d7307bcbbaffee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56971f8da1e038041cb02959b8d7307bcbbaffee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56971f8da1e038041cb02959b8d7307bcbbaffee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56971f8da1e038041cb02959b8d7307bcbbaffee/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8de792291a6e9fe7b4a5a5e7696e5fcc37d09cbd"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5813109ff42e33586eae93c6da811754415cc717",
        "filename": "src/masternodeconfig.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56971f8da1e038041cb02959b8d7307bcbbaffee/src/masternodeconfig.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56971f8da1e038041cb02959b8d7307bcbbaffee/src/masternodeconfig.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeconfig.cpp?ref=56971f8da1e038041cb02959b8d7307bcbbaffee",
        "patch": "@@ -1,8 +1,7 @@\n \n-#include \"net.h\"\n+#include \"netbase.h\"\n #include \"masternodeconfig.h\"\n #include \"util.h\"\n-#include \"ui_interface.h\"\n #include \"chainparams.h\"\n \n #include <boost/filesystem.hpp>\n@@ -56,16 +55,26 @@ bool CMasternodeConfig::read(std::string& strErr) {\n             }\n         }\n \n+        int port = 0;\n+        std::string hostname = \"\";\n+        SplitHostPort(ip, port, hostname);\n+        if(port == 0 || hostname == \"\") {\n+            strErr = _(\"Failed to parse host:port string\") + \"\\n\"+\n+                    strprintf(_(\"Line: %d\"), linenumber) + \"\\n\\\"\" + line + \"\\\"\";\n+            streamConfig.close();\n+            return false;\n+        }\n         int mainnetDefaultPort = Params(CBaseChainParams::MAIN).GetDefaultPort();\n         if(Params().NetworkIDString() == CBaseChainParams::MAIN) {\n-            if(CService(ip).GetPort() != mainnetDefaultPort) {\n+            if(port != mainnetDefaultPort) {\n                 strErr = _(\"Invalid port detected in masternode.conf\") + \"\\n\" +\n+                        strprintf(_(\"Port: %d\"), port) + \"\\n\" +\n                         strprintf(_(\"Line: %d\"), linenumber) + \"\\n\\\"\" + line + \"\\\"\" + \"\\n\" +\n                         strprintf(_(\"(must be %d for mainnet)\"), mainnetDefaultPort);\n                 streamConfig.close();\n                 return false;\n             }\n-        } else if(CService(ip).GetPort() == mainnetDefaultPort) {\n+        } else if(port == mainnetDefaultPort) {\n             strErr = _(\"Invalid port detected in masternode.conf\") + \"\\n\" +\n                     strprintf(_(\"Line: %d\"), linenumber) + \"\\n\\\"\" + line + \"\\\"\" + \"\\n\" +\n                     strprintf(_(\"(%d could be used only on mainnet)\"), mainnetDefaultPort);"
      }
    ]
  },
  {
    "sha": "fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWNiM2U0ZmU2NDFjMDQ5MWU2YjZiYjliZjhhMGM0YTk2MDMzOTZj",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-09T05:29:00Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-09T05:29:00Z"
      },
      "message": "Fix some uninitialized variables in dash-qt (#1324)\n\n* Fix uninitialized variables in WalletModel\r\n\r\n* Fix uninitialized variable on overviewpage startup",
      "tree": {
        "sha": "de76a794d70a3596c4591328367e701b638e3768",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de76a794d70a3596c4591328367e701b638e3768"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56971f8da1e038041cb02959b8d7307bcbbaffee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56971f8da1e038041cb02959b8d7307bcbbaffee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56971f8da1e038041cb02959b8d7307bcbbaffee"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ee4c47fd4146b5e0c3f1fa42cb058f807a39bf92",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
        "patch": "@@ -271,6 +271,8 @@ void OverviewPage::setWalletModel(WalletModel *model)\n     this->walletModel = model;\n     if(model && model->getOptionsModel())\n     {\n+        // update the display unit, to not use the default (\"DASH\")\n+        updateDisplayUnit();\n         // Keep up to date with wallet\n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(), model->getAnonymizedBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n@@ -290,9 +292,6 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         updateWatchOnlyLabels(model->haveWatchOnly());\n         connect(model, SIGNAL(notifyWatchonlyChanged(bool)), this, SLOT(updateWatchOnlyLabels(bool)));\n     }\n-\n-    // update the display unit, to not use the default (\"DASH\")\n-    updateDisplayUnit();\n }\n \n void OverviewPage::updateDisplayUnit()\n@@ -671,4 +670,4 @@ void OverviewPage::DisablePrivateSendCompletely() {\n         ui->labelPrivateSendEnabled->setText(\"<span style='color:red;'>(\" + tr(\"Disabled\") + \")</span>\");\n     }\n     fEnablePrivateSend = false;\n-}\n\\ No newline at end of file\n+}"
      },
      {
        "sha": "d7fc3601e0c555fd9d536200115b685066094f69",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
        "patch": "@@ -36,9 +36,17 @@ WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, Op\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n-    cachedBalance(0), cachedUnconfirmedBalance(0), cachedImmatureBalance(0),\n+    cachedBalance(0),\n+    cachedUnconfirmedBalance(0),\n+    cachedImmatureBalance(0),\n+    cachedAnonymizedBalance(0),\n+    cachedWatchOnlyBalance(0),\n+    cachedWatchUnconfBalance(0),\n+    cachedWatchImmatureBalance(0),\n     cachedEncryptionStatus(Unencrypted),\n-    cachedNumBlocks(0)\n+    cachedNumBlocks(0),\n+    cachedTxLocks(0),\n+    cachedPrivateSendRounds(0)\n {\n     fHaveWatchOnly = wallet->HaveWatchOnly();\n     fForceCheckBalanceChanged = false;"
      }
    ]
  },
  {
    "sha": "b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmJlOTY4YzJmZDVmNjA5YzM1ZjVmNmUxNWNhYWIxZjFhMDRkOThh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-10T00:51:47Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-10T00:51:47Z"
      },
      "message": "Fix rpc (#1325)\n\n* no wallet passphrase in masternode(broadcast) and darksend rpc\r\n\r\n* spork values are int64",
      "tree": {
        "sha": "be20234743a35216a6be075be7e79e404f7168e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be20234743a35216a6be075be7e79e404f7168e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fecb3e4fe641c0491e6b6bb9bf8a0c4a9603396c"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4f10fd540ffeb1ff0077c98b3dea3f22feafb6a5",
        "filename": "src/rpcmasternode.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a/src/rpcmasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a/src/rpcmasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmasternode.cpp?ref=b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
        "patch": "@@ -31,11 +31,13 @@ UniValue privatesend(const UniValue& params, bool fHelp)\n             \"  start       - Start mixing\\n\"\n             \"  stop        - Stop mixing\\n\"\n             \"  reset       - Reset mixing\\n\"\n-            + HelpRequiringPassphrase());\n+            );\n \n     if(params[0].get_str() == \"start\") {\n-        if (pwalletMain->IsLocked(true))\n-            throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+        {\n+            LOCK(pwalletMain->cs_wallet);\n+            EnsureWalletIsUnlocked();\n+        }\n \n         if(fMasterNode)\n             return \"Mixing is not supported from masternodes\";\n@@ -103,11 +105,10 @@ UniValue masternode(const UniValue& params, bool fHelp)\n          strCommand != \"debug\" && strCommand != \"current\" && strCommand != \"winner\" && strCommand != \"winners\" && strCommand != \"genkey\" &&\n          strCommand != \"connect\" && strCommand != \"outputs\" && strCommand != \"status\"))\n             throw std::runtime_error(\n-                \"masternode \\\"command\\\"... ( \\\"passphrase\\\" )\\n\"\n+                \"masternode \\\"command\\\"...\\n\"\n                 \"Set of commands to execute masternode related actions\\n\"\n                 \"\\nArguments:\\n\"\n                 \"1. \\\"command\\\"        (string or set of strings, required) The command to execute\\n\"\n-                \"2. \\\"passphrase\\\"     (string, optional) The wallet passphrase\\n\"\n                 \"\\nAvailable commands:\\n\"\n                 \"  count        - Print number of all known masternodes (optional: 'ps', 'enabled', 'all', 'qualify')\\n\"\n                 \"  current      - Print info on current masternode winner to be paid the next block (calculated locally)\\n\"\n@@ -572,17 +573,16 @@ UniValue masternodebroadcast(const UniValue& params, bool fHelp)\n     if (fHelp  ||\n         (strCommand != \"create-alias\" && strCommand != \"create-all\" && strCommand != \"decode\" && strCommand != \"relay\"))\n         throw std::runtime_error(\n-                \"masternodebroadcast \\\"command\\\"... ( \\\"passphrase\\\" )\\n\"\n+                \"masternodebroadcast \\\"command\\\"...\\n\"\n                 \"Set of commands to create and relay masternode broadcast messages\\n\"\n                 \"\\nArguments:\\n\"\n                 \"1. \\\"command\\\"        (string or set of strings, required) The command to execute\\n\"\n-                \"2. \\\"passphrase\\\"     (string, optional) The wallet passphrase\\n\"\n                 \"\\nAvailable commands:\\n\"\n                 \"  create-alias  - Create single remote masternode broadcast message by assigned alias configured in masternode.conf\\n\"\n                 \"  create-all    - Create remote masternode broadcast messages for all masternodes configured in masternode.conf\\n\"\n                 \"  decode        - Decode masternode broadcast message\\n\"\n                 \"  relay         - Relay masternode broadcast message to the network\\n\"\n-                + HelpRequiringPassphrase());\n+                );\n \n     if (strCommand == \"create-alias\")\n     {"
      },
      {
        "sha": "5f4ce18ff5fbd1e3b1754e1c33b3bb5fd9a6400d",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
        "patch": "@@ -242,7 +242,7 @@ UniValue spork(const UniValue& params, bool fHelp)\n         }\n \n         // SPORK VALUE\n-        int64_t nValue = params[1].get_int();\n+        int64_t nValue = params[1].get_int64();\n \n         //broadcast new spork\n         if(sporkManager.UpdateSpork(nSporkID, nValue)){"
      }
    ]
  },
  {
    "sha": "4fcc766a297bd892d4c083312ec88fc84597cbf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmNjNzY2YTI5N2JkODkyZDRjMDgzMzEyZWM4OGZjODQ1OTdjYmY2",
    "commit": {
      "author": {
        "name": "taw00",
        "email": "t0dd+gh@protonmail.com",
        "date": "2017-02-10T00:52:01Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-10T00:52:01Z"
      },
      "message": "The denominations changed with 12.1 - Fixed how messaged in the help text. (#1327)",
      "tree": {
        "sha": "34abbd44ca2fb7e2debce9d63f4614ef414fa557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34abbd44ca2fb7e2debce9d63f4614ef414fa557"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fcc766a297bd892d4c083312ec88fc84597cbf6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fcc766a297bd892d4c083312ec88fc84597cbf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fcc766a297bd892d4c083312ec88fc84597cbf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fcc766a297bd892d4c083312ec88fc84597cbf6/comments",
    "author": {
      "login": "taw00",
      "id": 6908872,
      "node_id": "MDQ6VXNlcjY5MDg4NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6908872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/taw00",
      "html_url": "https://github.com/taw00",
      "followers_url": "https://api.github.com/users/taw00/followers",
      "following_url": "https://api.github.com/users/taw00/following{/other_user}",
      "gists_url": "https://api.github.com/users/taw00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/taw00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/taw00/subscriptions",
      "organizations_url": "https://api.github.com/users/taw00/orgs",
      "repos_url": "https://api.github.com/users/taw00/repos",
      "events_url": "https://api.github.com/users/taw00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/taw00/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6be968c2fd5f609c35f5f6e15caab1f1a04d98a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "74cf8a44ab65380dd5ba30ae282cc4cbf4558d57",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fcc766a297bd892d4c083312ec88fc84597cbf6/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fcc766a297bd892d4c083312ec88fc84597cbf6/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=4fcc766a297bd892d4c083312ec88fc84597cbf6",
        "patch": "@@ -141,7 +141,7 @@ You retain control of your money at all times..<hr> \\\n <b>The PrivateSend process works like this:</b>\\\n <ol type=\\\"1\\\"> \\\n <li>PrivateSend begins by breaking your transaction inputs down into standard denominations. \\\n-These denominations are 0.1 DASH, 1 DASH, 10 DASH, and 100 DASH--sort of like the paper money you use every day.</li> \\\n+These denominations are 0.01 DASH, 0.1 DASH, 1 DASH, and 10 DASH--sort of like the paper money you use every day.</li> \\\n <li>Your wallet then sends requests to specially configured software nodes on the network, called \\\"masternodes.\\\" \\\n These masternodes are informed then that you are interested in mixing a certain denomination. \\\n No identifiable information is sent to the masternodes, so they never know \\\"who\\\" you are.</li> \\"
      }
    ]
  },
  {
    "sha": "0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjU0YWI4NWM4OTgyN2M3YjJjMGU4OGFkMWRhZjZmYjJjNzE0YmY4",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-10T00:56:52Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-10T00:56:52Z"
      },
      "message": "Fix locking issues in dash-qt masternodelist (#1328)\n\n* Add last ping time to masternode_info_t\r\n\r\n* Use thread safe functions to access mnodeman in masternodelist.cpp\r\n\r\n* Fix masternodelist widget locking\r\n\r\n* Protect access to widget data from StartAlias button",
      "tree": {
        "sha": "2854ca24978511bffa8b57347b73aeef14d24c59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2854ca24978511bffa8b57347b73aeef14d24c59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fcc766a297bd892d4c083312ec88fc84597cbf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fcc766a297bd892d4c083312ec88fc84597cbf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fcc766a297bd892d4c083312ec88fc84597cbf6"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 55,
      "deletions": 28
    },
    "files": [
      {
        "sha": "aeda9562aa636ef5989eb6b4ac9d1fddc29beb5f",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
        "patch": "@@ -323,6 +323,7 @@ masternode_info_t CMasternode::GetInfo()\n     info.nTimeLastChecked = nTimeLastChecked;\n     info.nTimeLastPaid = nTimeLastPaid;\n     info.nTimeLastWatchdogVote = nTimeLastWatchdogVote;\n+    info.nTimeLastPing = lastPing.sigTime;\n     info.nActiveState = nActiveState;\n     info.nProtocolVersion = nProtocolVersion;\n     info.fInfoValid = true;"
      },
      {
        "sha": "9e12965184714329b2b66ec2faef4a5a95beb292",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
        "patch": "@@ -112,6 +112,7 @@ struct masternode_info_t\n           nTimeLastChecked(0),\n           nTimeLastPaid(0),\n           nTimeLastWatchdogVote(0),\n+          nTimeLastPing(0),\n           nActiveState(0),\n           nProtocolVersion(0),\n           fInfoValid(false)\n@@ -126,6 +127,7 @@ struct masternode_info_t\n     int64_t nTimeLastChecked;\n     int64_t nTimeLastPaid;\n     int64_t nTimeLastWatchdogVote;\n+    int64_t nTimeLastPing;\n     int nActiveState;\n     int nProtocolVersion;\n     bool fInfoValid;"
      },
      {
        "sha": "42313c4ac9b93e747d1227d9fbbe7d64bcb3655a",
        "filename": "src/qt/masternodelist.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 26,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/qt/masternodelist.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/qt/masternodelist.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.cpp?ref=0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
        "patch": "@@ -15,8 +15,6 @@\n #include <QTimer>\n #include <QMessageBox>\n \n-CCriticalSection cs_masternodes;\n-\n MasternodeList::MasternodeList(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),\n     ui(new Ui::MasternodeList),\n@@ -132,10 +130,14 @@ void MasternodeList::StartAll(std::string strCommand)\n         std::string strError;\n         CMasternodeBroadcast mnb;\n \n-        CTxIn txin = CTxIn(uint256S(mne.getTxHash()), uint32_t(atoi(mne.getOutputIndex().c_str())));\n-        CMasternode *pmn = mnodeman.Find(txin);\n+        int32_t nOutputIndex = 0;\n+        if(!ParseInt32(mne.getOutputIndex(), &nOutputIndex)) {\n+            continue;\n+        }\n+\n+        CTxIn txin = CTxIn(uint256S(mne.getTxHash()), nOutputIndex);\n \n-        if(strCommand == \"start-missing\" && pmn) continue;\n+        if(strCommand == \"start-missing\" && mnodeman.Has(txin)) continue;\n \n         bool fSuccess = CMasternodeBroadcast::Create(mne.getIp(), mne.getPrivKey(), mne.getTxHash(), mne.getOutputIndex(), strError, mnb);\n \n@@ -164,9 +166,8 @@ void MasternodeList::StartAll(std::string strCommand)\n     updateMyNodeList(true);\n }\n \n-void MasternodeList::updateMyMasternodeInfo(QString strAlias, QString strAddr, CMasternode *pmn)\n+void MasternodeList::updateMyMasternodeInfo(QString strAlias, QString strAddr, masternode_info_t& infoMn)\n {\n-    LOCK(cs_mnlistupdate);\n     bool fOldRowFound = false;\n     int nNewRow = 0;\n \n@@ -184,12 +185,13 @@ void MasternodeList::updateMyMasternodeInfo(QString strAlias, QString strAddr, C\n     }\n \n     QTableWidgetItem *aliasItem = new QTableWidgetItem(strAlias);\n-    QTableWidgetItem *addrItem = new QTableWidgetItem(pmn ? QString::fromStdString(pmn->addr.ToString()) : strAddr);\n-    QTableWidgetItem *protocolItem = new QTableWidgetItem(QString::number(pmn ? pmn->nProtocolVersion : -1));\n-    QTableWidgetItem *statusItem = new QTableWidgetItem(QString::fromStdString(pmn ? pmn->GetStatus() : \"MISSING\"));\n-    QTableWidgetItem *activeSecondsItem = new QTableWidgetItem(QString::fromStdString(DurationToDHMS(pmn ? (pmn->lastPing.sigTime - pmn->sigTime) : 0)));\n-    QTableWidgetItem *lastSeenItem = new QTableWidgetItem(QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", pmn ? pmn->lastPing.sigTime + QDateTime::currentDateTime().offsetFromUtc() : 0)));\n-    QTableWidgetItem *pubkeyItem = new QTableWidgetItem(QString::fromStdString(pmn ? CBitcoinAddress(pmn->pubKeyCollateralAddress.GetID()).ToString() : \"\"));\n+    QTableWidgetItem *addrItem = new QTableWidgetItem(infoMn.fInfoValid ? QString::fromStdString(infoMn.addr.ToString()) : strAddr);\n+    QTableWidgetItem *protocolItem = new QTableWidgetItem(QString::number(infoMn.fInfoValid ? infoMn.nProtocolVersion : -1));\n+    QTableWidgetItem *statusItem = new QTableWidgetItem(QString::fromStdString(infoMn.fInfoValid ? CMasternode::StateToString(infoMn.nActiveState) : \"MISSING\"));\n+    QTableWidgetItem *activeSecondsItem = new QTableWidgetItem(QString::fromStdString(DurationToDHMS(infoMn.fInfoValid ? (infoMn.nTimeLastPing - infoMn.sigTime) : 0)));\n+    QTableWidgetItem *lastSeenItem = new QTableWidgetItem(QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M\",\n+                                                                                                   infoMn.fInfoValid ? infoMn.nTimeLastPing + QDateTime::currentDateTime().offsetFromUtc() : 0)));\n+    QTableWidgetItem *pubkeyItem = new QTableWidgetItem(QString::fromStdString(infoMn.fInfoValid ? CBitcoinAddress(infoMn.pubKeyCollateralAddress.GetID()).ToString() : \"\"));\n \n     ui->tableWidgetMyMasternodes->setItem(nNewRow, 0, aliasItem);\n     ui->tableWidgetMyMasternodes->setItem(nNewRow, 1, addrItem);\n@@ -202,6 +204,10 @@ void MasternodeList::updateMyMasternodeInfo(QString strAlias, QString strAddr, C\n \n void MasternodeList::updateMyNodeList(bool fForce)\n {\n+    TRY_LOCK(cs_mymnlist, fLockAcquired);\n+    if(!fLockAcquired) {\n+        return;\n+    }\n     static int64_t nTimeMyListUpdated = 0;\n \n     // automatically update my masternode list only once in MY_MASTERNODELIST_UPDATE_SECONDS seconds,\n@@ -214,10 +220,16 @@ void MasternodeList::updateMyNodeList(bool fForce)\n \n     ui->tableWidgetMasternodes->setSortingEnabled(false);\n     BOOST_FOREACH(CMasternodeConfig::CMasternodeEntry mne, masternodeConfig.getEntries()) {\n-        CTxIn txin = CTxIn(uint256S(mne.getTxHash()), uint32_t(atoi(mne.getOutputIndex().c_str())));\n-        CMasternode *pmn = mnodeman.Find(txin);\n+        int32_t nOutputIndex = 0;\n+        if(!ParseInt32(mne.getOutputIndex(), &nOutputIndex)) {\n+            continue;\n+        }\n+\n+        CTxIn txin = CTxIn(uint256S(mne.getTxHash()), nOutputIndex);\n \n-        updateMyMasternodeInfo(QString::fromStdString(mne.getAlias()), QString::fromStdString(mne.getIp()), pmn);\n+        masternode_info_t infoMn = mnodeman.GetMasternodeInfo(txin);\n+\n+        updateMyMasternodeInfo(QString::fromStdString(mne.getAlias()), QString::fromStdString(mne.getIp()), infoMn);\n     }\n     ui->tableWidgetMasternodes->setSortingEnabled(true);\n \n@@ -227,6 +239,11 @@ void MasternodeList::updateMyNodeList(bool fForce)\n \n void MasternodeList::updateNodeList()\n {\n+    TRY_LOCK(cs_mnlist, fLockAcquired);\n+    if(!fLockAcquired) {\n+        return;\n+    }\n+\n     static int64_t nTimeListUpdated = GetTime();\n \n     // to prevent high cpu usage update only once in MASTERNODELIST_UPDATE_SECONDS seconds\n@@ -241,9 +258,6 @@ void MasternodeList::updateNodeList()\n     nTimeListUpdated = GetTime();\n     fFilterUpdated = false;\n \n-    TRY_LOCK(cs_masternodes, lockMasternodes);\n-    if(!lockMasternodes) return;\n-\n     QString strToFilter;\n     ui->countLabel->setText(\"Updating...\");\n     ui->tableWidgetMasternodes->setSortingEnabled(false);\n@@ -296,15 +310,19 @@ void MasternodeList::on_filterLineEdit_textChanged(const QString &strFilterIn)\n \n void MasternodeList::on_startButton_clicked()\n {\n-    // Find selected node alias\n-    QItemSelectionModel* selectionModel = ui->tableWidgetMyMasternodes->selectionModel();\n-    QModelIndexList selected = selectionModel->selectedRows();\n+    std::string strAlias;\n+    {\n+        LOCK(cs_mymnlist);\n+        // Find selected node alias\n+        QItemSelectionModel* selectionModel = ui->tableWidgetMyMasternodes->selectionModel();\n+        QModelIndexList selected = selectionModel->selectedRows();\n \n-    if(selected.count() == 0) return;\n+        if(selected.count() == 0) return;\n \n-    QModelIndex index = selected.at(0);\n-    int nSelectedRow = index.row();\n-    std::string strAlias = ui->tableWidgetMyMasternodes->item(nSelectedRow, 0)->text().toStdString();\n+        QModelIndex index = selected.at(0);\n+        int nSelectedRow = index.row();\n+        strAlias = ui->tableWidgetMyMasternodes->item(nSelectedRow, 0)->text().toStdString();\n+    }\n \n     // Display message box\n     QMessageBox::StandardButton retval = QMessageBox::question(this, tr(\"Confirm masternode start\"),"
      },
      {
        "sha": "41882b44f670a491c184ddac7049bb7e58d02eb3",
        "filename": "src/qt/masternodelist.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/qt/masternodelist.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8/src/qt/masternodelist.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.h?ref=0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
        "patch": "@@ -45,7 +45,7 @@ class MasternodeList : public QWidget\n     bool fFilterUpdated;\n \n public Q_SLOTS:\n-    void updateMyMasternodeInfo(QString strAlias, QString strAddr, CMasternode *pmn);\n+    void updateMyMasternodeInfo(QString strAlias, QString strAddr, masternode_info_t& infoMn);\n     void updateMyNodeList(bool fForce = false);\n     void updateNodeList();\n \n@@ -56,7 +56,13 @@ public Q_SLOTS:\n     Ui::MasternodeList *ui;\n     ClientModel *clientModel;\n     WalletModel *walletModel;\n-    CCriticalSection cs_mnlistupdate;\n+\n+    // Protects tableWidgetMasternodes\n+    CCriticalSection cs_mnlist;\n+\n+    // Protects tableWidgetMyMasternodes\n+    CCriticalSection cs_mymnlist;\n+\n     QString strCurrentFilter;\n \n private Q_SLOTS:"
      }
    ]
  },
  {
    "sha": "817fd9c8608da037412b6d188d553b9dc04abba5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTdmZDljODYwOGRhMDM3NDEyYjZkMTg4ZDU1M2I5ZGMwNGFiYmE1",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-11T02:56:55Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-02-11T02:56:55Z"
      },
      "message": "bump build to 0.12.1.1 (#1330)",
      "tree": {
        "sha": "32f8408b3b7cf16dcd0c3ac574719beee20d5c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32f8408b3b7cf16dcd0c3ac574719beee20d5c3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/817fd9c8608da037412b6d188d553b9dc04abba5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/817fd9c8608da037412b6d188d553b9dc04abba5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/817fd9c8608da037412b6d188d553b9dc04abba5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/817fd9c8608da037412b6d188d553b9dc04abba5/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b54ab85c89827c7b2c0e88ad1daf6fb2c714bf8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1c532b0c55a3c8dfcd56ae72c9529ccb56a6f6fc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/817fd9c8608da037412b6d188d553b9dc04abba5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/817fd9c8608da037412b6d188d553b9dc04abba5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=817fd9c8608da037412b6d188d553b9dc04abba5",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 12)\n define(_CLIENT_VERSION_REVISION, 1)\n-define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_BUILD, 1)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2017)\n AC_INIT([Dash Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/dashpay/dash/issues],[dashcore])"
      },
      {
        "sha": "7b784bed003b3dfafbdddd9ea477a58e543d2855",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/817fd9c8608da037412b6d188d553b9dc04abba5/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/817fd9c8608da037412b6d188d553b9dc04abba5/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=817fd9c8608da037412b6d188d553b9dc04abba5",
        "patch": "@@ -17,7 +17,7 @@\n #define CLIENT_VERSION_MAJOR 0\n #define CLIENT_VERSION_MINOR 12\n #define CLIENT_VERSION_REVISION 1\n-#define CLIENT_VERSION_BUILD 0\n+#define CLIENT_VERSION_BUILD 1\n \n //! Set to true for release, false for prerelease or test build\n #define CLIENT_VERSION_IS_RELEASE true"
      }
    ]
  },
  {
    "sha": "f08ae49904d8fb2846554a3f400b0ea59b6d8774",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDhhZTQ5OTA0ZDhmYjI4NDY1NTRhM2Y0MDBiMGVhNTliNmQ4Nzc0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-11T02:57:09Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-02-11T02:57:09Z"
      },
      "message": "Fix crash on initial mixing step: (#1331)\n\n* Fix crash on initial mixing step:\r\n- skip nodes marked to be disconnected\r\n- add/release ref to make sure pnode is not deleted in the middle of the process\r\n\r\n* - fix copy/paste mistake (nTries)\r\n- let ConnectNode manage ref for non-mn pnodeFound",
      "tree": {
        "sha": "6beb377627cc4c274bed0f6f04019da59ac677ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6beb377627cc4c274bed0f6f04019da59ac677ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f08ae49904d8fb2846554a3f400b0ea59b6d8774",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08ae49904d8fb2846554a3f400b0ea59b6d8774",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f08ae49904d8fb2846554a3f400b0ea59b6d8774",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08ae49904d8fb2846554a3f400b0ea59b6d8774/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "817fd9c8608da037412b6d188d553b9dc04abba5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/817fd9c8608da037412b6d188d553b9dc04abba5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/817fd9c8608da037412b6d188d553b9dc04abba5"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 35,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d9bc9b58ec50d3c63ced27574dc457fd479f9caf",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f08ae49904d8fb2846554a3f400b0ea59b6d8774/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f08ae49904d8fb2846554a3f400b0ea59b6d8774/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=f08ae49904d8fb2846554a3f400b0ea59b6d8774",
        "patch": "@@ -1543,9 +1543,22 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n \n             vecMasternodesUsed.push_back(dsq.vin);\n \n+            CNode* pnodeFound = NULL;\n+            {\n+                LOCK(cs_vNodes);\n+                pnodeFound = FindNode(pmn->addr);\n+                if(pnodeFound) {\n+                    if(pnodeFound->fDisconnect) {\n+                        continue;\n+                    } else {\n+                        pnodeFound->AddRef();\n+                    }\n+                }\n+            }\n+\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt to connect to masternode from queue, addr=%s\\n\", pmn->addr.ToString());\n             // connect to Masternode and submit the queue request\n-            CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n+            CNode* pnode = (pnodeFound && pnodeFound->fMasternode) ? pnodeFound : ConnectNode((CAddress)pmn->addr, NULL, true);\n             if(pnode) {\n                 pSubmittedToMasternode = pmn;\n                 nSessionDenom = dsq.nDenom;\n@@ -1556,6 +1569,9 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n                 strAutoDenomResult = _(\"Mixing in progress...\");\n                 SetState(POOL_STATE_QUEUE);\n                 nTimeLastSuccessfulStep = GetTimeMillis();\n+                if(pnodeFound) {\n+                    pnodeFound->Release();\n+                }\n                 return true;\n             } else {\n                 LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());\n@@ -1589,8 +1605,22 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             continue;\n         }\n \n+        CNode* pnodeFound = NULL;\n+        {\n+            LOCK(cs_vNodes);\n+            pnodeFound = FindNode(pmn->addr);\n+            if(pnodeFound) {\n+                if(pnodeFound->fDisconnect) {\n+                    nTries++;\n+                    continue;\n+                } else {\n+                    pnodeFound->AddRef();\n+                }\n+            }\n+        }\n+\n         LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- attempt %d connection to Masternode %s\\n\", nTries, pmn->addr.ToString());\n-        CNode* pnode = ConnectNode((CAddress)pmn->addr, NULL, true);\n+        CNode* pnode = (pnodeFound && pnodeFound->fMasternode) ? pnodeFound : ConnectNode((CAddress)pmn->addr, NULL, true);\n         if(pnode) {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- connected, addr=%s\\n\", pmn->addr.ToString());\n             pSubmittedToMasternode = pmn;\n@@ -1608,6 +1638,9 @@ bool CDarksendPool::DoAutomaticDenominating(bool fDryRun)\n             strAutoDenomResult = _(\"Mixing in progress...\");\n             SetState(POOL_STATE_QUEUE);\n             nTimeLastSuccessfulStep = GetTimeMillis();\n+            if(pnodeFound) {\n+                pnodeFound->Release();\n+            }\n             return true;\n         } else {\n             LogPrintf(\"CDarksendPool::DoAutomaticDenominating -- can't connect, addr=%s\\n\", pmn->addr.ToString());"
      }
    ]
  },
  {
    "sha": "6483e6d06fc407fd4491c4740e1fa7024dab6cfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDgzZTZkMDZmYzQwN2ZkNDQ5MWM0NzQwZTFmYTcwMjRkYWI2Y2Zl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-11T21:04:08Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-11T21:04:08Z"
      },
      "message": "send confirmation dialog box should display correct smallest denom (#1329)",
      "tree": {
        "sha": "26d3a54a4e1ec9d0e3df035a4a8629aca50dd265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26d3a54a4e1ec9d0e3df035a4a8629aca50dd265"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6483e6d06fc407fd4491c4740e1fa7024dab6cfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6483e6d06fc407fd4491c4740e1fa7024dab6cfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6483e6d06fc407fd4491c4740e1fa7024dab6cfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6483e6d06fc407fd4491c4740e1fa7024dab6cfe/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08ae49904d8fb2846554a3f400b0ea59b6d8774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08ae49904d8fb2846554a3f400b0ea59b6d8774",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08ae49904d8fb2846554a3f400b0ea59b6d8774"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fda32520bb3f9c9ecd3ea7b91be89a8138acccb8",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6483e6d06fc407fd4491c4740e1fa7024dab6cfe/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6483e6d06fc407fd4491c4740e1fa7024dab6cfe/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=6483e6d06fc407fd4491c4740e1fa7024dab6cfe",
        "patch": "@@ -23,6 +23,8 @@\n #include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n \n+#include \"darksend.h\"\n+\n #include <QMessageBox>\n #include <QScrollBar>\n #include <QSettings>\n@@ -260,7 +262,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         strFunds = tr(\"using\") + \" <b>\" + tr(\"anonymous funds\") + \"</b>\";\n         QString strNearestAmount(\n             BitcoinUnits::formatWithUnit(\n-                model->getOptionsModel()->getDisplayUnit(), 0.1 * COIN));\n+                model->getOptionsModel()->getDisplayUnit(), vecPrivateSendDenominations.back()));\n         strFee = QString(tr(\n             \"(privatesend requires this amount to be rounded up to the nearest %1).\"\n         ).arg(strNearestAmount));"
      }
    ]
  },
  {
    "sha": "af1177dd54623ed562a8f8d4f8fba89efc88db1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjExNzdkZDU0NjIzZWQ1NjJhOGY4ZDRmOGZiYTg5ZWZjODhkYjFh",
    "commit": {
      "author": {
        "name": "Bob Feldbauer",
        "email": "github@completefusion.com",
        "date": "2017-02-15T15:18:24Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-15T15:18:24Z"
      },
      "message": "Update for OpenSSL 1.1 API. (#1336)\n\n* Update for OpenSSL 1.1 API.\r\n\r\n* Update qt/paymentrequestplus.cpp for OpenSSL 1.1 API.\r\n\r\n* Fix missing # in if for qt/paymentrequestplus.cpp fix for OpenSSL 1.1 API change.\r\n\r\n* Fix indentation in src/qt/paymentrequestplus.cpp.",
      "tree": {
        "sha": "a2a1ed871a866a0528172bbb57d07b93af384b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2a1ed871a866a0528172bbb57d07b93af384b81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af1177dd54623ed562a8f8d4f8fba89efc88db1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1177dd54623ed562a8f8d4f8fba89efc88db1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af1177dd54623ed562a8f8d4f8fba89efc88db1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1177dd54623ed562a8f8d4f8fba89efc88db1a/comments",
    "author": {
      "login": "bobfeldbauer",
      "id": 578703,
      "node_id": "MDQ6VXNlcjU3ODcwMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/578703?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bobfeldbauer",
      "html_url": "https://github.com/bobfeldbauer",
      "followers_url": "https://api.github.com/users/bobfeldbauer/followers",
      "following_url": "https://api.github.com/users/bobfeldbauer/following{/other_user}",
      "gists_url": "https://api.github.com/users/bobfeldbauer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bobfeldbauer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bobfeldbauer/subscriptions",
      "organizations_url": "https://api.github.com/users/bobfeldbauer/orgs",
      "repos_url": "https://api.github.com/users/bobfeldbauer/repos",
      "events_url": "https://api.github.com/users/bobfeldbauer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bobfeldbauer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6483e6d06fc407fd4491c4740e1fa7024dab6cfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6483e6d06fc407fd4491c4740e1fa7024dab6cfe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6483e6d06fc407fd4491c4740e1fa7024dab6cfe"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 58,
      "deletions": 29
    },
    "files": [
      {
        "sha": "39484f02e5007d74f6db373dd36b137003a5d700",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af1177dd54623ed562a8f8d4f8fba89efc88db1a/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af1177dd54623ed562a8f8d4f8fba89efc88db1a/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=af1177dd54623ed562a8f8d4f8fba89efc88db1a",
        "patch": "@@ -159,15 +159,28 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         std::string data_to_verify;                     // Everything but the signature\n         rcopy.SerializeToString(&data_to_verify);\n \n-        EVP_MD_CTX ctx;\n+#if OPENSSL_VERSION_NUMBER >= 0x10100000L\n+        EVP_MD_CTX *ctx = EVP_MD_CTX_new();\n+        if (!ctx) throw SSLVerifyError(\"Error allocating OpenSSL context.\");\n+#else\n+        EVP_MD_CTX _ctx;\n+        EVP_MD_CTX *ctx;\n+        ctx = &_ctx;\n+#endif\n+\n         EVP_PKEY *pubkey = X509_get_pubkey(signing_cert);\n-        EVP_MD_CTX_init(&ctx);\n-        if (!EVP_VerifyInit_ex(&ctx, digestAlgorithm, NULL) ||\n-            !EVP_VerifyUpdate(&ctx, data_to_verify.data(), data_to_verify.size()) ||\n-            !EVP_VerifyFinal(&ctx, (const unsigned char*)paymentRequest.signature().data(), (unsigned int)paymentRequest.signature().size(), pubkey)) {\n+\n+        EVP_MD_CTX_init(ctx);\n+        if (!EVP_VerifyInit_ex(ctx, digestAlgorithm, NULL) ||\n+            !EVP_VerifyUpdate(ctx, data_to_verify.data(), data_to_verify.size()) ||\n+            !EVP_VerifyFinal(ctx, (const unsigned char*)paymentRequest.signature().data(), (unsigned int)paymentRequest.signature().size(), pubkey)) {\n             throw SSLVerifyError(\"Bad signature, invalid payment request.\");\n         }\n \n+#if OPENSSL_VERSION_NUMBER >= 0x10100000L\n+        EVP_MD_CTX_free(ctx);\n+#endif\n+\n         // OpenSSL API for getting human printable strings from certs is baroque.\n         int textlen = X509_NAME_get_text_by_NID(certname, NID_commonName, NULL, 0);\n         website = new char[textlen + 1];"
      },
      {
        "sha": "c6562518726bd88f58b7d38aae3f6ecbd910e0d1",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 24,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af1177dd54623ed562a8f8d4f8fba89efc88db1a/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af1177dd54623ed562a8f8d4f8fba89efc88db1a/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=af1177dd54623ed562a8f8d4f8fba89efc88db1a",
        "patch": "@@ -58,15 +58,19 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     int nCLen = nLen + AES_BLOCK_SIZE, nFLen = 0;\n     vchCiphertext = std::vector<unsigned char> (nCLen);\n \n-    EVP_CIPHER_CTX ctx;\n+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();\n+\n+    if (!ctx) return false;\n \n     bool fOk = true;\n \n-    EVP_CIPHER_CTX_init(&ctx);\n-    if (fOk) fOk = EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n-    if (fOk) fOk = EVP_EncryptUpdate(&ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen) != 0;\n-    if (fOk) fOk = EVP_EncryptFinal_ex(&ctx, (&vchCiphertext[0]) + nCLen, &nFLen) != 0;\n-    EVP_CIPHER_CTX_cleanup(&ctx);\n+    EVP_CIPHER_CTX_init(ctx);\n+    if (fOk) fOk = EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n+    if (fOk) fOk = EVP_EncryptUpdate(ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen) != 0;\n+    if (fOk) fOk = EVP_EncryptFinal_ex(ctx, (&vchCiphertext[0]) + nCLen, &nFLen) != 0;\n+    EVP_CIPHER_CTX_cleanup(ctx);\n+\n+    EVP_CIPHER_CTX_free(ctx);\n \n     if (!fOk) return false;\n \n@@ -85,15 +89,19 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n \n     vchPlaintext = CKeyingMaterial(nPLen);\n \n-    EVP_CIPHER_CTX ctx;\n+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();\n+\n+    if (!ctx) return false;\n \n     bool fOk = true;\n \n-    EVP_CIPHER_CTX_init(&ctx);\n-    if (fOk) fOk = EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n-    if (fOk) fOk = EVP_DecryptUpdate(&ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen) != 0;\n-    if (fOk) fOk = EVP_DecryptFinal_ex(&ctx, (&vchPlaintext[0]) + nPLen, &nFLen) != 0;\n-    EVP_CIPHER_CTX_cleanup(&ctx);\n+    EVP_CIPHER_CTX_init(ctx);\n+    if (fOk) fOk = EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n+    if (fOk) fOk = EVP_DecryptUpdate(ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen) != 0;\n+    if (fOk) fOk = EVP_DecryptFinal_ex(ctx, (&vchPlaintext[0]) + nPLen, &nFLen) != 0;\n+    EVP_CIPHER_CTX_cleanup(ctx);\n+\n+    EVP_CIPHER_CTX_free(ctx);\n \n     if (!fOk) return false;\n \n@@ -132,15 +140,19 @@ bool EncryptAES256(const SecureString& sKey, const SecureString& sPlaintext, con\n     sCiphertext.resize(nCLen);\n \n     // Perform the encryption\n-    EVP_CIPHER_CTX ctx;\n+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();\n+\n+    if (!ctx) return false;\n \n     bool fOk = true;\n \n-    EVP_CIPHER_CTX_init(&ctx);\n-    if (fOk) fOk = EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, (const unsigned char*) &sKey[0], (const unsigned char*) &sIV[0]);\n-    if (fOk) fOk = EVP_EncryptUpdate(&ctx, (unsigned char*) &sCiphertext[0], &nCLen, (const unsigned char*) &sPlaintext[0], nLen);\n-    if (fOk) fOk = EVP_EncryptFinal_ex(&ctx, (unsigned char*) (&sCiphertext[0])+nCLen, &nFLen);\n-    EVP_CIPHER_CTX_cleanup(&ctx);\n+    EVP_CIPHER_CTX_init(ctx);\n+    if (fOk) fOk = EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, (const unsigned char*) &sKey[0], (const unsigned char*) &sIV[0]);\n+    if (fOk) fOk = EVP_EncryptUpdate(ctx, (unsigned char*) &sCiphertext[0], &nCLen, (const unsigned char*) &sPlaintext[0], nLen);\n+    if (fOk) fOk = EVP_EncryptFinal_ex(ctx, (unsigned char*) (&sCiphertext[0])+nCLen, &nFLen);\n+    EVP_CIPHER_CTX_cleanup(ctx);\n+\n+    EVP_CIPHER_CTX_free(ctx);\n \n     if (!fOk) return false;\n \n@@ -173,15 +185,19 @@ bool DecryptAES256(const SecureString& sKey, const std::string& sCiphertext, con\n \n     sPlaintext.resize(nPLen);\n \n-    EVP_CIPHER_CTX ctx;\n+    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();\n+\n+    if (!ctx) return false;\n \n     bool fOk = true;\n \n-    EVP_CIPHER_CTX_init(&ctx);\n-    if (fOk) fOk = EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, (const unsigned char*) &sKey[0], (const unsigned char*) &sIV[0]);\n-    if (fOk) fOk = EVP_DecryptUpdate(&ctx, (unsigned char *) &sPlaintext[0], &nPLen, (const unsigned char *) &sCiphertext[0], nLen);\n-    if (fOk) fOk = EVP_DecryptFinal_ex(&ctx, (unsigned char *) (&sPlaintext[0])+nPLen, &nFLen);\n-    EVP_CIPHER_CTX_cleanup(&ctx);\n+    EVP_CIPHER_CTX_init(ctx);\n+    if (fOk) fOk = EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, (const unsigned char*) &sKey[0], (const unsigned char*) &sIV[0]);\n+    if (fOk) fOk = EVP_DecryptUpdate(ctx, (unsigned char *) &sPlaintext[0], &nPLen, (const unsigned char *) &sCiphertext[0], nLen);\n+    if (fOk) fOk = EVP_DecryptFinal_ex(ctx, (unsigned char *) (&sPlaintext[0])+nPLen, &nFLen);\n+    EVP_CIPHER_CTX_cleanup(ctx);\n+\n+    EVP_CIPHER_CTX_free(ctx);\n \n     if (!fOk) return false;\n "
      }
    ]
  },
  {
    "sha": "39dcc35d408976b0fc11596a60f7830824d1d164",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWRjYzM1ZDQwODk3NmIwZmMxMTU5NmE2MGY3ODMwODI0ZDFkMTY0",
    "commit": {
      "author": {
        "name": "Alex Werner",
        "email": "Alex-Werner@users.noreply.github.com",
        "date": "2017-02-15T15:18:43Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-15T15:18:43Z"
      },
      "message": "Fix: Broken download link (#1335)",
      "tree": {
        "sha": "5004a3f30dcbcfec5afbe40261a5906b4e0f59de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5004a3f30dcbcfec5afbe40261a5906b4e0f59de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39dcc35d408976b0fc11596a60f7830824d1d164",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39dcc35d408976b0fc11596a60f7830824d1d164",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39dcc35d408976b0fc11596a60f7830824d1d164",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39dcc35d408976b0fc11596a60f7830824d1d164/comments",
    "author": {
      "login": "Alex-Werner",
      "id": 5849920,
      "node_id": "MDQ6VXNlcjU4NDk5MjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5849920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Alex-Werner",
      "html_url": "https://github.com/Alex-Werner",
      "followers_url": "https://api.github.com/users/Alex-Werner/followers",
      "following_url": "https://api.github.com/users/Alex-Werner/following{/other_user}",
      "gists_url": "https://api.github.com/users/Alex-Werner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Alex-Werner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Alex-Werner/subscriptions",
      "organizations_url": "https://api.github.com/users/Alex-Werner/orgs",
      "repos_url": "https://api.github.com/users/Alex-Werner/repos",
      "events_url": "https://api.github.com/users/Alex-Werner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Alex-Werner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af1177dd54623ed562a8f8d4f8fba89efc88db1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1177dd54623ed562a8f8d4f8fba89efc88db1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af1177dd54623ed562a8f8d4f8fba89efc88db1a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b655e50b7136d085234dc1cace4599289e0b6971",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39dcc35d408976b0fc11596a60f7830824d1d164/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39dcc35d408976b0fc11596a60f7830824d1d164/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=39dcc35d408976b0fc11596a60f7830824d1d164",
        "patch": "@@ -16,7 +16,7 @@ are carried out collectively by the network. Dash Core is the name of the open\n source software which enables the use of this currency.\n \n For more information, as well as an immediately useable, binary version of\n-the Dash Core software, see https://www.dash.org/downloads.\n+the Dash Core software, see https://www.dash.org/get-dash/.\n \n \n License"
      }
    ]
  },
  {
    "sha": "23fa1f5f133198b852e167f24c09edec847ea1a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2ZhMWY1ZjEzMzE5OGI4NTJlMTY3ZjI0YzA5ZWRlYzg0N2VhMWEz",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2017-02-16T15:14:29Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-16T15:14:29Z"
      },
      "message": "[Trivial] maxconnections parameter help text modified (#1340)",
      "tree": {
        "sha": "c7cb5790d2c8a386d14f610d7f3ae42a2bd8bc57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7cb5790d2c8a386d14f610d7f3ae42a2bd8bc57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23fa1f5f133198b852e167f24c09edec847ea1a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23fa1f5f133198b852e167f24c09edec847ea1a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23fa1f5f133198b852e167f24c09edec847ea1a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23fa1f5f133198b852e167f24c09edec847ea1a3/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39dcc35d408976b0fc11596a60f7830824d1d164",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39dcc35d408976b0fc11596a60f7830824d1d164",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39dcc35d408976b0fc11596a60f7830824d1d164"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b4da92c5dbed2a1f92e6011da3d38c1098d62260",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23fa1f5f133198b852e167f24c09edec847ea1a3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23fa1f5f133198b852e167f24c09edec847ea1a3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=23fa1f5f133198b852e167f24c09edec847ea1a3",
        "patch": "@@ -426,7 +426,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n     strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (temporary service connections excluded) (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));"
      }
    ]
  },
  {
    "sha": "80b71d97461ee95adabfa7f1f04de7cc68be53f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGI3MWQ5NzQ2MWVlOTVhZGFiZmE3ZjFmMDRkZTdjYzY4YmU1M2Y0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-16T15:14:42Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-16T15:14:42Z"
      },
      "message": "Few networking fixes (#1341)\n\n* Few networking fixes:\r\n- skip \"masternode\"/inbound connections for sync related processes\r\n- do not sync gov data to other nodes until fully synced ourselves\r\n- do not accept incoming connections until fully synced\r\n\r\n* inbound connections could be harmful only if our node is a masternode\r\n\r\n* same for CGovernanceManager::Sync",
      "tree": {
        "sha": "ae5e00c75a58ed71926e95be7ff25e0619fe273b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae5e00c75a58ed71926e95be7ff25e0619fe273b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80b71d97461ee95adabfa7f1f04de7cc68be53f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b71d97461ee95adabfa7f1f04de7cc68be53f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80b71d97461ee95adabfa7f1f04de7cc68be53f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b71d97461ee95adabfa7f1f04de7cc68be53f4/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23fa1f5f133198b852e167f24c09edec847ea1a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23fa1f5f133198b852e167f24c09edec847ea1a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23fa1f5f133198b852e167f24c09edec847ea1a3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 21,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7dbd42c4a8b12b5f08c3f7967c2b8b9e2b755efa",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b71d97461ee95adabfa7f1f04de7cc68be53f4/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b71d97461ee95adabfa7f1f04de7cc68be53f4/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=80b71d97461ee95adabfa7f1f04de7cc68be53f4",
        "patch": "@@ -665,6 +665,9 @@ void CGovernanceManager::Sync(CNode* pfrom, const uint256& nProp, const CBloomFi\n         budget object to see if they're OK. If all checks pass, we'll send it to the peer.\n     */\n \n+    // do not provide any data until our node is synced\n+    if(fMasterNode && !masternodeSync.IsSynced()) return;\n+\n     int nObjCount = 0;\n     int nVoteCount = 0;\n \n@@ -1045,9 +1048,11 @@ void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n         }\n         bool fAsked = false;\n         BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n-            // only use reqular peers, don't try to ask from temporary nodes we connected to -\n-            // they stay connected for a short period of time and it's possible that we won't get everything we should\n-            if(pnode->fMasternode) continue;\n+            // Only use reqular peers, don't try to ask from outbound \"masternode\" connections -\n+            // they stay connected for a short period of time and it's possible that we won't get everything we should.\n+            // Only use outbound connections - inbound connection could be a \"masternode\" connection\n+            // initialted from another node, so skip it too.\n+            if(pnode->fMasternode || (fMasterNode && pnode->fInbound)) continue;\n             // only use up to date peers\n             if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) continue;\n             // stop early to prevent setAskFor overflow"
      },
      {
        "sha": "e173085f6df170cd31427b66bbee8cf021d4d675",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b71d97461ee95adabfa7f1f04de7cc68be53f4/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b71d97461ee95adabfa7f1f04de7cc68be53f4/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=80b71d97461ee95adabfa7f1f04de7cc68be53f4",
        "patch": "@@ -334,6 +334,12 @@ void CMasternodeSync::ProcessTick()\n \n     BOOST_FOREACH(CNode* pnode, vNodesCopy)\n     {\n+        // Don't try to sync any data from outbound \"masternode\" connections -\n+        // they are temporary and should be considered unreliable for a sync process.\n+        // Inbound connection this early is most likely a \"masternode\" connection\n+        // initialted from another node, so skip it too.\n+        if(pnode->fMasternode || (fMasterNode && pnode->fInbound)) continue;\n+\n         // QUICK MODE (REGTEST ONLY!)\n         if(Params().NetworkIDString() == CBaseChainParams::REGTEST)\n         {"
      },
      {
        "sha": "8b895df1a92263cbb25122a1a13cc6211f3ec324",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b71d97461ee95adabfa7f1f04de7cc68be53f4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b71d97461ee95adabfa7f1f04de7cc68be53f4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=80b71d97461ee95adabfa7f1f04de7cc68be53f4",
        "patch": "@@ -24,6 +24,7 @@\n \n #include \"darksend.h\"\n #include \"instantx.h\"\n+#include \"masternode-sync.h\"\n #include \"masternodeman.h\"\n \n #ifdef WIN32\n@@ -962,6 +963,12 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n }\n \n static void AcceptConnection(const ListenSocket& hListenSocket) {\n+    // don't accept incoming connections until fully synced\n+    if(fMasterNode && !masternodeSync.IsSynced()) {\n+        LogPrintf(\"AcceptConnection -- masternode is not synced yet, skipping inbound connection attempt\\n\");\n+        return;\n+    }\n+\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);"
      }
    ]
  },
  {
    "sha": "e89b12d0c543a383cb760cc8cbb26aa785d1422b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODliMTJkMGM1NDNhMzgzY2I3NjBjYzhjYmIyNmFhNzg1ZDE0MjJi",
    "commit": {
      "author": {
        "name": "TheLazieR Yip",
        "email": "thelazier@gmail.com",
        "date": "2017-02-16T15:40:40Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-16T15:40:40Z"
      },
      "message": "Gracefully not accept incoming connection (#1342)",
      "tree": {
        "sha": "6e86a2c54799bc18dd9fea8c8c6a18e3145cc24c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e86a2c54799bc18dd9fea8c8c6a18e3145cc24c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e89b12d0c543a383cb760cc8cbb26aa785d1422b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e89b12d0c543a383cb760cc8cbb26aa785d1422b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e89b12d0c543a383cb760cc8cbb26aa785d1422b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e89b12d0c543a383cb760cc8cbb26aa785d1422b/comments",
    "author": {
      "login": "thelazier",
      "id": 10759339,
      "node_id": "MDQ6VXNlcjEwNzU5MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thelazier",
      "html_url": "https://github.com/thelazier",
      "followers_url": "https://api.github.com/users/thelazier/followers",
      "following_url": "https://api.github.com/users/thelazier/following{/other_user}",
      "gists_url": "https://api.github.com/users/thelazier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thelazier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
      "organizations_url": "https://api.github.com/users/thelazier/orgs",
      "repos_url": "https://api.github.com/users/thelazier/repos",
      "events_url": "https://api.github.com/users/thelazier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thelazier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80b71d97461ee95adabfa7f1f04de7cc68be53f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b71d97461ee95adabfa7f1f04de7cc68be53f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80b71d97461ee95adabfa7f1f04de7cc68be53f4"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b53787e65f8244b60b6889b8d5d2f724537564ef",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e89b12d0c543a383cb760cc8cbb26aa785d1422b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e89b12d0c543a383cb760cc8cbb26aa785d1422b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e89b12d0c543a383cb760cc8cbb26aa785d1422b",
        "patch": "@@ -963,12 +963,6 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n }\n \n static void AcceptConnection(const ListenSocket& hListenSocket) {\n-    // don't accept incoming connections until fully synced\n-    if(fMasterNode && !masternodeSync.IsSynced()) {\n-        LogPrintf(\"AcceptConnection -- masternode is not synced yet, skipping inbound connection attempt\\n\");\n-        return;\n-    }\n-\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n@@ -1029,6 +1023,13 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n+    // don't accept incoming connections until fully synced\n+    if(fMasterNode && !masternodeSync.IsSynced()) {\n+        LogPrintf(\"AcceptConnection -- masternode is not synced yet, skipping inbound connection attempt\\n\");\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n     CNode* pnode = new CNode(hSocket, addr, \"\", true);\n     pnode->fWhitelisted = whitelisted;\n "
      }
    ]
  },
  {
    "sha": "f774daf47f2562e0d1e27cdf37b6992ffa981ffc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzc0ZGFmNDdmMjU2MmUwZDFlMjdjZGYzN2I2OTkyZmZhOTgxZmZj",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-17T00:48:29Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-17T00:48:29Z"
      },
      "message": "a bit more granular sync checks for mnpayment (#1344)",
      "tree": {
        "sha": "f7201d58a16b7a42075087500faf877ae52555f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7201d58a16b7a42075087500faf877ae52555f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f774daf47f2562e0d1e27cdf37b6992ffa981ffc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f774daf47f2562e0d1e27cdf37b6992ffa981ffc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f774daf47f2562e0d1e27cdf37b6992ffa981ffc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f774daf47f2562e0d1e27cdf37b6992ffa981ffc/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e89b12d0c543a383cb760cc8cbb26aa785d1422b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e89b12d0c543a383cb760cc8cbb26aa785d1422b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e89b12d0c543a383cb760cc8cbb26aa785d1422b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2ed1589b91cb22d2ba956b9d9e20e2a19538c6aa",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f774daf47f2562e0d1e27cdf37b6992ffa981ffc/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f774daf47f2562e0d1e27cdf37b6992ffa981ffc/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=f774daf47f2562e0d1e27cdf37b6992ffa981ffc",
        "patch": "@@ -660,7 +660,7 @@ bool CMasternodePaymentVote::IsValid(CNode* pnode, int nValidationHeight, std::s\n     if(!pmn) {\n         strError = strprintf(\"Unknown Masternode: prevout=%s\", vinMasternode.prevout.ToStringShort());\n         // Only ask if we are already synced and still have no idea about that Masternode\n-        if(masternodeSync.IsSynced()) {\n+        if(masternodeSync.IsMasternodeListSynced()) {\n             mnodeman.AskForMN(pnode, vinMasternode);\n         }\n \n@@ -772,7 +772,7 @@ bool CMasternodePayments::ProcessBlock(int nBlockHeight)\n void CMasternodePaymentVote::Relay()\n {\n     // do not relay until synced\n-    if (!masternodeSync.IsSynced()) return;\n+    if (!masternodeSync.IsWinnersListSynced()) return;\n     CInv inv(MSG_MASTERNODE_PAYMENT_VOTE, GetHash());\n     RelayInv(inv);\n }\n@@ -791,7 +791,7 @@ bool CMasternodePaymentVote::CheckSignature(const CPubKey& pubKeyMasternode, int\n         // Only ban for future block vote when we are already synced.\n         // Otherwise it could be the case when MN which signed this vote is using another key now\n         // and we have no idea about the old one.\n-        if(masternodeSync.IsSynced() && nBlockHeight > nValidationHeight) {\n+        if(masternodeSync.IsMasternodeListSynced() && nBlockHeight > nValidationHeight) {\n             nDos = 20;\n         }\n         return error(\"CMasternodePaymentVote::CheckSignature -- Got bad Masternode payment signature, masternode=%s, error: %s\", vinMasternode.prevout.ToStringShort().c_str(), strError);"
      }
    ]
  },
  {
    "sha": "57fd9e9e2a2f1c50c00147918acda03434c66933",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2ZkOWU5ZTJhMmYxYzUwYzAwMTQ3OTE4YWNkYTAzNDM0YzY2OTMz",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-17T00:48:42Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-17T00:48:42Z"
      },
      "message": "fix watchdogs (#1346)\n\n* fix watchdogs:\r\n- do not accept if CreationTime is out of bounds (using CreationTime, not local time now)\r\n- do not sync expired\r\n- fix disk serialization\r\n\r\n* drop watchdogs early, avoid adding//removing\r\n\r\n* clean mapWatchdogObjects when object is deleted via votes",
      "tree": {
        "sha": "22b8dd73ed49b36142f4ff942f03aea4b2870d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22b8dd73ed49b36142f4ff942f03aea4b2870d40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57fd9e9e2a2f1c50c00147918acda03434c66933",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57fd9e9e2a2f1c50c00147918acda03434c66933",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57fd9e9e2a2f1c50c00147918acda03434c66933",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57fd9e9e2a2f1c50c00147918acda03434c66933/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f774daf47f2562e0d1e27cdf37b6992ffa981ffc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f774daf47f2562e0d1e27cdf37b6992ffa981ffc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f774daf47f2562e0d1e27cdf37b6992ffa981ffc"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 24,
      "deletions": 10
    },
    "files": [
      {
        "sha": "974c923dc23d400da5e2abdc495e168f8dd27a5b",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57fd9e9e2a2f1c50c00147918acda03434c66933/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57fd9e9e2a2f1c50c00147918acda03434c66933/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=57fd9e9e2a2f1c50c00147918acda03434c66933",
        "patch": "@@ -316,6 +316,8 @@ class CGovernanceObject\n         if(nType & SER_DISK) {\n             // Only include these for the disk file format\n             LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp Reading/writing votes from/to disk\\n\");\n+            READWRITE(nDeletionTime);\n+            READWRITE(fExpired);\n             READWRITE(mapCurrentMNVotes);\n             READWRITE(fileVotes);\n             LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp hash = %s, vote count = %d\\n\", GetHash().ToString(), fileVotes.GetVoteCount());"
      },
      {
        "sha": "0ef3fcf444eef9bcc25ac183b022d568840fb150",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57fd9e9e2a2f1c50c00147918acda03434c66933/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57fd9e9e2a2f1c50c00147918acda03434c66933/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=57fd9e9e2a2f1c50c00147918acda03434c66933",
        "patch": "@@ -20,7 +20,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-8\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-9\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),\n@@ -324,6 +324,16 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n \n     LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Adding object: hash = %s, type = %d\\n\", nHash.ToString(), govobj.GetObjectType()); \n \n+    // If it's a watchdog, make sure it fits required time bounds\n+    if(govobj.nObjectType == GOVERNANCE_OBJECT_WATCHDOG &&\n+        (govobj.GetCreationTime() < GetAdjustedTime() - GOVERNANCE_WATCHDOG_EXPIRATION_TIME ||\n+        govobj.GetCreationTime() > GetAdjustedTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME)\n+    ) {\n+        // drop it\n+        LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- CreationTime is out of bounds: hash = %s\\n\", nHash.ToString());\n+        return false;\n+    }\n+\n     // INSERT INTO OUR GOVERNANCE OBJECT MEMORY\n     mapObjects.insert(std::make_pair(nHash, govobj));\n \n@@ -341,8 +351,8 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n         DBG( cout << \"CGovernanceManager::AddGovernanceObject After AddNewTrigger\" << endl; );\n         break;\n     case GOVERNANCE_OBJECT_WATCHDOG:\n-        mapWatchdogObjects[nHash] = GetAdjustedTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME;\n-        LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Added watchdog to map: hash = %s\\n\", nHash.ToString()); \n+        mapWatchdogObjects[nHash] = govobj.GetCreationTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME;\n+        LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Added watchdog to map: hash = %s\\n\", nHash.ToString());\n         break;\n     default:\n         break;\n@@ -455,7 +465,9 @@ void CGovernanceManager::UpdateCachesAndClean()\n                     ++lit;\n                 }\n             }\n-\n+            if(pObj->nObjectType == GOVERNANCE_OBJECT_WATCHDOG && pObj->IsSetCachedDelete()) {\n+                mapWatchdogObjects.erase(it->first);\n+            }\n             mapObjects.erase(it++);\n         } else {\n             ++it;\n@@ -686,8 +698,8 @@ void CGovernanceManager::Sync(CNode* pfrom, const uint256& nProp, const CBloomFi\n \n                 LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n-                if(govobj.IsSetCachedDelete()) {\n-                    LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted govobj: %s, peer=%d\\n\",\n+                if(govobj.IsSetCachedDelete() || govobj.IsSetExpired()) {\n+                    LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted/expired govobj: %s, peer=%d\\n\",\n                               strHash, pfrom->id);\n                     continue;\n                 }\n@@ -709,8 +721,8 @@ void CGovernanceManager::Sync(CNode* pfrom, const uint256& nProp, const CBloomFi\n \n             LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n \n-            if(govobj.IsSetCachedDelete()) {\n-                LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted govobj: %s, peer=%d\\n\",\n+            if(govobj.IsSetCachedDelete() || govobj.IsSetExpired()) {\n+                LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted/expired govobj: %s, peer=%d\\n\",\n                           strHash, pfrom->id);\n                 return;\n             }\n@@ -1193,9 +1205,9 @@ std::string CGovernanceManager::ToString() const\n         ++it;\n     }\n \n-    return strprintf(\"Governance Objects: %d (Proposals: %d, Triggers: %d, Watchdogs: %d, Other: %d; Seen: %d), Votes: %d\",\n+    return strprintf(\"Governance Objects: %d (Proposals: %d, Triggers: %d, Watchdogs: %d/%d, Other: %d; Seen: %d), Votes: %d\",\n                     (int)mapObjects.size(),\n-                    nProposalCount, nTriggerCount, nWatchdogCount, nOtherCount, (int)mapSeenGovernanceObjects.size(),\n+                    nProposalCount, nTriggerCount, nWatchdogCount, mapWatchdogObjects.size(), nOtherCount, (int)mapSeenGovernanceObjects.size(),\n                     (int)mapVoteToObject.GetSize());\n }\n "
      }
    ]
  },
  {
    "sha": "31d8e03a2b9902c134060b564781080ab18b9b72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQ4ZTAzYTJiOTkwMmMxMzQwNjBiNTY0NzgxMDgwYWIxOGI5Yjcy",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-17T09:37:34Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-17T09:37:34Z"
      },
      "message": "Update sendcoinsentry.ui (#1343) (#1349)\n\nReplacing 'bitcoins' in tooltip",
      "tree": {
        "sha": "3c8f749a18ffe6522850ef91b59a894455b716a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c8f749a18ffe6522850ef91b59a894455b716a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d8e03a2b9902c134060b564781080ab18b9b72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d8e03a2b9902c134060b564781080ab18b9b72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31d8e03a2b9902c134060b564781080ab18b9b72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d8e03a2b9902c134060b564781080ab18b9b72/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57fd9e9e2a2f1c50c00147918acda03434c66933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57fd9e9e2a2f1c50c00147918acda03434c66933",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57fd9e9e2a2f1c50c00147918acda03434c66933"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "20433f7a7675a8e5d095bad6b660dc7f1f89f5b4",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d8e03a2b9902c134060b564781080ab18b9b72/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d8e03a2b9902c134060b564781080ab18b9b72/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=31d8e03a2b9902c134060b564781080ab18b9b72",
        "patch": "@@ -158,7 +158,7 @@\n       <item>\n        <widget class=\"QCheckBox\" name=\"checkboxSubtractFeeFromAmount\">\n         <property name=\"toolTip\">\n-         <string>The fee will be deducted from the amount being sent. The recipient will receive less bitcoins than you enter in the amount field. If multiple recipients are selected, the fee is split equally.</string>\n+         <string>The fee will be deducted from the amount being sent. The recipient will receive a lower amount of Dash than you enter in the amount field. If multiple recipients are selected, the fee is split equally.</string>\n         </property>\n         <property name=\"text\">\n          <string>S&amp;ubtract fee from amount</string>"
      }
    ]
  },
  {
    "sha": "91f7e5740257425fb963b558efa4d8e5113fa160",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWY3ZTU3NDAyNTc0MjVmYjk2M2I1NThlZmE0ZDhlNTExM2ZhMTYw",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-17T20:08:29Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-17T20:08:29Z"
      },
      "message": "fix verification network behaviour: (#1348)\n\n* fix verification network behaviour:\r\n- use up to 10 connections only\r\n- save state (do not ask same nodes after restart)\r\n- initiate on time based intervals (every 5 minutes), based not on new blocks (should keep connections alive longer)\r\n\r\n* revert mWeAskedForVerification serialization\r\n\r\n* send verify requests using MAX_POSE_CONNECTIONS as a step",
      "tree": {
        "sha": "e29d38c67034560c25986ae4ea7f44a6189c966f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e29d38c67034560c25986ae4ea7f44a6189c966f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91f7e5740257425fb963b558efa4d8e5113fa160",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f7e5740257425fb963b558efa4d8e5113fa160",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91f7e5740257425fb963b558efa4d8e5113fa160",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f7e5740257425fb963b558efa4d8e5113fa160/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31d8e03a2b9902c134060b564781080ab18b9b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d8e03a2b9902c134060b564781080ab18b9b72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31d8e03a2b9902c134060b564781080ab18b9b72"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e335ce5490a9de193b5758fb1c46c60ec4e0a3ad",
        "filename": "src/darksend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f7e5740257425fb963b558efa4d8e5113fa160/src/darksend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f7e5740257425fb963b558efa4d8e5113fa160/src/darksend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend.cpp?ref=91f7e5740257425fb963b558efa4d8e5113fa160",
        "patch": "@@ -2527,6 +2527,9 @@ void ThreadCheckDarkSendPool()\n                 mnpayments.CheckAndRemove();\n                 instantsend.CheckAndRemove();\n             }\n+            if(fMasterNode && (nTick % (60 * 5) == 0)) {\n+                mnodeman.DoFullVerificationStep();\n+            }\n \n             darkSendPool.CheckTimeout();\n             darkSendPool.CheckForCompleteQueue();"
      },
      {
        "sha": "10623d8ab8ef6f081d2f5a327b31087ec75cc519",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f7e5740257425fb963b558efa4d8e5113fa160/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f7e5740257425fb963b558efa4d8e5113fa160/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=91f7e5740257425fb963b558efa4d8e5113fa160",
        "patch": "@@ -102,6 +102,9 @@ CMasternodeMan::CMasternodeMan()\n   mAskedUsForMasternodeList(),\n   mWeAskedForMasternodeList(),\n   mWeAskedForMasternodeListEntry(),\n+  mWeAskedForVerification(),\n+  mMnbRecoveryRequests(),\n+  mMnbRecoveryGoodReplies(),\n   listScheduledMnbRequestConnections(),\n   nLastIndexRebuildTime(0),\n   indexMasternodes(),\n@@ -967,7 +970,6 @@ void CMasternodeMan::DoFullVerificationStep()\n     LOCK2(cs_main, cs);\n \n     int nCount = 0;\n-    int nCountMax = std::max(10, (int)vMasternodes.size() / 100); // verify at least 10 masternode at once but at most 1% of all known masternodes\n \n     int nMyRank = -1;\n     int nRanksTotal = (int)vecMasternodeRanks.size();\n@@ -983,7 +985,7 @@ void CMasternodeMan::DoFullVerificationStep()\n         if(it->second.vin == activeMasternode.vin) {\n             nMyRank = it->first;\n             LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Found self at rank %d/%d, verifying up to %d masternodes\\n\",\n-                        nMyRank, nRanksTotal, nCountMax);\n+                        nMyRank, nRanksTotal, (int)MAX_POSE_CONNECTIONS);\n             break;\n         }\n         ++it;\n@@ -992,9 +994,9 @@ void CMasternodeMan::DoFullVerificationStep()\n     // edge case: list is too short and this masternode is not enabled\n     if(nMyRank == -1) return;\n \n-    // send verify requests to up to nCountMax masternodes starting from\n-    // (MAX_POSE_RANK + nCountMax * (nMyRank - 1) + 1)\n-    int nOffset = MAX_POSE_RANK + nCountMax * (nMyRank - 1);\n+    // send verify requests to up to MAX_POSE_CONNECTIONS masternodes\n+    // starting from MAX_POSE_RANK + nMyRank and using MAX_POSE_CONNECTIONS as a step\n+    int nOffset = MAX_POSE_RANK + nMyRank - 1;\n     if(nOffset >= (int)vecMasternodeRanks.size()) return;\n \n     std::vector<CMasternode*> vSortedByAddr;\n@@ -1012,16 +1014,20 @@ void CMasternodeMan::DoFullVerificationStep()\n                         it->second.IsPoSeVerified() && it->second.IsPoSeBanned() ? \" and \" : \"\",\n                         it->second.IsPoSeBanned() ? \"banned\" : \"\",\n                         it->second.vin.prevout.ToStringShort(), it->second.addr.ToString());\n-            ++it;\n+            nOffset += MAX_POSE_CONNECTIONS;\n+            if(nOffset >= (int)vecMasternodeRanks.size()) break;\n+            it += MAX_POSE_CONNECTIONS;\n             continue;\n         }\n         LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Verifying masternode %s rank %d/%d address %s\\n\",\n                     it->second.vin.prevout.ToStringShort(), it->first, nRanksTotal, it->second.addr.ToString());\n         if(SendVerifyRequest((CAddress)it->second.addr, vSortedByAddr)) {\n             nCount++;\n-            if(nCount >= nCountMax) break;\n+            if(nCount >= MAX_POSE_CONNECTIONS) break;\n         }\n-        ++it;\n+        nOffset += MAX_POSE_CONNECTIONS;\n+        if(nOffset >= (int)vecMasternodeRanks.size()) break;\n+        it += MAX_POSE_CONNECTIONS;\n     }\n \n     LogPrint(\"masternode\", \"CMasternodeMan::DoFullVerificationStep -- Sent verification requests to %d masternodes\\n\", nCount);\n@@ -1640,7 +1646,6 @@ void CMasternodeMan::UpdatedBlockTip(const CBlockIndex *pindex)\n     CheckSameAddr();\n \n     if(fMasterNode) {\n-        DoFullVerificationStep();\n         // normal wallet does not need to update this every block, doing update on rpc call should be enough\n         UpdateLastPaid();\n     }"
      },
      {
        "sha": "ff7fb93095c59022151b80100cd6a4f1063042a7",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f7e5740257425fb963b558efa4d8e5113fa160/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f7e5740257425fb963b558efa4d8e5113fa160/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=91f7e5740257425fb963b558efa4d8e5113fa160",
        "patch": "@@ -100,6 +100,7 @@ class CMasternodeMan\n     static const int LAST_PAID_SCAN_BLOCKS      = 100;\n \n     static const int MIN_POSE_PROTO_VERSION     = 70203;\n+    static const int MAX_POSE_CONNECTIONS       = 10;\n     static const int MAX_POSE_RANK              = 10;\n     static const int MAX_POSE_BLOCKS            = 10;\n "
      }
    ]
  },
  {
    "sha": "6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDJjYzk5ZTM1OTgwZTA3NDhlNjBlODFiY2JkNDNiODVlOGFkMzIx",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-17T20:08:41Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-17T20:08:41Z"
      },
      "message": "Add \"enough data\" stop conditions for gov sync (#1350)\n\n* Add \"enough data\" stop conditions for gov sync\r\n\r\n* fix:\r\n- make sure condition is checked only once per tick\r\n- let condition be fully used on resync (reset nTimeNoObjectsLeft)",
      "tree": {
        "sha": "f73d339dbec06fe4d18a1874b1a85efe3af0db34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f73d339dbec06fe4d18a1874b1a85efe3af0db34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2cc99e35980e0748e60e81bcbd43b85e8ad321/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91f7e5740257425fb963b558efa4d8e5113fa160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f7e5740257425fb963b558efa4d8e5113fa160",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91f7e5740257425fb963b558efa4d8e5113fa160"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 51,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7e76a1bdee573c464d7e15fffcc4825c502c5bde",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2cc99e35980e0748e60e81bcbd43b85e8ad321/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2cc99e35980e0748e60e81bcbd43b85e8ad321/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
        "patch": "@@ -71,6 +71,12 @@ bool CGovernanceManager::HaveVoteForHash(uint256 nHash)\n     return true;\n }\n \n+int CGovernanceManager::GetVoteCount() const\n+{\n+    LOCK(cs);\n+    return (int)mapVoteToObject.GetSize();\n+}\n+\n bool CGovernanceManager::SerializeVoteForHash(uint256 nHash, CDataStream& ss)\n {\n     LOCK(cs);\n@@ -987,22 +993,24 @@ void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nH\n     pfrom->PushMessage(NetMsgType::MNGOVERNANCESYNC, nHash, filter);\n }\n \n-void CGovernanceManager::RequestGovernanceObjectVotes(CNode* pnode)\n+int CGovernanceManager::RequestGovernanceObjectVotes(CNode* pnode)\n {\n-    if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) return;\n+    if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) return -3;\n     std::vector<CNode*> vNodesCopy;\n     vNodesCopy.push_back(pnode);\n-    RequestGovernanceObjectVotes(vNodesCopy);\n+    return RequestGovernanceObjectVotes(vNodesCopy);\n }\n \n-void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy)\n+int CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy)\n {\n     static std::map<uint256, std::map<CService, int64_t> > mapAskedRecently;\n \n-    if(vNodesCopy.empty()) return;\n+    if(vNodesCopy.empty()) return -1;\n \n     LOCK2(cs_main, cs);\n \n+    if(mapObjects.empty()) return -2;\n+\n     int64_t nNow = GetTime();\n     int nTimeout = 60 * 60;\n     size_t nPeersPerHashMax = 3;\n@@ -1040,7 +1048,7 @@ void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n         }\n     }\n \n-    LogPrint(\"governance\", \"CGovernanceManager::RequestGovernanceObjectVotes -- start: vpGovObjsTriggersTmp %d vpGovObjsTmp %d mapAskedRecently %d\\n\",\n+    LogPrint(\"gobject\", \"CGovernanceManager::RequestGovernanceObjectVotes -- start: vpGovObjsTriggersTmp %d vpGovObjsTmp %d mapAskedRecently %d\\n\",\n                 vpGovObjsTriggersTmp.size(), vpGovObjsTmp.size(), mapAskedRecently.size());\n \n     InsecureRand insecureRand;\n@@ -1087,8 +1095,10 @@ void CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n         }\n         if(!fAsked) i--;\n     }\n-    LogPrint(\"governance\", \"CGovernanceManager::RequestGovernanceObjectVotes -- end: vpGovObjsTriggersTmp %d vpGovObjsTmp %d mapAskedRecently %d\\n\",\n+    LogPrint(\"gobject\", \"CGovernanceManager::RequestGovernanceObjectVotes -- end: vpGovObjsTriggersTmp %d vpGovObjsTmp %d mapAskedRecently %d\\n\",\n                 vpGovObjsTriggersTmp.size(), vpGovObjsTmp.size(), mapAskedRecently.size());\n+\n+    return int(vpGovObjsTriggersTmp.size() + vpGovObjsTmp.size());\n }\n \n bool CGovernanceManager::AcceptObjectMessage(const uint256& nHash)"
      },
      {
        "sha": "fe10a0beafc8ba50c402cd5681b8852f448ba877",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2cc99e35980e0748e60e81bcbd43b85e8ad321/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2cc99e35980e0748e60e81bcbd43b85e8ad321/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
        "patch": "@@ -345,6 +345,8 @@ class CGovernanceManager\n \n     bool HaveVoteForHash(uint256 nHash);\n \n+    int GetVoteCount() const;\n+\n     bool SerializeObjectForHash(uint256 nHash, CDataStream& ss);\n \n     bool SerializeVoteForHash(uint256 nHash, CDataStream& ss);\n@@ -376,8 +378,8 @@ class CGovernanceManager\n \n     void InitOnLoad();\n \n-    void RequestGovernanceObjectVotes(CNode* pnode);\n-    void RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy);\n+    int RequestGovernanceObjectVotes(CNode* pnode);\n+    int RequestGovernanceObjectVotes(const std::vector<CNode*>& vNodesCopy);\n \n private:\n     void RequestGovernanceObject(CNode* pfrom, const uint256& nHash, bool fUseFilter = false);"
      },
      {
        "sha": "ac0c69f7ef5322ce0c5148d7bc44c1da6b3bf681",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 15,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2cc99e35980e0748e60e81bcbd43b85e8ad321/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2cc99e35980e0748e60e81bcbd43b85e8ad321/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
        "patch": "@@ -465,7 +465,7 @@ void CMasternodeSync::ProcessTick()\n             // GOVOBJ : SYNC GOVERNANCE ITEMS FROM OUR PEERS\n \n             if(nRequestedMasternodeAssets == MASTERNODE_SYNC_GOVERNANCE) {\n-                LogPrint(\"mnpayments\", \"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nTimeLastPaymentVote %lld GetTime() %lld diff %lld\\n\", nTick, nRequestedMasternodeAssets, nTimeLastPaymentVote, GetTime(), GetTime() - nTimeLastPaymentVote);\n+                LogPrint(\"gobject\", \"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d nTimeLastGovernanceItem %lld GetTime() %lld diff %lld\\n\", nTick, nRequestedMasternodeAssets, nTimeLastGovernanceItem, GetTime(), GetTime() - nTimeLastGovernanceItem);\n \n                 // check for timeout first\n                 if(GetTime() - nTimeLastGovernanceItem > MASTERNODE_SYNC_TIMEOUT_SECONDS) {\n@@ -479,22 +479,37 @@ void CMasternodeSync::ProcessTick()\n                     return;\n                 }\n \n-                // check for data\n-                // if(nCountBudgetItemProp > 0 && nCountBudgetItemFin)\n-                // {\n-                //     if(governance.CountProposalInventoryItems() >= (nSumBudgetItemProp / nCountBudgetItemProp)*0.9)\n-                //     {\n-                //         if(governance.CountFinalizedInventoryItems() >= (nSumBudgetItemFin / nCountBudgetItemFin)*0.9)\n-                //         {\n-                //             SwitchToNextAsset();\n-                //             return;\n-                //         }\n-                //     }\n-                // }\n-\n                 // only request obj sync once from each peer, then request votes on per-obj basis\n                 if(netfulfilledman.HasFulfilledRequest(pnode->addr, \"governance-sync\")) {\n-                    governance.RequestGovernanceObjectVotes(pnode);\n+                    int nObjsLeftToAsk = governance.RequestGovernanceObjectVotes(pnode);\n+                    static int64_t nTimeNoObjectsLeft = 0;\n+                    // check for data\n+                    if(nObjsLeftToAsk == 0) {\n+                        static int nLastTick = 0;\n+                        static int nLastVotes = 0;\n+                        if(nTimeNoObjectsLeft == 0) {\n+                            // asked all objects for votes for the first time\n+                            nTimeNoObjectsLeft = GetTime();\n+                        }\n+                        // make sure the condition below is checked only once per tick\n+                        if(nLastTick == nTick) continue;\n+                        if(GetTime() - nTimeNoObjectsLeft > MASTERNODE_SYNC_TIMEOUT_SECONDS &&\n+                            governance.GetVoteCount() - nLastVotes < std::max(int(0.0001 * nLastVotes), MASTERNODE_SYNC_TICK_SECONDS)\n+                        ) {\n+                            // We already asked for all objects, waited for MASTERNODE_SYNC_TIMEOUT_SECONDS\n+                            // after that and less then 0.01% or MASTERNODE_SYNC_TICK_SECONDS\n+                            // (i.e. 1 per second) votes were recieved during the last tick.\n+                            // We can be pretty sure that we are done syncing.\n+                            LogPrintf(\"CMasternodeSync::ProcessTick -- nTick %d nRequestedMasternodeAssets %d -- asked for all objects, nothing to do\\n\", nTick, nRequestedMasternodeAssets);\n+                            // reset nTimeNoObjectsLeft to be able to use the same condition on resync\n+                            nTimeNoObjectsLeft = 0;\n+                            SwitchToNextAsset();\n+                            ReleaseNodes(vNodesCopy);\n+                            return;\n+                        }\n+                        nLastTick = nTick;\n+                        nLastVotes = governance.GetVoteCount();\n+                    }\n                     continue;\n                 }\n                 netfulfilledman.AddFulfilledRequest(pnode->addr, \"governance-sync\");"
      }
    ]
  },
  {
    "sha": "f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTliZDQzNGFkNWU5NjE2YjEzNWU5MjY5ZTVhMDVjYzNkYmU5ZjFi",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-19T16:55:37Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-02-19T16:55:37Z"
      },
      "message": "fix gov list filtering bug (#1353)",
      "tree": {
        "sha": "161f1882cfb012d149ae54e3fca46e244050a216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/161f1882cfb012d149ae54e3fca46e244050a216"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2cc99e35980e0748e60e81bcbd43b85e8ad321",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2cc99e35980e0748e60e81bcbd43b85e8ad321"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48249e205a4bbae34b3292af643e925c1a9c811d",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b",
        "patch": "@@ -544,7 +544,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         // GET MAIN PARAMETER FOR THIS MODE, VALID OR ALL?\n \n         std::string strShow = \"valid\";\n-        if (params.size() == 2) strShow = params[1].get_str();\n+        if (params.size() >= 2) strShow = params[1].get_str();\n         if (strShow != \"valid\" && strShow != \"all\")\n             return \"Invalid mode, should be 'valid' or 'all'\";\n "
      }
    ]
  },
  {
    "sha": "e3288a7e142e811a2efb6335e379ca7b0befe1da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzI4OGE3ZTE0MmU4MTFhMmVmYjYzMzVlMzc5Y2E3YjBiZWZlMWRh",
    "commit": {
      "author": {
        "name": "crowning-",
        "email": "crowning-@users.noreply.github.com",
        "date": "2017-02-19T16:55:52Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-02-19T16:55:52Z"
      },
      "message": "[RFC] add ObjectType to first-level JSON result (#1352)",
      "tree": {
        "sha": "3636bebc6abe22dfaf793bce332c2ea9aca55226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3636bebc6abe22dfaf793bce332c2ea9aca55226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3288a7e142e811a2efb6335e379ca7b0befe1da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3288a7e142e811a2efb6335e379ca7b0befe1da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3288a7e142e811a2efb6335e379ca7b0befe1da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3288a7e142e811a2efb6335e379ca7b0befe1da/comments",
    "author": {
      "login": "crowning-",
      "id": 10080039,
      "node_id": "MDQ6VXNlcjEwMDgwMDM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10080039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crowning-",
      "html_url": "https://github.com/crowning-",
      "followers_url": "https://api.github.com/users/crowning-/followers",
      "following_url": "https://api.github.com/users/crowning-/following{/other_user}",
      "gists_url": "https://api.github.com/users/crowning-/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crowning-/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crowning-/subscriptions",
      "organizations_url": "https://api.github.com/users/crowning-/orgs",
      "repos_url": "https://api.github.com/users/crowning-/repos",
      "events_url": "https://api.github.com/users/crowning-/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crowning-/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f59bd434ad5e9616b135e9269e5a05cc3dbe9f1b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9a6931110941099ece601661686fa23060e85948",
        "filename": "src/rpcgovernance.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3288a7e142e811a2efb6335e379ca7b0befe1da/src/rpcgovernance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3288a7e142e811a2efb6335e379ca7b0befe1da/src/rpcgovernance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcgovernance.cpp?ref=e3288a7e142e811a2efb6335e379ca7b0befe1da",
        "patch": "@@ -584,6 +584,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n             bObj.push_back(Pair(\"DataString\",  pGovObj->GetDataAsString()));\n             bObj.push_back(Pair(\"Hash\",  pGovObj->GetHash().ToString()));\n             bObj.push_back(Pair(\"CollateralHash\",  pGovObj->GetCollateralHash().ToString()));\n+            bObj.push_back(Pair(\"ObjectType\", pGovObj->GetObjectType()));\n             bObj.push_back(Pair(\"CreationTime\", pGovObj->GetCreationTime()));\n             const CTxIn& masternodeVin = pGovObj->GetMasternodeVin();\n             if(masternodeVin != CTxIn()) {\n@@ -635,6 +636,7 @@ UniValue gobject(const UniValue& params, bool fHelp)\n         objResult.push_back(Pair(\"DataString\",  pGovObj->GetDataAsString()));\n         objResult.push_back(Pair(\"Hash\",  pGovObj->GetHash().ToString()));\n         objResult.push_back(Pair(\"CollateralHash\",  pGovObj->GetCollateralHash().ToString()));\n+        objResult.push_back(Pair(\"ObjectType\", pGovObj->GetObjectType()));\n         objResult.push_back(Pair(\"CreationTime\", pGovObj->GetCreationTime()));\n         const CTxIn& masternodeVin = pGovObj->GetMasternodeVin();\n         if(masternodeVin != CTxIn()) {"
      }
    ]
  },
  {
    "sha": "e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWU1YTI0OTEwNDRlOTlhZTQ5N2JmYWE3YWY4MGZlM2NkNzc3MGQ2",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-19T21:02:33Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-02-19T21:02:33Z"
      },
      "message": "fixing strings and docs + instantsend.md (#1354)",
      "tree": {
        "sha": "630c056291bb73d133ddf35b5de8d6a0f5c90254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630c056291bb73d133ddf35b5de8d6a0f5c90254"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3288a7e142e811a2efb6335e379ca7b0befe1da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3288a7e142e811a2efb6335e379ca7b0befe1da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3288a7e142e811a2efb6335e379ca7b0befe1da"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 42,
      "deletions": 21
    },
    "files": [
      {
        "sha": "f20d928af55f602e65309af4f92fdcfe897f3b88",
        "filename": "dash-docs/protocol-documentation.md",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/dash-docs/protocol-documentation.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/dash-docs/protocol-documentation.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/dash-docs/protocol-documentation.md?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -164,6 +164,26 @@ User's signed inputs for a group transaction in a mixing session\n | ---------- | ----------- | --------- | -------- |\n | # | inputs | CTxIn[] | signed inputs for mixing session\n \n+\n+### TXLOCKREQUEST - \"ix\"\n+\n+CTxLockRequest\n+\n+Transaction Lock Request, serialization is the same as for CTransaction.\n+\n+### TXLOCKVOTE - \"txlvote\"\n+\n+CTxLockVote\n+\n+Transaction Lock Vote\n+\n+| Field Size | Field Name | Data type | Description |\n+| ---------- | ----------- | --------- | -------- |\n+| 32 | txHash | uint256 | txid of the transaction to lock\n+| 36 | outpoint | COutPoint | The utxo to lock in this transaction\n+| 36 | outpointMasternode | COutPoint | The utxo of the masternode which is signing the vote\n+| 71-73 | vchMasternodeSignature | char[] | Signature of this message by masternode (verifiable via pubKeyMasternode)\n+\n ### MNGOVERNANCEOBJECT - \"govobj\"\n \n Governance Object\n@@ -189,9 +209,9 @@ Masternodes use governance voting in response to new proposals, contracts, setti\n \n | Field Size | Field Name | Data type | Description |\n | ---------- | ----------- | --------- | -------- |\n-| 4 | nVoteSignal | int | ???\n | 41+ | vinMasternode | CTxIn | Unspent output for the masternode which is voting\n | 32 | nParentHash | uint256 | Object which we're voting on (proposal, contract, setting or final budget)\n | 4 | nVoteOutcome | int | ???\n+| 4 | nVoteSignal | int | ???\n | 8 | nTime | int64_t | Time which the vote was created\n | 71-73 | vchSig | char[] | Signature of the masternode"
      },
      {
        "sha": "42221cb34cb58f5a2d66f53046a0927ab0b95e16",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -32,9 +32,10 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-    brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5 libevent\n+    brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf libevent\n \n-NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n+NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended. Qt5 5.7 requires C++11 which Dash Core doesn't fully support yet, Qt5 5.6.2 has some other issues, so make sure to install Qt version < 5.6.2 (5.6.1-1 is recommended).\n+    brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/e6d954bab88e89c5582498157077756900865070/Formula/qt5.rb\n \n ### Building Dash Core\n "
      },
      {
        "sha": "75a1e0f51534f1bf46fe1075d83b57fea4ea50c2",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -110,7 +110,7 @@ to see it.\n \n **testnet and regtest modes**\n \n-Run with the -testnet option to run with \"play bitcoins\" on the test network, if you\n+Run with the -testnet option to run with \"play coins\" on the test network, if you\n are testing multi-machine code that needs to operate across the internet.\n \n If you are testing something that can run on one machine, run with the -regtest option.\n@@ -154,7 +154,7 @@ Threads\n \n - ThreadMapPort : Universal plug-and-play startup/shutdown\n \n-- ThreadSocketHandler : Sends/Receives data from peers on port 8333.\n+- ThreadSocketHandler : Sends/Receives data from peers on port 9999.\n \n - ThreadOpenAddedConnections : Opens network connections to added nodes.\n \n@@ -168,7 +168,7 @@ Threads\n \n - ThreadRPCServer : Remote procedure call handler, listens on port 9998 for connections and services them.\n \n-- BitcoinMiner : Generates bitcoins (if wallet is enabled).\n+- BitcoinMiner : Generates coins (if wallet is enabled).\n \n - ThreadCheckDarkSendPool : Runs masternode list and sync data update loops\n "
      },
      {
        "sha": "ba17da51ad34dd430b234fe090ba546e09a7cb40",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -242,7 +242,7 @@ void CActiveMasternode::ManageStateRemote()\n         }\n         if(service != infoMn.addr) {\n             nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n-            strNotCapableReason = \"Specified IP doesn't match our external address.\";\n+            strNotCapableReason = \"Broadcasted IP doesn't match our external address. Make sure you issued a new broadcast if IP of this masternode changed recently.\";\n             LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n             return;\n         }"
      },
      {
        "sha": "c4709f7c912792c9cbe1af5b04e10e9bd6100f84",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -915,7 +915,7 @@ void CMasternodePayments::RequestLowDataPaymentBlocks(CNode* pnode)\n         }\n         // We should not violate GETDATA rules\n         if(vToFetch.size() == MAX_INV_SZ) {\n-            LogPrintf(\"CMasternodePayments::SyncLowDataPaymentBlocks -- asking peer %d for %d blocks\\n\", pnode->id, MAX_INV_SZ);\n+            LogPrintf(\"CMasternodePayments::SyncLowDataPaymentBlocks -- asking peer %d for %d payment blocks\\n\", pnode->id, MAX_INV_SZ);\n             pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n             // Start filling new batch\n             vToFetch.clear();\n@@ -924,7 +924,7 @@ void CMasternodePayments::RequestLowDataPaymentBlocks(CNode* pnode)\n     }\n     // Ask for the rest of it\n     if(!vToFetch.empty()) {\n-        LogPrintf(\"CMasternodePayments::SyncLowDataPaymentBlocks -- asking peer %d for %d blocks\\n\", pnode->id, vToFetch.size());\n+        LogPrintf(\"CMasternodePayments::SyncLowDataPaymentBlocks -- asking peer %d for %d payment blocks\\n\", pnode->id, vToFetch.size());\n         pnode->PushMessage(NetMsgType::GETDATA, vToFetch);\n     }\n }"
      },
      {
        "sha": "38d79d619fa90c382a30be6762fcae16ba077e1a",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -274,7 +274,7 @@ void CMasternodeSync::ProcessTick()\n     {\n         if(IsSynced()) {\n             /*\n-                Resync if we lose all masternodes from sleep/wake or failure to sync originally\n+                Resync if we lost all masternodes from sleep/wake or failed to sync originally\n             */\n             if(nMnCount == 0) {\n                 LogPrintf(\"CMasternodeSync::ProcessTick -- WARNING: not enough data, restarting sync\\n\");\n@@ -362,8 +362,8 @@ void CMasternodeSync::ProcessTick()\n         // NORMAL NETWORK MODE - TESTNET/MAINNET\n         {\n             if(netfulfilledman.HasFulfilledRequest(pnode->addr, \"full-sync\")) {\n-                // we already fully synced from this node recently,\n-                // disconnect to free this connection slot for a new node\n+                // We already fully synced from this node recently,\n+                // disconnect to free this connection slot for another peer.\n                 pnode->fDisconnect = true;\n                 LogPrintf(\"CMasternodeSync::ProcessTick -- disconnecting from recently synced peer %d\\n\", pnode->id);\n                 continue;"
      },
      {
        "sha": "d8fef70733993ca23eb199e94900ad035ca9a09f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -283,7 +283,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         txNew.vout[0].nValue = blockReward;\n         txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n \n-        // Update coinbase transaction with additional info about masternode and governace payments,\n+        // Update coinbase transaction with additional info about masternode and governance payments,\n         // get some info back to pass to getblocktemplate\n         FillBlockPayments(txNew, nHeight, blockReward, pblock->txoutMasternode, pblock->voutSuperblock);\n         // LogPrintf(\"CreateNewBlock -- nBlockHeight %d blockReward %lld txoutMasternode %s txNew %s\","
      },
      {
        "sha": "e41d1dbd5320db2d39dc2651ead988cab938737b",
        "filename": "src/qt/forms/masternodelist.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/forms/masternodelist.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/forms/masternodelist.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/masternodelist.ui?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -67,7 +67,7 @@\n              <item>\n               <widget class=\"QLabel\" name=\"updateNote\">\n                <property name=\"text\">\n-                <string>Note: Status of your masternodes in local wallet can potentially be slightly incorrect.&lt;br /&gt;Always wait for wallet to sync additional data and then double check from another node&lt;br /&gt;if your node should be running but you still see \"MISSING\" in \"Status\" field.</string>\n+                <string>Note: Status of your masternodes in local wallet can potentially be slightly incorrect.&lt;br /&gt;Always wait for wallet to sync additional data and then double check from another node&lt;br /&gt;if your masternode should be running but you still do not see \"ENABLED\" in \"Status\" field.</string>\n                </property>\n               </widget>\n              </item>\n@@ -134,7 +134,7 @@\n              </column>\n              <column>\n               <property name=\"text\">\n-               <string>Pubkey</string>\n+               <string>Payee</string>\n               </property>\n              </column>\n             </widget>\n@@ -257,7 +257,7 @@\n            </column>\n            <column>\n             <property name=\"text\">\n-             <string>Pubkey</string>\n+             <string>Payee</string>\n             </property>\n            </column>\n           </widget>"
      },
      {
        "sha": "a41f13a72ceca32805ba3d9baf3aeebf2c431cf4",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -505,7 +505,7 @@\n        <item>\n         <widget class=\"QCheckBox\" name=\"connectSocksTor\">\n          <property name=\"toolTip\">\n-          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</string>\n+          <string>Connect to the Dash network through a separate SOCKS5 proxy for Tor hidden services.</string>\n          </property>\n          <property name=\"text\">\n           <string>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</string>"
      },
      {
        "sha": "bc921b18282a8a08880da582a87e7356ad88f8a4",
        "filename": "src/qt/forms/signverifymessagedialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/forms/signverifymessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/forms/signverifymessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/signverifymessagedialog.ui?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -30,7 +30,7 @@\n        <item>\n         <widget class=\"QLabel\" name=\"infoLabel_SM\">\n          <property name=\"text\">\n-          <string>You can sign messages/agreements with your addresses to prove you can receive bitcoins sent to them. Be careful not to sign anything vague or random, as phishing attacks may try to trick you into signing your identity over to them. Only sign fully-detailed statements you agree to.</string>\n+          <string>You can sign messages/agreements with your addresses to prove you can receive Dash sent to them. Be careful not to sign anything vague or random, as phishing attacks may try to trick you into signing your identity over to them. Only sign fully-detailed statements you agree to.</string>\n          </property>\n          <property name=\"textFormat\">\n           <enum>Qt::PlainText</enum>"
      },
      {
        "sha": "a93f4c6382600a6119ed974bd44da494d449a036",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -141,7 +141,7 @@ You retain control of your money at all times..<hr> \\\n <b>The PrivateSend process works like this:</b>\\\n <ol type=\\\"1\\\"> \\\n <li>PrivateSend begins by breaking your transaction inputs down into standard denominations. \\\n-These denominations are 0.01 DASH, 0.1 DASH, 1 DASH, and 10 DASH--sort of like the paper money you use every day.</li> \\\n+These denominations are 0.01 DASH, 0.1 DASH, 1 DASH and 10 DASH -- sort of like the paper money you use every day.</li> \\\n <li>Your wallet then sends requests to specially configured software nodes on the network, called \\\"masternodes.\\\" \\\n These masternodes are informed then that you are interested in mixing a certain denomination. \\\n No identifiable information is sent to the masternodes, so they never know \\\"who\\\" you are.</li> \\"
      },
      {
        "sha": "a82de3fa43876afd0abf4a24496c235bb349df15",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "patch": "@@ -422,7 +422,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n-            \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+            \"                             The recipient will receive less amount of Dash than you enter in the amount field.\\n\"\n             \"6. \\\"use_is\\\"      (bool, optional) Send this transaction as InstantSend (default: false)\\n\"\n             \"7. \\\"use_ps\\\"      (bool, optional) Use anonymized funds only (default: false)\\n\"\n             \"\\nResult:\\n\"\n@@ -489,7 +489,7 @@ UniValue instantsendtoaddress(const UniValue& params, bool fHelp)\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n-            \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+            \"                             The recipient will receive less amount of Dash than you enter in the amount field.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "17cf8dc6d1c111a92f898f034905072fc7fe413e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2NmOGRjNmQxYzExMWE5MmY4OThmMDM0OTA1MDcyZmM3ZmU0MTNl",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-02-20T20:26:11Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-20T20:26:11Z"
      },
      "message": "bump to 0.12.1.2 (#1355)",
      "tree": {
        "sha": "cd8b273958632e1a1f2bf6424c9ad3b545b7897d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd8b273958632e1a1f2bf6424c9ad3b545b7897d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17cf8dc6d1c111a92f898f034905072fc7fe413e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cf8dc6d1c111a92f898f034905072fc7fe413e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17cf8dc6d1c111a92f898f034905072fc7fe413e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cf8dc6d1c111a92f898f034905072fc7fe413e/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9e5a2491044e99ae497bfaa7af80fe3cd7770d6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "03d6a3e3a5347ef962d6dd29d6a2d3f9cf34fde0",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cf8dc6d1c111a92f898f034905072fc7fe413e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cf8dc6d1c111a92f898f034905072fc7fe413e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=17cf8dc6d1c111a92f898f034905072fc7fe413e",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 12)\n define(_CLIENT_VERSION_REVISION, 1)\n-define(_CLIENT_VERSION_BUILD, 1)\n+define(_CLIENT_VERSION_BUILD, 2)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2017)\n AC_INIT([Dash Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/dashpay/dash/issues],[dashcore])"
      },
      {
        "sha": "922e3141d11b8568f7681dd81f15d7620ebf3883",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17cf8dc6d1c111a92f898f034905072fc7fe413e/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17cf8dc6d1c111a92f898f034905072fc7fe413e/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=17cf8dc6d1c111a92f898f034905072fc7fe413e",
        "patch": "@@ -17,7 +17,7 @@\n #define CLIENT_VERSION_MAJOR 0\n #define CLIENT_VERSION_MINOR 12\n #define CLIENT_VERSION_REVISION 1\n-#define CLIENT_VERSION_BUILD 1\n+#define CLIENT_VERSION_BUILD 2\n \n //! Set to true for release, false for prerelease or test build\n #define CLIENT_VERSION_IS_RELEASE true"
      }
    ]
  },
  {
    "sha": "636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzZmYjMzZTcxYWQ3YTYwZDRlNjBiNTZjNDdiNmVhMGE2OTkwZGE0",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-22T18:29:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-22T18:29:30Z"
      },
      "message": "implement sentinel-like wd selection logic (#1359)\n\n* Only accept wd's that are more recent or have a higher hash than the current best\r\n\r\n* Fix whitespace typo\r\n\r\n* Relay current watchdog when lower priority ones are received\r\n\r\n* Fix nHashWatchdogCurrent reset conditions\r\n\r\n* expire previous current wd when a new one is found in UpdateCurrentWatchdog\r\n\r\n* fail to process votes for expired or deleted object",
      "tree": {
        "sha": "be693d94990bb8408ee67eb5b9278ca67318eee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be693d94990bb8408ee67eb5b9278ca67318eee3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17cf8dc6d1c111a92f898f034905072fc7fe413e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17cf8dc6d1c111a92f898f034905072fc7fe413e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17cf8dc6d1c111a92f898f034905072fc7fe413e"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 81,
      "deletions": 14
    },
    "files": [
      {
        "sha": "72d728b8ee94d402f07379e87c926247243dcf70",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 13,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
        "patch": "@@ -20,7 +20,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-9\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-10\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),\n@@ -30,6 +30,8 @@ CGovernanceManager::CGovernanceManager()\n       mapSeenGovernanceObjects(),\n       mapMasternodeOrphanObjects(),\n       mapWatchdogObjects(),\n+      nHashWatchdogCurrent(),\n+      nTimeWatchdogCurrent(0),\n       mapVoteToObject(MAX_CACHE_SIZE),\n       mapInvalidVotes(MAX_CACHE_SIZE),\n       mapOrphanVotes(MAX_CACHE_SIZE),\n@@ -219,7 +221,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n \n         govobj.UpdateSentinelVariables(); //this sets local vars in object\n \n-        if(AddGovernanceObject(govobj))\n+        if(AddGovernanceObject(govobj, pfrom))\n         {\n             LogPrintf(\"MNGOVERNANCEOBJECT -- %s new\\n\", strHash);\n             govobj.Relay();\n@@ -305,7 +307,7 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n     fRateChecksEnabled = true;\n }\n \n-bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n+bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj, CNode* pfrom)\n {\n     LOCK2(cs_main, cs);\n     std::string strError = \"\";\n@@ -330,14 +332,23 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n \n     LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Adding object: hash = %s, type = %d\\n\", nHash.ToString(), govobj.GetObjectType()); \n \n-    // If it's a watchdog, make sure it fits required time bounds\n-    if(govobj.nObjectType == GOVERNANCE_OBJECT_WATCHDOG &&\n-        (govobj.GetCreationTime() < GetAdjustedTime() - GOVERNANCE_WATCHDOG_EXPIRATION_TIME ||\n-        govobj.GetCreationTime() > GetAdjustedTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME)\n-    ) {\n-        // drop it\n-        LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- CreationTime is out of bounds: hash = %s\\n\", nHash.ToString());\n-        return false;\n+    if(govobj.nObjectType == GOVERNANCE_OBJECT_WATCHDOG) {\n+        // If it's a watchdog, make sure it fits required time bounds\n+        if((govobj.GetCreationTime() < GetAdjustedTime() - GOVERNANCE_WATCHDOG_EXPIRATION_TIME ||\n+            govobj.GetCreationTime() > GetAdjustedTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME)\n+            ) {\n+            // drop it\n+            LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- CreationTime is out of bounds: hash = %s\\n\", nHash.ToString());\n+            return false;\n+        }\n+\n+        if(!UpdateCurrentWatchdog(govobj)) {\n+            if(pfrom && (nHashWatchdogCurrent != uint256())) {\n+                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, nHashWatchdogCurrent));\n+            }\n+            LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Watchdog not better than current: hash = %s\\n\", nHash.ToString());\n+            return false;\n+        }\n     }\n \n     // INSERT INTO OUR GOVERNANCE OBJECT MEMORY\n@@ -369,6 +380,38 @@ bool CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj)\n     return true;\n }\n \n+bool CGovernanceManager::UpdateCurrentWatchdog(CGovernanceObject& watchdogNew)\n+{\n+    bool fAccept = false;\n+\n+    arith_uint256 nHashNew = UintToArith256(watchdogNew.GetHash());\n+    arith_uint256 nHashCurrent = UintToArith256(nHashWatchdogCurrent);\n+\n+    int64_t nExpirationDelay = GOVERNANCE_WATCHDOG_EXPIRATION_TIME / 2;\n+    int64_t nNow = GetTime();\n+\n+    if((nHashWatchdogCurrent == uint256()) ||\n+       (((nNow - nTimeWatchdogCurrent) > nExpirationDelay) && (nNow - watchdogNew.GetCreationTime() < nExpirationDelay)) ||\n+       (nHashNew > nHashCurrent)) {\n+        LOCK(cs);\n+        object_m_it it = mapObjects.find(nHashWatchdogCurrent);\n+        if(it != mapObjects.end()) {\n+            LogPrint(\"gobject\", \"CGovernanceManager::UpdateCurrentWatchdog -- Expiring previous current watchdog, hash = %s\\n\", nHashWatchdogCurrent.ToString());\n+            it->second.fExpired = true;\n+            if(it->second.nDeletionTime == 0) {\n+                it->second.nDeletionTime = nNow;\n+            }\n+        }\n+        nHashWatchdogCurrent = watchdogNew.GetHash();\n+        nTimeWatchdogCurrent = watchdogNew.GetCreationTime();\n+        fAccept = true;\n+        LogPrint(\"gobject\", \"CGovernanceManager::UpdateCurrentWatchdog -- Current watchdog updated to: hash = %s\\n\",\n+                 ArithToUint256(nHashNew).ToString());\n+    }\n+\n+    return fAccept;\n+}\n+\n void CGovernanceManager::UpdateCachesAndClean()\n {\n     LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean\\n\");\n@@ -394,6 +437,9 @@ void CGovernanceManager::UpdateCachesAndClean()\n                         it2->second.nDeletionTime = nNow;\n                     }\n                 }\n+                if(it->first == nHashWatchdogCurrent) {\n+                    nHashWatchdogCurrent = uint256();\n+                }\n                 mapWatchdogObjects.erase(it++);\n             }\n             else {\n@@ -435,7 +481,8 @@ void CGovernanceManager::UpdateCachesAndClean()\n             continue;\n         }\n \n-        std::string strHash = pObj->GetHash().ToString();\n+        uint256 nHash = it->first;\n+        std::string strHash = nHash.ToString();\n \n         // IF CACHE IS NOT DIRTY, WHY DO THIS?\n         if(pObj->IsSetDirtyCache()) {\n@@ -446,6 +493,10 @@ void CGovernanceManager::UpdateCachesAndClean()\n             pObj->UpdateSentinelVariables();\n         }\n \n+        if(pObj->IsSetCachedDelete() && (nHash == nHashWatchdogCurrent)) {\n+            nHashWatchdogCurrent = uint256();\n+        }\n+\n         // IF DELETE=TRUE, THEN CLEAN THE MESS UP!\n \n         int64_t nTimeSinceDeletion = GetAdjustedTime() - pObj->GetDeletionTime();\n@@ -471,7 +522,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n                     ++lit;\n                 }\n             }\n-            if(pObj->nObjectType == GOVERNANCE_OBJECT_WATCHDOG && pObj->IsSetCachedDelete()) {\n+            if(pObj->nObjectType == GOVERNANCE_OBJECT_WATCHDOG) {\n                 mapWatchdogObjects.erase(it->first);\n             }\n             mapObjects.erase(it++);\n@@ -903,6 +954,12 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n     }\n \n     CGovernanceObject& govobj = it->second;\n+\n+    if(govobj.IsSetCachedDelete() || govobj.IsSetExpired()) {\n+        LogPrint(\"gobject\", \"CGovernanceObject::ProcessVote -- ignoring vote for expired or deleted object, hash = %s\\n\", nHashGovobj.ToString());\n+        return false;\n+    }\n+\n     bool fOk = govobj.ProcessVote(pfrom, vote, exception);\n     if(fOk) {\n         mapVoteToObject.Insert(nHashVote, &govobj);"
      },
      {
        "sha": "74f6cd35c428f71054a65a4543fdec527e3de4d8",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
        "patch": "@@ -236,6 +236,10 @@ class CGovernanceManager\n \n     hash_time_m_t mapWatchdogObjects;\n \n+    uint256 nHashWatchdogCurrent;\n+\n+    int64_t nTimeWatchdogCurrent;\n+\n     object_ref_cache_t mapVoteToObject;\n \n     vote_cache_t mapInvalidVotes;\n@@ -285,7 +289,7 @@ class CGovernanceManager\n     std::vector<CGovernanceObject*> GetAllNewerThan(int64_t nMoreThanTime);\n \n     bool IsBudgetPaymentBlock(int nBlockHeight);\n-    bool AddGovernanceObject (CGovernanceObject& govobj);\n+    bool AddGovernanceObject(CGovernanceObject& govobj, CNode* pfrom = NULL);\n \n     std::string GetRequiredPaymentsString(int nBlockHeight);\n \n@@ -301,6 +305,8 @@ class CGovernanceManager\n         mapObjects.clear();\n         mapSeenGovernanceObjects.clear();\n         mapWatchdogObjects.clear();\n+        nHashWatchdogCurrent = uint256();\n+        nTimeWatchdogCurrent = 0;\n         mapVoteToObject.Clear();\n         mapInvalidVotes.Clear();\n         mapOrphanVotes.Clear();\n@@ -327,6 +333,8 @@ class CGovernanceManager\n         READWRITE(mapOrphanVotes);\n         READWRITE(mapObjects);\n         READWRITE(mapWatchdogObjects);\n+        READWRITE(nHashWatchdogCurrent);\n+        READWRITE(nTimeWatchdogCurrent);\n         READWRITE(mapLastMasternodeObject);\n         if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n             Clear();\n@@ -415,6 +423,8 @@ class CGovernanceManager\n \n     void AddCachedTriggers();\n \n+    bool UpdateCurrentWatchdog(CGovernanceObject& watchdogNew);\n+\n };\n \n #endif"
      }
    ]
  },
  {
    "sha": "0bc6d92334e85560d4c7c629d29b433218d3b9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmM2ZDkyMzM0ZTg1NTYwZDRjN2M2MjlkMjliNDMzMjE4ZDNiOWI0",
    "commit": {
      "author": {
        "name": "Tim Flynn",
        "email": "tgflynn@users.noreply.github.com",
        "date": "2017-02-23T12:29:00Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-23T12:29:00Z"
      },
      "message": "Define current votes by creation time instead of arrival time (#1360)",
      "tree": {
        "sha": "18bc77f604c55701cccd8f9d5416068ba799f2fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18bc77f604c55701cccd8f9d5416068ba799f2fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bc6d92334e85560d4c7c629d29b433218d3b9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc6d92334e85560d4c7c629d29b433218d3b9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc6d92334e85560d4c7c629d29b433218d3b9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc6d92334e85560d4c7c629d29b433218d3b9b4/comments",
    "author": {
      "login": "tgflynn",
      "id": 469756,
      "node_id": "MDQ6VXNlcjQ2OTc1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/469756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tgflynn",
      "html_url": "https://github.com/tgflynn",
      "followers_url": "https://api.github.com/users/tgflynn/followers",
      "following_url": "https://api.github.com/users/tgflynn/following{/other_user}",
      "gists_url": "https://api.github.com/users/tgflynn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tgflynn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tgflynn/subscriptions",
      "organizations_url": "https://api.github.com/users/tgflynn/orgs",
      "repos_url": "https://api.github.com/users/tgflynn/repos",
      "events_url": "https://api.github.com/users/tgflynn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tgflynn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/636fb33e71ad7a60d4e60b56c47b6ea0a6990da4"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 19,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7a5407ec1443703ab46ce0a0689a48f2a848dbb1",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bc6d92334e85560d4c7c629d29b433218d3b9b4/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bc6d92334e85560d4c7c629d29b433218d3b9b4/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=0bc6d92334e85560d4c7c629d29b433218d3b9b4",
        "patch": "@@ -140,6 +140,16 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n         it2 = recVote.mapInstances.insert(vote_instance_m_t::value_type(int(eSignal), vote_instance_t())).first;\n     }\n     vote_instance_t& voteInstance = it2->second;\n+\n+    // Reject obsolete votes\n+    if(vote.GetTimestamp() < voteInstance.nCreationTime) {\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::ProcessVote -- Obsolete vote\" << \"\\n\";\n+        LogPrint(\"gobject\", ostr.str().c_str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_NONE);\n+        return false;\n+    }\n+\n     int64_t nNow = GetTime();\n     int64_t nVoteTimeUpdate = voteInstance.nTime;\n     if(governance.AreRateChecksEnabled()) {\n@@ -168,7 +178,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n         governance.AddInvalidVote(vote);\n         return false;\n     }\n-    voteInstance = vote_instance_t(vote.GetOutcome(), nVoteTimeUpdate);\n+    voteInstance = vote_instance_t(vote.GetOutcome(), nVoteTimeUpdate, vote.GetTimestamp());\n     fileVotes.AddVote(vote);\n     mnodeman.AddGovernanceVote(vote.GetVinMasternode(), vote.GetParentHash());\n     fDirtyCache = true;"
      },
      {
        "sha": "874cdf3d5b186e872c018dc5fa8edd0fc7b3de78",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bc6d92334e85560d4c7c629d29b433218d3b9b4/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bc6d92334e85560d4c7c629d29b433218d3b9b4/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=0bc6d92334e85560d4c7c629d29b433218d3b9b4",
        "patch": "@@ -62,10 +62,12 @@ struct vote_instance_t {\n \n     vote_outcome_enum_t eOutcome;\n     int64_t nTime;\n+    int64_t nCreationTime;\n \n-    vote_instance_t(vote_outcome_enum_t eOutcomeIn = VOTE_OUTCOME_NONE, int64_t nTimeIn = 0)\n+    vote_instance_t(vote_outcome_enum_t eOutcomeIn = VOTE_OUTCOME_NONE, int64_t nTimeIn = 0, int64_t nCreationTimeIn = 0)\n         : eOutcome(eOutcomeIn),\n-          nTime(nTimeIn)\n+          nTime(nTimeIn),\n+          nCreationTime(nCreationTimeIn)\n     {}\n \n     ADD_SERIALIZE_METHODS;\n@@ -76,6 +78,7 @@ struct vote_instance_t {\n         int nOutcome = int(eOutcome);\n         READWRITE(nOutcome);\n         READWRITE(nTime);\n+        READWRITE(nCreationTime);\n         if(ser_action.ForRead()) {\n             eOutcome = vote_outcome_enum_t(nOutcome);\n         }"
      },
      {
        "sha": "227c09b4304fa9bc3be44b5000c8b243b1cdb853",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bc6d92334e85560d4c7c629d29b433218d3b9b4/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bc6d92334e85560d4c7c629d29b433218d3b9b4/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=0bc6d92334e85560d4c7c629d29b433218d3b9b4",
        "patch": "@@ -20,7 +20,7 @@ std::map<uint256, int64_t> mapAskedForGovernanceObject;\n \n int nSubmittedFinalBudget;\n \n-const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-10\";\n+const std::string CGovernanceManager::SERIALIZATION_VERSION_STRING = \"CGovernanceManager-Version-11\";\n \n CGovernanceManager::CGovernanceManager()\n     : pCurrentBlockIndex(NULL),\n@@ -593,10 +593,10 @@ std::vector<CGovernanceVote> CGovernanceManager::GetCurrentVotes(const uint256&\n         for (vote_instance_m_it it3 = voteRecord.mapInstances.begin(); it3 != voteRecord.mapInstances.end(); ++it3) {\n             int signal = (it3->first);\n             int outcome = ((it3->second).eOutcome);\n-            int64_t nTime = ((it3->second).nTime);\n+            int64_t nCreationTime = ((it3->second).nCreationTime);\n \n             CGovernanceVote vote = CGovernanceVote(mnCollateralOutpoint, nParentHash, (vote_signal_enum_t)signal, (vote_outcome_enum_t)outcome);\n-            vote.SetTime(nTime);\n+            vote.SetTime(nCreationTime);\n \n             vecResult.push_back(vote);\n         }"
      }
    ]
  },
  {
    "sha": "a1ef547918c669aa78bac33237f57811196c05a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWVmNTQ3OTE4YzY2OWFhNzhiYWMzMzIzN2Y1NzgxMTE5NmMwNWEz",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-23T17:23:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-02-23T17:23:30Z"
      },
      "message": "only consider higher hashes if they don't exceed nExpirationDelay (#1361)",
      "tree": {
        "sha": "eb07ac7b048863d09e1a1f294c8da7a1bee7743c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb07ac7b048863d09e1a1f294c8da7a1bee7743c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1ef547918c669aa78bac33237f57811196c05a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ef547918c669aa78bac33237f57811196c05a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1ef547918c669aa78bac33237f57811196c05a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ef547918c669aa78bac33237f57811196c05a3/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bc6d92334e85560d4c7c629d29b433218d3b9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc6d92334e85560d4c7c629d29b433218d3b9b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc6d92334e85560d4c7c629d29b433218d3b9b4"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9b42f1d1cea1c2990c2e2a0ca1d46e728861a5f9",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1ef547918c669aa78bac33237f57811196c05a3/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1ef547918c669aa78bac33237f57811196c05a3/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=a1ef547918c669aa78bac33237f57811196c05a3",
        "patch": "@@ -390,9 +390,11 @@ bool CGovernanceManager::UpdateCurrentWatchdog(CGovernanceObject& watchdogNew)\n     int64_t nExpirationDelay = GOVERNANCE_WATCHDOG_EXPIRATION_TIME / 2;\n     int64_t nNow = GetTime();\n \n-    if((nHashWatchdogCurrent == uint256()) ||\n-       (((nNow - nTimeWatchdogCurrent) > nExpirationDelay) && (nNow - watchdogNew.GetCreationTime() < nExpirationDelay)) ||\n-       (nHashNew > nHashCurrent)) {\n+    if(nHashWatchdogCurrent == uint256() ||                                             // no known current OR\n+       ((nNow - watchdogNew.GetCreationTime() < nExpirationDelay) &&                    // (new one is NOT expired AND\n+        ((nNow - nTimeWatchdogCurrent > nExpirationDelay) || (nHashNew > nHashCurrent)))//  (current is expired OR\n+                                                                                        //   its hash is lower))\n+    ) {\n         LOCK(cs);\n         object_m_it it = mapObjects.find(nHashWatchdogCurrent);\n         if(it != mapObjects.end()) {"
      }
    ]
  },
  {
    "sha": "01eeb59af6c981b87d43e2b6508e127f79e767bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWVlYjU5YWY2Yzk4MWI4N2Q0M2UyYjY1MDhlMTI3Zjc5ZTc2N2Ji",
    "commit": {
      "author": {
        "name": "Spencer Lievens",
        "email": "spencerlievens@users.noreply.github.com",
        "date": "2017-02-28T08:59:27Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-28T08:59:27Z"
      },
      "message": "Splashscreen now displays correctly (Fully) (#1367)\n\n* Splashscreen now displays correctly on retina devices\r\n\r\n* Remove devicePixelRatio instances",
      "tree": {
        "sha": "7247c3a63ba5be75f87ac54e63e00d74313c0fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7247c3a63ba5be75f87ac54e63e00d74313c0fa2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01eeb59af6c981b87d43e2b6508e127f79e767bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01eeb59af6c981b87d43e2b6508e127f79e767bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01eeb59af6c981b87d43e2b6508e127f79e767bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01eeb59af6c981b87d43e2b6508e127f79e767bb/comments",
    "author": {
      "login": "spencerlievens",
      "id": 9684063,
      "node_id": "MDQ6VXNlcjk2ODQwNjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9684063?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spencerlievens",
      "html_url": "https://github.com/spencerlievens",
      "followers_url": "https://api.github.com/users/spencerlievens/followers",
      "following_url": "https://api.github.com/users/spencerlievens/following{/other_user}",
      "gists_url": "https://api.github.com/users/spencerlievens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spencerlievens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spencerlievens/subscriptions",
      "organizations_url": "https://api.github.com/users/spencerlievens/orgs",
      "repos_url": "https://api.github.com/users/spencerlievens/repos",
      "events_url": "https://api.github.com/users/spencerlievens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spencerlievens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1ef547918c669aa78bac33237f57811196c05a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1ef547918c669aa78bac33237f57811196c05a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1ef547918c669aa78bac33237f57811196c05a3"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 12,
      "deletions": 13
    },
    "files": [
      {
        "sha": "85de3fa5bb2efedfc52548936e4ae0d41cb572c9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01eeb59af6c981b87d43e2b6508e127f79e767bb/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01eeb59af6c981b87d43e2b6508e127f79e767bb/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=01eeb59af6c981b87d43e2b6508e127f79e767bb",
        "patch": "@@ -5,15 +5,14 @@\n \n #include \"splashscreen.h\"\n \n+#include \"guiutil.h\"\n #include \"networkstyle.h\"\n \n #include \"clientversion.h\"\n-#include \"guiutil.h\"\n #include \"init.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"version.h\"\n-\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #endif\n@@ -26,34 +25,37 @@\n SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n     QWidget(0, f), curAlignment(0)\n {\n+\n+    // transparent background\n+    setAttribute(Qt::WA_TranslucentBackground);\n+    setStyleSheet(\"background:transparent;\");\n+\n+    // no window decorations\n+    setWindowFlags(Qt::FramelessWindowHint);\n+\n     // set reference point, paddings\n     int paddingLeft             = 14;\n     int paddingTop              = 470;\n     int titleVersionVSpace      = 17;\n     int titleCopyrightVSpace    = 32;\n \n     float fontFactor            = 1.0;\n-    float devicePixelRatio      = 1.0;\n-#if QT_VERSION > 0x050100\n-    devicePixelRatio = ((QGuiApplication*)QCoreApplication::instance())->devicePixelRatio();\n-#endif\n \n     // define text to place\n     QString titleText       = tr(\"Dash Core\");\n     QString versionText     = QString(tr(\"Version %1\")).arg(QString::fromStdString(FormatFullVersion()));\n     QString copyrightTextBtc   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n     QString copyrightTextDash   = QChar(0xA9)+QString(\" 2014-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Dash Core developers\"));\n     QString titleAddText    = networkStyle->getTitleAddText();\n-\n-    QString font            = QApplication::font().toString();\n-\n     // networkstyle.cpp can't (yet) read themes, so we do it here to get the correct Splash-screen\n     QString splashScreenPath = \":/images/\" + GUIUtil::getThemeName() + \"/splash\";\n     if(GetBoolArg(\"-regtest\", false))\n         splashScreenPath = \":/images/\" + GUIUtil::getThemeName() + \"/splash_testnet\";\n     if(GetBoolArg(\"-testnet\", false))\n         splashScreenPath = \":/images/\" + GUIUtil::getThemeName() + \"/splash_testnet\";\n \n+    QString font = QApplication::font().toString();\n+\n     // load the bitmap for writing some text over it\n     pixmap = QPixmap(splashScreenPath);\n \n@@ -94,11 +96,8 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n \n     pixPaint.end();\n \n-    // Set window title\n-    setWindowTitle(titleText + \" \" + titleAddText);\n-\n     // Resize window and move to center of desktop, disallow resizing\n-    QRect r(QPoint(), QSize(pixmap.size().width()/devicePixelRatio,pixmap.size().height()/devicePixelRatio));\n+    QRect r(QPoint(), pixmap.size());\n     resize(r.size());\n     setFixedSize(r.size());\n     move(QApplication::desktop()->screenGeometry().center() - r.center());"
      }
    ]
  },
  {
    "sha": "d26916ad5b11426367a0fd3c7ae4a0066606b007",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjY5MTZhZDViMTE0MjYzNjdhMGZkM2M3YWU0YTAwNjY2MDZiMDA3",
    "commit": {
      "author": {
        "name": "chaeplin",
        "email": "chaeplin@users.noreply.github.com",
        "date": "2017-02-28T08:59:49Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-28T08:59:49Z"
      },
      "message": "make sendrawtransaction to accept 2nd optional (#1369)",
      "tree": {
        "sha": "c5b497c00dcdc5a74e8b9ce1cca8890ad2a56e64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b497c00dcdc5a74e8b9ce1cca8890ad2a56e64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d26916ad5b11426367a0fd3c7ae4a0066606b007",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26916ad5b11426367a0fd3c7ae4a0066606b007",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d26916ad5b11426367a0fd3c7ae4a0066606b007",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26916ad5b11426367a0fd3c7ae4a0066606b007/comments",
    "author": {
      "login": "chaeplin",
      "id": 6242157,
      "node_id": "MDQ6VXNlcjYyNDIxNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6242157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chaeplin",
      "html_url": "https://github.com/chaeplin",
      "followers_url": "https://api.github.com/users/chaeplin/followers",
      "following_url": "https://api.github.com/users/chaeplin/following{/other_user}",
      "gists_url": "https://api.github.com/users/chaeplin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chaeplin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chaeplin/subscriptions",
      "organizations_url": "https://api.github.com/users/chaeplin/orgs",
      "repos_url": "https://api.github.com/users/chaeplin/repos",
      "events_url": "https://api.github.com/users/chaeplin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chaeplin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01eeb59af6c981b87d43e2b6508e127f79e767bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01eeb59af6c981b87d43e2b6508e127f79e767bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01eeb59af6c981b87d43e2b6508e127f79e767bb"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7456b36b87424bfa25bb6e6eeb3a703c429ead42",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26916ad5b11426367a0fd3c7ae4a0066606b007/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26916ad5b11426367a0fd3c7ae4a0066606b007/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=d26916ad5b11426367a0fd3c7ae4a0066606b007",
        "patch": "@@ -91,6 +91,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },\n+    { \"sendrawtransaction\", 2 },    \n     { \"fundrawtransaction\", 1 },\n     { \"gettxout\", 1 },\n     { \"gettxout\", 2 },"
      }
    ]
  },
  {
    "sha": "8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzY0YzBhN2NmY2M5NjU3MmFiYzE1NDg1MjlmNmQ2ZjgwNjFmMzFl",
    "commit": {
      "author": {
        "name": "QuantumExplorer",
        "email": "quantumexplorer@hotmail.com",
        "date": "2017-02-28T09:00:02Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-02-28T09:00:02Z"
      },
      "message": "fixed protobuf 3.0 (byteswap) issue on macOS (#1370)",
      "tree": {
        "sha": "9bf8dbab521458f887be007939a2d1673483cfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bf8dbab521458f887be007939a2d1673483cfed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/comments",
    "author": {
      "login": "QuantumExplorer",
      "id": 11468583,
      "node_id": "MDQ6VXNlcjExNDY4NTgz",
      "avatar_url": "https://avatars.githubusercontent.com/u/11468583?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QuantumExplorer",
      "html_url": "https://github.com/QuantumExplorer",
      "followers_url": "https://api.github.com/users/QuantumExplorer/followers",
      "following_url": "https://api.github.com/users/QuantumExplorer/following{/other_user}",
      "gists_url": "https://api.github.com/users/QuantumExplorer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QuantumExplorer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QuantumExplorer/subscriptions",
      "organizations_url": "https://api.github.com/users/QuantumExplorer/orgs",
      "repos_url": "https://api.github.com/users/QuantumExplorer/repos",
      "events_url": "https://api.github.com/users/QuantumExplorer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QuantumExplorer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d26916ad5b11426367a0fd3c7ae4a0066606b007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26916ad5b11426367a0fd3c7ae4a0066606b007",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d26916ad5b11426367a0fd3c7ae4a0066606b007"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 97,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0714032de2dc2b6080e1c5121a6d200dfbb59993",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "patch": "@@ -1,13 +1,16 @@\n bin_PROGRAMS += qt/test/test_dash-qt\n TESTS += qt/test/test_dash-qt\n \n-TEST_QT_MOC_CPP = qt/test/moc_uritests.cpp\n+TEST_QT_MOC_CPP = \\\n+  qt/test/moc_compattests.cpp \\\n+  qt/test/moc_uritests.cpp\n \n if ENABLE_WALLET\n TEST_QT_MOC_CPP += qt/test/moc_paymentservertests.cpp\n endif\n \n TEST_QT_H = \\\n+  qt/test/compattests.h \\\n   qt/test/uritests.h \\\n   qt/test/paymentrequestdata.h \\\n   qt/test/paymentservertests.h\n@@ -16,6 +19,7 @@ qt_test_test_dash_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_dash_qt_SOURCES = \\\n+  qt/test/compattests.cpp \\\n   qt/test/test_main.cpp \\\n   qt/test/uritests.cpp \\\n   $(TEST_QT_H)"
      },
      {
        "sha": "eb72b785acc4d4825afc1154625ba1b59d6b4a7b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "patch": "@@ -43,6 +43,7 @@ BITCOIN_TESTS =\\\n   test/base64_tests.cpp \\\n   test/bip32_tests.cpp \\\n   test/bloom_tests.cpp \\\n+  test/bswap_tests.cpp \\\n   test/cachemap_tests.cpp \\\n   test/cachemultimap_tests.cpp \\\n   test/checkblock_tests.cpp \\"
      },
      {
        "sha": "98f6ad7720f7af668c5b2f050f18958cab29b29f",
        "filename": "src/compat/byteswap.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "patch": "@@ -15,6 +15,23 @@\n #include <byteswap.h>\n #endif\n \n+#if defined(__APPLE__)\n+\n+#if !defined(bswap_16)\n+\n+// Mac OS X / Darwin features; we include a check for bswap_16 because if it is already defined, protobuf has\n+// defined these macros for us already; if it isn't, we do it ourselves. In either case, we get the exact same\n+// result regardless which path was taken\n+#include <libkern/OSByteOrder.h>\n+#define bswap_16(x) OSSwapInt16(x)\n+#define bswap_32(x) OSSwapInt32(x)\n+#define bswap_64(x) OSSwapInt64(x)\n+\n+#endif // !defined(bswap_16)\n+\n+#else\n+// Non-Mac OS X / non-Darwin\n+\n #if HAVE_DECL_BSWAP_16 == 0\n inline uint16_t bswap_16(uint16_t x)\n {\n@@ -44,4 +61,6 @@ inline uint64_t bswap_64(uint64_t x)\n }\n #endif // HAVE_DECL_BSWAP64\n \n+#endif // defined(__APPLE__)\n+\n #endif // BITCOIN_COMPAT_BYTESWAP_H"
      },
      {
        "sha": "2a7284b5b2262834c4b537091e62d5848b09e44c",
        "filename": "src/qt/test/compattests.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/qt/test/compattests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/qt/test/compattests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.cpp?ref=8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"paymentrequestplus.h\" // this includes protobuf's port.h which defines its own bswap macos\n+\n+#include \"compattests.h\"\n+\n+#include \"compat/byteswap.h\"\n+\n+void CompatTests::bswapTests()\n+{\n+\t// Sibling in bitcoin/src/test/bswap_tests.cpp\n+\tuint16_t u1 = 0x1234;\n+\tuint32_t u2 = 0x56789abc;\n+\tuint64_t u3 = 0xdef0123456789abc;\n+\tuint16_t e1 = 0x3412;\n+\tuint32_t e2 = 0xbc9a7856;\n+\tuint64_t e3 = 0xbc9a78563412f0de;\n+\tQVERIFY(bswap_16(u1) == e1);\n+\tQVERIFY(bswap_32(u2) == e2);\n+\tQVERIFY(bswap_64(u3) == e3);\n+}"
      },
      {
        "sha": "35dede774344cd4ddda861d0d46855421f36e22e",
        "filename": "src/qt/test/compattests.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/qt/test/compattests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/qt/test/compattests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.h?ref=8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_TEST_COMPATTESTS_H\n+#define BITCOIN_QT_TEST_COMPATTESTS_H\n+\n+#include <QObject>\n+#include <QTest>\n+\n+class CompatTests : public QObject\n+{\n+    Q_OBJECT\n+\n+private Q_SLOTS:\n+    void bswapTests();\n+};\n+\n+#endif // BITCOIN_QT_TEST_COMPATTESTS_H"
      },
      {
        "sha": "1183b2b209a46ec94087413cfd4b34d4eecade13",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "patch": "@@ -9,6 +9,7 @@\n \n #include \"util.h\"\n #include \"uritests.h\"\n+#include \"compattests.h\"\n \n #ifdef ENABLE_WALLET\n #include \"paymentservertests.h\"\n@@ -49,6 +50,9 @@ int main(int argc, char *argv[])\n     if (QTest::qExec(&test2) != 0)\n         fInvalid = true;\n #endif\n+    CompatTests test4;\n+    if (QTest::qExec(&test4) != 0)\n+        fInvalid = true;\n \n     return fInvalid;\n }"
      },
      {
        "sha": "0be15259a902cab29ec63e49808d53508a469ba1",
        "filename": "src/test/bswap_tests.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/test/bswap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c64c0a7cfcc96572abc1548529f6d6f8061f31e/src/test/bswap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bswap_tests.cpp?ref=8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"compat/byteswap.h\"\n+#include \"test/test_dash.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(bswap_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(bswap_tests)\n+{\n+\t// Sibling in bitcoin/src/qt/test/compattests.cpp\n+\tuint16_t u1 = 0x1234;\n+\tuint32_t u2 = 0x56789abc;\n+\tuint64_t u3 = 0xdef0123456789abc;\n+\tuint16_t e1 = 0x3412;\n+\tuint32_t e2 = 0xbc9a7856;\n+\tuint64_t e3 = 0xbc9a78563412f0de;\n+\tBOOST_CHECK(bswap_16(u1) == e1);\n+\tBOOST_CHECK(bswap_32(u2) == e2);\n+\tBOOST_CHECK(bswap_64(u3) == e3);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "295e94d66a62faf60650fe3f93687b96fcf5522e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTVlOTRkNjZhNjJmYWY2MDY1MGZlM2Y5MzY4N2I5NmZjZjU1MjJl",
    "commit": {
      "author": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-03-01T20:30:21Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-03-01T20:30:21Z"
      },
      "message": "bump to 0.12.1.3 (#1371)",
      "tree": {
        "sha": "ce4d0e432231755278b6bbb0e571b9863c856bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce4d0e432231755278b6bbb0e571b9863c856bf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/295e94d66a62faf60650fe3f93687b96fcf5522e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295e94d66a62faf60650fe3f93687b96fcf5522e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/295e94d66a62faf60650fe3f93687b96fcf5522e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295e94d66a62faf60650fe3f93687b96fcf5522e/comments",
    "author": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c64c0a7cfcc96572abc1548529f6d6f8061f31e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c64c0a7cfcc96572abc1548529f6d6f8061f31e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e0f34c46b982b38dced1e525cd99b6fe06c8d14d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295e94d66a62faf60650fe3f93687b96fcf5522e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295e94d66a62faf60650fe3f93687b96fcf5522e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=295e94d66a62faf60650fe3f93687b96fcf5522e",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 12)\n define(_CLIENT_VERSION_REVISION, 1)\n-define(_CLIENT_VERSION_BUILD, 2)\n+define(_CLIENT_VERSION_BUILD, 3)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2017)\n AC_INIT([Dash Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/dashpay/dash/issues],[dashcore])"
      },
      {
        "sha": "4b931b0aa873dca5347754c1d8b66cfe3b2049a7",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295e94d66a62faf60650fe3f93687b96fcf5522e/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295e94d66a62faf60650fe3f93687b96fcf5522e/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=295e94d66a62faf60650fe3f93687b96fcf5522e",
        "patch": "@@ -17,7 +17,7 @@\n #define CLIENT_VERSION_MAJOR 0\n #define CLIENT_VERSION_MINOR 12\n #define CLIENT_VERSION_REVISION 1\n-#define CLIENT_VERSION_BUILD 2\n+#define CLIENT_VERSION_BUILD 3\n \n //! Set to true for release, false for prerelease or test build\n #define CLIENT_VERSION_IS_RELEASE true"
      }
    ]
  },
  {
    "sha": "1c63052c3e12de166e48281f26a725b60dbb722e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzYzMDUyYzNlMTJkZTE2NmU0ODI4MWYyNmE3MjViNjBkYmI3MjJl",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-03-01T20:30:43Z"
      },
      "committer": {
        "name": "Holger Schinzel",
        "email": "holger.schinzel@gmx.de",
        "date": "2017-03-01T20:30:43Z"
      },
      "message": "fix recently observed crash on IsValid (#1375)\n\n* fix recently observed crash on IsValid\r\n\r\n+some small cleanup\r\n\r\n* txin.prevout.n should not exceed txOutpointCreated.vout.size()\r\n\r\n* fix log output",
      "tree": {
        "sha": "2e190401651afcdf0acaea01a48f9bf4a3ccf337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e190401651afcdf0acaea01a48f9bf4a3ccf337"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c63052c3e12de166e48281f26a725b60dbb722e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c63052c3e12de166e48281f26a725b60dbb722e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c63052c3e12de166e48281f26a725b60dbb722e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c63052c3e12de166e48281f26a725b60dbb722e/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "schinzelh",
      "id": 636669,
      "node_id": "MDQ6VXNlcjYzNjY2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/636669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schinzelh",
      "html_url": "https://github.com/schinzelh",
      "followers_url": "https://api.github.com/users/schinzelh/followers",
      "following_url": "https://api.github.com/users/schinzelh/following{/other_user}",
      "gists_url": "https://api.github.com/users/schinzelh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schinzelh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schinzelh/subscriptions",
      "organizations_url": "https://api.github.com/users/schinzelh/orgs",
      "repos_url": "https://api.github.com/users/schinzelh/repos",
      "events_url": "https://api.github.com/users/schinzelh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schinzelh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "295e94d66a62faf60650fe3f93687b96fcf5522e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295e94d66a62faf60650fe3f93687b96fcf5522e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/295e94d66a62faf60650fe3f93687b96fcf5522e"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 21,
      "deletions": 10
    },
    "files": [
      {
        "sha": "899ab1378037a5d650f449a3653c9acc2564eeb5",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 10,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c63052c3e12de166e48281f26a725b60dbb722e/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c63052c3e12de166e48281f26a725b60dbb722e/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=1c63052c3e12de166e48281f26a725b60dbb722e",
        "patch": "@@ -848,8 +848,8 @@ bool CTxLockRequest::IsValid(bool fRequireUnspent) const\n         return false;\n     }\n \n-    int64_t nValueIn = 0;\n-    int64_t nValueOut = 0;\n+    CAmount nValueIn = 0;\n+    CAmount nValueOut = 0;\n \n     BOOST_FOREACH(const CTxOut& txout, vout) {\n         // InstantSend supports normal scripts and unspendable (i.e. data) scripts.\n@@ -865,6 +865,8 @@ bool CTxLockRequest::IsValid(bool fRequireUnspent) const\n \n         CCoins coins;\n         int nPrevoutHeight = 0;\n+        CAmount nValue = 0;\n+\n         if(!pcoinsTip->GetCoins(txin.prevout.hash, coins) ||\n            (unsigned int)txin.prevout.n>=coins.vout.size() ||\n            coins.vout[txin.prevout.n].IsNull()) {\n@@ -875,20 +877,29 @@ bool CTxLockRequest::IsValid(bool fRequireUnspent) const\n             CTransaction txOutpointCreated;\n             uint256 nHashOutpointConfirmed;\n             if(!GetTransaction(txin.prevout.hash, txOutpointCreated, Params().GetConsensus(), nHashOutpointConfirmed, true) || nHashOutpointConfirmed == uint256()) {\n-                LogPrint(\"instantsend\", \"txLockRequest::IsValid -- Failed to find outpoint %s\\n\", txin.prevout.ToStringShort());\n+                LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Failed to find outpoint %s\\n\", txin.prevout.ToStringShort());\n+                return false;\n+            }\n+            if(txin.prevout.n >= txOutpointCreated.vout.size()) {\n+                LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Outpoint %s is out of bounds, size() = %lld\\n\",\n+                        txin.prevout.ToStringShort(), txOutpointCreated.vout.size());\n                 return false;\n             }\n-            LOCK(cs_main);\n             BlockMap::iterator mi = mapBlockIndex.find(nHashOutpointConfirmed);\n-            if(mi == mapBlockIndex.end()) {\n-                // not on this chain?\n-                LogPrint(\"instantsend\", \"txLockRequest::IsValid -- Failed to find block %s for outpoint %s\\n\", nHashOutpointConfirmed.ToString(), txin.prevout.ToStringShort());\n+            if(mi == mapBlockIndex.end() || !mi->second) {\n+                // shouldn't happen\n+                LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Failed to find block %s for outpoint %s\\n\",\n+                        nHashOutpointConfirmed.ToString(), txin.prevout.ToStringShort());\n                 return false;\n             }\n-            nPrevoutHeight = mi->second ? mi->second->nHeight : 0;\n+            nPrevoutHeight = mi->second->nHeight;\n+            nValue = txOutpointCreated.vout[txin.prevout.n].nValue;\n+        } else {\n+            nPrevoutHeight = coins.nHeight;\n+            nValue = coins.vout[txin.prevout.n].nValue;\n         }\n \n-        int nTxAge = chainActive.Height() - (nPrevoutHeight ? nPrevoutHeight : coins.nHeight) + 1;\n+        int nTxAge = chainActive.Height() - nPrevoutHeight + 1;\n         // 1 less than the \"send IX\" gui requires, in case of a block propagating the network at the time\n         int nConfirmationsRequired = INSTANTSEND_CONFIRMATIONS_REQUIRED - 1;\n \n@@ -898,7 +909,7 @@ bool CTxLockRequest::IsValid(bool fRequireUnspent) const\n             return false;\n         }\n \n-        nValueIn += coins.vout[txin.prevout.n].nValue;\n+        nValueIn += nValue;\n     }\n \n     if(nValueOut > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {"
      }
    ]
  },
  {
    "sha": "5598d640e6068355da84de0b9fd94a7cdb2f7b1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTk4ZDY0MGU2MDY4MzU1ZGE4NGRlMGI5ZmQ5NGE3Y2RiMmY3YjFh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-03-01T20:31:41Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-03-01T20:31:41Z"
      },
      "message": "Do not force disconnect for stalled nodes on sync (#1374)\n\nThey might be simply busy serving us another data",
      "tree": {
        "sha": "5c9b780c53b509da7f44cc69eb2b6b41145f4dfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c9b780c53b509da7f44cc69eb2b6b41145f4dfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5598d640e6068355da84de0b9fd94a7cdb2f7b1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5598d640e6068355da84de0b9fd94a7cdb2f7b1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5598d640e6068355da84de0b9fd94a7cdb2f7b1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5598d640e6068355da84de0b9fd94a7cdb2f7b1a/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c63052c3e12de166e48281f26a725b60dbb722e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c63052c3e12de166e48281f26a725b60dbb722e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c63052c3e12de166e48281f26a725b60dbb722e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "35252e9a789cbba43a0448573821aed3c97aab52",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5598d640e6068355da84de0b9fd94a7cdb2f7b1a/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5598d640e6068355da84de0b9fd94a7cdb2f7b1a/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=5598d640e6068355da84de0b9fd94a7cdb2f7b1a",
        "patch": "@@ -369,9 +369,6 @@ void CMasternodeSync::ProcessTick()\n                 continue;\n             }\n \n-            // Make sure this peer is presumably at the same height\n-            if(!CheckNodeHeight(pnode, true)) continue;\n-\n             // SPORK : ALWAYS ASK FOR SPORKS AS WE SYNC (we skip this mode now)\n \n             if(!netfulfilledman.HasFulfilledRequest(pnode->addr, \"spork-sync\")) {"
      }
    ]
  },
  {
    "sha": "119fe83bb408283c22a8bb3f2acb0a6bed879c8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTlmZTgzYmI0MDgyODNjMjJhOGJiM2YyYWNiMGE2YmVkODc5Yzhh",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2017-03-01T20:31:53Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-03-01T20:31:53Z"
      },
      "message": "Do not send outdated MNs on sync (#1373)",
      "tree": {
        "sha": "cdc01738b61e6ea04f01c74ee96aef48f6b92b78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdc01738b61e6ea04f01c74ee96aef48f6b92b78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/119fe83bb408283c22a8bb3f2acb0a6bed879c8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119fe83bb408283c22a8bb3f2acb0a6bed879c8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/119fe83bb408283c22a8bb3f2acb0a6bed879c8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119fe83bb408283c22a8bb3f2acb0a6bed879c8a/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5598d640e6068355da84de0b9fd94a7cdb2f7b1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5598d640e6068355da84de0b9fd94a7cdb2f7b1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5598d640e6068355da84de0b9fd94a7cdb2f7b1a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0689ec9c44f8292566cfc1f208e6bb631dfed374",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119fe83bb408283c22a8bb3f2acb0a6bed879c8a/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119fe83bb408283c22a8bb3f2acb0a6bed879c8a/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=119fe83bb408283c22a8bb3f2acb0a6bed879c8a",
        "patch": "@@ -909,6 +909,7 @@ void CMasternodeMan::ProcessMessage(CNode* pfrom, std::string& strCommand, CData\n         BOOST_FOREACH(CMasternode& mn, vMasternodes) {\n             if (vin != CTxIn() && vin != mn.vin) continue; // asked for specific vin but we are not there yet\n             if (mn.addr.IsRFC1918() || mn.addr.IsLocal()) continue; // do not send local network masternode\n+            if (mn.IsUpdateRequired()) continue; // do not send outdated masternodes\n \n             LogPrint(\"masternode\", \"DSEG -- Sending Masternode entry: masternode=%s  addr=%s\\n\", mn.vin.prevout.ToStringShort(), mn.addr.ToString());\n             CMasternodeBroadcast mnb = CMasternodeBroadcast(mn);"
      }
    ]
  }
]