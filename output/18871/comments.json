[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623738446",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623738446",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 623738446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzczODQ0Ng==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T22:20:14Z",
    "updated_at": "2020-05-04T22:20:14Z",
    "author_association": "MEMBER",
    "body": "This is still just defeating the linter, I'm afraid. It assumes that a .h file and a .cpp with the same name form a unit.\r\n\r\nThe question it's trying to answer is \"can you use module X without having module Y or the other way around\", where a module is seen as defined by F.cpp + F.h (if both exist).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623738446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623738924",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623738924",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 623738924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzczODkyNA==",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?u=17d35db6d21a792a73c54469705cff5da63abe5f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T22:21:29Z",
    "updated_at": "2020-05-04T22:21:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This is still just defeating the linter, I'm afraid. It assumes that a .h file and a .cpp with the same name form a unit.\r\n> \r\n> The question it's trying to answer is \"can you use module X without having module Y or the other way around\", where a module is seen as defined by F.cpp + F.h (if both exist).\r\n\r\nWhat if I would create rpc/interfaces.cpp that contains all the implementations?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623738924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623739364",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623739364",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 623739364,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzczOTM2NA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-04T22:22:48Z",
    "updated_at": "2020-05-04T22:22:48Z",
    "author_association": "MEMBER",
    "body": "> What if I would create rpc/interfaces.cpp that contains all the implementations?\r\n\r\nIf that works, it's a solution indeed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623739364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623779949",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623779949",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 623779949,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzc3OTk0OQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T00:31:40Z",
    "updated_at": "2020-05-10T04:00:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18830 (rpc: add user field to getrpcinfo's json by brakmic)\n* #18827 (rpc: added getrpcwhitelist method by brakmic)\n* #18814 (rpc: Relock wallet only if most recent callback by promag)\n* #18677 (Multiprocess build support by ryanofsky)\n* #18606 (test: checks that bitcoin-cli autocomplete is in sync by pierreN)\n* #18531 (rpc: Assert that RPCArg names are equal to CRPCCommand ones by MarcoFalke)\n* #18452 (qt: Fix shutdown when waitfor* cmds are called from RPC console by hebasto)\n* #18267 (BIP-325: Signet [consensus] by kallewoof)\n* #18130 (Replace uses of boost::trim* with locale-independent alternatives by Empact)\n* #17356 (RPC: Internal named params by luke-jr)\n* #17127 (util: Correct permissions for datadir and wallets subdir by hebasto)\n* #16710 (build: Enable -Wsuggest-override if available by hebasto)\n* #16549 (UI external signer support (e.g. hardware wallet) by Sjors)\n* #16546 (External signer support - Wallet Box edition by Sjors)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* #15382 (util: add runCommandParseJSON by Sjors)\n* #14810 (qt: Enable tabbing through labels by hebasto)\n* #13686 (ZMQ: Small cleanups in the ZMQ code by domob1812)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623779949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624237736",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624237736",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 624237736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDIzNzczNg==",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?u=17d35db6d21a792a73c54469705cff5da63abe5f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T18:45:45Z",
    "updated_at": "2020-05-05T19:13:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > What if I would create rpc/interfaces.cpp that contains all the implementations?\r\n> \r\n> If that works, it's a solution indeed.\r\n\r\nI have now extracted `CRPCCommand`, `CRPCTable`, various `RPCTimer*`-structures and `Status/WarmUp` functions from `rpc/server.cpp` into the new `rpc/interfaces.cpp`. \r\n\r\nI'm deliberately using the plural form \"interfaces\" to indicate that these are interfaces that deal with RPC Server, but could be later split up into even smaller units, if needed. \r\n\r\nAlso, the `shutdown.h/*.cpp` got removed to get rid of this linker error:\r\n\r\n```shell\r\n AR       libbitcoin_wallet.a\r\n  CXXLD    bitcoin-wallet\r\n  CXXLD    bitcoind\r\nUndefined symbols for architecture x86_64:\r\n  \"StartShutdown()\", referenced from:\r\n      stop(JSONRPCRequest const&) in libbitcoin_common.a(libbitcoin_common_a-interfaces.o)\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nI think that moving the shutdown functionality into `rpc/interfaces` is acceptable, because other server-control functions are located there as well, like `IsRPCRunning` and others.\r\n\r\nWhile I was working on `rpc/interfaces` I also got a chance to remove all those forward class declarations `class CRPCTable`, which btw. provoked warnings like these:\r\n\r\n```shell\r\nMaking all in src\r\n  CXX      wallet/libbitcoin_wallet_a-rpcwallet.o\r\n  AR       libbitcoin_wallet.a\r\n  CXXLD    bitcoind\r\n  CXXLD    bitcoin-wallet\r\nld: warning: duplicate symbol '_tableRPC' in:\r\n    libbitcoin_util.a(libbitcoin_util_a-interfaces.o)\r\n    libbitcoin_wallet.a(libbitcoin_wallet_a-rpcdump.o)\r\nld: warning: duplicate symbol '_tableRPC' in:\r\n    libbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o)\r\n    libbitcoin_wallet.a(libbitcoin_wallet_a-rpcwallet.o)\r\nld: warning: duplicate symbol '_tableRPC' in:\r\n    libbitcoin_wallet.a(libbitcoin_wallet_a-rpcwallet.o)\r\n    libbitcoin_util.a(libbitcoin_util_a-interfaces.o)\r\nld: warning: duplicate symbol '_tableRPC' in:\r\n    libbitcoin_zmq.a(libbitcoin_zmq_a-zmqrpc.o)\r\n    libbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o)\r\nld: warning: duplicate symbol '_tableRPC' in:\r\n    libbitcoin_zmq.a(libbitcoin_zmq_a-zmqrpc.o)\r\n    libbitcoin_wallet.a(libbitcoin_wallet_a-rpcdump.o)\r\nld: warning: duplicate symbol '_tableRPC' in:\r\n    libbitcoin_zmq.a(libbitcoin_zmq_a-zmqrpc.o)\r\n[...snip...]\r\n```\r\n\r\n`rpc/interfaces.cpp` is part of `libbitcoin_server_a_SOURCES` in `src/Makefile.am`\r\n\r\nAnd just to make it even more complex for me, I also stumbled upon yet another circular dependency. :)\r\n\r\n```shell\r\nnode/transaction -> validation -> rpc/interfaces -> rpc/util -> node/transaction\r\n```\r\nBut after I replaced `node/transaction.h` with `util/error.h` in `rpc/util.h`, it disappeared.\r\n\r\nI hope that this proposed solution makes more sense. There are other circular dependencies still, but those exist independently from the one I was chasing over the last few days.\r\n\r\n```shell\r\nCircular dependency: chainparamsbase -> util/system -> chainparamsbase\r\nCircular dependency: index/txindex -> validation -> index/txindex\r\nCircular dependency: policy/fees -> txmempool -> policy/fees\r\nCircular dependency: qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\r\nCircular dependency: qt/bitcoingui -> qt/walletframe -> qt/bitcoingui\r\nCircular dependency: qt/recentrequeststablemodel -> qt/walletmodel -> qt/recentrequeststablemodel\r\nCircular dependency: qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\r\nCircular dependency: qt/transactiontablemodel -> qt/walletmodel -> qt/transactiontablemodel\r\nCircular dependency: txmempool -> validation -> txmempool\r\nCircular dependency: wallet/fees -> wallet/wallet -> wallet/fees\r\nCircular dependency: wallet/wallet -> wallet/walletdb -> wallet/wallet\r\nCircular dependency: policy/fees -> txmempool -> validation -> policy/fees\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624237736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624283992",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624283992",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 624283992,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDI4Mzk5Mg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T20:18:55Z",
    "updated_at": "2020-05-05T20:18:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Have't looked closely at this but I'd discourage using \"prevent circular deps\" as the main justification for a change. If a change makes sense you should be able to say what advantages it has without reference to the linter, and I don't see other advantages cited in the PR description.\r\n\r\nThe circular dependencies linter often suggests joining files together which make more sense separately and splitting things up which make more sense together. It's also rare that it can't be satisfied by just dropping unnecessary includes and using forward-declared types appropriately.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624283992/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624286806",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624286806",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 624286806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDI4NjgwNg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T20:24:48Z",
    "updated_at": "2020-05-05T20:27:41Z",
    "author_association": "MEMBER",
    "body": "@ryanofsky Circular dependency here is not in the meaning of \"can code be compiled without a cycle in #includes\" but in the meaning of \"can this module be used at a semantic level without this other module\". Forward declares do not solve that, they only hide the ability to detect it.\r\n\r\nThe sort of circular dependencies we're talking about here are a symptom of badly organized code, and improving it is a worthwhile goal in my opinion - but not at all costs. Sometimes it requires introducing costly abstractions like installing callbacks/signals, which just aren't worth it. Often it can be solved by just moving things appropriately so that module dependencies form a DAG.\r\n\r\nI agree that the advantage can be stated without reference to the linter in that case.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624286806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624295335",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624295335",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 624295335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDI5NTMzNQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T20:43:13Z",
    "updated_at": "2020-05-05T20:43:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The sort of circular dependencies we're talking about here are a symptom of badly organized code, and improving it is a worthwhile goal in my opinion - but not at all costs.\r\n\r\nI think we agree. I just think if the code is badly organized and the PR improves the organization, the PR description should actually say what was wrong with the organization before and how it's improved. I'm definitely willing to believe there's bad organization here, but I think it'd be good to take a few minutes and spell out what the actual problem is before spending too much time chasing linker and linter errors.\r\n\r\n> Sometimes it requires introducing costly abstractions like installing callbacks/signals, which just aren't worth it. Often it can be solved by just moving things appropriately so that module dependencies form a DAG.\r\n\r\nDefinitely agree. I think if someone is introducing virtual classes and callbacks for no other reason than to satisfy the linter they are doing something wrong. I think there are cases like the fee estimation / mempool circular dependency where having modules call back and forth directly, but still be separate modules is a simple and good solution (https://github.com/bitcoin/bitcoin/pull/15638#discussion_r268718912)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624295335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624299092",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624299092",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 624299092,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDI5OTA5Mg==",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?u=17d35db6d21a792a73c54469705cff5da63abe5f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T20:51:02Z",
    "updated_at": "2020-05-05T20:51:02Z",
    "author_association": "CONTRIBUTOR",
    "body": ">the PR description should actually say what was wrong with the organization before and how it's improved. \r\n\r\nYes, the description will be updated as soon as this PR becomes a *real one*. Currently, it's only a draft and the only proper description is my first (longer) [answer](https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624237736) to @sipa regarding latest changes. As this is still a moving target and I am right now trying to overcome the linking error with `shutdown.cpp` any description in the header of this PR would sooner or later become obsolete. So, better not changing it every few minutes as this would only annoy people.\r\n\r\n> I think if someone is introducing virtual classes and callbacks for no other reason than to satisfy the linter they are doing something wrong. \r\n\r\nMy goal is to **change nothing**, that is: no *magic* via extra calls or structures to circumvent obstacles whatsoever. As @sipa said, it's about creating modules that could be used independently from each other. Either I will succeed in creating proper binary modules out of existing structures and functions, or I will have to give up.\r\n\r\nSo I hope it'll work.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624299092/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624318884",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624318884",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 624318884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDMxODg4NA==",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?u=17d35db6d21a792a73c54469705cff5da63abe5f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-05T21:34:40Z",
    "updated_at": "2020-05-05T22:08:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sipa \r\n\r\n`shutdown.h/.cpp` is back. I've removed its functions from `rpc/interfaces.h/.cpp` accordingly. \r\nRPC functional tests are passing. Unit tests as well. Qt code compiles too and its test pass also.\r\nThis change introduced no new circular dependency that'd affect `rpc/interfaces`. \r\n\r\nThat is, they stayed the same as before:\r\n\r\n```shell\r\nCircular dependency: chainparamsbase -> util/system -> chainparamsbase\r\nCircular dependency: index/txindex -> validation -> index/txindex\r\nCircular dependency: policy/fees -> txmempool -> policy/fees\r\nCircular dependency: qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\r\nCircular dependency: qt/bitcoingui -> qt/walletframe -> qt/bitcoingui\r\nCircular dependency: qt/recentrequeststablemodel -> qt/walletmodel -> qt/recentrequeststablemodel\r\nCircular dependency: qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\r\nCircular dependency: qt/transactiontablemodel -> qt/walletmodel -> qt/transactiontablemodel\r\nCircular dependency: txmempool -> validation -> txmempool\r\nCircular dependency: wallet/fees -> wallet/wallet -> wallet/fees\r\nCircular dependency: wallet/wallet -> wallet/walletdb -> wallet/wallet\r\nCircular dependency: policy/fees -> txmempool -> validation -> policy/fees\r\n```\r\n\r\n**--EDIT:** the only line of code that I had to change was in `void SetRPCWarmupFinished()` because of this complaint from Travis:\r\n\r\n```shell\r\n* Checking consistency between dispatch tables and vRPCConvertParams\r\nCHECK_NONFATAL(condition) should be used instead of assert for RPC code.\r\nsrc/rpc/interfaces.cpp:28:    assert(fRPCInWarmup);\r\n^---- failure generated from test/lint/lint-assertions.sh\r\n```\r\n \r\nSo I replaced `assert` with `CHECK_NONFATAL`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624318884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626217801",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-626217801",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18871",
    "id": 626217801,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjIxNzgwMQ==",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?u=17d35db6d21a792a73c54469705cff5da63abe5f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-09T18:33:17Z",
    "updated_at": "2020-05-09T19:22:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > What if I would create rpc/interfaces.cpp that contains all the implementations?\r\n> \r\n> If that works, it's a solution indeed.\r\n\r\nMeanwhile, I have created a separate shared library that contains the \"extracted\" functions. There are no forward declarations anymore. I've also updated the PR description to reflect all the changes, and when you have time, it'd help me a lot if you could check them.\r\n\r\nAm I on the right track? Did I miss something important? Or is this whole thing simply not worth the effort?\r\n\r\n--EDIT: _And I have no clue why AppVeyor is failing. Travis is fine._",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626217801/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420364414",
    "pull_request_review_id": 406104191,
    "id": 420364414,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NDQxNA==",
    "diff_hunk": "@@ -0,0 +1,175 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_INTERFACES_H\n+#define BITCOIN_RPC_INTERFACES_H\n+\n+#include <atomic>\n+#include <functional>\n+#include <list>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+#include <rpc/request.h>\n+#include <univalue.h>\n+#include <sync.h>\n+\n+static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n+\n+static std::atomic<bool> fRequestShutdown(false);",
    "path": "src/rpc/interfaces.h",
    "position": null,
    "original_position": 21,
    "commit_id": "fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "original_commit_id": "0ce2518428d5b307c6f1cc4e874a4243472c3bbb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Making this static and in a .h file means that every compilation unit (cpp file) that includes it will get its own copy of the variable. If you only want a single copy, it must be declared in a .cpp file, and defined in the corresponding .h file.\r\n\r\nI also think it's very strange that shutdown is now merged into an RPC-specific module. Does nothing outside of RPC need it?",
    "created_at": "2020-05-05T19:48:17Z",
    "updated_at": "2020-05-09T18:48:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420364414",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420364414"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420364414"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420364414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 21,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420366965",
    "pull_request_review_id": 406107300,
    "id": 420366965,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2Njk2NQ==",
    "diff_hunk": "@@ -0,0 +1,175 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_INTERFACES_H\n+#define BITCOIN_RPC_INTERFACES_H\n+\n+#include <atomic>\n+#include <functional>\n+#include <list>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+#include <rpc/request.h>\n+#include <univalue.h>\n+#include <sync.h>\n+\n+static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n+\n+static std::atomic<bool> fRequestShutdown(false);",
    "path": "src/rpc/interfaces.h",
    "position": null,
    "original_position": 21,
    "commit_id": "fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "original_commit_id": "0ce2518428d5b307c6f1cc4e874a4243472c3bbb",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Making this static and in a .h file means that every compilation unit (cpp file) that includes it will get its own copy of the variable. If you only want a single copy, it must be declared in a .cpp file, and defined in the corresponding .h file.\r\n> \r\n\r\nThanks for the hint. Will correct it now.\r\n\r\n> I also think it's very strange that shutdown is now merged into an RPC-specific module. Does nothing outside of RPC need it?\r\n\r\nI never wanted to remove shutdown.h/cpp, but as I couldn't pass the linker error I spoke above, the only way for me was to include shutdown's three methods into rpc/interface.\r\n\r\nI haven't encountered any problems with shutdown removed. Functional RPC-tests are passing.  \r\n\r\nBut I'll gladly revert it, if there is a way to avoid the linker error. ",
    "created_at": "2020-05-05T19:53:00Z",
    "updated_at": "2020-05-09T18:48:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420366965",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420366965"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420366965"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420366965/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 21,
    "side": "RIGHT",
    "in_reply_to_id": 420364414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420378587",
    "pull_request_review_id": 406121739,
    "id": 420378587,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3ODU4Nw==",
    "diff_hunk": "@@ -0,0 +1,175 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_INTERFACES_H\n+#define BITCOIN_RPC_INTERFACES_H\n+\n+#include <atomic>\n+#include <functional>\n+#include <list>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+#include <rpc/request.h>\n+#include <univalue.h>\n+#include <sync.h>\n+\n+static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n+\n+static std::atomic<bool> fRequestShutdown(false);",
    "path": "src/rpc/interfaces.h",
    "position": null,
    "original_position": 21,
    "commit_id": "fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "original_commit_id": "0ce2518428d5b307c6f1cc4e874a4243472c3bbb",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> it must be declared in a .cpp file, and defined in the corresponding .h file.\r\n> \r\n\r\nI must admit that I don't know how to do this. Especially with const variables and atomics.\r\n",
    "created_at": "2020-05-05T20:14:45Z",
    "updated_at": "2020-05-09T18:48:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420378587",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420378587"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420378587"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420378587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 21,
    "side": "RIGHT",
    "in_reply_to_id": 420364414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420381223",
    "pull_request_review_id": 406125031,
    "id": 420381223,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4MTIyMw==",
    "diff_hunk": "@@ -0,0 +1,175 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_INTERFACES_H\n+#define BITCOIN_RPC_INTERFACES_H\n+\n+#include <atomic>\n+#include <functional>\n+#include <list>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+#include <rpc/request.h>\n+#include <univalue.h>\n+#include <sync.h>\n+\n+static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n+\n+static std::atomic<bool> fRequestShutdown(false);",
    "path": "src/rpc/interfaces.h",
    "position": null,
    "original_position": 21,
    "commit_id": "fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "original_commit_id": "0ce2518428d5b307c6f1cc4e874a4243472c3bbb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm being stupid sorry - it's a static variable that's local to shutdown.cpp. It can't and doesn't need to go in shutdown.h.\r\n\r\nI think you shouldn't need to touch this at all. It's perfectly fine as-as in shutdown.cpp. It also has no dependencies, so touching it shouldn't be needed for the purpose of breaking circular dependencies.\r\n\r\nThe issue you're seeing while linking must have to do with the organization into libraries and possibly the order in which those are passed to the linker. That should be solvable by potentially moving things between libraries, but it's hard to say what the exact issue is without tinkering with it myself.",
    "created_at": "2020-05-05T20:19:42Z",
    "updated_at": "2020-05-09T18:48:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420381223",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420381223"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420381223"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420381223/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 21,
    "side": "RIGHT",
    "in_reply_to_id": 420364414
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420382513",
    "pull_request_review_id": 406126660,
    "id": 420382513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4MjUxMw==",
    "diff_hunk": "@@ -0,0 +1,175 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_INTERFACES_H\n+#define BITCOIN_RPC_INTERFACES_H\n+\n+#include <atomic>\n+#include <functional>\n+#include <list>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+#include <rpc/request.h>\n+#include <univalue.h>\n+#include <sync.h>\n+\n+static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n+\n+static std::atomic<bool> fRequestShutdown(false);",
    "path": "src/rpc/interfaces.h",
    "position": null,
    "original_position": 21,
    "commit_id": "fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "original_commit_id": "0ce2518428d5b307c6f1cc4e874a4243472c3bbb",
    "user": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I'm being stupid sorry - it's a static variable that's local to shutdown.cpp. It can't and doesn't need to go in shutdown.h.\r\n\r\nThanks for the clarification! I was already questioning life and existence. :)\r\n\r\n> \r\n> I think you shouldn't need to touch this at all. It's perfectly fine as-as in shutdown.cpp. It also has no dependencies, so touching it shouldn't be needed for the purpose of breaking circular dependencies.\r\n> \r\n> The issue you're seeing while linking must have to do with the organization into libraries and possibly the order in which those are passed to the linker. That should be solvable by potentially moving things between libraries, but it's hard to say what the exact issue is without tinkering with it myself.\r\n\r\nOk, then I will bring back shutdown.h/cpp and then try to find a way.",
    "created_at": "2020-05-05T20:22:15Z",
    "updated_at": "2020-05-09T18:48:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420382513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420382513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420382513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18871"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420382513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 21,
    "side": "RIGHT",
    "in_reply_to_id": 420364414
  }
]