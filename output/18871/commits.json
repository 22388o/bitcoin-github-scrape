[
  {
    "sha": "fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2Q0ZjYxNTVlZGQzNDY0ODgzYWUwZjdkYWMxZWVlZTJhYjUyY2Nj",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-09T18:48:25Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-09T18:48:25Z"
      },
      "message": "rpc: prevent circular deps by extracting into separate include",
      "tree": {
        "sha": "05b83c76055bc0a8193edcfbb876045c8d5b8b5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05b83c76055bc0a8193edcfbb876045c8d5b8b5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl62+vkACgkQJiaFvHjt\nEfv4aggApYXQCCNlgAcL0P+aqPBag6EEfkvW1XM7AUeUhHFfn8T+xke/WCkyxVqN\nqbH2pfTBByrht+euxBYxcrypH+INm2slGoMg9ZxSrh22PejRISAg2EJU6sGHqAbY\ndPoWKIoAlRh7m+kkMmz6VuMozECBBSyfGruiDFmK6W4fCUItX3b1H2NWp7dfE36H\nFMa14xKP4mhGXp2HqR0Fy4z+FPui2gf0lVdGjzyFAD4x82i1AzBZDYjR3yfoGa3a\nL9lDLkmDxa2WVnpSANGeWkn0yREFrkPmX7/1rAJteCXL9dDELBIMwo/ZGHJj+7Yn\noZotpevGkiN9HlM55lAJysIOw6ocNQ==\n=D9ZD\n-----END PGP SIGNATURE-----",
        "payload": "tree 05b83c76055bc0a8193edcfbb876045c8d5b8b5e\nparent 88d8b4e182bfc75e8496f7046af7aab93307b9d0\nauthor Harris <brakmic@gmail.com> 1589050105 +0200\ncommitter Harris <brakmic@gmail.com> 1589050105 +0200\n\nrpc: prevent circular deps by extracting into separate include\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 1362,
      "additions": 715,
      "deletions": 647
    },
    "files": [
      {
        "sha": "7c96659d89ea8ee34ead780863d1289a9f589849",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -25,6 +25,7 @@ BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n+LIBBITCOIN_SERVER_INTERFACES=libbitcoin_server_interfaces.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n LIBBITCOIN_CONSENSUS=libbitcoin_consensus.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n@@ -66,6 +67,7 @@ $(LIBSECP256K1): $(wildcard secp256k1/src/*.h) $(wildcard secp256k1/src/*.c) $(w\n EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_SERVER_INTERFACES) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_SERVER) \\\n@@ -180,6 +182,7 @@ BITCOIN_CORE_H = \\\n   reverse_iterator.h \\\n   rpc/blockchain.h \\\n   rpc/client.h \\\n+  rpc/interfaces.h \\\n   rpc/protocol.h \\\n   rpc/rawtransaction_util.h \\\n   rpc/register.h \\\n@@ -319,6 +322,15 @@ libbitcoin_server_a_SOURCES = \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# server interfaces: shared between bitcoind and bitcoin-qt\n+# Contains code for accessing the server state and executing RPC commands.\n+libbitcoin_server_interfaces_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+libbitcoin_server_interfaces_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_server_interfaces_a_SOURCES = \\\n+  rpc/interfaces.cpp \\\n+  $(BITCOIN_CORE_H)\n+\n+\n if ENABLE_WALLET\n libbitcoin_server_a_SOURCES += wallet/init.cpp\n endif\n@@ -563,6 +575,7 @@ bitcoind_LDADD = \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_SERVER_INTERFACES) \\\n   $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "9523df718271a74d6d034933d353ed08fea71e6f",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -47,6 +47,7 @@ nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n+  $(LIBBITCOIN_SERVER_INTERFACES) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\"
      },
      {
        "sha": "55598c8a290cd52589723ed995c0181e57dc8f9b",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -305,7 +305,7 @@ qt_bitcoin_qt_SOURCES = qt/main.cpp\n if TARGET_WINDOWS\n   qt_bitcoin_qt_SOURCES += $(BITCOIN_RC)\n endif\n-qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n+qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER_INTERFACES) $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n endif"
      },
      {
        "sha": "95315c2596b8c6123e47e24db1398ed38c609763",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -46,7 +46,7 @@ endif # ENABLE_WALLET\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n \n-qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER) $(LIBTEST_UTIL)\n+qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER_INTERFACES) $(LIBBITCOIN_SERVER) $(LIBTEST_UTIL)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_UTIL) $(LIBBITCOIN_WALLET)\n endif"
      },
      {
        "sha": "9ad005cf10ffa5d6959ec029288dba7205529c3e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -284,7 +284,7 @@ if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n \n-test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER_INTERFACES) $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n "
      },
      {
        "sha": "25a7539c3ada2571df45c0d9f3360b8e7809bcb0",
        "filename": "src/Makefile.test_fuzz.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.test_fuzz.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.test_fuzz.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_fuzz.include?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -18,6 +18,7 @@ libtest_fuzz_a_SOURCES = \\\n   test/fuzz/fuzz.cpp \\\n   $(TEST_FUZZ_H)\n \n+LIBTEST_FUZZ += $(LIBBITCOIN_SERVER_INTERFACES)\n LIBTEST_FUZZ += $(LIBBITCOIN_SERVER)\n LIBTEST_FUZZ += $(LIBBITCOIN_COMMON)\n LIBTEST_FUZZ += $(LIBBITCOIN_UTIL)"
      },
      {
        "sha": "250cf594e68b40bd1fe1efe1ff881f18ad83f02e",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -30,6 +30,7 @@ libtest_util_a_SOURCES = \\\n   test/util/wallet.cpp \\\n   $(TEST_UTIL_H)\n \n+LIBTEST_UTIL += $(LIBBITCOIN_SERVER_INTERFACES)\n LIBTEST_UTIL += $(LIBBITCOIN_SERVER)\n LIBTEST_UTIL += $(LIBBITCOIN_COMMON)\n LIBTEST_UTIL += $(LIBBITCOIN_UTIL)"
      },
      {
        "sha": "63733f6cd1f136f371df59657f934bc87cffd6b5",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -7,8 +7,8 @@\n #include <chainparams.h>\n #include <crypto/hmac_sha256.h>\n #include <httpserver.h>\n+#include <rpc/interfaces.h>\n #include <rpc/protocol.h>\n-#include <rpc/server.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n@@ -23,6 +23,8 @@\n #include <set>\n #include <string>\n \n+extern CRPCTable tableRPC;\n+\n #include <boost/algorithm/string.hpp> // boost::trim\n \n /** WWW-Authenticate to present with 401 Unauthorized response */"
      },
      {
        "sha": "512d9c0e9fc96b330175fa9e9ac3d3f0a2821aae",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -35,8 +35,9 @@\n #include <policy/policy.h>\n #include <policy/settings.h>\n #include <rpc/blockchain.h>\n-#include <rpc/register.h>\n+#include <rpc/interfaces.h>\n #include <rpc/server.h>\n+#include <rpc/register.h>\n #include <rpc/util.h>\n #include <scheduler.h>\n #include <script/sigcache.h>\n@@ -96,6 +97,9 @@ static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n #define MIN_CORE_FILEDESCRIPTORS 150\n #endif\n \n+extern CRPCTable tableRPC;\n+extern const unsigned int DEFAULT_RPC_SERIALIZE_VERSION;\n+\n static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n \n static const char* DEFAULT_ASMAP_FILENAME=\"ip_asn.map\";"
      },
      {
        "sha": "2856affc7348e792178bf225955c331d0a2a6f31",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -19,8 +19,8 @@\n #include <policy/settings.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n+#include <rpc/interfaces.h>\n #include <rpc/protocol.h>\n-#include <rpc/server.h>\n #include <shutdown.h>\n #include <sync.h>\n #include <timedata.h>\n@@ -35,6 +35,8 @@\n #include <memory>\n #include <utility>\n \n+extern CRPCTable tableRPC;\n+\n namespace interfaces {\n namespace {\n \n@@ -124,14 +126,14 @@ class RpcHandlerImpl : public Handler\n                 throw;\n             }\n         };\n-        ::tableRPC.appendCommand(m_command.name, &m_command);\n+        tableRPC.appendCommand(m_command.name, &m_command);\n     }\n \n     void disconnect() override final\n     {\n         if (m_wrapped_command) {\n             m_wrapped_command = nullptr;\n-            ::tableRPC.removeCommand(m_command.name, &m_command);\n+            tableRPC.removeCommand(m_command.name, &m_command);\n         }\n     }\n "
      },
      {
        "sha": "5c57f5ea9af6682ceba9b5c1dc0f87bf3f9f0f93",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <optional.h>               // For Optional and nullopt\n #include <primitives/transaction.h> // For CTransactionRef\n+#include <rpc/interfaces.h>         // For CRPCCommand\n \n #include <memory>\n #include <stddef.h>\n@@ -16,7 +17,6 @@\n \n class CBlock;\n class CFeeRate;\n-class CRPCCommand;\n class CScheduler;\n class Coin;\n class uint256;"
      },
      {
        "sha": "01aa9335b0376758662e19ec782a5a704adfb0d1",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -21,7 +21,7 @@\n #include <policy/fees.h>\n #include <policy/settings.h>\n #include <primitives/block.h>\n-#include <rpc/server.h>\n+#include <rpc/interfaces.h>\n #include <shutdown.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n@@ -40,6 +40,8 @@\n \n #include <boost/signals2/signal.hpp>\n \n+extern CRPCTable tableRPC;\n+\n class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n@@ -229,9 +231,9 @@ class NodeImpl : public Node\n         req.params = params;\n         req.strMethod = command;\n         req.URI = uri;\n-        return ::tableRPC.execute(req);\n+        return tableRPC.execute(req);\n     }\n-    std::vector<std::string> listRpcCommands() override { return ::tableRPC.listCommands(); }\n+    std::vector<std::string> listRpcCommands() override { return tableRPC.listCommands(); }\n     void rpcSetTimerInterfaceIfUnset(RPCTimerInterface* iface) override { RPCSetTimerInterfaceIfUnset(iface); }\n     void rpcUnsetTimerInterface(RPCTimerInterface* iface) override { RPCUnsetTimerInterface(iface); }\n     bool getUnspentOutput(const COutPoint& output, Coin& coin) override"
      },
      {
        "sha": "cb5a7318c817b095400dc6552e3ad6b823a503e5",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -9,6 +9,7 @@\n #include <net.h>        // For CConnman::NumConnections\n #include <net_types.h>  // For banmap_t\n #include <netaddress.h> // For Network\n+#include <rpc/interfaces.h> // For RPCTimerInterface\n #include <support/allocators/secure.h> // For SecureString\n \n #include <functional>\n@@ -24,7 +25,6 @@ class CCoinControl;\n class CFeeRate;\n class CNodeStats;\n class Coin;\n-class RPCTimerInterface;\n class UniValue;\n class proxyType;\n enum class WalletCreationStatus;"
      },
      {
        "sha": "9875e82564556ce396a8166eb68b0a3875fb88e2",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -14,6 +14,7 @@\n #include <interfaces/node.h>\n #include <net.h>\n #include <netbase.h>\n+#include <rpc/interfaces.h>\n #include <util/system.h>\n \n #include <stdint.h>"
      },
      {
        "sha": "135c040c16b7085f3652beb10a523e26e2ffc4de",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -16,7 +16,6 @@\n #include <chainparams.h>\n #include <interfaces/node.h>\n #include <netbase.h>\n-#include <rpc/server.h>\n #include <rpc/client.h>\n #include <util/strencodings.h>\n #include <util/system.h>"
      },
      {
        "sha": "b4e2fdd85b8fa007821c7dc2bbd3fcbe5f03c9f1",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -9,14 +9,14 @@\n #include <qt/peertablemodel.h>\n \n #include <net.h>\n+#include <rpc/interfaces.h>\n \n #include <QWidget>\n #include <QCompleter>\n #include <QThread>\n \n class ClientModel;\n class PlatformStyle;\n-class RPCTimerInterface;\n class WalletModel;\n \n namespace interfaces {"
      },
      {
        "sha": "479e4180a60e22afcc6a15898769355b9c1d290f",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -5,7 +5,7 @@\n #include <qt/test/rpcnestedtests.h>\n \n #include <interfaces/node.h>\n-#include <rpc/server.h>\n+#include <rpc/interfaces.h>\n #include <qt/rpcconsole.h>\n #include <test/util/setup_common.h>\n #include <univalue.h>\n@@ -14,6 +14,8 @@\n #include <QDir>\n #include <QtGlobal>\n \n+extern CRPCTable tableRPC;\n+\n static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n {\n     if (request.fHelp) {"
      },
      {
        "sha": "5372e03b6b582c108dc3fb5b8aefb24e3da3201f",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -12,8 +12,8 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <rpc/blockchain.h>\n+#include <rpc/interfaces.h>\n #include <rpc/protocol.h>\n-#include <rpc/server.h>\n #include <streams.h>\n #include <sync.h>\n #include <txmempool.h>"
      },
      {
        "sha": "a2092dc374a9f4c09a7fc51fb77475a444fc9a37",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -21,7 +21,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n-#include <rpc/server.h>\n+#include <rpc/interfaces.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <streams.h>"
      },
      {
        "sha": "1bbd601acc8d317bd0d1f50a04b7b7e785a5fb86",
        "filename": "src/rpc/interfaces.cpp",
        "status": "added",
        "additions": 457,
        "deletions": 0,
        "changes": 457,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/interfaces.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -0,0 +1,457 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/interfaces.h>\n+\n+#include <logging.h>\n+#include <rpc/util.h>\n+#include <rpc/request.h>\n+#include <shutdown.h>\n+#include <sync.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <boost/signals2/signal.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+\n+#include <unordered_map>\n+\n+RecursiveMutex cs_rpcWarmup;\n+std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server started\";\n+bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;\n+std::atomic<bool> g_rpc_running{false};\n+\n+/* Map of name to timer. */\n+std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n+/* Timer-creating functions */\n+RPCTimerInterface* timerInterface = nullptr;\n+\n+// Application startup time (used for uptime calculation)\n+const int64_t nStartupTime = GetTime();\n+\n+RPCCommandExecution::RPCCommandExecution(const std::string& method)\n+{\n+    LOCK(g_rpc_server_info.mutex);\n+    it = g_rpc_server_info.active_commands.insert(g_rpc_server_info.active_commands.end(), {method, GetTimeMicros()});\n+}\n+RPCCommandExecution::~RPCCommandExecution()\n+{\n+    LOCK(g_rpc_server_info.mutex);\n+    g_rpc_server_info.active_commands.erase(it);\n+}\n+\n+UniValue stop(const JSONRPCRequest& jsonRequest)\n+{\n+    static const std::string RESULT{PACKAGE_NAME \" stopping\"};\n+    // Accept the deprecated and ignored 'detach' boolean argument\n+    // Also accept the hidden 'wait' integer argument (milliseconds)\n+    // For instance, 'stop 1000' makes the call wait 1 second before returning\n+    // to the client (intended for testing)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"stop\",\n+                \"\\nRequest a graceful shutdown of \" PACKAGE_NAME \".\",\n+                {},\n+                RPCResult{RPCResult::Type::STR, \"\", \"A string with the content '\" + RESULT + \"'\"},\n+                RPCExamples{\"\"},\n+            }.ToString());\n+    // Event loop will exit after current HTTP requests have been handled, so\n+    // this reply will get back to the client.\n+    StartShutdown();\n+    if (jsonRequest.params[0].isNum()) {\n+        UninterruptibleSleep(std::chrono::milliseconds{jsonRequest.params[0].get_int()});\n+    }\n+    return RESULT;\n+}\n+\n+static UniValue uptime(const JSONRPCRequest& jsonRequest)\n+{\n+            RPCHelpMan{\"uptime\",\n+                \"\\nReturns the total uptime of the server.\\n\",\n+                            {},\n+                            RPCResult{\n+                                RPCResult::Type::NUM, \"\", \"The number of seconds that the server has been running\"\n+                            },\n+                RPCExamples{\n+                    HelpExampleCli(\"uptime\", \"\")\n+                + HelpExampleRpc(\"uptime\", \"\")\n+                },\n+            }.Check(jsonRequest);\n+\n+    return GetTime() - GetStartupTime();\n+}\n+\n+static UniValue getrpcinfo(const JSONRPCRequest& request)\n+{\n+            RPCHelpMan{\"getrpcinfo\",\n+                \"\\nReturns details of the RPC server.\\n\",\n+                {},\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"active_commands\", \"All active commands\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"Information about an active command\",\n+                            {\n+                                 {RPCResult::Type::STR, \"method\", \"The name of the RPC command\"},\n+                                 {RPCResult::Type::NUM, \"duration\", \"The running time in microseconds\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::STR, \"logpath\", \"The complete file path to the debug log\"},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getrpcinfo\", \"\")\n+                + HelpExampleRpc(\"getrpcinfo\", \"\")},\n+            }.Check(request);\n+\n+    LOCK(g_rpc_server_info.mutex);\n+    UniValue active_commands(UniValue::VARR);\n+    for (const RPCCommandExecutionInfo& info : g_rpc_server_info.active_commands) {\n+        UniValue entry(UniValue::VOBJ);\n+        entry.pushKV(\"method\", info.method);\n+        entry.pushKV(\"duration\", GetTimeMicros() - info.start);\n+        active_commands.push_back(entry);\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"active_commands\", active_commands);\n+\n+    const std::string path = LogInstance().m_file_path.string();\n+    UniValue log_path(UniValue::VSTR, path);\n+    result.pushKV(\"logpath\", log_path);\n+\n+    return result;\n+}\n+\n+UniValue help(const JSONRPCRequest& jsonRequest);\n+\n+// clang-format off\n+static const CRPCCommand vRPCCommands[] =\n+{ //  category              name                      actor (function)         argNames\n+  //  --------------------- ------------------------  -----------------------  ----------\n+    /* Overall control/query calls */\n+    { \"control\",            \"getrpcinfo\",             &getrpcinfo,             {}  },\n+    { \"control\",            \"help\",                   &help,                   {\"command\"}  },\n+    { \"control\",            \"stop\",                   &stop,                   {\"wait\"}  },\n+    { \"control\",            \"uptime\",                 &uptime,                 {}  },\n+};\n+// clang-format on\n+\n+CRPCTable::CRPCTable()\n+{\n+    unsigned int vcidx;\n+    for (vcidx = 0; vcidx < (sizeof(vRPCCommands) / sizeof(vRPCCommands[0])); vcidx++)\n+    {\n+        const CRPCCommand *pcmd;\n+\n+        pcmd = &vRPCCommands[vcidx];\n+        mapCommands[pcmd->name].push_back(pcmd);\n+    }\n+}\n+\n+std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const\n+{\n+    std::string strRet;\n+    std::string category;\n+    std::set<intptr_t> setDone;\n+    std::vector<std::pair<std::string, const CRPCCommand*> > vCommands;\n+\n+    for (const auto& entry : mapCommands)\n+        vCommands.push_back(make_pair(entry.second.front()->category + entry.first, entry.second.front()));\n+    sort(vCommands.begin(), vCommands.end());\n+\n+    JSONRPCRequest jreq(helpreq);\n+    jreq.fHelp = true;\n+    jreq.params = UniValue();\n+\n+    for (const std::pair<std::string, const CRPCCommand*>& command : vCommands)\n+    {\n+        const CRPCCommand *pcmd = command.second;\n+        std::string strMethod = pcmd->name;\n+        if ((strCommand != \"\" || pcmd->category == \"hidden\") && strMethod != strCommand)\n+            continue;\n+        jreq.strMethod = strMethod;\n+        try\n+        {\n+            UniValue unused_result;\n+            if (setDone.insert(pcmd->unique_id).second)\n+                pcmd->actor(jreq, unused_result, true /* last_handler */);\n+        }\n+        catch (const std::exception& e)\n+        {\n+            // Help text is returned in an exception\n+            std::string strHelp = std::string(e.what());\n+            if (strCommand == \"\")\n+            {\n+                if (strHelp.find('\\n') != std::string::npos)\n+                    strHelp = strHelp.substr(0, strHelp.find('\\n'));\n+\n+                if (category != pcmd->category)\n+                {\n+                    if (!category.empty())\n+                        strRet += \"\\n\";\n+                    category = pcmd->category;\n+                    strRet += \"== \" + Capitalize(category) + \" ==\\n\";\n+                }\n+            }\n+            strRet += strHelp + \"\\n\";\n+        }\n+    }\n+    if (strRet == \"\")\n+        strRet = strprintf(\"help: unknown command: %s\\n\", strCommand);\n+    strRet = strRet.substr(0,strRet.size()-1);\n+    return strRet;\n+}\n+\n+bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n+{\n+    if (IsRPCRunning())\n+        return false;\n+\n+    mapCommands[name].push_back(pcmd);\n+    return true;\n+}\n+\n+bool CRPCTable::removeCommand(const std::string& name, const CRPCCommand* pcmd)\n+{\n+    auto it = mapCommands.find(name);\n+    if (it != mapCommands.end()) {\n+        auto new_end = std::remove(it->second.begin(), it->second.end(), pcmd);\n+        if (it->second.end() != new_end) {\n+            it->second.erase(new_end, it->second.end());\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Process named arguments into a vector of positional arguments, based on the\n+ * passed-in specification for the RPC call's arguments.\n+ */\n+static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)\n+{\n+    JSONRPCRequest out = in;\n+    out.params = UniValue(UniValue::VARR);\n+    // Build a map of parameters, and remove ones that have been processed, so that we can throw a focused error if\n+    // there is an unknown one.\n+    const std::vector<std::string>& keys = in.params.getKeys();\n+    const std::vector<UniValue>& values = in.params.getValues();\n+    std::unordered_map<std::string, const UniValue*> argsIn;\n+    for (size_t i=0; i<keys.size(); ++i) {\n+        argsIn[keys[i]] = &values[i];\n+    }\n+    // Process expected parameters.\n+    int hole = 0;\n+    for (const std::string &argNamePattern: argNames) {\n+        std::vector<std::string> vargNames;\n+        boost::algorithm::split(vargNames, argNamePattern, boost::algorithm::is_any_of(\"|\"));\n+        auto fr = argsIn.end();\n+        for (const std::string & argName : vargNames) {\n+            fr = argsIn.find(argName);\n+            if (fr != argsIn.end()) {\n+                break;\n+            }\n+        }\n+        if (fr != argsIn.end()) {\n+            for (int i = 0; i < hole; ++i) {\n+                // Fill hole between specified parameters with JSON nulls,\n+                // but not at the end (for backwards compatibility with calls\n+                // that act based on number of specified parameters).\n+                out.params.push_back(UniValue());\n+            }\n+            hole = 0;\n+            out.params.push_back(*fr->second);\n+            argsIn.erase(fr);\n+        } else {\n+            hole += 1;\n+        }\n+    }\n+    // If there are still arguments in the argsIn map, this is an error.\n+    if (!argsIn.empty()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown named parameter \" + argsIn.begin()->first);\n+    }\n+    // Return request with named arguments transformed to positional arguments\n+    return out;\n+}\n+\n+static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)\n+{\n+    try\n+    {\n+        RPCCommandExecution execution(request.strMethod);\n+        // Execute, convert arguments to array if necessary\n+        if (request.params.isObject()) {\n+            return command.actor(transformNamedArguments(request, command.argNames), result, last_handler);\n+        } else {\n+            return command.actor(request, result, last_handler);\n+        }\n+    }\n+    catch (const std::exception& e)\n+    {\n+        throw JSONRPCError(RPC_MISC_ERROR, e.what());\n+    }\n+}\n+\n+UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n+{\n+    // Return immediately if in warmup\n+    {\n+        LOCK(cs_rpcWarmup);\n+        if (fRPCInWarmup)\n+            throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n+    }\n+\n+    // Find method\n+    auto it = mapCommands.find(request.strMethod);\n+    if (it != mapCommands.end()) {\n+        UniValue result;\n+        for (const auto& command : it->second) {\n+            if (ExecuteCommand(*command, request, result, &command == &it->second.back())) {\n+                return result;\n+            }\n+        }\n+    }\n+    throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n+}\n+\n+std::vector<std::string> CRPCTable::listCommands() const\n+{\n+    std::vector<std::string> commandList;\n+    for (const auto& i : mapCommands) commandList.emplace_back(i.first);\n+    return commandList;\n+}\n+\n+CRPCTable tableRPC;\n+\n+// Obtain the application startup time (used for uptime calculation)\n+int64_t GetStartupTime()\n+{\n+    return nStartupTime;\n+}\n+\n+bool IsRPCRunning()\n+{\n+    return g_rpc_running;\n+}\n+\n+UniValue help(const JSONRPCRequest& jsonRequest)\n+{\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"help\",\n+                \"\\nList all commands, or get help for a specified command.\\n\",\n+                {\n+                    {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::STR, \"\", \"The help text\"\n+                },\n+                RPCExamples{\"\"},\n+            }.ToString()\n+        );\n+\n+    std::string strCommand;\n+    if (jsonRequest.params.size() > 0)\n+        strCommand = jsonRequest.params[0].get_str();\n+\n+    return tableRPC.help(strCommand, jsonRequest);\n+}\n+\n+static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)\n+{\n+    UniValue rpc_result(UniValue::VOBJ);\n+\n+    try {\n+        jreq.parse(req);\n+\n+        UniValue result = tableRPC.execute(jreq);\n+        rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n+    }\n+    catch (const UniValue& objError)\n+    {\n+        rpc_result = JSONRPCReplyObj(NullUniValue, objError, jreq.id);\n+    }\n+    catch (const std::exception& e)\n+    {\n+        rpc_result = JSONRPCReplyObj(NullUniValue,\n+                                     JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n+    }\n+\n+    return rpc_result;\n+}\n+\n+std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)\n+{\n+    UniValue ret(UniValue::VARR);\n+    for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n+        ret.push_back(JSONRPCExecOne(jreq, vReq[reqIdx]));\n+\n+    return ret.write() + \"\\n\";\n+}\n+\n+int RPCSerializationFlags()\n+{\n+    int flag = 0;\n+    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n+        flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n+    return flag;\n+}\n+\n+void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)\n+{\n+    if (!timerInterface)\n+        timerInterface = iface;\n+}\n+\n+void RPCSetTimerInterface(RPCTimerInterface *iface)\n+{\n+    timerInterface = iface;\n+}\n+\n+void RPCUnsetTimerInterface(RPCTimerInterface *iface)\n+{\n+    if (timerInterface == iface)\n+        timerInterface = nullptr;\n+}\n+\n+void SetRPCWarmupStatus(const std::string& newStatus)\n+{\n+    LOCK(cs_rpcWarmup);\n+    rpcWarmupStatus = newStatus;\n+}\n+\n+void SetRPCWarmupFinished()\n+{\n+    LOCK(cs_rpcWarmup);\n+    CHECK_NONFATAL(fRPCInWarmup);\n+    fRPCInWarmup = false;\n+}\n+\n+bool RPCIsInWarmup(std::string *outStatus)\n+{\n+    LOCK(cs_rpcWarmup);\n+    if (outStatus)\n+        *outStatus = rpcWarmupStatus;\n+    return fRPCInWarmup;\n+}\n+\n+void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds)\n+{\n+    if (!timerInterface)\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");\n+    deadlineTimers.erase(name);\n+    LogPrint(BCLog::RPC, \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n+    deadlineTimers.emplace(name, std::unique_ptr<RPCTimerBase>(timerInterface->NewTimer(func, nSeconds*1000)));\n+}\n+\n+bool IsDeprecatedRPCEnabled(const std::string& method)\n+{\n+    const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");\n+\n+    return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "8ad18e5a5eb82056d5d785c7a3b04cbdd1789ce6",
        "filename": "src/rpc/interfaces.h",
        "status": "added",
        "additions": 180,
        "deletions": 0,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/interfaces.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/interfaces.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/interfaces.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_INTERFACES_H\n+#define BITCOIN_RPC_INTERFACES_H\n+\n+#include <atomic>\n+#include <functional>\n+#include <list>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+#include <rpc/request.h>\n+#include <univalue.h>\n+#include <sync.h>\n+\n+const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n+\n+struct RPCCommandExecutionInfo\n+{\n+    std::string method;\n+    int64_t start;\n+};\n+\n+struct RPCServerInfo\n+{\n+    Mutex mutex;\n+    std::list<RPCCommandExecutionInfo> active_commands GUARDED_BY(mutex);\n+};\n+\n+static RPCServerInfo g_rpc_server_info;\n+\n+struct RPCCommandExecution\n+{\n+    std::list<RPCCommandExecutionInfo>::iterator it;\n+    explicit RPCCommandExecution(const std::string& method);\n+    ~RPCCommandExecution();\n+};\n+\n+/** Query whether RPC is running */\n+bool IsRPCRunning();\n+\n+// Application startup time (used for uptime calculation)\n+int64_t GetStartupTime();\n+\n+/** Opaque base class for timers returned by NewTimerFunc.\n+ * This provides no methods at the moment, but makes sure that delete\n+ * cleans up the whole state.\n+ */\n+class RPCTimerBase\n+{\n+public:\n+    virtual ~RPCTimerBase() {}\n+};\n+\n+/**\n+ * RPC timer \"driver\".\n+ */\n+class RPCTimerInterface\n+{\n+public:\n+    virtual ~RPCTimerInterface() {}\n+    /** Implementation name */\n+    virtual const char *Name() = 0;\n+    /** Factory function for timers.\n+     * RPC will call the function to create a timer that will call func in *millis* milliseconds.\n+     * @note As the RPC mechanism is backend-neutral, it can use different implementations of timers.\n+     * This is needed to cope with the case in which there is no HTTP server, but\n+     * only GUI RPC console, and to break the dependency of pcserver on httprpc.\n+     */\n+    virtual RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis) = 0;\n+};\n+\n+typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n+\n+class CRPCCommand\n+{\n+public:\n+    //! RPC method handler reading request and assigning result. Should return\n+    //! true if request is fully handled, false if it should be passed on to\n+    //! subsequent handlers.\n+    using Actor = std::function<bool(const JSONRPCRequest& request, UniValue& result, bool last_handler)>;\n+\n+    //! Constructor taking Actor callback supporting multiple handlers.\n+    CRPCCommand(std::string category, std::string name, Actor actor, std::vector<std::string> args, intptr_t unique_id)\n+        : category(std::move(category)), name(std::move(name)), actor(std::move(actor)), argNames(std::move(args)),\n+          unique_id(unique_id)\n+    {\n+    }\n+\n+    //! Simplified constructor taking plain rpcfn_type function pointer.\n+    CRPCCommand(const char* category, const char* name, rpcfn_type fn, std::initializer_list<const char*> args)\n+        : CRPCCommand(category, name,\n+                      [fn](const JSONRPCRequest& request, UniValue& result, bool) { result = fn(request); return true; },\n+                      {args.begin(), args.end()}, intptr_t(fn))\n+    {\n+    }\n+\n+    std::string category;\n+    std::string name;\n+    Actor actor;\n+    std::vector<std::string> argNames;\n+    intptr_t unique_id;\n+};\n+\n+/**\n+ * Bitcoin RPC command dispatcher.\n+ */\n+class CRPCTable\n+{\n+private:\n+    std::map<std::string, std::vector<const CRPCCommand*>> mapCommands;\n+public:\n+    CRPCTable();\n+    std::string help(const std::string& name, const JSONRPCRequest& helpreq) const;\n+\n+    /**\n+     * Execute a method.\n+     * @param request The JSONRPCRequest to execute\n+     * @returns Result of the call.\n+     * @throws an exception (UniValue) when an error happens.\n+     */\n+    UniValue execute(const JSONRPCRequest &request) const;\n+\n+    /**\n+    * Returns a list of registered commands\n+    * @returns List of registered commands.\n+    */\n+    std::vector<std::string> listCommands() const;\n+\n+\n+    /**\n+     * Appends a CRPCCommand to the dispatch table.\n+     *\n+     * Returns false if RPC server is already running (dump concurrency protection).\n+     *\n+     * Commands with different method names but the same unique_id will\n+     * be considered aliases, and only the first registered method name will\n+     * show up in the help text command listing. Aliased commands do not have\n+     * to have the same behavior. Server and client code can distinguish\n+     * between calls based on method name, and aliased commands can also\n+     * register different names, types, and numbers of parameters.\n+     */\n+    bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n+    bool removeCommand(const std::string& name, const CRPCCommand* pcmd);\n+};\n+\n+std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);\n+\n+// Retrieves any serialization flags requested in command line argument\n+int RPCSerializationFlags();\n+\n+/** Set the factory function for timers */\n+void RPCSetTimerInterface(RPCTimerInterface *iface);\n+/** Set the factory function for timer, but only, if unset */\n+void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface);\n+/** Unset factory function for timers */\n+void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n+\n+/**\n+ * Set the RPC warmup status.  When this is done, all RPC calls will error out\n+ * immediately with RPC_IN_WARMUP.\n+ */\n+void SetRPCWarmupStatus(const std::string& newStatus);\n+/* Mark warmup as done.  RPC calls will be processed from now on.  */\n+void SetRPCWarmupFinished();\n+/* returns the current warmup state.  */\n+bool RPCIsInWarmup(std::string *outStatus);\n+\n+/**\n+ * Run func nSeconds from now.\n+ * Overrides previous timer <name> (if any).\n+ */\n+void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds);\n+\n+bool IsDeprecatedRPCEnabled(const std::string& method);\n+\n+#endif // BITCOIN_RPC_INTERFACES_H\n\\ No newline at end of file"
      },
      {
        "sha": "1ade85dd59ced15584c5d3a7bb23a452033c3fe4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -17,7 +17,7 @@\n #include <policy/fees.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n-#include <rpc/server.h>\n+#include <rpc/interfaces.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/script.h>"
      },
      {
        "sha": "1930c274d785360aacf541d95d59114ef8ed0e0a",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -9,7 +9,6 @@\n #include <node/context.h>\n #include <outputtype.h>\n #include <rpc/blockchain.h>\n-#include <rpc/server.h>\n #include <rpc/util.h>\n #include <scheduler.h>\n #include <script/descriptor.h>"
      },
      {
        "sha": "22675208a06ba6947449da1de9525b9b3f3709b2",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <rpc/server.h>\n \n #include <banman.h>\n #include <clientversion.h>\n@@ -16,6 +15,7 @@\n #include <policy/settings.h>\n #include <rpc/blockchain.h>\n #include <rpc/protocol.h>\n+#include <rpc/interfaces.h>\n #include <rpc/util.h>\n #include <sync.h>\n #include <timedata.h>"
      },
      {
        "sha": "d4b7e7ad2b89a60abc42b755bc5b724a5766c2c4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -20,8 +20,8 @@\n #include <psbt.h>\n #include <random.h>\n #include <rpc/blockchain.h>\n+#include <rpc/interfaces.h>\n #include <rpc/rawtransaction_util.h>\n-#include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/script.h>\n #include <script/sign.h>"
      },
      {
        "sha": "d70c2abafc257a990193bc5210f5fc347b8924fd",
        "filename": "src/rpc/register.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/register.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/register.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/register.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -5,9 +5,7 @@\n #ifndef BITCOIN_RPC_REGISTER_H\n #define BITCOIN_RPC_REGISTER_H\n \n-/** These are in one header file to avoid creating tons of single-function\n- * headers for everything under src/rpc/ */\n-class CRPCTable;\n+#include <rpc/interfaces.h>  // For CRPCTable\n \n /** Register block chain RPC commands */\n void RegisterBlockchainRPCCommands(CRPCTable &tableRPC);"
      },
      {
        "sha": "0c072c297a23ef4e4a2d0e3b16e535e3dccf2c4b",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 448,
        "changes": 457,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -5,57 +5,22 @@\n \n #include <rpc/server.h>\n \n+#include <logging.h>\n+#include <rpc/interfaces.h>\n+#include <rpc/request.h>\n #include <rpc/util.h>\n-#include <shutdown.h>\n-#include <sync.h>\n-#include <util/strencodings.h>\n #include <util/system.h>\n+#include <sync.h>\n \n #include <boost/signals2/signal.hpp>\n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n \n+#include <atomic>\n #include <memory> // for unique_ptr\n-#include <unordered_map>\n-\n-static RecursiveMutex cs_rpcWarmup;\n-static std::atomic<bool> g_rpc_running{false};\n-static bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;\n-static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server started\";\n-/* Timer-creating functions */\n-static RPCTimerInterface* timerInterface = nullptr;\n-/* Map of name to timer. */\n-static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n-static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler);\n-\n-struct RPCCommandExecutionInfo\n-{\n-    std::string method;\n-    int64_t start;\n-};\n-\n-struct RPCServerInfo\n-{\n-    Mutex mutex;\n-    std::list<RPCCommandExecutionInfo> active_commands GUARDED_BY(mutex);\n-};\n \n-static RPCServerInfo g_rpc_server_info;\n-\n-struct RPCCommandExecution\n-{\n-    std::list<RPCCommandExecutionInfo>::iterator it;\n-    explicit RPCCommandExecution(const std::string& method)\n-    {\n-        LOCK(g_rpc_server_info.mutex);\n-        it = g_rpc_server_info.active_commands.insert(g_rpc_server_info.active_commands.end(), {method, GetTimeMicros()});\n-    }\n-    ~RPCCommandExecution()\n-    {\n-        LOCK(g_rpc_server_info.mutex);\n-        g_rpc_server_info.active_commands.erase(it);\n-    }\n-};\n+extern CRPCTable tableRPC;\n+extern std::atomic<bool> g_rpc_running;\n+extern RecursiveMutex cs_rpcWarmup;\n+extern std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n \n static struct CRPCSignals\n {\n@@ -73,214 +38,6 @@ void RPCServer::OnStopped(std::function<void ()> slot)\n     g_rpcSignals.Stopped.connect(slot);\n }\n \n-std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const\n-{\n-    std::string strRet;\n-    std::string category;\n-    std::set<intptr_t> setDone;\n-    std::vector<std::pair<std::string, const CRPCCommand*> > vCommands;\n-\n-    for (const auto& entry : mapCommands)\n-        vCommands.push_back(make_pair(entry.second.front()->category + entry.first, entry.second.front()));\n-    sort(vCommands.begin(), vCommands.end());\n-\n-    JSONRPCRequest jreq(helpreq);\n-    jreq.fHelp = true;\n-    jreq.params = UniValue();\n-\n-    for (const std::pair<std::string, const CRPCCommand*>& command : vCommands)\n-    {\n-        const CRPCCommand *pcmd = command.second;\n-        std::string strMethod = pcmd->name;\n-        if ((strCommand != \"\" || pcmd->category == \"hidden\") && strMethod != strCommand)\n-            continue;\n-        jreq.strMethod = strMethod;\n-        try\n-        {\n-            UniValue unused_result;\n-            if (setDone.insert(pcmd->unique_id).second)\n-                pcmd->actor(jreq, unused_result, true /* last_handler */);\n-        }\n-        catch (const std::exception& e)\n-        {\n-            // Help text is returned in an exception\n-            std::string strHelp = std::string(e.what());\n-            if (strCommand == \"\")\n-            {\n-                if (strHelp.find('\\n') != std::string::npos)\n-                    strHelp = strHelp.substr(0, strHelp.find('\\n'));\n-\n-                if (category != pcmd->category)\n-                {\n-                    if (!category.empty())\n-                        strRet += \"\\n\";\n-                    category = pcmd->category;\n-                    strRet += \"== \" + Capitalize(category) + \" ==\\n\";\n-                }\n-            }\n-            strRet += strHelp + \"\\n\";\n-        }\n-    }\n-    if (strRet == \"\")\n-        strRet = strprintf(\"help: unknown command: %s\\n\", strCommand);\n-    strRet = strRet.substr(0,strRet.size()-1);\n-    return strRet;\n-}\n-\n-UniValue help(const JSONRPCRequest& jsonRequest)\n-{\n-    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"help\",\n-                \"\\nList all commands, or get help for a specified command.\\n\",\n-                {\n-                    {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::STR, \"\", \"The help text\"\n-                },\n-                RPCExamples{\"\"},\n-            }.ToString()\n-        );\n-\n-    std::string strCommand;\n-    if (jsonRequest.params.size() > 0)\n-        strCommand = jsonRequest.params[0].get_str();\n-\n-    return tableRPC.help(strCommand, jsonRequest);\n-}\n-\n-\n-UniValue stop(const JSONRPCRequest& jsonRequest)\n-{\n-    static const std::string RESULT{PACKAGE_NAME \" stopping\"};\n-    // Accept the deprecated and ignored 'detach' boolean argument\n-    // Also accept the hidden 'wait' integer argument (milliseconds)\n-    // For instance, 'stop 1000' makes the call wait 1 second before returning\n-    // to the client (intended for testing)\n-    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"stop\",\n-                \"\\nRequest a graceful shutdown of \" PACKAGE_NAME \".\",\n-                {},\n-                RPCResult{RPCResult::Type::STR, \"\", \"A string with the content '\" + RESULT + \"'\"},\n-                RPCExamples{\"\"},\n-            }.ToString());\n-    // Event loop will exit after current HTTP requests have been handled, so\n-    // this reply will get back to the client.\n-    StartShutdown();\n-    if (jsonRequest.params[0].isNum()) {\n-        UninterruptibleSleep(std::chrono::milliseconds{jsonRequest.params[0].get_int()});\n-    }\n-    return RESULT;\n-}\n-\n-static UniValue uptime(const JSONRPCRequest& jsonRequest)\n-{\n-            RPCHelpMan{\"uptime\",\n-                \"\\nReturns the total uptime of the server.\\n\",\n-                            {},\n-                            RPCResult{\n-                                RPCResult::Type::NUM, \"\", \"The number of seconds that the server has been running\"\n-                            },\n-                RPCExamples{\n-                    HelpExampleCli(\"uptime\", \"\")\n-                + HelpExampleRpc(\"uptime\", \"\")\n-                },\n-            }.Check(jsonRequest);\n-\n-    return GetTime() - GetStartupTime();\n-}\n-\n-static UniValue getrpcinfo(const JSONRPCRequest& request)\n-{\n-            RPCHelpMan{\"getrpcinfo\",\n-                \"\\nReturns details of the RPC server.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::ARR, \"active_commands\", \"All active commands\",\n-                        {\n-                            {RPCResult::Type::OBJ, \"\", \"Information about an active command\",\n-                            {\n-                                 {RPCResult::Type::STR, \"method\", \"The name of the RPC command\"},\n-                                 {RPCResult::Type::NUM, \"duration\", \"The running time in microseconds\"},\n-                            }},\n-                        }},\n-                        {RPCResult::Type::STR, \"logpath\", \"The complete file path to the debug log\"},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getrpcinfo\", \"\")\n-                + HelpExampleRpc(\"getrpcinfo\", \"\")},\n-            }.Check(request);\n-\n-    LOCK(g_rpc_server_info.mutex);\n-    UniValue active_commands(UniValue::VARR);\n-    for (const RPCCommandExecutionInfo& info : g_rpc_server_info.active_commands) {\n-        UniValue entry(UniValue::VOBJ);\n-        entry.pushKV(\"method\", info.method);\n-        entry.pushKV(\"duration\", GetTimeMicros() - info.start);\n-        active_commands.push_back(entry);\n-    }\n-\n-    UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"active_commands\", active_commands);\n-\n-    const std::string path = LogInstance().m_file_path.string();\n-    UniValue log_path(UniValue::VSTR, path);\n-    result.pushKV(\"logpath\", log_path);\n-\n-    return result;\n-}\n-\n-// clang-format off\n-static const CRPCCommand vRPCCommands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    /* Overall control/query calls */\n-    { \"control\",            \"getrpcinfo\",             &getrpcinfo,             {}  },\n-    { \"control\",            \"help\",                   &help,                   {\"command\"}  },\n-    { \"control\",            \"stop\",                   &stop,                   {\"wait\"}  },\n-    { \"control\",            \"uptime\",                 &uptime,                 {}  },\n-};\n-// clang-format on\n-\n-CRPCTable::CRPCTable()\n-{\n-    unsigned int vcidx;\n-    for (vcidx = 0; vcidx < (sizeof(vRPCCommands) / sizeof(vRPCCommands[0])); vcidx++)\n-    {\n-        const CRPCCommand *pcmd;\n-\n-        pcmd = &vRPCCommands[vcidx];\n-        mapCommands[pcmd->name].push_back(pcmd);\n-    }\n-}\n-\n-bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n-{\n-    if (IsRPCRunning())\n-        return false;\n-\n-    mapCommands[name].push_back(pcmd);\n-    return true;\n-}\n-\n-bool CRPCTable::removeCommand(const std::string& name, const CRPCCommand* pcmd)\n-{\n-    auto it = mapCommands.find(name);\n-    if (it != mapCommands.end()) {\n-        auto new_end = std::remove(it->second.begin(), it->second.end(), pcmd);\n-        if (it->second.end() != new_end) {\n-            it->second.erase(new_end, it->second.end());\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n void StartRPC()\n {\n     LogPrint(BCLog::RPC, \"Starting RPC\\n\");\n@@ -303,200 +60,4 @@ void StopRPC()\n     g_rpcSignals.Stopped();\n }\n \n-bool IsRPCRunning()\n-{\n-    return g_rpc_running;\n-}\n-\n-void SetRPCWarmupStatus(const std::string& newStatus)\n-{\n-    LOCK(cs_rpcWarmup);\n-    rpcWarmupStatus = newStatus;\n-}\n-\n-void SetRPCWarmupFinished()\n-{\n-    LOCK(cs_rpcWarmup);\n-    assert(fRPCInWarmup);\n-    fRPCInWarmup = false;\n-}\n-\n-bool RPCIsInWarmup(std::string *outStatus)\n-{\n-    LOCK(cs_rpcWarmup);\n-    if (outStatus)\n-        *outStatus = rpcWarmupStatus;\n-    return fRPCInWarmup;\n-}\n-\n-bool IsDeprecatedRPCEnabled(const std::string& method)\n-{\n-    const std::vector<std::string> enabled_methods = gArgs.GetArgs(\"-deprecatedrpc\");\n-\n-    return find(enabled_methods.begin(), enabled_methods.end(), method) != enabled_methods.end();\n-}\n-\n-static UniValue JSONRPCExecOne(JSONRPCRequest jreq, const UniValue& req)\n-{\n-    UniValue rpc_result(UniValue::VOBJ);\n-\n-    try {\n-        jreq.parse(req);\n-\n-        UniValue result = tableRPC.execute(jreq);\n-        rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n-    }\n-    catch (const UniValue& objError)\n-    {\n-        rpc_result = JSONRPCReplyObj(NullUniValue, objError, jreq.id);\n-    }\n-    catch (const std::exception& e)\n-    {\n-        rpc_result = JSONRPCReplyObj(NullUniValue,\n-                                     JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n-    }\n-\n-    return rpc_result;\n-}\n-\n-std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq)\n-{\n-    UniValue ret(UniValue::VARR);\n-    for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n-        ret.push_back(JSONRPCExecOne(jreq, vReq[reqIdx]));\n-\n-    return ret.write() + \"\\n\";\n-}\n-\n-/**\n- * Process named arguments into a vector of positional arguments, based on the\n- * passed-in specification for the RPC call's arguments.\n- */\n-static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, const std::vector<std::string>& argNames)\n-{\n-    JSONRPCRequest out = in;\n-    out.params = UniValue(UniValue::VARR);\n-    // Build a map of parameters, and remove ones that have been processed, so that we can throw a focused error if\n-    // there is an unknown one.\n-    const std::vector<std::string>& keys = in.params.getKeys();\n-    const std::vector<UniValue>& values = in.params.getValues();\n-    std::unordered_map<std::string, const UniValue*> argsIn;\n-    for (size_t i=0; i<keys.size(); ++i) {\n-        argsIn[keys[i]] = &values[i];\n-    }\n-    // Process expected parameters.\n-    int hole = 0;\n-    for (const std::string &argNamePattern: argNames) {\n-        std::vector<std::string> vargNames;\n-        boost::algorithm::split(vargNames, argNamePattern, boost::algorithm::is_any_of(\"|\"));\n-        auto fr = argsIn.end();\n-        for (const std::string & argName : vargNames) {\n-            fr = argsIn.find(argName);\n-            if (fr != argsIn.end()) {\n-                break;\n-            }\n-        }\n-        if (fr != argsIn.end()) {\n-            for (int i = 0; i < hole; ++i) {\n-                // Fill hole between specified parameters with JSON nulls,\n-                // but not at the end (for backwards compatibility with calls\n-                // that act based on number of specified parameters).\n-                out.params.push_back(UniValue());\n-            }\n-            hole = 0;\n-            out.params.push_back(*fr->second);\n-            argsIn.erase(fr);\n-        } else {\n-            hole += 1;\n-        }\n-    }\n-    // If there are still arguments in the argsIn map, this is an error.\n-    if (!argsIn.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown named parameter \" + argsIn.begin()->first);\n-    }\n-    // Return request with named arguments transformed to positional arguments\n-    return out;\n-}\n-\n-UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n-{\n-    // Return immediately if in warmup\n-    {\n-        LOCK(cs_rpcWarmup);\n-        if (fRPCInWarmup)\n-            throw JSONRPCError(RPC_IN_WARMUP, rpcWarmupStatus);\n-    }\n-\n-    // Find method\n-    auto it = mapCommands.find(request.strMethod);\n-    if (it != mapCommands.end()) {\n-        UniValue result;\n-        for (const auto& command : it->second) {\n-            if (ExecuteCommand(*command, request, result, &command == &it->second.back())) {\n-                return result;\n-            }\n-        }\n-    }\n-    throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n-}\n-\n-static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)\n-{\n-    try\n-    {\n-        RPCCommandExecution execution(request.strMethod);\n-        // Execute, convert arguments to array if necessary\n-        if (request.params.isObject()) {\n-            return command.actor(transformNamedArguments(request, command.argNames), result, last_handler);\n-        } else {\n-            return command.actor(request, result, last_handler);\n-        }\n-    }\n-    catch (const std::exception& e)\n-    {\n-        throw JSONRPCError(RPC_MISC_ERROR, e.what());\n-    }\n-}\n-\n-std::vector<std::string> CRPCTable::listCommands() const\n-{\n-    std::vector<std::string> commandList;\n-    for (const auto& i : mapCommands) commandList.emplace_back(i.first);\n-    return commandList;\n-}\n-\n-void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)\n-{\n-    if (!timerInterface)\n-        timerInterface = iface;\n-}\n-\n-void RPCSetTimerInterface(RPCTimerInterface *iface)\n-{\n-    timerInterface = iface;\n-}\n-\n-void RPCUnsetTimerInterface(RPCTimerInterface *iface)\n-{\n-    if (timerInterface == iface)\n-        timerInterface = nullptr;\n-}\n-\n-void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds)\n-{\n-    if (!timerInterface)\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");\n-    deadlineTimers.erase(name);\n-    LogPrint(BCLog::RPC, \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n-    deadlineTimers.emplace(name, std::unique_ptr<RPCTimerBase>(timerInterface->NewTimer(func, nSeconds*1000)));\n-}\n-\n-int RPCSerializationFlags()\n-{\n-    int flag = 0;\n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n-        flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n-    return flag;\n-}\n \n-CRPCTable tableRPC;"
      },
      {
        "sha": "e18ca548232b8919a41ade46f4a318a2c160ced2",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 148,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -6,165 +6,18 @@\n #ifndef BITCOIN_RPC_SERVER_H\n #define BITCOIN_RPC_SERVER_H\n \n-#include <amount.h>\n-#include <rpc/request.h>\n+#include <rpc/interfaces.h>\n \n-#include <map>\n-#include <stdint.h>\n-#include <string>\n #include <functional>\n \n-#include <univalue.h>\n-\n-static const unsigned int DEFAULT_RPC_SERIALIZE_VERSION = 1;\n-\n-class CRPCCommand;\n-\n namespace RPCServer\n {\n     void OnStarted(std::function<void ()> slot);\n     void OnStopped(std::function<void ()> slot);\n }\n \n-/** Query whether RPC is running */\n-bool IsRPCRunning();\n-\n-/**\n- * Set the RPC warmup status.  When this is done, all RPC calls will error out\n- * immediately with RPC_IN_WARMUP.\n- */\n-void SetRPCWarmupStatus(const std::string& newStatus);\n-/* Mark warmup as done.  RPC calls will be processed from now on.  */\n-void SetRPCWarmupFinished();\n-\n-/* returns the current warmup state.  */\n-bool RPCIsInWarmup(std::string *outStatus);\n-\n-/** Opaque base class for timers returned by NewTimerFunc.\n- * This provides no methods at the moment, but makes sure that delete\n- * cleans up the whole state.\n- */\n-class RPCTimerBase\n-{\n-public:\n-    virtual ~RPCTimerBase() {}\n-};\n-\n-/**\n- * RPC timer \"driver\".\n- */\n-class RPCTimerInterface\n-{\n-public:\n-    virtual ~RPCTimerInterface() {}\n-    /** Implementation name */\n-    virtual const char *Name() = 0;\n-    /** Factory function for timers.\n-     * RPC will call the function to create a timer that will call func in *millis* milliseconds.\n-     * @note As the RPC mechanism is backend-neutral, it can use different implementations of timers.\n-     * This is needed to cope with the case in which there is no HTTP server, but\n-     * only GUI RPC console, and to break the dependency of pcserver on httprpc.\n-     */\n-    virtual RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis) = 0;\n-};\n-\n-/** Set the factory function for timers */\n-void RPCSetTimerInterface(RPCTimerInterface *iface);\n-/** Set the factory function for timer, but only, if unset */\n-void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface);\n-/** Unset factory function for timers */\n-void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n-\n-/**\n- * Run func nSeconds from now.\n- * Overrides previous timer <name> (if any).\n- */\n-void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nSeconds);\n-\n-typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n-\n-class CRPCCommand\n-{\n-public:\n-    //! RPC method handler reading request and assigning result. Should return\n-    //! true if request is fully handled, false if it should be passed on to\n-    //! subsequent handlers.\n-    using Actor = std::function<bool(const JSONRPCRequest& request, UniValue& result, bool last_handler)>;\n-\n-    //! Constructor taking Actor callback supporting multiple handlers.\n-    CRPCCommand(std::string category, std::string name, Actor actor, std::vector<std::string> args, intptr_t unique_id)\n-        : category(std::move(category)), name(std::move(name)), actor(std::move(actor)), argNames(std::move(args)),\n-          unique_id(unique_id)\n-    {\n-    }\n-\n-    //! Simplified constructor taking plain rpcfn_type function pointer.\n-    CRPCCommand(const char* category, const char* name, rpcfn_type fn, std::initializer_list<const char*> args)\n-        : CRPCCommand(category, name,\n-                      [fn](const JSONRPCRequest& request, UniValue& result, bool) { result = fn(request); return true; },\n-                      {args.begin(), args.end()}, intptr_t(fn))\n-    {\n-    }\n-\n-    std::string category;\n-    std::string name;\n-    Actor actor;\n-    std::vector<std::string> argNames;\n-    intptr_t unique_id;\n-};\n-\n-/**\n- * Bitcoin RPC command dispatcher.\n- */\n-class CRPCTable\n-{\n-private:\n-    std::map<std::string, std::vector<const CRPCCommand*>> mapCommands;\n-public:\n-    CRPCTable();\n-    std::string help(const std::string& name, const JSONRPCRequest& helpreq) const;\n-\n-    /**\n-     * Execute a method.\n-     * @param request The JSONRPCRequest to execute\n-     * @returns Result of the call.\n-     * @throws an exception (UniValue) when an error happens.\n-     */\n-    UniValue execute(const JSONRPCRequest &request) const;\n-\n-    /**\n-    * Returns a list of registered commands\n-    * @returns List of registered commands.\n-    */\n-    std::vector<std::string> listCommands() const;\n-\n-\n-    /**\n-     * Appends a CRPCCommand to the dispatch table.\n-     *\n-     * Returns false if RPC server is already running (dump concurrency protection).\n-     *\n-     * Commands with different method names but the same unique_id will\n-     * be considered aliases, and only the first registered method name will\n-     * show up in the help text command listing. Aliased commands do not have\n-     * to have the same behavior. Server and client code can distinguish\n-     * between calls based on method name, and aliased commands can also\n-     * register different names, types, and numbers of parameters.\n-     */\n-    bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n-    bool removeCommand(const std::string& name, const CRPCCommand* pcmd);\n-};\n-\n-bool IsDeprecatedRPCEnabled(const std::string& method);\n-\n-extern CRPCTable tableRPC;\n-\n void StartRPC();\n void InterruptRPC();\n void StopRPC();\n-std::string JSONRPCExecBatch(const JSONRPCRequest& jreq, const UniValue& vReq);\n-\n-// Retrieves any serialization flags requested in command line argument\n-int RPCSerializationFlags();\n \n #endif // BITCOIN_RPC_SERVER_H"
      },
      {
        "sha": "5f3a26b19d73060d6cec9a60f63e44b2a1600bd1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -5,7 +5,6 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n-#include <node/transaction.h>\n #include <outputtype.h>\n #include <protocol.h>\n #include <pubkey.h>\n@@ -16,6 +15,7 @@\n #include <script/standard.h>\n #include <univalue.h>\n #include <util/check.h>\n+#include <util/error.h>\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "7900e9d3de39f0f3cd9f341b57f86809eb5ea38e",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -9,7 +9,7 @@\n #include <outputtype.h>\n #include <rpc/client.h>\n #include <rpc/request.h>\n-#include <rpc/server.h>\n+#include <rpc/interfaces.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <serialize.h>"
      },
      {
        "sha": "8ee8113855d7a3a203e630401fb967ca3fea40b1",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <rpc/client.h>\n-#include <rpc/server.h>\n+#include <rpc/interfaces.h>\n #include <rpc/util.h>\n \n #include <core_io.h>\n@@ -19,6 +19,8 @@\n \n #include <rpc/blockchain.h>\n \n+extern CRPCTable tableRPC;\n+\n UniValue CallRPC(std::string args)\n {\n     std::vector<std::string> vArgs;"
      },
      {
        "sha": "2df9f8fcae680134c5e1d8c45cf5b084d142982c",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -17,8 +17,8 @@\n #include <noui.h>\n #include <pow.h>\n #include <rpc/blockchain.h>\n+#include <rpc/interfaces.h>\n #include <rpc/register.h>\n-#include <rpc/server.h>\n #include <script/sigcache.h>\n #include <streams.h>\n #include <txdb.h>\n@@ -34,6 +34,8 @@\n \n #include <functional>\n \n+extern CRPCTable tableRPC;\n+\n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = nullptr;\n "
      },
      {
        "sha": "1b1dc51825354ccf3c1ed507d055128947cb3fae",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -68,9 +68,6 @@\n #include <typeinfo>\n #include <univalue.h>\n \n-// Application startup time (used for uptime calculation)\n-const int64_t nStartupTime = GetTime();\n-\n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n \n ArgsManager gArgs;\n@@ -1144,12 +1141,6 @@ std::string CopyrightHolders(const std::string& strPrefix)\n     return strCopyrightHolders;\n }\n \n-// Obtain the application startup time (used for uptime calculation)\n-int64_t GetStartupTime()\n-{\n-    return nStartupTime;\n-}\n-\n fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n {\n     if (path.is_absolute()) {"
      },
      {
        "sha": "6eefebca0566266576d1378e72d446d34072f5b2",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -37,9 +37,6 @@\n \n #include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n \n-// Application startup time (used for uptime calculation)\n-int64_t GetStartupTime();\n-\n extern const char * const BITCOIN_CONF_FILENAME;\n \n void SetupEnvironment();"
      },
      {
        "sha": "f987ec37e7e59f6c939fdd44991f2790c9e5800f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -29,9 +29,10 @@\n #include <primitives/transaction.h>\n #include <random.h>\n #include <reverse_iterator.h>\n+#include <rpc/interfaces.h>\n+#include <shutdown.h>\n #include <script/script.h>\n #include <script/sigcache.h>\n-#include <shutdown.h>\n #include <timedata.h>\n #include <tinyformat.h>\n #include <txdb.h>"
      },
      {
        "sha": "fcd914b2ee759372158ea79d491c935e0071cf73",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -12,8 +12,8 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/rbf.h>\n+#include <rpc/interfaces.h>\n #include <rpc/rawtransaction_util.h>\n-#include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/sign.h>"
      },
      {
        "sha": "45b96494bcc9ff0f83a9c5fb37a604f3b5826217",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -9,7 +9,6 @@\n #include <string>\n #include <vector>\n \n-class CRPCTable;\n class CWallet;\n class JSONRPCRequest;\n class LegacyScriptPubKeyMan;"
      },
      {
        "sha": "c6d7650baa3bd8fee31104241d91d47b5f9ec44f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -12,7 +12,7 @@\n #include <interfaces/chain.h>\n #include <node/context.h>\n #include <policy/policy.h>\n-#include <rpc/server.h>\n+#include <rpc/interfaces.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n #include <util/translation.h>"
      },
      {
        "sha": "f8e782a9c5f14f467dac165c981c38a3b7e38808",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -4,11 +4,12 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <rpc/interfaces.h>\n #include <streams.h>\n-#include <zmq/zmqpublishnotifier.h>\n-#include <validation.h>\n #include <util/system.h>\n-#include <rpc/server.h>\n+#include <validation.h>\n+#include <zmq/zmqpublishnotifier.h>\n+\n \n static std::multimap<std::string, CZMQAbstractPublishNotifier*> mapPublishNotifiers;\n "
      },
      {
        "sha": "9f5c3cb594886f2ee27983d4675b131e22ac5c00",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -4,7 +4,6 @@\n \n #include <zmq/zmqrpc.h>\n \n-#include <rpc/server.h>\n #include <rpc/util.h>\n #include <zmq/zmqabstractnotifier.h>\n #include <zmq/zmqnotificationinterface.h>"
      },
      {
        "sha": "ca237945688f79500d2679d3fcccb70b0cd39d80",
        "filename": "src/zmq/zmqrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/zmq/zmqrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/src/zmq/zmqrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.h?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_ZMQ_ZMQRPC_H\n #define BITCOIN_ZMQ_ZMQRPC_H\n \n-class CRPCTable;\n+#include <rpc/interfaces.h>  // For CRPCTable\n \n void RegisterZMQRPCCommands(CRPCTable& t);\n "
      },
      {
        "sha": "6861f574d4e59e7178514a740cd77d50a7811312",
        "filename": "test/lint/check-rpc-mappings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/test/lint/check-rpc-mappings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc/test/lint/check-rpc-mappings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-rpc-mappings.py?ref=fcd4f6155edd3464883ae0f7dac1eeee2ab52ccc",
        "patch": "@@ -11,7 +11,7 @@\n \n # Source files (relative to root) to scan for dispatch tables\n SOURCES = [\n-    \"src/rpc/server.cpp\",\n+    \"src/rpc/interfaces.cpp\",\n     \"src/rpc/blockchain.cpp\",\n     \"src/rpc/mining.cpp\",\n     \"src/rpc/misc.cpp\","
      }
    ]
  }
]