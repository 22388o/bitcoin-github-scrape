sipa,2020-05-04 22:20:14,"This is still just defeating the linter, I'm afraid. It assumes that a .h file and a .cpp with the same name form a unit.\n\nThe question it's trying to answer is ""can you use module X without having module Y or the other way around"", where a module is seen as defined by F.cpp + F.h (if both exist).",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623738446,623738446,
brakmic,2020-05-04 22:21:29,"> This is still just defeating the linter, I'm afraid. It assumes that a .h file and a .cpp with the same name form a unit.\n> \n> The question it's trying to answer is ""can you use module X without having module Y or the other way around"", where a module is seen as defined by F.cpp + F.h (if both exist).\n\nWhat if I would create rpc/interfaces.cpp that contains all the implementations?",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623738924,623738924,
sipa,2020-05-04 22:22:48,"> What if I would create rpc/interfaces.cpp that contains all the implementations?\n\nIf that works, it's a solution indeed.",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623739364,623739364,
DrahtBot,2020-05-05 00:31:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18830 (rpc: add user field to getrpcinfo's json by brakmic)\n* #18827 (rpc: added getrpcwhitelist method by brakmic)\n* #",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-623779949,623779949,
brakmic,2020-05-05 18:45:45,"> > What if I would create rpc/interfaces.cpp that contains all the implementations?\n> \n> If that works, it's a solution indeed.\n\nI have now extracted `CRPCCommand`, `CRPCTable`, various `RPCTimer*`-structures and `Status/WarmUp` functions from `rpc/server.cpp` into the new `rpc/interfaces.cpp`. \n\nI'm deliberately using the plural form ""interfaces"" to indicate that these are interfaces",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624237736,624237736,
ryanofsky,2020-05-05 20:18:55,"Have't looked closely at this but I'd discourage using ""prevent circular deps"" as the main justification for a change. If a change makes sense you should be able to say what advantages it has without reference to the linter, and I don't see other advantages cited in the PR description.\n\nThe circular dependencies linter often suggests joining files together which make more sense separately and ",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624283992,624283992,
sipa,2020-05-05 20:24:48,"@ryanofsky Circular dependency here is not in the meaning of ""can code be compiled without a cycle in #includes"" but in the meaning of ""can this module be used at a semantic level without this other module"". Forward declares do not solve that, they only hide the ability to detect it.\n\nThe sort of circular dependencies we're talking about here are a symptom of badly organized code, and improvin",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624286806,624286806,
ryanofsky,2020-05-05 20:43:13,"> The sort of circular dependencies we're talking about here are a symptom of badly organized code, and improving it is a worthwhile goal in my opinion - but not at all costs.\n\nI think we agree. I just think if the code is badly organized and the PR improves the organization, the PR description should actually say what was wrong with the organization before and how it's improved. I'm definitel",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624295335,624295335,
brakmic,2020-05-05 20:51:02,">the PR description should actually say what was wrong with the organization before and how it's improved. \n\nYes, the description will be updated as soon as this PR becomes a *real one*. Currently, it's only a draft and the only proper description is my first (longer) [answer](https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624237736) to @sipa regarding latest changes. As this is st",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624299092,624299092,
brakmic,2020-05-05 21:34:40,"@sipa \n\n`shutdown.h/.cpp` is back. I've removed its functions from `rpc/interfaces.h/.cpp` accordingly. \nRPC functional tests are passing. Unit tests as well. Qt code compiles too and its test pass also.\nThis change introduced no new circular dependency that'd affect `rpc/interfaces`. \n\nThat is, they stayed the same as before:\n\n```shell\nCircular dependency: chainparamsbase -> uti",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-624318884,624318884,
brakmic,2020-05-09 18:33:17,"> > What if I would create rpc/interfaces.cpp that contains all the implementations?\n> \n> If that works, it's a solution indeed.\n\nMeanwhile, I have created a separate shared library that contains the ""extracted"" functions. There are no forward declarations anymore. I've also updated the PR description to reflect all the changes, and when you have time, it'd help me a lot if you could check",https://github.com/bitcoin/bitcoin/pull/18871#issuecomment-626217801,626217801,
sipa,2020-05-05 19:48:17,"Making this static and in a .h file means that every compilation unit (cpp file) that includes it will get its own copy of the variable. If you only want a single copy, it must be declared in a .cpp file, and defined in the corresponding .h file.\n\nI also think it's very strange that shutdown is now merged into an RPC-specific module. Does nothing outside of RPC need it?",https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420364414,420364414,src/rpc/interfaces.h
brakmic,2020-05-05 19:53:00,"> Making this static and in a .h file means that every compilation unit (cpp file) that includes it will get its own copy of the variable. If you only want a single copy, it must be declared in a .cpp file, and defined in the corresponding .h file.\n> \n\nThanks for the hint. Will correct it now.\n\n> I also think it's very strange that shutdown is now merged into an RPC-specific module. Does",https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420366965,420366965,src/rpc/interfaces.h
brakmic,2020-05-05 20:14:45,"> it must be declared in a .cpp file, and defined in the corresponding .h file.\n> \n\nI must admit that I don't know how to do this. Especially with const variables and atomics.\n",https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420378587,420378587,src/rpc/interfaces.h
sipa,2020-05-05 20:19:42,"I'm being stupid sorry - it's a static variable that's local to shutdown.cpp. It can't and doesn't need to go in shutdown.h.\n\nI think you shouldn't need to touch this at all. It's perfectly fine as-as in shutdown.cpp. It also has no dependencies, so touching it shouldn't be needed for the purpose of breaking circular dependencies.\n\nThe issue you're seeing while linking must have to do with",https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420381223,420381223,src/rpc/interfaces.h
brakmic,2020-05-05 20:22:15,"> I'm being stupid sorry - it's a static variable that's local to shutdown.cpp. It can't and doesn't need to go in shutdown.h.\n\nThanks for the clarification! I was already questioning life and existence. :)\n\n> \n> I think you shouldn't need to touch this at all. It's perfectly fine as-as in shutdown.cpp. It also has no dependencies, so touching it shouldn't be needed for the purpose of br",https://github.com/bitcoin/bitcoin/pull/18871#discussion_r420382513,420382513,src/rpc/interfaces.h
