[
  {
    "sha": "ffbfba7be11ad9da3c69bf9393cd37312cf3e587",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmJmYmE3YmUxMWFkOWRhM2M2OWJmOTM5M2NkMzczMTJjZjNlNTg3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-01-05T02:13:18Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-01-05T02:46:17Z"
      },
      "message": "QA: p2p_invalid_block: Check that a block rejected due to too-new time is later accepted\n\nI was unsure if the code sufficiently avoided caching a time-too-new rejection, so wrote this test to check it.\nIt looks like despite only exempting BLOCK_MUTATED, it is still okay because header failures never cache block invalidity.\nThis test will help ensure that if this ever changes, BLOCK_TIME_FUTURE gets excluded at the same time.",
      "tree": {
        "sha": "18063d9abc4865ec9441f0bc93c5be63c29c1329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18063d9abc4865ec9441f0bc93c5be63c29c1329"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffbfba7be11ad9da3c69bf9393cd37312cf3e587",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffbfba7be11ad9da3c69bf9393cd37312cf3e587",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffbfba7be11ad9da3c69bf9393cd37312cf3e587",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffbfba7be11ad9da3c69bf9393cd37312cf3e587/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8afa602f308ef003bb6893718eae1fe5a830690c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afa602f308ef003bb6893718eae1fe5a830690c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8afa602f308ef003bb6893718eae1fe5a830690c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b60d415b6344cb8cc51f1e34b58b86998a228351",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffbfba7be11ad9da3c69bf9393cd37312cf3e587/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffbfba7be11ad9da3c69bf9393cd37312cf3e587/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=ffbfba7be11ad9da3c69bf9393cd37312cf3e587",
        "patch": "@@ -11,6 +11,7 @@\n re-requested.\n \"\"\"\n import copy\n+import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n from test_framework.messages import COIN\n@@ -133,5 +134,20 @@ def run_test(self):\n         self.log.info(\"Test inflation by duplicating input\")\n         node.p2p.send_blocks_and_test([block4], node, success=False,  reject_reason='bad-txns-inputs-duplicate')\n \n+\n+        self.log.info(\"Test accepting identical block after rejecting it due to a future timestamp.\")\n+\n+        t = int(time.time())\n+        node.setmocktime(t)\n+        block = create_block(tip, create_coinbase(height), t + 7201)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        # NOTE: Need force_send because the block will get rejected without a getdata otherwise\n+        node.p2p.send_blocks_and_test([block], node, force_send=True, success=False, reject_reason='time-too-new')#, expect_disconnect=True)\n+        #self.reconnect_p2p()\n+\n+        node.setmocktime(t + 1)\n+        node.p2p.send_blocks_and_test([block], node, success=True, timeout=5)\n+\n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      }
    ]
  }
]