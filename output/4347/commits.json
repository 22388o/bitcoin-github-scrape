[
  {
    "sha": "6c37f7fd78832442a26e56bd0787974927df4fb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzM3ZjdmZDc4ODMyNDQyYTI2ZTU2YmQwNzg3OTc0OTI3ZGY0ZmIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-16T12:45:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-07-11T13:24:29Z"
      },
      "message": "`getrawchangeaddress` should fail when keypool exhausted\n\nAn user on IRC reported an issue where `getrawchangeaddress`\nkeeps returning a single address when the keypool is exhausted.\nIn my opinion this is strange behaviour.\n\n- Change CReserveKey to fail when running out of keys in the keypool.\n- Make `getrawchangeaddress` return RPC_WALLET_KEYPOOL_RAN_OUT when\n  unable to create an address.\n- Add a Python RPC test for checking the keypool behaviour in combination\n  with encrypted wallets.",
      "tree": {
        "sha": "9c4138c7e53bbd4607a13de9169dd2d0dabee6be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c4138c7e53bbd4607a13de9169dd2d0dabee6be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c37f7fd78832442a26e56bd0787974927df4fb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c37f7fd78832442a26e56bd0787974927df4fb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c37f7fd78832442a26e56bd0787974927df4fb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c37f7fd78832442a26e56bd0787974927df4fb2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ad2c2402e694d0052f8f1688181a80fe3eef2e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad2c2402e694d0052f8f1688181a80fe3eef2e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad2c2402e694d0052f8f1688181a80fe3eef2e7"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 137,
      "deletions": 6
    },
    "files": [
      {
        "sha": "86ad20de525df55beaa1f2eff2d5d1e870c04f69",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "added",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c37f7fd78832442a26e56bd0787974927df4fb2/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c37f7fd78832442a26e56bd0787974927df4fb2/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=6c37f7fd78832442a26e56bd0787974927df4fb2",
        "patch": "@@ -0,0 +1,132 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# Exercise the wallet keypool, and interaction with wallet encryption/locking\n+\n+# Add python-bitcoinrpc to module search path:\n+import os\n+import sys\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinrpc\"))\n+\n+import json\n+import shutil\n+import subprocess\n+import tempfile\n+import traceback\n+\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+\n+\n+def check_array_result(object_array, to_match, expected):\n+    \"\"\"\n+    Pass in array of JSON objects, a dictionary with key/value pairs\n+    to match against, and another dictionary with expected key/value\n+    pairs.\n+    \"\"\"\n+    num_matched = 0\n+    for item in object_array:\n+        all_match = True\n+        for key,value in to_match.items():\n+            if item[key] != value:\n+                all_match = False\n+        if not all_match:\n+            continue\n+        for key,value in expected.items():\n+            if item[key] != value:\n+                raise AssertionError(\"%s : expected %s=%s\"%(str(item), str(key), str(value)))\n+            num_matched = num_matched+1\n+    if num_matched == 0:\n+        raise AssertionError(\"No objects matched %s\"%(str(to_match)))\n+\n+def run_test(nodes, tmpdir):\n+    # Encrypt wallet and wait to terminate\n+    nodes[0].encryptwallet('test')\n+    bitcoind_processes[0].wait()\n+    # Restart node 0\n+    nodes[0] = start_node(0, tmpdir)\n+    # Keep creating keys\n+    addr = nodes[0].getnewaddress()\n+    try:\n+        addr = nodes[0].getnewaddress()\n+        raise AssertionError('Keypool should be exhausted after one address')\n+    except JSONRPCException,e:\n+        assert(e.error['code']==-12)\n+\n+    # put three new keys in the keypool\n+    nodes[0].walletpassphrase('test', 12000)\n+    nodes[0].keypoolrefill(3)\n+    nodes[0].walletlock()\n+\n+    # drain the keys\n+    addr = set()\n+    addr.add(nodes[0].getrawchangeaddress())\n+    addr.add(nodes[0].getrawchangeaddress())\n+    addr.add(nodes[0].getrawchangeaddress())\n+    addr.add(nodes[0].getrawchangeaddress())\n+    # assert that four unique addresses were returned\n+    assert(len(addr) == 4)\n+    # the next one should fail\n+    try:\n+        addr = nodes[0].getrawchangeaddress()\n+        raise AssertionError('Keypool should be exhausted after three addresses')\n+    except JSONRPCException,e:\n+        assert(e.error['code']==-12)\n+\n+\n+def main():\n+    import optparse\n+\n+    parser = optparse.OptionParser(usage=\"%prog [options]\")\n+    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n+                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n+    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n+                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n+    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n+                      help=\"Root directory for datadirs\")\n+    (options, args) = parser.parse_args()\n+\n+    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n+\n+    check_json_precision()\n+\n+    success = False\n+    nodes = []\n+    try:\n+        print(\"Initializing test directory \"+options.tmpdir)\n+        if not os.path.isdir(options.tmpdir):\n+            os.makedirs(options.tmpdir)\n+        initialize_chain(options.tmpdir)\n+\n+        nodes = start_nodes(1, options.tmpdir)\n+\n+        run_test(nodes, options.tmpdir)\n+\n+        success = True\n+\n+    except AssertionError as e:\n+        print(\"Assertion failed: \"+e.message)\n+    except JSONRPCException as e:\n+        print(\"JSONRPC error: \"+e.error['message'])\n+        traceback.print_tb(sys.exc_info()[2])\n+    except Exception as e:\n+        print(\"Unexpected exception caught during testing: \"+str(sys.exc_info()[0]))\n+        traceback.print_tb(sys.exc_info()[2])\n+\n+    if not options.nocleanup:\n+        print(\"Cleaning up\")\n+        stop_nodes(nodes)\n+        wait_bitcoinds()\n+        shutil.rmtree(options.tmpdir)\n+\n+    if success:\n+        print(\"Tests successful\")\n+        sys.exit(0)\n+    else:\n+        print(\"Failed\")\n+        sys.exit(1)\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "ec56c7119267b0d16c9c1160567ca6771c2dec82",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c37f7fd78832442a26e56bd0787974927df4fb2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c37f7fd78832442a26e56bd0787974927df4fb2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6c37f7fd78832442a26e56bd0787974927df4fb2",
        "patch": "@@ -467,7 +467,10 @@ void static BitcoinMiner(CWallet *pwallet)\n \n             auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n             if (!pblocktemplate.get())\n+            {\n+                LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n                 return;\n+            }\n             CBlock *pblock = &pblocktemplate->block;\n             IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n "
      },
      {
        "sha": "e8c62fd37b769703f568b94563de23d07cec32ad",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c37f7fd78832442a26e56bd0787974927df4fb2/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c37f7fd78832442a26e56bd0787974927df4fb2/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=6c37f7fd78832442a26e56bd0787974927df4fb2",
        "patch": "@@ -201,7 +201,7 @@ Value getrawchangeaddress(const Array& params, bool fHelp)\n     CReserveKey reservekey(pwalletMain);\n     CPubKey vchPubKey;\n     if (!reservekey.GetReservedKey(vchPubKey))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Unable to obtain key for change\");\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n     reservekey.KeepKey();\n "
      },
      {
        "sha": "8fdc5f4b20ecd8a2c737afab63e6def7df84a2c1",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c37f7fd78832442a26e56bd0787974927df4fb2/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c37f7fd78832442a26e56bd0787974927df4fb2/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=6c37f7fd78832442a26e56bd0787974927df4fb2",
        "patch": "@@ -2010,11 +2010,7 @@ bool CReserveKey::GetReservedKey(CPubKey& pubkey)\n         if (nIndex != -1)\n             vchPubKey = keypool.vchPubKey;\n         else {\n-            if (pwallet->vchDefaultKey.IsValid()) {\n-                LogPrintf(\"CReserveKey::GetReservedKey(): Warning: Using default key instead of a new key, top up your keypool!\");\n-                vchPubKey = pwallet->vchDefaultKey;\n-            } else\n-                return false;\n+            return false;\n         }\n     }\n     assert(vchPubKey.IsValid());"
      }
    ]
  }
]