[
  {
    "sha": "b6c3e84e87055be311347d7b636d68a6a828f563",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmMzZTg0ZTg3MDU1YmUzMTEzNDdkN2I2MzZkNjhhNmE4MjhmNTYz",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-13T12:16:10Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-28T23:46:21Z"
      },
      "message": "doc: Improve fuzzing docs for macOS users",
      "tree": {
        "sha": "535a0a2823eeb18257e5fdcf19379b6994f93156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/535a0a2823eeb18257e5fdcf19379b6994f93156"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6c3e84e87055be311347d7b636d68a6a828f563",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl4wx88VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNQAcP/14OUyDhQp43EqLsMUkxC/QzjTGe\nbGXp0gz6dZXRWg9mRYVrlh9mOltn5EtCFArPUaF2NTyYYlA+G8phLRJ4bCfV3/wy\nUbdZDmt041fpZIGgqdz6SCyflBh0Hr9uyDZakor7da38eSjbkhIHOn2e8nqcDpHn\njQZ08eguitv/nxYeUY1fjrRnoZhKIyjMdzTKXP0aMCmFx5BnINOGnR++kqfhV7R+\nKHCtpMNaJxItkgGJUPOjL42o7P5QAveOEUAybik0qA7ewqToKGIItzThDz9AR8qh\najKAGbOm4iw9Dn0ANi8YYipf65tTULq4GK6H+XLyJ/PI4MHmo2EZlWbkjOABTBOv\nPgxNsIJr98xA4DJFq6PsOw8zGYHduGfQenHHksdcpyht1IafBLp73jQ73QwjMJcv\n0GpynUPYCawricdAUvDo40zU3nkoyO+avgWlpMopDqKpyjHsz38clcDZY/AzmDM0\nHa8xzLVpkIPjErPbUPsAYwNZ/By09tDQqP03VpI/WKilSbcmKnm1pcwEJVDiNPsb\n9aCzriFu7jXEO+aC/SWV5+THTGDNU4ShmLdh9JTj3bNbufYaSPoxiJUw2/pmGNdj\nh8wlJm+NvUvc+OpRErF6RPQNIgcT0h0G/z/x+aBBxYF7qT+7n63BZcQCkFR479+n\nsnF/dboVlDDn7e+T\n=esvD\n-----END PGP SIGNATURE-----",
        "payload": "tree 535a0a2823eeb18257e5fdcf19379b6994f93156\nparent e7f84503571c171a7e6728cd2d77dd4103bd7a6f\nauthor Fabian Jahr <fjahr@protonmail.com> 1578917770 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1580255181 +0100\n\ndoc: Improve fuzzing docs for macOS users\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c3e84e87055be311347d7b636d68a6a828f563",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c3e84e87055be311347d7b636d68a6a828f563",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c3e84e87055be311347d7b636d68a6a828f563/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7f84503571c171a7e6728cd2d77dd4103bd7a6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7f84503571c171a7e6728cd2d77dd4103bd7a6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7f84503571c171a7e6728cd2d77dd4103bd7a6f"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 58,
      "deletions": 17
    },
    "files": [
      {
        "sha": "c34ca4cb592398e4f3e68b70f52017e810da1666",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 58,
        "deletions": 17,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c3e84e87055be311347d7b636d68a6a828f563/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c3e84e87055be311347d7b636d68a6a828f563/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=b6c3e84e87055be311347d7b636d68a6a828f563",
        "patch": "@@ -7,11 +7,8 @@ describe how to use it with AFL and libFuzzer.\n \n ## Preparing fuzzing\n \n-AFL needs an input directory with examples, and an output directory where it\n-will place examples that it found. These can be anywhere in the file system,\n-we'll define environment variables to make it easy to reference them.\n-\n-libFuzzer will use the input directory as output directory.\n+The fuzzer needs some inputs to work on, but the inputs or seeds can be used\n+interchangeably between libFuzzer and AFL.\n \n Extract the example seeds (or other starting inputs) into the inputs\n directory before starting fuzzing.\n@@ -21,13 +18,19 @@ git clone https://github.com/bitcoin-core/qa-assets\n export DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n ```\n \n-Only for AFL:\n+AFL needs an input directory with examples, and an output directory where it\n+will place examples that it found. These can be anywhere in the file system,\n+we'll define environment variables to make it easy to reference them.\n+\n+So, only for AFL you need to configure the outputs path:\n \n ```\n mkdir outputs\n export AFLOUT=$PWD/outputs\n ```\n \n+libFuzzer will use the input directory as output directory.\n+\n ## AFL\n \n ### Building AFL\n@@ -41,16 +44,25 @@ make\n export AFLPATH=$PWD\n ```\n \n+For macOS you may need to ignore x86 compilation checks when running `make`:\n+`AFL_NO_X86=1 make`.\n+\n ### Instrumentation\n \n To build Bitcoin Core using AFL instrumentation (this assumes that the\n `AFLPATH` was set as above):\n ```\n ./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n export AFL_HARDEN=1\n-cd src/\n make\n ```\n+\n+If you are using clang you will need to substitute `afl-gcc` with `afl-clang`\n+and `afl-g++` with `afl-clang++`, so the first line above becomes:\n+```\n+./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-clang CXX=${AFLPATH}/afl-clang++\n+```\n+\n We disable ccache because we don't want to pollute the ccache with instrumented\n objects, and similarly don't want to use non-instrumented cached objects linked\n in.\n@@ -60,25 +72,32 @@ The fuzzing can be sped up significantly (~200x) by using `afl-clang-fast` and\n compiling using `afl-clang-fast`/`afl-clang-fast++` the resulting\n binary will be instrumented in such a way that the AFL\n features \"persistent mode\" and \"deferred forkserver\" can be used. See\n-https://github.com/mcarpenter/afl/tree/master/llvm_mode for details.\n+https://github.com/google/AFL/tree/master/llvm_mode for details.\n \n ### Fuzzing\n \n To start the actual fuzzing use:\n \n ```\n-export FUZZ_TARGET=fuzz_target_foo  # Pick a fuzz_target\n+export FUZZ_TARGET=bech32  # Pick a fuzz_target\n mkdir ${AFLOUT}/${FUZZ_TARGET}\n-$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- test/fuzz/${FUZZ_TARGET}\n+$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n ```\n \n You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n will print an error and suggestion if so.\n \n+On macOS you may need to set `AFL_NO_FORKSRV=1` to get the target to run.\n+```\n+export FUZZ_TARGET=bech32  # Pick a fuzz_target\n+mkdir ${AFLOUT}/${FUZZ_TARGET}\n+AFL_NO_FORKSRV=1 $AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n+```\n+\n ## libFuzzer\n \n-A recent version of `clang`, the address/undefined sanitizers (ASan/UBSan) and libFuzzer is needed (all\n-found in the `compiler-rt` runtime libraries package).\n+A recent version of `clang`, the address/undefined sanitizers (ASan/UBSan) and\n+libFuzzer is needed (all found in the `compiler-rt` runtime libraries package).\n \n To build all fuzz targets with libFuzzer, run\n \n@@ -87,11 +106,33 @@ To build all fuzz targets with libFuzzer, run\n make\n ```\n \n-The fuzzer needs some inputs to work on, but the inputs or seeds can be used\n-interchangeably between libFuzzer and AFL.\n-\n See https://llvm.org/docs/LibFuzzer.html#running on how to run the libFuzzer\n instrumented executable.\n \n-Alternatively run the script in `./test/fuzz/test_runner.py` and provide it\n-with the `${DIR_FUZZ_IN}` created earlier.\n+Alternatively, you can run the script through the fuzzing test harness (only\n+libFuzzer supported so far). You need to pass it the inputs directory and\n+the specific test target you want to run.\n+\n+```\n+./test/fuzz/test_runner.py ${DIR_FUZZ_IN} bech32\n+```\n+\n+### macOS hints for libFuzzer\n+\n+The default clang/llvm version supplied by Apple on macOS does not include\n+fuzzing libraries, so macOS users will need to install a full version, for\n+example using `brew install llvm`.\n+\n+Should you run into problems with the address sanitizer, it is possible you\n+may need to run `./configure` with `--disable-asm` to avoid errors\n+with certain assembly code from Bitcoin Core's code. See [developer notes on sanitizers](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#sanitizers)\n+for more information.\n+\n+You may also need to take care of giving the correct path for clang and\n+clang++, like `CC=/path/to/clang CXX=/path/to/clang++` if the non-systems\n+clang does not come first in your path.\n+\n+Full configure that was tested on macOS Catalina with `brew` installed `llvm`:\n+```\n+./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm\n+```"
      }
    ]
  }
]