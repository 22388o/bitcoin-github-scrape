[
  {
    "sha": "3dda39306387b9a54a5f565f377c694e4dfe4605",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGRhMzkzMDYzODdiOWE1NGE1ZjU2NWYzNzdjNjk0ZTRkZmU0NjA1",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-12-26T08:10:25Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-12-26T08:13:54Z"
      },
      "message": "Don't download blocks unless they have more work than our current best\n\nCurrently the code for compact blocks is this, but the parallel fetch\ncode still wanting to download blocks with work equal to our current\nbest, which meant that for competing blocks we always requested the full\nblock even though we could have used the compact block received.\n\nRather than utilize the compact block, we don't need to download the\nblock at all (saving disk space) until we are sure that it's part of a\nlonger chain.",
      "tree": {
        "sha": "17687b4fb462675fba97ac0571567b14247127f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17687b4fb462675fba97ac0571567b14247127f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dda39306387b9a54a5f565f377c694e4dfe4605",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYYNFDAAoJEJYWlWnKgEH51PgP/08zVhJUT2/esupDf/I6cod3\nCUjaX42AzM/pkaS0BbKI6IghHNdagBZjR9BthYQtsKY9cPJp/Tv5/CQDt6FtyElu\nPWCnCWlTJ4oygsn8F72nk9jfeQ1GtmMacDuzXSe11fU9H2p8txTYevIz9/j826wU\nhsCa3Hmnu9Lmn2/oMQxF8qiEO7IYvidVckbnwaMfY0NUIcLDbaVy+R1LRlYBDp4G\njVQMD7zToUC7qUU0MBfy74gVLj1ZQPhsGY+v4KefUiNmW28wTEij0Zgw76FiYPOU\npOr/VdSilSPV2GCiRxHClB+0yMXDpyWqGr40AkztL7fv2/mMSLVhj+2/GmRFOQAP\nZhxaEqDl3yNISk1G2aIwY4QJmnwBEuIPGH7RRJ11sCAjPvl3nCtwzm1gl//LQwjS\ntWdVmtrmR0sMscIvLaOiLABTwxom9hbyNIcZJr58IZSbLzIz/uVzmIB1cTDqf2Zo\n3CSJSdWKKOOnpqoxKnmilCZ+Kjqi3EpGvdwmHHGMt6Q22PnlvwGqlJQq9L1TfL33\nORpDnc68SLentE28+RIL5if+duiBpS7VIuRFeLUf7yl5adt94KkVb78/14cs+Fjn\nfkDsqLpSPYQDz/Ih0lQCZNI+9BinjtyGWXEC9HRdKBQgw62UfleAWskvUO+r4R+/\nb4S1FU8aBGG5AlvD38N5\n=6V/j\n-----END PGP SIGNATURE-----",
        "payload": "tree 17687b4fb462675fba97ac0571567b14247127f9\nparent 0f921e6a0492c4e9f037a9ed91f474885032d68c\nauthor R E Broadley <rebroad+github@gmail.com> 1482739825 +0700\ncommitter R E Broadley <rebroad+github@gmail.com> 1482740034 +0700\n\nDon't download blocks unless they have more work than our current best\n\nCurrently the code for compact blocks is this, but the parallel fetch\ncode still wanting to download blocks with work equal to our current\nbest, which meant that for competing blocks we always requested the full\nblock even though we could have used the compact block received.\n\nRather than utilize the compact block, we don't need to download the\nblock at all (saving disk space) until we are sure that it's part of a\nlonger chain.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dda39306387b9a54a5f565f377c694e4dfe4605",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dda39306387b9a54a5f565f377c694e4dfe4605",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dda39306387b9a54a5f565f377c694e4dfe4605/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f921e6a0492c4e9f037a9ed91f474885032d68c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "23dcab8161bf7afed37f85c9326ba7b9ae735f2b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dda39306387b9a54a5f565f377c694e4dfe4605/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dda39306387b9a54a5f565f377c694e4dfe4605/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3dda39306387b9a54a5f565f377c694e4dfe4605",
        "patch": "@@ -473,7 +473,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n-    if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork) {\n+    if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork <= chainActive.Tip()->nChainWork) {\n         // This peer has nothing interesting.\n         return;\n     }\n@@ -1798,7 +1798,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n             return true;\n \n-        if (pindex->nChainWork <= chainActive.Tip()->nChainWork || // We know something better\n+        if (pindex->nChainWork <= chainActive.Tip()->nChainWork || // We know something better or as good\n                 pindex->nTx != 0) { // We had this block at some point, but pruned it\n             if (fAlreadyInFlight) {\n                 // We requested this block for some reason, but our mempool will probably be useless"
      }
    ]
  }
]