[
  {
    "sha": "9cbae55a6ed6fcc46e636b4ae670816aab3746ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2JhZTU1YTZlZDZmY2M0NmU2MzZiNGFlNjcwODE2YWFiMzc0NmVj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-02-16T18:18:11Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-02-16T18:18:11Z"
      },
      "message": "Denial-of-service flood control\nDrop connections that are either sending messages too fast to handle or are processing messages so slowly data starts to back up.\nAdds two new options:\n  -maxreceivebuffer  Default: 2000 (2000*1000 bytes)\n  -maxsendbuffer     Default: 256  (256*1000 bytes)",
      "tree": {
        "sha": "0151584a07bced17758f2eb40f6a7271af68ed7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0151584a07bced17758f2eb40f6a7271af68ed7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cbae55a6ed6fcc46e636b4ae670816aab3746ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cbae55a6ed6fcc46e636b4ae670816aab3746ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cbae55a6ed6fcc46e636b4ae670816aab3746ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cbae55a6ed6fcc46e636b4ae670816aab3746ec/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf7c1874fead05a828a1a28a239da411a0cb725e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf7c1874fead05a828a1a28a239da411a0cb725e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf7c1874fead05a828a1a28a239da411a0cb725e"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 31,
      "deletions": 19
    },
    "files": [
      {
        "sha": "8480a2fcf4a877c8198ad3d41f9d321c5a8a7a42",
        "filename": "net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 19,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cbae55a6ed6fcc46e636b4ae670816aab3746ec/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cbae55a6ed6fcc46e636b4ae670816aab3746ec/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/net.cpp?ref=9cbae55a6ed6fcc46e636b4ae670816aab3746ec",
        "patch": "@@ -748,32 +748,39 @@ void ThreadSocketHandler2(void* parg)\n                     CDataStream& vRecv = pnode->vRecv;\n                     unsigned int nPos = vRecv.size();\n \n-                    // typical socket buffer is 8K-64K\n-                    char pchBuf[0x10000];\n-                    int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n-                    if (nBytes > 0)\n-                    {\n-                        vRecv.resize(nPos + nBytes);\n-                        memcpy(&vRecv[nPos], pchBuf, nBytes);\n-                        pnode->nLastRecv = GetTime();\n-                    }\n-                    else if (nBytes == 0)\n-                    {\n-                        // socket closed gracefully\n+                    if (nPos > 1000*GetArg(\"-maxreceivebuffer\", 2*1000)) {\n                         if (!pnode->fDisconnect)\n-                            printf(\"socket closed\\n\");\n+                            printf(\"socket recv flood control disconnect (%d bytes)\\n\", vRecv.size());\n                         pnode->CloseSocketDisconnect();\n                     }\n-                    else if (nBytes < 0)\n-                    {\n-                        // error\n-                        int nErr = WSAGetLastError();\n-                        if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                    else {\n+                        // typical socket buffer is 8K-64K\n+                        char pchBuf[0x10000];\n+                        int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        if (nBytes > 0)\n                         {\n+                            vRecv.resize(nPos + nBytes);\n+                            memcpy(&vRecv[nPos], pchBuf, nBytes);\n+                            pnode->nLastRecv = GetTime();\n+                        }\n+                        else if (nBytes == 0)\n+                        {\n+                            // socket closed gracefully\n                             if (!pnode->fDisconnect)\n-                                printf(\"socket recv error %d\\n\", nErr);\n+                                printf(\"socket closed\\n\");\n                             pnode->CloseSocketDisconnect();\n                         }\n+                        else if (nBytes < 0)\n+                        {\n+                            // error\n+                            int nErr = WSAGetLastError();\n+                            if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                            {\n+                                if (!pnode->fDisconnect)\n+                                    printf(\"socket recv error %d\\n\", nErr);\n+                                pnode->CloseSocketDisconnect();\n+                            }\n+                        }\n                     }\n                 }\n             }\n@@ -806,6 +813,11 @@ void ThreadSocketHandler2(void* parg)\n                                 pnode->CloseSocketDisconnect();\n                             }\n                         }\n+                        if (vSend.size() > 1000*GetArg(\"-maxsendbuffer\", 256)) {\n+                            if (!pnode->fDisconnect)\n+                                printf(\"socket send flood control disconnect (%d bytes)\\n\", vSend.size());\n+                            pnode->CloseSocketDisconnect();\n+                        }\n                     }\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTNlODJmOWY1NDNiZGM4OGI4ZWFhZGVlNWQ2OTRiNGY2Y2ViZGM3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-02-16T19:43:04Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-02-16T19:43:04Z"
      },
      "message": "Set maxconnections default to 125",
      "tree": {
        "sha": "667e3ddcf868269dd7e68eb65791b8bfb9a00b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/667e3ddcf868269dd7e68eb65791b8bfb9a00b9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cbae55a6ed6fcc46e636b4ae670816aab3746ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cbae55a6ed6fcc46e636b4ae670816aab3746ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cbae55a6ed6fcc46e636b4ae670816aab3746ec"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 6,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0ba147bf75717aeb2892373b9031def93e4d937d",
        "filename": "net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 14,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/net.cpp?ref=5a3e82f9f543bdc88b8eaadee5d694b4f6cebdc7",
        "patch": "@@ -688,25 +688,18 @@ void ThreadSocketHandler2(void* parg)\n             socklen_t len = sizeof(sockaddr);\n             SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n             CAddress addr(sockaddr);\n-            bool fLimitConnections = false;\n             int nInbound = 0;\n \n-            if (mapArgs.count(\"-maxconnections\"))\n-                fLimitConnections = true;\n-\n-            if (fLimitConnections)\n-            {\n-                CRITICAL_BLOCK(cs_vNodes)\n-                    foreach(CNode* pnode, vNodes)\n-                    if (pnode->fInbound)\n-                        nInbound++;\n-            }\n+            CRITICAL_BLOCK(cs_vNodes)\n+                foreach(CNode* pnode, vNodes)\n+                if (pnode->fInbound)\n+                    nInbound++;\n             if (hSocket == INVALID_SOCKET)\n             {\n                 if (WSAGetLastError() != WSAEWOULDBLOCK)\n                     printf(\"socket error accept failed: %d\\n\", WSAGetLastError());\n             }\n-            else if (fLimitConnections && nInbound >= atoi(mapArgs[\"-maxconnections\"]) - MAX_OUTBOUND_CONNECTIONS)\n+            else if (nInbound >= GetArg(\"-maxconnections\", 125) - MAX_OUTBOUND_CONNECTIONS)\n             {\n                 closesocket(hSocket);\n             }\n@@ -988,8 +981,7 @@ void ThreadOpenConnections2(void* parg)\n                     if (!pnode->fInbound)\n                         nOutbound++;\n             int nMaxOutboundConnections = MAX_OUTBOUND_CONNECTIONS;\n-            if (mapArgs.count(\"-maxconnections\"))\n-                nMaxOutboundConnections = min(nMaxOutboundConnections, atoi(mapArgs[\"-maxconnections\"]));\n+            nMaxOutboundConnections = min(nMaxOutboundConnections, (int)GetArg(\"-maxconnections\", 125));\n             if (nOutbound < nMaxOutboundConnections)\n                 break;\n             Sleep(2000);"
      }
    ]
  }
]