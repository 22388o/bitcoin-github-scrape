[
  {
    "sha": "35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWJkZDc0NWE0Y2M2MWI4MDk0NWExNDVlNWI3ZDgxYzZlOWRmM2Qw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-15T08:55:43Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-15T09:37:10Z"
      },
      "message": "add framework for transaction proofs (BIP-322)\n\nInitially the proofs are put into the signet.h/cpp files as they are reusing a lot of the functionality.",
      "tree": {
        "sha": "badaf8c4b9e4e73bf3affa75d0f90441eb7fc857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/badaf8c4b9e4e73bf3affa75d0f90441eb7fc857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl+IGEYACgkQV692LbM1\nMyIEHA/+L9sQMJhp2bpenQzUVjFFplqEXzMLbvxxsJpRetf1gBE9Yx9kg5KBZ4KX\nTorD4KROljDReHmz+YdHrLIwmUXzx8HJgi+jLoIp7gRQVWXaXODiNx5H+Sssrtaz\nHp1NuugpLbQiUu3n2Okw+Sind41vai+PI0D2W0278bwE1IT7tkE73hbxYMvNwqyB\nJhQkdJcp7P/36fQgrctssweIS+YW7uz3MEEwJLftVoxm3tI5FHsLXjMO6C/vwxSH\nipwWF3UmutGeHDuKMM0pRtBJ7nQ6XCWlY8haC0iL51WKDE4SISpzACsf+efnD1yo\nYyo4AQ081nOTIHeavCRGJardJqMFnmnwJL+O/Q7ECC6NqrhSpObumOCU0NnBEeYL\noeXFE0A89zekEFhhUBv9KeBOkD4Cu7nt0iSxO5DmoF3LQ7KImsK5UzuNiwgyW5j+\nfmOZp4tjQDfCVArqRoTttROTDCGoJq+Jfy3Dhv/xN/B5n8+Dv4vq+XSZlscgAdgg\n7n5xE53tOFIH/BQa1s0F4E/eeF/GFxVtAOuFzVKugmHMdg+yagtOgDDvlPg4bZgf\nwuWsszxE3Cw1XeimRLOcLf2uSoBhCRK/WJ0jiPrZWsFflH6JY7LFfS2DY+HRgPaT\nJwCRmcM1xkbYcgpC6QBuHh6hFZw5AV/wo1gpQfbRPfDbXMst9BU=\n=I38k\n-----END PGP SIGNATURE-----",
        "payload": "tree badaf8c4b9e4e73bf3affa75d0f90441eb7fc857\nparent 3caee16946575e71e90ead9ac531f5a3a1259307\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602752143 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602754630 +0900\n\nadd framework for transaction proofs (BIP-322)\n\nInitially the proofs are put into the signet.h/cpp files as they are reusing a lot of the functionality.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3caee16946575e71e90ead9ac531f5a3a1259307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3caee16946575e71e90ead9ac531f5a3a1259307",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3caee16946575e71e90ead9ac531f5a3a1259307"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 95,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d8b0525b9b389520b568ac0a7dde147e9a842347",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 8,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
        "patch": "@@ -13,15 +13,18 @@\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <hash.h>\n+#include <policy/policy.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <span.h>\n #include <script/interpreter.h>\n #include <script/standard.h>\n #include <streams.h>\n+#include <txmempool.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <uint256.h>\n+#include <validation.h>\n \n static constexpr uint8_t SIGNET_HEADER[4] = {0xec, 0xc7, 0xda, 0xa2};\n \n@@ -65,23 +68,30 @@ static uint256 ComputeModifiedMerkleRoot(const CMutableTransaction& cb, const CB\n     return ComputeMerkleRoot(std::move(leaves));\n }\n \n-Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challenge)\n+Optional<SignetTxs> SignetTxs::Create(const CScript& signature, const std::vector<uint8_t>& witness, const std::vector<uint8_t>& commitment, const CScript& challenge)\n {\n     CMutableTransaction tx_to_spend;\n     tx_to_spend.nVersion = 0;\n     tx_to_spend.nLockTime = 0;\n     tx_to_spend.vin.emplace_back(COutPoint(), CScript(OP_0), 0);\n+    tx_to_spend.vin[0].scriptSig << commitment;\n     tx_to_spend.vout.emplace_back(0, challenge);\n \n     CMutableTransaction tx_spending;\n     tx_spending.nVersion = 0;\n     tx_spending.nLockTime = 0;\n     tx_spending.vin.emplace_back(COutPoint(), CScript(), 0);\n+    tx_spending.vin[0].scriptSig = signature;\n+    tx_spending.vin[0].scriptWitness.stack.emplace_back(witness);\n     tx_spending.vout.emplace_back(0, CScript(OP_RETURN));\n \n-    // can't fill any other fields before extracting signet\n-    // responses from block coinbase tx\n+    tx_spending.vin[0].prevout = COutPoint(tx_to_spend.GetHash(), 0);\n+\n+    return SignetTxs{tx_to_spend, tx_spending};\n+}\n \n+Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challenge)\n+{\n     // find and delete signet signature\n     if (block.vtx.empty()) return nullopt; // no coinbase tx in block; invalid\n     CMutableTransaction modified_cb(*block.vtx.at(0));\n@@ -93,14 +103,16 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n \n     CScript& witness_commitment = modified_cb.vout.at(cidx).scriptPubKey;\n \n+    CScript scriptSig;\n+    std::vector<uint8_t> witness;\n     std::vector<uint8_t> signet_solution;\n     if (!FetchAndClearCommitmentSection(SIGNET_HEADER, witness_commitment, signet_solution)) {\n         // no signet solution -- allow this to support OP_TRUE as trivial block challenge\n     } else {\n         try {\n             VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0);\n-            v >> tx_spending.vin[0].scriptSig;\n-            v >> tx_spending.vin[0].scriptWitness.stack;\n+            v >> scriptSig;\n+            v >> witness;\n             if (!v.empty()) return nullopt; // extraneous data encountered\n         } catch (const std::exception&) {\n             return nullopt; // parsing error\n@@ -114,10 +126,8 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n     writer << block.hashPrevBlock;\n     writer << signet_merkle;\n     writer << block.nTime;\n-    tx_to_spend.vin[0].scriptSig << block_data;\n-    tx_spending.vin[0].prevout = COutPoint(tx_to_spend.GetHash(), 0);\n \n-    return SignetTxs{tx_to_spend, tx_spending};\n+    return Create(scriptSig, witness, block_data, challenge);\n }\n \n // Signet block solution checker\n@@ -147,3 +157,71 @@ bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& cons\n     }\n     return true;\n }\n+\n+bool UpdateTransactionProof(const CTransaction& to_sign, size_t input_index, const CScript& scriptPubKey, TransactionProofResult& res)\n+{\n+    TransactionSignatureChecker sigcheck(&to_sign, /*nIn=*/ input_index, /*amount=*/ to_sign.vout[0].nValue);\n+\n+    if (!VerifyScript(to_sign.vin[input_index].scriptSig, scriptPubKey, &to_sign.vin[input_index].scriptWitness, BLOCK_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n+        res = TransactionProofInvalid;\n+        return false;\n+    }\n+\n+    if (!(res & TransactionProofInconclusive) && !VerifyScript(to_sign.vin[input_index].scriptSig, scriptPubKey, &to_sign.vin[input_index].scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n+        res = TransactionProofInconclusive | (res & TransactionProofInFutureFlag);\n+    }\n+\n+    return true;\n+}\n+\n+TransactionProofResult CheckTransactionProof(const std::vector<uint8_t>& message_hash, const CScript& challenge, const CTransaction& to_spend, const CTransaction& to_sign)\n+{\n+    // Construct our version of the spend/sign transactions and verify that they match\n+    // The signature and witness are in the to_sign transaction's first input.\n+    if (to_sign.vin.size() < 1 ||\n+        to_sign.vin[0].scriptWitness.IsNull() ||\n+        to_sign.vin[0].scriptWitness.stack.size() < 1) {\n+        return TransactionProofInvalid;\n+    }\n+    const auto signet_txs = SignetTxs::Create(to_sign.vin[0].scriptSig, to_sign.vin[0].scriptWitness.stack.at(0), message_hash, challenge);\n+    if (!signet_txs) return TransactionProofInvalid;\n+    // the to_spend transaction should be identical\n+    if (to_spend != signet_txs->m_to_spend) return TransactionProofInvalid;\n+    // the to_sign transaction should have exactly 1 output\n+    if (to_sign.vout.size() != 1) return TransactionProofInvalid;\n+    // the to_sign transaction may have extra inputs, but the first one should be identical\n+    if (to_sign.vin[0] != signet_txs->m_to_sign.vin[0]) return TransactionProofInvalid;\n+\n+    // Comparison check OK\n+\n+    // Now we do the signature check for the transaction\n+    TransactionProofResult res = TransactionProofValid;\n+    std::vector<CScript> scriptPubKeys;\n+\n+    // The first input is virtual, so we don't need to fetch anything\n+    scriptPubKeys.push_back(to_spend.vout[0].scriptPubKey);\n+\n+    // The rest need to be fetched from the UTXO set\n+    if (to_sign.vin.size() > 1) {\n+        // Fetch a list of inputs\n+        {\n+            LOCK(cs_main);\n+            CCoinsViewCache& view = ::ChainstateActive().CoinsTip();\n+            for (size_t i = 1; i < to_sign.vin.size(); ++i) {\n+                Coin coin;\n+                if (!view.GetCoin(to_sign.vin[i].prevout, coin)) {\n+                    // TODO: deal with spent transactions somehow; a proof for a spend output is also useful (perhaps let the verifier provide the transactions)\n+                    return TransactionProofInvalid;\n+                }\n+                scriptPubKeys.push_back(coin.out.scriptPubKey);\n+            }\n+        }\n+    }\n+\n+    // Validate spends\n+    for (size_t i = 0; i < scriptPubKeys.size(); ++i) {\n+        if (!UpdateTransactionProof(to_sign, i, scriptPubKeys.at(i), res)) return res;\n+    }\n+\n+    return res;\n+}"
      },
      {
        "sha": "e64ed738b8f87f66253b9f8efa0b042e6950faf5",
        "filename": "src/signet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0/src/signet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0/src/signet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.h?ref=35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
        "patch": "@@ -16,6 +16,14 @@\n  */\n bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& consensusParams);\n \n+typedef uint8_t TransactionProofResult;\n+constexpr TransactionProofResult TransactionProofInvalid       = 1;\n+constexpr TransactionProofResult TransactionProofInconclusive  = 2;\n+constexpr TransactionProofResult TransactionProofValid         = 3;\n+constexpr TransactionProofResult TransactionProofInFutureFlag  = 0x80;\n+\n+TransactionProofResult CheckTransactionProof(const std::vector<uint8_t>& message_hash, const CScript& challenge, const CTransaction& to_spend, const CTransaction& to_sign);\n+\n /**\n  * Generate the signet tx corresponding to the given block\n  *\n@@ -28,6 +36,7 @@ class SignetTxs {\n     SignetTxs(const T1& to_spend, const T2& to_sign) : m_to_spend{to_spend}, m_to_sign{to_sign} { }\n \n public:\n+    static Optional<SignetTxs> Create(const CScript& signature, const std::vector<uint8_t>& witness, const std::vector<uint8_t>& commitment, const CScript& challenge);\n     static Optional<SignetTxs> Create(const CBlock& block, const CScript& challenge);\n \n     const CTransaction m_to_spend;"
      }
    ]
  },
  {
    "sha": "dd69e9e5e2d7e48840b5c34632deb608ac824970",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDY5ZTllNWUyZDdlNDg4NDBiNWMzNDYzMmRlYjYwOGFjODI0OTcw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-15T12:45:51Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-15T12:45:51Z"
      },
      "message": "wip provefundswithwallet, verifymessage, ...",
      "tree": {
        "sha": "85e70cd94fd4f12bf4d28588bc66a66d262641cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85e70cd94fd4f12bf4d28588bc66a66d262641cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd69e9e5e2d7e48840b5c34632deb608ac824970",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl+IRH8ACgkQV692LbM1\nMyIeQRAAhCsHIHZT8BDhUa4A6+Vuk7nAzWhJ6Rva6GQYG2TgzZbLSpUjBLESAmNb\nKwmJt/VRvQJ8b7ZlCRZ2KLTk8NKaylKc0VwqJyY/68AxQl23ngyBnL8/MSVLrLJ+\nS8bRdB+t7EUs6ZwdDGS/S8U2YmBf6ym6jz4PjGwzMySnnV8Iqjj7TifDPOaJ4j5S\nbeOgK7AFXE11ZrsqjbvA7zgdMAtNITHsjbX0W2NuTUXT5+2bfolDc5aVu9AiUtj2\n3AToBtfPTh2PhCwE+9JUyny7uGmZT7Oih0n9Cpnplw/W+cPFAJDgVQzlMn5w1Wki\nUPqPEQp/rQr5RI0RmY6ouYgClUcIllYdTTLmzqn17idq9a2mMNy5Mfm+EA415Z7x\nxybZGfrR7ZCrJ+E8rgA5VxWwpScaBHhE1bfP/7PKZqBIadwmZtEPgA9sGPuVySpj\npQedU79EMYhmuESo4+PV6+CeXd41tDFxCzk9v+3SN7UrqjoikrwiZRgC+nYgdjOU\nCf0NFZV5P71y4B6xBdYGTbLKvT5L5LHmXEbvpRd7NTzjfmEIRe7/E+S2m/bJM2iu\nl1UyCQ/RqByUnXTyswLeoTJcLJfKOEgtbu765pHcjFu2rM60R3hUIhrkZYua9O9b\najHaLkM+5bkVgbLX4+MUYnqlIUJLFXM53KePbi6pAKLpU8EGNzw=\n=CG3T\n-----END PGP SIGNATURE-----",
        "payload": "tree 85e70cd94fd4f12bf4d28588bc66a66d262641cf\nparent 35bdd745a4cc61b80945a145e5b7d81c6e9df3d0\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602765951 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602765951 +0900\n\nwip provefundswithwallet, verifymessage, ...\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd69e9e5e2d7e48840b5c34632deb608ac824970",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd69e9e5e2d7e48840b5c34632deb608ac824970",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd69e9e5e2d7e48840b5c34632deb608ac824970/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35bdd745a4cc61b80945a145e5b7d81c6e9df3d0"
      }
    ],
    "stats": {
      "total": 277,
      "additions": 252,
      "deletions": 25
    },
    "files": [
      {
        "sha": "4274525a6842764aa26cd24904027a3859c92167",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -246,6 +246,21 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n             QString(\"<nobr>\") + tr(\"Message verification failed.\") + QString(\"</nobr>\")\n         );\n         return;\n+    case MessageVerificationResult::INCONCLUSIVE:\n+        ui->statusLabel_VM->setText(\n+            tr(\"Message inconclusive (your node may need to be upgraded to validate new upgradable rules).\")\n+        );\n+        return;\n+    case MessageVerificationResult::INCONCLUSIVE_IN_FUTURE:\n+        ui->statusLabel_VM->setText(\n+            tr(\"Message inconclusive, and encumbered by an unexpired time lock (your node may need to be upgraded to validate new upgradable rules).\")\n+        );\n+        return;\n+    case MessageVerificationResult::VALID_IN_FUTURE:\n+        ui->statusLabel_VM->setText(\n+            tr(\"Message valid, but encumbered by an unexpired time lock.\")\n+        );\n+        return;\n     }\n }\n "
      },
      {
        "sha": "1f32f47bc9b83cc1a145ba0de40f4aa630a89fd4",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -100,6 +100,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"signrawtransactionwithkey\", 1, \"privkeys\" },\n     { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n     { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n+    { \"provefundswithwallet\", 2, \"inputs\" },\n+    { \"verifymessage\", 3, \"inputs\" },\n     { \"sendrawtransaction\", 1, \"maxfeerate\" },\n     { \"testmempoolaccept\", 0, \"rawtxs\" },\n     { \"testmempoolaccept\", 1, \"maxfeerate\" },"
      },
      {
        "sha": "85d2cda3d5869fb5a9c8f593d01a1987fe2e944f",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 2,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <core_io.h>\n #include <httpserver.h>\n #include <index/blockfilterindex.h>\n #include <index/txindex.h>\n@@ -276,6 +277,16 @@ static RPCHelpMan verifymessage()\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the signature.\"},\n                     {\"signature\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n                     {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message that was signed.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"UTXOs in a proof of funds\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                },\n+                            },\n+                        },\n+                    },\n                 },\n                 RPCResult{\n                     RPCResult::Type::BOOL, \"\", \"If the signature is verified or not.\"\n@@ -298,15 +309,33 @@ static RPCHelpMan verifymessage()\n     std::string strSign     = request.params[1].get_str();\n     std::string strMessage  = request.params[2].get_str();\n \n-    switch (MessageVerify(strAddress, strSign, strMessage)) {\n+    std::vector<COutPoint> inputs;\n+    if (!request.params[3].isNull()) {\n+        for (const UniValue& univalue : request.params[3].getValues()) {\n+            uint256 txid;\n+            if (!ParseHashStr(univalue[\"txid\"].get_str(), txid)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"txid must be a 32 byte hex value\");\n+            }\n+            inputs.emplace_back(txid, univalue[\"vout\"].get_int());\n+        }\n+    }\n+\n+    switch (MessageVerify(strAddress, strSign, strMessage, inputs)) {\n     case MessageVerificationResult::ERR_INVALID_ADDRESS:\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n     case MessageVerificationResult::ERR_ADDRESS_NO_KEY:\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n     case MessageVerificationResult::ERR_MALFORMED_SIGNATURE:\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n+    case MessageVerificationResult::INCONCLUSIVE:\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Inconclusive result (node upgrade required?)\");\n+    case MessageVerificationResult::INCONCLUSIVE_IN_FUTURE:\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Inconclusive result with unexpired time lock\");\n+    case MessageVerificationResult::VALID_IN_FUTURE:\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Valid proof with unexpired time lock\");\n     case MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED:\n     case MessageVerificationResult::ERR_NOT_SIGNED:\n+    case MessageVerificationResult::ERR_INVALID:\n         return false;\n     case MessageVerificationResult::OK:\n         return true;\n@@ -704,7 +733,7 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n     { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"range\"} },\n     { \"util\",               \"getdescriptorinfo\",      &getdescriptorinfo,      {\"descriptor\"} },\n-    { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n+    { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\", \"inputs\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n     { \"util\",               \"getindexinfo\",           &getindexinfo,           {\"index_name\"} },\n "
      },
      {
        "sha": "690ab336d7e0a4c0441c24d9433fbe1665ff30ca",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 10,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -28,6 +28,8 @@\n \n static constexpr uint8_t SIGNET_HEADER[4] = {0xec, 0xc7, 0xda, 0xa2};\n \n+const CHashWriter HASHER_SIGNMESSAGE = TaggedHash(\"BIP0322-signed-message\");\n+\n static constexpr unsigned int BLOCK_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_NULLDUMMY;\n \n static bool FetchAndClearCommitmentSection(const Span<const uint8_t> header, CScript& witness_commitment, std::vector<uint8_t>& result)\n@@ -68,7 +70,7 @@ static uint256 ComputeModifiedMerkleRoot(const CMutableTransaction& cb, const CB\n     return ComputeMerkleRoot(std::move(leaves));\n }\n \n-Optional<SignetTxs> SignetTxs::Create(const CScript& signature, const std::vector<uint8_t>& witness, const std::vector<uint8_t>& commitment, const CScript& challenge)\n+Optional<SignetTxs> SignetTxs::Create(const CScript& signature, const std::vector<std::vector<uint8_t>>& witnessStack, const std::vector<uint8_t>& commitment, const CScript& challenge)\n {\n     CMutableTransaction tx_to_spend;\n     tx_to_spend.nVersion = 0;\n@@ -82,7 +84,7 @@ Optional<SignetTxs> SignetTxs::Create(const CScript& signature, const std::vecto\n     tx_spending.nLockTime = 0;\n     tx_spending.vin.emplace_back(COutPoint(), CScript(), 0);\n     tx_spending.vin[0].scriptSig = signature;\n-    tx_spending.vin[0].scriptWitness.stack.emplace_back(witness);\n+    tx_spending.vin[0].scriptWitness.stack = witnessStack;\n     tx_spending.vout.emplace_back(0, CScript(OP_RETURN));\n \n     tx_spending.vin[0].prevout = COutPoint(tx_to_spend.GetHash(), 0);\n@@ -104,15 +106,15 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n     CScript& witness_commitment = modified_cb.vout.at(cidx).scriptPubKey;\n \n     CScript scriptSig;\n-    std::vector<uint8_t> witness;\n+    std::vector<std::vector<uint8_t>> witnessStack;\n     std::vector<uint8_t> signet_solution;\n     if (!FetchAndClearCommitmentSection(SIGNET_HEADER, witness_commitment, signet_solution)) {\n         // no signet solution -- allow this to support OP_TRUE as trivial block challenge\n     } else {\n         try {\n             VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signet_solution, 0);\n             v >> scriptSig;\n-            v >> witness;\n+            v >> witnessStack;\n             if (!v.empty()) return nullopt; // extraneous data encountered\n         } catch (const std::exception&) {\n             return nullopt; // parsing error\n@@ -127,7 +129,7 @@ Optional<SignetTxs> SignetTxs::Create(const CBlock& block, const CScript& challe\n     writer << signet_merkle;\n     writer << block.nTime;\n \n-    return Create(scriptSig, witness, block_data, challenge);\n+    return Create(scriptSig, witnessStack, block_data, challenge);\n }\n \n // Signet block solution checker\n@@ -174,16 +176,16 @@ bool UpdateTransactionProof(const CTransaction& to_sign, size_t input_index, con\n     return true;\n }\n \n-TransactionProofResult CheckTransactionProof(const std::vector<uint8_t>& message_hash, const CScript& challenge, const CTransaction& to_spend, const CTransaction& to_sign)\n+TransactionProofResult CheckTransactionProof(const std::string& message, const CScript& challenge, const CTransaction& to_spend, const CTransaction& to_sign)\n {\n+    auto message_hash = GetMessageCommitment(message);\n+\n     // Construct our version of the spend/sign transactions and verify that they match\n     // The signature and witness are in the to_sign transaction's first input.\n-    if (to_sign.vin.size() < 1 ||\n-        to_sign.vin[0].scriptWitness.IsNull() ||\n-        to_sign.vin[0].scriptWitness.stack.size() < 1) {\n+    if (to_sign.vin.size() < 1) {\n         return TransactionProofInvalid;\n     }\n-    const auto signet_txs = SignetTxs::Create(to_sign.vin[0].scriptSig, to_sign.vin[0].scriptWitness.stack.at(0), message_hash, challenge);\n+    const auto signet_txs = SignetTxs::Create(to_sign.vin[0].scriptSig, to_sign.vin[0].scriptWitness.stack, message_hash, challenge);\n     if (!signet_txs) return TransactionProofInvalid;\n     // the to_spend transaction should be identical\n     if (to_spend != signet_txs->m_to_spend) return TransactionProofInvalid;\n@@ -225,3 +227,14 @@ TransactionProofResult CheckTransactionProof(const std::vector<uint8_t>& message\n \n     return res;\n }\n+\n+std::vector<uint8_t> GetMessageCommitment(const std::string& message)\n+{\n+    CHashWriter hasher = HASHER_SIGNMESSAGE;\n+    hasher << message;\n+    uint256 hash = hasher.GetHash();\n+    std::vector<uint8_t> commitment;\n+    commitment.resize(32);\n+    memcpy(commitment.data(), hash.begin(), 32);\n+    return commitment;\n+}"
      },
      {
        "sha": "a83d2e4109ddee1ad8b93503962ba63e9024c62f",
        "filename": "src/signet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/signet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/signet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.h?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -22,7 +22,9 @@ constexpr TransactionProofResult TransactionProofInconclusive  = 2;\n constexpr TransactionProofResult TransactionProofValid         = 3;\n constexpr TransactionProofResult TransactionProofInFutureFlag  = 0x80;\n \n-TransactionProofResult CheckTransactionProof(const std::vector<uint8_t>& message_hash, const CScript& challenge, const CTransaction& to_spend, const CTransaction& to_sign);\n+TransactionProofResult CheckTransactionProof(const std::string& message, const CScript& challenge, const CTransaction& to_spend, const CTransaction& to_sign);\n+\n+std::vector<uint8_t> GetMessageCommitment(const std::string& message);\n \n /**\n  * Generate the signet tx corresponding to the given block\n@@ -36,7 +38,7 @@ class SignetTxs {\n     SignetTxs(const T1& to_spend, const T2& to_sign) : m_to_spend{to_spend}, m_to_sign{to_sign} { }\n \n public:\n-    static Optional<SignetTxs> Create(const CScript& signature, const std::vector<uint8_t>& witness, const std::vector<uint8_t>& commitment, const CScript& challenge);\n+    static Optional<SignetTxs> Create(const CScript& signature, const std::vector<std::vector<uint8_t>>& witnessStack, const std::vector<uint8_t>& commitment, const CScript& challenge);\n     static Optional<SignetTxs> Create(const CBlock& block, const CScript& challenge);\n \n     const CTransaction m_to_spend;"
      },
      {
        "sha": "adce7b14a087887435c9e5e1c96f4bbb55bd518a",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 10,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -8,6 +8,8 @@\n #include <key_io.h>          // For DecodeDestination()\n #include <pubkey.h>          // For CPubKey\n #include <script/standard.h> // For CTxDestination, IsValidDestination(), PKHash\n+#include <signet.h>          // For BIP-0322\n+#include <streams.h>         // For VectorReader\n #include <serialize.h>       // For SER_GETHASH\n #include <util/message.h>\n #include <util/strencodings.h> // For DecodeBase64()\n@@ -21,33 +23,65 @@\n  */\n const std::string MESSAGE_MAGIC = \"Bitcoin Signed Message:\\n\";\n \n+MessageVerificationResult MessageVerifyBIP0322(\n+    const CTxDestination& destination,\n+    const std::vector<unsigned char>& signature,\n+    const std::string& message,\n+    const std::vector<COutPoint>& inputs,\n+    MessageVerificationResult inbound_result = MessageVerificationResult::ERR_ADDRESS_NO_KEY)\n+{\n+    bool forward_inbound = inbound_result != MessageVerificationResult::ERR_ADDRESS_NO_KEY;\n+\n+    CMutableTransaction to_spend, to_sign;\n+    VectorReader v(SER_NETWORK, INIT_PROTO_VERSION, signature, 0);\n+    v >> to_spend >> to_sign;\n+    // No extraneous data after stream\n+    if (!v.empty()) return MessageVerificationResult::ERR_INVALID;\n+    auto challenge = GetScriptForDestination(destination);\n+    if (challenge.empty()) challenge = CScript(OP_TRUE);\n+\n+    TransactionProofResult res = CheckTransactionProof(message, challenge, CTransaction(to_spend), CTransaction(to_sign));\n+    switch (res) {\n+    case TransactionProofInvalid: return forward_inbound ? inbound_result : MessageVerificationResult::ERR_INVALID;\n+    case TransactionProofInconclusive: return MessageVerificationResult::INCONCLUSIVE;\n+    case TransactionProofInconclusive | TransactionProofInFutureFlag: return MessageVerificationResult::INCONCLUSIVE_IN_FUTURE;\n+    case TransactionProofValid | TransactionProofInFutureFlag: return MessageVerificationResult::VALID_IN_FUTURE;\n+    }\n+    return MessageVerificationResult::OK;\n+}\n+\n MessageVerificationResult MessageVerify(\n     const std::string& address,\n     const std::string& signature,\n-    const std::string& message)\n+    const std::string& message,\n+    const std::vector<COutPoint>& inputs)\n {\n+    bool invalid = false;\n+    std::vector<unsigned char> signature_bytes = DecodeBase64(signature.c_str(), &invalid);\n+    if (invalid) {\n+        return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n+    }\n+\n     CTxDestination destination = DecodeDestination(address);\n     if (!IsValidDestination(destination)) {\n-        return MessageVerificationResult::ERR_INVALID_ADDRESS;\n+        return MessageVerifyBIP0322(destination, signature_bytes, message, inputs, MessageVerificationResult::ERR_INVALID_ADDRESS);\n     }\n \n-    if (boost::get<PKHash>(&destination) == nullptr) {\n-        return MessageVerificationResult::ERR_ADDRESS_NO_KEY;\n+    if (inputs.size() > 0) {\n+        return MessageVerifyBIP0322(destination, signature_bytes, message, inputs);\n     }\n \n-    bool invalid = false;\n-    std::vector<unsigned char> signature_bytes = DecodeBase64(signature.c_str(), &invalid);\n-    if (invalid) {\n-        return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n+    if (boost::get<PKHash>(&destination) == nullptr) {\n+        return MessageVerifyBIP0322(destination, signature_bytes, message, inputs);\n     }\n \n     CPubKey pubkey;\n     if (!pubkey.RecoverCompact(MessageHash(message), signature_bytes)) {\n-        return MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED;\n+        return MessageVerifyBIP0322(destination, signature_bytes, message, inputs, MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED);\n     }\n \n     if (!(CTxDestination(PKHash(pubkey)) == destination)) {\n-        return MessageVerificationResult::ERR_NOT_SIGNED;\n+        return MessageVerifyBIP0322(destination, signature_bytes, message, inputs, MessageVerificationResult::ERR_NOT_SIGNED);\n     }\n \n     return MessageVerificationResult::OK;"
      },
      {
        "sha": "a1336dc2acb0c0a2d91277c02440a2198e2d8e42",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -35,6 +35,18 @@ enum class MessageVerificationResult {\n     //! The message was not signed with the private key of the provided address.\n     ERR_NOT_SIGNED,\n \n+    //! The message was invalid (BIP322)\n+    ERR_INVALID,\n+\n+    //! The message was inconclusive, meaning it violates some upgradable rules (BIP322)\n+    INCONCLUSIVE,\n+\n+    //! The message was valid but is encumbered by a time lock (CSV/CLTV) (BIP322)\n+    VALID_IN_FUTURE,\n+\n+    //! The message was inconclusive and is also encumbered as above (BIP322)\n+    INCONCLUSIVE_IN_FUTURE,\n+\n     //! The message verification was successful.\n     OK\n };\n@@ -49,11 +61,13 @@ enum class SigningResult {\n  * @param[in] address Signer's bitcoin address, it must refer to a public key.\n  * @param[in] signature The signature in base64 format.\n  * @param[in] message The message that was signed.\n+ * @param[in] inputs A list of inputs in a proof of funds\n  * @return result code */\n MessageVerificationResult MessageVerify(\n     const std::string& address,\n     const std::string& signature,\n-    const std::string& message);\n+    const std::string& message,\n+    const std::vector<COutPoint>& inputs = std::vector<COutPoint>{});\n \n /** Sign a message.\n  * @param[in] privkey Private key to sign with."
      },
      {
        "sha": "26f266a63d88e2bff8b29fb5c94afb4e3673ea48",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd69e9e5e2d7e48840b5c34632deb608ac824970/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "patch": "@@ -36,6 +36,7 @@\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n+#include <signet.h>\n \n #include <stdint.h>\n \n@@ -3362,6 +3363,122 @@ RPCHelpMan signrawtransactionwithwallet()\n     };\n }\n \n+RPCHelpMan provefundswithwallet()\n+{\n+    return RPCHelpMan{\"provefundswithwallet\",\n+        \"\\nProve ownership of an optional address and an optional array of UTXOs.\\n\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message that should be embedded in the proof.\"},\n+            {\"address\", RPCArg::Type::STR, \"\", \"Address to prove (should be omitted when including inputs)\"},\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"UTXOs in a proof of funds\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                        },\n+                    },\n+                },\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::STR, \"str\", \"The base64-encoded proof\",\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"provefundswithwallet\", \"\\\"hello verifier\\\", \\\"bc1q...\\\"\")\n+          + HelpExampleRpc(\"provefundswithwallet\", \"\\\"hello verifier\\\" \\\"bc1q...\\\"\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            const CWallet* const pwallet = wallet.get();\n+\n+            RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR}, true);\n+\n+            std::string message = request.params[0].get_str();\n+            std::string address = request.params[1].isNull() ? \"\" : request.params[1].get_str();\n+            UniValue inputs(UniValue::VARR);\n+            if (!request.params[2].isNull()) inputs = request.params[2];\n+\n+            if (address.empty() == (0 == inputs.size())) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide one address and zero inputs, or no address and one or more inputs\");\n+            }\n+\n+            // Derive message hash (commitment)\n+\n+            auto commitment = GetMessageCommitment(message);\n+\n+            // Derive challenge\n+\n+            CScript challenge(OP_TRUE);\n+\n+            if (!address.empty()) {\n+                CTxDestination dest = DecodeDestination(address);\n+                if (!IsValidDestination(dest)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+                }\n+                challenge = GetScriptForDestination(dest);\n+            }\n+\n+            // Generate starting point for to-be-signed transactions\n+\n+            CScript signature;\n+            std::vector<std::vector<uint8_t>> witnessStack;\n+\n+            Optional<SignetTxs> txs = SignetTxs::Create(signature, witnessStack, commitment, challenge);\n+            // txs is Optional, but this version of Create() never fails\n+            const CTransaction& to_spend = txs->m_to_spend;\n+            CMutableTransaction to_sign(txs->m_to_sign);\n+\n+            // Append inputs, if any\n+            std::map<COutPoint, Coin> coins;\n+            if (inputs.size() > 0) {\n+                for (const auto& univalue : inputs.getValues()) {\n+                    uint256 txid;\n+                    if (!ParseHashStr(univalue[\"txid\"].get_str(), txid)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"txid must be a 32 byte hex value\");\n+                    }\n+                    COutPoint prevout(txid, univalue[\"vout\"].get_int());\n+                    to_sign.vin.emplace_back(prevout);\n+                    coins[prevout]; // Create empty map entry keyed by prevout.\n+                }\n+            }\n+\n+            // Script verification errors\n+            std::map<int, std::string> input_errors;\n+            bool complete;\n+\n+            {\n+                // Sign the transaction\n+                LOCK(pwallet->cs_wallet);\n+                EnsureWalletIsUnlocked(pwallet);\n+\n+                // Fetch previous transactions (inputs):\n+                pwallet->chain().findCoins(coins);\n+\n+                // Insert missing to_spend coin\n+                coins[COutPoint(to_spend.GetHash(), 0)] = Coin(to_spend.vout[0], 0, true);\n+\n+                complete = pwallet->SignTransaction(to_sign, coins, SIGHASH_ALL, input_errors);\n+            }\n+\n+            if (!complete || input_errors.size() > 0) {\n+                UniValue result(UniValue::VOBJ);\n+                SignTransactionResultToJSON(to_sign, complete, coins, input_errors, result);\n+                return result;\n+            }\n+\n+            std::vector<uint8_t> proof_data;\n+            CVectorWriter writer(SER_NETWORK, INIT_PROTO_VERSION, proof_data, 0);\n+            writer << to_spend << to_sign;\n+\n+            return EncodeBase64(proof_data);\n+        },\n+    };\n+}\n+\n static RPCHelpMan bumpfee_helper(std::string method_name)\n {\n     bool want_psbt = method_name == \"psbtbumpfee\";\n@@ -4528,6 +4645,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\", \"load_on_startup\"} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"provefundswithwallet\",             &provefundswithwallet,          {\"message\", \"address\", \"inputs\"} },\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n     { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"options\"} },"
      }
    ]
  },
  {
    "sha": "6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2NiMGMxZTc0ZmI4YjIzODExYWRkOTQ5ZTNhODlkM2FkMGU1YTc2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-16T05:42:02Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-16T05:42:02Z"
      },
      "message": "use correct amounts in sig checks",
      "tree": {
        "sha": "4a1e80aa25232340c98efa053050660018c7d659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a1e80aa25232340c98efa053050660018c7d659"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl+JMqoACgkQV692LbM1\nMyIrThAAgROJwOUtyPEWZbJisiH0JSn5YmkroibYBQwq5R9Rnf/t3YUWOZ8iy33I\nQBznAnMN9C35QqhrPGAyTPXN00lmmfklHV/VWGKVIRCK180hpSGydwsZUX1+Ol8s\nYreyoPONI6JOhf0ztsPKNHes0WPvwNP5aeVj6AdURAP8ze2Sx7wkOWaimAlwZH82\nXJlDHEqG5Sq1yVFr3iiJTdEqPTdzggZD0p6iRu8nHGfNUpUzQBHCdlz8MmvzvIeJ\n00Vf0tDZsjxDy0J31fovO4LNW3YZKXw0khaGAChFKUFn9gTVy7JiYnHAa4rl104z\nx9jGoRxFMA//VTCX65S9nZFDxq+X6r3mOi62O/vRNXLIyvm75lMers7RB/zY9dBl\nscDV3JxKZOFoCq9SuceflDPwngyx25l57Jn1SBBGR+htTEGgL8PS7B2d2FE4nmd6\nVULYzCE6tm09i908J0PDMWw5lGCGF2N8JSqG940J0HJFAqGP2tp87iR67wQc+ONi\nHa4You0zFLEF45vVr5U+nANNPsh5GY3T+cRli12S/GTK0LmwPOZDQvcRoAChBlzm\nmPwh27PGclzJ8+nbPZHYSqNsJnPRRF3OeV7/mg1LAQPnf1cwBLeriw4SeLtLrqPm\nlAeoux9InAx/qeXtpyz6YMLy94x1Vifi4dphDmCl36CKQ7mXWbU=\n=Cty4\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a1e80aa25232340c98efa053050660018c7d659\nparent dd69e9e5e2d7e48840b5c34632deb608ac824970\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602826922 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602826922 +0900\n\nuse correct amounts in sig checks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd69e9e5e2d7e48840b5c34632deb608ac824970",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd69e9e5e2d7e48840b5c34632deb608ac824970"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "04689f79a3673cfc9fb7ac6240b71f4d518e9759",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76",
        "patch": "@@ -160,16 +160,17 @@ bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& cons\n     return true;\n }\n \n-bool UpdateTransactionProof(const CTransaction& to_sign, size_t input_index, const CScript& scriptPubKey, TransactionProofResult& res)\n+bool UpdateTransactionProof(const CTransaction& to_sign, size_t input_index, const std::map<COutPoint, Coin>& coins, TransactionProofResult& res)\n {\n-    TransactionSignatureChecker sigcheck(&to_sign, /*nIn=*/ input_index, /*amount=*/ to_sign.vout[0].nValue);\n+    const CTxOut& out = coins.at(to_sign.vin[input_index].prevout).out;\n+    TransactionSignatureChecker sigcheck(&to_sign, /*nIn=*/ input_index, /*amount=*/ out.nValue);\n \n-    if (!VerifyScript(to_sign.vin[input_index].scriptSig, scriptPubKey, &to_sign.vin[input_index].scriptWitness, BLOCK_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n+    if (!VerifyScript(to_sign.vin[input_index].scriptSig, out.scriptPubKey, &to_sign.vin[input_index].scriptWitness, BLOCK_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n         res = TransactionProofInvalid;\n         return false;\n     }\n \n-    if (!(res & TransactionProofInconclusive) && !VerifyScript(to_sign.vin[input_index].scriptSig, scriptPubKey, &to_sign.vin[input_index].scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n+    if (!(res & TransactionProofInconclusive) && !VerifyScript(to_sign.vin[input_index].scriptSig, out.scriptPubKey, &to_sign.vin[input_index].scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n         res = TransactionProofInconclusive | (res & TransactionProofInFutureFlag);\n     }\n \n@@ -198,10 +199,10 @@ TransactionProofResult CheckTransactionProof(const std::string& message, const C\n \n     // Now we do the signature check for the transaction\n     TransactionProofResult res = TransactionProofValid;\n-    std::vector<CScript> scriptPubKeys;\n+    std::map<COutPoint, Coin> coins;\n \n     // The first input is virtual, so we don't need to fetch anything\n-    scriptPubKeys.push_back(to_spend.vout[0].scriptPubKey);\n+    coins[COutPoint(to_spend.GetHash(), 0)] = Coin(to_spend.vout[0], 0, true);\n \n     // The rest need to be fetched from the UTXO set\n     if (to_sign.vin.size() > 1) {\n@@ -210,19 +211,17 @@ TransactionProofResult CheckTransactionProof(const std::string& message, const C\n             LOCK(cs_main);\n             CCoinsViewCache& view = ::ChainstateActive().CoinsTip();\n             for (size_t i = 1; i < to_sign.vin.size(); ++i) {\n-                Coin coin;\n-                if (!view.GetCoin(to_sign.vin[i].prevout, coin)) {\n+                if (!view.GetCoin(to_sign.vin[i].prevout, coins[to_sign.vin[i].prevout])) {\n                     // TODO: deal with spent transactions somehow; a proof for a spend output is also useful (perhaps let the verifier provide the transactions)\n                     return TransactionProofInvalid;\n                 }\n-                scriptPubKeys.push_back(coin.out.scriptPubKey);\n             }\n         }\n     }\n \n     // Validate spends\n-    for (size_t i = 0; i < scriptPubKeys.size(); ++i) {\n-        if (!UpdateTransactionProof(to_sign, i, scriptPubKeys.at(i), res)) return res;\n+    for (size_t i = 0; i < to_sign.vin.size(); ++i) {\n+        if (!UpdateTransactionProof(to_sign, i, coins, res)) return res;\n     }\n \n     return res;"
      }
    ]
  },
  {
    "sha": "550aa48a39d92ece6d79e6243fef640cc9b187ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTBhYTQ4YTM5ZDkyZWNlNmQ3OWU2MjQzZmVmNjQwY2M5YjE4N2Vh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-16T05:51:12Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-16T05:51:12Z"
      },
      "message": "bip322: check that all given inputs are included in proof",
      "tree": {
        "sha": "a72bc6c069e99516fe622b28543b5f509e95da59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a72bc6c069e99516fe622b28543b5f509e95da59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/550aa48a39d92ece6d79e6243fef640cc9b187ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl+JNNAACgkQV692LbM1\nMyJkQA/+Pod5g00VjEWWxajyNelPAtxxBDD3mqIqpUNYQpeTwzNBTqzQ9NHQnGnJ\nY6w/fEUNJabHtdpfs3YxW4FGBJY4MZPc57lPzjOsKBQ3xM/+9IYcJpGOVdYQ5xZC\n0GtJVIHvKoy9IpI6xwNuBtqdZ5ubxJ8fA3MVn1oiLuXycwi1VB7rlEMpqasfyWW1\nYkQ/PV0n4V0OwI8EsO+F7LPscTkprSOSCxjLqbjeSOyhfy2SAT8O84GmWbgfv2KM\nMRacvhWcXfPdMYmD5J/Hjga40jYnL/TQyQS8/gW4jHvvd+Rh918zuHhWV0p1NDGU\nhsfZfJEgEUicTRTUeI8eUbCGHThl1kbuK9Z2D9UYpZFnbQIjWIl1qcYn+jCKRD3I\nu6TGbIjB3tdtY1VBlBorQXz9kCl8SvwRd+4Sv9qIdq6SyLIWf3mudFNWrpyApX37\nCaF7CSn7jl3mjZwf+4DvOUuMUMmanENbGc/Ajp63bKenaeGpT5H9CbHAsmPpJeMe\n+VtJHtnrnHGt++Jreird5Y3vGw9JdYWgD2svpUEHXMnIZMO6aZd0hP5i+S2kFS8n\neT+i3Q/ji3RM3CYDkMQTqkGC2kzPqR7Anhd6+U1OU9agyc+JSx6xezDvNeM5L0eY\n/+DPjHLlTCdPyK6vQejrXlAg6xGS3ywO+I0Fxx+KDpzoFHqClY4=\n=/EGh\n-----END PGP SIGNATURE-----",
        "payload": "tree a72bc6c069e99516fe622b28543b5f509e95da59\nparent 6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602827472 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602827472 +0900\n\nbip322: check that all given inputs are included in proof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550aa48a39d92ece6d79e6243fef640cc9b187ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/550aa48a39d92ece6d79e6243fef640cc9b187ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550aa48a39d92ece6d79e6243fef640cc9b187ea/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ccb0c1e74fb8b23811add949e3a89d3ad0e5a76"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d3ece3ed9480ea7ef76bb067037acbd78895e042",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/550aa48a39d92ece6d79e6243fef640cc9b187ea/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/550aa48a39d92ece6d79e6243fef640cc9b187ea/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=550aa48a39d92ece6d79e6243fef640cc9b187ea",
        "patch": "@@ -39,6 +39,17 @@ MessageVerificationResult MessageVerifyBIP0322(\n     if (!v.empty()) return MessageVerificationResult::ERR_INVALID;\n     auto challenge = GetScriptForDestination(destination);\n     if (challenge.empty()) challenge = CScript(OP_TRUE);\n+    // All inputs must be present in to_sign, exactly one time\n+    std::set<COutPoint> outpoints;\n+    outpoints.emplace(to_spend.GetHash(), 0);\n+    for (const auto& o : inputs) {\n+        if (!outpoints.insert(o).second) return MessageVerificationResult::ERR_INVALID;\n+    }\n+    for (const auto& o : to_sign.vin) {\n+        if (!outpoints.count(o.prevout)) return MessageVerificationResult::ERR_INVALID;\n+        outpoints.erase(o.prevout);\n+    }\n+    if (outpoints.size() > 0) return MessageVerificationResult::ERR_INVALID;\n \n     TransactionProofResult res = CheckTransactionProof(message, challenge, CTransaction(to_spend), CTransaction(to_sign));\n     switch (res) {"
      }
    ]
  },
  {
    "sha": "03506dc9e4d1f2d9514a7d9aeb2122b5a885157f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzUwNmRjOWU0ZDFmMmQ5NTE0YTdkOWFlYjIxMjJiNWE4ODUxNTdm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-16T08:13:36Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-10-16T08:13:36Z"
      },
      "message": "handle lock time",
      "tree": {
        "sha": "648746c1728a2405b870b08868fd15286d9785b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/648746c1728a2405b870b08868fd15286d9785b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl+JVjAACgkQV692LbM1\nMyJ1dA//Q87P0rWdF2rEiifhhJjRvh2RKxSewTC4DM7r3QoTasZri1K/UifHPbvk\nl217wDPey6eSOjvWYHcEgAeqlliGVpersejruzvfhG6BfBNdv1WL8G1on2OztMWn\n21kSxmUHbdRJz4KnZ/D1fCJbSOZUxGtZXRO7OHAj2fQ3EUKvVso9p0IC5MxBUnQx\nqtrJQnKikx1bh1it5S69gt8T/jbfGJILFKLuvJdXkMfic19mui/VkSkbyamn3n5k\nH6f3cHq1o4pPxZFudWX7a6PIP54QKkY4Hfb8K0nB0ansivag77VyTzabRctrK1qM\nBVQHqsZQjLJIj67g2k1C4Vfqu271vk+FJRaDWBzsvwWYh+LUlVNB6BuV05W+4bRs\nirM4KwKBetHm2lBGb1ezMfqtfrLtFNb+33SjCyVJIIwY29E943GnhxRQWAV5R+kL\ngYLSxP4HbL/sxwD1BSCz/GOyMDe2DYA/YO2natq4cOhRpUcStjtSRQ/qTZpYx6Mn\nKspySvlu+iDEo0V6XvqAA9UZl9ae25Ru8SZ9liluG9euKBcWXbuIWg1/bmtVDu3e\nK1QUw/Wv1po0uTFFjPizmL6oZfM8qUPz4Qxr/HkLmwaXvUOSlcV7owaH8w8TrNmK\ngz8FQiO/HKkH5sXoWYfGLeY1hZeZi1sDhksowBqNJFsyI2RXnQk=\n=nnHY\n-----END PGP SIGNATURE-----",
        "payload": "tree 648746c1728a2405b870b08868fd15286d9785b2\nparent 550aa48a39d92ece6d79e6243fef640cc9b187ea\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602836016 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1602836016 +0900\n\nhandle lock time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "550aa48a39d92ece6d79e6243fef640cc9b187ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/550aa48a39d92ece6d79e6243fef640cc9b187ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/550aa48a39d92ece6d79e6243fef640cc9b187ea"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c2771b555e7a09a6d6470e19c4cbe2d8348ec973",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=03506dc9e4d1f2d9514a7d9aeb2122b5a885157f",
        "patch": "@@ -70,7 +70,7 @@ static uint256 ComputeModifiedMerkleRoot(const CMutableTransaction& cb, const CB\n     return ComputeMerkleRoot(std::move(leaves));\n }\n \n-Optional<SignetTxs> SignetTxs::Create(const CScript& signature, const std::vector<std::vector<uint8_t>>& witnessStack, const std::vector<uint8_t>& commitment, const CScript& challenge)\n+Optional<SignetTxs> SignetTxs::Create(const CScript& signature, const std::vector<std::vector<uint8_t>>& witnessStack, const std::vector<uint8_t>& commitment, const CScript& challenge, uint32_t locktime, uint32_t sequence)\n {\n     CMutableTransaction tx_to_spend;\n     tx_to_spend.nVersion = 0;\n@@ -81,8 +81,8 @@ Optional<SignetTxs> SignetTxs::Create(const CScript& signature, const std::vecto\n \n     CMutableTransaction tx_spending;\n     tx_spending.nVersion = 0;\n-    tx_spending.nLockTime = 0;\n-    tx_spending.vin.emplace_back(COutPoint(), CScript(), 0);\n+    tx_spending.nLockTime = locktime;\n+    tx_spending.vin.emplace_back(COutPoint(), CScript(), sequence);\n     tx_spending.vin[0].scriptSig = signature;\n     tx_spending.vin[0].scriptWitness.stack = witnessStack;\n     tx_spending.vout.emplace_back(0, CScript(OP_RETURN));\n@@ -186,7 +186,7 @@ TransactionProofResult CheckTransactionProof(const std::string& message, const C\n     if (to_sign.vin.size() < 1) {\n         return TransactionProofInvalid;\n     }\n-    const auto signet_txs = SignetTxs::Create(to_sign.vin[0].scriptSig, to_sign.vin[0].scriptWitness.stack, message_hash, challenge);\n+    const auto signet_txs = SignetTxs::Create(to_sign.vin[0].scriptSig, to_sign.vin[0].scriptWitness.stack, message_hash, challenge, to_sign.nLockTime, to_sign.vin[0].nSequence);\n     if (!signet_txs) return TransactionProofInvalid;\n     // the to_spend transaction should be identical\n     if (to_spend != signet_txs->m_to_spend) return TransactionProofInvalid;\n@@ -197,8 +197,15 @@ TransactionProofResult CheckTransactionProof(const std::string& message, const C\n \n     // Comparison check OK\n \n-    // Now we do the signature check for the transaction\n+    // Lock time check\n     TransactionProofResult res = TransactionProofValid;\n+    if (to_sign.nLockTime < LOCKTIME_THRESHOLD\n+            ? to_sign.nLockTime > ChainActive().Tip()->nHeight\n+            : to_sign.nLockTime > GetTime()) {\n+        res |= TransactionProofInFutureFlag;\n+    }\n+\n+    // Now we do the signature check for the transaction\n     std::map<COutPoint, Coin> coins;\n \n     // The first input is virtual, so we don't need to fetch anything"
      },
      {
        "sha": "a2345a7a3be37bd046e4decf338b55cb43dddb92",
        "filename": "src/signet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f/src/signet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03506dc9e4d1f2d9514a7d9aeb2122b5a885157f/src/signet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.h?ref=03506dc9e4d1f2d9514a7d9aeb2122b5a885157f",
        "patch": "@@ -38,7 +38,7 @@ class SignetTxs {\n     SignetTxs(const T1& to_spend, const T2& to_sign) : m_to_spend{to_spend}, m_to_sign{to_sign} { }\n \n public:\n-    static Optional<SignetTxs> Create(const CScript& signature, const std::vector<std::vector<uint8_t>>& witnessStack, const std::vector<uint8_t>& commitment, const CScript& challenge);\n+    static Optional<SignetTxs> Create(const CScript& signature, const std::vector<std::vector<uint8_t>>& witnessStack, const std::vector<uint8_t>& commitment, const CScript& challenge, uint32_t locktime = 0, uint32_t sequence = 0);\n     static Optional<SignetTxs> Create(const CBlock& block, const CScript& challenge);\n \n     const CTransaction m_to_spend;"
      }
    ]
  }
]