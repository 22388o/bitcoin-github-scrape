MarcoFalke,2020-11-05 07:18:33,How does this differ/compare to #20250 ?,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722192301,722192301,
MarcoFalke,2020-11-05 07:25:36,"I guess this one is adding a new separate option, #20250 is adding named aliases and keeping the existing options.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722195542,722195542,
jonatack,2020-11-05 07:42:28,"Yes, this one removes the conf_target/estimate_mode overloading and introduces a standard fee rate param.\n\n#20250 keeps the current overloading and makes it more consistent between the six RPCs. Some of what it does (feeRate -> fee_rate) is compatible or orthogonal.\n\nISTM the question is, do we want to release with the overloading or with a standard feerate param. (It would be simpler if w",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722202884,722202884,
DrahtBot,2020-11-05 10:09:57,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20391 (wallet: introduce setfeerate (an improved settxfee, in sat/vB) by jonatack)\n* #20362 (test: Implicitly sync after",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-722278499,722278499,
luke-jr,2020-11-06 19:26:16,"AFAICT, the only ""fee_rate"" in 0.20 was bumpfee. Specifying BTC/vkB (current value) in place of the new sat/vB would always be a *much* lower feerate. So it'd most likely be too low and error, or worst case lower than you intended and you can just bump it again to fix.\n\nWith that in mind, I think the option here should just be renamed to ""fee_rate"" and break the compatibility for bumpfee.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723257780,723257780,
jonatack,2020-11-06 19:42:18,@luke-jr SGTM and that would further simplify the implementation too.,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723264822,723264822,
achow101,2020-11-06 22:14:11,"Agree with renaming to `fee_rate`. However having two fee rate options for some RPCs is kinda weird. I suppose it's too late to fix that for this release, but it'd be nice to not do that in the future.\n\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723323684,723323684,
meshcollider,2020-11-07 06:13:12,Concept ACK for `fee_rate` ,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723398442,723398442,
jonatack,2020-11-09 10:42:11,"> Why `fee_rate_sat_vb` and not just `fee_rate`?\n\nI initially began with `fee_rate` in #20231. Then, based on https://github.com/bitcoin/bitcoin/pull/20220#discussion_r513789526 I changed to `fee_rate_sat_vb` here. Today, based on the feedback at last Friday's wallet meeting and here, I will push an update to use `fee_rate`.\n\n> Also, should not change `verbose` parameter index?\n\nFor se",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723929804,723929804,
MarcoFalke,2020-11-09 10:51:48,Has `verbose` been in a release already?,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723935004,723935004,
jonatack,2020-11-09 11:19:17,"Per d5863c0b3e it looks like `verbose` was added to sendtoaddress and sendmany after the 0.20 release. Not a bugfix, so probably not backported. Checking. Edit: nope, they aren't in 0.20.0 or 0.20.1. We're good.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-723949562,723949562,
achow101,2020-11-10 18:11:48,ACK 5660dd301152c0c7a70934cc7650ad162a44c9b4,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-724875274,724875274,
jonatack,2020-11-10 20:55:09,"Addressed @Xekyo and @achow101 feedback (thanks!), fixed a few things seen while self-reviewing (and removed a few duplicate tests/added some missing tests in rpc_fundrawtransaction.py) per `git diff 5660dd3 bcb8e0d` üç∞‚ú®",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-724960865,724960865,
jonatack,2020-11-11 01:35:02,Closed and reopened to see if the valgrind fuzzing ci will stop timing out and to try to kick appveyor into working. :hammer: The PR is all green on https://bitcoinbuilds.org/?build=4300.,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-725071629,725071629,
jonatack,2020-11-11 15:01:53,"Rebased on master after merge of #20368 to avoid the valgrind fuzz CI job time-outs.\n\n`git diff 5660dd3 bcb8e0d` still works for seeing the changes in the last update.\n\nThe remaining open question is https://github.com/bitcoin/bitcoin/pull/20305#discussion_r521297287 -> Edit: done in 05e82d86b09d914ebce05dbc92a7299cb026847b, this should hopefully be ready for final review.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-725472987,725472987,
achow101,2020-11-12 17:09:35,re-ACK 05e82d8,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-726211938,726211938,
jonatack,2020-11-12 20:51:17,"> Concept meh on adding the `v` (`BTC/kvB` instead of `BTC/kB`, `sat/vB` instead of `sat/B`). The distinction between bytes and ""virtual"" bytes has no practical use. It's only interesting for people who want to understand the internals of Bitcoin or why spending from a SegWit is address is cheaper.\n\nI understand and don't have a strong opinion on sat/B vs sat/vB, happy to follow review consens",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-726335318,726335318,
MarcoFalke,2020-11-13 05:48:25,"Concept ACK 05e82d86b0\n\nI conceptually agree with the changes, but I haven't reviewed them",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-726536443,726536443,
Xekyo,2020-11-13 22:29:34,"> Concept meh on adding the `v` (`BTC/kvB` instead of `BTC/kB`, `sat/vB` instead of `sat/B`). The distinction between bytes and ""virtual"" bytes has no practical use. It's only interesting for people who want to understand the internals of Bitcoin or why spending from a SegWit is address is cheaper.\n\nI dissent: a bunch of blockexplorers still show ""feerate"" in `sat/B`, but it often refers to ""f",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-727067187,727067187,
Xekyo,2020-11-13 23:46:37,tACK 05e82d86b09d914ebce05dbc92a7299cb026847b,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-727087797,727087797,
Sjors,2020-11-14 14:08:21,"If there's still block explorers (that people use) using real bytes instead of virtual bytes in their fee calculation, then indeed adding the `v` might be necessary. Either way, don't let it hold back this PR. ",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-727212289,727212289,
Xekyo,2020-11-16 14:41:33,"Just to provide two examples: \n\nThis first is from Blockchair providing the fee per raw size as [sat/B] next to the actual feerate: ![image](https://user-images.githubusercontent.com/4060799/99264847-fcafa000-27ee-11eb-86d1-2f3cfb7b66b6.png)\n\nThis second is Blockchain.com, providing fee per raw size as [sat/B] next to actual [sat/WU]:\n![image](https://user-images.githubusercontent.com/40",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-728105125,728105125,
luke-jr,2020-11-16 20:02:46,"Block explorer websites have been confusing users with bogus ""information"" forever. Trying to match them doesn't make sense.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-728293009,728293009,
MarcoFalke,2020-11-17 12:48:48,"review ACK 05e82d86b0 did not test and found a few style nits, which can be fixed later üçØ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 05e82d86b0 did not test and found a few style nits, which can be fixed later üçØ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-728905724,728905724,
Sjors,2020-11-17 12:56:15,I contacted one such explorer and nagged them to switch from bytes to vbytes :-),https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-728909301,728909301,
MarcoFalke,2020-11-17 18:38:12,This probably needs release notes?,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-729123179,729123179,
MarcoFalke,2020-11-17 18:50:45,"Btw, the first commit adds tests that pass without the code changes. I haven't tried the other added tests, but as a general rule, I'd prefer if new tests were added in a separate commit and not in the same commit that also changes behaviour.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-729129866,729129866,
jonatack,2020-11-17 18:53:47,"> This probably needs release notes?\n\nYes, will update the wiki.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-729131541,729131541,
MarcoFalke,2020-11-17 18:55:42,Turns out the style nits are regressions. See https://github.com/bitcoin/bitcoin/pull/20305/files#r525406176 and #20410 ,https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-729132494,729132494,
jonatack,2020-11-26 16:48:25,"Release notes added to the wiki at https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.21.0-Release-Notes-Draft.\n\nThe `Needs release note` tag can be removed.",https://github.com/bitcoin/bitcoin/pull/20305#issuecomment-734401571,734401571,
Xekyo,2020-11-09 16:31:35,"I get the impression looking around in the codebase that this writes an empty Object, but it's not clear to me how the value gets populated. I assume that this happens in another place, and it was previously failing because of this object being `null` instead of empty?",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519946531,519946531,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:07:24,"Actual, I was just thinking‚Ä¶ wouldn't an empty string be an interesting test case for ""mode"" as well?",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519975619,519975619,test/functional/wallet_send.py
Xekyo,2020-11-09 17:23:40,"It's not immediately obvious to me why `CFeeRate(feerate, COIN)` is equivalent to `fee_rate /= WALLET_BTC_KB_TO_SAT_B; CFeeRate(fee_rate)`. As far as I see, `COIN` equals 1e8, but `WALLET_BTC_KB_TO_SAT_B` equals 1e5.\n\nUpon inspection of `./src/policy/feerate.cpp` and `./src/policy/feerate.h`, `CFeeRate(‚Ä¶)` with two arguments appears to construct a fee rate in `sat/kvB` from fees paid in sats d",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519986635,519986635,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:37:49,I think it would be nice to add the permitted value range here.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519996056,519996056,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:40:53,"Since setting `fee_rate` is incompatible with a `conf_target` or `estimation_mode`, it might be nice to mention this here in the description.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519998042,519998042,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:47:01,"Since setting `fee_rate` is incompatible with a `conf_target` or `estimation_mode`, but they are provided as positional arguments via the RPC, it might be nice to mention the correct positional arguments for the latter two in this error message.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520001951,520001951,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:49:28,"If I were a user, I would like to get instructions about what the valid parameters are, if that's not too much work.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520003420,520003420,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:52:19,"haha, the horrors. :scream:\n\nThis has a confusion potential like me being confused about the order of arguments between `find` and `grep` every single time.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520005235,520005235,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:53:39,But just because being able to ask a miner to pay for including a transaction would be such a terrible DOS vector. :stuck_out_tongue_winking_eye: ,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520005999,520005999,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 17:58:33,"I think strictly speaking this is tied to `MIN_RELAY_TX_FEE`, so it might be nice to tie it to that instead of hardcoding to satoshi.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520009078,520009078,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 18:06:46,"Maybe I'm missing something, but I had trouble figuring out from the local code what the parameter set of this particular call is here. If I understand correctly, their types are being defined in 4086-4089. Maybe the parameter names could be added as comments there or here to remind the reader what is being tested to be null here in 4099.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520014120,520014120,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 18:08:33,"I was trying to figure out what exactly is checked here that prevents e.g. both `conf_target` and `fee_rate` to be set here, if `params[1]‚Ä¶[3]` all need to be null here.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520015110,520015110,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 18:09:26,Optional: mention that `fee_rate` is specified in `[sat/vB]` other than `feeRate`.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520015619,520015619,src/wallet/rpcwallet.cpp
Xekyo,2020-11-09 18:18:12,"I got hung up on this line because I first thought that `minRelayTxFee` would be 1,000 sats/kvB, but thinking about it, I assume that `self.min_relay_tx_fee` is specified in `BTC/kvB`. I did notice that this does not seem to ever be explicitly stated in this file.\n\nSo, the number just sort of comes from nowhere.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520020689,520020689,test/functional/rpc_fundrawtransaction.py
Xekyo,2020-11-09 18:22:44,"I think this may be a `fee` so the unit should just be `satoshi`, not `sats/B`. Otherwise, I'd not expect the result below to be 10,000√ó, but rather at a factor of 10,000/141. :thinking: ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520023407,520023407,test/functional/rpc_fundrawtransaction.py
Xekyo,2020-11-09 18:30:27,"This would in turn mean that this sentence should be:\n\n > Expect fee to be 10,000x higher when explicit **feerate** 10,000x greater is specified.\n\nAlso, nit: Wouldn't ""10,000√ó higher"" be ""10,001 as high""? :nerd_face: ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520027877,520027877,test/functional/rpc_fundrawtransaction.py
Xekyo,2020-11-09 18:38:51,"I'm not sure if we did that already, but it would be good to assure that the valid value range for `fee_rate` will cause an error for `feeRate` and vice versa. I would expect a lot of people to plug values for either into the other, and I'm not sure off the top of my head that the ranges have no overlap. (They should be shifted by a factor of 1e5 though, right?)",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520032533,520032533,test/functional/rpc_fundrawtransaction.py
Xekyo,2020-11-09 18:41:39,"Probably out of scope, but it would be kinda nice if an error like this told the user what said limit is.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520034207,520034207,test/functional/rpc_psbt.py
Xekyo,2020-11-09 18:46:46,"I mean, I see where that 1e-5 is coming from, but if one is not as immersed, it may be a bit more readable, if the two conversions were mentioned more explicitly:\n\n```\nfee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\n```\n",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520037187,520037187,test/functional/wallet_basic.py
Xekyo,2020-11-09 18:50:42,"This seems to be the first time we use `BTC/vB`. Given that it's a bit uncommon, that should perhaps be part of the variable name: I suggest to use `explicit_fee_rate_BTC_vb`.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520039621,520039621,test/functional/wallet_basic.py
Xekyo,2020-11-09 18:55:43,Isn't that `Decimal(fee_rate_sat_vb / 100000.0)` just a repetition of `fee_rate_btc_kvb`?,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520042704,520042704,test/functional/wallet_basic.py
Xekyo,2020-11-09 18:57:43,"Okay, this is as far as I got in 53b35be8f87fd894614a5e3609b1d8895a96c93c. I require nourishment. As discussed will continue after lunch.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520043964,520043964,test/functional/wallet_basic.py
jonatack,2020-11-09 19:03:10,"Yes, reckon we should deprecate `feeRate` as soon as feasible after this.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520048053,520048053,src/wallet/rpcwallet.cpp
jonatack,2020-11-09 19:10:00,Yes :+1: and I was more confident about making this change after all the test coverage we added in #20220.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520054583,520054583,src/wallet/rpcwallet.cpp
jonatack,2020-11-09 19:15:18,"Yes, that was my read on this too. And if `options` is empty, it is populated from the arg params a few lines after:\n```cpp\n            } else {\n                options.pushKV(""conf_target"", request.params[1]);\n                options.pushKV(""estimate_mode"", request.params[2]);\n                options.pushKV(""fee_rate"", request.params[3]);\n            }\n```\n",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520058540,520058540,src/wallet/rpcwallet.cpp
jonatack,2020-11-09 21:11:48,"Yup, good eye. One tests sendmany and the other tests sendtoaddress. Made this change in 136234cb\n```diff\n             fee_rate_sat_vb = 2\n+            fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\n.../...\n             fee = prebalance - postbalance - Decimal(amount)\n-            assert_fee_amount(fee, tx_size, Decimal(fee_rate_sat_vb / 100000.0))\n+            assert_fee_amount(fee, ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520122702,520122702,test/functional/wallet_basic.py
jonatack,2020-11-09 21:14:49,Good idea. Renamed to `explicit_fee_rate_btc_kvb` (since the variable names are lowercase) in 136234cb,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520124216,520124216,test/functional/wallet_basic.py
jonatack,2020-11-09 21:28:07,"The positional order depends on the RPC, so the user would need to refer to the specific RPC help. I tried to generally keep to the following positional order, where possible: conf_target, estimate_mode, fee_rate.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520131249,520131249,src/wallet/rpcwallet.cpp
jonatack,2020-11-09 21:32:52,"Thanks for the good ideas and feedback, @Xekyo. I'll try to implement them (and any other feedback you may have while continuing) tomorrow in the morning to move this forward. Heading to bed :)",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520133867,520133867,test/functional/wallet_basic.py
Xekyo,2020-11-10 01:28:47,"Getting hung up on all the wrong things, but if minRelayTxFee √ó txsize is 141 sats, I'm surprised that the incrementalFee is `705`. I thought that minimum increments are equal to `minRelayTxFee`.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520227883,520227883,test/functional/wallet_bumpfee.py
Xekyo,2020-11-10 01:31:46,"woah, damn. I think we may want to have a look at the `maxtxfee` that's a lot of money.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520228906,520228906,test/functional/wallet_bumpfee.py
Xekyo,2020-11-10 01:40:07,"Luckily, this is very benign. In the worst case, someone is going to get upped to the `minRelayTxFee` silently and sends at 1 sat/vB. Since RBF is on by default, they should be able to bump when they notice. :+1: ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520231413,520231413,src/wallet/rpcwallet.cpp
Xekyo,2020-11-10 01:41:15,"Overloading, begone! :fireworks: ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520231795,520231795,src/wallet/rpcwallet.cpp
Xekyo,2020-11-10 01:44:09,"Given that we're introducing `sat/vB` everywhere, how come this `BTC_KVB` was kept?",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520232666,520232666,src/policy/feerate.h
Xekyo,2020-11-10 01:51:17,"I assume that you considered and deliberately passed on also replacing these. I would surmise that it's it just too much of a can of worms? Otherwise it would be kinda odd that we are using `sat/vB` for the fee rate in all the send variants, but then use `BTC/kvB` for `settxfee`.\n\nNit: `settxfee` sets not a fee, but a feerate. ;)",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520234818,520234818,src/wallet/rpcwallet.cpp
Xekyo,2020-11-10 01:58:27,"To explain why that was ""donation"": ""Sean's Outpost"" was a homeless outreach program based in Florida that was run by a bitcoiner and was somewhat known in the Bitcoin ecosystem in ~2013-2014.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520236742,520236742,src/wallet/rpcwallet.cpp
Xekyo,2020-11-10 02:02:32,Thanks for updating all these! I think they hadn't been filled-in since 2013ish given the above mention of Sean's Outpost :),https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520237993,520237993,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 08:35:12,"TIL, thanks! Fixing",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520378840,520378840,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 08:50:35,"Good idea, updated each of the test files.\n```diff\n-        for mode in [""foo"", Decimal(""3.141592"")]:\n+        for mode in ["""", ""foo"", Decimal(""3.141592"")]:\n```",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520388431,520388431,test/functional/wallet_send.py
jonatack,2020-11-10 09:30:05,"Good idea, addressed this and https://github.com/bitcoin/bitcoin/pull/20305#discussion_r519998042 in 136234cb with\n```diff\ndiff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp\nindex edd7efb964..238d37ae98 100644\n--- a/src/wallet/rpcwallet.cpp\n+++ b/src/wallet/rpcwallet.cpp\n@@ -198,30 +198,33 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in] ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520414437,520414437,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 09:31:45,:+1: done as described in https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520414437,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520415563,520415563,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 11:51:42,"Good idea, doing.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520504264,520504264,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 14:08:21,"Added these comments:\n```diff\n             RPCTypeCheck(request.params, {\n-                UniValueType(), // ARR or OBJ, checked later\n-                UniValue::VNUM,\n-                UniValue::VSTR,\n-                UniValue::VNUM,\n-                UniValue::VOBJ,\n+                UniValueType(), // outputs (ARR or OBJ, checked later)\n+                UniValue::VNUM, // conf_t",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520588429,520588429,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 14:16:38,"Updated `wallet_send` tests.\n```diff\n+++ b/test/functional/wallet_send.py\n@@ -234,7 +234,7 @@ class WalletSendTest(BitcoinTestFramework):\n         for mode in [""unset"", ""economical"", ""conservative""]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=""economical"",\n                 conf_target=1, estimate_mode=mode, add_to_wallet=Fal",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520594634,520594634,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 15:03:11,"Good point. Yes, 1e5 apart. The ranges don't overlap if I'm not confused, except in the minimum fee direction. We already check the min/max for fee_rate (0.1-100,000 sat/vB) and the max for feeRate (1 BTC/kvB) in the functional tests. At the moment, min fee checks with feeRate are disabled due to `coinControl.fOverrideFeeRate = true` in wallet/rpcwallet.cpp `FundTransaction()`.\n\nTo test the mi",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520631298,520631298,test/functional/rpc_fundrawtransaction.py
jonatack,2020-11-10 15:21:39,"Updated in 136234cb\n```diff\n         result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result1 = node.fundrawtransaction(rawtx, {""fee_rate"": 200000 * self.min_relay_tx_fee})\n+        btc_kvb_to_sat_vb = 100000  # (1e5)\n+        result1 = node.fundrawtransaction(rawtx, {""fee_rate"": 2 * btc_kvb_to_sat_vb * self.min_relay_tx_fee})\n         re",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520645909,520645909,test/functional/rpc_fundrawtransaction.py
jonatack,2020-11-10 15:24:28,"Well-spotted, done in 136234cb\n```diff\n-        # With no arguments passed, expect fee of 141 sats/b.\n+        # With no arguments passed, expect fee of 141 satoshis.\n         assert_approx(node.fundrawtransaction(rawtx)[""fee""], vexp=0.00000141, vspan=0.00000001)\n-        # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n+        # Expect fee to be 10,00",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520648044,520648044,test/functional/rpc_fundrawtransaction.py
jonatack,2020-11-10 15:25:19,Right! Done in 136234cb,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520648757,520648757,test/functional/rpc_fundrawtransaction.py
jonatack,2020-11-10 15:28:14,Agree--punting on this for the next push but would be good.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520651114,520651114,test/functional/rpc_psbt.py
jonatack,2020-11-10 15:30:50,"Done in 136234cb\n```diff\n+++ b/test/functional/wallet_basic.py\n@@ -232,7 +232,7 @@ class WalletTest(BitcoinTestFramework):\n \n         self.log.info(""Test sendmany with fee_rate param (explicit fee rate in sat/vB)"")\n         fee_rate_sat_vb = 2\n-        fee_rate_btc_kvb = fee_rate_sat_vb / 100000.0\n+        fee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\n         explicit_fee_rate_",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520653277,520653277,test/functional/wallet_basic.py
jonatack,2020-11-10 15:35:00,"I think that's from `wallet/wallet.h`, though the different fee constants and config options are a bit confusing to me.\n```cpp\n//! minimum recommended increment for BIP 125 replacement txs\nstatic const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n```\nand `wallet/feebumper.cpp`\n```cpp\n    if (new_total_fee < minTotalFee) {\n        errors.push_back(strprintf(Untranslated(""Insufficien",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520656622,520656622,test/functional/wallet_bumpfee.py
jonatack,2020-11-10 15:38:47,Could be a good follow-up.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520659527,520659527,test/functional/wallet_bumpfee.py
jonatack,2020-11-10 15:42:53,"It's still the default unit elsewhere (until the remaining RPCs move to sat/vB) and also needed for the `feeRate` BTC/kvB error messages. For now, this PR remains in the scope of the 6 RPCs described in the PR description and the ""wallet: introduce fee_rate (sat/vB) param/option"" commit message.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520662771,520662771,src/policy/feerate.h
jonatack,2020-11-10 15:45:13,"Yep, scope creep on an already-wide PR. Could be a next step.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520664675,520664675,src/wallet/rpcwallet.cpp
achow101,2020-11-10 17:12:45,It would be nice to have a comment explaining this because it is not immediately clear why this works and future work on this code may not see this explanation.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520730092,520730092,src/wallet/rpcwallet.cpp
Xekyo,2020-11-10 19:19:46,"Excellent, I like this very thorough comment.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520815368,520815368,src/wallet/rpcwallet.cpp
Xekyo,2020-11-10 19:33:54,"Ooooh, so this was checking that not both the options and arguments were being passed. I guess I hadn't fully grokked that. I guess that would have been fine then, if any of the three was set on one, it would be incorrect for the any of the others to be set in the other parameter set. It actually is a bit more lenient locally then, but since e.g. passing both estimate_mode and fee_rate would throw",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520823459,520823459,src/wallet/rpcwallet.cpp
Xekyo,2020-11-10 19:36:37,Thanks for tracking that down!,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520825149,520825149,test/functional/wallet_bumpfee.py
jonatack,2020-11-10 20:37:28,"Done, added Doxygen documentation in a3eac6e603fddeda1dae20fba840d42f02710531",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520858514,520858514,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 20:40:40,"> If I were a user, I would like to get instructions about what the valid parameters are, if that's not too much work.\n\nDone in b827d2dbc229a",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520860273,520860273,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 20:41:19,Done in 802193e73e22580ec77,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520860669,520860669,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 20:42:15,"Thanks to your feedback, the error messages seem clearer now.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520861171,520861171,src/wallet/rpcwallet.cpp
jonatack,2020-11-10 20:43:10,Done in 136234cb,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520861645,520861645,src/wallet/rpcwallet.cpp
jonatack,2020-11-11 11:36:21,"It's not clear to me if `fOverrideFeeRate` should be set to true if `fee_rate` is passed in fundrawtransaction or walletcreatefundedpsbt, as it is for `feeRate`, or if the `fOverrideFeeRate` flag could just be removed.\n\nAFAICT `fOverrideFeeRate` set to true currently only serves to bypass minimum feerate checks for `feeRate` in `GetMinimumFeeRate()` for fundrawtransaction and walletcreatefunde",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r521297287,521297287,test/functional/rpc_fundrawtransaction.py
jonatack,2020-11-11 19:16:59,Found this [mini-discussion](https://github.com/bitcoin/bitcoin/pull/10706/#discussion_r126560525) in #10706 in mid-2017 between @ryanofsky and @morcos about the use of `fOverrideFeeRate` for `feeRate` in fundrawtransaction (and now also walletcreatefundedpsbt).,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r521582406,521582406,test/functional/rpc_fundrawtransaction.py
jonatack,2020-11-12 10:31:37,"Decided to maintain the `fOverrideFeeRate` behavior of disabling the min fee checks on `fee_rate` in RPCs fundrawtransaction and walletcreatefundedpsbt only (there is a ""fee rate greater than zero"" check instead), as has been the case for `feeRate` in these two RPCs since 2017, per the above comments. Done in 05e82d86b09d914ebce05dbc92a7299cb026847b.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r522001626,522001626,test/functional/rpc_fundrawtransaction.py
Sjors,2020-11-12 19:36:17,"This feels like a hack, unless I misunderstand the original purpose of this constructor. Maybe it's better to add a separate constructor with a boolean to distinguish `SAT_VB` from `BTC/kvB`.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r522371491,522371491,src/wallet/rpcwallet.cpp
Sjors,2020-11-12 20:00:37,I proposed that once: #16539,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r522385705,522385705,test/functional/wallet_bumpfee.py
jonatack,2020-11-12 20:54:32,"> I proposed that once: #16539\n\nTIL, thanks. Interesting discussion in that PR.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r522420052,522420052,test/functional/wallet_bumpfee.py
jonatack,2020-11-12 20:57:23,I asked myself why else the two-argument ctor might have been written and didn't come up with an answer...I'm not against reviewing a refactoring of it.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r522421518,522421518,src/wallet/rpcwallet.cpp
jonatack,2020-11-13 21:52:07,"Looking at settxfee in `wallet/rpcwallet.cpp`, it uses this ctor in a similar manner.\n```cpp\n    CAmount nAmount = AmountFromValue(request.params[0]);\n    CFeeRate tx_fee_rate(nAmount, 1000);\n```",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r523251311,523251311,src/wallet/rpcwallet.cpp
jonatack,2020-11-14 22:26:57,Done in #20391.,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r523470651,523470651,src/wallet/rpcwallet.cpp
MarcoFalke,2020-11-17 18:51:23,"DEFAULT_INCREMENTAL_RELAY_FEE, no?",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r525405363,525405363,src/wallet/rpcwallet.cpp
MarcoFalke,2020-11-17 18:52:40,This is a regression. In 0.20 it is possible to fund a raw tx without fee,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r525406176,525406176,src/wallet/rpcwallet.cpp
jonatack,2020-11-17 19:13:55,"Agreed, this looks like an oversight.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r525421166,525421166,src/wallet/rpcwallet.cpp
jonatack,2020-11-17 19:18:22,"Note, remove `#include <validation.h>` in rpcwallet.cpp as part of the change.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r525423785,525423785,src/wallet/rpcwallet.cpp
jonatack,2020-11-19 16:03:58,"It is possible to call fundrawtransaction (or walletcreatefundedpsbt) without passing a feeRate or a fee_rate, as they are optional args.\n\nBehavior before a0d495747320c79b27a83c216dcc526ac8df8f24: a negative feeRate raised ""Amount out of range"", and passing a feeRate of zero was possible in these two calls, but not in bumpfee or send{toaddress, many}.\n\nCurrent behavior is the same except t",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r527005186,527005186,src/wallet/rpcwallet.cpp
jonatack,2020-11-19 16:11:35,"Discussing offline with @harding and @Xekyo, zero-fee valid txns used to be a thing and might make sense in some future situations (package relay, LN anchor commitments) even if they are non-standard.",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r527011022,527011022,src/wallet/rpcwallet.cpp
MarcoFalke,2020-11-19 17:02:39,"""zero-fee"" txs could also pay fees externally (out-of-band), not even in the same package",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r527049437,527049437,src/wallet/rpcwallet.cpp
jonatack,2020-11-19 18:23:44,"Done in #20426, thanks for the catch @MarcoFalke ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r527104028,527104028,src/wallet/rpcwallet.cpp
jonatack,2020-11-19 18:24:41,Done in #20426 ,https://github.com/bitcoin/bitcoin/pull/20305#discussion_r527104596,527104596,src/wallet/rpcwallet.cpp
jonatack,2020-11-24 21:56:43,"> Yes, reckon we should deprecate `feeRate` as soon as feasible after this.\n\nDone in #20483 ",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r529908294,529908294,src/wallet/rpcwallet.cpp
jonatack,2020-11-28 19:05:51,"> This feels like a hack, unless I misunderstand the original purpose of this constructor. Maybe it's better to add a separate constructor with a boolean to distinguish `SAT_VB` from `BTC/kvB`.\n\n@Sjors done, proposed a separate constructor in https://github.com/bitcoin/bitcoin/commit/9c479bfc293fec9063acb9667ddb3cb60b46469d",https://github.com/bitcoin/bitcoin/pull/20305#discussion_r532095062,532095062,src/wallet/rpcwallet.cpp
