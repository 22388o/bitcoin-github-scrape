[
  {
    "sha": "3f7279161347543ce4e997d78ea89a4043491145",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjcyNzkxNjEzNDc1NDNjZTRlOTk3ZDc4ZWE4OWE0MDQzNDkxMTQ1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-05T05:34:01Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-11T14:55:46Z"
      },
      "message": "wallet: fix bug in RPC send options\n\nwhen empty, options were not being populated by arguments of the same name\n\nfound while adding test coverage in 603c0050",
      "tree": {
        "sha": "405a3b40795572558bd39ee9d8919a7f2501f470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/405a3b40795572558bd39ee9d8919a7f2501f470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f7279161347543ce4e997d78ea89a4043491145",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+r+3MACgkQT1chs9Dj\nkh2FdRAAxSm3h7Ac0a4yWv5XdNZM1ZlIeSnQl5QJVS4tcyNMC37BxlOSHIw+Dz7L\nhzg97lEFck9t3o8LyZY9VVlUy1H6YyHs+zBmPXWotQl8CdQWCqSs7PRZD5LIW6vH\nzPrdwr1gxRkKDeqy0SVdF1LAT92nVM6V8kPMuF5grNWWNK0H7x+F+1atPSSWJSnV\ngVJcjcArICa0d5uao/rgXOrzbhCgsz2lGV6m5R02/GBkpT+oBzhoWUNHdayy2x8C\nD2Y8oKIZGOKwwPZzGtf8cn0TwBR25Y7QSCKaxaTM+X0P04jIwXBkW/vEv2PJlreD\nEfjMSApCgK2/S1DYjAXLkjx5co6hrGxw50RRptU47pnut3LMo25QNkotsB0g4F/n\nDIUOYIri9ba3NSwoSk03K0JAjFTWNkJNucOenPBsWQu5OjrI2fGe5iP7Zmlre3Id\nYwcxnCQA0LBsHUXOqGtVCrwfu5wDt09hdpNyTI0lzk7GWFCq2h6qVAS1pYlwUaUL\n3C/pOX9IixecwCdOtb/l9GWrf6yR82glmvrlRX6FcHIxk4TPN0r8CuCCq2vw96FV\nigSUTdFoNiwOiP4fdLrSwOMLw5giXA3I1xy+xQ/SL7F343OBWD3PXQZ9bEELzGXy\n4hvXkclSMWsX51WnICj6TNJqzKB3kKqeOJ3pajkytmwsFCFO50I=\n=K4a6\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIOp/ymeSTemW/5YOyCHkaPN5lHVazRxtL3AsSNT4LFHjCP/wEFm+xyNkwEFE\nwa5swZseXwEI8QRfq/t18AhUlQIMiEjIzwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEIPvoVoudXMmp9wafhAm\nsboI8QRfq/t08AhajKQHLqyYgwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQwOlzVaUUpINBHls+RUmhUAjxBF+r+3TwCMJ7tKVn\nLZ10AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 405a3b40795572558bd39ee9d8919a7f2501f470\nparent 155bf91c3b66e3ec9f870d8161e1a3c9a5c23251\nauthor Jon Atack <jon@atack.com> 1604554441 +0100\ncommitter Jon Atack <jon@atack.com> 1605106546 +0100\n\nwallet: fix bug in RPC send options\n\nwhen empty, options were not being populated by arguments of the same name\n\nfound while adding test coverage in 603c0050\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7279161347543ce4e997d78ea89a4043491145",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7279161347543ce4e997d78ea89a4043491145",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7279161347543ce4e997d78ea89a4043491145/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "155bf91c3b66e3ec9f870d8161e1a3c9a5c23251",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/155bf91c3b66e3ec9f870d8161e1a3c9a5c23251",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/155bf91c3b66e3ec9f870d8161e1a3c9a5c23251"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4a3212e6fe0ffb8bf01910ffc80d795f17d4e97e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f7279161347543ce4e997d78ea89a4043491145/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f7279161347543ce4e997d78ea89a4043491145/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3f7279161347543ce4e997d78ea89a4043491145",
        "patch": "@@ -4087,7 +4087,7 @@ static RPCHelpMan send()\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options = request.params[3];\n+            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n             if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n                 if (!request.params[1].isNull() || !request.params[2].isNull()) {\n                     throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");"
      },
      {
        "sha": "82c046a17feb30864b97f9c248dfad333fcba1f3",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f7279161347543ce4e997d78ea89a4043491145/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f7279161347543ce4e997d78ea89a4043491145/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=3f7279161347543ce4e997d78ea89a4043491145",
        "patch": "@@ -5,13 +5,15 @@\n \"\"\"Test the send RPC command.\"\"\"\n \n from decimal import Decimal, getcontext\n+from itertools import product\n+\n from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_fee_amount,\n     assert_greater_than,\n-    assert_raises_rpc_error\n+    assert_raises_rpc_error,\n )\n \n class WalletSendTest(BitcoinTestFramework):\n@@ -271,8 +273,9 @@ def run_test(self):\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00003\"))\n \n-        # TODO: This test should pass with all modes, e.g. with the next line uncommented, for consistency with the other explicit feerate RPCs.\n-        # for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        for target, mode in product([-1, 0, 1009], [\"economical\", \"conservative\"]):\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=target, estimate_mode=mode,\n+                expect_error=(-8, \"Invalid conf_target, must be between 1 and 1008\"))\n         for mode in [\"btc/kb\", \"sat/b\"]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=mode,\n                 expect_error=(-3, \"Amount out of range\"))\n@@ -282,17 +285,15 @@ def run_test(self):\n         for mode in [\"foo\", Decimal(\"3.141592\")]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=mode,\n                 expect_error=(-8, \"Invalid estimate_mode parameter\"))\n-            # TODO: these 2 equivalent sends with an invalid estimate_mode arg should both fail, but they do not...why?\n-            # self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.1, arg_estimate_mode=mode,\n-            #     expect_error=(-8, \"Invalid estimate_mode parameter\"))\n-            # assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", lambda: w0.send({w1.getnewaddress(): 1}, 0.1, mode))\n-\n-        # TODO: These tests should pass for consistency with the other explicit feerate RPCs, but they do not.\n-        # for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n-        #     self.log.debug(\"{}\".format(mode))\n-        #     for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n-        #         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n-        #             expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.1, arg_estimate_mode=mode,\n+                expect_error=(-8, \"Invalid estimate_mode parameter\"))\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", lambda: w0.send({w1.getnewaddress(): 1}, 0.1, mode))\n+\n+        for mode in [\"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+            self.log.debug(\"{}\".format(mode))\n+            for k, v in {\"string\": \"true\", \"object\": {\"foo\": \"bar\"}}.items():\n+                self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n+                    expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n \n         # TODO: error should use sat/B instead of BTC/kB if sat/B is selected.\n         # Test setting explicit fee rate just below the minimum."
      }
    ]
  },
  {
    "sha": "6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTEyY2YyMGQ0M2IwYmUzNGZlMGVkY2UyYWMzZTZiMjdjYWUxYmJl",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-10T18:32:50Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-11T14:55:53Z"
      },
      "message": "wallet: add CFeeRate ctor doxygen documentation\n\nas requested by reviewers",
      "tree": {
        "sha": "15c7e27f4df50706d028caa3c37e1514ea85f6f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15c7e27f4df50706d028caa3c37e1514ea85f6f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+r+3kACgkQT1chs9Dj\nkh03YQ//cOI/OSv1T5m28r2wYsavQHQ38pOClbvapnmjPlekWnQa+z26SfJ7PRjH\nEctkLtk8V5fw3PBTjxnytf5LzFpszf8gyrR4x1ptBy5nybGrtHz0aiwqhknWYcfX\nhhcqVpdOo3fYdQUvm8rGBPfIzKIrfDsMLDXDKlTOlASbHvuhM/s1iBqtqRvluqQs\n9JocNuctzEhvJKMukYTqfJ05g+OYXg94G/v306UHzGNmFESOLRx6TuVFvkuv0LiP\nT43j1FqJIu22mLtw1mxiCTHvhxS3/PtsU9t2lfAZDeaLTq9xgNbSMZaJn8iWL/fp\nKLPgEPDlvPoPhEQX9jQN3HnE7au2mwdPHBG+bh6d8n9AfOIxjPnm5TupwUPS1tS8\nwDEs3pCpAi3aGeP/gYB8kQBctdZ5k2Vja5Fae6tGf9/tSG+9RN3CrFhzQ82i/MbO\nn96Jn06YXx2wimkd8uySNRnIOvAZImJscf3rWjFwWihSuN5yVU5g3ZE6ZHLCxQqZ\n1uEVAr1walrJ7MmWfXxQm+8rRp7Jt70+cLNiEI2Fm4yZyA3wcBbGXqgOc9AfQbu7\nYzvS6iUp2RBQr/AoODRdJJgFqgcT1HNR6h01Wy8XJJ/OGlylKeZTiKtnczXozexv\nbGm+D8DDABylIWtUZ76ytx0fwL5T5rUAQsmVmhlYfoBDzaJSesY=\n=XSZI\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDnIWHpW1YqGaKCYyXkr6oeEhR6AmCOYx0vnyz+rfwh9CP/wEA2ZWAhLynZF\nBck/ZP+joP4I8QRfq/t+8AjueNvahFEiQACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEDYmXSbtPLBOuIX2yeakp3YI\n8QRfq/t78Aiu4Ly9SIYshACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wELh8UcIn1SRPXcYvNJpvyUgI8QRfq/t68Ai4YeD8+OYB\nSgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BDxcmXTZGUsNV83JRsGC8P7CPEEX6v7e/AIa9T8nG8N9tUAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 15c7e27f4df50706d028caa3c37e1514ea85f6f1\nparent 3f7279161347543ce4e997d78ea89a4043491145\nauthor Jon Atack <jon@atack.com> 1605033170 +0100\ncommitter Jon Atack <jon@atack.com> 1605106553 +0100\n\nwallet: add CFeeRate ctor doxygen documentation\n\nas requested by reviewers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f7279161347543ce4e997d78ea89a4043491145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7279161347543ce4e997d78ea89a4043491145",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7279161347543ce4e997d78ea89a4043491145"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f2bff19093240682b59b67be530a3611ac47b75",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe",
        "patch": "@@ -39,7 +39,16 @@ class CFeeRate\n         // We've previously had bugs creep in from silent double->int conversion...\n         static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\n     }\n-    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n+    /** Constructor for a fee rate in satoshis per kvB (sat/kvB). The size in bytes must not exceed (2^63 - 1).\n+     *\n+     *  Passing an nBytes value of COIN (1e8) returns a fee rate in satoshis per vB (sat/vB),\n+     *  e.g. (nFeePaid * 1e8 / 1e3) == (nFeePaid / 1e5),\n+     *  where 1e5 is the ratio to convert from BTC/kvB to sat/vB.\n+     *\n+     *  @param[in] nFeePaid  CAmount fee rate to construct with\n+     *  @param[in] nBytes    size_t bytes (units) to construct with\n+     *  @returns   fee rate\n+     */\n     CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n     /**\n      * Return the fee in satoshis for the given size in bytes."
      }
    ]
  },
  {
    "sha": "e21212f01b7c41eba13b0479b252053cf482bc1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjEyMTJmMDFiN2M0MWViYTEzYjA0NzliMjUyMDUzY2Y0ODJiYzFm",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-05T05:43:36Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-11T14:55:56Z"
      },
      "message": "wallet: remove unneeded WALLET_BTC_KB_TO_SAT_B constant",
      "tree": {
        "sha": "a01d6865b524d836615edd494b1e8f69ddb77841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a01d6865b524d836615edd494b1e8f69ddb77841"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e21212f01b7c41eba13b0479b252053cf482bc1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+r+3wACgkQT1chs9Dj\nkh2+2Q/+Jxr2a6Gofe0YX0tu5YxA41yXp0Ulpw6LxCHYR30Q3jdoS8l/zKnuUrW2\nxu/muxqkmtpQg16uXh5f33Iuv+pj1Q+pXHlip76Px382K+WY8oqsUXFgIly2sf3y\n9DjvbKpwe9qefyvm+gwCqSJ0LKyvzWsL/xNP6TXq+X8pa82IPAzz9/uGNch6qx66\nwdFuJ0puGsn74NC5SIGurYCig7q6CMiWdyxH8/N7D8aWlLfEAYtnA1VK0tyvb/5F\nr1t1G7WUu/h18Vverhe6rmIL3dEkBBuCxss2JuW5Dm04iaCyLe7ZvtcPUzi7+dsm\ns06rpWOe96ZJagEyep2CtN9dP1JLdtsqLMkULBODsWPZNo6q69yBMbdEy/ofxLLG\n0JrsNb+rzY77Op+rtCpqhmfHC3J9VQZPAl1U1k8NbUEi0hqfGFoLFMcI1T6SWHb5\nkLwQIXbwbolmHF3+bBb3f3mv2kqrVWtgUavrfnqePtcf2+k0up2Ejf/b11HNay0/\nSvWbGWd6Yt1cq/21oJqAPU2A+rtaRkLCzlPbHLsVtqYk6U94HH8zX2nQGrUBuab6\nC9qPwO15q+OjCP0TuJYp7BARoSynC9SysLtjxlRqxxmfQx8JP5Mxq2iiRCj3G3rH\nmQ85OX+XkhlEurN6Mt66xem/Ekelhqi9XQyjg8e7mxfpMrkpOTY=\n=koJF\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHgqUewPH3JUC60iyDRRoM74Qiu5ntapkr3OmHBWhfTiCP/wEIXIiiwhOzfI\nUIqAV+Z6FzAI8QRfq/t+8AgJX4aOWiCkswCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEOHAsYBwg8mQuMtkSEKGww0I8QRfq/uA\n8Aho53rVSd8jtgCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbf/wEOsWnqbSPVJOsE78FHPyM5wI8QRfq/t98AjLfI7gGLrG\nVwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BD2THYcfc+gR/usXIDrevkuCPEEX6v7fvAIro8INqzCteQAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a01d6865b524d836615edd494b1e8f69ddb77841\nparent 6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe\nauthor Jon Atack <jon@atack.com> 1604555016 +0100\ncommitter Jon Atack <jon@atack.com> 1605106556 +0100\n\nwallet: remove unneeded WALLET_BTC_KB_TO_SAT_B constant\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e21212f01b7c41eba13b0479b252053cf482bc1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e21212f01b7c41eba13b0479b252053cf482bc1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e21212f01b7c41eba13b0479b252053cf482bc1f/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6112cf20d43b0be34fe0edce2ac3e6b27cae1bbe"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "edd7efb964748fce3723f693a33027d3a134a614",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e21212f01b7c41eba13b0479b252053cf482bc1f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e21212f01b7c41eba13b0479b252053cf482bc1f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e21212f01b7c41eba13b0479b252053cf482bc1f",
        "patch": "@@ -47,8 +47,6 @@ using interfaces::FoundBlock;\n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n static const std::string HELP_REQUIRING_PASSPHRASE{\"\\nRequires wallet passphrase to be set with walletpassphrase call if wallet is encrypted.\\n\"};\n \n-static const uint32_t WALLET_BTC_KB_TO_SAT_B = COIN / 1000; // 1 sat / B = 0.00001 BTC / kB\n-\n static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValue& param) {\n     bool can_avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n     bool avoid_reuse = param.isNull() ? can_avoid_reuse : param.get_bool();\n@@ -217,12 +215,8 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n         }\n \n-        CAmount fee_rate = AmountFromValue(estimate_param);\n-        if (cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-            fee_rate /= WALLET_BTC_KB_TO_SAT_B;\n-        }\n-\n-        cc.m_feerate = CFeeRate(fee_rate);\n+        CAmount feerate{AmountFromValue(estimate_param)};\n+        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);\n \n         // default RBF to true for explicit fee rate modes\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;"
      }
    ]
  },
  {
    "sha": "a0d495747320c79b27a83c216dcc526ac8df8f24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGQ0OTU3NDczMjBjNzliMjdhODNjMjE2ZGNjNTI2YWM4ZGY4ZjI0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-04T12:13:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-11T14:55:59Z"
      },
      "message": "wallet: introduce fee_rate (sat/vB) param/option\n\nCreate a fee_rate (sat/vB) RPC param and replace overloading the conf_target and\nestimate_mode params in the following 6 RPCs with it:\n\n- sendtoaddress\n- sendmany\n- send\n- fundrawtransaction\n- walletcreatefundedpsbt\n- bumpfee\n\nIn RPC bumpfee, the previously existing fee_rate remains but the unit is changed\nfrom BTC/kvB to sat/vB. This is a breaking change, but it should not be an\noverly risky one, as the units change by a factor of 1e5 and any fees specified\nin BTC/kvB after this commit will either be too low and raise an error or be 1\nsat/vB and can be RBFed.\n\nUpdate the test coverage for each RPC.\n\nCo-authored-by: Murch <murch@murch.one>",
      "tree": {
        "sha": "1d662469632dc37850ff4b5bd9a9e04566f8e78a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d662469632dc37850ff4b5bd9a9e04566f8e78a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0d495747320c79b27a83c216dcc526ac8df8f24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+r+38ACgkQT1chs9Dj\nkh1O4g/+ONbLbdub0JQ82ayl0WS2ziaOHmxzW3Mz4FqtGrW5mprmHM/8iBYFAEAM\nxYjo1PKTtlf62QPbRzWOkTn3Vsw8lUAewZXlk07gs6j7RJycCrRErs/XabxhbLWb\n6bsnxKINxBU+ppWTgiDs6iW/fbqOVwzyu3fKnWEzB0Q3saHrHkwClBKR4eT8WF4r\n1Q/oqNJfePFTCJ+pDU3XXD7M3pBuEwbS5WHoECbvGEoonsF1jGQ6USaBCJZtdk3c\nXy7CshDOS/7fyREhsFRL1tiMhdppw1O27mQoBVisKX9dYYT264KUKlEYdAk/SxRv\nHHuJc95BFYJ6r7etq431ln0OirN37Ji+6wtsVFxziKydmXJZAFBUbBEqaXNd5QUC\n5mxIdptfghzhbDRdX20aPNqsDZv5jrACmbZohLDMKyJNxs47DXT0gKT02ysvTAUt\nU5uauHSlIG/b3By0af4XhjBAgc/PZ+aFGVE9FE42gtNqBZSEAxLyIjSoUnKVCSki\nPv+Cqqk1ZzqyFQQPrrmHIB8dsO5qvm6n5GSJXLxVYCUu0VpbuQKb5RFbktIRM36K\nFFDlUPan3drN/jNdAp4K467mTKZ+s6FyoeHIRjOuBQaDY6+TuEIFHy6squpgIafW\nNk4qJbuMFn8Aq+gzl9JSUNRRWu7qb3Y2278Jl7yQmtrfMH7aK/w=\n=5L6y\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIE25Lf3p8/gjCEvDFUkB0f9VZB+YhF1bSK6Y38NCaXQFCP/wEB0q9WA2JPMn\nhGfYaDN5xuwI8SANEDfRqLfgE/WB62aSjBz65k45nJpcJocMNqnKAthLqQjxBF+r\n+4DwCCIXGGtoUcseAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BBuDN6Q7Rhq+fobxl8DBDXRCPEEX6v7gfAI\nOqvXikw2ObIAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BBxr/lqUn0E5T9/KNqY5j/pCPEgUhquj1EN+2AywKC+\nMH2hy0xFzJB3tG1vivHvAKlqBKcI8QRfq/uA8Aj5WrK0X5OnKQCD3+MNLvkMjiMi\naHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbfAQ6VLn0zxsbQmiX2xg\nQk6o+gjxIIYYMQ5eHI51ObfTNP1/GEFawBTDUm01bc10DG7UFEWECPEEX6v7g/AI\nJePGtP/+YpAAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1d662469632dc37850ff4b5bd9a9e04566f8e78a\nparent e21212f01b7c41eba13b0479b252053cf482bc1f\nauthor Jon Atack <jon@atack.com> 1604491997 +0100\ncommitter Jon Atack <jon@atack.com> 1605106559 +0100\n\nwallet: introduce fee_rate (sat/vB) param/option\n\nCreate a fee_rate (sat/vB) RPC param and replace overloading the conf_target and\nestimate_mode params in the following 6 RPCs with it:\n\n- sendtoaddress\n- sendmany\n- send\n- fundrawtransaction\n- walletcreatefundedpsbt\n- bumpfee\n\nIn RPC bumpfee, the previously existing fee_rate remains but the unit is changed\nfrom BTC/kvB to sat/vB. This is a breaking change, but it should not be an\noverly risky one, as the units change by a factor of 1e5 and any fees specified\nin BTC/kvB after this commit will either be too low and raise an error or be 1\nsat/vB and can be RBFed.\n\nUpdate the test coverage for each RPC.\n\nCo-authored-by: Murch <murch@murch.one>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d495747320c79b27a83c216dcc526ac8df8f24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d495747320c79b27a83c216dcc526ac8df8f24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d495747320c79b27a83c216dcc526ac8df8f24/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e21212f01b7c41eba13b0479b252053cf482bc1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e21212f01b7c41eba13b0479b252053cf482bc1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e21212f01b7c41eba13b0479b252053cf482bc1f"
      }
    ],
    "stats": {
      "total": 708,
      "additions": 359,
      "deletions": 349
    },
    "files": [
      {
        "sha": "042005b9a6aea78ada48d30567ac50b013bf131d",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -41,7 +41,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendtoaddress\", 5 , \"replaceable\" },\n     { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"sendtoaddress\", 8, \"avoid_reuse\" },\n-    { \"sendtoaddress\", 9, \"verbose\"},\n+    { \"sendtoaddress\", 9, \"fee_rate\"},\n+    { \"sendtoaddress\", 10, \"verbose\"},\n     { \"settxfee\", 0, \"amount\" },\n     { \"sethdseed\", 0, \"newkeypool\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n@@ -73,7 +74,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n-    { \"sendmany\", 8, \"verbose\" },\n+    { \"sendmany\", 8, \"fee_rate\"},\n+    { \"sendmany\", 9, \"verbose\" },\n     { \"deriveaddresses\", 1, \"range\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n@@ -129,7 +131,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 1, \"transactions\" },\n     { \"send\", 0, \"outputs\" },\n     { \"send\", 1, \"conf_target\" },\n-    { \"send\", 3, \"options\" },\n+    { \"send\", 3, \"fee_rate\"},\n+    { \"send\", 4, \"options\" },\n     { \"importprivkey\", 2, \"rescan\" },\n     { \"importaddress\", 2, \"rescan\" },\n     { \"importaddress\", 3, \"p2sh\" },"
      },
      {
        "sha": "9a1cea1d4e42b468fca2792e3d2829bccb166c4c",
        "filename": "src/util/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/src/util/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/src/util/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.cpp?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -40,8 +40,6 @@ const std::vector<std::pair<std::string, FeeEstimateMode>>& FeeModeMap()\n         {\"unset\", FeeEstimateMode::UNSET},\n         {\"economical\", FeeEstimateMode::ECONOMICAL},\n         {\"conservative\", FeeEstimateMode::CONSERVATIVE},\n-        {(CURRENCY_UNIT + \"/kB\"), FeeEstimateMode::BTC_KB},\n-        {(CURRENCY_ATOM + \"/B\"), FeeEstimateMode::SAT_B},\n     };\n     return FEE_MODES;\n }"
      },
      {
        "sha": "238d37ae986345adafd3c2682dce3f047a3196aa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 49,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -198,30 +198,33 @@ static std::string LabelFromValue(const UniValue& value)\n  *\n  * @param[in]     pwallet        Wallet pointer\n  * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     estimate_mode  String value (e.g. \"ECONOMICAL\")\n- * @param[in]     estimate_param Parameter (blocks to confirm, explicit fee rate, etc)\n- * @throws a JSONRPCError if estimate_mode is unknown, or if estimate_param is missing when required\n+ * @param[in]     conf_target    UniValue integer, confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\n+ *                                   if a fee_rate is present, 0 is allowed here as a no-op positional placeholder\n+ * @param[in]     estimate_mode  UniValue string, fee estimation mode, valid values are \"unset\", \"economical\" or \"conservative\";\n+ *                                   if a fee_rate is present, \"\" is allowed here as a no-op positional placeholder\n+ * @param[in]     fee_rate       UniValue real, fee rate in sat/vB;\n+ *                                   if a fee_rate is present, both conf_target and estimate_mode must either be null, or no-op values\n+ * @throws a JSONRPCError if conf_target, estimate_mode, or fee_rate contain invalid values or are in conflict\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& estimate_mode, const UniValue& estimate_param)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate)\n {\n-    if (!estimate_mode.isNull()) {\n-        if (!FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+    if (!fee_rate.isNull()) {\n+        if (!conf_target.isNull() && conf_target.get_int() > 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n         }\n-    }\n-\n-    if (cc.m_fee_mode == FeeEstimateMode::BTC_KB || cc.m_fee_mode == FeeEstimateMode::SAT_B) {\n-        if (estimate_param.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Selected estimate_mode %s requires a fee rate to be specified in conf_target\", estimate_mode.get_str()));\n+        if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n-\n-        CAmount feerate{AmountFromValue(estimate_param)};\n-        cc.m_feerate = cc.m_fee_mode == FeeEstimateMode::SAT_B ? CFeeRate(feerate, COIN) : CFeeRate(feerate);\n-\n-        // default RBF to true for explicit fee rate modes\n+        cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n+        // Default RBF to true for explicit fee_rate, if unset.\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n-    } else if (!estimate_param.isNull()) {\n-        cc.m_confirm_target = ParseConfirmTarget(estimate_param, pwallet->chain().estimateMaxBlocks());\n+        return;\n+    }\n+    if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+    }\n+    if (!conf_target.isNull()) {\n+        cc.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());\n     }\n }\n \n@@ -440,6 +443,7 @@ static RPCHelpMan sendtoaddress()\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n                                          \"dirty if they have previously been used in a transaction.\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra information about the transaction.\"},\n                 },\n                 {\n@@ -495,7 +499,7 @@ static RPCHelpMan sendtoaddress()\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n-    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n+    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[9]);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -509,7 +513,7 @@ static RPCHelpMan sendtoaddress()\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(address_amounts, subtractFeeFromAmount, recipients);\n-    bool verbose = request.params[9].isNull() ? false: request.params[9].get_bool();\n+    const bool verbose{request.params[10].isNull() ? false : request.params[10].get_bool()};\n \n     return SendMoney(pwallet, coin_control, recipients, mapValue, verbose);\n },\n@@ -867,6 +871,7 @@ static RPCHelpMan sendmany()\n                                        \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, return extra infomration about the transaction.\"},\n                 },\n                 {\n@@ -923,11 +928,11 @@ static RPCHelpMan sendmany()\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n-    SetFeeEstimateMode(pwallet, coin_control, request.params[7], request.params[6]);\n+    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[8]);\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n-    bool verbose = request.params[8].isNull() ? false : request.params[8].get_bool();\n+    const bool verbose{request.params[9].isNull() ? false : request.params[9].get_bool()};\n \n     return SendMoney(pwallet, coin_control, recipients, std::move(mapValue), verbose);\n },\n@@ -3073,7 +3078,8 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n                 {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n                 {\"locktime\", UniValueType(UniValue::VNUM)},\n-                {\"feeRate\", UniValueType()}, // will be checked below\n+                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                {\"feeRate\", UniValueType()}, // will be checked by AmountFromValue() below\n                 {\"psbt\", UniValueType(UniValue::VBOOL)},\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n@@ -3120,15 +3126,21 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n         }\n \n-        if (options.exists(\"feeRate\"))\n-        {\n+        if (options.exists(\"feeRate\")) {\n+            if (options.exists(\"fee_rate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both fee_rate (\" + CURRENCY_ATOM + \"/vB) and feeRate (\" + CURRENCY_UNIT + \"/kvB)\");\n+            }\n             if (options.exists(\"conf_target\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n             }\n             if (options.exists(\"estimate_mode\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n             }\n-            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            CFeeRate fee_rate(AmountFromValue(options[\"feeRate\"]));\n+            if (fee_rate <= CFeeRate(0)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid feeRate %s (must be greater than 0)\", fee_rate.ToString()));\n+            }\n+            coinControl.m_feerate = fee_rate;\n             coinControl.fOverrideFeeRate = true;\n         }\n \n@@ -3138,7 +3150,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coinControl, options[\"estimate_mode\"], options[\"conf_target\"]);\n+        SetFeeEstimateMode(pwallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"]);\n       }\n     } else {\n         // if options is null and not a bool\n@@ -3195,7 +3207,8 @@ static RPCHelpMan fundrawtransaction()\n                                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kB.\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The integers.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n@@ -3372,12 +3385,13 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n         + std::string(want_psbt ? \"Returns a PSBT instead of creating and signing a new transaction.\\n\" : \"\") +\n         \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n-        \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n+        \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary.\\n\"\n+        \"It may add a new change output if one does not already exist.\\n\"\n         \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n         \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n         \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n         \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-        \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n+        \"Alternatively, the user can specify a fee_rate (in \" + CURRENCY_ATOM + \"/vB) for the new transaction.\\n\"\n         \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n         \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n         {\n@@ -3386,16 +3400,16 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n                              \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n-                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \"/kB.\\n\"\n-                             \"Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \"/kB higher than the current transaction fee rate.\\n\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n+                             \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n+                             \"Must be at least 1 \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n                              \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n                              \"be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n                              \"original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n                              \"so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n                              \"still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n-                             \"are replaceable).\"},\n+                             \"are replaceable).\\n\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n     \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                 },\n@@ -3448,7 +3462,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n                 {\"conf_target\", UniValueType(UniValue::VNUM)},\n-                {\"fee_rate\", UniValueType(UniValue::VNUM)},\n+                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n@@ -3475,7 +3489,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coin_control, options[\"estimate_mode\"], conf_target);\n+        SetFeeEstimateMode(pwallet, coin_control, conf_target, options[\"estimate_mode\"], options[\"fee_rate\"]);\n     }\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -4015,6 +4029,7 @@ static RPCHelpMan send()\n                     \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n                     {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n@@ -4026,6 +4041,7 @@ static RPCHelpMan send()\n                             \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n                     {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n                                           \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n@@ -4070,29 +4086,40 @@ static RPCHelpMan send()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n         {\n             RPCTypeCheck(request.params, {\n-                UniValueType(), // ARR or OBJ, checked later\n-                UniValue::VNUM,\n-                UniValue::VSTR,\n-                UniValue::VOBJ\n+                UniValueType(), // outputs (ARR or OBJ, checked later)\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValue::VNUM, // fee_rate\n+                UniValue::VOBJ, // options\n                 }, true\n             );\n \n             std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n             if (!wallet) return NullUniValue;\n             CWallet* const pwallet = wallet.get();\n \n-            UniValue options{request.params[3].isNull() ? UniValue::VOBJ : request.params[3]};\n-            if (options.exists(\"feeRate\") || options.exists(\"fee_rate\") || options.exists(\"estimate_mode\") || options.exists(\"conf_target\")) {\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n                 if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\");\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n                 }\n             } else {\n                 options.pushKV(\"conf_target\", request.params[1]);\n                 options.pushKV(\"estimate_mode\", request.params[2]);\n             }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n             if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n             }\n+            if (options.exists(\"feeRate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n+            }\n             if (options.exists(\"changeAddress\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n             }\n@@ -4350,7 +4377,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                             {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kB.\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The outputs to subtract the fee from.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n@@ -4544,9 +4572,9 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n-    { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"options\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"verbose\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\",\"verbose\"} },\n+    { \"wallet\",             \"send\",                             &send,                          {\"outputs\",\"conf_target\",\"estimate_mode\",\"fee_rate\",\"options\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"fee_rate\",\"verbose\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\",\"fee_rate\",\"verbose\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n     { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },"
      },
      {
        "sha": "8a222348370036178a703e35518820aff20f3232",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 86,
        "deletions": 52,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -90,7 +90,6 @@ def run_test(self):\n         self.test_op_return()\n         self.test_watchonly()\n         self.test_all_watched_funds()\n-        self.test_feerate_with_conf_target_and_estimate_mode()\n         self.test_option_feerate()\n         self.test_address_reuse()\n         self.test_option_subtract_fee_from_outputs()\n@@ -708,74 +707,89 @@ def test_all_watched_funds(self):\n         wwatch.unloadwallet()\n \n     def test_option_feerate(self):\n-        self.log.info(\"Test fundrawtxn feeRate option\")\n-\n-        # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(self.nodes[3].listunspent(1)), 1)\n-\n-        inputs = []\n-        outputs = {self.nodes[3].getnewaddress() : 1}\n-        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n-        result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n-        result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n-        assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n-        assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n-\n-    def test_feerate_with_conf_target_and_estimate_mode(self):\n-        self.log.info(\"Test fundrawtxn passing an explicit fee rate using conf_target and estimate_mode\")\n+        self.log.info(\"Test fundrawtxn with explicit fee rates (fee_rate sat/vB and feeRate BTC/kvB)\")\n         node = self.nodes[3]\n         # Make sure there is exactly one input so coin selection can't skew the result.\n-        assert_equal(len(node.listunspent(1)), 1)\n+        assert_equal(len(self.nodes[3].listunspent(1)), 1)\n         inputs = []\n         outputs = {node.getnewaddress() : 1}\n         rawtx = node.createrawtransaction(inputs, outputs)\n \n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            self.log.info(\"Test fundrawtxn with conf_target {} estimate_mode {} produces expected fee\".format(fee_rate, unit))\n-            # With no arguments passed, expect fee of 141 sats/b.\n-            assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n-            # Expect fee to be 10,000x higher when explicit fee 10,000x greater is specified.\n-            result = node.fundrawtransaction(rawtx, {\"conf_target\": fee_rate, \"estimate_mode\": unit})\n-            assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n+        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n+        btc_kvb_to_sat_vb = 100000  # (1e5)\n+        result1 = node.fundrawtransaction(rawtx, {\"fee_rate\": 2 * btc_kvb_to_sat_vb * self.min_relay_tx_fee})\n+        result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n+        result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 10 * btc_kvb_to_sat_vb * self.min_relay_tx_fee})\n+        result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n+        result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n+        assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n+        assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n+        assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"Test fundrawtxn raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(\n-                -8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: node.fundrawtransaction(rawtx, {\"feeRate\": 0.1, field: fee_rate}))\n+        # With no arguments passed, expect fee of 141 satoshis.\n+        assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n+        # Expect fee to be 10,000x higher when an explicit fee rate 10,000x greater is specified.\n+        result = node.fundrawtransaction(rawtx, {\"fee_rate\": 10000})\n+        assert_approx(result[\"fee\"], vexp=0.0141, vspan=0.0001)\n \n         self.log.info(\"Test fundrawtxn with invalid estimate_mode settings\")\n         for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1}))\n-        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+                node.fundrawtransaction, rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True})\n+        for mode in [\"\", \"foo\", Decimal(\"3.141592\")]:\n             assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1}))\n+                node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True})\n \n         self.log.info(\"Test fundrawtxn with invalid conf_target settings\")\n-        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        for mode in [\"unset\", \"economical\", \"conservative\"]:\n             self.log.debug(\"{}\".format(mode))\n             for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n                 assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": v}))\n-            if mode in [\"btc/kb\", \"sat/b\"]:\n-                assert_raises_rpc_error(-3, \"Amount out of range\",\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": -1}))\n-                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                    lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": 0}))\n-            else:\n-                for n in [-1, 0, 1009]:\n-                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n-                        lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": mode, \"conf_target\": n}))\n-\n-        for unit, fee_rate in {\"sat/B\": 0.99999999, \"BTC/kB\": 0.00000999}.items():\n-            self.log.info(\"- raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n-            assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                lambda: self.nodes[1].fundrawtransaction(rawtx, {\"estimate_mode\": unit, \"conf_target\": fee_rate, \"add_inputs\": True}))\n-\n+                    node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": v, \"add_inputs\": True})\n+            for n in [-1, 0, 1009]:\n+                assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",  # max value of 1008 per src/policy/fees.h\n+                    node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True})\n+\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            node.fundrawtransaction, rawtx, {\"fee_rate\": 0, \"add_inputs\": True})\n+        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kB (must be greater than 0)\",\n+            node.fundrawtransaction, rawtx, {\"feeRate\": 0, \"add_inputs\": True})\n+        for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1.000)}:\n+            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n+                node.fundrawtransaction, rawtx, {param: value, \"add_inputs\": True})\n+            assert_raises_rpc_error(-3, \"Amount out of range\",\n+                node.fundrawtransaction, rawtx, {\"fee_rate\": -1, \"add_inputs\": True})\n+            assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n+                node.fundrawtransaction, rawtx, {\"fee_rate\": {\"foo\": \"bar\"}, \"add_inputs\": True})\n+            assert_raises_rpc_error(-3, \"Invalid amount\",\n+                node.fundrawtransaction, rawtx, {\"fee_rate\": \"\", \"add_inputs\": True})\n+\n+        # Test setting explicit fee rate just below the minimum.\n+        self.log.info(\"- raises RPC error 'fee rate too low' if fee_rate of 0.99999999 sat/vB is passed\")\n+        msg = \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"\n+        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n+        # This feeRate test only passes if `coinControl.fOverrideFeeRate = true` in wallet/rpcwallet.cpp::FundTransaction is removed.\n+        # assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 0.00000999, \"add_inputs\": True})\n+\n+        self.log.info(\"- raises RPC error if both feeRate and fee_rate are passed\")\n+        assert_raises_rpc_error(-8, \"Cannot specify both fee_rate (sat/vB) and feeRate (BTC/kvB)\",\n+            node.fundrawtransaction, rawtx, {\"fee_rate\": 0.1, \"feeRate\": 0.1, \"add_inputs\": True})\n+\n+        self.log.info(\"- raises RPC error if both feeRate and estimate_mode passed\")\n+        assert_raises_rpc_error(-8, \"Cannot specify both estimate_mode and feeRate\",\n+            node.fundrawtransaction, rawtx, {\"estimate_mode\": \"economical\", \"feeRate\": 0.1, \"add_inputs\": True})\n+\n+        for param in [\"feeRate\", \"fee_rate\"]:\n+            self.log.info(\"- raises RPC error if both {} and conf_target are passed\".format(param))\n+            assert_raises_rpc_error(-8, \"Cannot specify both conf_target and {}. Please provide either a confirmation \"\n+                \"target in blocks for automatic fee estimation, or an explicit fee rate.\".format(param),\n+                node.fundrawtransaction, rawtx, {param: 1, \"conf_target\": 1, \"add_inputs\": True})\n+\n+        self.log.info(\"- raises RPC error if both fee_rate and estimate_mode are passed\")\n+        assert_raises_rpc_error(-8, \"Cannot specify both estimate_mode and fee_rate\",\n+            node.fundrawtransaction, rawtx, {\"fee_rate\": 1, \"estimate_mode\": \"economical\", \"add_inputs\": True})\n \n     def test_address_reuse(self):\n         \"\"\"Test no address reuse occurs.\"\"\"\n@@ -803,12 +817,32 @@ def test_option_subtract_fee_from_outputs(self):\n         outputs = {self.nodes[2].getnewaddress(): 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n \n+        # Test subtract fee from outputs with feeRate (BTC/kvB)\n         result = [self.nodes[3].fundrawtransaction(rawtx),  # uses self.min_relay_tx_fee (set by settxfee)\n             self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": []}),  # empty subtraction list\n             self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": [0]}),  # uses self.min_relay_tx_fee (set by settxfee)\n             self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee}),\n             self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]}),]\n+        dec_tx = [self.nodes[3].decoderawtransaction(tx_['hex']) for tx_ in result]\n+        output = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n+        change = [d['vout'][r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n+\n+        assert_equal(result[0]['fee'], result[1]['fee'], result[2]['fee'])\n+        assert_equal(result[3]['fee'], result[4]['fee'])\n+        assert_equal(change[0], change[1])\n+        assert_equal(output[0], output[1])\n+        assert_equal(output[0], output[2] + result[2]['fee'])\n+        assert_equal(change[0] + result[0]['fee'], change[2])\n+        assert_equal(output[3], output[4] + result[4]['fee'])\n+        assert_equal(change[3] + result[3]['fee'], change[4])\n \n+        # Test subtract fee from outputs with fee_rate (sat/vB)\n+        btc_kvb_to_sat_vb = 100000  # (1e5)\n+        result = [self.nodes[3].fundrawtransaction(rawtx),  # uses self.min_relay_tx_fee (set by settxfee)\n+            self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": []}),  # empty subtraction list\n+            self.nodes[3].fundrawtransaction(rawtx, {\"subtractFeeFromOutputs\": [0]}),  # uses self.min_relay_tx_fee (set by settxfee)\n+            self.nodes[3].fundrawtransaction(rawtx, {\"fee_rate\": 2 * btc_kvb_to_sat_vb * self.min_relay_tx_fee}),\n+            self.nodes[3].fundrawtransaction(rawtx, {\"fee_rate\": 2 * btc_kvb_to_sat_vb * self.min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]}),]\n         dec_tx = [self.nodes[3].decoderawtransaction(tx_['hex']) for tx_ in result]\n         output = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n         change = [d['vout'][r['changepos']]['value'] for d, r in zip(dec_tx, result)]"
      },
      {
        "sha": "9adbce1436bd57d254b6265be7585054975aca59",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 56,
        "deletions": 42,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -187,60 +187,74 @@ def run_test(self):\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n-        self.log.info(\"Test walletcreatefundedpsbt feeRate of 0.1 BTC/kB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n-        res = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n-        assert_approx(res[\"fee\"], 0.055, 0.005)\n-\n-        self.log.info(\"Test walletcreatefundedpsbt explicit fee rate with conf_target and estimate_mode\")\n-        for unit, fee_rate in {\"btc/kb\": 0.1, \"sat/b\": 10000}.items():\n-            fee = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"conf_target\": fee_rate, \"estimate_mode\": unit, \"add_inputs\": True})[\"fee\"]\n-            self.log.info(\"- conf_target {}, estimate_mode {} produces fee {} at or slightly below -maxtxfee (~0.05290000)\".format(fee_rate, unit, fee))\n-            assert_approx(fee, vexp=0.055, vspan=0.005)\n-\n-        for field, fee_rate in {\"conf_target\": 0.1, \"estimate_mode\": \"sat/b\"}.items():\n-            self.log.info(\"- raises RPC error if both feeRate and {} are passed\".format(field))\n-            assert_raises_rpc_error(-8, \"Cannot specify both {} and feeRate\".format(field),\n-                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, field: fee_rate, \"add_inputs\": True}))\n+        self.log.info(\"Test walletcreatefundedpsbt fee rate of 10000 sat/vB and 0.1 BTC/kvB produces a total fee at or slightly below -maxtxfee (~0.05290000)\")\n+        res1 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"fee_rate\": 10000, \"add_inputs\": True})\n+        assert_approx(res1[\"fee\"], 0.055, 0.005)\n+        res2 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n+        assert_approx(res2[\"fee\"], 0.055, 0.005)\n+\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0, \"add_inputs\": True})\n+        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kB (must be greater than 0)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"feeRate\": 0, \"add_inputs\": True})\n+        for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1)}:\n+            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: value, \"add_inputs\": True})\n+            assert_raises_rpc_error(-3, \"Amount out of range\",\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": -1, \"add_inputs\": True})\n+            assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": {\"foo\": \"bar\"}, \"add_inputs\": True})\n+            assert_raises_rpc_error(-3, \"Invalid amount\",\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": \"\", \"add_inputs\": True})\n+\n+        self.log.info(\"- raises RPC error if both feeRate and fee_rate are passed\")\n+        assert_raises_rpc_error(-8, \"Cannot specify both fee_rate (sat/vB) and feeRate (BTC/kvB)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0.1, \"feeRate\": 0.1, \"add_inputs\": True})\n+\n+        self.log.info(\"- raises RPC error if both feeRate and estimate_mode passed\")\n+        assert_raises_rpc_error(-8, \"Cannot specify both estimate_mode and feeRate\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": \"economical\", \"feeRate\": 0.1, \"add_inputs\": True})\n+\n+        for param in [\"feeRate\", \"fee_rate\"]:\n+            self.log.info(\"- raises RPC error if both {} and conf_target are passed\".format(param))\n+            assert_raises_rpc_error(-8, \"Cannot specify both conf_target and {}. Please provide either a confirmation \"\n+                \"target in blocks for automatic fee estimation, or an explicit fee rate.\".format(param),\n+                self.nodes[1].walletcreatefundedpsbt ,inputs, outputs, 0, {param: 1, \"conf_target\": 1, \"add_inputs\": True})\n+\n+        self.log.info(\"- raises RPC error if both fee_rate and estimate_mode are passed\")\n+        assert_raises_rpc_error(-8, \"Cannot specify both estimate_mode and fee_rate\",\n+            self.nodes[1].walletcreatefundedpsbt ,inputs, outputs, 0, {\"fee_rate\": 1, \"estimate_mode\": \"economical\", \"add_inputs\": True})\n \n         self.log.info(\"- raises RPC error with invalid estimate_mode settings\")\n         for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n-                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True}))\n-        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True})\n+        for mode in [\"\", \"foo\", Decimal(\"3.141592\")]:\n             assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n-                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True}))\n-\n-        self.log.info(\"- raises RPC error if estimate_mode is passed without a conf_target\")\n-        for unit in [\"SAT/B\", \"BTC/KB\"]:\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n-                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": unit}))\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True})\n \n         self.log.info(\"- raises RPC error with invalid conf_target settings\")\n-        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        for mode in [\"unset\", \"economical\", \"conservative\"]:\n             self.log.debug(\"{}\".format(mode))\n             for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n                 assert_raises_rpc_error(-3, \"Expected type number for conf_target, got {}\".format(k),\n-                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": v, \"add_inputs\": True}))\n-            if mode in [\"btc/kb\", \"sat/b\"]:\n-                assert_raises_rpc_error(-3, \"Amount out of range\",\n-                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": -1, \"add_inputs\": True}))\n-                assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                    lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": 0, \"add_inputs\": True}))\n-            else:\n-                for n in [-1, 0, 1009]:\n-                    assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",\n-                        lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True}))\n-\n-        for unit, fee_rate in {\"SAT/B\": 0.99999999, \"BTC/KB\": 0.00000999}.items():\n-            self.log.info(\"- raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n-            assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                lambda: self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"estimate_mode\": unit, \"conf_target\": fee_rate, \"add_inputs\": True}))\n-\n-        self.log.info(\"Test walletcreatefundedpsbt feeRate of 10 BTC/kB produces total fee well above -maxtxfee and raises RPC error\")\n+                    self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": v, \"add_inputs\": True})\n+            for n in [-1, 0, 1009]:\n+                assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",  # max value of 1008 per src/policy/fees.h\n+                    self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True})\n+\n+        # Test setting explicit fee rate just below the minimum.\n+        self.log.info(\"- raises RPC error 'fee rate too low' if feerate_sat_vb of 0.99999999 is passed\")\n+        assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n+\n+        self.log.info(\"Test walletcreatefundedpsbt with too-high fee rate produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n         for bool_add, outputs_array in {True: outputs, False: [{self.nodes[1].getnewaddress(): 1}]}.items():\n-            assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n-                self.nodes[1].walletcreatefundedpsbt, inputs, outputs_array, 0, {\"feeRate\": 10, \"add_inputs\": bool_add})\n+            msg = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"\n+            assert_raises_rpc_error(-4, msg, self.nodes[1].walletcreatefundedpsbt, inputs, outputs_array, 0, {\"fee_rate\": 1000000, \"add_inputs\": bool_add})\n+            assert_raises_rpc_error(-4, msg, self.nodes[1].walletcreatefundedpsbt, inputs, outputs_array, 0, {\"feeRate\": 1, \"add_inputs\": bool_add})\n \n         self.log.info(\"Test various PSBT operations\")\n         # partially sign multisig things with node 1"
      },
      {
        "sha": "7b4d45950365e3bd2700c9e0af3dad51fbd6097b",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 61,
        "deletions": 117,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet.\"\"\"\n from decimal import Decimal\n+from itertools import product\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -14,6 +15,8 @@\n )\n from test_framework.wallet_util import test_address\n \n+OUT_OF_RANGE = \"Amount out of range\"\n+\n \n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -74,7 +77,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listunspent()), 1)\n         assert_equal(len(self.nodes[2].listunspent()), 0)\n \n-        self.log.info(\"test gettxout\")\n+        self.log.info(\"Test gettxout\")\n         confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n         # First, outputs that are unspent both in the chain and in the\n         # mempool should appear with or without include_mempool\n@@ -87,7 +90,7 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         mempool_txid = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n \n-        self.log.info(\"test gettxout (second part)\")\n+        self.log.info(\"Test gettxout (second part)\")\n         # utxo spent in mempool should be visible if you exclude mempool\n         # but invisible if you include mempool\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False)\n@@ -227,65 +230,41 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as BTC/kB)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode bTc/kB requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='bTc/kB')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='bTc/kB')\n-        fee_per_kb = 0.0002500\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_per_kb,\n-            estimate_mode='bTc/kB',\n-        )\n-        self.nodes[2].generate(1)\n-        self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n-        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal += Decimal('10')\n-        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n+        self.log.info(\"Test sendmany with fee_rate param (explicit fee rate in sat/vB)\")\n+        fee_rate_sat_vb = 2\n+        fee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\n+        explicit_fee_rate_btc_kvb = Decimal(fee_rate_btc_kvb) / 1000\n \n-        self.log.info(\"Test case-insensitive explicit fee rate (sendmany as sat/B)\")\n-        # Throw if no conf_target provided\n-        assert_raises_rpc_error(-8, \"Selected estimate_mode sat/b requires a fee rate to be specified in conf_target\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            estimate_mode='sat/b')\n-        # Throw if negative feerate\n-        assert_raises_rpc_error(-3, \"Amount out of range\",\n-            self.nodes[2].sendmany,\n-            amounts={ address: 10 },\n-            conf_target=-1,\n-            estimate_mode='sat/b')\n-        fee_sat_per_b = 2\n-        fee_per_kb = fee_sat_per_b / 100000.0\n-        explicit_fee_per_byte = Decimal(fee_per_kb) / 1000\n-        txid = self.nodes[2].sendmany(\n-            amounts={ address: 10 },\n-            conf_target=fee_sat_per_b,\n-            estimate_mode='sAT/b',\n-        )\n+        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n+        txid = self.nodes[2].sendmany(amounts={address: 10}, conf_target=0, estimate_mode=\"\", fee_rate=fee_rate_sat_vb)\n         self.nodes[2].generate(1)\n         self.sync_all(self.nodes[0:3])\n         balance = self.nodes[2].getbalance()\n-        node_2_bal = self.check_fee_amount(balance, node_2_bal - Decimal('10'), explicit_fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n+        node_2_bal = self.check_fee_amount(balance, node_2_bal - Decimal('10'), explicit_fee_rate_btc_kvb, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(balance, node_2_bal)\n         node_0_bal += Decimal('10')\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n+        for key in [\"totalFee\", \"feeRate\"]:\n+            assert_raises_rpc_error(-8, \"Unknown named parameter key\", self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=1, key=1)\n+\n         # Test setting explicit fee rate just below the minimum.\n-        for unit, fee_rate in {\"BTC/kB\": 0.00000999, \"sat/B\": 0.99999999}.items():\n-            self.log.info(\"Test sendmany raises 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n-            assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                self.nodes[2].sendmany, amounts={address: 10}, estimate_mode=unit, conf_target=fee_rate)\n+        self.log.info(\"Test sendmany raises 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n+        assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            self.nodes[2].sendmany, amounts={address: 10}, fee_rate=0.99999999)\n+\n+        self.log.info(\"Test sendmany raises if fee_rate of 0 or -1 is passed\")\n+        assert_raises_rpc_error(-6, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            self.nodes[2].sendmany, amounts={address: 10}, fee_rate=0)\n+        assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=-1)\n+\n+        self.log.info(\"Test sendmany raises if an invalid conf_target or estimate_mode is passed\")\n+        for target, mode in product([-1, 0, 1009], [\"economical\", \"conservative\"]):\n+            assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",  # max value of 1008 per src/policy/fees.h\n+                self.nodes[2].sendmany, amounts={address: 1}, conf_target=target, estimate_mode=mode)\n+        for target, mode in product([-1, 0], [\"btc/kb\", \"sat/b\"]):\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                self.nodes[2].sendmany, amounts={address: 1}, conf_target=target, estimate_mode=mode)\n \n         self.start_node(3, self.nodes[3].extra_args)\n         self.connect_nodes(0, 3)\n@@ -318,7 +297,7 @@ def run_test(self):\n                 assert_equal(uTx['amount'], Decimal('0'))\n         assert found\n \n-        # do some -walletbroadcast tests\n+        self.log.info(\"Test -walletbroadcast\")\n         self.stop_nodes()\n         self.start_node(0, [\"-walletbroadcast=0\"])\n         self.start_node(1, [\"-walletbroadcast=0\"])\n@@ -378,7 +357,7 @@ def run_test(self):\n \n         # General checks for errors from incorrect inputs\n         # This will raise an exception because the amount is negative\n-        assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"-1\")\n+        assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"-1\")\n \n         # This will raise an exception because the amount type is wrong\n         assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n@@ -420,78 +399,43 @@ def run_test(self):\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n \n-            self.log.info(\"Test case-insensitive explicit fee rate (sendtoaddress as BTC/kB)\")\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n+            self.log.info(\"Test sendtoaddress with fee_rate param (explicit fee rate in sat/vB)\")\n             prebalance = self.nodes[2].getbalance()\n             assert prebalance > 2\n             address = self.nodes[1].getnewaddress()\n-            # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode BTc/Kb requires a fee rate to be specified in conf_target\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                estimate_mode='BTc/Kb')\n-            # Throw if negative feerate\n-            assert_raises_rpc_error(-3, \"Amount out of range\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                conf_target=-1,\n-                estimate_mode='btc/kb')\n-            txid = self.nodes[2].sendtoaddress(\n-                address=address,\n-                amount=1.0,\n-                conf_target=0.00002500,\n-                estimate_mode='btc/kb',\n-            )\n-            tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.sync_all(self.nodes[0:3])\n-            self.nodes[0].generate(1)\n-            self.sync_all(self.nodes[0:3])\n-            postbalance = self.nodes[2].getbalance()\n-            fee = prebalance - postbalance - Decimal('1')\n-            assert_fee_amount(fee, tx_size, Decimal('0.00002500'))\n-\n-            self.sync_all(self.nodes[0:3])\n+            amount = 3\n+            fee_rate_sat_vb = 2\n+            fee_rate_btc_kvb = fee_rate_sat_vb * 1e3 / 1e8\n \n-            self.log.info(\"Test case-insensitive explicit fee rate (sendtoaddress as sat/B)\")\n-            self.nodes[0].generate(1)\n-            prebalance = self.nodes[2].getbalance()\n-            assert prebalance > 2\n-            address = self.nodes[1].getnewaddress()\n-            # Throw if no conf_target provided\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode SAT/b requires a fee rate to be specified in conf_target\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                estimate_mode='SAT/b')\n-            # Throw if negative feerate\n-            assert_raises_rpc_error(-3, \"Amount out of range\",\n-                self.nodes[2].sendtoaddress,\n-                address=address,\n-                amount=1.0,\n-                conf_target=-1,\n-                estimate_mode='SAT/b')\n-            txid = self.nodes[2].sendtoaddress(\n-                address=address,\n-                amount=1.0,\n-                conf_target=2,\n-                estimate_mode='SAT/B',\n-            )\n+            # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n+            txid = self.nodes[2].sendtoaddress(address=address, amount=amount, conf_target=0, estimate_mode=\"\", fee_rate=fee_rate_sat_vb)\n             tx_size = self.get_vsize(self.nodes[2].gettransaction(txid)['hex'])\n-            self.sync_all(self.nodes[0:3])\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n             postbalance = self.nodes[2].getbalance()\n-            fee = prebalance - postbalance - Decimal('1')\n-            assert_fee_amount(fee, tx_size, Decimal('0.00002000'))\n+            fee = prebalance - postbalance - Decimal(amount)\n+            assert_fee_amount(fee, tx_size, Decimal(fee_rate_btc_kvb))\n+\n+            for key in [\"totalFee\", \"feeRate\"]:\n+                assert_raises_rpc_error(-8, \"Unknown named parameter key\", self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=1, key=1)\n \n             # Test setting explicit fee rate just below the minimum.\n-            for unit, fee_rate in {\"BTC/kB\": 0.00000999, \"sat/B\": 0.99999999}.items():\n-                self.log.info(\"Test sendtoaddress raises 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n-                assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n-                    self.nodes[2].sendtoaddress, address=address, amount=1, estimate_mode=unit, conf_target=fee_rate)\n+            self.log.info(\"Test sendtoaddress raises 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n+            assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=0.99999999)\n+\n+            self.log.info(\"Test sendtoaddress raises if fee_rate of 0 or -1 is passed\")\n+            assert_raises_rpc_error(-6, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+                self.nodes[2].sendtoaddress, address=address, amount=10, fee_rate=0)\n+            assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=-1)\n+\n+            self.log.info(\"Test sendtoaddress raises if an invalid conf_target or estimate_mode is passed\")\n+            for target, mode in product([-1, 0, 1009], [\"economical\", \"conservative\"]):\n+                assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",  # max value of 1008 per src/policy/fees.h\n+                    self.nodes[2].sendtoaddress, address=address, amount=1, conf_target=target, estimate_mode=mode)\n+            for target, mode in product([-1, 0], [\"btc/kb\", \"sat/b\"]):\n+                assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                    self.nodes[2].sendtoaddress, address=address, amount=1, conf_target=target, estimate_mode=mode)\n \n             # 2. Import address from node2 to node1\n             self.nodes[1].importaddress(address_to_import)\n@@ -549,7 +493,7 @@ def run_test(self):\n         ]\n         chainlimit = 6\n         for m in maintenance:\n-            self.log.info(\"check \" + m)\n+            self.log.info(\"Test \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n             self.start_node(0, [m, \"-limitancestorcount=\" + str(chainlimit)])"
      },
      {
        "sha": "5f76c7819876768782f9bcffa0292abad81e76e7",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 36,
        "deletions": 52,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -17,7 +17,7 @@\n import io\n \n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER, COIN, CTransaction\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -29,15 +29,13 @@\n WALLET_PASSPHRASE = \"test\"\n WALLET_PASSPHRASE_TIMEOUT = 3600\n \n-# Fee rates (in BTC per 1000 vbytes)\n-INSUFFICIENT = 0.00001000\n-ECONOMICAL   = 0.00050000\n-NORMAL       = 0.00100000\n-HIGH         = 0.00500000\n-TOO_HIGH     = 1.00000000\n+# Fee rates (sat/vB)\n+INSUFFICIENT =      1\n+ECONOMICAL   =     50\n+NORMAL       =    100\n+HIGH         =    500\n+TOO_HIGH     = 100000\n \n-BTC_MODE = \"BTC/kB\"\n-SAT_MODE = \"sat/B\"\n \n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -78,7 +76,7 @@ def run_test(self):\n \n         self.log.info(\"Running tests\")\n         dest_address = peer_node.getnewaddress()\n-        for mode in [\"default\", \"fee_rate\", BTC_MODE, SAT_MODE]:\n+        for mode in [\"default\", \"fee_rate\"]:\n             test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address)\n         self.test_invalid_parameters(rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(self, rbf_node, dest_address)\n@@ -105,50 +103,43 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n         self.sync_mempools((rbf_node, peer_node))\n         assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n-        assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+        for key in [\"totalFee\", \"feeRate\"]:\n+            assert_raises_rpc_error(-3, \"Unexpected key {}\".format(key), rbf_node.bumpfee, rbfid, {key: NORMAL})\n \n-        # For each fee mode, bumping to just above minrelay should fail to increase the total fee enough.\n-        for options in [{\"fee_rate\": INSUFFICIENT}, {\"conf_target\": INSUFFICIENT, \"estimate_mode\": BTC_MODE}, {\"conf_target\": 1, \"estimate_mode\": SAT_MODE}]:\n-            assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, options)\n+        # Bumping to just above minrelay should fail to increase the total fee enough.\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",\n+            rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n-        self.log.info(\"Test explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n-        for unit, fee_rate in {\"SAT/B\": 100, \"BTC/KB\": NORMAL}.items():\n-            assert_raises_rpc_error(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit),\n-                                    rbf_node.bumpfee, rbfid, {\"fee_rate\": fee_rate, \"estimate_mode\": unit})\n+        self.log.info(\"Test invalid fee rate settings\")\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+            rbf_node.bumpfee, rbfid, {\"fee_rate\": 0})\n+        assert_raises_rpc_error(-4, \"Specified or calculated fee 0.141 is too high (cannot be higher than -maxtxfee 0.10\",\n+            rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n+        assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n+        for value in [{\"foo\": \"bar\"}, True]:\n+            assert_raises_rpc_error(-3, \"Amount is not a number or string\", rbf_node.bumpfee, rbfid, {\"fee_rate\": value})\n+        assert_raises_rpc_error(-3, \"Invalid amount\", rbf_node.bumpfee, rbfid, {\"fee_rate\": \"\"})\n \n         self.log.info(\"Test explicit fee rate raises RPC error if both fee_rate and conf_target are passed\")\n-        error_both = \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \" \\\n-                     \"target in blocks for automatic fee estimation, or an explicit fee rate.\"\n-        assert_raises_rpc_error(-8, error_both, rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n+        assert_raises_rpc_error(-8, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation \"\n+            \"target in blocks for automatic fee estimation, or an explicit fee rate.\",\n+            rbf_node.bumpfee, rbfid, {\"conf_target\": NORMAL, \"fee_rate\": NORMAL})\n+\n+        self.log.info(\"Test explicit fee rate raises RPC error if both fee_rate and estimate_mode are passed\")\n+        assert_raises_rpc_error(-8, \"Cannot specify both estimate_mode and fee_rate\",\n+            rbf_node.bumpfee, rbfid, {\"estimate_mode\": \"economical\", \"fee_rate\": NORMAL})\n \n         self.log.info(\"Test invalid conf_target settings\")\n         assert_raises_rpc_error(-8, \"confTarget and conf_target options should not both be set\",\n-                                rbf_node.bumpfee, rbfid, {\"confTarget\": 123, \"conf_target\": 456})\n-        for field in [\"confTarget\", \"conf_target\"]:\n-            assert_raises_rpc_error(-4, \"is too high (cannot be higher than -maxtxfee\",\n-                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": BTC_MODE, \"conf_target\": 2009}))\n-            assert_raises_rpc_error(-4, \"is too high (cannot be higher than -maxtxfee\",\n-                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": SAT_MODE, \"conf_target\": 2009 * 10000}))\n+            rbf_node.bumpfee, rbfid, {\"confTarget\": 123, \"conf_target\": 456})\n \n         self.log.info(\"Test invalid estimate_mode settings\")\n         for k, v in {\"number\": 42, \"object\": {\"foo\": \"bar\"}}.items():\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n-                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": v, \"fee_rate\": NORMAL}))\n-        for mode in [\"foo\", Decimal(\"3.141592\")]:\n-            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n-                                    lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": NORMAL}))\n-\n-        self.log.info(\"Test invalid fee_rate settings\")\n-        for mode in [\"unset\", \"economical\", \"conservative\", BTC_MODE, SAT_MODE]:\n-            self.log.debug(\"{}\".format(mode))\n-            for k, v in {\"string\": \"\", \"object\": {\"foo\": \"bar\"}}.items():\n-                assert_raises_rpc_error(-3, \"Expected type number for fee_rate, got {}\".format(k),\n-                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": v}))\n-                assert_raises_rpc_error(-3, \"Amount out of range\",\n-                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": -1}))\n-                assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n-                                        lambda: rbf_node.bumpfee(rbfid, {\"estimate_mode\": mode, \"fee_rate\": 0}))\n+                rbf_node.bumpfee, rbfid, {\"estimate_mode\": v})\n+        for mode in [\"foo\", Decimal(\"3.1415\"), \"sat/B\", \"BTC/kB\"]:\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", rbf_node.bumpfee, rbfid, {\"estimate_mode\": mode})\n+\n         self.clear_mempool()\n \n \n@@ -161,13 +152,6 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     if mode == \"fee_rate\":\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": NORMAL})\n         bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL})\n-    elif mode == BTC_MODE:\n-        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"conf_target\": NORMAL, \"estimate_mode\": BTC_MODE})\n-        bumped_tx = rbf_node.bumpfee(rbfid, {\"conf_target\": NORMAL, \"estimate_mode\": BTC_MODE})\n-    elif mode == SAT_MODE:\n-        sat_fee = NORMAL * COIN / 1000  # convert NORMAL from BTC/kB to sat/B\n-        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"conf_target\": sat_fee, \"estimate_mode\": SAT_MODE})\n-        bumped_tx = rbf_node.bumpfee(rbfid, {\"conf_target\": sat_fee, \"estimate_mode\": SAT_MODE})\n     else:\n         bumped_psbt = rbf_node.psbtbumpfee(rbfid)\n         bumped_tx = rbf_node.bumpfee(rbfid)\n@@ -319,11 +303,11 @@ def test_dust_to_fee(self, rbf_node, dest_address):\n     # boundary. Thus expected transaction size (p2wpkh, 1 input, 2 outputs) is 140-141 vbytes, usually 141.\n     if not 140 <= fulltx[\"vsize\"] <= 141:\n         raise AssertionError(\"Invalid tx vsize of {} (140-141 expected), full tx: {}\".format(fulltx[\"vsize\"], fulltx))\n-    # Bump with fee_rate of 0.00350250 BTC per 1000 vbytes to create dust.\n+    # Bump with fee_rate of 350.25 sat/vB vbytes to create dust.\n     # Expected fee is 141 vbytes * fee_rate 0.00350250 BTC / 1000 vbytes = 0.00049385 BTC.\n     # or occasionally 140 vbytes * fee_rate 0.00350250 BTC / 1000 vbytes = 0.00049035 BTC.\n     # Dust should be dropped to the fee, so actual bump fee is 0.00050000 BTC.\n-    bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": 0.00350250})\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": 350.25})\n     full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n     assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00050000\"))\n     assert_equal(len(fulltx[\"vout\"]), 2)"
      },
      {
        "sha": "9377e340834ecc0a67377f4caf5b41d19f8b23b0",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 37,
        "deletions": 32,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d495747320c79b27a83c216dcc526ac8df8f24/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=a0d495747320c79b27a83c216dcc526ac8df8f24",
        "patch": "@@ -30,8 +30,8 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n-                  arg_conf_target=None, arg_estimate_mode=None,\n-                  conf_target=None, estimate_mode=None, add_to_wallet=None, psbt=None,\n+                  arg_conf_target=None, arg_estimate_mode=None, arg_fee_rate=None,\n+                  conf_target=None, estimate_mode=None, fee_rate=None, add_to_wallet=None, psbt=None,\n                   inputs=None, add_inputs=None, change_address=None, change_position=None, change_type=None,\n                   include_watching=None, locktime=None, lock_unspents=None, replaceable=None, subtract_fee_from_outputs=None,\n                   expect_error=None):\n@@ -64,6 +64,8 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             options[\"conf_target\"] = conf_target\n         if estimate_mode is not None:\n             options[\"estimate_mode\"] = estimate_mode\n+        if fee_rate is not None:\n+            options[\"fee_rate\"] = fee_rate\n         if inputs is not None:\n             options[\"inputs\"] = inputs\n         if add_inputs is not None:\n@@ -91,18 +93,19 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n             options = None\n \n         if expect_error is None:\n-            res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+            res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, fee_rate=arg_fee_rate, options=options)\n         else:\n             try:\n                 assert_raises_rpc_error(expect_error[0], expect_error[1], from_wallet.send,\n-                                        outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+                    outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, fee_rate=arg_fee_rate, options=options)\n             except AssertionError:\n                 # Provide debug info if the test fails\n                 self.log.error(\"Unexpected successful result:\")\n                 self.log.error(arg_conf_target)\n                 self.log.error(arg_estimate_mode)\n+                self.log.error(arg_fee_rate)\n                 self.log.error(options)\n-                res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, options=options)\n+                res = from_wallet.send(outputs=outputs, conf_target=arg_conf_target, estimate_mode=arg_estimate_mode, fee_rate=arg_fee_rate, options=options)\n                 self.log.error(res)\n                 if \"txid\" in res and add_to_wallet:\n                     self.log.error(\"Transaction details:\")\n@@ -228,10 +231,10 @@ def run_test(self):\n         assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"],\n                      self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n         # but not at the same time\n-        for mode in [\"unset\", \"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n+        for mode in [\"unset\", \"economical\", \"conservative\"]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\",\n                 conf_target=1, estimate_mode=mode, add_to_wallet=False,\n-                expect_error=(-8, \"Use either conf_target and estimate_mode or the options dictionary to control fee rate\"))\n+                expect_error=(-8, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\"))\n \n         self.log.info(\"Create PSBT from watch-only wallet w3, sign with w2...\")\n         res = self.test_send(from_wallet=w3, to_wallet=w1, amount=1)\n@@ -253,59 +256,61 @@ def run_test(self):\n         assert res[\"complete\"]\n \n         self.log.info(\"Test setting explicit fee rate\")\n-        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=1, arg_estimate_mode=\"economical\", add_to_wallet=False)\n-        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=1, estimate_mode=\"economical\", add_to_wallet=False)\n+        res1 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=1, add_to_wallet=False)\n+        res2 = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=1, add_to_wallet=False)\n         assert_equal(self.nodes[1].decodepsbt(res1[\"psbt\"])[\"fee\"], self.nodes[1].decodepsbt(res2[\"psbt\"])[\"fee\"])\n \n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.00007, estimate_mode=\"btc/kb\", add_to_wallet=False)\n+        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0, estimate_mode=\"\", fee_rate=7, add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00007\"))\n \n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=2, estimate_mode=\"sat/b\", add_to_wallet=False)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=2, add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00002\"))\n \n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.00004531, arg_estimate_mode=\"btc/kb\", add_to_wallet=False)\n+        # Passing conf_target 0, estimate_mode \"\" as placeholder arguments should allow fee_rate to apply.\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0, arg_estimate_mode=\"\", arg_fee_rate=4.531, add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00004531\"))\n \n-        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=3, arg_estimate_mode=\"sat/b\", add_to_wallet=False)\n+        res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=3, add_to_wallet=False)\n         fee = self.nodes[1].decodepsbt(res[\"psbt\"])[\"fee\"]\n         assert_fee_amount(fee, Decimal(len(res[\"hex\"]) / 2), Decimal(\"0.00003\"))\n \n+        # Test that passing fee_rate as both an argument and an option raises.\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=1, fee_rate=1, add_to_wallet=False,\n+                       expect_error=(-8, \"Pass the fee_rate either as an argument, or in the options object, but not both\"))\n+\n+        assert_raises_rpc_error(-8, \"Use fee_rate (sat/vB) instead of feeRate\", w0.send, {w1.getnewaddress(): 1}, 6, \"conservative\", 1, {\"feeRate\": 0.01})\n+\n+        assert_raises_rpc_error(-3, \"Unexpected key totalFee\", w0.send, {w1.getnewaddress(): 1}, 6, \"conservative\", 1, {\"totalFee\": 0.01})\n+\n         for target, mode in product([-1, 0, 1009], [\"economical\", \"conservative\"]):\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=target, estimate_mode=mode,\n-                expect_error=(-8, \"Invalid conf_target, must be between 1 and 1008\"))\n-        for mode in [\"btc/kb\", \"sat/b\"]:\n-            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=-1, estimate_mode=mode,\n-                expect_error=(-3, \"Amount out of range\"))\n-            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0, estimate_mode=mode,\n-                expect_error=(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n-\n-        for mode in [\"foo\", Decimal(\"3.141592\")]:\n+                expect_error=(-8, \"Invalid conf_target, must be between 1 and 1008\"))  # max value of 1008 per src/policy/fees.h\n+        for target, mode in product([-1, 0], [\"btc/kb\", \"sat/b\"]):\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=target, estimate_mode=mode,\n+                expect_error=(-8, \"Invalid estimate_mode parameter\"))\n+\n+        for mode in [\"\", \"foo\", Decimal(\"3.141592\")]:\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=mode,\n                 expect_error=(-8, \"Invalid estimate_mode parameter\"))\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.1, arg_estimate_mode=mode,\n                 expect_error=(-8, \"Invalid estimate_mode parameter\"))\n-            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", lambda: w0.send({w1.getnewaddress(): 1}, 0.1, mode))\n+            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", w0.send, {w1.getnewaddress(): 1}, 0.1, mode)\n \n         for mode in [\"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n             self.log.debug(\"{}\".format(mode))\n             for k, v in {\"string\": \"true\", \"object\": {\"foo\": \"bar\"}}.items():\n                 self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n                     expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n \n-        # TODO: error should use sat/B instead of BTC/kB if sat/B is selected.\n+        # TODO: The error message should use sat/vB units instead of BTC/kB.\n         # Test setting explicit fee rate just below the minimum.\n-        for unit, fee_rate in {\"sat/B\": 0.99999999, \"BTC/kB\": 0.00000999}.items():\n-            self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if conf_target {} and estimate_mode {} are passed\".format(fee_rate, unit))\n-            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=fee_rate, estimate_mode=unit,\n-                expect_error=(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n-\n-        self.log.info(\"Explicit fee rate raises RPC error if estimate_mode is passed without a conf_target\")\n-        for unit, fee_rate in {\"sat/B\": 100, \"BTC/kB\": 0.001}.items():\n-            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, estimate_mode=unit,\n-                expect_error=(-8, \"Selected estimate_mode {} requires a fee rate to be specified in conf_target\".format(unit)))\n+        self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.99999999,\n+            expect_error=(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  },
  {
    "sha": "410e471fa42d3db04e8879c71f8c824dcc151a83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTBlNDcxZmE0MmQzZGIwNGU4ODc5YzcxZjhjODI0ZGNjMTUxYTgz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-09T14:00:31Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-11T14:56:01Z"
      },
      "message": "wallet: remove redundant bumpfee fee_rate checks\n\nSetFeeEstimateMode() handles these checks now and provides a more actionable\nerror message.",
      "tree": {
        "sha": "640921f4d4e7802571c06f1803264197a793179c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/640921f4d4e7802571c06f1803264197a793179c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/410e471fa42d3db04e8879c71f8c824dcc151a83",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+r+4EACgkQT1chs9Dj\nkh2tWw//W/ffFrEbFIBk/bNQr92Z06XGPZkYaigD9OQ6voGCMTH3I+Anq5Wx6U7C\nUaydMv4jU95+b5HWnUcU6B+GRRQM3Xyxhk1QLd+aITcnBvb1F1z8G6ktyVUHM7nj\njkC7PFMw18DqZwOSP+/ZbQnrAP6ztxFATcyofS2HGAeLD2nTTu19SuNOC8McOkEQ\nbUgo7W+geaSZ5W9j4lVZEAK2GaFXqGB85oaIWCk/aESFgrMRdIZ4znrBB0uhtV4I\nrYI7gj8VYSMSOYb5N5D9SmZ4cic5gWdl9wH8KNc2qItIDS2Gc9Z14lME3y61Vd3s\nUi3dP5c+Q7nIKtK882ddKowv9vCqHolaHVIUUAR5SsZh5yoWWeJLQHnI0Ye81/3f\nfYeQ10oBUPafrnC+B21QtTkVSoZDnJylETr4ILHjOxpacJ4ltiwr45m9UBhpF28h\neWTHnnXUEVBLuYh4gbsdTXjHttsKIGUz5Z8INPY1aVaJ1ktzX0bgfz3rL6kJoSU7\nV898cwdPe+KpqJnt0M6V+at19waieVa8GR5tT+TjtdIh39mgYfEYUiLdsLshUEsL\nz+59bH7mxebb8FEkb6C0GpVRM3xC/ynJ6upjo/lSA9sEeaBCzr71Ta2111zFgKO4\nt7DaqyTx5opX/qY3+TjKFTvX/SVDkVSK7jttkdTv0jMvuMyFZd4=\n=rIOE\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHZ+1Gwx54P/xPkGwrbgLAOfAGO1Fbjae5uFv5GtLK3jCP/wECOM2S72dFm8\n3KPG4r3+OBsI8QRfq/uD8AgRRDjCn1PPjACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEGPXt+ATdAu7RTOy/p4D\nysII8QRfq/uC8AiOjXLG3TpBQACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEH0AeXOjfp3jq0KTZOPLH0oI8QRfq/uF8AhYFuxw\nAk+adACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3\nYWxsLmNvbfAQ4Kk/mOf54fXPuc/AA68AZwjxBF+r+4LwCIpfizPtPt7cAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 640921f4d4e7802571c06f1803264197a793179c\nparent a0d495747320c79b27a83c216dcc526ac8df8f24\nauthor Jon Atack <jon@atack.com> 1604930431 +0100\ncommitter Jon Atack <jon@atack.com> 1605106561 +0100\n\nwallet: remove redundant bumpfee fee_rate checks\n\nSetFeeEstimateMode() handles these checks now and provides a more actionable\nerror message.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/410e471fa42d3db04e8879c71f8c824dcc151a83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/410e471fa42d3db04e8879c71f8c824dcc151a83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/410e471fa42d3db04e8879c71f8c824dcc151a83/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0d495747320c79b27a83c216dcc526ac8df8f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d495747320c79b27a83c216dcc526ac8df8f24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d495747320c79b27a83c216dcc526ac8df8f24"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 1,
      "deletions": 13
    },
    "files": [
      {
        "sha": "73aed654390f0c2292cf034db7e9d680f6a95eb3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/410e471fa42d3db04e8879c71f8c824dcc151a83/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/410e471fa42d3db04e8879c71f8c824dcc151a83/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=410e471fa42d3db04e8879c71f8c824dcc151a83",
        "patch": "@@ -3474,18 +3474,6 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n \n         auto conf_target = options.exists(\"confTarget\") ? options[\"confTarget\"] : options[\"conf_target\"];\n \n-        if (!conf_target.isNull()) {\n-            if (options.exists(\"fee_rate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n-            }\n-        } else if (options.exists(\"fee_rate\")) {\n-            CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n-            if (fee_rate <= CFeeRate(0)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid fee_rate %s (must be greater than 0)\", fee_rate.ToString()));\n-            }\n-            coin_control.m_feerate = fee_rate;\n-        }\n-\n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }"
      },
      {
        "sha": "b9726ccfc3c4c68493d045d96d47a1c04fe766cc",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/410e471fa42d3db04e8879c71f8c824dcc151a83/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/410e471fa42d3db04e8879c71f8c824dcc151a83/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=410e471fa42d3db04e8879c71f8c824dcc151a83",
        "patch": "@@ -111,7 +111,7 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n             rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.00000000 BTC/kB (must be greater than 0)\",\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",\n             rbf_node.bumpfee, rbfid, {\"fee_rate\": 0})\n         assert_raises_rpc_error(-4, \"Specified or calculated fee 0.141 is too high (cannot be higher than -maxtxfee 0.10\",\n             rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})"
      }
    ]
  },
  {
    "sha": "b7994c01e9a3251536fe6538a22f614774eec82d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzk5NGMwMWU5YTMyNTE1MzZmZTY1MzhhMjJmNjE0Nzc0ZWVjODJk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-09T11:14:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-11T14:56:03Z"
      },
      "message": "wallet: add fee_rate unit warnings to bumpfee",
      "tree": {
        "sha": "7266dae58a36afe603375ec1ec4177f2d33845ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7266dae58a36afe603375ec1ec4177f2d33845ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7994c01e9a3251536fe6538a22f614774eec82d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+r+4MACgkQT1chs9Dj\nkh0jARAAoNdfOUslLLwdc0b6YCi7xIqUQc1Tvx/BPP11zpkBRvtnsNCeNAvE111j\nUhWwGZjDfYoPjuz1trg5ffDUTBT7h2Zb6oYfk3HqioZ/w3dTUsFw0PMJqNJkUusU\n4xRBTxqr0C+0GqH5HGvoVqRRY7z8JsY2VU6mfkNLxlbTSrpA0KtUKD/1oRAfi1Ch\nKndFXSK/vCYQsEuC3SWb2KR6NJ44GFGLM25wFGBK70f5cvGHeXiZcRourzAC+vlY\nF3nyGDsq/Xg2C2uJ8kPDnWbw0iwzSGqOYJvW60Zv5028JMRhaMuI7XYj6UL/RY/E\nWND8xaGPBWNIG1OMbGZZm07lpzAmwG8PUgpRiqYXBdbtmLmtxGc8uANB26LS2iOT\n+mXZOUPhZJNpLFl9WZkWUiPoF78qHs255Ks3Fn6SLm9cOPUH6NlqclqCSJXHMR/V\nPNaOM3acW8+4fKR8tcGu2fB9BtV70vWm241ZIOhmaP5ywMiAUMFawqLMn27RfQyz\nykABVT+knuuipC9mwjqnJFoAN/DMtH1lUF3TV1FIEmC7lMNxhMQTA1jEjgPvlUuW\n07NacyHLvn9z0hNEvt3j08A/esm03fuMTDjDDpUE5V2hJRx2mdfE1Fmuq6ELnOHV\nTMl1iKGQpUdL3S6WcwBPXY1oXCQz/6JRcVhJ1wAIyLxgTPc1ll8=\n=95Sq\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPRZ99MLuAi8G9cXtEAz2GeH0jy7X07qBK/QKKhxNYCYCP/wEGLK/Wjr9IB2\nhmj5Z2eMeAAI8SBFe4ljQ6qsTZdqHtr7z6sPOaBsG4ixb7sv9Yl4ICX0KAjxBF+r\n+4TwCIcDGR/FtwTRAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BBkydKEztp8a+fm/cSdq1dyCPEEX6v7hfAI\ne6FQqX7q0ZkAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BCFb2Bbh3n1pomsK2yWvi+fCPEEX6v7hPAIhWZ4FGhi\n1QkAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23w\nEN6LEf3gNbB5lhm85oOm0k0I8SCLN7l7XkhI1dPqXFtpyUBIX6YibxDPVskMcNpT\nH9QmOAjxBF+r+4fwCDuoFV/7ahAnAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7266dae58a36afe603375ec1ec4177f2d33845ee\nparent 410e471fa42d3db04e8879c71f8c824dcc151a83\nauthor Jon Atack <jon@atack.com> 1604920457 +0100\ncommitter Jon Atack <jon@atack.com> 1605106563 +0100\n\nwallet: add fee_rate unit warnings to bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7994c01e9a3251536fe6538a22f614774eec82d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7994c01e9a3251536fe6538a22f614774eec82d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7994c01e9a3251536fe6538a22f614774eec82d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "410e471fa42d3db04e8879c71f8c824dcc151a83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/410e471fa42d3db04e8879c71f8c824dcc151a83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/410e471fa42d3db04e8879c71f8c824dcc151a83"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f29b941b2395f13a12ef9f6983d73012b8906075",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7994c01e9a3251536fe6538a22f614774eec82d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7994c01e9a3251536fe6538a22f614774eec82d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b7994c01e9a3251536fe6538a22f614774eec82d",
        "patch": "@@ -3391,9 +3391,10 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n         \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n         \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-        \"Alternatively, the user can specify a fee_rate (in \" + CURRENCY_ATOM + \"/vB) for the new transaction.\\n\"\n+        \"Alternatively, the user can specify a fee rate in \" + CURRENCY_ATOM + \"/vB for the new transaction.\\n\"\n         \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n-        \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n+        \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n+        \"* WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB. *\\n\",\n         {\n             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n@@ -3402,7 +3403,8 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n                              \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n                              \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least 1 \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"},\n+                             \"Must be at least 1 \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"\n+                             \"WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB.\\n\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n                              \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n                              \"be left unchanged from the original. If false, any input sequence numbers in the\\n\""
      }
    ]
  },
  {
    "sha": "7f9835a05abf3e168ad93e7195cbaa4bf61b9b07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Zjk4MzVhMDVhYmYzZTE2OGFkOTNlNzE5NWNiYWE0YmY2MWI5YjA3",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-05T04:07:51Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-11T14:56:05Z"
      },
      "message": "wallet: remove fee rates from conf_target helps",
      "tree": {
        "sha": "88033f2f6d33c75253753badb2c895a7ecae6895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88033f2f6d33c75253753badb2c895a7ecae6895"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+r+4UACgkQT1chs9Dj\nkh0b4RAAr5AQQhGL1e5FxQth9WnJVL5kFTULDRArDS8P96MGRNYoAF/oEfSfqbQM\nBj/QTz9/rsueZDmUhrruG1YpvB3eXo9sDZALcYpfXLGaLy56qDiJ6XbNx2gS6JFb\njUYw12+g/P3a5tu81RCPRUsWMXH2Wh/oMCrNr7uL8Rhto41iagjwKvRRwMsPwgLM\nP9wKPXPke3+zS1ZokbeiTOaMQ2Q6Cod4V3Q1Qee66Y2v224NtHich2FjRIgLzre/\npFLR7vvOOAOPbZdyxB84jPohEO6lsWk4gIZGW/DRqA2QxO4i4CZV2xOhXborJuLz\nV2Zld88VPpmtW137Z5PHwgTC1zouFw2NtIqfNBopV4wjUtpK4UWIyZHUZjYgYeEj\nwngL3PfPcrnX9ZeDIVypKZxoRXl3z2Sm78xibB8We9+MREPD31hEWoJy1/39L8Lk\nVodKgniXM3KgbkPC7uaAwb53bE34ar8uu8hqwGJQkLHiYQzsltOAjJqtY7C57DAg\ntwY5J30VKNxAtasfQTkVrrUqQGL5DRNPd1OvIhN6gt39E0CJTKCO/88TLQLlkcEM\nGWSutqBfCILUmfo+6C525/EYFgQHgtlStXCHkG35YAfSPkiKn8Gb3xSPUy+g6udL\nUspimsr9zzwtTSlLu3aXX676n0lbjYYGS7RaripETz5SJBn1zFM=\n=VGFv\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIInup7ExTu/AOcUs4Qeu8gSOCyykcB1OghuasZlUjfM4CP/wEBRIEHQd8Nzh\nrBOWitljEdcI8QRfq/uH8Ag/6qJjJv/PZACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wECCXWOFeApvz+pgAHknt\nJx4I8SByaXNwORPEM4fgfbSkv/7m2ZpdrNVoNIS1LtFDNkpwxQjxBF+r+4bwCPLE\nH+oiDfeEAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHku\nY29t//AQr2zRb9MERf1KpHLX+iuFnwjxBF+r+4bwCAoZ0/cwfKyjAIPf4w0u+QyO\nLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nELDdxsWS7B2HbQyvxFIoNNgI8QRfq/uJ8AjgYaZevopmswCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 88033f2f6d33c75253753badb2c895a7ecae6895\nparent b7994c01e9a3251536fe6538a22f614774eec82d\nauthor Jon Atack <jon@atack.com> 1604549271 +0100\ncommitter Jon Atack <jon@atack.com> 1605106565 +0100\n\nwallet: remove fee rates from conf_target helps\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7994c01e9a3251536fe6538a22f614774eec82d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7994c01e9a3251536fe6538a22f614774eec82d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7994c01e9a3251536fe6538a22f614774eec82d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 7,
      "deletions": 14
    },
    "files": [
      {
        "sha": "d286ee447b6daa7ede6b761f5ac842c1b1ad19e2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7f9835a05abf3e168ad93e7195cbaa4bf61b9b07",
        "patch": "@@ -437,8 +437,7 @@ static RPCHelpMan sendtoaddress()\n                     {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n                                          \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                                         \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"true\", \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n@@ -867,8 +866,7 @@ static RPCHelpMan sendmany()\n                         },\n                     },\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                                       \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n@@ -3219,8 +3217,7 @@ static RPCHelpMan fundrawtransaction()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                                                          \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },\n@@ -3399,8 +3396,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n             {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n             {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                             \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\\n\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n                              \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n                              \"Must be at least 1 \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"\n@@ -4015,8 +4011,7 @@ static RPCHelpMan send()\n                     },\n                 },\n             },\n-            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                    \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                         \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n             {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n@@ -4027,8 +4022,7 @@ static RPCHelpMan send()\n                     {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                     {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                     {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                            \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n                     {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n             \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n@@ -4379,8 +4373,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                                                           \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target (in blocks)\\n\"\n-                                                          \"or fee rate (for \" + CURRENCY_UNIT + \"/kB and \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n                             \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                         },"
      }
    ]
  },
  {
    "sha": "173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzNiNWI1ZmUwN2Q0NWJlNWExZTViYzdhNWRmOTk2ZjIwYWIxZTg1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-08T18:57:35Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-12T10:43:03Z"
      },
      "message": "wallet: update fee rate units, use sat/vB for fee_rate error messages\n\nand BTC/kvB for feeRate error messages.",
      "tree": {
        "sha": "0241bef69ca5fe14f4e90cfb99fabc216d875c17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0241bef69ca5fe14f4e90cfb99fabc216d875c17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+tEb8ACgkQT1chs9Dj\nkh0AFhAAx3VrVv2NjD0KLisZ96TaA5i+QB+UpaA+kvBLPgwgMntywc2HeB1s9MJS\n3iejy7mALtpgKYE8H+OA+3A1ozQGPGjhEBGCYk0lQrOdtC7YfK1aE1ihGS5QDXJ3\ntibQ9xpc8JTQgQHqRKQzmEXCihDM9O3lK/XOXl4ERURisO8GhKtVjS/xbZbXiADo\n0p0FsLbUM7iD/gwvQ/5ghHxseBuvQ7fHJZb55hUCCztVMQy7+KjMs/laziWN0Avm\nk1EwoIxwY7n/4eNAINcE0fnGimd5dMzUFKD+QxCOtMndK9M7c5p2TLHAbCX+jt/1\nL6GpCAoYev4t/pKqFZXrSnXdENb3pXKOjLUMyeZ8yuhDQKdFMYqvc/E9loYu2zYJ\nQJnATcVrSoXt7dB8Mt759g7gPv2ZIjUAOfZgcIUkBtTRkLi9v4VDHs22DQTFrQyp\n6T1zYy9pU4egW1Jy7IYry06nJ5CDtk2Ab1ICtnRIE8N+bf4hOdbnEQ8QGlckhDKQ\nH2g6abujko0UXOHSBH9hlqWXIst6HhVAdPbtrMy+eiQNtlG+DGJ3AVEmTi7lfeJF\nU+dUbuXShKmNV6zcGUTX8Sfj3UMXpx6BsEy4HqLfxM6xGl3PevrAc52exdekcw+1\nGNBuG/umttOo//cZXqWQ8EoK8SXPYEoSHSFVsqTmhxtqaooANls=\n=3O3f\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHI3Ux1M/13H4C36swVnmJG480rG85nsW35rM6oBiDaxCP/wEAGoH9WaIZ0d\nEsaC9i1JilUI8QRfrRHB8Ag64+XOxdfP5QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEHTcwYOCk3JfUFy/6tmGdtII8SCUDQJT\nlIjs4klNmF6OvZRF4oQMSmg9AIgF99giDjc+pAjxBF+tEcHwCPHaRTqWr/DIAIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BDCHg+O+uIMiUHmHOK9+5BLCPEgS3AFjrI2cLux3T2/dzgutbfZ2peW\nDf94YPujDAEHgdUI8QRfrRHE8AiEsA5y/T3KsACD3+MNLvkMjikoaHR0cHM6Ly9m\naW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ8WEmogJSCmdWSnSvMfKT\ncgjxINuudPiPACgd6dz4avsbJvrbWBeDGA4H+7mvfKYrfWO1CPEEX60RwfAII23t\nRfyAK14Ag9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0241bef69ca5fe14f4e90cfb99fabc216d875c17\nparent 7f9835a05abf3e168ad93e7195cbaa4bf61b9b07\nauthor Jon Atack <jon@atack.com> 1604861855 +0100\ncommitter Jon Atack <jon@atack.com> 1605177783 +0100\n\nwallet: update fee rate units, use sat/vB for fee_rate error messages\n\nand BTC/kvB for feeRate error messages.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f9835a05abf3e168ad93e7195cbaa4bf61b9b07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f9835a05abf3e168ad93e7195cbaa4bf61b9b07"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 22,
      "deletions": 21
    },
    "files": [
      {
        "sha": "04e0e117a5bacaef9a44f0bb2b1c58b8b5851cd3",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -38,7 +38,7 @@ CAmount CFeeRate::GetFee(size_t nBytes_) const\n std::string CFeeRate::ToString(const FeeEstimateMode& fee_estimate_mode) const\n {\n     switch (fee_estimate_mode) {\n-    case FeeEstimateMode::SAT_B:  return strprintf(\"%d.%03d %s/B\", nSatoshisPerK / 1000, nSatoshisPerK % 1000, CURRENCY_ATOM);\n-    default:                      return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n+    case FeeEstimateMode::SAT_VB: return strprintf(\"%d.%03d %s/vB\", nSatoshisPerK / 1000, nSatoshisPerK % 1000, CURRENCY_ATOM);\n+    default:                      return strprintf(\"%d.%08d %s/kvB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n     }\n }"
      },
      {
        "sha": "7c5660ac8af25e2c7bce6b15512dcac8a9bd4958",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -19,8 +19,8 @@ enum class FeeEstimateMode {\n     UNSET,        //!< Use default settings based on other criteria\n     ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n     CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n-    BTC_KB,       //!< Use explicit BTC/kB fee given in coin control\n-    SAT_B,        //!< Use explicit sat/B fee given in coin control\n+    BTC_KVB,      //!< Use BTC/kvB fee rate unit\n+    SAT_VB,       //!< Use sat/vB fee rate unit\n };\n \n /**\n@@ -65,7 +65,7 @@ class CFeeRate\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n     friend bool operator!=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK != b.nSatoshisPerK; }\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n-    std::string ToString(const FeeEstimateMode& fee_estimate_mode = FeeEstimateMode::BTC_KB) const;\n+    std::string ToString(const FeeEstimateMode& fee_estimate_mode = FeeEstimateMode::BTC_KVB) const;\n \n     SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.nSatoshisPerK); }\n };"
      },
      {
        "sha": "c16519a6b123720422871c3506f8c71792c6fd5f",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -98,7 +98,7 @@ BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\n     BOOST_CHECK(a <= a);\n     BOOST_CHECK(b >= a);\n     BOOST_CHECK(b >= b);\n-    // a should be 0.00000002 BTC/kB now\n+    // a should be 0.00000002 BTC/kvB now\n     a += a;\n     BOOST_CHECK(a == b);\n }\n@@ -107,7 +107,9 @@ BOOST_AUTO_TEST_CASE(ToStringTest)\n {\n     CFeeRate feeRate;\n     feeRate = CFeeRate(1);\n-    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTC/kB\");\n+    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTC/kvB\");\n+    BOOST_CHECK_EQUAL(feeRate.ToString(FeeEstimateMode::BTC_KVB), \"0.00000001 BTC/kvB\");\n+    BOOST_CHECK_EQUAL(feeRate.ToString(FeeEstimateMode::SAT_VB), \"0.001 sat/vB\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "f023d3e3f80568d06e72297647415c77d881395b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -3136,7 +3136,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             }\n             CFeeRate fee_rate(AmountFromValue(options[\"feeRate\"]));\n             if (fee_rate <= CFeeRate(0)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid feeRate %s (must be greater than 0)\", fee_rate.ToString()));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid feeRate %s (must be greater than 0)\", fee_rate.ToString(FeeEstimateMode::BTC_KVB)));\n             }\n             coinControl.m_feerate = fee_rate;\n             coinControl.fOverrideFeeRate = true;"
      },
      {
        "sha": "37f6a4a7dcb90986f442cb0eb3a47e3d919725cf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -2834,7 +2834,7 @@ bool CWallet::CreateTransactionInternal(\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n             if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(), nFeeRateNeeded.ToString());\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n "
      },
      {
        "sha": "93d9eb91068a0a31741887def5cf38844e03be15",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -752,9 +752,9 @@ def test_option_feerate(self):\n                     node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True})\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+        assert_raises_rpc_error(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n             node.fundrawtransaction, rawtx, {\"fee_rate\": 0, \"add_inputs\": True})\n-        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kB (must be greater than 0)\",\n+        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kvB (must be greater than 0)\",\n             node.fundrawtransaction, rawtx, {\"feeRate\": 0, \"add_inputs\": True})\n         for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1.000)}:\n             assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n@@ -768,7 +768,7 @@ def test_option_feerate(self):\n \n         # Test setting explicit fee rate just below the minimum.\n         self.log.info(\"- raises RPC error 'fee rate too low' if fee_rate of 0.99999999 sat/vB is passed\")\n-        msg = \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"\n+        msg = \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n         assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n         # This feeRate test only passes if `coinControl.fOverrideFeeRate = true` in wallet/rpcwallet.cpp::FundTransaction is removed.\n         # assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 0.00000999, \"add_inputs\": True})"
      },
      {
        "sha": "7feab4d82f912fd638edc21cb9b4bf5fd5857257",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -194,9 +194,9 @@ def run_test(self):\n         assert_approx(res2[\"fee\"], 0.055, 0.005)\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-4, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+        assert_raises_rpc_error(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n             self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0, \"add_inputs\": True})\n-        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kB (must be greater than 0)\",\n+        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kvB (must be greater than 0)\",\n             self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"feeRate\": 0, \"add_inputs\": True})\n         for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1)}:\n             assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n@@ -246,7 +246,7 @@ def run_test(self):\n \n         # Test setting explicit fee rate just below the minimum.\n         self.log.info(\"- raises RPC error 'fee rate too low' if feerate_sat_vb of 0.99999999 is passed\")\n-        assert_raises_rpc_error(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+        assert_raises_rpc_error(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n             self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n \n         self.log.info(\"Test walletcreatefundedpsbt with too-high fee rate produces total fee well above -maxtxfee and raises RPC error\")"
      },
      {
        "sha": "88f8309e4f8827056bc81066b51937deeef677f9",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -250,11 +250,11 @@ def run_test(self):\n \n         # Test setting explicit fee rate just below the minimum.\n         self.log.info(\"Test sendmany raises 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n-        assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+        assert_raises_rpc_error(-6, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n             self.nodes[2].sendmany, amounts={address: 10}, fee_rate=0.99999999)\n \n         self.log.info(\"Test sendmany raises if fee_rate of 0 or -1 is passed\")\n-        assert_raises_rpc_error(-6, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+        assert_raises_rpc_error(-6, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n             self.nodes[2].sendmany, amounts={address: 10}, fee_rate=0)\n         assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendmany, amounts={address: 10}, fee_rate=-1)\n \n@@ -421,11 +421,11 @@ def run_test(self):\n \n             # Test setting explicit fee rate just below the minimum.\n             self.log.info(\"Test sendtoaddress raises 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n-            assert_raises_rpc_error(-6, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            assert_raises_rpc_error(-6, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n                 self.nodes[2].sendtoaddress, address=address, amount=1, fee_rate=0.99999999)\n \n             self.log.info(\"Test sendtoaddress raises if fee_rate of 0 or -1 is passed\")\n-            assert_raises_rpc_error(-6, \"Fee rate (0.00000000 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\",\n+            assert_raises_rpc_error(-6, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n                 self.nodes[2].sendtoaddress, address=address, amount=10, fee_rate=0)\n             assert_raises_rpc_error(-3, OUT_OF_RANGE, self.nodes[2].sendtoaddress, address=address, amount=1.0, fee_rate=-1)\n "
      },
      {
        "sha": "0896dea98a81038b531d0f0a92eabf65207f85e6",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "patch": "@@ -306,11 +306,10 @@ def run_test(self):\n                 self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n                     expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n \n-        # TODO: The error message should use sat/vB units instead of BTC/kB.\n         # Test setting explicit fee rate just below the minimum.\n         self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.99999999,\n-            expect_error=(-4, \"Fee rate (0.00000999 BTC/kB) is lower than the minimum fee rate setting (0.00001000 BTC/kB)\"))\n+            expect_error=(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  },
  {
    "sha": "6da3afbaee5809ebf6d88efaa3958c505c2d71c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGEzYWZiYWVlNTgwOWViZjZkODhlZmFhMzk1OGM1MDVjMmQ3MWM3",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-06T18:07:16Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-12T10:43:14Z"
      },
      "message": "wallet: update remaining rpcwallet fee rate units to BTC/kvB",
      "tree": {
        "sha": "fc8d175d2906059645572238ad8e4bf52e062f57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc8d175d2906059645572238ad8e4bf52e062f57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6da3afbaee5809ebf6d88efaa3958c505c2d71c7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+tEcIACgkQT1chs9Dj\nkh2Axw//b5hLxtLeuHtxJN0GhzNbCCqocWfOC1AZeXmcGIq92riIqDpLMpE1O6Yj\nAqLffpu1dipfuTOKCsPddRNh5ljGuyaCQ0d1BAC8vyBLZCm9pVfhs6itLJMrk2uo\nIpjzr7UEZj8cA7a3y1+qrDH4+6EA8Nghi5tPi3dBG3UAntW7o9hE+wfMAmZqbjfU\nnXV0drBcHS3yD3PQa0IoBmfCdEwEuj7Z4RhqFxvNNXPnZcc7kYUXULw8I84ntw5q\nhhpeNuQNAHZNxO7YgnzemhRNzV09IxD/D19OOTtnz5LftlCPDr9RvhzlgrkJ1i5o\nBD61miIc1nMOREdtC8trkewRYefxKnCZcTvI86TdYOr0qODVHXeptjg8xPNkyypE\n0jMtA9iV4WJvIGWLpmfZcAUwiwzHzO60a2M2upqFD7eOEIjjevi4lC0tVQkDs7te\nh9B9SjBzVSfGBM0208htJiQHrPCV0rxihCG5B3Po8+J6F9xJXoHjgEcXE9Y+cZJx\nHv9i6lOiZ/pEJdByAQMZhVsXIKYQyaSqWH6X7jSfh6VBVgR4j0/1GHg5yXqDfnfP\n2UOjvydsObg4aPFXeCAGvnus7xOUEtRhjPt/vsZzW83jtl5+83z3o4vf1LPRH+H2\nmniT3eEHjOXthOo6Fi538OA8v6+JO2yHDhNgHakNYLUSo99e3Jo=\n=YGF/\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINtkBlhmK0snQwzKTS43gR0Mc5QArOnvI9CI1FpdZxr4CP/wEDwaJuGQ54F6\nvtWnNvA19+kI8QRfrRHE8AjrPXoHUiNbtACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEIj+eyHxY/vfMBttnvcz\nwKsI8QRfrRHE8AiYCxJ98DigwgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wENNNPPvBHo6tovcWNDYg8X4I8QRfrRHH8AiMaZrd\ntYVDjQCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3\nYWxsLmNvbfAQ8iLTrrDnUNGb+AEdKBv5MQjxBF+tEcTwCLnPQAbEd6X5AIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fc8d175d2906059645572238ad8e4bf52e062f57\nparent 173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85\nauthor Jon Atack <jon@atack.com> 1604686036 +0100\ncommitter Jon Atack <jon@atack.com> 1605177794 +0100\n\nwallet: update remaining rpcwallet fee rate units to BTC/kvB\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da3afbaee5809ebf6d88efaa3958c505c2d71c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6da3afbaee5809ebf6d88efaa3958c505c2d71c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da3afbaee5809ebf6d88efaa3958c505c2d71c7/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/173b5b5fe07d45be5a1e5bc7a5df996f20ab1e85"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1725bba712f6375fdf865eb9a1968163b6a0ed00",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da3afbaee5809ebf6d88efaa3958c505c2d71c7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da3afbaee5809ebf6d88efaa3958c505c2d71c7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6da3afbaee5809ebf6d88efaa3958c505c2d71c7",
        "patch": "@@ -2307,7 +2307,7 @@ static RPCHelpMan settxfee()\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n                 \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kvB\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::BOOL, \"\", \"Returns true if successful\"\n@@ -2430,7 +2430,7 @@ static RPCHelpMan getwalletinfo()\n                         {RPCResult::Type::NUM, \"keypoolsize\", \"how many new keys are pre-generated (only counts external keys)\"},\n                         {RPCResult::Type::NUM, \"keypoolsize_hd_internal\", \"how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\"},\n                         {RPCResult::Type::NUM_TIME, \"unlocked_until\", /* optional */ true, \"the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked (only present for passphrase-encrypted wallets)\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"paytxfee\", \"the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"paytxfee\", \"the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kvB\"},\n                         {RPCResult::Type::STR_HEX, \"hdseedid\", /* optional */ true, \"the Hash160 of the HD seed (only present when HD is enabled)\"},\n                         {RPCResult::Type::BOOL, \"private_keys_enabled\", \"false if privatekeys are disabled for this wallet (enforced watch-only wallet)\"},\n                         {RPCResult::Type::BOOL, \"avoid_reuse\", \"whether this wallet tracks clean/dirty coins in terms of reuse\"},\n@@ -3206,7 +3206,7 @@ static RPCHelpMan fundrawtransaction()\n                                                           \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The integers.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n@@ -4362,7 +4362,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only\"},\n                             {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n                             {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\", \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n                             {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"The outputs to subtract the fee from.\\n\"\n                                                           \"The fee will be equally deducted from the amount of each specified output.\\n\"\n                                                           \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\""
      }
    ]
  },
  {
    "sha": "449b730579566459e350703611629e63e54657ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDliNzMwNTc5NTY2NDU5ZTM1MDcwMzYxMTYyOWU2M2U1NDY1N2Vk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-10T11:29:01Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-12T10:43:17Z"
      },
      "message": "wallet: provide valid values if invalid estimate mode passed\n\nCo-authored-by: Murch <murch@murch.one>",
      "tree": {
        "sha": "0cd98fd3d8cb44d52df4221677fa387e9ecc2dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cd98fd3d8cb44d52df4221677fa387e9ecc2dd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/449b730579566459e350703611629e63e54657ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+tEcUACgkQT1chs9Dj\nkh2Qrg/+IUFN23DAdehqioGbfgbVekFAJUqyf4+CmCO5gQ31gO96pz1+pnTbMoY7\n9NEwQHe8r8uYhjf0EUGxYNPO9dsdFrZzqeoWTSEgBS29z1tlSwk2cg5SHVzLX+rK\nE0OTFx1CE1JwFdxm9o5AIwfIl1jE12qlxzbZHZnXGZLTgdKj9lRnwGBVA3RfY3uw\nLkPQdgXprLnOSvkKuVaZU+yS4ro9SEfZHN08/uftf+YEJIW4wJbw8p597PQH5xF+\ns5sTQ0Lm8GYN5SJDALb/EV6lS/gMPpJS1kB1yuJo92thXwtfdnqzPC3u3cefLZve\nH75jjadu0GWIvGP/c4L+xR6v2tajgbdrqcokl3evQYo8bqrBfMzdQglhdmG1QcHj\nL1JESydpybCTE8+44bMAX+YMWwjXDA1EjAg4Z0SghXrV2yWs1ZoIwNTgwgDXSU3Y\n5R/EasJcneH81gHuokC3jRJjeEyzY2sZrT6Vw9+rx0NTgvQ6lGZ4rbFtLIwk7y9K\nz/RmJzuWJQHx4DIRGFnuPnQLAmNCDnYda67yNLQHJO529RW7aqd5l1i7L0Wk7Ycm\nOWPrK59dVb1fExuWbKDMmMtAMo+GxfTDo1bTMyO5YuJESWVTu6D9xfCGbc8ywpNW\n8CAAQhAXOgYj5zdnR1PlpbkSRbxWLhl/ZkVduJhJ4Ys+ETnt4nQ=\n=Jm1e\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwID05U5X6+L9ASO9MmvZYTFjSE4NWSJ8FiQqz/3oJ4WknCP/wEBjALcByvCC6\nfcbIGBXyiKwI8QRfrRHG8AgLBDSbzYX8DACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wECNr5D5tDr33QaF+W8A+\n8HgI8QRfrRHK8AjHh1ypFSfQQACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEE6Cj7n2U9NyHcKVT0URWyII8QRfrRHH\n8AgTgRnW8otlnwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BBszIkJv1vzoPhSQWwu8E3wCPEEX60Rx/AIUsLS\nAjpq3kcAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0cd98fd3d8cb44d52df4221677fa387e9ecc2dd7\nparent 6da3afbaee5809ebf6d88efaa3958c505c2d71c7\nauthor Jon Atack <jon@atack.com> 1605007741 +0100\ncommitter Jon Atack <jon@atack.com> 1605177797 +0100\n\nwallet: provide valid values if invalid estimate mode passed\n\nCo-authored-by: Murch <murch@murch.one>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/449b730579566459e350703611629e63e54657ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/449b730579566459e350703611629e63e54657ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/449b730579566459e350703611629e63e54657ed/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6da3afbaee5809ebf6d88efaa3958c505c2d71c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da3afbaee5809ebf6d88efaa3958c505c2d71c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6da3afbaee5809ebf6d88efaa3958c505c2d71c7"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 20,
      "deletions": 16
    },
    "files": [
      {
        "sha": "6522c0d73e4c4db845e100a90eb67a697391b654",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -1070,7 +1070,7 @@ static RPCHelpMan estimatesmartfee()\n     if (!request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n         if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, InvalidEstimateModeErrorMessage());\n         }\n         if (fee_mode == FeeEstimateMode::ECONOMICAL) conservative = false;\n     }"
      },
      {
        "sha": "1855c0bc902d6d516f74f3e59f1b209d13f6499e",
        "filename": "src/util/fees.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/src/util/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/src/util/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.cpp?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -49,6 +49,11 @@ std::string FeeModes(const std::string& delimiter)\n     return Join(FeeModeMap(), delimiter, [&](const std::pair<std::string, FeeEstimateMode>& i) { return i.first; });\n }\n \n+const std::string InvalidEstimateModeErrorMessage()\n+{\n+    return \"Invalid estimate_mode parameter, must be one of: \\\"\" + FeeModes(\"\\\", \\\"\") + \"\\\"\";\n+}\n+\n bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode)\n {\n     auto searchkey = ToUpper(mode_string);"
      },
      {
        "sha": "3f1c33ad9c2c70870a09689aaa9bd7baa9e14412",
        "filename": "src/util/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/src/util/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/src/util/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.h?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -13,5 +13,6 @@ enum class FeeReason;\n bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n std::string StringForFeeReason(FeeReason reason);\n std::string FeeModes(const std::string& delimiter);\n+const std::string InvalidEstimateModeErrorMessage();\n \n #endif // BITCOIN_UTIL_FEES_H"
      },
      {
        "sha": "45451db96d99a79db949cfad9841fc6de1321edd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -221,7 +221,7 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n         return;\n     }\n     if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, InvalidEstimateModeErrorMessage());\n     }\n     if (!conf_target.isNull()) {\n         cc.m_confirm_target = ParseConfirmTarget(conf_target, pwallet->chain().estimateMaxBlocks());"
      },
      {
        "sha": "3b76c7dd1e288c7dfa5a6c2aa4fbbcad5a0fd3bb",
        "filename": "test/functional/rpc_estimatefee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/test/functional/rpc_estimatefee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/test/functional/rpc_estimatefee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_estimatefee.py?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n \n         # wrong type for estimatesmartfee(estimate_mode)\n         assert_raises_rpc_error(-3, \"Expected type string, got number\", self.nodes[0].estimatesmartfee, 1, 1)\n-        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", self.nodes[0].estimatesmartfee, 1, 'foo')\n+        assert_raises_rpc_error(-8, 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"', self.nodes[0].estimatesmartfee, 1, 'foo')\n \n         # wrong type for estimaterawfee(threshold)\n         assert_raises_rpc_error(-3, \"Expected type number, got string\", self.nodes[0].estimaterawfee, 1, 'foo')"
      },
      {
        "sha": "d515b4a7d379477597ce1c33e952ea8693fcd0e8",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -738,7 +738,7 @@ def test_option_feerate(self):\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n                 node.fundrawtransaction, rawtx, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True})\n         for mode in [\"\", \"foo\", Decimal(\"3.141592\")]:\n-            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+            assert_raises_rpc_error(-8, 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"',\n                 node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True})\n \n         self.log.info(\"Test fundrawtxn with invalid conf_target settings\")"
      },
      {
        "sha": "313611ca171ce3718082ff13a03187903e017062",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -231,7 +231,7 @@ def run_test(self):\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n                 self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": v, \"conf_target\": 0.1, \"add_inputs\": True})\n         for mode in [\"\", \"foo\", Decimal(\"3.141592\")]:\n-            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+            assert_raises_rpc_error(-8, 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"',\n                 self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": 0.1, \"add_inputs\": True})\n \n         self.log.info(\"- raises RPC error with invalid conf_target settings\")"
      },
      {
        "sha": "ead56046a4328c9e00b8c65c05f700b18f3b5b59",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -263,7 +263,7 @@ def run_test(self):\n             assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",  # max value of 1008 per src/policy/fees.h\n                 self.nodes[2].sendmany, amounts={address: 1}, conf_target=target, estimate_mode=mode)\n         for target, mode in product([-1, 0], [\"btc/kb\", \"sat/b\"]):\n-            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+            assert_raises_rpc_error(-8, 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"',\n                 self.nodes[2].sendmany, amounts={address: 1}, conf_target=target, estimate_mode=mode)\n \n         self.start_node(3, self.nodes[3].extra_args)\n@@ -434,7 +434,7 @@ def run_test(self):\n                 assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",  # max value of 1008 per src/policy/fees.h\n                     self.nodes[2].sendtoaddress, address=address, amount=1, conf_target=target, estimate_mode=mode)\n             for target, mode in product([-1, 0], [\"btc/kb\", \"sat/b\"]):\n-                assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\",\n+                assert_raises_rpc_error(-8, 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"',\n                     self.nodes[2].sendtoaddress, address=address, amount=1, conf_target=target, estimate_mode=mode)\n \n             # 2. Import address from node2 to node1"
      },
      {
        "sha": "c323aac3cc2cbb4685e1daac679a4558e1e1b649",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -138,7 +138,8 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n             assert_raises_rpc_error(-3, \"Expected type string for estimate_mode, got {}\".format(k),\n                 rbf_node.bumpfee, rbfid, {\"estimate_mode\": v})\n         for mode in [\"foo\", Decimal(\"3.1415\"), \"sat/B\", \"BTC/kB\"]:\n-            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", rbf_node.bumpfee, rbfid, {\"estimate_mode\": mode})\n+            assert_raises_rpc_error(-8, 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"',\n+                rbf_node.bumpfee, rbfid, {\"estimate_mode\": mode})\n \n         self.clear_mempool()\n "
      },
      {
        "sha": "5da71c85f95eeb4db42d9a130c8c9709cc404e15",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/449b730579566459e350703611629e63e54657ed/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/449b730579566459e350703611629e63e54657ed/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=449b730579566459e350703611629e63e54657ed",
        "patch": "@@ -289,16 +289,13 @@ def run_test(self):\n         for target, mode in product([-1, 0, 1009], [\"economical\", \"conservative\"]):\n             self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=target, estimate_mode=mode,\n                 expect_error=(-8, \"Invalid conf_target, must be between 1 and 1008\"))  # max value of 1008 per src/policy/fees.h\n+        msg = 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"'\n         for target, mode in product([-1, 0], [\"btc/kb\", \"sat/b\"]):\n-            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=target, estimate_mode=mode,\n-                expect_error=(-8, \"Invalid estimate_mode parameter\"))\n-\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=target, estimate_mode=mode, expect_error=(-8, msg))\n         for mode in [\"\", \"foo\", Decimal(\"3.141592\")]:\n-            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=mode,\n-                expect_error=(-8, \"Invalid estimate_mode parameter\"))\n-            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.1, arg_estimate_mode=mode,\n-                expect_error=(-8, \"Invalid estimate_mode parameter\"))\n-            assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", w0.send, {w1.getnewaddress(): 1}, 0.1, mode)\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=mode, expect_error=(-8, msg))\n+            self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_conf_target=0.1, arg_estimate_mode=mode, expect_error=(-8, msg))\n+            assert_raises_rpc_error(-8, msg, w0.send, {w1.getnewaddress(): 1}, 0.1, mode)\n \n         for mode in [\"economical\", \"conservative\", \"btc/kb\", \"sat/b\"]:\n             self.log.debug(\"{}\".format(mode))"
      }
    ]
  },
  {
    "sha": "be481b72e24fb6834bd674cd8daee67c6938b42d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTQ4MWI3MmUyNGZiNjgzNGJkNjc0Y2Q4ZGFlZTY3YzY5MzhiNDJk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-10T12:43:21Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-12T10:43:19Z"
      },
      "message": "wallet: use MIN_RELAY_TX_FEE in bumpfee help\n\nCo-authored-by: Murch <murch@murch.one>",
      "tree": {
        "sha": "9b126fc7c445009df0d1c8527837becc0a4218f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b126fc7c445009df0d1c8527837becc0a4218f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be481b72e24fb6834bd674cd8daee67c6938b42d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+tEcgACgkQT1chs9Dj\nkh3k0g/9EqJoavNENch/vTD5UFtKhNJHQatatX98vzWTVyLm5bYdxQcZm0Klfn6w\nk98khPc9bxT8YHYrJ8MoNdG22xgS6G9b3PgpR/qypfRAxufbY6dXWsz8pFy5B3bW\n2zQ6RLnGukwIxxcmeaN/8V+OADh2PSawjiS5OagV7hjkXWCWQq3fjxp1+cpWg7Pu\n7000FvPbth4WFIHtsxC044fpvmPOzMbCE6pfEBiA9KxDJpiPemawlKKfnoadEG8Z\nVN5WdiXuUrUqBJ9OEBL9g5sR3/rpAhG6kuJcC3aTPMUsquzWL+NLKIK7z8gxLU06\nfJOsrZ/4SrFjNed7bh7VzOrs1KQQVncxXocD8ZExySLzsrr52PVRCZfreKyu8lZP\nIpNz4mXwtaL5eXCXYn7VS2CYXViaUsAWK0rRV+EBXU+he74zPI55NuMi7Vku56gD\nesVZA9T38CMRHRosjHWi9uLgUBggwQViFctmVCl8P3LEKOBmnKjvhpqyToGebzBk\nvNerJAbFwdO1xOGe6aXikY8HM089L9xutmm9pOqf0B2aP7/+dlNKPcxLrS7bPYpc\ngStTlCweGIOPjnUzQPvJkKBfSny7hz7UZv74H/H0S7zXHUvPRf5nz5TxSemlt87j\njqg6f7+8C898OHTQgTdzhf4B+Wr7i2fY6foocCAmpACt83Jv0hM=\n=EyP0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICeEXx7gBdoSwIpHka0LxRZNAU55ypFuOprXOEZpYO4eCP/wEGJZWQ4t6kxJ\n1Y7Rfeyl2kYI8QRfrRHJ8Aj//O7fREHOCgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEGZQB7Koq79gIGa1B5lItqMI8QRfrRHJ\n8AiRuw1UW+F1pwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEIvoUoq0dIENrLmG6JxrdH4I8QRfrRHM8Ai7XdpD\nD3cAVwCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3\nYWxsLmNvbfAQ4+7SOPjU0eI967q5P/nevgjxBF+tEcrwCO45K9MAoZRjAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9b126fc7c445009df0d1c8527837becc0a4218f1\nparent 449b730579566459e350703611629e63e54657ed\nauthor Jon Atack <jon@atack.com> 1605012201 +0100\ncommitter Jon Atack <jon@atack.com> 1605177799 +0100\n\nwallet: use MIN_RELAY_TX_FEE in bumpfee help\n\nCo-authored-by: Murch <murch@murch.one>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be481b72e24fb6834bd674cd8daee67c6938b42d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be481b72e24fb6834bd674cd8daee67c6938b42d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be481b72e24fb6834bd674cd8daee67c6938b42d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "449b730579566459e350703611629e63e54657ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/449b730579566459e350703611629e63e54657ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/449b730579566459e350703611629e63e54657ed"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7eda98f6c75a60a99aa8e0ede245055558d89d93",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be481b72e24fb6834bd674cd8daee67c6938b42d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be481b72e24fb6834bd674cd8daee67c6938b42d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=be481b72e24fb6834bd674cd8daee67c6938b42d",
        "patch": "@@ -28,6 +28,7 @@\n #include <util/translation.h>\n #include <util/url.h>\n #include <util/vector.h>\n+#include <validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/context.h>\n #include <wallet/feebumper.h>\n@@ -3377,6 +3378,7 @@ RPCHelpMan signrawtransactionwithwallet()\n static RPCHelpMan bumpfee_helper(std::string method_name)\n {\n     bool want_psbt = method_name == \"psbtbumpfee\";\n+    const std::string incremental_fee{CFeeRate(DEFAULT_MIN_RELAY_TX_FEE).ToString(FeeEstimateMode::SAT_VB)};\n \n     return RPCHelpMan{method_name,\n         \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n@@ -3399,7 +3401,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\\n\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n                              \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least 1 \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"\n+                             \"Must be at least \" + incremental_fee + \" \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"\n                              \"WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB.\\n\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n                              \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\""
      }
    ]
  },
  {
    "sha": "9a670b4f07a6140de809d73cbd7f3e614eb6ea74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTY3MGI0ZjA3YTYxNDBkZTgwOWQ3M2NiZDdmM2U2MTRlYjZlYTc0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-05T05:12:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-12T10:43:22Z"
      },
      "message": "wallet: update sendtoaddress, send RPC examples with fee_rate",
      "tree": {
        "sha": "dab6b75472ce08191dd6b70a296376d7e8893091",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dab6b75472ce08191dd6b70a296376d7e8893091"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a670b4f07a6140de809d73cbd7f3e614eb6ea74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+tEcoACgkQT1chs9Dj\nkh1LhQ//R5epS33EZVM/ClJTCeOd5qlTed3uxALzvj2dYFW0ObpjdpJd5vT9s+Xe\n9RIoEXspq9VjjTXG2TIuZQitd2ihQs/NSEZMYaUF9afj/hjcNJ/lFvY4wSZ9q3Ld\n/tphEOW4hJF5kpYgQ8mDoXgJTPT/+4RNdMuHolv91xej8TNB9+DEOgLtYL8a0ffU\nBD4J4BWePFkgpj+RJjmgVRvUBJKnYybc1/rDK3PKCR5LjdUFcttT50jwR8d+yQeo\nGwKb71piq8n5oMA1+HV4LWo/CcozPb3tDPxtN/4q7kSsSKNwSdbzizt4/mMU8QUt\ngmrOvCIPd3LVq9mVcOg5axOTCU0MvcB7v89FhHnAOG8tBJHp3UZEBXUSYgJO5Kty\nhyKbB1nMQ5pPup5n17SeanDst54nnfKXzL4k8V1sEMVj8gmdetSl1k8/IVsg+VY4\nbl8l3YYEQuuXnV9qENb0etGcALqJeBqGFxjgYd6wbnNCxIRV7h8nrf/3C7mY+jQk\nTZNgSHM+HfpBCtcYs87tm1l76hwsItJKIILl/LyYQqmXXAT5oMamxb2H7aU5UVXI\neSGRTd9ecwiqQNP/PEHxWgzMX6RJZT+LJSP/eMCIinCxU7/b/3ABoBaA5wAGqAtA\njVkqUx21dmPUpUz2hUb9WztozOZ/ROnY7dx1PX5yPjil1x1XsKQ=\n=Lu/a\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMwZZn/NC9TxMjs47bN3aLKphi3XCMMG+ah3nSWPzzBjCP/wEEwV1nwJBxCH\nqu+/z10KmkAI8QRfrRHP8AgGeZD3nNcK8ACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEHDalB2uUANsoPbFalhfvQYI\n8QRfrRHM8AhEN5+fBWdTEwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEL9Fo+ZPyF+iKwAd/O1P2K8I8QRfrRHM8AhI9D72QsNK\nCACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn8BDKTy+TyciruYd6+SFV/yg3CPEEX60RzPAIp3AFLur1H2MAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree dab6b75472ce08191dd6b70a296376d7e8893091\nparent be481b72e24fb6834bd674cd8daee67c6938b42d\nauthor Jon Atack <jon@atack.com> 1604553137 +0100\ncommitter Jon Atack <jon@atack.com> 1605177802 +0100\n\nwallet: update sendtoaddress, send RPC examples with fee_rate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a670b4f07a6140de809d73cbd7f3e614eb6ea74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a670b4f07a6140de809d73cbd7f3e614eb6ea74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a670b4f07a6140de809d73cbd7f3e614eb6ea74/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be481b72e24fb6834bd674cd8daee67c6938b42d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be481b72e24fb6834bd674cd8daee67c6938b42d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be481b72e24fb6834bd674cd8daee67c6938b42d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d20a819a02e0cb4b2fc631b81aadfb71b1f4e321",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a670b4f07a6140de809d73cbd7f3e614eb6ea74/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a670b4f07a6140de809d73cbd7f3e614eb6ea74/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9a670b4f07a6140de809d73cbd7f3e614eb6ea74",
        "patch": "@@ -459,12 +459,17 @@ static RPCHelpMan sendtoaddress()\n                     },\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 0.00002 \" + (CURRENCY_UNIT + \"/kB\"))\n-            + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 2 \" + (CURRENCY_ATOM + \"/B\"))\n-            + HelpExampleRpc(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n+                    \"\\nSend 0.1 BTC\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\") +\n+                    \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"sean's outpost\\\" false true 6 economical\") +\n+                    \"\\nSend 0.1 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB, subtract fee from amount, BIP125-replaceable, using positional arguments\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"drinks\\\" \\\"room77\\\" true true 0 \\\"\\\" 1\") +\n+                    \"\\nSend 0.2 BTC with a confirmation target of 6 blocks in economical fee estimate mode using named arguments\\n\"\n+                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.2 conf_target=6 estimate_mode=\\\"economical\\\"\") +\n+                    \"\\nSend 0.5 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.5 fee_rate=25\")\n+                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.5 fee_rate=25 subtractfeefromamount=false replaceable=true avoid_reuse=true comment=\\\"2 pizzas\\\" comment_to=\\\"jeremy\\\" verbose=true\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n@@ -4064,9 +4069,15 @@ static RPCHelpMan send()\n                 }\n         },\n         RPCExamples{\"\"\n-        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\") +\n-            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\"\n+        \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 6 economical\\n\") +\n+        \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' 0 \\\"\\\" 1\\n\") +\n+        \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' '{\\\"fee_rate\\\": 1}'\\n\") +\n+        \"Send 0.3 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named send\", \"outputs='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.3}' fee_rate=25\\n\") +\n+        \"Create a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\"\n         + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue"
      }
    ]
  },
  {
    "sha": "05e82d86b09d914ebce05dbc92a7299cb026847b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWU4MmQ4NmIwOWQ5MTRlYmNlMDVkYmM5MmE3Mjk5Y2IwMjY4NDdi",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-12T10:16:48Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-12T10:44:15Z"
      },
      "message": "wallet: override minfee checks (fOverrideFeeRate) for fee_rate\n\nin RPCs fundrawtransaction and walletcreatefundedpsbt only.\n\nThis provides the existing feeRate (BTC/kvB) behavior in these two RPCs to the\nnew fee_rate (sat/vB) param also.\n\nSee these two GitHub review discussions for more info:\nhttps://github.com/bitcoin/bitcoin/pull/10706/#discussion_r126560525\nhttps://github.com/bitcoin/bitcoin/pull/20305#discussion_r520032533",
      "tree": {
        "sha": "8b195c88b03678af4cad58226faaf6bcec00d1fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b195c88b03678af4cad58226faaf6bcec00d1fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05e82d86b09d914ebce05dbc92a7299cb026847b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+tEmYACgkQT1chs9Dj\nkh0vMxAAn6ac+aYP4fVMMU+D4dEEabvxWtkXWRETuDe8KsJOrArCnjpN+IxeLGXZ\nsJW+Yph8ZTPZhx9k9AP/FuG17huX22Knaz6k11qFZe+YnAaDugHbJ0AnIbuQbuCr\nXxbxjJLM6+vJdHFPneQgunFjZCWA/6H+JFac0TvemPd9fVxjztMPsWXBq4c7gzf2\nx7GMcpuI0xRjJIZjmLy/i1Tqthyo5Gpv1SNvMzp1CgLM63DyXR4ARNmA/nmiBb7t\nqQuYXhLyc3Y0Bi3D6bPv/5K7wWEvFAUZUtsHsujSBf+j0ciaz+RoXdfx8W3s+TjC\n0QRy4KiBxVUQF4cAS7UrJAdsQtMHFpXvLpz4GxnbYLsrzUYw25bVd7D6lijhhSB5\ngRTqEJ7j/9YXK8NEGBc9rj/oMDEf1c4ijqFknvCFSkYJ6ilhbevOcdybW0j0Xdrc\njZ2SdKWDMyDgLgcIm6GUEE/K7kMDg4uc3EK0yEys9wXvI5Dal8tZzlzmiLF2ee6g\nxTKz9uzFOiDtib72L2UrAJkh+7d5eoB3oTq8jHX+2dHbD6VsbwcLw3M+WfGBjcDh\nOaEI8ZPmy7uQxxfQtUfgqVlP0fmFuB0YrY2O07LWJH3Bz5juV5z2/AeyXkXEtvYv\nMaeA7HKRRwHO1L6eG4iZX7BDZCjhhQ4z0lua5D3MnlOXyc8kBr4=\n=BubE\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBn6QJjYSAADBDJJT1hE5Hkgx+rB+9tpmD5iAF1l0OSTCP/wEIFiRwQlCYCL\ndlxitRWNctII8QRfrRJn8AgRbgBxghOYWgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEIyTqNwIy8uA3VPeICEF\nnQ0I8QRfrRJn8AgPFp7qyyXB7gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQtW6QbRWEaJG77JmB7umRQAjx\nBF+tEmfwCF5PA6/3KgHDAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BDqz2n32WI8bGyiP27Bgt+UCPEEX60SavAIuexuFOZ/V2gA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8b195c88b03678af4cad58226faaf6bcec00d1fc\nparent 9a670b4f07a6140de809d73cbd7f3e614eb6ea74\nauthor Jon Atack <jon@atack.com> 1605176208 +0100\ncommitter Jon Atack <jon@atack.com> 1605177855 +0100\n\nwallet: override minfee checks (fOverrideFeeRate) for fee_rate\n\nin RPCs fundrawtransaction and walletcreatefundedpsbt only.\n\nThis provides the existing feeRate (BTC/kvB) behavior in these two RPCs to the\nnew fee_rate (sat/vB) param also.\n\nSee these two GitHub review discussions for more info:\nhttps://github.com/bitcoin/bitcoin/pull/10706/#discussion_r126560525\nhttps://github.com/bitcoin/bitcoin/pull/20305#discussion_r520032533\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e82d86b09d914ebce05dbc92a7299cb026847b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05e82d86b09d914ebce05dbc92a7299cb026847b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e82d86b09d914ebce05dbc92a7299cb026847b/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a670b4f07a6140de809d73cbd7f3e614eb6ea74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a670b4f07a6140de809d73cbd7f3e614eb6ea74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a670b4f07a6140de809d73cbd7f3e614eb6ea74"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 37,
      "deletions": 31
    },
    "files": [
      {
        "sha": "25c6cf306d3bbfa1b0ad6661ae87d736502d1872",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 18,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05e82d86b09d914ebce05dbc92a7299cb026847b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05e82d86b09d914ebce05dbc92a7299cb026847b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=05e82d86b09d914ebce05dbc92a7299cb026847b",
        "patch": "@@ -197,17 +197,19 @@ static std::string LabelFromValue(const UniValue& value)\n /**\n  * Update coin control with fee estimation based on the given parameters\n  *\n- * @param[in]     pwallet        Wallet pointer\n- * @param[in,out] cc             Coin control which is to be updated\n- * @param[in]     conf_target    UniValue integer, confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\n- *                                   if a fee_rate is present, 0 is allowed here as a no-op positional placeholder\n- * @param[in]     estimate_mode  UniValue string, fee estimation mode, valid values are \"unset\", \"economical\" or \"conservative\";\n- *                                   if a fee_rate is present, \"\" is allowed here as a no-op positional placeholder\n- * @param[in]     fee_rate       UniValue real, fee rate in sat/vB;\n- *                                   if a fee_rate is present, both conf_target and estimate_mode must either be null, or no-op values\n+ * @param[in]     pwallet           Wallet pointer\n+ * @param[in,out] cc                Coin control to be updated\n+ * @param[in]     conf_target       UniValue integer; confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\n+ *                                      if a fee_rate is present, 0 is allowed here as a no-op positional placeholder\n+ * @param[in]     estimate_mode     UniValue string; fee estimation mode, valid values are \"unset\", \"economical\" or \"conservative\";\n+ *                                      if a fee_rate is present, \"\" is allowed here as a no-op positional placeholder\n+ * @param[in]     fee_rate          UniValue real; fee rate in sat/vB;\n+ *                                      if a fee_rate is present, both conf_target and estimate_mode must either be null, or no-op\n+ * @param[in]     override_min_fee  bool; whether to set fOverrideFeeRate to true to disable minimum fee rate checks and instead\n+ *                                      verify only that fee_rate is greater than 0\n  * @throws a JSONRPCError if conf_target, estimate_mode, or fee_rate contain invalid values or are in conflict\n  */\n-static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate)\n+static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate, bool override_min_fee)\n {\n     if (!fee_rate.isNull()) {\n         if (!conf_target.isNull() && conf_target.get_int() > 0) {\n@@ -216,7 +218,14 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n         if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n-        cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n+        CFeeRate fee_rate_in_sat_vb{CFeeRate(AmountFromValue(fee_rate), COIN)};\n+        if (override_min_fee) {\n+            if (fee_rate_in_sat_vb <= CFeeRate(0)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid fee_rate %s (must be greater than 0)\", fee_rate_in_sat_vb.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            cc.fOverrideFeeRate = true;\n+        }\n+        cc.m_feerate = fee_rate_in_sat_vb;\n         // Default RBF to true for explicit fee_rate, if unset.\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n         return;\n@@ -504,7 +513,7 @@ static RPCHelpMan sendtoaddress()\n     // We also enable partial spend avoidance if reuse avoidance is set.\n     coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n \n-    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[9]);\n+    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[9], /* override_min_fee */ false);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -932,7 +941,7 @@ static RPCHelpMan sendmany()\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n-    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[8]);\n+    SetFeeEstimateMode(pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[8], /* override_min_fee */ false);\n \n     std::vector<CRecipient> recipients;\n     ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n@@ -3049,7 +3058,7 @@ static RPCHelpMan listunspent()\n     };\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl)\n+void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl, bool override_min_fee)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -3154,7 +3163,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         if (options.exists(\"replaceable\")) {\n             coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"]);\n+        SetFeeEstimateMode(pwallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n       }\n     } else {\n         // if options is null and not a bool\n@@ -3275,7 +3284,7 @@ static RPCHelpMan fundrawtransaction()\n     CCoinControl coin_control;\n     // Automatically select (additional) coins. Can be overridden by options.add_inputs.\n     coin_control.m_add_inputs = true;\n-    FundTransaction(pwallet, tx, fee, change_position, request.params[1], coin_control);\n+    FundTransaction(pwallet, tx, fee, change_position, request.params[1], coin_control, /* override_min_fee */ true);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(tx)));\n@@ -3482,7 +3491,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n         if (options.exists(\"replaceable\")) {\n             coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n-        SetFeeEstimateMode(pwallet, coin_control, conf_target, options[\"estimate_mode\"], options[\"fee_rate\"]);\n+        SetFeeEstimateMode(pwallet, coin_control, conf_target, options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n     }\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -4146,7 +4155,7 @@ static RPCHelpMan send()\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control);\n+            FundTransaction(pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n             bool add_to_wallet = true;\n             if (options.exists(\"add_to_wallet\")) {\n@@ -4433,7 +4442,7 @@ static RPCHelpMan walletcreatefundedpsbt()\n     // Automatically select coins, unless at least one is manually selected. Can\n     // be overridden by options.add_inputs.\n     coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3], coin_control);\n+    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);"
      },
      {
        "sha": "f987867e611348a31acfdf8bf7a2124d4a3e55a1",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05e82d86b09d914ebce05dbc92a7299cb026847b/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05e82d86b09d914ebce05dbc92a7299cb026847b/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=05e82d86b09d914ebce05dbc92a7299cb026847b",
        "patch": "@@ -752,7 +752,7 @@ def test_option_feerate(self):\n                     node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True})\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.000 sat/vB (must be greater than 0)\",\n             node.fundrawtransaction, rawtx, {\"fee_rate\": 0, \"add_inputs\": True})\n         assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kvB (must be greater than 0)\",\n             node.fundrawtransaction, rawtx, {\"feeRate\": 0, \"add_inputs\": True})\n@@ -766,12 +766,9 @@ def test_option_feerate(self):\n             assert_raises_rpc_error(-3, \"Invalid amount\",\n                 node.fundrawtransaction, rawtx, {\"fee_rate\": \"\", \"add_inputs\": True})\n \n-        # Test setting explicit fee rate just below the minimum.\n-        self.log.info(\"- raises RPC error 'fee rate too low' if fee_rate of 0.99999999 sat/vB is passed\")\n-        msg = \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"\n-        assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n-        # This feeRate test only passes if `coinControl.fOverrideFeeRate = true` in wallet/rpcwallet.cpp::FundTransaction is removed.\n-        # assert_raises_rpc_error(-4, msg, node.fundrawtransaction, rawtx, {\"feeRate\": 0.00000999, \"add_inputs\": True})\n+        self.log.info(\"Test min fee rate checks are bypassed with fundrawtxn, e.g. a fee_rate under 1 sat/vB is allowed\")\n+        node.fundrawtransaction(rawtx, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n+        node.fundrawtransaction(rawtx, {\"feeRate\": 0.00000999, \"add_inputs\": True})\n \n         self.log.info(\"- raises RPC error if both feeRate and fee_rate are passed\")\n         assert_raises_rpc_error(-8, \"Cannot specify both fee_rate (sat/vB) and feeRate (BTC/kvB)\","
      },
      {
        "sha": "498197b5e5c6cfb4ba3277ba13e1d5627454d909",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05e82d86b09d914ebce05dbc92a7299cb026847b/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05e82d86b09d914ebce05dbc92a7299cb026847b/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=05e82d86b09d914ebce05dbc92a7299cb026847b",
        "patch": "@@ -192,9 +192,14 @@ def run_test(self):\n         assert_approx(res1[\"fee\"], 0.055, 0.005)\n         res2 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res2[\"fee\"], 0.055, 0.005)\n+        self.log.info(\"Test min fee rate checks with walletcreatefundedpsbt are bypassed, e.g. a fee_rate under 1 sat/vB is allowed\")\n+        res3 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n+        assert_approx(res3[\"fee\"], 0.00000381, 0.0000001)\n+        res4 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.00000999, \"add_inputs\": True})\n+        assert_approx(res4[\"fee\"], 0.00000381, 0.0000001)\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n+        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.000 sat/vB (must be greater than 0)\",\n             self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0, \"add_inputs\": True})\n         assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kvB (must be greater than 0)\",\n             self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"feeRate\": 0, \"add_inputs\": True})\n@@ -244,11 +249,6 @@ def run_test(self):\n                 assert_raises_rpc_error(-8, \"Invalid conf_target, must be between 1 and 1008\",  # max value of 1008 per src/policy/fees.h\n                     self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True})\n \n-        # Test setting explicit fee rate just below the minimum.\n-        self.log.info(\"- raises RPC error 'fee rate too low' if feerate_sat_vb of 0.99999999 is passed\")\n-        assert_raises_rpc_error(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\",\n-            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n-\n         self.log.info(\"Test walletcreatefundedpsbt with too-high fee rate produces total fee well above -maxtxfee and raises RPC error\")\n         # previously this was silently capped at -maxtxfee\n         for bool_add, outputs_array in {True: outputs, False: [{self.nodes[1].getnewaddress(): 1}]}.items():"
      }
    ]
  }
]